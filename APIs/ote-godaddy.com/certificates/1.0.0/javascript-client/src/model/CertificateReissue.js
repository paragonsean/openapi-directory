/**
 * 
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The CertificateReissue model module.
 * @module model/CertificateReissue
 * @version 1.0.0
 */
class CertificateReissue {
    /**
     * Constructs a new <code>CertificateReissue</code>.
     * @alias module:model/CertificateReissue
     */
    constructor() { 
        
        CertificateReissue.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
        obj['commonName'] = 'Existing common name';
        obj['csr'] = 'Existing CSR';
        obj['delayExistingRevoke'] = 72;
        obj['rootType'] = 'GODADDY_SHA_1';
    }

    /**
     * Constructs a <code>CertificateReissue</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/CertificateReissue} obj Optional instance to populate.
     * @return {module:model/CertificateReissue} The populated <code>CertificateReissue</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new CertificateReissue();

            if (data.hasOwnProperty('callbackUrl')) {
                obj['callbackUrl'] = ApiClient.convertToType(data['callbackUrl'], 'String');
            }
            if (data.hasOwnProperty('commonName')) {
                obj['commonName'] = ApiClient.convertToType(data['commonName'], 'String');
            }
            if (data.hasOwnProperty('csr')) {
                obj['csr'] = ApiClient.convertToType(data['csr'], 'String');
            }
            if (data.hasOwnProperty('delayExistingRevoke')) {
                obj['delayExistingRevoke'] = ApiClient.convertToType(data['delayExistingRevoke'], 'Number');
            }
            if (data.hasOwnProperty('forceDomainRevetting')) {
                obj['forceDomainRevetting'] = ApiClient.convertToType(data['forceDomainRevetting'], ['String']);
            }
            if (data.hasOwnProperty('rootType')) {
                obj['rootType'] = ApiClient.convertToType(data['rootType'], 'String');
            }
            if (data.hasOwnProperty('subjectAlternativeNames')) {
                obj['subjectAlternativeNames'] = ApiClient.convertToType(data['subjectAlternativeNames'], ['String']);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>CertificateReissue</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>CertificateReissue</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['callbackUrl'] && !(typeof data['callbackUrl'] === 'string' || data['callbackUrl'] instanceof String)) {
            throw new Error("Expected the field `callbackUrl` to be a primitive type in the JSON string but got " + data['callbackUrl']);
        }
        // ensure the json data is a string
        if (data['commonName'] && !(typeof data['commonName'] === 'string' || data['commonName'] instanceof String)) {
            throw new Error("Expected the field `commonName` to be a primitive type in the JSON string but got " + data['commonName']);
        }
        // ensure the json data is a string
        if (data['csr'] && !(typeof data['csr'] === 'string' || data['csr'] instanceof String)) {
            throw new Error("Expected the field `csr` to be a primitive type in the JSON string but got " + data['csr']);
        }
        // ensure the json data is an array
        if (!Array.isArray(data['forceDomainRevetting'])) {
            throw new Error("Expected the field `forceDomainRevetting` to be an array in the JSON data but got " + data['forceDomainRevetting']);
        }
        // ensure the json data is a string
        if (data['rootType'] && !(typeof data['rootType'] === 'string' || data['rootType'] instanceof String)) {
            throw new Error("Expected the field `rootType` to be a primitive type in the JSON string but got " + data['rootType']);
        }
        // ensure the json data is an array
        if (!Array.isArray(data['subjectAlternativeNames'])) {
            throw new Error("Expected the field `subjectAlternativeNames` to be an array in the JSON data but got " + data['subjectAlternativeNames']);
        }

        return true;
    }


}



/**
 * Required if client would like to receive stateful action via callback during certificate lifecyle
 * @member {String} callbackUrl
 */
CertificateReissue.prototype['callbackUrl'] = undefined;

/**
 * The common name of certificate to be secured
 * @member {String} commonName
 * @default 'Existing common name'
 */
CertificateReissue.prototype['commonName'] = 'Existing common name';

/**
 * Certificate Signing Request.
 * @member {String} csr
 * @default 'Existing CSR'
 */
CertificateReissue.prototype['csr'] = 'Existing CSR';

/**
 * In hours, time to delay revoking existing certificate after issuance of new certificate. If revokeExistingCertOnIssuance is enabled, this value will be ignored
 * @member {Number} delayExistingRevoke
 * @default 72
 */
CertificateReissue.prototype['delayExistingRevoke'] = 72;

/**
 * Optional field. Domain verification will be required for each domain listed here. Specify a value of * to indicate that all domains associated with the request should have their domain information reverified.
 * @member {Array.<String>} forceDomainRevetting
 */
CertificateReissue.prototype['forceDomainRevetting'] = undefined;

/**
 * Root Type. Depending on certificate expiration date, SHA_1 not be allowed. Will default to SHA_2 if expiration date exceeds sha1 allowed date
 * @member {module:model/CertificateReissue.RootTypeEnum} rootType
 * @default 'GODADDY_SHA_1'
 */
CertificateReissue.prototype['rootType'] = 'GODADDY_SHA_1';

/**
 * Only used for UCC products. An array of subject alternative names to include in certificate.
 * @member {Array.<String>} subjectAlternativeNames
 */
CertificateReissue.prototype['subjectAlternativeNames'] = undefined;





/**
 * Allowed values for the <code>rootType</code> property.
 * @enum {String}
 * @readonly
 */
CertificateReissue['RootTypeEnum'] = {

    /**
     * value: "GODADDY_SHA_1"
     * @const
     */
    "GODADDY_SHA_1": "GODADDY_SHA_1",

    /**
     * value: "GODADDY_SHA_2"
     * @const
     */
    "GODADDY_SHA_2": "GODADDY_SHA_2",

    /**
     * value: "STARFIELD_SHA_1"
     * @const
     */
    "STARFIELD_SHA_1": "STARFIELD_SHA_1",

    /**
     * value: "STARFIELD_SHA_2"
     * @const
     */
    "STARFIELD_SHA_2": "STARFIELD_SHA_2"
};



export default CertificateReissue;

