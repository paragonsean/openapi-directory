/**
 * 
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import CertificateContact from './CertificateContact';
import CertificateOrganization from './CertificateOrganization';

/**
 * The CertificateDetailV2 model module.
 * @module model/CertificateDetailV2
 * @version 1.0.0
 */
class CertificateDetailV2 {
    /**
     * Constructs a new <code>CertificateDetailV2</code>.
     * @alias module:model/CertificateDetailV2
     * @param certificateId {String} The unique identifier of the certificate request. Only present if no errors returned
     * @param commonName {String} Common name of certificate
     * @param contact {module:model/CertificateContact} 
     * @param createdAt {String} The date the certificate was ordered.
     * @param period {Number} Validity period of order. Specified in years
     * @param status {module:model/CertificateDetailV2.StatusEnum} Certificate status (if issued or revoked):    * `CANCELED` - Certificate request was canceled by customer   * `DENIED` - Certificate request was denied by customer\\n  * `EXPIRED` - Issued certificate has exceeded the valid end date   * `ISSUED` - Certificate has been issued and is within validity period   * `PENDING_ISSUANCE` - Certificate request has completed domain verification and is in the process of being issued   * `PENDING_REKEY` - Previously issued certificate was rekeyed by customer and is in the process of being reissued   * `PENDING_REVOCATION` - Previously issued certificate is in the process of being revoked   * `REVOKED` - Issued certificate has been revoked\\n  * `UNUSED` - Certificate in an error state 
     * @param type {module:model/CertificateDetailV2.TypeEnum} Certificate type:    * `DV_SSL` - (Domain Validated Secure Sockets Layer) SSL certificate validated using domain name only   * `DV_WILDCARD_SSL` - SSL certificate containing subdomains which is validated using domain name only   * `EV_SSL` - (Extended Validation) SSL certificate validated using organization information, domain name, business legal status, and other factors   * `OV_CODE_SIGNING` - Code signing SSL certificate used by software developers to digitally sign apps. Validated using organization information   * `OV_DRIVER_SIGNING` - Driver signing SSL certificate request used by software developers to digitally sign secure code for Windows hardware drivers. Validated using organization information   * `OV_SSL` - SSL certificate validated using organization information and domain name   * `OV_WILDCARD_SSL` - SSL certificate containing subdomains which is validated using organization information and domain name   * `UCC_DV_SSL` - (Unified Communication Certificate) Multi domain SSL certificate validated using domain name only   * `UCC_EV_SSL` - Multi domain SSL certificate validated using organization information, domain name, business legal status, and other factors   * `UCC_OV_SSL` - Multi domain SSL certificate validated using organization information and domain name 
     */
    constructor(certificateId, commonName, contact, createdAt, period, status, type) { 
        
        CertificateDetailV2.initialize(this, certificateId, commonName, contact, createdAt, period, status, type);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, certificateId, commonName, contact, createdAt, period, status, type) { 
        obj['certificateId'] = certificateId;
        obj['commonName'] = commonName;
        obj['contact'] = contact;
        obj['createdAt'] = createdAt;
        obj['period'] = period;
        obj['status'] = status;
        obj['type'] = type;
    }

    /**
     * Constructs a <code>CertificateDetailV2</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/CertificateDetailV2} obj Optional instance to populate.
     * @return {module:model/CertificateDetailV2} The populated <code>CertificateDetailV2</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new CertificateDetailV2();

            if (data.hasOwnProperty('certificateId')) {
                obj['certificateId'] = ApiClient.convertToType(data['certificateId'], 'String');
            }
            if (data.hasOwnProperty('commonName')) {
                obj['commonName'] = ApiClient.convertToType(data['commonName'], 'String');
            }
            if (data.hasOwnProperty('completedAt')) {
                obj['completedAt'] = ApiClient.convertToType(data['completedAt'], 'String');
            }
            if (data.hasOwnProperty('contact')) {
                obj['contact'] = CertificateContact.constructFromObject(data['contact']);
            }
            if (data.hasOwnProperty('createdAt')) {
                obj['createdAt'] = ApiClient.convertToType(data['createdAt'], 'String');
            }
            if (data.hasOwnProperty('csr')) {
                obj['csr'] = ApiClient.convertToType(data['csr'], 'String');
            }
            if (data.hasOwnProperty('deniedReason')) {
                obj['deniedReason'] = ApiClient.convertToType(data['deniedReason'], 'String');
            }
            if (data.hasOwnProperty('organization')) {
                obj['organization'] = CertificateOrganization.constructFromObject(data['organization']);
            }
            if (data.hasOwnProperty('period')) {
                obj['period'] = ApiClient.convertToType(data['period'], 'Number');
            }
            if (data.hasOwnProperty('progress')) {
                obj['progress'] = ApiClient.convertToType(data['progress'], 'Number');
            }
            if (data.hasOwnProperty('renewalAvailable')) {
                obj['renewalAvailable'] = ApiClient.convertToType(data['renewalAvailable'], 'Boolean');
            }
            if (data.hasOwnProperty('revokedAt')) {
                obj['revokedAt'] = ApiClient.convertToType(data['revokedAt'], 'String');
            }
            if (data.hasOwnProperty('rootType')) {
                obj['rootType'] = ApiClient.convertToType(data['rootType'], 'String');
            }
            if (data.hasOwnProperty('serialNumber')) {
                obj['serialNumber'] = ApiClient.convertToType(data['serialNumber'], 'String');
            }
            if (data.hasOwnProperty('serialNumberHex')) {
                obj['serialNumberHex'] = ApiClient.convertToType(data['serialNumberHex'], 'String');
            }
            if (data.hasOwnProperty('slotSize')) {
                obj['slotSize'] = ApiClient.convertToType(data['slotSize'], 'String');
            }
            if (data.hasOwnProperty('status')) {
                obj['status'] = ApiClient.convertToType(data['status'], 'String');
            }
            if (data.hasOwnProperty('subjectAlternativeNames')) {
                obj['subjectAlternativeNames'] = ApiClient.convertToType(data['subjectAlternativeNames'], ['String']);
            }
            if (data.hasOwnProperty('type')) {
                obj['type'] = ApiClient.convertToType(data['type'], 'String');
            }
            if (data.hasOwnProperty('validEndAt')) {
                obj['validEndAt'] = ApiClient.convertToType(data['validEndAt'], 'String');
            }
            if (data.hasOwnProperty('validStartAt')) {
                obj['validStartAt'] = ApiClient.convertToType(data['validStartAt'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>CertificateDetailV2</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>CertificateDetailV2</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of CertificateDetailV2.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // ensure the json data is a string
        if (data['certificateId'] && !(typeof data['certificateId'] === 'string' || data['certificateId'] instanceof String)) {
            throw new Error("Expected the field `certificateId` to be a primitive type in the JSON string but got " + data['certificateId']);
        }
        // ensure the json data is a string
        if (data['commonName'] && !(typeof data['commonName'] === 'string' || data['commonName'] instanceof String)) {
            throw new Error("Expected the field `commonName` to be a primitive type in the JSON string but got " + data['commonName']);
        }
        // ensure the json data is a string
        if (data['completedAt'] && !(typeof data['completedAt'] === 'string' || data['completedAt'] instanceof String)) {
            throw new Error("Expected the field `completedAt` to be a primitive type in the JSON string but got " + data['completedAt']);
        }
        // validate the optional field `contact`
        if (data['contact']) { // data not null
          CertificateContact.validateJSON(data['contact']);
        }
        // ensure the json data is a string
        if (data['createdAt'] && !(typeof data['createdAt'] === 'string' || data['createdAt'] instanceof String)) {
            throw new Error("Expected the field `createdAt` to be a primitive type in the JSON string but got " + data['createdAt']);
        }
        // ensure the json data is a string
        if (data['csr'] && !(typeof data['csr'] === 'string' || data['csr'] instanceof String)) {
            throw new Error("Expected the field `csr` to be a primitive type in the JSON string but got " + data['csr']);
        }
        // ensure the json data is a string
        if (data['deniedReason'] && !(typeof data['deniedReason'] === 'string' || data['deniedReason'] instanceof String)) {
            throw new Error("Expected the field `deniedReason` to be a primitive type in the JSON string but got " + data['deniedReason']);
        }
        // validate the optional field `organization`
        if (data['organization']) { // data not null
          CertificateOrganization.validateJSON(data['organization']);
        }
        // ensure the json data is a string
        if (data['revokedAt'] && !(typeof data['revokedAt'] === 'string' || data['revokedAt'] instanceof String)) {
            throw new Error("Expected the field `revokedAt` to be a primitive type in the JSON string but got " + data['revokedAt']);
        }
        // ensure the json data is a string
        if (data['rootType'] && !(typeof data['rootType'] === 'string' || data['rootType'] instanceof String)) {
            throw new Error("Expected the field `rootType` to be a primitive type in the JSON string but got " + data['rootType']);
        }
        // ensure the json data is a string
        if (data['serialNumber'] && !(typeof data['serialNumber'] === 'string' || data['serialNumber'] instanceof String)) {
            throw new Error("Expected the field `serialNumber` to be a primitive type in the JSON string but got " + data['serialNumber']);
        }
        // ensure the json data is a string
        if (data['serialNumberHex'] && !(typeof data['serialNumberHex'] === 'string' || data['serialNumberHex'] instanceof String)) {
            throw new Error("Expected the field `serialNumberHex` to be a primitive type in the JSON string but got " + data['serialNumberHex']);
        }
        // ensure the json data is a string
        if (data['slotSize'] && !(typeof data['slotSize'] === 'string' || data['slotSize'] instanceof String)) {
            throw new Error("Expected the field `slotSize` to be a primitive type in the JSON string but got " + data['slotSize']);
        }
        // ensure the json data is a string
        if (data['status'] && !(typeof data['status'] === 'string' || data['status'] instanceof String)) {
            throw new Error("Expected the field `status` to be a primitive type in the JSON string but got " + data['status']);
        }
        // ensure the json data is an array
        if (!Array.isArray(data['subjectAlternativeNames'])) {
            throw new Error("Expected the field `subjectAlternativeNames` to be an array in the JSON data but got " + data['subjectAlternativeNames']);
        }
        // ensure the json data is a string
        if (data['type'] && !(typeof data['type'] === 'string' || data['type'] instanceof String)) {
            throw new Error("Expected the field `type` to be a primitive type in the JSON string but got " + data['type']);
        }
        // ensure the json data is a string
        if (data['validEndAt'] && !(typeof data['validEndAt'] === 'string' || data['validEndAt'] instanceof String)) {
            throw new Error("Expected the field `validEndAt` to be a primitive type in the JSON string but got " + data['validEndAt']);
        }
        // ensure the json data is a string
        if (data['validStartAt'] && !(typeof data['validStartAt'] === 'string' || data['validStartAt'] instanceof String)) {
            throw new Error("Expected the field `validStartAt` to be a primitive type in the JSON string but got " + data['validStartAt']);
        }

        return true;
    }


}

CertificateDetailV2.RequiredProperties = ["certificateId", "commonName", "contact", "createdAt", "period", "status", "type"];

/**
 * The unique identifier of the certificate request. Only present if no errors returned
 * @member {String} certificateId
 */
CertificateDetailV2.prototype['certificateId'] = undefined;

/**
 * Common name of certificate
 * @member {String} commonName
 */
CertificateDetailV2.prototype['commonName'] = undefined;

/**
 * The date the certificate request completed processing.
 * @member {String} completedAt
 */
CertificateDetailV2.prototype['completedAt'] = undefined;

/**
 * @member {module:model/CertificateContact} contact
 */
CertificateDetailV2.prototype['contact'] = undefined;

/**
 * The date the certificate was ordered.
 * @member {String} createdAt
 */
CertificateDetailV2.prototype['createdAt'] = undefined;

/**
 * Certificate signing request (if present) in PEM format
 * @member {String} csr
 */
CertificateDetailV2.prototype['csr'] = undefined;

/**
 * Only present if certificate order has been denied
 * @member {String} deniedReason
 */
CertificateDetailV2.prototype['deniedReason'] = undefined;

/**
 * @member {module:model/CertificateOrganization} organization
 */
CertificateDetailV2.prototype['organization'] = undefined;

/**
 * Validity period of order. Specified in years
 * @member {Number} period
 */
CertificateDetailV2.prototype['period'] = undefined;

/**
 * Percentage of completion for certificate vetting
 * @member {Number} progress
 */
CertificateDetailV2.prototype['progress'] = undefined;

/**
 * Only returned when a renewal is available.
 * @member {Boolean} renewalAvailable
 */
CertificateDetailV2.prototype['renewalAvailable'] = undefined;

/**
 * The revocation date of certificate (if revoked).
 * @member {String} revokedAt
 */
CertificateDetailV2.prototype['revokedAt'] = undefined;

/**
 * Root type:    * `GODADDY_SHA_1` - GoDaddy (Secure Hash Algorithm 1) SHA-1 root type   * `GODADDY_SHA_2` - GoDaddy (Secure Hash Algorithm 2) SHA-2 root type   * `STARFIELD_SHA_1` - Starfield SHA-1 root type   * `STARFIELD_SHA_2` - Starfield SHA-2 root type 
 * @member {module:model/CertificateDetailV2.RootTypeEnum} rootType
 */
CertificateDetailV2.prototype['rootType'] = undefined;

/**
 * Serial number of certificate (if issued or revoked)
 * @member {String} serialNumber
 */
CertificateDetailV2.prototype['serialNumber'] = undefined;

/**
 * Hexadecmial format for Serial number of certificate(if issued or revoked)
 * @member {String} serialNumberHex
 */
CertificateDetailV2.prototype['serialNumberHex'] = undefined;

/**
 * Number of subject alternative names (SAN) to be included in certificate (if UCC):    * `FIVE` - Five slot UCC request   * `TEN` - Ten slot UCC request   * `FIFTEEN` - Fifteen slot UCC request   * `TWENTY` - Twenty slot UCC request   * `THIRTY` - Thirty slot UCC request   * `FOURTY` - Fourty slot UCC request   * `FIFTY` - Fifty slot UCC request   * `ONE_HUNDRED` - One hundred slot UCC request 
 * @member {module:model/CertificateDetailV2.SlotSizeEnum} slotSize
 */
CertificateDetailV2.prototype['slotSize'] = undefined;

/**
 * Certificate status (if issued or revoked):    * `CANCELED` - Certificate request was canceled by customer   * `DENIED` - Certificate request was denied by customer\\n  * `EXPIRED` - Issued certificate has exceeded the valid end date   * `ISSUED` - Certificate has been issued and is within validity period   * `PENDING_ISSUANCE` - Certificate request has completed domain verification and is in the process of being issued   * `PENDING_REKEY` - Previously issued certificate was rekeyed by customer and is in the process of being reissued   * `PENDING_REVOCATION` - Previously issued certificate is in the process of being revoked   * `REVOKED` - Issued certificate has been revoked\\n  * `UNUSED` - Certificate in an error state 
 * @member {module:model/CertificateDetailV2.StatusEnum} status
 */
CertificateDetailV2.prototype['status'] = undefined;

/**
 * Subject Alternative names. Collection of subjectAlternativeNames to be included in certificate.
 * @member {Array.<String>} subjectAlternativeNames
 */
CertificateDetailV2.prototype['subjectAlternativeNames'] = undefined;

/**
 * Certificate type:    * `DV_SSL` - (Domain Validated Secure Sockets Layer) SSL certificate validated using domain name only   * `DV_WILDCARD_SSL` - SSL certificate containing subdomains which is validated using domain name only   * `EV_SSL` - (Extended Validation) SSL certificate validated using organization information, domain name, business legal status, and other factors   * `OV_CODE_SIGNING` - Code signing SSL certificate used by software developers to digitally sign apps. Validated using organization information   * `OV_DRIVER_SIGNING` - Driver signing SSL certificate request used by software developers to digitally sign secure code for Windows hardware drivers. Validated using organization information   * `OV_SSL` - SSL certificate validated using organization information and domain name   * `OV_WILDCARD_SSL` - SSL certificate containing subdomains which is validated using organization information and domain name   * `UCC_DV_SSL` - (Unified Communication Certificate) Multi domain SSL certificate validated using domain name only   * `UCC_EV_SSL` - Multi domain SSL certificate validated using organization information, domain name, business legal status, and other factors   * `UCC_OV_SSL` - Multi domain SSL certificate validated using organization information and domain name 
 * @member {module:model/CertificateDetailV2.TypeEnum} type
 */
CertificateDetailV2.prototype['type'] = undefined;

/**
 * The end date of the certificate's validity (if issued or revoked).
 * @member {String} validEndAt
 */
CertificateDetailV2.prototype['validEndAt'] = undefined;

/**
 * The start date of the certificate's validity (if issued or revoked).
 * @member {String} validStartAt
 */
CertificateDetailV2.prototype['validStartAt'] = undefined;





/**
 * Allowed values for the <code>rootType</code> property.
 * @enum {String}
 * @readonly
 */
CertificateDetailV2['RootTypeEnum'] = {

    /**
     * value: "GODADDY_SHA_1"
     * @const
     */
    "GODADDY_SHA_1": "GODADDY_SHA_1",

    /**
     * value: "GODADDY_SHA_2"
     * @const
     */
    "GODADDY_SHA_2": "GODADDY_SHA_2",

    /**
     * value: "STARFIELD_SHA_1"
     * @const
     */
    "STARFIELD_SHA_1": "STARFIELD_SHA_1",

    /**
     * value: "STARFIELD_SHA_2"
     * @const
     */
    "STARFIELD_SHA_2": "STARFIELD_SHA_2"
};


/**
 * Allowed values for the <code>slotSize</code> property.
 * @enum {String}
 * @readonly
 */
CertificateDetailV2['SlotSizeEnum'] = {

    /**
     * value: "FIVE"
     * @const
     */
    "FIVE": "FIVE",

    /**
     * value: "TEN"
     * @const
     */
    "TEN": "TEN",

    /**
     * value: "FIFTEEN"
     * @const
     */
    "FIFTEEN": "FIFTEEN",

    /**
     * value: "TWENTY"
     * @const
     */
    "TWENTY": "TWENTY",

    /**
     * value: "THIRTY"
     * @const
     */
    "THIRTY": "THIRTY",

    /**
     * value: "FOURTY"
     * @const
     */
    "FOURTY": "FOURTY",

    /**
     * value: "FIFTY"
     * @const
     */
    "FIFTY": "FIFTY",

    /**
     * value: "ONE_HUNDRED"
     * @const
     */
    "ONE_HUNDRED": "ONE_HUNDRED"
};


/**
 * Allowed values for the <code>status</code> property.
 * @enum {String}
 * @readonly
 */
CertificateDetailV2['StatusEnum'] = {

    /**
     * value: "PENDING_ISSUANCE"
     * @const
     */
    "PENDING_ISSUANCE": "PENDING_ISSUANCE",

    /**
     * value: "ISSUED"
     * @const
     */
    "ISSUED": "ISSUED",

    /**
     * value: "REVOKED"
     * @const
     */
    "REVOKED": "REVOKED",

    /**
     * value: "CANCELED"
     * @const
     */
    "CANCELED": "CANCELED",

    /**
     * value: "DENIED"
     * @const
     */
    "DENIED": "DENIED",

    /**
     * value: "PENDING_REVOCATION"
     * @const
     */
    "PENDING_REVOCATION": "PENDING_REVOCATION",

    /**
     * value: "PENDING_REKEY"
     * @const
     */
    "PENDING_REKEY": "PENDING_REKEY",

    /**
     * value: "UNUSED"
     * @const
     */
    "UNUSED": "UNUSED",

    /**
     * value: "EXPIRED"
     * @const
     */
    "EXPIRED": "EXPIRED"
};


/**
 * Allowed values for the <code>type</code> property.
 * @enum {String}
 * @readonly
 */
CertificateDetailV2['TypeEnum'] = {

    /**
     * value: "DV_SSL"
     * @const
     */
    "DV_SSL": "DV_SSL",

    /**
     * value: "DV_WILDCARD_SSL"
     * @const
     */
    "DV_WILDCARD_SSL": "DV_WILDCARD_SSL",

    /**
     * value: "EV_SSL"
     * @const
     */
    "EV_SSL": "EV_SSL",

    /**
     * value: "OV_CODE_SIGNING"
     * @const
     */
    "OV_CODE_SIGNING": "OV_CODE_SIGNING",

    /**
     * value: "OV_DRIVER_SIGNING"
     * @const
     */
    "OV_DRIVER_SIGNING": "OV_DRIVER_SIGNING",

    /**
     * value: "OV_SSL"
     * @const
     */
    "OV_SSL": "OV_SSL",

    /**
     * value: "OV_WILDCARD_SSL"
     * @const
     */
    "OV_WILDCARD_SSL": "OV_WILDCARD_SSL",

    /**
     * value: "UCC_DV_SSL"
     * @const
     */
    "UCC_DV_SSL": "UCC_DV_SSL",

    /**
     * value: "UCC_EV_SSL"
     * @const
     */
    "UCC_EV_SSL": "UCC_EV_SSL",

    /**
     * value: "UCC_OV_SSL"
     * @const
     */
    "UCC_OV_SSL": "UCC_OV_SSL"
};



export default CertificateDetailV2;

