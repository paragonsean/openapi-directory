/**
 * 
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import PEMCertificates from './PEMCertificates';

/**
 * The CertificateBundle model module.
 * @module model/CertificateBundle
 * @version 1.0.0
 */
class CertificateBundle {
    /**
     * Constructs a new <code>CertificateBundle</code>.
     * @alias module:model/CertificateBundle
     * @param pems {module:model/PEMCertificates} 
     * @param serialNumber {String} Serial number of certificate requested
     */
    constructor(pems, serialNumber) { 
        
        CertificateBundle.initialize(this, pems, serialNumber);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, pems, serialNumber) { 
        obj['pems'] = pems;
        obj['serialNumber'] = serialNumber;
    }

    /**
     * Constructs a <code>CertificateBundle</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/CertificateBundle} obj Optional instance to populate.
     * @return {module:model/CertificateBundle} The populated <code>CertificateBundle</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new CertificateBundle();

            if (data.hasOwnProperty('pems')) {
                obj['pems'] = PEMCertificates.constructFromObject(data['pems']);
            }
            if (data.hasOwnProperty('serialNumber')) {
                obj['serialNumber'] = ApiClient.convertToType(data['serialNumber'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>CertificateBundle</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>CertificateBundle</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of CertificateBundle.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // validate the optional field `pems`
        if (data['pems']) { // data not null
          PEMCertificates.validateJSON(data['pems']);
        }
        // ensure the json data is a string
        if (data['serialNumber'] && !(typeof data['serialNumber'] === 'string' || data['serialNumber'] instanceof String)) {
            throw new Error("Expected the field `serialNumber` to be a primitive type in the JSON string but got " + data['serialNumber']);
        }

        return true;
    }


}

CertificateBundle.RequiredProperties = ["pems", "serialNumber"];

/**
 * @member {module:model/PEMCertificates} pems
 */
CertificateBundle.prototype['pems'] = undefined;

/**
 * Serial number of certificate requested
 * @member {String} serialNumber
 */
CertificateBundle.prototype['serialNumber'] = undefined;






export default CertificateBundle;

