/**
 * 
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The DomainVerificationSummary model module.
 * @module model/DomainVerificationSummary
 * @version 1.0.0
 */
class DomainVerificationSummary {
    /**
     * Constructs a new <code>DomainVerificationSummary</code>.
     * @alias module:model/DomainVerificationSummary
     * @param createdAt {String} Timestamp indicating when the domain verification process was started
     * @param domain {String} Domain name
     * @param domainEntityId {Number} A unique identifier that can be leveraged for retrieving domain verification related information. Primarily used when troubleshooting a request
     * @param modifiedAt {String} Timestamp indicating when the domain verification process was last updated
     * @param status {module:model/DomainVerificationSummary.StatusEnum} Domain verification status:    * `AWAITING` - Verification pending customer input   * `INVALID` - SAN connected to a cancelled request   * `COMPLETED` - Verification completed   * `FAILED_VERIFICATION` - Verification failed   * `PENDING_POSSIBLE_FRAUD` - Flagged for a system level fraud review   * `VERIFIED_POSSIBLE_FRAUD` - Fraud detection reviewed but verified   * `DROPPED` - SAN dropped from request   * `REVOKED_CERT` - Certificate revoked   * `DROPPED_GOOGLE_SAFE_BROWSING` - SAN dropped from request due to Google Safe Browsing check   * `DROPPED_CERTIFICATE_AUTHORITY_AUTHORIZATION` - SAN dropped from request due to Certificate Authorization Authority DNS record check 
     * @param type {module:model/DomainVerificationSummary.TypeEnum} Domain verification type:    * `AUTO_GENERATED_DOMAIN_ACCESS_EMAIL_ADMIN` - Domain verified using domain control verification email sent to admin@<your.domain.com>   * `AUTO_GENERATED_DOMAIN_ACCESS_EMAIL_ADMINSTRATOR` - Domain verified using domain control verification email sent to administrator@<your.domain.com>   * `AUTO_GENERATED_DOMAIN_ACCESS_EMAIL_HOST_MASTER` - Domain verified using domain control verification email sent to hostmaster@<your.domain.com>   * `AUTO_GENERATED_DOMAIN_ACCESS_EMAIL_POST_MASTER` - Domain verified using domain control verification email sent to postmaster@<your.domain.com>   * `AUTO_GENERATED_DOMAIN_ACCESS_EMAIL_WEB_MASTER` - Domain verified using domain control verification email sent to webmaster@<your.domain.com>   * `DOMAIN_ACCESS_EMAIL` - Domain verified using a domain access email   * `DOMAIN_ACCESS_LETTER` - Customer completed a domain access letter which was used for domain verification   * `DOMAIN_CONTROL_EMAIL` - Domain verified using HTML file or DNS zone file text value   * `DOMAIN_ZONE_CONTROL` - DNS zone file containing a pre-generated text value used for domain verification   * `MANUAL_DOMAIN_ACCESS_EMAIL` - DAE sent to an email address manually entered by a rep   * `PREVIOUS_DOMAIN_ACCESS_EMAIL` - Customers domain access email for a prior certificate request was used for domain verification   * `REGISTRATION_AUTHORITY_DOMAIN_ACCESS_LETTER` - Representative reviewed a customer provided domain access letter and verified domain   * `REGISTRATION_AUTHORITY_DOMAIN_ZONE_CONTROL` - Representative verified domain using a manual domain zone control check   * `REGISTRATION_AUTHORITY_OVERRIDE` - Representative verified domain using alternative methods   * `REGISTRATION_AUTHORITY_WEBSITE_CONTROL` - Representative verified domain using a manual website control check   * `CUSTOMER_OWNED` - Validated customer account information used for domain control verification   * `WEBSITE_CONTROL` - HTML file in root website directory containing pre-generated value used for domain control verification 
     * @param usage {module:model/DomainVerificationSummary.UsageEnum} Type of domain name used for domain verification
     */
    constructor(createdAt, domain, domainEntityId, modifiedAt, status, type, usage) { 
        
        DomainVerificationSummary.initialize(this, createdAt, domain, domainEntityId, modifiedAt, status, type, usage);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, createdAt, domain, domainEntityId, modifiedAt, status, type, usage) { 
        obj['createdAt'] = createdAt;
        obj['domain'] = domain;
        obj['domainEntityId'] = domainEntityId;
        obj['modifiedAt'] = modifiedAt;
        obj['status'] = status;
        obj['type'] = type;
        obj['usage'] = usage;
    }

    /**
     * Constructs a <code>DomainVerificationSummary</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/DomainVerificationSummary} obj Optional instance to populate.
     * @return {module:model/DomainVerificationSummary} The populated <code>DomainVerificationSummary</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new DomainVerificationSummary();

            if (data.hasOwnProperty('createdAt')) {
                obj['createdAt'] = ApiClient.convertToType(data['createdAt'], 'String');
            }
            if (data.hasOwnProperty('dceToken')) {
                obj['dceToken'] = ApiClient.convertToType(data['dceToken'], 'String');
            }
            if (data.hasOwnProperty('domain')) {
                obj['domain'] = ApiClient.convertToType(data['domain'], 'String');
            }
            if (data.hasOwnProperty('domainEntityId')) {
                obj['domainEntityId'] = ApiClient.convertToType(data['domainEntityId'], 'Number');
            }
            if (data.hasOwnProperty('modifiedAt')) {
                obj['modifiedAt'] = ApiClient.convertToType(data['modifiedAt'], 'String');
            }
            if (data.hasOwnProperty('status')) {
                obj['status'] = ApiClient.convertToType(data['status'], 'String');
            }
            if (data.hasOwnProperty('type')) {
                obj['type'] = ApiClient.convertToType(data['type'], 'String');
            }
            if (data.hasOwnProperty('usage')) {
                obj['usage'] = ApiClient.convertToType(data['usage'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>DomainVerificationSummary</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>DomainVerificationSummary</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of DomainVerificationSummary.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // ensure the json data is a string
        if (data['createdAt'] && !(typeof data['createdAt'] === 'string' || data['createdAt'] instanceof String)) {
            throw new Error("Expected the field `createdAt` to be a primitive type in the JSON string but got " + data['createdAt']);
        }
        // ensure the json data is a string
        if (data['dceToken'] && !(typeof data['dceToken'] === 'string' || data['dceToken'] instanceof String)) {
            throw new Error("Expected the field `dceToken` to be a primitive type in the JSON string but got " + data['dceToken']);
        }
        // ensure the json data is a string
        if (data['domain'] && !(typeof data['domain'] === 'string' || data['domain'] instanceof String)) {
            throw new Error("Expected the field `domain` to be a primitive type in the JSON string but got " + data['domain']);
        }
        // ensure the json data is a string
        if (data['modifiedAt'] && !(typeof data['modifiedAt'] === 'string' || data['modifiedAt'] instanceof String)) {
            throw new Error("Expected the field `modifiedAt` to be a primitive type in the JSON string but got " + data['modifiedAt']);
        }
        // ensure the json data is a string
        if (data['status'] && !(typeof data['status'] === 'string' || data['status'] instanceof String)) {
            throw new Error("Expected the field `status` to be a primitive type in the JSON string but got " + data['status']);
        }
        // ensure the json data is a string
        if (data['type'] && !(typeof data['type'] === 'string' || data['type'] instanceof String)) {
            throw new Error("Expected the field `type` to be a primitive type in the JSON string but got " + data['type']);
        }
        // ensure the json data is a string
        if (data['usage'] && !(typeof data['usage'] === 'string' || data['usage'] instanceof String)) {
            throw new Error("Expected the field `usage` to be a primitive type in the JSON string but got " + data['usage']);
        }

        return true;
    }


}

DomainVerificationSummary.RequiredProperties = ["createdAt", "domain", "domainEntityId", "modifiedAt", "status", "type", "usage"];

/**
 * Timestamp indicating when the domain verification process was started
 * @member {String} createdAt
 */
DomainVerificationSummary.prototype['createdAt'] = undefined;

/**
 * DCE verification type token (if DCE verification type).
 * @member {String} dceToken
 */
DomainVerificationSummary.prototype['dceToken'] = undefined;

/**
 * Domain name
 * @member {String} domain
 */
DomainVerificationSummary.prototype['domain'] = undefined;

/**
 * A unique identifier that can be leveraged for retrieving domain verification related information. Primarily used when troubleshooting a request
 * @member {Number} domainEntityId
 */
DomainVerificationSummary.prototype['domainEntityId'] = undefined;

/**
 * Timestamp indicating when the domain verification process was last updated
 * @member {String} modifiedAt
 */
DomainVerificationSummary.prototype['modifiedAt'] = undefined;

/**
 * Domain verification status:    * `AWAITING` - Verification pending customer input   * `INVALID` - SAN connected to a cancelled request   * `COMPLETED` - Verification completed   * `FAILED_VERIFICATION` - Verification failed   * `PENDING_POSSIBLE_FRAUD` - Flagged for a system level fraud review   * `VERIFIED_POSSIBLE_FRAUD` - Fraud detection reviewed but verified   * `DROPPED` - SAN dropped from request   * `REVOKED_CERT` - Certificate revoked   * `DROPPED_GOOGLE_SAFE_BROWSING` - SAN dropped from request due to Google Safe Browsing check   * `DROPPED_CERTIFICATE_AUTHORITY_AUTHORIZATION` - SAN dropped from request due to Certificate Authorization Authority DNS record check 
 * @member {module:model/DomainVerificationSummary.StatusEnum} status
 */
DomainVerificationSummary.prototype['status'] = undefined;

/**
 * Domain verification type:    * `AUTO_GENERATED_DOMAIN_ACCESS_EMAIL_ADMIN` - Domain verified using domain control verification email sent to admin@<your.domain.com>   * `AUTO_GENERATED_DOMAIN_ACCESS_EMAIL_ADMINSTRATOR` - Domain verified using domain control verification email sent to administrator@<your.domain.com>   * `AUTO_GENERATED_DOMAIN_ACCESS_EMAIL_HOST_MASTER` - Domain verified using domain control verification email sent to hostmaster@<your.domain.com>   * `AUTO_GENERATED_DOMAIN_ACCESS_EMAIL_POST_MASTER` - Domain verified using domain control verification email sent to postmaster@<your.domain.com>   * `AUTO_GENERATED_DOMAIN_ACCESS_EMAIL_WEB_MASTER` - Domain verified using domain control verification email sent to webmaster@<your.domain.com>   * `DOMAIN_ACCESS_EMAIL` - Domain verified using a domain access email   * `DOMAIN_ACCESS_LETTER` - Customer completed a domain access letter which was used for domain verification   * `DOMAIN_CONTROL_EMAIL` - Domain verified using HTML file or DNS zone file text value   * `DOMAIN_ZONE_CONTROL` - DNS zone file containing a pre-generated text value used for domain verification   * `MANUAL_DOMAIN_ACCESS_EMAIL` - DAE sent to an email address manually entered by a rep   * `PREVIOUS_DOMAIN_ACCESS_EMAIL` - Customers domain access email for a prior certificate request was used for domain verification   * `REGISTRATION_AUTHORITY_DOMAIN_ACCESS_LETTER` - Representative reviewed a customer provided domain access letter and verified domain   * `REGISTRATION_AUTHORITY_DOMAIN_ZONE_CONTROL` - Representative verified domain using a manual domain zone control check   * `REGISTRATION_AUTHORITY_OVERRIDE` - Representative verified domain using alternative methods   * `REGISTRATION_AUTHORITY_WEBSITE_CONTROL` - Representative verified domain using a manual website control check   * `CUSTOMER_OWNED` - Validated customer account information used for domain control verification   * `WEBSITE_CONTROL` - HTML file in root website directory containing pre-generated value used for domain control verification 
 * @member {module:model/DomainVerificationSummary.TypeEnum} type
 */
DomainVerificationSummary.prototype['type'] = undefined;

/**
 * Type of domain name used for domain verification
 * @member {module:model/DomainVerificationSummary.UsageEnum} usage
 */
DomainVerificationSummary.prototype['usage'] = undefined;





/**
 * Allowed values for the <code>status</code> property.
 * @enum {String}
 * @readonly
 */
DomainVerificationSummary['StatusEnum'] = {

    /**
     * value: "COMPLETED"
     * @const
     */
    "COMPLETED": "COMPLETED",

    /**
     * value: "FAILED_VERIFICATION"
     * @const
     */
    "FAILED_VERIFICATION": "FAILED_VERIFICATION",

    /**
     * value: "VERIFIED_POSSIBLE_FRAUD"
     * @const
     */
    "VERIFIED_POSSIBLE_FRAUD": "VERIFIED_POSSIBLE_FRAUD",

    /**
     * value: "DROPPED"
     * @const
     */
    "DROPPED": "DROPPED",

    /**
     * value: "DROPPED_CERTIFICATE_AUTHORITY_AUTHORIZATION"
     * @const
     */
    "DROPPED_CERTIFICATE_AUTHORITY_AUTHORIZATION": "DROPPED_CERTIFICATE_AUTHORITY_AUTHORIZATION",

    /**
     * value: "DROPPED_GOOGLE_SAFE_BROWSING"
     * @const
     */
    "DROPPED_GOOGLE_SAFE_BROWSING": "DROPPED_GOOGLE_SAFE_BROWSING",

    /**
     * value: "INVALID"
     * @const
     */
    "INVALID": "INVALID",

    /**
     * value: "AWAITING"
     * @const
     */
    "AWAITING": "AWAITING",

    /**
     * value: "PENDING_POSSIBLE_FRAUD"
     * @const
     */
    "PENDING_POSSIBLE_FRAUD": "PENDING_POSSIBLE_FRAUD",

    /**
     * value: "REVOKED_CERTIFICATE"
     * @const
     */
    "REVOKED_CERTIFICATE": "REVOKED_CERTIFICATE"
};


/**
 * Allowed values for the <code>type</code> property.
 * @enum {String}
 * @readonly
 */
DomainVerificationSummary['TypeEnum'] = {

    /**
     * value: "DOMAIN_CONTROL_EMAIL"
     * @const
     */
    "DOMAIN_CONTROL_EMAIL": "DOMAIN_CONTROL_EMAIL",

    /**
     * value: "AUTO_GENERATED_DOMAIN_ACCESS_EMAIL_ADMIN"
     * @const
     */
    "AUTO_GENERATED_DOMAIN_ACCESS_EMAIL_ADMIN": "AUTO_GENERATED_DOMAIN_ACCESS_EMAIL_ADMIN",

    /**
     * value: "AUTO_GENERATED_DOMAIN_ACCESS_EMAIL_ADMINSTRATOR"
     * @const
     */
    "AUTO_GENERATED_DOMAIN_ACCESS_EMAIL_ADMINSTRATOR": "AUTO_GENERATED_DOMAIN_ACCESS_EMAIL_ADMINSTRATOR",

    /**
     * value: "AUTO_GENERATED_DOMAIN_ACCESS_EMAIL_HOST_MASTER"
     * @const
     */
    "AUTO_GENERATED_DOMAIN_ACCESS_EMAIL_HOST_MASTER": "AUTO_GENERATED_DOMAIN_ACCESS_EMAIL_HOST_MASTER",

    /**
     * value: "AUTO_GENERATED_DOMAIN_ACCESS_EMAIL_POST_MASTER"
     * @const
     */
    "AUTO_GENERATED_DOMAIN_ACCESS_EMAIL_POST_MASTER": "AUTO_GENERATED_DOMAIN_ACCESS_EMAIL_POST_MASTER",

    /**
     * value: "AUTO_GENERATED_DOMAIN_ACCESS_EMAIL_WEB_MASTER"
     * @const
     */
    "AUTO_GENERATED_DOMAIN_ACCESS_EMAIL_WEB_MASTER": "AUTO_GENERATED_DOMAIN_ACCESS_EMAIL_WEB_MASTER",

    /**
     * value: "DOMAIN_ACCESS_EMAIL"
     * @const
     */
    "DOMAIN_ACCESS_EMAIL": "DOMAIN_ACCESS_EMAIL",

    /**
     * value: "DOMAIN_ACCESS_LETTER"
     * @const
     */
    "DOMAIN_ACCESS_LETTER": "DOMAIN_ACCESS_LETTER",

    /**
     * value: "DOMAIN_ZONE_CONTROL"
     * @const
     */
    "DOMAIN_ZONE_CONTROL": "DOMAIN_ZONE_CONTROL",

    /**
     * value: "MANUAL_DOMAIN_ACCESS_EMAIL"
     * @const
     */
    "MANUAL_DOMAIN_ACCESS_EMAIL": "MANUAL_DOMAIN_ACCESS_EMAIL",

    /**
     * value: "PREVIOUS_DOMAIN_ACCESS_EMAIL"
     * @const
     */
    "PREVIOUS_DOMAIN_ACCESS_EMAIL": "PREVIOUS_DOMAIN_ACCESS_EMAIL",

    /**
     * value: "REGISTRATION_AUTHORITY_DOMAIN_ACCESS_LETTER"
     * @const
     */
    "REGISTRATION_AUTHORITY_DOMAIN_ACCESS_LETTER": "REGISTRATION_AUTHORITY_DOMAIN_ACCESS_LETTER",

    /**
     * value: "REGISTRATION_AUTHORITY_DOMAIN_ZONE_CONTROL"
     * @const
     */
    "REGISTRATION_AUTHORITY_DOMAIN_ZONE_CONTROL": "REGISTRATION_AUTHORITY_DOMAIN_ZONE_CONTROL",

    /**
     * value: "REGISTRATION_AUTHORITY_OVERRIDE"
     * @const
     */
    "REGISTRATION_AUTHORITY_OVERRIDE": "REGISTRATION_AUTHORITY_OVERRIDE",

    /**
     * value: "REGISTRATION_AUTHORITY_WEBSITE_CONTROL"
     * @const
     */
    "REGISTRATION_AUTHORITY_WEBSITE_CONTROL": "REGISTRATION_AUTHORITY_WEBSITE_CONTROL",

    /**
     * value: "CUSTOMER_OWNED"
     * @const
     */
    "CUSTOMER_OWNED": "CUSTOMER_OWNED",

    /**
     * value: "WEBSITE_CONTROL"
     * @const
     */
    "WEBSITE_CONTROL": "WEBSITE_CONTROL"
};


/**
 * Allowed values for the <code>usage</code> property.
 * @enum {String}
 * @readonly
 */
DomainVerificationSummary['UsageEnum'] = {

    /**
     * value: "COMMON_NAME"
     * @const
     */
    "COMMON_NAME": "COMMON_NAME",

    /**
     * value: "SUBJECT_ALTERNATIVE_NAME"
     * @const
     */
    "SUBJECT_ALTERNATIVE_NAME": "SUBJECT_ALTERNATIVE_NAME"
};



export default DomainVerificationSummary;

