/**
 * 
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import CertificateContact from './CertificateContact';
import CertificateOrganization from './CertificateOrganization';
import SubjectAlternativeNameDetails from './SubjectAlternativeNameDetails';

/**
 * The Certificate model module.
 * @module model/Certificate
 * @version 1.0.0
 */
class Certificate {
    /**
     * Constructs a new <code>Certificate</code>.
     * @alias module:model/Certificate
     * @param certificateId {String} The unique identifier of the certificate request. Only present if no errors returned
     * @param contact {module:model/CertificateContact} 
     * @param createdAt {String} The date the certificate was ordered.
     * @param period {Number} Validity period of order. Specified in years
     * @param productType {module:model/Certificate.ProductTypeEnum} Certificate product type
     * @param status {module:model/Certificate.StatusEnum} Status of certificate
     */
    constructor(certificateId, contact, createdAt, period, productType, status) { 
        
        Certificate.initialize(this, certificateId, contact, createdAt, period, productType, status);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, certificateId, contact, createdAt, period, productType, status) { 
        obj['certificateId'] = certificateId;
        obj['contact'] = contact;
        obj['createdAt'] = createdAt;
        obj['period'] = period;
        obj['productType'] = productType;
        obj['status'] = status;
    }

    /**
     * Constructs a <code>Certificate</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/Certificate} obj Optional instance to populate.
     * @return {module:model/Certificate} The populated <code>Certificate</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new Certificate();

            if (data.hasOwnProperty('certificateId')) {
                obj['certificateId'] = ApiClient.convertToType(data['certificateId'], 'String');
            }
            if (data.hasOwnProperty('commonName')) {
                obj['commonName'] = ApiClient.convertToType(data['commonName'], 'String');
            }
            if (data.hasOwnProperty('contact')) {
                obj['contact'] = CertificateContact.constructFromObject(data['contact']);
            }
            if (data.hasOwnProperty('createdAt')) {
                obj['createdAt'] = ApiClient.convertToType(data['createdAt'], 'String');
            }
            if (data.hasOwnProperty('deniedReason')) {
                obj['deniedReason'] = ApiClient.convertToType(data['deniedReason'], 'String');
            }
            if (data.hasOwnProperty('organization')) {
                obj['organization'] = CertificateOrganization.constructFromObject(data['organization']);
            }
            if (data.hasOwnProperty('period')) {
                obj['period'] = ApiClient.convertToType(data['period'], 'Number');
            }
            if (data.hasOwnProperty('productType')) {
                obj['productType'] = ApiClient.convertToType(data['productType'], 'String');
            }
            if (data.hasOwnProperty('progress')) {
                obj['progress'] = ApiClient.convertToType(data['progress'], 'Number');
            }
            if (data.hasOwnProperty('revokedAt')) {
                obj['revokedAt'] = ApiClient.convertToType(data['revokedAt'], 'String');
            }
            if (data.hasOwnProperty('rootType')) {
                obj['rootType'] = ApiClient.convertToType(data['rootType'], 'String');
            }
            if (data.hasOwnProperty('serialNumber')) {
                obj['serialNumber'] = ApiClient.convertToType(data['serialNumber'], 'String');
            }
            if (data.hasOwnProperty('serialNumberHex')) {
                obj['serialNumberHex'] = ApiClient.convertToType(data['serialNumberHex'], 'String');
            }
            if (data.hasOwnProperty('slotSize')) {
                obj['slotSize'] = ApiClient.convertToType(data['slotSize'], 'String');
            }
            if (data.hasOwnProperty('status')) {
                obj['status'] = ApiClient.convertToType(data['status'], 'String');
            }
            if (data.hasOwnProperty('subjectAlternativeNames')) {
                obj['subjectAlternativeNames'] = ApiClient.convertToType(data['subjectAlternativeNames'], [SubjectAlternativeNameDetails]);
            }
            if (data.hasOwnProperty('validEnd')) {
                obj['validEnd'] = ApiClient.convertToType(data['validEnd'], 'String');
            }
            if (data.hasOwnProperty('validStart')) {
                obj['validStart'] = ApiClient.convertToType(data['validStart'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>Certificate</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>Certificate</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of Certificate.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // ensure the json data is a string
        if (data['certificateId'] && !(typeof data['certificateId'] === 'string' || data['certificateId'] instanceof String)) {
            throw new Error("Expected the field `certificateId` to be a primitive type in the JSON string but got " + data['certificateId']);
        }
        // ensure the json data is a string
        if (data['commonName'] && !(typeof data['commonName'] === 'string' || data['commonName'] instanceof String)) {
            throw new Error("Expected the field `commonName` to be a primitive type in the JSON string but got " + data['commonName']);
        }
        // validate the optional field `contact`
        if (data['contact']) { // data not null
          CertificateContact.validateJSON(data['contact']);
        }
        // ensure the json data is a string
        if (data['createdAt'] && !(typeof data['createdAt'] === 'string' || data['createdAt'] instanceof String)) {
            throw new Error("Expected the field `createdAt` to be a primitive type in the JSON string but got " + data['createdAt']);
        }
        // ensure the json data is a string
        if (data['deniedReason'] && !(typeof data['deniedReason'] === 'string' || data['deniedReason'] instanceof String)) {
            throw new Error("Expected the field `deniedReason` to be a primitive type in the JSON string but got " + data['deniedReason']);
        }
        // validate the optional field `organization`
        if (data['organization']) { // data not null
          CertificateOrganization.validateJSON(data['organization']);
        }
        // ensure the json data is a string
        if (data['productType'] && !(typeof data['productType'] === 'string' || data['productType'] instanceof String)) {
            throw new Error("Expected the field `productType` to be a primitive type in the JSON string but got " + data['productType']);
        }
        // ensure the json data is a string
        if (data['revokedAt'] && !(typeof data['revokedAt'] === 'string' || data['revokedAt'] instanceof String)) {
            throw new Error("Expected the field `revokedAt` to be a primitive type in the JSON string but got " + data['revokedAt']);
        }
        // ensure the json data is a string
        if (data['rootType'] && !(typeof data['rootType'] === 'string' || data['rootType'] instanceof String)) {
            throw new Error("Expected the field `rootType` to be a primitive type in the JSON string but got " + data['rootType']);
        }
        // ensure the json data is a string
        if (data['serialNumber'] && !(typeof data['serialNumber'] === 'string' || data['serialNumber'] instanceof String)) {
            throw new Error("Expected the field `serialNumber` to be a primitive type in the JSON string but got " + data['serialNumber']);
        }
        // ensure the json data is a string
        if (data['serialNumberHex'] && !(typeof data['serialNumberHex'] === 'string' || data['serialNumberHex'] instanceof String)) {
            throw new Error("Expected the field `serialNumberHex` to be a primitive type in the JSON string but got " + data['serialNumberHex']);
        }
        // ensure the json data is a string
        if (data['slotSize'] && !(typeof data['slotSize'] === 'string' || data['slotSize'] instanceof String)) {
            throw new Error("Expected the field `slotSize` to be a primitive type in the JSON string but got " + data['slotSize']);
        }
        // ensure the json data is a string
        if (data['status'] && !(typeof data['status'] === 'string' || data['status'] instanceof String)) {
            throw new Error("Expected the field `status` to be a primitive type in the JSON string but got " + data['status']);
        }
        if (data['subjectAlternativeNames']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['subjectAlternativeNames'])) {
                throw new Error("Expected the field `subjectAlternativeNames` to be an array in the JSON data but got " + data['subjectAlternativeNames']);
            }
            // validate the optional field `subjectAlternativeNames` (array)
            for (const item of data['subjectAlternativeNames']) {
                SubjectAlternativeNameDetails.validateJSON(item);
            };
        }
        // ensure the json data is a string
        if (data['validEnd'] && !(typeof data['validEnd'] === 'string' || data['validEnd'] instanceof String)) {
            throw new Error("Expected the field `validEnd` to be a primitive type in the JSON string but got " + data['validEnd']);
        }
        // ensure the json data is a string
        if (data['validStart'] && !(typeof data['validStart'] === 'string' || data['validStart'] instanceof String)) {
            throw new Error("Expected the field `validStart` to be a primitive type in the JSON string but got " + data['validStart']);
        }

        return true;
    }


}

Certificate.RequiredProperties = ["certificateId", "contact", "createdAt", "period", "productType", "status"];

/**
 * The unique identifier of the certificate request. Only present if no errors returned
 * @member {String} certificateId
 */
Certificate.prototype['certificateId'] = undefined;

/**
 * Common name of certificate
 * @member {String} commonName
 */
Certificate.prototype['commonName'] = undefined;

/**
 * @member {module:model/CertificateContact} contact
 */
Certificate.prototype['contact'] = undefined;

/**
 * The date the certificate was ordered.
 * @member {String} createdAt
 */
Certificate.prototype['createdAt'] = undefined;

/**
 * Only present if certificate order has been denied
 * @member {String} deniedReason
 */
Certificate.prototype['deniedReason'] = undefined;

/**
 * @member {module:model/CertificateOrganization} organization
 */
Certificate.prototype['organization'] = undefined;

/**
 * Validity period of order. Specified in years
 * @member {Number} period
 */
Certificate.prototype['period'] = undefined;

/**
 * Certificate product type
 * @member {module:model/Certificate.ProductTypeEnum} productType
 */
Certificate.prototype['productType'] = undefined;

/**
 * Percentage of completion for certificate vetting
 * @member {Number} progress
 */
Certificate.prototype['progress'] = undefined;

/**
 * The revocation date of certificate (if revoked).
 * @member {String} revokedAt
 */
Certificate.prototype['revokedAt'] = undefined;

/**
 * Root Type
 * @member {module:model/Certificate.RootTypeEnum} rootType
 */
Certificate.prototype['rootType'] = undefined;

/**
 * Serial number of certificate (if issued or revoked)
 * @member {String} serialNumber
 */
Certificate.prototype['serialNumber'] = undefined;

/**
 * Hexadecmial format for Serial number of certificate(if issued or revoked)
 * @member {String} serialNumberHex
 */
Certificate.prototype['serialNumberHex'] = undefined;

/**
 * Number of subject alternative names(SAN) to be included in certificate 
 * @member {module:model/Certificate.SlotSizeEnum} slotSize
 */
Certificate.prototype['slotSize'] = undefined;

/**
 * Status of certificate
 * @member {module:model/Certificate.StatusEnum} status
 */
Certificate.prototype['status'] = undefined;

/**
 * Contains subject alternative names set
 * @member {Array.<module:model/SubjectAlternativeNameDetails>} subjectAlternativeNames
 */
Certificate.prototype['subjectAlternativeNames'] = undefined;

/**
 * The end date of the certificate's validity (if issued or revoked).
 * @member {String} validEnd
 */
Certificate.prototype['validEnd'] = undefined;

/**
 * The start date of the certificate's validity (if issued or revoked).
 * @member {String} validStart
 */
Certificate.prototype['validStart'] = undefined;





/**
 * Allowed values for the <code>productType</code> property.
 * @enum {String}
 * @readonly
 */
Certificate['ProductTypeEnum'] = {

    /**
     * value: "DV_SSL"
     * @const
     */
    "DV_SSL": "DV_SSL",

    /**
     * value: "DV_WILDCARD_SSL"
     * @const
     */
    "DV_WILDCARD_SSL": "DV_WILDCARD_SSL",

    /**
     * value: "EV_SSL"
     * @const
     */
    "EV_SSL": "EV_SSL",

    /**
     * value: "OV_CS"
     * @const
     */
    "OV_CS": "OV_CS",

    /**
     * value: "OV_DS"
     * @const
     */
    "OV_DS": "OV_DS",

    /**
     * value: "OV_SSL"
     * @const
     */
    "OV_SSL": "OV_SSL",

    /**
     * value: "OV_WILDCARD_SSL"
     * @const
     */
    "OV_WILDCARD_SSL": "OV_WILDCARD_SSL",

    /**
     * value: "UCC_DV_SSL"
     * @const
     */
    "UCC_DV_SSL": "UCC_DV_SSL",

    /**
     * value: "UCC_EV_SSL"
     * @const
     */
    "UCC_EV_SSL": "UCC_EV_SSL",

    /**
     * value: "UCC_OV_SSL"
     * @const
     */
    "UCC_OV_SSL": "UCC_OV_SSL"
};


/**
 * Allowed values for the <code>rootType</code> property.
 * @enum {String}
 * @readonly
 */
Certificate['RootTypeEnum'] = {

    /**
     * value: "GODADDY_SHA_1"
     * @const
     */
    "GODADDY_SHA_1": "GODADDY_SHA_1",

    /**
     * value: "GODADDY_SHA_2"
     * @const
     */
    "GODADDY_SHA_2": "GODADDY_SHA_2",

    /**
     * value: "STARFIELD_SHA_1"
     * @const
     */
    "STARFIELD_SHA_1": "STARFIELD_SHA_1",

    /**
     * value: "STARFIELD_SHA_2"
     * @const
     */
    "STARFIELD_SHA_2": "STARFIELD_SHA_2"
};


/**
 * Allowed values for the <code>slotSize</code> property.
 * @enum {String}
 * @readonly
 */
Certificate['SlotSizeEnum'] = {

    /**
     * value: "FIVE"
     * @const
     */
    "FIVE": "FIVE",

    /**
     * value: "TEN"
     * @const
     */
    "TEN": "TEN",

    /**
     * value: "FIFTEEN"
     * @const
     */
    "FIFTEEN": "FIFTEEN",

    /**
     * value: "TWENTY"
     * @const
     */
    "TWENTY": "TWENTY",

    /**
     * value: "THIRTY"
     * @const
     */
    "THIRTY": "THIRTY",

    /**
     * value: "FOURTY"
     * @const
     */
    "FOURTY": "FOURTY",

    /**
     * value: "FIFTY"
     * @const
     */
    "FIFTY": "FIFTY",

    /**
     * value: "ONE_HUNDRED"
     * @const
     */
    "ONE_HUNDRED": "ONE_HUNDRED"
};


/**
 * Allowed values for the <code>status</code> property.
 * @enum {String}
 * @readonly
 */
Certificate['StatusEnum'] = {

    /**
     * value: "PENDING_ISSUANCE"
     * @const
     */
    "PENDING_ISSUANCE": "PENDING_ISSUANCE",

    /**
     * value: "ISSUED"
     * @const
     */
    "ISSUED": "ISSUED",

    /**
     * value: "REVOKED"
     * @const
     */
    "REVOKED": "REVOKED",

    /**
     * value: "CANCELED"
     * @const
     */
    "CANCELED": "CANCELED",

    /**
     * value: "DENIED"
     * @const
     */
    "DENIED": "DENIED",

    /**
     * value: "PENDING_REVOCATION"
     * @const
     */
    "PENDING_REVOCATION": "PENDING_REVOCATION",

    /**
     * value: "PENDING_REKEY"
     * @const
     */
    "PENDING_REKEY": "PENDING_REKEY",

    /**
     * value: "UNUSED"
     * @const
     */
    "UNUSED": "UNUSED",

    /**
     * value: "EXPIRED"
     * @const
     */
    "EXPIRED": "EXPIRED"
};



export default Certificate;

