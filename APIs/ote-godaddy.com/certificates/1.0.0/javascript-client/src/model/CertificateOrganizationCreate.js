/**
 * 
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import CertificateAddress from './CertificateAddress';

/**
 * The CertificateOrganizationCreate model module.
 * @module model/CertificateOrganizationCreate
 * @version 1.0.0
 */
class CertificateOrganizationCreate {
    /**
     * Constructs a new <code>CertificateOrganizationCreate</code>.
     * @alias module:model/CertificateOrganizationCreate
     * @param name {String} Name of organization that owns common name
     * @param phone {String} Phone number for organization
     */
    constructor(name, phone) { 
        
        CertificateOrganizationCreate.initialize(this, name, phone);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, name, phone) { 
        obj['name'] = name;
        obj['phone'] = phone;
    }

    /**
     * Constructs a <code>CertificateOrganizationCreate</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/CertificateOrganizationCreate} obj Optional instance to populate.
     * @return {module:model/CertificateOrganizationCreate} The populated <code>CertificateOrganizationCreate</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new CertificateOrganizationCreate();

            if (data.hasOwnProperty('address')) {
                obj['address'] = CertificateAddress.constructFromObject(data['address']);
            }
            if (data.hasOwnProperty('assumedName')) {
                obj['assumedName'] = ApiClient.convertToType(data['assumedName'], 'String');
            }
            if (data.hasOwnProperty('name')) {
                obj['name'] = ApiClient.convertToType(data['name'], 'String');
            }
            if (data.hasOwnProperty('phone')) {
                obj['phone'] = ApiClient.convertToType(data['phone'], 'String');
            }
            if (data.hasOwnProperty('registrationAgent')) {
                obj['registrationAgent'] = ApiClient.convertToType(data['registrationAgent'], 'String');
            }
            if (data.hasOwnProperty('registrationNumber')) {
                obj['registrationNumber'] = ApiClient.convertToType(data['registrationNumber'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>CertificateOrganizationCreate</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>CertificateOrganizationCreate</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of CertificateOrganizationCreate.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // validate the optional field `address`
        if (data['address']) { // data not null
          CertificateAddress.validateJSON(data['address']);
        }
        // ensure the json data is a string
        if (data['assumedName'] && !(typeof data['assumedName'] === 'string' || data['assumedName'] instanceof String)) {
            throw new Error("Expected the field `assumedName` to be a primitive type in the JSON string but got " + data['assumedName']);
        }
        // ensure the json data is a string
        if (data['name'] && !(typeof data['name'] === 'string' || data['name'] instanceof String)) {
            throw new Error("Expected the field `name` to be a primitive type in the JSON string but got " + data['name']);
        }
        // ensure the json data is a string
        if (data['phone'] && !(typeof data['phone'] === 'string' || data['phone'] instanceof String)) {
            throw new Error("Expected the field `phone` to be a primitive type in the JSON string but got " + data['phone']);
        }
        // ensure the json data is a string
        if (data['registrationAgent'] && !(typeof data['registrationAgent'] === 'string' || data['registrationAgent'] instanceof String)) {
            throw new Error("Expected the field `registrationAgent` to be a primitive type in the JSON string but got " + data['registrationAgent']);
        }
        // ensure the json data is a string
        if (data['registrationNumber'] && !(typeof data['registrationNumber'] === 'string' || data['registrationNumber'] instanceof String)) {
            throw new Error("Expected the field `registrationNumber` to be a primitive type in the JSON string but got " + data['registrationNumber']);
        }

        return true;
    }


}

CertificateOrganizationCreate.RequiredProperties = ["name", "phone"];

/**
 * @member {module:model/CertificateAddress} address
 */
CertificateOrganizationCreate.prototype['address'] = undefined;

/**
 * Only for EVSSL. The DBA(does business as) name for the organization.
 * @member {String} assumedName
 */
CertificateOrganizationCreate.prototype['assumedName'] = undefined;

/**
 * Name of organization that owns common name
 * @member {String} name
 */
CertificateOrganizationCreate.prototype['name'] = undefined;

/**
 * Phone number for organization
 * @member {String} phone
 */
CertificateOrganizationCreate.prototype['phone'] = undefined;

/**
 * Only for EVSSL.
 * @member {String} registrationAgent
 */
CertificateOrganizationCreate.prototype['registrationAgent'] = undefined;

/**
 * Only for EVSSL.
 * @member {String} registrationNumber
 */
CertificateOrganizationCreate.prototype['registrationNumber'] = undefined;






export default CertificateOrganizationCreate;

