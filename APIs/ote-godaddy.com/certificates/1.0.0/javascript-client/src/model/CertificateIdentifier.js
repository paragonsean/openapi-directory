/**
 * 
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The CertificateIdentifier model module.
 * @module model/CertificateIdentifier
 * @version 1.0.0
 */
class CertificateIdentifier {
    /**
     * Constructs a new <code>CertificateIdentifier</code>.
     * @alias module:model/CertificateIdentifier
     * @param certificateId {String} The unique identifier of the certificate request. Only present if verified.
     */
    constructor(certificateId) { 
        
        CertificateIdentifier.initialize(this, certificateId);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, certificateId) { 
        obj['certificateId'] = certificateId;
    }

    /**
     * Constructs a <code>CertificateIdentifier</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/CertificateIdentifier} obj Optional instance to populate.
     * @return {module:model/CertificateIdentifier} The populated <code>CertificateIdentifier</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new CertificateIdentifier();

            if (data.hasOwnProperty('certificateId')) {
                obj['certificateId'] = ApiClient.convertToType(data['certificateId'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>CertificateIdentifier</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>CertificateIdentifier</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of CertificateIdentifier.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // ensure the json data is a string
        if (data['certificateId'] && !(typeof data['certificateId'] === 'string' || data['certificateId'] instanceof String)) {
            throw new Error("Expected the field `certificateId` to be a primitive type in the JSON string but got " + data['certificateId']);
        }

        return true;
    }


}

CertificateIdentifier.RequiredProperties = ["certificateId"];

/**
 * The unique identifier of the certificate request. Only present if verified.
 * @member {String} certificateId
 */
CertificateIdentifier.prototype['certificateId'] = undefined;






export default CertificateIdentifier;

