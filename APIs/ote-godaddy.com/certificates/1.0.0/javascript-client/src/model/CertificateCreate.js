/**
 * 
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import CertificateContact from './CertificateContact';
import CertificateOrganizationCreate from './CertificateOrganizationCreate';

/**
 * The CertificateCreate model module.
 * @module model/CertificateCreate
 * @version 1.0.0
 */
class CertificateCreate {
    /**
     * Constructs a new <code>CertificateCreate</code>.
     * @alias module:model/CertificateCreate
     * @param contact {module:model/CertificateContact} 
     * @param csr {String} Certificate Signing Request
     * @param period {Number} Number of years for certificate validity period
     * @param productType {module:model/CertificateCreate.ProductTypeEnum} Type of product requesting a certificate. Only required non-renewal
     */
    constructor(contact, csr, period, productType) { 
        
        CertificateCreate.initialize(this, contact, csr, period, productType);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, contact, csr, period, productType) { 
        obj['contact'] = contact;
        obj['csr'] = csr;
        obj['intelVPro'] = false;
        obj['period'] = period;
        obj['productType'] = productType;
        obj['rootType'] = 'STARFIELD_SHA_2';
    }

    /**
     * Constructs a <code>CertificateCreate</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/CertificateCreate} obj Optional instance to populate.
     * @return {module:model/CertificateCreate} The populated <code>CertificateCreate</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new CertificateCreate();

            if (data.hasOwnProperty('callbackUrl')) {
                obj['callbackUrl'] = ApiClient.convertToType(data['callbackUrl'], 'String');
            }
            if (data.hasOwnProperty('commonName')) {
                obj['commonName'] = ApiClient.convertToType(data['commonName'], 'String');
            }
            if (data.hasOwnProperty('contact')) {
                obj['contact'] = CertificateContact.constructFromObject(data['contact']);
            }
            if (data.hasOwnProperty('csr')) {
                obj['csr'] = ApiClient.convertToType(data['csr'], 'String');
            }
            if (data.hasOwnProperty('intelVPro')) {
                obj['intelVPro'] = ApiClient.convertToType(data['intelVPro'], 'Boolean');
            }
            if (data.hasOwnProperty('organization')) {
                obj['organization'] = CertificateOrganizationCreate.constructFromObject(data['organization']);
            }
            if (data.hasOwnProperty('period')) {
                obj['period'] = ApiClient.convertToType(data['period'], 'Number');
            }
            if (data.hasOwnProperty('productType')) {
                obj['productType'] = ApiClient.convertToType(data['productType'], 'String');
            }
            if (data.hasOwnProperty('rootType')) {
                obj['rootType'] = ApiClient.convertToType(data['rootType'], 'String');
            }
            if (data.hasOwnProperty('slotSize')) {
                obj['slotSize'] = ApiClient.convertToType(data['slotSize'], 'String');
            }
            if (data.hasOwnProperty('subjectAlternativeNames')) {
                obj['subjectAlternativeNames'] = ApiClient.convertToType(data['subjectAlternativeNames'], ['String']);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>CertificateCreate</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>CertificateCreate</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of CertificateCreate.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // ensure the json data is a string
        if (data['callbackUrl'] && !(typeof data['callbackUrl'] === 'string' || data['callbackUrl'] instanceof String)) {
            throw new Error("Expected the field `callbackUrl` to be a primitive type in the JSON string but got " + data['callbackUrl']);
        }
        // ensure the json data is a string
        if (data['commonName'] && !(typeof data['commonName'] === 'string' || data['commonName'] instanceof String)) {
            throw new Error("Expected the field `commonName` to be a primitive type in the JSON string but got " + data['commonName']);
        }
        // validate the optional field `contact`
        if (data['contact']) { // data not null
          CertificateContact.validateJSON(data['contact']);
        }
        // ensure the json data is a string
        if (data['csr'] && !(typeof data['csr'] === 'string' || data['csr'] instanceof String)) {
            throw new Error("Expected the field `csr` to be a primitive type in the JSON string but got " + data['csr']);
        }
        // validate the optional field `organization`
        if (data['organization']) { // data not null
          CertificateOrganizationCreate.validateJSON(data['organization']);
        }
        // ensure the json data is a string
        if (data['productType'] && !(typeof data['productType'] === 'string' || data['productType'] instanceof String)) {
            throw new Error("Expected the field `productType` to be a primitive type in the JSON string but got " + data['productType']);
        }
        // ensure the json data is a string
        if (data['rootType'] && !(typeof data['rootType'] === 'string' || data['rootType'] instanceof String)) {
            throw new Error("Expected the field `rootType` to be a primitive type in the JSON string but got " + data['rootType']);
        }
        // ensure the json data is a string
        if (data['slotSize'] && !(typeof data['slotSize'] === 'string' || data['slotSize'] instanceof String)) {
            throw new Error("Expected the field `slotSize` to be a primitive type in the JSON string but got " + data['slotSize']);
        }
        // ensure the json data is an array
        if (!Array.isArray(data['subjectAlternativeNames'])) {
            throw new Error("Expected the field `subjectAlternativeNames` to be an array in the JSON data but got " + data['subjectAlternativeNames']);
        }

        return true;
    }


}

CertificateCreate.RequiredProperties = ["contact", "csr", "period", "productType"];

/**
 * Required if client would like to receive stateful actions via callback during certificate lifecyle
 * @member {String} callbackUrl
 */
CertificateCreate.prototype['callbackUrl'] = undefined;

/**
 * Name to be secured in certificate. If provided, CN field in CSR will be ignored.
 * @member {String} commonName
 */
CertificateCreate.prototype['commonName'] = undefined;

/**
 * @member {module:model/CertificateContact} contact
 */
CertificateCreate.prototype['contact'] = undefined;

/**
 * Certificate Signing Request
 * @member {String} csr
 */
CertificateCreate.prototype['csr'] = undefined;

/**
 * Only used for OV
 * @member {Boolean} intelVPro
 * @default false
 */
CertificateCreate.prototype['intelVPro'] = false;

/**
 * @member {module:model/CertificateOrganizationCreate} organization
 */
CertificateCreate.prototype['organization'] = undefined;

/**
 * Number of years for certificate validity period
 * @member {Number} period
 */
CertificateCreate.prototype['period'] = undefined;

/**
 * Type of product requesting a certificate. Only required non-renewal
 * @member {module:model/CertificateCreate.ProductTypeEnum} productType
 */
CertificateCreate.prototype['productType'] = undefined;

/**
 * Root Type. Depending on certificate expiration date, SHA_1 not be allowed. Will default to SHA_2 if expiration date exceeds sha1 allowed date
 * @member {module:model/CertificateCreate.RootTypeEnum} rootType
 * @default 'STARFIELD_SHA_2'
 */
CertificateCreate.prototype['rootType'] = 'STARFIELD_SHA_2';

/**
 * Number of subject alternative names(SAN) to be included in certificate 
 * @member {module:model/CertificateCreate.SlotSizeEnum} slotSize
 */
CertificateCreate.prototype['slotSize'] = undefined;

/**
 * Subject Alternative names. Collection of subjectAlternativeNames to be included in certificate.
 * @member {Array.<String>} subjectAlternativeNames
 */
CertificateCreate.prototype['subjectAlternativeNames'] = undefined;





/**
 * Allowed values for the <code>productType</code> property.
 * @enum {String}
 * @readonly
 */
CertificateCreate['ProductTypeEnum'] = {

    /**
     * value: "DV_SSL"
     * @const
     */
    "DV_SSL": "DV_SSL",

    /**
     * value: "DV_WILDCARD_SSL"
     * @const
     */
    "DV_WILDCARD_SSL": "DV_WILDCARD_SSL",

    /**
     * value: "EV_SSL"
     * @const
     */
    "EV_SSL": "EV_SSL",

    /**
     * value: "OV_CS"
     * @const
     */
    "OV_CS": "OV_CS",

    /**
     * value: "OV_DS"
     * @const
     */
    "OV_DS": "OV_DS",

    /**
     * value: "OV_SSL"
     * @const
     */
    "OV_SSL": "OV_SSL",

    /**
     * value: "OV_WILDCARD_SSL"
     * @const
     */
    "OV_WILDCARD_SSL": "OV_WILDCARD_SSL",

    /**
     * value: "UCC_DV_SSL"
     * @const
     */
    "UCC_DV_SSL": "UCC_DV_SSL",

    /**
     * value: "UCC_EV_SSL"
     * @const
     */
    "UCC_EV_SSL": "UCC_EV_SSL",

    /**
     * value: "UCC_OV_SSL"
     * @const
     */
    "UCC_OV_SSL": "UCC_OV_SSL"
};


/**
 * Allowed values for the <code>rootType</code> property.
 * @enum {String}
 * @readonly
 */
CertificateCreate['RootTypeEnum'] = {

    /**
     * value: "GODADDY_SHA_1"
     * @const
     */
    "GODADDY_SHA_1": "GODADDY_SHA_1",

    /**
     * value: "GODADDY_SHA_2"
     * @const
     */
    "GODADDY_SHA_2": "GODADDY_SHA_2",

    /**
     * value: "STARFIELD_SHA_1"
     * @const
     */
    "STARFIELD_SHA_1": "STARFIELD_SHA_1",

    /**
     * value: "STARFIELD_SHA_2"
     * @const
     */
    "STARFIELD_SHA_2": "STARFIELD_SHA_2"
};


/**
 * Allowed values for the <code>slotSize</code> property.
 * @enum {String}
 * @readonly
 */
CertificateCreate['SlotSizeEnum'] = {

    /**
     * value: "FIVE"
     * @const
     */
    "FIVE": "FIVE",

    /**
     * value: "TEN"
     * @const
     */
    "TEN": "TEN",

    /**
     * value: "FIFTEEN"
     * @const
     */
    "FIFTEEN": "FIFTEEN",

    /**
     * value: "TWENTY"
     * @const
     */
    "TWENTY": "TWENTY",

    /**
     * value: "THIRTY"
     * @const
     */
    "THIRTY": "THIRTY",

    /**
     * value: "FOURTY"
     * @const
     */
    "FOURTY": "FOURTY",

    /**
     * value: "FIFTY"
     * @const
     */
    "FIFTY": "FIFTY",

    /**
     * value: "ONE_HUNDRED"
     * @const
     */
    "ONE_HUNDRED": "ONE_HUNDRED"
};



export default CertificateCreate;

