/**
 * 
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The SubjectAlternativeNameDetails model module.
 * @module model/SubjectAlternativeNameDetails
 * @version 1.0.0
 */
class SubjectAlternativeNameDetails {
    /**
     * Constructs a new <code>SubjectAlternativeNameDetails</code>.
     * @alias module:model/SubjectAlternativeNameDetails
     * @param status {module:model/SubjectAlternativeNameDetails.StatusEnum} Total number of page results
     * @param subjectAlternativeName {String} Subject alternative name to be included in certificate
     */
    constructor(status, subjectAlternativeName) { 
        
        SubjectAlternativeNameDetails.initialize(this, status, subjectAlternativeName);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, status, subjectAlternativeName) { 
        obj['status'] = status;
        obj['subjectAlternativeName'] = subjectAlternativeName;
    }

    /**
     * Constructs a <code>SubjectAlternativeNameDetails</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/SubjectAlternativeNameDetails} obj Optional instance to populate.
     * @return {module:model/SubjectAlternativeNameDetails} The populated <code>SubjectAlternativeNameDetails</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new SubjectAlternativeNameDetails();

            if (data.hasOwnProperty('status')) {
                obj['status'] = ApiClient.convertToType(data['status'], 'String');
            }
            if (data.hasOwnProperty('subjectAlternativeName')) {
                obj['subjectAlternativeName'] = ApiClient.convertToType(data['subjectAlternativeName'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>SubjectAlternativeNameDetails</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>SubjectAlternativeNameDetails</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of SubjectAlternativeNameDetails.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // ensure the json data is a string
        if (data['status'] && !(typeof data['status'] === 'string' || data['status'] instanceof String)) {
            throw new Error("Expected the field `status` to be a primitive type in the JSON string but got " + data['status']);
        }
        // ensure the json data is a string
        if (data['subjectAlternativeName'] && !(typeof data['subjectAlternativeName'] === 'string' || data['subjectAlternativeName'] instanceof String)) {
            throw new Error("Expected the field `subjectAlternativeName` to be a primitive type in the JSON string but got " + data['subjectAlternativeName']);
        }

        return true;
    }


}

SubjectAlternativeNameDetails.RequiredProperties = ["status", "subjectAlternativeName"];

/**
 * Total number of page results
 * @member {module:model/SubjectAlternativeNameDetails.StatusEnum} status
 */
SubjectAlternativeNameDetails.prototype['status'] = undefined;

/**
 * Subject alternative name to be included in certificate
 * @member {String} subjectAlternativeName
 */
SubjectAlternativeNameDetails.prototype['subjectAlternativeName'] = undefined;





/**
 * Allowed values for the <code>status</code> property.
 * @enum {String}
 * @readonly
 */
SubjectAlternativeNameDetails['StatusEnum'] = {

    /**
     * value: "PENDING"
     * @const
     */
    "PENDING": "PENDING",

    /**
     * value: "INVALID"
     * @const
     */
    "INVALID": "INVALID",

    /**
     * value: "COMPLETED"
     * @const
     */
    "COMPLETED": "COMPLETED",

    /**
     * value: "FRAUD"
     * @const
     */
    "FRAUD": "FRAUD"
};



export default SubjectAlternativeNameDetails;

