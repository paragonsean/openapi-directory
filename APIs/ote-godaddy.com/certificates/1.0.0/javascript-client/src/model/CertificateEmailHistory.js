/**
 * 
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The CertificateEmailHistory model module.
 * @module model/CertificateEmailHistory
 * @version 1.0.0
 */
class CertificateEmailHistory {
    /**
     * Constructs a new <code>CertificateEmailHistory</code>.
     * @alias module:model/CertificateEmailHistory
     * @param accountId {Number} Shopper Id requested certificate
     * @param body {String} Email message
     * @param dateEntered {String} Date email sent
     * @param fromType {String} Email from address
     * @param id {Number} Email Id
     * @param recipients {String} Email address email was sent
     * @param subject {String} Email subject
     * @param templateType {String} Email template type name
     */
    constructor(accountId, body, dateEntered, fromType, id, recipients, subject, templateType) { 
        
        CertificateEmailHistory.initialize(this, accountId, body, dateEntered, fromType, id, recipients, subject, templateType);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, accountId, body, dateEntered, fromType, id, recipients, subject, templateType) { 
        obj['accountId'] = accountId;
        obj['body'] = body;
        obj['dateEntered'] = dateEntered;
        obj['fromType'] = fromType;
        obj['id'] = id;
        obj['recipients'] = recipients;
        obj['subject'] = subject;
        obj['templateType'] = templateType;
    }

    /**
     * Constructs a <code>CertificateEmailHistory</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/CertificateEmailHistory} obj Optional instance to populate.
     * @return {module:model/CertificateEmailHistory} The populated <code>CertificateEmailHistory</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new CertificateEmailHistory();

            if (data.hasOwnProperty('accountId')) {
                obj['accountId'] = ApiClient.convertToType(data['accountId'], 'Number');
            }
            if (data.hasOwnProperty('body')) {
                obj['body'] = ApiClient.convertToType(data['body'], 'String');
            }
            if (data.hasOwnProperty('dateEntered')) {
                obj['dateEntered'] = ApiClient.convertToType(data['dateEntered'], 'String');
            }
            if (data.hasOwnProperty('fromType')) {
                obj['fromType'] = ApiClient.convertToType(data['fromType'], 'String');
            }
            if (data.hasOwnProperty('id')) {
                obj['id'] = ApiClient.convertToType(data['id'], 'Number');
            }
            if (data.hasOwnProperty('recipients')) {
                obj['recipients'] = ApiClient.convertToType(data['recipients'], 'String');
            }
            if (data.hasOwnProperty('subject')) {
                obj['subject'] = ApiClient.convertToType(data['subject'], 'String');
            }
            if (data.hasOwnProperty('templateType')) {
                obj['templateType'] = ApiClient.convertToType(data['templateType'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>CertificateEmailHistory</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>CertificateEmailHistory</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of CertificateEmailHistory.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // ensure the json data is a string
        if (data['body'] && !(typeof data['body'] === 'string' || data['body'] instanceof String)) {
            throw new Error("Expected the field `body` to be a primitive type in the JSON string but got " + data['body']);
        }
        // ensure the json data is a string
        if (data['dateEntered'] && !(typeof data['dateEntered'] === 'string' || data['dateEntered'] instanceof String)) {
            throw new Error("Expected the field `dateEntered` to be a primitive type in the JSON string but got " + data['dateEntered']);
        }
        // ensure the json data is a string
        if (data['fromType'] && !(typeof data['fromType'] === 'string' || data['fromType'] instanceof String)) {
            throw new Error("Expected the field `fromType` to be a primitive type in the JSON string but got " + data['fromType']);
        }
        // ensure the json data is a string
        if (data['recipients'] && !(typeof data['recipients'] === 'string' || data['recipients'] instanceof String)) {
            throw new Error("Expected the field `recipients` to be a primitive type in the JSON string but got " + data['recipients']);
        }
        // ensure the json data is a string
        if (data['subject'] && !(typeof data['subject'] === 'string' || data['subject'] instanceof String)) {
            throw new Error("Expected the field `subject` to be a primitive type in the JSON string but got " + data['subject']);
        }
        // ensure the json data is a string
        if (data['templateType'] && !(typeof data['templateType'] === 'string' || data['templateType'] instanceof String)) {
            throw new Error("Expected the field `templateType` to be a primitive type in the JSON string but got " + data['templateType']);
        }

        return true;
    }


}

CertificateEmailHistory.RequiredProperties = ["accountId", "body", "dateEntered", "fromType", "id", "recipients", "subject", "templateType"];

/**
 * Shopper Id requested certificate
 * @member {Number} accountId
 */
CertificateEmailHistory.prototype['accountId'] = undefined;

/**
 * Email message
 * @member {String} body
 */
CertificateEmailHistory.prototype['body'] = undefined;

/**
 * Date email sent
 * @member {String} dateEntered
 */
CertificateEmailHistory.prototype['dateEntered'] = undefined;

/**
 * Email from address
 * @member {String} fromType
 */
CertificateEmailHistory.prototype['fromType'] = undefined;

/**
 * Email Id
 * @member {Number} id
 */
CertificateEmailHistory.prototype['id'] = undefined;

/**
 * Email address email was sent
 * @member {String} recipients
 */
CertificateEmailHistory.prototype['recipients'] = undefined;

/**
 * Email subject
 * @member {String} subject
 */
CertificateEmailHistory.prototype['subject'] = undefined;

/**
 * Email template type name
 * @member {String} templateType
 */
CertificateEmailHistory.prototype['templateType'] = undefined;






export default CertificateEmailHistory;

