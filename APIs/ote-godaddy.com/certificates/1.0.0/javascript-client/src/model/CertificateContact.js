/**
 * 
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The CertificateContact model module.
 * @module model/CertificateContact
 * @version 1.0.0
 */
class CertificateContact {
    /**
     * Constructs a new <code>CertificateContact</code>.
     * @alias module:model/CertificateContact
     * @param email {String} Email address of requestor contact
     * @param nameFirst {String} First name of requestor contact
     * @param nameLast {String} Last name of requestor contact
     * @param phone {String} Phone number for requestor contact
     */
    constructor(email, nameFirst, nameLast, phone) { 
        
        CertificateContact.initialize(this, email, nameFirst, nameLast, phone);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, email, nameFirst, nameLast, phone) { 
        obj['email'] = email;
        obj['nameFirst'] = nameFirst;
        obj['nameLast'] = nameLast;
        obj['phone'] = phone;
    }

    /**
     * Constructs a <code>CertificateContact</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/CertificateContact} obj Optional instance to populate.
     * @return {module:model/CertificateContact} The populated <code>CertificateContact</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new CertificateContact();

            if (data.hasOwnProperty('email')) {
                obj['email'] = ApiClient.convertToType(data['email'], 'String');
            }
            if (data.hasOwnProperty('jobTitle')) {
                obj['jobTitle'] = ApiClient.convertToType(data['jobTitle'], 'String');
            }
            if (data.hasOwnProperty('nameFirst')) {
                obj['nameFirst'] = ApiClient.convertToType(data['nameFirst'], 'String');
            }
            if (data.hasOwnProperty('nameLast')) {
                obj['nameLast'] = ApiClient.convertToType(data['nameLast'], 'String');
            }
            if (data.hasOwnProperty('nameMiddle')) {
                obj['nameMiddle'] = ApiClient.convertToType(data['nameMiddle'], 'String');
            }
            if (data.hasOwnProperty('phone')) {
                obj['phone'] = ApiClient.convertToType(data['phone'], 'String');
            }
            if (data.hasOwnProperty('suffix')) {
                obj['suffix'] = ApiClient.convertToType(data['suffix'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>CertificateContact</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>CertificateContact</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of CertificateContact.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // ensure the json data is a string
        if (data['email'] && !(typeof data['email'] === 'string' || data['email'] instanceof String)) {
            throw new Error("Expected the field `email` to be a primitive type in the JSON string but got " + data['email']);
        }
        // ensure the json data is a string
        if (data['jobTitle'] && !(typeof data['jobTitle'] === 'string' || data['jobTitle'] instanceof String)) {
            throw new Error("Expected the field `jobTitle` to be a primitive type in the JSON string but got " + data['jobTitle']);
        }
        // ensure the json data is a string
        if (data['nameFirst'] && !(typeof data['nameFirst'] === 'string' || data['nameFirst'] instanceof String)) {
            throw new Error("Expected the field `nameFirst` to be a primitive type in the JSON string but got " + data['nameFirst']);
        }
        // ensure the json data is a string
        if (data['nameLast'] && !(typeof data['nameLast'] === 'string' || data['nameLast'] instanceof String)) {
            throw new Error("Expected the field `nameLast` to be a primitive type in the JSON string but got " + data['nameLast']);
        }
        // ensure the json data is a string
        if (data['nameMiddle'] && !(typeof data['nameMiddle'] === 'string' || data['nameMiddle'] instanceof String)) {
            throw new Error("Expected the field `nameMiddle` to be a primitive type in the JSON string but got " + data['nameMiddle']);
        }
        // ensure the json data is a string
        if (data['phone'] && !(typeof data['phone'] === 'string' || data['phone'] instanceof String)) {
            throw new Error("Expected the field `phone` to be a primitive type in the JSON string but got " + data['phone']);
        }
        // ensure the json data is a string
        if (data['suffix'] && !(typeof data['suffix'] === 'string' || data['suffix'] instanceof String)) {
            throw new Error("Expected the field `suffix` to be a primitive type in the JSON string but got " + data['suffix']);
        }

        return true;
    }


}

CertificateContact.RequiredProperties = ["email", "nameFirst", "nameLast", "phone"];

/**
 * Email address of requestor contact
 * @member {String} email
 */
CertificateContact.prototype['email'] = undefined;

/**
 * Only used for EVSSL. Job title of requestor contact
 * @member {String} jobTitle
 */
CertificateContact.prototype['jobTitle'] = undefined;

/**
 * First name of requestor contact
 * @member {String} nameFirst
 */
CertificateContact.prototype['nameFirst'] = undefined;

/**
 * Last name of requestor contact
 * @member {String} nameLast
 */
CertificateContact.prototype['nameLast'] = undefined;

/**
 * Middle initial of requestor contact
 * @member {String} nameMiddle
 */
CertificateContact.prototype['nameMiddle'] = undefined;

/**
 * Phone number for requestor contact
 * @member {String} phone
 */
CertificateContact.prototype['phone'] = undefined;

/**
 * Suffix of requestor contact
 * @member {String} suffix
 */
CertificateContact.prototype['suffix'] = undefined;






export default CertificateContact;

