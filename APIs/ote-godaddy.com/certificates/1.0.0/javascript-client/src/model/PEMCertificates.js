/**
 * 
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The PEMCertificates model module.
 * @module model/PEMCertificates
 * @version 1.0.0
 */
class PEMCertificates {
    /**
     * Constructs a new <code>PEMCertificates</code>.
     * @alias module:model/PEMCertificates
     * @param certificate {String} End entity certificate in PEM format
     */
    constructor(certificate) { 
        
        PEMCertificates.initialize(this, certificate);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, certificate) { 
        obj['certificate'] = certificate;
    }

    /**
     * Constructs a <code>PEMCertificates</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/PEMCertificates} obj Optional instance to populate.
     * @return {module:model/PEMCertificates} The populated <code>PEMCertificates</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new PEMCertificates();

            if (data.hasOwnProperty('certificate')) {
                obj['certificate'] = ApiClient.convertToType(data['certificate'], 'String');
            }
            if (data.hasOwnProperty('cross')) {
                obj['cross'] = ApiClient.convertToType(data['cross'], 'String');
            }
            if (data.hasOwnProperty('intermediate')) {
                obj['intermediate'] = ApiClient.convertToType(data['intermediate'], 'String');
            }
            if (data.hasOwnProperty('root')) {
                obj['root'] = ApiClient.convertToType(data['root'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>PEMCertificates</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>PEMCertificates</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of PEMCertificates.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // ensure the json data is a string
        if (data['certificate'] && !(typeof data['certificate'] === 'string' || data['certificate'] instanceof String)) {
            throw new Error("Expected the field `certificate` to be a primitive type in the JSON string but got " + data['certificate']);
        }
        // ensure the json data is a string
        if (data['cross'] && !(typeof data['cross'] === 'string' || data['cross'] instanceof String)) {
            throw new Error("Expected the field `cross` to be a primitive type in the JSON string but got " + data['cross']);
        }
        // ensure the json data is a string
        if (data['intermediate'] && !(typeof data['intermediate'] === 'string' || data['intermediate'] instanceof String)) {
            throw new Error("Expected the field `intermediate` to be a primitive type in the JSON string but got " + data['intermediate']);
        }
        // ensure the json data is a string
        if (data['root'] && !(typeof data['root'] === 'string' || data['root'] instanceof String)) {
            throw new Error("Expected the field `root` to be a primitive type in the JSON string but got " + data['root']);
        }

        return true;
    }


}

PEMCertificates.RequiredProperties = ["certificate"];

/**
 * End entity certificate in PEM format
 * @member {String} certificate
 */
PEMCertificates.prototype['certificate'] = undefined;

/**
 * CA Cross Intermediate certificate in PEM format
 * @member {String} cross
 */
PEMCertificates.prototype['cross'] = undefined;

/**
 * CA Signing Intermediate certificate in PEM format
 * @member {String} intermediate
 */
PEMCertificates.prototype['intermediate'] = undefined;

/**
 * CA Root certificate in PEM format
 * @member {String} root
 */
PEMCertificates.prototype['root'] = undefined;






export default PEMCertificates;

