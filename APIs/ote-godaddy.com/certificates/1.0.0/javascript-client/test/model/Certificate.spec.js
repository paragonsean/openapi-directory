/**
 * 
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', process.cwd()+'/src/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require(process.cwd()+'/src/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.OpenapiJsClient);
  }
}(this, function(expect, OpenapiJsClient) {
  'use strict';

  var instance;

  beforeEach(function() {
    instance = new OpenapiJsClient.Certificate();
  });

  var getProperty = function(object, getter, property) {
    // Use getter method if present; otherwise, get the property directly.
    if (typeof object[getter] === 'function')
      return object[getter]();
    else
      return object[property];
  }

  var setProperty = function(object, setter, property, value) {
    // Use setter method if present; otherwise, set the property directly.
    if (typeof object[setter] === 'function')
      object[setter](value);
    else
      object[property] = value;
  }

  describe('Certificate', function() {
    it('should create an instance of Certificate', function() {
      // uncomment below and update the code to test Certificate
      //var instance = new OpenapiJsClient.Certificate();
      //expect(instance).to.be.a(OpenapiJsClient.Certificate);
    });

    it('should have the property certificateId (base name: "certificateId")', function() {
      // uncomment below and update the code to test the property certificateId
      //var instance = new OpenapiJsClient.Certificate();
      //expect(instance).to.be();
    });

    it('should have the property commonName (base name: "commonName")', function() {
      // uncomment below and update the code to test the property commonName
      //var instance = new OpenapiJsClient.Certificate();
      //expect(instance).to.be();
    });

    it('should have the property contact (base name: "contact")', function() {
      // uncomment below and update the code to test the property contact
      //var instance = new OpenapiJsClient.Certificate();
      //expect(instance).to.be();
    });

    it('should have the property createdAt (base name: "createdAt")', function() {
      // uncomment below and update the code to test the property createdAt
      //var instance = new OpenapiJsClient.Certificate();
      //expect(instance).to.be();
    });

    it('should have the property deniedReason (base name: "deniedReason")', function() {
      // uncomment below and update the code to test the property deniedReason
      //var instance = new OpenapiJsClient.Certificate();
      //expect(instance).to.be();
    });

    it('should have the property organization (base name: "organization")', function() {
      // uncomment below and update the code to test the property organization
      //var instance = new OpenapiJsClient.Certificate();
      //expect(instance).to.be();
    });

    it('should have the property period (base name: "period")', function() {
      // uncomment below and update the code to test the property period
      //var instance = new OpenapiJsClient.Certificate();
      //expect(instance).to.be();
    });

    it('should have the property productType (base name: "productType")', function() {
      // uncomment below and update the code to test the property productType
      //var instance = new OpenapiJsClient.Certificate();
      //expect(instance).to.be();
    });

    it('should have the property progress (base name: "progress")', function() {
      // uncomment below and update the code to test the property progress
      //var instance = new OpenapiJsClient.Certificate();
      //expect(instance).to.be();
    });

    it('should have the property revokedAt (base name: "revokedAt")', function() {
      // uncomment below and update the code to test the property revokedAt
      //var instance = new OpenapiJsClient.Certificate();
      //expect(instance).to.be();
    });

    it('should have the property rootType (base name: "rootType")', function() {
      // uncomment below and update the code to test the property rootType
      //var instance = new OpenapiJsClient.Certificate();
      //expect(instance).to.be();
    });

    it('should have the property serialNumber (base name: "serialNumber")', function() {
      // uncomment below and update the code to test the property serialNumber
      //var instance = new OpenapiJsClient.Certificate();
      //expect(instance).to.be();
    });

    it('should have the property serialNumberHex (base name: "serialNumberHex")', function() {
      // uncomment below and update the code to test the property serialNumberHex
      //var instance = new OpenapiJsClient.Certificate();
      //expect(instance).to.be();
    });

    it('should have the property slotSize (base name: "slotSize")', function() {
      // uncomment below and update the code to test the property slotSize
      //var instance = new OpenapiJsClient.Certificate();
      //expect(instance).to.be();
    });

    it('should have the property status (base name: "status")', function() {
      // uncomment below and update the code to test the property status
      //var instance = new OpenapiJsClient.Certificate();
      //expect(instance).to.be();
    });

    it('should have the property subjectAlternativeNames (base name: "subjectAlternativeNames")', function() {
      // uncomment below and update the code to test the property subjectAlternativeNames
      //var instance = new OpenapiJsClient.Certificate();
      //expect(instance).to.be();
    });

    it('should have the property validEnd (base name: "validEnd")', function() {
      // uncomment below and update the code to test the property validEnd
      //var instance = new OpenapiJsClient.Certificate();
      //expect(instance).to.be();
    });

    it('should have the property validStart (base name: "validStart")', function() {
      // uncomment below and update the code to test the property validStart
      //var instance = new OpenapiJsClient.Certificate();
      //expect(instance).to.be();
    });

  });

}));
