/*
 * 
 * <strong>GoDaddy Abuse API Terms of Use:</strong><p>GoDaddy’s Abuse API is provided to simplify and standardize the abuse reporting experience. To help us streamline the review of abuse reports, you acknowledge and agree that your use of GoDaddy’s Abuse API is subject to the following quality metrics and terms of use.</p><p>GoDaddy may, in its sole and absolute discretion, change or modify these terms, and such changes or modifications shall be effective immediately upon notice to you. Your use of GoDaddy’s Abuse API after such changes or modifications shall constitute your acceptance of these terms as last revised. If you do not agree to be bound by these terms as last revised, do not use (or continue to use) our Abuse API.</p><p>As an Abuse API user, you must only submit abuse reports via the API portal and cease all email submissions, including but not limited, to phishing@godaddy.com, netabuse@godaddy.com, malware@godaddy.com, or spam@godaddy.com, etc.  Any additional or duplicate submission outside of the API portal will be deprioritized for review. Submissions related to trademark, copyright or content issues may still be sent to trademarkclaims@godaddy.com, coyprightclaims@godaddy.com, and contentcomplaints@godaddy.com, respectively. Our [Front of Site](https://supportcenter.godaddy.com/AbuseReport) also describes other scenarios not covered by the API.</p><p>When you submit abuse reports via GoDaddy’s Abuse API, you must ensure that you accurately categorize the abuse type of each report to match our definitions in the API documentations provided to you. Any submission that fails to match our definitions or is miscategorized will be marked as a false positive. Examples include, but are not limited to, submissions of trademark complaints marked as phishing or malware, or submissions of copyright complaints marked as phishing or malware, etc.</p><p>If, at any time, the false positive rate of submissions exceeds 40% of your total submissions, as determined by GoDaddy, GoDaddy may in its sole discretion deprioritize any subsequent reports submitted by you and/or your organization.</p><p>You acknowledge and agree that submitting every URL for a single domain is not necessary and will not expedite the review process. If your submissions exceed five (5) URLs for a single domain, your report will be marked as a duplicate submission taking into account that the final outcome of such submissions would yield the same result as the original report. GoDaddy may in its sole discretion deprioritize reports submitted by you and/or your organization in the event more than 20% of your submissions are classified as duplicate submissions.</p><p>You further acknowledge and agree that our Customer Support lines are not intended to address abuse reporting matters or your use of GoDaddy’s Abuse API. Contacting Customer Support will not expedite the review process and may result in abuse reports being deprioritized, to be determined in our sole discretion.</p><p>Should you have any questions about GoDaddy’s Abuse API or any of the terms and conditions set forth above, please contact abuseapisupport@godaddy.com.</p>
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiCallback;
import org.openapitools.client.ApiClient;
import org.openapitools.client.ApiException;
import org.openapitools.client.ApiResponse;
import org.openapitools.client.Configuration;
import org.openapitools.client.Pair;
import org.openapitools.client.ProgressRequestBody;
import org.openapitools.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import org.openapitools.client.model.AbuseTicket;
import org.openapitools.client.model.AbuseTicketCreate;
import org.openapitools.client.model.AbuseTicketId;
import org.openapitools.client.model.AbuseTicketList;
import org.openapitools.client.model.Error;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class V1Api {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public V1Api() {
        this(Configuration.getDefaultApiClient());
    }

    public V1Api(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for createTicket
     * @param abuseTicketCreate The endpoint which allows the Reporter to create a new abuse ticket (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> No response was specified </td><td>  -  </td></tr>
        <tr><td> 201 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Authentication info not sent or invalid </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Authenticated user is not allowed access </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call createTicketCall(AbuseTicketCreate abuseTicketCreate, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = abuseTicketCreate;

        // create path and map variables
        String localVarPath = "/v1/abuse/tickets";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "*/*"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call createTicketValidateBeforeCall(AbuseTicketCreate abuseTicketCreate, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'abuseTicketCreate' is set
        if (abuseTicketCreate == null) {
            throw new ApiException("Missing the required parameter 'abuseTicketCreate' when calling createTicket(Async)");
        }

        return createTicketCall(abuseTicketCreate, _callback);

    }

    /**
     * Create a new abuse ticket
     * 
     * @param abuseTicketCreate The endpoint which allows the Reporter to create a new abuse ticket (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> No response was specified </td><td>  -  </td></tr>
        <tr><td> 201 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Authentication info not sent or invalid </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Authenticated user is not allowed access </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Error </td><td>  -  </td></tr>
     </table>
     */
    public void createTicket(AbuseTicketCreate abuseTicketCreate) throws ApiException {
        createTicketWithHttpInfo(abuseTicketCreate);
    }

    /**
     * Create a new abuse ticket
     * 
     * @param abuseTicketCreate The endpoint which allows the Reporter to create a new abuse ticket (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> No response was specified </td><td>  -  </td></tr>
        <tr><td> 201 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Authentication info not sent or invalid </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Authenticated user is not allowed access </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> createTicketWithHttpInfo(AbuseTicketCreate abuseTicketCreate) throws ApiException {
        okhttp3.Call localVarCall = createTicketValidateBeforeCall(abuseTicketCreate, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Create a new abuse ticket (asynchronously)
     * 
     * @param abuseTicketCreate The endpoint which allows the Reporter to create a new abuse ticket (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> No response was specified </td><td>  -  </td></tr>
        <tr><td> 201 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Authentication info not sent or invalid </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Authenticated user is not allowed access </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call createTicketAsync(AbuseTicketCreate abuseTicketCreate, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = createTicketValidateBeforeCall(abuseTicketCreate, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for getTicketInfo
     * @param ticketId A unique abuse ticket identifier (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Authentication info not sent or invalid </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Authenticated user is not allowed access </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Invalid ticket id provided </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getTicketInfoCall(String ticketId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v1/abuse/tickets/{ticketId}"
            .replace("{" + "ticketId" + "}", localVarApiClient.escapeString(ticketId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "*/*"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getTicketInfoValidateBeforeCall(String ticketId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'ticketId' is set
        if (ticketId == null) {
            throw new ApiException("Missing the required parameter 'ticketId' when calling getTicketInfo(Async)");
        }

        return getTicketInfoCall(ticketId, _callback);

    }

    /**
     * Return the abuse ticket data for a given ticket id
     * 
     * @param ticketId A unique abuse ticket identifier (required)
     * @return AbuseTicket
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Authentication info not sent or invalid </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Authenticated user is not allowed access </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Invalid ticket id provided </td><td>  -  </td></tr>
     </table>
     */
    public AbuseTicket getTicketInfo(String ticketId) throws ApiException {
        ApiResponse<AbuseTicket> localVarResp = getTicketInfoWithHttpInfo(ticketId);
        return localVarResp.getData();
    }

    /**
     * Return the abuse ticket data for a given ticket id
     * 
     * @param ticketId A unique abuse ticket identifier (required)
     * @return ApiResponse&lt;AbuseTicket&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Authentication info not sent or invalid </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Authenticated user is not allowed access </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Invalid ticket id provided </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<AbuseTicket> getTicketInfoWithHttpInfo(String ticketId) throws ApiException {
        okhttp3.Call localVarCall = getTicketInfoValidateBeforeCall(ticketId, null);
        Type localVarReturnType = new TypeToken<AbuseTicket>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Return the abuse ticket data for a given ticket id (asynchronously)
     * 
     * @param ticketId A unique abuse ticket identifier (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Authentication info not sent or invalid </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Authenticated user is not allowed access </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Invalid ticket id provided </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getTicketInfoAsync(String ticketId, final ApiCallback<AbuseTicket> _callback) throws ApiException {

        okhttp3.Call localVarCall = getTicketInfoValidateBeforeCall(ticketId, _callback);
        Type localVarReturnType = new TypeToken<AbuseTicket>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getTickets
     * @param type The type of abuse. (optional)
     * @param closed Is this abuse ticket closed? (optional, default to false)
     * @param sourceDomainOrIp The domain name or ip address the abuse originated from (optional)
     * @param target The brand/company the abuse is targeting. ie: brand name/bank name (optional)
     * @param createdStart The earliest abuse ticket creation date to pull abuse tickets for (optional)
     * @param createdEnd The latest abuse ticket creation date to pull abuse tickets for (optional)
     * @param limit Number of abuse ticket numbers to return. (optional, default to 100)
     * @param offset The earliest result set record number to pull abuse tickets for (optional, default to 0)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Authentication info not sent or invalid </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Authenticated user is not allowed access </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getTicketsCall(String type, Boolean closed, String sourceDomainOrIp, String target, String createdStart, String createdEnd, Integer limit, Integer offset, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v1/abuse/tickets";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (type != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("type", type));
        }

        if (closed != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("closed", closed));
        }

        if (sourceDomainOrIp != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("sourceDomainOrIp", sourceDomainOrIp));
        }

        if (target != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("target", target));
        }

        if (createdStart != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("createdStart", createdStart));
        }

        if (createdEnd != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("createdEnd", createdEnd));
        }

        if (limit != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("limit", limit));
        }

        if (offset != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("offset", offset));
        }

        final String[] localVarAccepts = {
            "*/*"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getTicketsValidateBeforeCall(String type, Boolean closed, String sourceDomainOrIp, String target, String createdStart, String createdEnd, Integer limit, Integer offset, final ApiCallback _callback) throws ApiException {
        return getTicketsCall(type, closed, sourceDomainOrIp, target, createdStart, createdEnd, limit, offset, _callback);

    }

    /**
     * List all abuse tickets ids that match user provided filters
     * 
     * @param type The type of abuse. (optional)
     * @param closed Is this abuse ticket closed? (optional, default to false)
     * @param sourceDomainOrIp The domain name or ip address the abuse originated from (optional)
     * @param target The brand/company the abuse is targeting. ie: brand name/bank name (optional)
     * @param createdStart The earliest abuse ticket creation date to pull abuse tickets for (optional)
     * @param createdEnd The latest abuse ticket creation date to pull abuse tickets for (optional)
     * @param limit Number of abuse ticket numbers to return. (optional, default to 100)
     * @param offset The earliest result set record number to pull abuse tickets for (optional, default to 0)
     * @return AbuseTicketList
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Authentication info not sent or invalid </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Authenticated user is not allowed access </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Error </td><td>  -  </td></tr>
     </table>
     */
    public AbuseTicketList getTickets(String type, Boolean closed, String sourceDomainOrIp, String target, String createdStart, String createdEnd, Integer limit, Integer offset) throws ApiException {
        ApiResponse<AbuseTicketList> localVarResp = getTicketsWithHttpInfo(type, closed, sourceDomainOrIp, target, createdStart, createdEnd, limit, offset);
        return localVarResp.getData();
    }

    /**
     * List all abuse tickets ids that match user provided filters
     * 
     * @param type The type of abuse. (optional)
     * @param closed Is this abuse ticket closed? (optional, default to false)
     * @param sourceDomainOrIp The domain name or ip address the abuse originated from (optional)
     * @param target The brand/company the abuse is targeting. ie: brand name/bank name (optional)
     * @param createdStart The earliest abuse ticket creation date to pull abuse tickets for (optional)
     * @param createdEnd The latest abuse ticket creation date to pull abuse tickets for (optional)
     * @param limit Number of abuse ticket numbers to return. (optional, default to 100)
     * @param offset The earliest result set record number to pull abuse tickets for (optional, default to 0)
     * @return ApiResponse&lt;AbuseTicketList&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Authentication info not sent or invalid </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Authenticated user is not allowed access </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<AbuseTicketList> getTicketsWithHttpInfo(String type, Boolean closed, String sourceDomainOrIp, String target, String createdStart, String createdEnd, Integer limit, Integer offset) throws ApiException {
        okhttp3.Call localVarCall = getTicketsValidateBeforeCall(type, closed, sourceDomainOrIp, target, createdStart, createdEnd, limit, offset, null);
        Type localVarReturnType = new TypeToken<AbuseTicketList>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * List all abuse tickets ids that match user provided filters (asynchronously)
     * 
     * @param type The type of abuse. (optional)
     * @param closed Is this abuse ticket closed? (optional, default to false)
     * @param sourceDomainOrIp The domain name or ip address the abuse originated from (optional)
     * @param target The brand/company the abuse is targeting. ie: brand name/bank name (optional)
     * @param createdStart The earliest abuse ticket creation date to pull abuse tickets for (optional)
     * @param createdEnd The latest abuse ticket creation date to pull abuse tickets for (optional)
     * @param limit Number of abuse ticket numbers to return. (optional, default to 100)
     * @param offset The earliest result set record number to pull abuse tickets for (optional, default to 0)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Authentication info not sent or invalid </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Authenticated user is not allowed access </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getTicketsAsync(String type, Boolean closed, String sourceDomainOrIp, String target, String createdStart, String createdEnd, Integer limit, Integer offset, final ApiCallback<AbuseTicketList> _callback) throws ApiException {

        okhttp3.Call localVarCall = getTicketsValidateBeforeCall(type, closed, sourceDomainOrIp, target, createdStart, createdEnd, limit, offset, _callback);
        Type localVarReturnType = new TypeToken<AbuseTicketList>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
