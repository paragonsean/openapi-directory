# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class AbuseTicketCreate(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, info: str=None, info_url: str=None, intentional: bool=False, proxy: str=None, source: str=None, target: str=None, type: str=None):
        """AbuseTicketCreate - a model defined in OpenAPI

        :param info: The info of this AbuseTicketCreate.
        :param info_url: The info_url of this AbuseTicketCreate.
        :param intentional: The intentional of this AbuseTicketCreate.
        :param proxy: The proxy of this AbuseTicketCreate.
        :param source: The source of this AbuseTicketCreate.
        :param target: The target of this AbuseTicketCreate.
        :param type: The type of this AbuseTicketCreate.
        """
        self.openapi_types = {
            'info': str,
            'info_url': str,
            'intentional': bool,
            'proxy': str,
            'source': str,
            'target': str,
            'type': str
        }

        self.attribute_map = {
            'info': 'info',
            'info_url': 'infoUrl',
            'intentional': 'intentional',
            'proxy': 'proxy',
            'source': 'source',
            'target': 'target',
            'type': 'type'
        }

        self._info = info
        self._info_url = info_url
        self._intentional = intentional
        self._proxy = proxy
        self._source = source
        self._target = target
        self._type = type

    @classmethod
    def from_dict(cls, dikt: dict) -> 'AbuseTicketCreate':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The AbuseTicketCreate of this AbuseTicketCreate.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def info(self):
        """Gets the info of this AbuseTicketCreate.

        Additional information that may assist the abuse investigator. ie: server logs or email headers/body for SPAM

        :return: The info of this AbuseTicketCreate.
        :rtype: str
        """
        return self._info

    @info.setter
    def info(self, info):
        """Sets the info of this AbuseTicketCreate.

        Additional information that may assist the abuse investigator. ie: server logs or email headers/body for SPAM

        :param info: The info of this AbuseTicketCreate.
        :type info: str
        """

        self._info = info

    @property
    def info_url(self):
        """Gets the info_url of this AbuseTicketCreate.

        Reporter URL if housing additional information that may assist the abuse investigator

        :return: The info_url of this AbuseTicketCreate.
        :rtype: str
        """
        return self._info_url

    @info_url.setter
    def info_url(self, info_url):
        """Sets the info_url of this AbuseTicketCreate.

        Reporter URL if housing additional information that may assist the abuse investigator

        :param info_url: The info_url of this AbuseTicketCreate.
        :type info_url: str
        """

        self._info_url = info_url

    @property
    def intentional(self):
        """Gets the intentional of this AbuseTicketCreate.

        Do you believe this is intentional abuse by the domain holder?

        :return: The intentional of this AbuseTicketCreate.
        :rtype: bool
        """
        return self._intentional

    @intentional.setter
    def intentional(self, intentional):
        """Sets the intentional of this AbuseTicketCreate.

        Do you believe this is intentional abuse by the domain holder?

        :param intentional: The intentional of this AbuseTicketCreate.
        :type intentional: bool
        """

        self._intentional = intentional

    @property
    def proxy(self):
        """Gets the proxy of this AbuseTicketCreate.

        The Proxy information required to view the abuse being reported. ie: Specific IP used, or country of IP viewing from

        :return: The proxy of this AbuseTicketCreate.
        :rtype: str
        """
        return self._proxy

    @proxy.setter
    def proxy(self, proxy):
        """Sets the proxy of this AbuseTicketCreate.

        The Proxy information required to view the abuse being reported. ie: Specific IP used, or country of IP viewing from

        :param proxy: The proxy of this AbuseTicketCreate.
        :type proxy: str
        """

        self._proxy = proxy

    @property
    def source(self):
        """Gets the source of this AbuseTicketCreate.

        The URL or IP where live abuse content is located at. ie: https://www.example.com/bad_stuff/bad.php

        :return: The source of this AbuseTicketCreate.
        :rtype: str
        """
        return self._source

    @source.setter
    def source(self, source):
        """Sets the source of this AbuseTicketCreate.

        The URL or IP where live abuse content is located at. ie: https://www.example.com/bad_stuff/bad.php

        :param source: The source of this AbuseTicketCreate.
        :type source: str
        """

        self._source = source

    @property
    def target(self):
        """Gets the target of this AbuseTicketCreate.

        The brand/company the abuse is targeting. ie: brand name/bank name

        :return: The target of this AbuseTicketCreate.
        :rtype: str
        """
        return self._target

    @target.setter
    def target(self, target):
        """Sets the target of this AbuseTicketCreate.

        The brand/company the abuse is targeting. ie: brand name/bank name

        :param target: The target of this AbuseTicketCreate.
        :type target: str
        """

        self._target = target

    @property
    def type(self):
        """Gets the type of this AbuseTicketCreate.

        The type of abuse being reported.

        :return: The type of this AbuseTicketCreate.
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this AbuseTicketCreate.

        The type of abuse being reported.

        :param type: The type of this AbuseTicketCreate.
        :type type: str
        """
        allowed_values = ["A_RECORD", "CHILD_ABUSE", "CONTENT", "FRAUD_WIRE", "IP_BLOCK", "MALWARE", "NETWORK_ABUSE", "PHISHING", "SPAM"]  # noqa: E501
        if type not in allowed_values:
            raise ValueError(
                "Invalid value for `type` ({0}), must be one of {1}"
                .format(type, allowed_values)
            )

        self._type = type
