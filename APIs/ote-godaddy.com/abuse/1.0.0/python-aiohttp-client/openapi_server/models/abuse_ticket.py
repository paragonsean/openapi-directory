# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class AbuseTicket(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, closed: bool=False, closed_at: str=None, created_at: str=None, domain_ip: str=None, reporter: str=None, source: str=None, target: str=None, ticket_id: str=None, type: str=None):
        """AbuseTicket - a model defined in OpenAPI

        :param closed: The closed of this AbuseTicket.
        :param closed_at: The closed_at of this AbuseTicket.
        :param created_at: The created_at of this AbuseTicket.
        :param domain_ip: The domain_ip of this AbuseTicket.
        :param reporter: The reporter of this AbuseTicket.
        :param source: The source of this AbuseTicket.
        :param target: The target of this AbuseTicket.
        :param ticket_id: The ticket_id of this AbuseTicket.
        :param type: The type of this AbuseTicket.
        """
        self.openapi_types = {
            'closed': bool,
            'closed_at': str,
            'created_at': str,
            'domain_ip': str,
            'reporter': str,
            'source': str,
            'target': str,
            'ticket_id': str,
            'type': str
        }

        self.attribute_map = {
            'closed': 'closed',
            'closed_at': 'closedAt',
            'created_at': 'createdAt',
            'domain_ip': 'domainIp',
            'reporter': 'reporter',
            'source': 'source',
            'target': 'target',
            'ticket_id': 'ticketId',
            'type': 'type'
        }

        self._closed = closed
        self._closed_at = closed_at
        self._created_at = created_at
        self._domain_ip = domain_ip
        self._reporter = reporter
        self._source = source
        self._target = target
        self._ticket_id = ticket_id
        self._type = type

    @classmethod
    def from_dict(cls, dikt: dict) -> 'AbuseTicket':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The AbuseTicket of this AbuseTicket.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def closed(self):
        """Gets the closed of this AbuseTicket.

        Is this abuse ticket closed?

        :return: The closed of this AbuseTicket.
        :rtype: bool
        """
        return self._closed

    @closed.setter
    def closed(self, closed):
        """Sets the closed of this AbuseTicket.

        Is this abuse ticket closed?

        :param closed: The closed of this AbuseTicket.
        :type closed: bool
        """
        if closed is None:
            raise ValueError("Invalid value for `closed`, must not be `None`")

        self._closed = closed

    @property
    def closed_at(self):
        """Gets the closed_at of this AbuseTicket.

        The date the abuse ticket was closed

        :return: The closed_at of this AbuseTicket.
        :rtype: str
        """
        return self._closed_at

    @closed_at.setter
    def closed_at(self, closed_at):
        """Sets the closed_at of this AbuseTicket.

        The date the abuse ticket was closed

        :param closed_at: The closed_at of this AbuseTicket.
        :type closed_at: str
        """
        if closed_at is None:
            raise ValueError("Invalid value for `closed_at`, must not be `None`")

        self._closed_at = closed_at

    @property
    def created_at(self):
        """Gets the created_at of this AbuseTicket.

        The date the abuse ticket was created

        :return: The created_at of this AbuseTicket.
        :rtype: str
        """
        return self._created_at

    @created_at.setter
    def created_at(self, created_at):
        """Sets the created_at of this AbuseTicket.

        The date the abuse ticket was created

        :param created_at: The created_at of this AbuseTicket.
        :type created_at: str
        """
        if created_at is None:
            raise ValueError("Invalid value for `created_at`, must not be `None`")

        self._created_at = created_at

    @property
    def domain_ip(self):
        """Gets the domain_ip of this AbuseTicket.

        The domain or IP the suspected abuse was reported against

        :return: The domain_ip of this AbuseTicket.
        :rtype: str
        """
        return self._domain_ip

    @domain_ip.setter
    def domain_ip(self, domain_ip):
        """Sets the domain_ip of this AbuseTicket.

        The domain or IP the suspected abuse was reported against

        :param domain_ip: The domain_ip of this AbuseTicket.
        :type domain_ip: str
        """
        if domain_ip is None:
            raise ValueError("Invalid value for `domain_ip`, must not be `None`")

        self._domain_ip = domain_ip

    @property
    def reporter(self):
        """Gets the reporter of this AbuseTicket.

        The shopper id of the person who reported the suspected abuse

        :return: The reporter of this AbuseTicket.
        :rtype: str
        """
        return self._reporter

    @reporter.setter
    def reporter(self, reporter):
        """Sets the reporter of this AbuseTicket.

        The shopper id of the person who reported the suspected abuse

        :param reporter: The reporter of this AbuseTicket.
        :type reporter: str
        """
        if reporter is None:
            raise ValueError("Invalid value for `reporter`, must not be `None`")

        self._reporter = reporter

    @property
    def source(self):
        """Gets the source of this AbuseTicket.

        The single URL or IP the suspected abuse was reported against

        :return: The source of this AbuseTicket.
        :rtype: str
        """
        return self._source

    @source.setter
    def source(self, source):
        """Sets the source of this AbuseTicket.

        The single URL or IP the suspected abuse was reported against

        :param source: The source of this AbuseTicket.
        :type source: str
        """
        if source is None:
            raise ValueError("Invalid value for `source`, must not be `None`")

        self._source = source

    @property
    def target(self):
        """Gets the target of this AbuseTicket.

        The company the suspected abuse is targeting

        :return: The target of this AbuseTicket.
        :rtype: str
        """
        return self._target

    @target.setter
    def target(self, target):
        """Sets the target of this AbuseTicket.

        The company the suspected abuse is targeting

        :param target: The target of this AbuseTicket.
        :type target: str
        """
        if target is None:
            raise ValueError("Invalid value for `target`, must not be `None`")

        self._target = target

    @property
    def ticket_id(self):
        """Gets the ticket_id of this AbuseTicket.

        Abuse ticket ID

        :return: The ticket_id of this AbuseTicket.
        :rtype: str
        """
        return self._ticket_id

    @ticket_id.setter
    def ticket_id(self, ticket_id):
        """Sets the ticket_id of this AbuseTicket.

        Abuse ticket ID

        :param ticket_id: The ticket_id of this AbuseTicket.
        :type ticket_id: str
        """
        if ticket_id is None:
            raise ValueError("Invalid value for `ticket_id`, must not be `None`")

        self._ticket_id = ticket_id

    @property
    def type(self):
        """Gets the type of this AbuseTicket.

        The type of abuse being reported

        :return: The type of this AbuseTicket.
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this AbuseTicket.

        The type of abuse being reported

        :param type: The type of this AbuseTicket.
        :type type: str
        """
        allowed_values = ["A_RECORD", "CHILD_ABUSE", "CONTENT", "FRAUD_WIRE", "IP_BLOCK", "MALWARE", "NETWORK_ABUSE", "PHISHING", "SPAM"]  # noqa: E501
        if type not in allowed_values:
            raise ValueError(
                "Invalid value for `type` ({0}), must be one of {1}"
                .format(type, allowed_values)
            )

        self._type = type
