/**
 * 
 * <strong>GoDaddy Abuse API Terms of Use:</strong><p>GoDaddy’s Abuse API is provided to simplify and standardize the abuse reporting experience. To help us streamline the review of abuse reports, you acknowledge and agree that your use of GoDaddy’s Abuse API is subject to the following quality metrics and terms of use.</p><p>GoDaddy may, in its sole and absolute discretion, change or modify these terms, and such changes or modifications shall be effective immediately upon notice to you. Your use of GoDaddy’s Abuse API after such changes or modifications shall constitute your acceptance of these terms as last revised. If you do not agree to be bound by these terms as last revised, do not use (or continue to use) our Abuse API.</p><p>As an Abuse API user, you must only submit abuse reports via the API portal and cease all email submissions, including but not limited, to phishing@godaddy.com, netabuse@godaddy.com, malware@godaddy.com, or spam@godaddy.com, etc.  Any additional or duplicate submission outside of the API portal will be deprioritized for review. Submissions related to trademark, copyright or content issues may still be sent to trademarkclaims@godaddy.com, coyprightclaims@godaddy.com, and contentcomplaints@godaddy.com, respectively. Our [Front of Site](https://supportcenter.godaddy.com/AbuseReport) also describes other scenarios not covered by the API.</p><p>When you submit abuse reports via GoDaddy’s Abuse API, you must ensure that you accurately categorize the abuse type of each report to match our definitions in the API documentations provided to you. Any submission that fails to match our definitions or is miscategorized will be marked as a false positive. Examples include, but are not limited to, submissions of trademark complaints marked as phishing or malware, or submissions of copyright complaints marked as phishing or malware, etc.</p><p>If, at any time, the false positive rate of submissions exceeds 40% of your total submissions, as determined by GoDaddy, GoDaddy may in its sole discretion deprioritize any subsequent reports submitted by you and/or your organization.</p><p>You acknowledge and agree that submitting every URL for a single domain is not necessary and will not expedite the review process. If your submissions exceed five (5) URLs for a single domain, your report will be marked as a duplicate submission taking into account that the final outcome of such submissions would yield the same result as the original report. GoDaddy may in its sole discretion deprioritize reports submitted by you and/or your organization in the event more than 20% of your submissions are classified as duplicate submissions.</p><p>You further acknowledge and agree that our Customer Support lines are not intended to address abuse reporting matters or your use of GoDaddy’s Abuse API. Contacting Customer Support will not expedite the review process and may result in abuse reports being deprioritized, to be determined in our sole discretion.</p><p>Should you have any questions about GoDaddy’s Abuse API or any of the terms and conditions set forth above, please contact abuseapisupport@godaddy.com.</p>
 *
 * The version of the OpenAPI document: 1.0.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIAbuseTicket.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIAbuseTicket::OAIAbuseTicket(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIAbuseTicket::OAIAbuseTicket() {
    this->initializeModel();
}

OAIAbuseTicket::~OAIAbuseTicket() {}

void OAIAbuseTicket::initializeModel() {

    m_closed_isSet = false;
    m_closed_isValid = false;

    m_closed_at_isSet = false;
    m_closed_at_isValid = false;

    m_created_at_isSet = false;
    m_created_at_isValid = false;

    m_domain_ip_isSet = false;
    m_domain_ip_isValid = false;

    m_reporter_isSet = false;
    m_reporter_isValid = false;

    m_source_isSet = false;
    m_source_isValid = false;

    m_target_isSet = false;
    m_target_isValid = false;

    m_ticket_id_isSet = false;
    m_ticket_id_isValid = false;

    m_type_isSet = false;
    m_type_isValid = false;
}

void OAIAbuseTicket::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIAbuseTicket::fromJsonObject(QJsonObject json) {

    m_closed_isValid = ::OpenAPI::fromJsonValue(m_closed, json[QString("closed")]);
    m_closed_isSet = !json[QString("closed")].isNull() && m_closed_isValid;

    m_closed_at_isValid = ::OpenAPI::fromJsonValue(m_closed_at, json[QString("closedAt")]);
    m_closed_at_isSet = !json[QString("closedAt")].isNull() && m_closed_at_isValid;

    m_created_at_isValid = ::OpenAPI::fromJsonValue(m_created_at, json[QString("createdAt")]);
    m_created_at_isSet = !json[QString("createdAt")].isNull() && m_created_at_isValid;

    m_domain_ip_isValid = ::OpenAPI::fromJsonValue(m_domain_ip, json[QString("domainIp")]);
    m_domain_ip_isSet = !json[QString("domainIp")].isNull() && m_domain_ip_isValid;

    m_reporter_isValid = ::OpenAPI::fromJsonValue(m_reporter, json[QString("reporter")]);
    m_reporter_isSet = !json[QString("reporter")].isNull() && m_reporter_isValid;

    m_source_isValid = ::OpenAPI::fromJsonValue(m_source, json[QString("source")]);
    m_source_isSet = !json[QString("source")].isNull() && m_source_isValid;

    m_target_isValid = ::OpenAPI::fromJsonValue(m_target, json[QString("target")]);
    m_target_isSet = !json[QString("target")].isNull() && m_target_isValid;

    m_ticket_id_isValid = ::OpenAPI::fromJsonValue(m_ticket_id, json[QString("ticketId")]);
    m_ticket_id_isSet = !json[QString("ticketId")].isNull() && m_ticket_id_isValid;

    m_type_isValid = ::OpenAPI::fromJsonValue(m_type, json[QString("type")]);
    m_type_isSet = !json[QString("type")].isNull() && m_type_isValid;
}

QString OAIAbuseTicket::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIAbuseTicket::asJsonObject() const {
    QJsonObject obj;
    if (m_closed_isSet) {
        obj.insert(QString("closed"), ::OpenAPI::toJsonValue(m_closed));
    }
    if (m_closed_at_isSet) {
        obj.insert(QString("closedAt"), ::OpenAPI::toJsonValue(m_closed_at));
    }
    if (m_created_at_isSet) {
        obj.insert(QString("createdAt"), ::OpenAPI::toJsonValue(m_created_at));
    }
    if (m_domain_ip_isSet) {
        obj.insert(QString("domainIp"), ::OpenAPI::toJsonValue(m_domain_ip));
    }
    if (m_reporter_isSet) {
        obj.insert(QString("reporter"), ::OpenAPI::toJsonValue(m_reporter));
    }
    if (m_source_isSet) {
        obj.insert(QString("source"), ::OpenAPI::toJsonValue(m_source));
    }
    if (m_target_isSet) {
        obj.insert(QString("target"), ::OpenAPI::toJsonValue(m_target));
    }
    if (m_ticket_id_isSet) {
        obj.insert(QString("ticketId"), ::OpenAPI::toJsonValue(m_ticket_id));
    }
    if (m_type_isSet) {
        obj.insert(QString("type"), ::OpenAPI::toJsonValue(m_type));
    }
    return obj;
}

bool OAIAbuseTicket::isClosed() const {
    return m_closed;
}
void OAIAbuseTicket::setClosed(const bool &closed) {
    m_closed = closed;
    m_closed_isSet = true;
}

bool OAIAbuseTicket::is_closed_Set() const{
    return m_closed_isSet;
}

bool OAIAbuseTicket::is_closed_Valid() const{
    return m_closed_isValid;
}

QString OAIAbuseTicket::getClosedAt() const {
    return m_closed_at;
}
void OAIAbuseTicket::setClosedAt(const QString &closed_at) {
    m_closed_at = closed_at;
    m_closed_at_isSet = true;
}

bool OAIAbuseTicket::is_closed_at_Set() const{
    return m_closed_at_isSet;
}

bool OAIAbuseTicket::is_closed_at_Valid() const{
    return m_closed_at_isValid;
}

QString OAIAbuseTicket::getCreatedAt() const {
    return m_created_at;
}
void OAIAbuseTicket::setCreatedAt(const QString &created_at) {
    m_created_at = created_at;
    m_created_at_isSet = true;
}

bool OAIAbuseTicket::is_created_at_Set() const{
    return m_created_at_isSet;
}

bool OAIAbuseTicket::is_created_at_Valid() const{
    return m_created_at_isValid;
}

QString OAIAbuseTicket::getDomainIp() const {
    return m_domain_ip;
}
void OAIAbuseTicket::setDomainIp(const QString &domain_ip) {
    m_domain_ip = domain_ip;
    m_domain_ip_isSet = true;
}

bool OAIAbuseTicket::is_domain_ip_Set() const{
    return m_domain_ip_isSet;
}

bool OAIAbuseTicket::is_domain_ip_Valid() const{
    return m_domain_ip_isValid;
}

QString OAIAbuseTicket::getReporter() const {
    return m_reporter;
}
void OAIAbuseTicket::setReporter(const QString &reporter) {
    m_reporter = reporter;
    m_reporter_isSet = true;
}

bool OAIAbuseTicket::is_reporter_Set() const{
    return m_reporter_isSet;
}

bool OAIAbuseTicket::is_reporter_Valid() const{
    return m_reporter_isValid;
}

QString OAIAbuseTicket::getSource() const {
    return m_source;
}
void OAIAbuseTicket::setSource(const QString &source) {
    m_source = source;
    m_source_isSet = true;
}

bool OAIAbuseTicket::is_source_Set() const{
    return m_source_isSet;
}

bool OAIAbuseTicket::is_source_Valid() const{
    return m_source_isValid;
}

QString OAIAbuseTicket::getTarget() const {
    return m_target;
}
void OAIAbuseTicket::setTarget(const QString &target) {
    m_target = target;
    m_target_isSet = true;
}

bool OAIAbuseTicket::is_target_Set() const{
    return m_target_isSet;
}

bool OAIAbuseTicket::is_target_Valid() const{
    return m_target_isValid;
}

QString OAIAbuseTicket::getTicketId() const {
    return m_ticket_id;
}
void OAIAbuseTicket::setTicketId(const QString &ticket_id) {
    m_ticket_id = ticket_id;
    m_ticket_id_isSet = true;
}

bool OAIAbuseTicket::is_ticket_id_Set() const{
    return m_ticket_id_isSet;
}

bool OAIAbuseTicket::is_ticket_id_Valid() const{
    return m_ticket_id_isValid;
}

QString OAIAbuseTicket::getType() const {
    return m_type;
}
void OAIAbuseTicket::setType(const QString &type) {
    m_type = type;
    m_type_isSet = true;
}

bool OAIAbuseTicket::is_type_Set() const{
    return m_type_isSet;
}

bool OAIAbuseTicket::is_type_Valid() const{
    return m_type_isValid;
}

bool OAIAbuseTicket::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_closed_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_closed_at_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_created_at_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_domain_ip_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_reporter_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_source_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_target_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_ticket_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_type_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIAbuseTicket::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_closed_isValid && m_closed_at_isValid && m_created_at_isValid && m_domain_ip_isValid && m_reporter_isValid && m_source_isValid && m_target_isValid && m_ticket_id_isValid && m_type_isValid && true;
}

} // namespace OpenAPI
