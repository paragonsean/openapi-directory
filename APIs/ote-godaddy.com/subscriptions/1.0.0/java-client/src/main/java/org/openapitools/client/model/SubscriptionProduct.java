/*
 * 
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * SubscriptionProduct
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:00:11.575561-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class SubscriptionProduct {
  public static final String SERIALIZED_NAME_LABEL = "label";
  @SerializedName(SERIALIZED_NAME_LABEL)
  private String label;

  public static final String SERIALIZED_NAME_NAMESPACE = "namespace";
  @SerializedName(SERIALIZED_NAME_NAMESPACE)
  private String namespace;

  public static final String SERIALIZED_NAME_PFID = "pfid";
  @SerializedName(SERIALIZED_NAME_PFID)
  private Integer pfid;

  public static final String SERIALIZED_NAME_PRODUCT_GROUP_KEY = "productGroupKey";
  @SerializedName(SERIALIZED_NAME_PRODUCT_GROUP_KEY)
  private String productGroupKey;

  public static final String SERIALIZED_NAME_RENEWAL_PERIOD = "renewalPeriod";
  @SerializedName(SERIALIZED_NAME_RENEWAL_PERIOD)
  private Integer renewalPeriod;

  /**
   * The unit of time that &#x60;renewalPeriod&#x60; is measured in
   */
  @JsonAdapter(RenewalPeriodUnitEnum.Adapter.class)
  public enum RenewalPeriodUnitEnum {
    MONTH("MONTH"),
    
    QUARTER("QUARTER"),
    
    SEMI_ANNUAL("SEMI_ANNUAL"),
    
    YEAR("YEAR");

    private String value;

    RenewalPeriodUnitEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static RenewalPeriodUnitEnum fromValue(String value) {
      for (RenewalPeriodUnitEnum b : RenewalPeriodUnitEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<RenewalPeriodUnitEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final RenewalPeriodUnitEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public RenewalPeriodUnitEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return RenewalPeriodUnitEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      RenewalPeriodUnitEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_RENEWAL_PERIOD_UNIT = "renewalPeriodUnit";
  @SerializedName(SERIALIZED_NAME_RENEWAL_PERIOD_UNIT)
  private RenewalPeriodUnitEnum renewalPeriodUnit;

  public static final String SERIALIZED_NAME_RENEWAL_PFID = "renewalPfid";
  @SerializedName(SERIALIZED_NAME_RENEWAL_PFID)
  private Integer renewalPfid;

  public static final String SERIALIZED_NAME_SUPPORT_BILL_ON = "supportBillOn";
  @SerializedName(SERIALIZED_NAME_SUPPORT_BILL_ON)
  private Boolean supportBillOn;

  public SubscriptionProduct() {
  }

  public SubscriptionProduct label(String label) {
    this.label = label;
    return this;
  }

  /**
   * A human readable description of the Product that is subscribed
   * @return label
   */
  @javax.annotation.Nonnull
  public String getLabel() {
    return label;
  }

  public void setLabel(String label) {
    this.label = label;
  }


  public SubscriptionProduct namespace(String namespace) {
    this.namespace = namespace;
    return this;
  }

  /**
   * Grouping of related Subscriptions
   * @return namespace
   */
  @javax.annotation.Nonnull
  public String getNamespace() {
    return namespace;
  }

  public void setNamespace(String namespace) {
    this.namespace = namespace;
  }


  public SubscriptionProduct pfid(Integer pfid) {
    this.pfid = pfid;
    return this;
  }

  /**
   * Unique identifier of the Product that is subscribed
   * @return pfid
   */
  @javax.annotation.Nonnull
  public Integer getPfid() {
    return pfid;
  }

  public void setPfid(Integer pfid) {
    this.pfid = pfid;
  }


  public SubscriptionProduct productGroupKey(String productGroupKey) {
    this.productGroupKey = productGroupKey;
    return this;
  }

  /**
   * Primary key of a grouping of related Subscriptions
   * @return productGroupKey
   */
  @javax.annotation.Nonnull
  public String getProductGroupKey() {
    return productGroupKey;
  }

  public void setProductGroupKey(String productGroupKey) {
    this.productGroupKey = productGroupKey;
  }


  public SubscriptionProduct renewalPeriod(Integer renewalPeriod) {
    this.renewalPeriod = renewalPeriod;
    return this;
  }

  /**
   * The number of &#x60;renewalPeriodUnits&#x60; that will be added by the &#x60;renewalPfid&#x60;
   * @return renewalPeriod
   */
  @javax.annotation.Nonnull
  public Integer getRenewalPeriod() {
    return renewalPeriod;
  }

  public void setRenewalPeriod(Integer renewalPeriod) {
    this.renewalPeriod = renewalPeriod;
  }


  public SubscriptionProduct renewalPeriodUnit(RenewalPeriodUnitEnum renewalPeriodUnit) {
    this.renewalPeriodUnit = renewalPeriodUnit;
    return this;
  }

  /**
   * The unit of time that &#x60;renewalPeriod&#x60; is measured in
   * @return renewalPeriodUnit
   */
  @javax.annotation.Nonnull
  public RenewalPeriodUnitEnum getRenewalPeriodUnit() {
    return renewalPeriodUnit;
  }

  public void setRenewalPeriodUnit(RenewalPeriodUnitEnum renewalPeriodUnit) {
    this.renewalPeriodUnit = renewalPeriodUnit;
  }


  public SubscriptionProduct renewalPfid(Integer renewalPfid) {
    this.renewalPfid = renewalPfid;
    return this;
  }

  /**
   * Unique identifier of the renewal Product
   * @return renewalPfid
   */
  @javax.annotation.Nonnull
  public Integer getRenewalPfid() {
    return renewalPfid;
  }

  public void setRenewalPfid(Integer renewalPfid) {
    this.renewalPfid = renewalPfid;
  }


  public SubscriptionProduct supportBillOn(Boolean supportBillOn) {
    this.supportBillOn = supportBillOn;
    return this;
  }

  /**
   * Whether the product supports the &#x60;billOn&#x60; option on the renewal endpoint
   * @return supportBillOn
   */
  @javax.annotation.Nonnull
  public Boolean getSupportBillOn() {
    return supportBillOn;
  }

  public void setSupportBillOn(Boolean supportBillOn) {
    this.supportBillOn = supportBillOn;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    SubscriptionProduct subscriptionProduct = (SubscriptionProduct) o;
    return Objects.equals(this.label, subscriptionProduct.label) &&
        Objects.equals(this.namespace, subscriptionProduct.namespace) &&
        Objects.equals(this.pfid, subscriptionProduct.pfid) &&
        Objects.equals(this.productGroupKey, subscriptionProduct.productGroupKey) &&
        Objects.equals(this.renewalPeriod, subscriptionProduct.renewalPeriod) &&
        Objects.equals(this.renewalPeriodUnit, subscriptionProduct.renewalPeriodUnit) &&
        Objects.equals(this.renewalPfid, subscriptionProduct.renewalPfid) &&
        Objects.equals(this.supportBillOn, subscriptionProduct.supportBillOn);
  }

  @Override
  public int hashCode() {
    return Objects.hash(label, namespace, pfid, productGroupKey, renewalPeriod, renewalPeriodUnit, renewalPfid, supportBillOn);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class SubscriptionProduct {\n");
    sb.append("    label: ").append(toIndentedString(label)).append("\n");
    sb.append("    namespace: ").append(toIndentedString(namespace)).append("\n");
    sb.append("    pfid: ").append(toIndentedString(pfid)).append("\n");
    sb.append("    productGroupKey: ").append(toIndentedString(productGroupKey)).append("\n");
    sb.append("    renewalPeriod: ").append(toIndentedString(renewalPeriod)).append("\n");
    sb.append("    renewalPeriodUnit: ").append(toIndentedString(renewalPeriodUnit)).append("\n");
    sb.append("    renewalPfid: ").append(toIndentedString(renewalPfid)).append("\n");
    sb.append("    supportBillOn: ").append(toIndentedString(supportBillOn)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("label");
    openapiFields.add("namespace");
    openapiFields.add("pfid");
    openapiFields.add("productGroupKey");
    openapiFields.add("renewalPeriod");
    openapiFields.add("renewalPeriodUnit");
    openapiFields.add("renewalPfid");
    openapiFields.add("supportBillOn");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("label");
    openapiRequiredFields.add("namespace");
    openapiRequiredFields.add("pfid");
    openapiRequiredFields.add("productGroupKey");
    openapiRequiredFields.add("renewalPeriod");
    openapiRequiredFields.add("renewalPeriodUnit");
    openapiRequiredFields.add("renewalPfid");
    openapiRequiredFields.add("supportBillOn");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to SubscriptionProduct
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!SubscriptionProduct.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in SubscriptionProduct is not found in the empty JSON string", SubscriptionProduct.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!SubscriptionProduct.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `SubscriptionProduct` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : SubscriptionProduct.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if (!jsonObj.get("label").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `label` to be a primitive type in the JSON string but got `%s`", jsonObj.get("label").toString()));
      }
      if (!jsonObj.get("namespace").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `namespace` to be a primitive type in the JSON string but got `%s`", jsonObj.get("namespace").toString()));
      }
      if (!jsonObj.get("productGroupKey").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `productGroupKey` to be a primitive type in the JSON string but got `%s`", jsonObj.get("productGroupKey").toString()));
      }
      if (!jsonObj.get("renewalPeriodUnit").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `renewalPeriodUnit` to be a primitive type in the JSON string but got `%s`", jsonObj.get("renewalPeriodUnit").toString()));
      }
      // validate the required field `renewalPeriodUnit`
      RenewalPeriodUnitEnum.validateJsonElement(jsonObj.get("renewalPeriodUnit"));
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!SubscriptionProduct.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'SubscriptionProduct' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<SubscriptionProduct> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(SubscriptionProduct.class));

       return (TypeAdapter<T>) new TypeAdapter<SubscriptionProduct>() {
           @Override
           public void write(JsonWriter out, SubscriptionProduct value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public SubscriptionProduct read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of SubscriptionProduct given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of SubscriptionProduct
   * @throws IOException if the JSON string is invalid with respect to SubscriptionProduct
   */
  public static SubscriptionProduct fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, SubscriptionProduct.class);
  }

  /**
   * Convert an instance of SubscriptionProduct to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

