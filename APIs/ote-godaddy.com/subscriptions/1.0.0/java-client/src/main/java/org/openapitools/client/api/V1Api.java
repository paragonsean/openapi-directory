/*
 * 
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiCallback;
import org.openapitools.client.ApiClient;
import org.openapitools.client.ApiException;
import org.openapitools.client.ApiResponse;
import org.openapitools.client.Configuration;
import org.openapitools.client.Pair;
import org.openapitools.client.ProgressRequestBody;
import org.openapitools.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import org.openapitools.client.model.Error;
import org.openapitools.client.model.ErrorLimit;
import org.openapitools.client.model.ProductGroup;
import org.openapitools.client.model.Subscription;
import org.openapitools.client.model.SubscriptionList;
import org.openapitools.client.model.SubscriptionUpdate;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class V1Api {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public V1Api() {
        this(Configuration.getDefaultApiClient());
    }

    public V1Api(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for callList
     * @param xShopperId Shopper ID to return subscriptions for when not using JWT (optional)
     * @param xMarketId The market that the response should be formatted for (optional, default to en-US)
     * @param productGroupKeys Only return Subscriptions with the specified product groups (optional)
     * @param includes Optional details to be included in the response (optional)
     * @param offset Number of Subscriptions to skip before starting to return paged results (must be a multiple of the limit) (optional, default to 0)
     * @param limit Number of Subscriptions to retrieve in this page, starting after offset (optional, default to 25)
     * @param sort Property name that will be used to sort results. \&quot;-\&quot; indicates descending (optional, default to -expiresAt)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Request was successful </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Request was malformed </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Authentication info not sent or invalid </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Authenticated user is not allowed access </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Invalid query parameter (custom message returned for each parameter) </td><td>  -  </td></tr>
        <tr><td> 429 </td><td> Too many requests received within interval </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal server error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call callListCall(String xShopperId, String xMarketId, List<String> productGroupKeys, List<String> includes, Integer offset, Integer limit, String sort, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v1/subscriptions";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (productGroupKeys != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("csv", "productGroupKeys", productGroupKeys));
        }

        if (includes != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("csv", "includes", includes));
        }

        if (offset != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("offset", offset));
        }

        if (limit != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("limit", limit));
        }

        if (sort != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("sort", sort));
        }

        if (xShopperId != null) {
            localVarHeaderParams.put("X-Shopper-Id", localVarApiClient.parameterToString(xShopperId));
        }

        if (xMarketId != null) {
            localVarHeaderParams.put("X-Market-Id", localVarApiClient.parameterToString(xMarketId));
        }

        final String[] localVarAccepts = {
            "application/javascript",
            "application/json",
            "application/xml",
            "text/javascript",
            "text/xml"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call callListValidateBeforeCall(String xShopperId, String xMarketId, List<String> productGroupKeys, List<String> includes, Integer offset, Integer limit, String sort, final ApiCallback _callback) throws ApiException {
        return callListCall(xShopperId, xMarketId, productGroupKeys, includes, offset, limit, sort, _callback);

    }

    /**
     * Retrieve a list of Subscriptions for the specified Shopper
     * 
     * @param xShopperId Shopper ID to return subscriptions for when not using JWT (optional)
     * @param xMarketId The market that the response should be formatted for (optional, default to en-US)
     * @param productGroupKeys Only return Subscriptions with the specified product groups (optional)
     * @param includes Optional details to be included in the response (optional)
     * @param offset Number of Subscriptions to skip before starting to return paged results (must be a multiple of the limit) (optional, default to 0)
     * @param limit Number of Subscriptions to retrieve in this page, starting after offset (optional, default to 25)
     * @param sort Property name that will be used to sort results. \&quot;-\&quot; indicates descending (optional, default to -expiresAt)
     * @return SubscriptionList
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Request was successful </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Request was malformed </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Authentication info not sent or invalid </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Authenticated user is not allowed access </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Invalid query parameter (custom message returned for each parameter) </td><td>  -  </td></tr>
        <tr><td> 429 </td><td> Too many requests received within interval </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal server error </td><td>  -  </td></tr>
     </table>
     */
    public SubscriptionList callList(String xShopperId, String xMarketId, List<String> productGroupKeys, List<String> includes, Integer offset, Integer limit, String sort) throws ApiException {
        ApiResponse<SubscriptionList> localVarResp = callListWithHttpInfo(xShopperId, xMarketId, productGroupKeys, includes, offset, limit, sort);
        return localVarResp.getData();
    }

    /**
     * Retrieve a list of Subscriptions for the specified Shopper
     * 
     * @param xShopperId Shopper ID to return subscriptions for when not using JWT (optional)
     * @param xMarketId The market that the response should be formatted for (optional, default to en-US)
     * @param productGroupKeys Only return Subscriptions with the specified product groups (optional)
     * @param includes Optional details to be included in the response (optional)
     * @param offset Number of Subscriptions to skip before starting to return paged results (must be a multiple of the limit) (optional, default to 0)
     * @param limit Number of Subscriptions to retrieve in this page, starting after offset (optional, default to 25)
     * @param sort Property name that will be used to sort results. \&quot;-\&quot; indicates descending (optional, default to -expiresAt)
     * @return ApiResponse&lt;SubscriptionList&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Request was successful </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Request was malformed </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Authentication info not sent or invalid </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Authenticated user is not allowed access </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Invalid query parameter (custom message returned for each parameter) </td><td>  -  </td></tr>
        <tr><td> 429 </td><td> Too many requests received within interval </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal server error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<SubscriptionList> callListWithHttpInfo(String xShopperId, String xMarketId, List<String> productGroupKeys, List<String> includes, Integer offset, Integer limit, String sort) throws ApiException {
        okhttp3.Call localVarCall = callListValidateBeforeCall(xShopperId, xMarketId, productGroupKeys, includes, offset, limit, sort, null);
        Type localVarReturnType = new TypeToken<SubscriptionList>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Retrieve a list of Subscriptions for the specified Shopper (asynchronously)
     * 
     * @param xShopperId Shopper ID to return subscriptions for when not using JWT (optional)
     * @param xMarketId The market that the response should be formatted for (optional, default to en-US)
     * @param productGroupKeys Only return Subscriptions with the specified product groups (optional)
     * @param includes Optional details to be included in the response (optional)
     * @param offset Number of Subscriptions to skip before starting to return paged results (must be a multiple of the limit) (optional, default to 0)
     * @param limit Number of Subscriptions to retrieve in this page, starting after offset (optional, default to 25)
     * @param sort Property name that will be used to sort results. \&quot;-\&quot; indicates descending (optional, default to -expiresAt)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Request was successful </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Request was malformed </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Authentication info not sent or invalid </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Authenticated user is not allowed access </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Invalid query parameter (custom message returned for each parameter) </td><td>  -  </td></tr>
        <tr><td> 429 </td><td> Too many requests received within interval </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal server error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call callListAsync(String xShopperId, String xMarketId, List<String> productGroupKeys, List<String> includes, Integer offset, Integer limit, String sort, final ApiCallback<SubscriptionList> _callback) throws ApiException {

        okhttp3.Call localVarCall = callListValidateBeforeCall(xShopperId, xMarketId, productGroupKeys, includes, offset, limit, sort, _callback);
        Type localVarReturnType = new TypeToken<SubscriptionList>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for cancel
     * @param subscriptionId Unique identifier of the Subscription to cancel (required)
     * @param xShopperId Shopper ID to cancel subscriptions for when not using JWT (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Request was successful </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Request was malformed </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Authentication info not sent or invalid </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Authenticated user is not allowed access </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Failed to determine if the domain is protected (invalid domain ID)&lt;br&gt;Invalid Subscription Id&lt;br&gt;The Office 365 Subscription cannot be cancelled (shopper is migrating)&lt;br&gt;The Subscription cannot be cancelled&lt;br&gt;The Subscription cannot be cancelled (PFID is disabled for cancellation)&lt;br&gt;The Subscription cannot be cancelled (domain is protected)&lt;br&gt;The domain alert Subscription cannot be cancelled </td><td>  -  </td></tr>
        <tr><td> 429 </td><td> Too many requests received within interval </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Failed to determine if the Office 365 account is migrating&lt;br&gt;Failed to determine if the domain alert is cancellable&lt;br&gt;Failed to determine if the domain is protected&lt;br&gt;Internal server error </td><td>  -  </td></tr>
        <tr><td> 504 </td><td> Gateway timeout </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call cancelCall(String subscriptionId, String xShopperId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v1/subscriptions/{subscriptionId}"
            .replace("{" + "subscriptionId" + "}", localVarApiClient.escapeString(subscriptionId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (xShopperId != null) {
            localVarHeaderParams.put("X-Shopper-Id", localVarApiClient.parameterToString(xShopperId));
        }

        final String[] localVarAccepts = {
            "application/javascript",
            "application/json",
            "application/xml",
            "text/javascript",
            "text/xml"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call cancelValidateBeforeCall(String subscriptionId, String xShopperId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'subscriptionId' is set
        if (subscriptionId == null) {
            throw new ApiException("Missing the required parameter 'subscriptionId' when calling cancel(Async)");
        }

        return cancelCall(subscriptionId, xShopperId, _callback);

    }

    /**
     * Cancel the specified Subscription
     * 
     * @param subscriptionId Unique identifier of the Subscription to cancel (required)
     * @param xShopperId Shopper ID to cancel subscriptions for when not using JWT (optional)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Request was successful </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Request was malformed </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Authentication info not sent or invalid </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Authenticated user is not allowed access </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Failed to determine if the domain is protected (invalid domain ID)&lt;br&gt;Invalid Subscription Id&lt;br&gt;The Office 365 Subscription cannot be cancelled (shopper is migrating)&lt;br&gt;The Subscription cannot be cancelled&lt;br&gt;The Subscription cannot be cancelled (PFID is disabled for cancellation)&lt;br&gt;The Subscription cannot be cancelled (domain is protected)&lt;br&gt;The domain alert Subscription cannot be cancelled </td><td>  -  </td></tr>
        <tr><td> 429 </td><td> Too many requests received within interval </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Failed to determine if the Office 365 account is migrating&lt;br&gt;Failed to determine if the domain alert is cancellable&lt;br&gt;Failed to determine if the domain is protected&lt;br&gt;Internal server error </td><td>  -  </td></tr>
        <tr><td> 504 </td><td> Gateway timeout </td><td>  -  </td></tr>
     </table>
     */
    public void cancel(String subscriptionId, String xShopperId) throws ApiException {
        cancelWithHttpInfo(subscriptionId, xShopperId);
    }

    /**
     * Cancel the specified Subscription
     * 
     * @param subscriptionId Unique identifier of the Subscription to cancel (required)
     * @param xShopperId Shopper ID to cancel subscriptions for when not using JWT (optional)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Request was successful </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Request was malformed </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Authentication info not sent or invalid </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Authenticated user is not allowed access </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Failed to determine if the domain is protected (invalid domain ID)&lt;br&gt;Invalid Subscription Id&lt;br&gt;The Office 365 Subscription cannot be cancelled (shopper is migrating)&lt;br&gt;The Subscription cannot be cancelled&lt;br&gt;The Subscription cannot be cancelled (PFID is disabled for cancellation)&lt;br&gt;The Subscription cannot be cancelled (domain is protected)&lt;br&gt;The domain alert Subscription cannot be cancelled </td><td>  -  </td></tr>
        <tr><td> 429 </td><td> Too many requests received within interval </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Failed to determine if the Office 365 account is migrating&lt;br&gt;Failed to determine if the domain alert is cancellable&lt;br&gt;Failed to determine if the domain is protected&lt;br&gt;Internal server error </td><td>  -  </td></tr>
        <tr><td> 504 </td><td> Gateway timeout </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> cancelWithHttpInfo(String subscriptionId, String xShopperId) throws ApiException {
        okhttp3.Call localVarCall = cancelValidateBeforeCall(subscriptionId, xShopperId, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Cancel the specified Subscription (asynchronously)
     * 
     * @param subscriptionId Unique identifier of the Subscription to cancel (required)
     * @param xShopperId Shopper ID to cancel subscriptions for when not using JWT (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Request was successful </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Request was malformed </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Authentication info not sent or invalid </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Authenticated user is not allowed access </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Failed to determine if the domain is protected (invalid domain ID)&lt;br&gt;Invalid Subscription Id&lt;br&gt;The Office 365 Subscription cannot be cancelled (shopper is migrating)&lt;br&gt;The Subscription cannot be cancelled&lt;br&gt;The Subscription cannot be cancelled (PFID is disabled for cancellation)&lt;br&gt;The Subscription cannot be cancelled (domain is protected)&lt;br&gt;The domain alert Subscription cannot be cancelled </td><td>  -  </td></tr>
        <tr><td> 429 </td><td> Too many requests received within interval </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Failed to determine if the Office 365 account is migrating&lt;br&gt;Failed to determine if the domain alert is cancellable&lt;br&gt;Failed to determine if the domain is protected&lt;br&gt;Internal server error </td><td>  -  </td></tr>
        <tr><td> 504 </td><td> Gateway timeout </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call cancelAsync(String subscriptionId, String xShopperId, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = cancelValidateBeforeCall(subscriptionId, xShopperId, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for get
     * @param subscriptionId Unique identifier of the Subscription to retrieve (required)
     * @param xShopperId Shopper ID to be operated on, if different from JWT (optional)
     * @param xMarketId Unique identifier of the Market in which the request is happening (optional, default to en-US)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Request was successful </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Request was malformed </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Authentication info not sent or invalid </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Authenticated user is not allowed access </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Invalid Subscription Id </td><td>  -  </td></tr>
        <tr><td> 429 </td><td> Too many requests received within interval </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal server error </td><td>  -  </td></tr>
        <tr><td> 504 </td><td> Gateway timeout </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getCall(String subscriptionId, String xShopperId, String xMarketId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v1/subscriptions/{subscriptionId}"
            .replace("{" + "subscriptionId" + "}", localVarApiClient.escapeString(subscriptionId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (xShopperId != null) {
            localVarHeaderParams.put("X-Shopper-Id", localVarApiClient.parameterToString(xShopperId));
        }

        if (xMarketId != null) {
            localVarHeaderParams.put("X-Market-Id", localVarApiClient.parameterToString(xMarketId));
        }

        final String[] localVarAccepts = {
            "application/javascript",
            "application/json",
            "application/xml",
            "text/javascript",
            "text/xml"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getValidateBeforeCall(String subscriptionId, String xShopperId, String xMarketId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'subscriptionId' is set
        if (subscriptionId == null) {
            throw new ApiException("Missing the required parameter 'subscriptionId' when calling get(Async)");
        }

        return getCall(subscriptionId, xShopperId, xMarketId, _callback);

    }

    /**
     * Retrieve details for the specified Subscription
     * 
     * @param subscriptionId Unique identifier of the Subscription to retrieve (required)
     * @param xShopperId Shopper ID to be operated on, if different from JWT (optional)
     * @param xMarketId Unique identifier of the Market in which the request is happening (optional, default to en-US)
     * @return Subscription
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Request was successful </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Request was malformed </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Authentication info not sent or invalid </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Authenticated user is not allowed access </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Invalid Subscription Id </td><td>  -  </td></tr>
        <tr><td> 429 </td><td> Too many requests received within interval </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal server error </td><td>  -  </td></tr>
        <tr><td> 504 </td><td> Gateway timeout </td><td>  -  </td></tr>
     </table>
     */
    public Subscription get(String subscriptionId, String xShopperId, String xMarketId) throws ApiException {
        ApiResponse<Subscription> localVarResp = getWithHttpInfo(subscriptionId, xShopperId, xMarketId);
        return localVarResp.getData();
    }

    /**
     * Retrieve details for the specified Subscription
     * 
     * @param subscriptionId Unique identifier of the Subscription to retrieve (required)
     * @param xShopperId Shopper ID to be operated on, if different from JWT (optional)
     * @param xMarketId Unique identifier of the Market in which the request is happening (optional, default to en-US)
     * @return ApiResponse&lt;Subscription&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Request was successful </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Request was malformed </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Authentication info not sent or invalid </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Authenticated user is not allowed access </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Invalid Subscription Id </td><td>  -  </td></tr>
        <tr><td> 429 </td><td> Too many requests received within interval </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal server error </td><td>  -  </td></tr>
        <tr><td> 504 </td><td> Gateway timeout </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Subscription> getWithHttpInfo(String subscriptionId, String xShopperId, String xMarketId) throws ApiException {
        okhttp3.Call localVarCall = getValidateBeforeCall(subscriptionId, xShopperId, xMarketId, null);
        Type localVarReturnType = new TypeToken<Subscription>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Retrieve details for the specified Subscription (asynchronously)
     * 
     * @param subscriptionId Unique identifier of the Subscription to retrieve (required)
     * @param xShopperId Shopper ID to be operated on, if different from JWT (optional)
     * @param xMarketId Unique identifier of the Market in which the request is happening (optional, default to en-US)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Request was successful </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Request was malformed </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Authentication info not sent or invalid </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Authenticated user is not allowed access </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Invalid Subscription Id </td><td>  -  </td></tr>
        <tr><td> 429 </td><td> Too many requests received within interval </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal server error </td><td>  -  </td></tr>
        <tr><td> 504 </td><td> Gateway timeout </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getAsync(String subscriptionId, String xShopperId, String xMarketId, final ApiCallback<Subscription> _callback) throws ApiException {

        okhttp3.Call localVarCall = getValidateBeforeCall(subscriptionId, xShopperId, xMarketId, _callback);
        Type localVarReturnType = new TypeToken<Subscription>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for productGroups
     * @param xShopperId Shopper ID to return data for when not using JWT (optional)
     * @param xMarketId The market that the response should be formatted for (optional, default to en-US)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Request was successful </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Request was malformed </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Authentication info not sent or invalid </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Authenticated user is not allowed access </td><td>  -  </td></tr>
        <tr><td> 429 </td><td> Too many requests received within interval </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal server error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call productGroupsCall(String xShopperId, String xMarketId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v1/subscriptions/productGroups";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (xShopperId != null) {
            localVarHeaderParams.put("X-Shopper-Id", localVarApiClient.parameterToString(xShopperId));
        }

        if (xMarketId != null) {
            localVarHeaderParams.put("X-Market-Id", localVarApiClient.parameterToString(xMarketId));
        }

        final String[] localVarAccepts = {
            "application/javascript",
            "application/json",
            "application/xml",
            "text/javascript",
            "text/xml"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call productGroupsValidateBeforeCall(String xShopperId, String xMarketId, final ApiCallback _callback) throws ApiException {
        return productGroupsCall(xShopperId, xMarketId, _callback);

    }

    /**
     * Retrieve a list of ProductGroups for the specified Shopper
     * 
     * @param xShopperId Shopper ID to return data for when not using JWT (optional)
     * @param xMarketId The market that the response should be formatted for (optional, default to en-US)
     * @return List&lt;ProductGroup&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Request was successful </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Request was malformed </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Authentication info not sent or invalid </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Authenticated user is not allowed access </td><td>  -  </td></tr>
        <tr><td> 429 </td><td> Too many requests received within interval </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal server error </td><td>  -  </td></tr>
     </table>
     */
    public List<ProductGroup> productGroups(String xShopperId, String xMarketId) throws ApiException {
        ApiResponse<List<ProductGroup>> localVarResp = productGroupsWithHttpInfo(xShopperId, xMarketId);
        return localVarResp.getData();
    }

    /**
     * Retrieve a list of ProductGroups for the specified Shopper
     * 
     * @param xShopperId Shopper ID to return data for when not using JWT (optional)
     * @param xMarketId The market that the response should be formatted for (optional, default to en-US)
     * @return ApiResponse&lt;List&lt;ProductGroup&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Request was successful </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Request was malformed </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Authentication info not sent or invalid </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Authenticated user is not allowed access </td><td>  -  </td></tr>
        <tr><td> 429 </td><td> Too many requests received within interval </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal server error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<ProductGroup>> productGroupsWithHttpInfo(String xShopperId, String xMarketId) throws ApiException {
        okhttp3.Call localVarCall = productGroupsValidateBeforeCall(xShopperId, xMarketId, null);
        Type localVarReturnType = new TypeToken<List<ProductGroup>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Retrieve a list of ProductGroups for the specified Shopper (asynchronously)
     * 
     * @param xShopperId Shopper ID to return data for when not using JWT (optional)
     * @param xMarketId The market that the response should be formatted for (optional, default to en-US)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Request was successful </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Request was malformed </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Authentication info not sent or invalid </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Authenticated user is not allowed access </td><td>  -  </td></tr>
        <tr><td> 429 </td><td> Too many requests received within interval </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal server error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call productGroupsAsync(String xShopperId, String xMarketId, final ApiCallback<List<ProductGroup>> _callback) throws ApiException {

        okhttp3.Call localVarCall = productGroupsValidateBeforeCall(xShopperId, xMarketId, _callback);
        Type localVarReturnType = new TypeToken<List<ProductGroup>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for update
     * @param subscriptionId Unique identifier of the Subscription to update (required)
     * @param subscriptionUpdate Details of the Subscription to change (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Request was successful </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Request was malformed </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Authentication info not sent or invalid </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Authenticated user is not allowed access &lt;br&gt; This method only supports JWT authentication </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Subscription not found &lt;br&gt; Payment profile not found </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal server error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateCall(String subscriptionId, SubscriptionUpdate subscriptionUpdate, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = subscriptionUpdate;

        // create path and map variables
        String localVarPath = "/v1/subscriptions/{subscriptionId}"
            .replace("{" + "subscriptionId" + "}", localVarApiClient.escapeString(subscriptionId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json",
            "application/xml"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json",
            "application/x-www-form-urlencoded",
            "application/xml",
            "text/xml"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "PATCH", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call updateValidateBeforeCall(String subscriptionId, SubscriptionUpdate subscriptionUpdate, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'subscriptionId' is set
        if (subscriptionId == null) {
            throw new ApiException("Missing the required parameter 'subscriptionId' when calling update(Async)");
        }

        // verify the required parameter 'subscriptionUpdate' is set
        if (subscriptionUpdate == null) {
            throw new ApiException("Missing the required parameter 'subscriptionUpdate' when calling update(Async)");
        }

        return updateCall(subscriptionId, subscriptionUpdate, _callback);

    }

    /**
     * Update details for the specified Subscription
     * Only Subscription properties that can be changed without immediate financial impact can be modified via PATCH, whereas some properties can be changed by purchasing a renewal&lt;br/&gt;&lt;strong&gt;This endpoint only supports JWT authentication&lt;/strong&gt;
     * @param subscriptionId Unique identifier of the Subscription to update (required)
     * @param subscriptionUpdate Details of the Subscription to change (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Request was successful </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Request was malformed </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Authentication info not sent or invalid </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Authenticated user is not allowed access &lt;br&gt; This method only supports JWT authentication </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Subscription not found &lt;br&gt; Payment profile not found </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal server error </td><td>  -  </td></tr>
     </table>
     */
    public void update(String subscriptionId, SubscriptionUpdate subscriptionUpdate) throws ApiException {
        updateWithHttpInfo(subscriptionId, subscriptionUpdate);
    }

    /**
     * Update details for the specified Subscription
     * Only Subscription properties that can be changed without immediate financial impact can be modified via PATCH, whereas some properties can be changed by purchasing a renewal&lt;br/&gt;&lt;strong&gt;This endpoint only supports JWT authentication&lt;/strong&gt;
     * @param subscriptionId Unique identifier of the Subscription to update (required)
     * @param subscriptionUpdate Details of the Subscription to change (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Request was successful </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Request was malformed </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Authentication info not sent or invalid </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Authenticated user is not allowed access &lt;br&gt; This method only supports JWT authentication </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Subscription not found &lt;br&gt; Payment profile not found </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal server error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> updateWithHttpInfo(String subscriptionId, SubscriptionUpdate subscriptionUpdate) throws ApiException {
        okhttp3.Call localVarCall = updateValidateBeforeCall(subscriptionId, subscriptionUpdate, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Update details for the specified Subscription (asynchronously)
     * Only Subscription properties that can be changed without immediate financial impact can be modified via PATCH, whereas some properties can be changed by purchasing a renewal&lt;br/&gt;&lt;strong&gt;This endpoint only supports JWT authentication&lt;/strong&gt;
     * @param subscriptionId Unique identifier of the Subscription to update (required)
     * @param subscriptionUpdate Details of the Subscription to change (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Request was successful </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Request was malformed </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Authentication info not sent or invalid </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Authenticated user is not allowed access &lt;br&gt; This method only supports JWT authentication </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Subscription not found &lt;br&gt; Payment profile not found </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal server error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateAsync(String subscriptionId, SubscriptionUpdate subscriptionUpdate, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = updateValidateBeforeCall(subscriptionId, subscriptionUpdate, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
}
