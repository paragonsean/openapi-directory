/*
 * 
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.SubscriptionAddon;
import org.openapitools.client.model.SubscriptionBilling;
import org.openapitools.client.model.SubscriptionProduct;
import org.openapitools.client.model.SubscriptionRelations;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Subscription
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:00:11.575561-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class Subscription {
  public static final String SERIALIZED_NAME_ADDONS = "addons";
  @SerializedName(SERIALIZED_NAME_ADDONS)
  private List<SubscriptionAddon> addons = new ArrayList<>();

  public static final String SERIALIZED_NAME_BILLING = "billing";
  @SerializedName(SERIALIZED_NAME_BILLING)
  private SubscriptionBilling billing;

  public static final String SERIALIZED_NAME_CANCELABLE = "cancelable";
  @SerializedName(SERIALIZED_NAME_CANCELABLE)
  private Boolean cancelable;

  public static final String SERIALIZED_NAME_CREATED_AT = "createdAt";
  @SerializedName(SERIALIZED_NAME_CREATED_AT)
  private String createdAt;

  public static final String SERIALIZED_NAME_EXPIRES_AT = "expiresAt";
  @SerializedName(SERIALIZED_NAME_EXPIRES_AT)
  private String expiresAt;

  public static final String SERIALIZED_NAME_LABEL = "label";
  @SerializedName(SERIALIZED_NAME_LABEL)
  private String label;

  public static final String SERIALIZED_NAME_LAUNCH_URL = "launchUrl";
  @SerializedName(SERIALIZED_NAME_LAUNCH_URL)
  private String launchUrl;

  public static final String SERIALIZED_NAME_PAYMENT_PROFILE_ID = "paymentProfileId";
  @SerializedName(SERIALIZED_NAME_PAYMENT_PROFILE_ID)
  private Integer paymentProfileId;

  public static final String SERIALIZED_NAME_PRICE_LOCKED = "priceLocked";
  @SerializedName(SERIALIZED_NAME_PRICE_LOCKED)
  private Boolean priceLocked;

  public static final String SERIALIZED_NAME_PRODUCT = "product";
  @SerializedName(SERIALIZED_NAME_PRODUCT)
  private SubscriptionProduct product;

  public static final String SERIALIZED_NAME_RELATIONS = "relations";
  @SerializedName(SERIALIZED_NAME_RELATIONS)
  private SubscriptionRelations relations;

  public static final String SERIALIZED_NAME_RENEW_AUTO = "renewAuto";
  @SerializedName(SERIALIZED_NAME_RENEW_AUTO)
  private Boolean renewAuto;

  public static final String SERIALIZED_NAME_RENEWABLE = "renewable";
  @SerializedName(SERIALIZED_NAME_RENEWABLE)
  private Boolean renewable;

  /**
   * Whether the Subscription is active or the specific non-active state
   */
  @JsonAdapter(StatusEnum.Adapter.class)
  public enum StatusEnum {
    ACTIVE("ACTIVE"),
    
    PENDING("PENDING"),
    
    CANCELED("CANCELED");

    private String value;

    StatusEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static StatusEnum fromValue(String value) {
      for (StatusEnum b : StatusEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<StatusEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final StatusEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public StatusEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return StatusEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      StatusEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_STATUS = "status";
  @SerializedName(SERIALIZED_NAME_STATUS)
  private StatusEnum status;

  public static final String SERIALIZED_NAME_SUBSCRIPTION_ID = "subscriptionId";
  @SerializedName(SERIALIZED_NAME_SUBSCRIPTION_ID)
  private String subscriptionId;

  public static final String SERIALIZED_NAME_UPGRADEABLE = "upgradeable";
  @SerializedName(SERIALIZED_NAME_UPGRADEABLE)
  private Boolean upgradeable;

  public Subscription() {
  }

  public Subscription addons(List<SubscriptionAddon> addons) {
    this.addons = addons;
    return this;
  }

  public Subscription addAddonsItem(SubscriptionAddon addonsItem) {
    if (this.addons == null) {
      this.addons = new ArrayList<>();
    }
    this.addons.add(addonsItem);
    return this;
  }

  /**
   * An array of additional products that have been purchased to augment this Subscription
   * @return addons
   */
  @javax.annotation.Nullable
  public List<SubscriptionAddon> getAddons() {
    return addons;
  }

  public void setAddons(List<SubscriptionAddon> addons) {
    this.addons = addons;
  }


  public Subscription billing(SubscriptionBilling billing) {
    this.billing = billing;
    return this;
  }

  /**
   * Get billing
   * @return billing
   */
  @javax.annotation.Nonnull
  public SubscriptionBilling getBilling() {
    return billing;
  }

  public void setBilling(SubscriptionBilling billing) {
    this.billing = billing;
  }


  public Subscription cancelable(Boolean cancelable) {
    this.cancelable = cancelable;
    return this;
  }

  /**
   * Whether or not the Subscription is allowed to be canceled
   * @return cancelable
   */
  @javax.annotation.Nullable
  public Boolean getCancelable() {
    return cancelable;
  }

  public void setCancelable(Boolean cancelable) {
    this.cancelable = cancelable;
  }


  public Subscription createdAt(String createdAt) {
    this.createdAt = createdAt;
    return this;
  }

  /**
   * When the Subscription was created
   * @return createdAt
   */
  @javax.annotation.Nonnull
  public String getCreatedAt() {
    return createdAt;
  }

  public void setCreatedAt(String createdAt) {
    this.createdAt = createdAt;
  }


  public Subscription expiresAt(String expiresAt) {
    this.expiresAt = expiresAt;
    return this;
  }

  /**
   * When the Subscription will expire
   * @return expiresAt
   */
  @javax.annotation.Nullable
  public String getExpiresAt() {
    return expiresAt;
  }

  public void setExpiresAt(String expiresAt) {
    this.expiresAt = expiresAt;
  }


  public Subscription label(String label) {
    this.label = label;
    return this;
  }

  /**
   * A human readable description of this Subscription
   * @return label
   */
  @javax.annotation.Nullable
  public String getLabel() {
    return label;
  }

  public void setLabel(String label) {
    this.label = label;
  }


  public Subscription launchUrl(String launchUrl) {
    this.launchUrl = launchUrl;
    return this;
  }

  /**
   * The url to use or manage this Subscription&#39;s active product
   * @return launchUrl
   */
  @javax.annotation.Nullable
  public String getLaunchUrl() {
    return launchUrl;
  }

  public void setLaunchUrl(String launchUrl) {
    this.launchUrl = launchUrl;
  }


  public Subscription paymentProfileId(Integer paymentProfileId) {
    this.paymentProfileId = paymentProfileId;
    return this;
  }

  /**
   * Unique identifier of the payment profile that will be used to automatically renew this Subscription
   * @return paymentProfileId
   */
  @javax.annotation.Nullable
  public Integer getPaymentProfileId() {
    return paymentProfileId;
  }

  public void setPaymentProfileId(Integer paymentProfileId) {
    this.paymentProfileId = paymentProfileId;
  }


  public Subscription priceLocked(Boolean priceLocked) {
    this.priceLocked = priceLocked;
    return this;
  }

  /**
   * Whether the renewal price will be based from the list price or a locked-in price for this shopper
   * @return priceLocked
   */
  @javax.annotation.Nonnull
  public Boolean getPriceLocked() {
    return priceLocked;
  }

  public void setPriceLocked(Boolean priceLocked) {
    this.priceLocked = priceLocked;
  }


  public Subscription product(SubscriptionProduct product) {
    this.product = product;
    return this;
  }

  /**
   * Get product
   * @return product
   */
  @javax.annotation.Nonnull
  public SubscriptionProduct getProduct() {
    return product;
  }

  public void setProduct(SubscriptionProduct product) {
    this.product = product;
  }


  public Subscription relations(SubscriptionRelations relations) {
    this.relations = relations;
    return this;
  }

  /**
   * Get relations
   * @return relations
   */
  @javax.annotation.Nullable
  public SubscriptionRelations getRelations() {
    return relations;
  }

  public void setRelations(SubscriptionRelations relations) {
    this.relations = relations;
  }


  public Subscription renewAuto(Boolean renewAuto) {
    this.renewAuto = renewAuto;
    return this;
  }

  /**
   * Whether or not the Subscription is set to be automatically renewed via the billing agent
   * @return renewAuto
   */
  @javax.annotation.Nonnull
  public Boolean getRenewAuto() {
    return renewAuto;
  }

  public void setRenewAuto(Boolean renewAuto) {
    this.renewAuto = renewAuto;
  }


  public Subscription renewable(Boolean renewable) {
    this.renewable = renewable;
    return this;
  }

  /**
   * Whether or not the Subscription is allowed to be renewed
   * @return renewable
   */
  @javax.annotation.Nonnull
  public Boolean getRenewable() {
    return renewable;
  }

  public void setRenewable(Boolean renewable) {
    this.renewable = renewable;
  }


  public Subscription status(StatusEnum status) {
    this.status = status;
    return this;
  }

  /**
   * Whether the Subscription is active or the specific non-active state
   * @return status
   */
  @javax.annotation.Nonnull
  public StatusEnum getStatus() {
    return status;
  }

  public void setStatus(StatusEnum status) {
    this.status = status;
  }


  public Subscription subscriptionId(String subscriptionId) {
    this.subscriptionId = subscriptionId;
    return this;
  }

  /**
   * Unique identifier of the Subscription
   * @return subscriptionId
   */
  @javax.annotation.Nonnull
  public String getSubscriptionId() {
    return subscriptionId;
  }

  public void setSubscriptionId(String subscriptionId) {
    this.subscriptionId = subscriptionId;
  }


  public Subscription upgradeable(Boolean upgradeable) {
    this.upgradeable = upgradeable;
    return this;
  }

  /**
   * Whether or not the Subscription is allowed to be upgraded
   * @return upgradeable
   */
  @javax.annotation.Nonnull
  public Boolean getUpgradeable() {
    return upgradeable;
  }

  public void setUpgradeable(Boolean upgradeable) {
    this.upgradeable = upgradeable;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    Subscription subscription = (Subscription) o;
    return Objects.equals(this.addons, subscription.addons) &&
        Objects.equals(this.billing, subscription.billing) &&
        Objects.equals(this.cancelable, subscription.cancelable) &&
        Objects.equals(this.createdAt, subscription.createdAt) &&
        Objects.equals(this.expiresAt, subscription.expiresAt) &&
        Objects.equals(this.label, subscription.label) &&
        Objects.equals(this.launchUrl, subscription.launchUrl) &&
        Objects.equals(this.paymentProfileId, subscription.paymentProfileId) &&
        Objects.equals(this.priceLocked, subscription.priceLocked) &&
        Objects.equals(this.product, subscription.product) &&
        Objects.equals(this.relations, subscription.relations) &&
        Objects.equals(this.renewAuto, subscription.renewAuto) &&
        Objects.equals(this.renewable, subscription.renewable) &&
        Objects.equals(this.status, subscription.status) &&
        Objects.equals(this.subscriptionId, subscription.subscriptionId) &&
        Objects.equals(this.upgradeable, subscription.upgradeable);
  }

  @Override
  public int hashCode() {
    return Objects.hash(addons, billing, cancelable, createdAt, expiresAt, label, launchUrl, paymentProfileId, priceLocked, product, relations, renewAuto, renewable, status, subscriptionId, upgradeable);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class Subscription {\n");
    sb.append("    addons: ").append(toIndentedString(addons)).append("\n");
    sb.append("    billing: ").append(toIndentedString(billing)).append("\n");
    sb.append("    cancelable: ").append(toIndentedString(cancelable)).append("\n");
    sb.append("    createdAt: ").append(toIndentedString(createdAt)).append("\n");
    sb.append("    expiresAt: ").append(toIndentedString(expiresAt)).append("\n");
    sb.append("    label: ").append(toIndentedString(label)).append("\n");
    sb.append("    launchUrl: ").append(toIndentedString(launchUrl)).append("\n");
    sb.append("    paymentProfileId: ").append(toIndentedString(paymentProfileId)).append("\n");
    sb.append("    priceLocked: ").append(toIndentedString(priceLocked)).append("\n");
    sb.append("    product: ").append(toIndentedString(product)).append("\n");
    sb.append("    relations: ").append(toIndentedString(relations)).append("\n");
    sb.append("    renewAuto: ").append(toIndentedString(renewAuto)).append("\n");
    sb.append("    renewable: ").append(toIndentedString(renewable)).append("\n");
    sb.append("    status: ").append(toIndentedString(status)).append("\n");
    sb.append("    subscriptionId: ").append(toIndentedString(subscriptionId)).append("\n");
    sb.append("    upgradeable: ").append(toIndentedString(upgradeable)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("addons");
    openapiFields.add("billing");
    openapiFields.add("cancelable");
    openapiFields.add("createdAt");
    openapiFields.add("expiresAt");
    openapiFields.add("label");
    openapiFields.add("launchUrl");
    openapiFields.add("paymentProfileId");
    openapiFields.add("priceLocked");
    openapiFields.add("product");
    openapiFields.add("relations");
    openapiFields.add("renewAuto");
    openapiFields.add("renewable");
    openapiFields.add("status");
    openapiFields.add("subscriptionId");
    openapiFields.add("upgradeable");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("billing");
    openapiRequiredFields.add("createdAt");
    openapiRequiredFields.add("priceLocked");
    openapiRequiredFields.add("product");
    openapiRequiredFields.add("renewAuto");
    openapiRequiredFields.add("renewable");
    openapiRequiredFields.add("status");
    openapiRequiredFields.add("subscriptionId");
    openapiRequiredFields.add("upgradeable");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to Subscription
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!Subscription.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in Subscription is not found in the empty JSON string", Subscription.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!Subscription.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `Subscription` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : Subscription.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if (jsonObj.get("addons") != null && !jsonObj.get("addons").isJsonNull()) {
        JsonArray jsonArrayaddons = jsonObj.getAsJsonArray("addons");
        if (jsonArrayaddons != null) {
          // ensure the json data is an array
          if (!jsonObj.get("addons").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `addons` to be an array in the JSON string but got `%s`", jsonObj.get("addons").toString()));
          }

          // validate the optional field `addons` (array)
          for (int i = 0; i < jsonArrayaddons.size(); i++) {
            SubscriptionAddon.validateJsonElement(jsonArrayaddons.get(i));
          };
        }
      }
      // validate the required field `billing`
      SubscriptionBilling.validateJsonElement(jsonObj.get("billing"));
      if (!jsonObj.get("createdAt").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `createdAt` to be a primitive type in the JSON string but got `%s`", jsonObj.get("createdAt").toString()));
      }
      if ((jsonObj.get("expiresAt") != null && !jsonObj.get("expiresAt").isJsonNull()) && !jsonObj.get("expiresAt").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `expiresAt` to be a primitive type in the JSON string but got `%s`", jsonObj.get("expiresAt").toString()));
      }
      if ((jsonObj.get("label") != null && !jsonObj.get("label").isJsonNull()) && !jsonObj.get("label").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `label` to be a primitive type in the JSON string but got `%s`", jsonObj.get("label").toString()));
      }
      if ((jsonObj.get("launchUrl") != null && !jsonObj.get("launchUrl").isJsonNull()) && !jsonObj.get("launchUrl").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `launchUrl` to be a primitive type in the JSON string but got `%s`", jsonObj.get("launchUrl").toString()));
      }
      // validate the required field `product`
      SubscriptionProduct.validateJsonElement(jsonObj.get("product"));
      // validate the optional field `relations`
      if (jsonObj.get("relations") != null && !jsonObj.get("relations").isJsonNull()) {
        SubscriptionRelations.validateJsonElement(jsonObj.get("relations"));
      }
      if (!jsonObj.get("status").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `status` to be a primitive type in the JSON string but got `%s`", jsonObj.get("status").toString()));
      }
      // validate the required field `status`
      StatusEnum.validateJsonElement(jsonObj.get("status"));
      if (!jsonObj.get("subscriptionId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `subscriptionId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("subscriptionId").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!Subscription.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'Subscription' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<Subscription> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(Subscription.class));

       return (TypeAdapter<T>) new TypeAdapter<Subscription>() {
           @Override
           public void write(JsonWriter out, Subscription value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public Subscription read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of Subscription given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of Subscription
   * @throws IOException if the JSON string is invalid with respect to Subscription
   */
  public static Subscription fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, Subscription.class);
  }

  /**
   * Convert an instance of Subscription to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

