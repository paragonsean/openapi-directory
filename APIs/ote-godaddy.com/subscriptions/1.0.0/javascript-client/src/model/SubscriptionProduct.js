/**
 * 
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The SubscriptionProduct model module.
 * @module model/SubscriptionProduct
 * @version 1.0.0
 */
class SubscriptionProduct {
    /**
     * Constructs a new <code>SubscriptionProduct</code>.
     * @alias module:model/SubscriptionProduct
     * @param label {String} A human readable description of the Product that is subscribed
     * @param namespace {String} Grouping of related Subscriptions
     * @param pfid {Number} Unique identifier of the Product that is subscribed
     * @param productGroupKey {String} Primary key of a grouping of related Subscriptions
     * @param renewalPeriod {Number} The number of `renewalPeriodUnits` that will be added by the `renewalPfid`
     * @param renewalPeriodUnit {module:model/SubscriptionProduct.RenewalPeriodUnitEnum} The unit of time that `renewalPeriod` is measured in
     * @param renewalPfid {Number} Unique identifier of the renewal Product
     * @param supportBillOn {Boolean} Whether the product supports the `billOn` option on the renewal endpoint
     */
    constructor(label, namespace, pfid, productGroupKey, renewalPeriod, renewalPeriodUnit, renewalPfid, supportBillOn) { 
        
        SubscriptionProduct.initialize(this, label, namespace, pfid, productGroupKey, renewalPeriod, renewalPeriodUnit, renewalPfid, supportBillOn);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, label, namespace, pfid, productGroupKey, renewalPeriod, renewalPeriodUnit, renewalPfid, supportBillOn) { 
        obj['label'] = label;
        obj['namespace'] = namespace;
        obj['pfid'] = pfid;
        obj['productGroupKey'] = productGroupKey;
        obj['renewalPeriod'] = renewalPeriod;
        obj['renewalPeriodUnit'] = renewalPeriodUnit;
        obj['renewalPfid'] = renewalPfid;
        obj['supportBillOn'] = supportBillOn;
    }

    /**
     * Constructs a <code>SubscriptionProduct</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/SubscriptionProduct} obj Optional instance to populate.
     * @return {module:model/SubscriptionProduct} The populated <code>SubscriptionProduct</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new SubscriptionProduct();

            if (data.hasOwnProperty('label')) {
                obj['label'] = ApiClient.convertToType(data['label'], 'String');
            }
            if (data.hasOwnProperty('namespace')) {
                obj['namespace'] = ApiClient.convertToType(data['namespace'], 'String');
            }
            if (data.hasOwnProperty('pfid')) {
                obj['pfid'] = ApiClient.convertToType(data['pfid'], 'Number');
            }
            if (data.hasOwnProperty('productGroupKey')) {
                obj['productGroupKey'] = ApiClient.convertToType(data['productGroupKey'], 'String');
            }
            if (data.hasOwnProperty('renewalPeriod')) {
                obj['renewalPeriod'] = ApiClient.convertToType(data['renewalPeriod'], 'Number');
            }
            if (data.hasOwnProperty('renewalPeriodUnit')) {
                obj['renewalPeriodUnit'] = ApiClient.convertToType(data['renewalPeriodUnit'], 'String');
            }
            if (data.hasOwnProperty('renewalPfid')) {
                obj['renewalPfid'] = ApiClient.convertToType(data['renewalPfid'], 'Number');
            }
            if (data.hasOwnProperty('supportBillOn')) {
                obj['supportBillOn'] = ApiClient.convertToType(data['supportBillOn'], 'Boolean');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>SubscriptionProduct</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>SubscriptionProduct</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of SubscriptionProduct.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // ensure the json data is a string
        if (data['label'] && !(typeof data['label'] === 'string' || data['label'] instanceof String)) {
            throw new Error("Expected the field `label` to be a primitive type in the JSON string but got " + data['label']);
        }
        // ensure the json data is a string
        if (data['namespace'] && !(typeof data['namespace'] === 'string' || data['namespace'] instanceof String)) {
            throw new Error("Expected the field `namespace` to be a primitive type in the JSON string but got " + data['namespace']);
        }
        // ensure the json data is a string
        if (data['productGroupKey'] && !(typeof data['productGroupKey'] === 'string' || data['productGroupKey'] instanceof String)) {
            throw new Error("Expected the field `productGroupKey` to be a primitive type in the JSON string but got " + data['productGroupKey']);
        }
        // ensure the json data is a string
        if (data['renewalPeriodUnit'] && !(typeof data['renewalPeriodUnit'] === 'string' || data['renewalPeriodUnit'] instanceof String)) {
            throw new Error("Expected the field `renewalPeriodUnit` to be a primitive type in the JSON string but got " + data['renewalPeriodUnit']);
        }

        return true;
    }


}

SubscriptionProduct.RequiredProperties = ["label", "namespace", "pfid", "productGroupKey", "renewalPeriod", "renewalPeriodUnit", "renewalPfid", "supportBillOn"];

/**
 * A human readable description of the Product that is subscribed
 * @member {String} label
 */
SubscriptionProduct.prototype['label'] = undefined;

/**
 * Grouping of related Subscriptions
 * @member {String} namespace
 */
SubscriptionProduct.prototype['namespace'] = undefined;

/**
 * Unique identifier of the Product that is subscribed
 * @member {Number} pfid
 */
SubscriptionProduct.prototype['pfid'] = undefined;

/**
 * Primary key of a grouping of related Subscriptions
 * @member {String} productGroupKey
 */
SubscriptionProduct.prototype['productGroupKey'] = undefined;

/**
 * The number of `renewalPeriodUnits` that will be added by the `renewalPfid`
 * @member {Number} renewalPeriod
 */
SubscriptionProduct.prototype['renewalPeriod'] = undefined;

/**
 * The unit of time that `renewalPeriod` is measured in
 * @member {module:model/SubscriptionProduct.RenewalPeriodUnitEnum} renewalPeriodUnit
 */
SubscriptionProduct.prototype['renewalPeriodUnit'] = undefined;

/**
 * Unique identifier of the renewal Product
 * @member {Number} renewalPfid
 */
SubscriptionProduct.prototype['renewalPfid'] = undefined;

/**
 * Whether the product supports the `billOn` option on the renewal endpoint
 * @member {Boolean} supportBillOn
 */
SubscriptionProduct.prototype['supportBillOn'] = undefined;





/**
 * Allowed values for the <code>renewalPeriodUnit</code> property.
 * @enum {String}
 * @readonly
 */
SubscriptionProduct['RenewalPeriodUnitEnum'] = {

    /**
     * value: "MONTH"
     * @const
     */
    "MONTH": "MONTH",

    /**
     * value: "QUARTER"
     * @const
     */
    "QUARTER": "QUARTER",

    /**
     * value: "SEMI_ANNUAL"
     * @const
     */
    "SEMI_ANNUAL": "SEMI_ANNUAL",

    /**
     * value: "YEAR"
     * @const
     */
    "YEAR": "YEAR"
};



export default SubscriptionProduct;

