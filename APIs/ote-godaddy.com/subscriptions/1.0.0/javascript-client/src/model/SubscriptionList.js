/**
 * 
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import Pagination from './Pagination';
import Subscription from './Subscription';

/**
 * The SubscriptionList model module.
 * @module model/SubscriptionList
 * @version 1.0.0
 */
class SubscriptionList {
    /**
     * Constructs a new <code>SubscriptionList</code>.
     * @alias module:model/SubscriptionList
     * @param pagination {module:model/Pagination} 
     * @param subscriptions {Array.<module:model/Subscription>} A collection of subscriptions
     */
    constructor(pagination, subscriptions) { 
        
        SubscriptionList.initialize(this, pagination, subscriptions);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, pagination, subscriptions) { 
        obj['pagination'] = pagination;
        obj['subscriptions'] = subscriptions;
    }

    /**
     * Constructs a <code>SubscriptionList</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/SubscriptionList} obj Optional instance to populate.
     * @return {module:model/SubscriptionList} The populated <code>SubscriptionList</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new SubscriptionList();

            if (data.hasOwnProperty('pagination')) {
                obj['pagination'] = Pagination.constructFromObject(data['pagination']);
            }
            if (data.hasOwnProperty('subscriptions')) {
                obj['subscriptions'] = ApiClient.convertToType(data['subscriptions'], [Subscription]);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>SubscriptionList</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>SubscriptionList</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of SubscriptionList.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // validate the optional field `pagination`
        if (data['pagination']) { // data not null
          Pagination.validateJSON(data['pagination']);
        }
        if (data['subscriptions']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['subscriptions'])) {
                throw new Error("Expected the field `subscriptions` to be an array in the JSON data but got " + data['subscriptions']);
            }
            // validate the optional field `subscriptions` (array)
            for (const item of data['subscriptions']) {
                Subscription.validateJSON(item);
            };
        }

        return true;
    }


}

SubscriptionList.RequiredProperties = ["pagination", "subscriptions"];

/**
 * @member {module:model/Pagination} pagination
 */
SubscriptionList.prototype['pagination'] = undefined;

/**
 * A collection of subscriptions
 * @member {Array.<module:model/Subscription>} subscriptions
 */
SubscriptionList.prototype['subscriptions'] = undefined;






export default SubscriptionList;

