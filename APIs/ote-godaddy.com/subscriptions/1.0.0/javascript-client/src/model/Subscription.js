/**
 * 
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import SubscriptionAddon from './SubscriptionAddon';
import SubscriptionBilling from './SubscriptionBilling';
import SubscriptionProduct from './SubscriptionProduct';
import SubscriptionRelations from './SubscriptionRelations';

/**
 * The Subscription model module.
 * @module model/Subscription
 * @version 1.0.0
 */
class Subscription {
    /**
     * Constructs a new <code>Subscription</code>.
     * @alias module:model/Subscription
     * @param billing {module:model/SubscriptionBilling} 
     * @param createdAt {String} When the Subscription was created
     * @param priceLocked {Boolean} Whether the renewal price will be based from the list price or a locked-in price for this shopper
     * @param product {module:model/SubscriptionProduct} 
     * @param renewAuto {Boolean} Whether or not the Subscription is set to be automatically renewed via the billing agent
     * @param renewable {Boolean} Whether or not the Subscription is allowed to be renewed
     * @param status {module:model/Subscription.StatusEnum} Whether the Subscription is active or the specific non-active state
     * @param subscriptionId {String} Unique identifier of the Subscription
     * @param upgradeable {Boolean} Whether or not the Subscription is allowed to be upgraded
     */
    constructor(billing, createdAt, priceLocked, product, renewAuto, renewable, status, subscriptionId, upgradeable) { 
        
        Subscription.initialize(this, billing, createdAt, priceLocked, product, renewAuto, renewable, status, subscriptionId, upgradeable);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, billing, createdAt, priceLocked, product, renewAuto, renewable, status, subscriptionId, upgradeable) { 
        obj['billing'] = billing;
        obj['createdAt'] = createdAt;
        obj['priceLocked'] = priceLocked;
        obj['product'] = product;
        obj['renewAuto'] = renewAuto;
        obj['renewable'] = renewable;
        obj['status'] = status;
        obj['subscriptionId'] = subscriptionId;
        obj['upgradeable'] = upgradeable;
    }

    /**
     * Constructs a <code>Subscription</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/Subscription} obj Optional instance to populate.
     * @return {module:model/Subscription} The populated <code>Subscription</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new Subscription();

            if (data.hasOwnProperty('addons')) {
                obj['addons'] = ApiClient.convertToType(data['addons'], [SubscriptionAddon]);
            }
            if (data.hasOwnProperty('billing')) {
                obj['billing'] = SubscriptionBilling.constructFromObject(data['billing']);
            }
            if (data.hasOwnProperty('cancelable')) {
                obj['cancelable'] = ApiClient.convertToType(data['cancelable'], 'Boolean');
            }
            if (data.hasOwnProperty('createdAt')) {
                obj['createdAt'] = ApiClient.convertToType(data['createdAt'], 'String');
            }
            if (data.hasOwnProperty('expiresAt')) {
                obj['expiresAt'] = ApiClient.convertToType(data['expiresAt'], 'String');
            }
            if (data.hasOwnProperty('label')) {
                obj['label'] = ApiClient.convertToType(data['label'], 'String');
            }
            if (data.hasOwnProperty('launchUrl')) {
                obj['launchUrl'] = ApiClient.convertToType(data['launchUrl'], 'String');
            }
            if (data.hasOwnProperty('paymentProfileId')) {
                obj['paymentProfileId'] = ApiClient.convertToType(data['paymentProfileId'], 'Number');
            }
            if (data.hasOwnProperty('priceLocked')) {
                obj['priceLocked'] = ApiClient.convertToType(data['priceLocked'], 'Boolean');
            }
            if (data.hasOwnProperty('product')) {
                obj['product'] = SubscriptionProduct.constructFromObject(data['product']);
            }
            if (data.hasOwnProperty('relations')) {
                obj['relations'] = SubscriptionRelations.constructFromObject(data['relations']);
            }
            if (data.hasOwnProperty('renewAuto')) {
                obj['renewAuto'] = ApiClient.convertToType(data['renewAuto'], 'Boolean');
            }
            if (data.hasOwnProperty('renewable')) {
                obj['renewable'] = ApiClient.convertToType(data['renewable'], 'Boolean');
            }
            if (data.hasOwnProperty('status')) {
                obj['status'] = ApiClient.convertToType(data['status'], 'String');
            }
            if (data.hasOwnProperty('subscriptionId')) {
                obj['subscriptionId'] = ApiClient.convertToType(data['subscriptionId'], 'String');
            }
            if (data.hasOwnProperty('upgradeable')) {
                obj['upgradeable'] = ApiClient.convertToType(data['upgradeable'], 'Boolean');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>Subscription</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>Subscription</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of Subscription.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        if (data['addons']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['addons'])) {
                throw new Error("Expected the field `addons` to be an array in the JSON data but got " + data['addons']);
            }
            // validate the optional field `addons` (array)
            for (const item of data['addons']) {
                SubscriptionAddon.validateJSON(item);
            };
        }
        // validate the optional field `billing`
        if (data['billing']) { // data not null
          SubscriptionBilling.validateJSON(data['billing']);
        }
        // ensure the json data is a string
        if (data['createdAt'] && !(typeof data['createdAt'] === 'string' || data['createdAt'] instanceof String)) {
            throw new Error("Expected the field `createdAt` to be a primitive type in the JSON string but got " + data['createdAt']);
        }
        // ensure the json data is a string
        if (data['expiresAt'] && !(typeof data['expiresAt'] === 'string' || data['expiresAt'] instanceof String)) {
            throw new Error("Expected the field `expiresAt` to be a primitive type in the JSON string but got " + data['expiresAt']);
        }
        // ensure the json data is a string
        if (data['label'] && !(typeof data['label'] === 'string' || data['label'] instanceof String)) {
            throw new Error("Expected the field `label` to be a primitive type in the JSON string but got " + data['label']);
        }
        // ensure the json data is a string
        if (data['launchUrl'] && !(typeof data['launchUrl'] === 'string' || data['launchUrl'] instanceof String)) {
            throw new Error("Expected the field `launchUrl` to be a primitive type in the JSON string but got " + data['launchUrl']);
        }
        // validate the optional field `product`
        if (data['product']) { // data not null
          SubscriptionProduct.validateJSON(data['product']);
        }
        // validate the optional field `relations`
        if (data['relations']) { // data not null
          SubscriptionRelations.validateJSON(data['relations']);
        }
        // ensure the json data is a string
        if (data['status'] && !(typeof data['status'] === 'string' || data['status'] instanceof String)) {
            throw new Error("Expected the field `status` to be a primitive type in the JSON string but got " + data['status']);
        }
        // ensure the json data is a string
        if (data['subscriptionId'] && !(typeof data['subscriptionId'] === 'string' || data['subscriptionId'] instanceof String)) {
            throw new Error("Expected the field `subscriptionId` to be a primitive type in the JSON string but got " + data['subscriptionId']);
        }

        return true;
    }


}

Subscription.RequiredProperties = ["billing", "createdAt", "priceLocked", "product", "renewAuto", "renewable", "status", "subscriptionId", "upgradeable"];

/**
 * An array of additional products that have been purchased to augment this Subscription
 * @member {Array.<module:model/SubscriptionAddon>} addons
 */
Subscription.prototype['addons'] = undefined;

/**
 * @member {module:model/SubscriptionBilling} billing
 */
Subscription.prototype['billing'] = undefined;

/**
 * Whether or not the Subscription is allowed to be canceled
 * @member {Boolean} cancelable
 */
Subscription.prototype['cancelable'] = undefined;

/**
 * When the Subscription was created
 * @member {String} createdAt
 */
Subscription.prototype['createdAt'] = undefined;

/**
 * When the Subscription will expire
 * @member {String} expiresAt
 */
Subscription.prototype['expiresAt'] = undefined;

/**
 * A human readable description of this Subscription
 * @member {String} label
 */
Subscription.prototype['label'] = undefined;

/**
 * The url to use or manage this Subscription's active product
 * @member {String} launchUrl
 */
Subscription.prototype['launchUrl'] = undefined;

/**
 * Unique identifier of the payment profile that will be used to automatically renew this Subscription
 * @member {Number} paymentProfileId
 */
Subscription.prototype['paymentProfileId'] = undefined;

/**
 * Whether the renewal price will be based from the list price or a locked-in price for this shopper
 * @member {Boolean} priceLocked
 */
Subscription.prototype['priceLocked'] = undefined;

/**
 * @member {module:model/SubscriptionProduct} product
 */
Subscription.prototype['product'] = undefined;

/**
 * @member {module:model/SubscriptionRelations} relations
 */
Subscription.prototype['relations'] = undefined;

/**
 * Whether or not the Subscription is set to be automatically renewed via the billing agent
 * @member {Boolean} renewAuto
 */
Subscription.prototype['renewAuto'] = undefined;

/**
 * Whether or not the Subscription is allowed to be renewed
 * @member {Boolean} renewable
 */
Subscription.prototype['renewable'] = undefined;

/**
 * Whether the Subscription is active or the specific non-active state
 * @member {module:model/Subscription.StatusEnum} status
 */
Subscription.prototype['status'] = undefined;

/**
 * Unique identifier of the Subscription
 * @member {String} subscriptionId
 */
Subscription.prototype['subscriptionId'] = undefined;

/**
 * Whether or not the Subscription is allowed to be upgraded
 * @member {Boolean} upgradeable
 */
Subscription.prototype['upgradeable'] = undefined;





/**
 * Allowed values for the <code>status</code> property.
 * @enum {String}
 * @readonly
 */
Subscription['StatusEnum'] = {

    /**
     * value: "ACTIVE"
     * @const
     */
    "ACTIVE": "ACTIVE",

    /**
     * value: "PENDING"
     * @const
     */
    "PENDING": "PENDING",

    /**
     * value: "CANCELED"
     * @const
     */
    "CANCELED": "CANCELED"
};



export default Subscription;

