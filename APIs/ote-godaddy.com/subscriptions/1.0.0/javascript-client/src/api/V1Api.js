/**
 * 
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import Error from '../model/Error';
import ErrorLimit from '../model/ErrorLimit';
import ProductGroup from '../model/ProductGroup';
import Subscription from '../model/Subscription';
import SubscriptionList from '../model/SubscriptionList';
import SubscriptionUpdate from '../model/SubscriptionUpdate';

/**
* V1 service.
* @module api/V1Api
* @version 1.0.0
*/
export default class V1Api {

    /**
    * Constructs a new V1Api. 
    * @alias module:api/V1Api
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the cancel operation.
     * @callback module:api/V1Api~cancelCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Cancel the specified Subscription
     * @param {String} subscriptionId Unique identifier of the Subscription to cancel
     * @param {Object} opts Optional parameters
     * @param {String} [xShopperId] Shopper ID to cancel subscriptions for when not using JWT
     * @param {module:api/V1Api~cancelCallback} callback The callback function, accepting three arguments: error, data, response
     */
    cancel(subscriptionId, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'subscriptionId' is set
      if (subscriptionId === undefined || subscriptionId === null) {
        throw new Error("Missing the required parameter 'subscriptionId' when calling cancel");
      }

      let pathParams = {
        'subscriptionId': subscriptionId
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Shopper-Id': opts['xShopperId']
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/javascript', 'application/json', 'application/xml', 'text/javascript', 'text/xml'];
      let returnType = null;
      return this.apiClient.callApi(
        '/v1/subscriptions/{subscriptionId}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the get operation.
     * @callback module:api/V1Api~getCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Subscription} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Retrieve details for the specified Subscription
     * @param {String} subscriptionId Unique identifier of the Subscription to retrieve
     * @param {Object} opts Optional parameters
     * @param {String} [xShopperId] Shopper ID to be operated on, if different from JWT
     * @param {String} [xMarketId = 'en-US')] Unique identifier of the Market in which the request is happening
     * @param {module:api/V1Api~getCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Subscription}
     */
    get(subscriptionId, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'subscriptionId' is set
      if (subscriptionId === undefined || subscriptionId === null) {
        throw new Error("Missing the required parameter 'subscriptionId' when calling get");
      }

      let pathParams = {
        'subscriptionId': subscriptionId
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Shopper-Id': opts['xShopperId'],
        'X-Market-Id': opts['xMarketId']
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/javascript', 'application/json', 'application/xml', 'text/javascript', 'text/xml'];
      let returnType = Subscription;
      return this.apiClient.callApi(
        '/v1/subscriptions/{subscriptionId}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the list operation.
     * @callback module:api/V1Api~listCallback
     * @param {String} error Error message, if any.
     * @param {module:model/SubscriptionList} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Retrieve a list of Subscriptions for the specified Shopper
     * @param {Object} opts Optional parameters
     * @param {String} [xShopperId] Shopper ID to return subscriptions for when not using JWT
     * @param {String} [xMarketId = 'en-US')] The market that the response should be formatted for
     * @param {Array.<String>} [productGroupKeys] Only return Subscriptions with the specified product groups
     * @param {Array.<module:model/String>} [includes] Optional details to be included in the response
     * @param {Number} [offset = 0)] Number of Subscriptions to skip before starting to return paged results (must be a multiple of the limit)
     * @param {Number} [limit = 25)] Number of Subscriptions to retrieve in this page, starting after offset
     * @param {module:model/String} [sort = '-expiresAt')] Property name that will be used to sort results. \"-\" indicates descending
     * @param {module:api/V1Api~listCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/SubscriptionList}
     */
    list(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'productGroupKeys': this.apiClient.buildCollectionParam(opts['productGroupKeys'], 'csv'),
        'includes': this.apiClient.buildCollectionParam(opts['includes'], 'csv'),
        'offset': opts['offset'],
        'limit': opts['limit'],
        'sort': opts['sort']
      };
      let headerParams = {
        'X-Shopper-Id': opts['xShopperId'],
        'X-Market-Id': opts['xMarketId']
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/javascript', 'application/json', 'application/xml', 'text/javascript', 'text/xml'];
      let returnType = SubscriptionList;
      return this.apiClient.callApi(
        '/v1/subscriptions', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the productGroups operation.
     * @callback module:api/V1Api~productGroupsCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/ProductGroup>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Retrieve a list of ProductGroups for the specified Shopper
     * @param {Object} opts Optional parameters
     * @param {String} [xShopperId] Shopper ID to return data for when not using JWT
     * @param {String} [xMarketId = 'en-US')] The market that the response should be formatted for
     * @param {module:api/V1Api~productGroupsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/ProductGroup>}
     */
    productGroups(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Shopper-Id': opts['xShopperId'],
        'X-Market-Id': opts['xMarketId']
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/javascript', 'application/json', 'application/xml', 'text/javascript', 'text/xml'];
      let returnType = [ProductGroup];
      return this.apiClient.callApi(
        '/v1/subscriptions/productGroups', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the update operation.
     * @callback module:api/V1Api~updateCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update details for the specified Subscription
     * Only Subscription properties that can be changed without immediate financial impact can be modified via PATCH, whereas some properties can be changed by purchasing a renewal<br/><strong>This endpoint only supports JWT authentication</strong>
     * @param {String} subscriptionId Unique identifier of the Subscription to update
     * @param {module:model/SubscriptionUpdate} subscriptionUpdate Details of the Subscription to change
     * @param {module:api/V1Api~updateCallback} callback The callback function, accepting three arguments: error, data, response
     */
    update(subscriptionId, subscriptionUpdate, callback) {
      let postBody = subscriptionUpdate;
      // verify the required parameter 'subscriptionId' is set
      if (subscriptionId === undefined || subscriptionId === null) {
        throw new Error("Missing the required parameter 'subscriptionId' when calling update");
      }
      // verify the required parameter 'subscriptionUpdate' is set
      if (subscriptionUpdate === undefined || subscriptionUpdate === null) {
        throw new Error("Missing the required parameter 'subscriptionUpdate' when calling update");
      }

      let pathParams = {
        'subscriptionId': subscriptionId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json', 'application/x-www-form-urlencoded', 'application/xml', 'text/xml'];
      let accepts = ['application/json', 'application/xml'];
      let returnType = null;
      return this.apiClient.callApi(
        '/v1/subscriptions/{subscriptionId}', 'PATCH',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
