# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class SubscriptionRelations(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, children: List[str]=None, parent: str=None):
        """SubscriptionRelations - a model defined in OpenAPI

        :param children: The children of this SubscriptionRelations.
        :param parent: The parent of this SubscriptionRelations.
        """
        self.openapi_types = {
            'children': List[str],
            'parent': str
        }

        self.attribute_map = {
            'children': 'children',
            'parent': 'parent'
        }

        self._children = children
        self._parent = parent

    @classmethod
    def from_dict(cls, dikt: dict) -> 'SubscriptionRelations':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The SubscriptionRelations of this SubscriptionRelations.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def children(self):
        """Gets the children of this SubscriptionRelations.

        A set of related Subscriptions that will be canceled automatically if this Subscription is canceled

        :return: The children of this SubscriptionRelations.
        :rtype: List[str]
        """
        return self._children

    @children.setter
    def children(self, children):
        """Sets the children of this SubscriptionRelations.

        A set of related Subscriptions that will be canceled automatically if this Subscription is canceled

        :param children: The children of this SubscriptionRelations.
        :type children: List[str]
        """

        self._children = children

    @property
    def parent(self):
        """Gets the parent of this SubscriptionRelations.

        Unique identifier of this Subscription's parent

        :return: The parent of this SubscriptionRelations.
        :rtype: str
        """
        return self._parent

    @parent.setter
    def parent(self, parent):
        """Sets the parent of this SubscriptionRelations.

        Unique identifier of this Subscription's parent

        :param parent: The parent of this SubscriptionRelations.
        :type parent: str
        """

        self._parent = parent
