# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class ProductGroup(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, product_group_key: str=None, subscription_count: int=None):
        """ProductGroup - a model defined in OpenAPI

        :param product_group_key: The product_group_key of this ProductGroup.
        :param subscription_count: The subscription_count of this ProductGroup.
        """
        self.openapi_types = {
            'product_group_key': str,
            'subscription_count': int
        }

        self.attribute_map = {
            'product_group_key': 'productGroupKey',
            'subscription_count': 'subscriptionCount'
        }

        self._product_group_key = product_group_key
        self._subscription_count = subscription_count

    @classmethod
    def from_dict(cls, dikt: dict) -> 'ProductGroup':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The ProductGroup of this ProductGroup.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def product_group_key(self):
        """Gets the product_group_key of this ProductGroup.

        Primary key of a grouping of related Subscriptions

        :return: The product_group_key of this ProductGroup.
        :rtype: str
        """
        return self._product_group_key

    @product_group_key.setter
    def product_group_key(self, product_group_key):
        """Sets the product_group_key of this ProductGroup.

        Primary key of a grouping of related Subscriptions

        :param product_group_key: The product_group_key of this ProductGroup.
        :type product_group_key: str
        """
        if product_group_key is None:
            raise ValueError("Invalid value for `product_group_key`, must not be `None`")

        self._product_group_key = product_group_key

    @property
    def subscription_count(self):
        """Gets the subscription_count of this ProductGroup.

        The number of Subscriptions that the shopper owns in this group

        :return: The subscription_count of this ProductGroup.
        :rtype: int
        """
        return self._subscription_count

    @subscription_count.setter
    def subscription_count(self, subscription_count):
        """Sets the subscription_count of this ProductGroup.

        The number of Subscriptions that the shopper owns in this group

        :param subscription_count: The subscription_count of this ProductGroup.
        :type subscription_count: int
        """
        if subscription_count is None:
            raise ValueError("Invalid value for `subscription_count`, must not be `None`")

        self._subscription_count = subscription_count
