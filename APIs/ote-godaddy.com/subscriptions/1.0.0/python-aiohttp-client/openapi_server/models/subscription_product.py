# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class SubscriptionProduct(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, label: str=None, namespace: str=None, pfid: int=None, product_group_key: str=None, renewal_period: int=None, renewal_period_unit: str=None, renewal_pfid: int=None, support_bill_on: bool=None):
        """SubscriptionProduct - a model defined in OpenAPI

        :param label: The label of this SubscriptionProduct.
        :param namespace: The namespace of this SubscriptionProduct.
        :param pfid: The pfid of this SubscriptionProduct.
        :param product_group_key: The product_group_key of this SubscriptionProduct.
        :param renewal_period: The renewal_period of this SubscriptionProduct.
        :param renewal_period_unit: The renewal_period_unit of this SubscriptionProduct.
        :param renewal_pfid: The renewal_pfid of this SubscriptionProduct.
        :param support_bill_on: The support_bill_on of this SubscriptionProduct.
        """
        self.openapi_types = {
            'label': str,
            'namespace': str,
            'pfid': int,
            'product_group_key': str,
            'renewal_period': int,
            'renewal_period_unit': str,
            'renewal_pfid': int,
            'support_bill_on': bool
        }

        self.attribute_map = {
            'label': 'label',
            'namespace': 'namespace',
            'pfid': 'pfid',
            'product_group_key': 'productGroupKey',
            'renewal_period': 'renewalPeriod',
            'renewal_period_unit': 'renewalPeriodUnit',
            'renewal_pfid': 'renewalPfid',
            'support_bill_on': 'supportBillOn'
        }

        self._label = label
        self._namespace = namespace
        self._pfid = pfid
        self._product_group_key = product_group_key
        self._renewal_period = renewal_period
        self._renewal_period_unit = renewal_period_unit
        self._renewal_pfid = renewal_pfid
        self._support_bill_on = support_bill_on

    @classmethod
    def from_dict(cls, dikt: dict) -> 'SubscriptionProduct':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The SubscriptionProduct of this SubscriptionProduct.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def label(self):
        """Gets the label of this SubscriptionProduct.

        A human readable description of the Product that is subscribed

        :return: The label of this SubscriptionProduct.
        :rtype: str
        """
        return self._label

    @label.setter
    def label(self, label):
        """Sets the label of this SubscriptionProduct.

        A human readable description of the Product that is subscribed

        :param label: The label of this SubscriptionProduct.
        :type label: str
        """
        if label is None:
            raise ValueError("Invalid value for `label`, must not be `None`")

        self._label = label

    @property
    def namespace(self):
        """Gets the namespace of this SubscriptionProduct.

        Grouping of related Subscriptions

        :return: The namespace of this SubscriptionProduct.
        :rtype: str
        """
        return self._namespace

    @namespace.setter
    def namespace(self, namespace):
        """Sets the namespace of this SubscriptionProduct.

        Grouping of related Subscriptions

        :param namespace: The namespace of this SubscriptionProduct.
        :type namespace: str
        """
        if namespace is None:
            raise ValueError("Invalid value for `namespace`, must not be `None`")

        self._namespace = namespace

    @property
    def pfid(self):
        """Gets the pfid of this SubscriptionProduct.

        Unique identifier of the Product that is subscribed

        :return: The pfid of this SubscriptionProduct.
        :rtype: int
        """
        return self._pfid

    @pfid.setter
    def pfid(self, pfid):
        """Sets the pfid of this SubscriptionProduct.

        Unique identifier of the Product that is subscribed

        :param pfid: The pfid of this SubscriptionProduct.
        :type pfid: int
        """
        if pfid is None:
            raise ValueError("Invalid value for `pfid`, must not be `None`")

        self._pfid = pfid

    @property
    def product_group_key(self):
        """Gets the product_group_key of this SubscriptionProduct.

        Primary key of a grouping of related Subscriptions

        :return: The product_group_key of this SubscriptionProduct.
        :rtype: str
        """
        return self._product_group_key

    @product_group_key.setter
    def product_group_key(self, product_group_key):
        """Sets the product_group_key of this SubscriptionProduct.

        Primary key of a grouping of related Subscriptions

        :param product_group_key: The product_group_key of this SubscriptionProduct.
        :type product_group_key: str
        """
        if product_group_key is None:
            raise ValueError("Invalid value for `product_group_key`, must not be `None`")

        self._product_group_key = product_group_key

    @property
    def renewal_period(self):
        """Gets the renewal_period of this SubscriptionProduct.

        The number of `renewalPeriodUnits` that will be added by the `renewalPfid`

        :return: The renewal_period of this SubscriptionProduct.
        :rtype: int
        """
        return self._renewal_period

    @renewal_period.setter
    def renewal_period(self, renewal_period):
        """Sets the renewal_period of this SubscriptionProduct.

        The number of `renewalPeriodUnits` that will be added by the `renewalPfid`

        :param renewal_period: The renewal_period of this SubscriptionProduct.
        :type renewal_period: int
        """
        if renewal_period is None:
            raise ValueError("Invalid value for `renewal_period`, must not be `None`")

        self._renewal_period = renewal_period

    @property
    def renewal_period_unit(self):
        """Gets the renewal_period_unit of this SubscriptionProduct.

        The unit of time that `renewalPeriod` is measured in

        :return: The renewal_period_unit of this SubscriptionProduct.
        :rtype: str
        """
        return self._renewal_period_unit

    @renewal_period_unit.setter
    def renewal_period_unit(self, renewal_period_unit):
        """Sets the renewal_period_unit of this SubscriptionProduct.

        The unit of time that `renewalPeriod` is measured in

        :param renewal_period_unit: The renewal_period_unit of this SubscriptionProduct.
        :type renewal_period_unit: str
        """
        allowed_values = ["MONTH", "QUARTER", "SEMI_ANNUAL", "YEAR"]  # noqa: E501
        if renewal_period_unit not in allowed_values:
            raise ValueError(
                "Invalid value for `renewal_period_unit` ({0}), must be one of {1}"
                .format(renewal_period_unit, allowed_values)
            )

        self._renewal_period_unit = renewal_period_unit

    @property
    def renewal_pfid(self):
        """Gets the renewal_pfid of this SubscriptionProduct.

        Unique identifier of the renewal Product

        :return: The renewal_pfid of this SubscriptionProduct.
        :rtype: int
        """
        return self._renewal_pfid

    @renewal_pfid.setter
    def renewal_pfid(self, renewal_pfid):
        """Sets the renewal_pfid of this SubscriptionProduct.

        Unique identifier of the renewal Product

        :param renewal_pfid: The renewal_pfid of this SubscriptionProduct.
        :type renewal_pfid: int
        """
        if renewal_pfid is None:
            raise ValueError("Invalid value for `renewal_pfid`, must not be `None`")

        self._renewal_pfid = renewal_pfid

    @property
    def support_bill_on(self):
        """Gets the support_bill_on of this SubscriptionProduct.

        Whether the product supports the `billOn` option on the renewal endpoint

        :return: The support_bill_on of this SubscriptionProduct.
        :rtype: bool
        """
        return self._support_bill_on

    @support_bill_on.setter
    def support_bill_on(self, support_bill_on):
        """Sets the support_bill_on of this SubscriptionProduct.

        Whether the product supports the `billOn` option on the renewal endpoint

        :param support_bill_on: The support_bill_on of this SubscriptionProduct.
        :type support_bill_on: bool
        """
        if support_bill_on is None:
            raise ValueError("Invalid value for `support_bill_on`, must not be `None`")

        self._support_bill_on = support_bill_on
