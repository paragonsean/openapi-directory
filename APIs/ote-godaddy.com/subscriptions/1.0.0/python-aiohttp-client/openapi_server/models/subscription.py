# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.subscription_addon import SubscriptionAddon
from openapi_server.models.subscription_billing import SubscriptionBilling
from openapi_server.models.subscription_product import SubscriptionProduct
from openapi_server.models.subscription_relations import SubscriptionRelations
from openapi_server import util


class Subscription(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, addons: List[SubscriptionAddon]=None, billing: SubscriptionBilling=None, cancelable: bool=None, created_at: str=None, expires_at: str=None, label: str=None, launch_url: str=None, payment_profile_id: int=None, price_locked: bool=None, product: SubscriptionProduct=None, relations: SubscriptionRelations=None, renew_auto: bool=None, renewable: bool=None, status: str=None, subscription_id: str=None, upgradeable: bool=None):
        """Subscription - a model defined in OpenAPI

        :param addons: The addons of this Subscription.
        :param billing: The billing of this Subscription.
        :param cancelable: The cancelable of this Subscription.
        :param created_at: The created_at of this Subscription.
        :param expires_at: The expires_at of this Subscription.
        :param label: The label of this Subscription.
        :param launch_url: The launch_url of this Subscription.
        :param payment_profile_id: The payment_profile_id of this Subscription.
        :param price_locked: The price_locked of this Subscription.
        :param product: The product of this Subscription.
        :param relations: The relations of this Subscription.
        :param renew_auto: The renew_auto of this Subscription.
        :param renewable: The renewable of this Subscription.
        :param status: The status of this Subscription.
        :param subscription_id: The subscription_id of this Subscription.
        :param upgradeable: The upgradeable of this Subscription.
        """
        self.openapi_types = {
            'addons': List[SubscriptionAddon],
            'billing': SubscriptionBilling,
            'cancelable': bool,
            'created_at': str,
            'expires_at': str,
            'label': str,
            'launch_url': str,
            'payment_profile_id': int,
            'price_locked': bool,
            'product': SubscriptionProduct,
            'relations': SubscriptionRelations,
            'renew_auto': bool,
            'renewable': bool,
            'status': str,
            'subscription_id': str,
            'upgradeable': bool
        }

        self.attribute_map = {
            'addons': 'addons',
            'billing': 'billing',
            'cancelable': 'cancelable',
            'created_at': 'createdAt',
            'expires_at': 'expiresAt',
            'label': 'label',
            'launch_url': 'launchUrl',
            'payment_profile_id': 'paymentProfileId',
            'price_locked': 'priceLocked',
            'product': 'product',
            'relations': 'relations',
            'renew_auto': 'renewAuto',
            'renewable': 'renewable',
            'status': 'status',
            'subscription_id': 'subscriptionId',
            'upgradeable': 'upgradeable'
        }

        self._addons = addons
        self._billing = billing
        self._cancelable = cancelable
        self._created_at = created_at
        self._expires_at = expires_at
        self._label = label
        self._launch_url = launch_url
        self._payment_profile_id = payment_profile_id
        self._price_locked = price_locked
        self._product = product
        self._relations = relations
        self._renew_auto = renew_auto
        self._renewable = renewable
        self._status = status
        self._subscription_id = subscription_id
        self._upgradeable = upgradeable

    @classmethod
    def from_dict(cls, dikt: dict) -> 'Subscription':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Subscription of this Subscription.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def addons(self):
        """Gets the addons of this Subscription.

        An array of additional products that have been purchased to augment this Subscription

        :return: The addons of this Subscription.
        :rtype: List[SubscriptionAddon]
        """
        return self._addons

    @addons.setter
    def addons(self, addons):
        """Sets the addons of this Subscription.

        An array of additional products that have been purchased to augment this Subscription

        :param addons: The addons of this Subscription.
        :type addons: List[SubscriptionAddon]
        """

        self._addons = addons

    @property
    def billing(self):
        """Gets the billing of this Subscription.


        :return: The billing of this Subscription.
        :rtype: SubscriptionBilling
        """
        return self._billing

    @billing.setter
    def billing(self, billing):
        """Sets the billing of this Subscription.


        :param billing: The billing of this Subscription.
        :type billing: SubscriptionBilling
        """
        if billing is None:
            raise ValueError("Invalid value for `billing`, must not be `None`")

        self._billing = billing

    @property
    def cancelable(self):
        """Gets the cancelable of this Subscription.

        Whether or not the Subscription is allowed to be canceled

        :return: The cancelable of this Subscription.
        :rtype: bool
        """
        return self._cancelable

    @cancelable.setter
    def cancelable(self, cancelable):
        """Sets the cancelable of this Subscription.

        Whether or not the Subscription is allowed to be canceled

        :param cancelable: The cancelable of this Subscription.
        :type cancelable: bool
        """

        self._cancelable = cancelable

    @property
    def created_at(self):
        """Gets the created_at of this Subscription.

        When the Subscription was created

        :return: The created_at of this Subscription.
        :rtype: str
        """
        return self._created_at

    @created_at.setter
    def created_at(self, created_at):
        """Sets the created_at of this Subscription.

        When the Subscription was created

        :param created_at: The created_at of this Subscription.
        :type created_at: str
        """
        if created_at is None:
            raise ValueError("Invalid value for `created_at`, must not be `None`")

        self._created_at = created_at

    @property
    def expires_at(self):
        """Gets the expires_at of this Subscription.

        When the Subscription will expire

        :return: The expires_at of this Subscription.
        :rtype: str
        """
        return self._expires_at

    @expires_at.setter
    def expires_at(self, expires_at):
        """Sets the expires_at of this Subscription.

        When the Subscription will expire

        :param expires_at: The expires_at of this Subscription.
        :type expires_at: str
        """

        self._expires_at = expires_at

    @property
    def label(self):
        """Gets the label of this Subscription.

        A human readable description of this Subscription

        :return: The label of this Subscription.
        :rtype: str
        """
        return self._label

    @label.setter
    def label(self, label):
        """Sets the label of this Subscription.

        A human readable description of this Subscription

        :param label: The label of this Subscription.
        :type label: str
        """

        self._label = label

    @property
    def launch_url(self):
        """Gets the launch_url of this Subscription.

        The url to use or manage this Subscription's active product

        :return: The launch_url of this Subscription.
        :rtype: str
        """
        return self._launch_url

    @launch_url.setter
    def launch_url(self, launch_url):
        """Sets the launch_url of this Subscription.

        The url to use or manage this Subscription's active product

        :param launch_url: The launch_url of this Subscription.
        :type launch_url: str
        """

        self._launch_url = launch_url

    @property
    def payment_profile_id(self):
        """Gets the payment_profile_id of this Subscription.

        Unique identifier of the payment profile that will be used to automatically renew this Subscription

        :return: The payment_profile_id of this Subscription.
        :rtype: int
        """
        return self._payment_profile_id

    @payment_profile_id.setter
    def payment_profile_id(self, payment_profile_id):
        """Sets the payment_profile_id of this Subscription.

        Unique identifier of the payment profile that will be used to automatically renew this Subscription

        :param payment_profile_id: The payment_profile_id of this Subscription.
        :type payment_profile_id: int
        """

        self._payment_profile_id = payment_profile_id

    @property
    def price_locked(self):
        """Gets the price_locked of this Subscription.

        Whether the renewal price will be based from the list price or a locked-in price for this shopper

        :return: The price_locked of this Subscription.
        :rtype: bool
        """
        return self._price_locked

    @price_locked.setter
    def price_locked(self, price_locked):
        """Sets the price_locked of this Subscription.

        Whether the renewal price will be based from the list price or a locked-in price for this shopper

        :param price_locked: The price_locked of this Subscription.
        :type price_locked: bool
        """
        if price_locked is None:
            raise ValueError("Invalid value for `price_locked`, must not be `None`")

        self._price_locked = price_locked

    @property
    def product(self):
        """Gets the product of this Subscription.


        :return: The product of this Subscription.
        :rtype: SubscriptionProduct
        """
        return self._product

    @product.setter
    def product(self, product):
        """Sets the product of this Subscription.


        :param product: The product of this Subscription.
        :type product: SubscriptionProduct
        """
        if product is None:
            raise ValueError("Invalid value for `product`, must not be `None`")

        self._product = product

    @property
    def relations(self):
        """Gets the relations of this Subscription.


        :return: The relations of this Subscription.
        :rtype: SubscriptionRelations
        """
        return self._relations

    @relations.setter
    def relations(self, relations):
        """Sets the relations of this Subscription.


        :param relations: The relations of this Subscription.
        :type relations: SubscriptionRelations
        """

        self._relations = relations

    @property
    def renew_auto(self):
        """Gets the renew_auto of this Subscription.

        Whether or not the Subscription is set to be automatically renewed via the billing agent

        :return: The renew_auto of this Subscription.
        :rtype: bool
        """
        return self._renew_auto

    @renew_auto.setter
    def renew_auto(self, renew_auto):
        """Sets the renew_auto of this Subscription.

        Whether or not the Subscription is set to be automatically renewed via the billing agent

        :param renew_auto: The renew_auto of this Subscription.
        :type renew_auto: bool
        """
        if renew_auto is None:
            raise ValueError("Invalid value for `renew_auto`, must not be `None`")

        self._renew_auto = renew_auto

    @property
    def renewable(self):
        """Gets the renewable of this Subscription.

        Whether or not the Subscription is allowed to be renewed

        :return: The renewable of this Subscription.
        :rtype: bool
        """
        return self._renewable

    @renewable.setter
    def renewable(self, renewable):
        """Sets the renewable of this Subscription.

        Whether or not the Subscription is allowed to be renewed

        :param renewable: The renewable of this Subscription.
        :type renewable: bool
        """
        if renewable is None:
            raise ValueError("Invalid value for `renewable`, must not be `None`")

        self._renewable = renewable

    @property
    def status(self):
        """Gets the status of this Subscription.

        Whether the Subscription is active or the specific non-active state

        :return: The status of this Subscription.
        :rtype: str
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this Subscription.

        Whether the Subscription is active or the specific non-active state

        :param status: The status of this Subscription.
        :type status: str
        """
        allowed_values = ["ACTIVE", "PENDING", "CANCELED"]  # noqa: E501
        if status not in allowed_values:
            raise ValueError(
                "Invalid value for `status` ({0}), must be one of {1}"
                .format(status, allowed_values)
            )

        self._status = status

    @property
    def subscription_id(self):
        """Gets the subscription_id of this Subscription.

        Unique identifier of the Subscription

        :return: The subscription_id of this Subscription.
        :rtype: str
        """
        return self._subscription_id

    @subscription_id.setter
    def subscription_id(self, subscription_id):
        """Sets the subscription_id of this Subscription.

        Unique identifier of the Subscription

        :param subscription_id: The subscription_id of this Subscription.
        :type subscription_id: str
        """
        if subscription_id is None:
            raise ValueError("Invalid value for `subscription_id`, must not be `None`")

        self._subscription_id = subscription_id

    @property
    def upgradeable(self):
        """Gets the upgradeable of this Subscription.

        Whether or not the Subscription is allowed to be upgraded

        :return: The upgradeable of this Subscription.
        :rtype: bool
        """
        return self._upgradeable

    @upgradeable.setter
    def upgradeable(self, upgradeable):
        """Sets the upgradeable of this Subscription.

        Whether or not the Subscription is allowed to be upgraded

        :param upgradeable: The upgradeable of this Subscription.
        :type upgradeable: bool
        """
        if upgradeable is None:
            raise ValueError("Invalid value for `upgradeable`, must not be `None`")

        self._upgradeable = upgradeable
