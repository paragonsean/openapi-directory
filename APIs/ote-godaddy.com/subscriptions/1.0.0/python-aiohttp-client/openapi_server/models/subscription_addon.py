# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class SubscriptionAddon(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, commitment: str=None, pfid: int=None, quantity: int=None):
        """SubscriptionAddon - a model defined in OpenAPI

        :param commitment: The commitment of this SubscriptionAddon.
        :param pfid: The pfid of this SubscriptionAddon.
        :param quantity: The quantity of this SubscriptionAddon.
        """
        self.openapi_types = {
            'commitment': str,
            'pfid': int,
            'quantity': int
        }

        self.attribute_map = {
            'commitment': 'commitment',
            'pfid': 'pfid',
            'quantity': 'quantity'
        }

        self._commitment = commitment
        self._pfid = pfid
        self._quantity = quantity

    @classmethod
    def from_dict(cls, dikt: dict) -> 'SubscriptionAddon':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The SubscriptionAddon of this SubscriptionAddon.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def commitment(self):
        """Gets the commitment of this SubscriptionAddon.

        The financial commitment the customer has in the product

        :return: The commitment of this SubscriptionAddon.
        :rtype: str
        """
        return self._commitment

    @commitment.setter
    def commitment(self, commitment):
        """Sets the commitment of this SubscriptionAddon.

        The financial commitment the customer has in the product

        :param commitment: The commitment of this SubscriptionAddon.
        :type commitment: str
        """
        allowed_values = ["PAID", "FREE", "TRIAL"]  # noqa: E501
        if commitment not in allowed_values:
            raise ValueError(
                "Invalid value for `commitment` ({0}), must be one of {1}"
                .format(commitment, allowed_values)
            )

        self._commitment = commitment

    @property
    def pfid(self):
        """Gets the pfid of this SubscriptionAddon.

        Unique identifier of the add-in product

        :return: The pfid of this SubscriptionAddon.
        :rtype: int
        """
        return self._pfid

    @pfid.setter
    def pfid(self, pfid):
        """Sets the pfid of this SubscriptionAddon.

        Unique identifier of the add-in product

        :param pfid: The pfid of this SubscriptionAddon.
        :type pfid: int
        """
        if pfid is None:
            raise ValueError("Invalid value for `pfid`, must not be `None`")

        self._pfid = pfid

    @property
    def quantity(self):
        """Gets the quantity of this SubscriptionAddon.


        :return: The quantity of this SubscriptionAddon.
        :rtype: int
        """
        return self._quantity

    @quantity.setter
    def quantity(self, quantity):
        """Sets the quantity of this SubscriptionAddon.


        :param quantity: The quantity of this SubscriptionAddon.
        :type quantity: int
        """
        if quantity is None:
            raise ValueError("Invalid value for `quantity`, must not be `None`")

        self._quantity = quantity
