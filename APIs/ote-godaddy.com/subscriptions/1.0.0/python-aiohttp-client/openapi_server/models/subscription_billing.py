# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class SubscriptionBilling(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, commitment: str=None, past_due_types: List[str]=None, renew_at: str=None, status: str=None):
        """SubscriptionBilling - a model defined in OpenAPI

        :param commitment: The commitment of this SubscriptionBilling.
        :param past_due_types: The past_due_types of this SubscriptionBilling.
        :param renew_at: The renew_at of this SubscriptionBilling.
        :param status: The status of this SubscriptionBilling.
        """
        self.openapi_types = {
            'commitment': str,
            'past_due_types': List[str],
            'renew_at': str,
            'status': str
        }

        self.attribute_map = {
            'commitment': 'commitment',
            'past_due_types': 'pastDueTypes',
            'renew_at': 'renewAt',
            'status': 'status'
        }

        self._commitment = commitment
        self._past_due_types = past_due_types
        self._renew_at = renew_at
        self._status = status

    @classmethod
    def from_dict(cls, dikt: dict) -> 'SubscriptionBilling':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The SubscriptionBilling of this SubscriptionBilling.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def commitment(self):
        """Gets the commitment of this SubscriptionBilling.

        The financial commitment the customer has in the product

        :return: The commitment of this SubscriptionBilling.
        :rtype: str
        """
        return self._commitment

    @commitment.setter
    def commitment(self, commitment):
        """Sets the commitment of this SubscriptionBilling.

        The financial commitment the customer has in the product

        :param commitment: The commitment of this SubscriptionBilling.
        :type commitment: str
        """
        allowed_values = ["PAID", "FREE", "TRIAL"]  # noqa: E501
        if commitment not in allowed_values:
            raise ValueError(
                "Invalid value for `commitment` ({0}), must be one of {1}"
                .format(commitment, allowed_values)
            )

        self._commitment = commitment

    @property
    def past_due_types(self):
        """Gets the past_due_types of this SubscriptionBilling.

        The types of charges that are past due when `status` is PAST_DUE

        :return: The past_due_types of this SubscriptionBilling.
        :rtype: List[str]
        """
        return self._past_due_types

    @past_due_types.setter
    def past_due_types(self, past_due_types):
        """Sets the past_due_types of this SubscriptionBilling.

        The types of charges that are past due when `status` is PAST_DUE

        :param past_due_types: The past_due_types of this SubscriptionBilling.
        :type past_due_types: List[str]
        """
        allowed_values = ["ADDON", "BURST", "SUBSCRIPTION"]  # noqa: E501
        if not set(past_due_types).issubset(set(allowed_values)):
            raise ValueError(
                "Invalid values for `past_due_types` [{0}], must be a subset of [{1}]"
                .format(", ".join(map(str, set(past_due_types) - set(allowed_values))),
                        ", ".join(map(str, allowed_values)))
            )

        self._past_due_types = past_due_types

    @property
    def renew_at(self):
        """Gets the renew_at of this SubscriptionBilling.

        The point in time after which the Subscription will bill for automatic renewal

        :return: The renew_at of this SubscriptionBilling.
        :rtype: str
        """
        return self._renew_at

    @renew_at.setter
    def renew_at(self, renew_at):
        """Sets the renew_at of this SubscriptionBilling.

        The point in time after which the Subscription will bill for automatic renewal

        :param renew_at: The renew_at of this SubscriptionBilling.
        :type renew_at: str
        """
        if renew_at is None:
            raise ValueError("Invalid value for `renew_at`, must not be `None`")

        self._renew_at = renew_at

    @property
    def status(self):
        """Gets the status of this SubscriptionBilling.

        Whether payments are past due

        :return: The status of this SubscriptionBilling.
        :rtype: str
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this SubscriptionBilling.

        Whether payments are past due

        :param status: The status of this SubscriptionBilling.
        :type status: str
        """
        allowed_values = ["CURRENT", "PAST_DUE"]  # noqa: E501
        if status not in allowed_values:
            raise ValueError(
                "Invalid value for `status` ({0}), must be one of {1}"
                .format(status, allowed_values)
            )

        self._status = status
