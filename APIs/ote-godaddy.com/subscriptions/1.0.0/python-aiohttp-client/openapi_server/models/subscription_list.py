# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.pagination import Pagination
from openapi_server.models.subscription import Subscription
from openapi_server import util


class SubscriptionList(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, pagination: Pagination=None, subscriptions: List[Subscription]=None):
        """SubscriptionList - a model defined in OpenAPI

        :param pagination: The pagination of this SubscriptionList.
        :param subscriptions: The subscriptions of this SubscriptionList.
        """
        self.openapi_types = {
            'pagination': Pagination,
            'subscriptions': List[Subscription]
        }

        self.attribute_map = {
            'pagination': 'pagination',
            'subscriptions': 'subscriptions'
        }

        self._pagination = pagination
        self._subscriptions = subscriptions

    @classmethod
    def from_dict(cls, dikt: dict) -> 'SubscriptionList':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The SubscriptionList of this SubscriptionList.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def pagination(self):
        """Gets the pagination of this SubscriptionList.


        :return: The pagination of this SubscriptionList.
        :rtype: Pagination
        """
        return self._pagination

    @pagination.setter
    def pagination(self, pagination):
        """Sets the pagination of this SubscriptionList.


        :param pagination: The pagination of this SubscriptionList.
        :type pagination: Pagination
        """
        if pagination is None:
            raise ValueError("Invalid value for `pagination`, must not be `None`")

        self._pagination = pagination

    @property
    def subscriptions(self):
        """Gets the subscriptions of this SubscriptionList.

        A collection of subscriptions

        :return: The subscriptions of this SubscriptionList.
        :rtype: List[Subscription]
        """
        return self._subscriptions

    @subscriptions.setter
    def subscriptions(self, subscriptions):
        """Sets the subscriptions of this SubscriptionList.

        A collection of subscriptions

        :param subscriptions: The subscriptions of this SubscriptionList.
        :type subscriptions: List[Subscription]
        """
        if subscriptions is None:
            raise ValueError("Invalid value for `subscriptions`, must not be `None`")

        self._subscriptions = subscriptions
