/**
 * 
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAISubscriptionProduct.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAISubscriptionProduct::OAISubscriptionProduct(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAISubscriptionProduct::OAISubscriptionProduct() {
    this->initializeModel();
}

OAISubscriptionProduct::~OAISubscriptionProduct() {}

void OAISubscriptionProduct::initializeModel() {

    m_label_isSet = false;
    m_label_isValid = false;

    m_r_namespace_isSet = false;
    m_r_namespace_isValid = false;

    m_pfid_isSet = false;
    m_pfid_isValid = false;

    m_product_group_key_isSet = false;
    m_product_group_key_isValid = false;

    m_renewal_period_isSet = false;
    m_renewal_period_isValid = false;

    m_renewal_period_unit_isSet = false;
    m_renewal_period_unit_isValid = false;

    m_renewal_pfid_isSet = false;
    m_renewal_pfid_isValid = false;

    m_support_bill_on_isSet = false;
    m_support_bill_on_isValid = false;
}

void OAISubscriptionProduct::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAISubscriptionProduct::fromJsonObject(QJsonObject json) {

    m_label_isValid = ::OpenAPI::fromJsonValue(m_label, json[QString("label")]);
    m_label_isSet = !json[QString("label")].isNull() && m_label_isValid;

    m_r_namespace_isValid = ::OpenAPI::fromJsonValue(m_r_namespace, json[QString("namespace")]);
    m_r_namespace_isSet = !json[QString("namespace")].isNull() && m_r_namespace_isValid;

    m_pfid_isValid = ::OpenAPI::fromJsonValue(m_pfid, json[QString("pfid")]);
    m_pfid_isSet = !json[QString("pfid")].isNull() && m_pfid_isValid;

    m_product_group_key_isValid = ::OpenAPI::fromJsonValue(m_product_group_key, json[QString("productGroupKey")]);
    m_product_group_key_isSet = !json[QString("productGroupKey")].isNull() && m_product_group_key_isValid;

    m_renewal_period_isValid = ::OpenAPI::fromJsonValue(m_renewal_period, json[QString("renewalPeriod")]);
    m_renewal_period_isSet = !json[QString("renewalPeriod")].isNull() && m_renewal_period_isValid;

    m_renewal_period_unit_isValid = ::OpenAPI::fromJsonValue(m_renewal_period_unit, json[QString("renewalPeriodUnit")]);
    m_renewal_period_unit_isSet = !json[QString("renewalPeriodUnit")].isNull() && m_renewal_period_unit_isValid;

    m_renewal_pfid_isValid = ::OpenAPI::fromJsonValue(m_renewal_pfid, json[QString("renewalPfid")]);
    m_renewal_pfid_isSet = !json[QString("renewalPfid")].isNull() && m_renewal_pfid_isValid;

    m_support_bill_on_isValid = ::OpenAPI::fromJsonValue(m_support_bill_on, json[QString("supportBillOn")]);
    m_support_bill_on_isSet = !json[QString("supportBillOn")].isNull() && m_support_bill_on_isValid;
}

QString OAISubscriptionProduct::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAISubscriptionProduct::asJsonObject() const {
    QJsonObject obj;
    if (m_label_isSet) {
        obj.insert(QString("label"), ::OpenAPI::toJsonValue(m_label));
    }
    if (m_r_namespace_isSet) {
        obj.insert(QString("namespace"), ::OpenAPI::toJsonValue(m_r_namespace));
    }
    if (m_pfid_isSet) {
        obj.insert(QString("pfid"), ::OpenAPI::toJsonValue(m_pfid));
    }
    if (m_product_group_key_isSet) {
        obj.insert(QString("productGroupKey"), ::OpenAPI::toJsonValue(m_product_group_key));
    }
    if (m_renewal_period_isSet) {
        obj.insert(QString("renewalPeriod"), ::OpenAPI::toJsonValue(m_renewal_period));
    }
    if (m_renewal_period_unit_isSet) {
        obj.insert(QString("renewalPeriodUnit"), ::OpenAPI::toJsonValue(m_renewal_period_unit));
    }
    if (m_renewal_pfid_isSet) {
        obj.insert(QString("renewalPfid"), ::OpenAPI::toJsonValue(m_renewal_pfid));
    }
    if (m_support_bill_on_isSet) {
        obj.insert(QString("supportBillOn"), ::OpenAPI::toJsonValue(m_support_bill_on));
    }
    return obj;
}

QString OAISubscriptionProduct::getLabel() const {
    return m_label;
}
void OAISubscriptionProduct::setLabel(const QString &label) {
    m_label = label;
    m_label_isSet = true;
}

bool OAISubscriptionProduct::is_label_Set() const{
    return m_label_isSet;
}

bool OAISubscriptionProduct::is_label_Valid() const{
    return m_label_isValid;
}

QString OAISubscriptionProduct::getRNamespace() const {
    return m_r_namespace;
}
void OAISubscriptionProduct::setRNamespace(const QString &r_namespace) {
    m_r_namespace = r_namespace;
    m_r_namespace_isSet = true;
}

bool OAISubscriptionProduct::is_r_namespace_Set() const{
    return m_r_namespace_isSet;
}

bool OAISubscriptionProduct::is_r_namespace_Valid() const{
    return m_r_namespace_isValid;
}

qint32 OAISubscriptionProduct::getPfid() const {
    return m_pfid;
}
void OAISubscriptionProduct::setPfid(const qint32 &pfid) {
    m_pfid = pfid;
    m_pfid_isSet = true;
}

bool OAISubscriptionProduct::is_pfid_Set() const{
    return m_pfid_isSet;
}

bool OAISubscriptionProduct::is_pfid_Valid() const{
    return m_pfid_isValid;
}

QString OAISubscriptionProduct::getProductGroupKey() const {
    return m_product_group_key;
}
void OAISubscriptionProduct::setProductGroupKey(const QString &product_group_key) {
    m_product_group_key = product_group_key;
    m_product_group_key_isSet = true;
}

bool OAISubscriptionProduct::is_product_group_key_Set() const{
    return m_product_group_key_isSet;
}

bool OAISubscriptionProduct::is_product_group_key_Valid() const{
    return m_product_group_key_isValid;
}

qint32 OAISubscriptionProduct::getRenewalPeriod() const {
    return m_renewal_period;
}
void OAISubscriptionProduct::setRenewalPeriod(const qint32 &renewal_period) {
    m_renewal_period = renewal_period;
    m_renewal_period_isSet = true;
}

bool OAISubscriptionProduct::is_renewal_period_Set() const{
    return m_renewal_period_isSet;
}

bool OAISubscriptionProduct::is_renewal_period_Valid() const{
    return m_renewal_period_isValid;
}

QString OAISubscriptionProduct::getRenewalPeriodUnit() const {
    return m_renewal_period_unit;
}
void OAISubscriptionProduct::setRenewalPeriodUnit(const QString &renewal_period_unit) {
    m_renewal_period_unit = renewal_period_unit;
    m_renewal_period_unit_isSet = true;
}

bool OAISubscriptionProduct::is_renewal_period_unit_Set() const{
    return m_renewal_period_unit_isSet;
}

bool OAISubscriptionProduct::is_renewal_period_unit_Valid() const{
    return m_renewal_period_unit_isValid;
}

qint32 OAISubscriptionProduct::getRenewalPfid() const {
    return m_renewal_pfid;
}
void OAISubscriptionProduct::setRenewalPfid(const qint32 &renewal_pfid) {
    m_renewal_pfid = renewal_pfid;
    m_renewal_pfid_isSet = true;
}

bool OAISubscriptionProduct::is_renewal_pfid_Set() const{
    return m_renewal_pfid_isSet;
}

bool OAISubscriptionProduct::is_renewal_pfid_Valid() const{
    return m_renewal_pfid_isValid;
}

bool OAISubscriptionProduct::isSupportBillOn() const {
    return m_support_bill_on;
}
void OAISubscriptionProduct::setSupportBillOn(const bool &support_bill_on) {
    m_support_bill_on = support_bill_on;
    m_support_bill_on_isSet = true;
}

bool OAISubscriptionProduct::is_support_bill_on_Set() const{
    return m_support_bill_on_isSet;
}

bool OAISubscriptionProduct::is_support_bill_on_Valid() const{
    return m_support_bill_on_isValid;
}

bool OAISubscriptionProduct::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_label_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_r_namespace_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_pfid_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_product_group_key_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_renewal_period_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_renewal_period_unit_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_renewal_pfid_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_support_bill_on_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAISubscriptionProduct::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_label_isValid && m_r_namespace_isValid && m_pfid_isValid && m_product_group_key_isValid && m_renewal_period_isValid && m_renewal_period_unit_isValid && m_renewal_pfid_isValid && m_support_bill_on_isValid && true;
}

} // namespace OpenAPI
