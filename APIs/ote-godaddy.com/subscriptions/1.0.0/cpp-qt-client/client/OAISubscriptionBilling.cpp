/**
 * 
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAISubscriptionBilling.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAISubscriptionBilling::OAISubscriptionBilling(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAISubscriptionBilling::OAISubscriptionBilling() {
    this->initializeModel();
}

OAISubscriptionBilling::~OAISubscriptionBilling() {}

void OAISubscriptionBilling::initializeModel() {

    m_commitment_isSet = false;
    m_commitment_isValid = false;

    m_past_due_types_isSet = false;
    m_past_due_types_isValid = false;

    m_renew_at_isSet = false;
    m_renew_at_isValid = false;

    m_status_isSet = false;
    m_status_isValid = false;
}

void OAISubscriptionBilling::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAISubscriptionBilling::fromJsonObject(QJsonObject json) {

    m_commitment_isValid = ::OpenAPI::fromJsonValue(m_commitment, json[QString("commitment")]);
    m_commitment_isSet = !json[QString("commitment")].isNull() && m_commitment_isValid;

    m_past_due_types_isValid = ::OpenAPI::fromJsonValue(m_past_due_types, json[QString("pastDueTypes")]);
    m_past_due_types_isSet = !json[QString("pastDueTypes")].isNull() && m_past_due_types_isValid;

    m_renew_at_isValid = ::OpenAPI::fromJsonValue(m_renew_at, json[QString("renewAt")]);
    m_renew_at_isSet = !json[QString("renewAt")].isNull() && m_renew_at_isValid;

    m_status_isValid = ::OpenAPI::fromJsonValue(m_status, json[QString("status")]);
    m_status_isSet = !json[QString("status")].isNull() && m_status_isValid;
}

QString OAISubscriptionBilling::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAISubscriptionBilling::asJsonObject() const {
    QJsonObject obj;
    if (m_commitment_isSet) {
        obj.insert(QString("commitment"), ::OpenAPI::toJsonValue(m_commitment));
    }
    if (m_past_due_types.size() > 0) {
        obj.insert(QString("pastDueTypes"), ::OpenAPI::toJsonValue(m_past_due_types));
    }
    if (m_renew_at_isSet) {
        obj.insert(QString("renewAt"), ::OpenAPI::toJsonValue(m_renew_at));
    }
    if (m_status_isSet) {
        obj.insert(QString("status"), ::OpenAPI::toJsonValue(m_status));
    }
    return obj;
}

QString OAISubscriptionBilling::getCommitment() const {
    return m_commitment;
}
void OAISubscriptionBilling::setCommitment(const QString &commitment) {
    m_commitment = commitment;
    m_commitment_isSet = true;
}

bool OAISubscriptionBilling::is_commitment_Set() const{
    return m_commitment_isSet;
}

bool OAISubscriptionBilling::is_commitment_Valid() const{
    return m_commitment_isValid;
}

QList<QString> OAISubscriptionBilling::getPastDueTypes() const {
    return m_past_due_types;
}
void OAISubscriptionBilling::setPastDueTypes(const QList<QString> &past_due_types) {
    m_past_due_types = past_due_types;
    m_past_due_types_isSet = true;
}

bool OAISubscriptionBilling::is_past_due_types_Set() const{
    return m_past_due_types_isSet;
}

bool OAISubscriptionBilling::is_past_due_types_Valid() const{
    return m_past_due_types_isValid;
}

QString OAISubscriptionBilling::getRenewAt() const {
    return m_renew_at;
}
void OAISubscriptionBilling::setRenewAt(const QString &renew_at) {
    m_renew_at = renew_at;
    m_renew_at_isSet = true;
}

bool OAISubscriptionBilling::is_renew_at_Set() const{
    return m_renew_at_isSet;
}

bool OAISubscriptionBilling::is_renew_at_Valid() const{
    return m_renew_at_isValid;
}

QString OAISubscriptionBilling::getStatus() const {
    return m_status;
}
void OAISubscriptionBilling::setStatus(const QString &status) {
    m_status = status;
    m_status_isSet = true;
}

bool OAISubscriptionBilling::is_status_Set() const{
    return m_status_isSet;
}

bool OAISubscriptionBilling::is_status_Valid() const{
    return m_status_isValid;
}

bool OAISubscriptionBilling::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_commitment_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_past_due_types.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_renew_at_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_status_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAISubscriptionBilling::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_commitment_isValid && m_renew_at_isValid && m_status_isValid && true;
}

} // namespace OpenAPI
