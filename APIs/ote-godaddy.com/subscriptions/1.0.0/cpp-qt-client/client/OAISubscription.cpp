/**
 * 
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAISubscription.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAISubscription::OAISubscription(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAISubscription::OAISubscription() {
    this->initializeModel();
}

OAISubscription::~OAISubscription() {}

void OAISubscription::initializeModel() {

    m_addons_isSet = false;
    m_addons_isValid = false;

    m_billing_isSet = false;
    m_billing_isValid = false;

    m_cancelable_isSet = false;
    m_cancelable_isValid = false;

    m_created_at_isSet = false;
    m_created_at_isValid = false;

    m_expires_at_isSet = false;
    m_expires_at_isValid = false;

    m_label_isSet = false;
    m_label_isValid = false;

    m_launch_url_isSet = false;
    m_launch_url_isValid = false;

    m_payment_profile_id_isSet = false;
    m_payment_profile_id_isValid = false;

    m_price_locked_isSet = false;
    m_price_locked_isValid = false;

    m_product_isSet = false;
    m_product_isValid = false;

    m_relations_isSet = false;
    m_relations_isValid = false;

    m_renew_auto_isSet = false;
    m_renew_auto_isValid = false;

    m_renewable_isSet = false;
    m_renewable_isValid = false;

    m_status_isSet = false;
    m_status_isValid = false;

    m_subscription_id_isSet = false;
    m_subscription_id_isValid = false;

    m_upgradeable_isSet = false;
    m_upgradeable_isValid = false;
}

void OAISubscription::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAISubscription::fromJsonObject(QJsonObject json) {

    m_addons_isValid = ::OpenAPI::fromJsonValue(m_addons, json[QString("addons")]);
    m_addons_isSet = !json[QString("addons")].isNull() && m_addons_isValid;

    m_billing_isValid = ::OpenAPI::fromJsonValue(m_billing, json[QString("billing")]);
    m_billing_isSet = !json[QString("billing")].isNull() && m_billing_isValid;

    m_cancelable_isValid = ::OpenAPI::fromJsonValue(m_cancelable, json[QString("cancelable")]);
    m_cancelable_isSet = !json[QString("cancelable")].isNull() && m_cancelable_isValid;

    m_created_at_isValid = ::OpenAPI::fromJsonValue(m_created_at, json[QString("createdAt")]);
    m_created_at_isSet = !json[QString("createdAt")].isNull() && m_created_at_isValid;

    m_expires_at_isValid = ::OpenAPI::fromJsonValue(m_expires_at, json[QString("expiresAt")]);
    m_expires_at_isSet = !json[QString("expiresAt")].isNull() && m_expires_at_isValid;

    m_label_isValid = ::OpenAPI::fromJsonValue(m_label, json[QString("label")]);
    m_label_isSet = !json[QString("label")].isNull() && m_label_isValid;

    m_launch_url_isValid = ::OpenAPI::fromJsonValue(m_launch_url, json[QString("launchUrl")]);
    m_launch_url_isSet = !json[QString("launchUrl")].isNull() && m_launch_url_isValid;

    m_payment_profile_id_isValid = ::OpenAPI::fromJsonValue(m_payment_profile_id, json[QString("paymentProfileId")]);
    m_payment_profile_id_isSet = !json[QString("paymentProfileId")].isNull() && m_payment_profile_id_isValid;

    m_price_locked_isValid = ::OpenAPI::fromJsonValue(m_price_locked, json[QString("priceLocked")]);
    m_price_locked_isSet = !json[QString("priceLocked")].isNull() && m_price_locked_isValid;

    m_product_isValid = ::OpenAPI::fromJsonValue(m_product, json[QString("product")]);
    m_product_isSet = !json[QString("product")].isNull() && m_product_isValid;

    m_relations_isValid = ::OpenAPI::fromJsonValue(m_relations, json[QString("relations")]);
    m_relations_isSet = !json[QString("relations")].isNull() && m_relations_isValid;

    m_renew_auto_isValid = ::OpenAPI::fromJsonValue(m_renew_auto, json[QString("renewAuto")]);
    m_renew_auto_isSet = !json[QString("renewAuto")].isNull() && m_renew_auto_isValid;

    m_renewable_isValid = ::OpenAPI::fromJsonValue(m_renewable, json[QString("renewable")]);
    m_renewable_isSet = !json[QString("renewable")].isNull() && m_renewable_isValid;

    m_status_isValid = ::OpenAPI::fromJsonValue(m_status, json[QString("status")]);
    m_status_isSet = !json[QString("status")].isNull() && m_status_isValid;

    m_subscription_id_isValid = ::OpenAPI::fromJsonValue(m_subscription_id, json[QString("subscriptionId")]);
    m_subscription_id_isSet = !json[QString("subscriptionId")].isNull() && m_subscription_id_isValid;

    m_upgradeable_isValid = ::OpenAPI::fromJsonValue(m_upgradeable, json[QString("upgradeable")]);
    m_upgradeable_isSet = !json[QString("upgradeable")].isNull() && m_upgradeable_isValid;
}

QString OAISubscription::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAISubscription::asJsonObject() const {
    QJsonObject obj;
    if (m_addons.size() > 0) {
        obj.insert(QString("addons"), ::OpenAPI::toJsonValue(m_addons));
    }
    if (m_billing.isSet()) {
        obj.insert(QString("billing"), ::OpenAPI::toJsonValue(m_billing));
    }
    if (m_cancelable_isSet) {
        obj.insert(QString("cancelable"), ::OpenAPI::toJsonValue(m_cancelable));
    }
    if (m_created_at_isSet) {
        obj.insert(QString("createdAt"), ::OpenAPI::toJsonValue(m_created_at));
    }
    if (m_expires_at_isSet) {
        obj.insert(QString("expiresAt"), ::OpenAPI::toJsonValue(m_expires_at));
    }
    if (m_label_isSet) {
        obj.insert(QString("label"), ::OpenAPI::toJsonValue(m_label));
    }
    if (m_launch_url_isSet) {
        obj.insert(QString("launchUrl"), ::OpenAPI::toJsonValue(m_launch_url));
    }
    if (m_payment_profile_id_isSet) {
        obj.insert(QString("paymentProfileId"), ::OpenAPI::toJsonValue(m_payment_profile_id));
    }
    if (m_price_locked_isSet) {
        obj.insert(QString("priceLocked"), ::OpenAPI::toJsonValue(m_price_locked));
    }
    if (m_product.isSet()) {
        obj.insert(QString("product"), ::OpenAPI::toJsonValue(m_product));
    }
    if (m_relations.isSet()) {
        obj.insert(QString("relations"), ::OpenAPI::toJsonValue(m_relations));
    }
    if (m_renew_auto_isSet) {
        obj.insert(QString("renewAuto"), ::OpenAPI::toJsonValue(m_renew_auto));
    }
    if (m_renewable_isSet) {
        obj.insert(QString("renewable"), ::OpenAPI::toJsonValue(m_renewable));
    }
    if (m_status_isSet) {
        obj.insert(QString("status"), ::OpenAPI::toJsonValue(m_status));
    }
    if (m_subscription_id_isSet) {
        obj.insert(QString("subscriptionId"), ::OpenAPI::toJsonValue(m_subscription_id));
    }
    if (m_upgradeable_isSet) {
        obj.insert(QString("upgradeable"), ::OpenAPI::toJsonValue(m_upgradeable));
    }
    return obj;
}

QList<OAISubscriptionAddon> OAISubscription::getAddons() const {
    return m_addons;
}
void OAISubscription::setAddons(const QList<OAISubscriptionAddon> &addons) {
    m_addons = addons;
    m_addons_isSet = true;
}

bool OAISubscription::is_addons_Set() const{
    return m_addons_isSet;
}

bool OAISubscription::is_addons_Valid() const{
    return m_addons_isValid;
}

OAISubscriptionBilling OAISubscription::getBilling() const {
    return m_billing;
}
void OAISubscription::setBilling(const OAISubscriptionBilling &billing) {
    m_billing = billing;
    m_billing_isSet = true;
}

bool OAISubscription::is_billing_Set() const{
    return m_billing_isSet;
}

bool OAISubscription::is_billing_Valid() const{
    return m_billing_isValid;
}

bool OAISubscription::isCancelable() const {
    return m_cancelable;
}
void OAISubscription::setCancelable(const bool &cancelable) {
    m_cancelable = cancelable;
    m_cancelable_isSet = true;
}

bool OAISubscription::is_cancelable_Set() const{
    return m_cancelable_isSet;
}

bool OAISubscription::is_cancelable_Valid() const{
    return m_cancelable_isValid;
}

QString OAISubscription::getCreatedAt() const {
    return m_created_at;
}
void OAISubscription::setCreatedAt(const QString &created_at) {
    m_created_at = created_at;
    m_created_at_isSet = true;
}

bool OAISubscription::is_created_at_Set() const{
    return m_created_at_isSet;
}

bool OAISubscription::is_created_at_Valid() const{
    return m_created_at_isValid;
}

QString OAISubscription::getExpiresAt() const {
    return m_expires_at;
}
void OAISubscription::setExpiresAt(const QString &expires_at) {
    m_expires_at = expires_at;
    m_expires_at_isSet = true;
}

bool OAISubscription::is_expires_at_Set() const{
    return m_expires_at_isSet;
}

bool OAISubscription::is_expires_at_Valid() const{
    return m_expires_at_isValid;
}

QString OAISubscription::getLabel() const {
    return m_label;
}
void OAISubscription::setLabel(const QString &label) {
    m_label = label;
    m_label_isSet = true;
}

bool OAISubscription::is_label_Set() const{
    return m_label_isSet;
}

bool OAISubscription::is_label_Valid() const{
    return m_label_isValid;
}

QString OAISubscription::getLaunchUrl() const {
    return m_launch_url;
}
void OAISubscription::setLaunchUrl(const QString &launch_url) {
    m_launch_url = launch_url;
    m_launch_url_isSet = true;
}

bool OAISubscription::is_launch_url_Set() const{
    return m_launch_url_isSet;
}

bool OAISubscription::is_launch_url_Valid() const{
    return m_launch_url_isValid;
}

qint32 OAISubscription::getPaymentProfileId() const {
    return m_payment_profile_id;
}
void OAISubscription::setPaymentProfileId(const qint32 &payment_profile_id) {
    m_payment_profile_id = payment_profile_id;
    m_payment_profile_id_isSet = true;
}

bool OAISubscription::is_payment_profile_id_Set() const{
    return m_payment_profile_id_isSet;
}

bool OAISubscription::is_payment_profile_id_Valid() const{
    return m_payment_profile_id_isValid;
}

bool OAISubscription::isPriceLocked() const {
    return m_price_locked;
}
void OAISubscription::setPriceLocked(const bool &price_locked) {
    m_price_locked = price_locked;
    m_price_locked_isSet = true;
}

bool OAISubscription::is_price_locked_Set() const{
    return m_price_locked_isSet;
}

bool OAISubscription::is_price_locked_Valid() const{
    return m_price_locked_isValid;
}

OAISubscriptionProduct OAISubscription::getProduct() const {
    return m_product;
}
void OAISubscription::setProduct(const OAISubscriptionProduct &product) {
    m_product = product;
    m_product_isSet = true;
}

bool OAISubscription::is_product_Set() const{
    return m_product_isSet;
}

bool OAISubscription::is_product_Valid() const{
    return m_product_isValid;
}

OAISubscriptionRelations OAISubscription::getRelations() const {
    return m_relations;
}
void OAISubscription::setRelations(const OAISubscriptionRelations &relations) {
    m_relations = relations;
    m_relations_isSet = true;
}

bool OAISubscription::is_relations_Set() const{
    return m_relations_isSet;
}

bool OAISubscription::is_relations_Valid() const{
    return m_relations_isValid;
}

bool OAISubscription::isRenewAuto() const {
    return m_renew_auto;
}
void OAISubscription::setRenewAuto(const bool &renew_auto) {
    m_renew_auto = renew_auto;
    m_renew_auto_isSet = true;
}

bool OAISubscription::is_renew_auto_Set() const{
    return m_renew_auto_isSet;
}

bool OAISubscription::is_renew_auto_Valid() const{
    return m_renew_auto_isValid;
}

bool OAISubscription::isRenewable() const {
    return m_renewable;
}
void OAISubscription::setRenewable(const bool &renewable) {
    m_renewable = renewable;
    m_renewable_isSet = true;
}

bool OAISubscription::is_renewable_Set() const{
    return m_renewable_isSet;
}

bool OAISubscription::is_renewable_Valid() const{
    return m_renewable_isValid;
}

QString OAISubscription::getStatus() const {
    return m_status;
}
void OAISubscription::setStatus(const QString &status) {
    m_status = status;
    m_status_isSet = true;
}

bool OAISubscription::is_status_Set() const{
    return m_status_isSet;
}

bool OAISubscription::is_status_Valid() const{
    return m_status_isValid;
}

QString OAISubscription::getSubscriptionId() const {
    return m_subscription_id;
}
void OAISubscription::setSubscriptionId(const QString &subscription_id) {
    m_subscription_id = subscription_id;
    m_subscription_id_isSet = true;
}

bool OAISubscription::is_subscription_id_Set() const{
    return m_subscription_id_isSet;
}

bool OAISubscription::is_subscription_id_Valid() const{
    return m_subscription_id_isValid;
}

bool OAISubscription::isUpgradeable() const {
    return m_upgradeable;
}
void OAISubscription::setUpgradeable(const bool &upgradeable) {
    m_upgradeable = upgradeable;
    m_upgradeable_isSet = true;
}

bool OAISubscription::is_upgradeable_Set() const{
    return m_upgradeable_isSet;
}

bool OAISubscription::is_upgradeable_Valid() const{
    return m_upgradeable_isValid;
}

bool OAISubscription::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_addons.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_billing.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_cancelable_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_created_at_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_expires_at_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_label_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_launch_url_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_payment_profile_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_price_locked_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_product.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_relations.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_renew_auto_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_renewable_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_status_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_subscription_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_upgradeable_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAISubscription::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_billing_isValid && m_created_at_isValid && m_price_locked_isValid && m_product_isValid && m_renew_auto_isValid && m_renewable_isValid && m_status_isValid && m_subscription_id_isValid && m_upgradeable_isValid && true;
}

} // namespace OpenAPI
