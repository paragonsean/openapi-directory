# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class OrderFee(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, icann: int=None, total: int=None):
        """OrderFee - a model defined in OpenAPI

        :param icann: The icann of this OrderFee.
        :param total: The total of this OrderFee.
        """
        self.openapi_types = {
            'icann': int,
            'total': int
        }

        self.attribute_map = {
            'icann': 'icann',
            'total': 'total'
        }

        self._icann = icann
        self._total = total

    @classmethod
    def from_dict(cls, dikt: dict) -> 'OrderFee':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The OrderFee of this OrderFee.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def icann(self):
        """Gets the icann of this OrderFee.

        Domain registration transaction fee charged by ICANN

        :return: The icann of this OrderFee.
        :rtype: int
        """
        return self._icann

    @icann.setter
    def icann(self, icann):
        """Sets the icann of this OrderFee.

        Domain registration transaction fee charged by ICANN

        :param icann: The icann of this OrderFee.
        :type icann: int
        """

        self._icann = icann

    @property
    def total(self):
        """Gets the total of this OrderFee.

        Sum of all fees

        :return: The total of this OrderFee.
        :rtype: int
        """
        return self._total

    @total.setter
    def total(self, total):
        """Sets the total of this OrderFee.

        Sum of all fees

        :param total: The total of this OrderFee.
        :type total: int
        """
        if total is None:
            raise ValueError("Invalid value for `total`, must not be `None`")

        self._total = total
