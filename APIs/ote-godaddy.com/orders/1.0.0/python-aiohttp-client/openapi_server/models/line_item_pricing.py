# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.order_fee import OrderFee
from openapi_server import util


class LineItemPricing(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, discount: int=None, fees: OrderFee=None, list: int=None, sale: int=None, savings: int=None, subtotal: int=None, taxes: int=None, unit: object=None):
        """LineItemPricing - a model defined in OpenAPI

        :param discount: The discount of this LineItemPricing.
        :param fees: The fees of this LineItemPricing.
        :param list: The list of this LineItemPricing.
        :param sale: The sale of this LineItemPricing.
        :param savings: The savings of this LineItemPricing.
        :param subtotal: The subtotal of this LineItemPricing.
        :param taxes: The taxes of this LineItemPricing.
        :param unit: The unit of this LineItemPricing.
        """
        self.openapi_types = {
            'discount': int,
            'fees': OrderFee,
            'list': int,
            'sale': int,
            'savings': int,
            'subtotal': int,
            'taxes': int,
            'unit': object
        }

        self.attribute_map = {
            'discount': 'discount',
            'fees': 'fees',
            'list': 'list',
            'sale': 'sale',
            'savings': 'savings',
            'subtotal': 'subtotal',
            'taxes': 'taxes',
            'unit': 'unit'
        }

        self._discount = discount
        self._fees = fees
        self._list = list
        self._sale = sale
        self._savings = savings
        self._subtotal = subtotal
        self._taxes = taxes
        self._unit = unit

    @classmethod
    def from_dict(cls, dikt: dict) -> 'LineItemPricing':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The LineItemPricing of this LineItemPricing.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def discount(self):
        """Gets the discount of this LineItemPricing.

        Discount off of sale price for given `quantity` and `period` <pre>`discount` = `sale` - `subtotal`</pre>

        :return: The discount of this LineItemPricing.
        :rtype: int
        """
        return self._discount

    @discount.setter
    def discount(self, discount):
        """Sets the discount of this LineItemPricing.

        Discount off of sale price for given `quantity` and `period` <pre>`discount` = `sale` - `subtotal`</pre>

        :param discount: The discount of this LineItemPricing.
        :type discount: int
        """
        if discount is None:
            raise ValueError("Invalid value for `discount`, must not be `None`")

        self._discount = discount

    @property
    def fees(self):
        """Gets the fees of this LineItemPricing.


        :return: The fees of this LineItemPricing.
        :rtype: OrderFee
        """
        return self._fees

    @fees.setter
    def fees(self, fees):
        """Sets the fees of this LineItemPricing.


        :param fees: The fees of this LineItemPricing.
        :type fees: OrderFee
        """
        if fees is None:
            raise ValueError("Invalid value for `fees`, must not be `None`")

        self._fees = fees

    @property
    def list(self):
        """Gets the list of this LineItemPricing.

        List price for given `quantity` and `period`

        :return: The list of this LineItemPricing.
        :rtype: int
        """
        return self._list

    @list.setter
    def list(self, list):
        """Sets the list of this LineItemPricing.

        List price for given `quantity` and `period`

        :param list: The list of this LineItemPricing.
        :type list: int
        """
        if list is None:
            raise ValueError("Invalid value for `list`, must not be `None`")

        self._list = list

    @property
    def sale(self):
        """Gets the sale of this LineItemPricing.

        Actual price for the current product

        :return: The sale of this LineItemPricing.
        :rtype: int
        """
        return self._sale

    @sale.setter
    def sale(self, sale):
        """Sets the sale of this LineItemPricing.

        Actual price for the current product

        :param sale: The sale of this LineItemPricing.
        :type sale: int
        """
        if sale is None:
            raise ValueError("Invalid value for `sale`, must not be `None`")

        self._sale = sale

    @property
    def savings(self):
        """Gets the savings of this LineItemPricing.

        Savings off of list price for given `quantity` and `period` <pre>`savings` = `list` - `subtotal`</pre>

        :return: The savings of this LineItemPricing.
        :rtype: int
        """
        return self._savings

    @savings.setter
    def savings(self, savings):
        """Sets the savings of this LineItemPricing.

        Savings off of list price for given `quantity` and `period` <pre>`savings` = `list` - `subtotal`</pre>

        :param savings: The savings of this LineItemPricing.
        :type savings: int
        """
        if savings is None:
            raise ValueError("Invalid value for `savings`, must not be `None`")

        self._savings = savings

    @property
    def subtotal(self):
        """Gets the subtotal of this LineItemPricing.

        Price with any discounts and without taxes or fees for given `quantity` and `period`

        :return: The subtotal of this LineItemPricing.
        :rtype: int
        """
        return self._subtotal

    @subtotal.setter
    def subtotal(self, subtotal):
        """Sets the subtotal of this LineItemPricing.

        Price with any discounts and without taxes or fees for given `quantity` and `period`

        :param subtotal: The subtotal of this LineItemPricing.
        :type subtotal: int
        """
        if subtotal is None:
            raise ValueError("Invalid value for `subtotal`, must not be `None`")

        self._subtotal = subtotal

    @property
    def taxes(self):
        """Gets the taxes of this LineItemPricing.

        Taxes for given `quantity` and `period`

        :return: The taxes of this LineItemPricing.
        :rtype: int
        """
        return self._taxes

    @taxes.setter
    def taxes(self, taxes):
        """Sets the taxes of this LineItemPricing.

        Taxes for given `quantity` and `period`

        :param taxes: The taxes of this LineItemPricing.
        :type taxes: int
        """
        if taxes is None:
            raise ValueError("Invalid value for `taxes`, must not be `None`")

        self._taxes = taxes

    @property
    def unit(self):
        """Gets the unit of this LineItemPricing.

        Pricing for a single unit of the given item

        :return: The unit of this LineItemPricing.
        :rtype: object
        """
        return self._unit

    @unit.setter
    def unit(self, unit):
        """Sets the unit of this LineItemPricing.

        Pricing for a single unit of the given item

        :param unit: The unit of this LineItemPricing.
        :type unit: object
        """
        if unit is None:
            raise ValueError("Invalid value for `unit`, must not be `None`")

        self._unit = unit
