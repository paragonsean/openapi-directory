# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class Pagination(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, first: str=None, last: str=None, next: str=None, previous: str=None, total: int=None):
        """Pagination - a model defined in OpenAPI

        :param first: The first of this Pagination.
        :param last: The last of this Pagination.
        :param next: The next of this Pagination.
        :param previous: The previous of this Pagination.
        :param total: The total of this Pagination.
        """
        self.openapi_types = {
            'first': str,
            'last': str,
            'next': str,
            'previous': str,
            'total': int
        }

        self.attribute_map = {
            'first': 'first',
            'last': 'last',
            'next': 'next',
            'previous': 'previous',
            'total': 'total'
        }

        self._first = first
        self._last = last
        self._next = next
        self._previous = previous
        self._total = total

    @classmethod
    def from_dict(cls, dikt: dict) -> 'Pagination':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Pagination of this Pagination.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def first(self):
        """Gets the first of this Pagination.

        URI to access the first page

        :return: The first of this Pagination.
        :rtype: str
        """
        return self._first

    @first.setter
    def first(self, first):
        """Sets the first of this Pagination.

        URI to access the first page

        :param first: The first of this Pagination.
        :type first: str
        """

        self._first = first

    @property
    def last(self):
        """Gets the last of this Pagination.

        URI to access the last page

        :return: The last of this Pagination.
        :rtype: str
        """
        return self._last

    @last.setter
    def last(self, last):
        """Sets the last of this Pagination.

        URI to access the last page

        :param last: The last of this Pagination.
        :type last: str
        """

        self._last = last

    @property
    def next(self):
        """Gets the next of this Pagination.

        URI to access the next page

        :return: The next of this Pagination.
        :rtype: str
        """
        return self._next

    @next.setter
    def next(self, next):
        """Sets the next of this Pagination.

        URI to access the next page

        :param next: The next of this Pagination.
        :type next: str
        """

        self._next = next

    @property
    def previous(self):
        """Gets the previous of this Pagination.

        URI to access the previous page

        :return: The previous of this Pagination.
        :rtype: str
        """
        return self._previous

    @previous.setter
    def previous(self, previous):
        """Sets the previous of this Pagination.

        URI to access the previous page

        :param previous: The previous of this Pagination.
        :type previous: str
        """

        self._previous = previous

    @property
    def total(self):
        """Gets the total of this Pagination.

        Number of records available

        :return: The total of this Pagination.
        :rtype: int
        """
        return self._total

    @total.setter
    def total(self, total):
        """Sets the total of this Pagination.

        Number of records available

        :param total: The total of this Pagination.
        :type total: int
        """

        self._total = total
