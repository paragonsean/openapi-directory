# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.line_item_pricing import LineItemPricing
from openapi_server.models.line_item_tax_collector import LineItemTaxCollector
from openapi_server import util


class LineItem(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, domains: List[str]=None, label: str=None, period: float=1, period_unit: str='MONTH', pfid: int=None, pricing: LineItemPricing=None, quantity: int=None, tax_collector: LineItemTaxCollector=None):
        """LineItem - a model defined in OpenAPI

        :param domains: The domains of this LineItem.
        :param label: The label of this LineItem.
        :param period: The period of this LineItem.
        :param period_unit: The period_unit of this LineItem.
        :param pfid: The pfid of this LineItem.
        :param pricing: The pricing of this LineItem.
        :param quantity: The quantity of this LineItem.
        :param tax_collector: The tax_collector of this LineItem.
        """
        self.openapi_types = {
            'domains': List[str],
            'label': str,
            'period': float,
            'period_unit': str,
            'pfid': int,
            'pricing': LineItemPricing,
            'quantity': int,
            'tax_collector': LineItemTaxCollector
        }

        self.attribute_map = {
            'domains': 'domains',
            'label': 'label',
            'period': 'period',
            'period_unit': 'periodUnit',
            'pfid': 'pfid',
            'pricing': 'pricing',
            'quantity': 'quantity',
            'tax_collector': 'taxCollector'
        }

        self._domains = domains
        self._label = label
        self._period = period
        self._period_unit = period_unit
        self._pfid = pfid
        self._pricing = pricing
        self._quantity = quantity
        self._tax_collector = tax_collector

    @classmethod
    def from_dict(cls, dikt: dict) -> 'LineItem':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The LineItem of this LineItem.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def domains(self):
        """Gets the domains of this LineItem.

        A collection of domain names purchased if the current product is domain

        :return: The domains of this LineItem.
        :rtype: List[str]
        """
        return self._domains

    @domains.setter
    def domains(self, domains):
        """Sets the domains of this LineItem.

        A collection of domain names purchased if the current product is domain

        :param domains: The domains of this LineItem.
        :type domains: List[str]
        """

        self._domains = domains

    @property
    def label(self):
        """Gets the label of this LineItem.

        Human readable description of the current product

        :return: The label of this LineItem.
        :rtype: str
        """
        return self._label

    @label.setter
    def label(self, label):
        """Sets the label of this LineItem.

        Human readable description of the current product

        :param label: The label of this LineItem.
        :type label: str
        """
        if label is None:
            raise ValueError("Invalid value for `label`, must not be `None`")

        self._label = label

    @property
    def period(self):
        """Gets the period of this LineItem.


        :return: The period of this LineItem.
        :rtype: float
        """
        return self._period

    @period.setter
    def period(self, period):
        """Sets the period of this LineItem.


        :param period: The period of this LineItem.
        :type period: float
        """

        self._period = period

    @property
    def period_unit(self):
        """Gets the period_unit of this LineItem.

        The unit of time that periodCount is measured in

        :return: The period_unit of this LineItem.
        :rtype: str
        """
        return self._period_unit

    @period_unit.setter
    def period_unit(self, period_unit):
        """Sets the period_unit of this LineItem.

        The unit of time that periodCount is measured in

        :param period_unit: The period_unit of this LineItem.
        :type period_unit: str
        """
        allowed_values = ["MONTH", "QUARTER", "SEMI_ANNUAL", "YEAR", "ONE_TIME"]  # noqa: E501
        if period_unit not in allowed_values:
            raise ValueError(
                "Invalid value for `period_unit` ({0}), must be one of {1}"
                .format(period_unit, allowed_values)
            )

        self._period_unit = period_unit

    @property
    def pfid(self):
        """Gets the pfid of this LineItem.

        Unique identifier of the current product

        :return: The pfid of this LineItem.
        :rtype: int
        """
        return self._pfid

    @pfid.setter
    def pfid(self, pfid):
        """Sets the pfid of this LineItem.

        Unique identifier of the current product

        :param pfid: The pfid of this LineItem.
        :type pfid: int
        """

        self._pfid = pfid

    @property
    def pricing(self):
        """Gets the pricing of this LineItem.


        :return: The pricing of this LineItem.
        :rtype: LineItemPricing
        """
        return self._pricing

    @pricing.setter
    def pricing(self, pricing):
        """Sets the pricing of this LineItem.


        :param pricing: The pricing of this LineItem.
        :type pricing: LineItemPricing
        """
        if pricing is None:
            raise ValueError("Invalid value for `pricing`, must not be `None`")

        self._pricing = pricing

    @property
    def quantity(self):
        """Gets the quantity of this LineItem.

        Number of the current product included in the specified order

        :return: The quantity of this LineItem.
        :rtype: int
        """
        return self._quantity

    @quantity.setter
    def quantity(self, quantity):
        """Sets the quantity of this LineItem.

        Number of the current product included in the specified order

        :param quantity: The quantity of this LineItem.
        :type quantity: int
        """
        if quantity is None:
            raise ValueError("Invalid value for `quantity`, must not be `None`")

        self._quantity = quantity

    @property
    def tax_collector(self):
        """Gets the tax_collector of this LineItem.


        :return: The tax_collector of this LineItem.
        :rtype: LineItemTaxCollector
        """
        return self._tax_collector

    @tax_collector.setter
    def tax_collector(self, tax_collector):
        """Sets the tax_collector of this LineItem.


        :param tax_collector: The tax_collector of this LineItem.
        :type tax_collector: LineItemTaxCollector
        """

        self._tax_collector = tax_collector
