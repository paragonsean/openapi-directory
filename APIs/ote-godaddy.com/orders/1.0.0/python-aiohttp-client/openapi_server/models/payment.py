# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class Payment(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, amount: int=None, category: str=None, payment_profile_id: str=None, subcategory: str=None):
        """Payment - a model defined in OpenAPI

        :param amount: The amount of this Payment.
        :param category: The category of this Payment.
        :param payment_profile_id: The payment_profile_id of this Payment.
        :param subcategory: The subcategory of this Payment.
        """
        self.openapi_types = {
            'amount': int,
            'category': str,
            'payment_profile_id': str,
            'subcategory': str
        }

        self.attribute_map = {
            'amount': 'amount',
            'category': 'category',
            'payment_profile_id': 'paymentProfileId',
            'subcategory': 'subcategory'
        }

        self._amount = amount
        self._category = category
        self._payment_profile_id = payment_profile_id
        self._subcategory = subcategory

    @classmethod
    def from_dict(cls, dikt: dict) -> 'Payment':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Payment of this Payment.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def amount(self):
        """Gets the amount of this Payment.

        Amount paid by the current payment

        :return: The amount of this Payment.
        :rtype: int
        """
        return self._amount

    @amount.setter
    def amount(self, amount):
        """Sets the amount of this Payment.

        Amount paid by the current payment

        :param amount: The amount of this Payment.
        :type amount: int
        """
        if amount is None:
            raise ValueError("Invalid value for `amount`, must not be `None`")

        self._amount = amount

    @property
    def category(self):
        """Gets the category of this Payment.

        The category of payment method used at the time of purchase. Most common values are listed in the enum.

        :return: The category of this Payment.
        :rtype: str
        """
        return self._category

    @category.setter
    def category(self, category):
        """Sets the category of this Payment.

        The category of payment method used at the time of purchase. Most common values are listed in the enum.

        :param category: The category of this Payment.
        :type category: str
        """
        allowed_values = ["CREDIT_CARD", "PAYPAL", "ACH", "GIFT_CARD", "IN_STORE_CREDIT", "PREPAID"]  # noqa: E501
        if category not in allowed_values:
            raise ValueError(
                "Invalid value for `category` ({0}), must be one of {1}"
                .format(category, allowed_values)
            )

        self._category = category

    @property
    def payment_profile_id(self):
        """Gets the payment_profile_id of this Payment.

        Unique identifier of the payment profile used by current payment

        :return: The payment_profile_id of this Payment.
        :rtype: str
        """
        return self._payment_profile_id

    @payment_profile_id.setter
    def payment_profile_id(self, payment_profile_id):
        """Sets the payment_profile_id of this Payment.

        Unique identifier of the payment profile used by current payment

        :param payment_profile_id: The payment_profile_id of this Payment.
        :type payment_profile_id: str
        """
        if payment_profile_id is None:
            raise ValueError("Invalid value for `payment_profile_id`, must not be `None`")

        self._payment_profile_id = payment_profile_id

    @property
    def subcategory(self):
        """Gets the subcategory of this Payment.

        The subcategory of payment method used at the time of purchase.  This field is only set for certain payment categories, such as ACH and CREDIT_CARD. Most common values are listed in the enum.

        :return: The subcategory of this Payment.
        :rtype: str
        """
        return self._subcategory

    @subcategory.setter
    def subcategory(self, subcategory):
        """Sets the subcategory of this Payment.

        The subcategory of payment method used at the time of purchase.  This field is only set for certain payment categories, such as ACH and CREDIT_CARD. Most common values are listed in the enum.

        :param subcategory: The subcategory of this Payment.
        :type subcategory: str
        """
        allowed_values = ["CHECKING_PERSONAL", "CHECKING_BUSINESS", "VISA", "MASTER_CARD", "AMEX", "JCB", "UNIONPAY"]  # noqa: E501
        if subcategory not in allowed_values:
            raise ValueError(
                "Invalid value for `subcategory` ({0}), must be one of {1}"
                .format(subcategory, allowed_values)
            )

        self._subcategory = subcategory
