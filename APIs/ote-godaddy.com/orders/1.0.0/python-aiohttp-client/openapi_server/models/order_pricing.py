# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.line_item_pricing_tax_detail import LineItemPricingTaxDetail
from openapi_server.models.order_fee import OrderFee
from openapi_server import util


class OrderPricing(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, discount: int=None, fees: OrderFee=None, id: float=None, list: int=None, savings: int=None, subtotal: int=None, tax_details: List[LineItemPricingTaxDetail]=None, taxes: int=None, total: int=None):
        """OrderPricing - a model defined in OpenAPI

        :param discount: The discount of this OrderPricing.
        :param fees: The fees of this OrderPricing.
        :param id: The id of this OrderPricing.
        :param list: The list of this OrderPricing.
        :param savings: The savings of this OrderPricing.
        :param subtotal: The subtotal of this OrderPricing.
        :param tax_details: The tax_details of this OrderPricing.
        :param taxes: The taxes of this OrderPricing.
        :param total: The total of this OrderPricing.
        """
        self.openapi_types = {
            'discount': int,
            'fees': OrderFee,
            'id': float,
            'list': int,
            'savings': int,
            'subtotal': int,
            'tax_details': List[LineItemPricingTaxDetail],
            'taxes': int,
            'total': int
        }

        self.attribute_map = {
            'discount': 'discount',
            'fees': 'fees',
            'id': 'id',
            'list': 'list',
            'savings': 'savings',
            'subtotal': 'subtotal',
            'tax_details': 'taxDetails',
            'taxes': 'taxes',
            'total': 'total'
        }

        self._discount = discount
        self._fees = fees
        self._id = id
        self._list = list
        self._savings = savings
        self._subtotal = subtotal
        self._tax_details = tax_details
        self._taxes = taxes
        self._total = total

    @classmethod
    def from_dict(cls, dikt: dict) -> 'OrderPricing':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The OrderPricing of this OrderPricing.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def discount(self):
        """Gets the discount of this OrderPricing.

        Discount from promotional pricing

        :return: The discount of this OrderPricing.
        :rtype: int
        """
        return self._discount

    @discount.setter
    def discount(self, discount):
        """Sets the discount of this OrderPricing.

        Discount from promotional pricing

        :param discount: The discount of this OrderPricing.
        :type discount: int
        """
        if discount is None:
            raise ValueError("Invalid value for `discount`, must not be `None`")

        self._discount = discount

    @property
    def fees(self):
        """Gets the fees of this OrderPricing.


        :return: The fees of this OrderPricing.
        :rtype: OrderFee
        """
        return self._fees

    @fees.setter
    def fees(self, fees):
        """Sets the fees of this OrderPricing.


        :param fees: The fees of this OrderPricing.
        :type fees: OrderFee
        """
        if fees is None:
            raise ValueError("Invalid value for `fees`, must not be `None`")

        self._fees = fees

    @property
    def id(self):
        """Gets the id of this OrderPricing.


        :return: The id of this OrderPricing.
        :rtype: float
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this OrderPricing.


        :param id: The id of this OrderPricing.
        :type id: float
        """

        self._id = id

    @property
    def list(self):
        """Gets the list of this OrderPricing.

        Sum of list prices for the entire cart

        :return: The list of this OrderPricing.
        :rtype: int
        """
        return self._list

    @list.setter
    def list(self, list):
        """Sets the list of this OrderPricing.

        Sum of list prices for the entire cart

        :param list: The list of this OrderPricing.
        :type list: int
        """
        if list is None:
            raise ValueError("Invalid value for `list`, must not be `None`")

        self._list = list

    @property
    def savings(self):
        """Gets the savings of this OrderPricing.

        Savings off of list price <pre>`savings` = `list` - `subtotal`</pre>

        :return: The savings of this OrderPricing.
        :rtype: int
        """
        return self._savings

    @savings.setter
    def savings(self, savings):
        """Sets the savings of this OrderPricing.

        Savings off of list price <pre>`savings` = `list` - `subtotal`</pre>

        :param savings: The savings of this OrderPricing.
        :type savings: int
        """
        if savings is None:
            raise ValueError("Invalid value for `savings`, must not be `None`")

        self._savings = savings

    @property
    def subtotal(self):
        """Gets the subtotal of this OrderPricing.

        Price with `discount` and without taxes or fees

        :return: The subtotal of this OrderPricing.
        :rtype: int
        """
        return self._subtotal

    @subtotal.setter
    def subtotal(self, subtotal):
        """Sets the subtotal of this OrderPricing.

        Price with `discount` and without taxes or fees

        :param subtotal: The subtotal of this OrderPricing.
        :type subtotal: int
        """
        if subtotal is None:
            raise ValueError("Invalid value for `subtotal`, must not be `None`")

        self._subtotal = subtotal

    @property
    def tax_details(self):
        """Gets the tax_details of this OrderPricing.

        A collection of line item tax details

        :return: The tax_details of this OrderPricing.
        :rtype: List[LineItemPricingTaxDetail]
        """
        return self._tax_details

    @tax_details.setter
    def tax_details(self, tax_details):
        """Sets the tax_details of this OrderPricing.

        A collection of line item tax details

        :param tax_details: The tax_details of this OrderPricing.
        :type tax_details: List[LineItemPricingTaxDetail]
        """

        self._tax_details = tax_details

    @property
    def taxes(self):
        """Gets the taxes of this OrderPricing.

        Taxes for the entire cart

        :return: The taxes of this OrderPricing.
        :rtype: int
        """
        return self._taxes

    @taxes.setter
    def taxes(self, taxes):
        """Sets the taxes of this OrderPricing.

        Taxes for the entire cart

        :param taxes: The taxes of this OrderPricing.
        :type taxes: int
        """
        if taxes is None:
            raise ValueError("Invalid value for `taxes`, must not be `None`")

        self._taxes = taxes

    @property
    def total(self):
        """Gets the total of this OrderPricing.

        Price the customer pays <pre>`total` = `subtotal` + `taxes` + `fees.total`</pre>

        :return: The total of this OrderPricing.
        :rtype: int
        """
        return self._total

    @total.setter
    def total(self, total):
        """Sets the total of this OrderPricing.

        Price the customer pays <pre>`total` = `subtotal` + `taxes` + `fees.total`</pre>

        :param total: The total of this OrderPricing.
        :type total: int
        """
        if total is None:
            raise ValueError("Invalid value for `total`, must not be `None`")

        self._total = total
