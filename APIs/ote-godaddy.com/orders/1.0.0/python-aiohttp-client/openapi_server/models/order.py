# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.bill_to import BillTo
from openapi_server.models.line_item import LineItem
from openapi_server.models.order_pricing import OrderPricing
from openapi_server.models.payment import Payment
from openapi_server import util


class Order(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, bill_to: BillTo=None, created_at: str=None, currency: str=None, items: List[LineItem]=None, order_id: str=None, parent_order_id: str=None, payments: List[Payment]=None, pricing: OrderPricing=None):
        """Order - a model defined in OpenAPI

        :param bill_to: The bill_to of this Order.
        :param created_at: The created_at of this Order.
        :param currency: The currency of this Order.
        :param items: The items of this Order.
        :param order_id: The order_id of this Order.
        :param parent_order_id: The parent_order_id of this Order.
        :param payments: The payments of this Order.
        :param pricing: The pricing of this Order.
        """
        self.openapi_types = {
            'bill_to': BillTo,
            'created_at': str,
            'currency': str,
            'items': List[LineItem],
            'order_id': str,
            'parent_order_id': str,
            'payments': List[Payment],
            'pricing': OrderPricing
        }

        self.attribute_map = {
            'bill_to': 'billTo',
            'created_at': 'createdAt',
            'currency': 'currency',
            'items': 'items',
            'order_id': 'orderId',
            'parent_order_id': 'parentOrderId',
            'payments': 'payments',
            'pricing': 'pricing'
        }

        self._bill_to = bill_to
        self._created_at = created_at
        self._currency = currency
        self._items = items
        self._order_id = order_id
        self._parent_order_id = parent_order_id
        self._payments = payments
        self._pricing = pricing

    @classmethod
    def from_dict(cls, dikt: dict) -> 'Order':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Order of this Order.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def bill_to(self):
        """Gets the bill_to of this Order.


        :return: The bill_to of this Order.
        :rtype: BillTo
        """
        return self._bill_to

    @bill_to.setter
    def bill_to(self, bill_to):
        """Sets the bill_to of this Order.


        :param bill_to: The bill_to of this Order.
        :type bill_to: BillTo
        """
        if bill_to is None:
            raise ValueError("Invalid value for `bill_to`, must not be `None`")

        self._bill_to = bill_to

    @property
    def created_at(self):
        """Gets the created_at of this Order.

        Date and time when the current order is created on

        :return: The created_at of this Order.
        :rtype: str
        """
        return self._created_at

    @created_at.setter
    def created_at(self, created_at):
        """Sets the created_at of this Order.

        Date and time when the current order is created on

        :param created_at: The created_at of this Order.
        :type created_at: str
        """
        if created_at is None:
            raise ValueError("Invalid value for `created_at`, must not be `None`")

        self._created_at = created_at

    @property
    def currency(self):
        """Gets the currency of this Order.

        Currency in which the order has been placed

        :return: The currency of this Order.
        :rtype: str
        """
        return self._currency

    @currency.setter
    def currency(self, currency):
        """Sets the currency of this Order.

        Currency in which the order has been placed

        :param currency: The currency of this Order.
        :type currency: str
        """
        if currency is None:
            raise ValueError("Invalid value for `currency`, must not be `None`")

        self._currency = currency

    @property
    def items(self):
        """Gets the items of this Order.


        :return: The items of this Order.
        :rtype: List[LineItem]
        """
        return self._items

    @items.setter
    def items(self, items):
        """Sets the items of this Order.


        :param items: The items of this Order.
        :type items: List[LineItem]
        """
        if items is None:
            raise ValueError("Invalid value for `items`, must not be `None`")

        self._items = items

    @property
    def order_id(self):
        """Gets the order_id of this Order.

        Unique identifier of current order

        :return: The order_id of this Order.
        :rtype: str
        """
        return self._order_id

    @order_id.setter
    def order_id(self, order_id):
        """Sets the order_id of this Order.

        Unique identifier of current order

        :param order_id: The order_id of this Order.
        :type order_id: str
        """
        if order_id is None:
            raise ValueError("Invalid value for `order_id`, must not be `None`")

        self._order_id = order_id

    @property
    def parent_order_id(self):
        """Gets the parent_order_id of this Order.

        Unique identifier of the parent order. All refund/chargeback orders are tied to the original order. The orginal order's `orderId` is the `parentOrderId` of refund/chargeback orders

        :return: The parent_order_id of this Order.
        :rtype: str
        """
        return self._parent_order_id

    @parent_order_id.setter
    def parent_order_id(self, parent_order_id):
        """Sets the parent_order_id of this Order.

        Unique identifier of the parent order. All refund/chargeback orders are tied to the original order. The orginal order's `orderId` is the `parentOrderId` of refund/chargeback orders

        :param parent_order_id: The parent_order_id of this Order.
        :type parent_order_id: str
        """

        self._parent_order_id = parent_order_id

    @property
    def payments(self):
        """Gets the payments of this Order.


        :return: The payments of this Order.
        :rtype: List[Payment]
        """
        return self._payments

    @payments.setter
    def payments(self, payments):
        """Sets the payments of this Order.


        :param payments: The payments of this Order.
        :type payments: List[Payment]
        """
        if payments is None:
            raise ValueError("Invalid value for `payments`, must not be `None`")

        self._payments = payments

    @property
    def pricing(self):
        """Gets the pricing of this Order.


        :return: The pricing of this Order.
        :rtype: OrderPricing
        """
        return self._pricing

    @pricing.setter
    def pricing(self, pricing):
        """Sets the pricing of this Order.


        :param pricing: The pricing of this Order.
        :type pricing: OrderPricing
        """
        if pricing is None:
            raise ValueError("Invalid value for `pricing`, must not be `None`")

        self._pricing = pricing
