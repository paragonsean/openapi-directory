# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.address import Address
from openapi_server import util


class Contact(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, address_mailing: Address=None, email: str=None, fax: str=None, job_title: str=None, name_first: str=None, name_last: str=None, name_middle: str=None, organization: str=None, phone: str=None):
        """Contact - a model defined in OpenAPI

        :param address_mailing: The address_mailing of this Contact.
        :param email: The email of this Contact.
        :param fax: The fax of this Contact.
        :param job_title: The job_title of this Contact.
        :param name_first: The name_first of this Contact.
        :param name_last: The name_last of this Contact.
        :param name_middle: The name_middle of this Contact.
        :param organization: The organization of this Contact.
        :param phone: The phone of this Contact.
        """
        self.openapi_types = {
            'address_mailing': Address,
            'email': str,
            'fax': str,
            'job_title': str,
            'name_first': str,
            'name_last': str,
            'name_middle': str,
            'organization': str,
            'phone': str
        }

        self.attribute_map = {
            'address_mailing': 'addressMailing',
            'email': 'email',
            'fax': 'fax',
            'job_title': 'jobTitle',
            'name_first': 'nameFirst',
            'name_last': 'nameLast',
            'name_middle': 'nameMiddle',
            'organization': 'organization',
            'phone': 'phone'
        }

        self._address_mailing = address_mailing
        self._email = email
        self._fax = fax
        self._job_title = job_title
        self._name_first = name_first
        self._name_last = name_last
        self._name_middle = name_middle
        self._organization = organization
        self._phone = phone

    @classmethod
    def from_dict(cls, dikt: dict) -> 'Contact':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Contact of this Contact.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def address_mailing(self):
        """Gets the address_mailing of this Contact.


        :return: The address_mailing of this Contact.
        :rtype: Address
        """
        return self._address_mailing

    @address_mailing.setter
    def address_mailing(self, address_mailing):
        """Sets the address_mailing of this Contact.


        :param address_mailing: The address_mailing of this Contact.
        :type address_mailing: Address
        """
        if address_mailing is None:
            raise ValueError("Invalid value for `address_mailing`, must not be `None`")

        self._address_mailing = address_mailing

    @property
    def email(self):
        """Gets the email of this Contact.


        :return: The email of this Contact.
        :rtype: str
        """
        return self._email

    @email.setter
    def email(self, email):
        """Sets the email of this Contact.


        :param email: The email of this Contact.
        :type email: str
        """
        if email is None:
            raise ValueError("Invalid value for `email`, must not be `None`")

        self._email = email

    @property
    def fax(self):
        """Gets the fax of this Contact.


        :return: The fax of this Contact.
        :rtype: str
        """
        return self._fax

    @fax.setter
    def fax(self, fax):
        """Sets the fax of this Contact.


        :param fax: The fax of this Contact.
        :type fax: str
        """

        self._fax = fax

    @property
    def job_title(self):
        """Gets the job_title of this Contact.


        :return: The job_title of this Contact.
        :rtype: str
        """
        return self._job_title

    @job_title.setter
    def job_title(self, job_title):
        """Sets the job_title of this Contact.


        :param job_title: The job_title of this Contact.
        :type job_title: str
        """

        self._job_title = job_title

    @property
    def name_first(self):
        """Gets the name_first of this Contact.


        :return: The name_first of this Contact.
        :rtype: str
        """
        return self._name_first

    @name_first.setter
    def name_first(self, name_first):
        """Sets the name_first of this Contact.


        :param name_first: The name_first of this Contact.
        :type name_first: str
        """
        if name_first is None:
            raise ValueError("Invalid value for `name_first`, must not be `None`")

        self._name_first = name_first

    @property
    def name_last(self):
        """Gets the name_last of this Contact.


        :return: The name_last of this Contact.
        :rtype: str
        """
        return self._name_last

    @name_last.setter
    def name_last(self, name_last):
        """Sets the name_last of this Contact.


        :param name_last: The name_last of this Contact.
        :type name_last: str
        """
        if name_last is None:
            raise ValueError("Invalid value for `name_last`, must not be `None`")

        self._name_last = name_last

    @property
    def name_middle(self):
        """Gets the name_middle of this Contact.


        :return: The name_middle of this Contact.
        :rtype: str
        """
        return self._name_middle

    @name_middle.setter
    def name_middle(self, name_middle):
        """Sets the name_middle of this Contact.


        :param name_middle: The name_middle of this Contact.
        :type name_middle: str
        """

        self._name_middle = name_middle

    @property
    def organization(self):
        """Gets the organization of this Contact.


        :return: The organization of this Contact.
        :rtype: str
        """
        return self._organization

    @organization.setter
    def organization(self, organization):
        """Sets the organization of this Contact.


        :param organization: The organization of this Contact.
        :type organization: str
        """

        self._organization = organization

    @property
    def phone(self):
        """Gets the phone of this Contact.


        :return: The phone of this Contact.
        :rtype: str
        """
        return self._phone

    @phone.setter
    def phone(self, phone):
        """Sets the phone of this Contact.


        :param phone: The phone of this Contact.
        :type phone: str
        """
        if phone is None:
            raise ValueError("Invalid value for `phone`, must not be `None`")

        self._phone = phone
