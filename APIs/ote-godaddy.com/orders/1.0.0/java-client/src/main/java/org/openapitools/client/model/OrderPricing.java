/*
 * 
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.LineItemPricingTaxDetail;
import org.openapitools.client.model.OrderFee;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * OrderPricing
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:00:15.750898-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class OrderPricing {
  public static final String SERIALIZED_NAME_DISCOUNT = "discount";
  @SerializedName(SERIALIZED_NAME_DISCOUNT)
  private Integer discount;

  public static final String SERIALIZED_NAME_FEES = "fees";
  @SerializedName(SERIALIZED_NAME_FEES)
  private OrderFee fees;

  public static final String SERIALIZED_NAME_ID = "id";
  @SerializedName(SERIALIZED_NAME_ID)
  private Double id;

  public static final String SERIALIZED_NAME_LIST = "list";
  @SerializedName(SERIALIZED_NAME_LIST)
  private Integer _list;

  public static final String SERIALIZED_NAME_SAVINGS = "savings";
  @SerializedName(SERIALIZED_NAME_SAVINGS)
  private Integer savings;

  public static final String SERIALIZED_NAME_SUBTOTAL = "subtotal";
  @SerializedName(SERIALIZED_NAME_SUBTOTAL)
  private Integer subtotal;

  public static final String SERIALIZED_NAME_TAX_DETAILS = "taxDetails";
  @SerializedName(SERIALIZED_NAME_TAX_DETAILS)
  private List<LineItemPricingTaxDetail> taxDetails = new ArrayList<>();

  public static final String SERIALIZED_NAME_TAXES = "taxes";
  @SerializedName(SERIALIZED_NAME_TAXES)
  private Integer taxes;

  public static final String SERIALIZED_NAME_TOTAL = "total";
  @SerializedName(SERIALIZED_NAME_TOTAL)
  private Integer total;

  public OrderPricing() {
  }

  public OrderPricing discount(Integer discount) {
    this.discount = discount;
    return this;
  }

  /**
   * Discount from promotional pricing
   * @return discount
   */
  @javax.annotation.Nonnull
  public Integer getDiscount() {
    return discount;
  }

  public void setDiscount(Integer discount) {
    this.discount = discount;
  }


  public OrderPricing fees(OrderFee fees) {
    this.fees = fees;
    return this;
  }

  /**
   * Get fees
   * @return fees
   */
  @javax.annotation.Nonnull
  public OrderFee getFees() {
    return fees;
  }

  public void setFees(OrderFee fees) {
    this.fees = fees;
  }


  public OrderPricing id(Double id) {
    this.id = id;
    return this;
  }

  /**
   * Get id
   * @return id
   */
  @javax.annotation.Nullable
  public Double getId() {
    return id;
  }

  public void setId(Double id) {
    this.id = id;
  }


  public OrderPricing _list(Integer _list) {
    this._list = _list;
    return this;
  }

  /**
   * Sum of list prices for the entire cart
   * @return _list
   */
  @javax.annotation.Nonnull
  public Integer getList() {
    return _list;
  }

  public void setList(Integer _list) {
    this._list = _list;
  }


  public OrderPricing savings(Integer savings) {
    this.savings = savings;
    return this;
  }

  /**
   * Savings off of list price &lt;pre&gt;&#x60;savings&#x60; &#x3D; &#x60;list&#x60; - &#x60;subtotal&#x60;&lt;/pre&gt;
   * @return savings
   */
  @javax.annotation.Nonnull
  public Integer getSavings() {
    return savings;
  }

  public void setSavings(Integer savings) {
    this.savings = savings;
  }


  public OrderPricing subtotal(Integer subtotal) {
    this.subtotal = subtotal;
    return this;
  }

  /**
   * Price with &#x60;discount&#x60; and without taxes or fees
   * @return subtotal
   */
  @javax.annotation.Nonnull
  public Integer getSubtotal() {
    return subtotal;
  }

  public void setSubtotal(Integer subtotal) {
    this.subtotal = subtotal;
  }


  public OrderPricing taxDetails(List<LineItemPricingTaxDetail> taxDetails) {
    this.taxDetails = taxDetails;
    return this;
  }

  public OrderPricing addTaxDetailsItem(LineItemPricingTaxDetail taxDetailsItem) {
    if (this.taxDetails == null) {
      this.taxDetails = new ArrayList<>();
    }
    this.taxDetails.add(taxDetailsItem);
    return this;
  }

  /**
   * A collection of line item tax details
   * @return taxDetails
   */
  @javax.annotation.Nullable
  public List<LineItemPricingTaxDetail> getTaxDetails() {
    return taxDetails;
  }

  public void setTaxDetails(List<LineItemPricingTaxDetail> taxDetails) {
    this.taxDetails = taxDetails;
  }


  public OrderPricing taxes(Integer taxes) {
    this.taxes = taxes;
    return this;
  }

  /**
   * Taxes for the entire cart
   * @return taxes
   */
  @javax.annotation.Nonnull
  public Integer getTaxes() {
    return taxes;
  }

  public void setTaxes(Integer taxes) {
    this.taxes = taxes;
  }


  public OrderPricing total(Integer total) {
    this.total = total;
    return this;
  }

  /**
   * Price the customer pays &lt;pre&gt;&#x60;total&#x60; &#x3D; &#x60;subtotal&#x60; + &#x60;taxes&#x60; + &#x60;fees.total&#x60;&lt;/pre&gt;
   * @return total
   */
  @javax.annotation.Nonnull
  public Integer getTotal() {
    return total;
  }

  public void setTotal(Integer total) {
    this.total = total;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    OrderPricing orderPricing = (OrderPricing) o;
    return Objects.equals(this.discount, orderPricing.discount) &&
        Objects.equals(this.fees, orderPricing.fees) &&
        Objects.equals(this.id, orderPricing.id) &&
        Objects.equals(this._list, orderPricing._list) &&
        Objects.equals(this.savings, orderPricing.savings) &&
        Objects.equals(this.subtotal, orderPricing.subtotal) &&
        Objects.equals(this.taxDetails, orderPricing.taxDetails) &&
        Objects.equals(this.taxes, orderPricing.taxes) &&
        Objects.equals(this.total, orderPricing.total);
  }

  @Override
  public int hashCode() {
    return Objects.hash(discount, fees, id, _list, savings, subtotal, taxDetails, taxes, total);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class OrderPricing {\n");
    sb.append("    discount: ").append(toIndentedString(discount)).append("\n");
    sb.append("    fees: ").append(toIndentedString(fees)).append("\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    _list: ").append(toIndentedString(_list)).append("\n");
    sb.append("    savings: ").append(toIndentedString(savings)).append("\n");
    sb.append("    subtotal: ").append(toIndentedString(subtotal)).append("\n");
    sb.append("    taxDetails: ").append(toIndentedString(taxDetails)).append("\n");
    sb.append("    taxes: ").append(toIndentedString(taxes)).append("\n");
    sb.append("    total: ").append(toIndentedString(total)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("discount");
    openapiFields.add("fees");
    openapiFields.add("id");
    openapiFields.add("list");
    openapiFields.add("savings");
    openapiFields.add("subtotal");
    openapiFields.add("taxDetails");
    openapiFields.add("taxes");
    openapiFields.add("total");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("discount");
    openapiRequiredFields.add("fees");
    openapiRequiredFields.add("list");
    openapiRequiredFields.add("savings");
    openapiRequiredFields.add("subtotal");
    openapiRequiredFields.add("taxes");
    openapiRequiredFields.add("total");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to OrderPricing
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!OrderPricing.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in OrderPricing is not found in the empty JSON string", OrderPricing.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!OrderPricing.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `OrderPricing` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : OrderPricing.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the required field `fees`
      OrderFee.validateJsonElement(jsonObj.get("fees"));
      if (jsonObj.get("taxDetails") != null && !jsonObj.get("taxDetails").isJsonNull()) {
        JsonArray jsonArraytaxDetails = jsonObj.getAsJsonArray("taxDetails");
        if (jsonArraytaxDetails != null) {
          // ensure the json data is an array
          if (!jsonObj.get("taxDetails").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `taxDetails` to be an array in the JSON string but got `%s`", jsonObj.get("taxDetails").toString()));
          }

          // validate the optional field `taxDetails` (array)
          for (int i = 0; i < jsonArraytaxDetails.size(); i++) {
            LineItemPricingTaxDetail.validateJsonElement(jsonArraytaxDetails.get(i));
          };
        }
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!OrderPricing.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'OrderPricing' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<OrderPricing> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(OrderPricing.class));

       return (TypeAdapter<T>) new TypeAdapter<OrderPricing>() {
           @Override
           public void write(JsonWriter out, OrderPricing value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public OrderPricing read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of OrderPricing given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of OrderPricing
   * @throws IOException if the JSON string is invalid with respect to OrderPricing
   */
  public static OrderPricing fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, OrderPricing.class);
  }

  /**
   * Convert an instance of OrderPricing to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

