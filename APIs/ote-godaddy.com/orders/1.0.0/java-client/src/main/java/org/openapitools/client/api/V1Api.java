/*
 * 
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiCallback;
import org.openapitools.client.ApiClient;
import org.openapitools.client.ApiException;
import org.openapitools.client.ApiResponse;
import org.openapitools.client.Configuration;
import org.openapitools.client.Pair;
import org.openapitools.client.ProgressRequestBody;
import org.openapitools.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import org.openapitools.client.model.Error;
import org.openapitools.client.model.ErrorLimit;
import org.openapitools.client.model.Order;
import org.openapitools.client.model.OrderList;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class V1Api {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public V1Api() {
        this(Configuration.getDefaultApiClient());
    }

    public V1Api(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for callList
     * @param periodStart Start of range indicating what time-frame should be returned. Inclusive (optional)
     * @param periodEnd End of range indicating what time-frame should be returned. Inclusive (optional)
     * @param domain Domain name to use as the filter of results (optional)
     * @param productGroupId Product group id to use as the filter of results (optional)
     * @param paymentProfileId Payment profile id to use as the filter of results (optional)
     * @param parentOrderId Parent order id to use as the filter of results (optional)
     * @param offset Number of results to skip for pagination (optional, default to 0)
     * @param limit Maximum number of items to return (optional, default to 25)
     * @param sort Property name that will be used to sort results. &#39;-&#39; indicates descending (optional, default to -createdAt)
     * @param xShopperId Shopper ID to be operated on, if different from JWT&lt;br/&gt;&lt;b&gt;Reseller subaccounts are not supported&lt;/b&gt; (optional)
     * @param xMarketId Unique identifier of the Market in which the request is happening (optional, default to en-US)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Request was successful </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Request was malformed </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Authentication info not sent or invalid </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Authenticated user is not allowed access </td><td>  -  </td></tr>
        <tr><td> 429 </td><td> Too many requests received within interval </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal server error </td><td>  -  </td></tr>
        <tr><td> 504 </td><td> Gateway timeout </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call callListCall(String periodStart, String periodEnd, String domain, Integer productGroupId, Integer paymentProfileId, String parentOrderId, Integer offset, Integer limit, String sort, String xShopperId, String xMarketId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v1/orders";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (periodStart != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("periodStart", periodStart));
        }

        if (periodEnd != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("periodEnd", periodEnd));
        }

        if (domain != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("domain", domain));
        }

        if (productGroupId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("productGroupId", productGroupId));
        }

        if (paymentProfileId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("paymentProfileId", paymentProfileId));
        }

        if (parentOrderId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("parentOrderId", parentOrderId));
        }

        if (offset != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("offset", offset));
        }

        if (limit != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("limit", limit));
        }

        if (sort != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("sort", sort));
        }

        if (xShopperId != null) {
            localVarHeaderParams.put("X-Shopper-Id", localVarApiClient.parameterToString(xShopperId));
        }

        if (xMarketId != null) {
            localVarHeaderParams.put("X-Market-Id", localVarApiClient.parameterToString(xMarketId));
        }

        final String[] localVarAccepts = {
            "application/javascript",
            "application/json",
            "application/xml",
            "text/javascript",
            "text/xml"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call callListValidateBeforeCall(String periodStart, String periodEnd, String domain, Integer productGroupId, Integer paymentProfileId, String parentOrderId, Integer offset, Integer limit, String sort, String xShopperId, String xMarketId, final ApiCallback _callback) throws ApiException {
        return callListCall(periodStart, periodEnd, domain, productGroupId, paymentProfileId, parentOrderId, offset, limit, sort, xShopperId, xMarketId, _callback);

    }

    /**
     * Retrieve a list of orders for the authenticated shopper. Only one filter may be used at a time
     * &lt;strong&gt;API Resellers&lt;/strong&gt;&lt;ul&gt;&lt;li&gt;This endpoint does not support subaccounts and therefore API Resellers should not supply an X-Shopper-Id header&lt;/li&gt;&lt;/ul&gt;
     * @param periodStart Start of range indicating what time-frame should be returned. Inclusive (optional)
     * @param periodEnd End of range indicating what time-frame should be returned. Inclusive (optional)
     * @param domain Domain name to use as the filter of results (optional)
     * @param productGroupId Product group id to use as the filter of results (optional)
     * @param paymentProfileId Payment profile id to use as the filter of results (optional)
     * @param parentOrderId Parent order id to use as the filter of results (optional)
     * @param offset Number of results to skip for pagination (optional, default to 0)
     * @param limit Maximum number of items to return (optional, default to 25)
     * @param sort Property name that will be used to sort results. &#39;-&#39; indicates descending (optional, default to -createdAt)
     * @param xShopperId Shopper ID to be operated on, if different from JWT&lt;br/&gt;&lt;b&gt;Reseller subaccounts are not supported&lt;/b&gt; (optional)
     * @param xMarketId Unique identifier of the Market in which the request is happening (optional, default to en-US)
     * @return OrderList
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Request was successful </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Request was malformed </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Authentication info not sent or invalid </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Authenticated user is not allowed access </td><td>  -  </td></tr>
        <tr><td> 429 </td><td> Too many requests received within interval </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal server error </td><td>  -  </td></tr>
        <tr><td> 504 </td><td> Gateway timeout </td><td>  -  </td></tr>
     </table>
     */
    public OrderList callList(String periodStart, String periodEnd, String domain, Integer productGroupId, Integer paymentProfileId, String parentOrderId, Integer offset, Integer limit, String sort, String xShopperId, String xMarketId) throws ApiException {
        ApiResponse<OrderList> localVarResp = callListWithHttpInfo(periodStart, periodEnd, domain, productGroupId, paymentProfileId, parentOrderId, offset, limit, sort, xShopperId, xMarketId);
        return localVarResp.getData();
    }

    /**
     * Retrieve a list of orders for the authenticated shopper. Only one filter may be used at a time
     * &lt;strong&gt;API Resellers&lt;/strong&gt;&lt;ul&gt;&lt;li&gt;This endpoint does not support subaccounts and therefore API Resellers should not supply an X-Shopper-Id header&lt;/li&gt;&lt;/ul&gt;
     * @param periodStart Start of range indicating what time-frame should be returned. Inclusive (optional)
     * @param periodEnd End of range indicating what time-frame should be returned. Inclusive (optional)
     * @param domain Domain name to use as the filter of results (optional)
     * @param productGroupId Product group id to use as the filter of results (optional)
     * @param paymentProfileId Payment profile id to use as the filter of results (optional)
     * @param parentOrderId Parent order id to use as the filter of results (optional)
     * @param offset Number of results to skip for pagination (optional, default to 0)
     * @param limit Maximum number of items to return (optional, default to 25)
     * @param sort Property name that will be used to sort results. &#39;-&#39; indicates descending (optional, default to -createdAt)
     * @param xShopperId Shopper ID to be operated on, if different from JWT&lt;br/&gt;&lt;b&gt;Reseller subaccounts are not supported&lt;/b&gt; (optional)
     * @param xMarketId Unique identifier of the Market in which the request is happening (optional, default to en-US)
     * @return ApiResponse&lt;OrderList&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Request was successful </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Request was malformed </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Authentication info not sent or invalid </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Authenticated user is not allowed access </td><td>  -  </td></tr>
        <tr><td> 429 </td><td> Too many requests received within interval </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal server error </td><td>  -  </td></tr>
        <tr><td> 504 </td><td> Gateway timeout </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<OrderList> callListWithHttpInfo(String periodStart, String periodEnd, String domain, Integer productGroupId, Integer paymentProfileId, String parentOrderId, Integer offset, Integer limit, String sort, String xShopperId, String xMarketId) throws ApiException {
        okhttp3.Call localVarCall = callListValidateBeforeCall(periodStart, periodEnd, domain, productGroupId, paymentProfileId, parentOrderId, offset, limit, sort, xShopperId, xMarketId, null);
        Type localVarReturnType = new TypeToken<OrderList>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Retrieve a list of orders for the authenticated shopper. Only one filter may be used at a time (asynchronously)
     * &lt;strong&gt;API Resellers&lt;/strong&gt;&lt;ul&gt;&lt;li&gt;This endpoint does not support subaccounts and therefore API Resellers should not supply an X-Shopper-Id header&lt;/li&gt;&lt;/ul&gt;
     * @param periodStart Start of range indicating what time-frame should be returned. Inclusive (optional)
     * @param periodEnd End of range indicating what time-frame should be returned. Inclusive (optional)
     * @param domain Domain name to use as the filter of results (optional)
     * @param productGroupId Product group id to use as the filter of results (optional)
     * @param paymentProfileId Payment profile id to use as the filter of results (optional)
     * @param parentOrderId Parent order id to use as the filter of results (optional)
     * @param offset Number of results to skip for pagination (optional, default to 0)
     * @param limit Maximum number of items to return (optional, default to 25)
     * @param sort Property name that will be used to sort results. &#39;-&#39; indicates descending (optional, default to -createdAt)
     * @param xShopperId Shopper ID to be operated on, if different from JWT&lt;br/&gt;&lt;b&gt;Reseller subaccounts are not supported&lt;/b&gt; (optional)
     * @param xMarketId Unique identifier of the Market in which the request is happening (optional, default to en-US)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Request was successful </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Request was malformed </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Authentication info not sent or invalid </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Authenticated user is not allowed access </td><td>  -  </td></tr>
        <tr><td> 429 </td><td> Too many requests received within interval </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal server error </td><td>  -  </td></tr>
        <tr><td> 504 </td><td> Gateway timeout </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call callListAsync(String periodStart, String periodEnd, String domain, Integer productGroupId, Integer paymentProfileId, String parentOrderId, Integer offset, Integer limit, String sort, String xShopperId, String xMarketId, final ApiCallback<OrderList> _callback) throws ApiException {

        okhttp3.Call localVarCall = callListValidateBeforeCall(periodStart, periodEnd, domain, productGroupId, paymentProfileId, parentOrderId, offset, limit, sort, xShopperId, xMarketId, _callback);
        Type localVarReturnType = new TypeToken<OrderList>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for get
     * @param orderId Order id whose details are to be retrieved (required)
     * @param xShopperId Shopper ID to be operated on, if different from JWT&lt;br/&gt;&lt;b&gt;Reseller subaccounts are not supported&lt;/b&gt; (optional)
     * @param xMarketId Unique identifier of the Market in which the request is happening (optional, default to en-US)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Request was successful </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Request was malformed </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Authentication info not sent or invalid </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Authenticated user is not allowed access </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
        <tr><td> 429 </td><td> Too many requests received within interval </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal server error </td><td>  -  </td></tr>
        <tr><td> 504 </td><td> Gateway timeout </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getCall(String orderId, String xShopperId, String xMarketId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v1/orders/{orderId}"
            .replace("{" + "orderId" + "}", localVarApiClient.escapeString(orderId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (xShopperId != null) {
            localVarHeaderParams.put("X-Shopper-Id", localVarApiClient.parameterToString(xShopperId));
        }

        if (xMarketId != null) {
            localVarHeaderParams.put("X-Market-Id", localVarApiClient.parameterToString(xMarketId));
        }

        final String[] localVarAccepts = {
            "application/javascript",
            "application/json",
            "application/xml",
            "text/javascript",
            "text/xml"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getValidateBeforeCall(String orderId, String xShopperId, String xMarketId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'orderId' is set
        if (orderId == null) {
            throw new ApiException("Missing the required parameter 'orderId' when calling get(Async)");
        }

        return getCall(orderId, xShopperId, xMarketId, _callback);

    }

    /**
     * Retrieve details for specified order
     * &lt;strong&gt;API Resellers&lt;/strong&gt;&lt;ul&gt;&lt;li&gt;This endpoint does not support subaccounts and therefore API Resellers should not supply an X-Shopper-Id header&lt;/li&gt;&lt;/ul&gt;
     * @param orderId Order id whose details are to be retrieved (required)
     * @param xShopperId Shopper ID to be operated on, if different from JWT&lt;br/&gt;&lt;b&gt;Reseller subaccounts are not supported&lt;/b&gt; (optional)
     * @param xMarketId Unique identifier of the Market in which the request is happening (optional, default to en-US)
     * @return Order
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Request was successful </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Request was malformed </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Authentication info not sent or invalid </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Authenticated user is not allowed access </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
        <tr><td> 429 </td><td> Too many requests received within interval </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal server error </td><td>  -  </td></tr>
        <tr><td> 504 </td><td> Gateway timeout </td><td>  -  </td></tr>
     </table>
     */
    public Order get(String orderId, String xShopperId, String xMarketId) throws ApiException {
        ApiResponse<Order> localVarResp = getWithHttpInfo(orderId, xShopperId, xMarketId);
        return localVarResp.getData();
    }

    /**
     * Retrieve details for specified order
     * &lt;strong&gt;API Resellers&lt;/strong&gt;&lt;ul&gt;&lt;li&gt;This endpoint does not support subaccounts and therefore API Resellers should not supply an X-Shopper-Id header&lt;/li&gt;&lt;/ul&gt;
     * @param orderId Order id whose details are to be retrieved (required)
     * @param xShopperId Shopper ID to be operated on, if different from JWT&lt;br/&gt;&lt;b&gt;Reseller subaccounts are not supported&lt;/b&gt; (optional)
     * @param xMarketId Unique identifier of the Market in which the request is happening (optional, default to en-US)
     * @return ApiResponse&lt;Order&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Request was successful </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Request was malformed </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Authentication info not sent or invalid </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Authenticated user is not allowed access </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
        <tr><td> 429 </td><td> Too many requests received within interval </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal server error </td><td>  -  </td></tr>
        <tr><td> 504 </td><td> Gateway timeout </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Order> getWithHttpInfo(String orderId, String xShopperId, String xMarketId) throws ApiException {
        okhttp3.Call localVarCall = getValidateBeforeCall(orderId, xShopperId, xMarketId, null);
        Type localVarReturnType = new TypeToken<Order>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Retrieve details for specified order (asynchronously)
     * &lt;strong&gt;API Resellers&lt;/strong&gt;&lt;ul&gt;&lt;li&gt;This endpoint does not support subaccounts and therefore API Resellers should not supply an X-Shopper-Id header&lt;/li&gt;&lt;/ul&gt;
     * @param orderId Order id whose details are to be retrieved (required)
     * @param xShopperId Shopper ID to be operated on, if different from JWT&lt;br/&gt;&lt;b&gt;Reseller subaccounts are not supported&lt;/b&gt; (optional)
     * @param xMarketId Unique identifier of the Market in which the request is happening (optional, default to en-US)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Request was successful </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Request was malformed </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Authentication info not sent or invalid </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Authenticated user is not allowed access </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
        <tr><td> 429 </td><td> Too many requests received within interval </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal server error </td><td>  -  </td></tr>
        <tr><td> 504 </td><td> Gateway timeout </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getAsync(String orderId, String xShopperId, String xMarketId, final ApiCallback<Order> _callback) throws ApiException {

        okhttp3.Call localVarCall = getValidateBeforeCall(orderId, xShopperId, xMarketId, _callback);
        Type localVarReturnType = new TypeToken<Order>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
