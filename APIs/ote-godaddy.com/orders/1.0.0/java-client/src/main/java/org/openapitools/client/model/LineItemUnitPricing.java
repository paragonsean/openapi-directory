/*
 * 
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import org.openapitools.client.model.OrderFee;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * LineItemUnitPricing
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:00:15.750898-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class LineItemUnitPricing {
  public static final String SERIALIZED_NAME_DISCOUNT = "discount";
  @SerializedName(SERIALIZED_NAME_DISCOUNT)
  private Integer discount;

  public static final String SERIALIZED_NAME_FEES = "fees";
  @SerializedName(SERIALIZED_NAME_FEES)
  private OrderFee fees;

  public static final String SERIALIZED_NAME_LIST = "list";
  @SerializedName(SERIALIZED_NAME_LIST)
  private Integer _list;

  public static final String SERIALIZED_NAME_SALE = "sale";
  @SerializedName(SERIALIZED_NAME_SALE)
  private Integer sale;

  public static final String SERIALIZED_NAME_SAVINGS = "savings";
  @SerializedName(SERIALIZED_NAME_SAVINGS)
  private Integer savings;

  public static final String SERIALIZED_NAME_TAXES = "taxes";
  @SerializedName(SERIALIZED_NAME_TAXES)
  private Integer taxes;

  public LineItemUnitPricing() {
  }

  public LineItemUnitPricing discount(Integer discount) {
    this.discount = discount;
    return this;
  }

  /**
   * Discount without consideration of &#x60;quantity&#x60; and &#x60;period&#x60;
   * @return discount
   */
  @javax.annotation.Nonnull
  public Integer getDiscount() {
    return discount;
  }

  public void setDiscount(Integer discount) {
    this.discount = discount;
  }


  public LineItemUnitPricing fees(OrderFee fees) {
    this.fees = fees;
    return this;
  }

  /**
   * Get fees
   * @return fees
   */
  @javax.annotation.Nonnull
  public OrderFee getFees() {
    return fees;
  }

  public void setFees(OrderFee fees) {
    this.fees = fees;
  }


  public LineItemUnitPricing _list(Integer _list) {
    this._list = _list;
    return this;
  }

  /**
   * List price without consideration of &#x60;quantity&#x60; and &#x60;period&#x60;
   * @return _list
   */
  @javax.annotation.Nonnull
  public Integer getList() {
    return _list;
  }

  public void setList(Integer _list) {
    this._list = _list;
  }


  public LineItemUnitPricing sale(Integer sale) {
    this.sale = sale;
    return this;
  }

  /**
   * Sale price without consideration of &#x60;quantity&#x60; and &#x60;period&#x60;
   * @return sale
   */
  @javax.annotation.Nonnull
  public Integer getSale() {
    return sale;
  }

  public void setSale(Integer sale) {
    this.sale = sale;
  }


  public LineItemUnitPricing savings(Integer savings) {
    this.savings = savings;
    return this;
  }

  /**
   * Savings without consideration of &#x60;quantity&#x60; and &#x60;period&#x60;
   * @return savings
   */
  @javax.annotation.Nonnull
  public Integer getSavings() {
    return savings;
  }

  public void setSavings(Integer savings) {
    this.savings = savings;
  }


  public LineItemUnitPricing taxes(Integer taxes) {
    this.taxes = taxes;
    return this;
  }

  /**
   * Taxes without consideration of &#x60;quantity&#x60; and &#x60;period&#x60;
   * @return taxes
   */
  @javax.annotation.Nonnull
  public Integer getTaxes() {
    return taxes;
  }

  public void setTaxes(Integer taxes) {
    this.taxes = taxes;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    LineItemUnitPricing lineItemUnitPricing = (LineItemUnitPricing) o;
    return Objects.equals(this.discount, lineItemUnitPricing.discount) &&
        Objects.equals(this.fees, lineItemUnitPricing.fees) &&
        Objects.equals(this._list, lineItemUnitPricing._list) &&
        Objects.equals(this.sale, lineItemUnitPricing.sale) &&
        Objects.equals(this.savings, lineItemUnitPricing.savings) &&
        Objects.equals(this.taxes, lineItemUnitPricing.taxes);
  }

  @Override
  public int hashCode() {
    return Objects.hash(discount, fees, _list, sale, savings, taxes);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class LineItemUnitPricing {\n");
    sb.append("    discount: ").append(toIndentedString(discount)).append("\n");
    sb.append("    fees: ").append(toIndentedString(fees)).append("\n");
    sb.append("    _list: ").append(toIndentedString(_list)).append("\n");
    sb.append("    sale: ").append(toIndentedString(sale)).append("\n");
    sb.append("    savings: ").append(toIndentedString(savings)).append("\n");
    sb.append("    taxes: ").append(toIndentedString(taxes)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("discount");
    openapiFields.add("fees");
    openapiFields.add("list");
    openapiFields.add("sale");
    openapiFields.add("savings");
    openapiFields.add("taxes");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("discount");
    openapiRequiredFields.add("fees");
    openapiRequiredFields.add("list");
    openapiRequiredFields.add("sale");
    openapiRequiredFields.add("savings");
    openapiRequiredFields.add("taxes");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to LineItemUnitPricing
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!LineItemUnitPricing.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in LineItemUnitPricing is not found in the empty JSON string", LineItemUnitPricing.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!LineItemUnitPricing.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `LineItemUnitPricing` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : LineItemUnitPricing.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the required field `fees`
      OrderFee.validateJsonElement(jsonObj.get("fees"));
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!LineItemUnitPricing.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'LineItemUnitPricing' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<LineItemUnitPricing> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(LineItemUnitPricing.class));

       return (TypeAdapter<T>) new TypeAdapter<LineItemUnitPricing>() {
           @Override
           public void write(JsonWriter out, LineItemUnitPricing value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public LineItemUnitPricing read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of LineItemUnitPricing given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of LineItemUnitPricing
   * @throws IOException if the JSON string is invalid with respect to LineItemUnitPricing
   */
  public static LineItemUnitPricing fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, LineItemUnitPricing.class);
  }

  /**
   * Convert an instance of LineItemUnitPricing to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

