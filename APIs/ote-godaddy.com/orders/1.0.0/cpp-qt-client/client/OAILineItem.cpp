/**
 * 
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAILineItem.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAILineItem::OAILineItem(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAILineItem::OAILineItem() {
    this->initializeModel();
}

OAILineItem::~OAILineItem() {}

void OAILineItem::initializeModel() {

    m_domains_isSet = false;
    m_domains_isValid = false;

    m_label_isSet = false;
    m_label_isValid = false;

    m_period_isSet = false;
    m_period_isValid = false;

    m_period_unit_isSet = false;
    m_period_unit_isValid = false;

    m_pfid_isSet = false;
    m_pfid_isValid = false;

    m_pricing_isSet = false;
    m_pricing_isValid = false;

    m_quantity_isSet = false;
    m_quantity_isValid = false;

    m_tax_collector_isSet = false;
    m_tax_collector_isValid = false;
}

void OAILineItem::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAILineItem::fromJsonObject(QJsonObject json) {

    m_domains_isValid = ::OpenAPI::fromJsonValue(m_domains, json[QString("domains")]);
    m_domains_isSet = !json[QString("domains")].isNull() && m_domains_isValid;

    m_label_isValid = ::OpenAPI::fromJsonValue(m_label, json[QString("label")]);
    m_label_isSet = !json[QString("label")].isNull() && m_label_isValid;

    m_period_isValid = ::OpenAPI::fromJsonValue(m_period, json[QString("period")]);
    m_period_isSet = !json[QString("period")].isNull() && m_period_isValid;

    m_period_unit_isValid = ::OpenAPI::fromJsonValue(m_period_unit, json[QString("periodUnit")]);
    m_period_unit_isSet = !json[QString("periodUnit")].isNull() && m_period_unit_isValid;

    m_pfid_isValid = ::OpenAPI::fromJsonValue(m_pfid, json[QString("pfid")]);
    m_pfid_isSet = !json[QString("pfid")].isNull() && m_pfid_isValid;

    m_pricing_isValid = ::OpenAPI::fromJsonValue(m_pricing, json[QString("pricing")]);
    m_pricing_isSet = !json[QString("pricing")].isNull() && m_pricing_isValid;

    m_quantity_isValid = ::OpenAPI::fromJsonValue(m_quantity, json[QString("quantity")]);
    m_quantity_isSet = !json[QString("quantity")].isNull() && m_quantity_isValid;

    m_tax_collector_isValid = ::OpenAPI::fromJsonValue(m_tax_collector, json[QString("taxCollector")]);
    m_tax_collector_isSet = !json[QString("taxCollector")].isNull() && m_tax_collector_isValid;
}

QString OAILineItem::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAILineItem::asJsonObject() const {
    QJsonObject obj;
    if (m_domains.size() > 0) {
        obj.insert(QString("domains"), ::OpenAPI::toJsonValue(m_domains));
    }
    if (m_label_isSet) {
        obj.insert(QString("label"), ::OpenAPI::toJsonValue(m_label));
    }
    if (m_period_isSet) {
        obj.insert(QString("period"), ::OpenAPI::toJsonValue(m_period));
    }
    if (m_period_unit_isSet) {
        obj.insert(QString("periodUnit"), ::OpenAPI::toJsonValue(m_period_unit));
    }
    if (m_pfid_isSet) {
        obj.insert(QString("pfid"), ::OpenAPI::toJsonValue(m_pfid));
    }
    if (m_pricing.isSet()) {
        obj.insert(QString("pricing"), ::OpenAPI::toJsonValue(m_pricing));
    }
    if (m_quantity_isSet) {
        obj.insert(QString("quantity"), ::OpenAPI::toJsonValue(m_quantity));
    }
    if (m_tax_collector.isSet()) {
        obj.insert(QString("taxCollector"), ::OpenAPI::toJsonValue(m_tax_collector));
    }
    return obj;
}

QList<QString> OAILineItem::getDomains() const {
    return m_domains;
}
void OAILineItem::setDomains(const QList<QString> &domains) {
    m_domains = domains;
    m_domains_isSet = true;
}

bool OAILineItem::is_domains_Set() const{
    return m_domains_isSet;
}

bool OAILineItem::is_domains_Valid() const{
    return m_domains_isValid;
}

QString OAILineItem::getLabel() const {
    return m_label;
}
void OAILineItem::setLabel(const QString &label) {
    m_label = label;
    m_label_isSet = true;
}

bool OAILineItem::is_label_Set() const{
    return m_label_isSet;
}

bool OAILineItem::is_label_Valid() const{
    return m_label_isValid;
}

double OAILineItem::getPeriod() const {
    return m_period;
}
void OAILineItem::setPeriod(const double &period) {
    m_period = period;
    m_period_isSet = true;
}

bool OAILineItem::is_period_Set() const{
    return m_period_isSet;
}

bool OAILineItem::is_period_Valid() const{
    return m_period_isValid;
}

QString OAILineItem::getPeriodUnit() const {
    return m_period_unit;
}
void OAILineItem::setPeriodUnit(const QString &period_unit) {
    m_period_unit = period_unit;
    m_period_unit_isSet = true;
}

bool OAILineItem::is_period_unit_Set() const{
    return m_period_unit_isSet;
}

bool OAILineItem::is_period_unit_Valid() const{
    return m_period_unit_isValid;
}

qint32 OAILineItem::getPfid() const {
    return m_pfid;
}
void OAILineItem::setPfid(const qint32 &pfid) {
    m_pfid = pfid;
    m_pfid_isSet = true;
}

bool OAILineItem::is_pfid_Set() const{
    return m_pfid_isSet;
}

bool OAILineItem::is_pfid_Valid() const{
    return m_pfid_isValid;
}

OAILineItemPricing OAILineItem::getPricing() const {
    return m_pricing;
}
void OAILineItem::setPricing(const OAILineItemPricing &pricing) {
    m_pricing = pricing;
    m_pricing_isSet = true;
}

bool OAILineItem::is_pricing_Set() const{
    return m_pricing_isSet;
}

bool OAILineItem::is_pricing_Valid() const{
    return m_pricing_isValid;
}

qint32 OAILineItem::getQuantity() const {
    return m_quantity;
}
void OAILineItem::setQuantity(const qint32 &quantity) {
    m_quantity = quantity;
    m_quantity_isSet = true;
}

bool OAILineItem::is_quantity_Set() const{
    return m_quantity_isSet;
}

bool OAILineItem::is_quantity_Valid() const{
    return m_quantity_isValid;
}

OAILineItemTaxCollector OAILineItem::getTaxCollector() const {
    return m_tax_collector;
}
void OAILineItem::setTaxCollector(const OAILineItemTaxCollector &tax_collector) {
    m_tax_collector = tax_collector;
    m_tax_collector_isSet = true;
}

bool OAILineItem::is_tax_collector_Set() const{
    return m_tax_collector_isSet;
}

bool OAILineItem::is_tax_collector_Valid() const{
    return m_tax_collector_isValid;
}

bool OAILineItem::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_domains.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_label_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_period_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_period_unit_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_pfid_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_pricing.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_quantity_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_tax_collector.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAILineItem::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_label_isValid && m_pricing_isValid && m_quantity_isValid && true;
}

} // namespace OpenAPI
