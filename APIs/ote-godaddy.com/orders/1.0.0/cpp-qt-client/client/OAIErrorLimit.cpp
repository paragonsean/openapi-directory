/**
 * 
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIErrorLimit.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIErrorLimit::OAIErrorLimit(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIErrorLimit::OAIErrorLimit() {
    this->initializeModel();
}

OAIErrorLimit::~OAIErrorLimit() {}

void OAIErrorLimit::initializeModel() {

    m_code_isSet = false;
    m_code_isValid = false;

    m_fields_isSet = false;
    m_fields_isValid = false;

    m_message_isSet = false;
    m_message_isValid = false;

    m_retry_after_sec_isSet = false;
    m_retry_after_sec_isValid = false;
}

void OAIErrorLimit::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIErrorLimit::fromJsonObject(QJsonObject json) {

    m_code_isValid = ::OpenAPI::fromJsonValue(m_code, json[QString("code")]);
    m_code_isSet = !json[QString("code")].isNull() && m_code_isValid;

    m_fields_isValid = ::OpenAPI::fromJsonValue(m_fields, json[QString("fields")]);
    m_fields_isSet = !json[QString("fields")].isNull() && m_fields_isValid;

    m_message_isValid = ::OpenAPI::fromJsonValue(m_message, json[QString("message")]);
    m_message_isSet = !json[QString("message")].isNull() && m_message_isValid;

    m_retry_after_sec_isValid = ::OpenAPI::fromJsonValue(m_retry_after_sec, json[QString("retryAfterSec")]);
    m_retry_after_sec_isSet = !json[QString("retryAfterSec")].isNull() && m_retry_after_sec_isValid;
}

QString OAIErrorLimit::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIErrorLimit::asJsonObject() const {
    QJsonObject obj;
    if (m_code_isSet) {
        obj.insert(QString("code"), ::OpenAPI::toJsonValue(m_code));
    }
    if (m_fields.size() > 0) {
        obj.insert(QString("fields"), ::OpenAPI::toJsonValue(m_fields));
    }
    if (m_message_isSet) {
        obj.insert(QString("message"), ::OpenAPI::toJsonValue(m_message));
    }
    if (m_retry_after_sec_isSet) {
        obj.insert(QString("retryAfterSec"), ::OpenAPI::toJsonValue(m_retry_after_sec));
    }
    return obj;
}

QString OAIErrorLimit::getCode() const {
    return m_code;
}
void OAIErrorLimit::setCode(const QString &code) {
    m_code = code;
    m_code_isSet = true;
}

bool OAIErrorLimit::is_code_Set() const{
    return m_code_isSet;
}

bool OAIErrorLimit::is_code_Valid() const{
    return m_code_isValid;
}

QList<OAIErrorField> OAIErrorLimit::getFields() const {
    return m_fields;
}
void OAIErrorLimit::setFields(const QList<OAIErrorField> &fields) {
    m_fields = fields;
    m_fields_isSet = true;
}

bool OAIErrorLimit::is_fields_Set() const{
    return m_fields_isSet;
}

bool OAIErrorLimit::is_fields_Valid() const{
    return m_fields_isValid;
}

QString OAIErrorLimit::getMessage() const {
    return m_message;
}
void OAIErrorLimit::setMessage(const QString &message) {
    m_message = message;
    m_message_isSet = true;
}

bool OAIErrorLimit::is_message_Set() const{
    return m_message_isSet;
}

bool OAIErrorLimit::is_message_Valid() const{
    return m_message_isValid;
}

qint32 OAIErrorLimit::getRetryAfterSec() const {
    return m_retry_after_sec;
}
void OAIErrorLimit::setRetryAfterSec(const qint32 &retry_after_sec) {
    m_retry_after_sec = retry_after_sec;
    m_retry_after_sec_isSet = true;
}

bool OAIErrorLimit::is_retry_after_sec_Set() const{
    return m_retry_after_sec_isSet;
}

bool OAIErrorLimit::is_retry_after_sec_Valid() const{
    return m_retry_after_sec_isValid;
}

bool OAIErrorLimit::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_code_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_fields.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_message_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_retry_after_sec_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIErrorLimit::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_code_isValid && m_retry_after_sec_isValid && true;
}

} // namespace OpenAPI
