/**
 * 
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIOrderPricing.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIOrderPricing::OAIOrderPricing(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIOrderPricing::OAIOrderPricing() {
    this->initializeModel();
}

OAIOrderPricing::~OAIOrderPricing() {}

void OAIOrderPricing::initializeModel() {

    m_discount_isSet = false;
    m_discount_isValid = false;

    m_fees_isSet = false;
    m_fees_isValid = false;

    m_id_isSet = false;
    m_id_isValid = false;

    m_list_isSet = false;
    m_list_isValid = false;

    m_savings_isSet = false;
    m_savings_isValid = false;

    m_subtotal_isSet = false;
    m_subtotal_isValid = false;

    m_tax_details_isSet = false;
    m_tax_details_isValid = false;

    m_taxes_isSet = false;
    m_taxes_isValid = false;

    m_total_isSet = false;
    m_total_isValid = false;
}

void OAIOrderPricing::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIOrderPricing::fromJsonObject(QJsonObject json) {

    m_discount_isValid = ::OpenAPI::fromJsonValue(m_discount, json[QString("discount")]);
    m_discount_isSet = !json[QString("discount")].isNull() && m_discount_isValid;

    m_fees_isValid = ::OpenAPI::fromJsonValue(m_fees, json[QString("fees")]);
    m_fees_isSet = !json[QString("fees")].isNull() && m_fees_isValid;

    m_id_isValid = ::OpenAPI::fromJsonValue(m_id, json[QString("id")]);
    m_id_isSet = !json[QString("id")].isNull() && m_id_isValid;

    m_list_isValid = ::OpenAPI::fromJsonValue(m_list, json[QString("list")]);
    m_list_isSet = !json[QString("list")].isNull() && m_list_isValid;

    m_savings_isValid = ::OpenAPI::fromJsonValue(m_savings, json[QString("savings")]);
    m_savings_isSet = !json[QString("savings")].isNull() && m_savings_isValid;

    m_subtotal_isValid = ::OpenAPI::fromJsonValue(m_subtotal, json[QString("subtotal")]);
    m_subtotal_isSet = !json[QString("subtotal")].isNull() && m_subtotal_isValid;

    m_tax_details_isValid = ::OpenAPI::fromJsonValue(m_tax_details, json[QString("taxDetails")]);
    m_tax_details_isSet = !json[QString("taxDetails")].isNull() && m_tax_details_isValid;

    m_taxes_isValid = ::OpenAPI::fromJsonValue(m_taxes, json[QString("taxes")]);
    m_taxes_isSet = !json[QString("taxes")].isNull() && m_taxes_isValid;

    m_total_isValid = ::OpenAPI::fromJsonValue(m_total, json[QString("total")]);
    m_total_isSet = !json[QString("total")].isNull() && m_total_isValid;
}

QString OAIOrderPricing::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIOrderPricing::asJsonObject() const {
    QJsonObject obj;
    if (m_discount_isSet) {
        obj.insert(QString("discount"), ::OpenAPI::toJsonValue(m_discount));
    }
    if (m_fees.isSet()) {
        obj.insert(QString("fees"), ::OpenAPI::toJsonValue(m_fees));
    }
    if (m_id_isSet) {
        obj.insert(QString("id"), ::OpenAPI::toJsonValue(m_id));
    }
    if (m_list_isSet) {
        obj.insert(QString("list"), ::OpenAPI::toJsonValue(m_list));
    }
    if (m_savings_isSet) {
        obj.insert(QString("savings"), ::OpenAPI::toJsonValue(m_savings));
    }
    if (m_subtotal_isSet) {
        obj.insert(QString("subtotal"), ::OpenAPI::toJsonValue(m_subtotal));
    }
    if (m_tax_details.size() > 0) {
        obj.insert(QString("taxDetails"), ::OpenAPI::toJsonValue(m_tax_details));
    }
    if (m_taxes_isSet) {
        obj.insert(QString("taxes"), ::OpenAPI::toJsonValue(m_taxes));
    }
    if (m_total_isSet) {
        obj.insert(QString("total"), ::OpenAPI::toJsonValue(m_total));
    }
    return obj;
}

qint32 OAIOrderPricing::getDiscount() const {
    return m_discount;
}
void OAIOrderPricing::setDiscount(const qint32 &discount) {
    m_discount = discount;
    m_discount_isSet = true;
}

bool OAIOrderPricing::is_discount_Set() const{
    return m_discount_isSet;
}

bool OAIOrderPricing::is_discount_Valid() const{
    return m_discount_isValid;
}

OAIOrderFee OAIOrderPricing::getFees() const {
    return m_fees;
}
void OAIOrderPricing::setFees(const OAIOrderFee &fees) {
    m_fees = fees;
    m_fees_isSet = true;
}

bool OAIOrderPricing::is_fees_Set() const{
    return m_fees_isSet;
}

bool OAIOrderPricing::is_fees_Valid() const{
    return m_fees_isValid;
}

double OAIOrderPricing::getId() const {
    return m_id;
}
void OAIOrderPricing::setId(const double &id) {
    m_id = id;
    m_id_isSet = true;
}

bool OAIOrderPricing::is_id_Set() const{
    return m_id_isSet;
}

bool OAIOrderPricing::is_id_Valid() const{
    return m_id_isValid;
}

qint32 OAIOrderPricing::getList() const {
    return m_list;
}
void OAIOrderPricing::setList(const qint32 &list) {
    m_list = list;
    m_list_isSet = true;
}

bool OAIOrderPricing::is_list_Set() const{
    return m_list_isSet;
}

bool OAIOrderPricing::is_list_Valid() const{
    return m_list_isValid;
}

qint32 OAIOrderPricing::getSavings() const {
    return m_savings;
}
void OAIOrderPricing::setSavings(const qint32 &savings) {
    m_savings = savings;
    m_savings_isSet = true;
}

bool OAIOrderPricing::is_savings_Set() const{
    return m_savings_isSet;
}

bool OAIOrderPricing::is_savings_Valid() const{
    return m_savings_isValid;
}

qint32 OAIOrderPricing::getSubtotal() const {
    return m_subtotal;
}
void OAIOrderPricing::setSubtotal(const qint32 &subtotal) {
    m_subtotal = subtotal;
    m_subtotal_isSet = true;
}

bool OAIOrderPricing::is_subtotal_Set() const{
    return m_subtotal_isSet;
}

bool OAIOrderPricing::is_subtotal_Valid() const{
    return m_subtotal_isValid;
}

QList<OAILineItemPricingTaxDetail> OAIOrderPricing::getTaxDetails() const {
    return m_tax_details;
}
void OAIOrderPricing::setTaxDetails(const QList<OAILineItemPricingTaxDetail> &tax_details) {
    m_tax_details = tax_details;
    m_tax_details_isSet = true;
}

bool OAIOrderPricing::is_tax_details_Set() const{
    return m_tax_details_isSet;
}

bool OAIOrderPricing::is_tax_details_Valid() const{
    return m_tax_details_isValid;
}

qint32 OAIOrderPricing::getTaxes() const {
    return m_taxes;
}
void OAIOrderPricing::setTaxes(const qint32 &taxes) {
    m_taxes = taxes;
    m_taxes_isSet = true;
}

bool OAIOrderPricing::is_taxes_Set() const{
    return m_taxes_isSet;
}

bool OAIOrderPricing::is_taxes_Valid() const{
    return m_taxes_isValid;
}

qint32 OAIOrderPricing::getTotal() const {
    return m_total;
}
void OAIOrderPricing::setTotal(const qint32 &total) {
    m_total = total;
    m_total_isSet = true;
}

bool OAIOrderPricing::is_total_Set() const{
    return m_total_isSet;
}

bool OAIOrderPricing::is_total_Valid() const{
    return m_total_isValid;
}

bool OAIOrderPricing::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_discount_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_fees.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_list_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_savings_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_subtotal_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_tax_details.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_taxes_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_total_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIOrderPricing::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_discount_isValid && m_fees_isValid && m_list_isValid && m_savings_isValid && m_subtotal_isValid && m_taxes_isValid && m_total_isValid && true;
}

} // namespace OpenAPI
