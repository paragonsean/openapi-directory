/**
 * 
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import Error from '../model/Error';
import ErrorLimit from '../model/ErrorLimit';
import Order from '../model/Order';
import OrderList from '../model/OrderList';

/**
* V1 service.
* @module api/V1Api
* @version 1.0.0
*/
export default class V1Api {

    /**
    * Constructs a new V1Api. 
    * @alias module:api/V1Api
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the get operation.
     * @callback module:api/V1Api~getCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Order} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Retrieve details for specified order
     * <strong>API Resellers</strong><ul><li>This endpoint does not support subaccounts and therefore API Resellers should not supply an X-Shopper-Id header</li></ul>
     * @param {String} orderId Order id whose details are to be retrieved
     * @param {Object} opts Optional parameters
     * @param {String} [xShopperId] Shopper ID to be operated on, if different from JWT<br/><b>Reseller subaccounts are not supported</b>
     * @param {String} [xMarketId = 'en-US')] Unique identifier of the Market in which the request is happening
     * @param {module:api/V1Api~getCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Order}
     */
    get(orderId, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'orderId' is set
      if (orderId === undefined || orderId === null) {
        throw new Error("Missing the required parameter 'orderId' when calling get");
      }

      let pathParams = {
        'orderId': orderId
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Shopper-Id': opts['xShopperId'],
        'X-Market-Id': opts['xMarketId']
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/javascript', 'application/json', 'application/xml', 'text/javascript', 'text/xml'];
      let returnType = Order;
      return this.apiClient.callApi(
        '/v1/orders/{orderId}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the list operation.
     * @callback module:api/V1Api~listCallback
     * @param {String} error Error message, if any.
     * @param {module:model/OrderList} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Retrieve a list of orders for the authenticated shopper. Only one filter may be used at a time
     * <strong>API Resellers</strong><ul><li>This endpoint does not support subaccounts and therefore API Resellers should not supply an X-Shopper-Id header</li></ul>
     * @param {Object} opts Optional parameters
     * @param {String} [periodStart] Start of range indicating what time-frame should be returned. Inclusive
     * @param {String} [periodEnd] End of range indicating what time-frame should be returned. Inclusive
     * @param {String} [domain] Domain name to use as the filter of results
     * @param {Number} [productGroupId] Product group id to use as the filter of results
     * @param {Number} [paymentProfileId] Payment profile id to use as the filter of results
     * @param {String} [parentOrderId] Parent order id to use as the filter of results
     * @param {Number} [offset = 0)] Number of results to skip for pagination
     * @param {Number} [limit = 25)] Maximum number of items to return
     * @param {module:model/String} [sort = '-createdAt')] Property name that will be used to sort results. '-' indicates descending
     * @param {String} [xShopperId] Shopper ID to be operated on, if different from JWT<br/><b>Reseller subaccounts are not supported</b>
     * @param {String} [xMarketId = 'en-US')] Unique identifier of the Market in which the request is happening
     * @param {module:api/V1Api~listCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/OrderList}
     */
    list(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'periodStart': opts['periodStart'],
        'periodEnd': opts['periodEnd'],
        'domain': opts['domain'],
        'productGroupId': opts['productGroupId'],
        'paymentProfileId': opts['paymentProfileId'],
        'parentOrderId': opts['parentOrderId'],
        'offset': opts['offset'],
        'limit': opts['limit'],
        'sort': opts['sort']
      };
      let headerParams = {
        'X-Shopper-Id': opts['xShopperId'],
        'X-Market-Id': opts['xMarketId']
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/javascript', 'application/json', 'application/xml', 'text/javascript', 'text/xml'];
      let returnType = OrderList;
      return this.apiClient.callApi(
        '/v1/orders', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
