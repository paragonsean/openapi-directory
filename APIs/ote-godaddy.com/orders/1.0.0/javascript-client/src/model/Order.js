/**
 * 
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import BillTo from './BillTo';
import LineItem from './LineItem';
import OrderPricing from './OrderPricing';
import Payment from './Payment';

/**
 * The Order model module.
 * @module model/Order
 * @version 1.0.0
 */
class Order {
    /**
     * Constructs a new <code>Order</code>.
     * @alias module:model/Order
     * @param billTo {module:model/BillTo} 
     * @param createdAt {String} Date and time when the current order is created on
     * @param currency {String} Currency in which the order has been placed
     * @param items {Array.<module:model/LineItem>} 
     * @param orderId {String} Unique identifier of current order
     * @param payments {Array.<module:model/Payment>} 
     * @param pricing {module:model/OrderPricing} 
     */
    constructor(billTo, createdAt, currency, items, orderId, payments, pricing) { 
        
        Order.initialize(this, billTo, createdAt, currency, items, orderId, payments, pricing);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, billTo, createdAt, currency, items, orderId, payments, pricing) { 
        obj['billTo'] = billTo;
        obj['createdAt'] = createdAt;
        obj['currency'] = currency;
        obj['items'] = items;
        obj['orderId'] = orderId;
        obj['payments'] = payments;
        obj['pricing'] = pricing;
    }

    /**
     * Constructs a <code>Order</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/Order} obj Optional instance to populate.
     * @return {module:model/Order} The populated <code>Order</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new Order();

            if (data.hasOwnProperty('billTo')) {
                obj['billTo'] = BillTo.constructFromObject(data['billTo']);
            }
            if (data.hasOwnProperty('createdAt')) {
                obj['createdAt'] = ApiClient.convertToType(data['createdAt'], 'String');
            }
            if (data.hasOwnProperty('currency')) {
                obj['currency'] = ApiClient.convertToType(data['currency'], 'String');
            }
            if (data.hasOwnProperty('items')) {
                obj['items'] = ApiClient.convertToType(data['items'], [LineItem]);
            }
            if (data.hasOwnProperty('orderId')) {
                obj['orderId'] = ApiClient.convertToType(data['orderId'], 'String');
            }
            if (data.hasOwnProperty('parentOrderId')) {
                obj['parentOrderId'] = ApiClient.convertToType(data['parentOrderId'], 'String');
            }
            if (data.hasOwnProperty('payments')) {
                obj['payments'] = ApiClient.convertToType(data['payments'], [Payment]);
            }
            if (data.hasOwnProperty('pricing')) {
                obj['pricing'] = OrderPricing.constructFromObject(data['pricing']);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>Order</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>Order</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of Order.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // validate the optional field `billTo`
        if (data['billTo']) { // data not null
          BillTo.validateJSON(data['billTo']);
        }
        // ensure the json data is a string
        if (data['createdAt'] && !(typeof data['createdAt'] === 'string' || data['createdAt'] instanceof String)) {
            throw new Error("Expected the field `createdAt` to be a primitive type in the JSON string but got " + data['createdAt']);
        }
        // ensure the json data is a string
        if (data['currency'] && !(typeof data['currency'] === 'string' || data['currency'] instanceof String)) {
            throw new Error("Expected the field `currency` to be a primitive type in the JSON string but got " + data['currency']);
        }
        if (data['items']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['items'])) {
                throw new Error("Expected the field `items` to be an array in the JSON data but got " + data['items']);
            }
            // validate the optional field `items` (array)
            for (const item of data['items']) {
                LineItem.validateJSON(item);
            };
        }
        // ensure the json data is a string
        if (data['orderId'] && !(typeof data['orderId'] === 'string' || data['orderId'] instanceof String)) {
            throw new Error("Expected the field `orderId` to be a primitive type in the JSON string but got " + data['orderId']);
        }
        // ensure the json data is a string
        if (data['parentOrderId'] && !(typeof data['parentOrderId'] === 'string' || data['parentOrderId'] instanceof String)) {
            throw new Error("Expected the field `parentOrderId` to be a primitive type in the JSON string but got " + data['parentOrderId']);
        }
        if (data['payments']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['payments'])) {
                throw new Error("Expected the field `payments` to be an array in the JSON data but got " + data['payments']);
            }
            // validate the optional field `payments` (array)
            for (const item of data['payments']) {
                Payment.validateJSON(item);
            };
        }
        // validate the optional field `pricing`
        if (data['pricing']) { // data not null
          OrderPricing.validateJSON(data['pricing']);
        }

        return true;
    }


}

Order.RequiredProperties = ["billTo", "createdAt", "currency", "items", "orderId", "payments", "pricing"];

/**
 * @member {module:model/BillTo} billTo
 */
Order.prototype['billTo'] = undefined;

/**
 * Date and time when the current order is created on
 * @member {String} createdAt
 */
Order.prototype['createdAt'] = undefined;

/**
 * Currency in which the order has been placed
 * @member {String} currency
 */
Order.prototype['currency'] = undefined;

/**
 * @member {Array.<module:model/LineItem>} items
 */
Order.prototype['items'] = undefined;

/**
 * Unique identifier of current order
 * @member {String} orderId
 */
Order.prototype['orderId'] = undefined;

/**
 * Unique identifier of the parent order. All refund/chargeback orders are tied to the original order. The orginal order's `orderId` is the `parentOrderId` of refund/chargeback orders
 * @member {String} parentOrderId
 */
Order.prototype['parentOrderId'] = undefined;

/**
 * @member {Array.<module:model/Payment>} payments
 */
Order.prototype['payments'] = undefined;

/**
 * @member {module:model/OrderPricing} pricing
 */
Order.prototype['pricing'] = undefined;






export default Order;

