/**
 * 
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The Payment model module.
 * @module model/Payment
 * @version 1.0.0
 */
class Payment {
    /**
     * Constructs a new <code>Payment</code>.
     * @alias module:model/Payment
     * @param amount {Number} Amount paid by the current payment
     * @param category {module:model/Payment.CategoryEnum} The category of payment method used at the time of purchase. Most common values are listed in the enum.
     * @param paymentProfileId {String} Unique identifier of the payment profile used by current payment
     */
    constructor(amount, category, paymentProfileId) { 
        
        Payment.initialize(this, amount, category, paymentProfileId);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, amount, category, paymentProfileId) { 
        obj['amount'] = amount;
        obj['category'] = category;
        obj['paymentProfileId'] = paymentProfileId;
    }

    /**
     * Constructs a <code>Payment</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/Payment} obj Optional instance to populate.
     * @return {module:model/Payment} The populated <code>Payment</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new Payment();

            if (data.hasOwnProperty('amount')) {
                obj['amount'] = ApiClient.convertToType(data['amount'], 'Number');
            }
            if (data.hasOwnProperty('category')) {
                obj['category'] = ApiClient.convertToType(data['category'], 'String');
            }
            if (data.hasOwnProperty('paymentProfileId')) {
                obj['paymentProfileId'] = ApiClient.convertToType(data['paymentProfileId'], 'String');
            }
            if (data.hasOwnProperty('subcategory')) {
                obj['subcategory'] = ApiClient.convertToType(data['subcategory'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>Payment</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>Payment</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of Payment.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // ensure the json data is a string
        if (data['category'] && !(typeof data['category'] === 'string' || data['category'] instanceof String)) {
            throw new Error("Expected the field `category` to be a primitive type in the JSON string but got " + data['category']);
        }
        // ensure the json data is a string
        if (data['paymentProfileId'] && !(typeof data['paymentProfileId'] === 'string' || data['paymentProfileId'] instanceof String)) {
            throw new Error("Expected the field `paymentProfileId` to be a primitive type in the JSON string but got " + data['paymentProfileId']);
        }
        // ensure the json data is a string
        if (data['subcategory'] && !(typeof data['subcategory'] === 'string' || data['subcategory'] instanceof String)) {
            throw new Error("Expected the field `subcategory` to be a primitive type in the JSON string but got " + data['subcategory']);
        }

        return true;
    }


}

Payment.RequiredProperties = ["amount", "category", "paymentProfileId"];

/**
 * Amount paid by the current payment
 * @member {Number} amount
 */
Payment.prototype['amount'] = undefined;

/**
 * The category of payment method used at the time of purchase. Most common values are listed in the enum.
 * @member {module:model/Payment.CategoryEnum} category
 */
Payment.prototype['category'] = undefined;

/**
 * Unique identifier of the payment profile used by current payment
 * @member {String} paymentProfileId
 */
Payment.prototype['paymentProfileId'] = undefined;

/**
 * The subcategory of payment method used at the time of purchase.  This field is only set for certain payment categories, such as ACH and CREDIT_CARD. Most common values are listed in the enum.
 * @member {module:model/Payment.SubcategoryEnum} subcategory
 */
Payment.prototype['subcategory'] = undefined;





/**
 * Allowed values for the <code>category</code> property.
 * @enum {String}
 * @readonly
 */
Payment['CategoryEnum'] = {

    /**
     * value: "CREDIT_CARD"
     * @const
     */
    "CREDIT_CARD": "CREDIT_CARD",

    /**
     * value: "PAYPAL"
     * @const
     */
    "PAYPAL": "PAYPAL",

    /**
     * value: "ACH"
     * @const
     */
    "ACH": "ACH",

    /**
     * value: "GIFT_CARD"
     * @const
     */
    "GIFT_CARD": "GIFT_CARD",

    /**
     * value: "IN_STORE_CREDIT"
     * @const
     */
    "IN_STORE_CREDIT": "IN_STORE_CREDIT",

    /**
     * value: "PREPAID"
     * @const
     */
    "PREPAID": "PREPAID"
};


/**
 * Allowed values for the <code>subcategory</code> property.
 * @enum {String}
 * @readonly
 */
Payment['SubcategoryEnum'] = {

    /**
     * value: "CHECKING_PERSONAL"
     * @const
     */
    "CHECKING_PERSONAL": "CHECKING_PERSONAL",

    /**
     * value: "CHECKING_BUSINESS"
     * @const
     */
    "CHECKING_BUSINESS": "CHECKING_BUSINESS",

    /**
     * value: "VISA"
     * @const
     */
    "VISA": "VISA",

    /**
     * value: "MASTER_CARD"
     * @const
     */
    "MASTER_CARD": "MASTER_CARD",

    /**
     * value: "AMEX"
     * @const
     */
    "AMEX": "AMEX",

    /**
     * value: "JCB"
     * @const
     */
    "JCB": "JCB",

    /**
     * value: "UNIONPAY"
     * @const
     */
    "UNIONPAY": "UNIONPAY"
};



export default Payment;

