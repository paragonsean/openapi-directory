/**
 * 
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import Contact from './Contact';

/**
 * The BillTo model module.
 * @module model/BillTo
 * @version 1.0.0
 */
class BillTo {
    /**
     * Constructs a new <code>BillTo</code>.
     * @alias module:model/BillTo
     * @param contact {module:model/Contact} 
     */
    constructor(contact) { 
        
        BillTo.initialize(this, contact);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, contact) { 
        obj['contact'] = contact;
    }

    /**
     * Constructs a <code>BillTo</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/BillTo} obj Optional instance to populate.
     * @return {module:model/BillTo} The populated <code>BillTo</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new BillTo();

            if (data.hasOwnProperty('contact')) {
                obj['contact'] = Contact.constructFromObject(data['contact']);
            }
            if (data.hasOwnProperty('taxId')) {
                obj['taxId'] = ApiClient.convertToType(data['taxId'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>BillTo</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>BillTo</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of BillTo.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // validate the optional field `contact`
        if (data['contact']) { // data not null
          Contact.validateJSON(data['contact']);
        }
        // ensure the json data is a string
        if (data['taxId'] && !(typeof data['taxId'] === 'string' || data['taxId'] instanceof String)) {
            throw new Error("Expected the field `taxId` to be a primitive type in the JSON string but got " + data['taxId']);
        }

        return true;
    }


}

BillTo.RequiredProperties = ["contact"];

/**
 * @member {module:model/Contact} contact
 */
BillTo.prototype['contact'] = undefined;

/**
 * Tax id used for calculating the tax the customer is required to pay
 * @member {String} taxId
 */
BillTo.prototype['taxId'] = undefined;






export default BillTo;

