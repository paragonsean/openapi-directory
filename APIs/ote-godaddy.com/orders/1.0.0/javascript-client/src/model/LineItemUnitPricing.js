/**
 * 
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import OrderFee from './OrderFee';

/**
 * The LineItemUnitPricing model module.
 * @module model/LineItemUnitPricing
 * @version 1.0.0
 */
class LineItemUnitPricing {
    /**
     * Constructs a new <code>LineItemUnitPricing</code>.
     * @alias module:model/LineItemUnitPricing
     * @param discount {Number} Discount without consideration of `quantity` and `period`
     * @param fees {module:model/OrderFee} 
     * @param list {Number} List price without consideration of `quantity` and `period`
     * @param sale {Number} Sale price without consideration of `quantity` and `period`
     * @param savings {Number} Savings without consideration of `quantity` and `period`
     * @param taxes {Number} Taxes without consideration of `quantity` and `period`
     */
    constructor(discount, fees, list, sale, savings, taxes) { 
        
        LineItemUnitPricing.initialize(this, discount, fees, list, sale, savings, taxes);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, discount, fees, list, sale, savings, taxes) { 
        obj['discount'] = discount;
        obj['fees'] = fees;
        obj['list'] = list;
        obj['sale'] = sale;
        obj['savings'] = savings;
        obj['taxes'] = taxes;
    }

    /**
     * Constructs a <code>LineItemUnitPricing</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/LineItemUnitPricing} obj Optional instance to populate.
     * @return {module:model/LineItemUnitPricing} The populated <code>LineItemUnitPricing</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new LineItemUnitPricing();

            if (data.hasOwnProperty('discount')) {
                obj['discount'] = ApiClient.convertToType(data['discount'], 'Number');
            }
            if (data.hasOwnProperty('fees')) {
                obj['fees'] = OrderFee.constructFromObject(data['fees']);
            }
            if (data.hasOwnProperty('list')) {
                obj['list'] = ApiClient.convertToType(data['list'], 'Number');
            }
            if (data.hasOwnProperty('sale')) {
                obj['sale'] = ApiClient.convertToType(data['sale'], 'Number');
            }
            if (data.hasOwnProperty('savings')) {
                obj['savings'] = ApiClient.convertToType(data['savings'], 'Number');
            }
            if (data.hasOwnProperty('taxes')) {
                obj['taxes'] = ApiClient.convertToType(data['taxes'], 'Number');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>LineItemUnitPricing</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>LineItemUnitPricing</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of LineItemUnitPricing.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // validate the optional field `fees`
        if (data['fees']) { // data not null
          OrderFee.validateJSON(data['fees']);
        }

        return true;
    }


}

LineItemUnitPricing.RequiredProperties = ["discount", "fees", "list", "sale", "savings", "taxes"];

/**
 * Discount without consideration of `quantity` and `period`
 * @member {Number} discount
 */
LineItemUnitPricing.prototype['discount'] = undefined;

/**
 * @member {module:model/OrderFee} fees
 */
LineItemUnitPricing.prototype['fees'] = undefined;

/**
 * List price without consideration of `quantity` and `period`
 * @member {Number} list
 */
LineItemUnitPricing.prototype['list'] = undefined;

/**
 * Sale price without consideration of `quantity` and `period`
 * @member {Number} sale
 */
LineItemUnitPricing.prototype['sale'] = undefined;

/**
 * Savings without consideration of `quantity` and `period`
 * @member {Number} savings
 */
LineItemUnitPricing.prototype['savings'] = undefined;

/**
 * Taxes without consideration of `quantity` and `period`
 * @member {Number} taxes
 */
LineItemUnitPricing.prototype['taxes'] = undefined;






export default LineItemUnitPricing;

