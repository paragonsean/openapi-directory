/**
 * 
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import LineItemPricing from './LineItemPricing';
import LineItemTaxCollector from './LineItemTaxCollector';

/**
 * The LineItem model module.
 * @module model/LineItem
 * @version 1.0.0
 */
class LineItem {
    /**
     * Constructs a new <code>LineItem</code>.
     * @alias module:model/LineItem
     * @param label {String} Human readable description of the current product
     * @param pricing {module:model/LineItemPricing} 
     * @param quantity {Number} Number of the current product included in the specified order
     */
    constructor(label, pricing, quantity) { 
        
        LineItem.initialize(this, label, pricing, quantity);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, label, pricing, quantity) { 
        obj['label'] = label;
        obj['period'] = 1;
        obj['periodUnit'] = 'MONTH';
        obj['pricing'] = pricing;
        obj['quantity'] = quantity;
    }

    /**
     * Constructs a <code>LineItem</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/LineItem} obj Optional instance to populate.
     * @return {module:model/LineItem} The populated <code>LineItem</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new LineItem();

            if (data.hasOwnProperty('domains')) {
                obj['domains'] = ApiClient.convertToType(data['domains'], ['String']);
            }
            if (data.hasOwnProperty('label')) {
                obj['label'] = ApiClient.convertToType(data['label'], 'String');
            }
            if (data.hasOwnProperty('period')) {
                obj['period'] = ApiClient.convertToType(data['period'], 'Number');
            }
            if (data.hasOwnProperty('periodUnit')) {
                obj['periodUnit'] = ApiClient.convertToType(data['periodUnit'], 'String');
            }
            if (data.hasOwnProperty('pfid')) {
                obj['pfid'] = ApiClient.convertToType(data['pfid'], 'Number');
            }
            if (data.hasOwnProperty('pricing')) {
                obj['pricing'] = LineItemPricing.constructFromObject(data['pricing']);
            }
            if (data.hasOwnProperty('quantity')) {
                obj['quantity'] = ApiClient.convertToType(data['quantity'], 'Number');
            }
            if (data.hasOwnProperty('taxCollector')) {
                obj['taxCollector'] = LineItemTaxCollector.constructFromObject(data['taxCollector']);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>LineItem</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>LineItem</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of LineItem.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // ensure the json data is an array
        if (!Array.isArray(data['domains'])) {
            throw new Error("Expected the field `domains` to be an array in the JSON data but got " + data['domains']);
        }
        // ensure the json data is a string
        if (data['label'] && !(typeof data['label'] === 'string' || data['label'] instanceof String)) {
            throw new Error("Expected the field `label` to be a primitive type in the JSON string but got " + data['label']);
        }
        // ensure the json data is a string
        if (data['periodUnit'] && !(typeof data['periodUnit'] === 'string' || data['periodUnit'] instanceof String)) {
            throw new Error("Expected the field `periodUnit` to be a primitive type in the JSON string but got " + data['periodUnit']);
        }
        // validate the optional field `pricing`
        if (data['pricing']) { // data not null
          LineItemPricing.validateJSON(data['pricing']);
        }
        // validate the optional field `taxCollector`
        if (data['taxCollector']) { // data not null
          LineItemTaxCollector.validateJSON(data['taxCollector']);
        }

        return true;
    }


}

LineItem.RequiredProperties = ["label", "pricing", "quantity"];

/**
 * A collection of domain names purchased if the current product is domain
 * @member {Array.<String>} domains
 */
LineItem.prototype['domains'] = undefined;

/**
 * Human readable description of the current product
 * @member {String} label
 */
LineItem.prototype['label'] = undefined;

/**
 * @member {Number} period
 * @default 1
 */
LineItem.prototype['period'] = 1;

/**
 * The unit of time that periodCount is measured in
 * @member {module:model/LineItem.PeriodUnitEnum} periodUnit
 * @default 'MONTH'
 */
LineItem.prototype['periodUnit'] = 'MONTH';

/**
 * Unique identifier of the current product
 * @member {Number} pfid
 */
LineItem.prototype['pfid'] = undefined;

/**
 * @member {module:model/LineItemPricing} pricing
 */
LineItem.prototype['pricing'] = undefined;

/**
 * Number of the current product included in the specified order
 * @member {Number} quantity
 */
LineItem.prototype['quantity'] = undefined;

/**
 * @member {module:model/LineItemTaxCollector} taxCollector
 */
LineItem.prototype['taxCollector'] = undefined;





/**
 * Allowed values for the <code>periodUnit</code> property.
 * @enum {String}
 * @readonly
 */
LineItem['PeriodUnitEnum'] = {

    /**
     * value: "MONTH"
     * @const
     */
    "MONTH": "MONTH",

    /**
     * value: "QUARTER"
     * @const
     */
    "QUARTER": "QUARTER",

    /**
     * value: "SEMI_ANNUAL"
     * @const
     */
    "SEMI_ANNUAL": "SEMI_ANNUAL",

    /**
     * value: "YEAR"
     * @const
     */
    "YEAR": "YEAR",

    /**
     * value: "ONE_TIME"
     * @const
     */
    "ONE_TIME": "ONE_TIME"
};



export default LineItem;

