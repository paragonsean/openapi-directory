# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class LegalAgreement(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, agreement_key: str=None, content: str=None, title: str=None, url: str=None):
        """LegalAgreement - a model defined in OpenAPI

        :param agreement_key: The agreement_key of this LegalAgreement.
        :param content: The content of this LegalAgreement.
        :param title: The title of this LegalAgreement.
        :param url: The url of this LegalAgreement.
        """
        self.openapi_types = {
            'agreement_key': str,
            'content': str,
            'title': str,
            'url': str
        }

        self.attribute_map = {
            'agreement_key': 'agreementKey',
            'content': 'content',
            'title': 'title',
            'url': 'url'
        }

        self._agreement_key = agreement_key
        self._content = content
        self._title = title
        self._url = url

    @classmethod
    def from_dict(cls, dikt: dict) -> 'LegalAgreement':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The LegalAgreement of this LegalAgreement.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def agreement_key(self):
        """Gets the agreement_key of this LegalAgreement.

        Unique identifier for the legal agreement

        :return: The agreement_key of this LegalAgreement.
        :rtype: str
        """
        return self._agreement_key

    @agreement_key.setter
    def agreement_key(self, agreement_key):
        """Sets the agreement_key of this LegalAgreement.

        Unique identifier for the legal agreement

        :param agreement_key: The agreement_key of this LegalAgreement.
        :type agreement_key: str
        """
        if agreement_key is None:
            raise ValueError("Invalid value for `agreement_key`, must not be `None`")

        self._agreement_key = agreement_key

    @property
    def content(self):
        """Gets the content of this LegalAgreement.

        Contents of the legal agreement, suitable for embedding

        :return: The content of this LegalAgreement.
        :rtype: str
        """
        return self._content

    @content.setter
    def content(self, content):
        """Sets the content of this LegalAgreement.

        Contents of the legal agreement, suitable for embedding

        :param content: The content of this LegalAgreement.
        :type content: str
        """
        if content is None:
            raise ValueError("Invalid value for `content`, must not be `None`")

        self._content = content

    @property
    def title(self):
        """Gets the title of this LegalAgreement.

        Title of the legal agreement

        :return: The title of this LegalAgreement.
        :rtype: str
        """
        return self._title

    @title.setter
    def title(self, title):
        """Sets the title of this LegalAgreement.

        Title of the legal agreement

        :param title: The title of this LegalAgreement.
        :type title: str
        """
        if title is None:
            raise ValueError("Invalid value for `title`, must not be `None`")

        self._title = title

    @property
    def url(self):
        """Gets the url of this LegalAgreement.

        URL to a page containing the legal agreement

        :return: The url of this LegalAgreement.
        :rtype: str
        """
        return self._url

    @url.setter
    def url(self, url):
        """Sets the url of this LegalAgreement.

        URL to a page containing the legal agreement

        :param url: The url of this LegalAgreement.
        :type url: str
        """

        self._url = url
