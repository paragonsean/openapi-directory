/**
 * 
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAILegalAgreement.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAILegalAgreement::OAILegalAgreement(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAILegalAgreement::OAILegalAgreement() {
    this->initializeModel();
}

OAILegalAgreement::~OAILegalAgreement() {}

void OAILegalAgreement::initializeModel() {

    m_agreement_key_isSet = false;
    m_agreement_key_isValid = false;

    m_content_isSet = false;
    m_content_isValid = false;

    m_title_isSet = false;
    m_title_isValid = false;

    m_url_isSet = false;
    m_url_isValid = false;
}

void OAILegalAgreement::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAILegalAgreement::fromJsonObject(QJsonObject json) {

    m_agreement_key_isValid = ::OpenAPI::fromJsonValue(m_agreement_key, json[QString("agreementKey")]);
    m_agreement_key_isSet = !json[QString("agreementKey")].isNull() && m_agreement_key_isValid;

    m_content_isValid = ::OpenAPI::fromJsonValue(m_content, json[QString("content")]);
    m_content_isSet = !json[QString("content")].isNull() && m_content_isValid;

    m_title_isValid = ::OpenAPI::fromJsonValue(m_title, json[QString("title")]);
    m_title_isSet = !json[QString("title")].isNull() && m_title_isValid;

    m_url_isValid = ::OpenAPI::fromJsonValue(m_url, json[QString("url")]);
    m_url_isSet = !json[QString("url")].isNull() && m_url_isValid;
}

QString OAILegalAgreement::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAILegalAgreement::asJsonObject() const {
    QJsonObject obj;
    if (m_agreement_key_isSet) {
        obj.insert(QString("agreementKey"), ::OpenAPI::toJsonValue(m_agreement_key));
    }
    if (m_content_isSet) {
        obj.insert(QString("content"), ::OpenAPI::toJsonValue(m_content));
    }
    if (m_title_isSet) {
        obj.insert(QString("title"), ::OpenAPI::toJsonValue(m_title));
    }
    if (m_url_isSet) {
        obj.insert(QString("url"), ::OpenAPI::toJsonValue(m_url));
    }
    return obj;
}

QString OAILegalAgreement::getAgreementKey() const {
    return m_agreement_key;
}
void OAILegalAgreement::setAgreementKey(const QString &agreement_key) {
    m_agreement_key = agreement_key;
    m_agreement_key_isSet = true;
}

bool OAILegalAgreement::is_agreement_key_Set() const{
    return m_agreement_key_isSet;
}

bool OAILegalAgreement::is_agreement_key_Valid() const{
    return m_agreement_key_isValid;
}

QString OAILegalAgreement::getContent() const {
    return m_content;
}
void OAILegalAgreement::setContent(const QString &content) {
    m_content = content;
    m_content_isSet = true;
}

bool OAILegalAgreement::is_content_Set() const{
    return m_content_isSet;
}

bool OAILegalAgreement::is_content_Valid() const{
    return m_content_isValid;
}

QString OAILegalAgreement::getTitle() const {
    return m_title;
}
void OAILegalAgreement::setTitle(const QString &title) {
    m_title = title;
    m_title_isSet = true;
}

bool OAILegalAgreement::is_title_Set() const{
    return m_title_isSet;
}

bool OAILegalAgreement::is_title_Valid() const{
    return m_title_isValid;
}

QString OAILegalAgreement::getUrl() const {
    return m_url;
}
void OAILegalAgreement::setUrl(const QString &url) {
    m_url = url;
    m_url_isSet = true;
}

bool OAILegalAgreement::is_url_Set() const{
    return m_url_isSet;
}

bool OAILegalAgreement::is_url_Valid() const{
    return m_url_isValid;
}

bool OAILegalAgreement::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_agreement_key_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_content_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_title_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_url_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAILegalAgreement::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_agreement_key_isValid && m_content_isValid && m_title_isValid && true;
}

} // namespace OpenAPI
