# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.state import State
from openapi_server import util


class Country(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, calling_code: str=None, country_key: str=None, label: str=None, states: List[State]=None):
        """Country - a model defined in OpenAPI

        :param calling_code: The calling_code of this Country.
        :param country_key: The country_key of this Country.
        :param label: The label of this Country.
        :param states: The states of this Country.
        """
        self.openapi_types = {
            'calling_code': str,
            'country_key': str,
            'label': str,
            'states': List[State]
        }

        self.attribute_map = {
            'calling_code': 'callingCode',
            'country_key': 'countryKey',
            'label': 'label',
            'states': 'states'
        }

        self._calling_code = calling_code
        self._country_key = country_key
        self._label = label
        self._states = states

    @classmethod
    def from_dict(cls, dikt: dict) -> 'Country':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Country of this Country.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def calling_code(self):
        """Gets the calling_code of this Country.

        The calling code prefix used for phone numbers in this country

        :return: The calling_code of this Country.
        :rtype: str
        """
        return self._calling_code

    @calling_code.setter
    def calling_code(self, calling_code):
        """Sets the calling_code of this Country.

        The calling code prefix used for phone numbers in this country

        :param calling_code: The calling_code of this Country.
        :type calling_code: str
        """

        self._calling_code = calling_code

    @property
    def country_key(self):
        """Gets the country_key of this Country.

        The ISO country-code

        :return: The country_key of this Country.
        :rtype: str
        """
        return self._country_key

    @country_key.setter
    def country_key(self, country_key):
        """Sets the country_key of this Country.

        The ISO country-code

        :param country_key: The country_key of this Country.
        :type country_key: str
        """

        self._country_key = country_key

    @property
    def label(self):
        """Gets the label of this Country.

        The localized name of the country

        :return: The label of this Country.
        :rtype: str
        """
        return self._label

    @label.setter
    def label(self, label):
        """Sets the label of this Country.

        The localized name of the country

        :param label: The label of this Country.
        :type label: str
        """

        self._label = label

    @property
    def states(self):
        """Gets the states of this Country.

        List of states/provinces in this country

        :return: The states of this Country.
        :rtype: List[State]
        """
        return self._states

    @states.setter
    def states(self, states):
        """Sets the states of this Country.

        List of states/provinces in this country

        :param states: The states of this Country.
        :type states: List[State]
        """

        self._states = states
