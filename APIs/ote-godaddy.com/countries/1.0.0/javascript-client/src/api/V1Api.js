/**
 * 
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import Country from '../model/Country';
import CountrySummary from '../model/CountrySummary';
import Error from '../model/Error';
import ErrorLimit from '../model/ErrorLimit';

/**
* V1 service.
* @module api/V1Api
* @version 1.0.0
*/
export default class V1Api {

    /**
    * Constructs a new V1Api. 
    * @alias module:api/V1Api
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the getCountries operation.
     * @callback module:api/V1Api~getCountriesCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/CountrySummary>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Retrieves summary country information for the provided marketId and filters
     * Authorization is not required
     * @param {String} marketId MarketId in which the request is being made, and for which responses should be localized
     * @param {Object} opts Optional parameters
     * @param {Number} [regionTypeId] Restrict countries to this region type; required if regionName is supplied
     * @param {String} [regionName] Restrict countries to this region name; required if regionTypeId is supplied
     * @param {module:model/String} [sort = 'key')] The term to sort the result countries by.
     * @param {module:model/String} [order = 'ascending')] The direction to sort the result countries by.
     * @param {module:api/V1Api~getCountriesCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/CountrySummary>}
     */
    getCountries(marketId, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'marketId' is set
      if (marketId === undefined || marketId === null) {
        throw new Error("Missing the required parameter 'marketId' when calling getCountries");
      }

      let pathParams = {
      };
      let queryParams = {
        'marketId': marketId,
        'regionTypeId': opts['regionTypeId'],
        'regionName': opts['regionName'],
        'sort': opts['sort'],
        'order': opts['order']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [CountrySummary];
      return this.apiClient.callApi(
        '/v1/countries', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getCountry operation.
     * @callback module:api/V1Api~getCountryCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/Country>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Retrieves country and summary state information for provided countryKey
     * Authorization is not required
     * @param {String} countryKey The country key
     * @param {String} marketId MarketId in which the request is being made, and for which responses should be localized
     * @param {Object} opts Optional parameters
     * @param {module:model/String} [sort = 'key')] The term to sort the result country states by.
     * @param {module:model/String} [order = 'ascending')] The direction to sort the result country states by.
     * @param {module:api/V1Api~getCountryCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/Country>}
     */
    getCountry(countryKey, marketId, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'countryKey' is set
      if (countryKey === undefined || countryKey === null) {
        throw new Error("Missing the required parameter 'countryKey' when calling getCountry");
      }
      // verify the required parameter 'marketId' is set
      if (marketId === undefined || marketId === null) {
        throw new Error("Missing the required parameter 'marketId' when calling getCountry");
      }

      let pathParams = {
        'countryKey': countryKey
      };
      let queryParams = {
        'marketId': marketId,
        'sort': opts['sort'],
        'order': opts['order']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [Country];
      return this.apiClient.callApi(
        '/v1/countries/{countryKey}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
