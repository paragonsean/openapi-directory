/*
 * 
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiCallback;
import org.openapitools.client.ApiClient;
import org.openapitools.client.ApiException;
import org.openapitools.client.ApiResponse;
import org.openapitools.client.Configuration;
import org.openapitools.client.Pair;
import org.openapitools.client.ProgressRequestBody;
import org.openapitools.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import org.openapitools.client.model.Country;
import org.openapitools.client.model.CountrySummary;
import org.openapitools.client.model.Error;
import org.openapitools.client.model.ErrorLimit;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class V1Api {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public V1Api() {
        this(Configuration.getDefaultApiClient());
    }

    public V1Api(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for getCountries
     * @param marketId MarketId in which the request is being made, and for which responses should be localized (required)
     * @param regionTypeId Restrict countries to this region type; required if regionName is supplied (optional)
     * @param regionName Restrict countries to this region name; required if regionTypeId is supplied (optional)
     * @param sort The term to sort the result countries by. (optional, default to key)
     * @param order The direction to sort the result countries by. (optional, default to ascending)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Request was successful </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> marketId is required&lt;br&gt;regionTypeId is not a valid integer&lt;br&gt;regionName is required when regionTypeId is provided&lt;br&gt;regionTypeId is required when regionName is provided </td><td>  -  </td></tr>
        <tr><td> 429 </td><td> Too many requests received within interval </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal server error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getCountriesCall(String marketId, Integer regionTypeId, String regionName, String sort, String order, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v1/countries";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (marketId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("marketId", marketId));
        }

        if (regionTypeId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("regionTypeId", regionTypeId));
        }

        if (regionName != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("regionName", regionName));
        }

        if (sort != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("sort", sort));
        }

        if (order != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("order", order));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getCountriesValidateBeforeCall(String marketId, Integer regionTypeId, String regionName, String sort, String order, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'marketId' is set
        if (marketId == null) {
            throw new ApiException("Missing the required parameter 'marketId' when calling getCountries(Async)");
        }

        return getCountriesCall(marketId, regionTypeId, regionName, sort, order, _callback);

    }

    /**
     * Retrieves summary country information for the provided marketId and filters
     * Authorization is not required
     * @param marketId MarketId in which the request is being made, and for which responses should be localized (required)
     * @param regionTypeId Restrict countries to this region type; required if regionName is supplied (optional)
     * @param regionName Restrict countries to this region name; required if regionTypeId is supplied (optional)
     * @param sort The term to sort the result countries by. (optional, default to key)
     * @param order The direction to sort the result countries by. (optional, default to ascending)
     * @return List&lt;CountrySummary&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Request was successful </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> marketId is required&lt;br&gt;regionTypeId is not a valid integer&lt;br&gt;regionName is required when regionTypeId is provided&lt;br&gt;regionTypeId is required when regionName is provided </td><td>  -  </td></tr>
        <tr><td> 429 </td><td> Too many requests received within interval </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal server error </td><td>  -  </td></tr>
     </table>
     */
    public List<CountrySummary> getCountries(String marketId, Integer regionTypeId, String regionName, String sort, String order) throws ApiException {
        ApiResponse<List<CountrySummary>> localVarResp = getCountriesWithHttpInfo(marketId, regionTypeId, regionName, sort, order);
        return localVarResp.getData();
    }

    /**
     * Retrieves summary country information for the provided marketId and filters
     * Authorization is not required
     * @param marketId MarketId in which the request is being made, and for which responses should be localized (required)
     * @param regionTypeId Restrict countries to this region type; required if regionName is supplied (optional)
     * @param regionName Restrict countries to this region name; required if regionTypeId is supplied (optional)
     * @param sort The term to sort the result countries by. (optional, default to key)
     * @param order The direction to sort the result countries by. (optional, default to ascending)
     * @return ApiResponse&lt;List&lt;CountrySummary&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Request was successful </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> marketId is required&lt;br&gt;regionTypeId is not a valid integer&lt;br&gt;regionName is required when regionTypeId is provided&lt;br&gt;regionTypeId is required when regionName is provided </td><td>  -  </td></tr>
        <tr><td> 429 </td><td> Too many requests received within interval </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal server error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<CountrySummary>> getCountriesWithHttpInfo(String marketId, Integer regionTypeId, String regionName, String sort, String order) throws ApiException {
        okhttp3.Call localVarCall = getCountriesValidateBeforeCall(marketId, regionTypeId, regionName, sort, order, null);
        Type localVarReturnType = new TypeToken<List<CountrySummary>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Retrieves summary country information for the provided marketId and filters (asynchronously)
     * Authorization is not required
     * @param marketId MarketId in which the request is being made, and for which responses should be localized (required)
     * @param regionTypeId Restrict countries to this region type; required if regionName is supplied (optional)
     * @param regionName Restrict countries to this region name; required if regionTypeId is supplied (optional)
     * @param sort The term to sort the result countries by. (optional, default to key)
     * @param order The direction to sort the result countries by. (optional, default to ascending)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Request was successful </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> marketId is required&lt;br&gt;regionTypeId is not a valid integer&lt;br&gt;regionName is required when regionTypeId is provided&lt;br&gt;regionTypeId is required when regionName is provided </td><td>  -  </td></tr>
        <tr><td> 429 </td><td> Too many requests received within interval </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal server error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getCountriesAsync(String marketId, Integer regionTypeId, String regionName, String sort, String order, final ApiCallback<List<CountrySummary>> _callback) throws ApiException {

        okhttp3.Call localVarCall = getCountriesValidateBeforeCall(marketId, regionTypeId, regionName, sort, order, _callback);
        Type localVarReturnType = new TypeToken<List<CountrySummary>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getCountry
     * @param countryKey The country key (required)
     * @param marketId MarketId in which the request is being made, and for which responses should be localized (required)
     * @param sort The term to sort the result country states by. (optional, default to key)
     * @param order The direction to sort the result country states by. (optional, default to ascending)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Request was successful </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Country not found </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> marketId is required </td><td>  -  </td></tr>
        <tr><td> 429 </td><td> Too many requests received within interval </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal server error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getCountryCall(String countryKey, String marketId, String sort, String order, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v1/countries/{countryKey}"
            .replace("{" + "countryKey" + "}", localVarApiClient.escapeString(countryKey.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (marketId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("marketId", marketId));
        }

        if (sort != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("sort", sort));
        }

        if (order != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("order", order));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getCountryValidateBeforeCall(String countryKey, String marketId, String sort, String order, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'countryKey' is set
        if (countryKey == null) {
            throw new ApiException("Missing the required parameter 'countryKey' when calling getCountry(Async)");
        }

        // verify the required parameter 'marketId' is set
        if (marketId == null) {
            throw new ApiException("Missing the required parameter 'marketId' when calling getCountry(Async)");
        }

        return getCountryCall(countryKey, marketId, sort, order, _callback);

    }

    /**
     * Retrieves country and summary state information for provided countryKey
     * Authorization is not required
     * @param countryKey The country key (required)
     * @param marketId MarketId in which the request is being made, and for which responses should be localized (required)
     * @param sort The term to sort the result country states by. (optional, default to key)
     * @param order The direction to sort the result country states by. (optional, default to ascending)
     * @return List&lt;Country&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Request was successful </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Country not found </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> marketId is required </td><td>  -  </td></tr>
        <tr><td> 429 </td><td> Too many requests received within interval </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal server error </td><td>  -  </td></tr>
     </table>
     */
    public List<Country> getCountry(String countryKey, String marketId, String sort, String order) throws ApiException {
        ApiResponse<List<Country>> localVarResp = getCountryWithHttpInfo(countryKey, marketId, sort, order);
        return localVarResp.getData();
    }

    /**
     * Retrieves country and summary state information for provided countryKey
     * Authorization is not required
     * @param countryKey The country key (required)
     * @param marketId MarketId in which the request is being made, and for which responses should be localized (required)
     * @param sort The term to sort the result country states by. (optional, default to key)
     * @param order The direction to sort the result country states by. (optional, default to ascending)
     * @return ApiResponse&lt;List&lt;Country&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Request was successful </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Country not found </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> marketId is required </td><td>  -  </td></tr>
        <tr><td> 429 </td><td> Too many requests received within interval </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal server error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<Country>> getCountryWithHttpInfo(String countryKey, String marketId, String sort, String order) throws ApiException {
        okhttp3.Call localVarCall = getCountryValidateBeforeCall(countryKey, marketId, sort, order, null);
        Type localVarReturnType = new TypeToken<List<Country>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Retrieves country and summary state information for provided countryKey (asynchronously)
     * Authorization is not required
     * @param countryKey The country key (required)
     * @param marketId MarketId in which the request is being made, and for which responses should be localized (required)
     * @param sort The term to sort the result country states by. (optional, default to key)
     * @param order The direction to sort the result country states by. (optional, default to ascending)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Request was successful </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Country not found </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> marketId is required </td><td>  -  </td></tr>
        <tr><td> 429 </td><td> Too many requests received within interval </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal server error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getCountryAsync(String countryKey, String marketId, String sort, String order, final ApiCallback<List<Country>> _callback) throws ApiException {

        okhttp3.Call localVarCall = getCountryValidateBeforeCall(countryKey, marketId, sort, order, _callback);
        Type localVarReturnType = new TypeToken<List<Country>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
