/**
 * 
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#ifndef OAI_OAIV1Api_H
#define OAI_OAIV1Api_H

#include "OAIHelpers.h"
#include "OAIHttpRequest.h"
#include "OAIServerConfiguration.h"
#include "OAIOauth.h"

#include "OAIError.h"
#include "OAIErrorLimit.h"
#include "OAIPasswordError.h"
#include "OAISecret.h"
#include "OAIShopper.h"
#include "OAIShopperId.h"
#include "OAIShopperStatus.h"
#include "OAIShopperUpdate.h"
#include "OAISubaccountCreate.h"
#include <QString>

#include <QObject>
#include <QByteArray>
#include <QStringList>
#include <QList>
#include <QNetworkAccessManager>

namespace OpenAPI {

class OAIV1Api : public QObject {
    Q_OBJECT

public:
    OAIV1Api(const int timeOut = 0);
    ~OAIV1Api();

    void initializeServerConfigs();
    int setDefaultServerValue(int serverIndex,const QString &operation, const QString &variable,const QString &val);
    void setServerIndex(const QString &operation, int serverIndex);
    void setApiKey(const QString &apiKeyName, const QString &apiKey);
    void setBearerToken(const QString &token);
    void setUsername(const QString &username);
    void setPassword(const QString &password);
    void setTimeOut(const int timeOut);
    void setWorkingDirectory(const QString &path);
    void setNetworkAccessManager(QNetworkAccessManager* manager);
    int addServerConfiguration(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables = QMap<QString, OAIServerVariable>());
    void setNewServerForAllOperations(const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void setNewServer(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void addHeaders(const QString &key, const QString &value);
    void enableRequestCompression();
    void enableResponseCompression();
    void abortRequests();
    QString getParamStylePrefix(const QString &style);
    QString getParamStyleSuffix(const QString &style);
    QString getParamStyleDelimiter(const QString &style, const QString &name, bool isExplode);

    /**
    * @param[in]  shopper_id QString [required]
    * @param[in]  oai_secret OAISecret [required]
    */
    virtual void changePassword(const QString &shopper_id, const OAISecret &oai_secret);

    /**
    * @param[in]  oai_subaccount_create OAISubaccountCreate [required]
    */
    virtual void createSubaccount(const OAISubaccountCreate &oai_subaccount_create);

    /**
    * @param[in]  shopper_id QString [required]
    * @param[in]  includes QList<QString> [optional]
    */
    virtual void get(const QString &shopper_id, const ::OpenAPI::OptionalParam<QList<QString>> &includes = ::OpenAPI::OptionalParam<QList<QString>>());

    /**
    * @param[in]  shopper_id QString [required]
    * @param[in]  audit_client_ip QString [required]
    */
    virtual void getStatus(const QString &shopper_id, const QString &audit_client_ip);

    /**
    * @param[in]  shopper_id QString [required]
    * @param[in]  audit_client_ip QString [required]
    */
    virtual void r_delete(const QString &shopper_id, const QString &audit_client_ip);

    /**
    * @param[in]  shopper_id QString [required]
    * @param[in]  oai_shopper_update OAIShopperUpdate [required]
    */
    virtual void update(const QString &shopper_id, const OAIShopperUpdate &oai_shopper_update);


private:
    QMap<QString,int> _serverIndices;
    QMap<QString,QList<OAIServerConfiguration>> _serverConfigs;
    QMap<QString, QString> _apiKeys;
    QString _bearerToken;
    QString _username;
    QString _password;
    int _timeOut;
    QString _workingDirectory;
    QNetworkAccessManager* _manager;
    QMap<QString, QString> _defaultHeaders;
    bool _isResponseCompressionEnabled;
    bool _isRequestCompressionEnabled;
    OAIHttpRequestInput _latestInput;
    OAIHttpRequestWorker *_latestWorker;
    QStringList _latestScope;
    OauthCode _authFlow;
    OauthImplicit _implicitFlow;
    OauthCredentials _credentialFlow;
    OauthPassword _passwordFlow;
    int _OauthMethod = 0;

    void changePasswordCallback(OAIHttpRequestWorker *worker);
    void createSubaccountCallback(OAIHttpRequestWorker *worker);
    void getCallback(OAIHttpRequestWorker *worker);
    void getStatusCallback(OAIHttpRequestWorker *worker);
    void r_deleteCallback(OAIHttpRequestWorker *worker);
    void updateCallback(OAIHttpRequestWorker *worker);

Q_SIGNALS:

    void changePasswordSignal(OAIShopperId summary);
    void createSubaccountSignal(OAIShopperId summary);
    void getSignal(OAIShopper summary);
    void getStatusSignal(OAIShopperStatus summary);
    void r_deleteSignal();
    void updateSignal(OAIShopperId summary);


    void changePasswordSignalFull(OAIHttpRequestWorker *worker, OAIShopperId summary);
    void createSubaccountSignalFull(OAIHttpRequestWorker *worker, OAIShopperId summary);
    void getSignalFull(OAIHttpRequestWorker *worker, OAIShopper summary);
    void getStatusSignalFull(OAIHttpRequestWorker *worker, OAIShopperStatus summary);
    void r_deleteSignalFull(OAIHttpRequestWorker *worker);
    void updateSignalFull(OAIHttpRequestWorker *worker, OAIShopperId summary);

    Q_DECL_DEPRECATED_X("Use changePasswordSignalError() instead")
    void changePasswordSignalE(OAIShopperId summary, QNetworkReply::NetworkError error_type, QString error_str);
    void changePasswordSignalError(OAIShopperId summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use createSubaccountSignalError() instead")
    void createSubaccountSignalE(OAIShopperId summary, QNetworkReply::NetworkError error_type, QString error_str);
    void createSubaccountSignalError(OAIShopperId summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getSignalError() instead")
    void getSignalE(OAIShopper summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getSignalError(OAIShopper summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getStatusSignalError() instead")
    void getStatusSignalE(OAIShopperStatus summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getStatusSignalError(OAIShopperStatus summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use r_deleteSignalError() instead")
    void r_deleteSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void r_deleteSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use updateSignalError() instead")
    void updateSignalE(OAIShopperId summary, QNetworkReply::NetworkError error_type, QString error_str);
    void updateSignalError(OAIShopperId summary, QNetworkReply::NetworkError error_type, const QString &error_str);

    Q_DECL_DEPRECATED_X("Use changePasswordSignalErrorFull() instead")
    void changePasswordSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void changePasswordSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use createSubaccountSignalErrorFull() instead")
    void createSubaccountSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void createSubaccountSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getSignalErrorFull() instead")
    void getSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getStatusSignalErrorFull() instead")
    void getStatusSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getStatusSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use r_deleteSignalErrorFull() instead")
    void r_deleteSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void r_deleteSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use updateSignalErrorFull() instead")
    void updateSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void updateSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);

    void abortRequestsSignal();
    void allPendingRequestsCompleted();

public Q_SLOTS:
    void tokenAvailable();
};

} // namespace OpenAPI
#endif
