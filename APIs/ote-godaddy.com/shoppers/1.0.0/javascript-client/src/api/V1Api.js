/**
 * 
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import Error from '../model/Error';
import ErrorLimit from '../model/ErrorLimit';
import PasswordError from '../model/PasswordError';
import Secret from '../model/Secret';
import Shopper from '../model/Shopper';
import ShopperId from '../model/ShopperId';
import ShopperStatus from '../model/ShopperStatus';
import ShopperUpdate from '../model/ShopperUpdate';
import SubaccountCreate from '../model/SubaccountCreate';

/**
* V1 service.
* @module api/V1Api
* @version 1.0.0
*/
export default class V1Api {

    /**
    * Constructs a new V1Api. 
    * @alias module:api/V1Api
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the callDelete operation.
     * @callback module:api/V1Api~callDeleteCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Request the deletion of a shopper profile
     * <strong>Notes:</strong><ul><li>Shopper deletion is not supported in OTE</li><li>**shopperId** is **not the same** as **customerId**.  **shopperId** is a number of max length 10 digits (*ex:* 1234567890) whereas **customerId** is a UUIDv4 (*ex:* 295e3bc3-b3b9-4d95-aae5-ede41a994d13)</li></ul>
     * @param {String} shopperId The ID of the shopper to delete. Must agree with the shopper id on the token or header, if present. *Note*: **shopperId** is **not the same** as **customerId**.  **shopperId** is a number of max length 10 digits (*ex:* 1234567890) whereas **customerId** is a UUIDv4 (*ex:* 295e3bc3-b3b9-4d95-aae5-ede41a994d13)
     * @param {String} auditClientIp The client IP of the user who originated the request leading to this call.
     * @param {module:api/V1Api~callDeleteCallback} callback The callback function, accepting three arguments: error, data, response
     */
    callDelete(shopperId, auditClientIp, callback) {
      let postBody = null;
      // verify the required parameter 'shopperId' is set
      if (shopperId === undefined || shopperId === null) {
        throw new Error("Missing the required parameter 'shopperId' when calling callDelete");
      }
      // verify the required parameter 'auditClientIp' is set
      if (auditClientIp === undefined || auditClientIp === null) {
        throw new Error("Missing the required parameter 'auditClientIp' when calling callDelete");
      }

      let pathParams = {
        'shopperId': shopperId
      };
      let queryParams = {
        'auditClientIp': auditClientIp
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/javascript', 'application/json', 'application/xml', 'text/javascript', 'text/xml'];
      let returnType = null;
      return this.apiClient.callApi(
        '/v1/shoppers/{shopperId}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the changePassword operation.
     * @callback module:api/V1Api~changePasswordCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ShopperId} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Set subaccount's password
     * <strong>Notes:</strong><ul><li>Password set is only supported by API Resellers setting subaccount passwords.</li><li>**shopperId** is **not the same** as **customerId**.  **shopperId** is a number of max length 10 digits (*ex:* 1234567890) whereas **customerId** is a UUIDv4 (*ex:* 295e3bc3-b3b9-4d95-aae5-ede41a994d13)</li></ul>
     * @param {String} shopperId Shopper whose password will be set
     * @param {module:model/Secret} secret The value to set the subaccount's password to
     * @param {module:api/V1Api~changePasswordCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ShopperId}
     */
    changePassword(shopperId, secret, callback) {
      let postBody = secret;
      // verify the required parameter 'shopperId' is set
      if (shopperId === undefined || shopperId === null) {
        throw new Error("Missing the required parameter 'shopperId' when calling changePassword");
      }
      // verify the required parameter 'secret' is set
      if (secret === undefined || secret === null) {
        throw new Error("Missing the required parameter 'secret' when calling changePassword");
      }

      let pathParams = {
        'shopperId': shopperId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = ShopperId;
      return this.apiClient.callApi(
        '/v1/shoppers/{shopperId}/factors/password', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the createSubaccount operation.
     * @callback module:api/V1Api~createSubaccountCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ShopperId} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Create a Subaccount owned by the authenticated Reseller
     * @param {module:model/SubaccountCreate} subaccountCreate The subaccount to create
     * @param {module:api/V1Api~createSubaccountCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ShopperId}
     */
    createSubaccount(subaccountCreate, callback) {
      let postBody = subaccountCreate;
      // verify the required parameter 'subaccountCreate' is set
      if (subaccountCreate === undefined || subaccountCreate === null) {
        throw new Error("Missing the required parameter 'subaccountCreate' when calling createSubaccount");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json', 'application/xml', 'text/xml'];
      let accepts = ['application/javascript', 'application/json', 'application/xml', 'text/javascript', 'text/xml'];
      let returnType = ShopperId;
      return this.apiClient.callApi(
        '/v1/shoppers/subaccount', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the get operation.
     * @callback module:api/V1Api~getCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Shopper} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get details for the specified Shopper
     * <strong>Notes:</strong><ul><li>**shopperId** is **not the same** as **customerId**.  **shopperId** is a number of max length 10 digits (*ex:* 1234567890) whereas **customerId** is a UUIDv4 (*ex:* 295e3bc3-b3b9-4d95-aae5-ede41a994d13)</li></ul>
     * @param {String} shopperId Shopper whose details are to be retrieved
     * @param {Object} opts Optional parameters
     * @param {Array.<module:model/String>} [includes] Additional properties to be included in the response shopper object
     * @param {module:api/V1Api~getCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Shopper}
     */
    get(shopperId, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'shopperId' is set
      if (shopperId === undefined || shopperId === null) {
        throw new Error("Missing the required parameter 'shopperId' when calling get");
      }

      let pathParams = {
        'shopperId': shopperId
      };
      let queryParams = {
        'includes': this.apiClient.buildCollectionParam(opts['includes'], 'csv')
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/javascript', 'application/json', 'application/xml', 'text/javascript', 'text/xml'];
      let returnType = Shopper;
      return this.apiClient.callApi(
        '/v1/shoppers/{shopperId}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getStatus operation.
     * @callback module:api/V1Api~getStatusCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ShopperStatus} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get details for the specified Shopper
     * <strong>Notes:</strong><ul><li>**shopperId** is **not the same** as **customerId**. **shopperId** is a number of max length 10 digits (*ex:* 1234567890) whereas **customerId** is a UUIDv4 (*ex:* 295e3bc3-b3b9-4d95-aae5-ede41a994d13)</li></ul>
     * @param {String} shopperId The ID of the shopper to retrieve. Must agree with the shopper id on the token or header, if present
     * @param {String} auditClientIp The client IP of the user who originated the request leading to this call.
     * @param {module:api/V1Api~getStatusCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ShopperStatus}
     */
    getStatus(shopperId, auditClientIp, callback) {
      let postBody = null;
      // verify the required parameter 'shopperId' is set
      if (shopperId === undefined || shopperId === null) {
        throw new Error("Missing the required parameter 'shopperId' when calling getStatus");
      }
      // verify the required parameter 'auditClientIp' is set
      if (auditClientIp === undefined || auditClientIp === null) {
        throw new Error("Missing the required parameter 'auditClientIp' when calling getStatus");
      }

      let pathParams = {
        'shopperId': shopperId
      };
      let queryParams = {
        'auditClientIp': auditClientIp
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/javascript', 'application/json', 'application/xml', 'text/javascript', 'text/xml'];
      let returnType = ShopperStatus;
      return this.apiClient.callApi(
        '/v1/shoppers/{shopperId}/status', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the update operation.
     * @callback module:api/V1Api~updateCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ShopperId} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update details for the specified Shopper
     * <strong>Notes:</strong><ul><li>**shopperId** is **not the same** as **customerId**.  **shopperId** is a number of max length 10 digits (*ex:* 1234567890) whereas **customerId** is a UUIDv4 (*ex:* 295e3bc3-b3b9-4d95-aae5-ede41a994d13)</li></ul>
     * @param {String} shopperId The ID of the Shopper to update
     * @param {module:model/ShopperUpdate} shopperUpdate The Shopper details to update
     * @param {module:api/V1Api~updateCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ShopperId}
     */
    update(shopperId, shopperUpdate, callback) {
      let postBody = shopperUpdate;
      // verify the required parameter 'shopperId' is set
      if (shopperId === undefined || shopperId === null) {
        throw new Error("Missing the required parameter 'shopperId' when calling update");
      }
      // verify the required parameter 'shopperUpdate' is set
      if (shopperUpdate === undefined || shopperUpdate === null) {
        throw new Error("Missing the required parameter 'shopperUpdate' when calling update");
      }

      let pathParams = {
        'shopperId': shopperId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json', 'application/xml', 'text/xml'];
      let accepts = ['application/javascript', 'application/json', 'application/xml', 'text/javascript', 'text/xml'];
      let returnType = ShopperId;
      return this.apiClient.callApi(
        '/v1/shoppers/{shopperId}', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
