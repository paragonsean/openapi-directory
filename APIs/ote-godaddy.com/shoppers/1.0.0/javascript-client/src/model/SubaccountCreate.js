/**
 * 
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The SubaccountCreate model module.
 * @module model/SubaccountCreate
 * @version 1.0.0
 */
class SubaccountCreate {
    /**
     * Constructs a new <code>SubaccountCreate</code>.
     * @alias module:model/SubaccountCreate
     * @param email {String} 
     * @param nameFirst {String} 
     * @param nameLast {String} 
     * @param password {String} 
     */
    constructor(email, nameFirst, nameLast, password) { 
        
        SubaccountCreate.initialize(this, email, nameFirst, nameLast, password);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, email, nameFirst, nameLast, password) { 
        obj['email'] = email;
        obj['marketId'] = 'en-US';
        obj['nameFirst'] = nameFirst;
        obj['nameLast'] = nameLast;
        obj['password'] = password;
    }

    /**
     * Constructs a <code>SubaccountCreate</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/SubaccountCreate} obj Optional instance to populate.
     * @return {module:model/SubaccountCreate} The populated <code>SubaccountCreate</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new SubaccountCreate();

            if (data.hasOwnProperty('email')) {
                obj['email'] = ApiClient.convertToType(data['email'], 'String');
            }
            if (data.hasOwnProperty('externalId')) {
                obj['externalId'] = ApiClient.convertToType(data['externalId'], 'Number');
            }
            if (data.hasOwnProperty('marketId')) {
                obj['marketId'] = ApiClient.convertToType(data['marketId'], 'String');
            }
            if (data.hasOwnProperty('nameFirst')) {
                obj['nameFirst'] = ApiClient.convertToType(data['nameFirst'], 'String');
            }
            if (data.hasOwnProperty('nameLast')) {
                obj['nameLast'] = ApiClient.convertToType(data['nameLast'], 'String');
            }
            if (data.hasOwnProperty('password')) {
                obj['password'] = ApiClient.convertToType(data['password'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>SubaccountCreate</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>SubaccountCreate</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of SubaccountCreate.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // ensure the json data is a string
        if (data['email'] && !(typeof data['email'] === 'string' || data['email'] instanceof String)) {
            throw new Error("Expected the field `email` to be a primitive type in the JSON string but got " + data['email']);
        }
        // ensure the json data is a string
        if (data['marketId'] && !(typeof data['marketId'] === 'string' || data['marketId'] instanceof String)) {
            throw new Error("Expected the field `marketId` to be a primitive type in the JSON string but got " + data['marketId']);
        }
        // ensure the json data is a string
        if (data['nameFirst'] && !(typeof data['nameFirst'] === 'string' || data['nameFirst'] instanceof String)) {
            throw new Error("Expected the field `nameFirst` to be a primitive type in the JSON string but got " + data['nameFirst']);
        }
        // ensure the json data is a string
        if (data['nameLast'] && !(typeof data['nameLast'] === 'string' || data['nameLast'] instanceof String)) {
            throw new Error("Expected the field `nameLast` to be a primitive type in the JSON string but got " + data['nameLast']);
        }
        // ensure the json data is a string
        if (data['password'] && !(typeof data['password'] === 'string' || data['password'] instanceof String)) {
            throw new Error("Expected the field `password` to be a primitive type in the JSON string but got " + data['password']);
        }

        return true;
    }


}

SubaccountCreate.RequiredProperties = ["email", "nameFirst", "nameLast", "password"];

/**
 * @member {String} email
 */
SubaccountCreate.prototype['email'] = undefined;

/**
 * @member {Number} externalId
 */
SubaccountCreate.prototype['externalId'] = undefined;

/**
 * @member {module:model/SubaccountCreate.MarketIdEnum} marketId
 * @default 'en-US'
 */
SubaccountCreate.prototype['marketId'] = 'en-US';

/**
 * @member {String} nameFirst
 */
SubaccountCreate.prototype['nameFirst'] = undefined;

/**
 * @member {String} nameLast
 */
SubaccountCreate.prototype['nameLast'] = undefined;

/**
 * @member {String} password
 */
SubaccountCreate.prototype['password'] = undefined;





/**
 * Allowed values for the <code>marketId</code> property.
 * @enum {String}
 * @readonly
 */
SubaccountCreate['MarketIdEnum'] = {

    /**
     * value: "da-DK"
     * @const
     */
    "da-DK": "da-DK",

    /**
     * value: "de-AT"
     * @const
     */
    "de-AT": "de-AT",

    /**
     * value: "de-CH"
     * @const
     */
    "de-CH": "de-CH",

    /**
     * value: "de-DE"
     * @const
     */
    "de-DE": "de-DE",

    /**
     * value: "el-GR"
     * @const
     */
    "el-GR": "el-GR",

    /**
     * value: "en-AE"
     * @const
     */
    "en-AE": "en-AE",

    /**
     * value: "en-AU"
     * @const
     */
    "en-AU": "en-AU",

    /**
     * value: "en-CA"
     * @const
     */
    "en-CA": "en-CA",

    /**
     * value: "en-GB"
     * @const
     */
    "en-GB": "en-GB",

    /**
     * value: "en-HK"
     * @const
     */
    "en-HK": "en-HK",

    /**
     * value: "en-IE"
     * @const
     */
    "en-IE": "en-IE",

    /**
     * value: "en-IL"
     * @const
     */
    "en-IL": "en-IL",

    /**
     * value: "en-IN"
     * @const
     */
    "en-IN": "en-IN",

    /**
     * value: "en-MY"
     * @const
     */
    "en-MY": "en-MY",

    /**
     * value: "en-NZ"
     * @const
     */
    "en-NZ": "en-NZ",

    /**
     * value: "en-PH"
     * @const
     */
    "en-PH": "en-PH",

    /**
     * value: "en-PK"
     * @const
     */
    "en-PK": "en-PK",

    /**
     * value: "en-SG"
     * @const
     */
    "en-SG": "en-SG",

    /**
     * value: "en-US"
     * @const
     */
    "en-US": "en-US",

    /**
     * value: "en-ZA"
     * @const
     */
    "en-ZA": "en-ZA",

    /**
     * value: "es-AR"
     * @const
     */
    "es-AR": "es-AR",

    /**
     * value: "es-CL"
     * @const
     */
    "es-CL": "es-CL",

    /**
     * value: "es-CO"
     * @const
     */
    "es-CO": "es-CO",

    /**
     * value: "es-ES"
     * @const
     */
    "es-ES": "es-ES",

    /**
     * value: "es-MX"
     * @const
     */
    "es-MX": "es-MX",

    /**
     * value: "es-PE"
     * @const
     */
    "es-PE": "es-PE",

    /**
     * value: "es-US"
     * @const
     */
    "es-US": "es-US",

    /**
     * value: "es-VE"
     * @const
     */
    "es-VE": "es-VE",

    /**
     * value: "fi-FI"
     * @const
     */
    "fi-FI": "fi-FI",

    /**
     * value: "fr-BE"
     * @const
     */
    "fr-BE": "fr-BE",

    /**
     * value: "fr-CA"
     * @const
     */
    "fr-CA": "fr-CA",

    /**
     * value: "fr-CH"
     * @const
     */
    "fr-CH": "fr-CH",

    /**
     * value: "fr-FR"
     * @const
     */
    "fr-FR": "fr-FR",

    /**
     * value: "hi-IN"
     * @const
     */
    "hi-IN": "hi-IN",

    /**
     * value: "id-ID"
     * @const
     */
    "id-ID": "id-ID",

    /**
     * value: "it-CH"
     * @const
     */
    "it-CH": "it-CH",

    /**
     * value: "it-IT"
     * @const
     */
    "it-IT": "it-IT",

    /**
     * value: "ja-JP"
     * @const
     */
    "ja-JP": "ja-JP",

    /**
     * value: "ko-KR"
     * @const
     */
    "ko-KR": "ko-KR",

    /**
     * value: "mr-IN"
     * @const
     */
    "mr-IN": "mr-IN",

    /**
     * value: "nb-NO"
     * @const
     */
    "nb-NO": "nb-NO",

    /**
     * value: "nl-BE"
     * @const
     */
    "nl-BE": "nl-BE",

    /**
     * value: "nl-NL"
     * @const
     */
    "nl-NL": "nl-NL",

    /**
     * value: "pl-PL"
     * @const
     */
    "pl-PL": "pl-PL",

    /**
     * value: "pt-BR"
     * @const
     */
    "pt-BR": "pt-BR",

    /**
     * value: "pt-PT"
     * @const
     */
    "pt-PT": "pt-PT",

    /**
     * value: "ru-RU"
     * @const
     */
    "ru-RU": "ru-RU",

    /**
     * value: "sv-SE"
     * @const
     */
    "sv-SE": "sv-SE",

    /**
     * value: "ta-IN"
     * @const
     */
    "ta-IN": "ta-IN",

    /**
     * value: "th-TH"
     * @const
     */
    "th-TH": "th-TH",

    /**
     * value: "tr-TR"
     * @const
     */
    "tr-TR": "tr-TR",

    /**
     * value: "uk-UA"
     * @const
     */
    "uk-UA": "uk-UA",

    /**
     * value: "vi-VN"
     * @const
     */
    "vi-VN": "vi-VN",

    /**
     * value: "zh-HK"
     * @const
     */
    "zh-HK": "zh-HK",

    /**
     * value: "zh-SG"
     * @const
     */
    "zh-SG": "zh-SG",

    /**
     * value: "zh-TW"
     * @const
     */
    "zh-TW": "zh-TW"
};



export default SubaccountCreate;

