/**
 * 
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The PasswordError model module.
 * @module model/PasswordError
 * @version 1.0.0
 */
class PasswordError {
    /**
     * Constructs a new <code>PasswordError</code>.
     * @alias module:model/PasswordError
     */
    constructor() { 
        
        PasswordError.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>PasswordError</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/PasswordError} obj Optional instance to populate.
     * @return {module:model/PasswordError} The populated <code>PasswordError</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new PasswordError();

            if (data.hasOwnProperty('code')) {
                obj['code'] = ApiClient.convertToType(data['code'], 'String');
            }
            if (data.hasOwnProperty('message')) {
                obj['message'] = ApiClient.convertToType(data['message'], 'String');
            }
            if (data.hasOwnProperty('type')) {
                obj['type'] = ApiClient.convertToType(data['type'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>PasswordError</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>PasswordError</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['code'] && !(typeof data['code'] === 'string' || data['code'] instanceof String)) {
            throw new Error("Expected the field `code` to be a primitive type in the JSON string but got " + data['code']);
        }
        // ensure the json data is a string
        if (data['message'] && !(typeof data['message'] === 'string' || data['message'] instanceof String)) {
            throw new Error("Expected the field `message` to be a primitive type in the JSON string but got " + data['message']);
        }
        // ensure the json data is a string
        if (data['type'] && !(typeof data['type'] === 'string' || data['type'] instanceof String)) {
            throw new Error("Expected the field `type` to be a primitive type in the JSON string but got " + data['type']);
        }

        return true;
    }


}



/**
 * Short identifier for the error, suitable for indicating the specific error within client code
 * @member {module:model/PasswordError.CodeEnum} code
 */
PasswordError.prototype['code'] = undefined;

/**
 * Human-readable, English description of the error
 * @member {String} message
 */
PasswordError.prototype['message'] = undefined;

/**
 * Response type, always 'error'
 * @member {String} type
 */
PasswordError.prototype['type'] = undefined;





/**
 * Allowed values for the <code>code</code> property.
 * @enum {String}
 * @readonly
 */
PasswordError['CodeEnum'] = {

    /**
     * value: "PW_BLACK_LIST"
     * @const
     */
    "BLACK_LIST": "PW_BLACK_LIST",

    /**
     * value: "PW_TOO_SHORT"
     * @const
     */
    "TOO_SHORT": "PW_TOO_SHORT",

    /**
     * value: "PW_TOO_LONG"
     * @const
     */
    "TOO_LONG": "PW_TOO_LONG",

    /**
     * value: "PW_MISSING_UC"
     * @const
     */
    "MISSING_UC": "PW_MISSING_UC",

    /**
     * value: "PW_MISSING_NUM"
     * @const
     */
    "MISSING_NUM": "PW_MISSING_NUM",

    /**
     * value: "PW_RECENTLY_USED"
     * @const
     */
    "RECENTLY_USED": "PW_RECENTLY_USED",

    /**
     * value: "PW_NOT_UNIQUE"
     * @const
     */
    "NOT_UNIQUE": "PW_NOT_UNIQUE"
};



export default PasswordError;

