/**
 * 
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The ShopperId model module.
 * @module model/ShopperId
 * @version 1.0.0
 */
class ShopperId {
    /**
     * Constructs a new <code>ShopperId</code>.
     * @alias module:model/ShopperId
     * @param shopperId {String} 
     */
    constructor(shopperId) { 
        
        ShopperId.initialize(this, shopperId);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, shopperId) { 
        obj['shopperId'] = shopperId;
    }

    /**
     * Constructs a <code>ShopperId</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/ShopperId} obj Optional instance to populate.
     * @return {module:model/ShopperId} The populated <code>ShopperId</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new ShopperId();

            if (data.hasOwnProperty('customerId')) {
                obj['customerId'] = ApiClient.convertToType(data['customerId'], 'String');
            }
            if (data.hasOwnProperty('shopperId')) {
                obj['shopperId'] = ApiClient.convertToType(data['shopperId'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>ShopperId</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>ShopperId</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of ShopperId.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // ensure the json data is a string
        if (data['customerId'] && !(typeof data['customerId'] === 'string' || data['customerId'] instanceof String)) {
            throw new Error("Expected the field `customerId` to be a primitive type in the JSON string but got " + data['customerId']);
        }
        // ensure the json data is a string
        if (data['shopperId'] && !(typeof data['shopperId'] === 'string' || data['shopperId'] instanceof String)) {
            throw new Error("Expected the field `shopperId` to be a primitive type in the JSON string but got " + data['shopperId']);
        }

        return true;
    }


}

ShopperId.RequiredProperties = ["shopperId"];

/**
 * Identifier for the Customer record associated with this Shopper record. This is an alternate identifier that some systems use to identify an individual shopper record
 * @member {String} customerId
 */
ShopperId.prototype['customerId'] = undefined;

/**
 * @member {String} shopperId
 */
ShopperId.prototype['shopperId'] = undefined;






export default ShopperId;

