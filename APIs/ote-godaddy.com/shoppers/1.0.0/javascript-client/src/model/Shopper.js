/**
 * 
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The Shopper model module.
 * @module model/Shopper
 * @version 1.0.0
 */
class Shopper {
    /**
     * Constructs a new <code>Shopper</code>.
     * @alias module:model/Shopper
     * @param email {String} 
     * @param marketId {String} 
     * @param nameFirst {String} 
     * @param nameLast {String} 
     * @param shopperId {String} 
     */
    constructor(email, marketId, nameFirst, nameLast, shopperId) { 
        
        Shopper.initialize(this, email, marketId, nameFirst, nameLast, shopperId);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, email, marketId, nameFirst, nameLast, shopperId) { 
        obj['email'] = email;
        obj['marketId'] = marketId || 'en-US';
        obj['nameFirst'] = nameFirst;
        obj['nameLast'] = nameLast;
        obj['shopperId'] = shopperId;
    }

    /**
     * Constructs a <code>Shopper</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/Shopper} obj Optional instance to populate.
     * @return {module:model/Shopper} The populated <code>Shopper</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new Shopper();

            if (data.hasOwnProperty('customerId')) {
                obj['customerId'] = ApiClient.convertToType(data['customerId'], 'String');
            }
            if (data.hasOwnProperty('email')) {
                obj['email'] = ApiClient.convertToType(data['email'], 'String');
            }
            if (data.hasOwnProperty('externalId')) {
                obj['externalId'] = ApiClient.convertToType(data['externalId'], 'Number');
            }
            if (data.hasOwnProperty('marketId')) {
                obj['marketId'] = ApiClient.convertToType(data['marketId'], 'String');
            }
            if (data.hasOwnProperty('nameFirst')) {
                obj['nameFirst'] = ApiClient.convertToType(data['nameFirst'], 'String');
            }
            if (data.hasOwnProperty('nameLast')) {
                obj['nameLast'] = ApiClient.convertToType(data['nameLast'], 'String');
            }
            if (data.hasOwnProperty('shopperId')) {
                obj['shopperId'] = ApiClient.convertToType(data['shopperId'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>Shopper</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>Shopper</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of Shopper.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // ensure the json data is a string
        if (data['customerId'] && !(typeof data['customerId'] === 'string' || data['customerId'] instanceof String)) {
            throw new Error("Expected the field `customerId` to be a primitive type in the JSON string but got " + data['customerId']);
        }
        // ensure the json data is a string
        if (data['email'] && !(typeof data['email'] === 'string' || data['email'] instanceof String)) {
            throw new Error("Expected the field `email` to be a primitive type in the JSON string but got " + data['email']);
        }
        // ensure the json data is a string
        if (data['marketId'] && !(typeof data['marketId'] === 'string' || data['marketId'] instanceof String)) {
            throw new Error("Expected the field `marketId` to be a primitive type in the JSON string but got " + data['marketId']);
        }
        // ensure the json data is a string
        if (data['nameFirst'] && !(typeof data['nameFirst'] === 'string' || data['nameFirst'] instanceof String)) {
            throw new Error("Expected the field `nameFirst` to be a primitive type in the JSON string but got " + data['nameFirst']);
        }
        // ensure the json data is a string
        if (data['nameLast'] && !(typeof data['nameLast'] === 'string' || data['nameLast'] instanceof String)) {
            throw new Error("Expected the field `nameLast` to be a primitive type in the JSON string but got " + data['nameLast']);
        }
        // ensure the json data is a string
        if (data['shopperId'] && !(typeof data['shopperId'] === 'string' || data['shopperId'] instanceof String)) {
            throw new Error("Expected the field `shopperId` to be a primitive type in the JSON string but got " + data['shopperId']);
        }

        return true;
    }


}

Shopper.RequiredProperties = ["email", "marketId", "nameFirst", "nameLast", "shopperId"];

/**
 * Identifier for the Customer record associated with this Shopper record. This is an alternate identifier that some systems use to identify an individual shopper record
 * @member {String} customerId
 */
Shopper.prototype['customerId'] = undefined;

/**
 * @member {String} email
 */
Shopper.prototype['email'] = undefined;

/**
 * @member {Number} externalId
 */
Shopper.prototype['externalId'] = undefined;

/**
 * @member {String} marketId
 * @default 'en-US'
 */
Shopper.prototype['marketId'] = 'en-US';

/**
 * @member {String} nameFirst
 */
Shopper.prototype['nameFirst'] = undefined;

/**
 * @member {String} nameLast
 */
Shopper.prototype['nameLast'] = undefined;

/**
 * @member {String} shopperId
 */
Shopper.prototype['shopperId'] = undefined;






export default Shopper;

