# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class SubaccountCreate(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, email: str=None, external_id: int=None, market_id: str='en-US', name_first: str=None, name_last: str=None, password: str=None):
        """SubaccountCreate - a model defined in OpenAPI

        :param email: The email of this SubaccountCreate.
        :param external_id: The external_id of this SubaccountCreate.
        :param market_id: The market_id of this SubaccountCreate.
        :param name_first: The name_first of this SubaccountCreate.
        :param name_last: The name_last of this SubaccountCreate.
        :param password: The password of this SubaccountCreate.
        """
        self.openapi_types = {
            'email': str,
            'external_id': int,
            'market_id': str,
            'name_first': str,
            'name_last': str,
            'password': str
        }

        self.attribute_map = {
            'email': 'email',
            'external_id': 'externalId',
            'market_id': 'marketId',
            'name_first': 'nameFirst',
            'name_last': 'nameLast',
            'password': 'password'
        }

        self._email = email
        self._external_id = external_id
        self._market_id = market_id
        self._name_first = name_first
        self._name_last = name_last
        self._password = password

    @classmethod
    def from_dict(cls, dikt: dict) -> 'SubaccountCreate':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The SubaccountCreate of this SubaccountCreate.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def email(self):
        """Gets the email of this SubaccountCreate.


        :return: The email of this SubaccountCreate.
        :rtype: str
        """
        return self._email

    @email.setter
    def email(self, email):
        """Sets the email of this SubaccountCreate.


        :param email: The email of this SubaccountCreate.
        :type email: str
        """
        if email is None:
            raise ValueError("Invalid value for `email`, must not be `None`")

        self._email = email

    @property
    def external_id(self):
        """Gets the external_id of this SubaccountCreate.


        :return: The external_id of this SubaccountCreate.
        :rtype: int
        """
        return self._external_id

    @external_id.setter
    def external_id(self, external_id):
        """Sets the external_id of this SubaccountCreate.


        :param external_id: The external_id of this SubaccountCreate.
        :type external_id: int
        """

        self._external_id = external_id

    @property
    def market_id(self):
        """Gets the market_id of this SubaccountCreate.


        :return: The market_id of this SubaccountCreate.
        :rtype: str
        """
        return self._market_id

    @market_id.setter
    def market_id(self, market_id):
        """Sets the market_id of this SubaccountCreate.


        :param market_id: The market_id of this SubaccountCreate.
        :type market_id: str
        """
        allowed_values = ["da-DK", "de-AT", "de-CH", "de-DE", "el-GR", "en-AE", "en-AU", "en-CA", "en-GB", "en-HK", "en-IE", "en-IL", "en-IN", "en-MY", "en-NZ", "en-PH", "en-PK", "en-SG", "en-US", "en-ZA", "es-AR", "es-CL", "es-CO", "es-ES", "es-MX", "es-PE", "es-US", "es-VE", "fi-FI", "fr-BE", "fr-CA", "fr-CH", "fr-FR", "hi-IN", "id-ID", "it-CH", "it-IT", "ja-JP", "ko-KR", "mr-IN", "nb-NO", "nl-BE", "nl-NL", "pl-PL", "pt-BR", "pt-PT", "ru-RU", "sv-SE", "ta-IN", "th-TH", "tr-TR", "uk-UA", "vi-VN", "zh-HK", "zh-SG", "zh-TW"]  # noqa: E501
        if market_id not in allowed_values:
            raise ValueError(
                "Invalid value for `market_id` ({0}), must be one of {1}"
                .format(market_id, allowed_values)
            )

        self._market_id = market_id

    @property
    def name_first(self):
        """Gets the name_first of this SubaccountCreate.


        :return: The name_first of this SubaccountCreate.
        :rtype: str
        """
        return self._name_first

    @name_first.setter
    def name_first(self, name_first):
        """Sets the name_first of this SubaccountCreate.


        :param name_first: The name_first of this SubaccountCreate.
        :type name_first: str
        """
        if name_first is None:
            raise ValueError("Invalid value for `name_first`, must not be `None`")

        self._name_first = name_first

    @property
    def name_last(self):
        """Gets the name_last of this SubaccountCreate.


        :return: The name_last of this SubaccountCreate.
        :rtype: str
        """
        return self._name_last

    @name_last.setter
    def name_last(self, name_last):
        """Sets the name_last of this SubaccountCreate.


        :param name_last: The name_last of this SubaccountCreate.
        :type name_last: str
        """
        if name_last is None:
            raise ValueError("Invalid value for `name_last`, must not be `None`")

        self._name_last = name_last

    @property
    def password(self):
        """Gets the password of this SubaccountCreate.


        :return: The password of this SubaccountCreate.
        :rtype: str
        """
        return self._password

    @password.setter
    def password(self, password):
        """Sets the password of this SubaccountCreate.


        :param password: The password of this SubaccountCreate.
        :type password: str
        """
        if password is None:
            raise ValueError("Invalid value for `password`, must not be `None`")

        self._password = password
