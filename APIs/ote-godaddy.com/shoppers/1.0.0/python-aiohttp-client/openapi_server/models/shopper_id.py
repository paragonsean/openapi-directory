# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class ShopperId(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, customer_id: str=None, shopper_id: str=None):
        """ShopperId - a model defined in OpenAPI

        :param customer_id: The customer_id of this ShopperId.
        :param shopper_id: The shopper_id of this ShopperId.
        """
        self.openapi_types = {
            'customer_id': str,
            'shopper_id': str
        }

        self.attribute_map = {
            'customer_id': 'customerId',
            'shopper_id': 'shopperId'
        }

        self._customer_id = customer_id
        self._shopper_id = shopper_id

    @classmethod
    def from_dict(cls, dikt: dict) -> 'ShopperId':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The ShopperId of this ShopperId.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def customer_id(self):
        """Gets the customer_id of this ShopperId.

        Identifier for the Customer record associated with this Shopper record. This is an alternate identifier that some systems use to identify an individual shopper record

        :return: The customer_id of this ShopperId.
        :rtype: str
        """
        return self._customer_id

    @customer_id.setter
    def customer_id(self, customer_id):
        """Sets the customer_id of this ShopperId.

        Identifier for the Customer record associated with this Shopper record. This is an alternate identifier that some systems use to identify an individual shopper record

        :param customer_id: The customer_id of this ShopperId.
        :type customer_id: str
        """

        self._customer_id = customer_id

    @property
    def shopper_id(self):
        """Gets the shopper_id of this ShopperId.


        :return: The shopper_id of this ShopperId.
        :rtype: str
        """
        return self._shopper_id

    @shopper_id.setter
    def shopper_id(self, shopper_id):
        """Sets the shopper_id of this ShopperId.


        :param shopper_id: The shopper_id of this ShopperId.
        :type shopper_id: str
        """
        if shopper_id is None:
            raise ValueError("Invalid value for `shopper_id`, must not be `None`")

        self._shopper_id = shopper_id
