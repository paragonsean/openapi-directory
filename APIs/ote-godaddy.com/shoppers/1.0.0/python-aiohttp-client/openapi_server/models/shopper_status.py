# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class ShopperStatus(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, billing_state: str=None):
        """ShopperStatus - a model defined in OpenAPI

        :param billing_state: The billing_state of this ShopperStatus.
        """
        self.openapi_types = {
            'billing_state': str
        }

        self.attribute_map = {
            'billing_state': 'billingState'
        }

        self._billing_state = billing_state

    @classmethod
    def from_dict(cls, dikt: dict) -> 'ShopperStatus':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The ShopperStatus of this ShopperStatus.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def billing_state(self):
        """Gets the billing_state of this ShopperStatus.

        Indicates the billing state of the Shopper.<br />ABANDONED: The shopper has not been billed in at least 10 years and has no active subscriptions.<br />INACTIVE: The shopper has been billed within the last 10 years but has no active subscriptions.<br />ACTIVE: The shopper has at least one active subscription.

        :return: The billing_state of this ShopperStatus.
        :rtype: str
        """
        return self._billing_state

    @billing_state.setter
    def billing_state(self, billing_state):
        """Sets the billing_state of this ShopperStatus.

        Indicates the billing state of the Shopper.<br />ABANDONED: The shopper has not been billed in at least 10 years and has no active subscriptions.<br />INACTIVE: The shopper has been billed within the last 10 years but has no active subscriptions.<br />ACTIVE: The shopper has at least one active subscription.

        :param billing_state: The billing_state of this ShopperStatus.
        :type billing_state: str
        """
        allowed_values = ["ABANDONED", "INACTIVE", "ACTIVE"]  # noqa: E501
        if billing_state not in allowed_values:
            raise ValueError(
                "Invalid value for `billing_state` ({0}), must be one of {1}"
                .format(billing_state, allowed_values)
            )

        self._billing_state = billing_state
