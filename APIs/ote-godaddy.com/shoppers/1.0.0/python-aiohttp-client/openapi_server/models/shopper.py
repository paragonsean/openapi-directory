# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class Shopper(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, customer_id: str=None, email: str=None, external_id: int=None, market_id: str='en-US', name_first: str=None, name_last: str=None, shopper_id: str=None):
        """Shopper - a model defined in OpenAPI

        :param customer_id: The customer_id of this Shopper.
        :param email: The email of this Shopper.
        :param external_id: The external_id of this Shopper.
        :param market_id: The market_id of this Shopper.
        :param name_first: The name_first of this Shopper.
        :param name_last: The name_last of this Shopper.
        :param shopper_id: The shopper_id of this Shopper.
        """
        self.openapi_types = {
            'customer_id': str,
            'email': str,
            'external_id': int,
            'market_id': str,
            'name_first': str,
            'name_last': str,
            'shopper_id': str
        }

        self.attribute_map = {
            'customer_id': 'customerId',
            'email': 'email',
            'external_id': 'externalId',
            'market_id': 'marketId',
            'name_first': 'nameFirst',
            'name_last': 'nameLast',
            'shopper_id': 'shopperId'
        }

        self._customer_id = customer_id
        self._email = email
        self._external_id = external_id
        self._market_id = market_id
        self._name_first = name_first
        self._name_last = name_last
        self._shopper_id = shopper_id

    @classmethod
    def from_dict(cls, dikt: dict) -> 'Shopper':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Shopper of this Shopper.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def customer_id(self):
        """Gets the customer_id of this Shopper.

        Identifier for the Customer record associated with this Shopper record. This is an alternate identifier that some systems use to identify an individual shopper record

        :return: The customer_id of this Shopper.
        :rtype: str
        """
        return self._customer_id

    @customer_id.setter
    def customer_id(self, customer_id):
        """Sets the customer_id of this Shopper.

        Identifier for the Customer record associated with this Shopper record. This is an alternate identifier that some systems use to identify an individual shopper record

        :param customer_id: The customer_id of this Shopper.
        :type customer_id: str
        """

        self._customer_id = customer_id

    @property
    def email(self):
        """Gets the email of this Shopper.


        :return: The email of this Shopper.
        :rtype: str
        """
        return self._email

    @email.setter
    def email(self, email):
        """Sets the email of this Shopper.


        :param email: The email of this Shopper.
        :type email: str
        """
        if email is None:
            raise ValueError("Invalid value for `email`, must not be `None`")

        self._email = email

    @property
    def external_id(self):
        """Gets the external_id of this Shopper.


        :return: The external_id of this Shopper.
        :rtype: int
        """
        return self._external_id

    @external_id.setter
    def external_id(self, external_id):
        """Sets the external_id of this Shopper.


        :param external_id: The external_id of this Shopper.
        :type external_id: int
        """

        self._external_id = external_id

    @property
    def market_id(self):
        """Gets the market_id of this Shopper.


        :return: The market_id of this Shopper.
        :rtype: str
        """
        return self._market_id

    @market_id.setter
    def market_id(self, market_id):
        """Sets the market_id of this Shopper.


        :param market_id: The market_id of this Shopper.
        :type market_id: str
        """
        if market_id is None:
            raise ValueError("Invalid value for `market_id`, must not be `None`")

        self._market_id = market_id

    @property
    def name_first(self):
        """Gets the name_first of this Shopper.


        :return: The name_first of this Shopper.
        :rtype: str
        """
        return self._name_first

    @name_first.setter
    def name_first(self, name_first):
        """Sets the name_first of this Shopper.


        :param name_first: The name_first of this Shopper.
        :type name_first: str
        """
        if name_first is None:
            raise ValueError("Invalid value for `name_first`, must not be `None`")

        self._name_first = name_first

    @property
    def name_last(self):
        """Gets the name_last of this Shopper.


        :return: The name_last of this Shopper.
        :rtype: str
        """
        return self._name_last

    @name_last.setter
    def name_last(self, name_last):
        """Sets the name_last of this Shopper.


        :param name_last: The name_last of this Shopper.
        :type name_last: str
        """
        if name_last is None:
            raise ValueError("Invalid value for `name_last`, must not be `None`")

        self._name_last = name_last

    @property
    def shopper_id(self):
        """Gets the shopper_id of this Shopper.


        :return: The shopper_id of this Shopper.
        :rtype: str
        """
        return self._shopper_id

    @shopper_id.setter
    def shopper_id(self, shopper_id):
        """Sets the shopper_id of this Shopper.


        :param shopper_id: The shopper_id of this Shopper.
        :type shopper_id: str
        """
        if shopper_id is None:
            raise ValueError("Invalid value for `shopper_id`, must not be `None`")

        self._shopper_id = shopper_id
