/*
 * 
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * ShopperUpdate
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:00:21.952170-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class ShopperUpdate {
  public static final String SERIALIZED_NAME_EMAIL = "email";
  @SerializedName(SERIALIZED_NAME_EMAIL)
  private String email;

  public static final String SERIALIZED_NAME_EXTERNAL_ID = "externalId";
  @SerializedName(SERIALIZED_NAME_EXTERNAL_ID)
  private Integer externalId;

  /**
   * Gets or Sets marketId
   */
  @JsonAdapter(MarketIdEnum.Adapter.class)
  public enum MarketIdEnum {
    DA_DK("da-DK"),
    
    DE_AT("de-AT"),
    
    DE_CH("de-CH"),
    
    DE_DE("de-DE"),
    
    EL_GR("el-GR"),
    
    EN_AE("en-AE"),
    
    EN_AU("en-AU"),
    
    EN_CA("en-CA"),
    
    EN_GB("en-GB"),
    
    EN_HK("en-HK"),
    
    EN_IE("en-IE"),
    
    EN_IL("en-IL"),
    
    EN_IN("en-IN"),
    
    EN_MY("en-MY"),
    
    EN_NZ("en-NZ"),
    
    EN_PH("en-PH"),
    
    EN_PK("en-PK"),
    
    EN_SG("en-SG"),
    
    EN_US("en-US"),
    
    EN_ZA("en-ZA"),
    
    ES_AR("es-AR"),
    
    ES_CL("es-CL"),
    
    ES_CO("es-CO"),
    
    ES_ES("es-ES"),
    
    ES_MX("es-MX"),
    
    ES_PE("es-PE"),
    
    ES_US("es-US"),
    
    ES_VE("es-VE"),
    
    FI_FI("fi-FI"),
    
    FR_BE("fr-BE"),
    
    FR_CA("fr-CA"),
    
    FR_CH("fr-CH"),
    
    FR_FR("fr-FR"),
    
    HI_IN("hi-IN"),
    
    ID_ID("id-ID"),
    
    IT_CH("it-CH"),
    
    IT_IT("it-IT"),
    
    JA_JP("ja-JP"),
    
    KO_KR("ko-KR"),
    
    MR_IN("mr-IN"),
    
    NB_NO("nb-NO"),
    
    NL_BE("nl-BE"),
    
    NL_NL("nl-NL"),
    
    PL_PL("pl-PL"),
    
    PT_BR("pt-BR"),
    
    PT_PT("pt-PT"),
    
    RU_RU("ru-RU"),
    
    SV_SE("sv-SE"),
    
    TA_IN("ta-IN"),
    
    TH_TH("th-TH"),
    
    TR_TR("tr-TR"),
    
    UK_UA("uk-UA"),
    
    VI_VN("vi-VN"),
    
    ZH_HK("zh-HK"),
    
    ZH_SG("zh-SG"),
    
    ZH_TW("zh-TW");

    private String value;

    MarketIdEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static MarketIdEnum fromValue(String value) {
      for (MarketIdEnum b : MarketIdEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<MarketIdEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final MarketIdEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public MarketIdEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return MarketIdEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      MarketIdEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_MARKET_ID = "marketId";
  @SerializedName(SERIALIZED_NAME_MARKET_ID)
  private MarketIdEnum marketId;

  public static final String SERIALIZED_NAME_NAME_FIRST = "nameFirst";
  @SerializedName(SERIALIZED_NAME_NAME_FIRST)
  private String nameFirst;

  public static final String SERIALIZED_NAME_NAME_LAST = "nameLast";
  @SerializedName(SERIALIZED_NAME_NAME_LAST)
  private String nameLast;

  public ShopperUpdate() {
  }

  public ShopperUpdate email(String email) {
    this.email = email;
    return this;
  }

  /**
   * Get email
   * @return email
   */
  @javax.annotation.Nullable
  public String getEmail() {
    return email;
  }

  public void setEmail(String email) {
    this.email = email;
  }


  public ShopperUpdate externalId(Integer externalId) {
    this.externalId = externalId;
    return this;
  }

  /**
   * Get externalId
   * @return externalId
   */
  @javax.annotation.Nullable
  public Integer getExternalId() {
    return externalId;
  }

  public void setExternalId(Integer externalId) {
    this.externalId = externalId;
  }


  public ShopperUpdate marketId(MarketIdEnum marketId) {
    this.marketId = marketId;
    return this;
  }

  /**
   * Get marketId
   * @return marketId
   */
  @javax.annotation.Nullable
  public MarketIdEnum getMarketId() {
    return marketId;
  }

  public void setMarketId(MarketIdEnum marketId) {
    this.marketId = marketId;
  }


  public ShopperUpdate nameFirst(String nameFirst) {
    this.nameFirst = nameFirst;
    return this;
  }

  /**
   * Get nameFirst
   * @return nameFirst
   */
  @javax.annotation.Nullable
  public String getNameFirst() {
    return nameFirst;
  }

  public void setNameFirst(String nameFirst) {
    this.nameFirst = nameFirst;
  }


  public ShopperUpdate nameLast(String nameLast) {
    this.nameLast = nameLast;
    return this;
  }

  /**
   * Get nameLast
   * @return nameLast
   */
  @javax.annotation.Nullable
  public String getNameLast() {
    return nameLast;
  }

  public void setNameLast(String nameLast) {
    this.nameLast = nameLast;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ShopperUpdate shopperUpdate = (ShopperUpdate) o;
    return Objects.equals(this.email, shopperUpdate.email) &&
        Objects.equals(this.externalId, shopperUpdate.externalId) &&
        Objects.equals(this.marketId, shopperUpdate.marketId) &&
        Objects.equals(this.nameFirst, shopperUpdate.nameFirst) &&
        Objects.equals(this.nameLast, shopperUpdate.nameLast);
  }

  @Override
  public int hashCode() {
    return Objects.hash(email, externalId, marketId, nameFirst, nameLast);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ShopperUpdate {\n");
    sb.append("    email: ").append(toIndentedString(email)).append("\n");
    sb.append("    externalId: ").append(toIndentedString(externalId)).append("\n");
    sb.append("    marketId: ").append(toIndentedString(marketId)).append("\n");
    sb.append("    nameFirst: ").append(toIndentedString(nameFirst)).append("\n");
    sb.append("    nameLast: ").append(toIndentedString(nameLast)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("email");
    openapiFields.add("externalId");
    openapiFields.add("marketId");
    openapiFields.add("nameFirst");
    openapiFields.add("nameLast");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to ShopperUpdate
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!ShopperUpdate.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in ShopperUpdate is not found in the empty JSON string", ShopperUpdate.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!ShopperUpdate.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `ShopperUpdate` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("email") != null && !jsonObj.get("email").isJsonNull()) && !jsonObj.get("email").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `email` to be a primitive type in the JSON string but got `%s`", jsonObj.get("email").toString()));
      }
      if ((jsonObj.get("marketId") != null && !jsonObj.get("marketId").isJsonNull()) && !jsonObj.get("marketId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `marketId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("marketId").toString()));
      }
      // validate the optional field `marketId`
      if (jsonObj.get("marketId") != null && !jsonObj.get("marketId").isJsonNull()) {
        MarketIdEnum.validateJsonElement(jsonObj.get("marketId"));
      }
      if ((jsonObj.get("nameFirst") != null && !jsonObj.get("nameFirst").isJsonNull()) && !jsonObj.get("nameFirst").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `nameFirst` to be a primitive type in the JSON string but got `%s`", jsonObj.get("nameFirst").toString()));
      }
      if ((jsonObj.get("nameLast") != null && !jsonObj.get("nameLast").isJsonNull()) && !jsonObj.get("nameLast").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `nameLast` to be a primitive type in the JSON string but got `%s`", jsonObj.get("nameLast").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!ShopperUpdate.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'ShopperUpdate' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<ShopperUpdate> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(ShopperUpdate.class));

       return (TypeAdapter<T>) new TypeAdapter<ShopperUpdate>() {
           @Override
           public void write(JsonWriter out, ShopperUpdate value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public ShopperUpdate read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of ShopperUpdate given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of ShopperUpdate
   * @throws IOException if the JSON string is invalid with respect to ShopperUpdate
   */
  public static ShopperUpdate fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, ShopperUpdate.class);
  }

  /**
   * Convert an instance of ShopperUpdate to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

