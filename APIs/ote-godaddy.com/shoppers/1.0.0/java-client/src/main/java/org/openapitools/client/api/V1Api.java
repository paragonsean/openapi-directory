/*
 * 
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiCallback;
import org.openapitools.client.ApiClient;
import org.openapitools.client.ApiException;
import org.openapitools.client.ApiResponse;
import org.openapitools.client.Configuration;
import org.openapitools.client.Pair;
import org.openapitools.client.ProgressRequestBody;
import org.openapitools.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import org.openapitools.client.model.Error;
import org.openapitools.client.model.ErrorLimit;
import org.openapitools.client.model.PasswordError;
import org.openapitools.client.model.Secret;
import org.openapitools.client.model.Shopper;
import org.openapitools.client.model.ShopperId;
import org.openapitools.client.model.ShopperStatus;
import org.openapitools.client.model.ShopperUpdate;
import org.openapitools.client.model.SubaccountCreate;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class V1Api {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public V1Api() {
        this(Configuration.getDefaultApiClient());
    }

    public V1Api(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for changePassword
     * @param shopperId Shopper whose password will be set (required)
     * @param secret The value to set the subaccount&#39;s password to (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Request was successful </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Request was not successful </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Authentication info not sent or invalid </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal server error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call changePasswordCall(String shopperId, Secret secret, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = secret;

        // create path and map variables
        String localVarPath = "/v1/shoppers/{shopperId}/factors/password"
            .replace("{" + "shopperId" + "}", localVarApiClient.escapeString(shopperId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call changePasswordValidateBeforeCall(String shopperId, Secret secret, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'shopperId' is set
        if (shopperId == null) {
            throw new ApiException("Missing the required parameter 'shopperId' when calling changePassword(Async)");
        }

        // verify the required parameter 'secret' is set
        if (secret == null) {
            throw new ApiException("Missing the required parameter 'secret' when calling changePassword(Async)");
        }

        return changePasswordCall(shopperId, secret, _callback);

    }

    /**
     * Set subaccount&#39;s password
     * &lt;strong&gt;Notes:&lt;/strong&gt;&lt;ul&gt;&lt;li&gt;Password set is only supported by API Resellers setting subaccount passwords.&lt;/li&gt;&lt;li&gt;**shopperId** is **not the same** as **customerId**.  **shopperId** is a number of max length 10 digits (*ex:* 1234567890) whereas **customerId** is a UUIDv4 (*ex:* 295e3bc3-b3b9-4d95-aae5-ede41a994d13)&lt;/li&gt;&lt;/ul&gt;
     * @param shopperId Shopper whose password will be set (required)
     * @param secret The value to set the subaccount&#39;s password to (required)
     * @return ShopperId
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Request was successful </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Request was not successful </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Authentication info not sent or invalid </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal server error </td><td>  -  </td></tr>
     </table>
     */
    public ShopperId changePassword(String shopperId, Secret secret) throws ApiException {
        ApiResponse<ShopperId> localVarResp = changePasswordWithHttpInfo(shopperId, secret);
        return localVarResp.getData();
    }

    /**
     * Set subaccount&#39;s password
     * &lt;strong&gt;Notes:&lt;/strong&gt;&lt;ul&gt;&lt;li&gt;Password set is only supported by API Resellers setting subaccount passwords.&lt;/li&gt;&lt;li&gt;**shopperId** is **not the same** as **customerId**.  **shopperId** is a number of max length 10 digits (*ex:* 1234567890) whereas **customerId** is a UUIDv4 (*ex:* 295e3bc3-b3b9-4d95-aae5-ede41a994d13)&lt;/li&gt;&lt;/ul&gt;
     * @param shopperId Shopper whose password will be set (required)
     * @param secret The value to set the subaccount&#39;s password to (required)
     * @return ApiResponse&lt;ShopperId&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Request was successful </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Request was not successful </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Authentication info not sent or invalid </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal server error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ShopperId> changePasswordWithHttpInfo(String shopperId, Secret secret) throws ApiException {
        okhttp3.Call localVarCall = changePasswordValidateBeforeCall(shopperId, secret, null);
        Type localVarReturnType = new TypeToken<ShopperId>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Set subaccount&#39;s password (asynchronously)
     * &lt;strong&gt;Notes:&lt;/strong&gt;&lt;ul&gt;&lt;li&gt;Password set is only supported by API Resellers setting subaccount passwords.&lt;/li&gt;&lt;li&gt;**shopperId** is **not the same** as **customerId**.  **shopperId** is a number of max length 10 digits (*ex:* 1234567890) whereas **customerId** is a UUIDv4 (*ex:* 295e3bc3-b3b9-4d95-aae5-ede41a994d13)&lt;/li&gt;&lt;/ul&gt;
     * @param shopperId Shopper whose password will be set (required)
     * @param secret The value to set the subaccount&#39;s password to (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Request was successful </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Request was not successful </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Authentication info not sent or invalid </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal server error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call changePasswordAsync(String shopperId, Secret secret, final ApiCallback<ShopperId> _callback) throws ApiException {

        okhttp3.Call localVarCall = changePasswordValidateBeforeCall(shopperId, secret, _callback);
        Type localVarReturnType = new TypeToken<ShopperId>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for createSubaccount
     * @param subaccountCreate The subaccount to create (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Request was successful </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Request was malformed </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Authentication info not sent or invalid </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Authenticated user is not allowed access </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> &#x60;subaccount&#x60; does not fulfill the schema </td><td>  -  </td></tr>
        <tr><td> 429 </td><td> Too many requests received within interval </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal server error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call createSubaccountCall(SubaccountCreate subaccountCreate, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = subaccountCreate;

        // create path and map variables
        String localVarPath = "/v1/shoppers/subaccount";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/javascript",
            "application/json",
            "application/xml",
            "text/javascript",
            "text/xml"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json",
            "application/xml",
            "text/xml"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call createSubaccountValidateBeforeCall(SubaccountCreate subaccountCreate, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'subaccountCreate' is set
        if (subaccountCreate == null) {
            throw new ApiException("Missing the required parameter 'subaccountCreate' when calling createSubaccount(Async)");
        }

        return createSubaccountCall(subaccountCreate, _callback);

    }

    /**
     * Create a Subaccount owned by the authenticated Reseller
     * 
     * @param subaccountCreate The subaccount to create (required)
     * @return ShopperId
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Request was successful </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Request was malformed </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Authentication info not sent or invalid </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Authenticated user is not allowed access </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> &#x60;subaccount&#x60; does not fulfill the schema </td><td>  -  </td></tr>
        <tr><td> 429 </td><td> Too many requests received within interval </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal server error </td><td>  -  </td></tr>
     </table>
     */
    public ShopperId createSubaccount(SubaccountCreate subaccountCreate) throws ApiException {
        ApiResponse<ShopperId> localVarResp = createSubaccountWithHttpInfo(subaccountCreate);
        return localVarResp.getData();
    }

    /**
     * Create a Subaccount owned by the authenticated Reseller
     * 
     * @param subaccountCreate The subaccount to create (required)
     * @return ApiResponse&lt;ShopperId&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Request was successful </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Request was malformed </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Authentication info not sent or invalid </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Authenticated user is not allowed access </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> &#x60;subaccount&#x60; does not fulfill the schema </td><td>  -  </td></tr>
        <tr><td> 429 </td><td> Too many requests received within interval </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal server error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ShopperId> createSubaccountWithHttpInfo(SubaccountCreate subaccountCreate) throws ApiException {
        okhttp3.Call localVarCall = createSubaccountValidateBeforeCall(subaccountCreate, null);
        Type localVarReturnType = new TypeToken<ShopperId>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Create a Subaccount owned by the authenticated Reseller (asynchronously)
     * 
     * @param subaccountCreate The subaccount to create (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Request was successful </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Request was malformed </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Authentication info not sent or invalid </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Authenticated user is not allowed access </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> &#x60;subaccount&#x60; does not fulfill the schema </td><td>  -  </td></tr>
        <tr><td> 429 </td><td> Too many requests received within interval </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal server error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call createSubaccountAsync(SubaccountCreate subaccountCreate, final ApiCallback<ShopperId> _callback) throws ApiException {

        okhttp3.Call localVarCall = createSubaccountValidateBeforeCall(subaccountCreate, _callback);
        Type localVarReturnType = new TypeToken<ShopperId>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for delete
     * @param shopperId The ID of the shopper to delete. Must agree with the shopper id on the token or header, if present. *Note*: **shopperId** is **not the same** as **customerId**.  **shopperId** is a number of max length 10 digits (*ex:* 1234567890) whereas **customerId** is a UUIDv4 (*ex:* 295e3bc3-b3b9-4d95-aae5-ede41a994d13) (required)
     * @param auditClientIp The client IP of the user who originated the request leading to this call. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Request was successful </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Request was malformed </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Authentication info not sent or invalid </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Authenticated user is not allowed access </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> Active and locked shoppers cannot be deleted </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Shopper ID is not supplied or invalid </td><td>  -  </td></tr>
        <tr><td> 429 </td><td> Too many requests received within interval </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal server error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteCall(String shopperId, String auditClientIp, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v1/shoppers/{shopperId}"
            .replace("{" + "shopperId" + "}", localVarApiClient.escapeString(shopperId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (auditClientIp != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("auditClientIp", auditClientIp));
        }

        final String[] localVarAccepts = {
            "application/javascript",
            "application/json",
            "application/xml",
            "text/javascript",
            "text/xml"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call deleteValidateBeforeCall(String shopperId, String auditClientIp, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'shopperId' is set
        if (shopperId == null) {
            throw new ApiException("Missing the required parameter 'shopperId' when calling delete(Async)");
        }

        // verify the required parameter 'auditClientIp' is set
        if (auditClientIp == null) {
            throw new ApiException("Missing the required parameter 'auditClientIp' when calling delete(Async)");
        }

        return deleteCall(shopperId, auditClientIp, _callback);

    }

    /**
     * Request the deletion of a shopper profile
     * &lt;strong&gt;Notes:&lt;/strong&gt;&lt;ul&gt;&lt;li&gt;Shopper deletion is not supported in OTE&lt;/li&gt;&lt;li&gt;**shopperId** is **not the same** as **customerId**.  **shopperId** is a number of max length 10 digits (*ex:* 1234567890) whereas **customerId** is a UUIDv4 (*ex:* 295e3bc3-b3b9-4d95-aae5-ede41a994d13)&lt;/li&gt;&lt;/ul&gt;
     * @param shopperId The ID of the shopper to delete. Must agree with the shopper id on the token or header, if present. *Note*: **shopperId** is **not the same** as **customerId**.  **shopperId** is a number of max length 10 digits (*ex:* 1234567890) whereas **customerId** is a UUIDv4 (*ex:* 295e3bc3-b3b9-4d95-aae5-ede41a994d13) (required)
     * @param auditClientIp The client IP of the user who originated the request leading to this call. (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Request was successful </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Request was malformed </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Authentication info not sent or invalid </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Authenticated user is not allowed access </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> Active and locked shoppers cannot be deleted </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Shopper ID is not supplied or invalid </td><td>  -  </td></tr>
        <tr><td> 429 </td><td> Too many requests received within interval </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal server error </td><td>  -  </td></tr>
     </table>
     */
    public void delete(String shopperId, String auditClientIp) throws ApiException {
        deleteWithHttpInfo(shopperId, auditClientIp);
    }

    /**
     * Request the deletion of a shopper profile
     * &lt;strong&gt;Notes:&lt;/strong&gt;&lt;ul&gt;&lt;li&gt;Shopper deletion is not supported in OTE&lt;/li&gt;&lt;li&gt;**shopperId** is **not the same** as **customerId**.  **shopperId** is a number of max length 10 digits (*ex:* 1234567890) whereas **customerId** is a UUIDv4 (*ex:* 295e3bc3-b3b9-4d95-aae5-ede41a994d13)&lt;/li&gt;&lt;/ul&gt;
     * @param shopperId The ID of the shopper to delete. Must agree with the shopper id on the token or header, if present. *Note*: **shopperId** is **not the same** as **customerId**.  **shopperId** is a number of max length 10 digits (*ex:* 1234567890) whereas **customerId** is a UUIDv4 (*ex:* 295e3bc3-b3b9-4d95-aae5-ede41a994d13) (required)
     * @param auditClientIp The client IP of the user who originated the request leading to this call. (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Request was successful </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Request was malformed </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Authentication info not sent or invalid </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Authenticated user is not allowed access </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> Active and locked shoppers cannot be deleted </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Shopper ID is not supplied or invalid </td><td>  -  </td></tr>
        <tr><td> 429 </td><td> Too many requests received within interval </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal server error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> deleteWithHttpInfo(String shopperId, String auditClientIp) throws ApiException {
        okhttp3.Call localVarCall = deleteValidateBeforeCall(shopperId, auditClientIp, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Request the deletion of a shopper profile (asynchronously)
     * &lt;strong&gt;Notes:&lt;/strong&gt;&lt;ul&gt;&lt;li&gt;Shopper deletion is not supported in OTE&lt;/li&gt;&lt;li&gt;**shopperId** is **not the same** as **customerId**.  **shopperId** is a number of max length 10 digits (*ex:* 1234567890) whereas **customerId** is a UUIDv4 (*ex:* 295e3bc3-b3b9-4d95-aae5-ede41a994d13)&lt;/li&gt;&lt;/ul&gt;
     * @param shopperId The ID of the shopper to delete. Must agree with the shopper id on the token or header, if present. *Note*: **shopperId** is **not the same** as **customerId**.  **shopperId** is a number of max length 10 digits (*ex:* 1234567890) whereas **customerId** is a UUIDv4 (*ex:* 295e3bc3-b3b9-4d95-aae5-ede41a994d13) (required)
     * @param auditClientIp The client IP of the user who originated the request leading to this call. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Request was successful </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Request was malformed </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Authentication info not sent or invalid </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Authenticated user is not allowed access </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> Active and locked shoppers cannot be deleted </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Shopper ID is not supplied or invalid </td><td>  -  </td></tr>
        <tr><td> 429 </td><td> Too many requests received within interval </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal server error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteAsync(String shopperId, String auditClientIp, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = deleteValidateBeforeCall(shopperId, auditClientIp, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for get
     * @param shopperId Shopper whose details are to be retrieved (required)
     * @param includes Additional properties to be included in the response shopper object (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Request was successful </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Request was malformed </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Authentication info not sent or invalid </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Authenticated user is not allowed access </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
        <tr><td> 429 </td><td> Too many requests received within interval </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal server error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getCall(String shopperId, List<String> includes, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v1/shoppers/{shopperId}"
            .replace("{" + "shopperId" + "}", localVarApiClient.escapeString(shopperId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (includes != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("csv", "includes", includes));
        }

        final String[] localVarAccepts = {
            "application/javascript",
            "application/json",
            "application/xml",
            "text/javascript",
            "text/xml"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getValidateBeforeCall(String shopperId, List<String> includes, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'shopperId' is set
        if (shopperId == null) {
            throw new ApiException("Missing the required parameter 'shopperId' when calling get(Async)");
        }

        return getCall(shopperId, includes, _callback);

    }

    /**
     * Get details for the specified Shopper
     * &lt;strong&gt;Notes:&lt;/strong&gt;&lt;ul&gt;&lt;li&gt;**shopperId** is **not the same** as **customerId**.  **shopperId** is a number of max length 10 digits (*ex:* 1234567890) whereas **customerId** is a UUIDv4 (*ex:* 295e3bc3-b3b9-4d95-aae5-ede41a994d13)&lt;/li&gt;&lt;/ul&gt;
     * @param shopperId Shopper whose details are to be retrieved (required)
     * @param includes Additional properties to be included in the response shopper object (optional)
     * @return Shopper
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Request was successful </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Request was malformed </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Authentication info not sent or invalid </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Authenticated user is not allowed access </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
        <tr><td> 429 </td><td> Too many requests received within interval </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal server error </td><td>  -  </td></tr>
     </table>
     */
    public Shopper get(String shopperId, List<String> includes) throws ApiException {
        ApiResponse<Shopper> localVarResp = getWithHttpInfo(shopperId, includes);
        return localVarResp.getData();
    }

    /**
     * Get details for the specified Shopper
     * &lt;strong&gt;Notes:&lt;/strong&gt;&lt;ul&gt;&lt;li&gt;**shopperId** is **not the same** as **customerId**.  **shopperId** is a number of max length 10 digits (*ex:* 1234567890) whereas **customerId** is a UUIDv4 (*ex:* 295e3bc3-b3b9-4d95-aae5-ede41a994d13)&lt;/li&gt;&lt;/ul&gt;
     * @param shopperId Shopper whose details are to be retrieved (required)
     * @param includes Additional properties to be included in the response shopper object (optional)
     * @return ApiResponse&lt;Shopper&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Request was successful </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Request was malformed </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Authentication info not sent or invalid </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Authenticated user is not allowed access </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
        <tr><td> 429 </td><td> Too many requests received within interval </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal server error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Shopper> getWithHttpInfo(String shopperId, List<String> includes) throws ApiException {
        okhttp3.Call localVarCall = getValidateBeforeCall(shopperId, includes, null);
        Type localVarReturnType = new TypeToken<Shopper>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get details for the specified Shopper (asynchronously)
     * &lt;strong&gt;Notes:&lt;/strong&gt;&lt;ul&gt;&lt;li&gt;**shopperId** is **not the same** as **customerId**.  **shopperId** is a number of max length 10 digits (*ex:* 1234567890) whereas **customerId** is a UUIDv4 (*ex:* 295e3bc3-b3b9-4d95-aae5-ede41a994d13)&lt;/li&gt;&lt;/ul&gt;
     * @param shopperId Shopper whose details are to be retrieved (required)
     * @param includes Additional properties to be included in the response shopper object (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Request was successful </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Request was malformed </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Authentication info not sent or invalid </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Authenticated user is not allowed access </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
        <tr><td> 429 </td><td> Too many requests received within interval </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal server error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getAsync(String shopperId, List<String> includes, final ApiCallback<Shopper> _callback) throws ApiException {

        okhttp3.Call localVarCall = getValidateBeforeCall(shopperId, includes, _callback);
        Type localVarReturnType = new TypeToken<Shopper>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getStatus
     * @param shopperId The ID of the shopper to retrieve. Must agree with the shopper id on the token or header, if present (required)
     * @param auditClientIp The client IP of the user who originated the request leading to this call. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Request was successful </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Request was malformed </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Authentication info not sent or invalid </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Authenticated user is not allowed access </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Shopper ID is not supplied or invalid </td><td>  -  </td></tr>
        <tr><td> 429 </td><td> Too many requests received within interval </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal server error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getStatusCall(String shopperId, String auditClientIp, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v1/shoppers/{shopperId}/status"
            .replace("{" + "shopperId" + "}", localVarApiClient.escapeString(shopperId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (auditClientIp != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("auditClientIp", auditClientIp));
        }

        final String[] localVarAccepts = {
            "application/javascript",
            "application/json",
            "application/xml",
            "text/javascript",
            "text/xml"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getStatusValidateBeforeCall(String shopperId, String auditClientIp, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'shopperId' is set
        if (shopperId == null) {
            throw new ApiException("Missing the required parameter 'shopperId' when calling getStatus(Async)");
        }

        // verify the required parameter 'auditClientIp' is set
        if (auditClientIp == null) {
            throw new ApiException("Missing the required parameter 'auditClientIp' when calling getStatus(Async)");
        }

        return getStatusCall(shopperId, auditClientIp, _callback);

    }

    /**
     * Get details for the specified Shopper
     * &lt;strong&gt;Notes:&lt;/strong&gt;&lt;ul&gt;&lt;li&gt;**shopperId** is **not the same** as **customerId**. **shopperId** is a number of max length 10 digits (*ex:* 1234567890) whereas **customerId** is a UUIDv4 (*ex:* 295e3bc3-b3b9-4d95-aae5-ede41a994d13)&lt;/li&gt;&lt;/ul&gt;
     * @param shopperId The ID of the shopper to retrieve. Must agree with the shopper id on the token or header, if present (required)
     * @param auditClientIp The client IP of the user who originated the request leading to this call. (required)
     * @return ShopperStatus
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Request was successful </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Request was malformed </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Authentication info not sent or invalid </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Authenticated user is not allowed access </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Shopper ID is not supplied or invalid </td><td>  -  </td></tr>
        <tr><td> 429 </td><td> Too many requests received within interval </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal server error </td><td>  -  </td></tr>
     </table>
     */
    public ShopperStatus getStatus(String shopperId, String auditClientIp) throws ApiException {
        ApiResponse<ShopperStatus> localVarResp = getStatusWithHttpInfo(shopperId, auditClientIp);
        return localVarResp.getData();
    }

    /**
     * Get details for the specified Shopper
     * &lt;strong&gt;Notes:&lt;/strong&gt;&lt;ul&gt;&lt;li&gt;**shopperId** is **not the same** as **customerId**. **shopperId** is a number of max length 10 digits (*ex:* 1234567890) whereas **customerId** is a UUIDv4 (*ex:* 295e3bc3-b3b9-4d95-aae5-ede41a994d13)&lt;/li&gt;&lt;/ul&gt;
     * @param shopperId The ID of the shopper to retrieve. Must agree with the shopper id on the token or header, if present (required)
     * @param auditClientIp The client IP of the user who originated the request leading to this call. (required)
     * @return ApiResponse&lt;ShopperStatus&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Request was successful </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Request was malformed </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Authentication info not sent or invalid </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Authenticated user is not allowed access </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Shopper ID is not supplied or invalid </td><td>  -  </td></tr>
        <tr><td> 429 </td><td> Too many requests received within interval </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal server error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ShopperStatus> getStatusWithHttpInfo(String shopperId, String auditClientIp) throws ApiException {
        okhttp3.Call localVarCall = getStatusValidateBeforeCall(shopperId, auditClientIp, null);
        Type localVarReturnType = new TypeToken<ShopperStatus>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get details for the specified Shopper (asynchronously)
     * &lt;strong&gt;Notes:&lt;/strong&gt;&lt;ul&gt;&lt;li&gt;**shopperId** is **not the same** as **customerId**. **shopperId** is a number of max length 10 digits (*ex:* 1234567890) whereas **customerId** is a UUIDv4 (*ex:* 295e3bc3-b3b9-4d95-aae5-ede41a994d13)&lt;/li&gt;&lt;/ul&gt;
     * @param shopperId The ID of the shopper to retrieve. Must agree with the shopper id on the token or header, if present (required)
     * @param auditClientIp The client IP of the user who originated the request leading to this call. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Request was successful </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Request was malformed </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Authentication info not sent or invalid </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Authenticated user is not allowed access </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Shopper ID is not supplied or invalid </td><td>  -  </td></tr>
        <tr><td> 429 </td><td> Too many requests received within interval </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal server error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getStatusAsync(String shopperId, String auditClientIp, final ApiCallback<ShopperStatus> _callback) throws ApiException {

        okhttp3.Call localVarCall = getStatusValidateBeforeCall(shopperId, auditClientIp, _callback);
        Type localVarReturnType = new TypeToken<ShopperStatus>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for update
     * @param shopperId The ID of the Shopper to update (required)
     * @param shopperUpdate The Shopper details to update (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Request was successful </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Request was malformed </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Authentication info not sent or invalid </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Authenticated user is not allowed access </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> &#x60;Shopper&#x60; does not fulfill the schema </td><td>  -  </td></tr>
        <tr><td> 429 </td><td> Too many requests received within interval </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal server error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateCall(String shopperId, ShopperUpdate shopperUpdate, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = shopperUpdate;

        // create path and map variables
        String localVarPath = "/v1/shoppers/{shopperId}"
            .replace("{" + "shopperId" + "}", localVarApiClient.escapeString(shopperId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/javascript",
            "application/json",
            "application/xml",
            "text/javascript",
            "text/xml"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json",
            "application/xml",
            "text/xml"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call updateValidateBeforeCall(String shopperId, ShopperUpdate shopperUpdate, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'shopperId' is set
        if (shopperId == null) {
            throw new ApiException("Missing the required parameter 'shopperId' when calling update(Async)");
        }

        // verify the required parameter 'shopperUpdate' is set
        if (shopperUpdate == null) {
            throw new ApiException("Missing the required parameter 'shopperUpdate' when calling update(Async)");
        }

        return updateCall(shopperId, shopperUpdate, _callback);

    }

    /**
     * Update details for the specified Shopper
     * &lt;strong&gt;Notes:&lt;/strong&gt;&lt;ul&gt;&lt;li&gt;**shopperId** is **not the same** as **customerId**.  **shopperId** is a number of max length 10 digits (*ex:* 1234567890) whereas **customerId** is a UUIDv4 (*ex:* 295e3bc3-b3b9-4d95-aae5-ede41a994d13)&lt;/li&gt;&lt;/ul&gt;
     * @param shopperId The ID of the Shopper to update (required)
     * @param shopperUpdate The Shopper details to update (required)
     * @return ShopperId
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Request was successful </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Request was malformed </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Authentication info not sent or invalid </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Authenticated user is not allowed access </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> &#x60;Shopper&#x60; does not fulfill the schema </td><td>  -  </td></tr>
        <tr><td> 429 </td><td> Too many requests received within interval </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal server error </td><td>  -  </td></tr>
     </table>
     */
    public ShopperId update(String shopperId, ShopperUpdate shopperUpdate) throws ApiException {
        ApiResponse<ShopperId> localVarResp = updateWithHttpInfo(shopperId, shopperUpdate);
        return localVarResp.getData();
    }

    /**
     * Update details for the specified Shopper
     * &lt;strong&gt;Notes:&lt;/strong&gt;&lt;ul&gt;&lt;li&gt;**shopperId** is **not the same** as **customerId**.  **shopperId** is a number of max length 10 digits (*ex:* 1234567890) whereas **customerId** is a UUIDv4 (*ex:* 295e3bc3-b3b9-4d95-aae5-ede41a994d13)&lt;/li&gt;&lt;/ul&gt;
     * @param shopperId The ID of the Shopper to update (required)
     * @param shopperUpdate The Shopper details to update (required)
     * @return ApiResponse&lt;ShopperId&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Request was successful </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Request was malformed </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Authentication info not sent or invalid </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Authenticated user is not allowed access </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> &#x60;Shopper&#x60; does not fulfill the schema </td><td>  -  </td></tr>
        <tr><td> 429 </td><td> Too many requests received within interval </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal server error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ShopperId> updateWithHttpInfo(String shopperId, ShopperUpdate shopperUpdate) throws ApiException {
        okhttp3.Call localVarCall = updateValidateBeforeCall(shopperId, shopperUpdate, null);
        Type localVarReturnType = new TypeToken<ShopperId>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Update details for the specified Shopper (asynchronously)
     * &lt;strong&gt;Notes:&lt;/strong&gt;&lt;ul&gt;&lt;li&gt;**shopperId** is **not the same** as **customerId**.  **shopperId** is a number of max length 10 digits (*ex:* 1234567890) whereas **customerId** is a UUIDv4 (*ex:* 295e3bc3-b3b9-4d95-aae5-ede41a994d13)&lt;/li&gt;&lt;/ul&gt;
     * @param shopperId The ID of the Shopper to update (required)
     * @param shopperUpdate The Shopper details to update (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Request was successful </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Request was malformed </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Authentication info not sent or invalid </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Authenticated user is not allowed access </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> &#x60;Shopper&#x60; does not fulfill the schema </td><td>  -  </td></tr>
        <tr><td> 429 </td><td> Too many requests received within interval </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal server error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateAsync(String shopperId, ShopperUpdate shopperUpdate, final ApiCallback<ShopperId> _callback) throws ApiException {

        okhttp3.Call localVarCall = updateValidateBeforeCall(shopperId, shopperUpdate, _callback);
        Type localVarReturnType = new TypeToken<ShopperId>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
