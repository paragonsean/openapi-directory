/*
 * 
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Shopper
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:00:21.952170-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class Shopper {
  public static final String SERIALIZED_NAME_CUSTOMER_ID = "customerId";
  @SerializedName(SERIALIZED_NAME_CUSTOMER_ID)
  private String customerId;

  public static final String SERIALIZED_NAME_EMAIL = "email";
  @SerializedName(SERIALIZED_NAME_EMAIL)
  private String email;

  public static final String SERIALIZED_NAME_EXTERNAL_ID = "externalId";
  @SerializedName(SERIALIZED_NAME_EXTERNAL_ID)
  private Integer externalId;

  public static final String SERIALIZED_NAME_MARKET_ID = "marketId";
  @SerializedName(SERIALIZED_NAME_MARKET_ID)
  private String marketId = "en-US";

  public static final String SERIALIZED_NAME_NAME_FIRST = "nameFirst";
  @SerializedName(SERIALIZED_NAME_NAME_FIRST)
  private String nameFirst;

  public static final String SERIALIZED_NAME_NAME_LAST = "nameLast";
  @SerializedName(SERIALIZED_NAME_NAME_LAST)
  private String nameLast;

  public static final String SERIALIZED_NAME_SHOPPER_ID = "shopperId";
  @SerializedName(SERIALIZED_NAME_SHOPPER_ID)
  private String shopperId;

  public Shopper() {
  }

  public Shopper customerId(String customerId) {
    this.customerId = customerId;
    return this;
  }

  /**
   * Identifier for the Customer record associated with this Shopper record. This is an alternate identifier that some systems use to identify an individual shopper record
   * @return customerId
   */
  @javax.annotation.Nullable
  public String getCustomerId() {
    return customerId;
  }

  public void setCustomerId(String customerId) {
    this.customerId = customerId;
  }


  public Shopper email(String email) {
    this.email = email;
    return this;
  }

  /**
   * Get email
   * @return email
   */
  @javax.annotation.Nonnull
  public String getEmail() {
    return email;
  }

  public void setEmail(String email) {
    this.email = email;
  }


  public Shopper externalId(Integer externalId) {
    this.externalId = externalId;
    return this;
  }

  /**
   * Get externalId
   * @return externalId
   */
  @javax.annotation.Nullable
  public Integer getExternalId() {
    return externalId;
  }

  public void setExternalId(Integer externalId) {
    this.externalId = externalId;
  }


  public Shopper marketId(String marketId) {
    this.marketId = marketId;
    return this;
  }

  /**
   * Get marketId
   * @return marketId
   */
  @javax.annotation.Nonnull
  public String getMarketId() {
    return marketId;
  }

  public void setMarketId(String marketId) {
    this.marketId = marketId;
  }


  public Shopper nameFirst(String nameFirst) {
    this.nameFirst = nameFirst;
    return this;
  }

  /**
   * Get nameFirst
   * @return nameFirst
   */
  @javax.annotation.Nonnull
  public String getNameFirst() {
    return nameFirst;
  }

  public void setNameFirst(String nameFirst) {
    this.nameFirst = nameFirst;
  }


  public Shopper nameLast(String nameLast) {
    this.nameLast = nameLast;
    return this;
  }

  /**
   * Get nameLast
   * @return nameLast
   */
  @javax.annotation.Nonnull
  public String getNameLast() {
    return nameLast;
  }

  public void setNameLast(String nameLast) {
    this.nameLast = nameLast;
  }


  public Shopper shopperId(String shopperId) {
    this.shopperId = shopperId;
    return this;
  }

  /**
   * Get shopperId
   * @return shopperId
   */
  @javax.annotation.Nonnull
  public String getShopperId() {
    return shopperId;
  }

  public void setShopperId(String shopperId) {
    this.shopperId = shopperId;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    Shopper shopper = (Shopper) o;
    return Objects.equals(this.customerId, shopper.customerId) &&
        Objects.equals(this.email, shopper.email) &&
        Objects.equals(this.externalId, shopper.externalId) &&
        Objects.equals(this.marketId, shopper.marketId) &&
        Objects.equals(this.nameFirst, shopper.nameFirst) &&
        Objects.equals(this.nameLast, shopper.nameLast) &&
        Objects.equals(this.shopperId, shopper.shopperId);
  }

  @Override
  public int hashCode() {
    return Objects.hash(customerId, email, externalId, marketId, nameFirst, nameLast, shopperId);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class Shopper {\n");
    sb.append("    customerId: ").append(toIndentedString(customerId)).append("\n");
    sb.append("    email: ").append(toIndentedString(email)).append("\n");
    sb.append("    externalId: ").append(toIndentedString(externalId)).append("\n");
    sb.append("    marketId: ").append(toIndentedString(marketId)).append("\n");
    sb.append("    nameFirst: ").append(toIndentedString(nameFirst)).append("\n");
    sb.append("    nameLast: ").append(toIndentedString(nameLast)).append("\n");
    sb.append("    shopperId: ").append(toIndentedString(shopperId)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("customerId");
    openapiFields.add("email");
    openapiFields.add("externalId");
    openapiFields.add("marketId");
    openapiFields.add("nameFirst");
    openapiFields.add("nameLast");
    openapiFields.add("shopperId");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("email");
    openapiRequiredFields.add("marketId");
    openapiRequiredFields.add("nameFirst");
    openapiRequiredFields.add("nameLast");
    openapiRequiredFields.add("shopperId");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to Shopper
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!Shopper.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in Shopper is not found in the empty JSON string", Shopper.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!Shopper.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `Shopper` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : Shopper.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("customerId") != null && !jsonObj.get("customerId").isJsonNull()) && !jsonObj.get("customerId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `customerId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("customerId").toString()));
      }
      if (!jsonObj.get("email").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `email` to be a primitive type in the JSON string but got `%s`", jsonObj.get("email").toString()));
      }
      if (!jsonObj.get("marketId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `marketId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("marketId").toString()));
      }
      if (!jsonObj.get("nameFirst").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `nameFirst` to be a primitive type in the JSON string but got `%s`", jsonObj.get("nameFirst").toString()));
      }
      if (!jsonObj.get("nameLast").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `nameLast` to be a primitive type in the JSON string but got `%s`", jsonObj.get("nameLast").toString()));
      }
      if (!jsonObj.get("shopperId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `shopperId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("shopperId").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!Shopper.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'Shopper' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<Shopper> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(Shopper.class));

       return (TypeAdapter<T>) new TypeAdapter<Shopper>() {
           @Override
           public void write(JsonWriter out, Shopper value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public Shopper read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of Shopper given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of Shopper
   * @throws IOException if the JSON string is invalid with respect to Shopper
   */
  public static Shopper fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, Shopper.class);
  }

  /**
   * Convert an instance of Shopper to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

