/**
 * 
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIAftermarketListingExpiryCreate.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIAftermarketListingExpiryCreate::OAIAftermarketListingExpiryCreate(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIAftermarketListingExpiryCreate::OAIAftermarketListingExpiryCreate() {
    this->initializeModel();
}

OAIAftermarketListingExpiryCreate::~OAIAftermarketListingExpiryCreate() {}

void OAIAftermarketListingExpiryCreate::initializeModel() {

    m_domain_isSet = false;
    m_domain_isValid = false;

    m_expires_at_isSet = false;
    m_expires_at_isValid = false;

    m_losing_registrar_id_isSet = false;
    m_losing_registrar_id_isValid = false;

    m_page_views_monthly_isSet = false;
    m_page_views_monthly_isValid = false;

    m_revenue_monthly_isSet = false;
    m_revenue_monthly_isValid = false;
}

void OAIAftermarketListingExpiryCreate::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIAftermarketListingExpiryCreate::fromJsonObject(QJsonObject json) {

    m_domain_isValid = ::OpenAPI::fromJsonValue(m_domain, json[QString("domain")]);
    m_domain_isSet = !json[QString("domain")].isNull() && m_domain_isValid;

    m_expires_at_isValid = ::OpenAPI::fromJsonValue(m_expires_at, json[QString("expiresAt")]);
    m_expires_at_isSet = !json[QString("expiresAt")].isNull() && m_expires_at_isValid;

    m_losing_registrar_id_isValid = ::OpenAPI::fromJsonValue(m_losing_registrar_id, json[QString("losingRegistrarId")]);
    m_losing_registrar_id_isSet = !json[QString("losingRegistrarId")].isNull() && m_losing_registrar_id_isValid;

    m_page_views_monthly_isValid = ::OpenAPI::fromJsonValue(m_page_views_monthly, json[QString("pageViewsMonthly")]);
    m_page_views_monthly_isSet = !json[QString("pageViewsMonthly")].isNull() && m_page_views_monthly_isValid;

    m_revenue_monthly_isValid = ::OpenAPI::fromJsonValue(m_revenue_monthly, json[QString("revenueMonthly")]);
    m_revenue_monthly_isSet = !json[QString("revenueMonthly")].isNull() && m_revenue_monthly_isValid;
}

QString OAIAftermarketListingExpiryCreate::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIAftermarketListingExpiryCreate::asJsonObject() const {
    QJsonObject obj;
    if (m_domain_isSet) {
        obj.insert(QString("domain"), ::OpenAPI::toJsonValue(m_domain));
    }
    if (m_expires_at_isSet) {
        obj.insert(QString("expiresAt"), ::OpenAPI::toJsonValue(m_expires_at));
    }
    if (m_losing_registrar_id_isSet) {
        obj.insert(QString("losingRegistrarId"), ::OpenAPI::toJsonValue(m_losing_registrar_id));
    }
    if (m_page_views_monthly_isSet) {
        obj.insert(QString("pageViewsMonthly"), ::OpenAPI::toJsonValue(m_page_views_monthly));
    }
    if (m_revenue_monthly_isSet) {
        obj.insert(QString("revenueMonthly"), ::OpenAPI::toJsonValue(m_revenue_monthly));
    }
    return obj;
}

QString OAIAftermarketListingExpiryCreate::getDomain() const {
    return m_domain;
}
void OAIAftermarketListingExpiryCreate::setDomain(const QString &domain) {
    m_domain = domain;
    m_domain_isSet = true;
}

bool OAIAftermarketListingExpiryCreate::is_domain_Set() const{
    return m_domain_isSet;
}

bool OAIAftermarketListingExpiryCreate::is_domain_Valid() const{
    return m_domain_isValid;
}

QString OAIAftermarketListingExpiryCreate::getExpiresAt() const {
    return m_expires_at;
}
void OAIAftermarketListingExpiryCreate::setExpiresAt(const QString &expires_at) {
    m_expires_at = expires_at;
    m_expires_at_isSet = true;
}

bool OAIAftermarketListingExpiryCreate::is_expires_at_Set() const{
    return m_expires_at_isSet;
}

bool OAIAftermarketListingExpiryCreate::is_expires_at_Valid() const{
    return m_expires_at_isValid;
}

qint32 OAIAftermarketListingExpiryCreate::getLosingRegistrarId() const {
    return m_losing_registrar_id;
}
void OAIAftermarketListingExpiryCreate::setLosingRegistrarId(const qint32 &losing_registrar_id) {
    m_losing_registrar_id = losing_registrar_id;
    m_losing_registrar_id_isSet = true;
}

bool OAIAftermarketListingExpiryCreate::is_losing_registrar_id_Set() const{
    return m_losing_registrar_id_isSet;
}

bool OAIAftermarketListingExpiryCreate::is_losing_registrar_id_Valid() const{
    return m_losing_registrar_id_isValid;
}

qint32 OAIAftermarketListingExpiryCreate::getPageViewsMonthly() const {
    return m_page_views_monthly;
}
void OAIAftermarketListingExpiryCreate::setPageViewsMonthly(const qint32 &page_views_monthly) {
    m_page_views_monthly = page_views_monthly;
    m_page_views_monthly_isSet = true;
}

bool OAIAftermarketListingExpiryCreate::is_page_views_monthly_Set() const{
    return m_page_views_monthly_isSet;
}

bool OAIAftermarketListingExpiryCreate::is_page_views_monthly_Valid() const{
    return m_page_views_monthly_isValid;
}

qint32 OAIAftermarketListingExpiryCreate::getRevenueMonthly() const {
    return m_revenue_monthly;
}
void OAIAftermarketListingExpiryCreate::setRevenueMonthly(const qint32 &revenue_monthly) {
    m_revenue_monthly = revenue_monthly;
    m_revenue_monthly_isSet = true;
}

bool OAIAftermarketListingExpiryCreate::is_revenue_monthly_Set() const{
    return m_revenue_monthly_isSet;
}

bool OAIAftermarketListingExpiryCreate::is_revenue_monthly_Valid() const{
    return m_revenue_monthly_isValid;
}

bool OAIAftermarketListingExpiryCreate::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_domain_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_expires_at_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_losing_registrar_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_page_views_monthly_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_revenue_monthly_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIAftermarketListingExpiryCreate::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_domain_isValid && m_expires_at_isValid && m_losing_registrar_id_isValid && true;
}

} // namespace OpenAPI
