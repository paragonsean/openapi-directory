/*
 * 
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * AftermarketListingExpiryCreate
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:00:20.109703-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class AftermarketListingExpiryCreate {
  public static final String SERIALIZED_NAME_DOMAIN = "domain";
  @SerializedName(SERIALIZED_NAME_DOMAIN)
  private String domain;

  public static final String SERIALIZED_NAME_EXPIRES_AT = "expiresAt";
  @SerializedName(SERIALIZED_NAME_EXPIRES_AT)
  private String expiresAt;

  public static final String SERIALIZED_NAME_LOSING_REGISTRAR_ID = "losingRegistrarId";
  @SerializedName(SERIALIZED_NAME_LOSING_REGISTRAR_ID)
  private Integer losingRegistrarId = 1;

  public static final String SERIALIZED_NAME_PAGE_VIEWS_MONTHLY = "pageViewsMonthly";
  @SerializedName(SERIALIZED_NAME_PAGE_VIEWS_MONTHLY)
  private Integer pageViewsMonthly;

  public static final String SERIALIZED_NAME_REVENUE_MONTHLY = "revenueMonthly";
  @SerializedName(SERIALIZED_NAME_REVENUE_MONTHLY)
  private Integer revenueMonthly;

  public AftermarketListingExpiryCreate() {
  }

  public AftermarketListingExpiryCreate domain(String domain) {
    this.domain = domain;
    return this;
  }

  /**
   * Domain name
   * @return domain
   */
  @javax.annotation.Nonnull
  public String getDomain() {
    return domain;
  }

  public void setDomain(String domain) {
    this.domain = domain;
  }


  public AftermarketListingExpiryCreate expiresAt(String expiresAt) {
    this.expiresAt = expiresAt;
    return this;
  }

  /**
   * Date when the domain expires
   * @return expiresAt
   */
  @javax.annotation.Nonnull
  public String getExpiresAt() {
    return expiresAt;
  }

  public void setExpiresAt(String expiresAt) {
    this.expiresAt = expiresAt;
  }


  public AftermarketListingExpiryCreate losingRegistrarId(Integer losingRegistrarId) {
    this.losingRegistrarId = losingRegistrarId;
    return this;
  }

  /**
   * Losing registrar id for the domain
   * minimum: 1
   * @return losingRegistrarId
   */
  @javax.annotation.Nonnull
  public Integer getLosingRegistrarId() {
    return losingRegistrarId;
  }

  public void setLosingRegistrarId(Integer losingRegistrarId) {
    this.losingRegistrarId = losingRegistrarId;
  }


  public AftermarketListingExpiryCreate pageViewsMonthly(Integer pageViewsMonthly) {
    this.pageViewsMonthly = pageViewsMonthly;
    return this;
  }

  /**
   * Monthly traffic page view for the domain
   * @return pageViewsMonthly
   */
  @javax.annotation.Nullable
  public Integer getPageViewsMonthly() {
    return pageViewsMonthly;
  }

  public void setPageViewsMonthly(Integer pageViewsMonthly) {
    this.pageViewsMonthly = pageViewsMonthly;
  }


  public AftermarketListingExpiryCreate revenueMonthly(Integer revenueMonthly) {
    this.revenueMonthly = revenueMonthly;
    return this;
  }

  /**
   * Monthly parking revenue (in USD micro unit) for the domain
   * @return revenueMonthly
   */
  @javax.annotation.Nullable
  public Integer getRevenueMonthly() {
    return revenueMonthly;
  }

  public void setRevenueMonthly(Integer revenueMonthly) {
    this.revenueMonthly = revenueMonthly;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    AftermarketListingExpiryCreate aftermarketListingExpiryCreate = (AftermarketListingExpiryCreate) o;
    return Objects.equals(this.domain, aftermarketListingExpiryCreate.domain) &&
        Objects.equals(this.expiresAt, aftermarketListingExpiryCreate.expiresAt) &&
        Objects.equals(this.losingRegistrarId, aftermarketListingExpiryCreate.losingRegistrarId) &&
        Objects.equals(this.pageViewsMonthly, aftermarketListingExpiryCreate.pageViewsMonthly) &&
        Objects.equals(this.revenueMonthly, aftermarketListingExpiryCreate.revenueMonthly);
  }

  @Override
  public int hashCode() {
    return Objects.hash(domain, expiresAt, losingRegistrarId, pageViewsMonthly, revenueMonthly);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class AftermarketListingExpiryCreate {\n");
    sb.append("    domain: ").append(toIndentedString(domain)).append("\n");
    sb.append("    expiresAt: ").append(toIndentedString(expiresAt)).append("\n");
    sb.append("    losingRegistrarId: ").append(toIndentedString(losingRegistrarId)).append("\n");
    sb.append("    pageViewsMonthly: ").append(toIndentedString(pageViewsMonthly)).append("\n");
    sb.append("    revenueMonthly: ").append(toIndentedString(revenueMonthly)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("domain");
    openapiFields.add("expiresAt");
    openapiFields.add("losingRegistrarId");
    openapiFields.add("pageViewsMonthly");
    openapiFields.add("revenueMonthly");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("domain");
    openapiRequiredFields.add("expiresAt");
    openapiRequiredFields.add("losingRegistrarId");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to AftermarketListingExpiryCreate
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!AftermarketListingExpiryCreate.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in AftermarketListingExpiryCreate is not found in the empty JSON string", AftermarketListingExpiryCreate.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!AftermarketListingExpiryCreate.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `AftermarketListingExpiryCreate` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : AftermarketListingExpiryCreate.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if (!jsonObj.get("domain").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `domain` to be a primitive type in the JSON string but got `%s`", jsonObj.get("domain").toString()));
      }
      if (!jsonObj.get("expiresAt").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `expiresAt` to be a primitive type in the JSON string but got `%s`", jsonObj.get("expiresAt").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!AftermarketListingExpiryCreate.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'AftermarketListingExpiryCreate' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<AftermarketListingExpiryCreate> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(AftermarketListingExpiryCreate.class));

       return (TypeAdapter<T>) new TypeAdapter<AftermarketListingExpiryCreate>() {
           @Override
           public void write(JsonWriter out, AftermarketListingExpiryCreate value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public AftermarketListingExpiryCreate read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of AftermarketListingExpiryCreate given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of AftermarketListingExpiryCreate
   * @throws IOException if the JSON string is invalid with respect to AftermarketListingExpiryCreate
   */
  public static AftermarketListingExpiryCreate fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, AftermarketListingExpiryCreate.class);
  }

  /**
   * Convert an instance of AftermarketListingExpiryCreate to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

