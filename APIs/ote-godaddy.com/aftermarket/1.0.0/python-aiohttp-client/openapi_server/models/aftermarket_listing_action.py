# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class AftermarketListingAction(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, listing_action_id: int=None):
        """AftermarketListingAction - a model defined in OpenAPI

        :param listing_action_id: The listing_action_id of this AftermarketListingAction.
        """
        self.openapi_types = {
            'listing_action_id': int
        }

        self.attribute_map = {
            'listing_action_id': 'listingActionId'
        }

        self._listing_action_id = listing_action_id

    @classmethod
    def from_dict(cls, dikt: dict) -> 'AftermarketListingAction':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The AftermarketListingAction of this AftermarketListingAction.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def listing_action_id(self):
        """Gets the listing_action_id of this AftermarketListingAction.

        Action Id

        :return: The listing_action_id of this AftermarketListingAction.
        :rtype: int
        """
        return self._listing_action_id

    @listing_action_id.setter
    def listing_action_id(self, listing_action_id):
        """Sets the listing_action_id of this AftermarketListingAction.

        Action Id

        :param listing_action_id: The listing_action_id of this AftermarketListingAction.
        :type listing_action_id: int
        """
        if listing_action_id is None:
            raise ValueError("Invalid value for `listing_action_id`, must not be `None`")

        self._listing_action_id = listing_action_id
