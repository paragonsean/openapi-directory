# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class AftermarketListingExpiryCreate(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, domain: str=None, expires_at: str=None, losing_registrar_id: int=1, page_views_monthly: int=None, revenue_monthly: int=None):
        """AftermarketListingExpiryCreate - a model defined in OpenAPI

        :param domain: The domain of this AftermarketListingExpiryCreate.
        :param expires_at: The expires_at of this AftermarketListingExpiryCreate.
        :param losing_registrar_id: The losing_registrar_id of this AftermarketListingExpiryCreate.
        :param page_views_monthly: The page_views_monthly of this AftermarketListingExpiryCreate.
        :param revenue_monthly: The revenue_monthly of this AftermarketListingExpiryCreate.
        """
        self.openapi_types = {
            'domain': str,
            'expires_at': str,
            'losing_registrar_id': int,
            'page_views_monthly': int,
            'revenue_monthly': int
        }

        self.attribute_map = {
            'domain': 'domain',
            'expires_at': 'expiresAt',
            'losing_registrar_id': 'losingRegistrarId',
            'page_views_monthly': 'pageViewsMonthly',
            'revenue_monthly': 'revenueMonthly'
        }

        self._domain = domain
        self._expires_at = expires_at
        self._losing_registrar_id = losing_registrar_id
        self._page_views_monthly = page_views_monthly
        self._revenue_monthly = revenue_monthly

    @classmethod
    def from_dict(cls, dikt: dict) -> 'AftermarketListingExpiryCreate':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The AftermarketListingExpiryCreate of this AftermarketListingExpiryCreate.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def domain(self):
        """Gets the domain of this AftermarketListingExpiryCreate.

        Domain name

        :return: The domain of this AftermarketListingExpiryCreate.
        :rtype: str
        """
        return self._domain

    @domain.setter
    def domain(self, domain):
        """Sets the domain of this AftermarketListingExpiryCreate.

        Domain name

        :param domain: The domain of this AftermarketListingExpiryCreate.
        :type domain: str
        """
        if domain is None:
            raise ValueError("Invalid value for `domain`, must not be `None`")

        self._domain = domain

    @property
    def expires_at(self):
        """Gets the expires_at of this AftermarketListingExpiryCreate.

        Date when the domain expires

        :return: The expires_at of this AftermarketListingExpiryCreate.
        :rtype: str
        """
        return self._expires_at

    @expires_at.setter
    def expires_at(self, expires_at):
        """Sets the expires_at of this AftermarketListingExpiryCreate.

        Date when the domain expires

        :param expires_at: The expires_at of this AftermarketListingExpiryCreate.
        :type expires_at: str
        """
        if expires_at is None:
            raise ValueError("Invalid value for `expires_at`, must not be `None`")

        self._expires_at = expires_at

    @property
    def losing_registrar_id(self):
        """Gets the losing_registrar_id of this AftermarketListingExpiryCreate.

        Losing registrar id for the domain

        :return: The losing_registrar_id of this AftermarketListingExpiryCreate.
        :rtype: int
        """
        return self._losing_registrar_id

    @losing_registrar_id.setter
    def losing_registrar_id(self, losing_registrar_id):
        """Sets the losing_registrar_id of this AftermarketListingExpiryCreate.

        Losing registrar id for the domain

        :param losing_registrar_id: The losing_registrar_id of this AftermarketListingExpiryCreate.
        :type losing_registrar_id: int
        """
        if losing_registrar_id is None:
            raise ValueError("Invalid value for `losing_registrar_id`, must not be `None`")
        if losing_registrar_id is not None and losing_registrar_id < 1:
            raise ValueError("Invalid value for `losing_registrar_id`, must be a value greater than or equal to `1`")

        self._losing_registrar_id = losing_registrar_id

    @property
    def page_views_monthly(self):
        """Gets the page_views_monthly of this AftermarketListingExpiryCreate.

        Monthly traffic page view for the domain

        :return: The page_views_monthly of this AftermarketListingExpiryCreate.
        :rtype: int
        """
        return self._page_views_monthly

    @page_views_monthly.setter
    def page_views_monthly(self, page_views_monthly):
        """Sets the page_views_monthly of this AftermarketListingExpiryCreate.

        Monthly traffic page view for the domain

        :param page_views_monthly: The page_views_monthly of this AftermarketListingExpiryCreate.
        :type page_views_monthly: int
        """

        self._page_views_monthly = page_views_monthly

    @property
    def revenue_monthly(self):
        """Gets the revenue_monthly of this AftermarketListingExpiryCreate.

        Monthly parking revenue (in USD micro unit) for the domain

        :return: The revenue_monthly of this AftermarketListingExpiryCreate.
        :rtype: int
        """
        return self._revenue_monthly

    @revenue_monthly.setter
    def revenue_monthly(self, revenue_monthly):
        """Sets the revenue_monthly of this AftermarketListingExpiryCreate.

        Monthly parking revenue (in USD micro unit) for the domain

        :param revenue_monthly: The revenue_monthly of this AftermarketListingExpiryCreate.
        :type revenue_monthly: int
        """

        self._revenue_monthly = revenue_monthly
