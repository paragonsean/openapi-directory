# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class Input(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, ignore_if_not_present: bool=None, selector: str=None, value: str=None):
        """Input - a model defined in OpenAPI

        :param ignore_if_not_present: The ignore_if_not_present of this Input.
        :param selector: The selector of this Input.
        :param value: The value of this Input.
        """
        self.openapi_types = {
            'ignore_if_not_present': bool,
            'selector': str,
            'value': str
        }

        self.attribute_map = {
            'ignore_if_not_present': 'ignoreIfNotPresent',
            'selector': 'selector',
            'value': 'value'
        }

        self._ignore_if_not_present = ignore_if_not_present
        self._selector = selector
        self._value = value

    @classmethod
    def from_dict(cls, dikt: dict) -> 'Input':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The input of this Input.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def ignore_if_not_present(self):
        """Gets the ignore_if_not_present of this Input.


        :return: The ignore_if_not_present of this Input.
        :rtype: bool
        """
        return self._ignore_if_not_present

    @ignore_if_not_present.setter
    def ignore_if_not_present(self, ignore_if_not_present):
        """Sets the ignore_if_not_present of this Input.


        :param ignore_if_not_present: The ignore_if_not_present of this Input.
        :type ignore_if_not_present: bool
        """

        self._ignore_if_not_present = ignore_if_not_present

    @property
    def selector(self):
        """Gets the selector of this Input.

        Must be a valid CSS Selector

        :return: The selector of this Input.
        :rtype: str
        """
        return self._selector

    @selector.setter
    def selector(self, selector):
        """Sets the selector of this Input.

        Must be a valid CSS Selector

        :param selector: The selector of this Input.
        :type selector: str
        """

        self._selector = selector

    @property
    def value(self):
        """Gets the value of this Input.

        The value to input.

        :return: The value of this Input.
        :rtype: str
        """
        return self._value

    @value.setter
    def value(self, value):
        """Sets the value of this Input.

        The value to input.

        :param value: The value of this Input.
        :type value: str
        """

        self._value = value
