# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.action import Action
from openapi_server.models.initial_cookie import InitialCookie
from openapi_server import util


class Fetchrequest(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, actions: List[Action]=[], ignore_http_status_err_codes: bool=None, initial_cookies: List[InitialCookie]=[], output: str='buffer', proxy: str=None, type: str=None, url: str=None, wait_delay: float=None):
        """Fetchrequest - a model defined in OpenAPI

        :param actions: The actions of this Fetchrequest.
        :param ignore_http_status_err_codes: The ignore_http_status_err_codes of this Fetchrequest.
        :param initial_cookies: The initial_cookies of this Fetchrequest.
        :param output: The output of this Fetchrequest.
        :param proxy: The proxy of this Fetchrequest.
        :param type: The type of this Fetchrequest.
        :param url: The url of this Fetchrequest.
        :param wait_delay: The wait_delay of this Fetchrequest.
        """
        self.openapi_types = {
            'actions': List[Action],
            'ignore_http_status_err_codes': bool,
            'initial_cookies': List[InitialCookie],
            'output': str,
            'proxy': str,
            'type': str,
            'url': str,
            'wait_delay': float
        }

        self.attribute_map = {
            'actions': 'actions',
            'ignore_http_status_err_codes': 'ignoreHTTPStatusErrCodes',
            'initial_cookies': 'initialCookies',
            'output': 'output',
            'proxy': 'proxy',
            'type': 'type',
            'url': 'url',
            'wait_delay': 'waitDelay'
        }

        self._actions = actions
        self._ignore_http_status_err_codes = ignore_http_status_err_codes
        self._initial_cookies = initial_cookies
        self._output = output
        self._proxy = proxy
        self._type = type
        self._url = url
        self._wait_delay = wait_delay

    @classmethod
    def from_dict(cls, dikt: dict) -> 'Fetchrequest':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The fetchrequest of this Fetchrequest.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def actions(self):
        """Gets the actions of this Fetchrequest.

        Use actions to automate manual workflows while rendering web pages. They simulate real-world human interaction with pages. _(Chrome fetcher type only)_

        :return: The actions of this Fetchrequest.
        :rtype: List[Action]
        """
        return self._actions

    @actions.setter
    def actions(self, actions):
        """Sets the actions of this Fetchrequest.

        Use actions to automate manual workflows while rendering web pages. They simulate real-world human interaction with pages. _(Chrome fetcher type only)_

        :param actions: The actions of this Fetchrequest.
        :type actions: List[Action]
        """

        self._actions = actions

    @property
    def ignore_http_status_err_codes(self):
        """Gets the ignore_http_status_err_codes of this Fetchrequest.

        The HTTP 200 OK success status response code indicates that the request has succeeded. Sometimes a server returns normal HTML content even with an erroneous Non-200 HTTP response status code. The IgnoreHTTPStatusCode option is useful when you need to force the return of HTML content. Defaults to \"false.\"

        :return: The ignore_http_status_err_codes of this Fetchrequest.
        :rtype: bool
        """
        return self._ignore_http_status_err_codes

    @ignore_http_status_err_codes.setter
    def ignore_http_status_err_codes(self, ignore_http_status_err_codes):
        """Sets the ignore_http_status_err_codes of this Fetchrequest.

        The HTTP 200 OK success status response code indicates that the request has succeeded. Sometimes a server returns normal HTML content even with an erroneous Non-200 HTTP response status code. The IgnoreHTTPStatusCode option is useful when you need to force the return of HTML content. Defaults to \"false.\"

        :param ignore_http_status_err_codes: The ignore_http_status_err_codes of this Fetchrequest.
        :type ignore_http_status_err_codes: bool
        """

        self._ignore_http_status_err_codes = ignore_http_status_err_codes

    @property
    def initial_cookies(self):
        """Gets the initial_cookies of this Fetchrequest.

        The \"Initial Cookies\" option is useful for crawling websites that require a login. The simplest solution to get an array of cookies for specific websites is to use a web browser \"EditThisCookie\" extension. Copy a cookie array with \"EditThisCookie\" and paste it into the \"Initial cookie\" field.

        :return: The initial_cookies of this Fetchrequest.
        :rtype: List[InitialCookie]
        """
        return self._initial_cookies

    @initial_cookies.setter
    def initial_cookies(self, initial_cookies):
        """Sets the initial_cookies of this Fetchrequest.

        The \"Initial Cookies\" option is useful for crawling websites that require a login. The simplest solution to get an array of cookies for specific websites is to use a web browser \"EditThisCookie\" extension. Copy a cookie array with \"EditThisCookie\" and paste it into the \"Initial cookie\" field.

        :param initial_cookies: The initial_cookies of this Fetchrequest.
        :type initial_cookies: List[InitialCookie]
        """

        self._initial_cookies = initial_cookies

    @property
    def output(self):
        """Gets the output of this Fetchrequest.

        If set to _file_, the content of downloaded HTML is uploaded to Dataflow Kit Storage first. Then the link to this file is returned. Overwise, downloaded content is returned in the response body.

        :return: The output of this Fetchrequest.
        :rtype: str
        """
        return self._output

    @output.setter
    def output(self, output):
        """Sets the output of this Fetchrequest.

        If set to _file_, the content of downloaded HTML is uploaded to Dataflow Kit Storage first. Then the link to this file is returned. Overwise, downloaded content is returned in the response body.

        :param output: The output of this Fetchrequest.
        :type output: str
        """
        allowed_values = ["buffer", "file"]  # noqa: E501
        if output not in allowed_values:
            raise ValueError(
                "Invalid value for `output` ({0}), must be one of {1}"
                .format(output, allowed_values)
            )

        self._output = output

    @property
    def proxy(self):
        """Gets the proxy of this Fetchrequest.

        Specify proxy by adding [country ISO code](https://en.wikipedia.org/wiki/ISO_3166-2) to `country-` value to send requests through a proxy in the specified country. Use `country-any` to use random geo-targets.

        :return: The proxy of this Fetchrequest.
        :rtype: str
        """
        return self._proxy

    @proxy.setter
    def proxy(self, proxy):
        """Sets the proxy of this Fetchrequest.

        Specify proxy by adding [country ISO code](https://en.wikipedia.org/wiki/ISO_3166-2) to `country-` value to send requests through a proxy in the specified country. Use `country-any` to use random geo-targets.

        :param proxy: The proxy of this Fetchrequest.
        :type proxy: str
        """

        self._proxy = proxy

    @property
    def type(self):
        """Gets the type of this Fetchrequest.

        If set to `base`, the Base fetcher is used for downloading web page content. Use `chrome` for fetching content with a Headless chrome browser. If omitted `base` fetcher is used by default.

        :return: The type of this Fetchrequest.
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this Fetchrequest.

        If set to `base`, the Base fetcher is used for downloading web page content. Use `chrome` for fetching content with a Headless chrome browser. If omitted `base` fetcher is used by default.

        :param type: The type of this Fetchrequest.
        :type type: str
        """
        allowed_values = ["base", "chrome"]  # noqa: E501
        if type not in allowed_values:
            raise ValueError(
                "Invalid value for `type` ({0}), must be one of {1}"
                .format(type, allowed_values)
            )

        self._type = type

    @property
    def url(self):
        """Gets the url of this Fetchrequest.

        Specify URL to download.

        :return: The url of this Fetchrequest.
        :rtype: str
        """
        return self._url

    @url.setter
    def url(self, url):
        """Sets the url of this Fetchrequest.

        Specify URL to download.

        :param url: The url of this Fetchrequest.
        :type url: str
        """
        if url is None:
            raise ValueError("Invalid value for `url`, must not be `None`")

        self._url = url

    @property
    def wait_delay(self):
        """Gets the wait_delay of this Fetchrequest.

        Specify a wait delay (in seconds). This may be useful if certain elements of the web site need to be rendered after the initial page load. _(Chrome fetcher type only)_

        :return: The wait_delay of this Fetchrequest.
        :rtype: float
        """
        return self._wait_delay

    @wait_delay.setter
    def wait_delay(self, wait_delay):
        """Sets the wait_delay of this Fetchrequest.

        Specify a wait delay (in seconds). This may be useful if certain elements of the web site need to be rendered after the initial page load. _(Chrome fetcher type only)_

        :param wait_delay: The wait_delay of this Fetchrequest.
        :type wait_delay: float
        """

        self._wait_delay = wait_delay
