# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.field_filters_inner import FieldFiltersInner
from openapi_server.models.parserequest import Parserequest
from openapi_server import util


class ModelField(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, attrs: List[str]=None, details: Parserequest=None, filters: List[FieldFiltersInner]=None, name: str=None, selector: str=None, type: int=None):
        """ModelField - a model defined in OpenAPI

        :param attrs: The attrs of this ModelField.
        :param details: The details of this ModelField.
        :param filters: The filters of this ModelField.
        :param name: The name of this ModelField.
        :param selector: The selector of this ModelField.
        :param type: The type of this ModelField.
        """
        self.openapi_types = {
            'attrs': List[str],
            'details': Parserequest,
            'filters': List[FieldFiltersInner],
            'name': str,
            'selector': str,
            'type': int
        }

        self.attribute_map = {
            'attrs': 'attrs',
            'details': 'details',
            'filters': 'filters',
            'name': 'name',
            'selector': 'selector',
            'type': 'type'
        }

        self._attrs = attrs
        self._details = details
        self._filters = filters
        self._name = name
        self._selector = selector
        self._type = type

    @classmethod
    def from_dict(cls, dikt: dict) -> 'ModelField':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The _field of this ModelField.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def attrs(self):
        """Gets the attrs of this ModelField.

        A set of attributes to extract from a Field. Find more information about attributes

        :return: The attrs of this ModelField.
        :rtype: List[str]
        """
        return self._attrs

    @attrs.setter
    def attrs(self, attrs):
        """Sets the attrs of this ModelField.

        A set of attributes to extract from a Field. Find more information about attributes

        :param attrs: The attrs of this ModelField.
        :type attrs: List[str]
        """
        allowed_values = ["text", "href", "src", "alt"]  # noqa: E501
        if not set(attrs).issubset(set(allowed_values)):
            raise ValueError(
                "Invalid values for `attrs` [{0}], must be a subset of [{1}]"
                .format(", ".join(map(str, set(attrs) - set(allowed_values))),
                        ", ".join(map(str, allowed_values)))
            )

        self._attrs = attrs

    @property
    def details(self):
        """Gets the details of this ModelField.

        Details themself represent independent Parse request that extracts data from linked pages.

        :return: The details of this ModelField.
        :rtype: Parserequest
        """
        return self._details

    @details.setter
    def details(self, details):
        """Sets the details of this ModelField.

        Details themself represent independent Parse request that extracts data from linked pages.

        :param details: The details of this ModelField.
        :type details: Parserequest
        """

        self._details = details

    @property
    def filters(self):
        """Gets the filters of this ModelField.

        Filters are used to pre-processing of text data when extracting.

        :return: The filters of this ModelField.
        :rtype: List[FieldFiltersInner]
        """
        return self._filters

    @filters.setter
    def filters(self, filters):
        """Sets the filters of this ModelField.

        Filters are used to pre-processing of text data when extracting.

        :param filters: The filters of this ModelField.
        :type filters: List[FieldFiltersInner]
        """

        self._filters = filters

    @property
    def name(self):
        """Gets the name of this ModelField.

        Field name is used to aggregate results.

        :return: The name of this ModelField.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this ModelField.

        Field name is used to aggregate results.

        :param name: The name of this ModelField.
        :type name: str
        """
        if name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")

        self._name = name

    @property
    def selector(self):
        """Gets the selector of this ModelField.

        Selector represents a CSS selector for data extraction within the given block.

        :return: The selector of this ModelField.
        :rtype: str
        """
        return self._selector

    @selector.setter
    def selector(self, selector):
        """Sets the selector of this ModelField.

        Selector represents a CSS selector for data extraction within the given block.

        :param selector: The selector of this ModelField.
        :type selector: str
        """
        if selector is None:
            raise ValueError("Invalid value for `selector`, must not be `None`")

        self._selector = selector

    @property
    def type(self):
        """Gets the type of this ModelField.

        Selector type. ( 0 - image, 1 - text, 2 - link)

        :return: The type of this ModelField.
        :rtype: int
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this ModelField.

        Selector type. ( 0 - image, 1 - text, 2 - link)

        :param type: The type of this ModelField.
        :type type: int
        """
        allowed_values = [0, 1, 2]  # noqa: E501
        if type not in allowed_values:
            raise ValueError(
                "Invalid value for `type` ({0}), must be one of {1}"
                .format(type, allowed_values)
            )

        self._type = type
