# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class DoubleClick(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, ignore_if_not_present: bool=None, selector: str=None, skip_last_iteration: bool=None):
        """DoubleClick - a model defined in OpenAPI

        :param ignore_if_not_present: The ignore_if_not_present of this DoubleClick.
        :param selector: The selector of this DoubleClick.
        :param skip_last_iteration: The skip_last_iteration of this DoubleClick.
        """
        self.openapi_types = {
            'ignore_if_not_present': bool,
            'selector': str,
            'skip_last_iteration': bool
        }

        self.attribute_map = {
            'ignore_if_not_present': 'ignoreIfNotPresent',
            'selector': 'selector',
            'skip_last_iteration': 'skipLastIteration'
        }

        self._ignore_if_not_present = ignore_if_not_present
        self._selector = selector
        self._skip_last_iteration = skip_last_iteration

    @classmethod
    def from_dict(cls, dikt: dict) -> 'DoubleClick':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The doubleClick of this DoubleClick.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def ignore_if_not_present(self):
        """Gets the ignore_if_not_present of this DoubleClick.

        This optional parameter is useful when the target element occasionally may not be present in the DOM.

        :return: The ignore_if_not_present of this DoubleClick.
        :rtype: bool
        """
        return self._ignore_if_not_present

    @ignore_if_not_present.setter
    def ignore_if_not_present(self, ignore_if_not_present):
        """Sets the ignore_if_not_present of this DoubleClick.

        This optional parameter is useful when the target element occasionally may not be present in the DOM.

        :param ignore_if_not_present: The ignore_if_not_present of this DoubleClick.
        :type ignore_if_not_present: bool
        """

        self._ignore_if_not_present = ignore_if_not_present

    @property
    def selector(self):
        """Gets the selector of this DoubleClick.

        Must be a valid CSS Selector

        :return: The selector of this DoubleClick.
        :rtype: str
        """
        return self._selector

    @selector.setter
    def selector(self, selector):
        """Sets the selector of this DoubleClick.

        Must be a valid CSS Selector

        :param selector: The selector of this DoubleClick.
        :type selector: str
        """

        self._selector = selector

    @property
    def skip_last_iteration(self):
        """Gets the skip_last_iteration of this DoubleClick.

        It is only used for click action inside a loop only. Skips the last iteration.

        :return: The skip_last_iteration of this DoubleClick.
        :rtype: bool
        """
        return self._skip_last_iteration

    @skip_last_iteration.setter
    def skip_last_iteration(self, skip_last_iteration):
        """Sets the skip_last_iteration of this DoubleClick.

        It is only used for click action inside a loop only. Skips the last iteration.

        :param skip_last_iteration: The skip_last_iteration of this DoubleClick.
        :type skip_last_iteration: bool
        """

        self._skip_last_iteration = skip_last_iteration
