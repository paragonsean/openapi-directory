# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class InitialCookie(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, domain: str=None, expiration_date: float=None, host_only: bool=None, http_only: bool=None, id: float=None, name: str=None, path: str=None, same_site: str=None, secure: bool=None, session: bool=None, store_id: str=None, value: str=None):
        """InitialCookie - a model defined in OpenAPI

        :param domain: The domain of this InitialCookie.
        :param expiration_date: The expiration_date of this InitialCookie.
        :param host_only: The host_only of this InitialCookie.
        :param http_only: The http_only of this InitialCookie.
        :param id: The id of this InitialCookie.
        :param name: The name of this InitialCookie.
        :param path: The path of this InitialCookie.
        :param same_site: The same_site of this InitialCookie.
        :param secure: The secure of this InitialCookie.
        :param session: The session of this InitialCookie.
        :param store_id: The store_id of this InitialCookie.
        :param value: The value of this InitialCookie.
        """
        self.openapi_types = {
            'domain': str,
            'expiration_date': float,
            'host_only': bool,
            'http_only': bool,
            'id': float,
            'name': str,
            'path': str,
            'same_site': str,
            'secure': bool,
            'session': bool,
            'store_id': str,
            'value': str
        }

        self.attribute_map = {
            'domain': 'domain',
            'expiration_date': 'expirationDate',
            'host_only': 'hostOnly',
            'http_only': 'httpOnly',
            'id': 'id',
            'name': 'name',
            'path': 'path',
            'same_site': 'sameSite',
            'secure': 'secure',
            'session': 'session',
            'store_id': 'storeID',
            'value': 'value'
        }

        self._domain = domain
        self._expiration_date = expiration_date
        self._host_only = host_only
        self._http_only = http_only
        self._id = id
        self._name = name
        self._path = path
        self._same_site = same_site
        self._secure = secure
        self._session = session
        self._store_id = store_id
        self._value = value

    @classmethod
    def from_dict(cls, dikt: dict) -> 'InitialCookie':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The initialCookie of this InitialCookie.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def domain(self):
        """Gets the domain of this InitialCookie.


        :return: The domain of this InitialCookie.
        :rtype: str
        """
        return self._domain

    @domain.setter
    def domain(self, domain):
        """Sets the domain of this InitialCookie.


        :param domain: The domain of this InitialCookie.
        :type domain: str
        """

        self._domain = domain

    @property
    def expiration_date(self):
        """Gets the expiration_date of this InitialCookie.


        :return: The expiration_date of this InitialCookie.
        :rtype: float
        """
        return self._expiration_date

    @expiration_date.setter
    def expiration_date(self, expiration_date):
        """Sets the expiration_date of this InitialCookie.


        :param expiration_date: The expiration_date of this InitialCookie.
        :type expiration_date: float
        """

        self._expiration_date = expiration_date

    @property
    def host_only(self):
        """Gets the host_only of this InitialCookie.


        :return: The host_only of this InitialCookie.
        :rtype: bool
        """
        return self._host_only

    @host_only.setter
    def host_only(self, host_only):
        """Sets the host_only of this InitialCookie.


        :param host_only: The host_only of this InitialCookie.
        :type host_only: bool
        """

        self._host_only = host_only

    @property
    def http_only(self):
        """Gets the http_only of this InitialCookie.


        :return: The http_only of this InitialCookie.
        :rtype: bool
        """
        return self._http_only

    @http_only.setter
    def http_only(self, http_only):
        """Sets the http_only of this InitialCookie.


        :param http_only: The http_only of this InitialCookie.
        :type http_only: bool
        """

        self._http_only = http_only

    @property
    def id(self):
        """Gets the id of this InitialCookie.


        :return: The id of this InitialCookie.
        :rtype: float
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this InitialCookie.


        :param id: The id of this InitialCookie.
        :type id: float
        """

        self._id = id

    @property
    def name(self):
        """Gets the name of this InitialCookie.


        :return: The name of this InitialCookie.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this InitialCookie.


        :param name: The name of this InitialCookie.
        :type name: str
        """

        self._name = name

    @property
    def path(self):
        """Gets the path of this InitialCookie.


        :return: The path of this InitialCookie.
        :rtype: str
        """
        return self._path

    @path.setter
    def path(self, path):
        """Sets the path of this InitialCookie.


        :param path: The path of this InitialCookie.
        :type path: str
        """

        self._path = path

    @property
    def same_site(self):
        """Gets the same_site of this InitialCookie.


        :return: The same_site of this InitialCookie.
        :rtype: str
        """
        return self._same_site

    @same_site.setter
    def same_site(self, same_site):
        """Sets the same_site of this InitialCookie.


        :param same_site: The same_site of this InitialCookie.
        :type same_site: str
        """
        allowed_values = ["unspecified", "strict", "lax", "no_restriction"]  # noqa: E501
        if same_site not in allowed_values:
            raise ValueError(
                "Invalid value for `same_site` ({0}), must be one of {1}"
                .format(same_site, allowed_values)
            )

        self._same_site = same_site

    @property
    def secure(self):
        """Gets the secure of this InitialCookie.


        :return: The secure of this InitialCookie.
        :rtype: bool
        """
        return self._secure

    @secure.setter
    def secure(self, secure):
        """Sets the secure of this InitialCookie.


        :param secure: The secure of this InitialCookie.
        :type secure: bool
        """

        self._secure = secure

    @property
    def session(self):
        """Gets the session of this InitialCookie.


        :return: The session of this InitialCookie.
        :rtype: bool
        """
        return self._session

    @session.setter
    def session(self, session):
        """Sets the session of this InitialCookie.


        :param session: The session of this InitialCookie.
        :type session: bool
        """

        self._session = session

    @property
    def store_id(self):
        """Gets the store_id of this InitialCookie.


        :return: The store_id of this InitialCookie.
        :rtype: str
        """
        return self._store_id

    @store_id.setter
    def store_id(self, store_id):
        """Sets the store_id of this InitialCookie.


        :param store_id: The store_id of this InitialCookie.
        :type store_id: str
        """

        self._store_id = store_id

    @property
    def value(self):
        """Gets the value of this InitialCookie.


        :return: The value of this InitialCookie.
        :rtype: str
        """
        return self._value

    @value.setter
    def value(self, value):
        """Sets the value of this InitialCookie.


        :param value: The value of this InitialCookie.
        :type value: str
        """

        self._value = value
