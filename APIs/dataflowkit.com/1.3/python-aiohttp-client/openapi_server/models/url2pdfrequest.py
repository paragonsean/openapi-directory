# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.action import Action
from openapi_server.models.initial_cookie import InitialCookie
from openapi_server import util


class Url2pdfrequest(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, actions: List[Action]=[], ignore_http_status_err_codes: bool=None, initial_cookies: List[InitialCookie]=[], landscape: bool=False, margin_bottom: float=0.4, margin_left: float=0.4, margin_right: float=0.4, margin_top: float=0.4, output: str='buffer', page_ranges: str=None, paper_size: str='A4', print_background: bool=False, print_header_footer: bool=False, proxy: str=None, scale: float=1, url: str=None, wait_delay: float=0.5):
        """Url2pdfrequest - a model defined in OpenAPI

        :param actions: The actions of this Url2pdfrequest.
        :param ignore_http_status_err_codes: The ignore_http_status_err_codes of this Url2pdfrequest.
        :param initial_cookies: The initial_cookies of this Url2pdfrequest.
        :param landscape: The landscape of this Url2pdfrequest.
        :param margin_bottom: The margin_bottom of this Url2pdfrequest.
        :param margin_left: The margin_left of this Url2pdfrequest.
        :param margin_right: The margin_right of this Url2pdfrequest.
        :param margin_top: The margin_top of this Url2pdfrequest.
        :param output: The output of this Url2pdfrequest.
        :param page_ranges: The page_ranges of this Url2pdfrequest.
        :param paper_size: The paper_size of this Url2pdfrequest.
        :param print_background: The print_background of this Url2pdfrequest.
        :param print_header_footer: The print_header_footer of this Url2pdfrequest.
        :param proxy: The proxy of this Url2pdfrequest.
        :param scale: The scale of this Url2pdfrequest.
        :param url: The url of this Url2pdfrequest.
        :param wait_delay: The wait_delay of this Url2pdfrequest.
        """
        self.openapi_types = {
            'actions': List[Action],
            'ignore_http_status_err_codes': bool,
            'initial_cookies': List[InitialCookie],
            'landscape': bool,
            'margin_bottom': float,
            'margin_left': float,
            'margin_right': float,
            'margin_top': float,
            'output': str,
            'page_ranges': str,
            'paper_size': str,
            'print_background': bool,
            'print_header_footer': bool,
            'proxy': str,
            'scale': float,
            'url': str,
            'wait_delay': float
        }

        self.attribute_map = {
            'actions': 'actions',
            'ignore_http_status_err_codes': 'ignoreHTTPStatusErrCodes',
            'initial_cookies': 'initialCookies',
            'landscape': 'landscape',
            'margin_bottom': 'marginBottom',
            'margin_left': 'marginLeft',
            'margin_right': 'marginRight',
            'margin_top': 'marginTop',
            'output': 'output',
            'page_ranges': 'pageRanges',
            'paper_size': 'paperSize',
            'print_background': 'printBackground',
            'print_header_footer': 'printHeaderFooter',
            'proxy': 'proxy',
            'scale': 'scale',
            'url': 'url',
            'wait_delay': 'waitDelay'
        }

        self._actions = actions
        self._ignore_http_status_err_codes = ignore_http_status_err_codes
        self._initial_cookies = initial_cookies
        self._landscape = landscape
        self._margin_bottom = margin_bottom
        self._margin_left = margin_left
        self._margin_right = margin_right
        self._margin_top = margin_top
        self._output = output
        self._page_ranges = page_ranges
        self._paper_size = paper_size
        self._print_background = print_background
        self._print_header_footer = print_header_footer
        self._proxy = proxy
        self._scale = scale
        self._url = url
        self._wait_delay = wait_delay

    @classmethod
    def from_dict(cls, dikt: dict) -> 'Url2pdfrequest':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The url2pdfrequest of this Url2pdfrequest.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def actions(self):
        """Gets the actions of this Url2pdfrequest.

        Use actions to automate manual workflows while rendering web pages. They simulate real-world human interaction with pages.

        :return: The actions of this Url2pdfrequest.
        :rtype: List[Action]
        """
        return self._actions

    @actions.setter
    def actions(self, actions):
        """Sets the actions of this Url2pdfrequest.

        Use actions to automate manual workflows while rendering web pages. They simulate real-world human interaction with pages.

        :param actions: The actions of this Url2pdfrequest.
        :type actions: List[Action]
        """

        self._actions = actions

    @property
    def ignore_http_status_err_codes(self):
        """Gets the ignore_http_status_err_codes of this Url2pdfrequest.

        The HTTP 200 OK success status response code indicates that the request has succeeded. Sometimes a server returns normal HTML content even with an erroneous Non-200 HTTP response status code. The IgnoreHTTPStatusCode option is useful when you need to force the return of HTML content. Defaults to \"false.\"

        :return: The ignore_http_status_err_codes of this Url2pdfrequest.
        :rtype: bool
        """
        return self._ignore_http_status_err_codes

    @ignore_http_status_err_codes.setter
    def ignore_http_status_err_codes(self, ignore_http_status_err_codes):
        """Sets the ignore_http_status_err_codes of this Url2pdfrequest.

        The HTTP 200 OK success status response code indicates that the request has succeeded. Sometimes a server returns normal HTML content even with an erroneous Non-200 HTTP response status code. The IgnoreHTTPStatusCode option is useful when you need to force the return of HTML content. Defaults to \"false.\"

        :param ignore_http_status_err_codes: The ignore_http_status_err_codes of this Url2pdfrequest.
        :type ignore_http_status_err_codes: bool
        """

        self._ignore_http_status_err_codes = ignore_http_status_err_codes

    @property
    def initial_cookies(self):
        """Gets the initial_cookies of this Url2pdfrequest.

        The \"Initial Cookies\" option is useful for crawling websites that require a login. The simplest solution to get an array of cookies for specific websites is to use a web browser \"EditThisCookie\" extension. Copy a cookie array with \"EditThisCookie\" and paste it into the \"Initial cookie\" field.

        :return: The initial_cookies of this Url2pdfrequest.
        :rtype: List[InitialCookie]
        """
        return self._initial_cookies

    @initial_cookies.setter
    def initial_cookies(self, initial_cookies):
        """Sets the initial_cookies of this Url2pdfrequest.

        The \"Initial Cookies\" option is useful for crawling websites that require a login. The simplest solution to get an array of cookies for specific websites is to use a web browser \"EditThisCookie\" extension. Copy a cookie array with \"EditThisCookie\" and paste it into the \"Initial cookie\" field.

        :param initial_cookies: The initial_cookies of this Url2pdfrequest.
        :type initial_cookies: List[InitialCookie]
        """

        self._initial_cookies = initial_cookies

    @property
    def landscape(self):
        """Gets the landscape of this Url2pdfrequest.

        Paper orientation. Parameter landscape = false means portrait orientation. Set landscape to true for landscape page oriantation.

        :return: The landscape of this Url2pdfrequest.
        :rtype: bool
        """
        return self._landscape

    @landscape.setter
    def landscape(self, landscape):
        """Sets the landscape of this Url2pdfrequest.

        Paper orientation. Parameter landscape = false means portrait orientation. Set landscape to true for landscape page oriantation.

        :param landscape: The landscape of this Url2pdfrequest.
        :type landscape: bool
        """

        self._landscape = landscape

    @property
    def margin_bottom(self):
        """Gets the margin_bottom of this Url2pdfrequest.

        Bottom Margin of the PDF (in inches)

        :return: The margin_bottom of this Url2pdfrequest.
        :rtype: float
        """
        return self._margin_bottom

    @margin_bottom.setter
    def margin_bottom(self, margin_bottom):
        """Sets the margin_bottom of this Url2pdfrequest.

        Bottom Margin of the PDF (in inches)

        :param margin_bottom: The margin_bottom of this Url2pdfrequest.
        :type margin_bottom: float
        """

        self._margin_bottom = margin_bottom

    @property
    def margin_left(self):
        """Gets the margin_left of this Url2pdfrequest.

        Left Margin of the PDF (in inches)

        :return: The margin_left of this Url2pdfrequest.
        :rtype: float
        """
        return self._margin_left

    @margin_left.setter
    def margin_left(self, margin_left):
        """Sets the margin_left of this Url2pdfrequest.

        Left Margin of the PDF (in inches)

        :param margin_left: The margin_left of this Url2pdfrequest.
        :type margin_left: float
        """

        self._margin_left = margin_left

    @property
    def margin_right(self):
        """Gets the margin_right of this Url2pdfrequest.

        Right Margin of the PDF (in inches)

        :return: The margin_right of this Url2pdfrequest.
        :rtype: float
        """
        return self._margin_right

    @margin_right.setter
    def margin_right(self, margin_right):
        """Sets the margin_right of this Url2pdfrequest.

        Right Margin of the PDF (in inches)

        :param margin_right: The margin_right of this Url2pdfrequest.
        :type margin_right: float
        """

        self._margin_right = margin_right

    @property
    def margin_top(self):
        """Gets the margin_top of this Url2pdfrequest.

        Top Margin of the PDF (in inches)

        :return: The margin_top of this Url2pdfrequest.
        :rtype: float
        """
        return self._margin_top

    @margin_top.setter
    def margin_top(self, margin_top):
        """Sets the margin_top of this Url2pdfrequest.

        Top Margin of the PDF (in inches)

        :param margin_top: The margin_top of this Url2pdfrequest.
        :type margin_top: float
        """

        self._margin_top = margin_top

    @property
    def output(self):
        """Gets the output of this Url2pdfrequest.

        If set to _file_, the resulted PDF is uploaded to Dataflow Kit Storage first. Then the link to this file is returned. Overwise, PDF content is returned in the response body.

        :return: The output of this Url2pdfrequest.
        :rtype: str
        """
        return self._output

    @output.setter
    def output(self, output):
        """Sets the output of this Url2pdfrequest.

        If set to _file_, the resulted PDF is uploaded to Dataflow Kit Storage first. Then the link to this file is returned. Overwise, PDF content is returned in the response body.

        :param output: The output of this Url2pdfrequest.
        :type output: str
        """
        allowed_values = ["buffer", "file"]  # noqa: E501
        if output not in allowed_values:
            raise ValueError(
                "Invalid value for `output` ({0}), must be one of {1}"
                .format(output, allowed_values)
            )

        self._output = output

    @property
    def page_ranges(self):
        """Gets the page_ranges of this Url2pdfrequest.

        Specify page ranges to convert. Defaults to the empty value, which means convert all pages.

        :return: The page_ranges of this Url2pdfrequest.
        :rtype: str
        """
        return self._page_ranges

    @page_ranges.setter
    def page_ranges(self, page_ranges):
        """Sets the page_ranges of this Url2pdfrequest.

        Specify page ranges to convert. Defaults to the empty value, which means convert all pages.

        :param page_ranges: The page_ranges of this Url2pdfrequest.
        :type page_ranges: str
        """

        self._page_ranges = page_ranges

    @property
    def paper_size(self):
        """Gets the paper_size of this Url2pdfrequest.

        Page size parameter consists of the most popular page formats.

        :return: The paper_size of this Url2pdfrequest.
        :rtype: str
        """
        return self._paper_size

    @paper_size.setter
    def paper_size(self, paper_size):
        """Sets the paper_size of this Url2pdfrequest.

        Page size parameter consists of the most popular page formats.

        :param paper_size: The paper_size of this Url2pdfrequest.
        :type paper_size: str
        """
        allowed_values = ["A3", "A4", "A5", "A6", "Letter", "Legal", "Tabloid"]  # noqa: E501
        if paper_size not in allowed_values:
            raise ValueError(
                "Invalid value for `paper_size` ({0}), must be one of {1}"
                .format(paper_size, allowed_values)
            )

        self._paper_size = paper_size

    @property
    def print_background(self):
        """Gets the print_background of this Url2pdfrequest.

        Print background graphics in the PDF.

        :return: The print_background of this Url2pdfrequest.
        :rtype: bool
        """
        return self._print_background

    @print_background.setter
    def print_background(self, print_background):
        """Sets the print_background of this Url2pdfrequest.

        Print background graphics in the PDF.

        :param print_background: The print_background of this Url2pdfrequest.
        :type print_background: bool
        """

        self._print_background = print_background

    @property
    def print_header_footer(self):
        """Gets the print_header_footer of this Url2pdfrequest.

        printHeaderFooter  parameter consists of the date, name of the web page, the page URL, and how many pages the document you are printing.

        :return: The print_header_footer of this Url2pdfrequest.
        :rtype: bool
        """
        return self._print_header_footer

    @print_header_footer.setter
    def print_header_footer(self, print_header_footer):
        """Sets the print_header_footer of this Url2pdfrequest.

        printHeaderFooter  parameter consists of the date, name of the web page, the page URL, and how many pages the document you are printing.

        :param print_header_footer: The print_header_footer of this Url2pdfrequest.
        :type print_header_footer: bool
        """

        self._print_header_footer = print_header_footer

    @property
    def proxy(self):
        """Gets the proxy of this Url2pdfrequest.

        Specify proxy by adding [country ISO code](https://en.wikipedia.org/wiki/ISO_3166-2) to `country-` value to send requests through a proxy in the specified country. Use `country-any` to use random geo-targets.

        :return: The proxy of this Url2pdfrequest.
        :rtype: str
        """
        return self._proxy

    @proxy.setter
    def proxy(self, proxy):
        """Sets the proxy of this Url2pdfrequest.

        Specify proxy by adding [country ISO code](https://en.wikipedia.org/wiki/ISO_3166-2) to `country-` value to send requests through a proxy in the specified country. Use `country-any` to use random geo-targets.

        :param proxy: The proxy of this Url2pdfrequest.
        :type proxy: str
        """

        self._proxy = proxy

    @property
    def scale(self):
        """Gets the scale of this Url2pdfrequest.

        By default, PDF document content is generated according to dimensions of the original web page content. Using the `scale` parameter, you can specify a custom zoom factor from 0.1 to 5.0 of the webpage rendering.

        :return: The scale of this Url2pdfrequest.
        :rtype: float
        """
        return self._scale

    @scale.setter
    def scale(self, scale):
        """Sets the scale of this Url2pdfrequest.

        By default, PDF document content is generated according to dimensions of the original web page content. Using the `scale` parameter, you can specify a custom zoom factor from 0.1 to 5.0 of the webpage rendering.

        :param scale: The scale of this Url2pdfrequest.
        :type scale: float
        """

        self._scale = scale

    @property
    def url(self):
        """Gets the url of this Url2pdfrequest.

        The full URL address (including HTTP/HTTPS) of a web page that you want to save as PDF

        :return: The url of this Url2pdfrequest.
        :rtype: str
        """
        return self._url

    @url.setter
    def url(self, url):
        """Sets the url of this Url2pdfrequest.

        The full URL address (including HTTP/HTTPS) of a web page that you want to save as PDF

        :param url: The url of this Url2pdfrequest.
        :type url: str
        """
        if url is None:
            raise ValueError("Invalid value for `url`, must not be `None`")

        self._url = url

    @property
    def wait_delay(self):
        """Gets the wait_delay of this Url2pdfrequest.

        Specify a wait delay (in seconds). This may be useful if certain elements of the web site need to be rendered after the initial page load.

        :return: The wait_delay of this Url2pdfrequest.
        :rtype: float
        """
        return self._wait_delay

    @wait_delay.setter
    def wait_delay(self, wait_delay):
        """Sets the wait_delay of this Url2pdfrequest.

        Specify a wait delay (in seconds). This may be useful if certain elements of the web site need to be rendered after the initial page load.

        :param wait_delay: The wait_delay of this Url2pdfrequest.
        :type wait_delay: float
        """

        self._wait_delay = wait_delay
