# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.action import Action
from openapi_server.models.initial_cookie import InitialCookie
from openapi_server import util


class Url2screenshotrequest(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, actions: List[Action]=[], clip_selector: str=None, format: str='png', full_page: bool=False, height: int=600, ignore_http_status_err_codes: bool=None, initial_cookies: List[InitialCookie]=[], offsetx: int=0, offsety: int=0, output: str='buffer', print_background: bool=False, proxy: str=None, quality: int=80, scale: float=1, url: str=None, wait_delay: float=0.5, width: int=800):
        """Url2screenshotrequest - a model defined in OpenAPI

        :param actions: The actions of this Url2screenshotrequest.
        :param clip_selector: The clip_selector of this Url2screenshotrequest.
        :param format: The format of this Url2screenshotrequest.
        :param full_page: The full_page of this Url2screenshotrequest.
        :param height: The height of this Url2screenshotrequest.
        :param ignore_http_status_err_codes: The ignore_http_status_err_codes of this Url2screenshotrequest.
        :param initial_cookies: The initial_cookies of this Url2screenshotrequest.
        :param offsetx: The offsetx of this Url2screenshotrequest.
        :param offsety: The offsety of this Url2screenshotrequest.
        :param output: The output of this Url2screenshotrequest.
        :param print_background: The print_background of this Url2screenshotrequest.
        :param proxy: The proxy of this Url2screenshotrequest.
        :param quality: The quality of this Url2screenshotrequest.
        :param scale: The scale of this Url2screenshotrequest.
        :param url: The url of this Url2screenshotrequest.
        :param wait_delay: The wait_delay of this Url2screenshotrequest.
        :param width: The width of this Url2screenshotrequest.
        """
        self.openapi_types = {
            'actions': List[Action],
            'clip_selector': str,
            'format': str,
            'full_page': bool,
            'height': int,
            'ignore_http_status_err_codes': bool,
            'initial_cookies': List[InitialCookie],
            'offsetx': int,
            'offsety': int,
            'output': str,
            'print_background': bool,
            'proxy': str,
            'quality': int,
            'scale': float,
            'url': str,
            'wait_delay': float,
            'width': int
        }

        self.attribute_map = {
            'actions': 'actions',
            'clip_selector': 'clipSelector',
            'format': 'format',
            'full_page': 'fullPage',
            'height': 'height',
            'ignore_http_status_err_codes': 'ignoreHTTPStatusErrCodes',
            'initial_cookies': 'initialCookies',
            'offsetx': 'offsetx',
            'offsety': 'offsety',
            'output': 'output',
            'print_background': 'printBackground',
            'proxy': 'proxy',
            'quality': 'quality',
            'scale': 'scale',
            'url': 'url',
            'wait_delay': 'waitDelay',
            'width': 'width'
        }

        self._actions = actions
        self._clip_selector = clip_selector
        self._format = format
        self._full_page = full_page
        self._height = height
        self._ignore_http_status_err_codes = ignore_http_status_err_codes
        self._initial_cookies = initial_cookies
        self._offsetx = offsetx
        self._offsety = offsety
        self._output = output
        self._print_background = print_background
        self._proxy = proxy
        self._quality = quality
        self._scale = scale
        self._url = url
        self._wait_delay = wait_delay
        self._width = width

    @classmethod
    def from_dict(cls, dikt: dict) -> 'Url2screenshotrequest':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The url2screenshotrequest of this Url2screenshotrequest.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def actions(self):
        """Gets the actions of this Url2screenshotrequest.

        Use actions to automate manual workflows while rendering web pages. They simulate real-world human interaction with pages.

        :return: The actions of this Url2screenshotrequest.
        :rtype: List[Action]
        """
        return self._actions

    @actions.setter
    def actions(self, actions):
        """Sets the actions of this Url2screenshotrequest.

        Use actions to automate manual workflows while rendering web pages. They simulate real-world human interaction with pages.

        :param actions: The actions of this Url2screenshotrequest.
        :type actions: List[Action]
        """

        self._actions = actions

    @property
    def clip_selector(self):
        """Gets the clip_selector of this Url2screenshotrequest.

        Captures a screenshot of specified CSS element on a web page.

        :return: The clip_selector of this Url2screenshotrequest.
        :rtype: str
        """
        return self._clip_selector

    @clip_selector.setter
    def clip_selector(self, clip_selector):
        """Sets the clip_selector of this Url2screenshotrequest.

        Captures a screenshot of specified CSS element on a web page.

        :param clip_selector: The clip_selector of this Url2screenshotrequest.
        :type clip_selector: str
        """

        self._clip_selector = clip_selector

    @property
    def format(self):
        """Gets the format of this Url2screenshotrequest.

        Sets the Format of output image

        :return: The format of this Url2screenshotrequest.
        :rtype: str
        """
        return self._format

    @format.setter
    def format(self, format):
        """Sets the format of this Url2screenshotrequest.

        Sets the Format of output image

        :param format: The format of this Url2screenshotrequest.
        :type format: str
        """
        allowed_values = ["png", "jpeg"]  # noqa: E501
        if format not in allowed_values:
            raise ValueError(
                "Invalid value for `format` ({0}), must be one of {1}"
                .format(format, allowed_values)
            )

        self._format = format

    @property
    def full_page(self):
        """Gets the full_page of this Url2screenshotrequest.

        takes a screenshot of a full web page. It ignores offsetX, offsety, width and height argument values.

        :return: The full_page of this Url2screenshotrequest.
        :rtype: bool
        """
        return self._full_page

    @full_page.setter
    def full_page(self, full_page):
        """Sets the full_page of this Url2screenshotrequest.

        takes a screenshot of a full web page. It ignores offsetX, offsety, width and height argument values.

        :param full_page: The full_page of this Url2screenshotrequest.
        :type full_page: bool
        """

        self._full_page = full_page

    @property
    def height(self):
        """Gets the height of this Url2screenshotrequest.

        Rectangle height in device independent pixels (dip).

        :return: The height of this Url2screenshotrequest.
        :rtype: int
        """
        return self._height

    @height.setter
    def height(self, height):
        """Sets the height of this Url2screenshotrequest.

        Rectangle height in device independent pixels (dip).

        :param height: The height of this Url2screenshotrequest.
        :type height: int
        """

        self._height = height

    @property
    def ignore_http_status_err_codes(self):
        """Gets the ignore_http_status_err_codes of this Url2screenshotrequest.

        The HTTP 200 OK success status response code indicates that the request has succeeded. Sometimes a server returns normal HTML content even with an erroneous Non-200 HTTP response status code. The IgnoreHTTPStatusCode option is useful when you need to force the return of HTML content. Defaults to \"false.\"

        :return: The ignore_http_status_err_codes of this Url2screenshotrequest.
        :rtype: bool
        """
        return self._ignore_http_status_err_codes

    @ignore_http_status_err_codes.setter
    def ignore_http_status_err_codes(self, ignore_http_status_err_codes):
        """Sets the ignore_http_status_err_codes of this Url2screenshotrequest.

        The HTTP 200 OK success status response code indicates that the request has succeeded. Sometimes a server returns normal HTML content even with an erroneous Non-200 HTTP response status code. The IgnoreHTTPStatusCode option is useful when you need to force the return of HTML content. Defaults to \"false.\"

        :param ignore_http_status_err_codes: The ignore_http_status_err_codes of this Url2screenshotrequest.
        :type ignore_http_status_err_codes: bool
        """

        self._ignore_http_status_err_codes = ignore_http_status_err_codes

    @property
    def initial_cookies(self):
        """Gets the initial_cookies of this Url2screenshotrequest.

        The \"Initial Cookies\" option is useful for crawling websites that require a login. The simplest solution to get an array of cookies for specific websites is to use a web browser \"EditThisCookie\" extension. Copy a cookie array with \"EditThisCookie\" and paste it into the \"Initial cookie\" field.

        :return: The initial_cookies of this Url2screenshotrequest.
        :rtype: List[InitialCookie]
        """
        return self._initial_cookies

    @initial_cookies.setter
    def initial_cookies(self, initial_cookies):
        """Sets the initial_cookies of this Url2screenshotrequest.

        The \"Initial Cookies\" option is useful for crawling websites that require a login. The simplest solution to get an array of cookies for specific websites is to use a web browser \"EditThisCookie\" extension. Copy a cookie array with \"EditThisCookie\" and paste it into the \"Initial cookie\" field.

        :param initial_cookies: The initial_cookies of this Url2screenshotrequest.
        :type initial_cookies: List[InitialCookie]
        """

        self._initial_cookies = initial_cookies

    @property
    def offsetx(self):
        """Gets the offsetx of this Url2screenshotrequest.

        X offset in device independent pixels (dip).

        :return: The offsetx of this Url2screenshotrequest.
        :rtype: int
        """
        return self._offsetx

    @offsetx.setter
    def offsetx(self, offsetx):
        """Sets the offsetx of this Url2screenshotrequest.

        X offset in device independent pixels (dip).

        :param offsetx: The offsetx of this Url2screenshotrequest.
        :type offsetx: int
        """

        self._offsetx = offsetx

    @property
    def offsety(self):
        """Gets the offsety of this Url2screenshotrequest.

        Y offset in device independent pixels (dip).

        :return: The offsety of this Url2screenshotrequest.
        :rtype: int
        """
        return self._offsety

    @offsety.setter
    def offsety(self, offsety):
        """Sets the offsety of this Url2screenshotrequest.

        Y offset in device independent pixels (dip).

        :param offsety: The offsety of this Url2screenshotrequest.
        :type offsety: int
        """

        self._offsety = offsety

    @property
    def output(self):
        """Gets the output of this Url2screenshotrequest.

        If set to _file_, the resulted screenshot is uploaded to Dataflow Kit Storage first. Then the link to this file is returned. Overwise, web site screenshot is returned in the response body.

        :return: The output of this Url2screenshotrequest.
        :rtype: str
        """
        return self._output

    @output.setter
    def output(self, output):
        """Sets the output of this Url2screenshotrequest.

        If set to _file_, the resulted screenshot is uploaded to Dataflow Kit Storage first. Then the link to this file is returned. Overwise, web site screenshot is returned in the response body.

        :param output: The output of this Url2screenshotrequest.
        :type output: str
        """
        allowed_values = ["buffer", "file"]  # noqa: E501
        if output not in allowed_values:
            raise ValueError(
                "Invalid value for `output` ({0}), must be one of {1}"
                .format(output, allowed_values)
            )

        self._output = output

    @property
    def print_background(self):
        """Gets the print_background of this Url2screenshotrequest.

        Print background graphics in the PDF.

        :return: The print_background of this Url2screenshotrequest.
        :rtype: bool
        """
        return self._print_background

    @print_background.setter
    def print_background(self, print_background):
        """Sets the print_background of this Url2screenshotrequest.

        Print background graphics in the PDF.

        :param print_background: The print_background of this Url2screenshotrequest.
        :type print_background: bool
        """

        self._print_background = print_background

    @property
    def proxy(self):
        """Gets the proxy of this Url2screenshotrequest.

        Specify proxy by adding [country ISO code](https://en.wikipedia.org/wiki/ISO_3166-2) to `country-` value to send requests through a proxy in the specified country. Use `country-any` to use random geo-targets.

        :return: The proxy of this Url2screenshotrequest.
        :rtype: str
        """
        return self._proxy

    @proxy.setter
    def proxy(self, proxy):
        """Sets the proxy of this Url2screenshotrequest.

        Specify proxy by adding [country ISO code](https://en.wikipedia.org/wiki/ISO_3166-2) to `country-` value to send requests through a proxy in the specified country. Use `country-any` to use random geo-targets.

        :param proxy: The proxy of this Url2screenshotrequest.
        :type proxy: str
        """

        self._proxy = proxy

    @property
    def quality(self):
        """Gets the quality of this Url2screenshotrequest.

        Sets the Quality of output image. Compression quality from range [0..100] (jpeg only).

        :return: The quality of this Url2screenshotrequest.
        :rtype: int
        """
        return self._quality

    @quality.setter
    def quality(self, quality):
        """Sets the quality of this Url2screenshotrequest.

        Sets the Quality of output image. Compression quality from range [0..100] (jpeg only).

        :param quality: The quality of this Url2screenshotrequest.
        :type quality: int
        """

        self._quality = quality

    @property
    def scale(self):
        """Gets the scale of this Url2screenshotrequest.

        Image scale factor. range [0.1 .. 3]

        :return: The scale of this Url2screenshotrequest.
        :rtype: float
        """
        return self._scale

    @scale.setter
    def scale(self, scale):
        """Sets the scale of this Url2screenshotrequest.

        Image scale factor. range [0.1 .. 3]

        :param scale: The scale of this Url2screenshotrequest.
        :type scale: float
        """

        self._scale = scale

    @property
    def url(self):
        """Gets the url of this Url2screenshotrequest.

        The full URL address (including HTTP/HTTPS) of a web page that you want to capture

        :return: The url of this Url2screenshotrequest.
        :rtype: str
        """
        return self._url

    @url.setter
    def url(self, url):
        """Sets the url of this Url2screenshotrequest.

        The full URL address (including HTTP/HTTPS) of a web page that you want to capture

        :param url: The url of this Url2screenshotrequest.
        :type url: str
        """
        if url is None:
            raise ValueError("Invalid value for `url`, must not be `None`")

        self._url = url

    @property
    def wait_delay(self):
        """Gets the wait_delay of this Url2screenshotrequest.

        Specify a wait delay (in seconds). This may be useful if certain elements of the web site need to be rendered after the initial page load.

        :return: The wait_delay of this Url2screenshotrequest.
        :rtype: float
        """
        return self._wait_delay

    @wait_delay.setter
    def wait_delay(self, wait_delay):
        """Sets the wait_delay of this Url2screenshotrequest.

        Specify a wait delay (in seconds). This may be useful if certain elements of the web site need to be rendered after the initial page load.

        :param wait_delay: The wait_delay of this Url2screenshotrequest.
        :type wait_delay: float
        """

        self._wait_delay = wait_delay

    @property
    def width(self):
        """Gets the width of this Url2screenshotrequest.

        Rectangle width in device independent pixels (dip).

        :return: The width of this Url2screenshotrequest.
        :rtype: int
        """
        return self._width

    @width.setter
    def width(self, width):
        """Sets the width of this Url2screenshotrequest.

        Rectangle width in device independent pixels (dip).

        :param width: The width of this Url2screenshotrequest.
        :type width: int
        """

        self._width = width
