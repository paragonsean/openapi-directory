/*
 * Dataflow Kit Web Scraper
 * Render Javascript driven pages, while we internally manage Headless Chrome and proxies for you.   - Build a custom web scraper with our Visual point-and-click toolkit. - Scrape the most popular Search engines result pages (SERP). - Convert web pages to PDF and capture screenshots. *** ### Authentication Dataflow Kit API require you to sign up for an API key in order to use the API.   The API key can be found in the [DFK Dashboard](https://account.dataflowkit.com) after _free registration_.  Pass a secret API Key to all API requests to the server as the `api_key` query parameter.  
 *
 * The version of the OpenAPI document: 1.3
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.math.BigDecimal;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * InitialCookie structure keep cookies that optionally can be passed to the new fetcher crawl a website that requires a login. Generate Cookies array with EditThisCookie chrome extension.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T10:05:44.962241-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class InitialCookie {
  public static final String SERIALIZED_NAME_DOMAIN = "domain";
  @SerializedName(SERIALIZED_NAME_DOMAIN)
  private String domain;

  public static final String SERIALIZED_NAME_EXPIRATION_DATE = "expirationDate";
  @SerializedName(SERIALIZED_NAME_EXPIRATION_DATE)
  private BigDecimal expirationDate;

  public static final String SERIALIZED_NAME_HOST_ONLY = "hostOnly";
  @SerializedName(SERIALIZED_NAME_HOST_ONLY)
  private Boolean hostOnly;

  public static final String SERIALIZED_NAME_HTTP_ONLY = "httpOnly";
  @SerializedName(SERIALIZED_NAME_HTTP_ONLY)
  private Boolean httpOnly;

  public static final String SERIALIZED_NAME_ID = "id";
  @SerializedName(SERIALIZED_NAME_ID)
  private BigDecimal id;

  public static final String SERIALIZED_NAME_NAME = "name";
  @SerializedName(SERIALIZED_NAME_NAME)
  private String name;

  public static final String SERIALIZED_NAME_PATH = "path";
  @SerializedName(SERIALIZED_NAME_PATH)
  private String path;

  /**
   * Gets or Sets sameSite
   */
  @JsonAdapter(SameSiteEnum.Adapter.class)
  public enum SameSiteEnum {
    UNSPECIFIED("unspecified"),
    
    STRICT("strict"),
    
    LAX("lax"),
    
    NO_RESTRICTION("no_restriction");

    private String value;

    SameSiteEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static SameSiteEnum fromValue(String value) {
      for (SameSiteEnum b : SameSiteEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<SameSiteEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final SameSiteEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public SameSiteEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return SameSiteEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      SameSiteEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_SAME_SITE = "sameSite";
  @SerializedName(SERIALIZED_NAME_SAME_SITE)
  private SameSiteEnum sameSite;

  public static final String SERIALIZED_NAME_SECURE = "secure";
  @SerializedName(SERIALIZED_NAME_SECURE)
  private Boolean secure;

  public static final String SERIALIZED_NAME_SESSION = "session";
  @SerializedName(SERIALIZED_NAME_SESSION)
  private Boolean session;

  public static final String SERIALIZED_NAME_STORE_I_D = "storeID";
  @SerializedName(SERIALIZED_NAME_STORE_I_D)
  private String storeID;

  public static final String SERIALIZED_NAME_VALUE = "value";
  @SerializedName(SERIALIZED_NAME_VALUE)
  private String value;

  public InitialCookie() {
  }

  public InitialCookie domain(String domain) {
    this.domain = domain;
    return this;
  }

  /**
   * Get domain
   * @return domain
   */
  @javax.annotation.Nullable
  public String getDomain() {
    return domain;
  }

  public void setDomain(String domain) {
    this.domain = domain;
  }


  public InitialCookie expirationDate(BigDecimal expirationDate) {
    this.expirationDate = expirationDate;
    return this;
  }

  /**
   * Get expirationDate
   * @return expirationDate
   */
  @javax.annotation.Nullable
  public BigDecimal getExpirationDate() {
    return expirationDate;
  }

  public void setExpirationDate(BigDecimal expirationDate) {
    this.expirationDate = expirationDate;
  }


  public InitialCookie hostOnly(Boolean hostOnly) {
    this.hostOnly = hostOnly;
    return this;
  }

  /**
   * Get hostOnly
   * @return hostOnly
   */
  @javax.annotation.Nullable
  public Boolean getHostOnly() {
    return hostOnly;
  }

  public void setHostOnly(Boolean hostOnly) {
    this.hostOnly = hostOnly;
  }


  public InitialCookie httpOnly(Boolean httpOnly) {
    this.httpOnly = httpOnly;
    return this;
  }

  /**
   * Get httpOnly
   * @return httpOnly
   */
  @javax.annotation.Nullable
  public Boolean getHttpOnly() {
    return httpOnly;
  }

  public void setHttpOnly(Boolean httpOnly) {
    this.httpOnly = httpOnly;
  }


  public InitialCookie id(BigDecimal id) {
    this.id = id;
    return this;
  }

  /**
   * Get id
   * @return id
   */
  @javax.annotation.Nullable
  public BigDecimal getId() {
    return id;
  }

  public void setId(BigDecimal id) {
    this.id = id;
  }


  public InitialCookie name(String name) {
    this.name = name;
    return this;
  }

  /**
   * Get name
   * @return name
   */
  @javax.annotation.Nullable
  public String getName() {
    return name;
  }

  public void setName(String name) {
    this.name = name;
  }


  public InitialCookie path(String path) {
    this.path = path;
    return this;
  }

  /**
   * Get path
   * @return path
   */
  @javax.annotation.Nullable
  public String getPath() {
    return path;
  }

  public void setPath(String path) {
    this.path = path;
  }


  public InitialCookie sameSite(SameSiteEnum sameSite) {
    this.sameSite = sameSite;
    return this;
  }

  /**
   * Get sameSite
   * @return sameSite
   */
  @javax.annotation.Nullable
  public SameSiteEnum getSameSite() {
    return sameSite;
  }

  public void setSameSite(SameSiteEnum sameSite) {
    this.sameSite = sameSite;
  }


  public InitialCookie secure(Boolean secure) {
    this.secure = secure;
    return this;
  }

  /**
   * Get secure
   * @return secure
   */
  @javax.annotation.Nullable
  public Boolean getSecure() {
    return secure;
  }

  public void setSecure(Boolean secure) {
    this.secure = secure;
  }


  public InitialCookie session(Boolean session) {
    this.session = session;
    return this;
  }

  /**
   * Get session
   * @return session
   */
  @javax.annotation.Nullable
  public Boolean getSession() {
    return session;
  }

  public void setSession(Boolean session) {
    this.session = session;
  }


  public InitialCookie storeID(String storeID) {
    this.storeID = storeID;
    return this;
  }

  /**
   * Get storeID
   * @return storeID
   */
  @javax.annotation.Nullable
  public String getStoreID() {
    return storeID;
  }

  public void setStoreID(String storeID) {
    this.storeID = storeID;
  }


  public InitialCookie value(String value) {
    this.value = value;
    return this;
  }

  /**
   * Get value
   * @return value
   */
  @javax.annotation.Nullable
  public String getValue() {
    return value;
  }

  public void setValue(String value) {
    this.value = value;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    InitialCookie initialCookie = (InitialCookie) o;
    return Objects.equals(this.domain, initialCookie.domain) &&
        Objects.equals(this.expirationDate, initialCookie.expirationDate) &&
        Objects.equals(this.hostOnly, initialCookie.hostOnly) &&
        Objects.equals(this.httpOnly, initialCookie.httpOnly) &&
        Objects.equals(this.id, initialCookie.id) &&
        Objects.equals(this.name, initialCookie.name) &&
        Objects.equals(this.path, initialCookie.path) &&
        Objects.equals(this.sameSite, initialCookie.sameSite) &&
        Objects.equals(this.secure, initialCookie.secure) &&
        Objects.equals(this.session, initialCookie.session) &&
        Objects.equals(this.storeID, initialCookie.storeID) &&
        Objects.equals(this.value, initialCookie.value);
  }

  @Override
  public int hashCode() {
    return Objects.hash(domain, expirationDate, hostOnly, httpOnly, id, name, path, sameSite, secure, session, storeID, value);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class InitialCookie {\n");
    sb.append("    domain: ").append(toIndentedString(domain)).append("\n");
    sb.append("    expirationDate: ").append(toIndentedString(expirationDate)).append("\n");
    sb.append("    hostOnly: ").append(toIndentedString(hostOnly)).append("\n");
    sb.append("    httpOnly: ").append(toIndentedString(httpOnly)).append("\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    path: ").append(toIndentedString(path)).append("\n");
    sb.append("    sameSite: ").append(toIndentedString(sameSite)).append("\n");
    sb.append("    secure: ").append(toIndentedString(secure)).append("\n");
    sb.append("    session: ").append(toIndentedString(session)).append("\n");
    sb.append("    storeID: ").append(toIndentedString(storeID)).append("\n");
    sb.append("    value: ").append(toIndentedString(value)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("domain");
    openapiFields.add("expirationDate");
    openapiFields.add("hostOnly");
    openapiFields.add("httpOnly");
    openapiFields.add("id");
    openapiFields.add("name");
    openapiFields.add("path");
    openapiFields.add("sameSite");
    openapiFields.add("secure");
    openapiFields.add("session");
    openapiFields.add("storeID");
    openapiFields.add("value");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to InitialCookie
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!InitialCookie.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in InitialCookie is not found in the empty JSON string", InitialCookie.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!InitialCookie.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `InitialCookie` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("domain") != null && !jsonObj.get("domain").isJsonNull()) && !jsonObj.get("domain").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `domain` to be a primitive type in the JSON string but got `%s`", jsonObj.get("domain").toString()));
      }
      if ((jsonObj.get("name") != null && !jsonObj.get("name").isJsonNull()) && !jsonObj.get("name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("name").toString()));
      }
      if ((jsonObj.get("path") != null && !jsonObj.get("path").isJsonNull()) && !jsonObj.get("path").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `path` to be a primitive type in the JSON string but got `%s`", jsonObj.get("path").toString()));
      }
      if ((jsonObj.get("sameSite") != null && !jsonObj.get("sameSite").isJsonNull()) && !jsonObj.get("sameSite").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `sameSite` to be a primitive type in the JSON string but got `%s`", jsonObj.get("sameSite").toString()));
      }
      // validate the optional field `sameSite`
      if (jsonObj.get("sameSite") != null && !jsonObj.get("sameSite").isJsonNull()) {
        SameSiteEnum.validateJsonElement(jsonObj.get("sameSite"));
      }
      if ((jsonObj.get("storeID") != null && !jsonObj.get("storeID").isJsonNull()) && !jsonObj.get("storeID").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `storeID` to be a primitive type in the JSON string but got `%s`", jsonObj.get("storeID").toString()));
      }
      if ((jsonObj.get("value") != null && !jsonObj.get("value").isJsonNull()) && !jsonObj.get("value").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `value` to be a primitive type in the JSON string but got `%s`", jsonObj.get("value").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!InitialCookie.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'InitialCookie' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<InitialCookie> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(InitialCookie.class));

       return (TypeAdapter<T>) new TypeAdapter<InitialCookie>() {
           @Override
           public void write(JsonWriter out, InitialCookie value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public InitialCookie read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of InitialCookie given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of InitialCookie
   * @throws IOException if the JSON string is invalid with respect to InitialCookie
   */
  public static InitialCookie fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, InitialCookie.class);
  }

  /**
   * Convert an instance of InitialCookie to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

