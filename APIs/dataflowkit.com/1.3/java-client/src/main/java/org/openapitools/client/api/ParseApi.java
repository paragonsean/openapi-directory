/*
 * Dataflow Kit Web Scraper
 * Render Javascript driven pages, while we internally manage Headless Chrome and proxies for you.   - Build a custom web scraper with our Visual point-and-click toolkit. - Scrape the most popular Search engines result pages (SERP). - Convert web pages to PDF and capture screenshots. *** ### Authentication Dataflow Kit API require you to sign up for an API key in order to use the API.   The API key can be found in the [DFK Dashboard](https://account.dataflowkit.com) after _free registration_.  Pass a secret API Key to all API requests to the server as the `api_key` query parameter.  
 *
 * The version of the OpenAPI document: 1.3
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiCallback;
import org.openapitools.client.ApiClient;
import org.openapitools.client.ApiException;
import org.openapitools.client.ApiResponse;
import org.openapitools.client.Configuration;
import org.openapitools.client.Pair;
import org.openapitools.client.ProgressRequestBody;
import org.openapitools.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import org.openapitools.client.model.Parserequest;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class ParseApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public ParseApi() {
        this(Configuration.getDefaultApiClient());
    }

    public ParseApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for parse
     * @param parserequest ### Field types and attributes    - **Text**. Extract human-readable text from the selected element and all its child elements. HTML tags are stripped, and only text returned.      - **Link**. Capture link &#x60;href&#x60; attribute and link text. Or specify a special _Path_ option for website navigation. When Path option is true, all other selectors ignored, and no results from the current page returned.      - **Image**. Image type extracts &#x60;src&#x60; (URL) and &#x60;alt&#x60; attributes of an image   *** ### Filters Filters are used to manipulate text data when extracting.  Here is the list of available filters   - **Trim** removes leading and trailing white spaces from the _field text or attribute_  - **Normal** leaves the case and capitalization of text/ attribute exactly as is.  - **UPPERCASE** makes all of the letters in the Field&#39;s text/ attribute uppercase.  - **lowercase** makes all of the letters in the Field&#39;s text/ attribute lowercase.  - **Capitalize** capitalizes the first letter of each word in the Field&#39;s text/ attribute  - **Concatinate** joins text array element into a single string  *** ### Regular Expressions  For more advanced text formatting regular expression can be used. Some useful examples are listed below   | Input text | Regex | Result | | ---------- | ----- | ------ | | price- 10.99€ | &lt;code&gt;[0-9]+\\.[0-9]+&lt;/code&gt; | 10.99 | | phone- 0 (944) 244-18-22 | &lt;code&gt;\\w+&lt;/code&gt; | 09442441822 |   *** ### Details. Chaining. The Link field type serves as a navigation link to a details page containing more data. A special _Path_ option is used for navigation only. When the Path option specified, no results from the current page returned. But grouped results from details pages will be pulled instead. You can use chaining functionality of Dataflow Kit scraper to retrieve all the detail page data at the same time.  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Returns data in the one of the follwing formats - JSON, JSON Lines, CSV, MS Excel, XML </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request. Invalid payload specified. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized. &#x60;api_key&#x60; parameter is missed or incorrect </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error is a very general HTTP status code that means something has gone wrong on the web site&#39;s server. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call parseCall(Parserequest parserequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = parserequest;

        // create path and map variables
        String localVarPath = "/parse";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json",
            "text/plain; charset=utf-8"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "ApiKeyAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call parseValidateBeforeCall(Parserequest parserequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'parserequest' is set
        if (parserequest == null) {
            throw new ApiException("Missing the required parameter 'parserequest' when calling parse(Async)");
        }

        return parseCall(parserequest, _callback);

    }

    /**
     * Extract structured data from web pages
     * Dataflow kit uses CSS selectors to find HTML elements in web pages for later data extraction.  Open [visual point-and-click toolkit](https://dataflowkit.com/dfk) and click desired elements on a page to specify extracting data.     Then you can send generated payload to &#x60;/parse&#x60; endpoint. We crawl web pages and extract data like text, links, or images for you following the specified rules.    Extracted data is returned in CSV, MS Excel, JSON, JSON(Lines) or XML format. 
     * @param parserequest ### Field types and attributes    - **Text**. Extract human-readable text from the selected element and all its child elements. HTML tags are stripped, and only text returned.      - **Link**. Capture link &#x60;href&#x60; attribute and link text. Or specify a special _Path_ option for website navigation. When Path option is true, all other selectors ignored, and no results from the current page returned.      - **Image**. Image type extracts &#x60;src&#x60; (URL) and &#x60;alt&#x60; attributes of an image   *** ### Filters Filters are used to manipulate text data when extracting.  Here is the list of available filters   - **Trim** removes leading and trailing white spaces from the _field text or attribute_  - **Normal** leaves the case and capitalization of text/ attribute exactly as is.  - **UPPERCASE** makes all of the letters in the Field&#39;s text/ attribute uppercase.  - **lowercase** makes all of the letters in the Field&#39;s text/ attribute lowercase.  - **Capitalize** capitalizes the first letter of each word in the Field&#39;s text/ attribute  - **Concatinate** joins text array element into a single string  *** ### Regular Expressions  For more advanced text formatting regular expression can be used. Some useful examples are listed below   | Input text | Regex | Result | | ---------- | ----- | ------ | | price- 10.99€ | &lt;code&gt;[0-9]+\\.[0-9]+&lt;/code&gt; | 10.99 | | phone- 0 (944) 244-18-22 | &lt;code&gt;\\w+&lt;/code&gt; | 09442441822 |   *** ### Details. Chaining. The Link field type serves as a navigation link to a details page containing more data. A special _Path_ option is used for navigation only. When the Path option specified, no results from the current page returned. But grouped results from details pages will be pulled instead. You can use chaining functionality of Dataflow Kit scraper to retrieve all the detail page data at the same time.  (required)
     * @return Object
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Returns data in the one of the follwing formats - JSON, JSON Lines, CSV, MS Excel, XML </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request. Invalid payload specified. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized. &#x60;api_key&#x60; parameter is missed or incorrect </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error is a very general HTTP status code that means something has gone wrong on the web site&#39;s server. </td><td>  -  </td></tr>
     </table>
     */
    public Object parse(Parserequest parserequest) throws ApiException {
        ApiResponse<Object> localVarResp = parseWithHttpInfo(parserequest);
        return localVarResp.getData();
    }

    /**
     * Extract structured data from web pages
     * Dataflow kit uses CSS selectors to find HTML elements in web pages for later data extraction.  Open [visual point-and-click toolkit](https://dataflowkit.com/dfk) and click desired elements on a page to specify extracting data.     Then you can send generated payload to &#x60;/parse&#x60; endpoint. We crawl web pages and extract data like text, links, or images for you following the specified rules.    Extracted data is returned in CSV, MS Excel, JSON, JSON(Lines) or XML format. 
     * @param parserequest ### Field types and attributes    - **Text**. Extract human-readable text from the selected element and all its child elements. HTML tags are stripped, and only text returned.      - **Link**. Capture link &#x60;href&#x60; attribute and link text. Or specify a special _Path_ option for website navigation. When Path option is true, all other selectors ignored, and no results from the current page returned.      - **Image**. Image type extracts &#x60;src&#x60; (URL) and &#x60;alt&#x60; attributes of an image   *** ### Filters Filters are used to manipulate text data when extracting.  Here is the list of available filters   - **Trim** removes leading and trailing white spaces from the _field text or attribute_  - **Normal** leaves the case and capitalization of text/ attribute exactly as is.  - **UPPERCASE** makes all of the letters in the Field&#39;s text/ attribute uppercase.  - **lowercase** makes all of the letters in the Field&#39;s text/ attribute lowercase.  - **Capitalize** capitalizes the first letter of each word in the Field&#39;s text/ attribute  - **Concatinate** joins text array element into a single string  *** ### Regular Expressions  For more advanced text formatting regular expression can be used. Some useful examples are listed below   | Input text | Regex | Result | | ---------- | ----- | ------ | | price- 10.99€ | &lt;code&gt;[0-9]+\\.[0-9]+&lt;/code&gt; | 10.99 | | phone- 0 (944) 244-18-22 | &lt;code&gt;\\w+&lt;/code&gt; | 09442441822 |   *** ### Details. Chaining. The Link field type serves as a navigation link to a details page containing more data. A special _Path_ option is used for navigation only. When the Path option specified, no results from the current page returned. But grouped results from details pages will be pulled instead. You can use chaining functionality of Dataflow Kit scraper to retrieve all the detail page data at the same time.  (required)
     * @return ApiResponse&lt;Object&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Returns data in the one of the follwing formats - JSON, JSON Lines, CSV, MS Excel, XML </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request. Invalid payload specified. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized. &#x60;api_key&#x60; parameter is missed or incorrect </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error is a very general HTTP status code that means something has gone wrong on the web site&#39;s server. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Object> parseWithHttpInfo(Parserequest parserequest) throws ApiException {
        okhttp3.Call localVarCall = parseValidateBeforeCall(parserequest, null);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Extract structured data from web pages (asynchronously)
     * Dataflow kit uses CSS selectors to find HTML elements in web pages for later data extraction.  Open [visual point-and-click toolkit](https://dataflowkit.com/dfk) and click desired elements on a page to specify extracting data.     Then you can send generated payload to &#x60;/parse&#x60; endpoint. We crawl web pages and extract data like text, links, or images for you following the specified rules.    Extracted data is returned in CSV, MS Excel, JSON, JSON(Lines) or XML format. 
     * @param parserequest ### Field types and attributes    - **Text**. Extract human-readable text from the selected element and all its child elements. HTML tags are stripped, and only text returned.      - **Link**. Capture link &#x60;href&#x60; attribute and link text. Or specify a special _Path_ option for website navigation. When Path option is true, all other selectors ignored, and no results from the current page returned.      - **Image**. Image type extracts &#x60;src&#x60; (URL) and &#x60;alt&#x60; attributes of an image   *** ### Filters Filters are used to manipulate text data when extracting.  Here is the list of available filters   - **Trim** removes leading and trailing white spaces from the _field text or attribute_  - **Normal** leaves the case and capitalization of text/ attribute exactly as is.  - **UPPERCASE** makes all of the letters in the Field&#39;s text/ attribute uppercase.  - **lowercase** makes all of the letters in the Field&#39;s text/ attribute lowercase.  - **Capitalize** capitalizes the first letter of each word in the Field&#39;s text/ attribute  - **Concatinate** joins text array element into a single string  *** ### Regular Expressions  For more advanced text formatting regular expression can be used. Some useful examples are listed below   | Input text | Regex | Result | | ---------- | ----- | ------ | | price- 10.99€ | &lt;code&gt;[0-9]+\\.[0-9]+&lt;/code&gt; | 10.99 | | phone- 0 (944) 244-18-22 | &lt;code&gt;\\w+&lt;/code&gt; | 09442441822 |   *** ### Details. Chaining. The Link field type serves as a navigation link to a details page containing more data. A special _Path_ option is used for navigation only. When the Path option specified, no results from the current page returned. But grouped results from details pages will be pulled instead. You can use chaining functionality of Dataflow Kit scraper to retrieve all the detail page data at the same time.  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Returns data in the one of the follwing formats - JSON, JSON Lines, CSV, MS Excel, XML </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request. Invalid payload specified. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized. &#x60;api_key&#x60; parameter is missed or incorrect </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error is a very general HTTP status code that means something has gone wrong on the web site&#39;s server. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call parseAsync(Parserequest parserequest, final ApiCallback<Object> _callback) throws ApiException {

        okhttp3.Call localVarCall = parseValidateBeforeCall(parserequest, _callback);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
