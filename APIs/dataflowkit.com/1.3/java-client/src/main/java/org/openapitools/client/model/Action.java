/*
 * Dataflow Kit Web Scraper
 * Render Javascript driven pages, while we internally manage Headless Chrome and proxies for you.   - Build a custom web scraper with our Visual point-and-click toolkit. - Scrape the most popular Search engines result pages (SERP). - Convert web pages to PDF and capture screenshots. *** ### Authentication Dataflow Kit API require you to sign up for an API key in order to use the API.   The API key can be found in the [DFK Dashboard](https://account.dataflowkit.com) after _free registration_.  Pass a secret API Key to all API requests to the server as the `api_key` query parameter.  
 *
 * The version of the OpenAPI document: 1.3
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.math.BigDecimal;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.Click;
import org.openapitools.client.model.DoubleClick;
import org.openapitools.client.model.Execute;
import org.openapitools.client.model.Getcontent;
import org.openapitools.client.model.Input;
import org.openapitools.client.model.Jsclick;
import org.openapitools.client.model.LoopTimes;
import org.openapitools.client.model.Pause;
import org.openapitools.client.model.Scroll;
import org.openapitools.client.model.SendKeys;
import org.openapitools.client.model.Submit;
import org.openapitools.client.model.WaitNotVisible;
import org.openapitools.client.model.WaitVisible;



import java.io.IOException;
import java.lang.reflect.Type;
import java.util.logging.Level;
import java.util.logging.Logger;
import java.util.ArrayList;
import java.util.Collections;
import java.util.HashSet;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapter;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.JsonPrimitive;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonSerializationContext;
import com.google.gson.JsonSerializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonArray;
import com.google.gson.JsonParseException;

import org.openapitools.client.JSON;

@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T10:05:44.962241-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class Action extends AbstractOpenApiSchema {
    private static final Logger log = Logger.getLogger(Action.class.getName());

    public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
        @SuppressWarnings("unchecked")
        @Override
        public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
            if (!Action.class.isAssignableFrom(type.getRawType())) {
                return null; // this class only serializes 'Action' and its subtypes
            }
            final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
            final TypeAdapter<Input> adapterInput = gson.getDelegateAdapter(this, TypeToken.get(Input.class));
            final TypeAdapter<SendKeys> adapterSendKeys = gson.getDelegateAdapter(this, TypeToken.get(SendKeys.class));
            final TypeAdapter<Click> adapterClick = gson.getDelegateAdapter(this, TypeToken.get(Click.class));
            final TypeAdapter<DoubleClick> adapterDoubleClick = gson.getDelegateAdapter(this, TypeToken.get(DoubleClick.class));
            final TypeAdapter<Jsclick> adapterJsclick = gson.getDelegateAdapter(this, TypeToken.get(Jsclick.class));
            final TypeAdapter<Submit> adapterSubmit = gson.getDelegateAdapter(this, TypeToken.get(Submit.class));
            final TypeAdapter<WaitVisible> adapterWaitVisible = gson.getDelegateAdapter(this, TypeToken.get(WaitVisible.class));
            final TypeAdapter<WaitNotVisible> adapterWaitNotVisible = gson.getDelegateAdapter(this, TypeToken.get(WaitNotVisible.class));
            final TypeAdapter<Pause> adapterPause = gson.getDelegateAdapter(this, TypeToken.get(Pause.class));
            final TypeAdapter<Execute> adapterExecute = gson.getDelegateAdapter(this, TypeToken.get(Execute.class));
            final TypeAdapter<LoopTimes> adapterLoopTimes = gson.getDelegateAdapter(this, TypeToken.get(LoopTimes.class));
            final TypeAdapter<Getcontent> adapterGetcontent = gson.getDelegateAdapter(this, TypeToken.get(Getcontent.class));
            final TypeAdapter<Scroll> adapterScroll = gson.getDelegateAdapter(this, TypeToken.get(Scroll.class));

            return (TypeAdapter<T>) new TypeAdapter<Action>() {
                @Override
                public void write(JsonWriter out, Action value) throws IOException {
                    if (value == null || value.getActualInstance() == null) {
                        elementAdapter.write(out, null);
                        return;
                    }

                    // check if the actual instance is of the type `Input`
                    if (value.getActualInstance() instanceof Input) {
                        JsonElement element = adapterInput.toJsonTree((Input)value.getActualInstance());
                        elementAdapter.write(out, element);
                        return;
                    }
                    // check if the actual instance is of the type `SendKeys`
                    if (value.getActualInstance() instanceof SendKeys) {
                        JsonElement element = adapterSendKeys.toJsonTree((SendKeys)value.getActualInstance());
                        elementAdapter.write(out, element);
                        return;
                    }
                    // check if the actual instance is of the type `Click`
                    if (value.getActualInstance() instanceof Click) {
                        JsonElement element = adapterClick.toJsonTree((Click)value.getActualInstance());
                        elementAdapter.write(out, element);
                        return;
                    }
                    // check if the actual instance is of the type `DoubleClick`
                    if (value.getActualInstance() instanceof DoubleClick) {
                        JsonElement element = adapterDoubleClick.toJsonTree((DoubleClick)value.getActualInstance());
                        elementAdapter.write(out, element);
                        return;
                    }
                    // check if the actual instance is of the type `Jsclick`
                    if (value.getActualInstance() instanceof Jsclick) {
                        JsonElement element = adapterJsclick.toJsonTree((Jsclick)value.getActualInstance());
                        elementAdapter.write(out, element);
                        return;
                    }
                    // check if the actual instance is of the type `Submit`
                    if (value.getActualInstance() instanceof Submit) {
                        JsonElement element = adapterSubmit.toJsonTree((Submit)value.getActualInstance());
                        elementAdapter.write(out, element);
                        return;
                    }
                    // check if the actual instance is of the type `WaitVisible`
                    if (value.getActualInstance() instanceof WaitVisible) {
                        JsonElement element = adapterWaitVisible.toJsonTree((WaitVisible)value.getActualInstance());
                        elementAdapter.write(out, element);
                        return;
                    }
                    // check if the actual instance is of the type `WaitNotVisible`
                    if (value.getActualInstance() instanceof WaitNotVisible) {
                        JsonElement element = adapterWaitNotVisible.toJsonTree((WaitNotVisible)value.getActualInstance());
                        elementAdapter.write(out, element);
                        return;
                    }
                    // check if the actual instance is of the type `Pause`
                    if (value.getActualInstance() instanceof Pause) {
                        JsonElement element = adapterPause.toJsonTree((Pause)value.getActualInstance());
                        elementAdapter.write(out, element);
                        return;
                    }
                    // check if the actual instance is of the type `Execute`
                    if (value.getActualInstance() instanceof Execute) {
                        JsonElement element = adapterExecute.toJsonTree((Execute)value.getActualInstance());
                        elementAdapter.write(out, element);
                        return;
                    }
                    // check if the actual instance is of the type `LoopTimes`
                    if (value.getActualInstance() instanceof LoopTimes) {
                        JsonElement element = adapterLoopTimes.toJsonTree((LoopTimes)value.getActualInstance());
                        elementAdapter.write(out, element);
                        return;
                    }
                    // check if the actual instance is of the type `Getcontent`
                    if (value.getActualInstance() instanceof Getcontent) {
                        JsonElement element = adapterGetcontent.toJsonTree((Getcontent)value.getActualInstance());
                        elementAdapter.write(out, element);
                        return;
                    }
                    // check if the actual instance is of the type `Scroll`
                    if (value.getActualInstance() instanceof Scroll) {
                        JsonElement element = adapterScroll.toJsonTree((Scroll)value.getActualInstance());
                        elementAdapter.write(out, element);
                        return;
                    }
                    throw new IOException("Failed to serialize as the type doesn't match anyOf schemas: Click, DoubleClick, Execute, Getcontent, Input, Jsclick, LoopTimes, Pause, Scroll, SendKeys, Submit, WaitNotVisible, WaitVisible");
                }

                @Override
                public Action read(JsonReader in) throws IOException {
                    Object deserialized = null;
                    JsonElement jsonElement = elementAdapter.read(in);

                    ArrayList<String> errorMessages = new ArrayList<>();
                    TypeAdapter actualAdapter = elementAdapter;

                    // deserialize Input
                    try {
                        // validate the JSON object to see if any exception is thrown
                        Input.validateJsonElement(jsonElement);
                        actualAdapter = adapterInput;
                        Action ret = new Action();
                        ret.setActualInstance(actualAdapter.fromJsonTree(jsonElement));
                        return ret;
                    } catch (Exception e) {
                        // deserialization failed, continue
                        errorMessages.add(String.format("Deserialization for Input failed with `%s`.", e.getMessage()));
                        log.log(Level.FINER, "Input data does not match schema 'Input'", e);
                    }
                    // deserialize SendKeys
                    try {
                        // validate the JSON object to see if any exception is thrown
                        SendKeys.validateJsonElement(jsonElement);
                        actualAdapter = adapterSendKeys;
                        Action ret = new Action();
                        ret.setActualInstance(actualAdapter.fromJsonTree(jsonElement));
                        return ret;
                    } catch (Exception e) {
                        // deserialization failed, continue
                        errorMessages.add(String.format("Deserialization for SendKeys failed with `%s`.", e.getMessage()));
                        log.log(Level.FINER, "Input data does not match schema 'SendKeys'", e);
                    }
                    // deserialize Click
                    try {
                        // validate the JSON object to see if any exception is thrown
                        Click.validateJsonElement(jsonElement);
                        actualAdapter = adapterClick;
                        Action ret = new Action();
                        ret.setActualInstance(actualAdapter.fromJsonTree(jsonElement));
                        return ret;
                    } catch (Exception e) {
                        // deserialization failed, continue
                        errorMessages.add(String.format("Deserialization for Click failed with `%s`.", e.getMessage()));
                        log.log(Level.FINER, "Input data does not match schema 'Click'", e);
                    }
                    // deserialize DoubleClick
                    try {
                        // validate the JSON object to see if any exception is thrown
                        DoubleClick.validateJsonElement(jsonElement);
                        actualAdapter = adapterDoubleClick;
                        Action ret = new Action();
                        ret.setActualInstance(actualAdapter.fromJsonTree(jsonElement));
                        return ret;
                    } catch (Exception e) {
                        // deserialization failed, continue
                        errorMessages.add(String.format("Deserialization for DoubleClick failed with `%s`.", e.getMessage()));
                        log.log(Level.FINER, "Input data does not match schema 'DoubleClick'", e);
                    }
                    // deserialize Jsclick
                    try {
                        // validate the JSON object to see if any exception is thrown
                        Jsclick.validateJsonElement(jsonElement);
                        actualAdapter = adapterJsclick;
                        Action ret = new Action();
                        ret.setActualInstance(actualAdapter.fromJsonTree(jsonElement));
                        return ret;
                    } catch (Exception e) {
                        // deserialization failed, continue
                        errorMessages.add(String.format("Deserialization for Jsclick failed with `%s`.", e.getMessage()));
                        log.log(Level.FINER, "Input data does not match schema 'Jsclick'", e);
                    }
                    // deserialize Submit
                    try {
                        // validate the JSON object to see if any exception is thrown
                        Submit.validateJsonElement(jsonElement);
                        actualAdapter = adapterSubmit;
                        Action ret = new Action();
                        ret.setActualInstance(actualAdapter.fromJsonTree(jsonElement));
                        return ret;
                    } catch (Exception e) {
                        // deserialization failed, continue
                        errorMessages.add(String.format("Deserialization for Submit failed with `%s`.", e.getMessage()));
                        log.log(Level.FINER, "Input data does not match schema 'Submit'", e);
                    }
                    // deserialize WaitVisible
                    try {
                        // validate the JSON object to see if any exception is thrown
                        WaitVisible.validateJsonElement(jsonElement);
                        actualAdapter = adapterWaitVisible;
                        Action ret = new Action();
                        ret.setActualInstance(actualAdapter.fromJsonTree(jsonElement));
                        return ret;
                    } catch (Exception e) {
                        // deserialization failed, continue
                        errorMessages.add(String.format("Deserialization for WaitVisible failed with `%s`.", e.getMessage()));
                        log.log(Level.FINER, "Input data does not match schema 'WaitVisible'", e);
                    }
                    // deserialize WaitNotVisible
                    try {
                        // validate the JSON object to see if any exception is thrown
                        WaitNotVisible.validateJsonElement(jsonElement);
                        actualAdapter = adapterWaitNotVisible;
                        Action ret = new Action();
                        ret.setActualInstance(actualAdapter.fromJsonTree(jsonElement));
                        return ret;
                    } catch (Exception e) {
                        // deserialization failed, continue
                        errorMessages.add(String.format("Deserialization for WaitNotVisible failed with `%s`.", e.getMessage()));
                        log.log(Level.FINER, "Input data does not match schema 'WaitNotVisible'", e);
                    }
                    // deserialize Pause
                    try {
                        // validate the JSON object to see if any exception is thrown
                        Pause.validateJsonElement(jsonElement);
                        actualAdapter = adapterPause;
                        Action ret = new Action();
                        ret.setActualInstance(actualAdapter.fromJsonTree(jsonElement));
                        return ret;
                    } catch (Exception e) {
                        // deserialization failed, continue
                        errorMessages.add(String.format("Deserialization for Pause failed with `%s`.", e.getMessage()));
                        log.log(Level.FINER, "Input data does not match schema 'Pause'", e);
                    }
                    // deserialize Execute
                    try {
                        // validate the JSON object to see if any exception is thrown
                        Execute.validateJsonElement(jsonElement);
                        actualAdapter = adapterExecute;
                        Action ret = new Action();
                        ret.setActualInstance(actualAdapter.fromJsonTree(jsonElement));
                        return ret;
                    } catch (Exception e) {
                        // deserialization failed, continue
                        errorMessages.add(String.format("Deserialization for Execute failed with `%s`.", e.getMessage()));
                        log.log(Level.FINER, "Input data does not match schema 'Execute'", e);
                    }
                    // deserialize LoopTimes
                    try {
                        // validate the JSON object to see if any exception is thrown
                        LoopTimes.validateJsonElement(jsonElement);
                        actualAdapter = adapterLoopTimes;
                        Action ret = new Action();
                        ret.setActualInstance(actualAdapter.fromJsonTree(jsonElement));
                        return ret;
                    } catch (Exception e) {
                        // deserialization failed, continue
                        errorMessages.add(String.format("Deserialization for LoopTimes failed with `%s`.", e.getMessage()));
                        log.log(Level.FINER, "Input data does not match schema 'LoopTimes'", e);
                    }
                    // deserialize Getcontent
                    try {
                        // validate the JSON object to see if any exception is thrown
                        Getcontent.validateJsonElement(jsonElement);
                        actualAdapter = adapterGetcontent;
                        Action ret = new Action();
                        ret.setActualInstance(actualAdapter.fromJsonTree(jsonElement));
                        return ret;
                    } catch (Exception e) {
                        // deserialization failed, continue
                        errorMessages.add(String.format("Deserialization for Getcontent failed with `%s`.", e.getMessage()));
                        log.log(Level.FINER, "Input data does not match schema 'Getcontent'", e);
                    }
                    // deserialize Scroll
                    try {
                        // validate the JSON object to see if any exception is thrown
                        Scroll.validateJsonElement(jsonElement);
                        actualAdapter = adapterScroll;
                        Action ret = new Action();
                        ret.setActualInstance(actualAdapter.fromJsonTree(jsonElement));
                        return ret;
                    } catch (Exception e) {
                        // deserialization failed, continue
                        errorMessages.add(String.format("Deserialization for Scroll failed with `%s`.", e.getMessage()));
                        log.log(Level.FINER, "Input data does not match schema 'Scroll'", e);
                    }

                    throw new IOException(String.format("Failed deserialization for Action: no class matches result, expected at least 1. Detailed failure message for anyOf schemas: %s. JSON: %s", errorMessages, jsonElement.toString()));
                }
            }.nullSafe();
        }
    }

    // store a list of schema names defined in anyOf
    public static final Map<String, Class<?>> schemas = new HashMap<String, Class<?>>();

    public Action() {
        super("anyOf", Boolean.FALSE);
    }

    public Action(Object o) {
        super("anyOf", Boolean.FALSE);
        setActualInstance(o);
    }

    static {
        schemas.put("Input", Input.class);
        schemas.put("SendKeys", SendKeys.class);
        schemas.put("Click", Click.class);
        schemas.put("DoubleClick", DoubleClick.class);
        schemas.put("Jsclick", Jsclick.class);
        schemas.put("Submit", Submit.class);
        schemas.put("WaitVisible", WaitVisible.class);
        schemas.put("WaitNotVisible", WaitNotVisible.class);
        schemas.put("Pause", Pause.class);
        schemas.put("Execute", Execute.class);
        schemas.put("LoopTimes", LoopTimes.class);
        schemas.put("Getcontent", Getcontent.class);
        schemas.put("Scroll", Scroll.class);
    }

    @Override
    public Map<String, Class<?>> getSchemas() {
        return Action.schemas;
    }

    /**
     * Set the instance that matches the anyOf child schema, check
     * the instance parameter is valid against the anyOf child schemas:
     * Click, DoubleClick, Execute, Getcontent, Input, Jsclick, LoopTimes, Pause, Scroll, SendKeys, Submit, WaitNotVisible, WaitVisible
     *
     * It could be an instance of the 'anyOf' schemas.
     */
    @Override
    public void setActualInstance(Object instance) {
        if (instance instanceof Input) {
            super.setActualInstance(instance);
            return;
        }

        if (instance instanceof SendKeys) {
            super.setActualInstance(instance);
            return;
        }

        if (instance instanceof Click) {
            super.setActualInstance(instance);
            return;
        }

        if (instance instanceof DoubleClick) {
            super.setActualInstance(instance);
            return;
        }

        if (instance instanceof Jsclick) {
            super.setActualInstance(instance);
            return;
        }

        if (instance instanceof Submit) {
            super.setActualInstance(instance);
            return;
        }

        if (instance instanceof WaitVisible) {
            super.setActualInstance(instance);
            return;
        }

        if (instance instanceof WaitNotVisible) {
            super.setActualInstance(instance);
            return;
        }

        if (instance instanceof Pause) {
            super.setActualInstance(instance);
            return;
        }

        if (instance instanceof Execute) {
            super.setActualInstance(instance);
            return;
        }

        if (instance instanceof LoopTimes) {
            super.setActualInstance(instance);
            return;
        }

        if (instance instanceof Getcontent) {
            super.setActualInstance(instance);
            return;
        }

        if (instance instanceof Scroll) {
            super.setActualInstance(instance);
            return;
        }

        throw new RuntimeException("Invalid instance type. Must be Click, DoubleClick, Execute, Getcontent, Input, Jsclick, LoopTimes, Pause, Scroll, SendKeys, Submit, WaitNotVisible, WaitVisible");
    }

    /**
     * Get the actual instance, which can be the following:
     * Click, DoubleClick, Execute, Getcontent, Input, Jsclick, LoopTimes, Pause, Scroll, SendKeys, Submit, WaitNotVisible, WaitVisible
     *
     * @return The actual instance (Click, DoubleClick, Execute, Getcontent, Input, Jsclick, LoopTimes, Pause, Scroll, SendKeys, Submit, WaitNotVisible, WaitVisible)
     */
    @SuppressWarnings("unchecked")
    @Override
    public Object getActualInstance() {
        return super.getActualInstance();
    }

    /**
     * Get the actual instance of `Input`. If the actual instance is not `Input`,
     * the ClassCastException will be thrown.
     *
     * @return The actual instance of `Input`
     * @throws ClassCastException if the instance is not `Input`
     */
    public Input getInput() throws ClassCastException {
        return (Input)super.getActualInstance();
    }
    /**
     * Get the actual instance of `SendKeys`. If the actual instance is not `SendKeys`,
     * the ClassCastException will be thrown.
     *
     * @return The actual instance of `SendKeys`
     * @throws ClassCastException if the instance is not `SendKeys`
     */
    public SendKeys getSendKeys() throws ClassCastException {
        return (SendKeys)super.getActualInstance();
    }
    /**
     * Get the actual instance of `Click`. If the actual instance is not `Click`,
     * the ClassCastException will be thrown.
     *
     * @return The actual instance of `Click`
     * @throws ClassCastException if the instance is not `Click`
     */
    public Click getClick() throws ClassCastException {
        return (Click)super.getActualInstance();
    }
    /**
     * Get the actual instance of `DoubleClick`. If the actual instance is not `DoubleClick`,
     * the ClassCastException will be thrown.
     *
     * @return The actual instance of `DoubleClick`
     * @throws ClassCastException if the instance is not `DoubleClick`
     */
    public DoubleClick getDoubleClick() throws ClassCastException {
        return (DoubleClick)super.getActualInstance();
    }
    /**
     * Get the actual instance of `Jsclick`. If the actual instance is not `Jsclick`,
     * the ClassCastException will be thrown.
     *
     * @return The actual instance of `Jsclick`
     * @throws ClassCastException if the instance is not `Jsclick`
     */
    public Jsclick getJsclick() throws ClassCastException {
        return (Jsclick)super.getActualInstance();
    }
    /**
     * Get the actual instance of `Submit`. If the actual instance is not `Submit`,
     * the ClassCastException will be thrown.
     *
     * @return The actual instance of `Submit`
     * @throws ClassCastException if the instance is not `Submit`
     */
    public Submit getSubmit() throws ClassCastException {
        return (Submit)super.getActualInstance();
    }
    /**
     * Get the actual instance of `WaitVisible`. If the actual instance is not `WaitVisible`,
     * the ClassCastException will be thrown.
     *
     * @return The actual instance of `WaitVisible`
     * @throws ClassCastException if the instance is not `WaitVisible`
     */
    public WaitVisible getWaitVisible() throws ClassCastException {
        return (WaitVisible)super.getActualInstance();
    }
    /**
     * Get the actual instance of `WaitNotVisible`. If the actual instance is not `WaitNotVisible`,
     * the ClassCastException will be thrown.
     *
     * @return The actual instance of `WaitNotVisible`
     * @throws ClassCastException if the instance is not `WaitNotVisible`
     */
    public WaitNotVisible getWaitNotVisible() throws ClassCastException {
        return (WaitNotVisible)super.getActualInstance();
    }
    /**
     * Get the actual instance of `Pause`. If the actual instance is not `Pause`,
     * the ClassCastException will be thrown.
     *
     * @return The actual instance of `Pause`
     * @throws ClassCastException if the instance is not `Pause`
     */
    public Pause getPause() throws ClassCastException {
        return (Pause)super.getActualInstance();
    }
    /**
     * Get the actual instance of `Execute`. If the actual instance is not `Execute`,
     * the ClassCastException will be thrown.
     *
     * @return The actual instance of `Execute`
     * @throws ClassCastException if the instance is not `Execute`
     */
    public Execute getExecute() throws ClassCastException {
        return (Execute)super.getActualInstance();
    }
    /**
     * Get the actual instance of `LoopTimes`. If the actual instance is not `LoopTimes`,
     * the ClassCastException will be thrown.
     *
     * @return The actual instance of `LoopTimes`
     * @throws ClassCastException if the instance is not `LoopTimes`
     */
    public LoopTimes getLoopTimes() throws ClassCastException {
        return (LoopTimes)super.getActualInstance();
    }
    /**
     * Get the actual instance of `Getcontent`. If the actual instance is not `Getcontent`,
     * the ClassCastException will be thrown.
     *
     * @return The actual instance of `Getcontent`
     * @throws ClassCastException if the instance is not `Getcontent`
     */
    public Getcontent getGetcontent() throws ClassCastException {
        return (Getcontent)super.getActualInstance();
    }
    /**
     * Get the actual instance of `Scroll`. If the actual instance is not `Scroll`,
     * the ClassCastException will be thrown.
     *
     * @return The actual instance of `Scroll`
     * @throws ClassCastException if the instance is not `Scroll`
     */
    public Scroll getScroll() throws ClassCastException {
        return (Scroll)super.getActualInstance();
    }

    /**
     * Validates the JSON Element and throws an exception if issues found
     *
     * @param jsonElement JSON Element
     * @throws IOException if the JSON Element is invalid with respect to Action
     */
    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
        // validate anyOf schemas one by one
        ArrayList<String> errorMessages = new ArrayList<>();
        // validate the json string with Input
        try {
            Input.validateJsonElement(jsonElement);
            return;
        } catch (Exception e) {
            errorMessages.add(String.format("Deserialization for Input failed with `%s`.", e.getMessage()));
            // continue to the next one
        }
        // validate the json string with SendKeys
        try {
            SendKeys.validateJsonElement(jsonElement);
            return;
        } catch (Exception e) {
            errorMessages.add(String.format("Deserialization for SendKeys failed with `%s`.", e.getMessage()));
            // continue to the next one
        }
        // validate the json string with Click
        try {
            Click.validateJsonElement(jsonElement);
            return;
        } catch (Exception e) {
            errorMessages.add(String.format("Deserialization for Click failed with `%s`.", e.getMessage()));
            // continue to the next one
        }
        // validate the json string with DoubleClick
        try {
            DoubleClick.validateJsonElement(jsonElement);
            return;
        } catch (Exception e) {
            errorMessages.add(String.format("Deserialization for DoubleClick failed with `%s`.", e.getMessage()));
            // continue to the next one
        }
        // validate the json string with Jsclick
        try {
            Jsclick.validateJsonElement(jsonElement);
            return;
        } catch (Exception e) {
            errorMessages.add(String.format("Deserialization for Jsclick failed with `%s`.", e.getMessage()));
            // continue to the next one
        }
        // validate the json string with Submit
        try {
            Submit.validateJsonElement(jsonElement);
            return;
        } catch (Exception e) {
            errorMessages.add(String.format("Deserialization for Submit failed with `%s`.", e.getMessage()));
            // continue to the next one
        }
        // validate the json string with WaitVisible
        try {
            WaitVisible.validateJsonElement(jsonElement);
            return;
        } catch (Exception e) {
            errorMessages.add(String.format("Deserialization for WaitVisible failed with `%s`.", e.getMessage()));
            // continue to the next one
        }
        // validate the json string with WaitNotVisible
        try {
            WaitNotVisible.validateJsonElement(jsonElement);
            return;
        } catch (Exception e) {
            errorMessages.add(String.format("Deserialization for WaitNotVisible failed with `%s`.", e.getMessage()));
            // continue to the next one
        }
        // validate the json string with Pause
        try {
            Pause.validateJsonElement(jsonElement);
            return;
        } catch (Exception e) {
            errorMessages.add(String.format("Deserialization for Pause failed with `%s`.", e.getMessage()));
            // continue to the next one
        }
        // validate the json string with Execute
        try {
            Execute.validateJsonElement(jsonElement);
            return;
        } catch (Exception e) {
            errorMessages.add(String.format("Deserialization for Execute failed with `%s`.", e.getMessage()));
            // continue to the next one
        }
        // validate the json string with LoopTimes
        try {
            LoopTimes.validateJsonElement(jsonElement);
            return;
        } catch (Exception e) {
            errorMessages.add(String.format("Deserialization for LoopTimes failed with `%s`.", e.getMessage()));
            // continue to the next one
        }
        // validate the json string with Getcontent
        try {
            Getcontent.validateJsonElement(jsonElement);
            return;
        } catch (Exception e) {
            errorMessages.add(String.format("Deserialization for Getcontent failed with `%s`.", e.getMessage()));
            // continue to the next one
        }
        // validate the json string with Scroll
        try {
            Scroll.validateJsonElement(jsonElement);
            return;
        } catch (Exception e) {
            errorMessages.add(String.format("Deserialization for Scroll failed with `%s`.", e.getMessage()));
            // continue to the next one
        }
        throw new IOException(String.format("The JSON string is invalid for Action with anyOf schemas: Click, DoubleClick, Execute, Getcontent, Input, Jsclick, LoopTimes, Pause, Scroll, SendKeys, Submit, WaitNotVisible, WaitVisible. no class match the result, expected at least 1. Detailed failure message for anyOf schemas: %s. JSON: %s", errorMessages, jsonElement.toString()));
    }

    /**
     * Create an instance of Action given an JSON string
     *
     * @param jsonString JSON string
     * @return An instance of Action
     * @throws IOException if the JSON string is invalid with respect to Action
     */
    public static Action fromJson(String jsonString) throws IOException {
        return JSON.getGson().fromJson(jsonString, Action.class);
    }

    /**
     * Convert an instance of Action to an JSON string
     *
     * @return JSON string
     */
    public String toJson() {
        return JSON.getGson().toJson(this);
    }
}

