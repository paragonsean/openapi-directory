/*
 * Dataflow Kit Web Scraper
 * Render Javascript driven pages, while we internally manage Headless Chrome and proxies for you.   - Build a custom web scraper with our Visual point-and-click toolkit. - Scrape the most popular Search engines result pages (SERP). - Convert web pages to PDF and capture screenshots. *** ### Authentication Dataflow Kit API require you to sign up for an API key in order to use the API.   The API key can be found in the [DFK Dashboard](https://account.dataflowkit.com) after _free registration_.  Pass a secret API Key to all API requests to the server as the `api_key` query parameter.  
 *
 * The version of the OpenAPI document: 1.3
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiCallback;
import org.openapitools.client.ApiClient;
import org.openapitools.client.ApiException;
import org.openapitools.client.ApiResponse;
import org.openapitools.client.Configuration;
import org.openapitools.client.Pair;
import org.openapitools.client.ProgressRequestBody;
import org.openapitools.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import org.openapitools.client.model.Fetchrequest;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class FetchApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public FetchApi() {
        this(Configuration.getDefaultApiClient());
    }

    public FetchApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for fetch
     * @param fetchrequest - _Base fetcher type_ is the right choice for fetching server-side rendered pages. It takes fewer resources and works faster than rendering HTML with _Chrome fetcher_ - But for rendering Angular, React, and Vue.js web sites, you should always specify _Chrome fetcher type_. In this case, headless chrome fetcher renders dynamic Javascript content in the same way as real web browsers would do it.  Generate ready-to-run code for your favorite language at [https://dataflowkit.com/render-web](https://dataflowkit.com/render-web)  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Returns utf8 encoded web page content. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request. Invalid payload specified. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized. &#x60;api_key&#x60; parameter is missed or incorrect </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error is a very general HTTP status code that means something has gone wrong on the web site&#39;s server. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call fetchCall(Fetchrequest fetchrequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = fetchrequest;

        // create path and map variables
        String localVarPath = "/fetch";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "text/html; charset=utf-8",
            "text/plain; charset=utf-8"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "ApiKeyAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call fetchValidateBeforeCall(Fetchrequest fetchrequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'fetchrequest' is set
        if (fetchrequest == null) {
            throw new ApiException("Missing the required parameter 'fetchrequest' when calling fetch(Async)");
        }

        return fetchCall(fetchrequest, _callback);

    }

    /**
     * Download web page content
     * Use fetch endpoint to download web pages.
     * @param fetchrequest - _Base fetcher type_ is the right choice for fetching server-side rendered pages. It takes fewer resources and works faster than rendering HTML with _Chrome fetcher_ - But for rendering Angular, React, and Vue.js web sites, you should always specify _Chrome fetcher type_. In this case, headless chrome fetcher renders dynamic Javascript content in the same way as real web browsers would do it.  Generate ready-to-run code for your favorite language at [https://dataflowkit.com/render-web](https://dataflowkit.com/render-web)  (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Returns utf8 encoded web page content. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request. Invalid payload specified. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized. &#x60;api_key&#x60; parameter is missed or incorrect </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error is a very general HTTP status code that means something has gone wrong on the web site&#39;s server. </td><td>  -  </td></tr>
     </table>
     */
    public void fetch(Fetchrequest fetchrequest) throws ApiException {
        fetchWithHttpInfo(fetchrequest);
    }

    /**
     * Download web page content
     * Use fetch endpoint to download web pages.
     * @param fetchrequest - _Base fetcher type_ is the right choice for fetching server-side rendered pages. It takes fewer resources and works faster than rendering HTML with _Chrome fetcher_ - But for rendering Angular, React, and Vue.js web sites, you should always specify _Chrome fetcher type_. In this case, headless chrome fetcher renders dynamic Javascript content in the same way as real web browsers would do it.  Generate ready-to-run code for your favorite language at [https://dataflowkit.com/render-web](https://dataflowkit.com/render-web)  (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Returns utf8 encoded web page content. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request. Invalid payload specified. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized. &#x60;api_key&#x60; parameter is missed or incorrect </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error is a very general HTTP status code that means something has gone wrong on the web site&#39;s server. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> fetchWithHttpInfo(Fetchrequest fetchrequest) throws ApiException {
        okhttp3.Call localVarCall = fetchValidateBeforeCall(fetchrequest, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Download web page content (asynchronously)
     * Use fetch endpoint to download web pages.
     * @param fetchrequest - _Base fetcher type_ is the right choice for fetching server-side rendered pages. It takes fewer resources and works faster than rendering HTML with _Chrome fetcher_ - But for rendering Angular, React, and Vue.js web sites, you should always specify _Chrome fetcher type_. In this case, headless chrome fetcher renders dynamic Javascript content in the same way as real web browsers would do it.  Generate ready-to-run code for your favorite language at [https://dataflowkit.com/render-web](https://dataflowkit.com/render-web)  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Returns utf8 encoded web page content. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request. Invalid payload specified. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized. &#x60;api_key&#x60; parameter is missed or incorrect </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error is a very general HTTP status code that means something has gone wrong on the web site&#39;s server. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call fetchAsync(Fetchrequest fetchrequest, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = fetchValidateBeforeCall(fetchrequest, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
}
