/*
 * Dataflow Kit Web Scraper
 * Render Javascript driven pages, while we internally manage Headless Chrome and proxies for you.   - Build a custom web scraper with our Visual point-and-click toolkit. - Scrape the most popular Search engines result pages (SERP). - Convert web pages to PDF and capture screenshots. *** ### Authentication Dataflow Kit API require you to sign up for an API key in order to use the API.   The API key can be found in the [DFK Dashboard](https://account.dataflowkit.com) after _free registration_.  Pass a secret API Key to all API requests to the server as the `api_key` query parameter.  
 *
 * The version of the OpenAPI document: 1.3
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.Fetchrequest;
import org.openapitools.client.model.Field;
import org.openapitools.client.model.Paginator;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Parserequest
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T10:05:44.962241-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class Parserequest {
  public static final String SERIALIZED_NAME_COMMON_PARENT = "commonParent";
  @SerializedName(SERIALIZED_NAME_COMMON_PARENT)
  private String commonParent;

  public static final String SERIALIZED_NAME_FIELDS = "fields";
  @SerializedName(SERIALIZED_NAME_FIELDS)
  private List<Field> fields = new ArrayList<>();

  /**
   * Extracted data is returned either in CSV, MS Excel, JSON, JSON(Lines) or XML format.
   */
  @JsonAdapter(FormatEnum.Adapter.class)
  public enum FormatEnum {
    CSV("csv"),
    
    JSON("json"),
    
    JSONL("jsonl"),
    
    EXCEL("excel"),
    
    XML("xml");

    private String value;

    FormatEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static FormatEnum fromValue(String value) {
      for (FormatEnum b : FormatEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<FormatEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final FormatEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public FormatEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return FormatEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      FormatEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_FORMAT = "format";
  @SerializedName(SERIALIZED_NAME_FORMAT)
  private FormatEnum format;

  public static final String SERIALIZED_NAME_NAME = "name";
  @SerializedName(SERIALIZED_NAME_NAME)
  private String name;

  public static final String SERIALIZED_NAME_PAGINATOR = "paginator";
  @SerializedName(SERIALIZED_NAME_PAGINATOR)
  private Paginator paginator;

  public static final String SERIALIZED_NAME_PATH = "path";
  @SerializedName(SERIALIZED_NAME_PATH)
  private Boolean path = false;

  public static final String SERIALIZED_NAME_REQUEST = "request";
  @SerializedName(SERIALIZED_NAME_REQUEST)
  private Fetchrequest request;

  public Parserequest() {
  }

  public Parserequest commonParent(String commonParent) {
    this.commonParent = commonParent;
    return this;
  }

  /**
   * Specifies common ancestor block for a set of fields used to extract data from a web page. _(CSS Selector)_
   * @return commonParent
   */
  @javax.annotation.Nullable
  public String getCommonParent() {
    return commonParent;
  }

  public void setCommonParent(String commonParent) {
    this.commonParent = commonParent;
  }


  public Parserequest fields(List<Field> fields) {
    this.fields = fields;
    return this;
  }

  public Parserequest addFieldsItem(Field fieldsItem) {
    if (this.fields == null) {
      this.fields = new ArrayList<>();
    }
    this.fields.add(fieldsItem);
    return this;
  }

  /**
   * Define a  set of fields used to extract data from a web page. A Field represents a given chunk of extracted data from every block on each page. 
   * @return fields
   */
  @javax.annotation.Nonnull
  public List<Field> getFields() {
    return fields;
  }

  public void setFields(List<Field> fields) {
    this.fields = fields;
  }


  public Parserequest format(FormatEnum format) {
    this.format = format;
    return this;
  }

  /**
   * Extracted data is returned either in CSV, MS Excel, JSON, JSON(Lines) or XML format.
   * @return format
   */
  @javax.annotation.Nonnull
  public FormatEnum getFormat() {
    return format;
  }

  public void setFormat(FormatEnum format) {
    this.format = format;
  }


  public Parserequest name(String name) {
    this.name = name;
    return this;
  }

  /**
   * Collection name.
   * @return name
   */
  @javax.annotation.Nonnull
  public String getName() {
    return name;
  }

  public void setName(String name) {
    this.name = name;
  }


  public Parserequest paginator(Paginator paginator) {
    this.paginator = paginator;
    return this;
  }

  /**
   * Get paginator
   * @return paginator
   */
  @javax.annotation.Nullable
  public Paginator getPaginator() {
    return paginator;
  }

  public void setPaginator(Paginator paginator) {
    this.paginator = paginator;
  }


  public Parserequest path(Boolean path) {
    this.path = path;
    return this;
  }

  /**
   * Path is a special parameter specifying navigation pages only. It collects information from detailed pages. No results from the current page return. Defaults to false.
   * @return path
   */
  @javax.annotation.Nullable
  public Boolean getPath() {
    return path;
  }

  public void setPath(Boolean path) {
    this.path = path;
  }


  public Parserequest request(Fetchrequest request) {
    this.request = request;
    return this;
  }

  /**
   * Get request
   * @return request
   */
  @javax.annotation.Nullable
  public Fetchrequest getRequest() {
    return request;
  }

  public void setRequest(Fetchrequest request) {
    this.request = request;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    Parserequest parserequest = (Parserequest) o;
    return Objects.equals(this.commonParent, parserequest.commonParent) &&
        Objects.equals(this.fields, parserequest.fields) &&
        Objects.equals(this.format, parserequest.format) &&
        Objects.equals(this.name, parserequest.name) &&
        Objects.equals(this.paginator, parserequest.paginator) &&
        Objects.equals(this.path, parserequest.path) &&
        Objects.equals(this.request, parserequest.request);
  }

  @Override
  public int hashCode() {
    return Objects.hash(commonParent, fields, format, name, paginator, path, request);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class Parserequest {\n");
    sb.append("    commonParent: ").append(toIndentedString(commonParent)).append("\n");
    sb.append("    fields: ").append(toIndentedString(fields)).append("\n");
    sb.append("    format: ").append(toIndentedString(format)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    paginator: ").append(toIndentedString(paginator)).append("\n");
    sb.append("    path: ").append(toIndentedString(path)).append("\n");
    sb.append("    request: ").append(toIndentedString(request)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("commonParent");
    openapiFields.add("fields");
    openapiFields.add("format");
    openapiFields.add("name");
    openapiFields.add("paginator");
    openapiFields.add("path");
    openapiFields.add("request");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("fields");
    openapiRequiredFields.add("format");
    openapiRequiredFields.add("name");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to Parserequest
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!Parserequest.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in Parserequest is not found in the empty JSON string", Parserequest.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!Parserequest.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `Parserequest` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : Parserequest.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("commonParent") != null && !jsonObj.get("commonParent").isJsonNull()) && !jsonObj.get("commonParent").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `commonParent` to be a primitive type in the JSON string but got `%s`", jsonObj.get("commonParent").toString()));
      }
      // ensure the json data is an array
      if (!jsonObj.get("fields").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `fields` to be an array in the JSON string but got `%s`", jsonObj.get("fields").toString()));
      }

      JsonArray jsonArrayfields = jsonObj.getAsJsonArray("fields");
      // validate the required field `fields` (array)
      for (int i = 0; i < jsonArrayfields.size(); i++) {
        Field.validateJsonElement(jsonArrayfields.get(i));
      };
      if (!jsonObj.get("format").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `format` to be a primitive type in the JSON string but got `%s`", jsonObj.get("format").toString()));
      }
      // validate the required field `format`
      FormatEnum.validateJsonElement(jsonObj.get("format"));
      if (!jsonObj.get("name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("name").toString()));
      }
      // validate the optional field `paginator`
      if (jsonObj.get("paginator") != null && !jsonObj.get("paginator").isJsonNull()) {
        Paginator.validateJsonElement(jsonObj.get("paginator"));
      }
      // validate the optional field `request`
      if (jsonObj.get("request") != null && !jsonObj.get("request").isJsonNull()) {
        Fetchrequest.validateJsonElement(jsonObj.get("request"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!Parserequest.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'Parserequest' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<Parserequest> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(Parserequest.class));

       return (TypeAdapter<T>) new TypeAdapter<Parserequest>() {
           @Override
           public void write(JsonWriter out, Parserequest value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public Parserequest read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of Parserequest given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of Parserequest
   * @throws IOException if the JSON string is invalid with respect to Parserequest
   */
  public static Parserequest fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, Parserequest.class);
  }

  /**
   * Convert an instance of Parserequest to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

