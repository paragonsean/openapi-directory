/**
 * Dataflow Kit Web Scraper
 * Render Javascript driven pages, while we internally manage Headless Chrome and proxies for you.   - Build a custom web scraper with our Visual point-and-click toolkit. - Scrape the most popular Search engines result pages (SERP). - Convert web pages to PDF and capture screenshots. *** ### Authentication Dataflow Kit API require you to sign up for an API key in order to use the API.   The API key can be found in the [DFK Dashboard](https://account.dataflowkit.com) after _free registration_.  Pass a secret API Key to all API requests to the server as the `api_key` query parameter.  
 *
 * The version of the OpenAPI document: 1.3
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import Action from './Action';
import InitialCookie from './InitialCookie';

/**
 * The Url2pdfrequest model module.
 * @module model/Url2pdfrequest
 * @version 1.3
 */
class Url2pdfrequest {
    /**
     * Constructs a new <code>Url2pdfrequest</code>.
     * @alias module:model/Url2pdfrequest
     * @param url {String} The full URL address (including HTTP/HTTPS) of a web page that you want to save as PDF
     */
    constructor(url) { 
        
        Url2pdfrequest.initialize(this, url);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, url) { 
        obj['landscape'] = false;
        obj['marginBottom'] = 0.4;
        obj['marginLeft'] = 0.4;
        obj['marginRight'] = 0.4;
        obj['marginTop'] = 0.4;
        obj['output'] = 'buffer';
        obj['paperSize'] = 'A4';
        obj['printBackground'] = false;
        obj['printHeaderFooter'] = false;
        obj['scale'] = 1;
        obj['url'] = url;
        obj['waitDelay'] = 0.5;
    }

    /**
     * Constructs a <code>Url2pdfrequest</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/Url2pdfrequest} obj Optional instance to populate.
     * @return {module:model/Url2pdfrequest} The populated <code>Url2pdfrequest</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new Url2pdfrequest();

            if (data.hasOwnProperty('actions')) {
                obj['actions'] = ApiClient.convertToType(data['actions'], [Action]);
            }
            if (data.hasOwnProperty('ignoreHTTPStatusErrCodes')) {
                obj['ignoreHTTPStatusErrCodes'] = ApiClient.convertToType(data['ignoreHTTPStatusErrCodes'], 'Boolean');
            }
            if (data.hasOwnProperty('initialCookies')) {
                obj['initialCookies'] = ApiClient.convertToType(data['initialCookies'], [InitialCookie]);
            }
            if (data.hasOwnProperty('landscape')) {
                obj['landscape'] = ApiClient.convertToType(data['landscape'], 'Boolean');
            }
            if (data.hasOwnProperty('marginBottom')) {
                obj['marginBottom'] = ApiClient.convertToType(data['marginBottom'], 'Number');
            }
            if (data.hasOwnProperty('marginLeft')) {
                obj['marginLeft'] = ApiClient.convertToType(data['marginLeft'], 'Number');
            }
            if (data.hasOwnProperty('marginRight')) {
                obj['marginRight'] = ApiClient.convertToType(data['marginRight'], 'Number');
            }
            if (data.hasOwnProperty('marginTop')) {
                obj['marginTop'] = ApiClient.convertToType(data['marginTop'], 'Number');
            }
            if (data.hasOwnProperty('output')) {
                obj['output'] = ApiClient.convertToType(data['output'], 'String');
            }
            if (data.hasOwnProperty('pageRanges')) {
                obj['pageRanges'] = ApiClient.convertToType(data['pageRanges'], 'String');
            }
            if (data.hasOwnProperty('paperSize')) {
                obj['paperSize'] = ApiClient.convertToType(data['paperSize'], 'String');
            }
            if (data.hasOwnProperty('printBackground')) {
                obj['printBackground'] = ApiClient.convertToType(data['printBackground'], 'Boolean');
            }
            if (data.hasOwnProperty('printHeaderFooter')) {
                obj['printHeaderFooter'] = ApiClient.convertToType(data['printHeaderFooter'], 'Boolean');
            }
            if (data.hasOwnProperty('proxy')) {
                obj['proxy'] = ApiClient.convertToType(data['proxy'], 'String');
            }
            if (data.hasOwnProperty('scale')) {
                obj['scale'] = ApiClient.convertToType(data['scale'], 'Number');
            }
            if (data.hasOwnProperty('url')) {
                obj['url'] = ApiClient.convertToType(data['url'], 'String');
            }
            if (data.hasOwnProperty('waitDelay')) {
                obj['waitDelay'] = ApiClient.convertToType(data['waitDelay'], 'Number');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>Url2pdfrequest</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>Url2pdfrequest</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of Url2pdfrequest.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        if (data['actions']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['actions'])) {
                throw new Error("Expected the field `actions` to be an array in the JSON data but got " + data['actions']);
            }
            // validate the optional field `actions` (array)
            for (const item of data['actions']) {
                Action.validateJSON(item);
            };
        }
        if (data['initialCookies']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['initialCookies'])) {
                throw new Error("Expected the field `initialCookies` to be an array in the JSON data but got " + data['initialCookies']);
            }
            // validate the optional field `initialCookies` (array)
            for (const item of data['initialCookies']) {
                InitialCookie.validateJSON(item);
            };
        }
        // ensure the json data is a string
        if (data['output'] && !(typeof data['output'] === 'string' || data['output'] instanceof String)) {
            throw new Error("Expected the field `output` to be a primitive type in the JSON string but got " + data['output']);
        }
        // ensure the json data is a string
        if (data['pageRanges'] && !(typeof data['pageRanges'] === 'string' || data['pageRanges'] instanceof String)) {
            throw new Error("Expected the field `pageRanges` to be a primitive type in the JSON string but got " + data['pageRanges']);
        }
        // ensure the json data is a string
        if (data['paperSize'] && !(typeof data['paperSize'] === 'string' || data['paperSize'] instanceof String)) {
            throw new Error("Expected the field `paperSize` to be a primitive type in the JSON string but got " + data['paperSize']);
        }
        // ensure the json data is a string
        if (data['proxy'] && !(typeof data['proxy'] === 'string' || data['proxy'] instanceof String)) {
            throw new Error("Expected the field `proxy` to be a primitive type in the JSON string but got " + data['proxy']);
        }
        // ensure the json data is a string
        if (data['url'] && !(typeof data['url'] === 'string' || data['url'] instanceof String)) {
            throw new Error("Expected the field `url` to be a primitive type in the JSON string but got " + data['url']);
        }

        return true;
    }


}

Url2pdfrequest.RequiredProperties = ["url"];

/**
 * Use actions to automate manual workflows while rendering web pages. They simulate real-world human interaction with pages.
 * @member {Array.<module:model/Action>} actions
 */
Url2pdfrequest.prototype['actions'] = undefined;

/**
 * The HTTP 200 OK success status response code indicates that the request has succeeded. Sometimes a server returns normal HTML content even with an erroneous Non-200 HTTP response status code. The IgnoreHTTPStatusCode option is useful when you need to force the return of HTML content. Defaults to \"false.\"
 * @member {Boolean} ignoreHTTPStatusErrCodes
 */
Url2pdfrequest.prototype['ignoreHTTPStatusErrCodes'] = undefined;

/**
 * The \"Initial Cookies\" option is useful for crawling websites that require a login. The simplest solution to get an array of cookies for specific websites is to use a web browser \"EditThisCookie\" extension. Copy a cookie array with \"EditThisCookie\" and paste it into the \"Initial cookie\" field.
 * @member {Array.<module:model/InitialCookie>} initialCookies
 */
Url2pdfrequest.prototype['initialCookies'] = undefined;

/**
 * Paper orientation. Parameter landscape = false means portrait orientation. Set landscape to true for landscape page oriantation.
 * @member {Boolean} landscape
 * @default false
 */
Url2pdfrequest.prototype['landscape'] = false;

/**
 * Bottom Margin of the PDF (in inches)
 * @member {Number} marginBottom
 * @default 0.4
 */
Url2pdfrequest.prototype['marginBottom'] = 0.4;

/**
 * Left Margin of the PDF (in inches)
 * @member {Number} marginLeft
 * @default 0.4
 */
Url2pdfrequest.prototype['marginLeft'] = 0.4;

/**
 * Right Margin of the PDF (in inches)
 * @member {Number} marginRight
 * @default 0.4
 */
Url2pdfrequest.prototype['marginRight'] = 0.4;

/**
 * Top Margin of the PDF (in inches)
 * @member {Number} marginTop
 * @default 0.4
 */
Url2pdfrequest.prototype['marginTop'] = 0.4;

/**
 * If set to _file_, the resulted PDF is uploaded to Dataflow Kit Storage first. Then the link to this file is returned. Overwise, PDF content is returned in the response body.
 * @member {module:model/Url2pdfrequest.OutputEnum} output
 * @default 'buffer'
 */
Url2pdfrequest.prototype['output'] = 'buffer';

/**
 * Specify page ranges to convert. Defaults to the empty value, which means convert all pages.
 * @member {String} pageRanges
 */
Url2pdfrequest.prototype['pageRanges'] = undefined;

/**
 * Page size parameter consists of the most popular page formats.
 * @member {module:model/Url2pdfrequest.PaperSizeEnum} paperSize
 * @default 'A4'
 */
Url2pdfrequest.prototype['paperSize'] = 'A4';

/**
 * Print background graphics in the PDF.
 * @member {Boolean} printBackground
 * @default false
 */
Url2pdfrequest.prototype['printBackground'] = false;

/**
 * printHeaderFooter  parameter consists of the date, name of the web page, the page URL, and how many pages the document you are printing.
 * @member {Boolean} printHeaderFooter
 * @default false
 */
Url2pdfrequest.prototype['printHeaderFooter'] = false;

/**
 * Specify proxy by adding [country ISO code](https://en.wikipedia.org/wiki/ISO_3166-2) to `country-` value to send requests through a proxy in the specified country. Use `country-any` to use random geo-targets.
 * @member {String} proxy
 */
Url2pdfrequest.prototype['proxy'] = undefined;

/**
 * By default, PDF document content is generated according to dimensions of the original web page content. Using the `scale` parameter, you can specify a custom zoom factor from 0.1 to 5.0 of the webpage rendering.
 * @member {Number} scale
 * @default 1
 */
Url2pdfrequest.prototype['scale'] = 1;

/**
 * The full URL address (including HTTP/HTTPS) of a web page that you want to save as PDF
 * @member {String} url
 */
Url2pdfrequest.prototype['url'] = undefined;

/**
 * Specify a wait delay (in seconds). This may be useful if certain elements of the web site need to be rendered after the initial page load.
 * @member {Number} waitDelay
 * @default 0.5
 */
Url2pdfrequest.prototype['waitDelay'] = 0.5;





/**
 * Allowed values for the <code>output</code> property.
 * @enum {String}
 * @readonly
 */
Url2pdfrequest['OutputEnum'] = {

    /**
     * value: "buffer"
     * @const
     */
    "buffer": "buffer",

    /**
     * value: "file"
     * @const
     */
    "file": "file"
};


/**
 * Allowed values for the <code>paperSize</code> property.
 * @enum {String}
 * @readonly
 */
Url2pdfrequest['PaperSizeEnum'] = {

    /**
     * value: "A3"
     * @const
     */
    "A3": "A3",

    /**
     * value: "A4"
     * @const
     */
    "A4": "A4",

    /**
     * value: "A5"
     * @const
     */
    "A5": "A5",

    /**
     * value: "A6"
     * @const
     */
    "A6": "A6",

    /**
     * value: "Letter"
     * @const
     */
    "Letter": "Letter",

    /**
     * value: "Legal"
     * @const
     */
    "Legal": "Legal",

    /**
     * value: "Tabloid"
     * @const
     */
    "Tabloid": "Tabloid"
};



export default Url2pdfrequest;

