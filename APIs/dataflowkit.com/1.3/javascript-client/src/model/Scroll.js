/**
 * Dataflow Kit Web Scraper
 * Render Javascript driven pages, while we internally manage Headless Chrome and proxies for you.   - Build a custom web scraper with our Visual point-and-click toolkit. - Scrape the most popular Search engines result pages (SERP). - Convert web pages to PDF and capture screenshots. *** ### Authentication Dataflow Kit API require you to sign up for an API key in order to use the API.   The API key can be found in the [DFK Dashboard](https://account.dataflowkit.com) after _free registration_.  Pass a secret API Key to all API requests to the server as the `api_key` query parameter.  
 *
 * The version of the OpenAPI document: 1.3
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The Scroll model module.
 * @module model/Scroll
 * @version 1.3
 */
class Scroll {
    /**
     * Constructs a new <code>Scroll</code>.
     * Scroll a page down to load more content, simulating user interaction with infinite scrolled pages. Or specify the element&#39;s CSS Selector to click for loading more content.
     * @alias module:model/Scroll
     */
    constructor() { 
        
        Scroll.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>Scroll</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/Scroll} obj Optional instance to populate.
     * @return {module:model/Scroll} The populated <code>Scroll</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new Scroll();

            if (data.hasOwnProperty('scrollByPixels')) {
                obj['scrollByPixels'] = ApiClient.convertToType(data['scrollByPixels'], 'Number');
            }
            if (data.hasOwnProperty('scrollingElementSelector')) {
                obj['scrollingElementSelector'] = ApiClient.convertToType(data['scrollingElementSelector'], 'String');
            }
            if (data.hasOwnProperty('selector')) {
                obj['selector'] = ApiClient.convertToType(data['selector'], 'String');
            }
            if (data.hasOwnProperty('times')) {
                obj['times'] = ApiClient.convertToType(data['times'], 'Number');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>Scroll</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>Scroll</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['scrollingElementSelector'] && !(typeof data['scrollingElementSelector'] === 'string' || data['scrollingElementSelector'] instanceof String)) {
            throw new Error("Expected the field `scrollingElementSelector` to be a primitive type in the JSON string but got " + data['scrollingElementSelector']);
        }
        // ensure the json data is a string
        if (data['selector'] && !(typeof data['selector'] === 'string' || data['selector'] instanceof String)) {
            throw new Error("Expected the field `selector` to be a primitive type in the JSON string but got " + data['selector']);
        }

        return true;
    }


}



/**
 * Scrolls a web page by the number of pixels specified by 'scrollByPixels' parameter.
 * @member {Number} scrollByPixels
 */
Scroll.prototype['scrollByPixels'] = undefined;

/**
 * Optionally specify here a valid CSS Selector of scrolling element.
 * @member {String} scrollingElementSelector
 */
Scroll.prototype['scrollingElementSelector'] = undefined;

/**
 * Some websites require clicking 'More' button while scrolling a page. Put here 'More' button valid CSS Selector.
 * @member {String} selector
 */
Scroll.prototype['selector'] = undefined;

/**
 * The number of times to scroll down a web page.
 * @member {Number} times
 */
Scroll.prototype['times'] = undefined;






export default Scroll;

