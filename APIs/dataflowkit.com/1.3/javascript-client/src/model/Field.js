/**
 * Dataflow Kit Web Scraper
 * Render Javascript driven pages, while we internally manage Headless Chrome and proxies for you.   - Build a custom web scraper with our Visual point-and-click toolkit. - Scrape the most popular Search engines result pages (SERP). - Convert web pages to PDF and capture screenshots. *** ### Authentication Dataflow Kit API require you to sign up for an API key in order to use the API.   The API key can be found in the [DFK Dashboard](https://account.dataflowkit.com) after _free registration_.  Pass a secret API Key to all API requests to the server as the `api_key` query parameter.  
 *
 * The version of the OpenAPI document: 1.3
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import FieldFiltersInner from './FieldFiltersInner';
import Parserequest from './Parserequest';

/**
 * The Field model module.
 * @module model/Field
 * @version 1.3
 */
class Field {
    /**
     * Constructs a new <code>Field</code>.
     * @alias module:model/Field
     * @param attrs {Array.<module:model/Field.AttrsEnum>} A set of attributes to extract from a Field. Find more information about attributes
     * @param name {String} Field name is used to aggregate results.
     * @param selector {String} Selector represents a CSS selector for data extraction within the given block.
     * @param type {module:model/Field.TypeEnum} Selector type. ( 0 - image, 1 - text, 2 - link)
     */
    constructor(attrs, name, selector, type) { 
        
        Field.initialize(this, attrs, name, selector, type);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, attrs, name, selector, type) { 
        obj['attrs'] = attrs;
        obj['name'] = name;
        obj['selector'] = selector;
        obj['type'] = type;
    }

    /**
     * Constructs a <code>Field</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/Field} obj Optional instance to populate.
     * @return {module:model/Field} The populated <code>Field</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new Field();

            if (data.hasOwnProperty('attrs')) {
                obj['attrs'] = ApiClient.convertToType(data['attrs'], ['String']);
            }
            if (data.hasOwnProperty('details')) {
                obj['details'] = ApiClient.convertToType(data['details'], Parserequest);
            }
            if (data.hasOwnProperty('filters')) {
                obj['filters'] = ApiClient.convertToType(data['filters'], [FieldFiltersInner]);
            }
            if (data.hasOwnProperty('name')) {
                obj['name'] = ApiClient.convertToType(data['name'], 'String');
            }
            if (data.hasOwnProperty('selector')) {
                obj['selector'] = ApiClient.convertToType(data['selector'], 'String');
            }
            if (data.hasOwnProperty('type')) {
                obj['type'] = ApiClient.convertToType(data['type'], 'Number');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>Field</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>Field</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of Field.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // ensure the json data is an array
        if (!Array.isArray(data['attrs'])) {
            throw new Error("Expected the field `attrs` to be an array in the JSON data but got " + data['attrs']);
        }
        // validate the optional field `details`
        if (data['details']) { // data not null
          Parserequest.validateJSON(data['details']);
        }
        if (data['filters']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['filters'])) {
                throw new Error("Expected the field `filters` to be an array in the JSON data but got " + data['filters']);
            }
            // validate the optional field `filters` (array)
            for (const item of data['filters']) {
                FieldFiltersInner.validateJSON(item);
            };
        }
        // ensure the json data is a string
        if (data['name'] && !(typeof data['name'] === 'string' || data['name'] instanceof String)) {
            throw new Error("Expected the field `name` to be a primitive type in the JSON string but got " + data['name']);
        }
        // ensure the json data is a string
        if (data['selector'] && !(typeof data['selector'] === 'string' || data['selector'] instanceof String)) {
            throw new Error("Expected the field `selector` to be a primitive type in the JSON string but got " + data['selector']);
        }

        return true;
    }


}

Field.RequiredProperties = ["attrs", "name", "selector", "type"];

/**
 * A set of attributes to extract from a Field. Find more information about attributes
 * @member {Array.<module:model/Field.AttrsEnum>} attrs
 */
Field.prototype['attrs'] = undefined;

/**
 * Details themself represent independent Parse request that extracts data from linked pages.
 * @member {module:model/Parserequest} details
 */
Field.prototype['details'] = undefined;

/**
 * Filters are used to pre-processing of text data when extracting.
 * @member {Array.<module:model/FieldFiltersInner>} filters
 */
Field.prototype['filters'] = undefined;

/**
 * Field name is used to aggregate results.
 * @member {String} name
 */
Field.prototype['name'] = undefined;

/**
 * Selector represents a CSS selector for data extraction within the given block.
 * @member {String} selector
 */
Field.prototype['selector'] = undefined;

/**
 * Selector type. ( 0 - image, 1 - text, 2 - link)
 * @member {module:model/Field.TypeEnum} type
 */
Field.prototype['type'] = undefined;





/**
 * Allowed values for the <code>attrs</code> property.
 * @enum {String}
 * @readonly
 */
Field['AttrsEnum'] = {

    /**
     * value: "text"
     * @const
     */
    "text": "text",

    /**
     * value: "href"
     * @const
     */
    "href": "href",

    /**
     * value: "src"
     * @const
     */
    "src": "src",

    /**
     * value: "alt"
     * @const
     */
    "alt": "alt"
};


/**
 * Allowed values for the <code>type</code> property.
 * @enum {Number}
 * @readonly
 */
Field['TypeEnum'] = {

    /**
     * value: 0
     * @const
     */
    "0": 0,

    /**
     * value: 1
     * @const
     */
    "1": 1,

    /**
     * value: 2
     * @const
     */
    "2": 2
};



export default Field;

