/**
 * Dataflow Kit Web Scraper
 * Render Javascript driven pages, while we internally manage Headless Chrome and proxies for you.   - Build a custom web scraper with our Visual point-and-click toolkit. - Scrape the most popular Search engines result pages (SERP). - Convert web pages to PDF and capture screenshots. *** ### Authentication Dataflow Kit API require you to sign up for an API key in order to use the API.   The API key can be found in the [DFK Dashboard](https://account.dataflowkit.com) after _free registration_.  Pass a secret API Key to all API requests to the server as the `api_key` query parameter.  
 *
 * The version of the OpenAPI document: 1.3
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import Field from './Field';

/**
 * The Serprequest model module.
 * @module model/Serprequest
 * @version 1.3
 */
class Serprequest {
    /**
     * Constructs a new <code>Serprequest</code>.
     * @alias module:model/Serprequest
     * @param format {module:model/Serprequest.FormatEnum} Extracted data is returned either in CSV, MS Excel, JSON, JSON(Lines) or XML format.
     * @param name {String} Collection name.
     * @param proxy {String} Always specify proxy for sending SERP requests. Add choosen [country ISO code](https://en.wikipedia.org/wiki/ISO_3166-2) to `country-` value to send requests through a proxy in the specified country. Use `country-any` to use random geo-targets.
     * @param type {String} For SERP requests you should _always_ use `chrome` type to fetch content with a Headless chrome browser
     * @param url {String} url holds the link to a Search Engine to use, and other optional parameters like languages or country.
     */
    constructor(format, name, proxy, type, url) { 
        
        Serprequest.initialize(this, format, name, proxy, type, url);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, format, name, proxy, type, url) { 
        obj['format'] = format;
        obj['name'] = name;
        obj['pageNum'] = 1;
        obj['proxy'] = proxy;
        obj['type'] = type;
        obj['url'] = url;
    }

    /**
     * Constructs a <code>Serprequest</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/Serprequest} obj Optional instance to populate.
     * @return {module:model/Serprequest} The populated <code>Serprequest</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new Serprequest();

            if (data.hasOwnProperty('fields')) {
                obj['fields'] = ApiClient.convertToType(data['fields'], [Field]);
            }
            if (data.hasOwnProperty('format')) {
                obj['format'] = ApiClient.convertToType(data['format'], 'String');
            }
            if (data.hasOwnProperty('name')) {
                obj['name'] = ApiClient.convertToType(data['name'], 'String');
            }
            if (data.hasOwnProperty('pageNum')) {
                obj['pageNum'] = ApiClient.convertToType(data['pageNum'], 'Number');
            }
            if (data.hasOwnProperty('proxy')) {
                obj['proxy'] = ApiClient.convertToType(data['proxy'], 'String');
            }
            if (data.hasOwnProperty('type')) {
                obj['type'] = ApiClient.convertToType(data['type'], 'String');
            }
            if (data.hasOwnProperty('url')) {
                obj['url'] = ApiClient.convertToType(data['url'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>Serprequest</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>Serprequest</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of Serprequest.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        if (data['fields']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['fields'])) {
                throw new Error("Expected the field `fields` to be an array in the JSON data but got " + data['fields']);
            }
            // validate the optional field `fields` (array)
            for (const item of data['fields']) {
                Field.validateJSON(item);
            };
        }
        // ensure the json data is a string
        if (data['format'] && !(typeof data['format'] === 'string' || data['format'] instanceof String)) {
            throw new Error("Expected the field `format` to be a primitive type in the JSON string but got " + data['format']);
        }
        // ensure the json data is a string
        if (data['name'] && !(typeof data['name'] === 'string' || data['name'] instanceof String)) {
            throw new Error("Expected the field `name` to be a primitive type in the JSON string but got " + data['name']);
        }
        // ensure the json data is a string
        if (data['proxy'] && !(typeof data['proxy'] === 'string' || data['proxy'] instanceof String)) {
            throw new Error("Expected the field `proxy` to be a primitive type in the JSON string but got " + data['proxy']);
        }
        // ensure the json data is a string
        if (data['type'] && !(typeof data['type'] === 'string' || data['type'] instanceof String)) {
            throw new Error("Expected the field `type` to be a primitive type in the JSON string but got " + data['type']);
        }
        // ensure the json data is a string
        if (data['url'] && !(typeof data['url'] === 'string' || data['url'] instanceof String)) {
            throw new Error("Expected the field `url` to be a primitive type in the JSON string but got " + data['url']);
        }

        return true;
    }


}

Serprequest.RequiredProperties = ["format", "name", "proxy", "type", "url"];

/**
 * Specify CSS selectors (patterns) used to gather data from Search Engine Result Pages.  Ready-to-use payloads for collecting search results from the most popular Search Engines are available. These payloads are customizable, though. 
 * @member {Array.<module:model/Field>} fields
 */
Serprequest.prototype['fields'] = undefined;

/**
 * Extracted data is returned either in CSV, MS Excel, JSON, JSON(Lines) or XML format.
 * @member {module:model/Serprequest.FormatEnum} format
 */
Serprequest.prototype['format'] = undefined;

/**
 * Collection name.
 * @member {String} name
 */
Serprequest.prototype['name'] = undefined;

/**
 * Specify number of pages to crawl.
 * @member {Number} pageNum
 * @default 1
 */
Serprequest.prototype['pageNum'] = 1;

/**
 * Always specify proxy for sending SERP requests. Add choosen [country ISO code](https://en.wikipedia.org/wiki/ISO_3166-2) to `country-` value to send requests through a proxy in the specified country. Use `country-any` to use random geo-targets.
 * @member {String} proxy
 */
Serprequest.prototype['proxy'] = undefined;

/**
 * For SERP requests you should _always_ use `chrome` type to fetch content with a Headless chrome browser
 * @member {String} type
 */
Serprequest.prototype['type'] = undefined;

/**
 * url holds the link to a Search Engine to use, and other optional parameters like languages or country.
 * @member {String} url
 */
Serprequest.prototype['url'] = undefined;





/**
 * Allowed values for the <code>format</code> property.
 * @enum {String}
 * @readonly
 */
Serprequest['FormatEnum'] = {

    /**
     * value: "csv"
     * @const
     */
    "csv": "csv",

    /**
     * value: "json"
     * @const
     */
    "json": "json",

    /**
     * value: "jsonl"
     * @const
     */
    "jsonl": "jsonl",

    /**
     * value: "excel"
     * @const
     */
    "excel": "excel",

    /**
     * value: "xml"
     * @const
     */
    "xml": "xml"
};



export default Serprequest;

