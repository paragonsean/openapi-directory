/**
 * Dataflow Kit Web Scraper
 * Render Javascript driven pages, while we internally manage Headless Chrome and proxies for you.   - Build a custom web scraper with our Visual point-and-click toolkit. - Scrape the most popular Search engines result pages (SERP). - Convert web pages to PDF and capture screenshots. *** ### Authentication Dataflow Kit API require you to sign up for an API key in order to use the API.   The API key can be found in the [DFK Dashboard](https://account.dataflowkit.com) after _free registration_.  Pass a secret API Key to all API requests to the server as the `api_key` query parameter.  
 *
 * The version of the OpenAPI document: 1.3
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIUrl2screenshotrequest.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIUrl2screenshotrequest::OAIUrl2screenshotrequest(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIUrl2screenshotrequest::OAIUrl2screenshotrequest() {
    this->initializeModel();
}

OAIUrl2screenshotrequest::~OAIUrl2screenshotrequest() {}

void OAIUrl2screenshotrequest::initializeModel() {

    m_actions_isSet = false;
    m_actions_isValid = false;

    m_clip_selector_isSet = false;
    m_clip_selector_isValid = false;

    m_format_isSet = false;
    m_format_isValid = false;

    m_full_page_isSet = false;
    m_full_page_isValid = false;

    m_height_isSet = false;
    m_height_isValid = false;

    m_ignore_http_status_err_codes_isSet = false;
    m_ignore_http_status_err_codes_isValid = false;

    m_initial_cookies_isSet = false;
    m_initial_cookies_isValid = false;

    m_offsetx_isSet = false;
    m_offsetx_isValid = false;

    m_offsety_isSet = false;
    m_offsety_isValid = false;

    m_output_isSet = false;
    m_output_isValid = false;

    m_print_background_isSet = false;
    m_print_background_isValid = false;

    m_proxy_isSet = false;
    m_proxy_isValid = false;

    m_quality_isSet = false;
    m_quality_isValid = false;

    m_scale_isSet = false;
    m_scale_isValid = false;

    m_url_isSet = false;
    m_url_isValid = false;

    m_wait_delay_isSet = false;
    m_wait_delay_isValid = false;

    m_width_isSet = false;
    m_width_isValid = false;
}

void OAIUrl2screenshotrequest::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIUrl2screenshotrequest::fromJsonObject(QJsonObject json) {

    m_actions_isValid = ::OpenAPI::fromJsonValue(m_actions, json[QString("actions")]);
    m_actions_isSet = !json[QString("actions")].isNull() && m_actions_isValid;

    m_clip_selector_isValid = ::OpenAPI::fromJsonValue(m_clip_selector, json[QString("clipSelector")]);
    m_clip_selector_isSet = !json[QString("clipSelector")].isNull() && m_clip_selector_isValid;

    m_format_isValid = ::OpenAPI::fromJsonValue(m_format, json[QString("format")]);
    m_format_isSet = !json[QString("format")].isNull() && m_format_isValid;

    m_full_page_isValid = ::OpenAPI::fromJsonValue(m_full_page, json[QString("fullPage")]);
    m_full_page_isSet = !json[QString("fullPage")].isNull() && m_full_page_isValid;

    m_height_isValid = ::OpenAPI::fromJsonValue(m_height, json[QString("height")]);
    m_height_isSet = !json[QString("height")].isNull() && m_height_isValid;

    m_ignore_http_status_err_codes_isValid = ::OpenAPI::fromJsonValue(m_ignore_http_status_err_codes, json[QString("ignoreHTTPStatusErrCodes")]);
    m_ignore_http_status_err_codes_isSet = !json[QString("ignoreHTTPStatusErrCodes")].isNull() && m_ignore_http_status_err_codes_isValid;

    m_initial_cookies_isValid = ::OpenAPI::fromJsonValue(m_initial_cookies, json[QString("initialCookies")]);
    m_initial_cookies_isSet = !json[QString("initialCookies")].isNull() && m_initial_cookies_isValid;

    m_offsetx_isValid = ::OpenAPI::fromJsonValue(m_offsetx, json[QString("offsetx")]);
    m_offsetx_isSet = !json[QString("offsetx")].isNull() && m_offsetx_isValid;

    m_offsety_isValid = ::OpenAPI::fromJsonValue(m_offsety, json[QString("offsety")]);
    m_offsety_isSet = !json[QString("offsety")].isNull() && m_offsety_isValid;

    m_output_isValid = ::OpenAPI::fromJsonValue(m_output, json[QString("output")]);
    m_output_isSet = !json[QString("output")].isNull() && m_output_isValid;

    m_print_background_isValid = ::OpenAPI::fromJsonValue(m_print_background, json[QString("printBackground")]);
    m_print_background_isSet = !json[QString("printBackground")].isNull() && m_print_background_isValid;

    m_proxy_isValid = ::OpenAPI::fromJsonValue(m_proxy, json[QString("proxy")]);
    m_proxy_isSet = !json[QString("proxy")].isNull() && m_proxy_isValid;

    m_quality_isValid = ::OpenAPI::fromJsonValue(m_quality, json[QString("quality")]);
    m_quality_isSet = !json[QString("quality")].isNull() && m_quality_isValid;

    m_scale_isValid = ::OpenAPI::fromJsonValue(m_scale, json[QString("scale")]);
    m_scale_isSet = !json[QString("scale")].isNull() && m_scale_isValid;

    m_url_isValid = ::OpenAPI::fromJsonValue(m_url, json[QString("url")]);
    m_url_isSet = !json[QString("url")].isNull() && m_url_isValid;

    m_wait_delay_isValid = ::OpenAPI::fromJsonValue(m_wait_delay, json[QString("waitDelay")]);
    m_wait_delay_isSet = !json[QString("waitDelay")].isNull() && m_wait_delay_isValid;

    m_width_isValid = ::OpenAPI::fromJsonValue(m_width, json[QString("width")]);
    m_width_isSet = !json[QString("width")].isNull() && m_width_isValid;
}

QString OAIUrl2screenshotrequest::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIUrl2screenshotrequest::asJsonObject() const {
    QJsonObject obj;
    if (m_actions.size() > 0) {
        obj.insert(QString("actions"), ::OpenAPI::toJsonValue(m_actions));
    }
    if (m_clip_selector_isSet) {
        obj.insert(QString("clipSelector"), ::OpenAPI::toJsonValue(m_clip_selector));
    }
    if (m_format_isSet) {
        obj.insert(QString("format"), ::OpenAPI::toJsonValue(m_format));
    }
    if (m_full_page_isSet) {
        obj.insert(QString("fullPage"), ::OpenAPI::toJsonValue(m_full_page));
    }
    if (m_height_isSet) {
        obj.insert(QString("height"), ::OpenAPI::toJsonValue(m_height));
    }
    if (m_ignore_http_status_err_codes_isSet) {
        obj.insert(QString("ignoreHTTPStatusErrCodes"), ::OpenAPI::toJsonValue(m_ignore_http_status_err_codes));
    }
    if (m_initial_cookies.size() > 0) {
        obj.insert(QString("initialCookies"), ::OpenAPI::toJsonValue(m_initial_cookies));
    }
    if (m_offsetx_isSet) {
        obj.insert(QString("offsetx"), ::OpenAPI::toJsonValue(m_offsetx));
    }
    if (m_offsety_isSet) {
        obj.insert(QString("offsety"), ::OpenAPI::toJsonValue(m_offsety));
    }
    if (m_output_isSet) {
        obj.insert(QString("output"), ::OpenAPI::toJsonValue(m_output));
    }
    if (m_print_background_isSet) {
        obj.insert(QString("printBackground"), ::OpenAPI::toJsonValue(m_print_background));
    }
    if (m_proxy_isSet) {
        obj.insert(QString("proxy"), ::OpenAPI::toJsonValue(m_proxy));
    }
    if (m_quality_isSet) {
        obj.insert(QString("quality"), ::OpenAPI::toJsonValue(m_quality));
    }
    if (m_scale_isSet) {
        obj.insert(QString("scale"), ::OpenAPI::toJsonValue(m_scale));
    }
    if (m_url_isSet) {
        obj.insert(QString("url"), ::OpenAPI::toJsonValue(m_url));
    }
    if (m_wait_delay_isSet) {
        obj.insert(QString("waitDelay"), ::OpenAPI::toJsonValue(m_wait_delay));
    }
    if (m_width_isSet) {
        obj.insert(QString("width"), ::OpenAPI::toJsonValue(m_width));
    }
    return obj;
}

QList<OAIAction> OAIUrl2screenshotrequest::getActions() const {
    return m_actions;
}
void OAIUrl2screenshotrequest::setActions(const QList<OAIAction> &actions) {
    m_actions = actions;
    m_actions_isSet = true;
}

bool OAIUrl2screenshotrequest::is_actions_Set() const{
    return m_actions_isSet;
}

bool OAIUrl2screenshotrequest::is_actions_Valid() const{
    return m_actions_isValid;
}

QString OAIUrl2screenshotrequest::getClipSelector() const {
    return m_clip_selector;
}
void OAIUrl2screenshotrequest::setClipSelector(const QString &clip_selector) {
    m_clip_selector = clip_selector;
    m_clip_selector_isSet = true;
}

bool OAIUrl2screenshotrequest::is_clip_selector_Set() const{
    return m_clip_selector_isSet;
}

bool OAIUrl2screenshotrequest::is_clip_selector_Valid() const{
    return m_clip_selector_isValid;
}

QString OAIUrl2screenshotrequest::getFormat() const {
    return m_format;
}
void OAIUrl2screenshotrequest::setFormat(const QString &format) {
    m_format = format;
    m_format_isSet = true;
}

bool OAIUrl2screenshotrequest::is_format_Set() const{
    return m_format_isSet;
}

bool OAIUrl2screenshotrequest::is_format_Valid() const{
    return m_format_isValid;
}

bool OAIUrl2screenshotrequest::isFullPage() const {
    return m_full_page;
}
void OAIUrl2screenshotrequest::setFullPage(const bool &full_page) {
    m_full_page = full_page;
    m_full_page_isSet = true;
}

bool OAIUrl2screenshotrequest::is_full_page_Set() const{
    return m_full_page_isSet;
}

bool OAIUrl2screenshotrequest::is_full_page_Valid() const{
    return m_full_page_isValid;
}

qint32 OAIUrl2screenshotrequest::getHeight() const {
    return m_height;
}
void OAIUrl2screenshotrequest::setHeight(const qint32 &height) {
    m_height = height;
    m_height_isSet = true;
}

bool OAIUrl2screenshotrequest::is_height_Set() const{
    return m_height_isSet;
}

bool OAIUrl2screenshotrequest::is_height_Valid() const{
    return m_height_isValid;
}

bool OAIUrl2screenshotrequest::isIgnoreHttpStatusErrCodes() const {
    return m_ignore_http_status_err_codes;
}
void OAIUrl2screenshotrequest::setIgnoreHttpStatusErrCodes(const bool &ignore_http_status_err_codes) {
    m_ignore_http_status_err_codes = ignore_http_status_err_codes;
    m_ignore_http_status_err_codes_isSet = true;
}

bool OAIUrl2screenshotrequest::is_ignore_http_status_err_codes_Set() const{
    return m_ignore_http_status_err_codes_isSet;
}

bool OAIUrl2screenshotrequest::is_ignore_http_status_err_codes_Valid() const{
    return m_ignore_http_status_err_codes_isValid;
}

QList<OAIInitialCookie> OAIUrl2screenshotrequest::getInitialCookies() const {
    return m_initial_cookies;
}
void OAIUrl2screenshotrequest::setInitialCookies(const QList<OAIInitialCookie> &initial_cookies) {
    m_initial_cookies = initial_cookies;
    m_initial_cookies_isSet = true;
}

bool OAIUrl2screenshotrequest::is_initial_cookies_Set() const{
    return m_initial_cookies_isSet;
}

bool OAIUrl2screenshotrequest::is_initial_cookies_Valid() const{
    return m_initial_cookies_isValid;
}

qint32 OAIUrl2screenshotrequest::getOffsetx() const {
    return m_offsetx;
}
void OAIUrl2screenshotrequest::setOffsetx(const qint32 &offsetx) {
    m_offsetx = offsetx;
    m_offsetx_isSet = true;
}

bool OAIUrl2screenshotrequest::is_offsetx_Set() const{
    return m_offsetx_isSet;
}

bool OAIUrl2screenshotrequest::is_offsetx_Valid() const{
    return m_offsetx_isValid;
}

qint32 OAIUrl2screenshotrequest::getOffsety() const {
    return m_offsety;
}
void OAIUrl2screenshotrequest::setOffsety(const qint32 &offsety) {
    m_offsety = offsety;
    m_offsety_isSet = true;
}

bool OAIUrl2screenshotrequest::is_offsety_Set() const{
    return m_offsety_isSet;
}

bool OAIUrl2screenshotrequest::is_offsety_Valid() const{
    return m_offsety_isValid;
}

QString OAIUrl2screenshotrequest::getOutput() const {
    return m_output;
}
void OAIUrl2screenshotrequest::setOutput(const QString &output) {
    m_output = output;
    m_output_isSet = true;
}

bool OAIUrl2screenshotrequest::is_output_Set() const{
    return m_output_isSet;
}

bool OAIUrl2screenshotrequest::is_output_Valid() const{
    return m_output_isValid;
}

bool OAIUrl2screenshotrequest::isPrintBackground() const {
    return m_print_background;
}
void OAIUrl2screenshotrequest::setPrintBackground(const bool &print_background) {
    m_print_background = print_background;
    m_print_background_isSet = true;
}

bool OAIUrl2screenshotrequest::is_print_background_Set() const{
    return m_print_background_isSet;
}

bool OAIUrl2screenshotrequest::is_print_background_Valid() const{
    return m_print_background_isValid;
}

QString OAIUrl2screenshotrequest::getProxy() const {
    return m_proxy;
}
void OAIUrl2screenshotrequest::setProxy(const QString &proxy) {
    m_proxy = proxy;
    m_proxy_isSet = true;
}

bool OAIUrl2screenshotrequest::is_proxy_Set() const{
    return m_proxy_isSet;
}

bool OAIUrl2screenshotrequest::is_proxy_Valid() const{
    return m_proxy_isValid;
}

qint32 OAIUrl2screenshotrequest::getQuality() const {
    return m_quality;
}
void OAIUrl2screenshotrequest::setQuality(const qint32 &quality) {
    m_quality = quality;
    m_quality_isSet = true;
}

bool OAIUrl2screenshotrequest::is_quality_Set() const{
    return m_quality_isSet;
}

bool OAIUrl2screenshotrequest::is_quality_Valid() const{
    return m_quality_isValid;
}

double OAIUrl2screenshotrequest::getScale() const {
    return m_scale;
}
void OAIUrl2screenshotrequest::setScale(const double &scale) {
    m_scale = scale;
    m_scale_isSet = true;
}

bool OAIUrl2screenshotrequest::is_scale_Set() const{
    return m_scale_isSet;
}

bool OAIUrl2screenshotrequest::is_scale_Valid() const{
    return m_scale_isValid;
}

QString OAIUrl2screenshotrequest::getUrl() const {
    return m_url;
}
void OAIUrl2screenshotrequest::setUrl(const QString &url) {
    m_url = url;
    m_url_isSet = true;
}

bool OAIUrl2screenshotrequest::is_url_Set() const{
    return m_url_isSet;
}

bool OAIUrl2screenshotrequest::is_url_Valid() const{
    return m_url_isValid;
}

double OAIUrl2screenshotrequest::getWaitDelay() const {
    return m_wait_delay;
}
void OAIUrl2screenshotrequest::setWaitDelay(const double &wait_delay) {
    m_wait_delay = wait_delay;
    m_wait_delay_isSet = true;
}

bool OAIUrl2screenshotrequest::is_wait_delay_Set() const{
    return m_wait_delay_isSet;
}

bool OAIUrl2screenshotrequest::is_wait_delay_Valid() const{
    return m_wait_delay_isValid;
}

qint32 OAIUrl2screenshotrequest::getWidth() const {
    return m_width;
}
void OAIUrl2screenshotrequest::setWidth(const qint32 &width) {
    m_width = width;
    m_width_isSet = true;
}

bool OAIUrl2screenshotrequest::is_width_Set() const{
    return m_width_isSet;
}

bool OAIUrl2screenshotrequest::is_width_Valid() const{
    return m_width_isValid;
}

bool OAIUrl2screenshotrequest::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_actions.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_clip_selector_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_format_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_full_page_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_height_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_ignore_http_status_err_codes_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_initial_cookies.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_offsetx_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_offsety_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_output_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_print_background_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_proxy_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_quality_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_scale_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_url_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_wait_delay_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_width_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIUrl2screenshotrequest::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_url_isValid && true;
}

} // namespace OpenAPI
