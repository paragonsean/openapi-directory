/**
 * Dataflow Kit Web Scraper
 * Render Javascript driven pages, while we internally manage Headless Chrome and proxies for you.   - Build a custom web scraper with our Visual point-and-click toolkit. - Scrape the most popular Search engines result pages (SERP). - Convert web pages to PDF and capture screenshots. *** ### Authentication Dataflow Kit API require you to sign up for an API key in order to use the API.   The API key can be found in the [DFK Dashboard](https://account.dataflowkit.com) after _free registration_.  Pass a secret API Key to all API requests to the server as the `api_key` query parameter.  
 *
 * The version of the OpenAPI document: 1.3
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAIScroll.h
 *
 * Scroll a page down to load more content, simulating user interaction with infinite scrolled pages. Or specify the element&#39;s CSS Selector to click for loading more content.
 */

#ifndef OAIScroll_H
#define OAIScroll_H

#include <QJsonObject>

#include <QString>

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {

class OAIScroll : public OAIObject {
public:
    OAIScroll();
    OAIScroll(QString json);
    ~OAIScroll() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    double getScrollByPixels() const;
    void setScrollByPixels(const double &scroll_by_pixels);
    bool is_scroll_by_pixels_Set() const;
    bool is_scroll_by_pixels_Valid() const;

    QString getScrollingElementSelector() const;
    void setScrollingElementSelector(const QString &scrolling_element_selector);
    bool is_scrolling_element_selector_Set() const;
    bool is_scrolling_element_selector_Valid() const;

    QString getSelector() const;
    void setSelector(const QString &selector);
    bool is_selector_Set() const;
    bool is_selector_Valid() const;

    qint32 getTimes() const;
    void setTimes(const qint32 &times);
    bool is_times_Set() const;
    bool is_times_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    double m_scroll_by_pixels;
    bool m_scroll_by_pixels_isSet;
    bool m_scroll_by_pixels_isValid;

    QString m_scrolling_element_selector;
    bool m_scrolling_element_selector_isSet;
    bool m_scrolling_element_selector_isValid;

    QString m_selector;
    bool m_selector_isSet;
    bool m_selector_isValid;

    qint32 m_times;
    bool m_times_isSet;
    bool m_times_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAIScroll)

#endif // OAIScroll_H
