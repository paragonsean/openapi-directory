/**
 * Dataflow Kit Web Scraper
 * Render Javascript driven pages, while we internally manage Headless Chrome and proxies for you.   - Build a custom web scraper with our Visual point-and-click toolkit. - Scrape the most popular Search engines result pages (SERP). - Convert web pages to PDF and capture screenshots. *** ### Authentication Dataflow Kit API require you to sign up for an API key in order to use the API.   The API key can be found in the [DFK Dashboard](https://account.dataflowkit.com) after _free registration_.  Pass a secret API Key to all API requests to the server as the `api_key` query parameter.  
 *
 * The version of the OpenAPI document: 1.3
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAIField.h
 *
 * 
 */

#ifndef OAIField_H
#define OAIField_H

#include <QJsonObject>

#include "OAIField_filters_inner.h"
#include "OAIParserequest.h"
#include <QList>
#include <QString>

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {
class OAIParserequest;
class OAIField_filters_inner;

class OAIField : public OAIObject {
public:
    OAIField();
    OAIField(QString json);
    ~OAIField() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    QList<QString> getAttrs() const;
    void setAttrs(const QList<QString> &attrs);
    bool is_attrs_Set() const;
    bool is_attrs_Valid() const;

    OAIParserequest getDetails() const;
    void setDetails(const OAIParserequest &details);
    bool is_details_Set() const;
    bool is_details_Valid() const;

    QList<OAIField_filters_inner> getFilters() const;
    void setFilters(const QList<OAIField_filters_inner> &filters);
    bool is_filters_Set() const;
    bool is_filters_Valid() const;

    QString getName() const;
    void setName(const QString &name);
    bool is_name_Set() const;
    bool is_name_Valid() const;

    QString getSelector() const;
    void setSelector(const QString &selector);
    bool is_selector_Set() const;
    bool is_selector_Valid() const;

    qint32 getType() const;
    void setType(const qint32 &type);
    bool is_type_Set() const;
    bool is_type_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    QList<QString> m_attrs;
    bool m_attrs_isSet;
    bool m_attrs_isValid;

    OAIParserequest m_details;
    bool m_details_isSet;
    bool m_details_isValid;

    QList<OAIField_filters_inner> m_filters;
    bool m_filters_isSet;
    bool m_filters_isValid;

    QString m_name;
    bool m_name_isSet;
    bool m_name_isValid;

    QString m_selector;
    bool m_selector_isSet;
    bool m_selector_isValid;

    qint32 m_type;
    bool m_type_isSet;
    bool m_type_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAIField)

#endif // OAIField_H
