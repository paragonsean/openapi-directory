/**
 * Dataflow Kit Web Scraper
 * Render Javascript driven pages, while we internally manage Headless Chrome and proxies for you.   - Build a custom web scraper with our Visual point-and-click toolkit. - Scrape the most popular Search engines result pages (SERP). - Convert web pages to PDF and capture screenshots. *** ### Authentication Dataflow Kit API require you to sign up for an API key in order to use the API.   The API key can be found in the [DFK Dashboard](https://account.dataflowkit.com) after _free registration_.  Pass a secret API Key to all API requests to the server as the `api_key` query parameter.  
 *
 * The version of the OpenAPI document: 1.3
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIField.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIField::OAIField(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIField::OAIField() {
    this->initializeModel();
}

OAIField::~OAIField() {}

void OAIField::initializeModel() {

    m_attrs_isSet = false;
    m_attrs_isValid = false;

    m_details_isSet = false;
    m_details_isValid = false;

    m_filters_isSet = false;
    m_filters_isValid = false;

    m_name_isSet = false;
    m_name_isValid = false;

    m_selector_isSet = false;
    m_selector_isValid = false;

    m_type_isSet = false;
    m_type_isValid = false;
}

void OAIField::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIField::fromJsonObject(QJsonObject json) {

    m_attrs_isValid = ::OpenAPI::fromJsonValue(m_attrs, json[QString("attrs")]);
    m_attrs_isSet = !json[QString("attrs")].isNull() && m_attrs_isValid;

    m_details_isValid = ::OpenAPI::fromJsonValue(m_details, json[QString("details")]);
    m_details_isSet = !json[QString("details")].isNull() && m_details_isValid;

    m_filters_isValid = ::OpenAPI::fromJsonValue(m_filters, json[QString("filters")]);
    m_filters_isSet = !json[QString("filters")].isNull() && m_filters_isValid;

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("name")]);
    m_name_isSet = !json[QString("name")].isNull() && m_name_isValid;

    m_selector_isValid = ::OpenAPI::fromJsonValue(m_selector, json[QString("selector")]);
    m_selector_isSet = !json[QString("selector")].isNull() && m_selector_isValid;

    m_type_isValid = ::OpenAPI::fromJsonValue(m_type, json[QString("type")]);
    m_type_isSet = !json[QString("type")].isNull() && m_type_isValid;
}

QString OAIField::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIField::asJsonObject() const {
    QJsonObject obj;
    if (m_attrs.size() > 0) {
        obj.insert(QString("attrs"), ::OpenAPI::toJsonValue(m_attrs));
    }
    if (m_details.isSet()) {
        obj.insert(QString("details"), ::OpenAPI::toJsonValue(m_details));
    }
    if (m_filters.size() > 0) {
        obj.insert(QString("filters"), ::OpenAPI::toJsonValue(m_filters));
    }
    if (m_name_isSet) {
        obj.insert(QString("name"), ::OpenAPI::toJsonValue(m_name));
    }
    if (m_selector_isSet) {
        obj.insert(QString("selector"), ::OpenAPI::toJsonValue(m_selector));
    }
    if (m_type_isSet) {
        obj.insert(QString("type"), ::OpenAPI::toJsonValue(m_type));
    }
    return obj;
}

QList<QString> OAIField::getAttrs() const {
    return m_attrs;
}
void OAIField::setAttrs(const QList<QString> &attrs) {
    m_attrs = attrs;
    m_attrs_isSet = true;
}

bool OAIField::is_attrs_Set() const{
    return m_attrs_isSet;
}

bool OAIField::is_attrs_Valid() const{
    return m_attrs_isValid;
}

OAIParserequest OAIField::getDetails() const {
    return m_details;
}
void OAIField::setDetails(const OAIParserequest &details) {
    m_details = details;
    m_details_isSet = true;
}

bool OAIField::is_details_Set() const{
    return m_details_isSet;
}

bool OAIField::is_details_Valid() const{
    return m_details_isValid;
}

QList<OAIField_filters_inner> OAIField::getFilters() const {
    return m_filters;
}
void OAIField::setFilters(const QList<OAIField_filters_inner> &filters) {
    m_filters = filters;
    m_filters_isSet = true;
}

bool OAIField::is_filters_Set() const{
    return m_filters_isSet;
}

bool OAIField::is_filters_Valid() const{
    return m_filters_isValid;
}

QString OAIField::getName() const {
    return m_name;
}
void OAIField::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAIField::is_name_Set() const{
    return m_name_isSet;
}

bool OAIField::is_name_Valid() const{
    return m_name_isValid;
}

QString OAIField::getSelector() const {
    return m_selector;
}
void OAIField::setSelector(const QString &selector) {
    m_selector = selector;
    m_selector_isSet = true;
}

bool OAIField::is_selector_Set() const{
    return m_selector_isSet;
}

bool OAIField::is_selector_Valid() const{
    return m_selector_isValid;
}

qint32 OAIField::getType() const {
    return m_type;
}
void OAIField::setType(const qint32 &type) {
    m_type = type;
    m_type_isSet = true;
}

bool OAIField::is_type_Set() const{
    return m_type_isSet;
}

bool OAIField::is_type_Valid() const{
    return m_type_isValid;
}

bool OAIField::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_attrs.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_details.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_filters.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_selector_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_type_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIField::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_attrs_isValid && m_name_isValid && m_selector_isValid && m_type_isValid && true;
}

} // namespace OpenAPI
