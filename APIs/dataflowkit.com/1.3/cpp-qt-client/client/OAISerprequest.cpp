/**
 * Dataflow Kit Web Scraper
 * Render Javascript driven pages, while we internally manage Headless Chrome and proxies for you.   - Build a custom web scraper with our Visual point-and-click toolkit. - Scrape the most popular Search engines result pages (SERP). - Convert web pages to PDF and capture screenshots. *** ### Authentication Dataflow Kit API require you to sign up for an API key in order to use the API.   The API key can be found in the [DFK Dashboard](https://account.dataflowkit.com) after _free registration_.  Pass a secret API Key to all API requests to the server as the `api_key` query parameter.  
 *
 * The version of the OpenAPI document: 1.3
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAISerprequest.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAISerprequest::OAISerprequest(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAISerprequest::OAISerprequest() {
    this->initializeModel();
}

OAISerprequest::~OAISerprequest() {}

void OAISerprequest::initializeModel() {

    m_fields_isSet = false;
    m_fields_isValid = false;

    m_format_isSet = false;
    m_format_isValid = false;

    m_name_isSet = false;
    m_name_isValid = false;

    m_page_num_isSet = false;
    m_page_num_isValid = false;

    m_proxy_isSet = false;
    m_proxy_isValid = false;

    m_type_isSet = false;
    m_type_isValid = false;

    m_url_isSet = false;
    m_url_isValid = false;
}

void OAISerprequest::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAISerprequest::fromJsonObject(QJsonObject json) {

    m_fields_isValid = ::OpenAPI::fromJsonValue(m_fields, json[QString("fields")]);
    m_fields_isSet = !json[QString("fields")].isNull() && m_fields_isValid;

    m_format_isValid = ::OpenAPI::fromJsonValue(m_format, json[QString("format")]);
    m_format_isSet = !json[QString("format")].isNull() && m_format_isValid;

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("name")]);
    m_name_isSet = !json[QString("name")].isNull() && m_name_isValid;

    m_page_num_isValid = ::OpenAPI::fromJsonValue(m_page_num, json[QString("pageNum")]);
    m_page_num_isSet = !json[QString("pageNum")].isNull() && m_page_num_isValid;

    m_proxy_isValid = ::OpenAPI::fromJsonValue(m_proxy, json[QString("proxy")]);
    m_proxy_isSet = !json[QString("proxy")].isNull() && m_proxy_isValid;

    m_type_isValid = ::OpenAPI::fromJsonValue(m_type, json[QString("type")]);
    m_type_isSet = !json[QString("type")].isNull() && m_type_isValid;

    m_url_isValid = ::OpenAPI::fromJsonValue(m_url, json[QString("url")]);
    m_url_isSet = !json[QString("url")].isNull() && m_url_isValid;
}

QString OAISerprequest::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAISerprequest::asJsonObject() const {
    QJsonObject obj;
    if (m_fields.size() > 0) {
        obj.insert(QString("fields"), ::OpenAPI::toJsonValue(m_fields));
    }
    if (m_format_isSet) {
        obj.insert(QString("format"), ::OpenAPI::toJsonValue(m_format));
    }
    if (m_name_isSet) {
        obj.insert(QString("name"), ::OpenAPI::toJsonValue(m_name));
    }
    if (m_page_num_isSet) {
        obj.insert(QString("pageNum"), ::OpenAPI::toJsonValue(m_page_num));
    }
    if (m_proxy_isSet) {
        obj.insert(QString("proxy"), ::OpenAPI::toJsonValue(m_proxy));
    }
    if (m_type_isSet) {
        obj.insert(QString("type"), ::OpenAPI::toJsonValue(m_type));
    }
    if (m_url_isSet) {
        obj.insert(QString("url"), ::OpenAPI::toJsonValue(m_url));
    }
    return obj;
}

QList<OAIField> OAISerprequest::getFields() const {
    return m_fields;
}
void OAISerprequest::setFields(const QList<OAIField> &fields) {
    m_fields = fields;
    m_fields_isSet = true;
}

bool OAISerprequest::is_fields_Set() const{
    return m_fields_isSet;
}

bool OAISerprequest::is_fields_Valid() const{
    return m_fields_isValid;
}

QString OAISerprequest::getFormat() const {
    return m_format;
}
void OAISerprequest::setFormat(const QString &format) {
    m_format = format;
    m_format_isSet = true;
}

bool OAISerprequest::is_format_Set() const{
    return m_format_isSet;
}

bool OAISerprequest::is_format_Valid() const{
    return m_format_isValid;
}

QString OAISerprequest::getName() const {
    return m_name;
}
void OAISerprequest::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAISerprequest::is_name_Set() const{
    return m_name_isSet;
}

bool OAISerprequest::is_name_Valid() const{
    return m_name_isValid;
}

qint32 OAISerprequest::getPageNum() const {
    return m_page_num;
}
void OAISerprequest::setPageNum(const qint32 &page_num) {
    m_page_num = page_num;
    m_page_num_isSet = true;
}

bool OAISerprequest::is_page_num_Set() const{
    return m_page_num_isSet;
}

bool OAISerprequest::is_page_num_Valid() const{
    return m_page_num_isValid;
}

QString OAISerprequest::getProxy() const {
    return m_proxy;
}
void OAISerprequest::setProxy(const QString &proxy) {
    m_proxy = proxy;
    m_proxy_isSet = true;
}

bool OAISerprequest::is_proxy_Set() const{
    return m_proxy_isSet;
}

bool OAISerprequest::is_proxy_Valid() const{
    return m_proxy_isValid;
}

QString OAISerprequest::getType() const {
    return m_type;
}
void OAISerprequest::setType(const QString &type) {
    m_type = type;
    m_type_isSet = true;
}

bool OAISerprequest::is_type_Set() const{
    return m_type_isSet;
}

bool OAISerprequest::is_type_Valid() const{
    return m_type_isValid;
}

QString OAISerprequest::getUrl() const {
    return m_url;
}
void OAISerprequest::setUrl(const QString &url) {
    m_url = url;
    m_url_isSet = true;
}

bool OAISerprequest::is_url_Set() const{
    return m_url_isSet;
}

bool OAISerprequest::is_url_Valid() const{
    return m_url_isValid;
}

bool OAISerprequest::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_fields.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_format_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_page_num_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_proxy_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_url_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAISerprequest::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_format_isValid && m_name_isValid && m_proxy_isValid && m_type_isValid && m_url_isValid && true;
}

} // namespace OpenAPI
