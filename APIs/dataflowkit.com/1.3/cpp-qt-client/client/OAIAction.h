/**
 * Dataflow Kit Web Scraper
 * Render Javascript driven pages, while we internally manage Headless Chrome and proxies for you.   - Build a custom web scraper with our Visual point-and-click toolkit. - Scrape the most popular Search engines result pages (SERP). - Convert web pages to PDF and capture screenshots. *** ### Authentication Dataflow Kit API require you to sign up for an API key in order to use the API.   The API key can be found in the [DFK Dashboard](https://account.dataflowkit.com) after _free registration_.  Pass a secret API Key to all API requests to the server as the `api_key` query parameter.  
 *
 * The version of the OpenAPI document: 1.3
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAIAction.h
 *
 * 
 */

#ifndef OAIAction_H
#define OAIAction_H

#include <QJsonObject>

#include "OAIClick.h"
#include "OAIDoubleClick.h"
#include "OAIExecute.h"
#include "OAIGetcontent.h"
#include "OAIInput.h"
#include "OAIJsclick.h"
#include "OAILoop____times.h"
#include "OAIPause.h"
#include "OAIScroll.h"
#include "OAISendKeys.h"
#include "OAISubmit.h"
#include "OAIWaitNotVisible.h"
#include "OAIWaitVisible.h"
#include <QList>
#include <QString>

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {

class OAIAction : public OAIObject {
public:
    OAIAction();
    OAIAction(QString json);
    ~OAIAction() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    bool isIgnoreIfNotPresent() const;
    void setIgnoreIfNotPresent(const bool &ignore_if_not_present);
    bool is_ignore_if_not_present_Set() const;
    bool is_ignore_if_not_present_Valid() const;

    QString getSelector() const;
    void setSelector(const QString &selector);
    bool is_selector_Set() const;
    bool is_selector_Valid() const;

    QString getValue() const;
    void setValue(const QString &value);
    bool is_value_Set() const;
    bool is_value_Valid() const;

    bool isSkipLastIteration() const;
    void setSkipLastIteration(const bool &skip_last_iteration);
    bool is_skip_last_iteration_Set() const;
    bool is_skip_last_iteration_Valid() const;

    QString getWaitDelay() const;
    void setWaitDelay(const QString &wait_delay);
    bool is_wait_delay_Set() const;
    bool is_wait_delay_Valid() const;

    QString getScript() const;
    void setScript(const QString &script);
    bool is_script_Set() const;
    bool is_script_Valid() const;

    QList<OAIAction> getActions() const;
    void setActions(const QList<OAIAction> &actions);
    bool is_actions_Set() const;
    bool is_actions_Valid() const;

    qint32 getTimes() const;
    void setTimes(const qint32 &times);
    bool is_times_Set() const;
    bool is_times_Valid() const;

    double getScrollByPixels() const;
    void setScrollByPixels(const double &scroll_by_pixels);
    bool is_scroll_by_pixels_Set() const;
    bool is_scroll_by_pixels_Valid() const;

    QString getScrollingElementSelector() const;
    void setScrollingElementSelector(const QString &scrolling_element_selector);
    bool is_scrolling_element_selector_Set() const;
    bool is_scrolling_element_selector_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    bool m_ignore_if_not_present;
    bool m_ignore_if_not_present_isSet;
    bool m_ignore_if_not_present_isValid;

    QString m_selector;
    bool m_selector_isSet;
    bool m_selector_isValid;

    QString m_value;
    bool m_value_isSet;
    bool m_value_isValid;

    bool m_skip_last_iteration;
    bool m_skip_last_iteration_isSet;
    bool m_skip_last_iteration_isValid;

    QString m_wait_delay;
    bool m_wait_delay_isSet;
    bool m_wait_delay_isValid;

    QString m_script;
    bool m_script_isSet;
    bool m_script_isValid;

    QList<OAIAction> m_actions;
    bool m_actions_isSet;
    bool m_actions_isValid;

    qint32 m_times;
    bool m_times_isSet;
    bool m_times_isValid;

    double m_scroll_by_pixels;
    bool m_scroll_by_pixels_isSet;
    bool m_scroll_by_pixels_isValid;

    QString m_scrolling_element_selector;
    bool m_scrolling_element_selector_isSet;
    bool m_scrolling_element_selector_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAIAction)

#endif // OAIAction_H
