/**
 * Dataflow Kit Web Scraper
 * Render Javascript driven pages, while we internally manage Headless Chrome and proxies for you.   - Build a custom web scraper with our Visual point-and-click toolkit. - Scrape the most popular Search engines result pages (SERP). - Convert web pages to PDF and capture screenshots. *** ### Authentication Dataflow Kit API require you to sign up for an API key in order to use the API.   The API key can be found in the [DFK Dashboard](https://account.dataflowkit.com) after _free registration_.  Pass a secret API Key to all API requests to the server as the `api_key` query parameter.  
 *
 * The version of the OpenAPI document: 1.3
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIParserequest.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIParserequest::OAIParserequest(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIParserequest::OAIParserequest() {
    this->initializeModel();
}

OAIParserequest::~OAIParserequest() {}

void OAIParserequest::initializeModel() {

    m_common_parent_isSet = false;
    m_common_parent_isValid = false;

    m_fields_isSet = false;
    m_fields_isValid = false;

    m_format_isSet = false;
    m_format_isValid = false;

    m_name_isSet = false;
    m_name_isValid = false;

    m_paginator_isSet = false;
    m_paginator_isValid = false;

    m_path_isSet = false;
    m_path_isValid = false;

    m_request_isSet = false;
    m_request_isValid = false;
}

void OAIParserequest::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIParserequest::fromJsonObject(QJsonObject json) {

    m_common_parent_isValid = ::OpenAPI::fromJsonValue(m_common_parent, json[QString("commonParent")]);
    m_common_parent_isSet = !json[QString("commonParent")].isNull() && m_common_parent_isValid;

    m_fields_isValid = ::OpenAPI::fromJsonValue(m_fields, json[QString("fields")]);
    m_fields_isSet = !json[QString("fields")].isNull() && m_fields_isValid;

    m_format_isValid = ::OpenAPI::fromJsonValue(m_format, json[QString("format")]);
    m_format_isSet = !json[QString("format")].isNull() && m_format_isValid;

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("name")]);
    m_name_isSet = !json[QString("name")].isNull() && m_name_isValid;

    m_paginator_isValid = ::OpenAPI::fromJsonValue(m_paginator, json[QString("paginator")]);
    m_paginator_isSet = !json[QString("paginator")].isNull() && m_paginator_isValid;

    m_path_isValid = ::OpenAPI::fromJsonValue(m_path, json[QString("path")]);
    m_path_isSet = !json[QString("path")].isNull() && m_path_isValid;

    m_request_isValid = ::OpenAPI::fromJsonValue(m_request, json[QString("request")]);
    m_request_isSet = !json[QString("request")].isNull() && m_request_isValid;
}

QString OAIParserequest::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIParserequest::asJsonObject() const {
    QJsonObject obj;
    if (m_common_parent_isSet) {
        obj.insert(QString("commonParent"), ::OpenAPI::toJsonValue(m_common_parent));
    }
    if (m_fields.size() > 0) {
        obj.insert(QString("fields"), ::OpenAPI::toJsonValue(m_fields));
    }
    if (m_format_isSet) {
        obj.insert(QString("format"), ::OpenAPI::toJsonValue(m_format));
    }
    if (m_name_isSet) {
        obj.insert(QString("name"), ::OpenAPI::toJsonValue(m_name));
    }
    if (m_paginator.isSet()) {
        obj.insert(QString("paginator"), ::OpenAPI::toJsonValue(m_paginator));
    }
    if (m_path_isSet) {
        obj.insert(QString("path"), ::OpenAPI::toJsonValue(m_path));
    }
    if (m_request.isSet()) {
        obj.insert(QString("request"), ::OpenAPI::toJsonValue(m_request));
    }
    return obj;
}

QString OAIParserequest::getCommonParent() const {
    return m_common_parent;
}
void OAIParserequest::setCommonParent(const QString &common_parent) {
    m_common_parent = common_parent;
    m_common_parent_isSet = true;
}

bool OAIParserequest::is_common_parent_Set() const{
    return m_common_parent_isSet;
}

bool OAIParserequest::is_common_parent_Valid() const{
    return m_common_parent_isValid;
}

QList<OAIField> OAIParserequest::getFields() const {
    return m_fields;
}
void OAIParserequest::setFields(const QList<OAIField> &fields) {
    m_fields = fields;
    m_fields_isSet = true;
}

bool OAIParserequest::is_fields_Set() const{
    return m_fields_isSet;
}

bool OAIParserequest::is_fields_Valid() const{
    return m_fields_isValid;
}

QString OAIParserequest::getFormat() const {
    return m_format;
}
void OAIParserequest::setFormat(const QString &format) {
    m_format = format;
    m_format_isSet = true;
}

bool OAIParserequest::is_format_Set() const{
    return m_format_isSet;
}

bool OAIParserequest::is_format_Valid() const{
    return m_format_isValid;
}

QString OAIParserequest::getName() const {
    return m_name;
}
void OAIParserequest::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAIParserequest::is_name_Set() const{
    return m_name_isSet;
}

bool OAIParserequest::is_name_Valid() const{
    return m_name_isValid;
}

OAIPaginator OAIParserequest::getPaginator() const {
    return m_paginator;
}
void OAIParserequest::setPaginator(const OAIPaginator &paginator) {
    m_paginator = paginator;
    m_paginator_isSet = true;
}

bool OAIParserequest::is_paginator_Set() const{
    return m_paginator_isSet;
}

bool OAIParserequest::is_paginator_Valid() const{
    return m_paginator_isValid;
}

bool OAIParserequest::isPath() const {
    return m_path;
}
void OAIParserequest::setPath(const bool &path) {
    m_path = path;
    m_path_isSet = true;
}

bool OAIParserequest::is_path_Set() const{
    return m_path_isSet;
}

bool OAIParserequest::is_path_Valid() const{
    return m_path_isValid;
}

OAIFetchrequest OAIParserequest::getRequest() const {
    return m_request;
}
void OAIParserequest::setRequest(const OAIFetchrequest &request) {
    m_request = request;
    m_request_isSet = true;
}

bool OAIParserequest::is_request_Set() const{
    return m_request_isSet;
}

bool OAIParserequest::is_request_Valid() const{
    return m_request_isValid;
}

bool OAIParserequest::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_common_parent_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_fields.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_format_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_paginator.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_path_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_request.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIParserequest::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_fields_isValid && m_format_isValid && m_name_isValid && true;
}

} // namespace OpenAPI
