/**
 * Dataflow Kit Web Scraper
 * Render Javascript driven pages, while we internally manage Headless Chrome and proxies for you.   - Build a custom web scraper with our Visual point-and-click toolkit. - Scrape the most popular Search engines result pages (SERP). - Convert web pages to PDF and capture screenshots. *** ### Authentication Dataflow Kit API require you to sign up for an API key in order to use the API.   The API key can be found in the [DFK Dashboard](https://account.dataflowkit.com) after _free registration_.  Pass a secret API Key to all API requests to the server as the `api_key` query parameter.  
 *
 * The version of the OpenAPI document: 1.3
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAIUrl2screenshotrequest.h
 *
 * 
 */

#ifndef OAIUrl2screenshotrequest_H
#define OAIUrl2screenshotrequest_H

#include <QJsonObject>

#include "OAIAction.h"
#include "OAIInitialCookie.h"
#include <QList>
#include <QString>

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {
class OAIAction;
class OAIInitialCookie;

class OAIUrl2screenshotrequest : public OAIObject {
public:
    OAIUrl2screenshotrequest();
    OAIUrl2screenshotrequest(QString json);
    ~OAIUrl2screenshotrequest() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    QList<OAIAction> getActions() const;
    void setActions(const QList<OAIAction> &actions);
    bool is_actions_Set() const;
    bool is_actions_Valid() const;

    QString getClipSelector() const;
    void setClipSelector(const QString &clip_selector);
    bool is_clip_selector_Set() const;
    bool is_clip_selector_Valid() const;

    QString getFormat() const;
    void setFormat(const QString &format);
    bool is_format_Set() const;
    bool is_format_Valid() const;

    bool isFullPage() const;
    void setFullPage(const bool &full_page);
    bool is_full_page_Set() const;
    bool is_full_page_Valid() const;

    qint32 getHeight() const;
    void setHeight(const qint32 &height);
    bool is_height_Set() const;
    bool is_height_Valid() const;

    bool isIgnoreHttpStatusErrCodes() const;
    void setIgnoreHttpStatusErrCodes(const bool &ignore_http_status_err_codes);
    bool is_ignore_http_status_err_codes_Set() const;
    bool is_ignore_http_status_err_codes_Valid() const;

    QList<OAIInitialCookie> getInitialCookies() const;
    void setInitialCookies(const QList<OAIInitialCookie> &initial_cookies);
    bool is_initial_cookies_Set() const;
    bool is_initial_cookies_Valid() const;

    qint32 getOffsetx() const;
    void setOffsetx(const qint32 &offsetx);
    bool is_offsetx_Set() const;
    bool is_offsetx_Valid() const;

    qint32 getOffsety() const;
    void setOffsety(const qint32 &offsety);
    bool is_offsety_Set() const;
    bool is_offsety_Valid() const;

    QString getOutput() const;
    void setOutput(const QString &output);
    bool is_output_Set() const;
    bool is_output_Valid() const;

    bool isPrintBackground() const;
    void setPrintBackground(const bool &print_background);
    bool is_print_background_Set() const;
    bool is_print_background_Valid() const;

    QString getProxy() const;
    void setProxy(const QString &proxy);
    bool is_proxy_Set() const;
    bool is_proxy_Valid() const;

    qint32 getQuality() const;
    void setQuality(const qint32 &quality);
    bool is_quality_Set() const;
    bool is_quality_Valid() const;

    double getScale() const;
    void setScale(const double &scale);
    bool is_scale_Set() const;
    bool is_scale_Valid() const;

    QString getUrl() const;
    void setUrl(const QString &url);
    bool is_url_Set() const;
    bool is_url_Valid() const;

    double getWaitDelay() const;
    void setWaitDelay(const double &wait_delay);
    bool is_wait_delay_Set() const;
    bool is_wait_delay_Valid() const;

    qint32 getWidth() const;
    void setWidth(const qint32 &width);
    bool is_width_Set() const;
    bool is_width_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    QList<OAIAction> m_actions;
    bool m_actions_isSet;
    bool m_actions_isValid;

    QString m_clip_selector;
    bool m_clip_selector_isSet;
    bool m_clip_selector_isValid;

    QString m_format;
    bool m_format_isSet;
    bool m_format_isValid;

    bool m_full_page;
    bool m_full_page_isSet;
    bool m_full_page_isValid;

    qint32 m_height;
    bool m_height_isSet;
    bool m_height_isValid;

    bool m_ignore_http_status_err_codes;
    bool m_ignore_http_status_err_codes_isSet;
    bool m_ignore_http_status_err_codes_isValid;

    QList<OAIInitialCookie> m_initial_cookies;
    bool m_initial_cookies_isSet;
    bool m_initial_cookies_isValid;

    qint32 m_offsetx;
    bool m_offsetx_isSet;
    bool m_offsetx_isValid;

    qint32 m_offsety;
    bool m_offsety_isSet;
    bool m_offsety_isValid;

    QString m_output;
    bool m_output_isSet;
    bool m_output_isValid;

    bool m_print_background;
    bool m_print_background_isSet;
    bool m_print_background_isValid;

    QString m_proxy;
    bool m_proxy_isSet;
    bool m_proxy_isValid;

    qint32 m_quality;
    bool m_quality_isSet;
    bool m_quality_isValid;

    double m_scale;
    bool m_scale_isSet;
    bool m_scale_isValid;

    QString m_url;
    bool m_url_isSet;
    bool m_url_isValid;

    double m_wait_delay;
    bool m_wait_delay_isSet;
    bool m_wait_delay_isValid;

    qint32 m_width;
    bool m_width_isSet;
    bool m_width_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAIUrl2screenshotrequest)

#endif // OAIUrl2screenshotrequest_H
