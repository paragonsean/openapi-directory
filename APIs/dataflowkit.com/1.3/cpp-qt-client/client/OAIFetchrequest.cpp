/**
 * Dataflow Kit Web Scraper
 * Render Javascript driven pages, while we internally manage Headless Chrome and proxies for you.   - Build a custom web scraper with our Visual point-and-click toolkit. - Scrape the most popular Search engines result pages (SERP). - Convert web pages to PDF and capture screenshots. *** ### Authentication Dataflow Kit API require you to sign up for an API key in order to use the API.   The API key can be found in the [DFK Dashboard](https://account.dataflowkit.com) after _free registration_.  Pass a secret API Key to all API requests to the server as the `api_key` query parameter.  
 *
 * The version of the OpenAPI document: 1.3
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIFetchrequest.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIFetchrequest::OAIFetchrequest(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIFetchrequest::OAIFetchrequest() {
    this->initializeModel();
}

OAIFetchrequest::~OAIFetchrequest() {}

void OAIFetchrequest::initializeModel() {

    m_actions_isSet = false;
    m_actions_isValid = false;

    m_ignore_http_status_err_codes_isSet = false;
    m_ignore_http_status_err_codes_isValid = false;

    m_initial_cookies_isSet = false;
    m_initial_cookies_isValid = false;

    m_output_isSet = false;
    m_output_isValid = false;

    m_proxy_isSet = false;
    m_proxy_isValid = false;

    m_type_isSet = false;
    m_type_isValid = false;

    m_url_isSet = false;
    m_url_isValid = false;

    m_wait_delay_isSet = false;
    m_wait_delay_isValid = false;
}

void OAIFetchrequest::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIFetchrequest::fromJsonObject(QJsonObject json) {

    m_actions_isValid = ::OpenAPI::fromJsonValue(m_actions, json[QString("actions")]);
    m_actions_isSet = !json[QString("actions")].isNull() && m_actions_isValid;

    m_ignore_http_status_err_codes_isValid = ::OpenAPI::fromJsonValue(m_ignore_http_status_err_codes, json[QString("ignoreHTTPStatusErrCodes")]);
    m_ignore_http_status_err_codes_isSet = !json[QString("ignoreHTTPStatusErrCodes")].isNull() && m_ignore_http_status_err_codes_isValid;

    m_initial_cookies_isValid = ::OpenAPI::fromJsonValue(m_initial_cookies, json[QString("initialCookies")]);
    m_initial_cookies_isSet = !json[QString("initialCookies")].isNull() && m_initial_cookies_isValid;

    m_output_isValid = ::OpenAPI::fromJsonValue(m_output, json[QString("output")]);
    m_output_isSet = !json[QString("output")].isNull() && m_output_isValid;

    m_proxy_isValid = ::OpenAPI::fromJsonValue(m_proxy, json[QString("proxy")]);
    m_proxy_isSet = !json[QString("proxy")].isNull() && m_proxy_isValid;

    m_type_isValid = ::OpenAPI::fromJsonValue(m_type, json[QString("type")]);
    m_type_isSet = !json[QString("type")].isNull() && m_type_isValid;

    m_url_isValid = ::OpenAPI::fromJsonValue(m_url, json[QString("url")]);
    m_url_isSet = !json[QString("url")].isNull() && m_url_isValid;

    m_wait_delay_isValid = ::OpenAPI::fromJsonValue(m_wait_delay, json[QString("waitDelay")]);
    m_wait_delay_isSet = !json[QString("waitDelay")].isNull() && m_wait_delay_isValid;
}

QString OAIFetchrequest::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIFetchrequest::asJsonObject() const {
    QJsonObject obj;
    if (m_actions.size() > 0) {
        obj.insert(QString("actions"), ::OpenAPI::toJsonValue(m_actions));
    }
    if (m_ignore_http_status_err_codes_isSet) {
        obj.insert(QString("ignoreHTTPStatusErrCodes"), ::OpenAPI::toJsonValue(m_ignore_http_status_err_codes));
    }
    if (m_initial_cookies.size() > 0) {
        obj.insert(QString("initialCookies"), ::OpenAPI::toJsonValue(m_initial_cookies));
    }
    if (m_output_isSet) {
        obj.insert(QString("output"), ::OpenAPI::toJsonValue(m_output));
    }
    if (m_proxy_isSet) {
        obj.insert(QString("proxy"), ::OpenAPI::toJsonValue(m_proxy));
    }
    if (m_type_isSet) {
        obj.insert(QString("type"), ::OpenAPI::toJsonValue(m_type));
    }
    if (m_url_isSet) {
        obj.insert(QString("url"), ::OpenAPI::toJsonValue(m_url));
    }
    if (m_wait_delay_isSet) {
        obj.insert(QString("waitDelay"), ::OpenAPI::toJsonValue(m_wait_delay));
    }
    return obj;
}

QList<OAIAction> OAIFetchrequest::getActions() const {
    return m_actions;
}
void OAIFetchrequest::setActions(const QList<OAIAction> &actions) {
    m_actions = actions;
    m_actions_isSet = true;
}

bool OAIFetchrequest::is_actions_Set() const{
    return m_actions_isSet;
}

bool OAIFetchrequest::is_actions_Valid() const{
    return m_actions_isValid;
}

bool OAIFetchrequest::isIgnoreHttpStatusErrCodes() const {
    return m_ignore_http_status_err_codes;
}
void OAIFetchrequest::setIgnoreHttpStatusErrCodes(const bool &ignore_http_status_err_codes) {
    m_ignore_http_status_err_codes = ignore_http_status_err_codes;
    m_ignore_http_status_err_codes_isSet = true;
}

bool OAIFetchrequest::is_ignore_http_status_err_codes_Set() const{
    return m_ignore_http_status_err_codes_isSet;
}

bool OAIFetchrequest::is_ignore_http_status_err_codes_Valid() const{
    return m_ignore_http_status_err_codes_isValid;
}

QList<OAIInitialCookie> OAIFetchrequest::getInitialCookies() const {
    return m_initial_cookies;
}
void OAIFetchrequest::setInitialCookies(const QList<OAIInitialCookie> &initial_cookies) {
    m_initial_cookies = initial_cookies;
    m_initial_cookies_isSet = true;
}

bool OAIFetchrequest::is_initial_cookies_Set() const{
    return m_initial_cookies_isSet;
}

bool OAIFetchrequest::is_initial_cookies_Valid() const{
    return m_initial_cookies_isValid;
}

QString OAIFetchrequest::getOutput() const {
    return m_output;
}
void OAIFetchrequest::setOutput(const QString &output) {
    m_output = output;
    m_output_isSet = true;
}

bool OAIFetchrequest::is_output_Set() const{
    return m_output_isSet;
}

bool OAIFetchrequest::is_output_Valid() const{
    return m_output_isValid;
}

QString OAIFetchrequest::getProxy() const {
    return m_proxy;
}
void OAIFetchrequest::setProxy(const QString &proxy) {
    m_proxy = proxy;
    m_proxy_isSet = true;
}

bool OAIFetchrequest::is_proxy_Set() const{
    return m_proxy_isSet;
}

bool OAIFetchrequest::is_proxy_Valid() const{
    return m_proxy_isValid;
}

QString OAIFetchrequest::getType() const {
    return m_type;
}
void OAIFetchrequest::setType(const QString &type) {
    m_type = type;
    m_type_isSet = true;
}

bool OAIFetchrequest::is_type_Set() const{
    return m_type_isSet;
}

bool OAIFetchrequest::is_type_Valid() const{
    return m_type_isValid;
}

QString OAIFetchrequest::getUrl() const {
    return m_url;
}
void OAIFetchrequest::setUrl(const QString &url) {
    m_url = url;
    m_url_isSet = true;
}

bool OAIFetchrequest::is_url_Set() const{
    return m_url_isSet;
}

bool OAIFetchrequest::is_url_Valid() const{
    return m_url_isValid;
}

double OAIFetchrequest::getWaitDelay() const {
    return m_wait_delay;
}
void OAIFetchrequest::setWaitDelay(const double &wait_delay) {
    m_wait_delay = wait_delay;
    m_wait_delay_isSet = true;
}

bool OAIFetchrequest::is_wait_delay_Set() const{
    return m_wait_delay_isSet;
}

bool OAIFetchrequest::is_wait_delay_Valid() const{
    return m_wait_delay_isValid;
}

bool OAIFetchrequest::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_actions.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_ignore_http_status_err_codes_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_initial_cookies.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_output_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_proxy_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_url_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_wait_delay_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIFetchrequest::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_type_isValid && m_url_isValid && true;
}

} // namespace OpenAPI
