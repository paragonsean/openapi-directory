/**
 * Dataflow Kit Web Scraper
 * Render Javascript driven pages, while we internally manage Headless Chrome and proxies for you.   - Build a custom web scraper with our Visual point-and-click toolkit. - Scrape the most popular Search engines result pages (SERP). - Convert web pages to PDF and capture screenshots. *** ### Authentication Dataflow Kit API require you to sign up for an API key in order to use the API.   The API key can be found in the [DFK Dashboard](https://account.dataflowkit.com) after _free registration_.  Pass a secret API Key to all API requests to the server as the `api_key` query parameter.  
 *
 * The version of the OpenAPI document: 1.3
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIInitialCookie.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIInitialCookie::OAIInitialCookie(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIInitialCookie::OAIInitialCookie() {
    this->initializeModel();
}

OAIInitialCookie::~OAIInitialCookie() {}

void OAIInitialCookie::initializeModel() {

    m_domain_isSet = false;
    m_domain_isValid = false;

    m_expiration_date_isSet = false;
    m_expiration_date_isValid = false;

    m_host_only_isSet = false;
    m_host_only_isValid = false;

    m_http_only_isSet = false;
    m_http_only_isValid = false;

    m_id_isSet = false;
    m_id_isValid = false;

    m_name_isSet = false;
    m_name_isValid = false;

    m_path_isSet = false;
    m_path_isValid = false;

    m_same_site_isSet = false;
    m_same_site_isValid = false;

    m_secure_isSet = false;
    m_secure_isValid = false;

    m_session_isSet = false;
    m_session_isValid = false;

    m_store_id_isSet = false;
    m_store_id_isValid = false;

    m_value_isSet = false;
    m_value_isValid = false;
}

void OAIInitialCookie::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIInitialCookie::fromJsonObject(QJsonObject json) {

    m_domain_isValid = ::OpenAPI::fromJsonValue(m_domain, json[QString("domain")]);
    m_domain_isSet = !json[QString("domain")].isNull() && m_domain_isValid;

    m_expiration_date_isValid = ::OpenAPI::fromJsonValue(m_expiration_date, json[QString("expirationDate")]);
    m_expiration_date_isSet = !json[QString("expirationDate")].isNull() && m_expiration_date_isValid;

    m_host_only_isValid = ::OpenAPI::fromJsonValue(m_host_only, json[QString("hostOnly")]);
    m_host_only_isSet = !json[QString("hostOnly")].isNull() && m_host_only_isValid;

    m_http_only_isValid = ::OpenAPI::fromJsonValue(m_http_only, json[QString("httpOnly")]);
    m_http_only_isSet = !json[QString("httpOnly")].isNull() && m_http_only_isValid;

    m_id_isValid = ::OpenAPI::fromJsonValue(m_id, json[QString("id")]);
    m_id_isSet = !json[QString("id")].isNull() && m_id_isValid;

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("name")]);
    m_name_isSet = !json[QString("name")].isNull() && m_name_isValid;

    m_path_isValid = ::OpenAPI::fromJsonValue(m_path, json[QString("path")]);
    m_path_isSet = !json[QString("path")].isNull() && m_path_isValid;

    m_same_site_isValid = ::OpenAPI::fromJsonValue(m_same_site, json[QString("sameSite")]);
    m_same_site_isSet = !json[QString("sameSite")].isNull() && m_same_site_isValid;

    m_secure_isValid = ::OpenAPI::fromJsonValue(m_secure, json[QString("secure")]);
    m_secure_isSet = !json[QString("secure")].isNull() && m_secure_isValid;

    m_session_isValid = ::OpenAPI::fromJsonValue(m_session, json[QString("session")]);
    m_session_isSet = !json[QString("session")].isNull() && m_session_isValid;

    m_store_id_isValid = ::OpenAPI::fromJsonValue(m_store_id, json[QString("storeID")]);
    m_store_id_isSet = !json[QString("storeID")].isNull() && m_store_id_isValid;

    m_value_isValid = ::OpenAPI::fromJsonValue(m_value, json[QString("value")]);
    m_value_isSet = !json[QString("value")].isNull() && m_value_isValid;
}

QString OAIInitialCookie::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIInitialCookie::asJsonObject() const {
    QJsonObject obj;
    if (m_domain_isSet) {
        obj.insert(QString("domain"), ::OpenAPI::toJsonValue(m_domain));
    }
    if (m_expiration_date_isSet) {
        obj.insert(QString("expirationDate"), ::OpenAPI::toJsonValue(m_expiration_date));
    }
    if (m_host_only_isSet) {
        obj.insert(QString("hostOnly"), ::OpenAPI::toJsonValue(m_host_only));
    }
    if (m_http_only_isSet) {
        obj.insert(QString("httpOnly"), ::OpenAPI::toJsonValue(m_http_only));
    }
    if (m_id_isSet) {
        obj.insert(QString("id"), ::OpenAPI::toJsonValue(m_id));
    }
    if (m_name_isSet) {
        obj.insert(QString("name"), ::OpenAPI::toJsonValue(m_name));
    }
    if (m_path_isSet) {
        obj.insert(QString("path"), ::OpenAPI::toJsonValue(m_path));
    }
    if (m_same_site_isSet) {
        obj.insert(QString("sameSite"), ::OpenAPI::toJsonValue(m_same_site));
    }
    if (m_secure_isSet) {
        obj.insert(QString("secure"), ::OpenAPI::toJsonValue(m_secure));
    }
    if (m_session_isSet) {
        obj.insert(QString("session"), ::OpenAPI::toJsonValue(m_session));
    }
    if (m_store_id_isSet) {
        obj.insert(QString("storeID"), ::OpenAPI::toJsonValue(m_store_id));
    }
    if (m_value_isSet) {
        obj.insert(QString("value"), ::OpenAPI::toJsonValue(m_value));
    }
    return obj;
}

QString OAIInitialCookie::getDomain() const {
    return m_domain;
}
void OAIInitialCookie::setDomain(const QString &domain) {
    m_domain = domain;
    m_domain_isSet = true;
}

bool OAIInitialCookie::is_domain_Set() const{
    return m_domain_isSet;
}

bool OAIInitialCookie::is_domain_Valid() const{
    return m_domain_isValid;
}

double OAIInitialCookie::getExpirationDate() const {
    return m_expiration_date;
}
void OAIInitialCookie::setExpirationDate(const double &expiration_date) {
    m_expiration_date = expiration_date;
    m_expiration_date_isSet = true;
}

bool OAIInitialCookie::is_expiration_date_Set() const{
    return m_expiration_date_isSet;
}

bool OAIInitialCookie::is_expiration_date_Valid() const{
    return m_expiration_date_isValid;
}

bool OAIInitialCookie::isHostOnly() const {
    return m_host_only;
}
void OAIInitialCookie::setHostOnly(const bool &host_only) {
    m_host_only = host_only;
    m_host_only_isSet = true;
}

bool OAIInitialCookie::is_host_only_Set() const{
    return m_host_only_isSet;
}

bool OAIInitialCookie::is_host_only_Valid() const{
    return m_host_only_isValid;
}

bool OAIInitialCookie::isHttpOnly() const {
    return m_http_only;
}
void OAIInitialCookie::setHttpOnly(const bool &http_only) {
    m_http_only = http_only;
    m_http_only_isSet = true;
}

bool OAIInitialCookie::is_http_only_Set() const{
    return m_http_only_isSet;
}

bool OAIInitialCookie::is_http_only_Valid() const{
    return m_http_only_isValid;
}

double OAIInitialCookie::getId() const {
    return m_id;
}
void OAIInitialCookie::setId(const double &id) {
    m_id = id;
    m_id_isSet = true;
}

bool OAIInitialCookie::is_id_Set() const{
    return m_id_isSet;
}

bool OAIInitialCookie::is_id_Valid() const{
    return m_id_isValid;
}

QString OAIInitialCookie::getName() const {
    return m_name;
}
void OAIInitialCookie::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAIInitialCookie::is_name_Set() const{
    return m_name_isSet;
}

bool OAIInitialCookie::is_name_Valid() const{
    return m_name_isValid;
}

QString OAIInitialCookie::getPath() const {
    return m_path;
}
void OAIInitialCookie::setPath(const QString &path) {
    m_path = path;
    m_path_isSet = true;
}

bool OAIInitialCookie::is_path_Set() const{
    return m_path_isSet;
}

bool OAIInitialCookie::is_path_Valid() const{
    return m_path_isValid;
}

QString OAIInitialCookie::getSameSite() const {
    return m_same_site;
}
void OAIInitialCookie::setSameSite(const QString &same_site) {
    m_same_site = same_site;
    m_same_site_isSet = true;
}

bool OAIInitialCookie::is_same_site_Set() const{
    return m_same_site_isSet;
}

bool OAIInitialCookie::is_same_site_Valid() const{
    return m_same_site_isValid;
}

bool OAIInitialCookie::isSecure() const {
    return m_secure;
}
void OAIInitialCookie::setSecure(const bool &secure) {
    m_secure = secure;
    m_secure_isSet = true;
}

bool OAIInitialCookie::is_secure_Set() const{
    return m_secure_isSet;
}

bool OAIInitialCookie::is_secure_Valid() const{
    return m_secure_isValid;
}

bool OAIInitialCookie::isSession() const {
    return m_session;
}
void OAIInitialCookie::setSession(const bool &session) {
    m_session = session;
    m_session_isSet = true;
}

bool OAIInitialCookie::is_session_Set() const{
    return m_session_isSet;
}

bool OAIInitialCookie::is_session_Valid() const{
    return m_session_isValid;
}

QString OAIInitialCookie::getStoreId() const {
    return m_store_id;
}
void OAIInitialCookie::setStoreId(const QString &store_id) {
    m_store_id = store_id;
    m_store_id_isSet = true;
}

bool OAIInitialCookie::is_store_id_Set() const{
    return m_store_id_isSet;
}

bool OAIInitialCookie::is_store_id_Valid() const{
    return m_store_id_isValid;
}

QString OAIInitialCookie::getValue() const {
    return m_value;
}
void OAIInitialCookie::setValue(const QString &value) {
    m_value = value;
    m_value_isSet = true;
}

bool OAIInitialCookie::is_value_Set() const{
    return m_value_isSet;
}

bool OAIInitialCookie::is_value_Valid() const{
    return m_value_isValid;
}

bool OAIInitialCookie::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_domain_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_expiration_date_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_host_only_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_http_only_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_path_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_same_site_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_secure_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_session_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_store_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_value_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIInitialCookie::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
