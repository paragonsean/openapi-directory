/**
 * Dataflow Kit Web Scraper
 * Render Javascript driven pages, while we internally manage Headless Chrome and proxies for you.   - Build a custom web scraper with our Visual point-and-click toolkit. - Scrape the most popular Search engines result pages (SERP). - Convert web pages to PDF and capture screenshots. *** ### Authentication Dataflow Kit API require you to sign up for an API key in order to use the API.   The API key can be found in the [DFK Dashboard](https://account.dataflowkit.com) after _free registration_.  Pass a secret API Key to all API requests to the server as the `api_key` query parameter.  
 *
 * The version of the OpenAPI document: 1.3
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAIInitialCookie.h
 *
 * InitialCookie structure keep cookies that optionally can be passed to the new fetcher crawl a website that requires a login. Generate Cookies array with EditThisCookie chrome extension.
 */

#ifndef OAIInitialCookie_H
#define OAIInitialCookie_H

#include <QJsonObject>

#include <QString>

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {

class OAIInitialCookie : public OAIObject {
public:
    OAIInitialCookie();
    OAIInitialCookie(QString json);
    ~OAIInitialCookie() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    QString getDomain() const;
    void setDomain(const QString &domain);
    bool is_domain_Set() const;
    bool is_domain_Valid() const;

    double getExpirationDate() const;
    void setExpirationDate(const double &expiration_date);
    bool is_expiration_date_Set() const;
    bool is_expiration_date_Valid() const;

    bool isHostOnly() const;
    void setHostOnly(const bool &host_only);
    bool is_host_only_Set() const;
    bool is_host_only_Valid() const;

    bool isHttpOnly() const;
    void setHttpOnly(const bool &http_only);
    bool is_http_only_Set() const;
    bool is_http_only_Valid() const;

    double getId() const;
    void setId(const double &id);
    bool is_id_Set() const;
    bool is_id_Valid() const;

    QString getName() const;
    void setName(const QString &name);
    bool is_name_Set() const;
    bool is_name_Valid() const;

    QString getPath() const;
    void setPath(const QString &path);
    bool is_path_Set() const;
    bool is_path_Valid() const;

    QString getSameSite() const;
    void setSameSite(const QString &same_site);
    bool is_same_site_Set() const;
    bool is_same_site_Valid() const;

    bool isSecure() const;
    void setSecure(const bool &secure);
    bool is_secure_Set() const;
    bool is_secure_Valid() const;

    bool isSession() const;
    void setSession(const bool &session);
    bool is_session_Set() const;
    bool is_session_Valid() const;

    QString getStoreId() const;
    void setStoreId(const QString &store_id);
    bool is_store_id_Set() const;
    bool is_store_id_Valid() const;

    QString getValue() const;
    void setValue(const QString &value);
    bool is_value_Set() const;
    bool is_value_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    QString m_domain;
    bool m_domain_isSet;
    bool m_domain_isValid;

    double m_expiration_date;
    bool m_expiration_date_isSet;
    bool m_expiration_date_isValid;

    bool m_host_only;
    bool m_host_only_isSet;
    bool m_host_only_isValid;

    bool m_http_only;
    bool m_http_only_isSet;
    bool m_http_only_isValid;

    double m_id;
    bool m_id_isSet;
    bool m_id_isValid;

    QString m_name;
    bool m_name_isSet;
    bool m_name_isValid;

    QString m_path;
    bool m_path_isSet;
    bool m_path_isValid;

    QString m_same_site;
    bool m_same_site_isSet;
    bool m_same_site_isValid;

    bool m_secure;
    bool m_secure_isSet;
    bool m_secure_isValid;

    bool m_session;
    bool m_session_isSet;
    bool m_session_isValid;

    QString m_store_id;
    bool m_store_id_isSet;
    bool m_store_id_isValid;

    QString m_value;
    bool m_value_isSet;
    bool m_value_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAIInitialCookie)

#endif // OAIInitialCookie_H
