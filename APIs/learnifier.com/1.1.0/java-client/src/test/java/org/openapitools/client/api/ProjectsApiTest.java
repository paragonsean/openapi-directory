/*
 * Learnifier
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiException;
import org.openapitools.client.model.ActivationError;
import org.openapitools.client.model.AddParticipant;
import org.openapitools.client.model.AddProject;
import java.math.BigDecimal;
import org.openapitools.client.model.Error;
import org.openapitools.client.model.LoginLink;
import org.openapitools.client.model.Participation;
import org.openapitools.client.model.Project;
import org.openapitools.client.model.ProjectTeamMember;
import java.net.URI;
import org.openapitools.client.model.UpdateProject;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for ProjectsApi
 */
@Disabled
public class ProjectsApiTest {

    private final ProjectsApi api = new ProjectsApi();

    /**
     * Gets Organization Unit by external id
     *
     * Gets an Organization Unit by external id
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void extprojectGetTest() throws ApiException {
        String extid = null;
        Project response = api.extprojectGet(extid);
        // TODO: test validations
    }

    /**
     * Organization Unit Projects
     *
     * Returns the available projects for the organization unit 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void orgunitsOrgidProjectsGetTest() throws ApiException {
        BigDecimal orgid = null;
        List<Project> response = api.orgunitsOrgidProjectsGet(orgid);
        // TODO: test validations
    }

    /**
     * Create project
     *
     * Creates a new project 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void orgunitsOrgidProjectsPostTest() throws ApiException {
        Integer orgid = null;
        AddProject body = null;
        Project response = api.orgunitsOrgidProjectsPost(orgid, body);
        // TODO: test validations
    }

    /**
     * Deletes the project
     *
     * Deletes the project. The project can only be deleted if the project do not contain any participants. 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void orgunitsOrgidProjectsProjectidDeleteTest() throws ApiException {
        Integer orgid = null;
        Integer projectid = null;
        api.orgunitsOrgidProjectsProjectidDelete(orgid, projectid);
        // TODO: test validations
    }

    /**
     * Project information
     *
     * Returns project information 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void orgunitsOrgidProjectsProjectidGetTest() throws ApiException {
        Integer orgid = null;
        Integer projectid = null;
        Project response = api.orgunitsOrgidProjectsProjectidGet(orgid, projectid);
        // TODO: test validations
    }

    /**
     * Project participants
     *
     * Returns project participants 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void orgunitsOrgidProjectsProjectidParticipantsGetTest() throws ApiException {
        Integer orgid = null;
        Integer projectid = null;
        List<Participation> response = api.orgunitsOrgidProjectsProjectidParticipantsGet(orgid, projectid);
        // TODO: test validations
    }

    /**
     * Activate participant
     *
     * Activates a participant so that it can be used 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void orgunitsOrgidProjectsProjectidParticipantsParticipantIdActivatePostTest() throws ApiException {
        Integer orgid = null;
        Integer projectid = null;
        Integer participantId = null;
        api.orgunitsOrgidProjectsProjectidParticipantsParticipantIdActivatePost(orgid, projectid, participantId);
        // TODO: test validations
    }

    /**
     * Deletes a participant
     *
     * Deletes a participant. The user itself will still remain but any state related to the project will be deleted. It might not be possible due to constraints from the products in the project to delete the participant. However this can only be determined at the time of the delete. If a delete fails the participant will have their inError flag set. 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void orgunitsOrgidProjectsProjectidParticipantsParticipantIdDeleteTest() throws ApiException {
        Integer orgid = null;
        Integer projectid = null;
        Integer participantId = null;
        api.orgunitsOrgidProjectsProjectidParticipantsParticipantIdDelete(orgid, projectid, participantId);
        // TODO: test validations
    }

    /**
     * Participant login link
     *
     * Returns a single sign on link for the participant. The link is only usable once and should be used directly. The link expires after a few minutes.  This operation requires the *login link* permission. 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void orgunitsOrgidProjectsProjectidParticipantsParticipantIdLoginlinkPostTest() throws ApiException {
        Integer orgid = null;
        Integer projectid = null;
        Integer participantId = null;
        LoginLink response = api.orgunitsOrgidProjectsProjectidParticipantsParticipantIdLoginlinkPost(orgid, projectid, participantId);
        // TODO: test validations
    }

    /**
     * Add participant
     *
     * Add a user to the project. Participant information is created for the user. In the body object, only one of either email or userid must be specified. The participant needs to be activated before it the user can access it. 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void orgunitsOrgidProjectsProjectidParticipantsPostTest() throws ApiException {
        Integer orgid = null;
        Integer projectid = null;
        AddParticipant body = null;
        api.orgunitsOrgidProjectsProjectidParticipantsPost(orgid, projectid, body);
        // TODO: test validations
    }

    /**
     * Update project information
     *
     * Updates information about a project. Values are only updated if the fields are specified in the input 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void orgunitsOrgidProjectsProjectidPatchTest() throws ApiException {
        Integer orgid = null;
        Integer projectid = null;
        UpdateProject body = null;
        Project response = api.orgunitsOrgidProjectsProjectidPatch(orgid, projectid, body);
        // TODO: test validations
    }

    /**
     * Project team members
     *
     * Returns the project team members. A team member is a .... 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void orgunitsOrgidProjectsProjectidTeammembersGetTest() throws ApiException {
        Integer orgid = null;
        Integer projectid = null;
        List<ProjectTeamMember> response = api.orgunitsOrgidProjectsProjectidTeammembersGet(orgid, projectid);
        // TODO: test validations
    }

}
