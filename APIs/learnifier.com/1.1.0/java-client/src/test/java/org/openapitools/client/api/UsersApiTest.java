/*
 * Learnifier
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiException;
import org.openapitools.client.model.AddUser;
import org.openapitools.client.model.AddUserResponse;
import org.openapitools.client.model.Error;
import org.openapitools.client.model.Participation;
import java.util.UUID;
import org.openapitools.client.model.User;
import org.openapitools.client.model.UserParticipationInfo;
import org.openapitools.client.model.UserWithPermissions;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for UsersApi
 */
@Disabled
public class UsersApiTest {

    private final UsersApi api = new UsersApi();

    /**
     * Gets a participation by external id
     *
     * Gets a participation by external id.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void extparticipationGetTest() throws ApiException {
        String extid = null;
        Participation response = api.extparticipationGet(extid);
        // TODO: test validations
    }

    /**
     * Gets a user by external id
     *
     * Gets a user by external id.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void extuserGetTest() throws ApiException {
        String extid = null;
        User response = api.extuserGet(extid);
        // TODO: test validations
    }

    /**
     * Lists all users
     *
     * Lists all users. Only api callers that have full access can call this method.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void usersGetTest() throws ApiException {
        Integer limit = null;
        Integer offset = null;
        List<UserWithPermissions> response = api.usersGet(limit, offset);
        // TODO: test validations
    }

    /**
     * Adds a user
     *
     * Adds a user. No two users can have the same email address. Email is saved WITH case but compared regardless of case. Email can be changed for a user assuming it doesn&#39;t cause a conflict.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void usersPostTest() throws ApiException {
        AddUser body = null;
        AddUserResponse response = api.usersPost(body);
        // TODO: test validations
    }

    /**
     * User information
     *
     * Returns information about a user 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void usersUseridGetTest() throws ApiException {
        String userid = null;
        User response = api.usersUseridGet(userid);
        // TODO: test validations
    }

    /**
     * Updates user information
     *
     * Updates a user. All values that have a key defined in the input will be set. So if a value should not be updated omit it totally from the input, otherwise it will be unset.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void usersUseridPatchTest() throws ApiException {
        UUID userid = null;
        AddUser body = null;
        api.usersUseridPatch(userid, body);
        // TODO: test validations
    }

    /**
     * User profile picture
     *
     * Returns a thumbnail picture of the user. This can either be a selected picture or an auto generated image. This method doesn&#39;t require a full sign in. The api key is sufficient. The image is square and is likely, but not necessary, to be in 128x128 PNG format. However the format will always be either PNG, JPEG or GIF. 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void usersUseridPickeyAPIKEYGetTest() throws ApiException {
        String userid = null;
        String APIKEY = null;
        api.usersUseridPickeyAPIKEYGet(userid, APIKEY);
        // TODO: test validations
    }

    /**
     * Returns information about the projects the user is a participant in.
     *
     * Returns information about the projects the user is a participant in. Only the projects that the current token have access to will be listed. 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void usersUseridProjectParticipationsGetTest() throws ApiException {
        UUID userid = null;
        UserParticipationInfo response = api.usersUseridProjectParticipationsGet(userid);
        // TODO: test validations
    }

}
