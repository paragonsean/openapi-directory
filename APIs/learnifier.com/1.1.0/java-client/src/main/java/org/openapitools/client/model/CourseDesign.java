/*
 * Learnifier
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.time.OffsetDateTime;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import java.util.UUID;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * CourseDesign
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:41:42.183794-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class CourseDesign {
  public static final String SERIALIZED_NAME_CREATED = "created";
  @SerializedName(SERIALIZED_NAME_CREATED)
  private OffsetDateTime created;

  public static final String SERIALIZED_NAME_CREATED_BY = "createdBy";
  @SerializedName(SERIALIZED_NAME_CREATED_BY)
  private UUID createdBy;

  public static final String SERIALIZED_NAME_DESCRIPTION = "description";
  @SerializedName(SERIALIZED_NAME_DESCRIPTION)
  private String description;

  public static final String SERIALIZED_NAME_ENABLED = "enabled";
  @SerializedName(SERIALIZED_NAME_ENABLED)
  private Boolean enabled;

  public static final String SERIALIZED_NAME_LOCALE = "locale";
  @SerializedName(SERIALIZED_NAME_LOCALE)
  private String locale;

  public static final String SERIALIZED_NAME_LOCKED = "locked";
  @SerializedName(SERIALIZED_NAME_LOCKED)
  private OffsetDateTime locked;

  public static final String SERIALIZED_NAME_LOCKED_BY = "lockedBy";
  @SerializedName(SERIALIZED_NAME_LOCKED_BY)
  private UUID lockedBy;

  public static final String SERIALIZED_NAME_LOCKED_DESIGN = "lockedDesign";
  @SerializedName(SERIALIZED_NAME_LOCKED_DESIGN)
  private Boolean lockedDesign;

  public static final String SERIALIZED_NAME_NAME = "name";
  @SerializedName(SERIALIZED_NAME_NAME)
  private String name;

  public static final String SERIALIZED_NAME_SOFTID = "softid";
  @SerializedName(SERIALIZED_NAME_SOFTID)
  private String softid;

  public static final String SERIALIZED_NAME_STICKY = "sticky";
  @SerializedName(SERIALIZED_NAME_STICKY)
  private Boolean sticky;

  public static final String SERIALIZED_NAME_TAGS = "tags";
  @SerializedName(SERIALIZED_NAME_TAGS)
  private List<String> tags = new ArrayList<>();

  public CourseDesign() {
  }

  public CourseDesign created(OffsetDateTime created) {
    this.created = created;
    return this;
  }

  /**
   * The time this entry was created
   * @return created
   */
  @javax.annotation.Nullable
  public OffsetDateTime getCreated() {
    return created;
  }

  public void setCreated(OffsetDateTime created) {
    this.created = created;
  }


  public CourseDesign createdBy(UUID createdBy) {
    this.createdBy = createdBy;
    return this;
  }

  /**
   * UUID of the user that created this entry.
   * @return createdBy
   */
  @javax.annotation.Nullable
  public UUID getCreatedBy() {
    return createdBy;
  }

  public void setCreatedBy(UUID createdBy) {
    this.createdBy = createdBy;
  }


  public CourseDesign description(String description) {
    this.description = description;
    return this;
  }

  /**
   * Course description
   * @return description
   */
  @javax.annotation.Nullable
  public String getDescription() {
    return description;
  }

  public void setDescription(String description) {
    this.description = description;
  }


  public CourseDesign enabled(Boolean enabled) {
    this.enabled = enabled;
    return this;
  }

  /**
   * True if this design is enabled for use
   * @return enabled
   */
  @javax.annotation.Nonnull
  public Boolean getEnabled() {
    return enabled;
  }

  public void setEnabled(Boolean enabled) {
    this.enabled = enabled;
  }


  public CourseDesign locale(String locale) {
    this.locale = locale;
    return this;
  }

  /**
   * BCP-47 locale
   * @return locale
   */
  @javax.annotation.Nonnull
  public String getLocale() {
    return locale;
  }

  public void setLocale(String locale) {
    this.locale = locale;
  }


  public CourseDesign locked(OffsetDateTime locked) {
    this.locked = locked;
    return this;
  }

  /**
   * The time when this entry was locked or null
   * @return locked
   */
  @javax.annotation.Nullable
  public OffsetDateTime getLocked() {
    return locked;
  }

  public void setLocked(OffsetDateTime locked) {
    this.locked = locked;
  }


  public CourseDesign lockedBy(UUID lockedBy) {
    this.lockedBy = lockedBy;
    return this;
  }

  /**
   * UUID of the user that has locked this design
   * @return lockedBy
   */
  @javax.annotation.Nullable
  public UUID getLockedBy() {
    return lockedBy;
  }

  public void setLockedBy(UUID lockedBy) {
    this.lockedBy = lockedBy;
  }


  public CourseDesign lockedDesign(Boolean lockedDesign) {
    this.lockedDesign = lockedDesign;
    return this;
  }

  /**
   * True if this design is locked for editing
   * @return lockedDesign
   */
  @javax.annotation.Nonnull
  public Boolean getLockedDesign() {
    return lockedDesign;
  }

  public void setLockedDesign(Boolean lockedDesign) {
    this.lockedDesign = lockedDesign;
  }


  public CourseDesign name(String name) {
    this.name = name;
    return this;
  }

  /**
   * The name
   * @return name
   */
  @javax.annotation.Nonnull
  public String getName() {
    return name;
  }

  public void setName(String name) {
    this.name = name;
  }


  public CourseDesign softid(String softid) {
    this.softid = softid;
    return this;
  }

  /**
   * The soft identifier
   * @return softid
   */
  @javax.annotation.Nullable
  public String getSoftid() {
    return softid;
  }

  public void setSoftid(String softid) {
    this.softid = softid;
  }


  public CourseDesign sticky(Boolean sticky) {
    this.sticky = sticky;
    return this;
  }

  /**
   * True if this design is sticky
   * @return sticky
   */
  @javax.annotation.Nonnull
  public Boolean getSticky() {
    return sticky;
  }

  public void setSticky(Boolean sticky) {
    this.sticky = sticky;
  }


  public CourseDesign tags(List<String> tags) {
    this.tags = tags;
    return this;
  }

  public CourseDesign addTagsItem(String tagsItem) {
    if (this.tags == null) {
      this.tags = new ArrayList<>();
    }
    this.tags.add(tagsItem);
    return this;
  }

  /**
   * Course tags
   * @return tags
   */
  @javax.annotation.Nullable
  public List<String> getTags() {
    return tags;
  }

  public void setTags(List<String> tags) {
    this.tags = tags;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    CourseDesign courseDesign = (CourseDesign) o;
    return Objects.equals(this.created, courseDesign.created) &&
        Objects.equals(this.createdBy, courseDesign.createdBy) &&
        Objects.equals(this.description, courseDesign.description) &&
        Objects.equals(this.enabled, courseDesign.enabled) &&
        Objects.equals(this.locale, courseDesign.locale) &&
        Objects.equals(this.locked, courseDesign.locked) &&
        Objects.equals(this.lockedBy, courseDesign.lockedBy) &&
        Objects.equals(this.lockedDesign, courseDesign.lockedDesign) &&
        Objects.equals(this.name, courseDesign.name) &&
        Objects.equals(this.softid, courseDesign.softid) &&
        Objects.equals(this.sticky, courseDesign.sticky) &&
        Objects.equals(this.tags, courseDesign.tags);
  }

  @Override
  public int hashCode() {
    return Objects.hash(created, createdBy, description, enabled, locale, locked, lockedBy, lockedDesign, name, softid, sticky, tags);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class CourseDesign {\n");
    sb.append("    created: ").append(toIndentedString(created)).append("\n");
    sb.append("    createdBy: ").append(toIndentedString(createdBy)).append("\n");
    sb.append("    description: ").append(toIndentedString(description)).append("\n");
    sb.append("    enabled: ").append(toIndentedString(enabled)).append("\n");
    sb.append("    locale: ").append(toIndentedString(locale)).append("\n");
    sb.append("    locked: ").append(toIndentedString(locked)).append("\n");
    sb.append("    lockedBy: ").append(toIndentedString(lockedBy)).append("\n");
    sb.append("    lockedDesign: ").append(toIndentedString(lockedDesign)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    softid: ").append(toIndentedString(softid)).append("\n");
    sb.append("    sticky: ").append(toIndentedString(sticky)).append("\n");
    sb.append("    tags: ").append(toIndentedString(tags)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("created");
    openapiFields.add("createdBy");
    openapiFields.add("description");
    openapiFields.add("enabled");
    openapiFields.add("locale");
    openapiFields.add("locked");
    openapiFields.add("lockedBy");
    openapiFields.add("lockedDesign");
    openapiFields.add("name");
    openapiFields.add("softid");
    openapiFields.add("sticky");
    openapiFields.add("tags");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("enabled");
    openapiRequiredFields.add("locale");
    openapiRequiredFields.add("lockedDesign");
    openapiRequiredFields.add("name");
    openapiRequiredFields.add("sticky");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to CourseDesign
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!CourseDesign.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in CourseDesign is not found in the empty JSON string", CourseDesign.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!CourseDesign.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `CourseDesign` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : CourseDesign.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("createdBy") != null && !jsonObj.get("createdBy").isJsonNull()) && !jsonObj.get("createdBy").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `createdBy` to be a primitive type in the JSON string but got `%s`", jsonObj.get("createdBy").toString()));
      }
      if ((jsonObj.get("description") != null && !jsonObj.get("description").isJsonNull()) && !jsonObj.get("description").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `description` to be a primitive type in the JSON string but got `%s`", jsonObj.get("description").toString()));
      }
      if (!jsonObj.get("locale").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `locale` to be a primitive type in the JSON string but got `%s`", jsonObj.get("locale").toString()));
      }
      if ((jsonObj.get("lockedBy") != null && !jsonObj.get("lockedBy").isJsonNull()) && !jsonObj.get("lockedBy").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `lockedBy` to be a primitive type in the JSON string but got `%s`", jsonObj.get("lockedBy").toString()));
      }
      if (!jsonObj.get("name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("name").toString()));
      }
      if ((jsonObj.get("softid") != null && !jsonObj.get("softid").isJsonNull()) && !jsonObj.get("softid").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `softid` to be a primitive type in the JSON string but got `%s`", jsonObj.get("softid").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("tags") != null && !jsonObj.get("tags").isJsonNull() && !jsonObj.get("tags").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `tags` to be an array in the JSON string but got `%s`", jsonObj.get("tags").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!CourseDesign.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'CourseDesign' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<CourseDesign> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(CourseDesign.class));

       return (TypeAdapter<T>) new TypeAdapter<CourseDesign>() {
           @Override
           public void write(JsonWriter out, CourseDesign value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public CourseDesign read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of CourseDesign given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of CourseDesign
   * @throws IOException if the JSON string is invalid with respect to CourseDesign
   */
  public static CourseDesign fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, CourseDesign.class);
  }

  /**
   * Convert an instance of CourseDesign to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

