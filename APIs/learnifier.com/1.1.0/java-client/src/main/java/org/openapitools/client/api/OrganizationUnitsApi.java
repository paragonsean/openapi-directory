/*
 * Learnifier
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiCallback;
import org.openapitools.client.ApiClient;
import org.openapitools.client.ApiException;
import org.openapitools.client.ApiResponse;
import org.openapitools.client.Configuration;
import org.openapitools.client.Pair;
import org.openapitools.client.ProgressRequestBody;
import org.openapitools.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import org.openapitools.client.model.AddOrganizationUnit;
import org.openapitools.client.model.AddOrganizationUnitResponse;
import org.openapitools.client.model.Error;
import org.openapitools.client.model.OrgUnit;
import org.openapitools.client.model.OrgUnits;
import org.openapitools.client.model.UpdateOrganizationUnit;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class OrganizationUnitsApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public OrganizationUnitsApi() {
        this(Configuration.getDefaultApiClient());
    }

    public OrganizationUnitsApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for extorgunitGet
     * @param extid The external id of the organization unit (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A response with an organization unit </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Organization Unit not found </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Unexpected error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call extorgunitGetCall(String extid, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/extorgunit";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (extid != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("extid", extid));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call extorgunitGetValidateBeforeCall(String extid, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'extid' is set
        if (extid == null) {
            throw new ApiException("Missing the required parameter 'extid' when calling extorgunitGet(Async)");
        }

        return extorgunitGetCall(extid, _callback);

    }

    /**
     * Get Organization Unit with External Id
     * Returns information about the organization unit with the specified external id. 
     * @param extid The external id of the organization unit (required)
     * @return OrgUnit
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A response with an organization unit </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Organization Unit not found </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Unexpected error </td><td>  -  </td></tr>
     </table>
     */
    public OrgUnit extorgunitGet(String extid) throws ApiException {
        ApiResponse<OrgUnit> localVarResp = extorgunitGetWithHttpInfo(extid);
        return localVarResp.getData();
    }

    /**
     * Get Organization Unit with External Id
     * Returns information about the organization unit with the specified external id. 
     * @param extid The external id of the organization unit (required)
     * @return ApiResponse&lt;OrgUnit&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A response with an organization unit </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Organization Unit not found </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Unexpected error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<OrgUnit> extorgunitGetWithHttpInfo(String extid) throws ApiException {
        okhttp3.Call localVarCall = extorgunitGetValidateBeforeCall(extid, null);
        Type localVarReturnType = new TypeToken<OrgUnit>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get Organization Unit with External Id (asynchronously)
     * Returns information about the organization unit with the specified external id. 
     * @param extid The external id of the organization unit (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A response with an organization unit </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Organization Unit not found </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Unexpected error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call extorgunitGetAsync(String extid, final ApiCallback<OrgUnit> _callback) throws ApiException {

        okhttp3.Call localVarCall = extorgunitGetValidateBeforeCall(extid, _callback);
        Type localVarReturnType = new TypeToken<OrgUnit>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for orgunitsGet
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A response with organization units </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Unexpected error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call orgunitsGetCall(final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/orgunits";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call orgunitsGetValidateBeforeCall(final ApiCallback _callback) throws ApiException {
        return orgunitsGetCall(_callback);

    }

    /**
     * Organization Units
     * The orgunits endpoint returns information about the available organization units (orgunits). The response includes the display name, internal and external id and client number. 
     * @return OrgUnits
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A response with organization units </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Unexpected error </td><td>  -  </td></tr>
     </table>
     */
    public OrgUnits orgunitsGet() throws ApiException {
        ApiResponse<OrgUnits> localVarResp = orgunitsGetWithHttpInfo();
        return localVarResp.getData();
    }

    /**
     * Organization Units
     * The orgunits endpoint returns information about the available organization units (orgunits). The response includes the display name, internal and external id and client number. 
     * @return ApiResponse&lt;OrgUnits&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A response with organization units </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Unexpected error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<OrgUnits> orgunitsGetWithHttpInfo() throws ApiException {
        okhttp3.Call localVarCall = orgunitsGetValidateBeforeCall(null);
        Type localVarReturnType = new TypeToken<OrgUnits>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Organization Units (asynchronously)
     * The orgunits endpoint returns information about the available organization units (orgunits). The response includes the display name, internal and external id and client number. 
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A response with organization units </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Unexpected error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call orgunitsGetAsync(final ApiCallback<OrgUnits> _callback) throws ApiException {

        okhttp3.Call localVarCall = orgunitsGetValidateBeforeCall(_callback);
        Type localVarReturnType = new TypeToken<OrgUnits>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for orgunitsOrgidGet
     * @param orgid Id of the organization unit (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A response with an organization unit </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Organization Unit not found </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Unexpected error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call orgunitsOrgidGetCall(Integer orgid, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/orgunits/{orgid}"
            .replace("{" + "orgid" + "}", localVarApiClient.escapeString(orgid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call orgunitsOrgidGetValidateBeforeCall(Integer orgid, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'orgid' is set
        if (orgid == null) {
            throw new ApiException("Missing the required parameter 'orgid' when calling orgunitsOrgidGet(Async)");
        }

        return orgunitsOrgidGetCall(orgid, _callback);

    }

    /**
     * Get Organization Unit
     * Returns information about the specified organization unit. The response includes the display name, internal and external id and client number. 
     * @param orgid Id of the organization unit (required)
     * @return OrgUnit
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A response with an organization unit </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Organization Unit not found </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Unexpected error </td><td>  -  </td></tr>
     </table>
     */
    public OrgUnit orgunitsOrgidGet(Integer orgid) throws ApiException {
        ApiResponse<OrgUnit> localVarResp = orgunitsOrgidGetWithHttpInfo(orgid);
        return localVarResp.getData();
    }

    /**
     * Get Organization Unit
     * Returns information about the specified organization unit. The response includes the display name, internal and external id and client number. 
     * @param orgid Id of the organization unit (required)
     * @return ApiResponse&lt;OrgUnit&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A response with an organization unit </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Organization Unit not found </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Unexpected error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<OrgUnit> orgunitsOrgidGetWithHttpInfo(Integer orgid) throws ApiException {
        okhttp3.Call localVarCall = orgunitsOrgidGetValidateBeforeCall(orgid, null);
        Type localVarReturnType = new TypeToken<OrgUnit>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get Organization Unit (asynchronously)
     * Returns information about the specified organization unit. The response includes the display name, internal and external id and client number. 
     * @param orgid Id of the organization unit (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A response with an organization unit </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Organization Unit not found </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Unexpected error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call orgunitsOrgidGetAsync(Integer orgid, final ApiCallback<OrgUnit> _callback) throws ApiException {

        okhttp3.Call localVarCall = orgunitsOrgidGetValidateBeforeCall(orgid, _callback);
        Type localVarReturnType = new TypeToken<OrgUnit>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for orgunitsOrgidPatch
     * @param orgid  (required)
     * @param body  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Organization Unit was successfully updated </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> An organization with the same clientNumber or external id already existed. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Unexpected error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call orgunitsOrgidPatchCall(String orgid, UpdateOrganizationUnit body, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = body;

        // create path and map variables
        String localVarPath = "/orgunits/{orgid}"
            .replace("{" + "orgid" + "}", localVarApiClient.escapeString(orgid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "PATCH", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call orgunitsOrgidPatchValidateBeforeCall(String orgid, UpdateOrganizationUnit body, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'orgid' is set
        if (orgid == null) {
            throw new ApiException("Missing the required parameter 'orgid' when calling orgunitsOrgidPatch(Async)");
        }

        // verify the required parameter 'body' is set
        if (body == null) {
            throw new ApiException("Missing the required parameter 'body' when calling orgunitsOrgidPatch(Async)");
        }

        return orgunitsOrgidPatchCall(orgid, body, _callback);

    }

    /**
     * Updates an Organization Unit
     * Adds an Organization Unit
     * @param orgid  (required)
     * @param body  (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Organization Unit was successfully updated </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> An organization with the same clientNumber or external id already existed. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Unexpected error </td><td>  -  </td></tr>
     </table>
     */
    public void orgunitsOrgidPatch(String orgid, UpdateOrganizationUnit body) throws ApiException {
        orgunitsOrgidPatchWithHttpInfo(orgid, body);
    }

    /**
     * Updates an Organization Unit
     * Adds an Organization Unit
     * @param orgid  (required)
     * @param body  (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Organization Unit was successfully updated </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> An organization with the same clientNumber or external id already existed. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Unexpected error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> orgunitsOrgidPatchWithHttpInfo(String orgid, UpdateOrganizationUnit body) throws ApiException {
        okhttp3.Call localVarCall = orgunitsOrgidPatchValidateBeforeCall(orgid, body, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Updates an Organization Unit (asynchronously)
     * Adds an Organization Unit
     * @param orgid  (required)
     * @param body  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Organization Unit was successfully updated </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> An organization with the same clientNumber or external id already existed. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Unexpected error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call orgunitsOrgidPatchAsync(String orgid, UpdateOrganizationUnit body, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = orgunitsOrgidPatchValidateBeforeCall(orgid, body, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for orgunitsPost
     * @param body  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Organization Unit was successfully added </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> An organization with the same clientNumber or external id already existed. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Unexpected error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call orgunitsPostCall(AddOrganizationUnit body, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = body;

        // create path and map variables
        String localVarPath = "/orgunits";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call orgunitsPostValidateBeforeCall(AddOrganizationUnit body, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'body' is set
        if (body == null) {
            throw new ApiException("Missing the required parameter 'body' when calling orgunitsPost(Async)");
        }

        return orgunitsPostCall(body, _callback);

    }

    /**
     * Adds an Organization Unit
     * Adds an Organization Unit
     * @param body  (required)
     * @return AddOrganizationUnitResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Organization Unit was successfully added </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> An organization with the same clientNumber or external id already existed. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Unexpected error </td><td>  -  </td></tr>
     </table>
     */
    public AddOrganizationUnitResponse orgunitsPost(AddOrganizationUnit body) throws ApiException {
        ApiResponse<AddOrganizationUnitResponse> localVarResp = orgunitsPostWithHttpInfo(body);
        return localVarResp.getData();
    }

    /**
     * Adds an Organization Unit
     * Adds an Organization Unit
     * @param body  (required)
     * @return ApiResponse&lt;AddOrganizationUnitResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Organization Unit was successfully added </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> An organization with the same clientNumber or external id already existed. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Unexpected error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<AddOrganizationUnitResponse> orgunitsPostWithHttpInfo(AddOrganizationUnit body) throws ApiException {
        okhttp3.Call localVarCall = orgunitsPostValidateBeforeCall(body, null);
        Type localVarReturnType = new TypeToken<AddOrganizationUnitResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Adds an Organization Unit (asynchronously)
     * Adds an Organization Unit
     * @param body  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Organization Unit was successfully added </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> An organization with the same clientNumber or external id already existed. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Unexpected error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call orgunitsPostAsync(AddOrganizationUnit body, final ApiCallback<AddOrganizationUnitResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = orgunitsPostValidateBeforeCall(body, _callback);
        Type localVarReturnType = new TypeToken<AddOrganizationUnitResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
