/*
 * Learnifier
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.math.BigDecimal;
import java.time.OffsetDateTime;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * UserParticipationInfo
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:41:42.183794-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class UserParticipationInfo {
  public static final String SERIALIZED_NAME_ACCESS_LINK = "accessLink";
  @SerializedName(SERIALIZED_NAME_ACCESS_LINK)
  private String accessLink;

  public static final String SERIALIZED_NAME_ACTIVATED = "activated";
  @SerializedName(SERIALIZED_NAME_ACTIVATED)
  private Boolean activated;

  public static final String SERIALIZED_NAME_ACTIVITIES_COMPLETED = "activitiesCompleted";
  @SerializedName(SERIALIZED_NAME_ACTIVITIES_COMPLETED)
  private BigDecimal activitiesCompleted;

  public static final String SERIALIZED_NAME_ACTIVITIES_TOTAL = "activitiesTotal";
  @SerializedName(SERIALIZED_NAME_ACTIVITIES_TOTAL)
  private BigDecimal activitiesTotal;

  public static final String SERIALIZED_NAME_ERROR_MESSAGE = "errorMessage";
  @SerializedName(SERIALIZED_NAME_ERROR_MESSAGE)
  private String errorMessage;

  public static final String SERIALIZED_NAME_EXPIRATION = "expiration";
  @SerializedName(SERIALIZED_NAME_EXPIRATION)
  private OffsetDateTime expiration;

  public static final String SERIALIZED_NAME_EXTERNAL_ID = "externalId";
  @SerializedName(SERIALIZED_NAME_EXTERNAL_ID)
  private String externalId;

  public static final String SERIALIZED_NAME_FIRST_ACCESS = "firstAccess";
  @SerializedName(SERIALIZED_NAME_FIRST_ACCESS)
  private OffsetDateTime firstAccess;

  public static final String SERIALIZED_NAME_FIRST_ACTIVATION = "firstActivation";
  @SerializedName(SERIALIZED_NAME_FIRST_ACTIVATION)
  private OffsetDateTime firstActivation;

  public static final String SERIALIZED_NAME_FIRST_MAIL = "firstMail";
  @SerializedName(SERIALIZED_NAME_FIRST_MAIL)
  private OffsetDateTime firstMail;

  public static final String SERIALIZED_NAME_ID = "id";
  @SerializedName(SERIALIZED_NAME_ID)
  private Long id;

  public static final String SERIALIZED_NAME_IN_ERROR = "inError";
  @SerializedName(SERIALIZED_NAME_IN_ERROR)
  private Boolean inError;

  public static final String SERIALIZED_NAME_LAST_ACCESS = "lastAccess";
  @SerializedName(SERIALIZED_NAME_LAST_ACCESS)
  private OffsetDateTime lastAccess;

  public static final String SERIALIZED_NAME_LAST_ACTIVATION = "lastActivation";
  @SerializedName(SERIALIZED_NAME_LAST_ACTIVATION)
  private OffsetDateTime lastActivation;

  public static final String SERIALIZED_NAME_LAST_MAIL = "lastMail";
  @SerializedName(SERIALIZED_NAME_LAST_MAIL)
  private OffsetDateTime lastMail;

  public static final String SERIALIZED_NAME_PROJECT_ID = "projectId";
  @SerializedName(SERIALIZED_NAME_PROJECT_ID)
  private Long projectId;

  public static final String SERIALIZED_NAME_PROJECT_NAME = "projectName";
  @SerializedName(SERIALIZED_NAME_PROJECT_NAME)
  private String projectName;

  public static final String SERIALIZED_NAME_PROJECT_ORG_ID = "projectOrgId";
  @SerializedName(SERIALIZED_NAME_PROJECT_ORG_ID)
  private Long projectOrgId;

  /**
   * Project status. Can be either ACTIVATED, NEW or DISABLED
   */
  @JsonAdapter(ProjectStatusEnum.Adapter.class)
  public enum ProjectStatusEnum {
    ACTIVATED("ACTIVATED"),
    
    NEW("NEW"),
    
    DISABLED("DISABLED");

    private String value;

    ProjectStatusEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static ProjectStatusEnum fromValue(String value) {
      for (ProjectStatusEnum b : ProjectStatusEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<ProjectStatusEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final ProjectStatusEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public ProjectStatusEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return ProjectStatusEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      ProjectStatusEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_PROJECT_STATUS = "projectStatus";
  @SerializedName(SERIALIZED_NAME_PROJECT_STATUS)
  private ProjectStatusEnum projectStatus;

  public static final String SERIALIZED_NAME_PROJECT_THUMBNAIL = "projectThumbnail";
  @SerializedName(SERIALIZED_NAME_PROJECT_THUMBNAIL)
  private String projectThumbnail;

  public static final String SERIALIZED_NAME_PROJECT_USER_TITLE = "projectUserTitle";
  @SerializedName(SERIALIZED_NAME_PROJECT_USER_TITLE)
  private String projectUserTitle;

  public UserParticipationInfo() {
  }

  public UserParticipationInfo accessLink(String accessLink) {
    this.accessLink = accessLink;
    return this;
  }

  /**
   * A link to access this particular participation. The link requires the user to login. Users that access the platform the first time must set a password. This value is null if this participation is not activated. 
   * @return accessLink
   */
  @javax.annotation.Nullable
  public String getAccessLink() {
    return accessLink;
  }

  public void setAccessLink(String accessLink) {
    this.accessLink = accessLink;
  }


  public UserParticipationInfo activated(Boolean activated) {
    this.activated = activated;
    return this;
  }

  /**
   * True if this participation has been activated and can be used
   * @return activated
   */
  @javax.annotation.Nullable
  public Boolean getActivated() {
    return activated;
  }

  public void setActivated(Boolean activated) {
    this.activated = activated;
  }


  public UserParticipationInfo activitiesCompleted(BigDecimal activitiesCompleted) {
    this.activitiesCompleted = activitiesCompleted;
    return this;
  }

  /**
   * The number of activities completed
   * @return activitiesCompleted
   */
  @javax.annotation.Nullable
  public BigDecimal getActivitiesCompleted() {
    return activitiesCompleted;
  }

  public void setActivitiesCompleted(BigDecimal activitiesCompleted) {
    this.activitiesCompleted = activitiesCompleted;
  }


  public UserParticipationInfo activitiesTotal(BigDecimal activitiesTotal) {
    this.activitiesTotal = activitiesTotal;
    return this;
  }

  /**
   * The total number of activities
   * @return activitiesTotal
   */
  @javax.annotation.Nullable
  public BigDecimal getActivitiesTotal() {
    return activitiesTotal;
  }

  public void setActivitiesTotal(BigDecimal activitiesTotal) {
    this.activitiesTotal = activitiesTotal;
  }


  public UserParticipationInfo errorMessage(String errorMessage) {
    this.errorMessage = errorMessage;
    return this;
  }

  /**
   * An optional error message that may describe why the participation is in error state.
   * @return errorMessage
   */
  @javax.annotation.Nullable
  public String getErrorMessage() {
    return errorMessage;
  }

  public void setErrorMessage(String errorMessage) {
    this.errorMessage = errorMessage;
  }


  public UserParticipationInfo expiration(OffsetDateTime expiration) {
    this.expiration = expiration;
    return this;
  }

  /**
   * The timestamp when this participation will expire. Expiration never happens if this value is *null*.
   * @return expiration
   */
  @javax.annotation.Nullable
  public OffsetDateTime getExpiration() {
    return expiration;
  }

  public void setExpiration(OffsetDateTime expiration) {
    this.expiration = expiration;
  }


  public UserParticipationInfo externalId(String externalId) {
    this.externalId = externalId;
    return this;
  }

  /**
   * The external id (foreign key). Must not exceed 255 characters.
   * @return externalId
   */
  @javax.annotation.Nullable
  public String getExternalId() {
    return externalId;
  }

  public void setExternalId(String externalId) {
    this.externalId = externalId;
  }


  public UserParticipationInfo firstAccess(OffsetDateTime firstAccess) {
    this.firstAccess = firstAccess;
    return this;
  }

  /**
   * The timestamp when the participant accessed the project for the first time. This value can be null
   * @return firstAccess
   */
  @javax.annotation.Nullable
  public OffsetDateTime getFirstAccess() {
    return firstAccess;
  }

  public void setFirstAccess(OffsetDateTime firstAccess) {
    this.firstAccess = firstAccess;
  }


  public UserParticipationInfo firstActivation(OffsetDateTime firstActivation) {
    this.firstActivation = firstActivation;
    return this;
  }

  /**
   * The timestamp when this participation was first activated. This value can be null
   * @return firstActivation
   */
  @javax.annotation.Nullable
  public OffsetDateTime getFirstActivation() {
    return firstActivation;
  }

  public void setFirstActivation(OffsetDateTime firstActivation) {
    this.firstActivation = firstActivation;
  }


  public UserParticipationInfo firstMail(OffsetDateTime firstMail) {
    this.firstMail = firstMail;
    return this;
  }

  /**
   * The timestamp when the first mail was sent to this participant. This value can be null
   * @return firstMail
   */
  @javax.annotation.Nullable
  public OffsetDateTime getFirstMail() {
    return firstMail;
  }

  public void setFirstMail(OffsetDateTime firstMail) {
    this.firstMail = firstMail;
  }


  public UserParticipationInfo id(Long id) {
    this.id = id;
    return this;
  }

  /**
   * Participation id
   * @return id
   */
  @javax.annotation.Nullable
  public Long getId() {
    return id;
  }

  public void setId(Long id) {
    this.id = id;
  }


  public UserParticipationInfo inError(Boolean inError) {
    this.inError = inError;
    return this;
  }

  /**
   * True if this participation is in an error state. The user is not able to access participations that are in error state.
   * @return inError
   */
  @javax.annotation.Nullable
  public Boolean getInError() {
    return inError;
  }

  public void setInError(Boolean inError) {
    this.inError = inError;
  }


  public UserParticipationInfo lastAccess(OffsetDateTime lastAccess) {
    this.lastAccess = lastAccess;
    return this;
  }

  /**
   * The timestamp when the participant accessed the project the last time. This value can be null
   * @return lastAccess
   */
  @javax.annotation.Nullable
  public OffsetDateTime getLastAccess() {
    return lastAccess;
  }

  public void setLastAccess(OffsetDateTime lastAccess) {
    this.lastAccess = lastAccess;
  }


  public UserParticipationInfo lastActivation(OffsetDateTime lastActivation) {
    this.lastActivation = lastActivation;
    return this;
  }

  /**
   * The timestamp when this participation was last activated. This value can be null
   * @return lastActivation
   */
  @javax.annotation.Nullable
  public OffsetDateTime getLastActivation() {
    return lastActivation;
  }

  public void setLastActivation(OffsetDateTime lastActivation) {
    this.lastActivation = lastActivation;
  }


  public UserParticipationInfo lastMail(OffsetDateTime lastMail) {
    this.lastMail = lastMail;
    return this;
  }

  /**
   * The timestamp when the last mail was sent to this participant. This value can be null
   * @return lastMail
   */
  @javax.annotation.Nullable
  public OffsetDateTime getLastMail() {
    return lastMail;
  }

  public void setLastMail(OffsetDateTime lastMail) {
    this.lastMail = lastMail;
  }


  public UserParticipationInfo projectId(Long projectId) {
    this.projectId = projectId;
    return this;
  }

  /**
   * Project id
   * @return projectId
   */
  @javax.annotation.Nullable
  public Long getProjectId() {
    return projectId;
  }

  public void setProjectId(Long projectId) {
    this.projectId = projectId;
  }


  public UserParticipationInfo projectName(String projectName) {
    this.projectName = projectName;
    return this;
  }

  /**
   * The internal name of the project
   * @return projectName
   */
  @javax.annotation.Nullable
  public String getProjectName() {
    return projectName;
  }

  public void setProjectName(String projectName) {
    this.projectName = projectName;
  }


  public UserParticipationInfo projectOrgId(Long projectOrgId) {
    this.projectOrgId = projectOrgId;
    return this;
  }

  /**
   * The organization id
   * @return projectOrgId
   */
  @javax.annotation.Nullable
  public Long getProjectOrgId() {
    return projectOrgId;
  }

  public void setProjectOrgId(Long projectOrgId) {
    this.projectOrgId = projectOrgId;
  }


  public UserParticipationInfo projectStatus(ProjectStatusEnum projectStatus) {
    this.projectStatus = projectStatus;
    return this;
  }

  /**
   * Project status. Can be either ACTIVATED, NEW or DISABLED
   * @return projectStatus
   */
  @javax.annotation.Nullable
  public ProjectStatusEnum getProjectStatus() {
    return projectStatus;
  }

  public void setProjectStatus(ProjectStatusEnum projectStatus) {
    this.projectStatus = projectStatus;
  }


  public UserParticipationInfo projectThumbnail(String projectThumbnail) {
    this.projectThumbnail = projectThumbnail;
    return this;
  }

  /**
   * An url to the project thumbnail. This url can be accessed by anyone.
   * @return projectThumbnail
   */
  @javax.annotation.Nullable
  public String getProjectThumbnail() {
    return projectThumbnail;
  }

  public void setProjectThumbnail(String projectThumbnail) {
    this.projectThumbnail = projectThumbnail;
  }


  public UserParticipationInfo projectUserTitle(String projectUserTitle) {
    this.projectUserTitle = projectUserTitle;
    return this;
  }

  /**
   * The title presented to participants
   * @return projectUserTitle
   */
  @javax.annotation.Nullable
  public String getProjectUserTitle() {
    return projectUserTitle;
  }

  public void setProjectUserTitle(String projectUserTitle) {
    this.projectUserTitle = projectUserTitle;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    UserParticipationInfo userParticipationInfo = (UserParticipationInfo) o;
    return Objects.equals(this.accessLink, userParticipationInfo.accessLink) &&
        Objects.equals(this.activated, userParticipationInfo.activated) &&
        Objects.equals(this.activitiesCompleted, userParticipationInfo.activitiesCompleted) &&
        Objects.equals(this.activitiesTotal, userParticipationInfo.activitiesTotal) &&
        Objects.equals(this.errorMessage, userParticipationInfo.errorMessage) &&
        Objects.equals(this.expiration, userParticipationInfo.expiration) &&
        Objects.equals(this.externalId, userParticipationInfo.externalId) &&
        Objects.equals(this.firstAccess, userParticipationInfo.firstAccess) &&
        Objects.equals(this.firstActivation, userParticipationInfo.firstActivation) &&
        Objects.equals(this.firstMail, userParticipationInfo.firstMail) &&
        Objects.equals(this.id, userParticipationInfo.id) &&
        Objects.equals(this.inError, userParticipationInfo.inError) &&
        Objects.equals(this.lastAccess, userParticipationInfo.lastAccess) &&
        Objects.equals(this.lastActivation, userParticipationInfo.lastActivation) &&
        Objects.equals(this.lastMail, userParticipationInfo.lastMail) &&
        Objects.equals(this.projectId, userParticipationInfo.projectId) &&
        Objects.equals(this.projectName, userParticipationInfo.projectName) &&
        Objects.equals(this.projectOrgId, userParticipationInfo.projectOrgId) &&
        Objects.equals(this.projectStatus, userParticipationInfo.projectStatus) &&
        Objects.equals(this.projectThumbnail, userParticipationInfo.projectThumbnail) &&
        Objects.equals(this.projectUserTitle, userParticipationInfo.projectUserTitle);
  }

  @Override
  public int hashCode() {
    return Objects.hash(accessLink, activated, activitiesCompleted, activitiesTotal, errorMessage, expiration, externalId, firstAccess, firstActivation, firstMail, id, inError, lastAccess, lastActivation, lastMail, projectId, projectName, projectOrgId, projectStatus, projectThumbnail, projectUserTitle);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class UserParticipationInfo {\n");
    sb.append("    accessLink: ").append(toIndentedString(accessLink)).append("\n");
    sb.append("    activated: ").append(toIndentedString(activated)).append("\n");
    sb.append("    activitiesCompleted: ").append(toIndentedString(activitiesCompleted)).append("\n");
    sb.append("    activitiesTotal: ").append(toIndentedString(activitiesTotal)).append("\n");
    sb.append("    errorMessage: ").append(toIndentedString(errorMessage)).append("\n");
    sb.append("    expiration: ").append(toIndentedString(expiration)).append("\n");
    sb.append("    externalId: ").append(toIndentedString(externalId)).append("\n");
    sb.append("    firstAccess: ").append(toIndentedString(firstAccess)).append("\n");
    sb.append("    firstActivation: ").append(toIndentedString(firstActivation)).append("\n");
    sb.append("    firstMail: ").append(toIndentedString(firstMail)).append("\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    inError: ").append(toIndentedString(inError)).append("\n");
    sb.append("    lastAccess: ").append(toIndentedString(lastAccess)).append("\n");
    sb.append("    lastActivation: ").append(toIndentedString(lastActivation)).append("\n");
    sb.append("    lastMail: ").append(toIndentedString(lastMail)).append("\n");
    sb.append("    projectId: ").append(toIndentedString(projectId)).append("\n");
    sb.append("    projectName: ").append(toIndentedString(projectName)).append("\n");
    sb.append("    projectOrgId: ").append(toIndentedString(projectOrgId)).append("\n");
    sb.append("    projectStatus: ").append(toIndentedString(projectStatus)).append("\n");
    sb.append("    projectThumbnail: ").append(toIndentedString(projectThumbnail)).append("\n");
    sb.append("    projectUserTitle: ").append(toIndentedString(projectUserTitle)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("accessLink");
    openapiFields.add("activated");
    openapiFields.add("activitiesCompleted");
    openapiFields.add("activitiesTotal");
    openapiFields.add("errorMessage");
    openapiFields.add("expiration");
    openapiFields.add("externalId");
    openapiFields.add("firstAccess");
    openapiFields.add("firstActivation");
    openapiFields.add("firstMail");
    openapiFields.add("id");
    openapiFields.add("inError");
    openapiFields.add("lastAccess");
    openapiFields.add("lastActivation");
    openapiFields.add("lastMail");
    openapiFields.add("projectId");
    openapiFields.add("projectName");
    openapiFields.add("projectOrgId");
    openapiFields.add("projectStatus");
    openapiFields.add("projectThumbnail");
    openapiFields.add("projectUserTitle");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to UserParticipationInfo
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!UserParticipationInfo.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in UserParticipationInfo is not found in the empty JSON string", UserParticipationInfo.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!UserParticipationInfo.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `UserParticipationInfo` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("accessLink") != null && !jsonObj.get("accessLink").isJsonNull()) && !jsonObj.get("accessLink").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `accessLink` to be a primitive type in the JSON string but got `%s`", jsonObj.get("accessLink").toString()));
      }
      if ((jsonObj.get("errorMessage") != null && !jsonObj.get("errorMessage").isJsonNull()) && !jsonObj.get("errorMessage").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `errorMessage` to be a primitive type in the JSON string but got `%s`", jsonObj.get("errorMessage").toString()));
      }
      if ((jsonObj.get("externalId") != null && !jsonObj.get("externalId").isJsonNull()) && !jsonObj.get("externalId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `externalId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("externalId").toString()));
      }
      if ((jsonObj.get("projectName") != null && !jsonObj.get("projectName").isJsonNull()) && !jsonObj.get("projectName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `projectName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("projectName").toString()));
      }
      if ((jsonObj.get("projectStatus") != null && !jsonObj.get("projectStatus").isJsonNull()) && !jsonObj.get("projectStatus").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `projectStatus` to be a primitive type in the JSON string but got `%s`", jsonObj.get("projectStatus").toString()));
      }
      // validate the optional field `projectStatus`
      if (jsonObj.get("projectStatus") != null && !jsonObj.get("projectStatus").isJsonNull()) {
        ProjectStatusEnum.validateJsonElement(jsonObj.get("projectStatus"));
      }
      if ((jsonObj.get("projectThumbnail") != null && !jsonObj.get("projectThumbnail").isJsonNull()) && !jsonObj.get("projectThumbnail").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `projectThumbnail` to be a primitive type in the JSON string but got `%s`", jsonObj.get("projectThumbnail").toString()));
      }
      if ((jsonObj.get("projectUserTitle") != null && !jsonObj.get("projectUserTitle").isJsonNull()) && !jsonObj.get("projectUserTitle").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `projectUserTitle` to be a primitive type in the JSON string but got `%s`", jsonObj.get("projectUserTitle").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!UserParticipationInfo.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'UserParticipationInfo' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<UserParticipationInfo> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(UserParticipationInfo.class));

       return (TypeAdapter<T>) new TypeAdapter<UserParticipationInfo>() {
           @Override
           public void write(JsonWriter out, UserParticipationInfo value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public UserParticipationInfo read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of UserParticipationInfo given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of UserParticipationInfo
   * @throws IOException if the JSON string is invalid with respect to UserParticipationInfo
   */
  public static UserParticipationInfo fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, UserParticipationInfo.class);
  }

  /**
   * Convert an instance of UserParticipationInfo to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

