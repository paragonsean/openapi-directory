/*
 * Learnifier
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.math.BigDecimal;
import java.util.Arrays;
import java.util.UUID;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * UpdateOrganizationUnit
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:41:42.183794-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class UpdateOrganizationUnit {
  public static final String SERIALIZED_NAME_CALLER = "caller";
  @SerializedName(SERIALIZED_NAME_CALLER)
  private UUID caller;

  public static final String SERIALIZED_NAME_CLIENT_NUMBER = "clientNumber";
  @SerializedName(SERIALIZED_NAME_CLIENT_NUMBER)
  private String clientNumber;

  public static final String SERIALIZED_NAME_COUNTRY = "country";
  @SerializedName(SERIALIZED_NAME_COUNTRY)
  private String country;

  public static final String SERIALIZED_NAME_DISPLAY_NAME = "displayName";
  @SerializedName(SERIALIZED_NAME_DISPLAY_NAME)
  private String displayName;

  public static final String SERIALIZED_NAME_EXTERNAL_ID = "externalId";
  @SerializedName(SERIALIZED_NAME_EXTERNAL_ID)
  private String externalId;

  public static final String SERIALIZED_NAME_PARENT = "parent";
  @SerializedName(SERIALIZED_NAME_PARENT)
  private BigDecimal parent;

  public UpdateOrganizationUnit() {
  }

  public UpdateOrganizationUnit caller(UUID caller) {
    this.caller = caller;
    return this;
  }

  /**
   * The id of the user that initiated this operation
   * @return caller
   */
  @javax.annotation.Nullable
  public UUID getCaller() {
    return caller;
  }

  public void setCaller(UUID caller) {
    this.caller = caller;
  }


  public UpdateOrganizationUnit clientNumber(String clientNumber) {
    this.clientNumber = clientNumber;
    return this;
  }

  /**
   * A client number. Sometimes used when communicating with external system. Must be unique if specified.
   * @return clientNumber
   */
  @javax.annotation.Nullable
  public String getClientNumber() {
    return clientNumber;
  }

  public void setClientNumber(String clientNumber) {
    this.clientNumber = clientNumber;
  }


  public UpdateOrganizationUnit country(String country) {
    this.country = country;
    return this;
  }

  /**
   * The country code that best matches the organization unit. If unspecified the platform default will be set.
   * @return country
   */
  @javax.annotation.Nullable
  public String getCountry() {
    return country;
  }

  public void setCountry(String country) {
    this.country = country;
  }


  public UpdateOrganizationUnit displayName(String displayName) {
    this.displayName = displayName;
    return this;
  }

  /**
   * The name shown for the organization unit
   * @return displayName
   */
  @javax.annotation.Nullable
  public String getDisplayName() {
    return displayName;
  }

  public void setDisplayName(String displayName) {
    this.displayName = displayName;
  }


  public UpdateOrganizationUnit externalId(String externalId) {
    this.externalId = externalId;
    return this;
  }

  /**
   * The external id (foreign key). Must not exceed 255 characters.
   * @return externalId
   */
  @javax.annotation.Nullable
  public String getExternalId() {
    return externalId;
  }

  public void setExternalId(String externalId) {
    this.externalId = externalId;
  }


  public UpdateOrganizationUnit parent(BigDecimal parent) {
    this.parent = parent;
    return this;
  }

  /**
   * A Organization Unit id of the parent Organization Unit (optional).
   * @return parent
   */
  @javax.annotation.Nullable
  public BigDecimal getParent() {
    return parent;
  }

  public void setParent(BigDecimal parent) {
    this.parent = parent;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    UpdateOrganizationUnit updateOrganizationUnit = (UpdateOrganizationUnit) o;
    return Objects.equals(this.caller, updateOrganizationUnit.caller) &&
        Objects.equals(this.clientNumber, updateOrganizationUnit.clientNumber) &&
        Objects.equals(this.country, updateOrganizationUnit.country) &&
        Objects.equals(this.displayName, updateOrganizationUnit.displayName) &&
        Objects.equals(this.externalId, updateOrganizationUnit.externalId) &&
        Objects.equals(this.parent, updateOrganizationUnit.parent);
  }

  @Override
  public int hashCode() {
    return Objects.hash(caller, clientNumber, country, displayName, externalId, parent);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class UpdateOrganizationUnit {\n");
    sb.append("    caller: ").append(toIndentedString(caller)).append("\n");
    sb.append("    clientNumber: ").append(toIndentedString(clientNumber)).append("\n");
    sb.append("    country: ").append(toIndentedString(country)).append("\n");
    sb.append("    displayName: ").append(toIndentedString(displayName)).append("\n");
    sb.append("    externalId: ").append(toIndentedString(externalId)).append("\n");
    sb.append("    parent: ").append(toIndentedString(parent)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("caller");
    openapiFields.add("clientNumber");
    openapiFields.add("country");
    openapiFields.add("displayName");
    openapiFields.add("externalId");
    openapiFields.add("parent");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to UpdateOrganizationUnit
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!UpdateOrganizationUnit.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in UpdateOrganizationUnit is not found in the empty JSON string", UpdateOrganizationUnit.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!UpdateOrganizationUnit.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `UpdateOrganizationUnit` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("caller") != null && !jsonObj.get("caller").isJsonNull()) && !jsonObj.get("caller").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `caller` to be a primitive type in the JSON string but got `%s`", jsonObj.get("caller").toString()));
      }
      if ((jsonObj.get("clientNumber") != null && !jsonObj.get("clientNumber").isJsonNull()) && !jsonObj.get("clientNumber").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `clientNumber` to be a primitive type in the JSON string but got `%s`", jsonObj.get("clientNumber").toString()));
      }
      if ((jsonObj.get("country") != null && !jsonObj.get("country").isJsonNull()) && !jsonObj.get("country").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `country` to be a primitive type in the JSON string but got `%s`", jsonObj.get("country").toString()));
      }
      if ((jsonObj.get("displayName") != null && !jsonObj.get("displayName").isJsonNull()) && !jsonObj.get("displayName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `displayName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("displayName").toString()));
      }
      if ((jsonObj.get("externalId") != null && !jsonObj.get("externalId").isJsonNull()) && !jsonObj.get("externalId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `externalId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("externalId").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!UpdateOrganizationUnit.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'UpdateOrganizationUnit' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<UpdateOrganizationUnit> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(UpdateOrganizationUnit.class));

       return (TypeAdapter<T>) new TypeAdapter<UpdateOrganizationUnit>() {
           @Override
           public void write(JsonWriter out, UpdateOrganizationUnit value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public UpdateOrganizationUnit read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of UpdateOrganizationUnit given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of UpdateOrganizationUnit
   * @throws IOException if the JSON string is invalid with respect to UpdateOrganizationUnit
   */
  public static UpdateOrganizationUnit fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, UpdateOrganizationUnit.class);
  }

  /**
   * Convert an instance of UpdateOrganizationUnit to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

