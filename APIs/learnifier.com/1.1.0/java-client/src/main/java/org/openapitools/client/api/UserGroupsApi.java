/*
 * Learnifier
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiCallback;
import org.openapitools.client.ApiClient;
import org.openapitools.client.ApiException;
import org.openapitools.client.ApiResponse;
import org.openapitools.client.Configuration;
import org.openapitools.client.Pair;
import org.openapitools.client.ProgressRequestBody;
import org.openapitools.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import org.openapitools.client.model.AddUserGroup;
import org.openapitools.client.model.AddUserGroupMember;
import org.openapitools.client.model.Error;
import org.openapitools.client.model.GroupId;
import java.util.UUID;
import org.openapitools.client.model.User;
import org.openapitools.client.model.UserGroup;
import org.openapitools.client.model.UserId;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class UserGroupsApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public UserGroupsApi() {
        this(Configuration.getDefaultApiClient());
    }

    public UserGroupsApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for orgunitsOrgidUsergroupsGet
     * @param orgid ID of organization (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> List of User Groups. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Unexpected error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call orgunitsOrgidUsergroupsGetCall(Long orgid, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/orgunits/{orgid}/usergroups"
            .replace("{" + "orgid" + "}", localVarApiClient.escapeString(orgid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call orgunitsOrgidUsergroupsGetValidateBeforeCall(Long orgid, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'orgid' is set
        if (orgid == null) {
            throw new ApiException("Missing the required parameter 'orgid' when calling orgunitsOrgidUsergroupsGet(Async)");
        }

        return orgunitsOrgidUsergroupsGetCall(orgid, _callback);

    }

    /**
     * List User Groups.
     * Returns a list of User Groups for the org unit. 
     * @param orgid ID of organization (required)
     * @return List&lt;UserGroup&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> List of User Groups. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Unexpected error </td><td>  -  </td></tr>
     </table>
     */
    public List<UserGroup> orgunitsOrgidUsergroupsGet(Long orgid) throws ApiException {
        ApiResponse<List<UserGroup>> localVarResp = orgunitsOrgidUsergroupsGetWithHttpInfo(orgid);
        return localVarResp.getData();
    }

    /**
     * List User Groups.
     * Returns a list of User Groups for the org unit. 
     * @param orgid ID of organization (required)
     * @return ApiResponse&lt;List&lt;UserGroup&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> List of User Groups. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Unexpected error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<UserGroup>> orgunitsOrgidUsergroupsGetWithHttpInfo(Long orgid) throws ApiException {
        okhttp3.Call localVarCall = orgunitsOrgidUsergroupsGetValidateBeforeCall(orgid, null);
        Type localVarReturnType = new TypeToken<List<UserGroup>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * List User Groups. (asynchronously)
     * Returns a list of User Groups for the org unit. 
     * @param orgid ID of organization (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> List of User Groups. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Unexpected error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call orgunitsOrgidUsergroupsGetAsync(Long orgid, final ApiCallback<List<UserGroup>> _callback) throws ApiException {

        okhttp3.Call localVarCall = orgunitsOrgidUsergroupsGetValidateBeforeCall(orgid, _callback);
        Type localVarReturnType = new TypeToken<List<UserGroup>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for orgunitsOrgidUsergroupsGroupidGet
     * @param orgid ID of organization (required)
     * @param groupid ID of group (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> User Group. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Unexpected error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call orgunitsOrgidUsergroupsGroupidGetCall(Long orgid, Long groupid, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/orgunits/{orgid}/usergroups/{groupid}"
            .replace("{" + "orgid" + "}", localVarApiClient.escapeString(orgid.toString()))
            .replace("{" + "groupid" + "}", localVarApiClient.escapeString(groupid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call orgunitsOrgidUsergroupsGroupidGetValidateBeforeCall(Long orgid, Long groupid, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'orgid' is set
        if (orgid == null) {
            throw new ApiException("Missing the required parameter 'orgid' when calling orgunitsOrgidUsergroupsGroupidGet(Async)");
        }

        // verify the required parameter 'groupid' is set
        if (groupid == null) {
            throw new ApiException("Missing the required parameter 'groupid' when calling orgunitsOrgidUsergroupsGroupidGet(Async)");
        }

        return orgunitsOrgidUsergroupsGroupidGetCall(orgid, groupid, _callback);

    }

    /**
     * Get user group
     * Returns single User Group. 
     * @param orgid ID of organization (required)
     * @param groupid ID of group (required)
     * @return UserGroup
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> User Group. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Unexpected error </td><td>  -  </td></tr>
     </table>
     */
    public UserGroup orgunitsOrgidUsergroupsGroupidGet(Long orgid, Long groupid) throws ApiException {
        ApiResponse<UserGroup> localVarResp = orgunitsOrgidUsergroupsGroupidGetWithHttpInfo(orgid, groupid);
        return localVarResp.getData();
    }

    /**
     * Get user group
     * Returns single User Group. 
     * @param orgid ID of organization (required)
     * @param groupid ID of group (required)
     * @return ApiResponse&lt;UserGroup&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> User Group. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Unexpected error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<UserGroup> orgunitsOrgidUsergroupsGroupidGetWithHttpInfo(Long orgid, Long groupid) throws ApiException {
        okhttp3.Call localVarCall = orgunitsOrgidUsergroupsGroupidGetValidateBeforeCall(orgid, groupid, null);
        Type localVarReturnType = new TypeToken<UserGroup>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get user group (asynchronously)
     * Returns single User Group. 
     * @param orgid ID of organization (required)
     * @param groupid ID of group (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> User Group. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Unexpected error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call orgunitsOrgidUsergroupsGroupidGetAsync(Long orgid, Long groupid, final ApiCallback<UserGroup> _callback) throws ApiException {

        okhttp3.Call localVarCall = orgunitsOrgidUsergroupsGroupidGetValidateBeforeCall(orgid, groupid, _callback);
        Type localVarReturnType = new TypeToken<UserGroup>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for orgunitsOrgidUsergroupsGroupidMembersGet
     * @param orgid ID of organization (required)
     * @param groupid ID of group (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> List of users </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Unexpected error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call orgunitsOrgidUsergroupsGroupidMembersGetCall(Long orgid, Long groupid, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/orgunits/{orgid}/usergroups/{groupid}/members"
            .replace("{" + "orgid" + "}", localVarApiClient.escapeString(orgid.toString()))
            .replace("{" + "groupid" + "}", localVarApiClient.escapeString(groupid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call orgunitsOrgidUsergroupsGroupidMembersGetValidateBeforeCall(Long orgid, Long groupid, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'orgid' is set
        if (orgid == null) {
            throw new ApiException("Missing the required parameter 'orgid' when calling orgunitsOrgidUsergroupsGroupidMembersGet(Async)");
        }

        // verify the required parameter 'groupid' is set
        if (groupid == null) {
            throw new ApiException("Missing the required parameter 'groupid' when calling orgunitsOrgidUsergroupsGroupidMembersGet(Async)");
        }

        return orgunitsOrgidUsergroupsGroupidMembersGetCall(orgid, groupid, _callback);

    }

    /**
     * List of all users in group.
     * Returns a list of all members in User Groups that are based on the Global Group with this groupid. 
     * @param orgid ID of organization (required)
     * @param groupid ID of group (required)
     * @return List&lt;User&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> List of users </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Unexpected error </td><td>  -  </td></tr>
     </table>
     */
    public List<User> orgunitsOrgidUsergroupsGroupidMembersGet(Long orgid, Long groupid) throws ApiException {
        ApiResponse<List<User>> localVarResp = orgunitsOrgidUsergroupsGroupidMembersGetWithHttpInfo(orgid, groupid);
        return localVarResp.getData();
    }

    /**
     * List of all users in group.
     * Returns a list of all members in User Groups that are based on the Global Group with this groupid. 
     * @param orgid ID of organization (required)
     * @param groupid ID of group (required)
     * @return ApiResponse&lt;List&lt;User&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> List of users </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Unexpected error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<User>> orgunitsOrgidUsergroupsGroupidMembersGetWithHttpInfo(Long orgid, Long groupid) throws ApiException {
        okhttp3.Call localVarCall = orgunitsOrgidUsergroupsGroupidMembersGetValidateBeforeCall(orgid, groupid, null);
        Type localVarReturnType = new TypeToken<List<User>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * List of all users in group. (asynchronously)
     * Returns a list of all members in User Groups that are based on the Global Group with this groupid. 
     * @param orgid ID of organization (required)
     * @param groupid ID of group (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> List of users </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Unexpected error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call orgunitsOrgidUsergroupsGroupidMembersGetAsync(Long orgid, Long groupid, final ApiCallback<List<User>> _callback) throws ApiException {

        okhttp3.Call localVarCall = orgunitsOrgidUsergroupsGroupidMembersGetValidateBeforeCall(orgid, groupid, _callback);
        Type localVarReturnType = new TypeToken<List<User>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for orgunitsOrgidUsergroupsGroupidMembersPost
     * @param orgid ID of organization (required)
     * @param groupid ID of group (required)
     * @param body  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> User ID of added user </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Unexpected error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call orgunitsOrgidUsergroupsGroupidMembersPostCall(Long orgid, Long groupid, AddUserGroupMember body, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = body;

        // create path and map variables
        String localVarPath = "/orgunits/{orgid}/usergroups/{groupid}/members"
            .replace("{" + "orgid" + "}", localVarApiClient.escapeString(orgid.toString()))
            .replace("{" + "groupid" + "}", localVarApiClient.escapeString(groupid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call orgunitsOrgidUsergroupsGroupidMembersPostValidateBeforeCall(Long orgid, Long groupid, AddUserGroupMember body, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'orgid' is set
        if (orgid == null) {
            throw new ApiException("Missing the required parameter 'orgid' when calling orgunitsOrgidUsergroupsGroupidMembersPost(Async)");
        }

        // verify the required parameter 'groupid' is set
        if (groupid == null) {
            throw new ApiException("Missing the required parameter 'groupid' when calling orgunitsOrgidUsergroupsGroupidMembersPost(Async)");
        }

        // verify the required parameter 'body' is set
        if (body == null) {
            throw new ApiException("Missing the required parameter 'body' when calling orgunitsOrgidUsergroupsGroupidMembersPost(Async)");
        }

        return orgunitsOrgidUsergroupsGroupidMembersPostCall(orgid, groupid, body, _callback);

    }

    /**
     * Add user group member.
     * Adds a user to user group. 
     * @param orgid ID of organization (required)
     * @param groupid ID of group (required)
     * @param body  (required)
     * @return UserId
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> User ID of added user </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Unexpected error </td><td>  -  </td></tr>
     </table>
     */
    public UserId orgunitsOrgidUsergroupsGroupidMembersPost(Long orgid, Long groupid, AddUserGroupMember body) throws ApiException {
        ApiResponse<UserId> localVarResp = orgunitsOrgidUsergroupsGroupidMembersPostWithHttpInfo(orgid, groupid, body);
        return localVarResp.getData();
    }

    /**
     * Add user group member.
     * Adds a user to user group. 
     * @param orgid ID of organization (required)
     * @param groupid ID of group (required)
     * @param body  (required)
     * @return ApiResponse&lt;UserId&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> User ID of added user </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Unexpected error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<UserId> orgunitsOrgidUsergroupsGroupidMembersPostWithHttpInfo(Long orgid, Long groupid, AddUserGroupMember body) throws ApiException {
        okhttp3.Call localVarCall = orgunitsOrgidUsergroupsGroupidMembersPostValidateBeforeCall(orgid, groupid, body, null);
        Type localVarReturnType = new TypeToken<UserId>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Add user group member. (asynchronously)
     * Adds a user to user group. 
     * @param orgid ID of organization (required)
     * @param groupid ID of group (required)
     * @param body  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> User ID of added user </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Unexpected error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call orgunitsOrgidUsergroupsGroupidMembersPostAsync(Long orgid, Long groupid, AddUserGroupMember body, final ApiCallback<UserId> _callback) throws ApiException {

        okhttp3.Call localVarCall = orgunitsOrgidUsergroupsGroupidMembersPostValidateBeforeCall(orgid, groupid, body, _callback);
        Type localVarReturnType = new TypeToken<UserId>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for orgunitsOrgidUsergroupsGroupidMembersUuidDelete
     * @param orgid ID of organization (required)
     * @param groupid ID of group (required)
     * @param uuid UUID of user to remove from group. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Unexpected error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call orgunitsOrgidUsergroupsGroupidMembersUuidDeleteCall(Long orgid, Long groupid, UUID uuid, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/orgunits/{orgid}/usergroups/{groupid}/members/{uuid}"
            .replace("{" + "orgid" + "}", localVarApiClient.escapeString(orgid.toString()))
            .replace("{" + "groupid" + "}", localVarApiClient.escapeString(groupid.toString()))
            .replace("{" + "uuid" + "}", localVarApiClient.escapeString(uuid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call orgunitsOrgidUsergroupsGroupidMembersUuidDeleteValidateBeforeCall(Long orgid, Long groupid, UUID uuid, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'orgid' is set
        if (orgid == null) {
            throw new ApiException("Missing the required parameter 'orgid' when calling orgunitsOrgidUsergroupsGroupidMembersUuidDelete(Async)");
        }

        // verify the required parameter 'groupid' is set
        if (groupid == null) {
            throw new ApiException("Missing the required parameter 'groupid' when calling orgunitsOrgidUsergroupsGroupidMembersUuidDelete(Async)");
        }

        // verify the required parameter 'uuid' is set
        if (uuid == null) {
            throw new ApiException("Missing the required parameter 'uuid' when calling orgunitsOrgidUsergroupsGroupidMembersUuidDelete(Async)");
        }

        return orgunitsOrgidUsergroupsGroupidMembersUuidDeleteCall(orgid, groupid, uuid, _callback);

    }

    /**
     * Remove user group member.
     * Removes a user from a user group. 
     * @param orgid ID of organization (required)
     * @param groupid ID of group (required)
     * @param uuid UUID of user to remove from group. (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Unexpected error </td><td>  -  </td></tr>
     </table>
     */
    public void orgunitsOrgidUsergroupsGroupidMembersUuidDelete(Long orgid, Long groupid, UUID uuid) throws ApiException {
        orgunitsOrgidUsergroupsGroupidMembersUuidDeleteWithHttpInfo(orgid, groupid, uuid);
    }

    /**
     * Remove user group member.
     * Removes a user from a user group. 
     * @param orgid ID of organization (required)
     * @param groupid ID of group (required)
     * @param uuid UUID of user to remove from group. (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Unexpected error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> orgunitsOrgidUsergroupsGroupidMembersUuidDeleteWithHttpInfo(Long orgid, Long groupid, UUID uuid) throws ApiException {
        okhttp3.Call localVarCall = orgunitsOrgidUsergroupsGroupidMembersUuidDeleteValidateBeforeCall(orgid, groupid, uuid, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Remove user group member. (asynchronously)
     * Removes a user from a user group. 
     * @param orgid ID of organization (required)
     * @param groupid ID of group (required)
     * @param uuid UUID of user to remove from group. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Unexpected error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call orgunitsOrgidUsergroupsGroupidMembersUuidDeleteAsync(Long orgid, Long groupid, UUID uuid, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = orgunitsOrgidUsergroupsGroupidMembersUuidDeleteValidateBeforeCall(orgid, groupid, uuid, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for orgunitsOrgidUsergroupsPost
     * @param orgid ID of organization (required)
     * @param body  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> List of User Groups. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Unexpected error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call orgunitsOrgidUsergroupsPostCall(Long orgid, AddUserGroup body, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = body;

        // create path and map variables
        String localVarPath = "/orgunits/{orgid}/usergroups"
            .replace("{" + "orgid" + "}", localVarApiClient.escapeString(orgid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call orgunitsOrgidUsergroupsPostValidateBeforeCall(Long orgid, AddUserGroup body, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'orgid' is set
        if (orgid == null) {
            throw new ApiException("Missing the required parameter 'orgid' when calling orgunitsOrgidUsergroupsPost(Async)");
        }

        // verify the required parameter 'body' is set
        if (body == null) {
            throw new ApiException("Missing the required parameter 'body' when calling orgunitsOrgidUsergroupsPost(Async)");
        }

        return orgunitsOrgidUsergroupsPostCall(orgid, body, _callback);

    }

    /**
     * Create a User Group.
     * Create a User Group. 
     * @param orgid ID of organization (required)
     * @param body  (required)
     * @return List&lt;GroupId&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> List of User Groups. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Unexpected error </td><td>  -  </td></tr>
     </table>
     */
    public List<GroupId> orgunitsOrgidUsergroupsPost(Long orgid, AddUserGroup body) throws ApiException {
        ApiResponse<List<GroupId>> localVarResp = orgunitsOrgidUsergroupsPostWithHttpInfo(orgid, body);
        return localVarResp.getData();
    }

    /**
     * Create a User Group.
     * Create a User Group. 
     * @param orgid ID of organization (required)
     * @param body  (required)
     * @return ApiResponse&lt;List&lt;GroupId&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> List of User Groups. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Unexpected error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<GroupId>> orgunitsOrgidUsergroupsPostWithHttpInfo(Long orgid, AddUserGroup body) throws ApiException {
        okhttp3.Call localVarCall = orgunitsOrgidUsergroupsPostValidateBeforeCall(orgid, body, null);
        Type localVarReturnType = new TypeToken<List<GroupId>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Create a User Group. (asynchronously)
     * Create a User Group. 
     * @param orgid ID of organization (required)
     * @param body  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> List of User Groups. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Unexpected error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call orgunitsOrgidUsergroupsPostAsync(Long orgid, AddUserGroup body, final ApiCallback<List<GroupId>> _callback) throws ApiException {

        okhttp3.Call localVarCall = orgunitsOrgidUsergroupsPostValidateBeforeCall(orgid, body, _callback);
        Type localVarReturnType = new TypeToken<List<GroupId>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
