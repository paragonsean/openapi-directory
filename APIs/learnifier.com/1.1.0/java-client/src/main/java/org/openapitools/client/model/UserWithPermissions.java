/*
 * Learnifier
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.time.OffsetDateTime;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import java.util.UUID;
import org.openapitools.client.model.BackOfficeRole;
import org.openapitools.client.model.ClientRoles;
import org.openapitools.client.model.UserPreferences;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * UserWithPermissions
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:41:42.183794-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class UserWithPermissions {
  public static final String SERIALIZED_NAME_AUTHORIZATION_POSSIBLE = "authorizationPossible";
  @SerializedName(SERIALIZED_NAME_AUTHORIZATION_POSSIBLE)
  private Boolean authorizationPossible;

  public static final String SERIALIZED_NAME_DISPLAY_NAME = "displayName";
  @SerializedName(SERIALIZED_NAME_DISPLAY_NAME)
  private String displayName;

  public static final String SERIALIZED_NAME_EXTERNAL_ID = "externalId";
  @SerializedName(SERIALIZED_NAME_EXTERNAL_ID)
  private String externalId;

  public static final String SERIALIZED_NAME_FIRST_LOGIN = "firstLogin";
  @SerializedName(SERIALIZED_NAME_FIRST_LOGIN)
  private OffsetDateTime firstLogin;

  public static final String SERIALIZED_NAME_FIRST_NAME = "firstName";
  @SerializedName(SERIALIZED_NAME_FIRST_NAME)
  private String firstName;

  public static final String SERIALIZED_NAME_HARD_LOCK = "hardLock";
  @SerializedName(SERIALIZED_NAME_HARD_LOCK)
  private Boolean hardLock;

  public static final String SERIALIZED_NAME_HOME_ORG = "homeOrg";
  @SerializedName(SERIALIZED_NAME_HOME_ORG)
  private Long homeOrg;

  public static final String SERIALIZED_NAME_ID = "id";
  @SerializedName(SERIALIZED_NAME_ID)
  private UUID id;

  public static final String SERIALIZED_NAME_LAST_LOGIN = "lastLogin";
  @SerializedName(SERIALIZED_NAME_LAST_LOGIN)
  private OffsetDateTime lastLogin;

  public static final String SERIALIZED_NAME_LAST_NAME = "lastName";
  @SerializedName(SERIALIZED_NAME_LAST_NAME)
  private String lastName;

  public static final String SERIALIZED_NAME_LOCKED = "locked";
  @SerializedName(SERIALIZED_NAME_LOCKED)
  private Boolean locked;

  public static final String SERIALIZED_NAME_PREFS = "prefs";
  @SerializedName(SERIALIZED_NAME_PREFS)
  private UserPreferences prefs;

  public static final String SERIALIZED_NAME_PRIMARY_EMAIL = "primaryEmail";
  @SerializedName(SERIALIZED_NAME_PRIMARY_EMAIL)
  private String primaryEmail;

  public static final String SERIALIZED_NAME_BACK_OFFICE_ROLES = "backOfficeRoles";
  @SerializedName(SERIALIZED_NAME_BACK_OFFICE_ROLES)
  private List<BackOfficeRole> backOfficeRoles = new ArrayList<>();

  public static final String SERIALIZED_NAME_CLIENT_ROLES = "clientRoles";
  @SerializedName(SERIALIZED_NAME_CLIENT_ROLES)
  private List<ClientRoles> clientRoles = new ArrayList<>();

  public UserWithPermissions() {
  }

  public UserWithPermissions authorizationPossible(Boolean authorizationPossible) {
    this.authorizationPossible = authorizationPossible;
    return this;
  }

  /**
   * True if the user can authorize herself/himself
   * @return authorizationPossible
   */
  @javax.annotation.Nullable
  public Boolean getAuthorizationPossible() {
    return authorizationPossible;
  }

  public void setAuthorizationPossible(Boolean authorizationPossible) {
    this.authorizationPossible = authorizationPossible;
  }


  public UserWithPermissions displayName(String displayName) {
    this.displayName = displayName;
    return this;
  }

  /**
   * Full name of the user
   * @return displayName
   */
  @javax.annotation.Nullable
  public String getDisplayName() {
    return displayName;
  }

  public void setDisplayName(String displayName) {
    this.displayName = displayName;
  }


  public UserWithPermissions externalId(String externalId) {
    this.externalId = externalId;
    return this;
  }

  /**
   * The external id (foreign key). Must not exceed 255 characters.
   * @return externalId
   */
  @javax.annotation.Nullable
  public String getExternalId() {
    return externalId;
  }

  public void setExternalId(String externalId) {
    this.externalId = externalId;
  }


  public UserWithPermissions firstLogin(OffsetDateTime firstLogin) {
    this.firstLogin = firstLogin;
    return this;
  }

  /**
   * The timestamp when the first login was made. This value can be *null*.
   * @return firstLogin
   */
  @javax.annotation.Nullable
  public OffsetDateTime getFirstLogin() {
    return firstLogin;
  }

  public void setFirstLogin(OffsetDateTime firstLogin) {
    this.firstLogin = firstLogin;
  }


  public UserWithPermissions firstName(String firstName) {
    this.firstName = firstName;
    return this;
  }

  /**
   * The first name of the user (or given name)
   * @return firstName
   */
  @javax.annotation.Nullable
  public String getFirstName() {
    return firstName;
  }

  public void setFirstName(String firstName) {
    this.firstName = firstName;
  }


  public UserWithPermissions hardLock(Boolean hardLock) {
    this.hardLock = hardLock;
    return this;
  }

  /**
   * True if the user is locked and the lock has been set by an administrator
   * @return hardLock
   */
  @javax.annotation.Nullable
  public Boolean getHardLock() {
    return hardLock;
  }

  public void setHardLock(Boolean hardLock) {
    this.hardLock = hardLock;
  }


  public UserWithPermissions homeOrg(Long homeOrg) {
    this.homeOrg = homeOrg;
    return this;
  }

  /**
   * The primary organization for the user. Must match the id of an Organization Unit.
   * @return homeOrg
   */
  @javax.annotation.Nullable
  public Long getHomeOrg() {
    return homeOrg;
  }

  public void setHomeOrg(Long homeOrg) {
    this.homeOrg = homeOrg;
  }


  public UserWithPermissions id(UUID id) {
    this.id = id;
    return this;
  }

  /**
   * The id of the user this participation belongs to
   * @return id
   */
  @javax.annotation.Nullable
  public UUID getId() {
    return id;
  }

  public void setId(UUID id) {
    this.id = id;
  }


  public UserWithPermissions lastLogin(OffsetDateTime lastLogin) {
    this.lastLogin = lastLogin;
    return this;
  }

  /**
   * The timestamp when the last login was made. This value can be *null*.
   * @return lastLogin
   */
  @javax.annotation.Nullable
  public OffsetDateTime getLastLogin() {
    return lastLogin;
  }

  public void setLastLogin(OffsetDateTime lastLogin) {
    this.lastLogin = lastLogin;
  }


  public UserWithPermissions lastName(String lastName) {
    this.lastName = lastName;
    return this;
  }

  /**
   * The last name of the user (or surname)
   * @return lastName
   */
  @javax.annotation.Nullable
  public String getLastName() {
    return lastName;
  }

  public void setLastName(String lastName) {
    this.lastName = lastName;
  }


  public UserWithPermissions locked(Boolean locked) {
    this.locked = locked;
    return this;
  }

  /**
   * Lock status. A locked user will not be able to access the platform.
   * @return locked
   */
  @javax.annotation.Nullable
  public Boolean getLocked() {
    return locked;
  }

  public void setLocked(Boolean locked) {
    this.locked = locked;
  }


  public UserWithPermissions prefs(UserPreferences prefs) {
    this.prefs = prefs;
    return this;
  }

  /**
   * Get prefs
   * @return prefs
   */
  @javax.annotation.Nullable
  public UserPreferences getPrefs() {
    return prefs;
  }

  public void setPrefs(UserPreferences prefs) {
    this.prefs = prefs;
  }


  public UserWithPermissions primaryEmail(String primaryEmail) {
    this.primaryEmail = primaryEmail;
    return this;
  }

  /**
   * The primary email for this user. If the user has no email this value is *null*.
   * @return primaryEmail
   */
  @javax.annotation.Nullable
  public String getPrimaryEmail() {
    return primaryEmail;
  }

  public void setPrimaryEmail(String primaryEmail) {
    this.primaryEmail = primaryEmail;
  }


  public UserWithPermissions backOfficeRoles(List<BackOfficeRole> backOfficeRoles) {
    this.backOfficeRoles = backOfficeRoles;
    return this;
  }

  public UserWithPermissions addBackOfficeRolesItem(BackOfficeRole backOfficeRolesItem) {
    if (this.backOfficeRoles == null) {
      this.backOfficeRoles = new ArrayList<>();
    }
    this.backOfficeRoles.add(backOfficeRolesItem);
    return this;
  }

  /**
   * Get backOfficeRoles
   * @return backOfficeRoles
   */
  @javax.annotation.Nullable
  public List<BackOfficeRole> getBackOfficeRoles() {
    return backOfficeRoles;
  }

  public void setBackOfficeRoles(List<BackOfficeRole> backOfficeRoles) {
    this.backOfficeRoles = backOfficeRoles;
  }


  public UserWithPermissions clientRoles(List<ClientRoles> clientRoles) {
    this.clientRoles = clientRoles;
    return this;
  }

  public UserWithPermissions addClientRolesItem(ClientRoles clientRolesItem) {
    if (this.clientRoles == null) {
      this.clientRoles = new ArrayList<>();
    }
    this.clientRoles.add(clientRolesItem);
    return this;
  }

  /**
   * A list with client roles
   * @return clientRoles
   */
  @javax.annotation.Nullable
  public List<ClientRoles> getClientRoles() {
    return clientRoles;
  }

  public void setClientRoles(List<ClientRoles> clientRoles) {
    this.clientRoles = clientRoles;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    UserWithPermissions userWithPermissions = (UserWithPermissions) o;
    return Objects.equals(this.authorizationPossible, userWithPermissions.authorizationPossible) &&
        Objects.equals(this.displayName, userWithPermissions.displayName) &&
        Objects.equals(this.externalId, userWithPermissions.externalId) &&
        Objects.equals(this.firstLogin, userWithPermissions.firstLogin) &&
        Objects.equals(this.firstName, userWithPermissions.firstName) &&
        Objects.equals(this.hardLock, userWithPermissions.hardLock) &&
        Objects.equals(this.homeOrg, userWithPermissions.homeOrg) &&
        Objects.equals(this.id, userWithPermissions.id) &&
        Objects.equals(this.lastLogin, userWithPermissions.lastLogin) &&
        Objects.equals(this.lastName, userWithPermissions.lastName) &&
        Objects.equals(this.locked, userWithPermissions.locked) &&
        Objects.equals(this.prefs, userWithPermissions.prefs) &&
        Objects.equals(this.primaryEmail, userWithPermissions.primaryEmail) &&
        Objects.equals(this.backOfficeRoles, userWithPermissions.backOfficeRoles) &&
        Objects.equals(this.clientRoles, userWithPermissions.clientRoles);
  }

  @Override
  public int hashCode() {
    return Objects.hash(authorizationPossible, displayName, externalId, firstLogin, firstName, hardLock, homeOrg, id, lastLogin, lastName, locked, prefs, primaryEmail, backOfficeRoles, clientRoles);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class UserWithPermissions {\n");
    sb.append("    authorizationPossible: ").append(toIndentedString(authorizationPossible)).append("\n");
    sb.append("    displayName: ").append(toIndentedString(displayName)).append("\n");
    sb.append("    externalId: ").append(toIndentedString(externalId)).append("\n");
    sb.append("    firstLogin: ").append(toIndentedString(firstLogin)).append("\n");
    sb.append("    firstName: ").append(toIndentedString(firstName)).append("\n");
    sb.append("    hardLock: ").append(toIndentedString(hardLock)).append("\n");
    sb.append("    homeOrg: ").append(toIndentedString(homeOrg)).append("\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    lastLogin: ").append(toIndentedString(lastLogin)).append("\n");
    sb.append("    lastName: ").append(toIndentedString(lastName)).append("\n");
    sb.append("    locked: ").append(toIndentedString(locked)).append("\n");
    sb.append("    prefs: ").append(toIndentedString(prefs)).append("\n");
    sb.append("    primaryEmail: ").append(toIndentedString(primaryEmail)).append("\n");
    sb.append("    backOfficeRoles: ").append(toIndentedString(backOfficeRoles)).append("\n");
    sb.append("    clientRoles: ").append(toIndentedString(clientRoles)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("authorizationPossible");
    openapiFields.add("displayName");
    openapiFields.add("externalId");
    openapiFields.add("firstLogin");
    openapiFields.add("firstName");
    openapiFields.add("hardLock");
    openapiFields.add("homeOrg");
    openapiFields.add("id");
    openapiFields.add("lastLogin");
    openapiFields.add("lastName");
    openapiFields.add("locked");
    openapiFields.add("prefs");
    openapiFields.add("primaryEmail");
    openapiFields.add("backOfficeRoles");
    openapiFields.add("clientRoles");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to UserWithPermissions
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!UserWithPermissions.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in UserWithPermissions is not found in the empty JSON string", UserWithPermissions.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!UserWithPermissions.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `UserWithPermissions` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("displayName") != null && !jsonObj.get("displayName").isJsonNull()) && !jsonObj.get("displayName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `displayName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("displayName").toString()));
      }
      if ((jsonObj.get("externalId") != null && !jsonObj.get("externalId").isJsonNull()) && !jsonObj.get("externalId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `externalId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("externalId").toString()));
      }
      if ((jsonObj.get("firstName") != null && !jsonObj.get("firstName").isJsonNull()) && !jsonObj.get("firstName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `firstName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("firstName").toString()));
      }
      if ((jsonObj.get("id") != null && !jsonObj.get("id").isJsonNull()) && !jsonObj.get("id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("id").toString()));
      }
      if ((jsonObj.get("lastName") != null && !jsonObj.get("lastName").isJsonNull()) && !jsonObj.get("lastName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `lastName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("lastName").toString()));
      }
      // validate the optional field `prefs`
      if (jsonObj.get("prefs") != null && !jsonObj.get("prefs").isJsonNull()) {
        UserPreferences.validateJsonElement(jsonObj.get("prefs"));
      }
      if ((jsonObj.get("primaryEmail") != null && !jsonObj.get("primaryEmail").isJsonNull()) && !jsonObj.get("primaryEmail").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `primaryEmail` to be a primitive type in the JSON string but got `%s`", jsonObj.get("primaryEmail").toString()));
      }
      if (jsonObj.get("backOfficeRoles") != null && !jsonObj.get("backOfficeRoles").isJsonNull()) {
        JsonArray jsonArraybackOfficeRoles = jsonObj.getAsJsonArray("backOfficeRoles");
        if (jsonArraybackOfficeRoles != null) {
          // ensure the json data is an array
          if (!jsonObj.get("backOfficeRoles").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `backOfficeRoles` to be an array in the JSON string but got `%s`", jsonObj.get("backOfficeRoles").toString()));
          }

          // validate the optional field `backOfficeRoles` (array)
          for (int i = 0; i < jsonArraybackOfficeRoles.size(); i++) {
            BackOfficeRole.validateJsonElement(jsonArraybackOfficeRoles.get(i));
          };
        }
      }
      if (jsonObj.get("clientRoles") != null && !jsonObj.get("clientRoles").isJsonNull()) {
        JsonArray jsonArrayclientRoles = jsonObj.getAsJsonArray("clientRoles");
        if (jsonArrayclientRoles != null) {
          // ensure the json data is an array
          if (!jsonObj.get("clientRoles").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `clientRoles` to be an array in the JSON string but got `%s`", jsonObj.get("clientRoles").toString()));
          }

          // validate the optional field `clientRoles` (array)
          for (int i = 0; i < jsonArrayclientRoles.size(); i++) {
            ClientRoles.validateJsonElement(jsonArrayclientRoles.get(i));
          };
        }
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!UserWithPermissions.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'UserWithPermissions' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<UserWithPermissions> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(UserWithPermissions.class));

       return (TypeAdapter<T>) new TypeAdapter<UserWithPermissions>() {
           @Override
           public void write(JsonWriter out, UserWithPermissions value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public UserWithPermissions read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of UserWithPermissions given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of UserWithPermissions
   * @throws IOException if the JSON string is invalid with respect to UserWithPermissions
   */
  public static UserWithPermissions fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, UserWithPermissions.class);
  }

  /**
   * Convert an instance of UserWithPermissions to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

