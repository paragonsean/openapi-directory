/*
 * Learnifier
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiCallback;
import org.openapitools.client.ApiClient;
import org.openapitools.client.ApiException;
import org.openapitools.client.ApiResponse;
import org.openapitools.client.Configuration;
import org.openapitools.client.Pair;
import org.openapitools.client.ProgressRequestBody;
import org.openapitools.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import org.openapitools.client.model.ActivationError;
import org.openapitools.client.model.AddParticipant;
import org.openapitools.client.model.AddProject;
import java.math.BigDecimal;
import org.openapitools.client.model.Error;
import org.openapitools.client.model.LoginLink;
import org.openapitools.client.model.Participation;
import org.openapitools.client.model.Project;
import org.openapitools.client.model.ProjectTeamMember;
import java.net.URI;
import org.openapitools.client.model.UpdateProject;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class ProjectsApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public ProjectsApi() {
        this(Configuration.getDefaultApiClient());
    }

    public ProjectsApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for extprojectGet
     * @param extid The external id of the organization unit (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The matching project </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Unexpected error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call extprojectGetCall(String extid, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/extproject";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (extid != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("extid", extid));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call extprojectGetValidateBeforeCall(String extid, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'extid' is set
        if (extid == null) {
            throw new ApiException("Missing the required parameter 'extid' when calling extprojectGet(Async)");
        }

        return extprojectGetCall(extid, _callback);

    }

    /**
     * Gets Organization Unit by external id
     * Gets an Organization Unit by external id
     * @param extid The external id of the organization unit (required)
     * @return Project
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The matching project </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Unexpected error </td><td>  -  </td></tr>
     </table>
     */
    public Project extprojectGet(String extid) throws ApiException {
        ApiResponse<Project> localVarResp = extprojectGetWithHttpInfo(extid);
        return localVarResp.getData();
    }

    /**
     * Gets Organization Unit by external id
     * Gets an Organization Unit by external id
     * @param extid The external id of the organization unit (required)
     * @return ApiResponse&lt;Project&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The matching project </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Unexpected error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Project> extprojectGetWithHttpInfo(String extid) throws ApiException {
        okhttp3.Call localVarCall = extprojectGetValidateBeforeCall(extid, null);
        Type localVarReturnType = new TypeToken<Project>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Gets Organization Unit by external id (asynchronously)
     * Gets an Organization Unit by external id
     * @param extid The external id of the organization unit (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The matching project </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Unexpected error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call extprojectGetAsync(String extid, final ApiCallback<Project> _callback) throws ApiException {

        okhttp3.Call localVarCall = extprojectGetValidateBeforeCall(extid, _callback);
        Type localVarReturnType = new TypeToken<Project>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for orgunitsOrgidProjectsGet
     * @param orgid Id of the organization unit (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A list with projects </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Unexpected error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call orgunitsOrgidProjectsGetCall(BigDecimal orgid, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/orgunits/{orgid}/projects"
            .replace("{" + "orgid" + "}", localVarApiClient.escapeString(orgid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call orgunitsOrgidProjectsGetValidateBeforeCall(BigDecimal orgid, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'orgid' is set
        if (orgid == null) {
            throw new ApiException("Missing the required parameter 'orgid' when calling orgunitsOrgidProjectsGet(Async)");
        }

        return orgunitsOrgidProjectsGetCall(orgid, _callback);

    }

    /**
     * Organization Unit Projects
     * Returns the available projects for the organization unit 
     * @param orgid Id of the organization unit (required)
     * @return List&lt;Project&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A list with projects </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Unexpected error </td><td>  -  </td></tr>
     </table>
     */
    public List<Project> orgunitsOrgidProjectsGet(BigDecimal orgid) throws ApiException {
        ApiResponse<List<Project>> localVarResp = orgunitsOrgidProjectsGetWithHttpInfo(orgid);
        return localVarResp.getData();
    }

    /**
     * Organization Unit Projects
     * Returns the available projects for the organization unit 
     * @param orgid Id of the organization unit (required)
     * @return ApiResponse&lt;List&lt;Project&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A list with projects </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Unexpected error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<Project>> orgunitsOrgidProjectsGetWithHttpInfo(BigDecimal orgid) throws ApiException {
        okhttp3.Call localVarCall = orgunitsOrgidProjectsGetValidateBeforeCall(orgid, null);
        Type localVarReturnType = new TypeToken<List<Project>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Organization Unit Projects (asynchronously)
     * Returns the available projects for the organization unit 
     * @param orgid Id of the organization unit (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A list with projects </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Unexpected error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call orgunitsOrgidProjectsGetAsync(BigDecimal orgid, final ApiCallback<List<Project>> _callback) throws ApiException {

        okhttp3.Call localVarCall = orgunitsOrgidProjectsGetValidateBeforeCall(orgid, _callback);
        Type localVarReturnType = new TypeToken<List<Project>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for orgunitsOrgidProjectsPost
     * @param orgid Id of the organization unit (required)
     * @param body  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> The project was succesfully created created. </td><td>  * location - Location to the added participant <br>  </td></tr>
        <tr><td> 0 </td><td> Unexpected error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call orgunitsOrgidProjectsPostCall(Integer orgid, AddProject body, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = body;

        // create path and map variables
        String localVarPath = "/orgunits/{orgid}/projects"
            .replace("{" + "orgid" + "}", localVarApiClient.escapeString(orgid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call orgunitsOrgidProjectsPostValidateBeforeCall(Integer orgid, AddProject body, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'orgid' is set
        if (orgid == null) {
            throw new ApiException("Missing the required parameter 'orgid' when calling orgunitsOrgidProjectsPost(Async)");
        }

        // verify the required parameter 'body' is set
        if (body == null) {
            throw new ApiException("Missing the required parameter 'body' when calling orgunitsOrgidProjectsPost(Async)");
        }

        return orgunitsOrgidProjectsPostCall(orgid, body, _callback);

    }

    /**
     * Create project
     * Creates a new project 
     * @param orgid Id of the organization unit (required)
     * @param body  (required)
     * @return Project
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> The project was succesfully created created. </td><td>  * location - Location to the added participant <br>  </td></tr>
        <tr><td> 0 </td><td> Unexpected error </td><td>  -  </td></tr>
     </table>
     */
    public Project orgunitsOrgidProjectsPost(Integer orgid, AddProject body) throws ApiException {
        ApiResponse<Project> localVarResp = orgunitsOrgidProjectsPostWithHttpInfo(orgid, body);
        return localVarResp.getData();
    }

    /**
     * Create project
     * Creates a new project 
     * @param orgid Id of the organization unit (required)
     * @param body  (required)
     * @return ApiResponse&lt;Project&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> The project was succesfully created created. </td><td>  * location - Location to the added participant <br>  </td></tr>
        <tr><td> 0 </td><td> Unexpected error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Project> orgunitsOrgidProjectsPostWithHttpInfo(Integer orgid, AddProject body) throws ApiException {
        okhttp3.Call localVarCall = orgunitsOrgidProjectsPostValidateBeforeCall(orgid, body, null);
        Type localVarReturnType = new TypeToken<Project>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Create project (asynchronously)
     * Creates a new project 
     * @param orgid Id of the organization unit (required)
     * @param body  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> The project was succesfully created created. </td><td>  * location - Location to the added participant <br>  </td></tr>
        <tr><td> 0 </td><td> Unexpected error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call orgunitsOrgidProjectsPostAsync(Integer orgid, AddProject body, final ApiCallback<Project> _callback) throws ApiException {

        okhttp3.Call localVarCall = orgunitsOrgidProjectsPostValidateBeforeCall(orgid, body, _callback);
        Type localVarReturnType = new TypeToken<Project>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for orgunitsOrgidProjectsProjectidDelete
     * @param orgid Id of the organization unit (required)
     * @param projectid Id of the project (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> The project was deleted </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The project could not be found </td><td>  -  </td></tr>
        <tr><td> 406 </td><td> The project could not be delted due to constraints </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Unexpected error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call orgunitsOrgidProjectsProjectidDeleteCall(Integer orgid, Integer projectid, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/orgunits/{orgid}/projects/{projectid}"
            .replace("{" + "orgid" + "}", localVarApiClient.escapeString(orgid.toString()))
            .replace("{" + "projectid" + "}", localVarApiClient.escapeString(projectid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call orgunitsOrgidProjectsProjectidDeleteValidateBeforeCall(Integer orgid, Integer projectid, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'orgid' is set
        if (orgid == null) {
            throw new ApiException("Missing the required parameter 'orgid' when calling orgunitsOrgidProjectsProjectidDelete(Async)");
        }

        // verify the required parameter 'projectid' is set
        if (projectid == null) {
            throw new ApiException("Missing the required parameter 'projectid' when calling orgunitsOrgidProjectsProjectidDelete(Async)");
        }

        return orgunitsOrgidProjectsProjectidDeleteCall(orgid, projectid, _callback);

    }

    /**
     * Deletes the project
     * Deletes the project. The project can only be deleted if the project do not contain any participants. 
     * @param orgid Id of the organization unit (required)
     * @param projectid Id of the project (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> The project was deleted </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The project could not be found </td><td>  -  </td></tr>
        <tr><td> 406 </td><td> The project could not be delted due to constraints </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Unexpected error </td><td>  -  </td></tr>
     </table>
     */
    public void orgunitsOrgidProjectsProjectidDelete(Integer orgid, Integer projectid) throws ApiException {
        orgunitsOrgidProjectsProjectidDeleteWithHttpInfo(orgid, projectid);
    }

    /**
     * Deletes the project
     * Deletes the project. The project can only be deleted if the project do not contain any participants. 
     * @param orgid Id of the organization unit (required)
     * @param projectid Id of the project (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> The project was deleted </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The project could not be found </td><td>  -  </td></tr>
        <tr><td> 406 </td><td> The project could not be delted due to constraints </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Unexpected error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> orgunitsOrgidProjectsProjectidDeleteWithHttpInfo(Integer orgid, Integer projectid) throws ApiException {
        okhttp3.Call localVarCall = orgunitsOrgidProjectsProjectidDeleteValidateBeforeCall(orgid, projectid, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Deletes the project (asynchronously)
     * Deletes the project. The project can only be deleted if the project do not contain any participants. 
     * @param orgid Id of the organization unit (required)
     * @param projectid Id of the project (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> The project was deleted </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The project could not be found </td><td>  -  </td></tr>
        <tr><td> 406 </td><td> The project could not be delted due to constraints </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Unexpected error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call orgunitsOrgidProjectsProjectidDeleteAsync(Integer orgid, Integer projectid, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = orgunitsOrgidProjectsProjectidDeleteValidateBeforeCall(orgid, projectid, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for orgunitsOrgidProjectsProjectidGet
     * @param orgid Id of the organization unit (required)
     * @param projectid Id of the project (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Project information </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Unexpected error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call orgunitsOrgidProjectsProjectidGetCall(Integer orgid, Integer projectid, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/orgunits/{orgid}/projects/{projectid}"
            .replace("{" + "orgid" + "}", localVarApiClient.escapeString(orgid.toString()))
            .replace("{" + "projectid" + "}", localVarApiClient.escapeString(projectid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call orgunitsOrgidProjectsProjectidGetValidateBeforeCall(Integer orgid, Integer projectid, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'orgid' is set
        if (orgid == null) {
            throw new ApiException("Missing the required parameter 'orgid' when calling orgunitsOrgidProjectsProjectidGet(Async)");
        }

        // verify the required parameter 'projectid' is set
        if (projectid == null) {
            throw new ApiException("Missing the required parameter 'projectid' when calling orgunitsOrgidProjectsProjectidGet(Async)");
        }

        return orgunitsOrgidProjectsProjectidGetCall(orgid, projectid, _callback);

    }

    /**
     * Project information
     * Returns project information 
     * @param orgid Id of the organization unit (required)
     * @param projectid Id of the project (required)
     * @return Project
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Project information </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Unexpected error </td><td>  -  </td></tr>
     </table>
     */
    public Project orgunitsOrgidProjectsProjectidGet(Integer orgid, Integer projectid) throws ApiException {
        ApiResponse<Project> localVarResp = orgunitsOrgidProjectsProjectidGetWithHttpInfo(orgid, projectid);
        return localVarResp.getData();
    }

    /**
     * Project information
     * Returns project information 
     * @param orgid Id of the organization unit (required)
     * @param projectid Id of the project (required)
     * @return ApiResponse&lt;Project&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Project information </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Unexpected error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Project> orgunitsOrgidProjectsProjectidGetWithHttpInfo(Integer orgid, Integer projectid) throws ApiException {
        okhttp3.Call localVarCall = orgunitsOrgidProjectsProjectidGetValidateBeforeCall(orgid, projectid, null);
        Type localVarReturnType = new TypeToken<Project>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Project information (asynchronously)
     * Returns project information 
     * @param orgid Id of the organization unit (required)
     * @param projectid Id of the project (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Project information </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Unexpected error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call orgunitsOrgidProjectsProjectidGetAsync(Integer orgid, Integer projectid, final ApiCallback<Project> _callback) throws ApiException {

        okhttp3.Call localVarCall = orgunitsOrgidProjectsProjectidGetValidateBeforeCall(orgid, projectid, _callback);
        Type localVarReturnType = new TypeToken<Project>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for orgunitsOrgidProjectsProjectidParticipantsGet
     * @param orgid Id of the organization unit (required)
     * @param projectid Id of the project (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Project information </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Unexpected error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call orgunitsOrgidProjectsProjectidParticipantsGetCall(Integer orgid, Integer projectid, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/orgunits/{orgid}/projects/{projectid}/participants"
            .replace("{" + "orgid" + "}", localVarApiClient.escapeString(orgid.toString()))
            .replace("{" + "projectid" + "}", localVarApiClient.escapeString(projectid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call orgunitsOrgidProjectsProjectidParticipantsGetValidateBeforeCall(Integer orgid, Integer projectid, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'orgid' is set
        if (orgid == null) {
            throw new ApiException("Missing the required parameter 'orgid' when calling orgunitsOrgidProjectsProjectidParticipantsGet(Async)");
        }

        // verify the required parameter 'projectid' is set
        if (projectid == null) {
            throw new ApiException("Missing the required parameter 'projectid' when calling orgunitsOrgidProjectsProjectidParticipantsGet(Async)");
        }

        return orgunitsOrgidProjectsProjectidParticipantsGetCall(orgid, projectid, _callback);

    }

    /**
     * Project participants
     * Returns project participants 
     * @param orgid Id of the organization unit (required)
     * @param projectid Id of the project (required)
     * @return List&lt;Participation&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Project information </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Unexpected error </td><td>  -  </td></tr>
     </table>
     */
    public List<Participation> orgunitsOrgidProjectsProjectidParticipantsGet(Integer orgid, Integer projectid) throws ApiException {
        ApiResponse<List<Participation>> localVarResp = orgunitsOrgidProjectsProjectidParticipantsGetWithHttpInfo(orgid, projectid);
        return localVarResp.getData();
    }

    /**
     * Project participants
     * Returns project participants 
     * @param orgid Id of the organization unit (required)
     * @param projectid Id of the project (required)
     * @return ApiResponse&lt;List&lt;Participation&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Project information </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Unexpected error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<Participation>> orgunitsOrgidProjectsProjectidParticipantsGetWithHttpInfo(Integer orgid, Integer projectid) throws ApiException {
        okhttp3.Call localVarCall = orgunitsOrgidProjectsProjectidParticipantsGetValidateBeforeCall(orgid, projectid, null);
        Type localVarReturnType = new TypeToken<List<Participation>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Project participants (asynchronously)
     * Returns project participants 
     * @param orgid Id of the organization unit (required)
     * @param projectid Id of the project (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Project information </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Unexpected error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call orgunitsOrgidProjectsProjectidParticipantsGetAsync(Integer orgid, Integer projectid, final ApiCallback<List<Participation>> _callback) throws ApiException {

        okhttp3.Call localVarCall = orgunitsOrgidProjectsProjectidParticipantsGetValidateBeforeCall(orgid, projectid, _callback);
        Type localVarReturnType = new TypeToken<List<Participation>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for orgunitsOrgidProjectsProjectidParticipantsParticipantIdActivatePost
     * @param orgid Id of the organization unit (required)
     * @param projectid Id of the project (required)
     * @param participantId Id of the participant (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Participant is activated </td><td>  -  </td></tr>
        <tr><td> 406 </td><td> The participant could not be activated </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> The participant could not be activated due to invalid project state </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Unexpected error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call orgunitsOrgidProjectsProjectidParticipantsParticipantIdActivatePostCall(Integer orgid, Integer projectid, Integer participantId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/orgunits/{orgid}/projects/{projectid}/participants/${participantId}/activate"
            .replace("{" + "orgid" + "}", localVarApiClient.escapeString(orgid.toString()))
            .replace("{" + "projectid" + "}", localVarApiClient.escapeString(projectid.toString()))
            .replace("{" + "participantId" + "}", localVarApiClient.escapeString(participantId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call orgunitsOrgidProjectsProjectidParticipantsParticipantIdActivatePostValidateBeforeCall(Integer orgid, Integer projectid, Integer participantId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'orgid' is set
        if (orgid == null) {
            throw new ApiException("Missing the required parameter 'orgid' when calling orgunitsOrgidProjectsProjectidParticipantsParticipantIdActivatePost(Async)");
        }

        // verify the required parameter 'projectid' is set
        if (projectid == null) {
            throw new ApiException("Missing the required parameter 'projectid' when calling orgunitsOrgidProjectsProjectidParticipantsParticipantIdActivatePost(Async)");
        }

        // verify the required parameter 'participantId' is set
        if (participantId == null) {
            throw new ApiException("Missing the required parameter 'participantId' when calling orgunitsOrgidProjectsProjectidParticipantsParticipantIdActivatePost(Async)");
        }

        return orgunitsOrgidProjectsProjectidParticipantsParticipantIdActivatePostCall(orgid, projectid, participantId, _callback);

    }

    /**
     * Activate participant
     * Activates a participant so that it can be used 
     * @param orgid Id of the organization unit (required)
     * @param projectid Id of the project (required)
     * @param participantId Id of the participant (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Participant is activated </td><td>  -  </td></tr>
        <tr><td> 406 </td><td> The participant could not be activated </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> The participant could not be activated due to invalid project state </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Unexpected error </td><td>  -  </td></tr>
     </table>
     */
    public void orgunitsOrgidProjectsProjectidParticipantsParticipantIdActivatePost(Integer orgid, Integer projectid, Integer participantId) throws ApiException {
        orgunitsOrgidProjectsProjectidParticipantsParticipantIdActivatePostWithHttpInfo(orgid, projectid, participantId);
    }

    /**
     * Activate participant
     * Activates a participant so that it can be used 
     * @param orgid Id of the organization unit (required)
     * @param projectid Id of the project (required)
     * @param participantId Id of the participant (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Participant is activated </td><td>  -  </td></tr>
        <tr><td> 406 </td><td> The participant could not be activated </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> The participant could not be activated due to invalid project state </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Unexpected error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> orgunitsOrgidProjectsProjectidParticipantsParticipantIdActivatePostWithHttpInfo(Integer orgid, Integer projectid, Integer participantId) throws ApiException {
        okhttp3.Call localVarCall = orgunitsOrgidProjectsProjectidParticipantsParticipantIdActivatePostValidateBeforeCall(orgid, projectid, participantId, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Activate participant (asynchronously)
     * Activates a participant so that it can be used 
     * @param orgid Id of the organization unit (required)
     * @param projectid Id of the project (required)
     * @param participantId Id of the participant (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Participant is activated </td><td>  -  </td></tr>
        <tr><td> 406 </td><td> The participant could not be activated </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> The participant could not be activated due to invalid project state </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Unexpected error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call orgunitsOrgidProjectsProjectidParticipantsParticipantIdActivatePostAsync(Integer orgid, Integer projectid, Integer participantId, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = orgunitsOrgidProjectsProjectidParticipantsParticipantIdActivatePostValidateBeforeCall(orgid, projectid, participantId, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for orgunitsOrgidProjectsProjectidParticipantsParticipantIdDelete
     * @param orgid Id of the organization unit (required)
     * @param projectid Id of the project (required)
     * @param participantId Participant id (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Participant is deleted </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> The delete failed due to internal constraints </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Unexpected error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call orgunitsOrgidProjectsProjectidParticipantsParticipantIdDeleteCall(Integer orgid, Integer projectid, Integer participantId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/orgunits/{orgid}/projects/{projectid}/participants/${participantId}"
            .replace("{" + "orgid" + "}", localVarApiClient.escapeString(orgid.toString()))
            .replace("{" + "projectid" + "}", localVarApiClient.escapeString(projectid.toString()))
            .replace("{" + "participantId" + "}", localVarApiClient.escapeString(participantId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call orgunitsOrgidProjectsProjectidParticipantsParticipantIdDeleteValidateBeforeCall(Integer orgid, Integer projectid, Integer participantId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'orgid' is set
        if (orgid == null) {
            throw new ApiException("Missing the required parameter 'orgid' when calling orgunitsOrgidProjectsProjectidParticipantsParticipantIdDelete(Async)");
        }

        // verify the required parameter 'projectid' is set
        if (projectid == null) {
            throw new ApiException("Missing the required parameter 'projectid' when calling orgunitsOrgidProjectsProjectidParticipantsParticipantIdDelete(Async)");
        }

        // verify the required parameter 'participantId' is set
        if (participantId == null) {
            throw new ApiException("Missing the required parameter 'participantId' when calling orgunitsOrgidProjectsProjectidParticipantsParticipantIdDelete(Async)");
        }

        return orgunitsOrgidProjectsProjectidParticipantsParticipantIdDeleteCall(orgid, projectid, participantId, _callback);

    }

    /**
     * Deletes a participant
     * Deletes a participant. The user itself will still remain but any state related to the project will be deleted. It might not be possible due to constraints from the products in the project to delete the participant. However this can only be determined at the time of the delete. If a delete fails the participant will have their inError flag set. 
     * @param orgid Id of the organization unit (required)
     * @param projectid Id of the project (required)
     * @param participantId Participant id (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Participant is deleted </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> The delete failed due to internal constraints </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Unexpected error </td><td>  -  </td></tr>
     </table>
     */
    public void orgunitsOrgidProjectsProjectidParticipantsParticipantIdDelete(Integer orgid, Integer projectid, Integer participantId) throws ApiException {
        orgunitsOrgidProjectsProjectidParticipantsParticipantIdDeleteWithHttpInfo(orgid, projectid, participantId);
    }

    /**
     * Deletes a participant
     * Deletes a participant. The user itself will still remain but any state related to the project will be deleted. It might not be possible due to constraints from the products in the project to delete the participant. However this can only be determined at the time of the delete. If a delete fails the participant will have their inError flag set. 
     * @param orgid Id of the organization unit (required)
     * @param projectid Id of the project (required)
     * @param participantId Participant id (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Participant is deleted </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> The delete failed due to internal constraints </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Unexpected error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> orgunitsOrgidProjectsProjectidParticipantsParticipantIdDeleteWithHttpInfo(Integer orgid, Integer projectid, Integer participantId) throws ApiException {
        okhttp3.Call localVarCall = orgunitsOrgidProjectsProjectidParticipantsParticipantIdDeleteValidateBeforeCall(orgid, projectid, participantId, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Deletes a participant (asynchronously)
     * Deletes a participant. The user itself will still remain but any state related to the project will be deleted. It might not be possible due to constraints from the products in the project to delete the participant. However this can only be determined at the time of the delete. If a delete fails the participant will have their inError flag set. 
     * @param orgid Id of the organization unit (required)
     * @param projectid Id of the project (required)
     * @param participantId Participant id (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Participant is deleted </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> The delete failed due to internal constraints </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Unexpected error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call orgunitsOrgidProjectsProjectidParticipantsParticipantIdDeleteAsync(Integer orgid, Integer projectid, Integer participantId, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = orgunitsOrgidProjectsProjectidParticipantsParticipantIdDeleteValidateBeforeCall(orgid, projectid, participantId, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for orgunitsOrgidProjectsProjectidParticipantsParticipantIdLoginlinkPost
     * @param orgid Id of the organization unit (required)
     * @param projectid Id of the project (required)
     * @param participantId Id of the participant (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A generated one time use login link </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> The participant is not in a state where a loginlink is possible to get </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Unexpected error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call orgunitsOrgidProjectsProjectidParticipantsParticipantIdLoginlinkPostCall(Integer orgid, Integer projectid, Integer participantId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/orgunits/{orgid}/projects/{projectid}/participants/${participantId}/loginlink"
            .replace("{" + "orgid" + "}", localVarApiClient.escapeString(orgid.toString()))
            .replace("{" + "projectid" + "}", localVarApiClient.escapeString(projectid.toString()))
            .replace("{" + "participantId" + "}", localVarApiClient.escapeString(participantId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call orgunitsOrgidProjectsProjectidParticipantsParticipantIdLoginlinkPostValidateBeforeCall(Integer orgid, Integer projectid, Integer participantId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'orgid' is set
        if (orgid == null) {
            throw new ApiException("Missing the required parameter 'orgid' when calling orgunitsOrgidProjectsProjectidParticipantsParticipantIdLoginlinkPost(Async)");
        }

        // verify the required parameter 'projectid' is set
        if (projectid == null) {
            throw new ApiException("Missing the required parameter 'projectid' when calling orgunitsOrgidProjectsProjectidParticipantsParticipantIdLoginlinkPost(Async)");
        }

        // verify the required parameter 'participantId' is set
        if (participantId == null) {
            throw new ApiException("Missing the required parameter 'participantId' when calling orgunitsOrgidProjectsProjectidParticipantsParticipantIdLoginlinkPost(Async)");
        }

        return orgunitsOrgidProjectsProjectidParticipantsParticipantIdLoginlinkPostCall(orgid, projectid, participantId, _callback);

    }

    /**
     * Participant login link
     * Returns a single sign on link for the participant. The link is only usable once and should be used directly. The link expires after a few minutes.  This operation requires the *login link* permission. 
     * @param orgid Id of the organization unit (required)
     * @param projectid Id of the project (required)
     * @param participantId Id of the participant (required)
     * @return LoginLink
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A generated one time use login link </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> The participant is not in a state where a loginlink is possible to get </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Unexpected error </td><td>  -  </td></tr>
     </table>
     */
    public LoginLink orgunitsOrgidProjectsProjectidParticipantsParticipantIdLoginlinkPost(Integer orgid, Integer projectid, Integer participantId) throws ApiException {
        ApiResponse<LoginLink> localVarResp = orgunitsOrgidProjectsProjectidParticipantsParticipantIdLoginlinkPostWithHttpInfo(orgid, projectid, participantId);
        return localVarResp.getData();
    }

    /**
     * Participant login link
     * Returns a single sign on link for the participant. The link is only usable once and should be used directly. The link expires after a few minutes.  This operation requires the *login link* permission. 
     * @param orgid Id of the organization unit (required)
     * @param projectid Id of the project (required)
     * @param participantId Id of the participant (required)
     * @return ApiResponse&lt;LoginLink&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A generated one time use login link </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> The participant is not in a state where a loginlink is possible to get </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Unexpected error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<LoginLink> orgunitsOrgidProjectsProjectidParticipantsParticipantIdLoginlinkPostWithHttpInfo(Integer orgid, Integer projectid, Integer participantId) throws ApiException {
        okhttp3.Call localVarCall = orgunitsOrgidProjectsProjectidParticipantsParticipantIdLoginlinkPostValidateBeforeCall(orgid, projectid, participantId, null);
        Type localVarReturnType = new TypeToken<LoginLink>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Participant login link (asynchronously)
     * Returns a single sign on link for the participant. The link is only usable once and should be used directly. The link expires after a few minutes.  This operation requires the *login link* permission. 
     * @param orgid Id of the organization unit (required)
     * @param projectid Id of the project (required)
     * @param participantId Id of the participant (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A generated one time use login link </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> The participant is not in a state where a loginlink is possible to get </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Unexpected error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call orgunitsOrgidProjectsProjectidParticipantsParticipantIdLoginlinkPostAsync(Integer orgid, Integer projectid, Integer participantId, final ApiCallback<LoginLink> _callback) throws ApiException {

        okhttp3.Call localVarCall = orgunitsOrgidProjectsProjectidParticipantsParticipantIdLoginlinkPostValidateBeforeCall(orgid, projectid, participantId, _callback);
        Type localVarReturnType = new TypeToken<LoginLink>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for orgunitsOrgidProjectsProjectidParticipantsPost
     * @param orgid Id of the organization unit (required)
     * @param projectid Id of the project (required)
     * @param body  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Participant was created </td><td>  * location - Location to the added participant <br>  </td></tr>
        <tr><td> 409 </td><td> Participant with the same email already existed. Location header contains the url to the already existing participant. </td><td>  * location - Location to the added participant <br>  </td></tr>
        <tr><td> 0 </td><td> Unexpected error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call orgunitsOrgidProjectsProjectidParticipantsPostCall(Integer orgid, Integer projectid, AddParticipant body, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = body;

        // create path and map variables
        String localVarPath = "/orgunits/{orgid}/projects/{projectid}/participants"
            .replace("{" + "orgid" + "}", localVarApiClient.escapeString(orgid.toString()))
            .replace("{" + "projectid" + "}", localVarApiClient.escapeString(projectid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call orgunitsOrgidProjectsProjectidParticipantsPostValidateBeforeCall(Integer orgid, Integer projectid, AddParticipant body, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'orgid' is set
        if (orgid == null) {
            throw new ApiException("Missing the required parameter 'orgid' when calling orgunitsOrgidProjectsProjectidParticipantsPost(Async)");
        }

        // verify the required parameter 'projectid' is set
        if (projectid == null) {
            throw new ApiException("Missing the required parameter 'projectid' when calling orgunitsOrgidProjectsProjectidParticipantsPost(Async)");
        }

        // verify the required parameter 'body' is set
        if (body == null) {
            throw new ApiException("Missing the required parameter 'body' when calling orgunitsOrgidProjectsProjectidParticipantsPost(Async)");
        }

        return orgunitsOrgidProjectsProjectidParticipantsPostCall(orgid, projectid, body, _callback);

    }

    /**
     * Add participant
     * Add a user to the project. Participant information is created for the user. In the body object, only one of either email or userid must be specified. The participant needs to be activated before it the user can access it. 
     * @param orgid Id of the organization unit (required)
     * @param projectid Id of the project (required)
     * @param body  (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Participant was created </td><td>  * location - Location to the added participant <br>  </td></tr>
        <tr><td> 409 </td><td> Participant with the same email already existed. Location header contains the url to the already existing participant. </td><td>  * location - Location to the added participant <br>  </td></tr>
        <tr><td> 0 </td><td> Unexpected error </td><td>  -  </td></tr>
     </table>
     */
    public void orgunitsOrgidProjectsProjectidParticipantsPost(Integer orgid, Integer projectid, AddParticipant body) throws ApiException {
        orgunitsOrgidProjectsProjectidParticipantsPostWithHttpInfo(orgid, projectid, body);
    }

    /**
     * Add participant
     * Add a user to the project. Participant information is created for the user. In the body object, only one of either email or userid must be specified. The participant needs to be activated before it the user can access it. 
     * @param orgid Id of the organization unit (required)
     * @param projectid Id of the project (required)
     * @param body  (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Participant was created </td><td>  * location - Location to the added participant <br>  </td></tr>
        <tr><td> 409 </td><td> Participant with the same email already existed. Location header contains the url to the already existing participant. </td><td>  * location - Location to the added participant <br>  </td></tr>
        <tr><td> 0 </td><td> Unexpected error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> orgunitsOrgidProjectsProjectidParticipantsPostWithHttpInfo(Integer orgid, Integer projectid, AddParticipant body) throws ApiException {
        okhttp3.Call localVarCall = orgunitsOrgidProjectsProjectidParticipantsPostValidateBeforeCall(orgid, projectid, body, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Add participant (asynchronously)
     * Add a user to the project. Participant information is created for the user. In the body object, only one of either email or userid must be specified. The participant needs to be activated before it the user can access it. 
     * @param orgid Id of the organization unit (required)
     * @param projectid Id of the project (required)
     * @param body  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Participant was created </td><td>  * location - Location to the added participant <br>  </td></tr>
        <tr><td> 409 </td><td> Participant with the same email already existed. Location header contains the url to the already existing participant. </td><td>  * location - Location to the added participant <br>  </td></tr>
        <tr><td> 0 </td><td> Unexpected error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call orgunitsOrgidProjectsProjectidParticipantsPostAsync(Integer orgid, Integer projectid, AddParticipant body, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = orgunitsOrgidProjectsProjectidParticipantsPostValidateBeforeCall(orgid, projectid, body, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for orgunitsOrgidProjectsProjectidPatch
     * @param orgid Id of the organization unit (required)
     * @param projectid Id of the project (required)
     * @param body  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The project was succesfully updated </td><td>  * location - Location to the added participant <br>  </td></tr>
        <tr><td> 0 </td><td> Unexpected error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call orgunitsOrgidProjectsProjectidPatchCall(Integer orgid, Integer projectid, UpdateProject body, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = body;

        // create path and map variables
        String localVarPath = "/orgunits/{orgid}/projects/{projectid}"
            .replace("{" + "orgid" + "}", localVarApiClient.escapeString(orgid.toString()))
            .replace("{" + "projectid" + "}", localVarApiClient.escapeString(projectid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "PATCH", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call orgunitsOrgidProjectsProjectidPatchValidateBeforeCall(Integer orgid, Integer projectid, UpdateProject body, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'orgid' is set
        if (orgid == null) {
            throw new ApiException("Missing the required parameter 'orgid' when calling orgunitsOrgidProjectsProjectidPatch(Async)");
        }

        // verify the required parameter 'projectid' is set
        if (projectid == null) {
            throw new ApiException("Missing the required parameter 'projectid' when calling orgunitsOrgidProjectsProjectidPatch(Async)");
        }

        // verify the required parameter 'body' is set
        if (body == null) {
            throw new ApiException("Missing the required parameter 'body' when calling orgunitsOrgidProjectsProjectidPatch(Async)");
        }

        return orgunitsOrgidProjectsProjectidPatchCall(orgid, projectid, body, _callback);

    }

    /**
     * Update project information
     * Updates information about a project. Values are only updated if the fields are specified in the input 
     * @param orgid Id of the organization unit (required)
     * @param projectid Id of the project (required)
     * @param body  (required)
     * @return Project
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The project was succesfully updated </td><td>  * location - Location to the added participant <br>  </td></tr>
        <tr><td> 0 </td><td> Unexpected error </td><td>  -  </td></tr>
     </table>
     */
    public Project orgunitsOrgidProjectsProjectidPatch(Integer orgid, Integer projectid, UpdateProject body) throws ApiException {
        ApiResponse<Project> localVarResp = orgunitsOrgidProjectsProjectidPatchWithHttpInfo(orgid, projectid, body);
        return localVarResp.getData();
    }

    /**
     * Update project information
     * Updates information about a project. Values are only updated if the fields are specified in the input 
     * @param orgid Id of the organization unit (required)
     * @param projectid Id of the project (required)
     * @param body  (required)
     * @return ApiResponse&lt;Project&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The project was succesfully updated </td><td>  * location - Location to the added participant <br>  </td></tr>
        <tr><td> 0 </td><td> Unexpected error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Project> orgunitsOrgidProjectsProjectidPatchWithHttpInfo(Integer orgid, Integer projectid, UpdateProject body) throws ApiException {
        okhttp3.Call localVarCall = orgunitsOrgidProjectsProjectidPatchValidateBeforeCall(orgid, projectid, body, null);
        Type localVarReturnType = new TypeToken<Project>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Update project information (asynchronously)
     * Updates information about a project. Values are only updated if the fields are specified in the input 
     * @param orgid Id of the organization unit (required)
     * @param projectid Id of the project (required)
     * @param body  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The project was succesfully updated </td><td>  * location - Location to the added participant <br>  </td></tr>
        <tr><td> 0 </td><td> Unexpected error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call orgunitsOrgidProjectsProjectidPatchAsync(Integer orgid, Integer projectid, UpdateProject body, final ApiCallback<Project> _callback) throws ApiException {

        okhttp3.Call localVarCall = orgunitsOrgidProjectsProjectidPatchValidateBeforeCall(orgid, projectid, body, _callback);
        Type localVarReturnType = new TypeToken<Project>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for orgunitsOrgidProjectsProjectidTeammembersGet
     * @param orgid Id of the organization unit (required)
     * @param projectid Id of the project (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Project information </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Unexpected error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call orgunitsOrgidProjectsProjectidTeammembersGetCall(Integer orgid, Integer projectid, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/orgunits/{orgid}/projects/{projectid}/teammembers"
            .replace("{" + "orgid" + "}", localVarApiClient.escapeString(orgid.toString()))
            .replace("{" + "projectid" + "}", localVarApiClient.escapeString(projectid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call orgunitsOrgidProjectsProjectidTeammembersGetValidateBeforeCall(Integer orgid, Integer projectid, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'orgid' is set
        if (orgid == null) {
            throw new ApiException("Missing the required parameter 'orgid' when calling orgunitsOrgidProjectsProjectidTeammembersGet(Async)");
        }

        // verify the required parameter 'projectid' is set
        if (projectid == null) {
            throw new ApiException("Missing the required parameter 'projectid' when calling orgunitsOrgidProjectsProjectidTeammembersGet(Async)");
        }

        return orgunitsOrgidProjectsProjectidTeammembersGetCall(orgid, projectid, _callback);

    }

    /**
     * Project team members
     * Returns the project team members. A team member is a .... 
     * @param orgid Id of the organization unit (required)
     * @param projectid Id of the project (required)
     * @return List&lt;ProjectTeamMember&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Project information </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Unexpected error </td><td>  -  </td></tr>
     </table>
     */
    public List<ProjectTeamMember> orgunitsOrgidProjectsProjectidTeammembersGet(Integer orgid, Integer projectid) throws ApiException {
        ApiResponse<List<ProjectTeamMember>> localVarResp = orgunitsOrgidProjectsProjectidTeammembersGetWithHttpInfo(orgid, projectid);
        return localVarResp.getData();
    }

    /**
     * Project team members
     * Returns the project team members. A team member is a .... 
     * @param orgid Id of the organization unit (required)
     * @param projectid Id of the project (required)
     * @return ApiResponse&lt;List&lt;ProjectTeamMember&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Project information </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Unexpected error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<ProjectTeamMember>> orgunitsOrgidProjectsProjectidTeammembersGetWithHttpInfo(Integer orgid, Integer projectid) throws ApiException {
        okhttp3.Call localVarCall = orgunitsOrgidProjectsProjectidTeammembersGetValidateBeforeCall(orgid, projectid, null);
        Type localVarReturnType = new TypeToken<List<ProjectTeamMember>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Project team members (asynchronously)
     * Returns the project team members. A team member is a .... 
     * @param orgid Id of the organization unit (required)
     * @param projectid Id of the project (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Project information </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Unexpected error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call orgunitsOrgidProjectsProjectidTeammembersGetAsync(Integer orgid, Integer projectid, final ApiCallback<List<ProjectTeamMember>> _callback) throws ApiException {

        okhttp3.Call localVarCall = orgunitsOrgidProjectsProjectidTeammembersGetValidateBeforeCall(orgid, projectid, _callback);
        Type localVarReturnType = new TypeToken<List<ProjectTeamMember>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
