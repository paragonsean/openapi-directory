/*
 * Learnifier
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * AddUser
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:41:42.183794-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class AddUser {
  public static final String SERIALIZED_NAME_DISPLAY_NAME = "displayName";
  @SerializedName(SERIALIZED_NAME_DISPLAY_NAME)
  private String displayName;

  public static final String SERIALIZED_NAME_EXTERNAL_ID = "externalId";
  @SerializedName(SERIALIZED_NAME_EXTERNAL_ID)
  private String externalId;

  public static final String SERIALIZED_NAME_FIRST_NAME = "firstName";
  @SerializedName(SERIALIZED_NAME_FIRST_NAME)
  private String firstName;

  public static final String SERIALIZED_NAME_HARD_LOCK = "hardLock";
  @SerializedName(SERIALIZED_NAME_HARD_LOCK)
  private Boolean hardLock;

  public static final String SERIALIZED_NAME_HOME_ORG = "homeOrg";
  @SerializedName(SERIALIZED_NAME_HOME_ORG)
  private Long homeOrg;

  public static final String SERIALIZED_NAME_LAST_NAME = "lastName";
  @SerializedName(SERIALIZED_NAME_LAST_NAME)
  private Object lastName;

  public static final String SERIALIZED_NAME_LOCALE = "locale";
  @SerializedName(SERIALIZED_NAME_LOCALE)
  private String locale;

  public static final String SERIALIZED_NAME_PRIMARY_EMAIL = "primaryEmail";
  @SerializedName(SERIALIZED_NAME_PRIMARY_EMAIL)
  private String primaryEmail;

  public AddUser() {
  }

  public AddUser displayName(String displayName) {
    this.displayName = displayName;
    return this;
  }

  /**
   * The name shown when the user is listed
   * @return displayName
   */
  @javax.annotation.Nullable
  public String getDisplayName() {
    return displayName;
  }

  public void setDisplayName(String displayName) {
    this.displayName = displayName;
  }


  public AddUser externalId(String externalId) {
    this.externalId = externalId;
    return this;
  }

  /**
   * The external id (foreign key). Must not exceed 255 characters.
   * @return externalId
   */
  @javax.annotation.Nullable
  public String getExternalId() {
    return externalId;
  }

  public void setExternalId(String externalId) {
    this.externalId = externalId;
  }


  public AddUser firstName(String firstName) {
    this.firstName = firstName;
    return this;
  }

  /**
   * The first (given) name of the user
   * @return firstName
   */
  @javax.annotation.Nullable
  public String getFirstName() {
    return firstName;
  }

  public void setFirstName(String firstName) {
    this.firstName = firstName;
  }


  public AddUser hardLock(Boolean hardLock) {
    this.hardLock = hardLock;
    return this;
  }

  /**
   * True if the user should be locked from the system
   * @return hardLock
   */
  @javax.annotation.Nullable
  public Boolean getHardLock() {
    return hardLock;
  }

  public void setHardLock(Boolean hardLock) {
    this.hardLock = hardLock;
  }


  public AddUser homeOrg(Long homeOrg) {
    this.homeOrg = homeOrg;
    return this;
  }

  /**
   * The primary organization for the user. Must match the id of an Organization Unit.
   * @return homeOrg
   */
  @javax.annotation.Nullable
  public Long getHomeOrg() {
    return homeOrg;
  }

  public void setHomeOrg(Long homeOrg) {
    this.homeOrg = homeOrg;
  }


  public AddUser lastName(Object lastName) {
    this.lastName = lastName;
    return this;
  }

  /**
   * The last name (surname) of the user
   * @return lastName
   */
  @javax.annotation.Nullable
  public Object getLastName() {
    return lastName;
  }

  public void setLastName(Object lastName) {
    this.lastName = lastName;
  }


  public AddUser locale(String locale) {
    this.locale = locale;
    return this;
  }

  /**
   * The user&#39;s preferred language/locale setting. Affects date and number formatting.
   * @return locale
   */
  @javax.annotation.Nullable
  public String getLocale() {
    return locale;
  }

  public void setLocale(String locale) {
    this.locale = locale;
  }


  public AddUser primaryEmail(String primaryEmail) {
    this.primaryEmail = primaryEmail;
    return this;
  }

  /**
   * The primary email for the user. Used for communication from the platform.
   * @return primaryEmail
   */
  @javax.annotation.Nullable
  public String getPrimaryEmail() {
    return primaryEmail;
  }

  public void setPrimaryEmail(String primaryEmail) {
    this.primaryEmail = primaryEmail;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    AddUser addUser = (AddUser) o;
    return Objects.equals(this.displayName, addUser.displayName) &&
        Objects.equals(this.externalId, addUser.externalId) &&
        Objects.equals(this.firstName, addUser.firstName) &&
        Objects.equals(this.hardLock, addUser.hardLock) &&
        Objects.equals(this.homeOrg, addUser.homeOrg) &&
        Objects.equals(this.lastName, addUser.lastName) &&
        Objects.equals(this.locale, addUser.locale) &&
        Objects.equals(this.primaryEmail, addUser.primaryEmail);
  }

  @Override
  public int hashCode() {
    return Objects.hash(displayName, externalId, firstName, hardLock, homeOrg, lastName, locale, primaryEmail);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class AddUser {\n");
    sb.append("    displayName: ").append(toIndentedString(displayName)).append("\n");
    sb.append("    externalId: ").append(toIndentedString(externalId)).append("\n");
    sb.append("    firstName: ").append(toIndentedString(firstName)).append("\n");
    sb.append("    hardLock: ").append(toIndentedString(hardLock)).append("\n");
    sb.append("    homeOrg: ").append(toIndentedString(homeOrg)).append("\n");
    sb.append("    lastName: ").append(toIndentedString(lastName)).append("\n");
    sb.append("    locale: ").append(toIndentedString(locale)).append("\n");
    sb.append("    primaryEmail: ").append(toIndentedString(primaryEmail)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("displayName");
    openapiFields.add("externalId");
    openapiFields.add("firstName");
    openapiFields.add("hardLock");
    openapiFields.add("homeOrg");
    openapiFields.add("lastName");
    openapiFields.add("locale");
    openapiFields.add("primaryEmail");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to AddUser
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!AddUser.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in AddUser is not found in the empty JSON string", AddUser.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!AddUser.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `AddUser` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("displayName") != null && !jsonObj.get("displayName").isJsonNull()) && !jsonObj.get("displayName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `displayName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("displayName").toString()));
      }
      if ((jsonObj.get("externalId") != null && !jsonObj.get("externalId").isJsonNull()) && !jsonObj.get("externalId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `externalId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("externalId").toString()));
      }
      if ((jsonObj.get("firstName") != null && !jsonObj.get("firstName").isJsonNull()) && !jsonObj.get("firstName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `firstName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("firstName").toString()));
      }
      if ((jsonObj.get("locale") != null && !jsonObj.get("locale").isJsonNull()) && !jsonObj.get("locale").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `locale` to be a primitive type in the JSON string but got `%s`", jsonObj.get("locale").toString()));
      }
      if ((jsonObj.get("primaryEmail") != null && !jsonObj.get("primaryEmail").isJsonNull()) && !jsonObj.get("primaryEmail").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `primaryEmail` to be a primitive type in the JSON string but got `%s`", jsonObj.get("primaryEmail").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!AddUser.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'AddUser' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<AddUser> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(AddUser.class));

       return (TypeAdapter<T>) new TypeAdapter<AddUser>() {
           @Override
           public void write(JsonWriter out, AddUser value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public AddUser read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of AddUser given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of AddUser
   * @throws IOException if the JSON string is invalid with respect to AddUser
   */
  public static AddUser fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, AddUser.class);
  }

  /**
   * Convert an instance of AddUser to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

