/**
 * Learnifier
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The OrgUnit model module.
 * @module model/OrgUnit
 * @version 1.1.0
 */
class OrgUnit {
    /**
     * Constructs a new <code>OrgUnit</code>.
     * @alias module:model/OrgUnit
     * @param id {Number} Unique identifier representing a specific organization unit. Id numbers are never reused.
     * @param type {String} The organization unit type. The only type is *client* at the moment.
     */
    constructor(id, type) { 
        
        OrgUnit.initialize(this, id, type);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, id, type) { 
        obj['id'] = id;
        obj['type'] = type;
    }

    /**
     * Constructs a <code>OrgUnit</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/OrgUnit} obj Optional instance to populate.
     * @return {module:model/OrgUnit} The populated <code>OrgUnit</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new OrgUnit();

            if (data.hasOwnProperty('externalId')) {
                obj['externalId'] = ApiClient.convertToType(data['externalId'], 'String');
            }
            if (data.hasOwnProperty('id')) {
                obj['id'] = ApiClient.convertToType(data['id'], 'Number');
            }
            if (data.hasOwnProperty('name')) {
                obj['name'] = ApiClient.convertToType(data['name'], 'String');
            }
            if (data.hasOwnProperty('parentId')) {
                obj['parentId'] = ApiClient.convertToType(data['parentId'], 'Number');
            }
            if (data.hasOwnProperty('type')) {
                obj['type'] = ApiClient.convertToType(data['type'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>OrgUnit</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>OrgUnit</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of OrgUnit.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // ensure the json data is a string
        if (data['externalId'] && !(typeof data['externalId'] === 'string' || data['externalId'] instanceof String)) {
            throw new Error("Expected the field `externalId` to be a primitive type in the JSON string but got " + data['externalId']);
        }
        // ensure the json data is a string
        if (data['name'] && !(typeof data['name'] === 'string' || data['name'] instanceof String)) {
            throw new Error("Expected the field `name` to be a primitive type in the JSON string but got " + data['name']);
        }
        // ensure the json data is a string
        if (data['type'] && !(typeof data['type'] === 'string' || data['type'] instanceof String)) {
            throw new Error("Expected the field `type` to be a primitive type in the JSON string but got " + data['type']);
        }

        return true;
    }


}

OrgUnit.RequiredProperties = ["id", "type"];

/**
 * The external id (foreign key). Must not exceed 255 characters.
 * @member {String} externalId
 */
OrgUnit.prototype['externalId'] = undefined;

/**
 * Unique identifier representing a specific organization unit. Id numbers are never reused.
 * @member {Number} id
 */
OrgUnit.prototype['id'] = undefined;

/**
 * The name of the client.
 * @member {String} name
 */
OrgUnit.prototype['name'] = undefined;

/**
 * Unique identifier of the parent or *null* if there is no parent.
 * @member {Number} parentId
 */
OrgUnit.prototype['parentId'] = undefined;

/**
 * The organization unit type. The only type is *client* at the moment.
 * @member {String} type
 */
OrgUnit.prototype['type'] = undefined;






export default OrgUnit;

