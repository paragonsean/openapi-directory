/**
 * Learnifier
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The CourseDesign model module.
 * @module model/CourseDesign
 * @version 1.1.0
 */
class CourseDesign {
    /**
     * Constructs a new <code>CourseDesign</code>.
     * @alias module:model/CourseDesign
     * @param enabled {Boolean} True if this design is enabled for use
     * @param locale {String} BCP-47 locale
     * @param lockedDesign {Boolean} True if this design is locked for editing
     * @param name {String} The name
     * @param sticky {Boolean} True if this design is sticky
     */
    constructor(enabled, locale, lockedDesign, name, sticky) { 
        
        CourseDesign.initialize(this, enabled, locale, lockedDesign, name, sticky);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, enabled, locale, lockedDesign, name, sticky) { 
        obj['enabled'] = enabled;
        obj['locale'] = locale;
        obj['lockedDesign'] = lockedDesign;
        obj['name'] = name;
        obj['sticky'] = sticky;
    }

    /**
     * Constructs a <code>CourseDesign</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/CourseDesign} obj Optional instance to populate.
     * @return {module:model/CourseDesign} The populated <code>CourseDesign</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new CourseDesign();

            if (data.hasOwnProperty('created')) {
                obj['created'] = ApiClient.convertToType(data['created'], 'Date');
            }
            if (data.hasOwnProperty('createdBy')) {
                obj['createdBy'] = ApiClient.convertToType(data['createdBy'], 'String');
            }
            if (data.hasOwnProperty('description')) {
                obj['description'] = ApiClient.convertToType(data['description'], 'String');
            }
            if (data.hasOwnProperty('enabled')) {
                obj['enabled'] = ApiClient.convertToType(data['enabled'], 'Boolean');
            }
            if (data.hasOwnProperty('locale')) {
                obj['locale'] = ApiClient.convertToType(data['locale'], 'String');
            }
            if (data.hasOwnProperty('locked')) {
                obj['locked'] = ApiClient.convertToType(data['locked'], 'Date');
            }
            if (data.hasOwnProperty('lockedBy')) {
                obj['lockedBy'] = ApiClient.convertToType(data['lockedBy'], 'String');
            }
            if (data.hasOwnProperty('lockedDesign')) {
                obj['lockedDesign'] = ApiClient.convertToType(data['lockedDesign'], 'Boolean');
            }
            if (data.hasOwnProperty('name')) {
                obj['name'] = ApiClient.convertToType(data['name'], 'String');
            }
            if (data.hasOwnProperty('softid')) {
                obj['softid'] = ApiClient.convertToType(data['softid'], 'String');
            }
            if (data.hasOwnProperty('sticky')) {
                obj['sticky'] = ApiClient.convertToType(data['sticky'], 'Boolean');
            }
            if (data.hasOwnProperty('tags')) {
                obj['tags'] = ApiClient.convertToType(data['tags'], ['String']);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>CourseDesign</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>CourseDesign</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of CourseDesign.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // ensure the json data is a string
        if (data['createdBy'] && !(typeof data['createdBy'] === 'string' || data['createdBy'] instanceof String)) {
            throw new Error("Expected the field `createdBy` to be a primitive type in the JSON string but got " + data['createdBy']);
        }
        // ensure the json data is a string
        if (data['description'] && !(typeof data['description'] === 'string' || data['description'] instanceof String)) {
            throw new Error("Expected the field `description` to be a primitive type in the JSON string but got " + data['description']);
        }
        // ensure the json data is a string
        if (data['locale'] && !(typeof data['locale'] === 'string' || data['locale'] instanceof String)) {
            throw new Error("Expected the field `locale` to be a primitive type in the JSON string but got " + data['locale']);
        }
        // ensure the json data is a string
        if (data['lockedBy'] && !(typeof data['lockedBy'] === 'string' || data['lockedBy'] instanceof String)) {
            throw new Error("Expected the field `lockedBy` to be a primitive type in the JSON string but got " + data['lockedBy']);
        }
        // ensure the json data is a string
        if (data['name'] && !(typeof data['name'] === 'string' || data['name'] instanceof String)) {
            throw new Error("Expected the field `name` to be a primitive type in the JSON string but got " + data['name']);
        }
        // ensure the json data is a string
        if (data['softid'] && !(typeof data['softid'] === 'string' || data['softid'] instanceof String)) {
            throw new Error("Expected the field `softid` to be a primitive type in the JSON string but got " + data['softid']);
        }
        // ensure the json data is an array
        if (!Array.isArray(data['tags'])) {
            throw new Error("Expected the field `tags` to be an array in the JSON data but got " + data['tags']);
        }

        return true;
    }


}

CourseDesign.RequiredProperties = ["enabled", "locale", "lockedDesign", "name", "sticky"];

/**
 * The time this entry was created
 * @member {Date} created
 */
CourseDesign.prototype['created'] = undefined;

/**
 * UUID of the user that created this entry.
 * @member {String} createdBy
 */
CourseDesign.prototype['createdBy'] = undefined;

/**
 * Course description
 * @member {String} description
 */
CourseDesign.prototype['description'] = undefined;

/**
 * True if this design is enabled for use
 * @member {Boolean} enabled
 */
CourseDesign.prototype['enabled'] = undefined;

/**
 * BCP-47 locale
 * @member {String} locale
 */
CourseDesign.prototype['locale'] = undefined;

/**
 * The time when this entry was locked or null
 * @member {Date} locked
 */
CourseDesign.prototype['locked'] = undefined;

/**
 * UUID of the user that has locked this design
 * @member {String} lockedBy
 */
CourseDesign.prototype['lockedBy'] = undefined;

/**
 * True if this design is locked for editing
 * @member {Boolean} lockedDesign
 */
CourseDesign.prototype['lockedDesign'] = undefined;

/**
 * The name
 * @member {String} name
 */
CourseDesign.prototype['name'] = undefined;

/**
 * The soft identifier
 * @member {String} softid
 */
CourseDesign.prototype['softid'] = undefined;

/**
 * True if this design is sticky
 * @member {Boolean} sticky
 */
CourseDesign.prototype['sticky'] = undefined;

/**
 * Course tags
 * @member {Array.<String>} tags
 */
CourseDesign.prototype['tags'] = undefined;






export default CourseDesign;

