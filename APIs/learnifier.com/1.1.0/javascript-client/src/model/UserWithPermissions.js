/**
 * Learnifier
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import BackOfficeRole from './BackOfficeRole';
import ClientRoles from './ClientRoles';
import User from './User';
import UserPreferences from './UserPreferences';

/**
 * The UserWithPermissions model module.
 * @module model/UserWithPermissions
 * @version 1.1.0
 */
class UserWithPermissions {
    /**
     * Constructs a new <code>UserWithPermissions</code>.
     * @alias module:model/UserWithPermissions
     * @implements module:model/User
     */
    constructor() { 
        User.initialize(this);
        UserWithPermissions.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>UserWithPermissions</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/UserWithPermissions} obj Optional instance to populate.
     * @return {module:model/UserWithPermissions} The populated <code>UserWithPermissions</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new UserWithPermissions();
            User.constructFromObject(data, obj);

            if (data.hasOwnProperty('authorizationPossible')) {
                obj['authorizationPossible'] = ApiClient.convertToType(data['authorizationPossible'], 'Boolean');
            }
            if (data.hasOwnProperty('displayName')) {
                obj['displayName'] = ApiClient.convertToType(data['displayName'], 'String');
            }
            if (data.hasOwnProperty('externalId')) {
                obj['externalId'] = ApiClient.convertToType(data['externalId'], 'String');
            }
            if (data.hasOwnProperty('firstLogin')) {
                obj['firstLogin'] = ApiClient.convertToType(data['firstLogin'], 'Date');
            }
            if (data.hasOwnProperty('firstName')) {
                obj['firstName'] = ApiClient.convertToType(data['firstName'], 'String');
            }
            if (data.hasOwnProperty('hardLock')) {
                obj['hardLock'] = ApiClient.convertToType(data['hardLock'], 'Boolean');
            }
            if (data.hasOwnProperty('homeOrg')) {
                obj['homeOrg'] = ApiClient.convertToType(data['homeOrg'], 'Number');
            }
            if (data.hasOwnProperty('id')) {
                obj['id'] = ApiClient.convertToType(data['id'], 'String');
            }
            if (data.hasOwnProperty('lastLogin')) {
                obj['lastLogin'] = ApiClient.convertToType(data['lastLogin'], 'Date');
            }
            if (data.hasOwnProperty('lastName')) {
                obj['lastName'] = ApiClient.convertToType(data['lastName'], 'String');
            }
            if (data.hasOwnProperty('locked')) {
                obj['locked'] = ApiClient.convertToType(data['locked'], 'Boolean');
            }
            if (data.hasOwnProperty('prefs')) {
                obj['prefs'] = UserPreferences.constructFromObject(data['prefs']);
            }
            if (data.hasOwnProperty('primaryEmail')) {
                obj['primaryEmail'] = ApiClient.convertToType(data['primaryEmail'], 'String');
            }
            if (data.hasOwnProperty('backOfficeRoles')) {
                obj['backOfficeRoles'] = ApiClient.convertToType(data['backOfficeRoles'], [BackOfficeRole]);
            }
            if (data.hasOwnProperty('clientRoles')) {
                obj['clientRoles'] = ApiClient.convertToType(data['clientRoles'], [ClientRoles]);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>UserWithPermissions</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>UserWithPermissions</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['displayName'] && !(typeof data['displayName'] === 'string' || data['displayName'] instanceof String)) {
            throw new Error("Expected the field `displayName` to be a primitive type in the JSON string but got " + data['displayName']);
        }
        // ensure the json data is a string
        if (data['externalId'] && !(typeof data['externalId'] === 'string' || data['externalId'] instanceof String)) {
            throw new Error("Expected the field `externalId` to be a primitive type in the JSON string but got " + data['externalId']);
        }
        // ensure the json data is a string
        if (data['firstName'] && !(typeof data['firstName'] === 'string' || data['firstName'] instanceof String)) {
            throw new Error("Expected the field `firstName` to be a primitive type in the JSON string but got " + data['firstName']);
        }
        // ensure the json data is a string
        if (data['id'] && !(typeof data['id'] === 'string' || data['id'] instanceof String)) {
            throw new Error("Expected the field `id` to be a primitive type in the JSON string but got " + data['id']);
        }
        // ensure the json data is a string
        if (data['lastName'] && !(typeof data['lastName'] === 'string' || data['lastName'] instanceof String)) {
            throw new Error("Expected the field `lastName` to be a primitive type in the JSON string but got " + data['lastName']);
        }
        // validate the optional field `prefs`
        if (data['prefs']) { // data not null
          UserPreferences.validateJSON(data['prefs']);
        }
        // ensure the json data is a string
        if (data['primaryEmail'] && !(typeof data['primaryEmail'] === 'string' || data['primaryEmail'] instanceof String)) {
            throw new Error("Expected the field `primaryEmail` to be a primitive type in the JSON string but got " + data['primaryEmail']);
        }
        if (data['backOfficeRoles']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['backOfficeRoles'])) {
                throw new Error("Expected the field `backOfficeRoles` to be an array in the JSON data but got " + data['backOfficeRoles']);
            }
            // validate the optional field `backOfficeRoles` (array)
            for (const item of data['backOfficeRoles']) {
                BackOfficeRole.validateJSON(item);
            };
        }
        if (data['clientRoles']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['clientRoles'])) {
                throw new Error("Expected the field `clientRoles` to be an array in the JSON data but got " + data['clientRoles']);
            }
            // validate the optional field `clientRoles` (array)
            for (const item of data['clientRoles']) {
                ClientRoles.validateJSON(item);
            };
        }

        return true;
    }


}



/**
 * True if the user can authorize herself/himself
 * @member {Boolean} authorizationPossible
 */
UserWithPermissions.prototype['authorizationPossible'] = undefined;

/**
 * Full name of the user
 * @member {String} displayName
 */
UserWithPermissions.prototype['displayName'] = undefined;

/**
 * The external id (foreign key). Must not exceed 255 characters.
 * @member {String} externalId
 */
UserWithPermissions.prototype['externalId'] = undefined;

/**
 * The timestamp when the first login was made. This value can be *null*.
 * @member {Date} firstLogin
 */
UserWithPermissions.prototype['firstLogin'] = undefined;

/**
 * The first name of the user (or given name)
 * @member {String} firstName
 */
UserWithPermissions.prototype['firstName'] = undefined;

/**
 * True if the user is locked and the lock has been set by an administrator
 * @member {Boolean} hardLock
 */
UserWithPermissions.prototype['hardLock'] = undefined;

/**
 * The primary organization for the user. Must match the id of an Organization Unit.
 * @member {Number} homeOrg
 */
UserWithPermissions.prototype['homeOrg'] = undefined;

/**
 * The id of the user this participation belongs to
 * @member {String} id
 */
UserWithPermissions.prototype['id'] = undefined;

/**
 * The timestamp when the last login was made. This value can be *null*.
 * @member {Date} lastLogin
 */
UserWithPermissions.prototype['lastLogin'] = undefined;

/**
 * The last name of the user (or surname)
 * @member {String} lastName
 */
UserWithPermissions.prototype['lastName'] = undefined;

/**
 * Lock status. A locked user will not be able to access the platform.
 * @member {Boolean} locked
 */
UserWithPermissions.prototype['locked'] = undefined;

/**
 * @member {module:model/UserPreferences} prefs
 */
UserWithPermissions.prototype['prefs'] = undefined;

/**
 * The primary email for this user. If the user has no email this value is *null*.
 * @member {String} primaryEmail
 */
UserWithPermissions.prototype['primaryEmail'] = undefined;

/**
 * @member {Array.<module:model/BackOfficeRole>} backOfficeRoles
 */
UserWithPermissions.prototype['backOfficeRoles'] = undefined;

/**
 * A list with client roles
 * @member {Array.<module:model/ClientRoles>} clientRoles
 */
UserWithPermissions.prototype['clientRoles'] = undefined;


// Implement User interface:
/**
 * True if the user can authorize herself/himself
 * @member {Boolean} authorizationPossible
 */
User.prototype['authorizationPossible'] = undefined;
/**
 * Full name of the user
 * @member {String} displayName
 */
User.prototype['displayName'] = undefined;
/**
 * The external id (foreign key). Must not exceed 255 characters.
 * @member {String} externalId
 */
User.prototype['externalId'] = undefined;
/**
 * The timestamp when the first login was made. This value can be *null*.
 * @member {Date} firstLogin
 */
User.prototype['firstLogin'] = undefined;
/**
 * The first name of the user (or given name)
 * @member {String} firstName
 */
User.prototype['firstName'] = undefined;
/**
 * True if the user is locked and the lock has been set by an administrator
 * @member {Boolean} hardLock
 */
User.prototype['hardLock'] = undefined;
/**
 * The primary organization for the user. Must match the id of an Organization Unit.
 * @member {Number} homeOrg
 */
User.prototype['homeOrg'] = undefined;
/**
 * The id of the user this participation belongs to
 * @member {String} id
 */
User.prototype['id'] = undefined;
/**
 * The timestamp when the last login was made. This value can be *null*.
 * @member {Date} lastLogin
 */
User.prototype['lastLogin'] = undefined;
/**
 * The last name of the user (or surname)
 * @member {String} lastName
 */
User.prototype['lastName'] = undefined;
/**
 * Lock status. A locked user will not be able to access the platform.
 * @member {Boolean} locked
 */
User.prototype['locked'] = undefined;
/**
 * @member {module:model/UserPreferences} prefs
 */
User.prototype['prefs'] = undefined;
/**
 * The primary email for this user. If the user has no email this value is *null*.
 * @member {String} primaryEmail
 */
User.prototype['primaryEmail'] = undefined;




export default UserWithPermissions;

