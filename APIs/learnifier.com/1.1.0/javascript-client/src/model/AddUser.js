/**
 * Learnifier
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The AddUser model module.
 * @module model/AddUser
 * @version 1.1.0
 */
class AddUser {
    /**
     * Constructs a new <code>AddUser</code>.
     * @alias module:model/AddUser
     */
    constructor() { 
        
        AddUser.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>AddUser</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/AddUser} obj Optional instance to populate.
     * @return {module:model/AddUser} The populated <code>AddUser</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new AddUser();

            if (data.hasOwnProperty('displayName')) {
                obj['displayName'] = ApiClient.convertToType(data['displayName'], 'String');
            }
            if (data.hasOwnProperty('externalId')) {
                obj['externalId'] = ApiClient.convertToType(data['externalId'], 'String');
            }
            if (data.hasOwnProperty('firstName')) {
                obj['firstName'] = ApiClient.convertToType(data['firstName'], 'String');
            }
            if (data.hasOwnProperty('hardLock')) {
                obj['hardLock'] = ApiClient.convertToType(data['hardLock'], 'Boolean');
            }
            if (data.hasOwnProperty('homeOrg')) {
                obj['homeOrg'] = ApiClient.convertToType(data['homeOrg'], 'Number');
            }
            if (data.hasOwnProperty('lastName')) {
                obj['lastName'] = ApiClient.convertToType(data['lastName'], Object);
            }
            if (data.hasOwnProperty('locale')) {
                obj['locale'] = ApiClient.convertToType(data['locale'], 'String');
            }
            if (data.hasOwnProperty('primaryEmail')) {
                obj['primaryEmail'] = ApiClient.convertToType(data['primaryEmail'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>AddUser</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>AddUser</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['displayName'] && !(typeof data['displayName'] === 'string' || data['displayName'] instanceof String)) {
            throw new Error("Expected the field `displayName` to be a primitive type in the JSON string but got " + data['displayName']);
        }
        // ensure the json data is a string
        if (data['externalId'] && !(typeof data['externalId'] === 'string' || data['externalId'] instanceof String)) {
            throw new Error("Expected the field `externalId` to be a primitive type in the JSON string but got " + data['externalId']);
        }
        // ensure the json data is a string
        if (data['firstName'] && !(typeof data['firstName'] === 'string' || data['firstName'] instanceof String)) {
            throw new Error("Expected the field `firstName` to be a primitive type in the JSON string but got " + data['firstName']);
        }
        // ensure the json data is a string
        if (data['locale'] && !(typeof data['locale'] === 'string' || data['locale'] instanceof String)) {
            throw new Error("Expected the field `locale` to be a primitive type in the JSON string but got " + data['locale']);
        }
        // ensure the json data is a string
        if (data['primaryEmail'] && !(typeof data['primaryEmail'] === 'string' || data['primaryEmail'] instanceof String)) {
            throw new Error("Expected the field `primaryEmail` to be a primitive type in the JSON string but got " + data['primaryEmail']);
        }

        return true;
    }


}



/**
 * The name shown when the user is listed
 * @member {String} displayName
 */
AddUser.prototype['displayName'] = undefined;

/**
 * The external id (foreign key). Must not exceed 255 characters.
 * @member {String} externalId
 */
AddUser.prototype['externalId'] = undefined;

/**
 * The first (given) name of the user
 * @member {String} firstName
 */
AddUser.prototype['firstName'] = undefined;

/**
 * True if the user should be locked from the system
 * @member {Boolean} hardLock
 */
AddUser.prototype['hardLock'] = undefined;

/**
 * The primary organization for the user. Must match the id of an Organization Unit.
 * @member {Number} homeOrg
 */
AddUser.prototype['homeOrg'] = undefined;

/**
 * The last name (surname) of the user
 * @member {Object} lastName
 */
AddUser.prototype['lastName'] = undefined;

/**
 * The user's preferred language/locale setting. Affects date and number formatting.
 * @member {String} locale
 */
AddUser.prototype['locale'] = undefined;

/**
 * The primary email for the user. Used for communication from the platform.
 * @member {String} primaryEmail
 */
AddUser.prototype['primaryEmail'] = undefined;






export default AddUser;

