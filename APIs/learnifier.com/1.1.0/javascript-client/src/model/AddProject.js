/**
 * Learnifier
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The AddProject model module.
 * @module model/AddProject
 * @version 1.1.0
 */
class AddProject {
    /**
     * Constructs a new <code>AddProject</code>.
     * @alias module:model/AddProject
     * @param designId {Number} The id of the design this project should be based on
     * @param name {String} The internal name of the project
     */
    constructor(designId, name) { 
        
        AddProject.initialize(this, designId, name);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, designId, name) { 
        obj['designId'] = designId;
        obj['name'] = name;
    }

    /**
     * Constructs a <code>AddProject</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/AddProject} obj Optional instance to populate.
     * @return {module:model/AddProject} The populated <code>AddProject</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new AddProject();

            if (data.hasOwnProperty('country')) {
                obj['country'] = ApiClient.convertToType(data['country'], 'String');
            }
            if (data.hasOwnProperty('createdBy')) {
                obj['createdBy'] = ApiClient.convertToType(data['createdBy'], 'String');
            }
            if (data.hasOwnProperty('designId')) {
                obj['designId'] = ApiClient.convertToType(data['designId'], 'Number');
            }
            if (data.hasOwnProperty('locale')) {
                obj['locale'] = ApiClient.convertToType(data['locale'], 'String');
            }
            if (data.hasOwnProperty('name')) {
                obj['name'] = ApiClient.convertToType(data['name'], 'String');
            }
            if (data.hasOwnProperty('note')) {
                obj['note'] = ApiClient.convertToType(data['note'], 'String');
            }
            if (data.hasOwnProperty('timezone')) {
                obj['timezone'] = ApiClient.convertToType(data['timezone'], 'String');
            }
            if (data.hasOwnProperty('userDescription')) {
                obj['userDescription'] = ApiClient.convertToType(data['userDescription'], 'String');
            }
            if (data.hasOwnProperty('userTitle')) {
                obj['userTitle'] = ApiClient.convertToType(data['userTitle'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>AddProject</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>AddProject</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of AddProject.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // ensure the json data is a string
        if (data['country'] && !(typeof data['country'] === 'string' || data['country'] instanceof String)) {
            throw new Error("Expected the field `country` to be a primitive type in the JSON string but got " + data['country']);
        }
        // ensure the json data is a string
        if (data['createdBy'] && !(typeof data['createdBy'] === 'string' || data['createdBy'] instanceof String)) {
            throw new Error("Expected the field `createdBy` to be a primitive type in the JSON string but got " + data['createdBy']);
        }
        // ensure the json data is a string
        if (data['locale'] && !(typeof data['locale'] === 'string' || data['locale'] instanceof String)) {
            throw new Error("Expected the field `locale` to be a primitive type in the JSON string but got " + data['locale']);
        }
        // ensure the json data is a string
        if (data['name'] && !(typeof data['name'] === 'string' || data['name'] instanceof String)) {
            throw new Error("Expected the field `name` to be a primitive type in the JSON string but got " + data['name']);
        }
        // ensure the json data is a string
        if (data['note'] && !(typeof data['note'] === 'string' || data['note'] instanceof String)) {
            throw new Error("Expected the field `note` to be a primitive type in the JSON string but got " + data['note']);
        }
        // ensure the json data is a string
        if (data['timezone'] && !(typeof data['timezone'] === 'string' || data['timezone'] instanceof String)) {
            throw new Error("Expected the field `timezone` to be a primitive type in the JSON string but got " + data['timezone']);
        }
        // ensure the json data is a string
        if (data['userDescription'] && !(typeof data['userDescription'] === 'string' || data['userDescription'] instanceof String)) {
            throw new Error("Expected the field `userDescription` to be a primitive type in the JSON string but got " + data['userDescription']);
        }
        // ensure the json data is a string
        if (data['userTitle'] && !(typeof data['userTitle'] === 'string' || data['userTitle'] instanceof String)) {
            throw new Error("Expected the field `userTitle` to be a primitive type in the JSON string but got " + data['userTitle']);
        }

        return true;
    }


}

AddProject.RequiredProperties = ["designId", "name"];

/**
 * The country code. Default value will be used if not specified
 * @member {String} country
 */
AddProject.prototype['country'] = undefined;

/**
 * The id of the user that created the project. If the creator is not known this value can be *null* or not specified
 * @member {String} createdBy
 */
AddProject.prototype['createdBy'] = undefined;

/**
 * The id of the design this project should be based on
 * @member {Number} designId
 */
AddProject.prototype['designId'] = undefined;

/**
 * The primary locale for this project. Default value will be used if not specified
 * @member {String} locale
 */
AddProject.prototype['locale'] = undefined;

/**
 * The internal name of the project
 * @member {String} name
 */
AddProject.prototype['name'] = undefined;

/**
 * The internal note field
 * @member {String} note
 */
AddProject.prototype['note'] = undefined;

/**
 * The main timezone for the project. Do not specify for default timezone
 * @member {String} timezone
 */
AddProject.prototype['timezone'] = undefined;

/**
 * The description presented to participants. Do not specify for default value from design
 * @member {String} userDescription
 */
AddProject.prototype['userDescription'] = undefined;

/**
 * The title presented to participants. Do not specify for default value from design
 * @member {String} userTitle
 */
AddProject.prototype['userTitle'] = undefined;






export default AddProject;

