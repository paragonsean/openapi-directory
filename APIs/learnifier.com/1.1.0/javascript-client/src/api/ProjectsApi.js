/**
 * Learnifier
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import ActivationError from '../model/ActivationError';
import AddParticipant from '../model/AddParticipant';
import AddProject from '../model/AddProject';
import Error from '../model/Error';
import LoginLink from '../model/LoginLink';
import Participation from '../model/Participation';
import Project from '../model/Project';
import ProjectTeamMember from '../model/ProjectTeamMember';
import UpdateProject from '../model/UpdateProject';

/**
* Projects service.
* @module api/ProjectsApi
* @version 1.1.0
*/
export default class ProjectsApi {

    /**
    * Constructs a new ProjectsApi. 
    * @alias module:api/ProjectsApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the extprojectGet operation.
     * @callback module:api/ProjectsApi~extprojectGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Project} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Gets Organization Unit by external id
     * Gets an Organization Unit by external id
     * @param {String} extid The external id of the organization unit
     * @param {module:api/ProjectsApi~extprojectGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Project}
     */
    extprojectGet(extid, callback) {
      let postBody = null;
      // verify the required parameter 'extid' is set
      if (extid === undefined || extid === null) {
        throw new Error("Missing the required parameter 'extid' when calling extprojectGet");
      }

      let pathParams = {
      };
      let queryParams = {
        'extid': extid
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Project;
      return this.apiClient.callApi(
        '/extproject', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the orgunitsOrgidProjectsGet operation.
     * @callback module:api/ProjectsApi~orgunitsOrgidProjectsGetCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/Project>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Organization Unit Projects
     * Returns the available projects for the organization unit 
     * @param {Number} orgid Id of the organization unit
     * @param {module:api/ProjectsApi~orgunitsOrgidProjectsGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/Project>}
     */
    orgunitsOrgidProjectsGet(orgid, callback) {
      let postBody = null;
      // verify the required parameter 'orgid' is set
      if (orgid === undefined || orgid === null) {
        throw new Error("Missing the required parameter 'orgid' when calling orgunitsOrgidProjectsGet");
      }

      let pathParams = {
        'orgid': orgid
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [Project];
      return this.apiClient.callApi(
        '/orgunits/{orgid}/projects', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the orgunitsOrgidProjectsPost operation.
     * @callback module:api/ProjectsApi~orgunitsOrgidProjectsPostCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Project} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Create project
     * Creates a new project 
     * @param {Number} orgid Id of the organization unit
     * @param {module:model/AddProject} body 
     * @param {module:api/ProjectsApi~orgunitsOrgidProjectsPostCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Project}
     */
    orgunitsOrgidProjectsPost(orgid, body, callback) {
      let postBody = body;
      // verify the required parameter 'orgid' is set
      if (orgid === undefined || orgid === null) {
        throw new Error("Missing the required parameter 'orgid' when calling orgunitsOrgidProjectsPost");
      }
      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling orgunitsOrgidProjectsPost");
      }

      let pathParams = {
        'orgid': orgid
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Project;
      return this.apiClient.callApi(
        '/orgunits/{orgid}/projects', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the orgunitsOrgidProjectsProjectidDelete operation.
     * @callback module:api/ProjectsApi~orgunitsOrgidProjectsProjectidDeleteCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Deletes the project
     * Deletes the project. The project can only be deleted if the project do not contain any participants. 
     * @param {Number} orgid Id of the organization unit
     * @param {Number} projectid Id of the project
     * @param {module:api/ProjectsApi~orgunitsOrgidProjectsProjectidDeleteCallback} callback The callback function, accepting three arguments: error, data, response
     */
    orgunitsOrgidProjectsProjectidDelete(orgid, projectid, callback) {
      let postBody = null;
      // verify the required parameter 'orgid' is set
      if (orgid === undefined || orgid === null) {
        throw new Error("Missing the required parameter 'orgid' when calling orgunitsOrgidProjectsProjectidDelete");
      }
      // verify the required parameter 'projectid' is set
      if (projectid === undefined || projectid === null) {
        throw new Error("Missing the required parameter 'projectid' when calling orgunitsOrgidProjectsProjectidDelete");
      }

      let pathParams = {
        'orgid': orgid,
        'projectid': projectid
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/orgunits/{orgid}/projects/{projectid}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the orgunitsOrgidProjectsProjectidGet operation.
     * @callback module:api/ProjectsApi~orgunitsOrgidProjectsProjectidGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Project} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Project information
     * Returns project information 
     * @param {Number} orgid Id of the organization unit
     * @param {Number} projectid Id of the project
     * @param {module:api/ProjectsApi~orgunitsOrgidProjectsProjectidGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Project}
     */
    orgunitsOrgidProjectsProjectidGet(orgid, projectid, callback) {
      let postBody = null;
      // verify the required parameter 'orgid' is set
      if (orgid === undefined || orgid === null) {
        throw new Error("Missing the required parameter 'orgid' when calling orgunitsOrgidProjectsProjectidGet");
      }
      // verify the required parameter 'projectid' is set
      if (projectid === undefined || projectid === null) {
        throw new Error("Missing the required parameter 'projectid' when calling orgunitsOrgidProjectsProjectidGet");
      }

      let pathParams = {
        'orgid': orgid,
        'projectid': projectid
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Project;
      return this.apiClient.callApi(
        '/orgunits/{orgid}/projects/{projectid}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the orgunitsOrgidProjectsProjectidParticipantsGet operation.
     * @callback module:api/ProjectsApi~orgunitsOrgidProjectsProjectidParticipantsGetCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/Participation>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Project participants
     * Returns project participants 
     * @param {Number} orgid Id of the organization unit
     * @param {Number} projectid Id of the project
     * @param {module:api/ProjectsApi~orgunitsOrgidProjectsProjectidParticipantsGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/Participation>}
     */
    orgunitsOrgidProjectsProjectidParticipantsGet(orgid, projectid, callback) {
      let postBody = null;
      // verify the required parameter 'orgid' is set
      if (orgid === undefined || orgid === null) {
        throw new Error("Missing the required parameter 'orgid' when calling orgunitsOrgidProjectsProjectidParticipantsGet");
      }
      // verify the required parameter 'projectid' is set
      if (projectid === undefined || projectid === null) {
        throw new Error("Missing the required parameter 'projectid' when calling orgunitsOrgidProjectsProjectidParticipantsGet");
      }

      let pathParams = {
        'orgid': orgid,
        'projectid': projectid
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [Participation];
      return this.apiClient.callApi(
        '/orgunits/{orgid}/projects/{projectid}/participants', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the orgunitsOrgidProjectsProjectidParticipantsParticipantIdActivatePost operation.
     * @callback module:api/ProjectsApi~orgunitsOrgidProjectsProjectidParticipantsParticipantIdActivatePostCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Activate participant
     * Activates a participant so that it can be used 
     * @param {Number} orgid Id of the organization unit
     * @param {Number} projectid Id of the project
     * @param {Number} participantId Id of the participant
     * @param {module:api/ProjectsApi~orgunitsOrgidProjectsProjectidParticipantsParticipantIdActivatePostCallback} callback The callback function, accepting three arguments: error, data, response
     */
    orgunitsOrgidProjectsProjectidParticipantsParticipantIdActivatePost(orgid, projectid, participantId, callback) {
      let postBody = null;
      // verify the required parameter 'orgid' is set
      if (orgid === undefined || orgid === null) {
        throw new Error("Missing the required parameter 'orgid' when calling orgunitsOrgidProjectsProjectidParticipantsParticipantIdActivatePost");
      }
      // verify the required parameter 'projectid' is set
      if (projectid === undefined || projectid === null) {
        throw new Error("Missing the required parameter 'projectid' when calling orgunitsOrgidProjectsProjectidParticipantsParticipantIdActivatePost");
      }
      // verify the required parameter 'participantId' is set
      if (participantId === undefined || participantId === null) {
        throw new Error("Missing the required parameter 'participantId' when calling orgunitsOrgidProjectsProjectidParticipantsParticipantIdActivatePost");
      }

      let pathParams = {
        'orgid': orgid,
        'projectid': projectid,
        'participantId': participantId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/orgunits/{orgid}/projects/{projectid}/participants/${participantId}/activate', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the orgunitsOrgidProjectsProjectidParticipantsParticipantIdDelete operation.
     * @callback module:api/ProjectsApi~orgunitsOrgidProjectsProjectidParticipantsParticipantIdDeleteCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Deletes a participant
     * Deletes a participant. The user itself will still remain but any state related to the project will be deleted. It might not be possible due to constraints from the products in the project to delete the participant. However this can only be determined at the time of the delete. If a delete fails the participant will have their inError flag set. 
     * @param {Number} orgid Id of the organization unit
     * @param {Number} projectid Id of the project
     * @param {Number} participantId Participant id
     * @param {module:api/ProjectsApi~orgunitsOrgidProjectsProjectidParticipantsParticipantIdDeleteCallback} callback The callback function, accepting three arguments: error, data, response
     */
    orgunitsOrgidProjectsProjectidParticipantsParticipantIdDelete(orgid, projectid, participantId, callback) {
      let postBody = null;
      // verify the required parameter 'orgid' is set
      if (orgid === undefined || orgid === null) {
        throw new Error("Missing the required parameter 'orgid' when calling orgunitsOrgidProjectsProjectidParticipantsParticipantIdDelete");
      }
      // verify the required parameter 'projectid' is set
      if (projectid === undefined || projectid === null) {
        throw new Error("Missing the required parameter 'projectid' when calling orgunitsOrgidProjectsProjectidParticipantsParticipantIdDelete");
      }
      // verify the required parameter 'participantId' is set
      if (participantId === undefined || participantId === null) {
        throw new Error("Missing the required parameter 'participantId' when calling orgunitsOrgidProjectsProjectidParticipantsParticipantIdDelete");
      }

      let pathParams = {
        'orgid': orgid,
        'projectid': projectid,
        'participantId': participantId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/orgunits/{orgid}/projects/{projectid}/participants/${participantId}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the orgunitsOrgidProjectsProjectidParticipantsParticipantIdLoginlinkPost operation.
     * @callback module:api/ProjectsApi~orgunitsOrgidProjectsProjectidParticipantsParticipantIdLoginlinkPostCallback
     * @param {String} error Error message, if any.
     * @param {module:model/LoginLink} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Participant login link
     * Returns a single sign on link for the participant. The link is only usable once and should be used directly. The link expires after a few minutes.  This operation requires the *login link* permission. 
     * @param {Number} orgid Id of the organization unit
     * @param {Number} projectid Id of the project
     * @param {Number} participantId Id of the participant
     * @param {module:api/ProjectsApi~orgunitsOrgidProjectsProjectidParticipantsParticipantIdLoginlinkPostCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/LoginLink}
     */
    orgunitsOrgidProjectsProjectidParticipantsParticipantIdLoginlinkPost(orgid, projectid, participantId, callback) {
      let postBody = null;
      // verify the required parameter 'orgid' is set
      if (orgid === undefined || orgid === null) {
        throw new Error("Missing the required parameter 'orgid' when calling orgunitsOrgidProjectsProjectidParticipantsParticipantIdLoginlinkPost");
      }
      // verify the required parameter 'projectid' is set
      if (projectid === undefined || projectid === null) {
        throw new Error("Missing the required parameter 'projectid' when calling orgunitsOrgidProjectsProjectidParticipantsParticipantIdLoginlinkPost");
      }
      // verify the required parameter 'participantId' is set
      if (participantId === undefined || participantId === null) {
        throw new Error("Missing the required parameter 'participantId' when calling orgunitsOrgidProjectsProjectidParticipantsParticipantIdLoginlinkPost");
      }

      let pathParams = {
        'orgid': orgid,
        'projectid': projectid,
        'participantId': participantId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = LoginLink;
      return this.apiClient.callApi(
        '/orgunits/{orgid}/projects/{projectid}/participants/${participantId}/loginlink', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the orgunitsOrgidProjectsProjectidParticipantsPost operation.
     * @callback module:api/ProjectsApi~orgunitsOrgidProjectsProjectidParticipantsPostCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Add participant
     * Add a user to the project. Participant information is created for the user. In the body object, only one of either email or userid must be specified. The participant needs to be activated before it the user can access it. 
     * @param {Number} orgid Id of the organization unit
     * @param {Number} projectid Id of the project
     * @param {module:model/AddParticipant} body 
     * @param {module:api/ProjectsApi~orgunitsOrgidProjectsProjectidParticipantsPostCallback} callback The callback function, accepting three arguments: error, data, response
     */
    orgunitsOrgidProjectsProjectidParticipantsPost(orgid, projectid, body, callback) {
      let postBody = body;
      // verify the required parameter 'orgid' is set
      if (orgid === undefined || orgid === null) {
        throw new Error("Missing the required parameter 'orgid' when calling orgunitsOrgidProjectsProjectidParticipantsPost");
      }
      // verify the required parameter 'projectid' is set
      if (projectid === undefined || projectid === null) {
        throw new Error("Missing the required parameter 'projectid' when calling orgunitsOrgidProjectsProjectidParticipantsPost");
      }
      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling orgunitsOrgidProjectsProjectidParticipantsPost");
      }

      let pathParams = {
        'orgid': orgid,
        'projectid': projectid
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/orgunits/{orgid}/projects/{projectid}/participants', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the orgunitsOrgidProjectsProjectidPatch operation.
     * @callback module:api/ProjectsApi~orgunitsOrgidProjectsProjectidPatchCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Project} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update project information
     * Updates information about a project. Values are only updated if the fields are specified in the input 
     * @param {Number} orgid Id of the organization unit
     * @param {Number} projectid Id of the project
     * @param {module:model/UpdateProject} body 
     * @param {module:api/ProjectsApi~orgunitsOrgidProjectsProjectidPatchCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Project}
     */
    orgunitsOrgidProjectsProjectidPatch(orgid, projectid, body, callback) {
      let postBody = body;
      // verify the required parameter 'orgid' is set
      if (orgid === undefined || orgid === null) {
        throw new Error("Missing the required parameter 'orgid' when calling orgunitsOrgidProjectsProjectidPatch");
      }
      // verify the required parameter 'projectid' is set
      if (projectid === undefined || projectid === null) {
        throw new Error("Missing the required parameter 'projectid' when calling orgunitsOrgidProjectsProjectidPatch");
      }
      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling orgunitsOrgidProjectsProjectidPatch");
      }

      let pathParams = {
        'orgid': orgid,
        'projectid': projectid
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Project;
      return this.apiClient.callApi(
        '/orgunits/{orgid}/projects/{projectid}', 'PATCH',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the orgunitsOrgidProjectsProjectidTeammembersGet operation.
     * @callback module:api/ProjectsApi~orgunitsOrgidProjectsProjectidTeammembersGetCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/ProjectTeamMember>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Project team members
     * Returns the project team members. A team member is a .... 
     * @param {Number} orgid Id of the organization unit
     * @param {Number} projectid Id of the project
     * @param {module:api/ProjectsApi~orgunitsOrgidProjectsProjectidTeammembersGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/ProjectTeamMember>}
     */
    orgunitsOrgidProjectsProjectidTeammembersGet(orgid, projectid, callback) {
      let postBody = null;
      // verify the required parameter 'orgid' is set
      if (orgid === undefined || orgid === null) {
        throw new Error("Missing the required parameter 'orgid' when calling orgunitsOrgidProjectsProjectidTeammembersGet");
      }
      // verify the required parameter 'projectid' is set
      if (projectid === undefined || projectid === null) {
        throw new Error("Missing the required parameter 'projectid' when calling orgunitsOrgidProjectsProjectidTeammembersGet");
      }

      let pathParams = {
        'orgid': orgid,
        'projectid': projectid
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [ProjectTeamMember];
      return this.apiClient.callApi(
        '/orgunits/{orgid}/projects/{projectid}/teammembers', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
