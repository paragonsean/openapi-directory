/**
 * Learnifier
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import AddUser from '../model/AddUser';
import AddUserResponse from '../model/AddUserResponse';
import Error from '../model/Error';
import Participation from '../model/Participation';
import User from '../model/User';
import UserParticipationInfo from '../model/UserParticipationInfo';
import UserWithPermissions from '../model/UserWithPermissions';

/**
* Users service.
* @module api/UsersApi
* @version 1.1.0
*/
export default class UsersApi {

    /**
    * Constructs a new UsersApi. 
    * @alias module:api/UsersApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the extparticipationGet operation.
     * @callback module:api/UsersApi~extparticipationGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Participation} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Gets a participation by external id
     * Gets a participation by external id.
     * @param {String} extid The external id of the participation
     * @param {module:api/UsersApi~extparticipationGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Participation}
     */
    extparticipationGet(extid, callback) {
      let postBody = null;
      // verify the required parameter 'extid' is set
      if (extid === undefined || extid === null) {
        throw new Error("Missing the required parameter 'extid' when calling extparticipationGet");
      }

      let pathParams = {
      };
      let queryParams = {
        'extid': extid
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Participation;
      return this.apiClient.callApi(
        '/extparticipation', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the extuserGet operation.
     * @callback module:api/UsersApi~extuserGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/User} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Gets a user by external id
     * Gets a user by external id.
     * @param {String} extid The external id of the user
     * @param {module:api/UsersApi~extuserGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/User}
     */
    extuserGet(extid, callback) {
      let postBody = null;
      // verify the required parameter 'extid' is set
      if (extid === undefined || extid === null) {
        throw new Error("Missing the required parameter 'extid' when calling extuserGet");
      }

      let pathParams = {
      };
      let queryParams = {
        'extid': extid
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = User;
      return this.apiClient.callApi(
        '/extuser', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the usersGet operation.
     * @callback module:api/UsersApi~usersGetCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/UserWithPermissions>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Lists all users
     * Lists all users. Only api callers that have full access can call this method.
     * @param {Object} opts Optional parameters
     * @param {Number} [limit = 5000)] The maximum number of users to return
     * @param {Number} [offset = 0)] The offset to start listing users from
     * @param {module:api/UsersApi~usersGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/UserWithPermissions>}
     */
    usersGet(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'limit': opts['limit'],
        'offset': opts['offset']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [UserWithPermissions];
      return this.apiClient.callApi(
        '/users', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the usersPost operation.
     * @callback module:api/UsersApi~usersPostCallback
     * @param {String} error Error message, if any.
     * @param {module:model/AddUserResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Adds a user
     * Adds a user. No two users can have the same email address. Email is saved WITH case but compared regardless of case. Email can be changed for a user assuming it doesn't cause a conflict.
     * @param {module:model/AddUser} body 
     * @param {module:api/UsersApi~usersPostCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/AddUserResponse}
     */
    usersPost(body, callback) {
      let postBody = body;
      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling usersPost");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = AddUserResponse;
      return this.apiClient.callApi(
        '/users', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the usersUseridGet operation.
     * @callback module:api/UsersApi~usersUseridGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/User} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * User information
     * Returns information about a user 
     * @param {String} userid A user id
     * @param {module:api/UsersApi~usersUseridGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/User}
     */
    usersUseridGet(userid, callback) {
      let postBody = null;
      // verify the required parameter 'userid' is set
      if (userid === undefined || userid === null) {
        throw new Error("Missing the required parameter 'userid' when calling usersUseridGet");
      }

      let pathParams = {
        'userid': userid
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = User;
      return this.apiClient.callApi(
        '/users/{userid}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the usersUseridPatch operation.
     * @callback module:api/UsersApi~usersUseridPatchCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Updates user information
     * Updates a user. All values that have a key defined in the input will be set. So if a value should not be updated omit it totally from the input, otherwise it will be unset.
     * @param {String} userid The user id
     * @param {module:model/AddUser} body 
     * @param {module:api/UsersApi~usersUseridPatchCallback} callback The callback function, accepting three arguments: error, data, response
     */
    usersUseridPatch(userid, body, callback) {
      let postBody = body;
      // verify the required parameter 'userid' is set
      if (userid === undefined || userid === null) {
        throw new Error("Missing the required parameter 'userid' when calling usersUseridPatch");
      }
      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling usersUseridPatch");
      }

      let pathParams = {
        'userid': userid
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/users/{userid}', 'PATCH',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the usersUseridPickeyAPIKEYGet operation.
     * @callback module:api/UsersApi~usersUseridPickeyAPIKEYGetCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * User profile picture
     * Returns a thumbnail picture of the user. This can either be a selected picture or an auto generated image. This method doesn't require a full sign in. The api key is sufficient. The image is square and is likely, but not necessary, to be in 128x128 PNG format. However the format will always be either PNG, JPEG or GIF. 
     * @param {String} userid The user id
     * @param {String} APIKEY 
     * @param {module:api/UsersApi~usersUseridPickeyAPIKEYGetCallback} callback The callback function, accepting three arguments: error, data, response
     */
    usersUseridPickeyAPIKEYGet(userid, APIKEY, callback) {
      let postBody = null;
      // verify the required parameter 'userid' is set
      if (userid === undefined || userid === null) {
        throw new Error("Missing the required parameter 'userid' when calling usersUseridPickeyAPIKEYGet");
      }
      // verify the required parameter 'APIKEY' is set
      if (APIKEY === undefined || APIKEY === null) {
        throw new Error("Missing the required parameter 'APIKEY' when calling usersUseridPickeyAPIKEYGet");
      }

      let pathParams = {
        'userid': userid,
        'APIKEY': APIKEY
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/users/{userid}/pic?key={APIKEY}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the usersUseridProjectParticipationsGet operation.
     * @callback module:api/UsersApi~usersUseridProjectParticipationsGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/UserParticipationInfo} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Returns information about the projects the user is a participant in.
     * Returns information about the projects the user is a participant in. Only the projects that the current token have access to will be listed. 
     * @param {String} userid A user id
     * @param {module:api/UsersApi~usersUseridProjectParticipationsGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/UserParticipationInfo}
     */
    usersUseridProjectParticipationsGet(userid, callback) {
      let postBody = null;
      // verify the required parameter 'userid' is set
      if (userid === undefined || userid === null) {
        throw new Error("Missing the required parameter 'userid' when calling usersUseridProjectParticipationsGet");
      }

      let pathParams = {
        'userid': userid
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = UserParticipationInfo;
      return this.apiClient.callApi(
        '/users/{userid}/projectParticipations', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
