/**
 * Learnifier
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import Error from '../model/Error';
import GlobalUserGroup from '../model/GlobalUserGroup';
import User from '../model/User';

/**
* GlobalUserGroups service.
* @module api/GlobalUserGroupsApi
* @version 1.1.0
*/
export default class GlobalUserGroupsApi {

    /**
    * Constructs a new GlobalUserGroupsApi. 
    * @alias module:api/GlobalUserGroupsApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the globalusergroupsGet operation.
     * @callback module:api/GlobalUserGroupsApi~globalusergroupsGetCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/GlobalUserGroup>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * List Global User Groups.
     * Returns a list of Global User Groups. Global User Groups are set up for the realm, and will generate groups that can be used on the client level. 
     * @param {module:api/GlobalUserGroupsApi~globalusergroupsGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/GlobalUserGroup>}
     */
    globalusergroupsGet(callback) {
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [GlobalUserGroup];
      return this.apiClient.callApi(
        '/globalusergroups', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the globalusergroupsGroupidMembersGet operation.
     * @callback module:api/GlobalUserGroupsApi~globalusergroupsGroupidMembersGetCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/User>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * List of all users in group.
     * Returns a list of all members in User Groups that are based on the Global Group with this groupid. 
     * @param {Number} groupid ID of group
     * @param {module:api/GlobalUserGroupsApi~globalusergroupsGroupidMembersGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/User>}
     */
    globalusergroupsGroupidMembersGet(groupid, callback) {
      let postBody = null;
      // verify the required parameter 'groupid' is set
      if (groupid === undefined || groupid === null) {
        throw new Error("Missing the required parameter 'groupid' when calling globalusergroupsGroupidMembersGet");
      }

      let pathParams = {
        'groupid': groupid
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [User];
      return this.apiClient.callApi(
        '/globalusergroups/{groupid}/members', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
