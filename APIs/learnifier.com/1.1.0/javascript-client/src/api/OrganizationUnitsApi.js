/**
 * Learnifier
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import AddOrganizationUnit from '../model/AddOrganizationUnit';
import AddOrganizationUnitResponse from '../model/AddOrganizationUnitResponse';
import Error from '../model/Error';
import OrgUnit from '../model/OrgUnit';
import OrgUnits from '../model/OrgUnits';
import UpdateOrganizationUnit from '../model/UpdateOrganizationUnit';

/**
* OrganizationUnits service.
* @module api/OrganizationUnitsApi
* @version 1.1.0
*/
export default class OrganizationUnitsApi {

    /**
    * Constructs a new OrganizationUnitsApi. 
    * @alias module:api/OrganizationUnitsApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the extorgunitGet operation.
     * @callback module:api/OrganizationUnitsApi~extorgunitGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/OrgUnit} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get Organization Unit with External Id
     * Returns information about the organization unit with the specified external id. 
     * @param {String} extid The external id of the organization unit
     * @param {module:api/OrganizationUnitsApi~extorgunitGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/OrgUnit}
     */
    extorgunitGet(extid, callback) {
      let postBody = null;
      // verify the required parameter 'extid' is set
      if (extid === undefined || extid === null) {
        throw new Error("Missing the required parameter 'extid' when calling extorgunitGet");
      }

      let pathParams = {
      };
      let queryParams = {
        'extid': extid
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = OrgUnit;
      return this.apiClient.callApi(
        '/extorgunit', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the orgunitsGet operation.
     * @callback module:api/OrganizationUnitsApi~orgunitsGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/OrgUnits} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Organization Units
     * The orgunits endpoint returns information about the available organization units (orgunits). The response includes the display name, internal and external id and client number. 
     * @param {module:api/OrganizationUnitsApi~orgunitsGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/OrgUnits}
     */
    orgunitsGet(callback) {
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = OrgUnits;
      return this.apiClient.callApi(
        '/orgunits', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the orgunitsOrgidGet operation.
     * @callback module:api/OrganizationUnitsApi~orgunitsOrgidGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/OrgUnit} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get Organization Unit
     * Returns information about the specified organization unit. The response includes the display name, internal and external id and client number. 
     * @param {Number} orgid Id of the organization unit
     * @param {module:api/OrganizationUnitsApi~orgunitsOrgidGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/OrgUnit}
     */
    orgunitsOrgidGet(orgid, callback) {
      let postBody = null;
      // verify the required parameter 'orgid' is set
      if (orgid === undefined || orgid === null) {
        throw new Error("Missing the required parameter 'orgid' when calling orgunitsOrgidGet");
      }

      let pathParams = {
        'orgid': orgid
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = OrgUnit;
      return this.apiClient.callApi(
        '/orgunits/{orgid}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the orgunitsOrgidPatch operation.
     * @callback module:api/OrganizationUnitsApi~orgunitsOrgidPatchCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Updates an Organization Unit
     * Adds an Organization Unit
     * @param {String} orgid 
     * @param {module:model/UpdateOrganizationUnit} body 
     * @param {module:api/OrganizationUnitsApi~orgunitsOrgidPatchCallback} callback The callback function, accepting three arguments: error, data, response
     */
    orgunitsOrgidPatch(orgid, body, callback) {
      let postBody = body;
      // verify the required parameter 'orgid' is set
      if (orgid === undefined || orgid === null) {
        throw new Error("Missing the required parameter 'orgid' when calling orgunitsOrgidPatch");
      }
      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling orgunitsOrgidPatch");
      }

      let pathParams = {
        'orgid': orgid
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/orgunits/{orgid}', 'PATCH',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the orgunitsPost operation.
     * @callback module:api/OrganizationUnitsApi~orgunitsPostCallback
     * @param {String} error Error message, if any.
     * @param {module:model/AddOrganizationUnitResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Adds an Organization Unit
     * Adds an Organization Unit
     * @param {module:model/AddOrganizationUnit} body 
     * @param {module:api/OrganizationUnitsApi~orgunitsPostCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/AddOrganizationUnitResponse}
     */
    orgunitsPost(body, callback) {
      let postBody = body;
      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling orgunitsPost");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = AddOrganizationUnitResponse;
      return this.apiClient.callApi(
        '/orgunits', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
