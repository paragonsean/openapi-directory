/**
 * Learnifier
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import AddUserGroup from '../model/AddUserGroup';
import AddUserGroupMember from '../model/AddUserGroupMember';
import Error from '../model/Error';
import GroupId from '../model/GroupId';
import User from '../model/User';
import UserGroup from '../model/UserGroup';
import UserId from '../model/UserId';

/**
* UserGroups service.
* @module api/UserGroupsApi
* @version 1.1.0
*/
export default class UserGroupsApi {

    /**
    * Constructs a new UserGroupsApi. 
    * @alias module:api/UserGroupsApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the orgunitsOrgidUsergroupsGet operation.
     * @callback module:api/UserGroupsApi~orgunitsOrgidUsergroupsGetCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/UserGroup>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * List User Groups.
     * Returns a list of User Groups for the org unit. 
     * @param {Number} orgid ID of organization
     * @param {module:api/UserGroupsApi~orgunitsOrgidUsergroupsGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/UserGroup>}
     */
    orgunitsOrgidUsergroupsGet(orgid, callback) {
      let postBody = null;
      // verify the required parameter 'orgid' is set
      if (orgid === undefined || orgid === null) {
        throw new Error("Missing the required parameter 'orgid' when calling orgunitsOrgidUsergroupsGet");
      }

      let pathParams = {
        'orgid': orgid
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [UserGroup];
      return this.apiClient.callApi(
        '/orgunits/{orgid}/usergroups', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the orgunitsOrgidUsergroupsGroupidGet operation.
     * @callback module:api/UserGroupsApi~orgunitsOrgidUsergroupsGroupidGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/UserGroup} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get user group
     * Returns single User Group. 
     * @param {Number} orgid ID of organization
     * @param {Number} groupid ID of group
     * @param {module:api/UserGroupsApi~orgunitsOrgidUsergroupsGroupidGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/UserGroup}
     */
    orgunitsOrgidUsergroupsGroupidGet(orgid, groupid, callback) {
      let postBody = null;
      // verify the required parameter 'orgid' is set
      if (orgid === undefined || orgid === null) {
        throw new Error("Missing the required parameter 'orgid' when calling orgunitsOrgidUsergroupsGroupidGet");
      }
      // verify the required parameter 'groupid' is set
      if (groupid === undefined || groupid === null) {
        throw new Error("Missing the required parameter 'groupid' when calling orgunitsOrgidUsergroupsGroupidGet");
      }

      let pathParams = {
        'orgid': orgid,
        'groupid': groupid
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = UserGroup;
      return this.apiClient.callApi(
        '/orgunits/{orgid}/usergroups/{groupid}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the orgunitsOrgidUsergroupsGroupidMembersGet operation.
     * @callback module:api/UserGroupsApi~orgunitsOrgidUsergroupsGroupidMembersGetCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/User>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * List of all users in group.
     * Returns a list of all members in User Groups that are based on the Global Group with this groupid. 
     * @param {Number} orgid ID of organization
     * @param {Number} groupid ID of group
     * @param {module:api/UserGroupsApi~orgunitsOrgidUsergroupsGroupidMembersGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/User>}
     */
    orgunitsOrgidUsergroupsGroupidMembersGet(orgid, groupid, callback) {
      let postBody = null;
      // verify the required parameter 'orgid' is set
      if (orgid === undefined || orgid === null) {
        throw new Error("Missing the required parameter 'orgid' when calling orgunitsOrgidUsergroupsGroupidMembersGet");
      }
      // verify the required parameter 'groupid' is set
      if (groupid === undefined || groupid === null) {
        throw new Error("Missing the required parameter 'groupid' when calling orgunitsOrgidUsergroupsGroupidMembersGet");
      }

      let pathParams = {
        'orgid': orgid,
        'groupid': groupid
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [User];
      return this.apiClient.callApi(
        '/orgunits/{orgid}/usergroups/{groupid}/members', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the orgunitsOrgidUsergroupsGroupidMembersPost operation.
     * @callback module:api/UserGroupsApi~orgunitsOrgidUsergroupsGroupidMembersPostCallback
     * @param {String} error Error message, if any.
     * @param {module:model/UserId} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Add user group member.
     * Adds a user to user group. 
     * @param {Number} orgid ID of organization
     * @param {Number} groupid ID of group
     * @param {module:model/AddUserGroupMember} body 
     * @param {module:api/UserGroupsApi~orgunitsOrgidUsergroupsGroupidMembersPostCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/UserId}
     */
    orgunitsOrgidUsergroupsGroupidMembersPost(orgid, groupid, body, callback) {
      let postBody = body;
      // verify the required parameter 'orgid' is set
      if (orgid === undefined || orgid === null) {
        throw new Error("Missing the required parameter 'orgid' when calling orgunitsOrgidUsergroupsGroupidMembersPost");
      }
      // verify the required parameter 'groupid' is set
      if (groupid === undefined || groupid === null) {
        throw new Error("Missing the required parameter 'groupid' when calling orgunitsOrgidUsergroupsGroupidMembersPost");
      }
      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling orgunitsOrgidUsergroupsGroupidMembersPost");
      }

      let pathParams = {
        'orgid': orgid,
        'groupid': groupid
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = UserId;
      return this.apiClient.callApi(
        '/orgunits/{orgid}/usergroups/{groupid}/members', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the orgunitsOrgidUsergroupsGroupidMembersUuidDelete operation.
     * @callback module:api/UserGroupsApi~orgunitsOrgidUsergroupsGroupidMembersUuidDeleteCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Remove user group member.
     * Removes a user from a user group. 
     * @param {Number} orgid ID of organization
     * @param {Number} groupid ID of group
     * @param {String} uuid UUID of user to remove from group.
     * @param {module:api/UserGroupsApi~orgunitsOrgidUsergroupsGroupidMembersUuidDeleteCallback} callback The callback function, accepting three arguments: error, data, response
     */
    orgunitsOrgidUsergroupsGroupidMembersUuidDelete(orgid, groupid, uuid, callback) {
      let postBody = null;
      // verify the required parameter 'orgid' is set
      if (orgid === undefined || orgid === null) {
        throw new Error("Missing the required parameter 'orgid' when calling orgunitsOrgidUsergroupsGroupidMembersUuidDelete");
      }
      // verify the required parameter 'groupid' is set
      if (groupid === undefined || groupid === null) {
        throw new Error("Missing the required parameter 'groupid' when calling orgunitsOrgidUsergroupsGroupidMembersUuidDelete");
      }
      // verify the required parameter 'uuid' is set
      if (uuid === undefined || uuid === null) {
        throw new Error("Missing the required parameter 'uuid' when calling orgunitsOrgidUsergroupsGroupidMembersUuidDelete");
      }

      let pathParams = {
        'orgid': orgid,
        'groupid': groupid,
        'uuid': uuid
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/orgunits/{orgid}/usergroups/{groupid}/members/{uuid}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the orgunitsOrgidUsergroupsPost operation.
     * @callback module:api/UserGroupsApi~orgunitsOrgidUsergroupsPostCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/GroupId>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Create a User Group.
     * Create a User Group. 
     * @param {Number} orgid ID of organization
     * @param {module:model/AddUserGroup} body 
     * @param {module:api/UserGroupsApi~orgunitsOrgidUsergroupsPostCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/GroupId>}
     */
    orgunitsOrgidUsergroupsPost(orgid, body, callback) {
      let postBody = body;
      // verify the required parameter 'orgid' is set
      if (orgid === undefined || orgid === null) {
        throw new Error("Missing the required parameter 'orgid' when calling orgunitsOrgidUsergroupsPost");
      }
      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling orgunitsOrgidUsergroupsPost");
      }

      let pathParams = {
        'orgid': orgid
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [GroupId];
      return this.apiClient.callApi(
        '/orgunits/{orgid}/usergroups', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
