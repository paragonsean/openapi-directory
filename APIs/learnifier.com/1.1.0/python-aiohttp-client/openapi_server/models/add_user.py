# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class AddUser(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, display_name: str=None, external_id: str=None, first_name: str=None, hard_lock: bool=None, home_org: int=None, last_name: object=None, locale: str=None, primary_email: str=None):
        """AddUser - a model defined in OpenAPI

        :param display_name: The display_name of this AddUser.
        :param external_id: The external_id of this AddUser.
        :param first_name: The first_name of this AddUser.
        :param hard_lock: The hard_lock of this AddUser.
        :param home_org: The home_org of this AddUser.
        :param last_name: The last_name of this AddUser.
        :param locale: The locale of this AddUser.
        :param primary_email: The primary_email of this AddUser.
        """
        self.openapi_types = {
            'display_name': str,
            'external_id': str,
            'first_name': str,
            'hard_lock': bool,
            'home_org': int,
            'last_name': object,
            'locale': str,
            'primary_email': str
        }

        self.attribute_map = {
            'display_name': 'displayName',
            'external_id': 'externalId',
            'first_name': 'firstName',
            'hard_lock': 'hardLock',
            'home_org': 'homeOrg',
            'last_name': 'lastName',
            'locale': 'locale',
            'primary_email': 'primaryEmail'
        }

        self._display_name = display_name
        self._external_id = external_id
        self._first_name = first_name
        self._hard_lock = hard_lock
        self._home_org = home_org
        self._last_name = last_name
        self._locale = locale
        self._primary_email = primary_email

    @classmethod
    def from_dict(cls, dikt: dict) -> 'AddUser':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The AddUser of this AddUser.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def display_name(self):
        """Gets the display_name of this AddUser.

        The name shown when the user is listed

        :return: The display_name of this AddUser.
        :rtype: str
        """
        return self._display_name

    @display_name.setter
    def display_name(self, display_name):
        """Sets the display_name of this AddUser.

        The name shown when the user is listed

        :param display_name: The display_name of this AddUser.
        :type display_name: str
        """

        self._display_name = display_name

    @property
    def external_id(self):
        """Gets the external_id of this AddUser.

        The external id (foreign key). Must not exceed 255 characters.

        :return: The external_id of this AddUser.
        :rtype: str
        """
        return self._external_id

    @external_id.setter
    def external_id(self, external_id):
        """Sets the external_id of this AddUser.

        The external id (foreign key). Must not exceed 255 characters.

        :param external_id: The external_id of this AddUser.
        :type external_id: str
        """

        self._external_id = external_id

    @property
    def first_name(self):
        """Gets the first_name of this AddUser.

        The first (given) name of the user

        :return: The first_name of this AddUser.
        :rtype: str
        """
        return self._first_name

    @first_name.setter
    def first_name(self, first_name):
        """Sets the first_name of this AddUser.

        The first (given) name of the user

        :param first_name: The first_name of this AddUser.
        :type first_name: str
        """

        self._first_name = first_name

    @property
    def hard_lock(self):
        """Gets the hard_lock of this AddUser.

        True if the user should be locked from the system

        :return: The hard_lock of this AddUser.
        :rtype: bool
        """
        return self._hard_lock

    @hard_lock.setter
    def hard_lock(self, hard_lock):
        """Sets the hard_lock of this AddUser.

        True if the user should be locked from the system

        :param hard_lock: The hard_lock of this AddUser.
        :type hard_lock: bool
        """

        self._hard_lock = hard_lock

    @property
    def home_org(self):
        """Gets the home_org of this AddUser.

        The primary organization for the user. Must match the id of an Organization Unit.

        :return: The home_org of this AddUser.
        :rtype: int
        """
        return self._home_org

    @home_org.setter
    def home_org(self, home_org):
        """Sets the home_org of this AddUser.

        The primary organization for the user. Must match the id of an Organization Unit.

        :param home_org: The home_org of this AddUser.
        :type home_org: int
        """

        self._home_org = home_org

    @property
    def last_name(self):
        """Gets the last_name of this AddUser.

        The last name (surname) of the user

        :return: The last_name of this AddUser.
        :rtype: object
        """
        return self._last_name

    @last_name.setter
    def last_name(self, last_name):
        """Sets the last_name of this AddUser.

        The last name (surname) of the user

        :param last_name: The last_name of this AddUser.
        :type last_name: object
        """

        self._last_name = last_name

    @property
    def locale(self):
        """Gets the locale of this AddUser.

        The user's preferred language/locale setting. Affects date and number formatting.

        :return: The locale of this AddUser.
        :rtype: str
        """
        return self._locale

    @locale.setter
    def locale(self, locale):
        """Sets the locale of this AddUser.

        The user's preferred language/locale setting. Affects date and number formatting.

        :param locale: The locale of this AddUser.
        :type locale: str
        """

        self._locale = locale

    @property
    def primary_email(self):
        """Gets the primary_email of this AddUser.

        The primary email for the user. Used for communication from the platform.

        :return: The primary_email of this AddUser.
        :rtype: str
        """
        return self._primary_email

    @primary_email.setter
    def primary_email(self, primary_email):
        """Sets the primary_email of this AddUser.

        The primary email for the user. Used for communication from the platform.

        :param primary_email: The primary_email of this AddUser.
        :type primary_email: str
        """

        self._primary_email = primary_email
