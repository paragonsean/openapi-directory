# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class UserGroup(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, children: List[UserGroup]=None, global_id: int=None, group_id: int=None, name: str=None, parent: int=None, user_group: int=None):
        """UserGroup - a model defined in OpenAPI

        :param children: The children of this UserGroup.
        :param global_id: The global_id of this UserGroup.
        :param group_id: The group_id of this UserGroup.
        :param name: The name of this UserGroup.
        :param parent: The parent of this UserGroup.
        :param user_group: The user_group of this UserGroup.
        """
        self.openapi_types = {
            'children': List[UserGroup],
            'global_id': int,
            'group_id': int,
            'name': str,
            'parent': int,
            'user_group': int
        }

        self.attribute_map = {
            'children': 'children',
            'global_id': 'globalId',
            'group_id': 'groupId',
            'name': 'name',
            'parent': 'parent',
            'user_group': 'userGroup'
        }

        self._children = children
        self._global_id = global_id
        self._group_id = group_id
        self._name = name
        self._parent = parent
        self._user_group = user_group

    @classmethod
    def from_dict(cls, dikt: dict) -> 'UserGroup':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The UserGroup of this UserGroup.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def children(self):
        """Gets the children of this UserGroup.

        Children User Groups.

        :return: The children of this UserGroup.
        :rtype: List[UserGroup]
        """
        return self._children

    @children.setter
    def children(self, children):
        """Sets the children of this UserGroup.

        Children User Groups.

        :param children: The children of this UserGroup.
        :type children: List[UserGroup]
        """

        self._children = children

    @property
    def global_id(self):
        """Gets the global_id of this UserGroup.

        Global group ID if this group is based on a global group, otherwise null.

        :return: The global_id of this UserGroup.
        :rtype: int
        """
        return self._global_id

    @global_id.setter
    def global_id(self, global_id):
        """Sets the global_id of this UserGroup.

        Global group ID if this group is based on a global group, otherwise null.

        :param global_id: The global_id of this UserGroup.
        :type global_id: int
        """

        self._global_id = global_id

    @property
    def group_id(self):
        """Gets the group_id of this UserGroup.

        Unique identifier representing a User Group. Id numbers are never reused.

        :return: The group_id of this UserGroup.
        :rtype: int
        """
        return self._group_id

    @group_id.setter
    def group_id(self, group_id):
        """Sets the group_id of this UserGroup.

        Unique identifier representing a User Group. Id numbers are never reused.

        :param group_id: The group_id of this UserGroup.
        :type group_id: int
        """

        self._group_id = group_id

    @property
    def name(self):
        """Gets the name of this UserGroup.

        The name of the User Group.

        :return: The name of this UserGroup.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this UserGroup.

        The name of the User Group.

        :param name: The name of this UserGroup.
        :type name: str
        """
        if name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")

        self._name = name

    @property
    def parent(self):
        """Gets the parent of this UserGroup.

        Unique identifier of the parent or *null* if there is no parent.

        :return: The parent of this UserGroup.
        :rtype: int
        """
        return self._parent

    @parent.setter
    def parent(self, parent):
        """Sets the parent of this UserGroup.

        Unique identifier of the parent or *null* if there is no parent.

        :param parent: The parent of this UserGroup.
        :type parent: int
        """

        self._parent = parent

    @property
    def user_group(self):
        """Gets the user_group of this UserGroup.

        If of internal user group object that holds the members of this group.

        :return: The user_group of this UserGroup.
        :rtype: int
        """
        return self._user_group

    @user_group.setter
    def user_group(self, user_group):
        """Sets the user_group of this UserGroup.

        If of internal user group object that holds the members of this group.

        :param user_group: The user_group of this UserGroup.
        :type user_group: int
        """

        self._user_group = user_group
