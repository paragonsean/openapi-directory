# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class AddParticipant(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, email: str=None, extid: str=None, userid: str=None):
        """AddParticipant - a model defined in OpenAPI

        :param email: The email of this AddParticipant.
        :param extid: The extid of this AddParticipant.
        :param userid: The userid of this AddParticipant.
        """
        self.openapi_types = {
            'email': str,
            'extid': str,
            'userid': str
        }

        self.attribute_map = {
            'email': 'email',
            'extid': 'extid',
            'userid': 'userid'
        }

        self._email = email
        self._extid = extid
        self._userid = userid

    @classmethod
    def from_dict(cls, dikt: dict) -> 'AddParticipant':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The AddParticipant of this AddParticipant.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def email(self):
        """Gets the email of this AddParticipant.

        The email of the user. If no user exists with the specified email a user will be created with default values and the specified email.

        :return: The email of this AddParticipant.
        :rtype: str
        """
        return self._email

    @email.setter
    def email(self, email):
        """Sets the email of this AddParticipant.

        The email of the user. If no user exists with the specified email a user will be created with default values and the specified email.

        :param email: The email of this AddParticipant.
        :type email: str
        """

        self._email = email

    @property
    def extid(self):
        """Gets the extid of this AddParticipant.

        An optional external id for the participation

        :return: The extid of this AddParticipant.
        :rtype: str
        """
        return self._extid

    @extid.setter
    def extid(self, extid):
        """Sets the extid of this AddParticipant.

        An optional external id for the participation

        :param extid: The extid of this AddParticipant.
        :type extid: str
        """

        self._extid = extid

    @property
    def userid(self):
        """Gets the userid of this AddParticipant.


        :return: The userid of this AddParticipant.
        :rtype: str
        """
        return self._userid

    @userid.setter
    def userid(self, userid):
        """Sets the userid of this AddParticipant.


        :param userid: The userid of this AddParticipant.
        :type userid: str
        """

        self._userid = userid
