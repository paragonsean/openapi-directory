# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class OrgUnit(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, external_id: str=None, id: int=None, name: str=None, parent_id: int=None, type: str=None):
        """OrgUnit - a model defined in OpenAPI

        :param external_id: The external_id of this OrgUnit.
        :param id: The id of this OrgUnit.
        :param name: The name of this OrgUnit.
        :param parent_id: The parent_id of this OrgUnit.
        :param type: The type of this OrgUnit.
        """
        self.openapi_types = {
            'external_id': str,
            'id': int,
            'name': str,
            'parent_id': int,
            'type': str
        }

        self.attribute_map = {
            'external_id': 'externalId',
            'id': 'id',
            'name': 'name',
            'parent_id': 'parentId',
            'type': 'type'
        }

        self._external_id = external_id
        self._id = id
        self._name = name
        self._parent_id = parent_id
        self._type = type

    @classmethod
    def from_dict(cls, dikt: dict) -> 'OrgUnit':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The OrgUnit of this OrgUnit.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def external_id(self):
        """Gets the external_id of this OrgUnit.

        The external id (foreign key). Must not exceed 255 characters.

        :return: The external_id of this OrgUnit.
        :rtype: str
        """
        return self._external_id

    @external_id.setter
    def external_id(self, external_id):
        """Sets the external_id of this OrgUnit.

        The external id (foreign key). Must not exceed 255 characters.

        :param external_id: The external_id of this OrgUnit.
        :type external_id: str
        """

        self._external_id = external_id

    @property
    def id(self):
        """Gets the id of this OrgUnit.

        Unique identifier representing a specific organization unit. Id numbers are never reused.

        :return: The id of this OrgUnit.
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this OrgUnit.

        Unique identifier representing a specific organization unit. Id numbers are never reused.

        :param id: The id of this OrgUnit.
        :type id: int
        """
        if id is None:
            raise ValueError("Invalid value for `id`, must not be `None`")

        self._id = id

    @property
    def name(self):
        """Gets the name of this OrgUnit.

        The name of the client.

        :return: The name of this OrgUnit.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this OrgUnit.

        The name of the client.

        :param name: The name of this OrgUnit.
        :type name: str
        """

        self._name = name

    @property
    def parent_id(self):
        """Gets the parent_id of this OrgUnit.

        Unique identifier of the parent or *null* if there is no parent.

        :return: The parent_id of this OrgUnit.
        :rtype: int
        """
        return self._parent_id

    @parent_id.setter
    def parent_id(self, parent_id):
        """Sets the parent_id of this OrgUnit.

        Unique identifier of the parent or *null* if there is no parent.

        :param parent_id: The parent_id of this OrgUnit.
        :type parent_id: int
        """

        self._parent_id = parent_id

    @property
    def type(self):
        """Gets the type of this OrgUnit.

        The organization unit type. The only type is *client* at the moment.

        :return: The type of this OrgUnit.
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this OrgUnit.

        The organization unit type. The only type is *client* at the moment.

        :param type: The type of this OrgUnit.
        :type type: str
        """
        if type is None:
            raise ValueError("Invalid value for `type`, must not be `None`")

        self._type = type
