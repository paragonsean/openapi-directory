# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class CourseDesign(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, created: datetime=None, created_by: str=None, description: str=None, enabled: bool=None, locale: str=None, locked: datetime=None, locked_by: str=None, locked_design: bool=None, name: str=None, softid: str=None, sticky: bool=None, tags: List[str]=None):
        """CourseDesign - a model defined in OpenAPI

        :param created: The created of this CourseDesign.
        :param created_by: The created_by of this CourseDesign.
        :param description: The description of this CourseDesign.
        :param enabled: The enabled of this CourseDesign.
        :param locale: The locale of this CourseDesign.
        :param locked: The locked of this CourseDesign.
        :param locked_by: The locked_by of this CourseDesign.
        :param locked_design: The locked_design of this CourseDesign.
        :param name: The name of this CourseDesign.
        :param softid: The softid of this CourseDesign.
        :param sticky: The sticky of this CourseDesign.
        :param tags: The tags of this CourseDesign.
        """
        self.openapi_types = {
            'created': datetime,
            'created_by': str,
            'description': str,
            'enabled': bool,
            'locale': str,
            'locked': datetime,
            'locked_by': str,
            'locked_design': bool,
            'name': str,
            'softid': str,
            'sticky': bool,
            'tags': List[str]
        }

        self.attribute_map = {
            'created': 'created',
            'created_by': 'createdBy',
            'description': 'description',
            'enabled': 'enabled',
            'locale': 'locale',
            'locked': 'locked',
            'locked_by': 'lockedBy',
            'locked_design': 'lockedDesign',
            'name': 'name',
            'softid': 'softid',
            'sticky': 'sticky',
            'tags': 'tags'
        }

        self._created = created
        self._created_by = created_by
        self._description = description
        self._enabled = enabled
        self._locale = locale
        self._locked = locked
        self._locked_by = locked_by
        self._locked_design = locked_design
        self._name = name
        self._softid = softid
        self._sticky = sticky
        self._tags = tags

    @classmethod
    def from_dict(cls, dikt: dict) -> 'CourseDesign':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The CourseDesign of this CourseDesign.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def created(self):
        """Gets the created of this CourseDesign.

        The time this entry was created

        :return: The created of this CourseDesign.
        :rtype: datetime
        """
        return self._created

    @created.setter
    def created(self, created):
        """Sets the created of this CourseDesign.

        The time this entry was created

        :param created: The created of this CourseDesign.
        :type created: datetime
        """

        self._created = created

    @property
    def created_by(self):
        """Gets the created_by of this CourseDesign.

        UUID of the user that created this entry.

        :return: The created_by of this CourseDesign.
        :rtype: str
        """
        return self._created_by

    @created_by.setter
    def created_by(self, created_by):
        """Sets the created_by of this CourseDesign.

        UUID of the user that created this entry.

        :param created_by: The created_by of this CourseDesign.
        :type created_by: str
        """

        self._created_by = created_by

    @property
    def description(self):
        """Gets the description of this CourseDesign.

        Course description

        :return: The description of this CourseDesign.
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this CourseDesign.

        Course description

        :param description: The description of this CourseDesign.
        :type description: str
        """

        self._description = description

    @property
    def enabled(self):
        """Gets the enabled of this CourseDesign.

        True if this design is enabled for use

        :return: The enabled of this CourseDesign.
        :rtype: bool
        """
        return self._enabled

    @enabled.setter
    def enabled(self, enabled):
        """Sets the enabled of this CourseDesign.

        True if this design is enabled for use

        :param enabled: The enabled of this CourseDesign.
        :type enabled: bool
        """
        if enabled is None:
            raise ValueError("Invalid value for `enabled`, must not be `None`")

        self._enabled = enabled

    @property
    def locale(self):
        """Gets the locale of this CourseDesign.

        BCP-47 locale

        :return: The locale of this CourseDesign.
        :rtype: str
        """
        return self._locale

    @locale.setter
    def locale(self, locale):
        """Sets the locale of this CourseDesign.

        BCP-47 locale

        :param locale: The locale of this CourseDesign.
        :type locale: str
        """
        if locale is None:
            raise ValueError("Invalid value for `locale`, must not be `None`")

        self._locale = locale

    @property
    def locked(self):
        """Gets the locked of this CourseDesign.

        The time when this entry was locked or null

        :return: The locked of this CourseDesign.
        :rtype: datetime
        """
        return self._locked

    @locked.setter
    def locked(self, locked):
        """Sets the locked of this CourseDesign.

        The time when this entry was locked or null

        :param locked: The locked of this CourseDesign.
        :type locked: datetime
        """

        self._locked = locked

    @property
    def locked_by(self):
        """Gets the locked_by of this CourseDesign.

        UUID of the user that has locked this design

        :return: The locked_by of this CourseDesign.
        :rtype: str
        """
        return self._locked_by

    @locked_by.setter
    def locked_by(self, locked_by):
        """Sets the locked_by of this CourseDesign.

        UUID of the user that has locked this design

        :param locked_by: The locked_by of this CourseDesign.
        :type locked_by: str
        """

        self._locked_by = locked_by

    @property
    def locked_design(self):
        """Gets the locked_design of this CourseDesign.

        True if this design is locked for editing

        :return: The locked_design of this CourseDesign.
        :rtype: bool
        """
        return self._locked_design

    @locked_design.setter
    def locked_design(self, locked_design):
        """Sets the locked_design of this CourseDesign.

        True if this design is locked for editing

        :param locked_design: The locked_design of this CourseDesign.
        :type locked_design: bool
        """
        if locked_design is None:
            raise ValueError("Invalid value for `locked_design`, must not be `None`")

        self._locked_design = locked_design

    @property
    def name(self):
        """Gets the name of this CourseDesign.

        The name

        :return: The name of this CourseDesign.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this CourseDesign.

        The name

        :param name: The name of this CourseDesign.
        :type name: str
        """
        if name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")

        self._name = name

    @property
    def softid(self):
        """Gets the softid of this CourseDesign.

        The soft identifier

        :return: The softid of this CourseDesign.
        :rtype: str
        """
        return self._softid

    @softid.setter
    def softid(self, softid):
        """Sets the softid of this CourseDesign.

        The soft identifier

        :param softid: The softid of this CourseDesign.
        :type softid: str
        """

        self._softid = softid

    @property
    def sticky(self):
        """Gets the sticky of this CourseDesign.

        True if this design is sticky

        :return: The sticky of this CourseDesign.
        :rtype: bool
        """
        return self._sticky

    @sticky.setter
    def sticky(self, sticky):
        """Sets the sticky of this CourseDesign.

        True if this design is sticky

        :param sticky: The sticky of this CourseDesign.
        :type sticky: bool
        """
        if sticky is None:
            raise ValueError("Invalid value for `sticky`, must not be `None`")

        self._sticky = sticky

    @property
    def tags(self):
        """Gets the tags of this CourseDesign.

        Course tags

        :return: The tags of this CourseDesign.
        :rtype: List[str]
        """
        return self._tags

    @tags.setter
    def tags(self, tags):
        """Sets the tags of this CourseDesign.

        Course tags

        :param tags: The tags of this CourseDesign.
        :type tags: List[str]
        """

        self._tags = tags
