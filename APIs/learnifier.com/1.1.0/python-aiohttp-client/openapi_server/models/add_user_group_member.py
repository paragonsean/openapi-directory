# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class AddUserGroupMember(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, uuid: str=None):
        """AddUserGroupMember - a model defined in OpenAPI

        :param uuid: The uuid of this AddUserGroupMember.
        """
        self.openapi_types = {
            'uuid': str
        }

        self.attribute_map = {
            'uuid': 'uuid'
        }

        self._uuid = uuid

    @classmethod
    def from_dict(cls, dikt: dict) -> 'AddUserGroupMember':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The AddUserGroupMember of this AddUserGroupMember.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def uuid(self):
        """Gets the uuid of this AddUserGroupMember.

        UUID of user to add to this group.

        :return: The uuid of this AddUserGroupMember.
        :rtype: str
        """
        return self._uuid

    @uuid.setter
    def uuid(self, uuid):
        """Sets the uuid of this AddUserGroupMember.

        UUID of user to add to this group.

        :param uuid: The uuid of this AddUserGroupMember.
        :type uuid: str
        """
        if uuid is None:
            raise ValueError("Invalid value for `uuid`, must not be `None`")

        self._uuid = uuid
