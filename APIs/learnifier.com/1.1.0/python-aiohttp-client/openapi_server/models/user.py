# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.user_preferences import UserPreferences
from openapi_server import util


class User(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, authorization_possible: bool=None, display_name: str=None, external_id: str=None, first_login: datetime=None, first_name: str=None, hard_lock: bool=None, home_org: int=None, id: str=None, last_login: datetime=None, last_name: str=None, locked: bool=None, prefs: UserPreferences=None, primary_email: str=None):
        """User - a model defined in OpenAPI

        :param authorization_possible: The authorization_possible of this User.
        :param display_name: The display_name of this User.
        :param external_id: The external_id of this User.
        :param first_login: The first_login of this User.
        :param first_name: The first_name of this User.
        :param hard_lock: The hard_lock of this User.
        :param home_org: The home_org of this User.
        :param id: The id of this User.
        :param last_login: The last_login of this User.
        :param last_name: The last_name of this User.
        :param locked: The locked of this User.
        :param prefs: The prefs of this User.
        :param primary_email: The primary_email of this User.
        """
        self.openapi_types = {
            'authorization_possible': bool,
            'display_name': str,
            'external_id': str,
            'first_login': datetime,
            'first_name': str,
            'hard_lock': bool,
            'home_org': int,
            'id': str,
            'last_login': datetime,
            'last_name': str,
            'locked': bool,
            'prefs': UserPreferences,
            'primary_email': str
        }

        self.attribute_map = {
            'authorization_possible': 'authorizationPossible',
            'display_name': 'displayName',
            'external_id': 'externalId',
            'first_login': 'firstLogin',
            'first_name': 'firstName',
            'hard_lock': 'hardLock',
            'home_org': 'homeOrg',
            'id': 'id',
            'last_login': 'lastLogin',
            'last_name': 'lastName',
            'locked': 'locked',
            'prefs': 'prefs',
            'primary_email': 'primaryEmail'
        }

        self._authorization_possible = authorization_possible
        self._display_name = display_name
        self._external_id = external_id
        self._first_login = first_login
        self._first_name = first_name
        self._hard_lock = hard_lock
        self._home_org = home_org
        self._id = id
        self._last_login = last_login
        self._last_name = last_name
        self._locked = locked
        self._prefs = prefs
        self._primary_email = primary_email

    @classmethod
    def from_dict(cls, dikt: dict) -> 'User':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The User of this User.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def authorization_possible(self):
        """Gets the authorization_possible of this User.

        True if the user can authorize herself/himself

        :return: The authorization_possible of this User.
        :rtype: bool
        """
        return self._authorization_possible

    @authorization_possible.setter
    def authorization_possible(self, authorization_possible):
        """Sets the authorization_possible of this User.

        True if the user can authorize herself/himself

        :param authorization_possible: The authorization_possible of this User.
        :type authorization_possible: bool
        """

        self._authorization_possible = authorization_possible

    @property
    def display_name(self):
        """Gets the display_name of this User.

        Full name of the user

        :return: The display_name of this User.
        :rtype: str
        """
        return self._display_name

    @display_name.setter
    def display_name(self, display_name):
        """Sets the display_name of this User.

        Full name of the user

        :param display_name: The display_name of this User.
        :type display_name: str
        """

        self._display_name = display_name

    @property
    def external_id(self):
        """Gets the external_id of this User.

        The external id (foreign key). Must not exceed 255 characters.

        :return: The external_id of this User.
        :rtype: str
        """
        return self._external_id

    @external_id.setter
    def external_id(self, external_id):
        """Sets the external_id of this User.

        The external id (foreign key). Must not exceed 255 characters.

        :param external_id: The external_id of this User.
        :type external_id: str
        """

        self._external_id = external_id

    @property
    def first_login(self):
        """Gets the first_login of this User.

        The timestamp when the first login was made. This value can be *null*.

        :return: The first_login of this User.
        :rtype: datetime
        """
        return self._first_login

    @first_login.setter
    def first_login(self, first_login):
        """Sets the first_login of this User.

        The timestamp when the first login was made. This value can be *null*.

        :param first_login: The first_login of this User.
        :type first_login: datetime
        """

        self._first_login = first_login

    @property
    def first_name(self):
        """Gets the first_name of this User.

        The first name of the user (or given name)

        :return: The first_name of this User.
        :rtype: str
        """
        return self._first_name

    @first_name.setter
    def first_name(self, first_name):
        """Sets the first_name of this User.

        The first name of the user (or given name)

        :param first_name: The first_name of this User.
        :type first_name: str
        """

        self._first_name = first_name

    @property
    def hard_lock(self):
        """Gets the hard_lock of this User.

        True if the user is locked and the lock has been set by an administrator

        :return: The hard_lock of this User.
        :rtype: bool
        """
        return self._hard_lock

    @hard_lock.setter
    def hard_lock(self, hard_lock):
        """Sets the hard_lock of this User.

        True if the user is locked and the lock has been set by an administrator

        :param hard_lock: The hard_lock of this User.
        :type hard_lock: bool
        """

        self._hard_lock = hard_lock

    @property
    def home_org(self):
        """Gets the home_org of this User.

        The primary organization for the user. Must match the id of an Organization Unit.

        :return: The home_org of this User.
        :rtype: int
        """
        return self._home_org

    @home_org.setter
    def home_org(self, home_org):
        """Sets the home_org of this User.

        The primary organization for the user. Must match the id of an Organization Unit.

        :param home_org: The home_org of this User.
        :type home_org: int
        """

        self._home_org = home_org

    @property
    def id(self):
        """Gets the id of this User.

        The id of the user this participation belongs to

        :return: The id of this User.
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this User.

        The id of the user this participation belongs to

        :param id: The id of this User.
        :type id: str
        """

        self._id = id

    @property
    def last_login(self):
        """Gets the last_login of this User.

        The timestamp when the last login was made. This value can be *null*.

        :return: The last_login of this User.
        :rtype: datetime
        """
        return self._last_login

    @last_login.setter
    def last_login(self, last_login):
        """Sets the last_login of this User.

        The timestamp when the last login was made. This value can be *null*.

        :param last_login: The last_login of this User.
        :type last_login: datetime
        """

        self._last_login = last_login

    @property
    def last_name(self):
        """Gets the last_name of this User.

        The last name of the user (or surname)

        :return: The last_name of this User.
        :rtype: str
        """
        return self._last_name

    @last_name.setter
    def last_name(self, last_name):
        """Sets the last_name of this User.

        The last name of the user (or surname)

        :param last_name: The last_name of this User.
        :type last_name: str
        """

        self._last_name = last_name

    @property
    def locked(self):
        """Gets the locked of this User.

        Lock status. A locked user will not be able to access the platform.

        :return: The locked of this User.
        :rtype: bool
        """
        return self._locked

    @locked.setter
    def locked(self, locked):
        """Sets the locked of this User.

        Lock status. A locked user will not be able to access the platform.

        :param locked: The locked of this User.
        :type locked: bool
        """

        self._locked = locked

    @property
    def prefs(self):
        """Gets the prefs of this User.


        :return: The prefs of this User.
        :rtype: UserPreferences
        """
        return self._prefs

    @prefs.setter
    def prefs(self, prefs):
        """Sets the prefs of this User.


        :param prefs: The prefs of this User.
        :type prefs: UserPreferences
        """

        self._prefs = prefs

    @property
    def primary_email(self):
        """Gets the primary_email of this User.

        The primary email for this user. If the user has no email this value is *null*.

        :return: The primary_email of this User.
        :rtype: str
        """
        return self._primary_email

    @primary_email.setter
    def primary_email(self, primary_email):
        """Sets the primary_email of this User.

        The primary email for this user. If the user has no email this value is *null*.

        :param primary_email: The primary_email of this User.
        :type primary_email: str
        """

        self._primary_email = primary_email
