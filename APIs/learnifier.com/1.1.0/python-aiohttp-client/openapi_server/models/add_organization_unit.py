# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class AddOrganizationUnit(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, caller: str=None, client_number: str=None, country: str=None, display_name: str=None, external_id: str=None, parent: float=None):
        """AddOrganizationUnit - a model defined in OpenAPI

        :param caller: The caller of this AddOrganizationUnit.
        :param client_number: The client_number of this AddOrganizationUnit.
        :param country: The country of this AddOrganizationUnit.
        :param display_name: The display_name of this AddOrganizationUnit.
        :param external_id: The external_id of this AddOrganizationUnit.
        :param parent: The parent of this AddOrganizationUnit.
        """
        self.openapi_types = {
            'caller': str,
            'client_number': str,
            'country': str,
            'display_name': str,
            'external_id': str,
            'parent': float
        }

        self.attribute_map = {
            'caller': 'caller',
            'client_number': 'clientNumber',
            'country': 'country',
            'display_name': 'displayName',
            'external_id': 'externalId',
            'parent': 'parent'
        }

        self._caller = caller
        self._client_number = client_number
        self._country = country
        self._display_name = display_name
        self._external_id = external_id
        self._parent = parent

    @classmethod
    def from_dict(cls, dikt: dict) -> 'AddOrganizationUnit':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The AddOrganizationUnit of this AddOrganizationUnit.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def caller(self):
        """Gets the caller of this AddOrganizationUnit.

        The id of the user that initiated this operation

        :return: The caller of this AddOrganizationUnit.
        :rtype: str
        """
        return self._caller

    @caller.setter
    def caller(self, caller):
        """Sets the caller of this AddOrganizationUnit.

        The id of the user that initiated this operation

        :param caller: The caller of this AddOrganizationUnit.
        :type caller: str
        """

        self._caller = caller

    @property
    def client_number(self):
        """Gets the client_number of this AddOrganizationUnit.

        A client number. Sometimes used when communicating with external system. Must be unique if specified.

        :return: The client_number of this AddOrganizationUnit.
        :rtype: str
        """
        return self._client_number

    @client_number.setter
    def client_number(self, client_number):
        """Sets the client_number of this AddOrganizationUnit.

        A client number. Sometimes used when communicating with external system. Must be unique if specified.

        :param client_number: The client_number of this AddOrganizationUnit.
        :type client_number: str
        """

        self._client_number = client_number

    @property
    def country(self):
        """Gets the country of this AddOrganizationUnit.

        The country code that best matches the organization unit. If unspecified the platform default will be set.

        :return: The country of this AddOrganizationUnit.
        :rtype: str
        """
        return self._country

    @country.setter
    def country(self, country):
        """Sets the country of this AddOrganizationUnit.

        The country code that best matches the organization unit. If unspecified the platform default will be set.

        :param country: The country of this AddOrganizationUnit.
        :type country: str
        """

        self._country = country

    @property
    def display_name(self):
        """Gets the display_name of this AddOrganizationUnit.

        The name shown for the organization unit

        :return: The display_name of this AddOrganizationUnit.
        :rtype: str
        """
        return self._display_name

    @display_name.setter
    def display_name(self, display_name):
        """Sets the display_name of this AddOrganizationUnit.

        The name shown for the organization unit

        :param display_name: The display_name of this AddOrganizationUnit.
        :type display_name: str
        """
        if display_name is None:
            raise ValueError("Invalid value for `display_name`, must not be `None`")

        self._display_name = display_name

    @property
    def external_id(self):
        """Gets the external_id of this AddOrganizationUnit.

        The external id (foreign key). Must not exceed 255 characters.

        :return: The external_id of this AddOrganizationUnit.
        :rtype: str
        """
        return self._external_id

    @external_id.setter
    def external_id(self, external_id):
        """Sets the external_id of this AddOrganizationUnit.

        The external id (foreign key). Must not exceed 255 characters.

        :param external_id: The external_id of this AddOrganizationUnit.
        :type external_id: str
        """

        self._external_id = external_id

    @property
    def parent(self):
        """Gets the parent of this AddOrganizationUnit.

        A Organization Unit id of the parent Organization Unit (optional).

        :return: The parent of this AddOrganizationUnit.
        :rtype: float
        """
        return self._parent

    @parent.setter
    def parent(self, parent):
        """Sets the parent of this AddOrganizationUnit.

        A Organization Unit id of the parent Organization Unit (optional).

        :param parent: The parent of this AddOrganizationUnit.
        :type parent: float
        """

        self._parent = parent
