# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class GlobalUserGroup(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, created: datetime=None, created_by: str=None, id: int=None, name: str=None, parent: int=None, softi_id: str=None, updated: datetime=None, updated_by: str=None):
        """GlobalUserGroup - a model defined in OpenAPI

        :param created: The created of this GlobalUserGroup.
        :param created_by: The created_by of this GlobalUserGroup.
        :param id: The id of this GlobalUserGroup.
        :param name: The name of this GlobalUserGroup.
        :param parent: The parent of this GlobalUserGroup.
        :param softi_id: The softi_id of this GlobalUserGroup.
        :param updated: The updated of this GlobalUserGroup.
        :param updated_by: The updated_by of this GlobalUserGroup.
        """
        self.openapi_types = {
            'created': datetime,
            'created_by': str,
            'id': int,
            'name': str,
            'parent': int,
            'softi_id': str,
            'updated': datetime,
            'updated_by': str
        }

        self.attribute_map = {
            'created': 'created',
            'created_by': 'createdBy',
            'id': 'id',
            'name': 'name',
            'parent': 'parent',
            'softi_id': 'softiId',
            'updated': 'updated',
            'updated_by': 'updatedBy'
        }

        self._created = created
        self._created_by = created_by
        self._id = id
        self._name = name
        self._parent = parent
        self._softi_id = softi_id
        self._updated = updated
        self._updated_by = updated_by

    @classmethod
    def from_dict(cls, dikt: dict) -> 'GlobalUserGroup':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The GlobalUserGroup of this GlobalUserGroup.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def created(self):
        """Gets the created of this GlobalUserGroup.

        Timestamp when group was created.

        :return: The created of this GlobalUserGroup.
        :rtype: datetime
        """
        return self._created

    @created.setter
    def created(self, created):
        """Sets the created of this GlobalUserGroup.

        Timestamp when group was created.

        :param created: The created of this GlobalUserGroup.
        :type created: datetime
        """
        if created is None:
            raise ValueError("Invalid value for `created`, must not be `None`")

        self._created = created

    @property
    def created_by(self):
        """Gets the created_by of this GlobalUserGroup.

        UUID of the user that created this group.

        :return: The created_by of this GlobalUserGroup.
        :rtype: str
        """
        return self._created_by

    @created_by.setter
    def created_by(self, created_by):
        """Sets the created_by of this GlobalUserGroup.

        UUID of the user that created this group.

        :param created_by: The created_by of this GlobalUserGroup.
        :type created_by: str
        """

        self._created_by = created_by

    @property
    def id(self):
        """Gets the id of this GlobalUserGroup.

        The id of the group.

        :return: The id of this GlobalUserGroup.
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this GlobalUserGroup.

        The id of the group.

        :param id: The id of this GlobalUserGroup.
        :type id: int
        """
        if id is None:
            raise ValueError("Invalid value for `id`, must not be `None`")

        self._id = id

    @property
    def name(self):
        """Gets the name of this GlobalUserGroup.

        The name of the group.

        :return: The name of this GlobalUserGroup.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this GlobalUserGroup.

        The name of the group.

        :param name: The name of this GlobalUserGroup.
        :type name: str
        """

        self._name = name

    @property
    def parent(self):
        """Gets the parent of this GlobalUserGroup.

        Id of parent group, null if group has no parent.

        :return: The parent of this GlobalUserGroup.
        :rtype: int
        """
        return self._parent

    @parent.setter
    def parent(self, parent):
        """Sets the parent of this GlobalUserGroup.

        Id of parent group, null if group has no parent.

        :param parent: The parent of this GlobalUserGroup.
        :type parent: int
        """

        self._parent = parent

    @property
    def softi_id(self):
        """Gets the softi_id of this GlobalUserGroup.

        Alternative unique ID for the group.

        :return: The softi_id of this GlobalUserGroup.
        :rtype: str
        """
        return self._softi_id

    @softi_id.setter
    def softi_id(self, softi_id):
        """Sets the softi_id of this GlobalUserGroup.

        Alternative unique ID for the group.

        :param softi_id: The softi_id of this GlobalUserGroup.
        :type softi_id: str
        """

        self._softi_id = softi_id

    @property
    def updated(self):
        """Gets the updated of this GlobalUserGroup.

        Timestamp when group was last modified.

        :return: The updated of this GlobalUserGroup.
        :rtype: datetime
        """
        return self._updated

    @updated.setter
    def updated(self, updated):
        """Sets the updated of this GlobalUserGroup.

        Timestamp when group was last modified.

        :param updated: The updated of this GlobalUserGroup.
        :type updated: datetime
        """

        self._updated = updated

    @property
    def updated_by(self):
        """Gets the updated_by of this GlobalUserGroup.

        UUID of the user that last updated this group.

        :return: The updated_by of this GlobalUserGroup.
        :rtype: str
        """
        return self._updated_by

    @updated_by.setter
    def updated_by(self, updated_by):
        """Sets the updated_by of this GlobalUserGroup.

        UUID of the user that last updated this group.

        :param updated_by: The updated_by of this GlobalUserGroup.
        :type updated_by: str
        """

        self._updated_by = updated_by
