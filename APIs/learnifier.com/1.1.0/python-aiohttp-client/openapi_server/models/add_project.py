# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class AddProject(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, country: str=None, created_by: str=None, design_id: int=None, locale: str=None, name: str=None, note: str=None, timezone: str=None, user_description: str=None, user_title: str=None):
        """AddProject - a model defined in OpenAPI

        :param country: The country of this AddProject.
        :param created_by: The created_by of this AddProject.
        :param design_id: The design_id of this AddProject.
        :param locale: The locale of this AddProject.
        :param name: The name of this AddProject.
        :param note: The note of this AddProject.
        :param timezone: The timezone of this AddProject.
        :param user_description: The user_description of this AddProject.
        :param user_title: The user_title of this AddProject.
        """
        self.openapi_types = {
            'country': str,
            'created_by': str,
            'design_id': int,
            'locale': str,
            'name': str,
            'note': str,
            'timezone': str,
            'user_description': str,
            'user_title': str
        }

        self.attribute_map = {
            'country': 'country',
            'created_by': 'createdBy',
            'design_id': 'designId',
            'locale': 'locale',
            'name': 'name',
            'note': 'note',
            'timezone': 'timezone',
            'user_description': 'userDescription',
            'user_title': 'userTitle'
        }

        self._country = country
        self._created_by = created_by
        self._design_id = design_id
        self._locale = locale
        self._name = name
        self._note = note
        self._timezone = timezone
        self._user_description = user_description
        self._user_title = user_title

    @classmethod
    def from_dict(cls, dikt: dict) -> 'AddProject':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The AddProject of this AddProject.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def country(self):
        """Gets the country of this AddProject.

        The country code. Default value will be used if not specified

        :return: The country of this AddProject.
        :rtype: str
        """
        return self._country

    @country.setter
    def country(self, country):
        """Sets the country of this AddProject.

        The country code. Default value will be used if not specified

        :param country: The country of this AddProject.
        :type country: str
        """

        self._country = country

    @property
    def created_by(self):
        """Gets the created_by of this AddProject.

        The id of the user that created the project. If the creator is not known this value can be *null* or not specified

        :return: The created_by of this AddProject.
        :rtype: str
        """
        return self._created_by

    @created_by.setter
    def created_by(self, created_by):
        """Sets the created_by of this AddProject.

        The id of the user that created the project. If the creator is not known this value can be *null* or not specified

        :param created_by: The created_by of this AddProject.
        :type created_by: str
        """

        self._created_by = created_by

    @property
    def design_id(self):
        """Gets the design_id of this AddProject.

        The id of the design this project should be based on

        :return: The design_id of this AddProject.
        :rtype: int
        """
        return self._design_id

    @design_id.setter
    def design_id(self, design_id):
        """Sets the design_id of this AddProject.

        The id of the design this project should be based on

        :param design_id: The design_id of this AddProject.
        :type design_id: int
        """
        if design_id is None:
            raise ValueError("Invalid value for `design_id`, must not be `None`")

        self._design_id = design_id

    @property
    def locale(self):
        """Gets the locale of this AddProject.

        The primary locale for this project. Default value will be used if not specified

        :return: The locale of this AddProject.
        :rtype: str
        """
        return self._locale

    @locale.setter
    def locale(self, locale):
        """Sets the locale of this AddProject.

        The primary locale for this project. Default value will be used if not specified

        :param locale: The locale of this AddProject.
        :type locale: str
        """

        self._locale = locale

    @property
    def name(self):
        """Gets the name of this AddProject.

        The internal name of the project

        :return: The name of this AddProject.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this AddProject.

        The internal name of the project

        :param name: The name of this AddProject.
        :type name: str
        """
        if name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")

        self._name = name

    @property
    def note(self):
        """Gets the note of this AddProject.

        The internal note field

        :return: The note of this AddProject.
        :rtype: str
        """
        return self._note

    @note.setter
    def note(self, note):
        """Sets the note of this AddProject.

        The internal note field

        :param note: The note of this AddProject.
        :type note: str
        """

        self._note = note

    @property
    def timezone(self):
        """Gets the timezone of this AddProject.

        The main timezone for the project. Do not specify for default timezone

        :return: The timezone of this AddProject.
        :rtype: str
        """
        return self._timezone

    @timezone.setter
    def timezone(self, timezone):
        """Sets the timezone of this AddProject.

        The main timezone for the project. Do not specify for default timezone

        :param timezone: The timezone of this AddProject.
        :type timezone: str
        """

        self._timezone = timezone

    @property
    def user_description(self):
        """Gets the user_description of this AddProject.

        The description presented to participants. Do not specify for default value from design

        :return: The user_description of this AddProject.
        :rtype: str
        """
        return self._user_description

    @user_description.setter
    def user_description(self, user_description):
        """Sets the user_description of this AddProject.

        The description presented to participants. Do not specify for default value from design

        :param user_description: The user_description of this AddProject.
        :type user_description: str
        """

        self._user_description = user_description

    @property
    def user_title(self):
        """Gets the user_title of this AddProject.

        The title presented to participants. Do not specify for default value from design

        :return: The user_title of this AddProject.
        :rtype: str
        """
        return self._user_title

    @user_title.setter
    def user_title(self, user_title):
        """Sets the user_title of this AddProject.

        The title presented to participants. Do not specify for default value from design

        :param user_title: The user_title of this AddProject.
        :type user_title: str
        """

        self._user_title = user_title
