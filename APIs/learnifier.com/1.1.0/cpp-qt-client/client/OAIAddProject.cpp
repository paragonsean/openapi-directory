/**
 * Learnifier
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.1.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIAddProject.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIAddProject::OAIAddProject(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIAddProject::OAIAddProject() {
    this->initializeModel();
}

OAIAddProject::~OAIAddProject() {}

void OAIAddProject::initializeModel() {

    m_country_isSet = false;
    m_country_isValid = false;

    m_created_by_isSet = false;
    m_created_by_isValid = false;

    m_design_id_isSet = false;
    m_design_id_isValid = false;

    m_locale_isSet = false;
    m_locale_isValid = false;

    m_name_isSet = false;
    m_name_isValid = false;

    m_note_isSet = false;
    m_note_isValid = false;

    m_timezone_isSet = false;
    m_timezone_isValid = false;

    m_user_description_isSet = false;
    m_user_description_isValid = false;

    m_user_title_isSet = false;
    m_user_title_isValid = false;
}

void OAIAddProject::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIAddProject::fromJsonObject(QJsonObject json) {

    m_country_isValid = ::OpenAPI::fromJsonValue(m_country, json[QString("country")]);
    m_country_isSet = !json[QString("country")].isNull() && m_country_isValid;

    m_created_by_isValid = ::OpenAPI::fromJsonValue(m_created_by, json[QString("createdBy")]);
    m_created_by_isSet = !json[QString("createdBy")].isNull() && m_created_by_isValid;

    m_design_id_isValid = ::OpenAPI::fromJsonValue(m_design_id, json[QString("designId")]);
    m_design_id_isSet = !json[QString("designId")].isNull() && m_design_id_isValid;

    m_locale_isValid = ::OpenAPI::fromJsonValue(m_locale, json[QString("locale")]);
    m_locale_isSet = !json[QString("locale")].isNull() && m_locale_isValid;

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("name")]);
    m_name_isSet = !json[QString("name")].isNull() && m_name_isValid;

    m_note_isValid = ::OpenAPI::fromJsonValue(m_note, json[QString("note")]);
    m_note_isSet = !json[QString("note")].isNull() && m_note_isValid;

    m_timezone_isValid = ::OpenAPI::fromJsonValue(m_timezone, json[QString("timezone")]);
    m_timezone_isSet = !json[QString("timezone")].isNull() && m_timezone_isValid;

    m_user_description_isValid = ::OpenAPI::fromJsonValue(m_user_description, json[QString("userDescription")]);
    m_user_description_isSet = !json[QString("userDescription")].isNull() && m_user_description_isValid;

    m_user_title_isValid = ::OpenAPI::fromJsonValue(m_user_title, json[QString("userTitle")]);
    m_user_title_isSet = !json[QString("userTitle")].isNull() && m_user_title_isValid;
}

QString OAIAddProject::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIAddProject::asJsonObject() const {
    QJsonObject obj;
    if (m_country_isSet) {
        obj.insert(QString("country"), ::OpenAPI::toJsonValue(m_country));
    }
    if (m_created_by_isSet) {
        obj.insert(QString("createdBy"), ::OpenAPI::toJsonValue(m_created_by));
    }
    if (m_design_id_isSet) {
        obj.insert(QString("designId"), ::OpenAPI::toJsonValue(m_design_id));
    }
    if (m_locale_isSet) {
        obj.insert(QString("locale"), ::OpenAPI::toJsonValue(m_locale));
    }
    if (m_name_isSet) {
        obj.insert(QString("name"), ::OpenAPI::toJsonValue(m_name));
    }
    if (m_note_isSet) {
        obj.insert(QString("note"), ::OpenAPI::toJsonValue(m_note));
    }
    if (m_timezone_isSet) {
        obj.insert(QString("timezone"), ::OpenAPI::toJsonValue(m_timezone));
    }
    if (m_user_description_isSet) {
        obj.insert(QString("userDescription"), ::OpenAPI::toJsonValue(m_user_description));
    }
    if (m_user_title_isSet) {
        obj.insert(QString("userTitle"), ::OpenAPI::toJsonValue(m_user_title));
    }
    return obj;
}

QString OAIAddProject::getCountry() const {
    return m_country;
}
void OAIAddProject::setCountry(const QString &country) {
    m_country = country;
    m_country_isSet = true;
}

bool OAIAddProject::is_country_Set() const{
    return m_country_isSet;
}

bool OAIAddProject::is_country_Valid() const{
    return m_country_isValid;
}

QString OAIAddProject::getCreatedBy() const {
    return m_created_by;
}
void OAIAddProject::setCreatedBy(const QString &created_by) {
    m_created_by = created_by;
    m_created_by_isSet = true;
}

bool OAIAddProject::is_created_by_Set() const{
    return m_created_by_isSet;
}

bool OAIAddProject::is_created_by_Valid() const{
    return m_created_by_isValid;
}

qint64 OAIAddProject::getDesignId() const {
    return m_design_id;
}
void OAIAddProject::setDesignId(const qint64 &design_id) {
    m_design_id = design_id;
    m_design_id_isSet = true;
}

bool OAIAddProject::is_design_id_Set() const{
    return m_design_id_isSet;
}

bool OAIAddProject::is_design_id_Valid() const{
    return m_design_id_isValid;
}

QString OAIAddProject::getLocale() const {
    return m_locale;
}
void OAIAddProject::setLocale(const QString &locale) {
    m_locale = locale;
    m_locale_isSet = true;
}

bool OAIAddProject::is_locale_Set() const{
    return m_locale_isSet;
}

bool OAIAddProject::is_locale_Valid() const{
    return m_locale_isValid;
}

QString OAIAddProject::getName() const {
    return m_name;
}
void OAIAddProject::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAIAddProject::is_name_Set() const{
    return m_name_isSet;
}

bool OAIAddProject::is_name_Valid() const{
    return m_name_isValid;
}

QString OAIAddProject::getNote() const {
    return m_note;
}
void OAIAddProject::setNote(const QString &note) {
    m_note = note;
    m_note_isSet = true;
}

bool OAIAddProject::is_note_Set() const{
    return m_note_isSet;
}

bool OAIAddProject::is_note_Valid() const{
    return m_note_isValid;
}

QString OAIAddProject::getTimezone() const {
    return m_timezone;
}
void OAIAddProject::setTimezone(const QString &timezone) {
    m_timezone = timezone;
    m_timezone_isSet = true;
}

bool OAIAddProject::is_timezone_Set() const{
    return m_timezone_isSet;
}

bool OAIAddProject::is_timezone_Valid() const{
    return m_timezone_isValid;
}

QString OAIAddProject::getUserDescription() const {
    return m_user_description;
}
void OAIAddProject::setUserDescription(const QString &user_description) {
    m_user_description = user_description;
    m_user_description_isSet = true;
}

bool OAIAddProject::is_user_description_Set() const{
    return m_user_description_isSet;
}

bool OAIAddProject::is_user_description_Valid() const{
    return m_user_description_isValid;
}

QString OAIAddProject::getUserTitle() const {
    return m_user_title;
}
void OAIAddProject::setUserTitle(const QString &user_title) {
    m_user_title = user_title;
    m_user_title_isSet = true;
}

bool OAIAddProject::is_user_title_Set() const{
    return m_user_title_isSet;
}

bool OAIAddProject::is_user_title_Valid() const{
    return m_user_title_isValid;
}

bool OAIAddProject::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_country_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_created_by_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_design_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_locale_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_note_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_timezone_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_user_description_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_user_title_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIAddProject::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_design_id_isValid && m_name_isValid && true;
}

} // namespace OpenAPI
