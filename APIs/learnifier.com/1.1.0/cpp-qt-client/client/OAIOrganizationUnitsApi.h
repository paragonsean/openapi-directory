/**
 * Learnifier
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.1.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#ifndef OAI_OAIOrganizationUnitsApi_H
#define OAI_OAIOrganizationUnitsApi_H

#include "OAIHelpers.h"
#include "OAIHttpRequest.h"
#include "OAIServerConfiguration.h"
#include "OAIOauth.h"

#include "OAIAddOrganizationUnit.h"
#include "OAIAddOrganizationUnitResponse.h"
#include "OAIError.h"
#include "OAIOrgUnit.h"
#include "OAIOrgUnits.h"
#include "OAIUpdateOrganizationUnit.h"
#include <QString>

#include <QObject>
#include <QByteArray>
#include <QStringList>
#include <QList>
#include <QNetworkAccessManager>

namespace OpenAPI {

class OAIOrganizationUnitsApi : public QObject {
    Q_OBJECT

public:
    OAIOrganizationUnitsApi(const int timeOut = 0);
    ~OAIOrganizationUnitsApi();

    void initializeServerConfigs();
    int setDefaultServerValue(int serverIndex,const QString &operation, const QString &variable,const QString &val);
    void setServerIndex(const QString &operation, int serverIndex);
    void setApiKey(const QString &apiKeyName, const QString &apiKey);
    void setBearerToken(const QString &token);
    void setUsername(const QString &username);
    void setPassword(const QString &password);
    void setTimeOut(const int timeOut);
    void setWorkingDirectory(const QString &path);
    void setNetworkAccessManager(QNetworkAccessManager* manager);
    int addServerConfiguration(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables = QMap<QString, OAIServerVariable>());
    void setNewServerForAllOperations(const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void setNewServer(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void addHeaders(const QString &key, const QString &value);
    void enableRequestCompression();
    void enableResponseCompression();
    void abortRequests();
    QString getParamStylePrefix(const QString &style);
    QString getParamStyleSuffix(const QString &style);
    QString getParamStyleDelimiter(const QString &style, const QString &name, bool isExplode);

    /**
    * @param[in]  extid QString [required]
    */
    virtual void extorgunitGet(const QString &extid);


    virtual void orgunitsGet();

    /**
    * @param[in]  orgid qint32 [required]
    */
    virtual void orgunitsOrgidGet(const qint32 &orgid);

    /**
    * @param[in]  orgid QString [required]
    * @param[in]  body OAIUpdateOrganizationUnit [required]
    */
    virtual void orgunitsOrgidPatch(const QString &orgid, const OAIUpdateOrganizationUnit &body);

    /**
    * @param[in]  body OAIAddOrganizationUnit [required]
    */
    virtual void orgunitsPost(const OAIAddOrganizationUnit &body);


private:
    QMap<QString,int> _serverIndices;
    QMap<QString,QList<OAIServerConfiguration>> _serverConfigs;
    QMap<QString, QString> _apiKeys;
    QString _bearerToken;
    QString _username;
    QString _password;
    int _timeOut;
    QString _workingDirectory;
    QNetworkAccessManager* _manager;
    QMap<QString, QString> _defaultHeaders;
    bool _isResponseCompressionEnabled;
    bool _isRequestCompressionEnabled;
    OAIHttpRequestInput _latestInput;
    OAIHttpRequestWorker *_latestWorker;
    QStringList _latestScope;
    OauthCode _authFlow;
    OauthImplicit _implicitFlow;
    OauthCredentials _credentialFlow;
    OauthPassword _passwordFlow;
    int _OauthMethod = 0;

    void extorgunitGetCallback(OAIHttpRequestWorker *worker);
    void orgunitsGetCallback(OAIHttpRequestWorker *worker);
    void orgunitsOrgidGetCallback(OAIHttpRequestWorker *worker);
    void orgunitsOrgidPatchCallback(OAIHttpRequestWorker *worker);
    void orgunitsPostCallback(OAIHttpRequestWorker *worker);

Q_SIGNALS:

    void extorgunitGetSignal(OAIOrgUnit summary);
    void orgunitsGetSignal(OAIOrgUnits summary);
    void orgunitsOrgidGetSignal(OAIOrgUnit summary);
    void orgunitsOrgidPatchSignal();
    void orgunitsPostSignal(OAIAddOrganizationUnitResponse summary);


    void extorgunitGetSignalFull(OAIHttpRequestWorker *worker, OAIOrgUnit summary);
    void orgunitsGetSignalFull(OAIHttpRequestWorker *worker, OAIOrgUnits summary);
    void orgunitsOrgidGetSignalFull(OAIHttpRequestWorker *worker, OAIOrgUnit summary);
    void orgunitsOrgidPatchSignalFull(OAIHttpRequestWorker *worker);
    void orgunitsPostSignalFull(OAIHttpRequestWorker *worker, OAIAddOrganizationUnitResponse summary);

    Q_DECL_DEPRECATED_X("Use extorgunitGetSignalError() instead")
    void extorgunitGetSignalE(OAIOrgUnit summary, QNetworkReply::NetworkError error_type, QString error_str);
    void extorgunitGetSignalError(OAIOrgUnit summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use orgunitsGetSignalError() instead")
    void orgunitsGetSignalE(OAIOrgUnits summary, QNetworkReply::NetworkError error_type, QString error_str);
    void orgunitsGetSignalError(OAIOrgUnits summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use orgunitsOrgidGetSignalError() instead")
    void orgunitsOrgidGetSignalE(OAIOrgUnit summary, QNetworkReply::NetworkError error_type, QString error_str);
    void orgunitsOrgidGetSignalError(OAIOrgUnit summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use orgunitsOrgidPatchSignalError() instead")
    void orgunitsOrgidPatchSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void orgunitsOrgidPatchSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use orgunitsPostSignalError() instead")
    void orgunitsPostSignalE(OAIAddOrganizationUnitResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void orgunitsPostSignalError(OAIAddOrganizationUnitResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);

    Q_DECL_DEPRECATED_X("Use extorgunitGetSignalErrorFull() instead")
    void extorgunitGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void extorgunitGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use orgunitsGetSignalErrorFull() instead")
    void orgunitsGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void orgunitsGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use orgunitsOrgidGetSignalErrorFull() instead")
    void orgunitsOrgidGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void orgunitsOrgidGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use orgunitsOrgidPatchSignalErrorFull() instead")
    void orgunitsOrgidPatchSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void orgunitsOrgidPatchSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use orgunitsPostSignalErrorFull() instead")
    void orgunitsPostSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void orgunitsPostSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);

    void abortRequestsSignal();
    void allPendingRequestsCompleted();

public Q_SLOTS:
    void tokenAvailable();
};

} // namespace OpenAPI
#endif
