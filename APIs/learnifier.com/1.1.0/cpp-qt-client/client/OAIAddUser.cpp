/**
 * Learnifier
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.1.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIAddUser.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIAddUser::OAIAddUser(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIAddUser::OAIAddUser() {
    this->initializeModel();
}

OAIAddUser::~OAIAddUser() {}

void OAIAddUser::initializeModel() {

    m_display_name_isSet = false;
    m_display_name_isValid = false;

    m_external_id_isSet = false;
    m_external_id_isValid = false;

    m_first_name_isSet = false;
    m_first_name_isValid = false;

    m_hard_lock_isSet = false;
    m_hard_lock_isValid = false;

    m_home_org_isSet = false;
    m_home_org_isValid = false;

    m_last_name_isSet = false;
    m_last_name_isValid = false;

    m_locale_isSet = false;
    m_locale_isValid = false;

    m_primary_email_isSet = false;
    m_primary_email_isValid = false;
}

void OAIAddUser::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIAddUser::fromJsonObject(QJsonObject json) {

    m_display_name_isValid = ::OpenAPI::fromJsonValue(m_display_name, json[QString("displayName")]);
    m_display_name_isSet = !json[QString("displayName")].isNull() && m_display_name_isValid;

    m_external_id_isValid = ::OpenAPI::fromJsonValue(m_external_id, json[QString("externalId")]);
    m_external_id_isSet = !json[QString("externalId")].isNull() && m_external_id_isValid;

    m_first_name_isValid = ::OpenAPI::fromJsonValue(m_first_name, json[QString("firstName")]);
    m_first_name_isSet = !json[QString("firstName")].isNull() && m_first_name_isValid;

    m_hard_lock_isValid = ::OpenAPI::fromJsonValue(m_hard_lock, json[QString("hardLock")]);
    m_hard_lock_isSet = !json[QString("hardLock")].isNull() && m_hard_lock_isValid;

    m_home_org_isValid = ::OpenAPI::fromJsonValue(m_home_org, json[QString("homeOrg")]);
    m_home_org_isSet = !json[QString("homeOrg")].isNull() && m_home_org_isValid;

    m_last_name_isValid = ::OpenAPI::fromJsonValue(m_last_name, json[QString("lastName")]);
    m_last_name_isSet = !json[QString("lastName")].isNull() && m_last_name_isValid;

    m_locale_isValid = ::OpenAPI::fromJsonValue(m_locale, json[QString("locale")]);
    m_locale_isSet = !json[QString("locale")].isNull() && m_locale_isValid;

    m_primary_email_isValid = ::OpenAPI::fromJsonValue(m_primary_email, json[QString("primaryEmail")]);
    m_primary_email_isSet = !json[QString("primaryEmail")].isNull() && m_primary_email_isValid;
}

QString OAIAddUser::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIAddUser::asJsonObject() const {
    QJsonObject obj;
    if (m_display_name_isSet) {
        obj.insert(QString("displayName"), ::OpenAPI::toJsonValue(m_display_name));
    }
    if (m_external_id_isSet) {
        obj.insert(QString("externalId"), ::OpenAPI::toJsonValue(m_external_id));
    }
    if (m_first_name_isSet) {
        obj.insert(QString("firstName"), ::OpenAPI::toJsonValue(m_first_name));
    }
    if (m_hard_lock_isSet) {
        obj.insert(QString("hardLock"), ::OpenAPI::toJsonValue(m_hard_lock));
    }
    if (m_home_org_isSet) {
        obj.insert(QString("homeOrg"), ::OpenAPI::toJsonValue(m_home_org));
    }
    if (m_last_name_isSet) {
        obj.insert(QString("lastName"), ::OpenAPI::toJsonValue(m_last_name));
    }
    if (m_locale_isSet) {
        obj.insert(QString("locale"), ::OpenAPI::toJsonValue(m_locale));
    }
    if (m_primary_email_isSet) {
        obj.insert(QString("primaryEmail"), ::OpenAPI::toJsonValue(m_primary_email));
    }
    return obj;
}

QString OAIAddUser::getDisplayName() const {
    return m_display_name;
}
void OAIAddUser::setDisplayName(const QString &display_name) {
    m_display_name = display_name;
    m_display_name_isSet = true;
}

bool OAIAddUser::is_display_name_Set() const{
    return m_display_name_isSet;
}

bool OAIAddUser::is_display_name_Valid() const{
    return m_display_name_isValid;
}

QString OAIAddUser::getExternalId() const {
    return m_external_id;
}
void OAIAddUser::setExternalId(const QString &external_id) {
    m_external_id = external_id;
    m_external_id_isSet = true;
}

bool OAIAddUser::is_external_id_Set() const{
    return m_external_id_isSet;
}

bool OAIAddUser::is_external_id_Valid() const{
    return m_external_id_isValid;
}

QString OAIAddUser::getFirstName() const {
    return m_first_name;
}
void OAIAddUser::setFirstName(const QString &first_name) {
    m_first_name = first_name;
    m_first_name_isSet = true;
}

bool OAIAddUser::is_first_name_Set() const{
    return m_first_name_isSet;
}

bool OAIAddUser::is_first_name_Valid() const{
    return m_first_name_isValid;
}

bool OAIAddUser::isHardLock() const {
    return m_hard_lock;
}
void OAIAddUser::setHardLock(const bool &hard_lock) {
    m_hard_lock = hard_lock;
    m_hard_lock_isSet = true;
}

bool OAIAddUser::is_hard_lock_Set() const{
    return m_hard_lock_isSet;
}

bool OAIAddUser::is_hard_lock_Valid() const{
    return m_hard_lock_isValid;
}

qint64 OAIAddUser::getHomeOrg() const {
    return m_home_org;
}
void OAIAddUser::setHomeOrg(const qint64 &home_org) {
    m_home_org = home_org;
    m_home_org_isSet = true;
}

bool OAIAddUser::is_home_org_Set() const{
    return m_home_org_isSet;
}

bool OAIAddUser::is_home_org_Valid() const{
    return m_home_org_isValid;
}

OAIObject OAIAddUser::getLastName() const {
    return m_last_name;
}
void OAIAddUser::setLastName(const OAIObject &last_name) {
    m_last_name = last_name;
    m_last_name_isSet = true;
}

bool OAIAddUser::is_last_name_Set() const{
    return m_last_name_isSet;
}

bool OAIAddUser::is_last_name_Valid() const{
    return m_last_name_isValid;
}

QString OAIAddUser::getLocale() const {
    return m_locale;
}
void OAIAddUser::setLocale(const QString &locale) {
    m_locale = locale;
    m_locale_isSet = true;
}

bool OAIAddUser::is_locale_Set() const{
    return m_locale_isSet;
}

bool OAIAddUser::is_locale_Valid() const{
    return m_locale_isValid;
}

QString OAIAddUser::getPrimaryEmail() const {
    return m_primary_email;
}
void OAIAddUser::setPrimaryEmail(const QString &primary_email) {
    m_primary_email = primary_email;
    m_primary_email_isSet = true;
}

bool OAIAddUser::is_primary_email_Set() const{
    return m_primary_email_isSet;
}

bool OAIAddUser::is_primary_email_Valid() const{
    return m_primary_email_isValid;
}

bool OAIAddUser::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_display_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_external_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_first_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_hard_lock_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_home_org_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_last_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_locale_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_primary_email_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIAddUser::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
