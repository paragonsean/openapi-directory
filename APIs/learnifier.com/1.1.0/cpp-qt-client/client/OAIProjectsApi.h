/**
 * Learnifier
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.1.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#ifndef OAI_OAIProjectsApi_H
#define OAI_OAIProjectsApi_H

#include "OAIHelpers.h"
#include "OAIHttpRequest.h"
#include "OAIServerConfiguration.h"
#include "OAIOauth.h"

#include "OAIActivationError.h"
#include "OAIAddParticipant.h"
#include "OAIAddProject.h"
#include "OAIError.h"
#include "OAILoginLink.h"
#include "OAIParticipation.h"
#include "OAIProject.h"
#include "OAIProjectTeamMember.h"
#include "OAIUpdateProject.h"
#include <QString>

#include <QObject>
#include <QByteArray>
#include <QStringList>
#include <QList>
#include <QNetworkAccessManager>

namespace OpenAPI {

class OAIProjectsApi : public QObject {
    Q_OBJECT

public:
    OAIProjectsApi(const int timeOut = 0);
    ~OAIProjectsApi();

    void initializeServerConfigs();
    int setDefaultServerValue(int serverIndex,const QString &operation, const QString &variable,const QString &val);
    void setServerIndex(const QString &operation, int serverIndex);
    void setApiKey(const QString &apiKeyName, const QString &apiKey);
    void setBearerToken(const QString &token);
    void setUsername(const QString &username);
    void setPassword(const QString &password);
    void setTimeOut(const int timeOut);
    void setWorkingDirectory(const QString &path);
    void setNetworkAccessManager(QNetworkAccessManager* manager);
    int addServerConfiguration(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables = QMap<QString, OAIServerVariable>());
    void setNewServerForAllOperations(const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void setNewServer(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void addHeaders(const QString &key, const QString &value);
    void enableRequestCompression();
    void enableResponseCompression();
    void abortRequests();
    QString getParamStylePrefix(const QString &style);
    QString getParamStyleSuffix(const QString &style);
    QString getParamStyleDelimiter(const QString &style, const QString &name, bool isExplode);

    /**
    * @param[in]  extid QString [required]
    */
    virtual void extprojectGet(const QString &extid);

    /**
    * @param[in]  orgid double [required]
    */
    virtual void orgunitsOrgidProjectsGet(const double &orgid);

    /**
    * @param[in]  orgid qint32 [required]
    * @param[in]  body OAIAddProject [required]
    */
    virtual void orgunitsOrgidProjectsPost(const qint32 &orgid, const OAIAddProject &body);

    /**
    * @param[in]  orgid qint32 [required]
    * @param[in]  projectid qint32 [required]
    */
    virtual void orgunitsOrgidProjectsProjectidDelete(const qint32 &orgid, const qint32 &projectid);

    /**
    * @param[in]  orgid qint32 [required]
    * @param[in]  projectid qint32 [required]
    */
    virtual void orgunitsOrgidProjectsProjectidGet(const qint32 &orgid, const qint32 &projectid);

    /**
    * @param[in]  orgid qint32 [required]
    * @param[in]  projectid qint32 [required]
    */
    virtual void orgunitsOrgidProjectsProjectidParticipantsGet(const qint32 &orgid, const qint32 &projectid);

    /**
    * @param[in]  orgid qint32 [required]
    * @param[in]  projectid qint32 [required]
    * @param[in]  participant_id qint32 [required]
    */
    virtual void orgunitsOrgidProjectsProjectidParticipantsParticipantIdActivatePost(const qint32 &orgid, const qint32 &projectid, const qint32 &participant_id);

    /**
    * @param[in]  orgid qint32 [required]
    * @param[in]  projectid qint32 [required]
    * @param[in]  participant_id qint32 [required]
    */
    virtual void orgunitsOrgidProjectsProjectidParticipantsParticipantIdDelete(const qint32 &orgid, const qint32 &projectid, const qint32 &participant_id);

    /**
    * @param[in]  orgid qint32 [required]
    * @param[in]  projectid qint32 [required]
    * @param[in]  participant_id qint32 [required]
    */
    virtual void orgunitsOrgidProjectsProjectidParticipantsParticipantIdLoginlinkPost(const qint32 &orgid, const qint32 &projectid, const qint32 &participant_id);

    /**
    * @param[in]  orgid qint32 [required]
    * @param[in]  projectid qint32 [required]
    * @param[in]  body OAIAddParticipant [required]
    */
    virtual void orgunitsOrgidProjectsProjectidParticipantsPost(const qint32 &orgid, const qint32 &projectid, const OAIAddParticipant &body);

    /**
    * @param[in]  orgid qint32 [required]
    * @param[in]  projectid qint32 [required]
    * @param[in]  body OAIUpdateProject [required]
    */
    virtual void orgunitsOrgidProjectsProjectidPatch(const qint32 &orgid, const qint32 &projectid, const OAIUpdateProject &body);

    /**
    * @param[in]  orgid qint32 [required]
    * @param[in]  projectid qint32 [required]
    */
    virtual void orgunitsOrgidProjectsProjectidTeammembersGet(const qint32 &orgid, const qint32 &projectid);


private:
    QMap<QString,int> _serverIndices;
    QMap<QString,QList<OAIServerConfiguration>> _serverConfigs;
    QMap<QString, QString> _apiKeys;
    QString _bearerToken;
    QString _username;
    QString _password;
    int _timeOut;
    QString _workingDirectory;
    QNetworkAccessManager* _manager;
    QMap<QString, QString> _defaultHeaders;
    bool _isResponseCompressionEnabled;
    bool _isRequestCompressionEnabled;
    OAIHttpRequestInput _latestInput;
    OAIHttpRequestWorker *_latestWorker;
    QStringList _latestScope;
    OauthCode _authFlow;
    OauthImplicit _implicitFlow;
    OauthCredentials _credentialFlow;
    OauthPassword _passwordFlow;
    int _OauthMethod = 0;

    void extprojectGetCallback(OAIHttpRequestWorker *worker);
    void orgunitsOrgidProjectsGetCallback(OAIHttpRequestWorker *worker);
    void orgunitsOrgidProjectsPostCallback(OAIHttpRequestWorker *worker);
    void orgunitsOrgidProjectsProjectidDeleteCallback(OAIHttpRequestWorker *worker);
    void orgunitsOrgidProjectsProjectidGetCallback(OAIHttpRequestWorker *worker);
    void orgunitsOrgidProjectsProjectidParticipantsGetCallback(OAIHttpRequestWorker *worker);
    void orgunitsOrgidProjectsProjectidParticipantsParticipantIdActivatePostCallback(OAIHttpRequestWorker *worker);
    void orgunitsOrgidProjectsProjectidParticipantsParticipantIdDeleteCallback(OAIHttpRequestWorker *worker);
    void orgunitsOrgidProjectsProjectidParticipantsParticipantIdLoginlinkPostCallback(OAIHttpRequestWorker *worker);
    void orgunitsOrgidProjectsProjectidParticipantsPostCallback(OAIHttpRequestWorker *worker);
    void orgunitsOrgidProjectsProjectidPatchCallback(OAIHttpRequestWorker *worker);
    void orgunitsOrgidProjectsProjectidTeammembersGetCallback(OAIHttpRequestWorker *worker);

Q_SIGNALS:

    void extprojectGetSignal(OAIProject summary);
    void orgunitsOrgidProjectsGetSignal(QList<OAIProject> summary);
    void orgunitsOrgidProjectsPostSignal(OAIProject summary);
    void orgunitsOrgidProjectsProjectidDeleteSignal();
    void orgunitsOrgidProjectsProjectidGetSignal(OAIProject summary);
    void orgunitsOrgidProjectsProjectidParticipantsGetSignal(QList<OAIParticipation> summary);
    void orgunitsOrgidProjectsProjectidParticipantsParticipantIdActivatePostSignal();
    void orgunitsOrgidProjectsProjectidParticipantsParticipantIdDeleteSignal();
    void orgunitsOrgidProjectsProjectidParticipantsParticipantIdLoginlinkPostSignal(OAILoginLink summary);
    void orgunitsOrgidProjectsProjectidParticipantsPostSignal();
    void orgunitsOrgidProjectsProjectidPatchSignal(OAIProject summary);
    void orgunitsOrgidProjectsProjectidTeammembersGetSignal(QList<OAIProjectTeamMember> summary);


    void extprojectGetSignalFull(OAIHttpRequestWorker *worker, OAIProject summary);
    void orgunitsOrgidProjectsGetSignalFull(OAIHttpRequestWorker *worker, QList<OAIProject> summary);
    void orgunitsOrgidProjectsPostSignalFull(OAIHttpRequestWorker *worker, OAIProject summary);
    void orgunitsOrgidProjectsProjectidDeleteSignalFull(OAIHttpRequestWorker *worker);
    void orgunitsOrgidProjectsProjectidGetSignalFull(OAIHttpRequestWorker *worker, OAIProject summary);
    void orgunitsOrgidProjectsProjectidParticipantsGetSignalFull(OAIHttpRequestWorker *worker, QList<OAIParticipation> summary);
    void orgunitsOrgidProjectsProjectidParticipantsParticipantIdActivatePostSignalFull(OAIHttpRequestWorker *worker);
    void orgunitsOrgidProjectsProjectidParticipantsParticipantIdDeleteSignalFull(OAIHttpRequestWorker *worker);
    void orgunitsOrgidProjectsProjectidParticipantsParticipantIdLoginlinkPostSignalFull(OAIHttpRequestWorker *worker, OAILoginLink summary);
    void orgunitsOrgidProjectsProjectidParticipantsPostSignalFull(OAIHttpRequestWorker *worker);
    void orgunitsOrgidProjectsProjectidPatchSignalFull(OAIHttpRequestWorker *worker, OAIProject summary);
    void orgunitsOrgidProjectsProjectidTeammembersGetSignalFull(OAIHttpRequestWorker *worker, QList<OAIProjectTeamMember> summary);

    Q_DECL_DEPRECATED_X("Use extprojectGetSignalError() instead")
    void extprojectGetSignalE(OAIProject summary, QNetworkReply::NetworkError error_type, QString error_str);
    void extprojectGetSignalError(OAIProject summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use orgunitsOrgidProjectsGetSignalError() instead")
    void orgunitsOrgidProjectsGetSignalE(QList<OAIProject> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void orgunitsOrgidProjectsGetSignalError(QList<OAIProject> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use orgunitsOrgidProjectsPostSignalError() instead")
    void orgunitsOrgidProjectsPostSignalE(OAIProject summary, QNetworkReply::NetworkError error_type, QString error_str);
    void orgunitsOrgidProjectsPostSignalError(OAIProject summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use orgunitsOrgidProjectsProjectidDeleteSignalError() instead")
    void orgunitsOrgidProjectsProjectidDeleteSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void orgunitsOrgidProjectsProjectidDeleteSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use orgunitsOrgidProjectsProjectidGetSignalError() instead")
    void orgunitsOrgidProjectsProjectidGetSignalE(OAIProject summary, QNetworkReply::NetworkError error_type, QString error_str);
    void orgunitsOrgidProjectsProjectidGetSignalError(OAIProject summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use orgunitsOrgidProjectsProjectidParticipantsGetSignalError() instead")
    void orgunitsOrgidProjectsProjectidParticipantsGetSignalE(QList<OAIParticipation> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void orgunitsOrgidProjectsProjectidParticipantsGetSignalError(QList<OAIParticipation> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use orgunitsOrgidProjectsProjectidParticipantsParticipantIdActivatePostSignalError() instead")
    void orgunitsOrgidProjectsProjectidParticipantsParticipantIdActivatePostSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void orgunitsOrgidProjectsProjectidParticipantsParticipantIdActivatePostSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use orgunitsOrgidProjectsProjectidParticipantsParticipantIdDeleteSignalError() instead")
    void orgunitsOrgidProjectsProjectidParticipantsParticipantIdDeleteSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void orgunitsOrgidProjectsProjectidParticipantsParticipantIdDeleteSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use orgunitsOrgidProjectsProjectidParticipantsParticipantIdLoginlinkPostSignalError() instead")
    void orgunitsOrgidProjectsProjectidParticipantsParticipantIdLoginlinkPostSignalE(OAILoginLink summary, QNetworkReply::NetworkError error_type, QString error_str);
    void orgunitsOrgidProjectsProjectidParticipantsParticipantIdLoginlinkPostSignalError(OAILoginLink summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use orgunitsOrgidProjectsProjectidParticipantsPostSignalError() instead")
    void orgunitsOrgidProjectsProjectidParticipantsPostSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void orgunitsOrgidProjectsProjectidParticipantsPostSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use orgunitsOrgidProjectsProjectidPatchSignalError() instead")
    void orgunitsOrgidProjectsProjectidPatchSignalE(OAIProject summary, QNetworkReply::NetworkError error_type, QString error_str);
    void orgunitsOrgidProjectsProjectidPatchSignalError(OAIProject summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use orgunitsOrgidProjectsProjectidTeammembersGetSignalError() instead")
    void orgunitsOrgidProjectsProjectidTeammembersGetSignalE(QList<OAIProjectTeamMember> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void orgunitsOrgidProjectsProjectidTeammembersGetSignalError(QList<OAIProjectTeamMember> summary, QNetworkReply::NetworkError error_type, const QString &error_str);

    Q_DECL_DEPRECATED_X("Use extprojectGetSignalErrorFull() instead")
    void extprojectGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void extprojectGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use orgunitsOrgidProjectsGetSignalErrorFull() instead")
    void orgunitsOrgidProjectsGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void orgunitsOrgidProjectsGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use orgunitsOrgidProjectsPostSignalErrorFull() instead")
    void orgunitsOrgidProjectsPostSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void orgunitsOrgidProjectsPostSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use orgunitsOrgidProjectsProjectidDeleteSignalErrorFull() instead")
    void orgunitsOrgidProjectsProjectidDeleteSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void orgunitsOrgidProjectsProjectidDeleteSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use orgunitsOrgidProjectsProjectidGetSignalErrorFull() instead")
    void orgunitsOrgidProjectsProjectidGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void orgunitsOrgidProjectsProjectidGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use orgunitsOrgidProjectsProjectidParticipantsGetSignalErrorFull() instead")
    void orgunitsOrgidProjectsProjectidParticipantsGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void orgunitsOrgidProjectsProjectidParticipantsGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use orgunitsOrgidProjectsProjectidParticipantsParticipantIdActivatePostSignalErrorFull() instead")
    void orgunitsOrgidProjectsProjectidParticipantsParticipantIdActivatePostSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void orgunitsOrgidProjectsProjectidParticipantsParticipantIdActivatePostSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use orgunitsOrgidProjectsProjectidParticipantsParticipantIdDeleteSignalErrorFull() instead")
    void orgunitsOrgidProjectsProjectidParticipantsParticipantIdDeleteSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void orgunitsOrgidProjectsProjectidParticipantsParticipantIdDeleteSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use orgunitsOrgidProjectsProjectidParticipantsParticipantIdLoginlinkPostSignalErrorFull() instead")
    void orgunitsOrgidProjectsProjectidParticipantsParticipantIdLoginlinkPostSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void orgunitsOrgidProjectsProjectidParticipantsParticipantIdLoginlinkPostSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use orgunitsOrgidProjectsProjectidParticipantsPostSignalErrorFull() instead")
    void orgunitsOrgidProjectsProjectidParticipantsPostSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void orgunitsOrgidProjectsProjectidParticipantsPostSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use orgunitsOrgidProjectsProjectidPatchSignalErrorFull() instead")
    void orgunitsOrgidProjectsProjectidPatchSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void orgunitsOrgidProjectsProjectidPatchSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use orgunitsOrgidProjectsProjectidTeammembersGetSignalErrorFull() instead")
    void orgunitsOrgidProjectsProjectidTeammembersGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void orgunitsOrgidProjectsProjectidTeammembersGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);

    void abortRequestsSignal();
    void allPendingRequestsCompleted();

public Q_SLOTS:
    void tokenAvailable();
};

} // namespace OpenAPI
#endif
