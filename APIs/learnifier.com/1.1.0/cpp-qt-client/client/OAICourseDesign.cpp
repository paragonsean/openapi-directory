/**
 * Learnifier
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.1.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAICourseDesign.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAICourseDesign::OAICourseDesign(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAICourseDesign::OAICourseDesign() {
    this->initializeModel();
}

OAICourseDesign::~OAICourseDesign() {}

void OAICourseDesign::initializeModel() {

    m_created_isSet = false;
    m_created_isValid = false;

    m_created_by_isSet = false;
    m_created_by_isValid = false;

    m_description_isSet = false;
    m_description_isValid = false;

    m_enabled_isSet = false;
    m_enabled_isValid = false;

    m_locale_isSet = false;
    m_locale_isValid = false;

    m_locked_isSet = false;
    m_locked_isValid = false;

    m_locked_by_isSet = false;
    m_locked_by_isValid = false;

    m_locked_design_isSet = false;
    m_locked_design_isValid = false;

    m_name_isSet = false;
    m_name_isValid = false;

    m_softid_isSet = false;
    m_softid_isValid = false;

    m_sticky_isSet = false;
    m_sticky_isValid = false;

    m_tags_isSet = false;
    m_tags_isValid = false;
}

void OAICourseDesign::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAICourseDesign::fromJsonObject(QJsonObject json) {

    m_created_isValid = ::OpenAPI::fromJsonValue(m_created, json[QString("created")]);
    m_created_isSet = !json[QString("created")].isNull() && m_created_isValid;

    m_created_by_isValid = ::OpenAPI::fromJsonValue(m_created_by, json[QString("createdBy")]);
    m_created_by_isSet = !json[QString("createdBy")].isNull() && m_created_by_isValid;

    m_description_isValid = ::OpenAPI::fromJsonValue(m_description, json[QString("description")]);
    m_description_isSet = !json[QString("description")].isNull() && m_description_isValid;

    m_enabled_isValid = ::OpenAPI::fromJsonValue(m_enabled, json[QString("enabled")]);
    m_enabled_isSet = !json[QString("enabled")].isNull() && m_enabled_isValid;

    m_locale_isValid = ::OpenAPI::fromJsonValue(m_locale, json[QString("locale")]);
    m_locale_isSet = !json[QString("locale")].isNull() && m_locale_isValid;

    m_locked_isValid = ::OpenAPI::fromJsonValue(m_locked, json[QString("locked")]);
    m_locked_isSet = !json[QString("locked")].isNull() && m_locked_isValid;

    m_locked_by_isValid = ::OpenAPI::fromJsonValue(m_locked_by, json[QString("lockedBy")]);
    m_locked_by_isSet = !json[QString("lockedBy")].isNull() && m_locked_by_isValid;

    m_locked_design_isValid = ::OpenAPI::fromJsonValue(m_locked_design, json[QString("lockedDesign")]);
    m_locked_design_isSet = !json[QString("lockedDesign")].isNull() && m_locked_design_isValid;

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("name")]);
    m_name_isSet = !json[QString("name")].isNull() && m_name_isValid;

    m_softid_isValid = ::OpenAPI::fromJsonValue(m_softid, json[QString("softid")]);
    m_softid_isSet = !json[QString("softid")].isNull() && m_softid_isValid;

    m_sticky_isValid = ::OpenAPI::fromJsonValue(m_sticky, json[QString("sticky")]);
    m_sticky_isSet = !json[QString("sticky")].isNull() && m_sticky_isValid;

    m_tags_isValid = ::OpenAPI::fromJsonValue(m_tags, json[QString("tags")]);
    m_tags_isSet = !json[QString("tags")].isNull() && m_tags_isValid;
}

QString OAICourseDesign::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAICourseDesign::asJsonObject() const {
    QJsonObject obj;
    if (m_created_isSet) {
        obj.insert(QString("created"), ::OpenAPI::toJsonValue(m_created));
    }
    if (m_created_by_isSet) {
        obj.insert(QString("createdBy"), ::OpenAPI::toJsonValue(m_created_by));
    }
    if (m_description_isSet) {
        obj.insert(QString("description"), ::OpenAPI::toJsonValue(m_description));
    }
    if (m_enabled_isSet) {
        obj.insert(QString("enabled"), ::OpenAPI::toJsonValue(m_enabled));
    }
    if (m_locale_isSet) {
        obj.insert(QString("locale"), ::OpenAPI::toJsonValue(m_locale));
    }
    if (m_locked_isSet) {
        obj.insert(QString("locked"), ::OpenAPI::toJsonValue(m_locked));
    }
    if (m_locked_by_isSet) {
        obj.insert(QString("lockedBy"), ::OpenAPI::toJsonValue(m_locked_by));
    }
    if (m_locked_design_isSet) {
        obj.insert(QString("lockedDesign"), ::OpenAPI::toJsonValue(m_locked_design));
    }
    if (m_name_isSet) {
        obj.insert(QString("name"), ::OpenAPI::toJsonValue(m_name));
    }
    if (m_softid_isSet) {
        obj.insert(QString("softid"), ::OpenAPI::toJsonValue(m_softid));
    }
    if (m_sticky_isSet) {
        obj.insert(QString("sticky"), ::OpenAPI::toJsonValue(m_sticky));
    }
    if (m_tags.size() > 0) {
        obj.insert(QString("tags"), ::OpenAPI::toJsonValue(m_tags));
    }
    return obj;
}

QDateTime OAICourseDesign::getCreated() const {
    return m_created;
}
void OAICourseDesign::setCreated(const QDateTime &created) {
    m_created = created;
    m_created_isSet = true;
}

bool OAICourseDesign::is_created_Set() const{
    return m_created_isSet;
}

bool OAICourseDesign::is_created_Valid() const{
    return m_created_isValid;
}

QString OAICourseDesign::getCreatedBy() const {
    return m_created_by;
}
void OAICourseDesign::setCreatedBy(const QString &created_by) {
    m_created_by = created_by;
    m_created_by_isSet = true;
}

bool OAICourseDesign::is_created_by_Set() const{
    return m_created_by_isSet;
}

bool OAICourseDesign::is_created_by_Valid() const{
    return m_created_by_isValid;
}

QString OAICourseDesign::getDescription() const {
    return m_description;
}
void OAICourseDesign::setDescription(const QString &description) {
    m_description = description;
    m_description_isSet = true;
}

bool OAICourseDesign::is_description_Set() const{
    return m_description_isSet;
}

bool OAICourseDesign::is_description_Valid() const{
    return m_description_isValid;
}

bool OAICourseDesign::isEnabled() const {
    return m_enabled;
}
void OAICourseDesign::setEnabled(const bool &enabled) {
    m_enabled = enabled;
    m_enabled_isSet = true;
}

bool OAICourseDesign::is_enabled_Set() const{
    return m_enabled_isSet;
}

bool OAICourseDesign::is_enabled_Valid() const{
    return m_enabled_isValid;
}

QString OAICourseDesign::getLocale() const {
    return m_locale;
}
void OAICourseDesign::setLocale(const QString &locale) {
    m_locale = locale;
    m_locale_isSet = true;
}

bool OAICourseDesign::is_locale_Set() const{
    return m_locale_isSet;
}

bool OAICourseDesign::is_locale_Valid() const{
    return m_locale_isValid;
}

QDateTime OAICourseDesign::getLocked() const {
    return m_locked;
}
void OAICourseDesign::setLocked(const QDateTime &locked) {
    m_locked = locked;
    m_locked_isSet = true;
}

bool OAICourseDesign::is_locked_Set() const{
    return m_locked_isSet;
}

bool OAICourseDesign::is_locked_Valid() const{
    return m_locked_isValid;
}

QString OAICourseDesign::getLockedBy() const {
    return m_locked_by;
}
void OAICourseDesign::setLockedBy(const QString &locked_by) {
    m_locked_by = locked_by;
    m_locked_by_isSet = true;
}

bool OAICourseDesign::is_locked_by_Set() const{
    return m_locked_by_isSet;
}

bool OAICourseDesign::is_locked_by_Valid() const{
    return m_locked_by_isValid;
}

bool OAICourseDesign::isLockedDesign() const {
    return m_locked_design;
}
void OAICourseDesign::setLockedDesign(const bool &locked_design) {
    m_locked_design = locked_design;
    m_locked_design_isSet = true;
}

bool OAICourseDesign::is_locked_design_Set() const{
    return m_locked_design_isSet;
}

bool OAICourseDesign::is_locked_design_Valid() const{
    return m_locked_design_isValid;
}

QString OAICourseDesign::getName() const {
    return m_name;
}
void OAICourseDesign::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAICourseDesign::is_name_Set() const{
    return m_name_isSet;
}

bool OAICourseDesign::is_name_Valid() const{
    return m_name_isValid;
}

QString OAICourseDesign::getSoftid() const {
    return m_softid;
}
void OAICourseDesign::setSoftid(const QString &softid) {
    m_softid = softid;
    m_softid_isSet = true;
}

bool OAICourseDesign::is_softid_Set() const{
    return m_softid_isSet;
}

bool OAICourseDesign::is_softid_Valid() const{
    return m_softid_isValid;
}

bool OAICourseDesign::isSticky() const {
    return m_sticky;
}
void OAICourseDesign::setSticky(const bool &sticky) {
    m_sticky = sticky;
    m_sticky_isSet = true;
}

bool OAICourseDesign::is_sticky_Set() const{
    return m_sticky_isSet;
}

bool OAICourseDesign::is_sticky_Valid() const{
    return m_sticky_isValid;
}

QList<QString> OAICourseDesign::getTags() const {
    return m_tags;
}
void OAICourseDesign::setTags(const QList<QString> &tags) {
    m_tags = tags;
    m_tags_isSet = true;
}

bool OAICourseDesign::is_tags_Set() const{
    return m_tags_isSet;
}

bool OAICourseDesign::is_tags_Valid() const{
    return m_tags_isValid;
}

bool OAICourseDesign::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_created_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_created_by_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_description_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_enabled_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_locale_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_locked_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_locked_by_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_locked_design_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_softid_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_sticky_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_tags.size() > 0) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAICourseDesign::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_enabled_isValid && m_locale_isValid && m_locked_design_isValid && m_name_isValid && m_sticky_isValid && true;
}

} // namespace OpenAPI
