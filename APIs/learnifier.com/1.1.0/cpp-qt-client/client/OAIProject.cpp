/**
 * Learnifier
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.1.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIProject.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIProject::OAIProject(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIProject::OAIProject() {
    this->initializeModel();
}

OAIProject::~OAIProject() {}

void OAIProject::initializeModel() {

    m_admin_url_isSet = false;
    m_admin_url_isValid = false;

    m_country_isSet = false;
    m_country_isValid = false;

    m_created_isSet = false;
    m_created_isValid = false;

    m_created_by_isSet = false;
    m_created_by_isValid = false;

    m_design_id_isSet = false;
    m_design_id_isValid = false;

    m_external_id_isSet = false;
    m_external_id_isValid = false;

    m_id_isSet = false;
    m_id_isValid = false;

    m_locale_isSet = false;
    m_locale_isValid = false;

    m_name_isSet = false;
    m_name_isValid = false;

    m_note_isSet = false;
    m_note_isValid = false;

    m_org_id_isSet = false;
    m_org_id_isValid = false;

    m_status_isSet = false;
    m_status_isValid = false;

    m_timezone_isSet = false;
    m_timezone_isValid = false;

    m_user_description_isSet = false;
    m_user_description_isValid = false;

    m_user_title_isSet = false;
    m_user_title_isValid = false;
}

void OAIProject::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIProject::fromJsonObject(QJsonObject json) {

    m_admin_url_isValid = ::OpenAPI::fromJsonValue(m_admin_url, json[QString("adminUrl")]);
    m_admin_url_isSet = !json[QString("adminUrl")].isNull() && m_admin_url_isValid;

    m_country_isValid = ::OpenAPI::fromJsonValue(m_country, json[QString("country")]);
    m_country_isSet = !json[QString("country")].isNull() && m_country_isValid;

    m_created_isValid = ::OpenAPI::fromJsonValue(m_created, json[QString("created")]);
    m_created_isSet = !json[QString("created")].isNull() && m_created_isValid;

    m_created_by_isValid = ::OpenAPI::fromJsonValue(m_created_by, json[QString("createdBy")]);
    m_created_by_isSet = !json[QString("createdBy")].isNull() && m_created_by_isValid;

    m_design_id_isValid = ::OpenAPI::fromJsonValue(m_design_id, json[QString("designId")]);
    m_design_id_isSet = !json[QString("designId")].isNull() && m_design_id_isValid;

    m_external_id_isValid = ::OpenAPI::fromJsonValue(m_external_id, json[QString("externalId")]);
    m_external_id_isSet = !json[QString("externalId")].isNull() && m_external_id_isValid;

    m_id_isValid = ::OpenAPI::fromJsonValue(m_id, json[QString("id")]);
    m_id_isSet = !json[QString("id")].isNull() && m_id_isValid;

    m_locale_isValid = ::OpenAPI::fromJsonValue(m_locale, json[QString("locale")]);
    m_locale_isSet = !json[QString("locale")].isNull() && m_locale_isValid;

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("name")]);
    m_name_isSet = !json[QString("name")].isNull() && m_name_isValid;

    m_note_isValid = ::OpenAPI::fromJsonValue(m_note, json[QString("note")]);
    m_note_isSet = !json[QString("note")].isNull() && m_note_isValid;

    m_org_id_isValid = ::OpenAPI::fromJsonValue(m_org_id, json[QString("orgId")]);
    m_org_id_isSet = !json[QString("orgId")].isNull() && m_org_id_isValid;

    m_status_isValid = ::OpenAPI::fromJsonValue(m_status, json[QString("status")]);
    m_status_isSet = !json[QString("status")].isNull() && m_status_isValid;

    m_timezone_isValid = ::OpenAPI::fromJsonValue(m_timezone, json[QString("timezone")]);
    m_timezone_isSet = !json[QString("timezone")].isNull() && m_timezone_isValid;

    m_user_description_isValid = ::OpenAPI::fromJsonValue(m_user_description, json[QString("userDescription")]);
    m_user_description_isSet = !json[QString("userDescription")].isNull() && m_user_description_isValid;

    m_user_title_isValid = ::OpenAPI::fromJsonValue(m_user_title, json[QString("userTitle")]);
    m_user_title_isSet = !json[QString("userTitle")].isNull() && m_user_title_isValid;
}

QString OAIProject::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIProject::asJsonObject() const {
    QJsonObject obj;
    if (m_admin_url_isSet) {
        obj.insert(QString("adminUrl"), ::OpenAPI::toJsonValue(m_admin_url));
    }
    if (m_country_isSet) {
        obj.insert(QString("country"), ::OpenAPI::toJsonValue(m_country));
    }
    if (m_created_isSet) {
        obj.insert(QString("created"), ::OpenAPI::toJsonValue(m_created));
    }
    if (m_created_by_isSet) {
        obj.insert(QString("createdBy"), ::OpenAPI::toJsonValue(m_created_by));
    }
    if (m_design_id_isSet) {
        obj.insert(QString("designId"), ::OpenAPI::toJsonValue(m_design_id));
    }
    if (m_external_id_isSet) {
        obj.insert(QString("externalId"), ::OpenAPI::toJsonValue(m_external_id));
    }
    if (m_id_isSet) {
        obj.insert(QString("id"), ::OpenAPI::toJsonValue(m_id));
    }
    if (m_locale_isSet) {
        obj.insert(QString("locale"), ::OpenAPI::toJsonValue(m_locale));
    }
    if (m_name_isSet) {
        obj.insert(QString("name"), ::OpenAPI::toJsonValue(m_name));
    }
    if (m_note_isSet) {
        obj.insert(QString("note"), ::OpenAPI::toJsonValue(m_note));
    }
    if (m_org_id_isSet) {
        obj.insert(QString("orgId"), ::OpenAPI::toJsonValue(m_org_id));
    }
    if (m_status_isSet) {
        obj.insert(QString("status"), ::OpenAPI::toJsonValue(m_status));
    }
    if (m_timezone_isSet) {
        obj.insert(QString("timezone"), ::OpenAPI::toJsonValue(m_timezone));
    }
    if (m_user_description_isSet) {
        obj.insert(QString("userDescription"), ::OpenAPI::toJsonValue(m_user_description));
    }
    if (m_user_title_isSet) {
        obj.insert(QString("userTitle"), ::OpenAPI::toJsonValue(m_user_title));
    }
    return obj;
}

QString OAIProject::getAdminUrl() const {
    return m_admin_url;
}
void OAIProject::setAdminUrl(const QString &admin_url) {
    m_admin_url = admin_url;
    m_admin_url_isSet = true;
}

bool OAIProject::is_admin_url_Set() const{
    return m_admin_url_isSet;
}

bool OAIProject::is_admin_url_Valid() const{
    return m_admin_url_isValid;
}

QString OAIProject::getCountry() const {
    return m_country;
}
void OAIProject::setCountry(const QString &country) {
    m_country = country;
    m_country_isSet = true;
}

bool OAIProject::is_country_Set() const{
    return m_country_isSet;
}

bool OAIProject::is_country_Valid() const{
    return m_country_isValid;
}

QDateTime OAIProject::getCreated() const {
    return m_created;
}
void OAIProject::setCreated(const QDateTime &created) {
    m_created = created;
    m_created_isSet = true;
}

bool OAIProject::is_created_Set() const{
    return m_created_isSet;
}

bool OAIProject::is_created_Valid() const{
    return m_created_isValid;
}

QString OAIProject::getCreatedBy() const {
    return m_created_by;
}
void OAIProject::setCreatedBy(const QString &created_by) {
    m_created_by = created_by;
    m_created_by_isSet = true;
}

bool OAIProject::is_created_by_Set() const{
    return m_created_by_isSet;
}

bool OAIProject::is_created_by_Valid() const{
    return m_created_by_isValid;
}

qint64 OAIProject::getDesignId() const {
    return m_design_id;
}
void OAIProject::setDesignId(const qint64 &design_id) {
    m_design_id = design_id;
    m_design_id_isSet = true;
}

bool OAIProject::is_design_id_Set() const{
    return m_design_id_isSet;
}

bool OAIProject::is_design_id_Valid() const{
    return m_design_id_isValid;
}

QString OAIProject::getExternalId() const {
    return m_external_id;
}
void OAIProject::setExternalId(const QString &external_id) {
    m_external_id = external_id;
    m_external_id_isSet = true;
}

bool OAIProject::is_external_id_Set() const{
    return m_external_id_isSet;
}

bool OAIProject::is_external_id_Valid() const{
    return m_external_id_isValid;
}

qint64 OAIProject::getId() const {
    return m_id;
}
void OAIProject::setId(const qint64 &id) {
    m_id = id;
    m_id_isSet = true;
}

bool OAIProject::is_id_Set() const{
    return m_id_isSet;
}

bool OAIProject::is_id_Valid() const{
    return m_id_isValid;
}

QString OAIProject::getLocale() const {
    return m_locale;
}
void OAIProject::setLocale(const QString &locale) {
    m_locale = locale;
    m_locale_isSet = true;
}

bool OAIProject::is_locale_Set() const{
    return m_locale_isSet;
}

bool OAIProject::is_locale_Valid() const{
    return m_locale_isValid;
}

QString OAIProject::getName() const {
    return m_name;
}
void OAIProject::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAIProject::is_name_Set() const{
    return m_name_isSet;
}

bool OAIProject::is_name_Valid() const{
    return m_name_isValid;
}

QString OAIProject::getNote() const {
    return m_note;
}
void OAIProject::setNote(const QString &note) {
    m_note = note;
    m_note_isSet = true;
}

bool OAIProject::is_note_Set() const{
    return m_note_isSet;
}

bool OAIProject::is_note_Valid() const{
    return m_note_isValid;
}

qint64 OAIProject::getOrgId() const {
    return m_org_id;
}
void OAIProject::setOrgId(const qint64 &org_id) {
    m_org_id = org_id;
    m_org_id_isSet = true;
}

bool OAIProject::is_org_id_Set() const{
    return m_org_id_isSet;
}

bool OAIProject::is_org_id_Valid() const{
    return m_org_id_isValid;
}

QString OAIProject::getStatus() const {
    return m_status;
}
void OAIProject::setStatus(const QString &status) {
    m_status = status;
    m_status_isSet = true;
}

bool OAIProject::is_status_Set() const{
    return m_status_isSet;
}

bool OAIProject::is_status_Valid() const{
    return m_status_isValid;
}

QString OAIProject::getTimezone() const {
    return m_timezone;
}
void OAIProject::setTimezone(const QString &timezone) {
    m_timezone = timezone;
    m_timezone_isSet = true;
}

bool OAIProject::is_timezone_Set() const{
    return m_timezone_isSet;
}

bool OAIProject::is_timezone_Valid() const{
    return m_timezone_isValid;
}

QString OAIProject::getUserDescription() const {
    return m_user_description;
}
void OAIProject::setUserDescription(const QString &user_description) {
    m_user_description = user_description;
    m_user_description_isSet = true;
}

bool OAIProject::is_user_description_Set() const{
    return m_user_description_isSet;
}

bool OAIProject::is_user_description_Valid() const{
    return m_user_description_isValid;
}

QString OAIProject::getUserTitle() const {
    return m_user_title;
}
void OAIProject::setUserTitle(const QString &user_title) {
    m_user_title = user_title;
    m_user_title_isSet = true;
}

bool OAIProject::is_user_title_Set() const{
    return m_user_title_isSet;
}

bool OAIProject::is_user_title_Valid() const{
    return m_user_title_isValid;
}

bool OAIProject::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_admin_url_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_country_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_created_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_created_by_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_design_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_external_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_locale_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_note_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_org_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_status_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_timezone_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_user_description_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_user_title_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIProject::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
