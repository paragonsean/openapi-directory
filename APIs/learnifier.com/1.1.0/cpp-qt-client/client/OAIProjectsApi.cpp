/**
 * Learnifier
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.1.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIProjectsApi.h"
#include "OAIServerConfiguration.h"
#include <QJsonArray>
#include <QJsonDocument>

namespace OpenAPI {

OAIProjectsApi::OAIProjectsApi(const int timeOut)
    : _timeOut(timeOut),
      _manager(nullptr),
      _isResponseCompressionEnabled(false),
      _isRequestCompressionEnabled(false) {
    initializeServerConfigs();
}

OAIProjectsApi::~OAIProjectsApi() {
}

void OAIProjectsApi::initializeServerConfigs() {
    //Default server
    QList<OAIServerConfiguration> defaultConf = QList<OAIServerConfiguration>();
    //varying endpoint server
    defaultConf.append(OAIServerConfiguration(
    QUrl("http://learnifier.com/"),
    "No description provided",
    QMap<QString, OAIServerVariable>()));
    _serverConfigs.insert("extprojectGet", defaultConf);
    _serverIndices.insert("extprojectGet", 0);
    _serverConfigs.insert("orgunitsOrgidProjectsGet", defaultConf);
    _serverIndices.insert("orgunitsOrgidProjectsGet", 0);
    _serverConfigs.insert("orgunitsOrgidProjectsPost", defaultConf);
    _serverIndices.insert("orgunitsOrgidProjectsPost", 0);
    _serverConfigs.insert("orgunitsOrgidProjectsProjectidDelete", defaultConf);
    _serverIndices.insert("orgunitsOrgidProjectsProjectidDelete", 0);
    _serverConfigs.insert("orgunitsOrgidProjectsProjectidGet", defaultConf);
    _serverIndices.insert("orgunitsOrgidProjectsProjectidGet", 0);
    _serverConfigs.insert("orgunitsOrgidProjectsProjectidParticipantsGet", defaultConf);
    _serverIndices.insert("orgunitsOrgidProjectsProjectidParticipantsGet", 0);
    _serverConfigs.insert("orgunitsOrgidProjectsProjectidParticipantsParticipantIdActivatePost", defaultConf);
    _serverIndices.insert("orgunitsOrgidProjectsProjectidParticipantsParticipantIdActivatePost", 0);
    _serverConfigs.insert("orgunitsOrgidProjectsProjectidParticipantsParticipantIdDelete", defaultConf);
    _serverIndices.insert("orgunitsOrgidProjectsProjectidParticipantsParticipantIdDelete", 0);
    _serverConfigs.insert("orgunitsOrgidProjectsProjectidParticipantsParticipantIdLoginlinkPost", defaultConf);
    _serverIndices.insert("orgunitsOrgidProjectsProjectidParticipantsParticipantIdLoginlinkPost", 0);
    _serverConfigs.insert("orgunitsOrgidProjectsProjectidParticipantsPost", defaultConf);
    _serverIndices.insert("orgunitsOrgidProjectsProjectidParticipantsPost", 0);
    _serverConfigs.insert("orgunitsOrgidProjectsProjectidPatch", defaultConf);
    _serverIndices.insert("orgunitsOrgidProjectsProjectidPatch", 0);
    _serverConfigs.insert("orgunitsOrgidProjectsProjectidTeammembersGet", defaultConf);
    _serverIndices.insert("orgunitsOrgidProjectsProjectidTeammembersGet", 0);
}

/**
* returns 0 on success and -1, -2 or -3 on failure.
* -1 when the variable does not exist and -2 if the value is not defined in the enum and -3 if the operation or server index is not found
*/
int OAIProjectsApi::setDefaultServerValue(int serverIndex, const QString &operation, const QString &variable, const QString &value) {
    auto it = _serverConfigs.find(operation);
    if (it != _serverConfigs.end() && serverIndex < it.value().size()) {
      return _serverConfigs[operation][serverIndex].setDefaultValue(variable,value);
    }
    return -3;
}
void OAIProjectsApi::setServerIndex(const QString &operation, int serverIndex) {
    if (_serverIndices.contains(operation) && serverIndex < _serverConfigs.find(operation).value().size()) {
        _serverIndices[operation] = serverIndex;
    }
}

void OAIProjectsApi::setApiKey(const QString &apiKeyName, const QString &apiKey) {
    _apiKeys.insert(apiKeyName, apiKey);
}

void OAIProjectsApi::setBearerToken(const QString &token) {
    _bearerToken = token;
}

void OAIProjectsApi::setUsername(const QString &username) {
    _username = username;
}

void OAIProjectsApi::setPassword(const QString &password) {
    _password = password;
}


void OAIProjectsApi::setTimeOut(const int timeOut) {
    _timeOut = timeOut;
}

void OAIProjectsApi::setWorkingDirectory(const QString &path) {
    _workingDirectory = path;
}

void OAIProjectsApi::setNetworkAccessManager(QNetworkAccessManager* manager) {
    _manager = manager;
}

/**
    * Appends a new ServerConfiguration to the config map for a specific operation.
    * @param operation The id to the target operation.
    * @param url A string that contains the URL of the server
    * @param description A String that describes the server
    * @param variables A map between a variable name and its value. The value is used for substitution in the server's URL template.
    * returns the index of the new server config on success and -1 if the operation is not found
    */
int OAIProjectsApi::addServerConfiguration(const QString &operation, const QUrl &url, const QString &description, const QMap<QString, OAIServerVariable> &variables) {
    if (_serverConfigs.contains(operation)) {
        _serverConfigs[operation].append(OAIServerConfiguration(
                    url,
                    description,
                    variables));
        return _serverConfigs[operation].size()-1;
    } else {
        return -1;
    }
}

/**
    * Appends a new ServerConfiguration to the config map for a all operations and sets the index to that server.
    * @param url A string that contains the URL of the server
    * @param description A String that describes the server
    * @param variables A map between a variable name and its value. The value is used for substitution in the server's URL template.
    */
void OAIProjectsApi::setNewServerForAllOperations(const QUrl &url, const QString &description, const QMap<QString, OAIServerVariable> &variables) {
    for (auto keyIt = _serverIndices.keyBegin(); keyIt != _serverIndices.keyEnd(); keyIt++) {
        setServerIndex(*keyIt, addServerConfiguration(*keyIt, url, description, variables));
    }
}

/**
    * Appends a new ServerConfiguration to the config map for an operations and sets the index to that server.
    * @param URL A string that contains the URL of the server
    * @param description A String that describes the server
    * @param variables A map between a variable name and its value. The value is used for substitution in the server's URL template.
    */
void OAIProjectsApi::setNewServer(const QString &operation, const QUrl &url, const QString &description, const QMap<QString, OAIServerVariable> &variables) {
    setServerIndex(operation, addServerConfiguration(operation, url, description, variables));
}

void OAIProjectsApi::addHeaders(const QString &key, const QString &value) {
    _defaultHeaders.insert(key, value);
}

void OAIProjectsApi::enableRequestCompression() {
    _isRequestCompressionEnabled = true;
}

void OAIProjectsApi::enableResponseCompression() {
    _isResponseCompressionEnabled = true;
}

void OAIProjectsApi::abortRequests() {
    Q_EMIT abortRequestsSignal();
}

QString OAIProjectsApi::getParamStylePrefix(const QString &style) {
    if (style == "matrix") {
        return ";";
    } else if (style == "label") {
        return ".";
    } else if (style == "form") {
        return "&";
    } else if (style == "simple") {
        return "";
    } else if (style == "spaceDelimited") {
        return "&";
    } else if (style == "pipeDelimited") {
        return "&";
    } else {
        return "none";
    }
}

QString OAIProjectsApi::getParamStyleSuffix(const QString &style) {
    if (style == "matrix") {
        return "=";
    } else if (style == "label") {
        return "";
    } else if (style == "form") {
        return "=";
    } else if (style == "simple") {
        return "";
    } else if (style == "spaceDelimited") {
        return "=";
    } else if (style == "pipeDelimited") {
        return "=";
    } else {
        return "none";
    }
}

QString OAIProjectsApi::getParamStyleDelimiter(const QString &style, const QString &name, bool isExplode) {

    if (style == "matrix") {
        return (isExplode) ? ";" + name + "=" : ",";

    } else if (style == "label") {
        return (isExplode) ? "." : ",";

    } else if (style == "form") {
        return (isExplode) ? "&" + name + "=" : ",";

    } else if (style == "simple") {
        return ",";
    } else if (style == "spaceDelimited") {
        return (isExplode) ? "&" + name + "=" : " ";

    } else if (style == "pipeDelimited") {
        return (isExplode) ? "&" + name + "=" : "|";

    } else if (style == "deepObject") {
        return (isExplode) ? "&" : "none";

    } else {
        return "none";
    }
}

void OAIProjectsApi::extprojectGet(const QString &extid) {
    QString fullPath = QString(_serverConfigs["extprojectGet"][_serverIndices.value("extprojectGet")].URL()+"/extproject");
    
    QString queryPrefix, querySuffix, queryDelimiter, queryStyle;
    
    {
        queryStyle = "";
        if (queryStyle == "")
            queryStyle = "form";
        queryPrefix = getParamStylePrefix(queryStyle);
        querySuffix = getParamStyleSuffix(queryStyle);
        queryDelimiter = getParamStyleDelimiter(queryStyle, "extid", false);
        if (fullPath.indexOf("?") > 0)
            fullPath.append(queryPrefix);
        else
            fullPath.append("?");

        fullPath.append(QUrl::toPercentEncoding("extid")).append(querySuffix).append(QUrl::toPercentEncoding(extid));
    }
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "GET");


    for (auto keyValueIt = _defaultHeaders.keyValueBegin(); keyValueIt != _defaultHeaders.keyValueEnd(); keyValueIt++) {
        input.headers.insert(keyValueIt->first, keyValueIt->second);
    }


    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAIProjectsApi::extprojectGetCallback);
    connect(this, &OAIProjectsApi::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, this, [this]() {
        if (findChildren<OAIHttpRequestWorker*>().count() == 0) {
            Q_EMIT allPendingRequestsCompleted();
        }
    });

    worker->execute(&input);
}

void OAIProjectsApi::extprojectGetCallback(OAIHttpRequestWorker *worker) {
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type != QNetworkReply::NoError) {
        error_str = QString("%1, %2").arg(worker->error_str, QString(worker->response));
    }
    OAIProject output(QString(worker->response));
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        Q_EMIT extprojectGetSignal(output);
        Q_EMIT extprojectGetSignalFull(worker, output);
    } else {

#if defined(_MSC_VER)
// For MSVC
#pragma warning(push)
#pragma warning(disable : 4996)
#elif defined(__clang__)
// For Clang
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#elif defined(__GNUC__)
// For GCC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

        Q_EMIT extprojectGetSignalE(output, error_type, error_str);
        Q_EMIT extprojectGetSignalEFull(worker, error_type, error_str);

#if defined(_MSC_VER)
#pragma warning(pop)
#elif defined(__clang__)
#pragma clang diagnostic pop
#elif defined(__GNUC__)
#pragma GCC diagnostic pop
#endif

        Q_EMIT extprojectGetSignalError(output, error_type, error_str);
        Q_EMIT extprojectGetSignalErrorFull(worker, error_type, error_str);
    }
}

void OAIProjectsApi::orgunitsOrgidProjectsGet(const double &orgid) {
    QString fullPath = QString(_serverConfigs["orgunitsOrgidProjectsGet"][_serverIndices.value("orgunitsOrgidProjectsGet")].URL()+"/orgunits/{orgid}/projects");
    
    
    {
        QString orgidPathParam("{");
        orgidPathParam.append("orgid").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "orgid", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"orgid"+pathSuffix : pathPrefix;
        fullPath.replace(orgidPathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(orgid)));
    }
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "GET");


    for (auto keyValueIt = _defaultHeaders.keyValueBegin(); keyValueIt != _defaultHeaders.keyValueEnd(); keyValueIt++) {
        input.headers.insert(keyValueIt->first, keyValueIt->second);
    }


    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAIProjectsApi::orgunitsOrgidProjectsGetCallback);
    connect(this, &OAIProjectsApi::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, this, [this]() {
        if (findChildren<OAIHttpRequestWorker*>().count() == 0) {
            Q_EMIT allPendingRequestsCompleted();
        }
    });

    worker->execute(&input);
}

void OAIProjectsApi::orgunitsOrgidProjectsGetCallback(OAIHttpRequestWorker *worker) {
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type != QNetworkReply::NoError) {
        error_str = QString("%1, %2").arg(worker->error_str, QString(worker->response));
    }
    QList<OAIProject> output;
    QString json(worker->response);
    QByteArray array(json.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonArray jsonArray = doc.array();
    for (QJsonValue obj : jsonArray) {
        OAIProject val;
        ::OpenAPI::fromJsonValue(val, obj);
        output.append(val);
    }
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        Q_EMIT orgunitsOrgidProjectsGetSignal(output);
        Q_EMIT orgunitsOrgidProjectsGetSignalFull(worker, output);
    } else {

#if defined(_MSC_VER)
// For MSVC
#pragma warning(push)
#pragma warning(disable : 4996)
#elif defined(__clang__)
// For Clang
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#elif defined(__GNUC__)
// For GCC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

        Q_EMIT orgunitsOrgidProjectsGetSignalE(output, error_type, error_str);
        Q_EMIT orgunitsOrgidProjectsGetSignalEFull(worker, error_type, error_str);

#if defined(_MSC_VER)
#pragma warning(pop)
#elif defined(__clang__)
#pragma clang diagnostic pop
#elif defined(__GNUC__)
#pragma GCC diagnostic pop
#endif

        Q_EMIT orgunitsOrgidProjectsGetSignalError(output, error_type, error_str);
        Q_EMIT orgunitsOrgidProjectsGetSignalErrorFull(worker, error_type, error_str);
    }
}

void OAIProjectsApi::orgunitsOrgidProjectsPost(const qint32 &orgid, const OAIAddProject &body) {
    QString fullPath = QString(_serverConfigs["orgunitsOrgidProjectsPost"][_serverIndices.value("orgunitsOrgidProjectsPost")].URL()+"/orgunits/{orgid}/projects");
    
    
    {
        QString orgidPathParam("{");
        orgidPathParam.append("orgid").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "orgid", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"orgid"+pathSuffix : pathPrefix;
        fullPath.replace(orgidPathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(orgid)));
    }
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "POST");

    {

        
        QByteArray output = body.asJson().toUtf8();
        input.request_body.append(output);
    }
    for (auto keyValueIt = _defaultHeaders.keyValueBegin(); keyValueIt != _defaultHeaders.keyValueEnd(); keyValueIt++) {
        input.headers.insert(keyValueIt->first, keyValueIt->second);
    }


    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAIProjectsApi::orgunitsOrgidProjectsPostCallback);
    connect(this, &OAIProjectsApi::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, this, [this]() {
        if (findChildren<OAIHttpRequestWorker*>().count() == 0) {
            Q_EMIT allPendingRequestsCompleted();
        }
    });

    worker->execute(&input);
}

void OAIProjectsApi::orgunitsOrgidProjectsPostCallback(OAIHttpRequestWorker *worker) {
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type != QNetworkReply::NoError) {
        error_str = QString("%1, %2").arg(worker->error_str, QString(worker->response));
    }
    OAIProject output(QString(worker->response));
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        Q_EMIT orgunitsOrgidProjectsPostSignal(output);
        Q_EMIT orgunitsOrgidProjectsPostSignalFull(worker, output);
    } else {

#if defined(_MSC_VER)
// For MSVC
#pragma warning(push)
#pragma warning(disable : 4996)
#elif defined(__clang__)
// For Clang
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#elif defined(__GNUC__)
// For GCC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

        Q_EMIT orgunitsOrgidProjectsPostSignalE(output, error_type, error_str);
        Q_EMIT orgunitsOrgidProjectsPostSignalEFull(worker, error_type, error_str);

#if defined(_MSC_VER)
#pragma warning(pop)
#elif defined(__clang__)
#pragma clang diagnostic pop
#elif defined(__GNUC__)
#pragma GCC diagnostic pop
#endif

        Q_EMIT orgunitsOrgidProjectsPostSignalError(output, error_type, error_str);
        Q_EMIT orgunitsOrgidProjectsPostSignalErrorFull(worker, error_type, error_str);
    }
}

void OAIProjectsApi::orgunitsOrgidProjectsProjectidDelete(const qint32 &orgid, const qint32 &projectid) {
    QString fullPath = QString(_serverConfigs["orgunitsOrgidProjectsProjectidDelete"][_serverIndices.value("orgunitsOrgidProjectsProjectidDelete")].URL()+"/orgunits/{orgid}/projects/{projectid}");
    
    
    {
        QString orgidPathParam("{");
        orgidPathParam.append("orgid").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "orgid", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"orgid"+pathSuffix : pathPrefix;
        fullPath.replace(orgidPathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(orgid)));
    }
    
    {
        QString projectidPathParam("{");
        projectidPathParam.append("projectid").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "projectid", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"projectid"+pathSuffix : pathPrefix;
        fullPath.replace(projectidPathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(projectid)));
    }
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "DELETE");


    for (auto keyValueIt = _defaultHeaders.keyValueBegin(); keyValueIt != _defaultHeaders.keyValueEnd(); keyValueIt++) {
        input.headers.insert(keyValueIt->first, keyValueIt->second);
    }


    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAIProjectsApi::orgunitsOrgidProjectsProjectidDeleteCallback);
    connect(this, &OAIProjectsApi::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, this, [this]() {
        if (findChildren<OAIHttpRequestWorker*>().count() == 0) {
            Q_EMIT allPendingRequestsCompleted();
        }
    });

    worker->execute(&input);
}

void OAIProjectsApi::orgunitsOrgidProjectsProjectidDeleteCallback(OAIHttpRequestWorker *worker) {
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type != QNetworkReply::NoError) {
        error_str = QString("%1, %2").arg(worker->error_str, QString(worker->response));
    }
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        Q_EMIT orgunitsOrgidProjectsProjectidDeleteSignal();
        Q_EMIT orgunitsOrgidProjectsProjectidDeleteSignalFull(worker);
    } else {

#if defined(_MSC_VER)
// For MSVC
#pragma warning(push)
#pragma warning(disable : 4996)
#elif defined(__clang__)
// For Clang
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#elif defined(__GNUC__)
// For GCC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

        Q_EMIT orgunitsOrgidProjectsProjectidDeleteSignalE(error_type, error_str);
        Q_EMIT orgunitsOrgidProjectsProjectidDeleteSignalEFull(worker, error_type, error_str);

#if defined(_MSC_VER)
#pragma warning(pop)
#elif defined(__clang__)
#pragma clang diagnostic pop
#elif defined(__GNUC__)
#pragma GCC diagnostic pop
#endif

        Q_EMIT orgunitsOrgidProjectsProjectidDeleteSignalError(error_type, error_str);
        Q_EMIT orgunitsOrgidProjectsProjectidDeleteSignalErrorFull(worker, error_type, error_str);
    }
}

void OAIProjectsApi::orgunitsOrgidProjectsProjectidGet(const qint32 &orgid, const qint32 &projectid) {
    QString fullPath = QString(_serverConfigs["orgunitsOrgidProjectsProjectidGet"][_serverIndices.value("orgunitsOrgidProjectsProjectidGet")].URL()+"/orgunits/{orgid}/projects/{projectid}");
    
    
    {
        QString orgidPathParam("{");
        orgidPathParam.append("orgid").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "orgid", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"orgid"+pathSuffix : pathPrefix;
        fullPath.replace(orgidPathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(orgid)));
    }
    
    {
        QString projectidPathParam("{");
        projectidPathParam.append("projectid").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "projectid", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"projectid"+pathSuffix : pathPrefix;
        fullPath.replace(projectidPathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(projectid)));
    }
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "GET");


    for (auto keyValueIt = _defaultHeaders.keyValueBegin(); keyValueIt != _defaultHeaders.keyValueEnd(); keyValueIt++) {
        input.headers.insert(keyValueIt->first, keyValueIt->second);
    }


    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAIProjectsApi::orgunitsOrgidProjectsProjectidGetCallback);
    connect(this, &OAIProjectsApi::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, this, [this]() {
        if (findChildren<OAIHttpRequestWorker*>().count() == 0) {
            Q_EMIT allPendingRequestsCompleted();
        }
    });

    worker->execute(&input);
}

void OAIProjectsApi::orgunitsOrgidProjectsProjectidGetCallback(OAIHttpRequestWorker *worker) {
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type != QNetworkReply::NoError) {
        error_str = QString("%1, %2").arg(worker->error_str, QString(worker->response));
    }
    OAIProject output(QString(worker->response));
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        Q_EMIT orgunitsOrgidProjectsProjectidGetSignal(output);
        Q_EMIT orgunitsOrgidProjectsProjectidGetSignalFull(worker, output);
    } else {

#if defined(_MSC_VER)
// For MSVC
#pragma warning(push)
#pragma warning(disable : 4996)
#elif defined(__clang__)
// For Clang
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#elif defined(__GNUC__)
// For GCC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

        Q_EMIT orgunitsOrgidProjectsProjectidGetSignalE(output, error_type, error_str);
        Q_EMIT orgunitsOrgidProjectsProjectidGetSignalEFull(worker, error_type, error_str);

#if defined(_MSC_VER)
#pragma warning(pop)
#elif defined(__clang__)
#pragma clang diagnostic pop
#elif defined(__GNUC__)
#pragma GCC diagnostic pop
#endif

        Q_EMIT orgunitsOrgidProjectsProjectidGetSignalError(output, error_type, error_str);
        Q_EMIT orgunitsOrgidProjectsProjectidGetSignalErrorFull(worker, error_type, error_str);
    }
}

void OAIProjectsApi::orgunitsOrgidProjectsProjectidParticipantsGet(const qint32 &orgid, const qint32 &projectid) {
    QString fullPath = QString(_serverConfigs["orgunitsOrgidProjectsProjectidParticipantsGet"][_serverIndices.value("orgunitsOrgidProjectsProjectidParticipantsGet")].URL()+"/orgunits/{orgid}/projects/{projectid}/participants");
    
    
    {
        QString orgidPathParam("{");
        orgidPathParam.append("orgid").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "orgid", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"orgid"+pathSuffix : pathPrefix;
        fullPath.replace(orgidPathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(orgid)));
    }
    
    {
        QString projectidPathParam("{");
        projectidPathParam.append("projectid").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "projectid", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"projectid"+pathSuffix : pathPrefix;
        fullPath.replace(projectidPathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(projectid)));
    }
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "GET");


    for (auto keyValueIt = _defaultHeaders.keyValueBegin(); keyValueIt != _defaultHeaders.keyValueEnd(); keyValueIt++) {
        input.headers.insert(keyValueIt->first, keyValueIt->second);
    }


    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAIProjectsApi::orgunitsOrgidProjectsProjectidParticipantsGetCallback);
    connect(this, &OAIProjectsApi::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, this, [this]() {
        if (findChildren<OAIHttpRequestWorker*>().count() == 0) {
            Q_EMIT allPendingRequestsCompleted();
        }
    });

    worker->execute(&input);
}

void OAIProjectsApi::orgunitsOrgidProjectsProjectidParticipantsGetCallback(OAIHttpRequestWorker *worker) {
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type != QNetworkReply::NoError) {
        error_str = QString("%1, %2").arg(worker->error_str, QString(worker->response));
    }
    QList<OAIParticipation> output;
    QString json(worker->response);
    QByteArray array(json.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonArray jsonArray = doc.array();
    for (QJsonValue obj : jsonArray) {
        OAIParticipation val;
        ::OpenAPI::fromJsonValue(val, obj);
        output.append(val);
    }
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        Q_EMIT orgunitsOrgidProjectsProjectidParticipantsGetSignal(output);
        Q_EMIT orgunitsOrgidProjectsProjectidParticipantsGetSignalFull(worker, output);
    } else {

#if defined(_MSC_VER)
// For MSVC
#pragma warning(push)
#pragma warning(disable : 4996)
#elif defined(__clang__)
// For Clang
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#elif defined(__GNUC__)
// For GCC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

        Q_EMIT orgunitsOrgidProjectsProjectidParticipantsGetSignalE(output, error_type, error_str);
        Q_EMIT orgunitsOrgidProjectsProjectidParticipantsGetSignalEFull(worker, error_type, error_str);

#if defined(_MSC_VER)
#pragma warning(pop)
#elif defined(__clang__)
#pragma clang diagnostic pop
#elif defined(__GNUC__)
#pragma GCC diagnostic pop
#endif

        Q_EMIT orgunitsOrgidProjectsProjectidParticipantsGetSignalError(output, error_type, error_str);
        Q_EMIT orgunitsOrgidProjectsProjectidParticipantsGetSignalErrorFull(worker, error_type, error_str);
    }
}

void OAIProjectsApi::orgunitsOrgidProjectsProjectidParticipantsParticipantIdActivatePost(const qint32 &orgid, const qint32 &projectid, const qint32 &participant_id) {
    QString fullPath = QString(_serverConfigs["orgunitsOrgidProjectsProjectidParticipantsParticipantIdActivatePost"][_serverIndices.value("orgunitsOrgidProjectsProjectidParticipantsParticipantIdActivatePost")].URL()+"/orgunits/{orgid}/projects/{projectid}/participants/${participantId}/activate");
    
    
    {
        QString orgidPathParam("{");
        orgidPathParam.append("orgid").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "orgid", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"orgid"+pathSuffix : pathPrefix;
        fullPath.replace(orgidPathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(orgid)));
    }
    
    {
        QString projectidPathParam("{");
        projectidPathParam.append("projectid").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "projectid", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"projectid"+pathSuffix : pathPrefix;
        fullPath.replace(projectidPathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(projectid)));
    }
    
    {
        QString participant_idPathParam("{");
        participant_idPathParam.append("participantId").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "participantId", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"participantId"+pathSuffix : pathPrefix;
        fullPath.replace(participant_idPathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(participant_id)));
    }
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "POST");


    for (auto keyValueIt = _defaultHeaders.keyValueBegin(); keyValueIt != _defaultHeaders.keyValueEnd(); keyValueIt++) {
        input.headers.insert(keyValueIt->first, keyValueIt->second);
    }


    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAIProjectsApi::orgunitsOrgidProjectsProjectidParticipantsParticipantIdActivatePostCallback);
    connect(this, &OAIProjectsApi::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, this, [this]() {
        if (findChildren<OAIHttpRequestWorker*>().count() == 0) {
            Q_EMIT allPendingRequestsCompleted();
        }
    });

    worker->execute(&input);
}

void OAIProjectsApi::orgunitsOrgidProjectsProjectidParticipantsParticipantIdActivatePostCallback(OAIHttpRequestWorker *worker) {
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type != QNetworkReply::NoError) {
        error_str = QString("%1, %2").arg(worker->error_str, QString(worker->response));
    }
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        Q_EMIT orgunitsOrgidProjectsProjectidParticipantsParticipantIdActivatePostSignal();
        Q_EMIT orgunitsOrgidProjectsProjectidParticipantsParticipantIdActivatePostSignalFull(worker);
    } else {

#if defined(_MSC_VER)
// For MSVC
#pragma warning(push)
#pragma warning(disable : 4996)
#elif defined(__clang__)
// For Clang
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#elif defined(__GNUC__)
// For GCC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

        Q_EMIT orgunitsOrgidProjectsProjectidParticipantsParticipantIdActivatePostSignalE(error_type, error_str);
        Q_EMIT orgunitsOrgidProjectsProjectidParticipantsParticipantIdActivatePostSignalEFull(worker, error_type, error_str);

#if defined(_MSC_VER)
#pragma warning(pop)
#elif defined(__clang__)
#pragma clang diagnostic pop
#elif defined(__GNUC__)
#pragma GCC diagnostic pop
#endif

        Q_EMIT orgunitsOrgidProjectsProjectidParticipantsParticipantIdActivatePostSignalError(error_type, error_str);
        Q_EMIT orgunitsOrgidProjectsProjectidParticipantsParticipantIdActivatePostSignalErrorFull(worker, error_type, error_str);
    }
}

void OAIProjectsApi::orgunitsOrgidProjectsProjectidParticipantsParticipantIdDelete(const qint32 &orgid, const qint32 &projectid, const qint32 &participant_id) {
    QString fullPath = QString(_serverConfigs["orgunitsOrgidProjectsProjectidParticipantsParticipantIdDelete"][_serverIndices.value("orgunitsOrgidProjectsProjectidParticipantsParticipantIdDelete")].URL()+"/orgunits/{orgid}/projects/{projectid}/participants/${participantId}");
    
    
    {
        QString orgidPathParam("{");
        orgidPathParam.append("orgid").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "orgid", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"orgid"+pathSuffix : pathPrefix;
        fullPath.replace(orgidPathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(orgid)));
    }
    
    {
        QString projectidPathParam("{");
        projectidPathParam.append("projectid").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "projectid", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"projectid"+pathSuffix : pathPrefix;
        fullPath.replace(projectidPathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(projectid)));
    }
    
    {
        QString participant_idPathParam("{");
        participant_idPathParam.append("participantId").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "participantId", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"participantId"+pathSuffix : pathPrefix;
        fullPath.replace(participant_idPathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(participant_id)));
    }
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "DELETE");


    for (auto keyValueIt = _defaultHeaders.keyValueBegin(); keyValueIt != _defaultHeaders.keyValueEnd(); keyValueIt++) {
        input.headers.insert(keyValueIt->first, keyValueIt->second);
    }


    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAIProjectsApi::orgunitsOrgidProjectsProjectidParticipantsParticipantIdDeleteCallback);
    connect(this, &OAIProjectsApi::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, this, [this]() {
        if (findChildren<OAIHttpRequestWorker*>().count() == 0) {
            Q_EMIT allPendingRequestsCompleted();
        }
    });

    worker->execute(&input);
}

void OAIProjectsApi::orgunitsOrgidProjectsProjectidParticipantsParticipantIdDeleteCallback(OAIHttpRequestWorker *worker) {
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type != QNetworkReply::NoError) {
        error_str = QString("%1, %2").arg(worker->error_str, QString(worker->response));
    }
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        Q_EMIT orgunitsOrgidProjectsProjectidParticipantsParticipantIdDeleteSignal();
        Q_EMIT orgunitsOrgidProjectsProjectidParticipantsParticipantIdDeleteSignalFull(worker);
    } else {

#if defined(_MSC_VER)
// For MSVC
#pragma warning(push)
#pragma warning(disable : 4996)
#elif defined(__clang__)
// For Clang
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#elif defined(__GNUC__)
// For GCC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

        Q_EMIT orgunitsOrgidProjectsProjectidParticipantsParticipantIdDeleteSignalE(error_type, error_str);
        Q_EMIT orgunitsOrgidProjectsProjectidParticipantsParticipantIdDeleteSignalEFull(worker, error_type, error_str);

#if defined(_MSC_VER)
#pragma warning(pop)
#elif defined(__clang__)
#pragma clang diagnostic pop
#elif defined(__GNUC__)
#pragma GCC diagnostic pop
#endif

        Q_EMIT orgunitsOrgidProjectsProjectidParticipantsParticipantIdDeleteSignalError(error_type, error_str);
        Q_EMIT orgunitsOrgidProjectsProjectidParticipantsParticipantIdDeleteSignalErrorFull(worker, error_type, error_str);
    }
}

void OAIProjectsApi::orgunitsOrgidProjectsProjectidParticipantsParticipantIdLoginlinkPost(const qint32 &orgid, const qint32 &projectid, const qint32 &participant_id) {
    QString fullPath = QString(_serverConfigs["orgunitsOrgidProjectsProjectidParticipantsParticipantIdLoginlinkPost"][_serverIndices.value("orgunitsOrgidProjectsProjectidParticipantsParticipantIdLoginlinkPost")].URL()+"/orgunits/{orgid}/projects/{projectid}/participants/${participantId}/loginlink");
    
    
    {
        QString orgidPathParam("{");
        orgidPathParam.append("orgid").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "orgid", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"orgid"+pathSuffix : pathPrefix;
        fullPath.replace(orgidPathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(orgid)));
    }
    
    {
        QString projectidPathParam("{");
        projectidPathParam.append("projectid").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "projectid", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"projectid"+pathSuffix : pathPrefix;
        fullPath.replace(projectidPathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(projectid)));
    }
    
    {
        QString participant_idPathParam("{");
        participant_idPathParam.append("participantId").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "participantId", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"participantId"+pathSuffix : pathPrefix;
        fullPath.replace(participant_idPathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(participant_id)));
    }
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "POST");


    for (auto keyValueIt = _defaultHeaders.keyValueBegin(); keyValueIt != _defaultHeaders.keyValueEnd(); keyValueIt++) {
        input.headers.insert(keyValueIt->first, keyValueIt->second);
    }


    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAIProjectsApi::orgunitsOrgidProjectsProjectidParticipantsParticipantIdLoginlinkPostCallback);
    connect(this, &OAIProjectsApi::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, this, [this]() {
        if (findChildren<OAIHttpRequestWorker*>().count() == 0) {
            Q_EMIT allPendingRequestsCompleted();
        }
    });

    worker->execute(&input);
}

void OAIProjectsApi::orgunitsOrgidProjectsProjectidParticipantsParticipantIdLoginlinkPostCallback(OAIHttpRequestWorker *worker) {
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type != QNetworkReply::NoError) {
        error_str = QString("%1, %2").arg(worker->error_str, QString(worker->response));
    }
    OAILoginLink output(QString(worker->response));
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        Q_EMIT orgunitsOrgidProjectsProjectidParticipantsParticipantIdLoginlinkPostSignal(output);
        Q_EMIT orgunitsOrgidProjectsProjectidParticipantsParticipantIdLoginlinkPostSignalFull(worker, output);
    } else {

#if defined(_MSC_VER)
// For MSVC
#pragma warning(push)
#pragma warning(disable : 4996)
#elif defined(__clang__)
// For Clang
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#elif defined(__GNUC__)
// For GCC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

        Q_EMIT orgunitsOrgidProjectsProjectidParticipantsParticipantIdLoginlinkPostSignalE(output, error_type, error_str);
        Q_EMIT orgunitsOrgidProjectsProjectidParticipantsParticipantIdLoginlinkPostSignalEFull(worker, error_type, error_str);

#if defined(_MSC_VER)
#pragma warning(pop)
#elif defined(__clang__)
#pragma clang diagnostic pop
#elif defined(__GNUC__)
#pragma GCC diagnostic pop
#endif

        Q_EMIT orgunitsOrgidProjectsProjectidParticipantsParticipantIdLoginlinkPostSignalError(output, error_type, error_str);
        Q_EMIT orgunitsOrgidProjectsProjectidParticipantsParticipantIdLoginlinkPostSignalErrorFull(worker, error_type, error_str);
    }
}

void OAIProjectsApi::orgunitsOrgidProjectsProjectidParticipantsPost(const qint32 &orgid, const qint32 &projectid, const OAIAddParticipant &body) {
    QString fullPath = QString(_serverConfigs["orgunitsOrgidProjectsProjectidParticipantsPost"][_serverIndices.value("orgunitsOrgidProjectsProjectidParticipantsPost")].URL()+"/orgunits/{orgid}/projects/{projectid}/participants");
    
    
    {
        QString orgidPathParam("{");
        orgidPathParam.append("orgid").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "orgid", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"orgid"+pathSuffix : pathPrefix;
        fullPath.replace(orgidPathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(orgid)));
    }
    
    {
        QString projectidPathParam("{");
        projectidPathParam.append("projectid").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "projectid", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"projectid"+pathSuffix : pathPrefix;
        fullPath.replace(projectidPathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(projectid)));
    }
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "POST");

    {

        
        QByteArray output = body.asJson().toUtf8();
        input.request_body.append(output);
    }
    for (auto keyValueIt = _defaultHeaders.keyValueBegin(); keyValueIt != _defaultHeaders.keyValueEnd(); keyValueIt++) {
        input.headers.insert(keyValueIt->first, keyValueIt->second);
    }


    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAIProjectsApi::orgunitsOrgidProjectsProjectidParticipantsPostCallback);
    connect(this, &OAIProjectsApi::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, this, [this]() {
        if (findChildren<OAIHttpRequestWorker*>().count() == 0) {
            Q_EMIT allPendingRequestsCompleted();
        }
    });

    worker->execute(&input);
}

void OAIProjectsApi::orgunitsOrgidProjectsProjectidParticipantsPostCallback(OAIHttpRequestWorker *worker) {
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type != QNetworkReply::NoError) {
        error_str = QString("%1, %2").arg(worker->error_str, QString(worker->response));
    }
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        Q_EMIT orgunitsOrgidProjectsProjectidParticipantsPostSignal();
        Q_EMIT orgunitsOrgidProjectsProjectidParticipantsPostSignalFull(worker);
    } else {

#if defined(_MSC_VER)
// For MSVC
#pragma warning(push)
#pragma warning(disable : 4996)
#elif defined(__clang__)
// For Clang
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#elif defined(__GNUC__)
// For GCC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

        Q_EMIT orgunitsOrgidProjectsProjectidParticipantsPostSignalE(error_type, error_str);
        Q_EMIT orgunitsOrgidProjectsProjectidParticipantsPostSignalEFull(worker, error_type, error_str);

#if defined(_MSC_VER)
#pragma warning(pop)
#elif defined(__clang__)
#pragma clang diagnostic pop
#elif defined(__GNUC__)
#pragma GCC diagnostic pop
#endif

        Q_EMIT orgunitsOrgidProjectsProjectidParticipantsPostSignalError(error_type, error_str);
        Q_EMIT orgunitsOrgidProjectsProjectidParticipantsPostSignalErrorFull(worker, error_type, error_str);
    }
}

void OAIProjectsApi::orgunitsOrgidProjectsProjectidPatch(const qint32 &orgid, const qint32 &projectid, const OAIUpdateProject &body) {
    QString fullPath = QString(_serverConfigs["orgunitsOrgidProjectsProjectidPatch"][_serverIndices.value("orgunitsOrgidProjectsProjectidPatch")].URL()+"/orgunits/{orgid}/projects/{projectid}");
    
    
    {
        QString orgidPathParam("{");
        orgidPathParam.append("orgid").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "orgid", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"orgid"+pathSuffix : pathPrefix;
        fullPath.replace(orgidPathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(orgid)));
    }
    
    {
        QString projectidPathParam("{");
        projectidPathParam.append("projectid").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "projectid", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"projectid"+pathSuffix : pathPrefix;
        fullPath.replace(projectidPathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(projectid)));
    }
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "PATCH");

    {

        
        QByteArray output = body.asJson().toUtf8();
        input.request_body.append(output);
    }
    for (auto keyValueIt = _defaultHeaders.keyValueBegin(); keyValueIt != _defaultHeaders.keyValueEnd(); keyValueIt++) {
        input.headers.insert(keyValueIt->first, keyValueIt->second);
    }


    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAIProjectsApi::orgunitsOrgidProjectsProjectidPatchCallback);
    connect(this, &OAIProjectsApi::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, this, [this]() {
        if (findChildren<OAIHttpRequestWorker*>().count() == 0) {
            Q_EMIT allPendingRequestsCompleted();
        }
    });

    worker->execute(&input);
}

void OAIProjectsApi::orgunitsOrgidProjectsProjectidPatchCallback(OAIHttpRequestWorker *worker) {
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type != QNetworkReply::NoError) {
        error_str = QString("%1, %2").arg(worker->error_str, QString(worker->response));
    }
    OAIProject output(QString(worker->response));
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        Q_EMIT orgunitsOrgidProjectsProjectidPatchSignal(output);
        Q_EMIT orgunitsOrgidProjectsProjectidPatchSignalFull(worker, output);
    } else {

#if defined(_MSC_VER)
// For MSVC
#pragma warning(push)
#pragma warning(disable : 4996)
#elif defined(__clang__)
// For Clang
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#elif defined(__GNUC__)
// For GCC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

        Q_EMIT orgunitsOrgidProjectsProjectidPatchSignalE(output, error_type, error_str);
        Q_EMIT orgunitsOrgidProjectsProjectidPatchSignalEFull(worker, error_type, error_str);

#if defined(_MSC_VER)
#pragma warning(pop)
#elif defined(__clang__)
#pragma clang diagnostic pop
#elif defined(__GNUC__)
#pragma GCC diagnostic pop
#endif

        Q_EMIT orgunitsOrgidProjectsProjectidPatchSignalError(output, error_type, error_str);
        Q_EMIT orgunitsOrgidProjectsProjectidPatchSignalErrorFull(worker, error_type, error_str);
    }
}

void OAIProjectsApi::orgunitsOrgidProjectsProjectidTeammembersGet(const qint32 &orgid, const qint32 &projectid) {
    QString fullPath = QString(_serverConfigs["orgunitsOrgidProjectsProjectidTeammembersGet"][_serverIndices.value("orgunitsOrgidProjectsProjectidTeammembersGet")].URL()+"/orgunits/{orgid}/projects/{projectid}/teammembers");
    
    
    {
        QString orgidPathParam("{");
        orgidPathParam.append("orgid").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "orgid", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"orgid"+pathSuffix : pathPrefix;
        fullPath.replace(orgidPathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(orgid)));
    }
    
    {
        QString projectidPathParam("{");
        projectidPathParam.append("projectid").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "projectid", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"projectid"+pathSuffix : pathPrefix;
        fullPath.replace(projectidPathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(projectid)));
    }
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "GET");


    for (auto keyValueIt = _defaultHeaders.keyValueBegin(); keyValueIt != _defaultHeaders.keyValueEnd(); keyValueIt++) {
        input.headers.insert(keyValueIt->first, keyValueIt->second);
    }


    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAIProjectsApi::orgunitsOrgidProjectsProjectidTeammembersGetCallback);
    connect(this, &OAIProjectsApi::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, this, [this]() {
        if (findChildren<OAIHttpRequestWorker*>().count() == 0) {
            Q_EMIT allPendingRequestsCompleted();
        }
    });

    worker->execute(&input);
}

void OAIProjectsApi::orgunitsOrgidProjectsProjectidTeammembersGetCallback(OAIHttpRequestWorker *worker) {
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type != QNetworkReply::NoError) {
        error_str = QString("%1, %2").arg(worker->error_str, QString(worker->response));
    }
    QList<OAIProjectTeamMember> output;
    QString json(worker->response);
    QByteArray array(json.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonArray jsonArray = doc.array();
    for (QJsonValue obj : jsonArray) {
        OAIProjectTeamMember val;
        ::OpenAPI::fromJsonValue(val, obj);
        output.append(val);
    }
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        Q_EMIT orgunitsOrgidProjectsProjectidTeammembersGetSignal(output);
        Q_EMIT orgunitsOrgidProjectsProjectidTeammembersGetSignalFull(worker, output);
    } else {

#if defined(_MSC_VER)
// For MSVC
#pragma warning(push)
#pragma warning(disable : 4996)
#elif defined(__clang__)
// For Clang
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#elif defined(__GNUC__)
// For GCC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

        Q_EMIT orgunitsOrgidProjectsProjectidTeammembersGetSignalE(output, error_type, error_str);
        Q_EMIT orgunitsOrgidProjectsProjectidTeammembersGetSignalEFull(worker, error_type, error_str);

#if defined(_MSC_VER)
#pragma warning(pop)
#elif defined(__clang__)
#pragma clang diagnostic pop
#elif defined(__GNUC__)
#pragma GCC diagnostic pop
#endif

        Q_EMIT orgunitsOrgidProjectsProjectidTeammembersGetSignalError(output, error_type, error_str);
        Q_EMIT orgunitsOrgidProjectsProjectidTeammembersGetSignalErrorFull(worker, error_type, error_str);
    }
}

void OAIProjectsApi::tokenAvailable(){

    oauthToken token;
    switch (_OauthMethod) {
    case 1: //implicit flow
        token = _implicitFlow.getToken(_latestScope.join(" "));
        if(token.isValid()){
            _latestInput.headers.insert("Authorization", "Bearer " + token.getToken());
            _latestWorker->execute(&_latestInput);
        }else{
            _implicitFlow.removeToken(_latestScope.join(" "));
            qDebug() << "Could not retrieve a valid token";
        }
        break;
    case 2: //authorization flow
        token = _authFlow.getToken(_latestScope.join(" "));
        if(token.isValid()){
            _latestInput.headers.insert("Authorization", "Bearer " + token.getToken());
            _latestWorker->execute(&_latestInput);
        }else{
            _authFlow.removeToken(_latestScope.join(" "));
            qDebug() << "Could not retrieve a valid token";
        }
        break;
    case 3: //client credentials flow
        token = _credentialFlow.getToken(_latestScope.join(" "));
        if(token.isValid()){
            _latestInput.headers.insert("Authorization", "Bearer " + token.getToken());
            _latestWorker->execute(&_latestInput);
        }else{
            _credentialFlow.removeToken(_latestScope.join(" "));
            qDebug() << "Could not retrieve a valid token";
        }
        break;
    case 4: //resource owner password flow
        token = _passwordFlow.getToken(_latestScope.join(" "));
        if(token.isValid()){
            _latestInput.headers.insert("Authorization", "Bearer " + token.getToken());
            _latestWorker->execute(&_latestInput);
        }else{
            _credentialFlow.removeToken(_latestScope.join(" "));
            qDebug() << "Could not retrieve a valid token";
        }
        break;
    default:
        qDebug() << "No Oauth method set!";
        break;
    }
}
} // namespace OpenAPI
