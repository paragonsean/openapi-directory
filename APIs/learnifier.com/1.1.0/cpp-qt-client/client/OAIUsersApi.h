/**
 * Learnifier
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.1.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#ifndef OAI_OAIUsersApi_H
#define OAI_OAIUsersApi_H

#include "OAIHelpers.h"
#include "OAIHttpRequest.h"
#include "OAIServerConfiguration.h"
#include "OAIOauth.h"

#include "OAIAddUser.h"
#include "OAIAddUserResponse.h"
#include "OAIError.h"
#include "OAIParticipation.h"
#include "OAIUser.h"
#include "OAIUserParticipationInfo.h"
#include "OAIUserWithPermissions.h"
#include <QString>

#include <QObject>
#include <QByteArray>
#include <QStringList>
#include <QList>
#include <QNetworkAccessManager>

namespace OpenAPI {

class OAIUsersApi : public QObject {
    Q_OBJECT

public:
    OAIUsersApi(const int timeOut = 0);
    ~OAIUsersApi();

    void initializeServerConfigs();
    int setDefaultServerValue(int serverIndex,const QString &operation, const QString &variable,const QString &val);
    void setServerIndex(const QString &operation, int serverIndex);
    void setApiKey(const QString &apiKeyName, const QString &apiKey);
    void setBearerToken(const QString &token);
    void setUsername(const QString &username);
    void setPassword(const QString &password);
    void setTimeOut(const int timeOut);
    void setWorkingDirectory(const QString &path);
    void setNetworkAccessManager(QNetworkAccessManager* manager);
    int addServerConfiguration(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables = QMap<QString, OAIServerVariable>());
    void setNewServerForAllOperations(const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void setNewServer(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void addHeaders(const QString &key, const QString &value);
    void enableRequestCompression();
    void enableResponseCompression();
    void abortRequests();
    QString getParamStylePrefix(const QString &style);
    QString getParamStyleSuffix(const QString &style);
    QString getParamStyleDelimiter(const QString &style, const QString &name, bool isExplode);

    /**
    * @param[in]  extid QString [required]
    */
    virtual void extparticipationGet(const QString &extid);

    /**
    * @param[in]  extid QString [required]
    */
    virtual void extuserGet(const QString &extid);

    /**
    * @param[in]  limit qint32 [optional]
    * @param[in]  offset qint32 [optional]
    */
    virtual void usersGet(const ::OpenAPI::OptionalParam<qint32> &limit = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint32> &offset = ::OpenAPI::OptionalParam<qint32>());

    /**
    * @param[in]  body OAIAddUser [required]
    */
    virtual void usersPost(const OAIAddUser &body);

    /**
    * @param[in]  userid QString [required]
    */
    virtual void usersUseridGet(const QString &userid);

    /**
    * @param[in]  userid QString [required]
    * @param[in]  body OAIAddUser [required]
    */
    virtual void usersUseridPatch(const QString &userid, const OAIAddUser &body);

    /**
    * @param[in]  userid QString [required]
    * @param[in]  apikey QString [required]
    */
    virtual void usersUseridPickeyAPIKEYGet(const QString &userid, const QString &apikey);

    /**
    * @param[in]  userid QString [required]
    */
    virtual void usersUseridProjectParticipationsGet(const QString &userid);


private:
    QMap<QString,int> _serverIndices;
    QMap<QString,QList<OAIServerConfiguration>> _serverConfigs;
    QMap<QString, QString> _apiKeys;
    QString _bearerToken;
    QString _username;
    QString _password;
    int _timeOut;
    QString _workingDirectory;
    QNetworkAccessManager* _manager;
    QMap<QString, QString> _defaultHeaders;
    bool _isResponseCompressionEnabled;
    bool _isRequestCompressionEnabled;
    OAIHttpRequestInput _latestInput;
    OAIHttpRequestWorker *_latestWorker;
    QStringList _latestScope;
    OauthCode _authFlow;
    OauthImplicit _implicitFlow;
    OauthCredentials _credentialFlow;
    OauthPassword _passwordFlow;
    int _OauthMethod = 0;

    void extparticipationGetCallback(OAIHttpRequestWorker *worker);
    void extuserGetCallback(OAIHttpRequestWorker *worker);
    void usersGetCallback(OAIHttpRequestWorker *worker);
    void usersPostCallback(OAIHttpRequestWorker *worker);
    void usersUseridGetCallback(OAIHttpRequestWorker *worker);
    void usersUseridPatchCallback(OAIHttpRequestWorker *worker);
    void usersUseridPickeyAPIKEYGetCallback(OAIHttpRequestWorker *worker);
    void usersUseridProjectParticipationsGetCallback(OAIHttpRequestWorker *worker);

Q_SIGNALS:

    void extparticipationGetSignal(OAIParticipation summary);
    void extuserGetSignal(OAIUser summary);
    void usersGetSignal(QList<OAIUserWithPermissions> summary);
    void usersPostSignal(OAIAddUserResponse summary);
    void usersUseridGetSignal(OAIUser summary);
    void usersUseridPatchSignal();
    void usersUseridPickeyAPIKEYGetSignal();
    void usersUseridProjectParticipationsGetSignal(OAIUserParticipationInfo summary);


    void extparticipationGetSignalFull(OAIHttpRequestWorker *worker, OAIParticipation summary);
    void extuserGetSignalFull(OAIHttpRequestWorker *worker, OAIUser summary);
    void usersGetSignalFull(OAIHttpRequestWorker *worker, QList<OAIUserWithPermissions> summary);
    void usersPostSignalFull(OAIHttpRequestWorker *worker, OAIAddUserResponse summary);
    void usersUseridGetSignalFull(OAIHttpRequestWorker *worker, OAIUser summary);
    void usersUseridPatchSignalFull(OAIHttpRequestWorker *worker);
    void usersUseridPickeyAPIKEYGetSignalFull(OAIHttpRequestWorker *worker);
    void usersUseridProjectParticipationsGetSignalFull(OAIHttpRequestWorker *worker, OAIUserParticipationInfo summary);

    Q_DECL_DEPRECATED_X("Use extparticipationGetSignalError() instead")
    void extparticipationGetSignalE(OAIParticipation summary, QNetworkReply::NetworkError error_type, QString error_str);
    void extparticipationGetSignalError(OAIParticipation summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use extuserGetSignalError() instead")
    void extuserGetSignalE(OAIUser summary, QNetworkReply::NetworkError error_type, QString error_str);
    void extuserGetSignalError(OAIUser summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use usersGetSignalError() instead")
    void usersGetSignalE(QList<OAIUserWithPermissions> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void usersGetSignalError(QList<OAIUserWithPermissions> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use usersPostSignalError() instead")
    void usersPostSignalE(OAIAddUserResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void usersPostSignalError(OAIAddUserResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use usersUseridGetSignalError() instead")
    void usersUseridGetSignalE(OAIUser summary, QNetworkReply::NetworkError error_type, QString error_str);
    void usersUseridGetSignalError(OAIUser summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use usersUseridPatchSignalError() instead")
    void usersUseridPatchSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void usersUseridPatchSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use usersUseridPickeyAPIKEYGetSignalError() instead")
    void usersUseridPickeyAPIKEYGetSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void usersUseridPickeyAPIKEYGetSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use usersUseridProjectParticipationsGetSignalError() instead")
    void usersUseridProjectParticipationsGetSignalE(OAIUserParticipationInfo summary, QNetworkReply::NetworkError error_type, QString error_str);
    void usersUseridProjectParticipationsGetSignalError(OAIUserParticipationInfo summary, QNetworkReply::NetworkError error_type, const QString &error_str);

    Q_DECL_DEPRECATED_X("Use extparticipationGetSignalErrorFull() instead")
    void extparticipationGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void extparticipationGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use extuserGetSignalErrorFull() instead")
    void extuserGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void extuserGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use usersGetSignalErrorFull() instead")
    void usersGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void usersGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use usersPostSignalErrorFull() instead")
    void usersPostSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void usersPostSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use usersUseridGetSignalErrorFull() instead")
    void usersUseridGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void usersUseridGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use usersUseridPatchSignalErrorFull() instead")
    void usersUseridPatchSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void usersUseridPatchSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use usersUseridPickeyAPIKEYGetSignalErrorFull() instead")
    void usersUseridPickeyAPIKEYGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void usersUseridPickeyAPIKEYGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use usersUseridProjectParticipationsGetSignalErrorFull() instead")
    void usersUseridProjectParticipationsGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void usersUseridProjectParticipationsGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);

    void abortRequestsSignal();
    void allPendingRequestsCompleted();

public Q_SLOTS:
    void tokenAvailable();
};

} // namespace OpenAPI
#endif
