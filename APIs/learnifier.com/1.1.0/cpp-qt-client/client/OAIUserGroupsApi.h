/**
 * Learnifier
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.1.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#ifndef OAI_OAIUserGroupsApi_H
#define OAI_OAIUserGroupsApi_H

#include "OAIHelpers.h"
#include "OAIHttpRequest.h"
#include "OAIServerConfiguration.h"
#include "OAIOauth.h"

#include "OAIAddUserGroup.h"
#include "OAIAddUserGroupMember.h"
#include "OAIError.h"
#include "OAIGroupId.h"
#include "OAIUser.h"
#include "OAIUserGroup.h"
#include "OAIUserId.h"
#include <QString>

#include <QObject>
#include <QByteArray>
#include <QStringList>
#include <QList>
#include <QNetworkAccessManager>

namespace OpenAPI {

class OAIUserGroupsApi : public QObject {
    Q_OBJECT

public:
    OAIUserGroupsApi(const int timeOut = 0);
    ~OAIUserGroupsApi();

    void initializeServerConfigs();
    int setDefaultServerValue(int serverIndex,const QString &operation, const QString &variable,const QString &val);
    void setServerIndex(const QString &operation, int serverIndex);
    void setApiKey(const QString &apiKeyName, const QString &apiKey);
    void setBearerToken(const QString &token);
    void setUsername(const QString &username);
    void setPassword(const QString &password);
    void setTimeOut(const int timeOut);
    void setWorkingDirectory(const QString &path);
    void setNetworkAccessManager(QNetworkAccessManager* manager);
    int addServerConfiguration(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables = QMap<QString, OAIServerVariable>());
    void setNewServerForAllOperations(const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void setNewServer(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void addHeaders(const QString &key, const QString &value);
    void enableRequestCompression();
    void enableResponseCompression();
    void abortRequests();
    QString getParamStylePrefix(const QString &style);
    QString getParamStyleSuffix(const QString &style);
    QString getParamStyleDelimiter(const QString &style, const QString &name, bool isExplode);

    /**
    * @param[in]  orgid qint64 [required]
    */
    virtual void orgunitsOrgidUsergroupsGet(const qint64 &orgid);

    /**
    * @param[in]  orgid qint64 [required]
    * @param[in]  groupid qint64 [required]
    */
    virtual void orgunitsOrgidUsergroupsGroupidGet(const qint64 &orgid, const qint64 &groupid);

    /**
    * @param[in]  orgid qint64 [required]
    * @param[in]  groupid qint64 [required]
    */
    virtual void orgunitsOrgidUsergroupsGroupidMembersGet(const qint64 &orgid, const qint64 &groupid);

    /**
    * @param[in]  orgid qint64 [required]
    * @param[in]  groupid qint64 [required]
    * @param[in]  body OAIAddUserGroupMember [required]
    */
    virtual void orgunitsOrgidUsergroupsGroupidMembersPost(const qint64 &orgid, const qint64 &groupid, const OAIAddUserGroupMember &body);

    /**
    * @param[in]  orgid qint64 [required]
    * @param[in]  groupid qint64 [required]
    * @param[in]  uuid QString [required]
    */
    virtual void orgunitsOrgidUsergroupsGroupidMembersUuidDelete(const qint64 &orgid, const qint64 &groupid, const QString &uuid);

    /**
    * @param[in]  orgid qint64 [required]
    * @param[in]  body OAIAddUserGroup [required]
    */
    virtual void orgunitsOrgidUsergroupsPost(const qint64 &orgid, const OAIAddUserGroup &body);


private:
    QMap<QString,int> _serverIndices;
    QMap<QString,QList<OAIServerConfiguration>> _serverConfigs;
    QMap<QString, QString> _apiKeys;
    QString _bearerToken;
    QString _username;
    QString _password;
    int _timeOut;
    QString _workingDirectory;
    QNetworkAccessManager* _manager;
    QMap<QString, QString> _defaultHeaders;
    bool _isResponseCompressionEnabled;
    bool _isRequestCompressionEnabled;
    OAIHttpRequestInput _latestInput;
    OAIHttpRequestWorker *_latestWorker;
    QStringList _latestScope;
    OauthCode _authFlow;
    OauthImplicit _implicitFlow;
    OauthCredentials _credentialFlow;
    OauthPassword _passwordFlow;
    int _OauthMethod = 0;

    void orgunitsOrgidUsergroupsGetCallback(OAIHttpRequestWorker *worker);
    void orgunitsOrgidUsergroupsGroupidGetCallback(OAIHttpRequestWorker *worker);
    void orgunitsOrgidUsergroupsGroupidMembersGetCallback(OAIHttpRequestWorker *worker);
    void orgunitsOrgidUsergroupsGroupidMembersPostCallback(OAIHttpRequestWorker *worker);
    void orgunitsOrgidUsergroupsGroupidMembersUuidDeleteCallback(OAIHttpRequestWorker *worker);
    void orgunitsOrgidUsergroupsPostCallback(OAIHttpRequestWorker *worker);

Q_SIGNALS:

    void orgunitsOrgidUsergroupsGetSignal(QList<OAIUserGroup> summary);
    void orgunitsOrgidUsergroupsGroupidGetSignal(OAIUserGroup summary);
    void orgunitsOrgidUsergroupsGroupidMembersGetSignal(QList<OAIUser> summary);
    void orgunitsOrgidUsergroupsGroupidMembersPostSignal(OAIUserId summary);
    void orgunitsOrgidUsergroupsGroupidMembersUuidDeleteSignal();
    void orgunitsOrgidUsergroupsPostSignal(QList<OAIGroupId> summary);


    void orgunitsOrgidUsergroupsGetSignalFull(OAIHttpRequestWorker *worker, QList<OAIUserGroup> summary);
    void orgunitsOrgidUsergroupsGroupidGetSignalFull(OAIHttpRequestWorker *worker, OAIUserGroup summary);
    void orgunitsOrgidUsergroupsGroupidMembersGetSignalFull(OAIHttpRequestWorker *worker, QList<OAIUser> summary);
    void orgunitsOrgidUsergroupsGroupidMembersPostSignalFull(OAIHttpRequestWorker *worker, OAIUserId summary);
    void orgunitsOrgidUsergroupsGroupidMembersUuidDeleteSignalFull(OAIHttpRequestWorker *worker);
    void orgunitsOrgidUsergroupsPostSignalFull(OAIHttpRequestWorker *worker, QList<OAIGroupId> summary);

    Q_DECL_DEPRECATED_X("Use orgunitsOrgidUsergroupsGetSignalError() instead")
    void orgunitsOrgidUsergroupsGetSignalE(QList<OAIUserGroup> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void orgunitsOrgidUsergroupsGetSignalError(QList<OAIUserGroup> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use orgunitsOrgidUsergroupsGroupidGetSignalError() instead")
    void orgunitsOrgidUsergroupsGroupidGetSignalE(OAIUserGroup summary, QNetworkReply::NetworkError error_type, QString error_str);
    void orgunitsOrgidUsergroupsGroupidGetSignalError(OAIUserGroup summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use orgunitsOrgidUsergroupsGroupidMembersGetSignalError() instead")
    void orgunitsOrgidUsergroupsGroupidMembersGetSignalE(QList<OAIUser> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void orgunitsOrgidUsergroupsGroupidMembersGetSignalError(QList<OAIUser> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use orgunitsOrgidUsergroupsGroupidMembersPostSignalError() instead")
    void orgunitsOrgidUsergroupsGroupidMembersPostSignalE(OAIUserId summary, QNetworkReply::NetworkError error_type, QString error_str);
    void orgunitsOrgidUsergroupsGroupidMembersPostSignalError(OAIUserId summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use orgunitsOrgidUsergroupsGroupidMembersUuidDeleteSignalError() instead")
    void orgunitsOrgidUsergroupsGroupidMembersUuidDeleteSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void orgunitsOrgidUsergroupsGroupidMembersUuidDeleteSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use orgunitsOrgidUsergroupsPostSignalError() instead")
    void orgunitsOrgidUsergroupsPostSignalE(QList<OAIGroupId> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void orgunitsOrgidUsergroupsPostSignalError(QList<OAIGroupId> summary, QNetworkReply::NetworkError error_type, const QString &error_str);

    Q_DECL_DEPRECATED_X("Use orgunitsOrgidUsergroupsGetSignalErrorFull() instead")
    void orgunitsOrgidUsergroupsGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void orgunitsOrgidUsergroupsGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use orgunitsOrgidUsergroupsGroupidGetSignalErrorFull() instead")
    void orgunitsOrgidUsergroupsGroupidGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void orgunitsOrgidUsergroupsGroupidGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use orgunitsOrgidUsergroupsGroupidMembersGetSignalErrorFull() instead")
    void orgunitsOrgidUsergroupsGroupidMembersGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void orgunitsOrgidUsergroupsGroupidMembersGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use orgunitsOrgidUsergroupsGroupidMembersPostSignalErrorFull() instead")
    void orgunitsOrgidUsergroupsGroupidMembersPostSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void orgunitsOrgidUsergroupsGroupidMembersPostSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use orgunitsOrgidUsergroupsGroupidMembersUuidDeleteSignalErrorFull() instead")
    void orgunitsOrgidUsergroupsGroupidMembersUuidDeleteSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void orgunitsOrgidUsergroupsGroupidMembersUuidDeleteSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use orgunitsOrgidUsergroupsPostSignalErrorFull() instead")
    void orgunitsOrgidUsergroupsPostSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void orgunitsOrgidUsergroupsPostSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);

    void abortRequestsSignal();
    void allPendingRequestsCompleted();

public Q_SLOTS:
    void tokenAvailable();
};

} // namespace OpenAPI
#endif
