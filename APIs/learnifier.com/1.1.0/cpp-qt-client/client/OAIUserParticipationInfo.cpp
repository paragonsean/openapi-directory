/**
 * Learnifier
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.1.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIUserParticipationInfo.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIUserParticipationInfo::OAIUserParticipationInfo(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIUserParticipationInfo::OAIUserParticipationInfo() {
    this->initializeModel();
}

OAIUserParticipationInfo::~OAIUserParticipationInfo() {}

void OAIUserParticipationInfo::initializeModel() {

    m_access_link_isSet = false;
    m_access_link_isValid = false;

    m_activated_isSet = false;
    m_activated_isValid = false;

    m_activities_completed_isSet = false;
    m_activities_completed_isValid = false;

    m_activities_total_isSet = false;
    m_activities_total_isValid = false;

    m_error_message_isSet = false;
    m_error_message_isValid = false;

    m_expiration_isSet = false;
    m_expiration_isValid = false;

    m_external_id_isSet = false;
    m_external_id_isValid = false;

    m_first_access_isSet = false;
    m_first_access_isValid = false;

    m_first_activation_isSet = false;
    m_first_activation_isValid = false;

    m_first_mail_isSet = false;
    m_first_mail_isValid = false;

    m_id_isSet = false;
    m_id_isValid = false;

    m_in_error_isSet = false;
    m_in_error_isValid = false;

    m_last_access_isSet = false;
    m_last_access_isValid = false;

    m_last_activation_isSet = false;
    m_last_activation_isValid = false;

    m_last_mail_isSet = false;
    m_last_mail_isValid = false;

    m_project_id_isSet = false;
    m_project_id_isValid = false;

    m_project_name_isSet = false;
    m_project_name_isValid = false;

    m_project_org_id_isSet = false;
    m_project_org_id_isValid = false;

    m_project_status_isSet = false;
    m_project_status_isValid = false;

    m_project_thumbnail_isSet = false;
    m_project_thumbnail_isValid = false;

    m_project_user_title_isSet = false;
    m_project_user_title_isValid = false;
}

void OAIUserParticipationInfo::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIUserParticipationInfo::fromJsonObject(QJsonObject json) {

    m_access_link_isValid = ::OpenAPI::fromJsonValue(m_access_link, json[QString("accessLink")]);
    m_access_link_isSet = !json[QString("accessLink")].isNull() && m_access_link_isValid;

    m_activated_isValid = ::OpenAPI::fromJsonValue(m_activated, json[QString("activated")]);
    m_activated_isSet = !json[QString("activated")].isNull() && m_activated_isValid;

    m_activities_completed_isValid = ::OpenAPI::fromJsonValue(m_activities_completed, json[QString("activitiesCompleted")]);
    m_activities_completed_isSet = !json[QString("activitiesCompleted")].isNull() && m_activities_completed_isValid;

    m_activities_total_isValid = ::OpenAPI::fromJsonValue(m_activities_total, json[QString("activitiesTotal")]);
    m_activities_total_isSet = !json[QString("activitiesTotal")].isNull() && m_activities_total_isValid;

    m_error_message_isValid = ::OpenAPI::fromJsonValue(m_error_message, json[QString("errorMessage")]);
    m_error_message_isSet = !json[QString("errorMessage")].isNull() && m_error_message_isValid;

    m_expiration_isValid = ::OpenAPI::fromJsonValue(m_expiration, json[QString("expiration")]);
    m_expiration_isSet = !json[QString("expiration")].isNull() && m_expiration_isValid;

    m_external_id_isValid = ::OpenAPI::fromJsonValue(m_external_id, json[QString("externalId")]);
    m_external_id_isSet = !json[QString("externalId")].isNull() && m_external_id_isValid;

    m_first_access_isValid = ::OpenAPI::fromJsonValue(m_first_access, json[QString("firstAccess")]);
    m_first_access_isSet = !json[QString("firstAccess")].isNull() && m_first_access_isValid;

    m_first_activation_isValid = ::OpenAPI::fromJsonValue(m_first_activation, json[QString("firstActivation")]);
    m_first_activation_isSet = !json[QString("firstActivation")].isNull() && m_first_activation_isValid;

    m_first_mail_isValid = ::OpenAPI::fromJsonValue(m_first_mail, json[QString("firstMail")]);
    m_first_mail_isSet = !json[QString("firstMail")].isNull() && m_first_mail_isValid;

    m_id_isValid = ::OpenAPI::fromJsonValue(m_id, json[QString("id")]);
    m_id_isSet = !json[QString("id")].isNull() && m_id_isValid;

    m_in_error_isValid = ::OpenAPI::fromJsonValue(m_in_error, json[QString("inError")]);
    m_in_error_isSet = !json[QString("inError")].isNull() && m_in_error_isValid;

    m_last_access_isValid = ::OpenAPI::fromJsonValue(m_last_access, json[QString("lastAccess")]);
    m_last_access_isSet = !json[QString("lastAccess")].isNull() && m_last_access_isValid;

    m_last_activation_isValid = ::OpenAPI::fromJsonValue(m_last_activation, json[QString("lastActivation")]);
    m_last_activation_isSet = !json[QString("lastActivation")].isNull() && m_last_activation_isValid;

    m_last_mail_isValid = ::OpenAPI::fromJsonValue(m_last_mail, json[QString("lastMail")]);
    m_last_mail_isSet = !json[QString("lastMail")].isNull() && m_last_mail_isValid;

    m_project_id_isValid = ::OpenAPI::fromJsonValue(m_project_id, json[QString("projectId")]);
    m_project_id_isSet = !json[QString("projectId")].isNull() && m_project_id_isValid;

    m_project_name_isValid = ::OpenAPI::fromJsonValue(m_project_name, json[QString("projectName")]);
    m_project_name_isSet = !json[QString("projectName")].isNull() && m_project_name_isValid;

    m_project_org_id_isValid = ::OpenAPI::fromJsonValue(m_project_org_id, json[QString("projectOrgId")]);
    m_project_org_id_isSet = !json[QString("projectOrgId")].isNull() && m_project_org_id_isValid;

    m_project_status_isValid = ::OpenAPI::fromJsonValue(m_project_status, json[QString("projectStatus")]);
    m_project_status_isSet = !json[QString("projectStatus")].isNull() && m_project_status_isValid;

    m_project_thumbnail_isValid = ::OpenAPI::fromJsonValue(m_project_thumbnail, json[QString("projectThumbnail")]);
    m_project_thumbnail_isSet = !json[QString("projectThumbnail")].isNull() && m_project_thumbnail_isValid;

    m_project_user_title_isValid = ::OpenAPI::fromJsonValue(m_project_user_title, json[QString("projectUserTitle")]);
    m_project_user_title_isSet = !json[QString("projectUserTitle")].isNull() && m_project_user_title_isValid;
}

QString OAIUserParticipationInfo::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIUserParticipationInfo::asJsonObject() const {
    QJsonObject obj;
    if (m_access_link_isSet) {
        obj.insert(QString("accessLink"), ::OpenAPI::toJsonValue(m_access_link));
    }
    if (m_activated_isSet) {
        obj.insert(QString("activated"), ::OpenAPI::toJsonValue(m_activated));
    }
    if (m_activities_completed_isSet) {
        obj.insert(QString("activitiesCompleted"), ::OpenAPI::toJsonValue(m_activities_completed));
    }
    if (m_activities_total_isSet) {
        obj.insert(QString("activitiesTotal"), ::OpenAPI::toJsonValue(m_activities_total));
    }
    if (m_error_message_isSet) {
        obj.insert(QString("errorMessage"), ::OpenAPI::toJsonValue(m_error_message));
    }
    if (m_expiration_isSet) {
        obj.insert(QString("expiration"), ::OpenAPI::toJsonValue(m_expiration));
    }
    if (m_external_id_isSet) {
        obj.insert(QString("externalId"), ::OpenAPI::toJsonValue(m_external_id));
    }
    if (m_first_access_isSet) {
        obj.insert(QString("firstAccess"), ::OpenAPI::toJsonValue(m_first_access));
    }
    if (m_first_activation_isSet) {
        obj.insert(QString("firstActivation"), ::OpenAPI::toJsonValue(m_first_activation));
    }
    if (m_first_mail_isSet) {
        obj.insert(QString("firstMail"), ::OpenAPI::toJsonValue(m_first_mail));
    }
    if (m_id_isSet) {
        obj.insert(QString("id"), ::OpenAPI::toJsonValue(m_id));
    }
    if (m_in_error_isSet) {
        obj.insert(QString("inError"), ::OpenAPI::toJsonValue(m_in_error));
    }
    if (m_last_access_isSet) {
        obj.insert(QString("lastAccess"), ::OpenAPI::toJsonValue(m_last_access));
    }
    if (m_last_activation_isSet) {
        obj.insert(QString("lastActivation"), ::OpenAPI::toJsonValue(m_last_activation));
    }
    if (m_last_mail_isSet) {
        obj.insert(QString("lastMail"), ::OpenAPI::toJsonValue(m_last_mail));
    }
    if (m_project_id_isSet) {
        obj.insert(QString("projectId"), ::OpenAPI::toJsonValue(m_project_id));
    }
    if (m_project_name_isSet) {
        obj.insert(QString("projectName"), ::OpenAPI::toJsonValue(m_project_name));
    }
    if (m_project_org_id_isSet) {
        obj.insert(QString("projectOrgId"), ::OpenAPI::toJsonValue(m_project_org_id));
    }
    if (m_project_status_isSet) {
        obj.insert(QString("projectStatus"), ::OpenAPI::toJsonValue(m_project_status));
    }
    if (m_project_thumbnail_isSet) {
        obj.insert(QString("projectThumbnail"), ::OpenAPI::toJsonValue(m_project_thumbnail));
    }
    if (m_project_user_title_isSet) {
        obj.insert(QString("projectUserTitle"), ::OpenAPI::toJsonValue(m_project_user_title));
    }
    return obj;
}

QString OAIUserParticipationInfo::getAccessLink() const {
    return m_access_link;
}
void OAIUserParticipationInfo::setAccessLink(const QString &access_link) {
    m_access_link = access_link;
    m_access_link_isSet = true;
}

bool OAIUserParticipationInfo::is_access_link_Set() const{
    return m_access_link_isSet;
}

bool OAIUserParticipationInfo::is_access_link_Valid() const{
    return m_access_link_isValid;
}

bool OAIUserParticipationInfo::isActivated() const {
    return m_activated;
}
void OAIUserParticipationInfo::setActivated(const bool &activated) {
    m_activated = activated;
    m_activated_isSet = true;
}

bool OAIUserParticipationInfo::is_activated_Set() const{
    return m_activated_isSet;
}

bool OAIUserParticipationInfo::is_activated_Valid() const{
    return m_activated_isValid;
}

double OAIUserParticipationInfo::getActivitiesCompleted() const {
    return m_activities_completed;
}
void OAIUserParticipationInfo::setActivitiesCompleted(const double &activities_completed) {
    m_activities_completed = activities_completed;
    m_activities_completed_isSet = true;
}

bool OAIUserParticipationInfo::is_activities_completed_Set() const{
    return m_activities_completed_isSet;
}

bool OAIUserParticipationInfo::is_activities_completed_Valid() const{
    return m_activities_completed_isValid;
}

double OAIUserParticipationInfo::getActivitiesTotal() const {
    return m_activities_total;
}
void OAIUserParticipationInfo::setActivitiesTotal(const double &activities_total) {
    m_activities_total = activities_total;
    m_activities_total_isSet = true;
}

bool OAIUserParticipationInfo::is_activities_total_Set() const{
    return m_activities_total_isSet;
}

bool OAIUserParticipationInfo::is_activities_total_Valid() const{
    return m_activities_total_isValid;
}

QString OAIUserParticipationInfo::getErrorMessage() const {
    return m_error_message;
}
void OAIUserParticipationInfo::setErrorMessage(const QString &error_message) {
    m_error_message = error_message;
    m_error_message_isSet = true;
}

bool OAIUserParticipationInfo::is_error_message_Set() const{
    return m_error_message_isSet;
}

bool OAIUserParticipationInfo::is_error_message_Valid() const{
    return m_error_message_isValid;
}

QDateTime OAIUserParticipationInfo::getExpiration() const {
    return m_expiration;
}
void OAIUserParticipationInfo::setExpiration(const QDateTime &expiration) {
    m_expiration = expiration;
    m_expiration_isSet = true;
}

bool OAIUserParticipationInfo::is_expiration_Set() const{
    return m_expiration_isSet;
}

bool OAIUserParticipationInfo::is_expiration_Valid() const{
    return m_expiration_isValid;
}

QString OAIUserParticipationInfo::getExternalId() const {
    return m_external_id;
}
void OAIUserParticipationInfo::setExternalId(const QString &external_id) {
    m_external_id = external_id;
    m_external_id_isSet = true;
}

bool OAIUserParticipationInfo::is_external_id_Set() const{
    return m_external_id_isSet;
}

bool OAIUserParticipationInfo::is_external_id_Valid() const{
    return m_external_id_isValid;
}

QDateTime OAIUserParticipationInfo::getFirstAccess() const {
    return m_first_access;
}
void OAIUserParticipationInfo::setFirstAccess(const QDateTime &first_access) {
    m_first_access = first_access;
    m_first_access_isSet = true;
}

bool OAIUserParticipationInfo::is_first_access_Set() const{
    return m_first_access_isSet;
}

bool OAIUserParticipationInfo::is_first_access_Valid() const{
    return m_first_access_isValid;
}

QDateTime OAIUserParticipationInfo::getFirstActivation() const {
    return m_first_activation;
}
void OAIUserParticipationInfo::setFirstActivation(const QDateTime &first_activation) {
    m_first_activation = first_activation;
    m_first_activation_isSet = true;
}

bool OAIUserParticipationInfo::is_first_activation_Set() const{
    return m_first_activation_isSet;
}

bool OAIUserParticipationInfo::is_first_activation_Valid() const{
    return m_first_activation_isValid;
}

QDateTime OAIUserParticipationInfo::getFirstMail() const {
    return m_first_mail;
}
void OAIUserParticipationInfo::setFirstMail(const QDateTime &first_mail) {
    m_first_mail = first_mail;
    m_first_mail_isSet = true;
}

bool OAIUserParticipationInfo::is_first_mail_Set() const{
    return m_first_mail_isSet;
}

bool OAIUserParticipationInfo::is_first_mail_Valid() const{
    return m_first_mail_isValid;
}

qint64 OAIUserParticipationInfo::getId() const {
    return m_id;
}
void OAIUserParticipationInfo::setId(const qint64 &id) {
    m_id = id;
    m_id_isSet = true;
}

bool OAIUserParticipationInfo::is_id_Set() const{
    return m_id_isSet;
}

bool OAIUserParticipationInfo::is_id_Valid() const{
    return m_id_isValid;
}

bool OAIUserParticipationInfo::isInError() const {
    return m_in_error;
}
void OAIUserParticipationInfo::setInError(const bool &in_error) {
    m_in_error = in_error;
    m_in_error_isSet = true;
}

bool OAIUserParticipationInfo::is_in_error_Set() const{
    return m_in_error_isSet;
}

bool OAIUserParticipationInfo::is_in_error_Valid() const{
    return m_in_error_isValid;
}

QDateTime OAIUserParticipationInfo::getLastAccess() const {
    return m_last_access;
}
void OAIUserParticipationInfo::setLastAccess(const QDateTime &last_access) {
    m_last_access = last_access;
    m_last_access_isSet = true;
}

bool OAIUserParticipationInfo::is_last_access_Set() const{
    return m_last_access_isSet;
}

bool OAIUserParticipationInfo::is_last_access_Valid() const{
    return m_last_access_isValid;
}

QDateTime OAIUserParticipationInfo::getLastActivation() const {
    return m_last_activation;
}
void OAIUserParticipationInfo::setLastActivation(const QDateTime &last_activation) {
    m_last_activation = last_activation;
    m_last_activation_isSet = true;
}

bool OAIUserParticipationInfo::is_last_activation_Set() const{
    return m_last_activation_isSet;
}

bool OAIUserParticipationInfo::is_last_activation_Valid() const{
    return m_last_activation_isValid;
}

QDateTime OAIUserParticipationInfo::getLastMail() const {
    return m_last_mail;
}
void OAIUserParticipationInfo::setLastMail(const QDateTime &last_mail) {
    m_last_mail = last_mail;
    m_last_mail_isSet = true;
}

bool OAIUserParticipationInfo::is_last_mail_Set() const{
    return m_last_mail_isSet;
}

bool OAIUserParticipationInfo::is_last_mail_Valid() const{
    return m_last_mail_isValid;
}

qint64 OAIUserParticipationInfo::getProjectId() const {
    return m_project_id;
}
void OAIUserParticipationInfo::setProjectId(const qint64 &project_id) {
    m_project_id = project_id;
    m_project_id_isSet = true;
}

bool OAIUserParticipationInfo::is_project_id_Set() const{
    return m_project_id_isSet;
}

bool OAIUserParticipationInfo::is_project_id_Valid() const{
    return m_project_id_isValid;
}

QString OAIUserParticipationInfo::getProjectName() const {
    return m_project_name;
}
void OAIUserParticipationInfo::setProjectName(const QString &project_name) {
    m_project_name = project_name;
    m_project_name_isSet = true;
}

bool OAIUserParticipationInfo::is_project_name_Set() const{
    return m_project_name_isSet;
}

bool OAIUserParticipationInfo::is_project_name_Valid() const{
    return m_project_name_isValid;
}

qint64 OAIUserParticipationInfo::getProjectOrgId() const {
    return m_project_org_id;
}
void OAIUserParticipationInfo::setProjectOrgId(const qint64 &project_org_id) {
    m_project_org_id = project_org_id;
    m_project_org_id_isSet = true;
}

bool OAIUserParticipationInfo::is_project_org_id_Set() const{
    return m_project_org_id_isSet;
}

bool OAIUserParticipationInfo::is_project_org_id_Valid() const{
    return m_project_org_id_isValid;
}

QString OAIUserParticipationInfo::getProjectStatus() const {
    return m_project_status;
}
void OAIUserParticipationInfo::setProjectStatus(const QString &project_status) {
    m_project_status = project_status;
    m_project_status_isSet = true;
}

bool OAIUserParticipationInfo::is_project_status_Set() const{
    return m_project_status_isSet;
}

bool OAIUserParticipationInfo::is_project_status_Valid() const{
    return m_project_status_isValid;
}

QString OAIUserParticipationInfo::getProjectThumbnail() const {
    return m_project_thumbnail;
}
void OAIUserParticipationInfo::setProjectThumbnail(const QString &project_thumbnail) {
    m_project_thumbnail = project_thumbnail;
    m_project_thumbnail_isSet = true;
}

bool OAIUserParticipationInfo::is_project_thumbnail_Set() const{
    return m_project_thumbnail_isSet;
}

bool OAIUserParticipationInfo::is_project_thumbnail_Valid() const{
    return m_project_thumbnail_isValid;
}

QString OAIUserParticipationInfo::getProjectUserTitle() const {
    return m_project_user_title;
}
void OAIUserParticipationInfo::setProjectUserTitle(const QString &project_user_title) {
    m_project_user_title = project_user_title;
    m_project_user_title_isSet = true;
}

bool OAIUserParticipationInfo::is_project_user_title_Set() const{
    return m_project_user_title_isSet;
}

bool OAIUserParticipationInfo::is_project_user_title_Valid() const{
    return m_project_user_title_isValid;
}

bool OAIUserParticipationInfo::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_access_link_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_activated_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_activities_completed_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_activities_total_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_error_message_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_expiration_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_external_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_first_access_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_first_activation_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_first_mail_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_in_error_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_last_access_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_last_activation_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_last_mail_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_project_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_project_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_project_org_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_project_status_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_project_thumbnail_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_project_user_title_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIUserParticipationInfo::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
