/**
 * Learnifier
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.1.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIGlobalUserGroup.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIGlobalUserGroup::OAIGlobalUserGroup(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIGlobalUserGroup::OAIGlobalUserGroup() {
    this->initializeModel();
}

OAIGlobalUserGroup::~OAIGlobalUserGroup() {}

void OAIGlobalUserGroup::initializeModel() {

    m_created_isSet = false;
    m_created_isValid = false;

    m_created_by_isSet = false;
    m_created_by_isValid = false;

    m_id_isSet = false;
    m_id_isValid = false;

    m_name_isSet = false;
    m_name_isValid = false;

    m_parent_isSet = false;
    m_parent_isValid = false;

    m_softi_id_isSet = false;
    m_softi_id_isValid = false;

    m_updated_isSet = false;
    m_updated_isValid = false;

    m_updated_by_isSet = false;
    m_updated_by_isValid = false;
}

void OAIGlobalUserGroup::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIGlobalUserGroup::fromJsonObject(QJsonObject json) {

    m_created_isValid = ::OpenAPI::fromJsonValue(m_created, json[QString("created")]);
    m_created_isSet = !json[QString("created")].isNull() && m_created_isValid;

    m_created_by_isValid = ::OpenAPI::fromJsonValue(m_created_by, json[QString("createdBy")]);
    m_created_by_isSet = !json[QString("createdBy")].isNull() && m_created_by_isValid;

    m_id_isValid = ::OpenAPI::fromJsonValue(m_id, json[QString("id")]);
    m_id_isSet = !json[QString("id")].isNull() && m_id_isValid;

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("name")]);
    m_name_isSet = !json[QString("name")].isNull() && m_name_isValid;

    m_parent_isValid = ::OpenAPI::fromJsonValue(m_parent, json[QString("parent")]);
    m_parent_isSet = !json[QString("parent")].isNull() && m_parent_isValid;

    m_softi_id_isValid = ::OpenAPI::fromJsonValue(m_softi_id, json[QString("softiId")]);
    m_softi_id_isSet = !json[QString("softiId")].isNull() && m_softi_id_isValid;

    m_updated_isValid = ::OpenAPI::fromJsonValue(m_updated, json[QString("updated")]);
    m_updated_isSet = !json[QString("updated")].isNull() && m_updated_isValid;

    m_updated_by_isValid = ::OpenAPI::fromJsonValue(m_updated_by, json[QString("updatedBy")]);
    m_updated_by_isSet = !json[QString("updatedBy")].isNull() && m_updated_by_isValid;
}

QString OAIGlobalUserGroup::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIGlobalUserGroup::asJsonObject() const {
    QJsonObject obj;
    if (m_created_isSet) {
        obj.insert(QString("created"), ::OpenAPI::toJsonValue(m_created));
    }
    if (m_created_by_isSet) {
        obj.insert(QString("createdBy"), ::OpenAPI::toJsonValue(m_created_by));
    }
    if (m_id_isSet) {
        obj.insert(QString("id"), ::OpenAPI::toJsonValue(m_id));
    }
    if (m_name_isSet) {
        obj.insert(QString("name"), ::OpenAPI::toJsonValue(m_name));
    }
    if (m_parent_isSet) {
        obj.insert(QString("parent"), ::OpenAPI::toJsonValue(m_parent));
    }
    if (m_softi_id_isSet) {
        obj.insert(QString("softiId"), ::OpenAPI::toJsonValue(m_softi_id));
    }
    if (m_updated_isSet) {
        obj.insert(QString("updated"), ::OpenAPI::toJsonValue(m_updated));
    }
    if (m_updated_by_isSet) {
        obj.insert(QString("updatedBy"), ::OpenAPI::toJsonValue(m_updated_by));
    }
    return obj;
}

QDateTime OAIGlobalUserGroup::getCreated() const {
    return m_created;
}
void OAIGlobalUserGroup::setCreated(const QDateTime &created) {
    m_created = created;
    m_created_isSet = true;
}

bool OAIGlobalUserGroup::is_created_Set() const{
    return m_created_isSet;
}

bool OAIGlobalUserGroup::is_created_Valid() const{
    return m_created_isValid;
}

QString OAIGlobalUserGroup::getCreatedBy() const {
    return m_created_by;
}
void OAIGlobalUserGroup::setCreatedBy(const QString &created_by) {
    m_created_by = created_by;
    m_created_by_isSet = true;
}

bool OAIGlobalUserGroup::is_created_by_Set() const{
    return m_created_by_isSet;
}

bool OAIGlobalUserGroup::is_created_by_Valid() const{
    return m_created_by_isValid;
}

qint64 OAIGlobalUserGroup::getId() const {
    return m_id;
}
void OAIGlobalUserGroup::setId(const qint64 &id) {
    m_id = id;
    m_id_isSet = true;
}

bool OAIGlobalUserGroup::is_id_Set() const{
    return m_id_isSet;
}

bool OAIGlobalUserGroup::is_id_Valid() const{
    return m_id_isValid;
}

QString OAIGlobalUserGroup::getName() const {
    return m_name;
}
void OAIGlobalUserGroup::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAIGlobalUserGroup::is_name_Set() const{
    return m_name_isSet;
}

bool OAIGlobalUserGroup::is_name_Valid() const{
    return m_name_isValid;
}

qint64 OAIGlobalUserGroup::getParent() const {
    return m_parent;
}
void OAIGlobalUserGroup::setParent(const qint64 &parent) {
    m_parent = parent;
    m_parent_isSet = true;
}

bool OAIGlobalUserGroup::is_parent_Set() const{
    return m_parent_isSet;
}

bool OAIGlobalUserGroup::is_parent_Valid() const{
    return m_parent_isValid;
}

QString OAIGlobalUserGroup::getSoftiId() const {
    return m_softi_id;
}
void OAIGlobalUserGroup::setSoftiId(const QString &softi_id) {
    m_softi_id = softi_id;
    m_softi_id_isSet = true;
}

bool OAIGlobalUserGroup::is_softi_id_Set() const{
    return m_softi_id_isSet;
}

bool OAIGlobalUserGroup::is_softi_id_Valid() const{
    return m_softi_id_isValid;
}

QDateTime OAIGlobalUserGroup::getUpdated() const {
    return m_updated;
}
void OAIGlobalUserGroup::setUpdated(const QDateTime &updated) {
    m_updated = updated;
    m_updated_isSet = true;
}

bool OAIGlobalUserGroup::is_updated_Set() const{
    return m_updated_isSet;
}

bool OAIGlobalUserGroup::is_updated_Valid() const{
    return m_updated_isValid;
}

QString OAIGlobalUserGroup::getUpdatedBy() const {
    return m_updated_by;
}
void OAIGlobalUserGroup::setUpdatedBy(const QString &updated_by) {
    m_updated_by = updated_by;
    m_updated_by_isSet = true;
}

bool OAIGlobalUserGroup::is_updated_by_Set() const{
    return m_updated_by_isSet;
}

bool OAIGlobalUserGroup::is_updated_by_Valid() const{
    return m_updated_by_isValid;
}

bool OAIGlobalUserGroup::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_created_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_created_by_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_parent_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_softi_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_updated_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_updated_by_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIGlobalUserGroup::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_created_isValid && m_id_isValid && true;
}

} // namespace OpenAPI
