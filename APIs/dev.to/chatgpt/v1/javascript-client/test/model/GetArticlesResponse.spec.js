/**
 * DEV Community
 * A plugin that recommends resources like articles or users to a user using ChatGP.
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', process.cwd()+'/src/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require(process.cwd()+'/src/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.DevCommunity);
  }
}(this, function(expect, DevCommunity) {
  'use strict';

  var instance;

  beforeEach(function() {
    instance = new DevCommunity.GetArticlesResponse();
  });

  var getProperty = function(object, getter, property) {
    // Use getter method if present; otherwise, get the property directly.
    if (typeof object[getter] === 'function')
      return object[getter]();
    else
      return object[property];
  }

  var setProperty = function(object, setter, property, value) {
    // Use setter method if present; otherwise, set the property directly.
    if (typeof object[setter] === 'function')
      object[setter](value);
    else
      object[property] = value;
  }

  describe('GetArticlesResponse', function() {
    it('should create an instance of GetArticlesResponse', function() {
      // uncomment below and update the code to test GetArticlesResponse
      //var instance = new DevCommunity.GetArticlesResponse();
      //expect(instance).to.be.a(DevCommunity.GetArticlesResponse);
    });

    it('should have the property bodyMarkdown (base name: "body_markdown")', function() {
      // uncomment below and update the code to test the property bodyMarkdown
      //var instance = new DevCommunity.GetArticlesResponse();
      //expect(instance).to.be();
    });

    it('should have the property canonicalUrl (base name: "canonical_url")', function() {
      // uncomment below and update the code to test the property canonicalUrl
      //var instance = new DevCommunity.GetArticlesResponse();
      //expect(instance).to.be();
    });

    it('should have the property coverImage (base name: "cover_image")', function() {
      // uncomment below and update the code to test the property coverImage
      //var instance = new DevCommunity.GetArticlesResponse();
      //expect(instance).to.be();
    });

    it('should have the property createdAt (base name: "created_at")', function() {
      // uncomment below and update the code to test the property createdAt
      //var instance = new DevCommunity.GetArticlesResponse();
      //expect(instance).to.be();
    });

    it('should have the property crosspostedAt (base name: "crossposted_at")', function() {
      // uncomment below and update the code to test the property crosspostedAt
      //var instance = new DevCommunity.GetArticlesResponse();
      //expect(instance).to.be();
    });

    it('should have the property description (base name: "description")', function() {
      // uncomment below and update the code to test the property description
      //var instance = new DevCommunity.GetArticlesResponse();
      //expect(instance).to.be();
    });

    it('should have the property editedAt (base name: "edited_at")', function() {
      // uncomment below and update the code to test the property editedAt
      //var instance = new DevCommunity.GetArticlesResponse();
      //expect(instance).to.be();
    });

    it('should have the property id (base name: "id")', function() {
      // uncomment below and update the code to test the property id
      //var instance = new DevCommunity.GetArticlesResponse();
      //expect(instance).to.be();
    });

    it('should have the property lastCommentAt (base name: "last_comment_at")', function() {
      // uncomment below and update the code to test the property lastCommentAt
      //var instance = new DevCommunity.GetArticlesResponse();
      //expect(instance).to.be();
    });

    it('should have the property organization (base name: "organization")', function() {
      // uncomment below and update the code to test the property organization
      //var instance = new DevCommunity.GetArticlesResponse();
      //expect(instance).to.be();
    });

    it('should have the property path (base name: "path")', function() {
      // uncomment below and update the code to test the property path
      //var instance = new DevCommunity.GetArticlesResponse();
      //expect(instance).to.be();
    });

    it('should have the property positiveReactionsCount (base name: "positive_reactions_count")', function() {
      // uncomment below and update the code to test the property positiveReactionsCount
      //var instance = new DevCommunity.GetArticlesResponse();
      //expect(instance).to.be();
    });

    it('should have the property publicReactionsCount (base name: "public_reactions_count")', function() {
      // uncomment below and update the code to test the property publicReactionsCount
      //var instance = new DevCommunity.GetArticlesResponse();
      //expect(instance).to.be();
    });

    it('should have the property publishedAt (base name: "published_at")', function() {
      // uncomment below and update the code to test the property publishedAt
      //var instance = new DevCommunity.GetArticlesResponse();
      //expect(instance).to.be();
    });

    it('should have the property publishedTimestamp (base name: "published_timestamp")', function() {
      // uncomment below and update the code to test the property publishedTimestamp
      //var instance = new DevCommunity.GetArticlesResponse();
      //expect(instance).to.be();
    });

    it('should have the property readablePublishDate (base name: "readable_publish_date")', function() {
      // uncomment below and update the code to test the property readablePublishDate
      //var instance = new DevCommunity.GetArticlesResponse();
      //expect(instance).to.be();
    });

    it('should have the property readingTimeMinutes (base name: "reading_time_minutes")', function() {
      // uncomment below and update the code to test the property readingTimeMinutes
      //var instance = new DevCommunity.GetArticlesResponse();
      //expect(instance).to.be();
    });

    it('should have the property slug (base name: "slug")', function() {
      // uncomment below and update the code to test the property slug
      //var instance = new DevCommunity.GetArticlesResponse();
      //expect(instance).to.be();
    });

    it('should have the property socialImage (base name: "social_image")', function() {
      // uncomment below and update the code to test the property socialImage
      //var instance = new DevCommunity.GetArticlesResponse();
      //expect(instance).to.be();
    });

    it('should have the property tagList (base name: "tag_list")', function() {
      // uncomment below and update the code to test the property tagList
      //var instance = new DevCommunity.GetArticlesResponse();
      //expect(instance).to.be();
    });

    it('should have the property tags (base name: "tags")', function() {
      // uncomment below and update the code to test the property tags
      //var instance = new DevCommunity.GetArticlesResponse();
      //expect(instance).to.be();
    });

    it('should have the property title (base name: "title")', function() {
      // uncomment below and update the code to test the property title
      //var instance = new DevCommunity.GetArticlesResponse();
      //expect(instance).to.be();
    });

    it('should have the property typeOf (base name: "type_of")', function() {
      // uncomment below and update the code to test the property typeOf
      //var instance = new DevCommunity.GetArticlesResponse();
      //expect(instance).to.be();
    });

    it('should have the property url (base name: "url")', function() {
      // uncomment below and update the code to test the property url
      //var instance = new DevCommunity.GetArticlesResponse();
      //expect(instance).to.be();
    });

    it('should have the property user (base name: "user")', function() {
      // uncomment below and update the code to test the property user
      //var instance = new DevCommunity.GetArticlesResponse();
      //expect(instance).to.be();
    });

  });

}));
