# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.shared_organization import SharedOrganization
from openapi_server.models.shared_user import SharedUser
from openapi_server import util


class GetArticlesResponse(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, body_markdown: str=None, canonical_url: str=None, cover_image: str=None, created_at: datetime=None, crossposted_at: datetime=None, description: str=None, edited_at: datetime=None, id: int=None, last_comment_at: datetime=None, organization: SharedOrganization=None, path: str=None, positive_reactions_count: int=None, public_reactions_count: int=None, published_at: datetime=None, published_timestamp: datetime=None, readable_publish_date: str=None, reading_time_minutes: int=None, slug: str=None, social_image: str=None, tag_list: List[str]=None, tags: str=None, title: str=None, type_of: str=None, url: str=None, user: SharedUser=None):
        """GetArticlesResponse - a model defined in OpenAPI

        :param body_markdown: The body_markdown of this GetArticlesResponse.
        :param canonical_url: The canonical_url of this GetArticlesResponse.
        :param cover_image: The cover_image of this GetArticlesResponse.
        :param created_at: The created_at of this GetArticlesResponse.
        :param crossposted_at: The crossposted_at of this GetArticlesResponse.
        :param description: The description of this GetArticlesResponse.
        :param edited_at: The edited_at of this GetArticlesResponse.
        :param id: The id of this GetArticlesResponse.
        :param last_comment_at: The last_comment_at of this GetArticlesResponse.
        :param organization: The organization of this GetArticlesResponse.
        :param path: The path of this GetArticlesResponse.
        :param positive_reactions_count: The positive_reactions_count of this GetArticlesResponse.
        :param public_reactions_count: The public_reactions_count of this GetArticlesResponse.
        :param published_at: The published_at of this GetArticlesResponse.
        :param published_timestamp: The published_timestamp of this GetArticlesResponse.
        :param readable_publish_date: The readable_publish_date of this GetArticlesResponse.
        :param reading_time_minutes: The reading_time_minutes of this GetArticlesResponse.
        :param slug: The slug of this GetArticlesResponse.
        :param social_image: The social_image of this GetArticlesResponse.
        :param tag_list: The tag_list of this GetArticlesResponse.
        :param tags: The tags of this GetArticlesResponse.
        :param title: The title of this GetArticlesResponse.
        :param type_of: The type_of of this GetArticlesResponse.
        :param url: The url of this GetArticlesResponse.
        :param user: The user of this GetArticlesResponse.
        """
        self.openapi_types = {
            'body_markdown': str,
            'canonical_url': str,
            'cover_image': str,
            'created_at': datetime,
            'crossposted_at': datetime,
            'description': str,
            'edited_at': datetime,
            'id': int,
            'last_comment_at': datetime,
            'organization': SharedOrganization,
            'path': str,
            'positive_reactions_count': int,
            'public_reactions_count': int,
            'published_at': datetime,
            'published_timestamp': datetime,
            'readable_publish_date': str,
            'reading_time_minutes': int,
            'slug': str,
            'social_image': str,
            'tag_list': List[str],
            'tags': str,
            'title': str,
            'type_of': str,
            'url': str,
            'user': SharedUser
        }

        self.attribute_map = {
            'body_markdown': 'body_markdown',
            'canonical_url': 'canonical_url',
            'cover_image': 'cover_image',
            'created_at': 'created_at',
            'crossposted_at': 'crossposted_at',
            'description': 'description',
            'edited_at': 'edited_at',
            'id': 'id',
            'last_comment_at': 'last_comment_at',
            'organization': 'organization',
            'path': 'path',
            'positive_reactions_count': 'positive_reactions_count',
            'public_reactions_count': 'public_reactions_count',
            'published_at': 'published_at',
            'published_timestamp': 'published_timestamp',
            'readable_publish_date': 'readable_publish_date',
            'reading_time_minutes': 'reading_time_minutes',
            'slug': 'slug',
            'social_image': 'social_image',
            'tag_list': 'tag_list',
            'tags': 'tags',
            'title': 'title',
            'type_of': 'type_of',
            'url': 'url',
            'user': 'user'
        }

        self._body_markdown = body_markdown
        self._canonical_url = canonical_url
        self._cover_image = cover_image
        self._created_at = created_at
        self._crossposted_at = crossposted_at
        self._description = description
        self._edited_at = edited_at
        self._id = id
        self._last_comment_at = last_comment_at
        self._organization = organization
        self._path = path
        self._positive_reactions_count = positive_reactions_count
        self._public_reactions_count = public_reactions_count
        self._published_at = published_at
        self._published_timestamp = published_timestamp
        self._readable_publish_date = readable_publish_date
        self._reading_time_minutes = reading_time_minutes
        self._slug = slug
        self._social_image = social_image
        self._tag_list = tag_list
        self._tags = tags
        self._title = title
        self._type_of = type_of
        self._url = url
        self._user = user

    @classmethod
    def from_dict(cls, dikt: dict) -> 'GetArticlesResponse':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The getArticlesResponse of this GetArticlesResponse.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def body_markdown(self):
        """Gets the body_markdown of this GetArticlesResponse.

        The body of the article

        :return: The body_markdown of this GetArticlesResponse.
        :rtype: str
        """
        return self._body_markdown

    @body_markdown.setter
    def body_markdown(self, body_markdown):
        """Sets the body_markdown of this GetArticlesResponse.

        The body of the article

        :param body_markdown: The body_markdown of this GetArticlesResponse.
        :type body_markdown: str
        """

        self._body_markdown = body_markdown

    @property
    def canonical_url(self):
        """Gets the canonical_url of this GetArticlesResponse.


        :return: The canonical_url of this GetArticlesResponse.
        :rtype: str
        """
        return self._canonical_url

    @canonical_url.setter
    def canonical_url(self, canonical_url):
        """Sets the canonical_url of this GetArticlesResponse.


        :param canonical_url: The canonical_url of this GetArticlesResponse.
        :type canonical_url: str
        """
        if canonical_url is None:
            raise ValueError("Invalid value for `canonical_url`, must not be `None`")

        self._canonical_url = canonical_url

    @property
    def cover_image(self):
        """Gets the cover_image of this GetArticlesResponse.


        :return: The cover_image of this GetArticlesResponse.
        :rtype: str
        """
        return self._cover_image

    @cover_image.setter
    def cover_image(self, cover_image):
        """Sets the cover_image of this GetArticlesResponse.


        :param cover_image: The cover_image of this GetArticlesResponse.
        :type cover_image: str
        """
        if cover_image is None:
            raise ValueError("Invalid value for `cover_image`, must not be `None`")

        self._cover_image = cover_image

    @property
    def created_at(self):
        """Gets the created_at of this GetArticlesResponse.


        :return: The created_at of this GetArticlesResponse.
        :rtype: datetime
        """
        return self._created_at

    @created_at.setter
    def created_at(self, created_at):
        """Sets the created_at of this GetArticlesResponse.


        :param created_at: The created_at of this GetArticlesResponse.
        :type created_at: datetime
        """
        if created_at is None:
            raise ValueError("Invalid value for `created_at`, must not be `None`")

        self._created_at = created_at

    @property
    def crossposted_at(self):
        """Gets the crossposted_at of this GetArticlesResponse.


        :return: The crossposted_at of this GetArticlesResponse.
        :rtype: datetime
        """
        return self._crossposted_at

    @crossposted_at.setter
    def crossposted_at(self, crossposted_at):
        """Sets the crossposted_at of this GetArticlesResponse.


        :param crossposted_at: The crossposted_at of this GetArticlesResponse.
        :type crossposted_at: datetime
        """
        if crossposted_at is None:
            raise ValueError("Invalid value for `crossposted_at`, must not be `None`")

        self._crossposted_at = crossposted_at

    @property
    def description(self):
        """Gets the description of this GetArticlesResponse.

        A description of the article

        :return: The description of this GetArticlesResponse.
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this GetArticlesResponse.

        A description of the article

        :param description: The description of this GetArticlesResponse.
        :type description: str
        """
        if description is None:
            raise ValueError("Invalid value for `description`, must not be `None`")

        self._description = description

    @property
    def edited_at(self):
        """Gets the edited_at of this GetArticlesResponse.


        :return: The edited_at of this GetArticlesResponse.
        :rtype: datetime
        """
        return self._edited_at

    @edited_at.setter
    def edited_at(self, edited_at):
        """Sets the edited_at of this GetArticlesResponse.


        :param edited_at: The edited_at of this GetArticlesResponse.
        :type edited_at: datetime
        """
        if edited_at is None:
            raise ValueError("Invalid value for `edited_at`, must not be `None`")

        self._edited_at = edited_at

    @property
    def id(self):
        """Gets the id of this GetArticlesResponse.


        :return: The id of this GetArticlesResponse.
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this GetArticlesResponse.


        :param id: The id of this GetArticlesResponse.
        :type id: int
        """
        if id is None:
            raise ValueError("Invalid value for `id`, must not be `None`")

        self._id = id

    @property
    def last_comment_at(self):
        """Gets the last_comment_at of this GetArticlesResponse.


        :return: The last_comment_at of this GetArticlesResponse.
        :rtype: datetime
        """
        return self._last_comment_at

    @last_comment_at.setter
    def last_comment_at(self, last_comment_at):
        """Sets the last_comment_at of this GetArticlesResponse.


        :param last_comment_at: The last_comment_at of this GetArticlesResponse.
        :type last_comment_at: datetime
        """
        if last_comment_at is None:
            raise ValueError("Invalid value for `last_comment_at`, must not be `None`")

        self._last_comment_at = last_comment_at

    @property
    def organization(self):
        """Gets the organization of this GetArticlesResponse.


        :return: The organization of this GetArticlesResponse.
        :rtype: SharedOrganization
        """
        return self._organization

    @organization.setter
    def organization(self, organization):
        """Sets the organization of this GetArticlesResponse.


        :param organization: The organization of this GetArticlesResponse.
        :type organization: SharedOrganization
        """

        self._organization = organization

    @property
    def path(self):
        """Gets the path of this GetArticlesResponse.

        A relative path of the article.

        :return: The path of this GetArticlesResponse.
        :rtype: str
        """
        return self._path

    @path.setter
    def path(self, path):
        """Sets the path of this GetArticlesResponse.

        A relative path of the article.

        :param path: The path of this GetArticlesResponse.
        :type path: str
        """
        if path is None:
            raise ValueError("Invalid value for `path`, must not be `None`")

        self._path = path

    @property
    def positive_reactions_count(self):
        """Gets the positive_reactions_count of this GetArticlesResponse.


        :return: The positive_reactions_count of this GetArticlesResponse.
        :rtype: int
        """
        return self._positive_reactions_count

    @positive_reactions_count.setter
    def positive_reactions_count(self, positive_reactions_count):
        """Sets the positive_reactions_count of this GetArticlesResponse.


        :param positive_reactions_count: The positive_reactions_count of this GetArticlesResponse.
        :type positive_reactions_count: int
        """
        if positive_reactions_count is None:
            raise ValueError("Invalid value for `positive_reactions_count`, must not be `None`")

        self._positive_reactions_count = positive_reactions_count

    @property
    def public_reactions_count(self):
        """Gets the public_reactions_count of this GetArticlesResponse.


        :return: The public_reactions_count of this GetArticlesResponse.
        :rtype: int
        """
        return self._public_reactions_count

    @public_reactions_count.setter
    def public_reactions_count(self, public_reactions_count):
        """Sets the public_reactions_count of this GetArticlesResponse.


        :param public_reactions_count: The public_reactions_count of this GetArticlesResponse.
        :type public_reactions_count: int
        """
        if public_reactions_count is None:
            raise ValueError("Invalid value for `public_reactions_count`, must not be `None`")

        self._public_reactions_count = public_reactions_count

    @property
    def published_at(self):
        """Gets the published_at of this GetArticlesResponse.


        :return: The published_at of this GetArticlesResponse.
        :rtype: datetime
        """
        return self._published_at

    @published_at.setter
    def published_at(self, published_at):
        """Sets the published_at of this GetArticlesResponse.


        :param published_at: The published_at of this GetArticlesResponse.
        :type published_at: datetime
        """
        if published_at is None:
            raise ValueError("Invalid value for `published_at`, must not be `None`")

        self._published_at = published_at

    @property
    def published_timestamp(self):
        """Gets the published_timestamp of this GetArticlesResponse.

        Crossposting or published date time

        :return: The published_timestamp of this GetArticlesResponse.
        :rtype: datetime
        """
        return self._published_timestamp

    @published_timestamp.setter
    def published_timestamp(self, published_timestamp):
        """Sets the published_timestamp of this GetArticlesResponse.

        Crossposting or published date time

        :param published_timestamp: The published_timestamp of this GetArticlesResponse.
        :type published_timestamp: datetime
        """
        if published_timestamp is None:
            raise ValueError("Invalid value for `published_timestamp`, must not be `None`")

        self._published_timestamp = published_timestamp

    @property
    def readable_publish_date(self):
        """Gets the readable_publish_date of this GetArticlesResponse.


        :return: The readable_publish_date of this GetArticlesResponse.
        :rtype: str
        """
        return self._readable_publish_date

    @readable_publish_date.setter
    def readable_publish_date(self, readable_publish_date):
        """Sets the readable_publish_date of this GetArticlesResponse.


        :param readable_publish_date: The readable_publish_date of this GetArticlesResponse.
        :type readable_publish_date: str
        """
        if readable_publish_date is None:
            raise ValueError("Invalid value for `readable_publish_date`, must not be `None`")

        self._readable_publish_date = readable_publish_date

    @property
    def reading_time_minutes(self):
        """Gets the reading_time_minutes of this GetArticlesResponse.

        Reading time, in minutes

        :return: The reading_time_minutes of this GetArticlesResponse.
        :rtype: int
        """
        return self._reading_time_minutes

    @reading_time_minutes.setter
    def reading_time_minutes(self, reading_time_minutes):
        """Sets the reading_time_minutes of this GetArticlesResponse.

        Reading time, in minutes

        :param reading_time_minutes: The reading_time_minutes of this GetArticlesResponse.
        :type reading_time_minutes: int
        """
        if reading_time_minutes is None:
            raise ValueError("Invalid value for `reading_time_minutes`, must not be `None`")

        self._reading_time_minutes = reading_time_minutes

    @property
    def slug(self):
        """Gets the slug of this GetArticlesResponse.


        :return: The slug of this GetArticlesResponse.
        :rtype: str
        """
        return self._slug

    @slug.setter
    def slug(self, slug):
        """Sets the slug of this GetArticlesResponse.


        :param slug: The slug of this GetArticlesResponse.
        :type slug: str
        """
        if slug is None:
            raise ValueError("Invalid value for `slug`, must not be `None`")

        self._slug = slug

    @property
    def social_image(self):
        """Gets the social_image of this GetArticlesResponse.


        :return: The social_image of this GetArticlesResponse.
        :rtype: str
        """
        return self._social_image

    @social_image.setter
    def social_image(self, social_image):
        """Sets the social_image of this GetArticlesResponse.


        :param social_image: The social_image of this GetArticlesResponse.
        :type social_image: str
        """
        if social_image is None:
            raise ValueError("Invalid value for `social_image`, must not be `None`")

        self._social_image = social_image

    @property
    def tag_list(self):
        """Gets the tag_list of this GetArticlesResponse.

        An array representation of the tags that are associated with an article

        :return: The tag_list of this GetArticlesResponse.
        :rtype: List[str]
        """
        return self._tag_list

    @tag_list.setter
    def tag_list(self, tag_list):
        """Sets the tag_list of this GetArticlesResponse.

        An array representation of the tags that are associated with an article

        :param tag_list: The tag_list of this GetArticlesResponse.
        :type tag_list: List[str]
        """
        if tag_list is None:
            raise ValueError("Invalid value for `tag_list`, must not be `None`")

        self._tag_list = tag_list

    @property
    def tags(self):
        """Gets the tags of this GetArticlesResponse.

        An array representation of the tags that are associated with an article

        :return: The tags of this GetArticlesResponse.
        :rtype: str
        """
        return self._tags

    @tags.setter
    def tags(self, tags):
        """Sets the tags of this GetArticlesResponse.

        An array representation of the tags that are associated with an article

        :param tags: The tags of this GetArticlesResponse.
        :type tags: str
        """
        if tags is None:
            raise ValueError("Invalid value for `tags`, must not be `None`")

        self._tags = tags

    @property
    def title(self):
        """Gets the title of this GetArticlesResponse.

        The article title

        :return: The title of this GetArticlesResponse.
        :rtype: str
        """
        return self._title

    @title.setter
    def title(self, title):
        """Sets the title of this GetArticlesResponse.

        The article title

        :param title: The title of this GetArticlesResponse.
        :type title: str
        """
        if title is None:
            raise ValueError("Invalid value for `title`, must not be `None`")

        self._title = title

    @property
    def type_of(self):
        """Gets the type_of of this GetArticlesResponse.


        :return: The type_of of this GetArticlesResponse.
        :rtype: str
        """
        return self._type_of

    @type_of.setter
    def type_of(self, type_of):
        """Sets the type_of of this GetArticlesResponse.


        :param type_of: The type_of of this GetArticlesResponse.
        :type type_of: str
        """
        if type_of is None:
            raise ValueError("Invalid value for `type_of`, must not be `None`")

        self._type_of = type_of

    @property
    def url(self):
        """Gets the url of this GetArticlesResponse.

        The url of the article. Can be used to link to the article.

        :return: The url of this GetArticlesResponse.
        :rtype: str
        """
        return self._url

    @url.setter
    def url(self, url):
        """Sets the url of this GetArticlesResponse.

        The url of the article. Can be used to link to the article.

        :param url: The url of this GetArticlesResponse.
        :type url: str
        """
        if url is None:
            raise ValueError("Invalid value for `url`, must not be `None`")

        self._url = url

    @property
    def user(self):
        """Gets the user of this GetArticlesResponse.


        :return: The user of this GetArticlesResponse.
        :rtype: SharedUser
        """
        return self._user

    @user.setter
    def user(self, user):
        """Sets the user of this GetArticlesResponse.


        :param user: The user of this GetArticlesResponse.
        :type user: SharedUser
        """
        if user is None:
            raise ValueError("Invalid value for `user`, must not be `None`")

        self._user = user
