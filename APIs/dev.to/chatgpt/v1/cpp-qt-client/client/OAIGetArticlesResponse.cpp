/**
 * DEV Community
 * A plugin that recommends resources like articles or users to a user using ChatGP.
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIGetArticlesResponse.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIGetArticlesResponse::OAIGetArticlesResponse(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIGetArticlesResponse::OAIGetArticlesResponse() {
    this->initializeModel();
}

OAIGetArticlesResponse::~OAIGetArticlesResponse() {}

void OAIGetArticlesResponse::initializeModel() {

    m_body_markdown_isSet = false;
    m_body_markdown_isValid = false;

    m_canonical_url_isSet = false;
    m_canonical_url_isValid = false;

    m_cover_image_isSet = false;
    m_cover_image_isValid = false;

    m_created_at_isSet = false;
    m_created_at_isValid = false;

    m_crossposted_at_isSet = false;
    m_crossposted_at_isValid = false;

    m_description_isSet = false;
    m_description_isValid = false;

    m_edited_at_isSet = false;
    m_edited_at_isValid = false;

    m_id_isSet = false;
    m_id_isValid = false;

    m_last_comment_at_isSet = false;
    m_last_comment_at_isValid = false;

    m_organization_isSet = false;
    m_organization_isValid = false;

    m_path_isSet = false;
    m_path_isValid = false;

    m_positive_reactions_count_isSet = false;
    m_positive_reactions_count_isValid = false;

    m_public_reactions_count_isSet = false;
    m_public_reactions_count_isValid = false;

    m_published_at_isSet = false;
    m_published_at_isValid = false;

    m_published_timestamp_isSet = false;
    m_published_timestamp_isValid = false;

    m_readable_publish_date_isSet = false;
    m_readable_publish_date_isValid = false;

    m_reading_time_minutes_isSet = false;
    m_reading_time_minutes_isValid = false;

    m_slug_isSet = false;
    m_slug_isValid = false;

    m_social_image_isSet = false;
    m_social_image_isValid = false;

    m_tag_list_isSet = false;
    m_tag_list_isValid = false;

    m_tags_isSet = false;
    m_tags_isValid = false;

    m_title_isSet = false;
    m_title_isValid = false;

    m_type_of_isSet = false;
    m_type_of_isValid = false;

    m_url_isSet = false;
    m_url_isValid = false;

    m_user_isSet = false;
    m_user_isValid = false;
}

void OAIGetArticlesResponse::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIGetArticlesResponse::fromJsonObject(QJsonObject json) {

    m_body_markdown_isValid = ::OpenAPI::fromJsonValue(m_body_markdown, json[QString("body_markdown")]);
    m_body_markdown_isSet = !json[QString("body_markdown")].isNull() && m_body_markdown_isValid;

    m_canonical_url_isValid = ::OpenAPI::fromJsonValue(m_canonical_url, json[QString("canonical_url")]);
    m_canonical_url_isSet = !json[QString("canonical_url")].isNull() && m_canonical_url_isValid;

    m_cover_image_isValid = ::OpenAPI::fromJsonValue(m_cover_image, json[QString("cover_image")]);
    m_cover_image_isSet = !json[QString("cover_image")].isNull() && m_cover_image_isValid;

    m_created_at_isValid = ::OpenAPI::fromJsonValue(m_created_at, json[QString("created_at")]);
    m_created_at_isSet = !json[QString("created_at")].isNull() && m_created_at_isValid;

    m_crossposted_at_isValid = ::OpenAPI::fromJsonValue(m_crossposted_at, json[QString("crossposted_at")]);
    m_crossposted_at_isSet = !json[QString("crossposted_at")].isNull() && m_crossposted_at_isValid;

    m_description_isValid = ::OpenAPI::fromJsonValue(m_description, json[QString("description")]);
    m_description_isSet = !json[QString("description")].isNull() && m_description_isValid;

    m_edited_at_isValid = ::OpenAPI::fromJsonValue(m_edited_at, json[QString("edited_at")]);
    m_edited_at_isSet = !json[QString("edited_at")].isNull() && m_edited_at_isValid;

    m_id_isValid = ::OpenAPI::fromJsonValue(m_id, json[QString("id")]);
    m_id_isSet = !json[QString("id")].isNull() && m_id_isValid;

    m_last_comment_at_isValid = ::OpenAPI::fromJsonValue(m_last_comment_at, json[QString("last_comment_at")]);
    m_last_comment_at_isSet = !json[QString("last_comment_at")].isNull() && m_last_comment_at_isValid;

    m_organization_isValid = ::OpenAPI::fromJsonValue(m_organization, json[QString("organization")]);
    m_organization_isSet = !json[QString("organization")].isNull() && m_organization_isValid;

    m_path_isValid = ::OpenAPI::fromJsonValue(m_path, json[QString("path")]);
    m_path_isSet = !json[QString("path")].isNull() && m_path_isValid;

    m_positive_reactions_count_isValid = ::OpenAPI::fromJsonValue(m_positive_reactions_count, json[QString("positive_reactions_count")]);
    m_positive_reactions_count_isSet = !json[QString("positive_reactions_count")].isNull() && m_positive_reactions_count_isValid;

    m_public_reactions_count_isValid = ::OpenAPI::fromJsonValue(m_public_reactions_count, json[QString("public_reactions_count")]);
    m_public_reactions_count_isSet = !json[QString("public_reactions_count")].isNull() && m_public_reactions_count_isValid;

    m_published_at_isValid = ::OpenAPI::fromJsonValue(m_published_at, json[QString("published_at")]);
    m_published_at_isSet = !json[QString("published_at")].isNull() && m_published_at_isValid;

    m_published_timestamp_isValid = ::OpenAPI::fromJsonValue(m_published_timestamp, json[QString("published_timestamp")]);
    m_published_timestamp_isSet = !json[QString("published_timestamp")].isNull() && m_published_timestamp_isValid;

    m_readable_publish_date_isValid = ::OpenAPI::fromJsonValue(m_readable_publish_date, json[QString("readable_publish_date")]);
    m_readable_publish_date_isSet = !json[QString("readable_publish_date")].isNull() && m_readable_publish_date_isValid;

    m_reading_time_minutes_isValid = ::OpenAPI::fromJsonValue(m_reading_time_minutes, json[QString("reading_time_minutes")]);
    m_reading_time_minutes_isSet = !json[QString("reading_time_minutes")].isNull() && m_reading_time_minutes_isValid;

    m_slug_isValid = ::OpenAPI::fromJsonValue(m_slug, json[QString("slug")]);
    m_slug_isSet = !json[QString("slug")].isNull() && m_slug_isValid;

    m_social_image_isValid = ::OpenAPI::fromJsonValue(m_social_image, json[QString("social_image")]);
    m_social_image_isSet = !json[QString("social_image")].isNull() && m_social_image_isValid;

    m_tag_list_isValid = ::OpenAPI::fromJsonValue(m_tag_list, json[QString("tag_list")]);
    m_tag_list_isSet = !json[QString("tag_list")].isNull() && m_tag_list_isValid;

    m_tags_isValid = ::OpenAPI::fromJsonValue(m_tags, json[QString("tags")]);
    m_tags_isSet = !json[QString("tags")].isNull() && m_tags_isValid;

    m_title_isValid = ::OpenAPI::fromJsonValue(m_title, json[QString("title")]);
    m_title_isSet = !json[QString("title")].isNull() && m_title_isValid;

    m_type_of_isValid = ::OpenAPI::fromJsonValue(m_type_of, json[QString("type_of")]);
    m_type_of_isSet = !json[QString("type_of")].isNull() && m_type_of_isValid;

    m_url_isValid = ::OpenAPI::fromJsonValue(m_url, json[QString("url")]);
    m_url_isSet = !json[QString("url")].isNull() && m_url_isValid;

    m_user_isValid = ::OpenAPI::fromJsonValue(m_user, json[QString("user")]);
    m_user_isSet = !json[QString("user")].isNull() && m_user_isValid;
}

QString OAIGetArticlesResponse::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIGetArticlesResponse::asJsonObject() const {
    QJsonObject obj;
    if (m_body_markdown_isSet) {
        obj.insert(QString("body_markdown"), ::OpenAPI::toJsonValue(m_body_markdown));
    }
    if (m_canonical_url_isSet) {
        obj.insert(QString("canonical_url"), ::OpenAPI::toJsonValue(m_canonical_url));
    }
    if (m_cover_image_isSet) {
        obj.insert(QString("cover_image"), ::OpenAPI::toJsonValue(m_cover_image));
    }
    if (m_created_at_isSet) {
        obj.insert(QString("created_at"), ::OpenAPI::toJsonValue(m_created_at));
    }
    if (m_crossposted_at_isSet) {
        obj.insert(QString("crossposted_at"), ::OpenAPI::toJsonValue(m_crossposted_at));
    }
    if (m_description_isSet) {
        obj.insert(QString("description"), ::OpenAPI::toJsonValue(m_description));
    }
    if (m_edited_at_isSet) {
        obj.insert(QString("edited_at"), ::OpenAPI::toJsonValue(m_edited_at));
    }
    if (m_id_isSet) {
        obj.insert(QString("id"), ::OpenAPI::toJsonValue(m_id));
    }
    if (m_last_comment_at_isSet) {
        obj.insert(QString("last_comment_at"), ::OpenAPI::toJsonValue(m_last_comment_at));
    }
    if (m_organization.isSet()) {
        obj.insert(QString("organization"), ::OpenAPI::toJsonValue(m_organization));
    }
    if (m_path_isSet) {
        obj.insert(QString("path"), ::OpenAPI::toJsonValue(m_path));
    }
    if (m_positive_reactions_count_isSet) {
        obj.insert(QString("positive_reactions_count"), ::OpenAPI::toJsonValue(m_positive_reactions_count));
    }
    if (m_public_reactions_count_isSet) {
        obj.insert(QString("public_reactions_count"), ::OpenAPI::toJsonValue(m_public_reactions_count));
    }
    if (m_published_at_isSet) {
        obj.insert(QString("published_at"), ::OpenAPI::toJsonValue(m_published_at));
    }
    if (m_published_timestamp_isSet) {
        obj.insert(QString("published_timestamp"), ::OpenAPI::toJsonValue(m_published_timestamp));
    }
    if (m_readable_publish_date_isSet) {
        obj.insert(QString("readable_publish_date"), ::OpenAPI::toJsonValue(m_readable_publish_date));
    }
    if (m_reading_time_minutes_isSet) {
        obj.insert(QString("reading_time_minutes"), ::OpenAPI::toJsonValue(m_reading_time_minutes));
    }
    if (m_slug_isSet) {
        obj.insert(QString("slug"), ::OpenAPI::toJsonValue(m_slug));
    }
    if (m_social_image_isSet) {
        obj.insert(QString("social_image"), ::OpenAPI::toJsonValue(m_social_image));
    }
    if (m_tag_list.size() > 0) {
        obj.insert(QString("tag_list"), ::OpenAPI::toJsonValue(m_tag_list));
    }
    if (m_tags_isSet) {
        obj.insert(QString("tags"), ::OpenAPI::toJsonValue(m_tags));
    }
    if (m_title_isSet) {
        obj.insert(QString("title"), ::OpenAPI::toJsonValue(m_title));
    }
    if (m_type_of_isSet) {
        obj.insert(QString("type_of"), ::OpenAPI::toJsonValue(m_type_of));
    }
    if (m_url_isSet) {
        obj.insert(QString("url"), ::OpenAPI::toJsonValue(m_url));
    }
    if (m_user.isSet()) {
        obj.insert(QString("user"), ::OpenAPI::toJsonValue(m_user));
    }
    return obj;
}

QString OAIGetArticlesResponse::getBodyMarkdown() const {
    return m_body_markdown;
}
void OAIGetArticlesResponse::setBodyMarkdown(const QString &body_markdown) {
    m_body_markdown = body_markdown;
    m_body_markdown_isSet = true;
}

bool OAIGetArticlesResponse::is_body_markdown_Set() const{
    return m_body_markdown_isSet;
}

bool OAIGetArticlesResponse::is_body_markdown_Valid() const{
    return m_body_markdown_isValid;
}

QString OAIGetArticlesResponse::getCanonicalUrl() const {
    return m_canonical_url;
}
void OAIGetArticlesResponse::setCanonicalUrl(const QString &canonical_url) {
    m_canonical_url = canonical_url;
    m_canonical_url_isSet = true;
}

bool OAIGetArticlesResponse::is_canonical_url_Set() const{
    return m_canonical_url_isSet;
}

bool OAIGetArticlesResponse::is_canonical_url_Valid() const{
    return m_canonical_url_isValid;
}

QString OAIGetArticlesResponse::getCoverImage() const {
    return m_cover_image;
}
void OAIGetArticlesResponse::setCoverImage(const QString &cover_image) {
    m_cover_image = cover_image;
    m_cover_image_isSet = true;
}

bool OAIGetArticlesResponse::is_cover_image_Set() const{
    return m_cover_image_isSet;
}

bool OAIGetArticlesResponse::is_cover_image_Valid() const{
    return m_cover_image_isValid;
}

QDateTime OAIGetArticlesResponse::getCreatedAt() const {
    return m_created_at;
}
void OAIGetArticlesResponse::setCreatedAt(const QDateTime &created_at) {
    m_created_at = created_at;
    m_created_at_isSet = true;
}

bool OAIGetArticlesResponse::is_created_at_Set() const{
    return m_created_at_isSet;
}

bool OAIGetArticlesResponse::is_created_at_Valid() const{
    return m_created_at_isValid;
}

QDateTime OAIGetArticlesResponse::getCrosspostedAt() const {
    return m_crossposted_at;
}
void OAIGetArticlesResponse::setCrosspostedAt(const QDateTime &crossposted_at) {
    m_crossposted_at = crossposted_at;
    m_crossposted_at_isSet = true;
}

bool OAIGetArticlesResponse::is_crossposted_at_Set() const{
    return m_crossposted_at_isSet;
}

bool OAIGetArticlesResponse::is_crossposted_at_Valid() const{
    return m_crossposted_at_isValid;
}

QString OAIGetArticlesResponse::getDescription() const {
    return m_description;
}
void OAIGetArticlesResponse::setDescription(const QString &description) {
    m_description = description;
    m_description_isSet = true;
}

bool OAIGetArticlesResponse::is_description_Set() const{
    return m_description_isSet;
}

bool OAIGetArticlesResponse::is_description_Valid() const{
    return m_description_isValid;
}

QDateTime OAIGetArticlesResponse::getEditedAt() const {
    return m_edited_at;
}
void OAIGetArticlesResponse::setEditedAt(const QDateTime &edited_at) {
    m_edited_at = edited_at;
    m_edited_at_isSet = true;
}

bool OAIGetArticlesResponse::is_edited_at_Set() const{
    return m_edited_at_isSet;
}

bool OAIGetArticlesResponse::is_edited_at_Valid() const{
    return m_edited_at_isValid;
}

qint32 OAIGetArticlesResponse::getId() const {
    return m_id;
}
void OAIGetArticlesResponse::setId(const qint32 &id) {
    m_id = id;
    m_id_isSet = true;
}

bool OAIGetArticlesResponse::is_id_Set() const{
    return m_id_isSet;
}

bool OAIGetArticlesResponse::is_id_Valid() const{
    return m_id_isValid;
}

QDateTime OAIGetArticlesResponse::getLastCommentAt() const {
    return m_last_comment_at;
}
void OAIGetArticlesResponse::setLastCommentAt(const QDateTime &last_comment_at) {
    m_last_comment_at = last_comment_at;
    m_last_comment_at_isSet = true;
}

bool OAIGetArticlesResponse::is_last_comment_at_Set() const{
    return m_last_comment_at_isSet;
}

bool OAIGetArticlesResponse::is_last_comment_at_Valid() const{
    return m_last_comment_at_isValid;
}

OAISharedOrganization OAIGetArticlesResponse::getOrganization() const {
    return m_organization;
}
void OAIGetArticlesResponse::setOrganization(const OAISharedOrganization &organization) {
    m_organization = organization;
    m_organization_isSet = true;
}

bool OAIGetArticlesResponse::is_organization_Set() const{
    return m_organization_isSet;
}

bool OAIGetArticlesResponse::is_organization_Valid() const{
    return m_organization_isValid;
}

QString OAIGetArticlesResponse::getPath() const {
    return m_path;
}
void OAIGetArticlesResponse::setPath(const QString &path) {
    m_path = path;
    m_path_isSet = true;
}

bool OAIGetArticlesResponse::is_path_Set() const{
    return m_path_isSet;
}

bool OAIGetArticlesResponse::is_path_Valid() const{
    return m_path_isValid;
}

qint32 OAIGetArticlesResponse::getPositiveReactionsCount() const {
    return m_positive_reactions_count;
}
void OAIGetArticlesResponse::setPositiveReactionsCount(const qint32 &positive_reactions_count) {
    m_positive_reactions_count = positive_reactions_count;
    m_positive_reactions_count_isSet = true;
}

bool OAIGetArticlesResponse::is_positive_reactions_count_Set() const{
    return m_positive_reactions_count_isSet;
}

bool OAIGetArticlesResponse::is_positive_reactions_count_Valid() const{
    return m_positive_reactions_count_isValid;
}

qint32 OAIGetArticlesResponse::getPublicReactionsCount() const {
    return m_public_reactions_count;
}
void OAIGetArticlesResponse::setPublicReactionsCount(const qint32 &public_reactions_count) {
    m_public_reactions_count = public_reactions_count;
    m_public_reactions_count_isSet = true;
}

bool OAIGetArticlesResponse::is_public_reactions_count_Set() const{
    return m_public_reactions_count_isSet;
}

bool OAIGetArticlesResponse::is_public_reactions_count_Valid() const{
    return m_public_reactions_count_isValid;
}

QDateTime OAIGetArticlesResponse::getPublishedAt() const {
    return m_published_at;
}
void OAIGetArticlesResponse::setPublishedAt(const QDateTime &published_at) {
    m_published_at = published_at;
    m_published_at_isSet = true;
}

bool OAIGetArticlesResponse::is_published_at_Set() const{
    return m_published_at_isSet;
}

bool OAIGetArticlesResponse::is_published_at_Valid() const{
    return m_published_at_isValid;
}

QDateTime OAIGetArticlesResponse::getPublishedTimestamp() const {
    return m_published_timestamp;
}
void OAIGetArticlesResponse::setPublishedTimestamp(const QDateTime &published_timestamp) {
    m_published_timestamp = published_timestamp;
    m_published_timestamp_isSet = true;
}

bool OAIGetArticlesResponse::is_published_timestamp_Set() const{
    return m_published_timestamp_isSet;
}

bool OAIGetArticlesResponse::is_published_timestamp_Valid() const{
    return m_published_timestamp_isValid;
}

QString OAIGetArticlesResponse::getReadablePublishDate() const {
    return m_readable_publish_date;
}
void OAIGetArticlesResponse::setReadablePublishDate(const QString &readable_publish_date) {
    m_readable_publish_date = readable_publish_date;
    m_readable_publish_date_isSet = true;
}

bool OAIGetArticlesResponse::is_readable_publish_date_Set() const{
    return m_readable_publish_date_isSet;
}

bool OAIGetArticlesResponse::is_readable_publish_date_Valid() const{
    return m_readable_publish_date_isValid;
}

qint32 OAIGetArticlesResponse::getReadingTimeMinutes() const {
    return m_reading_time_minutes;
}
void OAIGetArticlesResponse::setReadingTimeMinutes(const qint32 &reading_time_minutes) {
    m_reading_time_minutes = reading_time_minutes;
    m_reading_time_minutes_isSet = true;
}

bool OAIGetArticlesResponse::is_reading_time_minutes_Set() const{
    return m_reading_time_minutes_isSet;
}

bool OAIGetArticlesResponse::is_reading_time_minutes_Valid() const{
    return m_reading_time_minutes_isValid;
}

QString OAIGetArticlesResponse::getSlug() const {
    return m_slug;
}
void OAIGetArticlesResponse::setSlug(const QString &slug) {
    m_slug = slug;
    m_slug_isSet = true;
}

bool OAIGetArticlesResponse::is_slug_Set() const{
    return m_slug_isSet;
}

bool OAIGetArticlesResponse::is_slug_Valid() const{
    return m_slug_isValid;
}

QString OAIGetArticlesResponse::getSocialImage() const {
    return m_social_image;
}
void OAIGetArticlesResponse::setSocialImage(const QString &social_image) {
    m_social_image = social_image;
    m_social_image_isSet = true;
}

bool OAIGetArticlesResponse::is_social_image_Set() const{
    return m_social_image_isSet;
}

bool OAIGetArticlesResponse::is_social_image_Valid() const{
    return m_social_image_isValid;
}

QList<QString> OAIGetArticlesResponse::getTagList() const {
    return m_tag_list;
}
void OAIGetArticlesResponse::setTagList(const QList<QString> &tag_list) {
    m_tag_list = tag_list;
    m_tag_list_isSet = true;
}

bool OAIGetArticlesResponse::is_tag_list_Set() const{
    return m_tag_list_isSet;
}

bool OAIGetArticlesResponse::is_tag_list_Valid() const{
    return m_tag_list_isValid;
}

QString OAIGetArticlesResponse::getTags() const {
    return m_tags;
}
void OAIGetArticlesResponse::setTags(const QString &tags) {
    m_tags = tags;
    m_tags_isSet = true;
}

bool OAIGetArticlesResponse::is_tags_Set() const{
    return m_tags_isSet;
}

bool OAIGetArticlesResponse::is_tags_Valid() const{
    return m_tags_isValid;
}

QString OAIGetArticlesResponse::getTitle() const {
    return m_title;
}
void OAIGetArticlesResponse::setTitle(const QString &title) {
    m_title = title;
    m_title_isSet = true;
}

bool OAIGetArticlesResponse::is_title_Set() const{
    return m_title_isSet;
}

bool OAIGetArticlesResponse::is_title_Valid() const{
    return m_title_isValid;
}

QString OAIGetArticlesResponse::getTypeOf() const {
    return m_type_of;
}
void OAIGetArticlesResponse::setTypeOf(const QString &type_of) {
    m_type_of = type_of;
    m_type_of_isSet = true;
}

bool OAIGetArticlesResponse::is_type_of_Set() const{
    return m_type_of_isSet;
}

bool OAIGetArticlesResponse::is_type_of_Valid() const{
    return m_type_of_isValid;
}

QString OAIGetArticlesResponse::getUrl() const {
    return m_url;
}
void OAIGetArticlesResponse::setUrl(const QString &url) {
    m_url = url;
    m_url_isSet = true;
}

bool OAIGetArticlesResponse::is_url_Set() const{
    return m_url_isSet;
}

bool OAIGetArticlesResponse::is_url_Valid() const{
    return m_url_isValid;
}

OAISharedUser OAIGetArticlesResponse::getUser() const {
    return m_user;
}
void OAIGetArticlesResponse::setUser(const OAISharedUser &user) {
    m_user = user;
    m_user_isSet = true;
}

bool OAIGetArticlesResponse::is_user_Set() const{
    return m_user_isSet;
}

bool OAIGetArticlesResponse::is_user_Valid() const{
    return m_user_isValid;
}

bool OAIGetArticlesResponse::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_body_markdown_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_canonical_url_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_cover_image_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_created_at_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_crossposted_at_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_description_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_edited_at_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_last_comment_at_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_organization.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_path_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_positive_reactions_count_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_public_reactions_count_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_published_at_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_published_timestamp_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_readable_publish_date_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_reading_time_minutes_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_slug_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_social_image_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_tag_list.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_tags_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_title_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_type_of_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_url_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_user.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIGetArticlesResponse::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_canonical_url_isValid && m_cover_image_isValid && m_created_at_isValid && m_crossposted_at_isValid && m_description_isValid && m_edited_at_isValid && m_id_isValid && m_last_comment_at_isValid && m_path_isValid && m_positive_reactions_count_isValid && m_public_reactions_count_isValid && m_published_at_isValid && m_published_timestamp_isValid && m_readable_publish_date_isValid && m_reading_time_minutes_isValid && m_slug_isValid && m_social_image_isValid && m_tag_list_isValid && m_tags_isValid && m_title_isValid && m_type_of_isValid && m_url_isValid && m_user_isValid && true;
}

} // namespace OpenAPI
