/**
 * DEV Community
 * A plugin that recommends resources like articles or users to a user using ChatGP.
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAIGetArticlesResponse.h
 *
 * Representation of an article returned in a list
 */

#ifndef OAIGetArticlesResponse_H
#define OAIGetArticlesResponse_H

#include <QJsonObject>

#include "OAISharedOrganization.h"
#include "OAISharedUser.h"
#include <QDateTime>
#include <QList>
#include <QString>

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {
class OAISharedOrganization;
class OAISharedUser;

class OAIGetArticlesResponse : public OAIObject {
public:
    OAIGetArticlesResponse();
    OAIGetArticlesResponse(QString json);
    ~OAIGetArticlesResponse() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    QString getBodyMarkdown() const;
    void setBodyMarkdown(const QString &body_markdown);
    bool is_body_markdown_Set() const;
    bool is_body_markdown_Valid() const;

    QString getCanonicalUrl() const;
    void setCanonicalUrl(const QString &canonical_url);
    bool is_canonical_url_Set() const;
    bool is_canonical_url_Valid() const;

    QString getCoverImage() const;
    void setCoverImage(const QString &cover_image);
    bool is_cover_image_Set() const;
    bool is_cover_image_Valid() const;

    QDateTime getCreatedAt() const;
    void setCreatedAt(const QDateTime &created_at);
    bool is_created_at_Set() const;
    bool is_created_at_Valid() const;

    QDateTime getCrosspostedAt() const;
    void setCrosspostedAt(const QDateTime &crossposted_at);
    bool is_crossposted_at_Set() const;
    bool is_crossposted_at_Valid() const;

    QString getDescription() const;
    void setDescription(const QString &description);
    bool is_description_Set() const;
    bool is_description_Valid() const;

    QDateTime getEditedAt() const;
    void setEditedAt(const QDateTime &edited_at);
    bool is_edited_at_Set() const;
    bool is_edited_at_Valid() const;

    qint32 getId() const;
    void setId(const qint32 &id);
    bool is_id_Set() const;
    bool is_id_Valid() const;

    QDateTime getLastCommentAt() const;
    void setLastCommentAt(const QDateTime &last_comment_at);
    bool is_last_comment_at_Set() const;
    bool is_last_comment_at_Valid() const;

    OAISharedOrganization getOrganization() const;
    void setOrganization(const OAISharedOrganization &organization);
    bool is_organization_Set() const;
    bool is_organization_Valid() const;

    QString getPath() const;
    void setPath(const QString &path);
    bool is_path_Set() const;
    bool is_path_Valid() const;

    qint32 getPositiveReactionsCount() const;
    void setPositiveReactionsCount(const qint32 &positive_reactions_count);
    bool is_positive_reactions_count_Set() const;
    bool is_positive_reactions_count_Valid() const;

    qint32 getPublicReactionsCount() const;
    void setPublicReactionsCount(const qint32 &public_reactions_count);
    bool is_public_reactions_count_Set() const;
    bool is_public_reactions_count_Valid() const;

    QDateTime getPublishedAt() const;
    void setPublishedAt(const QDateTime &published_at);
    bool is_published_at_Set() const;
    bool is_published_at_Valid() const;

    QDateTime getPublishedTimestamp() const;
    void setPublishedTimestamp(const QDateTime &published_timestamp);
    bool is_published_timestamp_Set() const;
    bool is_published_timestamp_Valid() const;

    QString getReadablePublishDate() const;
    void setReadablePublishDate(const QString &readable_publish_date);
    bool is_readable_publish_date_Set() const;
    bool is_readable_publish_date_Valid() const;

    qint32 getReadingTimeMinutes() const;
    void setReadingTimeMinutes(const qint32 &reading_time_minutes);
    bool is_reading_time_minutes_Set() const;
    bool is_reading_time_minutes_Valid() const;

    QString getSlug() const;
    void setSlug(const QString &slug);
    bool is_slug_Set() const;
    bool is_slug_Valid() const;

    QString getSocialImage() const;
    void setSocialImage(const QString &social_image);
    bool is_social_image_Set() const;
    bool is_social_image_Valid() const;

    QList<QString> getTagList() const;
    void setTagList(const QList<QString> &tag_list);
    bool is_tag_list_Set() const;
    bool is_tag_list_Valid() const;

    QString getTags() const;
    void setTags(const QString &tags);
    bool is_tags_Set() const;
    bool is_tags_Valid() const;

    QString getTitle() const;
    void setTitle(const QString &title);
    bool is_title_Set() const;
    bool is_title_Valid() const;

    QString getTypeOf() const;
    void setTypeOf(const QString &type_of);
    bool is_type_of_Set() const;
    bool is_type_of_Valid() const;

    QString getUrl() const;
    void setUrl(const QString &url);
    bool is_url_Set() const;
    bool is_url_Valid() const;

    OAISharedUser getUser() const;
    void setUser(const OAISharedUser &user);
    bool is_user_Set() const;
    bool is_user_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    QString m_body_markdown;
    bool m_body_markdown_isSet;
    bool m_body_markdown_isValid;

    QString m_canonical_url;
    bool m_canonical_url_isSet;
    bool m_canonical_url_isValid;

    QString m_cover_image;
    bool m_cover_image_isSet;
    bool m_cover_image_isValid;

    QDateTime m_created_at;
    bool m_created_at_isSet;
    bool m_created_at_isValid;

    QDateTime m_crossposted_at;
    bool m_crossposted_at_isSet;
    bool m_crossposted_at_isValid;

    QString m_description;
    bool m_description_isSet;
    bool m_description_isValid;

    QDateTime m_edited_at;
    bool m_edited_at_isSet;
    bool m_edited_at_isValid;

    qint32 m_id;
    bool m_id_isSet;
    bool m_id_isValid;

    QDateTime m_last_comment_at;
    bool m_last_comment_at_isSet;
    bool m_last_comment_at_isValid;

    OAISharedOrganization m_organization;
    bool m_organization_isSet;
    bool m_organization_isValid;

    QString m_path;
    bool m_path_isSet;
    bool m_path_isValid;

    qint32 m_positive_reactions_count;
    bool m_positive_reactions_count_isSet;
    bool m_positive_reactions_count_isValid;

    qint32 m_public_reactions_count;
    bool m_public_reactions_count_isSet;
    bool m_public_reactions_count_isValid;

    QDateTime m_published_at;
    bool m_published_at_isSet;
    bool m_published_at_isValid;

    QDateTime m_published_timestamp;
    bool m_published_timestamp_isSet;
    bool m_published_timestamp_isValid;

    QString m_readable_publish_date;
    bool m_readable_publish_date_isSet;
    bool m_readable_publish_date_isValid;

    qint32 m_reading_time_minutes;
    bool m_reading_time_minutes_isSet;
    bool m_reading_time_minutes_isValid;

    QString m_slug;
    bool m_slug_isSet;
    bool m_slug_isValid;

    QString m_social_image;
    bool m_social_image_isSet;
    bool m_social_image_isValid;

    QList<QString> m_tag_list;
    bool m_tag_list_isSet;
    bool m_tag_list_isValid;

    QString m_tags;
    bool m_tags_isSet;
    bool m_tags_isValid;

    QString m_title;
    bool m_title_isSet;
    bool m_title_isValid;

    QString m_type_of;
    bool m_type_of_isSet;
    bool m_type_of_isValid;

    QString m_url;
    bool m_url_isSet;
    bool m_url_isValid;

    OAISharedUser m_user;
    bool m_user_isSet;
    bool m_user_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAIGetArticlesResponse)

#endif // OAIGetArticlesResponse_H
