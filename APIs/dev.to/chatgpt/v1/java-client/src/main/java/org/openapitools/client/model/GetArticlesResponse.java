/*
 * DEV Community
 * A plugin that recommends resources like articles or users to a user using ChatGP.
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.time.OffsetDateTime;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.SharedOrganization;
import org.openapitools.client.model.SharedUser;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Representation of an article returned in a list
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:23:19.112797-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class GetArticlesResponse {
  public static final String SERIALIZED_NAME_BODY_MARKDOWN = "body_markdown";
  @SerializedName(SERIALIZED_NAME_BODY_MARKDOWN)
  private String bodyMarkdown;

  public static final String SERIALIZED_NAME_CANONICAL_URL = "canonical_url";
  @SerializedName(SERIALIZED_NAME_CANONICAL_URL)
  private String canonicalUrl;

  public static final String SERIALIZED_NAME_COVER_IMAGE = "cover_image";
  @SerializedName(SERIALIZED_NAME_COVER_IMAGE)
  private String coverImage;

  public static final String SERIALIZED_NAME_CREATED_AT = "created_at";
  @SerializedName(SERIALIZED_NAME_CREATED_AT)
  private OffsetDateTime createdAt;

  public static final String SERIALIZED_NAME_CROSSPOSTED_AT = "crossposted_at";
  @SerializedName(SERIALIZED_NAME_CROSSPOSTED_AT)
  private OffsetDateTime crosspostedAt;

  public static final String SERIALIZED_NAME_DESCRIPTION = "description";
  @SerializedName(SERIALIZED_NAME_DESCRIPTION)
  private String description;

  public static final String SERIALIZED_NAME_EDITED_AT = "edited_at";
  @SerializedName(SERIALIZED_NAME_EDITED_AT)
  private OffsetDateTime editedAt;

  public static final String SERIALIZED_NAME_ID = "id";
  @SerializedName(SERIALIZED_NAME_ID)
  private Integer id;

  public static final String SERIALIZED_NAME_LAST_COMMENT_AT = "last_comment_at";
  @SerializedName(SERIALIZED_NAME_LAST_COMMENT_AT)
  private OffsetDateTime lastCommentAt;

  public static final String SERIALIZED_NAME_ORGANIZATION = "organization";
  @SerializedName(SERIALIZED_NAME_ORGANIZATION)
  private SharedOrganization organization;

  public static final String SERIALIZED_NAME_PATH = "path";
  @SerializedName(SERIALIZED_NAME_PATH)
  private String path;

  public static final String SERIALIZED_NAME_POSITIVE_REACTIONS_COUNT = "positive_reactions_count";
  @SerializedName(SERIALIZED_NAME_POSITIVE_REACTIONS_COUNT)
  private Integer positiveReactionsCount;

  public static final String SERIALIZED_NAME_PUBLIC_REACTIONS_COUNT = "public_reactions_count";
  @SerializedName(SERIALIZED_NAME_PUBLIC_REACTIONS_COUNT)
  private Integer publicReactionsCount;

  public static final String SERIALIZED_NAME_PUBLISHED_AT = "published_at";
  @SerializedName(SERIALIZED_NAME_PUBLISHED_AT)
  private OffsetDateTime publishedAt;

  public static final String SERIALIZED_NAME_PUBLISHED_TIMESTAMP = "published_timestamp";
  @SerializedName(SERIALIZED_NAME_PUBLISHED_TIMESTAMP)
  private OffsetDateTime publishedTimestamp;

  public static final String SERIALIZED_NAME_READABLE_PUBLISH_DATE = "readable_publish_date";
  @SerializedName(SERIALIZED_NAME_READABLE_PUBLISH_DATE)
  private String readablePublishDate;

  public static final String SERIALIZED_NAME_READING_TIME_MINUTES = "reading_time_minutes";
  @SerializedName(SERIALIZED_NAME_READING_TIME_MINUTES)
  private Integer readingTimeMinutes;

  public static final String SERIALIZED_NAME_SLUG = "slug";
  @SerializedName(SERIALIZED_NAME_SLUG)
  private String slug;

  public static final String SERIALIZED_NAME_SOCIAL_IMAGE = "social_image";
  @SerializedName(SERIALIZED_NAME_SOCIAL_IMAGE)
  private String socialImage;

  public static final String SERIALIZED_NAME_TAG_LIST = "tag_list";
  @SerializedName(SERIALIZED_NAME_TAG_LIST)
  private List<String> tagList = new ArrayList<>();

  public static final String SERIALIZED_NAME_TAGS = "tags";
  @SerializedName(SERIALIZED_NAME_TAGS)
  private String tags;

  public static final String SERIALIZED_NAME_TITLE = "title";
  @SerializedName(SERIALIZED_NAME_TITLE)
  private String title;

  public static final String SERIALIZED_NAME_TYPE_OF = "type_of";
  @SerializedName(SERIALIZED_NAME_TYPE_OF)
  private String typeOf;

  public static final String SERIALIZED_NAME_URL = "url";
  @SerializedName(SERIALIZED_NAME_URL)
  private String url;

  public static final String SERIALIZED_NAME_USER = "user";
  @SerializedName(SERIALIZED_NAME_USER)
  private SharedUser user;

  public GetArticlesResponse() {
  }

  public GetArticlesResponse bodyMarkdown(String bodyMarkdown) {
    this.bodyMarkdown = bodyMarkdown;
    return this;
  }

  /**
   * The body of the article
   * @return bodyMarkdown
   */
  @javax.annotation.Nullable
  public String getBodyMarkdown() {
    return bodyMarkdown;
  }

  public void setBodyMarkdown(String bodyMarkdown) {
    this.bodyMarkdown = bodyMarkdown;
  }


  public GetArticlesResponse canonicalUrl(String canonicalUrl) {
    this.canonicalUrl = canonicalUrl;
    return this;
  }

  /**
   * Get canonicalUrl
   * @return canonicalUrl
   */
  @javax.annotation.Nonnull
  public String getCanonicalUrl() {
    return canonicalUrl;
  }

  public void setCanonicalUrl(String canonicalUrl) {
    this.canonicalUrl = canonicalUrl;
  }


  public GetArticlesResponse coverImage(String coverImage) {
    this.coverImage = coverImage;
    return this;
  }

  /**
   * Get coverImage
   * @return coverImage
   */
  @javax.annotation.Nullable
  public String getCoverImage() {
    return coverImage;
  }

  public void setCoverImage(String coverImage) {
    this.coverImage = coverImage;
  }


  public GetArticlesResponse createdAt(OffsetDateTime createdAt) {
    this.createdAt = createdAt;
    return this;
  }

  /**
   * Get createdAt
   * @return createdAt
   */
  @javax.annotation.Nonnull
  public OffsetDateTime getCreatedAt() {
    return createdAt;
  }

  public void setCreatedAt(OffsetDateTime createdAt) {
    this.createdAt = createdAt;
  }


  public GetArticlesResponse crosspostedAt(OffsetDateTime crosspostedAt) {
    this.crosspostedAt = crosspostedAt;
    return this;
  }

  /**
   * Get crosspostedAt
   * @return crosspostedAt
   */
  @javax.annotation.Nullable
  public OffsetDateTime getCrosspostedAt() {
    return crosspostedAt;
  }

  public void setCrosspostedAt(OffsetDateTime crosspostedAt) {
    this.crosspostedAt = crosspostedAt;
  }


  public GetArticlesResponse description(String description) {
    this.description = description;
    return this;
  }

  /**
   * A description of the article
   * @return description
   */
  @javax.annotation.Nonnull
  public String getDescription() {
    return description;
  }

  public void setDescription(String description) {
    this.description = description;
  }


  public GetArticlesResponse editedAt(OffsetDateTime editedAt) {
    this.editedAt = editedAt;
    return this;
  }

  /**
   * Get editedAt
   * @return editedAt
   */
  @javax.annotation.Nullable
  public OffsetDateTime getEditedAt() {
    return editedAt;
  }

  public void setEditedAt(OffsetDateTime editedAt) {
    this.editedAt = editedAt;
  }


  public GetArticlesResponse id(Integer id) {
    this.id = id;
    return this;
  }

  /**
   * Get id
   * @return id
   */
  @javax.annotation.Nonnull
  public Integer getId() {
    return id;
  }

  public void setId(Integer id) {
    this.id = id;
  }


  public GetArticlesResponse lastCommentAt(OffsetDateTime lastCommentAt) {
    this.lastCommentAt = lastCommentAt;
    return this;
  }

  /**
   * Get lastCommentAt
   * @return lastCommentAt
   */
  @javax.annotation.Nonnull
  public OffsetDateTime getLastCommentAt() {
    return lastCommentAt;
  }

  public void setLastCommentAt(OffsetDateTime lastCommentAt) {
    this.lastCommentAt = lastCommentAt;
  }


  public GetArticlesResponse organization(SharedOrganization organization) {
    this.organization = organization;
    return this;
  }

  /**
   * Get organization
   * @return organization
   */
  @javax.annotation.Nullable
  public SharedOrganization getOrganization() {
    return organization;
  }

  public void setOrganization(SharedOrganization organization) {
    this.organization = organization;
  }


  public GetArticlesResponse path(String path) {
    this.path = path;
    return this;
  }

  /**
   * A relative path of the article.
   * @return path
   */
  @javax.annotation.Nonnull
  public String getPath() {
    return path;
  }

  public void setPath(String path) {
    this.path = path;
  }


  public GetArticlesResponse positiveReactionsCount(Integer positiveReactionsCount) {
    this.positiveReactionsCount = positiveReactionsCount;
    return this;
  }

  /**
   * Get positiveReactionsCount
   * @return positiveReactionsCount
   */
  @javax.annotation.Nonnull
  public Integer getPositiveReactionsCount() {
    return positiveReactionsCount;
  }

  public void setPositiveReactionsCount(Integer positiveReactionsCount) {
    this.positiveReactionsCount = positiveReactionsCount;
  }


  public GetArticlesResponse publicReactionsCount(Integer publicReactionsCount) {
    this.publicReactionsCount = publicReactionsCount;
    return this;
  }

  /**
   * Get publicReactionsCount
   * @return publicReactionsCount
   */
  @javax.annotation.Nonnull
  public Integer getPublicReactionsCount() {
    return publicReactionsCount;
  }

  public void setPublicReactionsCount(Integer publicReactionsCount) {
    this.publicReactionsCount = publicReactionsCount;
  }


  public GetArticlesResponse publishedAt(OffsetDateTime publishedAt) {
    this.publishedAt = publishedAt;
    return this;
  }

  /**
   * Get publishedAt
   * @return publishedAt
   */
  @javax.annotation.Nonnull
  public OffsetDateTime getPublishedAt() {
    return publishedAt;
  }

  public void setPublishedAt(OffsetDateTime publishedAt) {
    this.publishedAt = publishedAt;
  }


  public GetArticlesResponse publishedTimestamp(OffsetDateTime publishedTimestamp) {
    this.publishedTimestamp = publishedTimestamp;
    return this;
  }

  /**
   * Crossposting or published date time
   * @return publishedTimestamp
   */
  @javax.annotation.Nonnull
  public OffsetDateTime getPublishedTimestamp() {
    return publishedTimestamp;
  }

  public void setPublishedTimestamp(OffsetDateTime publishedTimestamp) {
    this.publishedTimestamp = publishedTimestamp;
  }


  public GetArticlesResponse readablePublishDate(String readablePublishDate) {
    this.readablePublishDate = readablePublishDate;
    return this;
  }

  /**
   * Get readablePublishDate
   * @return readablePublishDate
   */
  @javax.annotation.Nonnull
  public String getReadablePublishDate() {
    return readablePublishDate;
  }

  public void setReadablePublishDate(String readablePublishDate) {
    this.readablePublishDate = readablePublishDate;
  }


  public GetArticlesResponse readingTimeMinutes(Integer readingTimeMinutes) {
    this.readingTimeMinutes = readingTimeMinutes;
    return this;
  }

  /**
   * Reading time, in minutes
   * @return readingTimeMinutes
   */
  @javax.annotation.Nonnull
  public Integer getReadingTimeMinutes() {
    return readingTimeMinutes;
  }

  public void setReadingTimeMinutes(Integer readingTimeMinutes) {
    this.readingTimeMinutes = readingTimeMinutes;
  }


  public GetArticlesResponse slug(String slug) {
    this.slug = slug;
    return this;
  }

  /**
   * Get slug
   * @return slug
   */
  @javax.annotation.Nonnull
  public String getSlug() {
    return slug;
  }

  public void setSlug(String slug) {
    this.slug = slug;
  }


  public GetArticlesResponse socialImage(String socialImage) {
    this.socialImage = socialImage;
    return this;
  }

  /**
   * Get socialImage
   * @return socialImage
   */
  @javax.annotation.Nonnull
  public String getSocialImage() {
    return socialImage;
  }

  public void setSocialImage(String socialImage) {
    this.socialImage = socialImage;
  }


  public GetArticlesResponse tagList(List<String> tagList) {
    this.tagList = tagList;
    return this;
  }

  public GetArticlesResponse addTagListItem(String tagListItem) {
    if (this.tagList == null) {
      this.tagList = new ArrayList<>();
    }
    this.tagList.add(tagListItem);
    return this;
  }

  /**
   * An array representation of the tags that are associated with an article
   * @return tagList
   */
  @javax.annotation.Nonnull
  public List<String> getTagList() {
    return tagList;
  }

  public void setTagList(List<String> tagList) {
    this.tagList = tagList;
  }


  public GetArticlesResponse tags(String tags) {
    this.tags = tags;
    return this;
  }

  /**
   * An array representation of the tags that are associated with an article
   * @return tags
   */
  @javax.annotation.Nonnull
  public String getTags() {
    return tags;
  }

  public void setTags(String tags) {
    this.tags = tags;
  }


  public GetArticlesResponse title(String title) {
    this.title = title;
    return this;
  }

  /**
   * The article title
   * @return title
   */
  @javax.annotation.Nonnull
  public String getTitle() {
    return title;
  }

  public void setTitle(String title) {
    this.title = title;
  }


  public GetArticlesResponse typeOf(String typeOf) {
    this.typeOf = typeOf;
    return this;
  }

  /**
   * Get typeOf
   * @return typeOf
   */
  @javax.annotation.Nonnull
  public String getTypeOf() {
    return typeOf;
  }

  public void setTypeOf(String typeOf) {
    this.typeOf = typeOf;
  }


  public GetArticlesResponse url(String url) {
    this.url = url;
    return this;
  }

  /**
   * The url of the article. Can be used to link to the article.
   * @return url
   */
  @javax.annotation.Nonnull
  public String getUrl() {
    return url;
  }

  public void setUrl(String url) {
    this.url = url;
  }


  public GetArticlesResponse user(SharedUser user) {
    this.user = user;
    return this;
  }

  /**
   * Get user
   * @return user
   */
  @javax.annotation.Nonnull
  public SharedUser getUser() {
    return user;
  }

  public void setUser(SharedUser user) {
    this.user = user;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    GetArticlesResponse getArticlesResponse = (GetArticlesResponse) o;
    return Objects.equals(this.bodyMarkdown, getArticlesResponse.bodyMarkdown) &&
        Objects.equals(this.canonicalUrl, getArticlesResponse.canonicalUrl) &&
        Objects.equals(this.coverImage, getArticlesResponse.coverImage) &&
        Objects.equals(this.createdAt, getArticlesResponse.createdAt) &&
        Objects.equals(this.crosspostedAt, getArticlesResponse.crosspostedAt) &&
        Objects.equals(this.description, getArticlesResponse.description) &&
        Objects.equals(this.editedAt, getArticlesResponse.editedAt) &&
        Objects.equals(this.id, getArticlesResponse.id) &&
        Objects.equals(this.lastCommentAt, getArticlesResponse.lastCommentAt) &&
        Objects.equals(this.organization, getArticlesResponse.organization) &&
        Objects.equals(this.path, getArticlesResponse.path) &&
        Objects.equals(this.positiveReactionsCount, getArticlesResponse.positiveReactionsCount) &&
        Objects.equals(this.publicReactionsCount, getArticlesResponse.publicReactionsCount) &&
        Objects.equals(this.publishedAt, getArticlesResponse.publishedAt) &&
        Objects.equals(this.publishedTimestamp, getArticlesResponse.publishedTimestamp) &&
        Objects.equals(this.readablePublishDate, getArticlesResponse.readablePublishDate) &&
        Objects.equals(this.readingTimeMinutes, getArticlesResponse.readingTimeMinutes) &&
        Objects.equals(this.slug, getArticlesResponse.slug) &&
        Objects.equals(this.socialImage, getArticlesResponse.socialImage) &&
        Objects.equals(this.tagList, getArticlesResponse.tagList) &&
        Objects.equals(this.tags, getArticlesResponse.tags) &&
        Objects.equals(this.title, getArticlesResponse.title) &&
        Objects.equals(this.typeOf, getArticlesResponse.typeOf) &&
        Objects.equals(this.url, getArticlesResponse.url) &&
        Objects.equals(this.user, getArticlesResponse.user);
  }

  @Override
  public int hashCode() {
    return Objects.hash(bodyMarkdown, canonicalUrl, coverImage, createdAt, crosspostedAt, description, editedAt, id, lastCommentAt, organization, path, positiveReactionsCount, publicReactionsCount, publishedAt, publishedTimestamp, readablePublishDate, readingTimeMinutes, slug, socialImage, tagList, tags, title, typeOf, url, user);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class GetArticlesResponse {\n");
    sb.append("    bodyMarkdown: ").append(toIndentedString(bodyMarkdown)).append("\n");
    sb.append("    canonicalUrl: ").append(toIndentedString(canonicalUrl)).append("\n");
    sb.append("    coverImage: ").append(toIndentedString(coverImage)).append("\n");
    sb.append("    createdAt: ").append(toIndentedString(createdAt)).append("\n");
    sb.append("    crosspostedAt: ").append(toIndentedString(crosspostedAt)).append("\n");
    sb.append("    description: ").append(toIndentedString(description)).append("\n");
    sb.append("    editedAt: ").append(toIndentedString(editedAt)).append("\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    lastCommentAt: ").append(toIndentedString(lastCommentAt)).append("\n");
    sb.append("    organization: ").append(toIndentedString(organization)).append("\n");
    sb.append("    path: ").append(toIndentedString(path)).append("\n");
    sb.append("    positiveReactionsCount: ").append(toIndentedString(positiveReactionsCount)).append("\n");
    sb.append("    publicReactionsCount: ").append(toIndentedString(publicReactionsCount)).append("\n");
    sb.append("    publishedAt: ").append(toIndentedString(publishedAt)).append("\n");
    sb.append("    publishedTimestamp: ").append(toIndentedString(publishedTimestamp)).append("\n");
    sb.append("    readablePublishDate: ").append(toIndentedString(readablePublishDate)).append("\n");
    sb.append("    readingTimeMinutes: ").append(toIndentedString(readingTimeMinutes)).append("\n");
    sb.append("    slug: ").append(toIndentedString(slug)).append("\n");
    sb.append("    socialImage: ").append(toIndentedString(socialImage)).append("\n");
    sb.append("    tagList: ").append(toIndentedString(tagList)).append("\n");
    sb.append("    tags: ").append(toIndentedString(tags)).append("\n");
    sb.append("    title: ").append(toIndentedString(title)).append("\n");
    sb.append("    typeOf: ").append(toIndentedString(typeOf)).append("\n");
    sb.append("    url: ").append(toIndentedString(url)).append("\n");
    sb.append("    user: ").append(toIndentedString(user)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("body_markdown");
    openapiFields.add("canonical_url");
    openapiFields.add("cover_image");
    openapiFields.add("created_at");
    openapiFields.add("crossposted_at");
    openapiFields.add("description");
    openapiFields.add("edited_at");
    openapiFields.add("id");
    openapiFields.add("last_comment_at");
    openapiFields.add("organization");
    openapiFields.add("path");
    openapiFields.add("positive_reactions_count");
    openapiFields.add("public_reactions_count");
    openapiFields.add("published_at");
    openapiFields.add("published_timestamp");
    openapiFields.add("readable_publish_date");
    openapiFields.add("reading_time_minutes");
    openapiFields.add("slug");
    openapiFields.add("social_image");
    openapiFields.add("tag_list");
    openapiFields.add("tags");
    openapiFields.add("title");
    openapiFields.add("type_of");
    openapiFields.add("url");
    openapiFields.add("user");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("canonical_url");
    openapiRequiredFields.add("cover_image");
    openapiRequiredFields.add("created_at");
    openapiRequiredFields.add("crossposted_at");
    openapiRequiredFields.add("description");
    openapiRequiredFields.add("edited_at");
    openapiRequiredFields.add("id");
    openapiRequiredFields.add("last_comment_at");
    openapiRequiredFields.add("path");
    openapiRequiredFields.add("positive_reactions_count");
    openapiRequiredFields.add("public_reactions_count");
    openapiRequiredFields.add("published_at");
    openapiRequiredFields.add("published_timestamp");
    openapiRequiredFields.add("readable_publish_date");
    openapiRequiredFields.add("reading_time_minutes");
    openapiRequiredFields.add("slug");
    openapiRequiredFields.add("social_image");
    openapiRequiredFields.add("tag_list");
    openapiRequiredFields.add("tags");
    openapiRequiredFields.add("title");
    openapiRequiredFields.add("type_of");
    openapiRequiredFields.add("url");
    openapiRequiredFields.add("user");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to GetArticlesResponse
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!GetArticlesResponse.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in GetArticlesResponse is not found in the empty JSON string", GetArticlesResponse.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!GetArticlesResponse.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `GetArticlesResponse` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : GetArticlesResponse.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("body_markdown") != null && !jsonObj.get("body_markdown").isJsonNull()) && !jsonObj.get("body_markdown").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `body_markdown` to be a primitive type in the JSON string but got `%s`", jsonObj.get("body_markdown").toString()));
      }
      if (!jsonObj.get("canonical_url").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `canonical_url` to be a primitive type in the JSON string but got `%s`", jsonObj.get("canonical_url").toString()));
      }
      if ((jsonObj.get("cover_image") != null && !jsonObj.get("cover_image").isJsonNull()) && !jsonObj.get("cover_image").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `cover_image` to be a primitive type in the JSON string but got `%s`", jsonObj.get("cover_image").toString()));
      }
      if (!jsonObj.get("description").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `description` to be a primitive type in the JSON string but got `%s`", jsonObj.get("description").toString()));
      }
      // validate the optional field `organization`
      if (jsonObj.get("organization") != null && !jsonObj.get("organization").isJsonNull()) {
        SharedOrganization.validateJsonElement(jsonObj.get("organization"));
      }
      if (!jsonObj.get("path").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `path` to be a primitive type in the JSON string but got `%s`", jsonObj.get("path").toString()));
      }
      if (!jsonObj.get("readable_publish_date").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `readable_publish_date` to be a primitive type in the JSON string but got `%s`", jsonObj.get("readable_publish_date").toString()));
      }
      if (!jsonObj.get("slug").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `slug` to be a primitive type in the JSON string but got `%s`", jsonObj.get("slug").toString()));
      }
      if (!jsonObj.get("social_image").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `social_image` to be a primitive type in the JSON string but got `%s`", jsonObj.get("social_image").toString()));
      }
      // ensure the required json array is present
      if (jsonObj.get("tag_list") == null) {
        throw new IllegalArgumentException("Expected the field `linkedContent` to be an array in the JSON string but got `null`");
      } else if (!jsonObj.get("tag_list").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `tag_list` to be an array in the JSON string but got `%s`", jsonObj.get("tag_list").toString()));
      }
      if (!jsonObj.get("tags").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `tags` to be a primitive type in the JSON string but got `%s`", jsonObj.get("tags").toString()));
      }
      if (!jsonObj.get("title").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `title` to be a primitive type in the JSON string but got `%s`", jsonObj.get("title").toString()));
      }
      if (!jsonObj.get("type_of").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `type_of` to be a primitive type in the JSON string but got `%s`", jsonObj.get("type_of").toString()));
      }
      if (!jsonObj.get("url").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `url` to be a primitive type in the JSON string but got `%s`", jsonObj.get("url").toString()));
      }
      // validate the required field `user`
      SharedUser.validateJsonElement(jsonObj.get("user"));
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!GetArticlesResponse.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'GetArticlesResponse' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<GetArticlesResponse> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(GetArticlesResponse.class));

       return (TypeAdapter<T>) new TypeAdapter<GetArticlesResponse>() {
           @Override
           public void write(JsonWriter out, GetArticlesResponse value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public GetArticlesResponse read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of GetArticlesResponse given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of GetArticlesResponse
   * @throws IOException if the JSON string is invalid with respect to GetArticlesResponse
   */
  public static GetArticlesResponse fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, GetArticlesResponse.class);
  }

  /**
   * Convert an instance of GetArticlesResponse to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

