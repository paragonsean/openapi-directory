/**
 * Forem API V1
 * Access Forem articles, users and other resources via API.         For a real-world example of Forem in action, check out [DEV](https://www.dev.to).         All endpoints can be accessed with the 'api-key' header and a accept header, but         some of them are accessible publicly without authentication.          Dates and date times, unless otherwise specified, must be in         the [RFC 3339](https://tools.ietf.org/html/rfc3339) format.
 *
 * The version of the OpenAPI document: 1.0.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAIDisplayAd.h
 *
 * A Display Ad, aka Billboard, aka Widget
 */

#ifndef OAIDisplayAd_H
#define OAIDisplayAd_H

#include <QJsonObject>

#include <QString>

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {

class OAIDisplayAd : public OAIObject {
public:
    OAIDisplayAd();
    OAIDisplayAd(QString json);
    ~OAIDisplayAd() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    bool isApproved() const;
    void setApproved(const bool &approved);
    bool is_approved_Set() const;
    bool is_approved_Valid() const;

    QString getArticleExcludeIds() const;
    void setArticleExcludeIds(const QString &article_exclude_ids);
    bool is_article_exclude_ids_Set() const;
    bool is_article_exclude_ids_Valid() const;

    QString getBodyMarkdown() const;
    void setBodyMarkdown(const QString &body_markdown);
    bool is_body_markdown_Set() const;
    bool is_body_markdown_Valid() const;

    qint32 getCreatorId() const;
    void setCreatorId(const qint32 &creator_id);
    bool is_creator_id_Set() const;
    bool is_creator_id_Valid() const;

    QString getDisplayTo() const;
    void setDisplayTo(const QString &display_to);
    bool is_display_to_Set() const;
    bool is_display_to_Valid() const;

    qint32 getId() const;
    void setId(const qint32 &id);
    bool is_id_Set() const;
    bool is_id_Valid() const;

    QString getName() const;
    void setName(const QString &name);
    bool is_name_Set() const;
    bool is_name_Valid() const;

    qint32 getOrganizationId() const;
    void setOrganizationId(const qint32 &organization_id);
    bool is_organization_id_Set() const;
    bool is_organization_id_Valid() const;

    QString getPlacementArea() const;
    void setPlacementArea(const QString &placement_area);
    bool is_placement_area_Set() const;
    bool is_placement_area_Valid() const;

    bool isPublished() const;
    void setPublished(const bool &published);
    bool is_published_Set() const;
    bool is_published_Valid() const;

    QString getTagList() const;
    void setTagList(const QString &tag_list);
    bool is_tag_list_Set() const;
    bool is_tag_list_Valid() const;

    QString getTypeOf() const;
    void setTypeOf(const QString &type_of);
    bool is_type_of_Set() const;
    bool is_type_of_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    bool m_approved;
    bool m_approved_isSet;
    bool m_approved_isValid;

    QString m_article_exclude_ids;
    bool m_article_exclude_ids_isSet;
    bool m_article_exclude_ids_isValid;

    QString m_body_markdown;
    bool m_body_markdown_isSet;
    bool m_body_markdown_isValid;

    qint32 m_creator_id;
    bool m_creator_id_isSet;
    bool m_creator_id_isValid;

    QString m_display_to;
    bool m_display_to_isSet;
    bool m_display_to_isValid;

    qint32 m_id;
    bool m_id_isSet;
    bool m_id_isValid;

    QString m_name;
    bool m_name_isSet;
    bool m_name_isValid;

    qint32 m_organization_id;
    bool m_organization_id_isSet;
    bool m_organization_id_isValid;

    QString m_placement_area;
    bool m_placement_area_isSet;
    bool m_placement_area_isValid;

    bool m_published;
    bool m_published_isSet;
    bool m_published_isValid;

    QString m_tag_list;
    bool m_tag_list_isSet;
    bool m_tag_list_isValid;

    QString m_type_of;
    bool m_type_of_isSet;
    bool m_type_of_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAIDisplayAd)

#endif // OAIDisplayAd_H
