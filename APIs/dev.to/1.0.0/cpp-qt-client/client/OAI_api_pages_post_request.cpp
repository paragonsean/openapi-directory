/**
 * Forem API V1
 * Access Forem articles, users and other resources via API.         For a real-world example of Forem in action, check out [DEV](https://www.dev.to).         All endpoints can be accessed with the 'api-key' header and a accept header, but         some of them are accessible publicly without authentication.          Dates and date times, unless otherwise specified, must be in         the [RFC 3339](https://tools.ietf.org/html/rfc3339) format.
 *
 * The version of the OpenAPI document: 1.0.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAI_api_pages_post_request.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAI_api_pages_post_request::OAI_api_pages_post_request(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAI_api_pages_post_request::OAI_api_pages_post_request() {
    this->initializeModel();
}

OAI_api_pages_post_request::~OAI_api_pages_post_request() {}

void OAI_api_pages_post_request::initializeModel() {

    m_body_json_isSet = false;
    m_body_json_isValid = false;

    m_body_markdown_isSet = false;
    m_body_markdown_isValid = false;

    m_description_isSet = false;
    m_description_isValid = false;

    m_is_top_level_path_isSet = false;
    m_is_top_level_path_isValid = false;

    m_slug_isSet = false;
    m_slug_isValid = false;

    m_r_template_isSet = false;
    m_r_template_isValid = false;

    m_title_isSet = false;
    m_title_isValid = false;
}

void OAI_api_pages_post_request::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAI_api_pages_post_request::fromJsonObject(QJsonObject json) {

    m_body_json_isValid = ::OpenAPI::fromJsonValue(m_body_json, json[QString("body_json")]);
    m_body_json_isSet = !json[QString("body_json")].isNull() && m_body_json_isValid;

    m_body_markdown_isValid = ::OpenAPI::fromJsonValue(m_body_markdown, json[QString("body_markdown")]);
    m_body_markdown_isSet = !json[QString("body_markdown")].isNull() && m_body_markdown_isValid;

    m_description_isValid = ::OpenAPI::fromJsonValue(m_description, json[QString("description")]);
    m_description_isSet = !json[QString("description")].isNull() && m_description_isValid;

    m_is_top_level_path_isValid = ::OpenAPI::fromJsonValue(m_is_top_level_path, json[QString("is_top_level_path")]);
    m_is_top_level_path_isSet = !json[QString("is_top_level_path")].isNull() && m_is_top_level_path_isValid;

    m_slug_isValid = ::OpenAPI::fromJsonValue(m_slug, json[QString("slug")]);
    m_slug_isSet = !json[QString("slug")].isNull() && m_slug_isValid;

    m_r_template_isValid = ::OpenAPI::fromJsonValue(m_r_template, json[QString("template")]);
    m_r_template_isSet = !json[QString("template")].isNull() && m_r_template_isValid;

    m_title_isValid = ::OpenAPI::fromJsonValue(m_title, json[QString("title")]);
    m_title_isSet = !json[QString("title")].isNull() && m_title_isValid;
}

QString OAI_api_pages_post_request::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAI_api_pages_post_request::asJsonObject() const {
    QJsonObject obj;
    if (m_body_json_isSet) {
        obj.insert(QString("body_json"), ::OpenAPI::toJsonValue(m_body_json));
    }
    if (m_body_markdown_isSet) {
        obj.insert(QString("body_markdown"), ::OpenAPI::toJsonValue(m_body_markdown));
    }
    if (m_description_isSet) {
        obj.insert(QString("description"), ::OpenAPI::toJsonValue(m_description));
    }
    if (m_is_top_level_path_isSet) {
        obj.insert(QString("is_top_level_path"), ::OpenAPI::toJsonValue(m_is_top_level_path));
    }
    if (m_slug_isSet) {
        obj.insert(QString("slug"), ::OpenAPI::toJsonValue(m_slug));
    }
    if (m_r_template_isSet) {
        obj.insert(QString("template"), ::OpenAPI::toJsonValue(m_r_template));
    }
    if (m_title_isSet) {
        obj.insert(QString("title"), ::OpenAPI::toJsonValue(m_title));
    }
    return obj;
}

QString OAI_api_pages_post_request::getBodyJson() const {
    return m_body_json;
}
void OAI_api_pages_post_request::setBodyJson(const QString &body_json) {
    m_body_json = body_json;
    m_body_json_isSet = true;
}

bool OAI_api_pages_post_request::is_body_json_Set() const{
    return m_body_json_isSet;
}

bool OAI_api_pages_post_request::is_body_json_Valid() const{
    return m_body_json_isValid;
}

QString OAI_api_pages_post_request::getBodyMarkdown() const {
    return m_body_markdown;
}
void OAI_api_pages_post_request::setBodyMarkdown(const QString &body_markdown) {
    m_body_markdown = body_markdown;
    m_body_markdown_isSet = true;
}

bool OAI_api_pages_post_request::is_body_markdown_Set() const{
    return m_body_markdown_isSet;
}

bool OAI_api_pages_post_request::is_body_markdown_Valid() const{
    return m_body_markdown_isValid;
}

QString OAI_api_pages_post_request::getDescription() const {
    return m_description;
}
void OAI_api_pages_post_request::setDescription(const QString &description) {
    m_description = description;
    m_description_isSet = true;
}

bool OAI_api_pages_post_request::is_description_Set() const{
    return m_description_isSet;
}

bool OAI_api_pages_post_request::is_description_Valid() const{
    return m_description_isValid;
}

bool OAI_api_pages_post_request::isIsTopLevelPath() const {
    return m_is_top_level_path;
}
void OAI_api_pages_post_request::setIsTopLevelPath(const bool &is_top_level_path) {
    m_is_top_level_path = is_top_level_path;
    m_is_top_level_path_isSet = true;
}

bool OAI_api_pages_post_request::is_is_top_level_path_Set() const{
    return m_is_top_level_path_isSet;
}

bool OAI_api_pages_post_request::is_is_top_level_path_Valid() const{
    return m_is_top_level_path_isValid;
}

QString OAI_api_pages_post_request::getSlug() const {
    return m_slug;
}
void OAI_api_pages_post_request::setSlug(const QString &slug) {
    m_slug = slug;
    m_slug_isSet = true;
}

bool OAI_api_pages_post_request::is_slug_Set() const{
    return m_slug_isSet;
}

bool OAI_api_pages_post_request::is_slug_Valid() const{
    return m_slug_isValid;
}

QString OAI_api_pages_post_request::getRTemplate() const {
    return m_r_template;
}
void OAI_api_pages_post_request::setRTemplate(const QString &r_template) {
    m_r_template = r_template;
    m_r_template_isSet = true;
}

bool OAI_api_pages_post_request::is_r_template_Set() const{
    return m_r_template_isSet;
}

bool OAI_api_pages_post_request::is_r_template_Valid() const{
    return m_r_template_isValid;
}

QString OAI_api_pages_post_request::getTitle() const {
    return m_title;
}
void OAI_api_pages_post_request::setTitle(const QString &title) {
    m_title = title;
    m_title_isSet = true;
}

bool OAI_api_pages_post_request::is_title_Set() const{
    return m_title_isSet;
}

bool OAI_api_pages_post_request::is_title_Valid() const{
    return m_title_isValid;
}

bool OAI_api_pages_post_request::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_body_json_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_body_markdown_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_description_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_is_top_level_path_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_slug_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_r_template_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_title_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAI_api_pages_post_request::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
