/**
 * Forem API V1
 * Access Forem articles, users and other resources via API.         For a real-world example of Forem in action, check out [DEV](https://www.dev.to).         All endpoints can be accessed with the 'api-key' header and a accept header, but         some of them are accessible publicly without authentication.          Dates and date times, unless otherwise specified, must be in         the [RFC 3339](https://tools.ietf.org/html/rfc3339) format.
 *
 * The version of the OpenAPI document: 1.0.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIDisplayAd.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIDisplayAd::OAIDisplayAd(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIDisplayAd::OAIDisplayAd() {
    this->initializeModel();
}

OAIDisplayAd::~OAIDisplayAd() {}

void OAIDisplayAd::initializeModel() {

    m_approved_isSet = false;
    m_approved_isValid = false;

    m_article_exclude_ids_isSet = false;
    m_article_exclude_ids_isValid = false;

    m_body_markdown_isSet = false;
    m_body_markdown_isValid = false;

    m_creator_id_isSet = false;
    m_creator_id_isValid = false;

    m_display_to_isSet = false;
    m_display_to_isValid = false;

    m_id_isSet = false;
    m_id_isValid = false;

    m_name_isSet = false;
    m_name_isValid = false;

    m_organization_id_isSet = false;
    m_organization_id_isValid = false;

    m_placement_area_isSet = false;
    m_placement_area_isValid = false;

    m_published_isSet = false;
    m_published_isValid = false;

    m_tag_list_isSet = false;
    m_tag_list_isValid = false;

    m_type_of_isSet = false;
    m_type_of_isValid = false;
}

void OAIDisplayAd::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIDisplayAd::fromJsonObject(QJsonObject json) {

    m_approved_isValid = ::OpenAPI::fromJsonValue(m_approved, json[QString("approved")]);
    m_approved_isSet = !json[QString("approved")].isNull() && m_approved_isValid;

    m_article_exclude_ids_isValid = ::OpenAPI::fromJsonValue(m_article_exclude_ids, json[QString("article_exclude_ids")]);
    m_article_exclude_ids_isSet = !json[QString("article_exclude_ids")].isNull() && m_article_exclude_ids_isValid;

    m_body_markdown_isValid = ::OpenAPI::fromJsonValue(m_body_markdown, json[QString("body_markdown")]);
    m_body_markdown_isSet = !json[QString("body_markdown")].isNull() && m_body_markdown_isValid;

    m_creator_id_isValid = ::OpenAPI::fromJsonValue(m_creator_id, json[QString("creator_id")]);
    m_creator_id_isSet = !json[QString("creator_id")].isNull() && m_creator_id_isValid;

    m_display_to_isValid = ::OpenAPI::fromJsonValue(m_display_to, json[QString("display_to")]);
    m_display_to_isSet = !json[QString("display_to")].isNull() && m_display_to_isValid;

    m_id_isValid = ::OpenAPI::fromJsonValue(m_id, json[QString("id")]);
    m_id_isSet = !json[QString("id")].isNull() && m_id_isValid;

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("name")]);
    m_name_isSet = !json[QString("name")].isNull() && m_name_isValid;

    m_organization_id_isValid = ::OpenAPI::fromJsonValue(m_organization_id, json[QString("organization_id")]);
    m_organization_id_isSet = !json[QString("organization_id")].isNull() && m_organization_id_isValid;

    m_placement_area_isValid = ::OpenAPI::fromJsonValue(m_placement_area, json[QString("placement_area")]);
    m_placement_area_isSet = !json[QString("placement_area")].isNull() && m_placement_area_isValid;

    m_published_isValid = ::OpenAPI::fromJsonValue(m_published, json[QString("published")]);
    m_published_isSet = !json[QString("published")].isNull() && m_published_isValid;

    m_tag_list_isValid = ::OpenAPI::fromJsonValue(m_tag_list, json[QString("tag_list")]);
    m_tag_list_isSet = !json[QString("tag_list")].isNull() && m_tag_list_isValid;

    m_type_of_isValid = ::OpenAPI::fromJsonValue(m_type_of, json[QString("type_of")]);
    m_type_of_isSet = !json[QString("type_of")].isNull() && m_type_of_isValid;
}

QString OAIDisplayAd::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIDisplayAd::asJsonObject() const {
    QJsonObject obj;
    if (m_approved_isSet) {
        obj.insert(QString("approved"), ::OpenAPI::toJsonValue(m_approved));
    }
    if (m_article_exclude_ids_isSet) {
        obj.insert(QString("article_exclude_ids"), ::OpenAPI::toJsonValue(m_article_exclude_ids));
    }
    if (m_body_markdown_isSet) {
        obj.insert(QString("body_markdown"), ::OpenAPI::toJsonValue(m_body_markdown));
    }
    if (m_creator_id_isSet) {
        obj.insert(QString("creator_id"), ::OpenAPI::toJsonValue(m_creator_id));
    }
    if (m_display_to_isSet) {
        obj.insert(QString("display_to"), ::OpenAPI::toJsonValue(m_display_to));
    }
    if (m_id_isSet) {
        obj.insert(QString("id"), ::OpenAPI::toJsonValue(m_id));
    }
    if (m_name_isSet) {
        obj.insert(QString("name"), ::OpenAPI::toJsonValue(m_name));
    }
    if (m_organization_id_isSet) {
        obj.insert(QString("organization_id"), ::OpenAPI::toJsonValue(m_organization_id));
    }
    if (m_placement_area_isSet) {
        obj.insert(QString("placement_area"), ::OpenAPI::toJsonValue(m_placement_area));
    }
    if (m_published_isSet) {
        obj.insert(QString("published"), ::OpenAPI::toJsonValue(m_published));
    }
    if (m_tag_list_isSet) {
        obj.insert(QString("tag_list"), ::OpenAPI::toJsonValue(m_tag_list));
    }
    if (m_type_of_isSet) {
        obj.insert(QString("type_of"), ::OpenAPI::toJsonValue(m_type_of));
    }
    return obj;
}

bool OAIDisplayAd::isApproved() const {
    return m_approved;
}
void OAIDisplayAd::setApproved(const bool &approved) {
    m_approved = approved;
    m_approved_isSet = true;
}

bool OAIDisplayAd::is_approved_Set() const{
    return m_approved_isSet;
}

bool OAIDisplayAd::is_approved_Valid() const{
    return m_approved_isValid;
}

QString OAIDisplayAd::getArticleExcludeIds() const {
    return m_article_exclude_ids;
}
void OAIDisplayAd::setArticleExcludeIds(const QString &article_exclude_ids) {
    m_article_exclude_ids = article_exclude_ids;
    m_article_exclude_ids_isSet = true;
}

bool OAIDisplayAd::is_article_exclude_ids_Set() const{
    return m_article_exclude_ids_isSet;
}

bool OAIDisplayAd::is_article_exclude_ids_Valid() const{
    return m_article_exclude_ids_isValid;
}

QString OAIDisplayAd::getBodyMarkdown() const {
    return m_body_markdown;
}
void OAIDisplayAd::setBodyMarkdown(const QString &body_markdown) {
    m_body_markdown = body_markdown;
    m_body_markdown_isSet = true;
}

bool OAIDisplayAd::is_body_markdown_Set() const{
    return m_body_markdown_isSet;
}

bool OAIDisplayAd::is_body_markdown_Valid() const{
    return m_body_markdown_isValid;
}

qint32 OAIDisplayAd::getCreatorId() const {
    return m_creator_id;
}
void OAIDisplayAd::setCreatorId(const qint32 &creator_id) {
    m_creator_id = creator_id;
    m_creator_id_isSet = true;
}

bool OAIDisplayAd::is_creator_id_Set() const{
    return m_creator_id_isSet;
}

bool OAIDisplayAd::is_creator_id_Valid() const{
    return m_creator_id_isValid;
}

QString OAIDisplayAd::getDisplayTo() const {
    return m_display_to;
}
void OAIDisplayAd::setDisplayTo(const QString &display_to) {
    m_display_to = display_to;
    m_display_to_isSet = true;
}

bool OAIDisplayAd::is_display_to_Set() const{
    return m_display_to_isSet;
}

bool OAIDisplayAd::is_display_to_Valid() const{
    return m_display_to_isValid;
}

qint32 OAIDisplayAd::getId() const {
    return m_id;
}
void OAIDisplayAd::setId(const qint32 &id) {
    m_id = id;
    m_id_isSet = true;
}

bool OAIDisplayAd::is_id_Set() const{
    return m_id_isSet;
}

bool OAIDisplayAd::is_id_Valid() const{
    return m_id_isValid;
}

QString OAIDisplayAd::getName() const {
    return m_name;
}
void OAIDisplayAd::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAIDisplayAd::is_name_Set() const{
    return m_name_isSet;
}

bool OAIDisplayAd::is_name_Valid() const{
    return m_name_isValid;
}

qint32 OAIDisplayAd::getOrganizationId() const {
    return m_organization_id;
}
void OAIDisplayAd::setOrganizationId(const qint32 &organization_id) {
    m_organization_id = organization_id;
    m_organization_id_isSet = true;
}

bool OAIDisplayAd::is_organization_id_Set() const{
    return m_organization_id_isSet;
}

bool OAIDisplayAd::is_organization_id_Valid() const{
    return m_organization_id_isValid;
}

QString OAIDisplayAd::getPlacementArea() const {
    return m_placement_area;
}
void OAIDisplayAd::setPlacementArea(const QString &placement_area) {
    m_placement_area = placement_area;
    m_placement_area_isSet = true;
}

bool OAIDisplayAd::is_placement_area_Set() const{
    return m_placement_area_isSet;
}

bool OAIDisplayAd::is_placement_area_Valid() const{
    return m_placement_area_isValid;
}

bool OAIDisplayAd::isPublished() const {
    return m_published;
}
void OAIDisplayAd::setPublished(const bool &published) {
    m_published = published;
    m_published_isSet = true;
}

bool OAIDisplayAd::is_published_Set() const{
    return m_published_isSet;
}

bool OAIDisplayAd::is_published_Valid() const{
    return m_published_isValid;
}

QString OAIDisplayAd::getTagList() const {
    return m_tag_list;
}
void OAIDisplayAd::setTagList(const QString &tag_list) {
    m_tag_list = tag_list;
    m_tag_list_isSet = true;
}

bool OAIDisplayAd::is_tag_list_Set() const{
    return m_tag_list_isSet;
}

bool OAIDisplayAd::is_tag_list_Valid() const{
    return m_tag_list_isValid;
}

QString OAIDisplayAd::getTypeOf() const {
    return m_type_of;
}
void OAIDisplayAd::setTypeOf(const QString &type_of) {
    m_type_of = type_of;
    m_type_of_isSet = true;
}

bool OAIDisplayAd::is_type_of_Set() const{
    return m_type_of_isSet;
}

bool OAIDisplayAd::is_type_of_Valid() const{
    return m_type_of_isValid;
}

bool OAIDisplayAd::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_approved_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_article_exclude_ids_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_body_markdown_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_creator_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_display_to_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_organization_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_placement_area_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_published_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_tag_list_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_type_of_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIDisplayAd::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_body_markdown_isValid && m_name_isValid && m_placement_area_isValid && true;
}

} // namespace OpenAPI
