/**
 * Forem API V1
 * Access Forem articles, users and other resources via API.         For a real-world example of Forem in action, check out [DEV](https://www.dev.to).         All endpoints can be accessed with the 'api-key' header and a accept header, but         some of them are accessible publicly without authentication.          Dates and date times, unless otherwise specified, must be in         the [RFC 3339](https://tools.ietf.org/html/rfc3339) format.
 *
 * The version of the OpenAPI document: 1.0.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIComment.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIComment::OAIComment(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIComment::OAIComment() {
    this->initializeModel();
}

OAIComment::~OAIComment() {}

void OAIComment::initializeModel() {

    m_created_at_isSet = false;
    m_created_at_isValid = false;

    m_id_code_isSet = false;
    m_id_code_isValid = false;

    m_image_url_isSet = false;
    m_image_url_isValid = false;

    m_type_of_isSet = false;
    m_type_of_isValid = false;
}

void OAIComment::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIComment::fromJsonObject(QJsonObject json) {

    m_created_at_isValid = ::OpenAPI::fromJsonValue(m_created_at, json[QString("created_at")]);
    m_created_at_isSet = !json[QString("created_at")].isNull() && m_created_at_isValid;

    m_id_code_isValid = ::OpenAPI::fromJsonValue(m_id_code, json[QString("id_code")]);
    m_id_code_isSet = !json[QString("id_code")].isNull() && m_id_code_isValid;

    m_image_url_isValid = ::OpenAPI::fromJsonValue(m_image_url, json[QString("image_url")]);
    m_image_url_isSet = !json[QString("image_url")].isNull() && m_image_url_isValid;

    m_type_of_isValid = ::OpenAPI::fromJsonValue(m_type_of, json[QString("type_of")]);
    m_type_of_isSet = !json[QString("type_of")].isNull() && m_type_of_isValid;
}

QString OAIComment::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIComment::asJsonObject() const {
    QJsonObject obj;
    if (m_created_at_isSet) {
        obj.insert(QString("created_at"), ::OpenAPI::toJsonValue(m_created_at));
    }
    if (m_id_code_isSet) {
        obj.insert(QString("id_code"), ::OpenAPI::toJsonValue(m_id_code));
    }
    if (m_image_url_isSet) {
        obj.insert(QString("image_url"), ::OpenAPI::toJsonValue(m_image_url));
    }
    if (m_type_of_isSet) {
        obj.insert(QString("type_of"), ::OpenAPI::toJsonValue(m_type_of));
    }
    return obj;
}

QDateTime OAIComment::getCreatedAt() const {
    return m_created_at;
}
void OAIComment::setCreatedAt(const QDateTime &created_at) {
    m_created_at = created_at;
    m_created_at_isSet = true;
}

bool OAIComment::is_created_at_Set() const{
    return m_created_at_isSet;
}

bool OAIComment::is_created_at_Valid() const{
    return m_created_at_isValid;
}

QString OAIComment::getIdCode() const {
    return m_id_code;
}
void OAIComment::setIdCode(const QString &id_code) {
    m_id_code = id_code;
    m_id_code_isSet = true;
}

bool OAIComment::is_id_code_Set() const{
    return m_id_code_isSet;
}

bool OAIComment::is_id_code_Valid() const{
    return m_id_code_isValid;
}

QString OAIComment::getImageUrl() const {
    return m_image_url;
}
void OAIComment::setImageUrl(const QString &image_url) {
    m_image_url = image_url;
    m_image_url_isSet = true;
}

bool OAIComment::is_image_url_Set() const{
    return m_image_url_isSet;
}

bool OAIComment::is_image_url_Valid() const{
    return m_image_url_isValid;
}

QString OAIComment::getTypeOf() const {
    return m_type_of;
}
void OAIComment::setTypeOf(const QString &type_of) {
    m_type_of = type_of;
    m_type_of_isSet = true;
}

bool OAIComment::is_type_of_Set() const{
    return m_type_of_isSet;
}

bool OAIComment::is_type_of_Valid() const{
    return m_type_of_isValid;
}

bool OAIComment::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_created_at_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_id_code_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_image_url_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_type_of_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIComment::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
