/**
 * Forem API V1
 * Access Forem articles, users and other resources via API.         For a real-world example of Forem in action, check out [DEV](https://www.dev.to).         All endpoints can be accessed with the 'api-key' header and a accept header, but         some of them are accessible publicly without authentication.          Dates and date times, unless otherwise specified, must be in         the [RFC 3339](https://tools.ietf.org/html/rfc3339) format.
 *
 * The version of the OpenAPI document: 1.0.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAIVideoArticle.h
 *
 * Representation of an Article with video
 */

#ifndef OAIVideoArticle_H
#define OAIVideoArticle_H

#include <QJsonObject>

#include "OAIVideoArticle_user.h"
#include <QString>

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {
class OAIVideoArticle_user;

class OAIVideoArticle : public OAIObject {
public:
    OAIVideoArticle();
    OAIVideoArticle(QString json);
    ~OAIVideoArticle() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    QString getCloudinaryVideoUrl() const;
    void setCloudinaryVideoUrl(const QString &cloudinary_video_url);
    bool is_cloudinary_video_url_Set() const;
    bool is_cloudinary_video_url_Valid() const;

    qint64 getId() const;
    void setId(const qint64 &id);
    bool is_id_Set() const;
    bool is_id_Valid() const;

    QString getPath() const;
    void setPath(const QString &path);
    bool is_path_Set() const;
    bool is_path_Valid() const;

    QString getTitle() const;
    void setTitle(const QString &title);
    bool is_title_Set() const;
    bool is_title_Valid() const;

    QString getTypeOf() const;
    void setTypeOf(const QString &type_of);
    bool is_type_of_Set() const;
    bool is_type_of_Valid() const;

    OAIVideoArticle_user getUser() const;
    void setUser(const OAIVideoArticle_user &user);
    bool is_user_Set() const;
    bool is_user_Valid() const;

    qint64 getUserId() const;
    void setUserId(const qint64 &user_id);
    bool is_user_id_Set() const;
    bool is_user_id_Valid() const;

    QString getVideoDurationInMinutes() const;
    void setVideoDurationInMinutes(const QString &video_duration_in_minutes);
    bool is_video_duration_in_minutes_Set() const;
    bool is_video_duration_in_minutes_Valid() const;

    QString getVideoSourceUrl() const;
    void setVideoSourceUrl(const QString &video_source_url);
    bool is_video_source_url_Set() const;
    bool is_video_source_url_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    QString m_cloudinary_video_url;
    bool m_cloudinary_video_url_isSet;
    bool m_cloudinary_video_url_isValid;

    qint64 m_id;
    bool m_id_isSet;
    bool m_id_isValid;

    QString m_path;
    bool m_path_isSet;
    bool m_path_isValid;

    QString m_title;
    bool m_title_isSet;
    bool m_title_isValid;

    QString m_type_of;
    bool m_type_of_isSet;
    bool m_type_of_isValid;

    OAIVideoArticle_user m_user;
    bool m_user_isSet;
    bool m_user_isValid;

    qint64 m_user_id;
    bool m_user_id_isSet;
    bool m_user_id_isValid;

    QString m_video_duration_in_minutes;
    bool m_video_duration_in_minutes_isSet;
    bool m_video_duration_in_minutes_isValid;

    QString m_video_source_url;
    bool m_video_source_url_isSet;
    bool m_video_source_url_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAIVideoArticle)

#endif // OAIVideoArticle_H
