/**
 * Forem API V1
 * Access Forem articles, users and other resources via API.         For a real-world example of Forem in action, check out [DEV](https://www.dev.to).         All endpoints can be accessed with the 'api-key' header and a accept header, but         some of them are accessible publicly without authentication.          Dates and date times, unless otherwise specified, must be in         the [RFC 3339](https://tools.ietf.org/html/rfc3339) format.
 *
 * The version of the OpenAPI document: 1.0.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#ifndef OAI_OAIUsersApi_H
#define OAI_OAIUsersApi_H

#include "OAIHelpers.h"
#include "OAIHttpRequest.h"
#include "OAIServerConfiguration.h"
#include "OAIOauth.h"

#include "OAIArticleIndex.h"
#include "OAIUser.h"
#include "OAIUserInviteParam.h"
#include <QString>

#include <QObject>
#include <QByteArray>
#include <QStringList>
#include <QList>
#include <QNetworkAccessManager>

namespace OpenAPI {

class OAIUsersApi : public QObject {
    Q_OBJECT

public:
    OAIUsersApi(const int timeOut = 0);
    ~OAIUsersApi();

    void initializeServerConfigs();
    int setDefaultServerValue(int serverIndex,const QString &operation, const QString &variable,const QString &val);
    void setServerIndex(const QString &operation, int serverIndex);
    void setApiKey(const QString &apiKeyName, const QString &apiKey);
    void setBearerToken(const QString &token);
    void setUsername(const QString &username);
    void setPassword(const QString &password);
    void setTimeOut(const int timeOut);
    void setWorkingDirectory(const QString &path);
    void setNetworkAccessManager(QNetworkAccessManager* manager);
    int addServerConfiguration(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables = QMap<QString, OAIServerVariable>());
    void setNewServerForAllOperations(const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void setNewServer(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void addHeaders(const QString &key, const QString &value);
    void enableRequestCompression();
    void enableResponseCompression();
    void abortRequests();
    QString getParamStylePrefix(const QString &style);
    QString getParamStyleSuffix(const QString &style);
    QString getParamStyleDelimiter(const QString &style, const QString &name, bool isExplode);

    /**
    * @param[in]  username QString [required]
    * @param[in]  page qint32 [optional]
    * @param[in]  per_page qint32 [optional]
    */
    virtual void getOrgUsers(const QString &username, const ::OpenAPI::OptionalParam<qint32> &page = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint32> &per_page = ::OpenAPI::OptionalParam<qint32>());

    /**
    * @param[in]  id QString [required]
    */
    virtual void getUser(const QString &id);

    /**
    * @param[in]  page qint32 [optional]
    * @param[in]  per_page qint32 [optional]
    */
    virtual void getUserAllArticles(const ::OpenAPI::OptionalParam<qint32> &page = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint32> &per_page = ::OpenAPI::OptionalParam<qint32>());

    /**
    * @param[in]  page qint32 [optional]
    * @param[in]  per_page qint32 [optional]
    */
    virtual void getUserArticles(const ::OpenAPI::OptionalParam<qint32> &page = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint32> &per_page = ::OpenAPI::OptionalParam<qint32>());


    virtual void getUserMe();

    /**
    * @param[in]  page qint32 [optional]
    * @param[in]  per_page qint32 [optional]
    */
    virtual void getUserPublishedArticles(const ::OpenAPI::OptionalParam<qint32> &page = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint32> &per_page = ::OpenAPI::OptionalParam<qint32>());

    /**
    * @param[in]  page qint32 [optional]
    * @param[in]  per_page qint32 [optional]
    */
    virtual void getUserUnpublishedArticles(const ::OpenAPI::OptionalParam<qint32> &page = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint32> &per_page = ::OpenAPI::OptionalParam<qint32>());

    /**
    * @param[in]  oai_user_invite_param OAIUserInviteParam [optional]
    */
    virtual void postAdminUsersCreate(const ::OpenAPI::OptionalParam<OAIUserInviteParam> &oai_user_invite_param = ::OpenAPI::OptionalParam<OAIUserInviteParam>());

    /**
    * @param[in]  id qint32 [required]
    */
    virtual void suspendUser(const qint32 &id);

    /**
    * @param[in]  id qint32 [required]
    */
    virtual void unpublishUser(const qint32 &id);


private:
    QMap<QString,int> _serverIndices;
    QMap<QString,QList<OAIServerConfiguration>> _serverConfigs;
    QMap<QString, QString> _apiKeys;
    QString _bearerToken;
    QString _username;
    QString _password;
    int _timeOut;
    QString _workingDirectory;
    QNetworkAccessManager* _manager;
    QMap<QString, QString> _defaultHeaders;
    bool _isResponseCompressionEnabled;
    bool _isRequestCompressionEnabled;
    OAIHttpRequestInput _latestInput;
    OAIHttpRequestWorker *_latestWorker;
    QStringList _latestScope;
    OauthCode _authFlow;
    OauthImplicit _implicitFlow;
    OauthCredentials _credentialFlow;
    OauthPassword _passwordFlow;
    int _OauthMethod = 0;

    void getOrgUsersCallback(OAIHttpRequestWorker *worker);
    void getUserCallback(OAIHttpRequestWorker *worker);
    void getUserAllArticlesCallback(OAIHttpRequestWorker *worker);
    void getUserArticlesCallback(OAIHttpRequestWorker *worker);
    void getUserMeCallback(OAIHttpRequestWorker *worker);
    void getUserPublishedArticlesCallback(OAIHttpRequestWorker *worker);
    void getUserUnpublishedArticlesCallback(OAIHttpRequestWorker *worker);
    void postAdminUsersCreateCallback(OAIHttpRequestWorker *worker);
    void suspendUserCallback(OAIHttpRequestWorker *worker);
    void unpublishUserCallback(OAIHttpRequestWorker *worker);

Q_SIGNALS:

    void getOrgUsersSignal(QList<OAIUser> summary);
    void getUserSignal(QList<OAIUser> summary);
    void getUserAllArticlesSignal(QList<OAIArticleIndex> summary);
    void getUserArticlesSignal(QList<OAIArticleIndex> summary);
    void getUserMeSignal(QList<OAIUser> summary);
    void getUserPublishedArticlesSignal(QList<OAIArticleIndex> summary);
    void getUserUnpublishedArticlesSignal(QList<OAIArticleIndex> summary);
    void postAdminUsersCreateSignal();
    void suspendUserSignal();
    void unpublishUserSignal();


    void getOrgUsersSignalFull(OAIHttpRequestWorker *worker, QList<OAIUser> summary);
    void getUserSignalFull(OAIHttpRequestWorker *worker, QList<OAIUser> summary);
    void getUserAllArticlesSignalFull(OAIHttpRequestWorker *worker, QList<OAIArticleIndex> summary);
    void getUserArticlesSignalFull(OAIHttpRequestWorker *worker, QList<OAIArticleIndex> summary);
    void getUserMeSignalFull(OAIHttpRequestWorker *worker, QList<OAIUser> summary);
    void getUserPublishedArticlesSignalFull(OAIHttpRequestWorker *worker, QList<OAIArticleIndex> summary);
    void getUserUnpublishedArticlesSignalFull(OAIHttpRequestWorker *worker, QList<OAIArticleIndex> summary);
    void postAdminUsersCreateSignalFull(OAIHttpRequestWorker *worker);
    void suspendUserSignalFull(OAIHttpRequestWorker *worker);
    void unpublishUserSignalFull(OAIHttpRequestWorker *worker);

    Q_DECL_DEPRECATED_X("Use getOrgUsersSignalError() instead")
    void getOrgUsersSignalE(QList<OAIUser> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getOrgUsersSignalError(QList<OAIUser> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getUserSignalError() instead")
    void getUserSignalE(QList<OAIUser> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getUserSignalError(QList<OAIUser> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getUserAllArticlesSignalError() instead")
    void getUserAllArticlesSignalE(QList<OAIArticleIndex> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getUserAllArticlesSignalError(QList<OAIArticleIndex> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getUserArticlesSignalError() instead")
    void getUserArticlesSignalE(QList<OAIArticleIndex> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getUserArticlesSignalError(QList<OAIArticleIndex> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getUserMeSignalError() instead")
    void getUserMeSignalE(QList<OAIUser> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getUserMeSignalError(QList<OAIUser> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getUserPublishedArticlesSignalError() instead")
    void getUserPublishedArticlesSignalE(QList<OAIArticleIndex> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getUserPublishedArticlesSignalError(QList<OAIArticleIndex> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getUserUnpublishedArticlesSignalError() instead")
    void getUserUnpublishedArticlesSignalE(QList<OAIArticleIndex> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getUserUnpublishedArticlesSignalError(QList<OAIArticleIndex> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use postAdminUsersCreateSignalError() instead")
    void postAdminUsersCreateSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void postAdminUsersCreateSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use suspendUserSignalError() instead")
    void suspendUserSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void suspendUserSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use unpublishUserSignalError() instead")
    void unpublishUserSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void unpublishUserSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);

    Q_DECL_DEPRECATED_X("Use getOrgUsersSignalErrorFull() instead")
    void getOrgUsersSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getOrgUsersSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getUserSignalErrorFull() instead")
    void getUserSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getUserSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getUserAllArticlesSignalErrorFull() instead")
    void getUserAllArticlesSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getUserAllArticlesSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getUserArticlesSignalErrorFull() instead")
    void getUserArticlesSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getUserArticlesSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getUserMeSignalErrorFull() instead")
    void getUserMeSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getUserMeSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getUserPublishedArticlesSignalErrorFull() instead")
    void getUserPublishedArticlesSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getUserPublishedArticlesSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getUserUnpublishedArticlesSignalErrorFull() instead")
    void getUserUnpublishedArticlesSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getUserUnpublishedArticlesSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use postAdminUsersCreateSignalErrorFull() instead")
    void postAdminUsersCreateSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void postAdminUsersCreateSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use suspendUserSignalErrorFull() instead")
    void suspendUserSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void suspendUserSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use unpublishUserSignalErrorFull() instead")
    void unpublishUserSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void unpublishUserSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);

    void abortRequestsSignal();
    void allPendingRequestsCompleted();

public Q_SLOTS:
    void tokenAvailable();
};

} // namespace OpenAPI
#endif
