/**
 * Forem API V1
 * Access Forem articles, users and other resources via API.         For a real-world example of Forem in action, check out [DEV](https://www.dev.to).         All endpoints can be accessed with the 'api-key' header and a accept header, but         some of them are accessible publicly without authentication.          Dates and date times, unless otherwise specified, must be in         the [RFC 3339](https://tools.ietf.org/html/rfc3339) format.
 *
 * The version of the OpenAPI document: 1.0.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAISharedPodcast.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAISharedPodcast::OAISharedPodcast(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAISharedPodcast::OAISharedPodcast() {
    this->initializeModel();
}

OAISharedPodcast::~OAISharedPodcast() {}

void OAISharedPodcast::initializeModel() {

    m_image_url_isSet = false;
    m_image_url_isValid = false;

    m_slug_isSet = false;
    m_slug_isValid = false;

    m_title_isSet = false;
    m_title_isValid = false;
}

void OAISharedPodcast::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAISharedPodcast::fromJsonObject(QJsonObject json) {

    m_image_url_isValid = ::OpenAPI::fromJsonValue(m_image_url, json[QString("image_url")]);
    m_image_url_isSet = !json[QString("image_url")].isNull() && m_image_url_isValid;

    m_slug_isValid = ::OpenAPI::fromJsonValue(m_slug, json[QString("slug")]);
    m_slug_isSet = !json[QString("slug")].isNull() && m_slug_isValid;

    m_title_isValid = ::OpenAPI::fromJsonValue(m_title, json[QString("title")]);
    m_title_isSet = !json[QString("title")].isNull() && m_title_isValid;
}

QString OAISharedPodcast::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAISharedPodcast::asJsonObject() const {
    QJsonObject obj;
    if (m_image_url_isSet) {
        obj.insert(QString("image_url"), ::OpenAPI::toJsonValue(m_image_url));
    }
    if (m_slug_isSet) {
        obj.insert(QString("slug"), ::OpenAPI::toJsonValue(m_slug));
    }
    if (m_title_isSet) {
        obj.insert(QString("title"), ::OpenAPI::toJsonValue(m_title));
    }
    return obj;
}

QString OAISharedPodcast::getImageUrl() const {
    return m_image_url;
}
void OAISharedPodcast::setImageUrl(const QString &image_url) {
    m_image_url = image_url;
    m_image_url_isSet = true;
}

bool OAISharedPodcast::is_image_url_Set() const{
    return m_image_url_isSet;
}

bool OAISharedPodcast::is_image_url_Valid() const{
    return m_image_url_isValid;
}

QString OAISharedPodcast::getSlug() const {
    return m_slug;
}
void OAISharedPodcast::setSlug(const QString &slug) {
    m_slug = slug;
    m_slug_isSet = true;
}

bool OAISharedPodcast::is_slug_Set() const{
    return m_slug_isSet;
}

bool OAISharedPodcast::is_slug_Valid() const{
    return m_slug_isValid;
}

QString OAISharedPodcast::getTitle() const {
    return m_title;
}
void OAISharedPodcast::setTitle(const QString &title) {
    m_title = title;
    m_title_isSet = true;
}

bool OAISharedPodcast::is_title_Set() const{
    return m_title_isSet;
}

bool OAISharedPodcast::is_title_Valid() const{
    return m_title_isValid;
}

bool OAISharedPodcast::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_image_url_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_slug_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_title_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAISharedPodcast::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
