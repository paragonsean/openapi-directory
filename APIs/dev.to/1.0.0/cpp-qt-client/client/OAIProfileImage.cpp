/**
 * Forem API V1
 * Access Forem articles, users and other resources via API.         For a real-world example of Forem in action, check out [DEV](https://www.dev.to).         All endpoints can be accessed with the 'api-key' header and a accept header, but         some of them are accessible publicly without authentication.          Dates and date times, unless otherwise specified, must be in         the [RFC 3339](https://tools.ietf.org/html/rfc3339) format.
 *
 * The version of the OpenAPI document: 1.0.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIProfileImage.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIProfileImage::OAIProfileImage(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIProfileImage::OAIProfileImage() {
    this->initializeModel();
}

OAIProfileImage::~OAIProfileImage() {}

void OAIProfileImage::initializeModel() {

    m_image_of_isSet = false;
    m_image_of_isValid = false;

    m_profile_image_isSet = false;
    m_profile_image_isValid = false;

    m_profile_image_90_isSet = false;
    m_profile_image_90_isValid = false;

    m_type_of_isSet = false;
    m_type_of_isValid = false;
}

void OAIProfileImage::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIProfileImage::fromJsonObject(QJsonObject json) {

    m_image_of_isValid = ::OpenAPI::fromJsonValue(m_image_of, json[QString("image_of")]);
    m_image_of_isSet = !json[QString("image_of")].isNull() && m_image_of_isValid;

    m_profile_image_isValid = ::OpenAPI::fromJsonValue(m_profile_image, json[QString("profile_image")]);
    m_profile_image_isSet = !json[QString("profile_image")].isNull() && m_profile_image_isValid;

    m_profile_image_90_isValid = ::OpenAPI::fromJsonValue(m_profile_image_90, json[QString("profile_image_90")]);
    m_profile_image_90_isSet = !json[QString("profile_image_90")].isNull() && m_profile_image_90_isValid;

    m_type_of_isValid = ::OpenAPI::fromJsonValue(m_type_of, json[QString("type_of")]);
    m_type_of_isSet = !json[QString("type_of")].isNull() && m_type_of_isValid;
}

QString OAIProfileImage::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIProfileImage::asJsonObject() const {
    QJsonObject obj;
    if (m_image_of_isSet) {
        obj.insert(QString("image_of"), ::OpenAPI::toJsonValue(m_image_of));
    }
    if (m_profile_image_isSet) {
        obj.insert(QString("profile_image"), ::OpenAPI::toJsonValue(m_profile_image));
    }
    if (m_profile_image_90_isSet) {
        obj.insert(QString("profile_image_90"), ::OpenAPI::toJsonValue(m_profile_image_90));
    }
    if (m_type_of_isSet) {
        obj.insert(QString("type_of"), ::OpenAPI::toJsonValue(m_type_of));
    }
    return obj;
}

QString OAIProfileImage::getImageOf() const {
    return m_image_of;
}
void OAIProfileImage::setImageOf(const QString &image_of) {
    m_image_of = image_of;
    m_image_of_isSet = true;
}

bool OAIProfileImage::is_image_of_Set() const{
    return m_image_of_isSet;
}

bool OAIProfileImage::is_image_of_Valid() const{
    return m_image_of_isValid;
}

QString OAIProfileImage::getProfileImage() const {
    return m_profile_image;
}
void OAIProfileImage::setProfileImage(const QString &profile_image) {
    m_profile_image = profile_image;
    m_profile_image_isSet = true;
}

bool OAIProfileImage::is_profile_image_Set() const{
    return m_profile_image_isSet;
}

bool OAIProfileImage::is_profile_image_Valid() const{
    return m_profile_image_isValid;
}

QString OAIProfileImage::getProfileImage90() const {
    return m_profile_image_90;
}
void OAIProfileImage::setProfileImage90(const QString &profile_image_90) {
    m_profile_image_90 = profile_image_90;
    m_profile_image_90_isSet = true;
}

bool OAIProfileImage::is_profile_image_90_Set() const{
    return m_profile_image_90_isSet;
}

bool OAIProfileImage::is_profile_image_90_Valid() const{
    return m_profile_image_90_isValid;
}

QString OAIProfileImage::getTypeOf() const {
    return m_type_of;
}
void OAIProfileImage::setTypeOf(const QString &type_of) {
    m_type_of = type_of;
    m_type_of_isSet = true;
}

bool OAIProfileImage::is_type_of_Set() const{
    return m_type_of_isSet;
}

bool OAIProfileImage::is_type_of_Valid() const{
    return m_type_of_isValid;
}

bool OAIProfileImage::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_image_of_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_profile_image_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_profile_image_90_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_type_of_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIProfileImage::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
