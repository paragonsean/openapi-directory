/**
 * Forem API V1
 * Access Forem articles, users and other resources via API.         For a real-world example of Forem in action, check out [DEV](https://www.dev.to).         All endpoints can be accessed with the 'api-key' header and a accept header, but         some of them are accessible publicly without authentication.          Dates and date times, unless otherwise specified, must be in         the [RFC 3339](https://tools.ietf.org/html/rfc3339) format.
 *
 * The version of the OpenAPI document: 1.0.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIUser.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIUser::OAIUser(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIUser::OAIUser() {
    this->initializeModel();
}

OAIUser::~OAIUser() {}

void OAIUser::initializeModel() {

    m_github_username_isSet = false;
    m_github_username_isValid = false;

    m_id_isSet = false;
    m_id_isValid = false;

    m_joined_at_isSet = false;
    m_joined_at_isValid = false;

    m_location_isSet = false;
    m_location_isValid = false;

    m_name_isSet = false;
    m_name_isValid = false;

    m_profile_image_isSet = false;
    m_profile_image_isValid = false;

    m_summary_isSet = false;
    m_summary_isValid = false;

    m_twitter_username_isSet = false;
    m_twitter_username_isValid = false;

    m_type_of_isSet = false;
    m_type_of_isValid = false;

    m_username_isSet = false;
    m_username_isValid = false;

    m_website_url_isSet = false;
    m_website_url_isValid = false;
}

void OAIUser::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIUser::fromJsonObject(QJsonObject json) {

    m_github_username_isValid = ::OpenAPI::fromJsonValue(m_github_username, json[QString("github_username")]);
    m_github_username_isSet = !json[QString("github_username")].isNull() && m_github_username_isValid;

    m_id_isValid = ::OpenAPI::fromJsonValue(m_id, json[QString("id")]);
    m_id_isSet = !json[QString("id")].isNull() && m_id_isValid;

    m_joined_at_isValid = ::OpenAPI::fromJsonValue(m_joined_at, json[QString("joined_at")]);
    m_joined_at_isSet = !json[QString("joined_at")].isNull() && m_joined_at_isValid;

    m_location_isValid = ::OpenAPI::fromJsonValue(m_location, json[QString("location")]);
    m_location_isSet = !json[QString("location")].isNull() && m_location_isValid;

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("name")]);
    m_name_isSet = !json[QString("name")].isNull() && m_name_isValid;

    m_profile_image_isValid = ::OpenAPI::fromJsonValue(m_profile_image, json[QString("profile_image")]);
    m_profile_image_isSet = !json[QString("profile_image")].isNull() && m_profile_image_isValid;

    m_summary_isValid = ::OpenAPI::fromJsonValue(m_summary, json[QString("summary")]);
    m_summary_isSet = !json[QString("summary")].isNull() && m_summary_isValid;

    m_twitter_username_isValid = ::OpenAPI::fromJsonValue(m_twitter_username, json[QString("twitter_username")]);
    m_twitter_username_isSet = !json[QString("twitter_username")].isNull() && m_twitter_username_isValid;

    m_type_of_isValid = ::OpenAPI::fromJsonValue(m_type_of, json[QString("type_of")]);
    m_type_of_isSet = !json[QString("type_of")].isNull() && m_type_of_isValid;

    m_username_isValid = ::OpenAPI::fromJsonValue(m_username, json[QString("username")]);
    m_username_isSet = !json[QString("username")].isNull() && m_username_isValid;

    m_website_url_isValid = ::OpenAPI::fromJsonValue(m_website_url, json[QString("website_url")]);
    m_website_url_isSet = !json[QString("website_url")].isNull() && m_website_url_isValid;
}

QString OAIUser::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIUser::asJsonObject() const {
    QJsonObject obj;
    if (m_github_username_isSet) {
        obj.insert(QString("github_username"), ::OpenAPI::toJsonValue(m_github_username));
    }
    if (m_id_isSet) {
        obj.insert(QString("id"), ::OpenAPI::toJsonValue(m_id));
    }
    if (m_joined_at_isSet) {
        obj.insert(QString("joined_at"), ::OpenAPI::toJsonValue(m_joined_at));
    }
    if (m_location_isSet) {
        obj.insert(QString("location"), ::OpenAPI::toJsonValue(m_location));
    }
    if (m_name_isSet) {
        obj.insert(QString("name"), ::OpenAPI::toJsonValue(m_name));
    }
    if (m_profile_image_isSet) {
        obj.insert(QString("profile_image"), ::OpenAPI::toJsonValue(m_profile_image));
    }
    if (m_summary_isSet) {
        obj.insert(QString("summary"), ::OpenAPI::toJsonValue(m_summary));
    }
    if (m_twitter_username_isSet) {
        obj.insert(QString("twitter_username"), ::OpenAPI::toJsonValue(m_twitter_username));
    }
    if (m_type_of_isSet) {
        obj.insert(QString("type_of"), ::OpenAPI::toJsonValue(m_type_of));
    }
    if (m_username_isSet) {
        obj.insert(QString("username"), ::OpenAPI::toJsonValue(m_username));
    }
    if (m_website_url_isSet) {
        obj.insert(QString("website_url"), ::OpenAPI::toJsonValue(m_website_url));
    }
    return obj;
}

QString OAIUser::getGithubUsername() const {
    return m_github_username;
}
void OAIUser::setGithubUsername(const QString &github_username) {
    m_github_username = github_username;
    m_github_username_isSet = true;
}

bool OAIUser::is_github_username_Set() const{
    return m_github_username_isSet;
}

bool OAIUser::is_github_username_Valid() const{
    return m_github_username_isValid;
}

qint64 OAIUser::getId() const {
    return m_id;
}
void OAIUser::setId(const qint64 &id) {
    m_id = id;
    m_id_isSet = true;
}

bool OAIUser::is_id_Set() const{
    return m_id_isSet;
}

bool OAIUser::is_id_Valid() const{
    return m_id_isValid;
}

QString OAIUser::getJoinedAt() const {
    return m_joined_at;
}
void OAIUser::setJoinedAt(const QString &joined_at) {
    m_joined_at = joined_at;
    m_joined_at_isSet = true;
}

bool OAIUser::is_joined_at_Set() const{
    return m_joined_at_isSet;
}

bool OAIUser::is_joined_at_Valid() const{
    return m_joined_at_isValid;
}

QString OAIUser::getLocation() const {
    return m_location;
}
void OAIUser::setLocation(const QString &location) {
    m_location = location;
    m_location_isSet = true;
}

bool OAIUser::is_location_Set() const{
    return m_location_isSet;
}

bool OAIUser::is_location_Valid() const{
    return m_location_isValid;
}

QString OAIUser::getName() const {
    return m_name;
}
void OAIUser::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAIUser::is_name_Set() const{
    return m_name_isSet;
}

bool OAIUser::is_name_Valid() const{
    return m_name_isValid;
}

QString OAIUser::getProfileImage() const {
    return m_profile_image;
}
void OAIUser::setProfileImage(const QString &profile_image) {
    m_profile_image = profile_image;
    m_profile_image_isSet = true;
}

bool OAIUser::is_profile_image_Set() const{
    return m_profile_image_isSet;
}

bool OAIUser::is_profile_image_Valid() const{
    return m_profile_image_isValid;
}

QString OAIUser::getSummary() const {
    return m_summary;
}
void OAIUser::setSummary(const QString &summary) {
    m_summary = summary;
    m_summary_isSet = true;
}

bool OAIUser::is_summary_Set() const{
    return m_summary_isSet;
}

bool OAIUser::is_summary_Valid() const{
    return m_summary_isValid;
}

QString OAIUser::getTwitterUsername() const {
    return m_twitter_username;
}
void OAIUser::setTwitterUsername(const QString &twitter_username) {
    m_twitter_username = twitter_username;
    m_twitter_username_isSet = true;
}

bool OAIUser::is_twitter_username_Set() const{
    return m_twitter_username_isSet;
}

bool OAIUser::is_twitter_username_Valid() const{
    return m_twitter_username_isValid;
}

QString OAIUser::getTypeOf() const {
    return m_type_of;
}
void OAIUser::setTypeOf(const QString &type_of) {
    m_type_of = type_of;
    m_type_of_isSet = true;
}

bool OAIUser::is_type_of_Set() const{
    return m_type_of_isSet;
}

bool OAIUser::is_type_of_Valid() const{
    return m_type_of_isValid;
}

QString OAIUser::getUsername() const {
    return m_username;
}
void OAIUser::setUsername(const QString &username) {
    m_username = username;
    m_username_isSet = true;
}

bool OAIUser::is_username_Set() const{
    return m_username_isSet;
}

bool OAIUser::is_username_Valid() const{
    return m_username_isValid;
}

QString OAIUser::getWebsiteUrl() const {
    return m_website_url;
}
void OAIUser::setWebsiteUrl(const QString &website_url) {
    m_website_url = website_url;
    m_website_url_isSet = true;
}

bool OAIUser::is_website_url_Set() const{
    return m_website_url_isSet;
}

bool OAIUser::is_website_url_Valid() const{
    return m_website_url_isValid;
}

bool OAIUser::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_github_username_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_joined_at_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_location_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_profile_image_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_summary_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_twitter_username_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_type_of_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_username_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_website_url_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIUser::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
