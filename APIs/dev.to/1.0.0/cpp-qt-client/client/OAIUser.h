/**
 * Forem API V1
 * Access Forem articles, users and other resources via API.         For a real-world example of Forem in action, check out [DEV](https://www.dev.to).         All endpoints can be accessed with the 'api-key' header and a accept header, but         some of them are accessible publicly without authentication.          Dates and date times, unless otherwise specified, must be in         the [RFC 3339](https://tools.ietf.org/html/rfc3339) format.
 *
 * The version of the OpenAPI document: 1.0.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAIUser.h
 *
 * The representation of a user
 */

#ifndef OAIUser_H
#define OAIUser_H

#include <QJsonObject>

#include <QString>

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {

class OAIUser : public OAIObject {
public:
    OAIUser();
    OAIUser(QString json);
    ~OAIUser() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    QString getGithubUsername() const;
    void setGithubUsername(const QString &github_username);
    bool is_github_username_Set() const;
    bool is_github_username_Valid() const;

    qint64 getId() const;
    void setId(const qint64 &id);
    bool is_id_Set() const;
    bool is_id_Valid() const;

    QString getJoinedAt() const;
    void setJoinedAt(const QString &joined_at);
    bool is_joined_at_Set() const;
    bool is_joined_at_Valid() const;

    QString getLocation() const;
    void setLocation(const QString &location);
    bool is_location_Set() const;
    bool is_location_Valid() const;

    QString getName() const;
    void setName(const QString &name);
    bool is_name_Set() const;
    bool is_name_Valid() const;

    QString getProfileImage() const;
    void setProfileImage(const QString &profile_image);
    bool is_profile_image_Set() const;
    bool is_profile_image_Valid() const;

    QString getSummary() const;
    void setSummary(const QString &summary);
    bool is_summary_Set() const;
    bool is_summary_Valid() const;

    QString getTwitterUsername() const;
    void setTwitterUsername(const QString &twitter_username);
    bool is_twitter_username_Set() const;
    bool is_twitter_username_Valid() const;

    QString getTypeOf() const;
    void setTypeOf(const QString &type_of);
    bool is_type_of_Set() const;
    bool is_type_of_Valid() const;

    QString getUsername() const;
    void setUsername(const QString &username);
    bool is_username_Set() const;
    bool is_username_Valid() const;

    QString getWebsiteUrl() const;
    void setWebsiteUrl(const QString &website_url);
    bool is_website_url_Set() const;
    bool is_website_url_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    QString m_github_username;
    bool m_github_username_isSet;
    bool m_github_username_isValid;

    qint64 m_id;
    bool m_id_isSet;
    bool m_id_isValid;

    QString m_joined_at;
    bool m_joined_at_isSet;
    bool m_joined_at_isValid;

    QString m_location;
    bool m_location_isSet;
    bool m_location_isValid;

    QString m_name;
    bool m_name_isSet;
    bool m_name_isValid;

    QString m_profile_image;
    bool m_profile_image_isSet;
    bool m_profile_image_isValid;

    QString m_summary;
    bool m_summary_isSet;
    bool m_summary_isValid;

    QString m_twitter_username;
    bool m_twitter_username_isSet;
    bool m_twitter_username_isValid;

    QString m_type_of;
    bool m_type_of_isSet;
    bool m_type_of_isValid;

    QString m_username;
    bool m_username_isSet;
    bool m_username_isValid;

    QString m_website_url;
    bool m_website_url_isSet;
    bool m_website_url_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAIUser)

#endif // OAIUser_H
