/**
 * Forem API V1
 * Access Forem articles, users and other resources via API.         For a real-world example of Forem in action, check out [DEV](https://www.dev.to).         All endpoints can be accessed with the 'api-key' header and a accept header, but         some of them are accessible publicly without authentication.          Dates and date times, unless otherwise specified, must be in         the [RFC 3339](https://tools.ietf.org/html/rfc3339) format.
 *
 * The version of the OpenAPI document: 1.0.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#ifndef OAI_OAIPagesApi_H
#define OAI_OAIPagesApi_H

#include "OAIHelpers.h"
#include "OAIHttpRequest.h"
#include "OAIServerConfiguration.h"
#include "OAIOauth.h"

#include "OAIPage.h"
#include "OAI_api_pages_post_request.h"
#include <QString>

#include <QObject>
#include <QByteArray>
#include <QStringList>
#include <QList>
#include <QNetworkAccessManager>

namespace OpenAPI {

class OAIPagesApi : public QObject {
    Q_OBJECT

public:
    OAIPagesApi(const int timeOut = 0);
    ~OAIPagesApi();

    void initializeServerConfigs();
    int setDefaultServerValue(int serverIndex,const QString &operation, const QString &variable,const QString &val);
    void setServerIndex(const QString &operation, int serverIndex);
    void setApiKey(const QString &apiKeyName, const QString &apiKey);
    void setBearerToken(const QString &token);
    void setUsername(const QString &username);
    void setPassword(const QString &password);
    void setTimeOut(const int timeOut);
    void setWorkingDirectory(const QString &path);
    void setNetworkAccessManager(QNetworkAccessManager* manager);
    int addServerConfiguration(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables = QMap<QString, OAIServerVariable>());
    void setNewServerForAllOperations(const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void setNewServer(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void addHeaders(const QString &key, const QString &value);
    void enableRequestCompression();
    void enableResponseCompression();
    void abortRequests();
    QString getParamStylePrefix(const QString &style);
    QString getParamStyleSuffix(const QString &style);
    QString getParamStyleDelimiter(const QString &style, const QString &name, bool isExplode);


    virtual void apiPagesGet();

    /**
    * @param[in]  id qint32 [required]
    */
    virtual void apiPagesIdDelete(const qint32 &id);

    /**
    * @param[in]  id qint32 [required]
    */
    virtual void apiPagesIdGet(const qint32 &id);

    /**
    * @param[in]  id qint32 [required]
    * @param[in]  oai_page OAIPage [optional]
    */
    virtual void apiPagesIdPut(const qint32 &id, const ::OpenAPI::OptionalParam<OAIPage> &oai_page = ::OpenAPI::OptionalParam<OAIPage>());

    /**
    * @param[in]  oai_api_pages_post_request OAI_api_pages_post_request [optional]
    */
    virtual void apiPagesPost(const ::OpenAPI::OptionalParam<OAI_api_pages_post_request> &oai_api_pages_post_request = ::OpenAPI::OptionalParam<OAI_api_pages_post_request>());


private:
    QMap<QString,int> _serverIndices;
    QMap<QString,QList<OAIServerConfiguration>> _serverConfigs;
    QMap<QString, QString> _apiKeys;
    QString _bearerToken;
    QString _username;
    QString _password;
    int _timeOut;
    QString _workingDirectory;
    QNetworkAccessManager* _manager;
    QMap<QString, QString> _defaultHeaders;
    bool _isResponseCompressionEnabled;
    bool _isRequestCompressionEnabled;
    OAIHttpRequestInput _latestInput;
    OAIHttpRequestWorker *_latestWorker;
    QStringList _latestScope;
    OauthCode _authFlow;
    OauthImplicit _implicitFlow;
    OauthCredentials _credentialFlow;
    OauthPassword _passwordFlow;
    int _OauthMethod = 0;

    void apiPagesGetCallback(OAIHttpRequestWorker *worker);
    void apiPagesIdDeleteCallback(OAIHttpRequestWorker *worker);
    void apiPagesIdGetCallback(OAIHttpRequestWorker *worker);
    void apiPagesIdPutCallback(OAIHttpRequestWorker *worker);
    void apiPagesPostCallback(OAIHttpRequestWorker *worker);

Q_SIGNALS:

    void apiPagesGetSignal(QList<OAIPage> summary);
    void apiPagesIdDeleteSignal(OAIPage summary);
    void apiPagesIdGetSignal(OAIPage summary);
    void apiPagesIdPutSignal(OAIPage summary);
    void apiPagesPostSignal();


    void apiPagesGetSignalFull(OAIHttpRequestWorker *worker, QList<OAIPage> summary);
    void apiPagesIdDeleteSignalFull(OAIHttpRequestWorker *worker, OAIPage summary);
    void apiPagesIdGetSignalFull(OAIHttpRequestWorker *worker, OAIPage summary);
    void apiPagesIdPutSignalFull(OAIHttpRequestWorker *worker, OAIPage summary);
    void apiPagesPostSignalFull(OAIHttpRequestWorker *worker);

    Q_DECL_DEPRECATED_X("Use apiPagesGetSignalError() instead")
    void apiPagesGetSignalE(QList<OAIPage> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void apiPagesGetSignalError(QList<OAIPage> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use apiPagesIdDeleteSignalError() instead")
    void apiPagesIdDeleteSignalE(OAIPage summary, QNetworkReply::NetworkError error_type, QString error_str);
    void apiPagesIdDeleteSignalError(OAIPage summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use apiPagesIdGetSignalError() instead")
    void apiPagesIdGetSignalE(OAIPage summary, QNetworkReply::NetworkError error_type, QString error_str);
    void apiPagesIdGetSignalError(OAIPage summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use apiPagesIdPutSignalError() instead")
    void apiPagesIdPutSignalE(OAIPage summary, QNetworkReply::NetworkError error_type, QString error_str);
    void apiPagesIdPutSignalError(OAIPage summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use apiPagesPostSignalError() instead")
    void apiPagesPostSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void apiPagesPostSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);

    Q_DECL_DEPRECATED_X("Use apiPagesGetSignalErrorFull() instead")
    void apiPagesGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void apiPagesGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use apiPagesIdDeleteSignalErrorFull() instead")
    void apiPagesIdDeleteSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void apiPagesIdDeleteSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use apiPagesIdGetSignalErrorFull() instead")
    void apiPagesIdGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void apiPagesIdGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use apiPagesIdPutSignalErrorFull() instead")
    void apiPagesIdPutSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void apiPagesIdPutSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use apiPagesPostSignalErrorFull() instead")
    void apiPagesPostSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void apiPagesPostSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);

    void abortRequestsSignal();
    void allPendingRequestsCompleted();

public Q_SLOTS:
    void tokenAvailable();
};

} // namespace OpenAPI
#endif
