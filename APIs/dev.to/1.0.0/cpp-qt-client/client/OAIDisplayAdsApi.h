/**
 * Forem API V1
 * Access Forem articles, users and other resources via API.         For a real-world example of Forem in action, check out [DEV](https://www.dev.to).         All endpoints can be accessed with the 'api-key' header and a accept header, but         some of them are accessible publicly without authentication.          Dates and date times, unless otherwise specified, must be in         the [RFC 3339](https://tools.ietf.org/html/rfc3339) format.
 *
 * The version of the OpenAPI document: 1.0.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#ifndef OAI_OAIDisplayAdsApi_H
#define OAI_OAIDisplayAdsApi_H

#include "OAIHelpers.h"
#include "OAIHttpRequest.h"
#include "OAIServerConfiguration.h"
#include "OAIOauth.h"

#include "OAIDisplayAd.h"
#include <QString>

#include <QObject>
#include <QByteArray>
#include <QStringList>
#include <QList>
#include <QNetworkAccessManager>

namespace OpenAPI {

class OAIDisplayAdsApi : public QObject {
    Q_OBJECT

public:
    OAIDisplayAdsApi(const int timeOut = 0);
    ~OAIDisplayAdsApi();

    void initializeServerConfigs();
    int setDefaultServerValue(int serverIndex,const QString &operation, const QString &variable,const QString &val);
    void setServerIndex(const QString &operation, int serverIndex);
    void setApiKey(const QString &apiKeyName, const QString &apiKey);
    void setBearerToken(const QString &token);
    void setUsername(const QString &username);
    void setPassword(const QString &password);
    void setTimeOut(const int timeOut);
    void setWorkingDirectory(const QString &path);
    void setNetworkAccessManager(QNetworkAccessManager* manager);
    int addServerConfiguration(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables = QMap<QString, OAIServerVariable>());
    void setNewServerForAllOperations(const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void setNewServer(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void addHeaders(const QString &key, const QString &value);
    void enableRequestCompression();
    void enableResponseCompression();
    void abortRequests();
    QString getParamStylePrefix(const QString &style);
    QString getParamStyleSuffix(const QString &style);
    QString getParamStyleDelimiter(const QString &style, const QString &name, bool isExplode);


    virtual void apiDisplayAdsGet();

    /**
    * @param[in]  id qint32 [required]
    */
    virtual void apiDisplayAdsIdGet(const qint32 &id);

    /**
    * @param[in]  id qint32 [required]
    * @param[in]  oai_display_ad QList<OAIDisplayAd> [optional]
    */
    virtual void apiDisplayAdsIdPut(const qint32 &id, const ::OpenAPI::OptionalParam<QList<OAIDisplayAd>> &oai_display_ad = ::OpenAPI::OptionalParam<QList<OAIDisplayAd>>());

    /**
    * @param[in]  id qint32 [required]
    */
    virtual void apiDisplayAdsIdUnpublishPut(const qint32 &id);

    /**
    * @param[in]  oai_display_ad QList<OAIDisplayAd> [optional]
    */
    virtual void apiDisplayAdsPost(const ::OpenAPI::OptionalParam<QList<OAIDisplayAd>> &oai_display_ad = ::OpenAPI::OptionalParam<QList<OAIDisplayAd>>());


private:
    QMap<QString,int> _serverIndices;
    QMap<QString,QList<OAIServerConfiguration>> _serverConfigs;
    QMap<QString, QString> _apiKeys;
    QString _bearerToken;
    QString _username;
    QString _password;
    int _timeOut;
    QString _workingDirectory;
    QNetworkAccessManager* _manager;
    QMap<QString, QString> _defaultHeaders;
    bool _isResponseCompressionEnabled;
    bool _isRequestCompressionEnabled;
    OAIHttpRequestInput _latestInput;
    OAIHttpRequestWorker *_latestWorker;
    QStringList _latestScope;
    OauthCode _authFlow;
    OauthImplicit _implicitFlow;
    OauthCredentials _credentialFlow;
    OauthPassword _passwordFlow;
    int _OauthMethod = 0;

    void apiDisplayAdsGetCallback(OAIHttpRequestWorker *worker);
    void apiDisplayAdsIdGetCallback(OAIHttpRequestWorker *worker);
    void apiDisplayAdsIdPutCallback(OAIHttpRequestWorker *worker);
    void apiDisplayAdsIdUnpublishPutCallback(OAIHttpRequestWorker *worker);
    void apiDisplayAdsPostCallback(OAIHttpRequestWorker *worker);

Q_SIGNALS:

    void apiDisplayAdsGetSignal(QList<OAIDisplayAd> summary);
    void apiDisplayAdsIdGetSignal();
    void apiDisplayAdsIdPutSignal(QList<OAIDisplayAd> summary);
    void apiDisplayAdsIdUnpublishPutSignal();
    void apiDisplayAdsPostSignal(QList<OAIDisplayAd> summary);


    void apiDisplayAdsGetSignalFull(OAIHttpRequestWorker *worker, QList<OAIDisplayAd> summary);
    void apiDisplayAdsIdGetSignalFull(OAIHttpRequestWorker *worker);
    void apiDisplayAdsIdPutSignalFull(OAIHttpRequestWorker *worker, QList<OAIDisplayAd> summary);
    void apiDisplayAdsIdUnpublishPutSignalFull(OAIHttpRequestWorker *worker);
    void apiDisplayAdsPostSignalFull(OAIHttpRequestWorker *worker, QList<OAIDisplayAd> summary);

    Q_DECL_DEPRECATED_X("Use apiDisplayAdsGetSignalError() instead")
    void apiDisplayAdsGetSignalE(QList<OAIDisplayAd> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void apiDisplayAdsGetSignalError(QList<OAIDisplayAd> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use apiDisplayAdsIdGetSignalError() instead")
    void apiDisplayAdsIdGetSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void apiDisplayAdsIdGetSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use apiDisplayAdsIdPutSignalError() instead")
    void apiDisplayAdsIdPutSignalE(QList<OAIDisplayAd> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void apiDisplayAdsIdPutSignalError(QList<OAIDisplayAd> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use apiDisplayAdsIdUnpublishPutSignalError() instead")
    void apiDisplayAdsIdUnpublishPutSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void apiDisplayAdsIdUnpublishPutSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use apiDisplayAdsPostSignalError() instead")
    void apiDisplayAdsPostSignalE(QList<OAIDisplayAd> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void apiDisplayAdsPostSignalError(QList<OAIDisplayAd> summary, QNetworkReply::NetworkError error_type, const QString &error_str);

    Q_DECL_DEPRECATED_X("Use apiDisplayAdsGetSignalErrorFull() instead")
    void apiDisplayAdsGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void apiDisplayAdsGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use apiDisplayAdsIdGetSignalErrorFull() instead")
    void apiDisplayAdsIdGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void apiDisplayAdsIdGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use apiDisplayAdsIdPutSignalErrorFull() instead")
    void apiDisplayAdsIdPutSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void apiDisplayAdsIdPutSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use apiDisplayAdsIdUnpublishPutSignalErrorFull() instead")
    void apiDisplayAdsIdUnpublishPutSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void apiDisplayAdsIdUnpublishPutSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use apiDisplayAdsPostSignalErrorFull() instead")
    void apiDisplayAdsPostSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void apiDisplayAdsPostSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);

    void abortRequestsSignal();
    void allPendingRequestsCompleted();

public Q_SLOTS:
    void tokenAvailable();
};

} // namespace OpenAPI
#endif
