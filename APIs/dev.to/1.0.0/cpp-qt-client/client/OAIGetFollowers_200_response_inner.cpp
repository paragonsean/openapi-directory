/**
 * Forem API V1
 * Access Forem articles, users and other resources via API.         For a real-world example of Forem in action, check out [DEV](https://www.dev.to).         All endpoints can be accessed with the 'api-key' header and a accept header, but         some of them are accessible publicly without authentication.          Dates and date times, unless otherwise specified, must be in         the [RFC 3339](https://tools.ietf.org/html/rfc3339) format.
 *
 * The version of the OpenAPI document: 1.0.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIGetFollowers_200_response_inner.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIGetFollowers_200_response_inner::OAIGetFollowers_200_response_inner(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIGetFollowers_200_response_inner::OAIGetFollowers_200_response_inner() {
    this->initializeModel();
}

OAIGetFollowers_200_response_inner::~OAIGetFollowers_200_response_inner() {}

void OAIGetFollowers_200_response_inner::initializeModel() {

    m_id_isSet = false;
    m_id_isValid = false;

    m_name_isSet = false;
    m_name_isValid = false;

    m_path_isSet = false;
    m_path_isValid = false;

    m_profile_image_isSet = false;
    m_profile_image_isValid = false;

    m_type_of_isSet = false;
    m_type_of_isValid = false;

    m_user_id_isSet = false;
    m_user_id_isValid = false;
}

void OAIGetFollowers_200_response_inner::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIGetFollowers_200_response_inner::fromJsonObject(QJsonObject json) {

    m_id_isValid = ::OpenAPI::fromJsonValue(m_id, json[QString("id")]);
    m_id_isSet = !json[QString("id")].isNull() && m_id_isValid;

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("name")]);
    m_name_isSet = !json[QString("name")].isNull() && m_name_isValid;

    m_path_isValid = ::OpenAPI::fromJsonValue(m_path, json[QString("path")]);
    m_path_isSet = !json[QString("path")].isNull() && m_path_isValid;

    m_profile_image_isValid = ::OpenAPI::fromJsonValue(m_profile_image, json[QString("profile_image")]);
    m_profile_image_isSet = !json[QString("profile_image")].isNull() && m_profile_image_isValid;

    m_type_of_isValid = ::OpenAPI::fromJsonValue(m_type_of, json[QString("type_of")]);
    m_type_of_isSet = !json[QString("type_of")].isNull() && m_type_of_isValid;

    m_user_id_isValid = ::OpenAPI::fromJsonValue(m_user_id, json[QString("user_id")]);
    m_user_id_isSet = !json[QString("user_id")].isNull() && m_user_id_isValid;
}

QString OAIGetFollowers_200_response_inner::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIGetFollowers_200_response_inner::asJsonObject() const {
    QJsonObject obj;
    if (m_id_isSet) {
        obj.insert(QString("id"), ::OpenAPI::toJsonValue(m_id));
    }
    if (m_name_isSet) {
        obj.insert(QString("name"), ::OpenAPI::toJsonValue(m_name));
    }
    if (m_path_isSet) {
        obj.insert(QString("path"), ::OpenAPI::toJsonValue(m_path));
    }
    if (m_profile_image_isSet) {
        obj.insert(QString("profile_image"), ::OpenAPI::toJsonValue(m_profile_image));
    }
    if (m_type_of_isSet) {
        obj.insert(QString("type_of"), ::OpenAPI::toJsonValue(m_type_of));
    }
    if (m_user_id_isSet) {
        obj.insert(QString("user_id"), ::OpenAPI::toJsonValue(m_user_id));
    }
    return obj;
}

qint32 OAIGetFollowers_200_response_inner::getId() const {
    return m_id;
}
void OAIGetFollowers_200_response_inner::setId(const qint32 &id) {
    m_id = id;
    m_id_isSet = true;
}

bool OAIGetFollowers_200_response_inner::is_id_Set() const{
    return m_id_isSet;
}

bool OAIGetFollowers_200_response_inner::is_id_Valid() const{
    return m_id_isValid;
}

QString OAIGetFollowers_200_response_inner::getName() const {
    return m_name;
}
void OAIGetFollowers_200_response_inner::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAIGetFollowers_200_response_inner::is_name_Set() const{
    return m_name_isSet;
}

bool OAIGetFollowers_200_response_inner::is_name_Valid() const{
    return m_name_isValid;
}

QString OAIGetFollowers_200_response_inner::getPath() const {
    return m_path;
}
void OAIGetFollowers_200_response_inner::setPath(const QString &path) {
    m_path = path;
    m_path_isSet = true;
}

bool OAIGetFollowers_200_response_inner::is_path_Set() const{
    return m_path_isSet;
}

bool OAIGetFollowers_200_response_inner::is_path_Valid() const{
    return m_path_isValid;
}

QString OAIGetFollowers_200_response_inner::getProfileImage() const {
    return m_profile_image;
}
void OAIGetFollowers_200_response_inner::setProfileImage(const QString &profile_image) {
    m_profile_image = profile_image;
    m_profile_image_isSet = true;
}

bool OAIGetFollowers_200_response_inner::is_profile_image_Set() const{
    return m_profile_image_isSet;
}

bool OAIGetFollowers_200_response_inner::is_profile_image_Valid() const{
    return m_profile_image_isValid;
}

QString OAIGetFollowers_200_response_inner::getTypeOf() const {
    return m_type_of;
}
void OAIGetFollowers_200_response_inner::setTypeOf(const QString &type_of) {
    m_type_of = type_of;
    m_type_of_isSet = true;
}

bool OAIGetFollowers_200_response_inner::is_type_of_Set() const{
    return m_type_of_isSet;
}

bool OAIGetFollowers_200_response_inner::is_type_of_Valid() const{
    return m_type_of_isValid;
}

qint32 OAIGetFollowers_200_response_inner::getUserId() const {
    return m_user_id;
}
void OAIGetFollowers_200_response_inner::setUserId(const qint32 &user_id) {
    m_user_id = user_id;
    m_user_id_isSet = true;
}

bool OAIGetFollowers_200_response_inner::is_user_id_Set() const{
    return m_user_id_isSet;
}

bool OAIGetFollowers_200_response_inner::is_user_id_Valid() const{
    return m_user_id_isValid;
}

bool OAIGetFollowers_200_response_inner::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_path_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_profile_image_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_type_of_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_user_id_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIGetFollowers_200_response_inner::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
