/**
 * Forem API V1
 * Access Forem articles, users and other resources via API.         For a real-world example of Forem in action, check out [DEV](https://www.dev.to).         All endpoints can be accessed with the 'api-key' header and a accept header, but         some of them are accessible publicly without authentication.          Dates and date times, unless otherwise specified, must be in         the [RFC 3339](https://tools.ietf.org/html/rfc3339) format.
 *
 * The version of the OpenAPI document: 1.0.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIVideoArticle.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIVideoArticle::OAIVideoArticle(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIVideoArticle::OAIVideoArticle() {
    this->initializeModel();
}

OAIVideoArticle::~OAIVideoArticle() {}

void OAIVideoArticle::initializeModel() {

    m_cloudinary_video_url_isSet = false;
    m_cloudinary_video_url_isValid = false;

    m_id_isSet = false;
    m_id_isValid = false;

    m_path_isSet = false;
    m_path_isValid = false;

    m_title_isSet = false;
    m_title_isValid = false;

    m_type_of_isSet = false;
    m_type_of_isValid = false;

    m_user_isSet = false;
    m_user_isValid = false;

    m_user_id_isSet = false;
    m_user_id_isValid = false;

    m_video_duration_in_minutes_isSet = false;
    m_video_duration_in_minutes_isValid = false;

    m_video_source_url_isSet = false;
    m_video_source_url_isValid = false;
}

void OAIVideoArticle::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIVideoArticle::fromJsonObject(QJsonObject json) {

    m_cloudinary_video_url_isValid = ::OpenAPI::fromJsonValue(m_cloudinary_video_url, json[QString("cloudinary_video_url")]);
    m_cloudinary_video_url_isSet = !json[QString("cloudinary_video_url")].isNull() && m_cloudinary_video_url_isValid;

    m_id_isValid = ::OpenAPI::fromJsonValue(m_id, json[QString("id")]);
    m_id_isSet = !json[QString("id")].isNull() && m_id_isValid;

    m_path_isValid = ::OpenAPI::fromJsonValue(m_path, json[QString("path")]);
    m_path_isSet = !json[QString("path")].isNull() && m_path_isValid;

    m_title_isValid = ::OpenAPI::fromJsonValue(m_title, json[QString("title")]);
    m_title_isSet = !json[QString("title")].isNull() && m_title_isValid;

    m_type_of_isValid = ::OpenAPI::fromJsonValue(m_type_of, json[QString("type_of")]);
    m_type_of_isSet = !json[QString("type_of")].isNull() && m_type_of_isValid;

    m_user_isValid = ::OpenAPI::fromJsonValue(m_user, json[QString("user")]);
    m_user_isSet = !json[QString("user")].isNull() && m_user_isValid;

    m_user_id_isValid = ::OpenAPI::fromJsonValue(m_user_id, json[QString("user_id")]);
    m_user_id_isSet = !json[QString("user_id")].isNull() && m_user_id_isValid;

    m_video_duration_in_minutes_isValid = ::OpenAPI::fromJsonValue(m_video_duration_in_minutes, json[QString("video_duration_in_minutes")]);
    m_video_duration_in_minutes_isSet = !json[QString("video_duration_in_minutes")].isNull() && m_video_duration_in_minutes_isValid;

    m_video_source_url_isValid = ::OpenAPI::fromJsonValue(m_video_source_url, json[QString("video_source_url")]);
    m_video_source_url_isSet = !json[QString("video_source_url")].isNull() && m_video_source_url_isValid;
}

QString OAIVideoArticle::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIVideoArticle::asJsonObject() const {
    QJsonObject obj;
    if (m_cloudinary_video_url_isSet) {
        obj.insert(QString("cloudinary_video_url"), ::OpenAPI::toJsonValue(m_cloudinary_video_url));
    }
    if (m_id_isSet) {
        obj.insert(QString("id"), ::OpenAPI::toJsonValue(m_id));
    }
    if (m_path_isSet) {
        obj.insert(QString("path"), ::OpenAPI::toJsonValue(m_path));
    }
    if (m_title_isSet) {
        obj.insert(QString("title"), ::OpenAPI::toJsonValue(m_title));
    }
    if (m_type_of_isSet) {
        obj.insert(QString("type_of"), ::OpenAPI::toJsonValue(m_type_of));
    }
    if (m_user.isSet()) {
        obj.insert(QString("user"), ::OpenAPI::toJsonValue(m_user));
    }
    if (m_user_id_isSet) {
        obj.insert(QString("user_id"), ::OpenAPI::toJsonValue(m_user_id));
    }
    if (m_video_duration_in_minutes_isSet) {
        obj.insert(QString("video_duration_in_minutes"), ::OpenAPI::toJsonValue(m_video_duration_in_minutes));
    }
    if (m_video_source_url_isSet) {
        obj.insert(QString("video_source_url"), ::OpenAPI::toJsonValue(m_video_source_url));
    }
    return obj;
}

QString OAIVideoArticle::getCloudinaryVideoUrl() const {
    return m_cloudinary_video_url;
}
void OAIVideoArticle::setCloudinaryVideoUrl(const QString &cloudinary_video_url) {
    m_cloudinary_video_url = cloudinary_video_url;
    m_cloudinary_video_url_isSet = true;
}

bool OAIVideoArticle::is_cloudinary_video_url_Set() const{
    return m_cloudinary_video_url_isSet;
}

bool OAIVideoArticle::is_cloudinary_video_url_Valid() const{
    return m_cloudinary_video_url_isValid;
}

qint64 OAIVideoArticle::getId() const {
    return m_id;
}
void OAIVideoArticle::setId(const qint64 &id) {
    m_id = id;
    m_id_isSet = true;
}

bool OAIVideoArticle::is_id_Set() const{
    return m_id_isSet;
}

bool OAIVideoArticle::is_id_Valid() const{
    return m_id_isValid;
}

QString OAIVideoArticle::getPath() const {
    return m_path;
}
void OAIVideoArticle::setPath(const QString &path) {
    m_path = path;
    m_path_isSet = true;
}

bool OAIVideoArticle::is_path_Set() const{
    return m_path_isSet;
}

bool OAIVideoArticle::is_path_Valid() const{
    return m_path_isValid;
}

QString OAIVideoArticle::getTitle() const {
    return m_title;
}
void OAIVideoArticle::setTitle(const QString &title) {
    m_title = title;
    m_title_isSet = true;
}

bool OAIVideoArticle::is_title_Set() const{
    return m_title_isSet;
}

bool OAIVideoArticle::is_title_Valid() const{
    return m_title_isValid;
}

QString OAIVideoArticle::getTypeOf() const {
    return m_type_of;
}
void OAIVideoArticle::setTypeOf(const QString &type_of) {
    m_type_of = type_of;
    m_type_of_isSet = true;
}

bool OAIVideoArticle::is_type_of_Set() const{
    return m_type_of_isSet;
}

bool OAIVideoArticle::is_type_of_Valid() const{
    return m_type_of_isValid;
}

OAIVideoArticle_user OAIVideoArticle::getUser() const {
    return m_user;
}
void OAIVideoArticle::setUser(const OAIVideoArticle_user &user) {
    m_user = user;
    m_user_isSet = true;
}

bool OAIVideoArticle::is_user_Set() const{
    return m_user_isSet;
}

bool OAIVideoArticle::is_user_Valid() const{
    return m_user_isValid;
}

qint64 OAIVideoArticle::getUserId() const {
    return m_user_id;
}
void OAIVideoArticle::setUserId(const qint64 &user_id) {
    m_user_id = user_id;
    m_user_id_isSet = true;
}

bool OAIVideoArticle::is_user_id_Set() const{
    return m_user_id_isSet;
}

bool OAIVideoArticle::is_user_id_Valid() const{
    return m_user_id_isValid;
}

QString OAIVideoArticle::getVideoDurationInMinutes() const {
    return m_video_duration_in_minutes;
}
void OAIVideoArticle::setVideoDurationInMinutes(const QString &video_duration_in_minutes) {
    m_video_duration_in_minutes = video_duration_in_minutes;
    m_video_duration_in_minutes_isSet = true;
}

bool OAIVideoArticle::is_video_duration_in_minutes_Set() const{
    return m_video_duration_in_minutes_isSet;
}

bool OAIVideoArticle::is_video_duration_in_minutes_Valid() const{
    return m_video_duration_in_minutes_isValid;
}

QString OAIVideoArticle::getVideoSourceUrl() const {
    return m_video_source_url;
}
void OAIVideoArticle::setVideoSourceUrl(const QString &video_source_url) {
    m_video_source_url = video_source_url;
    m_video_source_url_isSet = true;
}

bool OAIVideoArticle::is_video_source_url_Set() const{
    return m_video_source_url_isSet;
}

bool OAIVideoArticle::is_video_source_url_Valid() const{
    return m_video_source_url_isValid;
}

bool OAIVideoArticle::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_cloudinary_video_url_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_path_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_title_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_type_of_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_user.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_user_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_video_duration_in_minutes_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_video_source_url_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIVideoArticle::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
