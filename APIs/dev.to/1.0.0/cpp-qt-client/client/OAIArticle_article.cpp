/**
 * Forem API V1
 * Access Forem articles, users and other resources via API.         For a real-world example of Forem in action, check out [DEV](https://www.dev.to).         All endpoints can be accessed with the 'api-key' header and a accept header, but         some of them are accessible publicly without authentication.          Dates and date times, unless otherwise specified, must be in         the [RFC 3339](https://tools.ietf.org/html/rfc3339) format.
 *
 * The version of the OpenAPI document: 1.0.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIArticle_article.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIArticle_article::OAIArticle_article(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIArticle_article::OAIArticle_article() {
    this->initializeModel();
}

OAIArticle_article::~OAIArticle_article() {}

void OAIArticle_article::initializeModel() {

    m_body_markdown_isSet = false;
    m_body_markdown_isValid = false;

    m_canonical_url_isSet = false;
    m_canonical_url_isValid = false;

    m_description_isSet = false;
    m_description_isValid = false;

    m_main_image_isSet = false;
    m_main_image_isValid = false;

    m_organization_id_isSet = false;
    m_organization_id_isValid = false;

    m_published_isSet = false;
    m_published_isValid = false;

    m_series_isSet = false;
    m_series_isValid = false;

    m_tags_isSet = false;
    m_tags_isValid = false;

    m_title_isSet = false;
    m_title_isValid = false;
}

void OAIArticle_article::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIArticle_article::fromJsonObject(QJsonObject json) {

    m_body_markdown_isValid = ::OpenAPI::fromJsonValue(m_body_markdown, json[QString("body_markdown")]);
    m_body_markdown_isSet = !json[QString("body_markdown")].isNull() && m_body_markdown_isValid;

    m_canonical_url_isValid = ::OpenAPI::fromJsonValue(m_canonical_url, json[QString("canonical_url")]);
    m_canonical_url_isSet = !json[QString("canonical_url")].isNull() && m_canonical_url_isValid;

    m_description_isValid = ::OpenAPI::fromJsonValue(m_description, json[QString("description")]);
    m_description_isSet = !json[QString("description")].isNull() && m_description_isValid;

    m_main_image_isValid = ::OpenAPI::fromJsonValue(m_main_image, json[QString("main_image")]);
    m_main_image_isSet = !json[QString("main_image")].isNull() && m_main_image_isValid;

    m_organization_id_isValid = ::OpenAPI::fromJsonValue(m_organization_id, json[QString("organization_id")]);
    m_organization_id_isSet = !json[QString("organization_id")].isNull() && m_organization_id_isValid;

    m_published_isValid = ::OpenAPI::fromJsonValue(m_published, json[QString("published")]);
    m_published_isSet = !json[QString("published")].isNull() && m_published_isValid;

    m_series_isValid = ::OpenAPI::fromJsonValue(m_series, json[QString("series")]);
    m_series_isSet = !json[QString("series")].isNull() && m_series_isValid;

    m_tags_isValid = ::OpenAPI::fromJsonValue(m_tags, json[QString("tags")]);
    m_tags_isSet = !json[QString("tags")].isNull() && m_tags_isValid;

    m_title_isValid = ::OpenAPI::fromJsonValue(m_title, json[QString("title")]);
    m_title_isSet = !json[QString("title")].isNull() && m_title_isValid;
}

QString OAIArticle_article::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIArticle_article::asJsonObject() const {
    QJsonObject obj;
    if (m_body_markdown_isSet) {
        obj.insert(QString("body_markdown"), ::OpenAPI::toJsonValue(m_body_markdown));
    }
    if (m_canonical_url_isSet) {
        obj.insert(QString("canonical_url"), ::OpenAPI::toJsonValue(m_canonical_url));
    }
    if (m_description_isSet) {
        obj.insert(QString("description"), ::OpenAPI::toJsonValue(m_description));
    }
    if (m_main_image_isSet) {
        obj.insert(QString("main_image"), ::OpenAPI::toJsonValue(m_main_image));
    }
    if (m_organization_id_isSet) {
        obj.insert(QString("organization_id"), ::OpenAPI::toJsonValue(m_organization_id));
    }
    if (m_published_isSet) {
        obj.insert(QString("published"), ::OpenAPI::toJsonValue(m_published));
    }
    if (m_series_isSet) {
        obj.insert(QString("series"), ::OpenAPI::toJsonValue(m_series));
    }
    if (m_tags_isSet) {
        obj.insert(QString("tags"), ::OpenAPI::toJsonValue(m_tags));
    }
    if (m_title_isSet) {
        obj.insert(QString("title"), ::OpenAPI::toJsonValue(m_title));
    }
    return obj;
}

QString OAIArticle_article::getBodyMarkdown() const {
    return m_body_markdown;
}
void OAIArticle_article::setBodyMarkdown(const QString &body_markdown) {
    m_body_markdown = body_markdown;
    m_body_markdown_isSet = true;
}

bool OAIArticle_article::is_body_markdown_Set() const{
    return m_body_markdown_isSet;
}

bool OAIArticle_article::is_body_markdown_Valid() const{
    return m_body_markdown_isValid;
}

QString OAIArticle_article::getCanonicalUrl() const {
    return m_canonical_url;
}
void OAIArticle_article::setCanonicalUrl(const QString &canonical_url) {
    m_canonical_url = canonical_url;
    m_canonical_url_isSet = true;
}

bool OAIArticle_article::is_canonical_url_Set() const{
    return m_canonical_url_isSet;
}

bool OAIArticle_article::is_canonical_url_Valid() const{
    return m_canonical_url_isValid;
}

QString OAIArticle_article::getDescription() const {
    return m_description;
}
void OAIArticle_article::setDescription(const QString &description) {
    m_description = description;
    m_description_isSet = true;
}

bool OAIArticle_article::is_description_Set() const{
    return m_description_isSet;
}

bool OAIArticle_article::is_description_Valid() const{
    return m_description_isValid;
}

QString OAIArticle_article::getMainImage() const {
    return m_main_image;
}
void OAIArticle_article::setMainImage(const QString &main_image) {
    m_main_image = main_image;
    m_main_image_isSet = true;
}

bool OAIArticle_article::is_main_image_Set() const{
    return m_main_image_isSet;
}

bool OAIArticle_article::is_main_image_Valid() const{
    return m_main_image_isValid;
}

qint32 OAIArticle_article::getOrganizationId() const {
    return m_organization_id;
}
void OAIArticle_article::setOrganizationId(const qint32 &organization_id) {
    m_organization_id = organization_id;
    m_organization_id_isSet = true;
}

bool OAIArticle_article::is_organization_id_Set() const{
    return m_organization_id_isSet;
}

bool OAIArticle_article::is_organization_id_Valid() const{
    return m_organization_id_isValid;
}

bool OAIArticle_article::isPublished() const {
    return m_published;
}
void OAIArticle_article::setPublished(const bool &published) {
    m_published = published;
    m_published_isSet = true;
}

bool OAIArticle_article::is_published_Set() const{
    return m_published_isSet;
}

bool OAIArticle_article::is_published_Valid() const{
    return m_published_isValid;
}

QString OAIArticle_article::getSeries() const {
    return m_series;
}
void OAIArticle_article::setSeries(const QString &series) {
    m_series = series;
    m_series_isSet = true;
}

bool OAIArticle_article::is_series_Set() const{
    return m_series_isSet;
}

bool OAIArticle_article::is_series_Valid() const{
    return m_series_isValid;
}

QString OAIArticle_article::getTags() const {
    return m_tags;
}
void OAIArticle_article::setTags(const QString &tags) {
    m_tags = tags;
    m_tags_isSet = true;
}

bool OAIArticle_article::is_tags_Set() const{
    return m_tags_isSet;
}

bool OAIArticle_article::is_tags_Valid() const{
    return m_tags_isValid;
}

QString OAIArticle_article::getTitle() const {
    return m_title;
}
void OAIArticle_article::setTitle(const QString &title) {
    m_title = title;
    m_title_isSet = true;
}

bool OAIArticle_article::is_title_Set() const{
    return m_title_isSet;
}

bool OAIArticle_article::is_title_Valid() const{
    return m_title_isValid;
}

bool OAIArticle_article::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_body_markdown_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_canonical_url_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_description_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_main_image_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_organization_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_published_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_series_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_tags_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_title_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIArticle_article::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
