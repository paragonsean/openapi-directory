/**
 * Forem API V1
 * Access Forem articles, users and other resources via API.         For a real-world example of Forem in action, check out [DEV](https://www.dev.to).         All endpoints can be accessed with the 'api-key' header and a accept header, but         some of them are accessible publicly without authentication.          Dates and date times, unless otherwise specified, must be in         the [RFC 3339](https://tools.ietf.org/html/rfc3339) format.
 *
 * The version of the OpenAPI document: 1.0.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#ifndef OAI_OAIArticlesApi_H
#define OAI_OAIArticlesApi_H

#include "OAIHelpers.h"
#include "OAIHttpRequest.h"
#include "OAIServerConfiguration.h"
#include "OAIOauth.h"

#include "OAIArticle.h"
#include "OAIArticleIndex.h"
#include "OAIVideoArticle.h"
#include <QString>

#include <QObject>
#include <QByteArray>
#include <QStringList>
#include <QList>
#include <QNetworkAccessManager>

namespace OpenAPI {

class OAIArticlesApi : public QObject {
    Q_OBJECT

public:
    OAIArticlesApi(const int timeOut = 0);
    ~OAIArticlesApi();

    void initializeServerConfigs();
    int setDefaultServerValue(int serverIndex,const QString &operation, const QString &variable,const QString &val);
    void setServerIndex(const QString &operation, int serverIndex);
    void setApiKey(const QString &apiKeyName, const QString &apiKey);
    void setBearerToken(const QString &token);
    void setUsername(const QString &username);
    void setPassword(const QString &password);
    void setTimeOut(const int timeOut);
    void setWorkingDirectory(const QString &path);
    void setNetworkAccessManager(QNetworkAccessManager* manager);
    int addServerConfiguration(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables = QMap<QString, OAIServerVariable>());
    void setNewServerForAllOperations(const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void setNewServer(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void addHeaders(const QString &key, const QString &value);
    void enableRequestCompression();
    void enableResponseCompression();
    void abortRequests();
    QString getParamStylePrefix(const QString &style);
    QString getParamStyleSuffix(const QString &style);
    QString getParamStyleDelimiter(const QString &style, const QString &name, bool isExplode);

    /**
    * @param[in]  oai_article OAIArticle [optional]
    */
    virtual void createArticle(const ::OpenAPI::OptionalParam<OAIArticle> &oai_article = ::OpenAPI::OptionalParam<OAIArticle>());

    /**
    * @param[in]  id qint32 [required]
    */
    virtual void getArticleById(const qint32 &id);

    /**
    * @param[in]  username QString [required]
    * @param[in]  slug QString [required]
    */
    virtual void getArticleByPath(const QString &username, const QString &slug);

    /**
    * @param[in]  page qint32 [optional]
    * @param[in]  per_page qint32 [optional]
    * @param[in]  tag QString [optional]
    * @param[in]  tags QString [optional]
    * @param[in]  tags_exclude QString [optional]
    * @param[in]  username QString [optional]
    * @param[in]  state QString [optional]
    * @param[in]  top qint32 [optional]
    * @param[in]  collection_id qint32 [optional]
    */
    virtual void getArticles(const ::OpenAPI::OptionalParam<qint32> &page = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint32> &per_page = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<QString> &tag = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &tags = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &tags_exclude = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &username = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &state = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<qint32> &top = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint32> &collection_id = ::OpenAPI::OptionalParam<qint32>());

    /**
    * @param[in]  page qint32 [optional]
    * @param[in]  per_page qint32 [optional]
    */
    virtual void getLatestArticles(const ::OpenAPI::OptionalParam<qint32> &page = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint32> &per_page = ::OpenAPI::OptionalParam<qint32>());

    /**
    * @param[in]  username QString [required]
    * @param[in]  page qint32 [optional]
    * @param[in]  per_page qint32 [optional]
    */
    virtual void getOrgArticles(const QString &username, const ::OpenAPI::OptionalParam<qint32> &page = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint32> &per_page = ::OpenAPI::OptionalParam<qint32>());

    /**
    * @param[in]  page qint32 [optional]
    * @param[in]  per_page qint32 [optional]
    */
    virtual void getUserAllArticles(const ::OpenAPI::OptionalParam<qint32> &page = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint32> &per_page = ::OpenAPI::OptionalParam<qint32>());

    /**
    * @param[in]  page qint32 [optional]
    * @param[in]  per_page qint32 [optional]
    */
    virtual void getUserArticles(const ::OpenAPI::OptionalParam<qint32> &page = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint32> &per_page = ::OpenAPI::OptionalParam<qint32>());

    /**
    * @param[in]  page qint32 [optional]
    * @param[in]  per_page qint32 [optional]
    */
    virtual void getUserPublishedArticles(const ::OpenAPI::OptionalParam<qint32> &page = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint32> &per_page = ::OpenAPI::OptionalParam<qint32>());

    /**
    * @param[in]  page qint32 [optional]
    * @param[in]  per_page qint32 [optional]
    */
    virtual void getUserUnpublishedArticles(const ::OpenAPI::OptionalParam<qint32> &page = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint32> &per_page = ::OpenAPI::OptionalParam<qint32>());

    /**
    * @param[in]  id qint32 [required]
    * @param[in]  note QString [optional]
    */
    virtual void unpublishArticle(const qint32 &id, const ::OpenAPI::OptionalParam<QString> &note = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  id qint32 [required]
    * @param[in]  oai_article OAIArticle [optional]
    */
    virtual void updateArticle(const qint32 &id, const ::OpenAPI::OptionalParam<OAIArticle> &oai_article = ::OpenAPI::OptionalParam<OAIArticle>());

    /**
    * @param[in]  page qint32 [optional]
    * @param[in]  per_page qint32 [optional]
    */
    virtual void videos(const ::OpenAPI::OptionalParam<qint32> &page = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint32> &per_page = ::OpenAPI::OptionalParam<qint32>());


private:
    QMap<QString,int> _serverIndices;
    QMap<QString,QList<OAIServerConfiguration>> _serverConfigs;
    QMap<QString, QString> _apiKeys;
    QString _bearerToken;
    QString _username;
    QString _password;
    int _timeOut;
    QString _workingDirectory;
    QNetworkAccessManager* _manager;
    QMap<QString, QString> _defaultHeaders;
    bool _isResponseCompressionEnabled;
    bool _isRequestCompressionEnabled;
    OAIHttpRequestInput _latestInput;
    OAIHttpRequestWorker *_latestWorker;
    QStringList _latestScope;
    OauthCode _authFlow;
    OauthImplicit _implicitFlow;
    OauthCredentials _credentialFlow;
    OauthPassword _passwordFlow;
    int _OauthMethod = 0;

    void createArticleCallback(OAIHttpRequestWorker *worker);
    void getArticleByIdCallback(OAIHttpRequestWorker *worker);
    void getArticleByPathCallback(OAIHttpRequestWorker *worker);
    void getArticlesCallback(OAIHttpRequestWorker *worker);
    void getLatestArticlesCallback(OAIHttpRequestWorker *worker);
    void getOrgArticlesCallback(OAIHttpRequestWorker *worker);
    void getUserAllArticlesCallback(OAIHttpRequestWorker *worker);
    void getUserArticlesCallback(OAIHttpRequestWorker *worker);
    void getUserPublishedArticlesCallback(OAIHttpRequestWorker *worker);
    void getUserUnpublishedArticlesCallback(OAIHttpRequestWorker *worker);
    void unpublishArticleCallback(OAIHttpRequestWorker *worker);
    void updateArticleCallback(OAIHttpRequestWorker *worker);
    void videosCallback(OAIHttpRequestWorker *worker);

Q_SIGNALS:

    void createArticleSignal();
    void getArticleByIdSignal(QList<OAIArticleIndex> summary);
    void getArticleByPathSignal(QList<OAIArticleIndex> summary);
    void getArticlesSignal(QList<OAIArticleIndex> summary);
    void getLatestArticlesSignal(QList<OAIArticleIndex> summary);
    void getOrgArticlesSignal(QList<OAIArticleIndex> summary);
    void getUserAllArticlesSignal(QList<OAIArticleIndex> summary);
    void getUserArticlesSignal(QList<OAIArticleIndex> summary);
    void getUserPublishedArticlesSignal(QList<OAIArticleIndex> summary);
    void getUserUnpublishedArticlesSignal(QList<OAIArticleIndex> summary);
    void unpublishArticleSignal();
    void updateArticleSignal();
    void videosSignal(QList<OAIVideoArticle> summary);


    void createArticleSignalFull(OAIHttpRequestWorker *worker);
    void getArticleByIdSignalFull(OAIHttpRequestWorker *worker, QList<OAIArticleIndex> summary);
    void getArticleByPathSignalFull(OAIHttpRequestWorker *worker, QList<OAIArticleIndex> summary);
    void getArticlesSignalFull(OAIHttpRequestWorker *worker, QList<OAIArticleIndex> summary);
    void getLatestArticlesSignalFull(OAIHttpRequestWorker *worker, QList<OAIArticleIndex> summary);
    void getOrgArticlesSignalFull(OAIHttpRequestWorker *worker, QList<OAIArticleIndex> summary);
    void getUserAllArticlesSignalFull(OAIHttpRequestWorker *worker, QList<OAIArticleIndex> summary);
    void getUserArticlesSignalFull(OAIHttpRequestWorker *worker, QList<OAIArticleIndex> summary);
    void getUserPublishedArticlesSignalFull(OAIHttpRequestWorker *worker, QList<OAIArticleIndex> summary);
    void getUserUnpublishedArticlesSignalFull(OAIHttpRequestWorker *worker, QList<OAIArticleIndex> summary);
    void unpublishArticleSignalFull(OAIHttpRequestWorker *worker);
    void updateArticleSignalFull(OAIHttpRequestWorker *worker);
    void videosSignalFull(OAIHttpRequestWorker *worker, QList<OAIVideoArticle> summary);

    Q_DECL_DEPRECATED_X("Use createArticleSignalError() instead")
    void createArticleSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void createArticleSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getArticleByIdSignalError() instead")
    void getArticleByIdSignalE(QList<OAIArticleIndex> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getArticleByIdSignalError(QList<OAIArticleIndex> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getArticleByPathSignalError() instead")
    void getArticleByPathSignalE(QList<OAIArticleIndex> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getArticleByPathSignalError(QList<OAIArticleIndex> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getArticlesSignalError() instead")
    void getArticlesSignalE(QList<OAIArticleIndex> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getArticlesSignalError(QList<OAIArticleIndex> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getLatestArticlesSignalError() instead")
    void getLatestArticlesSignalE(QList<OAIArticleIndex> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getLatestArticlesSignalError(QList<OAIArticleIndex> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getOrgArticlesSignalError() instead")
    void getOrgArticlesSignalE(QList<OAIArticleIndex> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getOrgArticlesSignalError(QList<OAIArticleIndex> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getUserAllArticlesSignalError() instead")
    void getUserAllArticlesSignalE(QList<OAIArticleIndex> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getUserAllArticlesSignalError(QList<OAIArticleIndex> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getUserArticlesSignalError() instead")
    void getUserArticlesSignalE(QList<OAIArticleIndex> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getUserArticlesSignalError(QList<OAIArticleIndex> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getUserPublishedArticlesSignalError() instead")
    void getUserPublishedArticlesSignalE(QList<OAIArticleIndex> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getUserPublishedArticlesSignalError(QList<OAIArticleIndex> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getUserUnpublishedArticlesSignalError() instead")
    void getUserUnpublishedArticlesSignalE(QList<OAIArticleIndex> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getUserUnpublishedArticlesSignalError(QList<OAIArticleIndex> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use unpublishArticleSignalError() instead")
    void unpublishArticleSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void unpublishArticleSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use updateArticleSignalError() instead")
    void updateArticleSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void updateArticleSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use videosSignalError() instead")
    void videosSignalE(QList<OAIVideoArticle> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void videosSignalError(QList<OAIVideoArticle> summary, QNetworkReply::NetworkError error_type, const QString &error_str);

    Q_DECL_DEPRECATED_X("Use createArticleSignalErrorFull() instead")
    void createArticleSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void createArticleSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getArticleByIdSignalErrorFull() instead")
    void getArticleByIdSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getArticleByIdSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getArticleByPathSignalErrorFull() instead")
    void getArticleByPathSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getArticleByPathSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getArticlesSignalErrorFull() instead")
    void getArticlesSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getArticlesSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getLatestArticlesSignalErrorFull() instead")
    void getLatestArticlesSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getLatestArticlesSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getOrgArticlesSignalErrorFull() instead")
    void getOrgArticlesSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getOrgArticlesSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getUserAllArticlesSignalErrorFull() instead")
    void getUserAllArticlesSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getUserAllArticlesSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getUserArticlesSignalErrorFull() instead")
    void getUserArticlesSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getUserArticlesSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getUserPublishedArticlesSignalErrorFull() instead")
    void getUserPublishedArticlesSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getUserPublishedArticlesSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getUserUnpublishedArticlesSignalErrorFull() instead")
    void getUserUnpublishedArticlesSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getUserUnpublishedArticlesSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use unpublishArticleSignalErrorFull() instead")
    void unpublishArticleSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void unpublishArticleSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use updateArticleSignalErrorFull() instead")
    void updateArticleSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void updateArticleSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use videosSignalErrorFull() instead")
    void videosSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void videosSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);

    void abortRequestsSignal();
    void allPendingRequestsCompleted();

public Q_SLOTS:
    void tokenAvailable();
};

} // namespace OpenAPI
#endif
