/**
 * Forem API V1
 * Access Forem articles, users and other resources via API.         For a real-world example of Forem in action, check out [DEV](https://www.dev.to).         All endpoints can be accessed with the 'api-key' header and a accept header, but         some of them are accessible publicly without authentication.          Dates and date times, unless otherwise specified, must be in         the [RFC 3339](https://tools.ietf.org/html/rfc3339) format.
 *
 * The version of the OpenAPI document: 1.0.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIOrganization.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIOrganization::OAIOrganization(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIOrganization::OAIOrganization() {
    this->initializeModel();
}

OAIOrganization::~OAIOrganization() {}

void OAIOrganization::initializeModel() {

    m_github_username_isSet = false;
    m_github_username_isValid = false;

    m_joined_at_isSet = false;
    m_joined_at_isValid = false;

    m_location_isSet = false;
    m_location_isValid = false;

    m_name_isSet = false;
    m_name_isValid = false;

    m_story_isSet = false;
    m_story_isValid = false;

    m_summary_isSet = false;
    m_summary_isValid = false;

    m_tag_line_isSet = false;
    m_tag_line_isValid = false;

    m_tech_stack_isSet = false;
    m_tech_stack_isValid = false;

    m_twitter_username_isSet = false;
    m_twitter_username_isValid = false;

    m_type_of_isSet = false;
    m_type_of_isValid = false;

    m_url_isSet = false;
    m_url_isValid = false;

    m_username_isSet = false;
    m_username_isValid = false;
}

void OAIOrganization::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIOrganization::fromJsonObject(QJsonObject json) {

    m_github_username_isValid = ::OpenAPI::fromJsonValue(m_github_username, json[QString("github_username")]);
    m_github_username_isSet = !json[QString("github_username")].isNull() && m_github_username_isValid;

    m_joined_at_isValid = ::OpenAPI::fromJsonValue(m_joined_at, json[QString("joined_at")]);
    m_joined_at_isSet = !json[QString("joined_at")].isNull() && m_joined_at_isValid;

    m_location_isValid = ::OpenAPI::fromJsonValue(m_location, json[QString("location")]);
    m_location_isSet = !json[QString("location")].isNull() && m_location_isValid;

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("name")]);
    m_name_isSet = !json[QString("name")].isNull() && m_name_isValid;

    m_story_isValid = ::OpenAPI::fromJsonValue(m_story, json[QString("story")]);
    m_story_isSet = !json[QString("story")].isNull() && m_story_isValid;

    m_summary_isValid = ::OpenAPI::fromJsonValue(m_summary, json[QString("summary")]);
    m_summary_isSet = !json[QString("summary")].isNull() && m_summary_isValid;

    m_tag_line_isValid = ::OpenAPI::fromJsonValue(m_tag_line, json[QString("tag_line")]);
    m_tag_line_isSet = !json[QString("tag_line")].isNull() && m_tag_line_isValid;

    m_tech_stack_isValid = ::OpenAPI::fromJsonValue(m_tech_stack, json[QString("tech_stack")]);
    m_tech_stack_isSet = !json[QString("tech_stack")].isNull() && m_tech_stack_isValid;

    m_twitter_username_isValid = ::OpenAPI::fromJsonValue(m_twitter_username, json[QString("twitter_username")]);
    m_twitter_username_isSet = !json[QString("twitter_username")].isNull() && m_twitter_username_isValid;

    m_type_of_isValid = ::OpenAPI::fromJsonValue(m_type_of, json[QString("type_of")]);
    m_type_of_isSet = !json[QString("type_of")].isNull() && m_type_of_isValid;

    m_url_isValid = ::OpenAPI::fromJsonValue(m_url, json[QString("url")]);
    m_url_isSet = !json[QString("url")].isNull() && m_url_isValid;

    m_username_isValid = ::OpenAPI::fromJsonValue(m_username, json[QString("username")]);
    m_username_isSet = !json[QString("username")].isNull() && m_username_isValid;
}

QString OAIOrganization::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIOrganization::asJsonObject() const {
    QJsonObject obj;
    if (m_github_username_isSet) {
        obj.insert(QString("github_username"), ::OpenAPI::toJsonValue(m_github_username));
    }
    if (m_joined_at_isSet) {
        obj.insert(QString("joined_at"), ::OpenAPI::toJsonValue(m_joined_at));
    }
    if (m_location_isSet) {
        obj.insert(QString("location"), ::OpenAPI::toJsonValue(m_location));
    }
    if (m_name_isSet) {
        obj.insert(QString("name"), ::OpenAPI::toJsonValue(m_name));
    }
    if (m_story_isSet) {
        obj.insert(QString("story"), ::OpenAPI::toJsonValue(m_story));
    }
    if (m_summary_isSet) {
        obj.insert(QString("summary"), ::OpenAPI::toJsonValue(m_summary));
    }
    if (m_tag_line_isSet) {
        obj.insert(QString("tag_line"), ::OpenAPI::toJsonValue(m_tag_line));
    }
    if (m_tech_stack_isSet) {
        obj.insert(QString("tech_stack"), ::OpenAPI::toJsonValue(m_tech_stack));
    }
    if (m_twitter_username_isSet) {
        obj.insert(QString("twitter_username"), ::OpenAPI::toJsonValue(m_twitter_username));
    }
    if (m_type_of_isSet) {
        obj.insert(QString("type_of"), ::OpenAPI::toJsonValue(m_type_of));
    }
    if (m_url_isSet) {
        obj.insert(QString("url"), ::OpenAPI::toJsonValue(m_url));
    }
    if (m_username_isSet) {
        obj.insert(QString("username"), ::OpenAPI::toJsonValue(m_username));
    }
    return obj;
}

QString OAIOrganization::getGithubUsername() const {
    return m_github_username;
}
void OAIOrganization::setGithubUsername(const QString &github_username) {
    m_github_username = github_username;
    m_github_username_isSet = true;
}

bool OAIOrganization::is_github_username_Set() const{
    return m_github_username_isSet;
}

bool OAIOrganization::is_github_username_Valid() const{
    return m_github_username_isValid;
}

QString OAIOrganization::getJoinedAt() const {
    return m_joined_at;
}
void OAIOrganization::setJoinedAt(const QString &joined_at) {
    m_joined_at = joined_at;
    m_joined_at_isSet = true;
}

bool OAIOrganization::is_joined_at_Set() const{
    return m_joined_at_isSet;
}

bool OAIOrganization::is_joined_at_Valid() const{
    return m_joined_at_isValid;
}

QString OAIOrganization::getLocation() const {
    return m_location;
}
void OAIOrganization::setLocation(const QString &location) {
    m_location = location;
    m_location_isSet = true;
}

bool OAIOrganization::is_location_Set() const{
    return m_location_isSet;
}

bool OAIOrganization::is_location_Valid() const{
    return m_location_isValid;
}

QString OAIOrganization::getName() const {
    return m_name;
}
void OAIOrganization::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAIOrganization::is_name_Set() const{
    return m_name_isSet;
}

bool OAIOrganization::is_name_Valid() const{
    return m_name_isValid;
}

QString OAIOrganization::getStory() const {
    return m_story;
}
void OAIOrganization::setStory(const QString &story) {
    m_story = story;
    m_story_isSet = true;
}

bool OAIOrganization::is_story_Set() const{
    return m_story_isSet;
}

bool OAIOrganization::is_story_Valid() const{
    return m_story_isValid;
}

QString OAIOrganization::getSummary() const {
    return m_summary;
}
void OAIOrganization::setSummary(const QString &summary) {
    m_summary = summary;
    m_summary_isSet = true;
}

bool OAIOrganization::is_summary_Set() const{
    return m_summary_isSet;
}

bool OAIOrganization::is_summary_Valid() const{
    return m_summary_isValid;
}

QString OAIOrganization::getTagLine() const {
    return m_tag_line;
}
void OAIOrganization::setTagLine(const QString &tag_line) {
    m_tag_line = tag_line;
    m_tag_line_isSet = true;
}

bool OAIOrganization::is_tag_line_Set() const{
    return m_tag_line_isSet;
}

bool OAIOrganization::is_tag_line_Valid() const{
    return m_tag_line_isValid;
}

QString OAIOrganization::getTechStack() const {
    return m_tech_stack;
}
void OAIOrganization::setTechStack(const QString &tech_stack) {
    m_tech_stack = tech_stack;
    m_tech_stack_isSet = true;
}

bool OAIOrganization::is_tech_stack_Set() const{
    return m_tech_stack_isSet;
}

bool OAIOrganization::is_tech_stack_Valid() const{
    return m_tech_stack_isValid;
}

QString OAIOrganization::getTwitterUsername() const {
    return m_twitter_username;
}
void OAIOrganization::setTwitterUsername(const QString &twitter_username) {
    m_twitter_username = twitter_username;
    m_twitter_username_isSet = true;
}

bool OAIOrganization::is_twitter_username_Set() const{
    return m_twitter_username_isSet;
}

bool OAIOrganization::is_twitter_username_Valid() const{
    return m_twitter_username_isValid;
}

QString OAIOrganization::getTypeOf() const {
    return m_type_of;
}
void OAIOrganization::setTypeOf(const QString &type_of) {
    m_type_of = type_of;
    m_type_of_isSet = true;
}

bool OAIOrganization::is_type_of_Set() const{
    return m_type_of_isSet;
}

bool OAIOrganization::is_type_of_Valid() const{
    return m_type_of_isValid;
}

QString OAIOrganization::getUrl() const {
    return m_url;
}
void OAIOrganization::setUrl(const QString &url) {
    m_url = url;
    m_url_isSet = true;
}

bool OAIOrganization::is_url_Set() const{
    return m_url_isSet;
}

bool OAIOrganization::is_url_Valid() const{
    return m_url_isValid;
}

QString OAIOrganization::getUsername() const {
    return m_username;
}
void OAIOrganization::setUsername(const QString &username) {
    m_username = username;
    m_username_isSet = true;
}

bool OAIOrganization::is_username_Set() const{
    return m_username_isSet;
}

bool OAIOrganization::is_username_Valid() const{
    return m_username_isValid;
}

bool OAIOrganization::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_github_username_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_joined_at_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_location_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_story_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_summary_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_tag_line_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_tech_stack_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_twitter_username_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_type_of_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_url_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_username_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIOrganization::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
