/**
 * Forem API V1
 * Access Forem articles, users and other resources via API.         For a real-world example of Forem in action, check out [DEV](https://www.dev.to).         All endpoints can be accessed with the 'api-key' header and a accept header, but         some of them are accessible publicly without authentication.          Dates and date times, unless otherwise specified, must be in         the [RFC 3339](https://tools.ietf.org/html/rfc3339) format.
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import PodcastEpisodeIndex from '../model/PodcastEpisodeIndex';

/**
* PodcastEpisodes service.
* @module api/PodcastEpisodesApi
* @version 1.0.0
*/
export default class PodcastEpisodesApi {

    /**
    * Constructs a new PodcastEpisodesApi. 
    * @alias module:api/PodcastEpisodesApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the getPodcastEpisodes operation.
     * @callback module:api/PodcastEpisodesApi~getPodcastEpisodesCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/PodcastEpisodeIndex>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Podcast Episodes
     * This endpoint allows the client to retrieve a list of podcast episodes.         \"Podcast episodes\" are episodes belonging to podcasts.         It will only return active (reachable) podcast episodes that belong to published podcasts available on the platform, ordered by descending publication date.         It supports pagination, each page will contain 30 articles by default.
     * @param {Object} opts Optional parameters
     * @param {Number} [page = 1)] Pagination page
     * @param {Number} [perPage = 30)] Page size (the number of items to return per page). The default maximum value can be overridden by \"API_PER_PAGE_MAX\" environment variable.
     * @param {String} [username] Using this parameter will retrieve episodes belonging to a specific podcast.
     * @param {module:api/PodcastEpisodesApi~getPodcastEpisodesCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/PodcastEpisodeIndex>}
     */
    getPodcastEpisodes(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'page': opts['page'],
        'per_page': opts['perPage'],
        'username': opts['username']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [PodcastEpisodeIndex];
      return this.apiClient.callApi(
        '/api/podcast_episodes', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
