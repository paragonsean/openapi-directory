/**
 * Forem API V1
 * Access Forem articles, users and other resources via API.         For a real-world example of Forem in action, check out [DEV](https://www.dev.to).         All endpoints can be accessed with the 'api-key' header and a accept header, but         some of them are accessible publicly without authentication.          Dates and date times, unless otherwise specified, must be in         the [RFC 3339](https://tools.ietf.org/html/rfc3339) format.
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import Article from '../model/Article';
import ArticleIndex from '../model/ArticleIndex';
import VideoArticle from '../model/VideoArticle';

/**
* Articles service.
* @module api/ArticlesApi
* @version 1.0.0
*/
export default class ArticlesApi {

    /**
    * Constructs a new ArticlesApi. 
    * @alias module:api/ArticlesApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the createArticle operation.
     * @callback module:api/ArticlesApi~createArticleCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Publish article
     * This endpoint allows the client to create a new article.  \"Articles\" are all the posts that users create on DEV that typically show up in the feed. They can be a blog post, a discussion question, a help thread etc. but is referred to as article within the code.
     * @param {Object} opts Optional parameters
     * @param {module:model/Article} [article] 
     * @param {module:api/ArticlesApi~createArticleCallback} callback The callback function, accepting three arguments: error, data, response
     */
    createArticle(opts, callback) {
      opts = opts || {};
      let postBody = opts['article'];

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['api-key'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/api/articles', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getArticleById operation.
     * @callback module:api/ArticlesApi~getArticleByIdCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/ArticleIndex>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Published article by id
     * This endpoint allows the client to retrieve a single published article given its `id`.
     * @param {Number} id 
     * @param {module:api/ArticlesApi~getArticleByIdCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/ArticleIndex>}
     */
    getArticleById(id, callback) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling getArticleById");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [ArticleIndex];
      return this.apiClient.callApi(
        '/api/articles/{id}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getArticleByPath operation.
     * @callback module:api/ArticlesApi~getArticleByPathCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/ArticleIndex>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Published article by path
     * This endpoint allows the client to retrieve a single published article given its `path`.
     * @param {String} username 
     * @param {String} slug 
     * @param {module:api/ArticlesApi~getArticleByPathCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/ArticleIndex>}
     */
    getArticleByPath(username, slug, callback) {
      let postBody = null;
      // verify the required parameter 'username' is set
      if (username === undefined || username === null) {
        throw new Error("Missing the required parameter 'username' when calling getArticleByPath");
      }
      // verify the required parameter 'slug' is set
      if (slug === undefined || slug === null) {
        throw new Error("Missing the required parameter 'slug' when calling getArticleByPath");
      }

      let pathParams = {
        'username': username,
        'slug': slug
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [ArticleIndex];
      return this.apiClient.callApi(
        '/api/articles/{username}/{slug}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getArticles operation.
     * @callback module:api/ArticlesApi~getArticlesCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/ArticleIndex>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Published articles
     * This endpoint allows the client to retrieve a list of articles.  \"Articles\" are all the posts that users create on DEV that typically show up in the feed. They can be a blog post, a discussion question, a help thread etc. but is referred to as article within the code.  By default it will return featured, published articles ordered by descending popularity.  It supports pagination, each page will contain `30` articles by default.
     * @param {Object} opts Optional parameters
     * @param {Number} [page = 1)] Pagination page
     * @param {Number} [perPage = 30)] Page size (the number of items to return per page). The default maximum value can be overridden by \"API_PER_PAGE_MAX\" environment variable.
     * @param {String} [tag] Using this parameter will retrieve articles that contain the requested tag. Articles will be ordered by descending popularity.This parameter can be used in conjuction with `top`.
     * @param {String} [tags] Using this parameter will retrieve articles with any of the comma-separated tags. Articles will be ordered by descending popularity.
     * @param {String} [tagsExclude] Using this parameter will retrieve articles that do _not_ contain _any_ of comma-separated tags. Articles will be ordered by descending popularity.
     * @param {String} [username] Using this parameter will retrieve articles belonging             to a User or Organization ordered by descending publication date.             If `state=all` the number of items returned will be `1000` instead of the default `30`.             This parameter can be used in conjuction with `state`.
     * @param {module:model/String} [state] Using this parameter will allow the client to check which articles are fresh or rising.             If `state=fresh` the server will return fresh articles.             If `state=rising` the server will return rising articles.             This param can be used in conjuction with `username`, only if set to `all`.
     * @param {Number} [top] Using this parameter will allow the client to return the most popular articles in the last `N` days. `top` indicates the number of days since publication of the articles returned. This param can be used in conjuction with `tag`.
     * @param {Number} [collectionId] Adding this will allow the client to return the list of articles belonging to the requested collection, ordered by ascending publication date.
     * @param {module:api/ArticlesApi~getArticlesCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/ArticleIndex>}
     */
    getArticles(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'page': opts['page'],
        'per_page': opts['perPage'],
        'tag': opts['tag'],
        'tags': opts['tags'],
        'tags_exclude': opts['tagsExclude'],
        'username': opts['username'],
        'state': opts['state'],
        'top': opts['top'],
        'collection_id': opts['collectionId']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [ArticleIndex];
      return this.apiClient.callApi(
        '/api/articles', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getLatestArticles operation.
     * @callback module:api/ArticlesApi~getLatestArticlesCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/ArticleIndex>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Published articles sorted by published date
     * This endpoint allows the client to retrieve a list of articles. ordered by descending publish date.  It supports pagination, each page will contain 30 articles by default.
     * @param {Object} opts Optional parameters
     * @param {Number} [page = 1)] Pagination page
     * @param {Number} [perPage = 30)] Page size (the number of items to return per page). The default maximum value can be overridden by \"API_PER_PAGE_MAX\" environment variable.
     * @param {module:api/ArticlesApi~getLatestArticlesCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/ArticleIndex>}
     */
    getLatestArticles(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'page': opts['page'],
        'per_page': opts['perPage']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [ArticleIndex];
      return this.apiClient.callApi(
        '/api/articles/latest', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getOrgArticles_0 operation.
     * @callback module:api/ArticlesApi~getOrgArticles_0Callback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/ArticleIndex>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Organization's Articles
     * This endpoint allows the client to retrieve a list of Articles belonging to the organization  It supports pagination, each page will contain `30` users by default.
     * @param {String} username 
     * @param {Object} opts Optional parameters
     * @param {Number} [page = 1)] Pagination page
     * @param {Number} [perPage = 30)] Page size (the number of items to return per page). The default maximum value can be overridden by \"API_PER_PAGE_MAX\" environment variable.
     * @param {module:api/ArticlesApi~getOrgArticles_0Callback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/ArticleIndex>}
     */
    getOrgArticles_0(username, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'username' is set
      if (username === undefined || username === null) {
        throw new Error("Missing the required parameter 'username' when calling getOrgArticles_0");
      }

      let pathParams = {
        'username': username
      };
      let queryParams = {
        'page': opts['page'],
        'per_page': opts['perPage']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [ArticleIndex];
      return this.apiClient.callApi(
        '/api/organizations/{username}/articles', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getUserAllArticles operation.
     * @callback module:api/ArticlesApi~getUserAllArticlesCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/ArticleIndex>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * User's all articles
     * This endpoint allows the client to retrieve a list of all articles on behalf of an authenticated user.  \"Articles\" are all the posts that users create on DEV that typically show up in the feed. They can be a blog post, a discussion question, a help thread etc. but is referred to as article within the code.  It will return both published and unpublished articles with pagination.  Unpublished articles will be at the top of the list in reverse chronological creation order. Published articles will follow in reverse chronological publication order.  By default a page will contain 30 articles.
     * @param {Object} opts Optional parameters
     * @param {Number} [page = 1)] Pagination page
     * @param {Number} [perPage = 30)] Page size (the number of items to return per page). The default maximum value can be overridden by \"API_PER_PAGE_MAX\" environment variable.
     * @param {module:api/ArticlesApi~getUserAllArticlesCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/ArticleIndex>}
     */
    getUserAllArticles(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'page': opts['page'],
        'per_page': opts['perPage']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['api-key'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [ArticleIndex];
      return this.apiClient.callApi(
        '/api/articles/me/all', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getUserArticles operation.
     * @callback module:api/ArticlesApi~getUserArticlesCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/ArticleIndex>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * User's articles
     * This endpoint allows the client to retrieve a list of published articles on behalf of an authenticated user.  \"Articles\" are all the posts that users create on DEV that typically show up in the feed. They can be a blog post, a discussion question, a help thread etc. but is referred to as article within the code.  Published articles will be in reverse chronological publication order.  It will return published articles with pagination. By default a page will contain 30 articles.
     * @param {Object} opts Optional parameters
     * @param {Number} [page = 1)] Pagination page
     * @param {Number} [perPage = 30)] Page size (the number of items to return per page). The default maximum value can be overridden by \"API_PER_PAGE_MAX\" environment variable.
     * @param {module:api/ArticlesApi~getUserArticlesCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/ArticleIndex>}
     */
    getUserArticles(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'page': opts['page'],
        'per_page': opts['perPage']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['api-key'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [ArticleIndex];
      return this.apiClient.callApi(
        '/api/articles/me', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getUserPublishedArticles operation.
     * @callback module:api/ArticlesApi~getUserPublishedArticlesCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/ArticleIndex>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * User's published articles
     * This endpoint allows the client to retrieve a list of published articles on behalf of an authenticated user.  \"Articles\" are all the posts that users create on DEV that typically show up in the feed. They can be a blog post, a discussion question, a help thread etc. but is referred to as article within the code.  Published articles will be in reverse chronological publication order.  It will return published articles with pagination. By default a page will contain 30 articles.
     * @param {Object} opts Optional parameters
     * @param {Number} [page = 1)] Pagination page
     * @param {Number} [perPage = 30)] Page size (the number of items to return per page). The default maximum value can be overridden by \"API_PER_PAGE_MAX\" environment variable.
     * @param {module:api/ArticlesApi~getUserPublishedArticlesCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/ArticleIndex>}
     */
    getUserPublishedArticles(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'page': opts['page'],
        'per_page': opts['perPage']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['api-key'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [ArticleIndex];
      return this.apiClient.callApi(
        '/api/articles/me/published', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getUserUnpublishedArticles operation.
     * @callback module:api/ArticlesApi~getUserUnpublishedArticlesCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/ArticleIndex>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * User's unpublished articles
     * This endpoint allows the client to retrieve a list of unpublished articles on behalf of an authenticated user.  \"Articles\" are all the posts that users create on DEV that typically show up in the feed. They can be a blog post, a discussion question, a help thread etc. but is referred to as article within the code.  Unpublished articles will be in reverse chronological creation order.  It will return unpublished articles with pagination. By default a page will contain 30 articles.
     * @param {Object} opts Optional parameters
     * @param {Number} [page = 1)] Pagination page
     * @param {Number} [perPage = 30)] Page size (the number of items to return per page). The default maximum value can be overridden by \"API_PER_PAGE_MAX\" environment variable.
     * @param {module:api/ArticlesApi~getUserUnpublishedArticlesCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/ArticleIndex>}
     */
    getUserUnpublishedArticles(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'page': opts['page'],
        'per_page': opts['perPage']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['api-key'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [ArticleIndex];
      return this.apiClient.callApi(
        '/api/articles/me/unpublished', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the unpublishArticle operation.
     * @callback module:api/ArticlesApi~unpublishArticleCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Unpublish an article
     * This endpoint allows the client to unpublish an article.  The user associated with the API key must have any 'admin' or 'moderator' role.  The article will be unpublished and will no longer be visible to the public. It will remain in the database and will set back to draft status on the author's posts dashboard. Any notifications associated with the article will be deleted. Any comments on the article will remain.
     * @param {Number} id The ID of the article to unpublish.
     * @param {Object} opts Optional parameters
     * @param {String} [note] Content for the note that's created along with unpublishing
     * @param {module:api/ArticlesApi~unpublishArticleCallback} callback The callback function, accepting three arguments: error, data, response
     */
    unpublishArticle(id, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling unpublishArticle");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
        'note': opts['note']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['api-key'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/api/articles/{id}/unpublish', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the updateArticle operation.
     * @callback module:api/ArticlesApi~updateArticleCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update an article by id
     * This endpoint allows the client to update an existing article.  \"Articles\" are all the posts that users create on DEV that typically show up in the feed. They can be a blog post, a discussion question, a help thread etc. but is referred to as article within the code.
     * @param {Number} id The ID of the user to unpublish.
     * @param {Object} opts Optional parameters
     * @param {module:model/Article} [article] 
     * @param {module:api/ArticlesApi~updateArticleCallback} callback The callback function, accepting three arguments: error, data, response
     */
    updateArticle(id, opts, callback) {
      opts = opts || {};
      let postBody = opts['article'];
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling updateArticle");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['api-key'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/api/articles/{id}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the videos_0 operation.
     * @callback module:api/ArticlesApi~videos_0Callback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/VideoArticle>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Articles with a video
     * This endpoint allows the client to retrieve a list of articles that are uploaded with a video.  It will only return published video articles ordered by descending popularity.  It supports pagination, each page will contain 24 articles by default.
     * @param {Object} opts Optional parameters
     * @param {Number} [page = 1)] Pagination page
     * @param {Number} [perPage = 24)] Page size (the number of items to return per page). The default maximum value can be overridden by \"API_PER_PAGE_MAX\" environment variable.
     * @param {module:api/ArticlesApi~videos_0Callback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/VideoArticle>}
     */
    videos_0(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'page': opts['page'],
        'per_page': opts['perPage']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [VideoArticle];
      return this.apiClient.callApi(
        '/api/videos', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
