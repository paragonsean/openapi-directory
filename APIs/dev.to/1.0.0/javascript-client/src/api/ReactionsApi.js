/**
 * Forem API V1
 * Access Forem articles, users and other resources via API.         For a real-world example of Forem in action, check out [DEV](https://www.dev.to).         All endpoints can be accessed with the 'api-key' header and a accept header, but         some of them are accessible publicly without authentication.          Dates and date times, unless otherwise specified, must be in         the [RFC 3339](https://tools.ietf.org/html/rfc3339) format.
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";

/**
* Reactions service.
* @module api/ReactionsApi
* @version 1.0.0
*/
export default class ReactionsApi {

    /**
    * Constructs a new ReactionsApi. 
    * @alias module:api/ReactionsApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the apiReactionsPost operation.
     * @callback module:api/ReactionsApi~apiReactionsPostCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * create reaction
     * This endpoint allows the client to create a reaction to a specified reactable (eg, Article, Comment, or User). For examples:         * \"Like\"ing an Article will create a new \"like\" Reaction from the user for that Articles         * \"Like\"ing that Article a second time will return the previous \"like\"
     * @param {module:model/String} category 
     * @param {Number} reactableId 
     * @param {module:model/String} reactableType 
     * @param {module:api/ReactionsApi~apiReactionsPostCallback} callback The callback function, accepting three arguments: error, data, response
     */
    apiReactionsPost(category, reactableId, reactableType, callback) {
      let postBody = null;
      // verify the required parameter 'category' is set
      if (category === undefined || category === null) {
        throw new Error("Missing the required parameter 'category' when calling apiReactionsPost");
      }
      // verify the required parameter 'reactableId' is set
      if (reactableId === undefined || reactableId === null) {
        throw new Error("Missing the required parameter 'reactableId' when calling apiReactionsPost");
      }
      // verify the required parameter 'reactableType' is set
      if (reactableType === undefined || reactableType === null) {
        throw new Error("Missing the required parameter 'reactableType' when calling apiReactionsPost");
      }

      let pathParams = {
      };
      let queryParams = {
        'category': category,
        'reactable_id': reactableId,
        'reactable_type': reactableType
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['api-key'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/api/reactions', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the apiReactionsTogglePost operation.
     * @callback module:api/ReactionsApi~apiReactionsTogglePostCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * toggle reaction
     * This endpoint allows the client to toggle the user's reaction to a specified reactable (eg, Article, Comment, or User). For examples:         * \"Like\"ing an Article will create a new \"like\" Reaction from the user for that Articles         * \"Like\"ing that Article a second time will remove the \"like\" from the user
     * @param {module:model/String} category 
     * @param {Number} reactableId 
     * @param {module:model/String} reactableType 
     * @param {module:api/ReactionsApi~apiReactionsTogglePostCallback} callback The callback function, accepting three arguments: error, data, response
     */
    apiReactionsTogglePost(category, reactableId, reactableType, callback) {
      let postBody = null;
      // verify the required parameter 'category' is set
      if (category === undefined || category === null) {
        throw new Error("Missing the required parameter 'category' when calling apiReactionsTogglePost");
      }
      // verify the required parameter 'reactableId' is set
      if (reactableId === undefined || reactableId === null) {
        throw new Error("Missing the required parameter 'reactableId' when calling apiReactionsTogglePost");
      }
      // verify the required parameter 'reactableType' is set
      if (reactableType === undefined || reactableType === null) {
        throw new Error("Missing the required parameter 'reactableType' when calling apiReactionsTogglePost");
      }

      let pathParams = {
      };
      let queryParams = {
        'category': category,
        'reactable_id': reactableId,
        'reactable_type': reactableType
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['api-key'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/api/reactions/toggle', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
