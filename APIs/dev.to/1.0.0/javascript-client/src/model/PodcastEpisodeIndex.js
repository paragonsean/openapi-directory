/**
 * Forem API V1
 * Access Forem articles, users and other resources via API.         For a real-world example of Forem in action, check out [DEV](https://www.dev.to).         All endpoints can be accessed with the 'api-key' header and a accept header, but         some of them are accessible publicly without authentication.          Dates and date times, unless otherwise specified, must be in         the [RFC 3339](https://tools.ietf.org/html/rfc3339) format.
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import SharedPodcast from './SharedPodcast';

/**
 * The PodcastEpisodeIndex model module.
 * @module model/PodcastEpisodeIndex
 * @version 1.0.0
 */
class PodcastEpisodeIndex {
    /**
     * Constructs a new <code>PodcastEpisodeIndex</code>.
     * Representation of a podcast episode returned in a list
     * @alias module:model/PodcastEpisodeIndex
     * @param className {String} 
     * @param id {Number} 
     * @param imageUrl {String} Podcast episode image url or podcast image url
     * @param path {String} 
     * @param podcast {module:model/SharedPodcast} 
     * @param title {String} 
     * @param typeOf {String} 
     */
    constructor(className, id, imageUrl, path, podcast, title, typeOf) { 
        
        PodcastEpisodeIndex.initialize(this, className, id, imageUrl, path, podcast, title, typeOf);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, className, id, imageUrl, path, podcast, title, typeOf) { 
        obj['class_name'] = className;
        obj['id'] = id;
        obj['image_url'] = imageUrl;
        obj['path'] = path;
        obj['podcast'] = podcast;
        obj['title'] = title;
        obj['type_of'] = typeOf;
    }

    /**
     * Constructs a <code>PodcastEpisodeIndex</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/PodcastEpisodeIndex} obj Optional instance to populate.
     * @return {module:model/PodcastEpisodeIndex} The populated <code>PodcastEpisodeIndex</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new PodcastEpisodeIndex();

            if (data.hasOwnProperty('class_name')) {
                obj['class_name'] = ApiClient.convertToType(data['class_name'], 'String');
            }
            if (data.hasOwnProperty('id')) {
                obj['id'] = ApiClient.convertToType(data['id'], 'Number');
            }
            if (data.hasOwnProperty('image_url')) {
                obj['image_url'] = ApiClient.convertToType(data['image_url'], 'String');
            }
            if (data.hasOwnProperty('path')) {
                obj['path'] = ApiClient.convertToType(data['path'], 'String');
            }
            if (data.hasOwnProperty('podcast')) {
                obj['podcast'] = SharedPodcast.constructFromObject(data['podcast']);
            }
            if (data.hasOwnProperty('title')) {
                obj['title'] = ApiClient.convertToType(data['title'], 'String');
            }
            if (data.hasOwnProperty('type_of')) {
                obj['type_of'] = ApiClient.convertToType(data['type_of'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>PodcastEpisodeIndex</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>PodcastEpisodeIndex</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of PodcastEpisodeIndex.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // ensure the json data is a string
        if (data['class_name'] && !(typeof data['class_name'] === 'string' || data['class_name'] instanceof String)) {
            throw new Error("Expected the field `class_name` to be a primitive type in the JSON string but got " + data['class_name']);
        }
        // ensure the json data is a string
        if (data['image_url'] && !(typeof data['image_url'] === 'string' || data['image_url'] instanceof String)) {
            throw new Error("Expected the field `image_url` to be a primitive type in the JSON string but got " + data['image_url']);
        }
        // ensure the json data is a string
        if (data['path'] && !(typeof data['path'] === 'string' || data['path'] instanceof String)) {
            throw new Error("Expected the field `path` to be a primitive type in the JSON string but got " + data['path']);
        }
        // validate the optional field `podcast`
        if (data['podcast']) { // data not null
          SharedPodcast.validateJSON(data['podcast']);
        }
        // ensure the json data is a string
        if (data['title'] && !(typeof data['title'] === 'string' || data['title'] instanceof String)) {
            throw new Error("Expected the field `title` to be a primitive type in the JSON string but got " + data['title']);
        }
        // ensure the json data is a string
        if (data['type_of'] && !(typeof data['type_of'] === 'string' || data['type_of'] instanceof String)) {
            throw new Error("Expected the field `type_of` to be a primitive type in the JSON string but got " + data['type_of']);
        }

        return true;
    }


}

PodcastEpisodeIndex.RequiredProperties = ["class_name", "id", "image_url", "path", "podcast", "title", "type_of"];

/**
 * @member {String} class_name
 */
PodcastEpisodeIndex.prototype['class_name'] = undefined;

/**
 * @member {Number} id
 */
PodcastEpisodeIndex.prototype['id'] = undefined;

/**
 * Podcast episode image url or podcast image url
 * @member {String} image_url
 */
PodcastEpisodeIndex.prototype['image_url'] = undefined;

/**
 * @member {String} path
 */
PodcastEpisodeIndex.prototype['path'] = undefined;

/**
 * @member {module:model/SharedPodcast} podcast
 */
PodcastEpisodeIndex.prototype['podcast'] = undefined;

/**
 * @member {String} title
 */
PodcastEpisodeIndex.prototype['title'] = undefined;

/**
 * @member {String} type_of
 */
PodcastEpisodeIndex.prototype['type_of'] = undefined;






export default PodcastEpisodeIndex;

