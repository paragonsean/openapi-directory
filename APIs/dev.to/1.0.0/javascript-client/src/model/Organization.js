/**
 * Forem API V1
 * Access Forem articles, users and other resources via API.         For a real-world example of Forem in action, check out [DEV](https://www.dev.to).         All endpoints can be accessed with the 'api-key' header and a accept header, but         some of them are accessible publicly without authentication.          Dates and date times, unless otherwise specified, must be in         the [RFC 3339](https://tools.ietf.org/html/rfc3339) format.
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The Organization model module.
 * @module model/Organization
 * @version 1.0.0
 */
class Organization {
    /**
     * Constructs a new <code>Organization</code>.
     * Representation of an Organization
     * @alias module:model/Organization
     */
    constructor() { 
        
        Organization.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>Organization</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/Organization} obj Optional instance to populate.
     * @return {module:model/Organization} The populated <code>Organization</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new Organization();

            if (data.hasOwnProperty('github_username')) {
                obj['github_username'] = ApiClient.convertToType(data['github_username'], 'String');
            }
            if (data.hasOwnProperty('joined_at')) {
                obj['joined_at'] = ApiClient.convertToType(data['joined_at'], 'String');
            }
            if (data.hasOwnProperty('location')) {
                obj['location'] = ApiClient.convertToType(data['location'], 'String');
            }
            if (data.hasOwnProperty('name')) {
                obj['name'] = ApiClient.convertToType(data['name'], 'String');
            }
            if (data.hasOwnProperty('story')) {
                obj['story'] = ApiClient.convertToType(data['story'], 'String');
            }
            if (data.hasOwnProperty('summary')) {
                obj['summary'] = ApiClient.convertToType(data['summary'], 'String');
            }
            if (data.hasOwnProperty('tag_line')) {
                obj['tag_line'] = ApiClient.convertToType(data['tag_line'], 'String');
            }
            if (data.hasOwnProperty('tech_stack')) {
                obj['tech_stack'] = ApiClient.convertToType(data['tech_stack'], 'String');
            }
            if (data.hasOwnProperty('twitter_username')) {
                obj['twitter_username'] = ApiClient.convertToType(data['twitter_username'], 'String');
            }
            if (data.hasOwnProperty('type_of')) {
                obj['type_of'] = ApiClient.convertToType(data['type_of'], 'String');
            }
            if (data.hasOwnProperty('url')) {
                obj['url'] = ApiClient.convertToType(data['url'], 'String');
            }
            if (data.hasOwnProperty('username')) {
                obj['username'] = ApiClient.convertToType(data['username'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>Organization</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>Organization</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['github_username'] && !(typeof data['github_username'] === 'string' || data['github_username'] instanceof String)) {
            throw new Error("Expected the field `github_username` to be a primitive type in the JSON string but got " + data['github_username']);
        }
        // ensure the json data is a string
        if (data['joined_at'] && !(typeof data['joined_at'] === 'string' || data['joined_at'] instanceof String)) {
            throw new Error("Expected the field `joined_at` to be a primitive type in the JSON string but got " + data['joined_at']);
        }
        // ensure the json data is a string
        if (data['location'] && !(typeof data['location'] === 'string' || data['location'] instanceof String)) {
            throw new Error("Expected the field `location` to be a primitive type in the JSON string but got " + data['location']);
        }
        // ensure the json data is a string
        if (data['name'] && !(typeof data['name'] === 'string' || data['name'] instanceof String)) {
            throw new Error("Expected the field `name` to be a primitive type in the JSON string but got " + data['name']);
        }
        // ensure the json data is a string
        if (data['story'] && !(typeof data['story'] === 'string' || data['story'] instanceof String)) {
            throw new Error("Expected the field `story` to be a primitive type in the JSON string but got " + data['story']);
        }
        // ensure the json data is a string
        if (data['summary'] && !(typeof data['summary'] === 'string' || data['summary'] instanceof String)) {
            throw new Error("Expected the field `summary` to be a primitive type in the JSON string but got " + data['summary']);
        }
        // ensure the json data is a string
        if (data['tag_line'] && !(typeof data['tag_line'] === 'string' || data['tag_line'] instanceof String)) {
            throw new Error("Expected the field `tag_line` to be a primitive type in the JSON string but got " + data['tag_line']);
        }
        // ensure the json data is a string
        if (data['tech_stack'] && !(typeof data['tech_stack'] === 'string' || data['tech_stack'] instanceof String)) {
            throw new Error("Expected the field `tech_stack` to be a primitive type in the JSON string but got " + data['tech_stack']);
        }
        // ensure the json data is a string
        if (data['twitter_username'] && !(typeof data['twitter_username'] === 'string' || data['twitter_username'] instanceof String)) {
            throw new Error("Expected the field `twitter_username` to be a primitive type in the JSON string but got " + data['twitter_username']);
        }
        // ensure the json data is a string
        if (data['type_of'] && !(typeof data['type_of'] === 'string' || data['type_of'] instanceof String)) {
            throw new Error("Expected the field `type_of` to be a primitive type in the JSON string but got " + data['type_of']);
        }
        // ensure the json data is a string
        if (data['url'] && !(typeof data['url'] === 'string' || data['url'] instanceof String)) {
            throw new Error("Expected the field `url` to be a primitive type in the JSON string but got " + data['url']);
        }
        // ensure the json data is a string
        if (data['username'] && !(typeof data['username'] === 'string' || data['username'] instanceof String)) {
            throw new Error("Expected the field `username` to be a primitive type in the JSON string but got " + data['username']);
        }

        return true;
    }


}



/**
 * @member {String} github_username
 */
Organization.prototype['github_username'] = undefined;

/**
 * @member {String} joined_at
 */
Organization.prototype['joined_at'] = undefined;

/**
 * @member {String} location
 */
Organization.prototype['location'] = undefined;

/**
 * @member {String} name
 */
Organization.prototype['name'] = undefined;

/**
 * @member {String} story
 */
Organization.prototype['story'] = undefined;

/**
 * @member {String} summary
 */
Organization.prototype['summary'] = undefined;

/**
 * @member {String} tag_line
 */
Organization.prototype['tag_line'] = undefined;

/**
 * @member {String} tech_stack
 */
Organization.prototype['tech_stack'] = undefined;

/**
 * @member {String} twitter_username
 */
Organization.prototype['twitter_username'] = undefined;

/**
 * @member {String} type_of
 */
Organization.prototype['type_of'] = undefined;

/**
 * @member {String} url
 */
Organization.prototype['url'] = undefined;

/**
 * @member {String} username
 */
Organization.prototype['username'] = undefined;






export default Organization;

