/**
 * Forem API V1
 * Access Forem articles, users and other resources via API.         For a real-world example of Forem in action, check out [DEV](https://www.dev.to).         All endpoints can be accessed with the 'api-key' header and a accept header, but         some of them are accessible publicly without authentication.          Dates and date times, unless otherwise specified, must be in         the [RFC 3339](https://tools.ietf.org/html/rfc3339) format.
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import ArticleFlareTag from './ArticleFlareTag';
import SharedOrganization from './SharedOrganization';
import SharedUser from './SharedUser';

/**
 * The ArticleIndex model module.
 * @module model/ArticleIndex
 * @version 1.0.0
 */
class ArticleIndex {
    /**
     * Constructs a new <code>ArticleIndex</code>.
     * Representation of an article or post returned in a list
     * @alias module:model/ArticleIndex
     * @param canonicalUrl {String} 
     * @param coverImage {String} 
     * @param createdAt {Date} 
     * @param crosspostedAt {Date} 
     * @param description {String} 
     * @param editedAt {Date} 
     * @param id {Number} 
     * @param lastCommentAt {Date} 
     * @param path {String} 
     * @param positiveReactionsCount {Number} 
     * @param publicReactionsCount {Number} 
     * @param publishedAt {Date} 
     * @param publishedTimestamp {Date} Crossposting or published date time
     * @param readablePublishDate {String} 
     * @param readingTimeMinutes {Number} Reading time, in minutes
     * @param slug {String} 
     * @param socialImage {String} 
     * @param tagList {Array.<String>} 
     * @param tags {String} 
     * @param title {String} 
     * @param typeOf {String} 
     * @param url {String} 
     * @param user {module:model/SharedUser} 
     */
    constructor(canonicalUrl, coverImage, createdAt, crosspostedAt, description, editedAt, id, lastCommentAt, path, positiveReactionsCount, publicReactionsCount, publishedAt, publishedTimestamp, readablePublishDate, readingTimeMinutes, slug, socialImage, tagList, tags, title, typeOf, url, user) { 
        
        ArticleIndex.initialize(this, canonicalUrl, coverImage, createdAt, crosspostedAt, description, editedAt, id, lastCommentAt, path, positiveReactionsCount, publicReactionsCount, publishedAt, publishedTimestamp, readablePublishDate, readingTimeMinutes, slug, socialImage, tagList, tags, title, typeOf, url, user);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, canonicalUrl, coverImage, createdAt, crosspostedAt, description, editedAt, id, lastCommentAt, path, positiveReactionsCount, publicReactionsCount, publishedAt, publishedTimestamp, readablePublishDate, readingTimeMinutes, slug, socialImage, tagList, tags, title, typeOf, url, user) { 
        obj['canonical_url'] = canonicalUrl;
        obj['cover_image'] = coverImage;
        obj['created_at'] = createdAt;
        obj['crossposted_at'] = crosspostedAt;
        obj['description'] = description;
        obj['edited_at'] = editedAt;
        obj['id'] = id;
        obj['last_comment_at'] = lastCommentAt;
        obj['path'] = path;
        obj['positive_reactions_count'] = positiveReactionsCount;
        obj['public_reactions_count'] = publicReactionsCount;
        obj['published_at'] = publishedAt;
        obj['published_timestamp'] = publishedTimestamp;
        obj['readable_publish_date'] = readablePublishDate;
        obj['reading_time_minutes'] = readingTimeMinutes;
        obj['slug'] = slug;
        obj['social_image'] = socialImage;
        obj['tag_list'] = tagList;
        obj['tags'] = tags;
        obj['title'] = title;
        obj['type_of'] = typeOf;
        obj['url'] = url;
        obj['user'] = user;
    }

    /**
     * Constructs a <code>ArticleIndex</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/ArticleIndex} obj Optional instance to populate.
     * @return {module:model/ArticleIndex} The populated <code>ArticleIndex</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new ArticleIndex();

            if (data.hasOwnProperty('canonical_url')) {
                obj['canonical_url'] = ApiClient.convertToType(data['canonical_url'], 'String');
            }
            if (data.hasOwnProperty('cover_image')) {
                obj['cover_image'] = ApiClient.convertToType(data['cover_image'], 'String');
            }
            if (data.hasOwnProperty('created_at')) {
                obj['created_at'] = ApiClient.convertToType(data['created_at'], 'Date');
            }
            if (data.hasOwnProperty('crossposted_at')) {
                obj['crossposted_at'] = ApiClient.convertToType(data['crossposted_at'], 'Date');
            }
            if (data.hasOwnProperty('description')) {
                obj['description'] = ApiClient.convertToType(data['description'], 'String');
            }
            if (data.hasOwnProperty('edited_at')) {
                obj['edited_at'] = ApiClient.convertToType(data['edited_at'], 'Date');
            }
            if (data.hasOwnProperty('flare_tag')) {
                obj['flare_tag'] = ArticleFlareTag.constructFromObject(data['flare_tag']);
            }
            if (data.hasOwnProperty('id')) {
                obj['id'] = ApiClient.convertToType(data['id'], 'Number');
            }
            if (data.hasOwnProperty('last_comment_at')) {
                obj['last_comment_at'] = ApiClient.convertToType(data['last_comment_at'], 'Date');
            }
            if (data.hasOwnProperty('organization')) {
                obj['organization'] = SharedOrganization.constructFromObject(data['organization']);
            }
            if (data.hasOwnProperty('path')) {
                obj['path'] = ApiClient.convertToType(data['path'], 'String');
            }
            if (data.hasOwnProperty('positive_reactions_count')) {
                obj['positive_reactions_count'] = ApiClient.convertToType(data['positive_reactions_count'], 'Number');
            }
            if (data.hasOwnProperty('public_reactions_count')) {
                obj['public_reactions_count'] = ApiClient.convertToType(data['public_reactions_count'], 'Number');
            }
            if (data.hasOwnProperty('published_at')) {
                obj['published_at'] = ApiClient.convertToType(data['published_at'], 'Date');
            }
            if (data.hasOwnProperty('published_timestamp')) {
                obj['published_timestamp'] = ApiClient.convertToType(data['published_timestamp'], 'Date');
            }
            if (data.hasOwnProperty('readable_publish_date')) {
                obj['readable_publish_date'] = ApiClient.convertToType(data['readable_publish_date'], 'String');
            }
            if (data.hasOwnProperty('reading_time_minutes')) {
                obj['reading_time_minutes'] = ApiClient.convertToType(data['reading_time_minutes'], 'Number');
            }
            if (data.hasOwnProperty('slug')) {
                obj['slug'] = ApiClient.convertToType(data['slug'], 'String');
            }
            if (data.hasOwnProperty('social_image')) {
                obj['social_image'] = ApiClient.convertToType(data['social_image'], 'String');
            }
            if (data.hasOwnProperty('tag_list')) {
                obj['tag_list'] = ApiClient.convertToType(data['tag_list'], ['String']);
            }
            if (data.hasOwnProperty('tags')) {
                obj['tags'] = ApiClient.convertToType(data['tags'], 'String');
            }
            if (data.hasOwnProperty('title')) {
                obj['title'] = ApiClient.convertToType(data['title'], 'String');
            }
            if (data.hasOwnProperty('type_of')) {
                obj['type_of'] = ApiClient.convertToType(data['type_of'], 'String');
            }
            if (data.hasOwnProperty('url')) {
                obj['url'] = ApiClient.convertToType(data['url'], 'String');
            }
            if (data.hasOwnProperty('user')) {
                obj['user'] = SharedUser.constructFromObject(data['user']);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>ArticleIndex</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>ArticleIndex</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of ArticleIndex.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // ensure the json data is a string
        if (data['canonical_url'] && !(typeof data['canonical_url'] === 'string' || data['canonical_url'] instanceof String)) {
            throw new Error("Expected the field `canonical_url` to be a primitive type in the JSON string but got " + data['canonical_url']);
        }
        // ensure the json data is a string
        if (data['cover_image'] && !(typeof data['cover_image'] === 'string' || data['cover_image'] instanceof String)) {
            throw new Error("Expected the field `cover_image` to be a primitive type in the JSON string but got " + data['cover_image']);
        }
        // ensure the json data is a string
        if (data['description'] && !(typeof data['description'] === 'string' || data['description'] instanceof String)) {
            throw new Error("Expected the field `description` to be a primitive type in the JSON string but got " + data['description']);
        }
        // validate the optional field `flare_tag`
        if (data['flare_tag']) { // data not null
          ArticleFlareTag.validateJSON(data['flare_tag']);
        }
        // validate the optional field `organization`
        if (data['organization']) { // data not null
          SharedOrganization.validateJSON(data['organization']);
        }
        // ensure the json data is a string
        if (data['path'] && !(typeof data['path'] === 'string' || data['path'] instanceof String)) {
            throw new Error("Expected the field `path` to be a primitive type in the JSON string but got " + data['path']);
        }
        // ensure the json data is a string
        if (data['readable_publish_date'] && !(typeof data['readable_publish_date'] === 'string' || data['readable_publish_date'] instanceof String)) {
            throw new Error("Expected the field `readable_publish_date` to be a primitive type in the JSON string but got " + data['readable_publish_date']);
        }
        // ensure the json data is a string
        if (data['slug'] && !(typeof data['slug'] === 'string' || data['slug'] instanceof String)) {
            throw new Error("Expected the field `slug` to be a primitive type in the JSON string but got " + data['slug']);
        }
        // ensure the json data is a string
        if (data['social_image'] && !(typeof data['social_image'] === 'string' || data['social_image'] instanceof String)) {
            throw new Error("Expected the field `social_image` to be a primitive type in the JSON string but got " + data['social_image']);
        }
        // ensure the json data is an array
        if (!Array.isArray(data['tag_list'])) {
            throw new Error("Expected the field `tag_list` to be an array in the JSON data but got " + data['tag_list']);
        }
        // ensure the json data is a string
        if (data['tags'] && !(typeof data['tags'] === 'string' || data['tags'] instanceof String)) {
            throw new Error("Expected the field `tags` to be a primitive type in the JSON string but got " + data['tags']);
        }
        // ensure the json data is a string
        if (data['title'] && !(typeof data['title'] === 'string' || data['title'] instanceof String)) {
            throw new Error("Expected the field `title` to be a primitive type in the JSON string but got " + data['title']);
        }
        // ensure the json data is a string
        if (data['type_of'] && !(typeof data['type_of'] === 'string' || data['type_of'] instanceof String)) {
            throw new Error("Expected the field `type_of` to be a primitive type in the JSON string but got " + data['type_of']);
        }
        // ensure the json data is a string
        if (data['url'] && !(typeof data['url'] === 'string' || data['url'] instanceof String)) {
            throw new Error("Expected the field `url` to be a primitive type in the JSON string but got " + data['url']);
        }
        // validate the optional field `user`
        if (data['user']) { // data not null
          SharedUser.validateJSON(data['user']);
        }

        return true;
    }


}

ArticleIndex.RequiredProperties = ["canonical_url", "cover_image", "created_at", "crossposted_at", "description", "edited_at", "id", "last_comment_at", "path", "positive_reactions_count", "public_reactions_count", "published_at", "published_timestamp", "readable_publish_date", "reading_time_minutes", "slug", "social_image", "tag_list", "tags", "title", "type_of", "url", "user"];

/**
 * @member {String} canonical_url
 */
ArticleIndex.prototype['canonical_url'] = undefined;

/**
 * @member {String} cover_image
 */
ArticleIndex.prototype['cover_image'] = undefined;

/**
 * @member {Date} created_at
 */
ArticleIndex.prototype['created_at'] = undefined;

/**
 * @member {Date} crossposted_at
 */
ArticleIndex.prototype['crossposted_at'] = undefined;

/**
 * @member {String} description
 */
ArticleIndex.prototype['description'] = undefined;

/**
 * @member {Date} edited_at
 */
ArticleIndex.prototype['edited_at'] = undefined;

/**
 * @member {module:model/ArticleFlareTag} flare_tag
 */
ArticleIndex.prototype['flare_tag'] = undefined;

/**
 * @member {Number} id
 */
ArticleIndex.prototype['id'] = undefined;

/**
 * @member {Date} last_comment_at
 */
ArticleIndex.prototype['last_comment_at'] = undefined;

/**
 * @member {module:model/SharedOrganization} organization
 */
ArticleIndex.prototype['organization'] = undefined;

/**
 * @member {String} path
 */
ArticleIndex.prototype['path'] = undefined;

/**
 * @member {Number} positive_reactions_count
 */
ArticleIndex.prototype['positive_reactions_count'] = undefined;

/**
 * @member {Number} public_reactions_count
 */
ArticleIndex.prototype['public_reactions_count'] = undefined;

/**
 * @member {Date} published_at
 */
ArticleIndex.prototype['published_at'] = undefined;

/**
 * Crossposting or published date time
 * @member {Date} published_timestamp
 */
ArticleIndex.prototype['published_timestamp'] = undefined;

/**
 * @member {String} readable_publish_date
 */
ArticleIndex.prototype['readable_publish_date'] = undefined;

/**
 * Reading time, in minutes
 * @member {Number} reading_time_minutes
 */
ArticleIndex.prototype['reading_time_minutes'] = undefined;

/**
 * @member {String} slug
 */
ArticleIndex.prototype['slug'] = undefined;

/**
 * @member {String} social_image
 */
ArticleIndex.prototype['social_image'] = undefined;

/**
 * @member {Array.<String>} tag_list
 */
ArticleIndex.prototype['tag_list'] = undefined;

/**
 * @member {String} tags
 */
ArticleIndex.prototype['tags'] = undefined;

/**
 * @member {String} title
 */
ArticleIndex.prototype['title'] = undefined;

/**
 * @member {String} type_of
 */
ArticleIndex.prototype['type_of'] = undefined;

/**
 * @member {String} url
 */
ArticleIndex.prototype['url'] = undefined;

/**
 * @member {module:model/SharedUser} user
 */
ArticleIndex.prototype['user'] = undefined;






export default ArticleIndex;

