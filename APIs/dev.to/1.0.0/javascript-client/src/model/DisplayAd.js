/**
 * Forem API V1
 * Access Forem articles, users and other resources via API.         For a real-world example of Forem in action, check out [DEV](https://www.dev.to).         All endpoints can be accessed with the 'api-key' header and a accept header, but         some of them are accessible publicly without authentication.          Dates and date times, unless otherwise specified, must be in         the [RFC 3339](https://tools.ietf.org/html/rfc3339) format.
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The DisplayAd model module.
 * @module model/DisplayAd
 * @version 1.0.0
 */
class DisplayAd {
    /**
     * Constructs a new <code>DisplayAd</code>.
     * A Display Ad, aka Billboard, aka Widget
     * @alias module:model/DisplayAd
     * @param bodyMarkdown {String} The text (in markdown) of the ad (required)
     * @param name {String} For internal use, helps distinguish ads from one another
     * @param placementArea {module:model/DisplayAd.PlacementAreaEnum} Identifies which area of site layout the ad can appear in
     */
    constructor(bodyMarkdown, name, placementArea) { 
        
        DisplayAd.initialize(this, bodyMarkdown, name, placementArea);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, bodyMarkdown, name, placementArea) { 
        obj['body_markdown'] = bodyMarkdown;
        obj['display_to'] = 'all';
        obj['name'] = name;
        obj['placement_area'] = placementArea;
        obj['type_of'] = 'in_house';
    }

    /**
     * Constructs a <code>DisplayAd</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/DisplayAd} obj Optional instance to populate.
     * @return {module:model/DisplayAd} The populated <code>DisplayAd</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new DisplayAd();

            if (data.hasOwnProperty('approved')) {
                obj['approved'] = ApiClient.convertToType(data['approved'], 'Boolean');
            }
            if (data.hasOwnProperty('article_exclude_ids')) {
                obj['article_exclude_ids'] = ApiClient.convertToType(data['article_exclude_ids'], 'String');
            }
            if (data.hasOwnProperty('body_markdown')) {
                obj['body_markdown'] = ApiClient.convertToType(data['body_markdown'], 'String');
            }
            if (data.hasOwnProperty('creator_id')) {
                obj['creator_id'] = ApiClient.convertToType(data['creator_id'], 'Number');
            }
            if (data.hasOwnProperty('display_to')) {
                obj['display_to'] = ApiClient.convertToType(data['display_to'], 'String');
            }
            if (data.hasOwnProperty('id')) {
                obj['id'] = ApiClient.convertToType(data['id'], 'Number');
            }
            if (data.hasOwnProperty('name')) {
                obj['name'] = ApiClient.convertToType(data['name'], 'String');
            }
            if (data.hasOwnProperty('organization_id')) {
                obj['organization_id'] = ApiClient.convertToType(data['organization_id'], 'Number');
            }
            if (data.hasOwnProperty('placement_area')) {
                obj['placement_area'] = ApiClient.convertToType(data['placement_area'], 'String');
            }
            if (data.hasOwnProperty('published')) {
                obj['published'] = ApiClient.convertToType(data['published'], 'Boolean');
            }
            if (data.hasOwnProperty('tag_list')) {
                obj['tag_list'] = ApiClient.convertToType(data['tag_list'], 'String');
            }
            if (data.hasOwnProperty('type_of')) {
                obj['type_of'] = ApiClient.convertToType(data['type_of'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>DisplayAd</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>DisplayAd</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of DisplayAd.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // ensure the json data is a string
        if (data['article_exclude_ids'] && !(typeof data['article_exclude_ids'] === 'string' || data['article_exclude_ids'] instanceof String)) {
            throw new Error("Expected the field `article_exclude_ids` to be a primitive type in the JSON string but got " + data['article_exclude_ids']);
        }
        // ensure the json data is a string
        if (data['body_markdown'] && !(typeof data['body_markdown'] === 'string' || data['body_markdown'] instanceof String)) {
            throw new Error("Expected the field `body_markdown` to be a primitive type in the JSON string but got " + data['body_markdown']);
        }
        // ensure the json data is a string
        if (data['display_to'] && !(typeof data['display_to'] === 'string' || data['display_to'] instanceof String)) {
            throw new Error("Expected the field `display_to` to be a primitive type in the JSON string but got " + data['display_to']);
        }
        // ensure the json data is a string
        if (data['name'] && !(typeof data['name'] === 'string' || data['name'] instanceof String)) {
            throw new Error("Expected the field `name` to be a primitive type in the JSON string but got " + data['name']);
        }
        // ensure the json data is a string
        if (data['placement_area'] && !(typeof data['placement_area'] === 'string' || data['placement_area'] instanceof String)) {
            throw new Error("Expected the field `placement_area` to be a primitive type in the JSON string but got " + data['placement_area']);
        }
        // ensure the json data is a string
        if (data['tag_list'] && !(typeof data['tag_list'] === 'string' || data['tag_list'] instanceof String)) {
            throw new Error("Expected the field `tag_list` to be a primitive type in the JSON string but got " + data['tag_list']);
        }
        // ensure the json data is a string
        if (data['type_of'] && !(typeof data['type_of'] === 'string' || data['type_of'] instanceof String)) {
            throw new Error("Expected the field `type_of` to be a primitive type in the JSON string but got " + data['type_of']);
        }

        return true;
    }


}

DisplayAd.RequiredProperties = ["body_markdown", "name", "placement_area"];

/**
 * Ad must be both published and approved to be in rotation
 * @member {Boolean} approved
 */
DisplayAd.prototype['approved'] = undefined;

/**
 * Articles this ad should *not* appear on (blank means no articles are disallowed, and this ad can appear next to any/all articles). Comma-separated list of integer Article IDs
 * @member {String} article_exclude_ids
 */
DisplayAd.prototype['article_exclude_ids'] = undefined;

/**
 * The text (in markdown) of the ad (required)
 * @member {String} body_markdown
 */
DisplayAd.prototype['body_markdown'] = undefined;

/**
 * Identifies the user who created the ad.
 * @member {Number} creator_id
 */
DisplayAd.prototype['creator_id'] = undefined;

/**
 * Potentially limits visitors to whom the ad is visible
 * @member {module:model/DisplayAd.DisplayToEnum} display_to
 * @default 'all'
 */
DisplayAd.prototype['display_to'] = 'all';

/**
 * The ID of the Display Ad
 * @member {Number} id
 */
DisplayAd.prototype['id'] = undefined;

/**
 * For internal use, helps distinguish ads from one another
 * @member {String} name
 */
DisplayAd.prototype['name'] = undefined;

/**
 * Identifies the organization to which the ad belongs
 * @member {Number} organization_id
 */
DisplayAd.prototype['organization_id'] = undefined;

/**
 * Identifies which area of site layout the ad can appear in
 * @member {module:model/DisplayAd.PlacementAreaEnum} placement_area
 */
DisplayAd.prototype['placement_area'] = undefined;

/**
 * Ad must be both published and approved to be in rotation
 * @member {Boolean} published
 */
DisplayAd.prototype['published'] = undefined;

/**
 * Tags on which this ad can be displayed (blank is all/any tags)
 * @member {String} tag_list
 */
DisplayAd.prototype['tag_list'] = undefined;

/**
 * Types of the billboards: in_house (created by admins), community (created by an entity, appears on entity's content), external ( created by an entity, or a non-entity, can appear everywhere) 
 * @member {module:model/DisplayAd.TypeOfEnum} type_of
 * @default 'in_house'
 */
DisplayAd.prototype['type_of'] = 'in_house';





/**
 * Allowed values for the <code>display_to</code> property.
 * @enum {String}
 * @readonly
 */
DisplayAd['DisplayToEnum'] = {

    /**
     * value: "all"
     * @const
     */
    "all": "all",

    /**
     * value: "logged_in"
     * @const
     */
    "logged_in": "logged_in",

    /**
     * value: "logged_out"
     * @const
     */
    "logged_out": "logged_out"
};


/**
 * Allowed values for the <code>placement_area</code> property.
 * @enum {String}
 * @readonly
 */
DisplayAd['PlacementAreaEnum'] = {

    /**
     * value: "sidebar_left"
     * @const
     */
    "sidebar_left": "sidebar_left",

    /**
     * value: "sidebar_left_2"
     * @const
     */
    "sidebar_left_2": "sidebar_left_2",

    /**
     * value: "sidebar_right"
     * @const
     */
    "sidebar_right": "sidebar_right",

    /**
     * value: "feed_first"
     * @const
     */
    "feed_first": "feed_first",

    /**
     * value: "feed_second"
     * @const
     */
    "feed_second": "feed_second",

    /**
     * value: "feed_third"
     * @const
     */
    "feed_third": "feed_third",

    /**
     * value: "post_sidebar"
     * @const
     */
    "post_sidebar": "post_sidebar",

    /**
     * value: "post_comments"
     * @const
     */
    "post_comments": "post_comments"
};


/**
 * Allowed values for the <code>type_of</code> property.
 * @enum {String}
 * @readonly
 */
DisplayAd['TypeOfEnum'] = {

    /**
     * value: "in_house"
     * @const
     */
    "in_house": "in_house",

    /**
     * value: "community"
     * @const
     */
    "community": "community",

    /**
     * value: "external"
     * @const
     */
    "external": "external"
};



export default DisplayAd;

