/**
 * Forem API V1
 * Access Forem articles, users and other resources via API.         For a real-world example of Forem in action, check out [DEV](https://www.dev.to).         All endpoints can be accessed with the 'api-key' header and a accept header, but         some of them are accessible publicly without authentication.          Dates and date times, unless otherwise specified, must be in         the [RFC 3339](https://tools.ietf.org/html/rfc3339) format.
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The ArticleArticle model module.
 * @module model/ArticleArticle
 * @version 1.0.0
 */
class ArticleArticle {
    /**
     * Constructs a new <code>ArticleArticle</code>.
     * @alias module:model/ArticleArticle
     */
    constructor() { 
        
        ArticleArticle.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
        obj['published'] = false;
    }

    /**
     * Constructs a <code>ArticleArticle</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/ArticleArticle} obj Optional instance to populate.
     * @return {module:model/ArticleArticle} The populated <code>ArticleArticle</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new ArticleArticle();

            if (data.hasOwnProperty('body_markdown')) {
                obj['body_markdown'] = ApiClient.convertToType(data['body_markdown'], 'String');
            }
            if (data.hasOwnProperty('canonical_url')) {
                obj['canonical_url'] = ApiClient.convertToType(data['canonical_url'], 'String');
            }
            if (data.hasOwnProperty('description')) {
                obj['description'] = ApiClient.convertToType(data['description'], 'String');
            }
            if (data.hasOwnProperty('main_image')) {
                obj['main_image'] = ApiClient.convertToType(data['main_image'], 'String');
            }
            if (data.hasOwnProperty('organization_id')) {
                obj['organization_id'] = ApiClient.convertToType(data['organization_id'], 'Number');
            }
            if (data.hasOwnProperty('published')) {
                obj['published'] = ApiClient.convertToType(data['published'], 'Boolean');
            }
            if (data.hasOwnProperty('series')) {
                obj['series'] = ApiClient.convertToType(data['series'], 'String');
            }
            if (data.hasOwnProperty('tags')) {
                obj['tags'] = ApiClient.convertToType(data['tags'], 'String');
            }
            if (data.hasOwnProperty('title')) {
                obj['title'] = ApiClient.convertToType(data['title'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>ArticleArticle</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>ArticleArticle</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['body_markdown'] && !(typeof data['body_markdown'] === 'string' || data['body_markdown'] instanceof String)) {
            throw new Error("Expected the field `body_markdown` to be a primitive type in the JSON string but got " + data['body_markdown']);
        }
        // ensure the json data is a string
        if (data['canonical_url'] && !(typeof data['canonical_url'] === 'string' || data['canonical_url'] instanceof String)) {
            throw new Error("Expected the field `canonical_url` to be a primitive type in the JSON string but got " + data['canonical_url']);
        }
        // ensure the json data is a string
        if (data['description'] && !(typeof data['description'] === 'string' || data['description'] instanceof String)) {
            throw new Error("Expected the field `description` to be a primitive type in the JSON string but got " + data['description']);
        }
        // ensure the json data is a string
        if (data['main_image'] && !(typeof data['main_image'] === 'string' || data['main_image'] instanceof String)) {
            throw new Error("Expected the field `main_image` to be a primitive type in the JSON string but got " + data['main_image']);
        }
        // ensure the json data is a string
        if (data['series'] && !(typeof data['series'] === 'string' || data['series'] instanceof String)) {
            throw new Error("Expected the field `series` to be a primitive type in the JSON string but got " + data['series']);
        }
        // ensure the json data is a string
        if (data['tags'] && !(typeof data['tags'] === 'string' || data['tags'] instanceof String)) {
            throw new Error("Expected the field `tags` to be a primitive type in the JSON string but got " + data['tags']);
        }
        // ensure the json data is a string
        if (data['title'] && !(typeof data['title'] === 'string' || data['title'] instanceof String)) {
            throw new Error("Expected the field `title` to be a primitive type in the JSON string but got " + data['title']);
        }

        return true;
    }


}



/**
 * @member {String} body_markdown
 */
ArticleArticle.prototype['body_markdown'] = undefined;

/**
 * @member {String} canonical_url
 */
ArticleArticle.prototype['canonical_url'] = undefined;

/**
 * @member {String} description
 */
ArticleArticle.prototype['description'] = undefined;

/**
 * @member {String} main_image
 */
ArticleArticle.prototype['main_image'] = undefined;

/**
 * @member {Number} organization_id
 */
ArticleArticle.prototype['organization_id'] = undefined;

/**
 * @member {Boolean} published
 * @default false
 */
ArticleArticle.prototype['published'] = false;

/**
 * @member {String} series
 */
ArticleArticle.prototype['series'] = undefined;

/**
 * @member {String} tags
 */
ArticleArticle.prototype['tags'] = undefined;

/**
 * @member {String} title
 */
ArticleArticle.prototype['title'] = undefined;






export default ArticleArticle;

