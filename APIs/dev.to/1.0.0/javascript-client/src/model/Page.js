/**
 * Forem API V1
 * Access Forem articles, users and other resources via API.         For a real-world example of Forem in action, check out [DEV](https://www.dev.to).         All endpoints can be accessed with the 'api-key' header and a accept header, but         some of them are accessible publicly without authentication.          Dates and date times, unless otherwise specified, must be in         the [RFC 3339](https://tools.ietf.org/html/rfc3339) format.
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The Page model module.
 * @module model/Page
 * @version 1.0.0
 */
class Page {
    /**
     * Constructs a new <code>Page</code>.
     * Representation of a page object
     * @alias module:model/Page
     * @param description {String} For internal use, helps similar pages from one another
     * @param slug {String} Used to link to this page in URLs, must be unique and URL-safe
     * @param template {module:model/Page.TemplateEnum} Controls what kind of layout the page is rendered in
     * @param title {String} Title of the page
     */
    constructor(description, slug, template, title) { 
        
        Page.initialize(this, description, slug, template, title);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, description, slug, template, title) { 
        obj['description'] = description;
        obj['slug'] = slug;
        obj['template'] = template || 'contained';
        obj['title'] = title;
    }

    /**
     * Constructs a <code>Page</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/Page} obj Optional instance to populate.
     * @return {module:model/Page} The populated <code>Page</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new Page();

            if (data.hasOwnProperty('body_json')) {
                obj['body_json'] = ApiClient.convertToType(data['body_json'], 'String');
            }
            if (data.hasOwnProperty('body_markdown')) {
                obj['body_markdown'] = ApiClient.convertToType(data['body_markdown'], 'String');
            }
            if (data.hasOwnProperty('description')) {
                obj['description'] = ApiClient.convertToType(data['description'], 'String');
            }
            if (data.hasOwnProperty('is_top_level_path')) {
                obj['is_top_level_path'] = ApiClient.convertToType(data['is_top_level_path'], 'Boolean');
            }
            if (data.hasOwnProperty('slug')) {
                obj['slug'] = ApiClient.convertToType(data['slug'], 'String');
            }
            if (data.hasOwnProperty('social_image')) {
                obj['social_image'] = ApiClient.convertToType(data['social_image'], Object);
            }
            if (data.hasOwnProperty('template')) {
                obj['template'] = ApiClient.convertToType(data['template'], 'String');
            }
            if (data.hasOwnProperty('title')) {
                obj['title'] = ApiClient.convertToType(data['title'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>Page</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>Page</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of Page.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // ensure the json data is a string
        if (data['body_json'] && !(typeof data['body_json'] === 'string' || data['body_json'] instanceof String)) {
            throw new Error("Expected the field `body_json` to be a primitive type in the JSON string but got " + data['body_json']);
        }
        // ensure the json data is a string
        if (data['body_markdown'] && !(typeof data['body_markdown'] === 'string' || data['body_markdown'] instanceof String)) {
            throw new Error("Expected the field `body_markdown` to be a primitive type in the JSON string but got " + data['body_markdown']);
        }
        // ensure the json data is a string
        if (data['description'] && !(typeof data['description'] === 'string' || data['description'] instanceof String)) {
            throw new Error("Expected the field `description` to be a primitive type in the JSON string but got " + data['description']);
        }
        // ensure the json data is a string
        if (data['slug'] && !(typeof data['slug'] === 'string' || data['slug'] instanceof String)) {
            throw new Error("Expected the field `slug` to be a primitive type in the JSON string but got " + data['slug']);
        }
        // ensure the json data is a string
        if (data['template'] && !(typeof data['template'] === 'string' || data['template'] instanceof String)) {
            throw new Error("Expected the field `template` to be a primitive type in the JSON string but got " + data['template']);
        }
        // ensure the json data is a string
        if (data['title'] && !(typeof data['title'] === 'string' || data['title'] instanceof String)) {
            throw new Error("Expected the field `title` to be a primitive type in the JSON string but got " + data['title']);
        }

        return true;
    }


}

Page.RequiredProperties = ["description", "slug", "template", "title"];

/**
 * For JSON pages, the JSON body
 * @member {String} body_json
 */
Page.prototype['body_json'] = undefined;

/**
 * The text (in markdown) of the ad (required)
 * @member {String} body_markdown
 */
Page.prototype['body_markdown'] = undefined;

/**
 * For internal use, helps similar pages from one another
 * @member {String} description
 */
Page.prototype['description'] = undefined;

/**
 * If true, the page is available at '/{slug}' instead of '/page/{slug}', use with caution
 * @member {Boolean} is_top_level_path
 */
Page.prototype['is_top_level_path'] = undefined;

/**
 * Used to link to this page in URLs, must be unique and URL-safe
 * @member {String} slug
 */
Page.prototype['slug'] = undefined;

/**
 * @member {Object} social_image
 */
Page.prototype['social_image'] = undefined;

/**
 * Controls what kind of layout the page is rendered in
 * @member {module:model/Page.TemplateEnum} template
 * @default 'contained'
 */
Page.prototype['template'] = 'contained';

/**
 * Title of the page
 * @member {String} title
 */
Page.prototype['title'] = undefined;





/**
 * Allowed values for the <code>template</code> property.
 * @enum {String}
 * @readonly
 */
Page['TemplateEnum'] = {

    /**
     * value: "contained"
     * @const
     */
    "contained": "contained",

    /**
     * value: "full_within_layout"
     * @const
     */
    "full_within_layout": "full_within_layout",

    /**
     * value: "nav_bar_included"
     * @const
     */
    "nav_bar_included": "nav_bar_included",

    /**
     * value: "json"
     * @const
     */
    "json": "json"
};



export default Page;

