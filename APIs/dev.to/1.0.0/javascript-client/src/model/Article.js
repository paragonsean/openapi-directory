/**
 * Forem API V1
 * Access Forem articles, users and other resources via API.         For a real-world example of Forem in action, check out [DEV](https://www.dev.to).         All endpoints can be accessed with the 'api-key' header and a accept header, but         some of them are accessible publicly without authentication.          Dates and date times, unless otherwise specified, must be in         the [RFC 3339](https://tools.ietf.org/html/rfc3339) format.
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import ArticleArticle from './ArticleArticle';

/**
 * The Article model module.
 * @module model/Article
 * @version 1.0.0
 */
class Article {
    /**
     * Constructs a new <code>Article</code>.
     * Representation of an Article to be created/updated
     * @alias module:model/Article
     */
    constructor() { 
        
        Article.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>Article</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/Article} obj Optional instance to populate.
     * @return {module:model/Article} The populated <code>Article</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new Article();

            if (data.hasOwnProperty('article')) {
                obj['article'] = ArticleArticle.constructFromObject(data['article']);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>Article</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>Article</code>.
     */
    static validateJSON(data) {
        // validate the optional field `article`
        if (data['article']) { // data not null
          ArticleArticle.validateJSON(data['article']);
        }

        return true;
    }


}



/**
 * @member {module:model/ArticleArticle} article
 */
Article.prototype['article'] = undefined;






export default Article;

