/**
 * Forem API V1
 * Access Forem articles, users and other resources via API.         For a real-world example of Forem in action, check out [DEV](https://www.dev.to).         All endpoints can be accessed with the 'api-key' header and a accept header, but         some of them are accessible publicly without authentication.          Dates and date times, unless otherwise specified, must be in         the [RFC 3339](https://tools.ietf.org/html/rfc3339) format.
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The Comment model module.
 * @module model/Comment
 * @version 1.0.0
 */
class Comment {
    /**
     * Constructs a new <code>Comment</code>.
     * A Comment on an Article or Podcast Episode
     * @alias module:model/Comment
     */
    constructor() { 
        
        Comment.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>Comment</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/Comment} obj Optional instance to populate.
     * @return {module:model/Comment} The populated <code>Comment</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new Comment();

            if (data.hasOwnProperty('created_at')) {
                obj['created_at'] = ApiClient.convertToType(data['created_at'], 'Date');
            }
            if (data.hasOwnProperty('id_code')) {
                obj['id_code'] = ApiClient.convertToType(data['id_code'], 'String');
            }
            if (data.hasOwnProperty('image_url')) {
                obj['image_url'] = ApiClient.convertToType(data['image_url'], 'String');
            }
            if (data.hasOwnProperty('type_of')) {
                obj['type_of'] = ApiClient.convertToType(data['type_of'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>Comment</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>Comment</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['id_code'] && !(typeof data['id_code'] === 'string' || data['id_code'] instanceof String)) {
            throw new Error("Expected the field `id_code` to be a primitive type in the JSON string but got " + data['id_code']);
        }
        // ensure the json data is a string
        if (data['image_url'] && !(typeof data['image_url'] === 'string' || data['image_url'] instanceof String)) {
            throw new Error("Expected the field `image_url` to be a primitive type in the JSON string but got " + data['image_url']);
        }
        // ensure the json data is a string
        if (data['type_of'] && !(typeof data['type_of'] === 'string' || data['type_of'] instanceof String)) {
            throw new Error("Expected the field `type_of` to be a primitive type in the JSON string but got " + data['type_of']);
        }

        return true;
    }


}



/**
 * @member {Date} created_at
 */
Comment.prototype['created_at'] = undefined;

/**
 * @member {String} id_code
 */
Comment.prototype['id_code'] = undefined;

/**
 * Podcast image url
 * @member {String} image_url
 */
Comment.prototype['image_url'] = undefined;

/**
 * @member {String} type_of
 */
Comment.prototype['type_of'] = undefined;






export default Comment;

