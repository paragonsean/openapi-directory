/**
 * Forem API V1
 * Access Forem articles, users and other resources via API.         For a real-world example of Forem in action, check out [DEV](https://www.dev.to).         All endpoints can be accessed with the 'api-key' header and a accept header, but         some of them are accessible publicly without authentication.          Dates and date times, unless otherwise specified, must be in         the [RFC 3339](https://tools.ietf.org/html/rfc3339) format.
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', process.cwd()+'/src/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require(process.cwd()+'/src/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.ForemApiV1);
  }
}(this, function(expect, ForemApiV1) {
  'use strict';

  var instance;

  beforeEach(function() {
    instance = new ForemApiV1.ArticlesApi();
  });

  var getProperty = function(object, getter, property) {
    // Use getter method if present; otherwise, get the property directly.
    if (typeof object[getter] === 'function')
      return object[getter]();
    else
      return object[property];
  }

  var setProperty = function(object, setter, property, value) {
    // Use setter method if present; otherwise, set the property directly.
    if (typeof object[setter] === 'function')
      object[setter](value);
    else
      object[property] = value;
  }

  describe('ArticlesApi', function() {
    describe('createArticle', function() {
      it('should call createArticle successfully', function(done) {
        //uncomment below and update the code to test createArticle
        //instance.createArticle(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('getArticleById', function() {
      it('should call getArticleById successfully', function(done) {
        //uncomment below and update the code to test getArticleById
        //instance.getArticleById(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('getArticleByPath', function() {
      it('should call getArticleByPath successfully', function(done) {
        //uncomment below and update the code to test getArticleByPath
        //instance.getArticleByPath(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('getArticles', function() {
      it('should call getArticles successfully', function(done) {
        //uncomment below and update the code to test getArticles
        //instance.getArticles(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('getLatestArticles', function() {
      it('should call getLatestArticles successfully', function(done) {
        //uncomment below and update the code to test getLatestArticles
        //instance.getLatestArticles(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('getOrgArticles_0', function() {
      it('should call getOrgArticles_0 successfully', function(done) {
        //uncomment below and update the code to test getOrgArticles_0
        //instance.getOrgArticles_0(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('getUserAllArticles', function() {
      it('should call getUserAllArticles successfully', function(done) {
        //uncomment below and update the code to test getUserAllArticles
        //instance.getUserAllArticles(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('getUserArticles', function() {
      it('should call getUserArticles successfully', function(done) {
        //uncomment below and update the code to test getUserArticles
        //instance.getUserArticles(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('getUserPublishedArticles', function() {
      it('should call getUserPublishedArticles successfully', function(done) {
        //uncomment below and update the code to test getUserPublishedArticles
        //instance.getUserPublishedArticles(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('getUserUnpublishedArticles', function() {
      it('should call getUserUnpublishedArticles successfully', function(done) {
        //uncomment below and update the code to test getUserUnpublishedArticles
        //instance.getUserUnpublishedArticles(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('unpublishArticle', function() {
      it('should call unpublishArticle successfully', function(done) {
        //uncomment below and update the code to test unpublishArticle
        //instance.unpublishArticle(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('updateArticle', function() {
      it('should call updateArticle successfully', function(done) {
        //uncomment below and update the code to test updateArticle
        //instance.updateArticle(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('videos_0', function() {
      it('should call videos_0 successfully', function(done) {
        //uncomment below and update the code to test videos_0
        //instance.videos_0(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
  });

}));
