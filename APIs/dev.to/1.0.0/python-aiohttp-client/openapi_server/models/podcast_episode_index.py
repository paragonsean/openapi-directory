# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.shared_podcast import SharedPodcast
from openapi_server import util


class PodcastEpisodeIndex(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, class_name: str=None, id: int=None, image_url: str=None, path: str=None, podcast: SharedPodcast=None, title: str=None, type_of: str=None):
        """PodcastEpisodeIndex - a model defined in OpenAPI

        :param class_name: The class_name of this PodcastEpisodeIndex.
        :param id: The id of this PodcastEpisodeIndex.
        :param image_url: The image_url of this PodcastEpisodeIndex.
        :param path: The path of this PodcastEpisodeIndex.
        :param podcast: The podcast of this PodcastEpisodeIndex.
        :param title: The title of this PodcastEpisodeIndex.
        :param type_of: The type_of of this PodcastEpisodeIndex.
        """
        self.openapi_types = {
            'class_name': str,
            'id': int,
            'image_url': str,
            'path': str,
            'podcast': SharedPodcast,
            'title': str,
            'type_of': str
        }

        self.attribute_map = {
            'class_name': 'class_name',
            'id': 'id',
            'image_url': 'image_url',
            'path': 'path',
            'podcast': 'podcast',
            'title': 'title',
            'type_of': 'type_of'
        }

        self._class_name = class_name
        self._id = id
        self._image_url = image_url
        self._path = path
        self._podcast = podcast
        self._title = title
        self._type_of = type_of

    @classmethod
    def from_dict(cls, dikt: dict) -> 'PodcastEpisodeIndex':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The PodcastEpisodeIndex of this PodcastEpisodeIndex.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def class_name(self):
        """Gets the class_name of this PodcastEpisodeIndex.


        :return: The class_name of this PodcastEpisodeIndex.
        :rtype: str
        """
        return self._class_name

    @class_name.setter
    def class_name(self, class_name):
        """Sets the class_name of this PodcastEpisodeIndex.


        :param class_name: The class_name of this PodcastEpisodeIndex.
        :type class_name: str
        """
        if class_name is None:
            raise ValueError("Invalid value for `class_name`, must not be `None`")

        self._class_name = class_name

    @property
    def id(self):
        """Gets the id of this PodcastEpisodeIndex.


        :return: The id of this PodcastEpisodeIndex.
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this PodcastEpisodeIndex.


        :param id: The id of this PodcastEpisodeIndex.
        :type id: int
        """
        if id is None:
            raise ValueError("Invalid value for `id`, must not be `None`")

        self._id = id

    @property
    def image_url(self):
        """Gets the image_url of this PodcastEpisodeIndex.

        Podcast episode image url or podcast image url

        :return: The image_url of this PodcastEpisodeIndex.
        :rtype: str
        """
        return self._image_url

    @image_url.setter
    def image_url(self, image_url):
        """Sets the image_url of this PodcastEpisodeIndex.

        Podcast episode image url or podcast image url

        :param image_url: The image_url of this PodcastEpisodeIndex.
        :type image_url: str
        """
        if image_url is None:
            raise ValueError("Invalid value for `image_url`, must not be `None`")

        self._image_url = image_url

    @property
    def path(self):
        """Gets the path of this PodcastEpisodeIndex.


        :return: The path of this PodcastEpisodeIndex.
        :rtype: str
        """
        return self._path

    @path.setter
    def path(self, path):
        """Sets the path of this PodcastEpisodeIndex.


        :param path: The path of this PodcastEpisodeIndex.
        :type path: str
        """
        if path is None:
            raise ValueError("Invalid value for `path`, must not be `None`")

        self._path = path

    @property
    def podcast(self):
        """Gets the podcast of this PodcastEpisodeIndex.


        :return: The podcast of this PodcastEpisodeIndex.
        :rtype: SharedPodcast
        """
        return self._podcast

    @podcast.setter
    def podcast(self, podcast):
        """Sets the podcast of this PodcastEpisodeIndex.


        :param podcast: The podcast of this PodcastEpisodeIndex.
        :type podcast: SharedPodcast
        """
        if podcast is None:
            raise ValueError("Invalid value for `podcast`, must not be `None`")

        self._podcast = podcast

    @property
    def title(self):
        """Gets the title of this PodcastEpisodeIndex.


        :return: The title of this PodcastEpisodeIndex.
        :rtype: str
        """
        return self._title

    @title.setter
    def title(self, title):
        """Sets the title of this PodcastEpisodeIndex.


        :param title: The title of this PodcastEpisodeIndex.
        :type title: str
        """
        if title is None:
            raise ValueError("Invalid value for `title`, must not be `None`")

        self._title = title

    @property
    def type_of(self):
        """Gets the type_of of this PodcastEpisodeIndex.


        :return: The type_of of this PodcastEpisodeIndex.
        :rtype: str
        """
        return self._type_of

    @type_of.setter
    def type_of(self, type_of):
        """Sets the type_of of this PodcastEpisodeIndex.


        :param type_of: The type_of of this PodcastEpisodeIndex.
        :type type_of: str
        """
        if type_of is None:
            raise ValueError("Invalid value for `type_of`, must not be `None`")

        self._type_of = type_of
