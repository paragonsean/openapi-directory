# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class ArticleArticle(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, body_markdown: str=None, canonical_url: str=None, description: str=None, main_image: str=None, organization_id: int=None, published: bool=False, series: str=None, tags: str=None, title: str=None):
        """ArticleArticle - a model defined in OpenAPI

        :param body_markdown: The body_markdown of this ArticleArticle.
        :param canonical_url: The canonical_url of this ArticleArticle.
        :param description: The description of this ArticleArticle.
        :param main_image: The main_image of this ArticleArticle.
        :param organization_id: The organization_id of this ArticleArticle.
        :param published: The published of this ArticleArticle.
        :param series: The series of this ArticleArticle.
        :param tags: The tags of this ArticleArticle.
        :param title: The title of this ArticleArticle.
        """
        self.openapi_types = {
            'body_markdown': str,
            'canonical_url': str,
            'description': str,
            'main_image': str,
            'organization_id': int,
            'published': bool,
            'series': str,
            'tags': str,
            'title': str
        }

        self.attribute_map = {
            'body_markdown': 'body_markdown',
            'canonical_url': 'canonical_url',
            'description': 'description',
            'main_image': 'main_image',
            'organization_id': 'organization_id',
            'published': 'published',
            'series': 'series',
            'tags': 'tags',
            'title': 'title'
        }

        self._body_markdown = body_markdown
        self._canonical_url = canonical_url
        self._description = description
        self._main_image = main_image
        self._organization_id = organization_id
        self._published = published
        self._series = series
        self._tags = tags
        self._title = title

    @classmethod
    def from_dict(cls, dikt: dict) -> 'ArticleArticle':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Article_article of this ArticleArticle.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def body_markdown(self):
        """Gets the body_markdown of this ArticleArticle.


        :return: The body_markdown of this ArticleArticle.
        :rtype: str
        """
        return self._body_markdown

    @body_markdown.setter
    def body_markdown(self, body_markdown):
        """Sets the body_markdown of this ArticleArticle.


        :param body_markdown: The body_markdown of this ArticleArticle.
        :type body_markdown: str
        """

        self._body_markdown = body_markdown

    @property
    def canonical_url(self):
        """Gets the canonical_url of this ArticleArticle.


        :return: The canonical_url of this ArticleArticle.
        :rtype: str
        """
        return self._canonical_url

    @canonical_url.setter
    def canonical_url(self, canonical_url):
        """Sets the canonical_url of this ArticleArticle.


        :param canonical_url: The canonical_url of this ArticleArticle.
        :type canonical_url: str
        """

        self._canonical_url = canonical_url

    @property
    def description(self):
        """Gets the description of this ArticleArticle.


        :return: The description of this ArticleArticle.
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this ArticleArticle.


        :param description: The description of this ArticleArticle.
        :type description: str
        """

        self._description = description

    @property
    def main_image(self):
        """Gets the main_image of this ArticleArticle.


        :return: The main_image of this ArticleArticle.
        :rtype: str
        """
        return self._main_image

    @main_image.setter
    def main_image(self, main_image):
        """Sets the main_image of this ArticleArticle.


        :param main_image: The main_image of this ArticleArticle.
        :type main_image: str
        """

        self._main_image = main_image

    @property
    def organization_id(self):
        """Gets the organization_id of this ArticleArticle.


        :return: The organization_id of this ArticleArticle.
        :rtype: int
        """
        return self._organization_id

    @organization_id.setter
    def organization_id(self, organization_id):
        """Sets the organization_id of this ArticleArticle.


        :param organization_id: The organization_id of this ArticleArticle.
        :type organization_id: int
        """

        self._organization_id = organization_id

    @property
    def published(self):
        """Gets the published of this ArticleArticle.


        :return: The published of this ArticleArticle.
        :rtype: bool
        """
        return self._published

    @published.setter
    def published(self, published):
        """Sets the published of this ArticleArticle.


        :param published: The published of this ArticleArticle.
        :type published: bool
        """

        self._published = published

    @property
    def series(self):
        """Gets the series of this ArticleArticle.


        :return: The series of this ArticleArticle.
        :rtype: str
        """
        return self._series

    @series.setter
    def series(self, series):
        """Sets the series of this ArticleArticle.


        :param series: The series of this ArticleArticle.
        :type series: str
        """

        self._series = series

    @property
    def tags(self):
        """Gets the tags of this ArticleArticle.


        :return: The tags of this ArticleArticle.
        :rtype: str
        """
        return self._tags

    @tags.setter
    def tags(self, tags):
        """Sets the tags of this ArticleArticle.


        :param tags: The tags of this ArticleArticle.
        :type tags: str
        """

        self._tags = tags

    @property
    def title(self):
        """Gets the title of this ArticleArticle.


        :return: The title of this ArticleArticle.
        :rtype: str
        """
        return self._title

    @title.setter
    def title(self, title):
        """Sets the title of this ArticleArticle.


        :param title: The title of this ArticleArticle.
        :type title: str
        """

        self._title = title
