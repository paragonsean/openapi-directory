# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class Page(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, body_json: str=None, body_markdown: str=None, description: str=None, is_top_level_path: bool=None, slug: str=None, social_image: object=None, template: str='contained', title: str=None):
        """Page - a model defined in OpenAPI

        :param body_json: The body_json of this Page.
        :param body_markdown: The body_markdown of this Page.
        :param description: The description of this Page.
        :param is_top_level_path: The is_top_level_path of this Page.
        :param slug: The slug of this Page.
        :param social_image: The social_image of this Page.
        :param template: The template of this Page.
        :param title: The title of this Page.
        """
        self.openapi_types = {
            'body_json': str,
            'body_markdown': str,
            'description': str,
            'is_top_level_path': bool,
            'slug': str,
            'social_image': object,
            'template': str,
            'title': str
        }

        self.attribute_map = {
            'body_json': 'body_json',
            'body_markdown': 'body_markdown',
            'description': 'description',
            'is_top_level_path': 'is_top_level_path',
            'slug': 'slug',
            'social_image': 'social_image',
            'template': 'template',
            'title': 'title'
        }

        self._body_json = body_json
        self._body_markdown = body_markdown
        self._description = description
        self._is_top_level_path = is_top_level_path
        self._slug = slug
        self._social_image = social_image
        self._template = template
        self._title = title

    @classmethod
    def from_dict(cls, dikt: dict) -> 'Page':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Page of this Page.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def body_json(self):
        """Gets the body_json of this Page.

        For JSON pages, the JSON body

        :return: The body_json of this Page.
        :rtype: str
        """
        return self._body_json

    @body_json.setter
    def body_json(self, body_json):
        """Sets the body_json of this Page.

        For JSON pages, the JSON body

        :param body_json: The body_json of this Page.
        :type body_json: str
        """

        self._body_json = body_json

    @property
    def body_markdown(self):
        """Gets the body_markdown of this Page.

        The text (in markdown) of the ad (required)

        :return: The body_markdown of this Page.
        :rtype: str
        """
        return self._body_markdown

    @body_markdown.setter
    def body_markdown(self, body_markdown):
        """Sets the body_markdown of this Page.

        The text (in markdown) of the ad (required)

        :param body_markdown: The body_markdown of this Page.
        :type body_markdown: str
        """

        self._body_markdown = body_markdown

    @property
    def description(self):
        """Gets the description of this Page.

        For internal use, helps similar pages from one another

        :return: The description of this Page.
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this Page.

        For internal use, helps similar pages from one another

        :param description: The description of this Page.
        :type description: str
        """
        if description is None:
            raise ValueError("Invalid value for `description`, must not be `None`")

        self._description = description

    @property
    def is_top_level_path(self):
        """Gets the is_top_level_path of this Page.

        If true, the page is available at '/{slug}' instead of '/page/{slug}', use with caution

        :return: The is_top_level_path of this Page.
        :rtype: bool
        """
        return self._is_top_level_path

    @is_top_level_path.setter
    def is_top_level_path(self, is_top_level_path):
        """Sets the is_top_level_path of this Page.

        If true, the page is available at '/{slug}' instead of '/page/{slug}', use with caution

        :param is_top_level_path: The is_top_level_path of this Page.
        :type is_top_level_path: bool
        """

        self._is_top_level_path = is_top_level_path

    @property
    def slug(self):
        """Gets the slug of this Page.

        Used to link to this page in URLs, must be unique and URL-safe

        :return: The slug of this Page.
        :rtype: str
        """
        return self._slug

    @slug.setter
    def slug(self, slug):
        """Sets the slug of this Page.

        Used to link to this page in URLs, must be unique and URL-safe

        :param slug: The slug of this Page.
        :type slug: str
        """
        if slug is None:
            raise ValueError("Invalid value for `slug`, must not be `None`")

        self._slug = slug

    @property
    def social_image(self):
        """Gets the social_image of this Page.


        :return: The social_image of this Page.
        :rtype: object
        """
        return self._social_image

    @social_image.setter
    def social_image(self, social_image):
        """Sets the social_image of this Page.


        :param social_image: The social_image of this Page.
        :type social_image: object
        """

        self._social_image = social_image

    @property
    def template(self):
        """Gets the template of this Page.

        Controls what kind of layout the page is rendered in

        :return: The template of this Page.
        :rtype: str
        """
        return self._template

    @template.setter
    def template(self, template):
        """Sets the template of this Page.

        Controls what kind of layout the page is rendered in

        :param template: The template of this Page.
        :type template: str
        """
        allowed_values = ["contained", "full_within_layout", "nav_bar_included", "json"]  # noqa: E501
        if template not in allowed_values:
            raise ValueError(
                "Invalid value for `template` ({0}), must be one of {1}"
                .format(template, allowed_values)
            )

        self._template = template

    @property
    def title(self):
        """Gets the title of this Page.

        Title of the page

        :return: The title of this Page.
        :rtype: str
        """
        return self._title

    @title.setter
    def title(self, title):
        """Sets the title of this Page.

        Title of the page

        :param title: The title of this Page.
        :type title: str
        """
        if title is None:
            raise ValueError("Invalid value for `title`, must not be `None`")

        self._title = title
