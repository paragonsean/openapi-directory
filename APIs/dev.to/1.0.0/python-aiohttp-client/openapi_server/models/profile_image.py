# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class ProfileImage(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, image_of: str=None, profile_image: str=None, profile_image_90: str=None, type_of: str=None):
        """ProfileImage - a model defined in OpenAPI

        :param image_of: The image_of of this ProfileImage.
        :param profile_image: The profile_image of this ProfileImage.
        :param profile_image_90: The profile_image_90 of this ProfileImage.
        :param type_of: The type_of of this ProfileImage.
        """
        self.openapi_types = {
            'image_of': str,
            'profile_image': str,
            'profile_image_90': str,
            'type_of': str
        }

        self.attribute_map = {
            'image_of': 'image_of',
            'profile_image': 'profile_image',
            'profile_image_90': 'profile_image_90',
            'type_of': 'type_of'
        }

        self._image_of = image_of
        self._profile_image = profile_image
        self._profile_image_90 = profile_image_90
        self._type_of = type_of

    @classmethod
    def from_dict(cls, dikt: dict) -> 'ProfileImage':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The ProfileImage of this ProfileImage.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def image_of(self):
        """Gets the image_of of this ProfileImage.

        Determines the type of the profile image owner (user or organization)

        :return: The image_of of this ProfileImage.
        :rtype: str
        """
        return self._image_of

    @image_of.setter
    def image_of(self, image_of):
        """Sets the image_of of this ProfileImage.

        Determines the type of the profile image owner (user or organization)

        :param image_of: The image_of of this ProfileImage.
        :type image_of: str
        """

        self._image_of = image_of

    @property
    def profile_image(self):
        """Gets the profile_image of this ProfileImage.

        Profile image (640x640)

        :return: The profile_image of this ProfileImage.
        :rtype: str
        """
        return self._profile_image

    @profile_image.setter
    def profile_image(self, profile_image):
        """Sets the profile_image of this ProfileImage.

        Profile image (640x640)

        :param profile_image: The profile_image of this ProfileImage.
        :type profile_image: str
        """

        self._profile_image = profile_image

    @property
    def profile_image_90(self):
        """Gets the profile_image_90 of this ProfileImage.

        Profile image (90x90)

        :return: The profile_image_90 of this ProfileImage.
        :rtype: str
        """
        return self._profile_image_90

    @profile_image_90.setter
    def profile_image_90(self, profile_image_90):
        """Sets the profile_image_90 of this ProfileImage.

        Profile image (90x90)

        :param profile_image_90: The profile_image_90 of this ProfileImage.
        :type profile_image_90: str
        """

        self._profile_image_90 = profile_image_90

    @property
    def type_of(self):
        """Gets the type_of of this ProfileImage.

        Return profile_image

        :return: The type_of of this ProfileImage.
        :rtype: str
        """
        return self._type_of

    @type_of.setter
    def type_of(self, type_of):
        """Sets the type_of of this ProfileImage.

        Return profile_image

        :param type_of: The type_of of this ProfileImage.
        :type type_of: str
        """

        self._type_of = type_of
