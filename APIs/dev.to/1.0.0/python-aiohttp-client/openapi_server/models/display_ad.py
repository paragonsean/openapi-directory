# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class DisplayAd(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, approved: bool=None, article_exclude_ids: str=None, body_markdown: str=None, creator_id: int=None, display_to: str='all', id: int=None, name: str=None, organization_id: int=None, placement_area: str=None, published: bool=None, tag_list: str=None, type_of: str='in_house'):
        """DisplayAd - a model defined in OpenAPI

        :param approved: The approved of this DisplayAd.
        :param article_exclude_ids: The article_exclude_ids of this DisplayAd.
        :param body_markdown: The body_markdown of this DisplayAd.
        :param creator_id: The creator_id of this DisplayAd.
        :param display_to: The display_to of this DisplayAd.
        :param id: The id of this DisplayAd.
        :param name: The name of this DisplayAd.
        :param organization_id: The organization_id of this DisplayAd.
        :param placement_area: The placement_area of this DisplayAd.
        :param published: The published of this DisplayAd.
        :param tag_list: The tag_list of this DisplayAd.
        :param type_of: The type_of of this DisplayAd.
        """
        self.openapi_types = {
            'approved': bool,
            'article_exclude_ids': str,
            'body_markdown': str,
            'creator_id': int,
            'display_to': str,
            'id': int,
            'name': str,
            'organization_id': int,
            'placement_area': str,
            'published': bool,
            'tag_list': str,
            'type_of': str
        }

        self.attribute_map = {
            'approved': 'approved',
            'article_exclude_ids': 'article_exclude_ids',
            'body_markdown': 'body_markdown',
            'creator_id': 'creator_id',
            'display_to': 'display_to',
            'id': 'id',
            'name': 'name',
            'organization_id': 'organization_id',
            'placement_area': 'placement_area',
            'published': 'published',
            'tag_list': 'tag_list',
            'type_of': 'type_of'
        }

        self._approved = approved
        self._article_exclude_ids = article_exclude_ids
        self._body_markdown = body_markdown
        self._creator_id = creator_id
        self._display_to = display_to
        self._id = id
        self._name = name
        self._organization_id = organization_id
        self._placement_area = placement_area
        self._published = published
        self._tag_list = tag_list
        self._type_of = type_of

    @classmethod
    def from_dict(cls, dikt: dict) -> 'DisplayAd':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The DisplayAd of this DisplayAd.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def approved(self):
        """Gets the approved of this DisplayAd.

        Ad must be both published and approved to be in rotation

        :return: The approved of this DisplayAd.
        :rtype: bool
        """
        return self._approved

    @approved.setter
    def approved(self, approved):
        """Sets the approved of this DisplayAd.

        Ad must be both published and approved to be in rotation

        :param approved: The approved of this DisplayAd.
        :type approved: bool
        """

        self._approved = approved

    @property
    def article_exclude_ids(self):
        """Gets the article_exclude_ids of this DisplayAd.

        Articles this ad should *not* appear on (blank means no articles are disallowed, and this ad can appear next to any/all articles). Comma-separated list of integer Article IDs

        :return: The article_exclude_ids of this DisplayAd.
        :rtype: str
        """
        return self._article_exclude_ids

    @article_exclude_ids.setter
    def article_exclude_ids(self, article_exclude_ids):
        """Sets the article_exclude_ids of this DisplayAd.

        Articles this ad should *not* appear on (blank means no articles are disallowed, and this ad can appear next to any/all articles). Comma-separated list of integer Article IDs

        :param article_exclude_ids: The article_exclude_ids of this DisplayAd.
        :type article_exclude_ids: str
        """

        self._article_exclude_ids = article_exclude_ids

    @property
    def body_markdown(self):
        """Gets the body_markdown of this DisplayAd.

        The text (in markdown) of the ad (required)

        :return: The body_markdown of this DisplayAd.
        :rtype: str
        """
        return self._body_markdown

    @body_markdown.setter
    def body_markdown(self, body_markdown):
        """Sets the body_markdown of this DisplayAd.

        The text (in markdown) of the ad (required)

        :param body_markdown: The body_markdown of this DisplayAd.
        :type body_markdown: str
        """
        if body_markdown is None:
            raise ValueError("Invalid value for `body_markdown`, must not be `None`")

        self._body_markdown = body_markdown

    @property
    def creator_id(self):
        """Gets the creator_id of this DisplayAd.

        Identifies the user who created the ad.

        :return: The creator_id of this DisplayAd.
        :rtype: int
        """
        return self._creator_id

    @creator_id.setter
    def creator_id(self, creator_id):
        """Sets the creator_id of this DisplayAd.

        Identifies the user who created the ad.

        :param creator_id: The creator_id of this DisplayAd.
        :type creator_id: int
        """

        self._creator_id = creator_id

    @property
    def display_to(self):
        """Gets the display_to of this DisplayAd.

        Potentially limits visitors to whom the ad is visible

        :return: The display_to of this DisplayAd.
        :rtype: str
        """
        return self._display_to

    @display_to.setter
    def display_to(self, display_to):
        """Sets the display_to of this DisplayAd.

        Potentially limits visitors to whom the ad is visible

        :param display_to: The display_to of this DisplayAd.
        :type display_to: str
        """
        allowed_values = ["all", "logged_in", "logged_out"]  # noqa: E501
        if display_to not in allowed_values:
            raise ValueError(
                "Invalid value for `display_to` ({0}), must be one of {1}"
                .format(display_to, allowed_values)
            )

        self._display_to = display_to

    @property
    def id(self):
        """Gets the id of this DisplayAd.

        The ID of the Display Ad

        :return: The id of this DisplayAd.
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this DisplayAd.

        The ID of the Display Ad

        :param id: The id of this DisplayAd.
        :type id: int
        """

        self._id = id

    @property
    def name(self):
        """Gets the name of this DisplayAd.

        For internal use, helps distinguish ads from one another

        :return: The name of this DisplayAd.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this DisplayAd.

        For internal use, helps distinguish ads from one another

        :param name: The name of this DisplayAd.
        :type name: str
        """
        if name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")

        self._name = name

    @property
    def organization_id(self):
        """Gets the organization_id of this DisplayAd.

        Identifies the organization to which the ad belongs

        :return: The organization_id of this DisplayAd.
        :rtype: int
        """
        return self._organization_id

    @organization_id.setter
    def organization_id(self, organization_id):
        """Sets the organization_id of this DisplayAd.

        Identifies the organization to which the ad belongs

        :param organization_id: The organization_id of this DisplayAd.
        :type organization_id: int
        """

        self._organization_id = organization_id

    @property
    def placement_area(self):
        """Gets the placement_area of this DisplayAd.

        Identifies which area of site layout the ad can appear in

        :return: The placement_area of this DisplayAd.
        :rtype: str
        """
        return self._placement_area

    @placement_area.setter
    def placement_area(self, placement_area):
        """Sets the placement_area of this DisplayAd.

        Identifies which area of site layout the ad can appear in

        :param placement_area: The placement_area of this DisplayAd.
        :type placement_area: str
        """
        allowed_values = ["sidebar_left", "sidebar_left_2", "sidebar_right", "feed_first", "feed_second", "feed_third", "post_sidebar", "post_comments"]  # noqa: E501
        if placement_area not in allowed_values:
            raise ValueError(
                "Invalid value for `placement_area` ({0}), must be one of {1}"
                .format(placement_area, allowed_values)
            )

        self._placement_area = placement_area

    @property
    def published(self):
        """Gets the published of this DisplayAd.

        Ad must be both published and approved to be in rotation

        :return: The published of this DisplayAd.
        :rtype: bool
        """
        return self._published

    @published.setter
    def published(self, published):
        """Sets the published of this DisplayAd.

        Ad must be both published and approved to be in rotation

        :param published: The published of this DisplayAd.
        :type published: bool
        """

        self._published = published

    @property
    def tag_list(self):
        """Gets the tag_list of this DisplayAd.

        Tags on which this ad can be displayed (blank is all/any tags)

        :return: The tag_list of this DisplayAd.
        :rtype: str
        """
        return self._tag_list

    @tag_list.setter
    def tag_list(self, tag_list):
        """Sets the tag_list of this DisplayAd.

        Tags on which this ad can be displayed (blank is all/any tags)

        :param tag_list: The tag_list of this DisplayAd.
        :type tag_list: str
        """

        self._tag_list = tag_list

    @property
    def type_of(self):
        """Gets the type_of of this DisplayAd.

        Types of the billboards: in_house (created by admins), community (created by an entity, appears on entity's content), external ( created by an entity, or a non-entity, can appear everywhere) 

        :return: The type_of of this DisplayAd.
        :rtype: str
        """
        return self._type_of

    @type_of.setter
    def type_of(self, type_of):
        """Sets the type_of of this DisplayAd.

        Types of the billboards: in_house (created by admins), community (created by an entity, appears on entity's content), external ( created by an entity, or a non-entity, can appear everywhere) 

        :param type_of: The type_of of this DisplayAd.
        :type type_of: str
        """
        allowed_values = ["in_house", "community", "external"]  # noqa: E501
        if type_of not in allowed_values:
            raise ValueError(
                "Invalid value for `type_of` ({0}), must be one of {1}"
                .format(type_of, allowed_values)
            )

        self._type_of = type_of
