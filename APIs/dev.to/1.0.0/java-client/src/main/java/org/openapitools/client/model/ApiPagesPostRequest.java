/*
 * Forem API V1
 * Access Forem articles, users and other resources via API.         For a real-world example of Forem in action, check out [DEV](https://www.dev.to).         All endpoints can be accessed with the 'api-key' header and a accept header, but         some of them are accessible publicly without authentication.          Dates and date times, unless otherwise specified, must be in         the [RFC 3339](https://tools.ietf.org/html/rfc3339) format.
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * ApiPagesPostRequest
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:23:22.236584-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class ApiPagesPostRequest {
  public static final String SERIALIZED_NAME_BODY_JSON = "body_json";
  @SerializedName(SERIALIZED_NAME_BODY_JSON)
  private String bodyJson;

  public static final String SERIALIZED_NAME_BODY_MARKDOWN = "body_markdown";
  @SerializedName(SERIALIZED_NAME_BODY_MARKDOWN)
  private String bodyMarkdown;

  public static final String SERIALIZED_NAME_DESCRIPTION = "description";
  @SerializedName(SERIALIZED_NAME_DESCRIPTION)
  private String description;

  public static final String SERIALIZED_NAME_IS_TOP_LEVEL_PATH = "is_top_level_path";
  @SerializedName(SERIALIZED_NAME_IS_TOP_LEVEL_PATH)
  private Boolean isTopLevelPath;

  public static final String SERIALIZED_NAME_SLUG = "slug";
  @SerializedName(SERIALIZED_NAME_SLUG)
  private String slug;

  /**
   * Controls what kind of layout the page is rendered in
   */
  @JsonAdapter(TemplateEnum.Adapter.class)
  public enum TemplateEnum {
    CONTAINED("contained"),
    
    FULL_WITHIN_LAYOUT("full_within_layout"),
    
    NAV_BAR_INCLUDED("nav_bar_included"),
    
    JSON("json");

    private String value;

    TemplateEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static TemplateEnum fromValue(String value) {
      for (TemplateEnum b : TemplateEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<TemplateEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final TemplateEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public TemplateEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return TemplateEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      TemplateEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_TEMPLATE = "template";
  @SerializedName(SERIALIZED_NAME_TEMPLATE)
  private TemplateEnum template = TemplateEnum.CONTAINED;

  public static final String SERIALIZED_NAME_TITLE = "title";
  @SerializedName(SERIALIZED_NAME_TITLE)
  private String title;

  public ApiPagesPostRequest() {
  }

  public ApiPagesPostRequest bodyJson(String bodyJson) {
    this.bodyJson = bodyJson;
    return this;
  }

  /**
   * For JSON pages, the JSON body
   * @return bodyJson
   */
  @javax.annotation.Nullable
  public String getBodyJson() {
    return bodyJson;
  }

  public void setBodyJson(String bodyJson) {
    this.bodyJson = bodyJson;
  }


  public ApiPagesPostRequest bodyMarkdown(String bodyMarkdown) {
    this.bodyMarkdown = bodyMarkdown;
    return this;
  }

  /**
   * The text (in markdown) of the ad (required)
   * @return bodyMarkdown
   */
  @javax.annotation.Nullable
  public String getBodyMarkdown() {
    return bodyMarkdown;
  }

  public void setBodyMarkdown(String bodyMarkdown) {
    this.bodyMarkdown = bodyMarkdown;
  }


  public ApiPagesPostRequest description(String description) {
    this.description = description;
    return this;
  }

  /**
   * For internal use, helps similar pages from one another
   * @return description
   */
  @javax.annotation.Nullable
  public String getDescription() {
    return description;
  }

  public void setDescription(String description) {
    this.description = description;
  }


  public ApiPagesPostRequest isTopLevelPath(Boolean isTopLevelPath) {
    this.isTopLevelPath = isTopLevelPath;
    return this;
  }

  /**
   * If true, the page is available at &#39;/{slug}&#39; instead of &#39;/page/{slug}&#39;, use with caution
   * @return isTopLevelPath
   */
  @javax.annotation.Nullable
  public Boolean getIsTopLevelPath() {
    return isTopLevelPath;
  }

  public void setIsTopLevelPath(Boolean isTopLevelPath) {
    this.isTopLevelPath = isTopLevelPath;
  }


  public ApiPagesPostRequest slug(String slug) {
    this.slug = slug;
    return this;
  }

  /**
   * Used to link to this page in URLs, must be unique and URL-safe
   * @return slug
   */
  @javax.annotation.Nullable
  public String getSlug() {
    return slug;
  }

  public void setSlug(String slug) {
    this.slug = slug;
  }


  public ApiPagesPostRequest template(TemplateEnum template) {
    this.template = template;
    return this;
  }

  /**
   * Controls what kind of layout the page is rendered in
   * @return template
   */
  @javax.annotation.Nullable
  public TemplateEnum getTemplate() {
    return template;
  }

  public void setTemplate(TemplateEnum template) {
    this.template = template;
  }


  public ApiPagesPostRequest title(String title) {
    this.title = title;
    return this;
  }

  /**
   * Title of the page
   * @return title
   */
  @javax.annotation.Nullable
  public String getTitle() {
    return title;
  }

  public void setTitle(String title) {
    this.title = title;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ApiPagesPostRequest apiPagesPostRequest = (ApiPagesPostRequest) o;
    return Objects.equals(this.bodyJson, apiPagesPostRequest.bodyJson) &&
        Objects.equals(this.bodyMarkdown, apiPagesPostRequest.bodyMarkdown) &&
        Objects.equals(this.description, apiPagesPostRequest.description) &&
        Objects.equals(this.isTopLevelPath, apiPagesPostRequest.isTopLevelPath) &&
        Objects.equals(this.slug, apiPagesPostRequest.slug) &&
        Objects.equals(this.template, apiPagesPostRequest.template) &&
        Objects.equals(this.title, apiPagesPostRequest.title);
  }

  @Override
  public int hashCode() {
    return Objects.hash(bodyJson, bodyMarkdown, description, isTopLevelPath, slug, template, title);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ApiPagesPostRequest {\n");
    sb.append("    bodyJson: ").append(toIndentedString(bodyJson)).append("\n");
    sb.append("    bodyMarkdown: ").append(toIndentedString(bodyMarkdown)).append("\n");
    sb.append("    description: ").append(toIndentedString(description)).append("\n");
    sb.append("    isTopLevelPath: ").append(toIndentedString(isTopLevelPath)).append("\n");
    sb.append("    slug: ").append(toIndentedString(slug)).append("\n");
    sb.append("    template: ").append(toIndentedString(template)).append("\n");
    sb.append("    title: ").append(toIndentedString(title)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("body_json");
    openapiFields.add("body_markdown");
    openapiFields.add("description");
    openapiFields.add("is_top_level_path");
    openapiFields.add("slug");
    openapiFields.add("template");
    openapiFields.add("title");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to ApiPagesPostRequest
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!ApiPagesPostRequest.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in ApiPagesPostRequest is not found in the empty JSON string", ApiPagesPostRequest.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!ApiPagesPostRequest.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `ApiPagesPostRequest` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("body_json") != null && !jsonObj.get("body_json").isJsonNull()) && !jsonObj.get("body_json").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `body_json` to be a primitive type in the JSON string but got `%s`", jsonObj.get("body_json").toString()));
      }
      if ((jsonObj.get("body_markdown") != null && !jsonObj.get("body_markdown").isJsonNull()) && !jsonObj.get("body_markdown").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `body_markdown` to be a primitive type in the JSON string but got `%s`", jsonObj.get("body_markdown").toString()));
      }
      if ((jsonObj.get("description") != null && !jsonObj.get("description").isJsonNull()) && !jsonObj.get("description").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `description` to be a primitive type in the JSON string but got `%s`", jsonObj.get("description").toString()));
      }
      if ((jsonObj.get("slug") != null && !jsonObj.get("slug").isJsonNull()) && !jsonObj.get("slug").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `slug` to be a primitive type in the JSON string but got `%s`", jsonObj.get("slug").toString()));
      }
      if ((jsonObj.get("template") != null && !jsonObj.get("template").isJsonNull()) && !jsonObj.get("template").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `template` to be a primitive type in the JSON string but got `%s`", jsonObj.get("template").toString()));
      }
      // validate the optional field `template`
      if (jsonObj.get("template") != null && !jsonObj.get("template").isJsonNull()) {
        TemplateEnum.validateJsonElement(jsonObj.get("template"));
      }
      if ((jsonObj.get("title") != null && !jsonObj.get("title").isJsonNull()) && !jsonObj.get("title").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `title` to be a primitive type in the JSON string but got `%s`", jsonObj.get("title").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!ApiPagesPostRequest.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'ApiPagesPostRequest' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<ApiPagesPostRequest> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(ApiPagesPostRequest.class));

       return (TypeAdapter<T>) new TypeAdapter<ApiPagesPostRequest>() {
           @Override
           public void write(JsonWriter out, ApiPagesPostRequest value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public ApiPagesPostRequest read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of ApiPagesPostRequest given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of ApiPagesPostRequest
   * @throws IOException if the JSON string is invalid with respect to ApiPagesPostRequest
   */
  public static ApiPagesPostRequest fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, ApiPagesPostRequest.class);
  }

  /**
   * Convert an instance of ApiPagesPostRequest to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

