/*
 * Forem API V1
 * Access Forem articles, users and other resources via API.         For a real-world example of Forem in action, check out [DEV](https://www.dev.to).         All endpoints can be accessed with the 'api-key' header and a accept header, but         some of them are accessible publicly without authentication.          Dates and date times, unless otherwise specified, must be in         the [RFC 3339](https://tools.ietf.org/html/rfc3339) format.
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * A profile image object
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:23:22.236584-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class ProfileImage {
  public static final String SERIALIZED_NAME_IMAGE_OF = "image_of";
  @SerializedName(SERIALIZED_NAME_IMAGE_OF)
  private String imageOf;

  public static final String SERIALIZED_NAME_PROFILE_IMAGE = "profile_image";
  @SerializedName(SERIALIZED_NAME_PROFILE_IMAGE)
  private String profileImage;

  public static final String SERIALIZED_NAME_PROFILE_IMAGE90 = "profile_image_90";
  @SerializedName(SERIALIZED_NAME_PROFILE_IMAGE90)
  private String profileImage90;

  public static final String SERIALIZED_NAME_TYPE_OF = "type_of";
  @SerializedName(SERIALIZED_NAME_TYPE_OF)
  private String typeOf;

  public ProfileImage() {
  }

  public ProfileImage imageOf(String imageOf) {
    this.imageOf = imageOf;
    return this;
  }

  /**
   * Determines the type of the profile image owner (user or organization)
   * @return imageOf
   */
  @javax.annotation.Nullable
  public String getImageOf() {
    return imageOf;
  }

  public void setImageOf(String imageOf) {
    this.imageOf = imageOf;
  }


  public ProfileImage profileImage(String profileImage) {
    this.profileImage = profileImage;
    return this;
  }

  /**
   * Profile image (640x640)
   * @return profileImage
   */
  @javax.annotation.Nullable
  public String getProfileImage() {
    return profileImage;
  }

  public void setProfileImage(String profileImage) {
    this.profileImage = profileImage;
  }


  public ProfileImage profileImage90(String profileImage90) {
    this.profileImage90 = profileImage90;
    return this;
  }

  /**
   * Profile image (90x90)
   * @return profileImage90
   */
  @javax.annotation.Nullable
  public String getProfileImage90() {
    return profileImage90;
  }

  public void setProfileImage90(String profileImage90) {
    this.profileImage90 = profileImage90;
  }


  public ProfileImage typeOf(String typeOf) {
    this.typeOf = typeOf;
    return this;
  }

  /**
   * Return profile_image
   * @return typeOf
   */
  @javax.annotation.Nullable
  public String getTypeOf() {
    return typeOf;
  }

  public void setTypeOf(String typeOf) {
    this.typeOf = typeOf;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ProfileImage profileImage = (ProfileImage) o;
    return Objects.equals(this.imageOf, profileImage.imageOf) &&
        Objects.equals(this.profileImage, profileImage.profileImage) &&
        Objects.equals(this.profileImage90, profileImage.profileImage90) &&
        Objects.equals(this.typeOf, profileImage.typeOf);
  }

  @Override
  public int hashCode() {
    return Objects.hash(imageOf, profileImage, profileImage90, typeOf);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ProfileImage {\n");
    sb.append("    imageOf: ").append(toIndentedString(imageOf)).append("\n");
    sb.append("    profileImage: ").append(toIndentedString(profileImage)).append("\n");
    sb.append("    profileImage90: ").append(toIndentedString(profileImage90)).append("\n");
    sb.append("    typeOf: ").append(toIndentedString(typeOf)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("image_of");
    openapiFields.add("profile_image");
    openapiFields.add("profile_image_90");
    openapiFields.add("type_of");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to ProfileImage
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!ProfileImage.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in ProfileImage is not found in the empty JSON string", ProfileImage.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!ProfileImage.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `ProfileImage` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("image_of") != null && !jsonObj.get("image_of").isJsonNull()) && !jsonObj.get("image_of").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `image_of` to be a primitive type in the JSON string but got `%s`", jsonObj.get("image_of").toString()));
      }
      if ((jsonObj.get("profile_image") != null && !jsonObj.get("profile_image").isJsonNull()) && !jsonObj.get("profile_image").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `profile_image` to be a primitive type in the JSON string but got `%s`", jsonObj.get("profile_image").toString()));
      }
      if ((jsonObj.get("profile_image_90") != null && !jsonObj.get("profile_image_90").isJsonNull()) && !jsonObj.get("profile_image_90").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `profile_image_90` to be a primitive type in the JSON string but got `%s`", jsonObj.get("profile_image_90").toString()));
      }
      if ((jsonObj.get("type_of") != null && !jsonObj.get("type_of").isJsonNull()) && !jsonObj.get("type_of").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `type_of` to be a primitive type in the JSON string but got `%s`", jsonObj.get("type_of").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!ProfileImage.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'ProfileImage' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<ProfileImage> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(ProfileImage.class));

       return (TypeAdapter<T>) new TypeAdapter<ProfileImage>() {
           @Override
           public void write(JsonWriter out, ProfileImage value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public ProfileImage read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of ProfileImage given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of ProfileImage
   * @throws IOException if the JSON string is invalid with respect to ProfileImage
   */
  public static ProfileImage fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, ProfileImage.class);
  }

  /**
   * Convert an instance of ProfileImage to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

