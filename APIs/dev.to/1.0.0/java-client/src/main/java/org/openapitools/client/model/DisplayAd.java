/*
 * Forem API V1
 * Access Forem articles, users and other resources via API.         For a real-world example of Forem in action, check out [DEV](https://www.dev.to).         All endpoints can be accessed with the 'api-key' header and a accept header, but         some of them are accessible publicly without authentication.          Dates and date times, unless otherwise specified, must be in         the [RFC 3339](https://tools.ietf.org/html/rfc3339) format.
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import org.openapitools.jackson.nullable.JsonNullable;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * A Display Ad, aka Billboard, aka Widget
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:23:22.236584-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class DisplayAd {
  public static final String SERIALIZED_NAME_APPROVED = "approved";
  @SerializedName(SERIALIZED_NAME_APPROVED)
  private Boolean approved;

  public static final String SERIALIZED_NAME_ARTICLE_EXCLUDE_IDS = "article_exclude_ids";
  @SerializedName(SERIALIZED_NAME_ARTICLE_EXCLUDE_IDS)
  private String articleExcludeIds;

  public static final String SERIALIZED_NAME_BODY_MARKDOWN = "body_markdown";
  @SerializedName(SERIALIZED_NAME_BODY_MARKDOWN)
  private String bodyMarkdown;

  public static final String SERIALIZED_NAME_CREATOR_ID = "creator_id";
  @SerializedName(SERIALIZED_NAME_CREATOR_ID)
  private Integer creatorId;

  /**
   * Potentially limits visitors to whom the ad is visible
   */
  @JsonAdapter(DisplayToEnum.Adapter.class)
  public enum DisplayToEnum {
    ALL("all"),
    
    LOGGED_IN("logged_in"),
    
    LOGGED_OUT("logged_out");

    private String value;

    DisplayToEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static DisplayToEnum fromValue(String value) {
      for (DisplayToEnum b : DisplayToEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<DisplayToEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final DisplayToEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public DisplayToEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return DisplayToEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      DisplayToEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_DISPLAY_TO = "display_to";
  @SerializedName(SERIALIZED_NAME_DISPLAY_TO)
  private DisplayToEnum displayTo = DisplayToEnum.ALL;

  public static final String SERIALIZED_NAME_ID = "id";
  @SerializedName(SERIALIZED_NAME_ID)
  private Integer id;

  public static final String SERIALIZED_NAME_NAME = "name";
  @SerializedName(SERIALIZED_NAME_NAME)
  private String name;

  public static final String SERIALIZED_NAME_ORGANIZATION_ID = "organization_id";
  @SerializedName(SERIALIZED_NAME_ORGANIZATION_ID)
  private Integer organizationId;

  /**
   * Identifies which area of site layout the ad can appear in
   */
  @JsonAdapter(PlacementAreaEnum.Adapter.class)
  public enum PlacementAreaEnum {
    SIDEBAR_LEFT("sidebar_left"),
    
    SIDEBAR_LEFT_2("sidebar_left_2"),
    
    SIDEBAR_RIGHT("sidebar_right"),
    
    FEED_FIRST("feed_first"),
    
    FEED_SECOND("feed_second"),
    
    FEED_THIRD("feed_third"),
    
    POST_SIDEBAR("post_sidebar"),
    
    POST_COMMENTS("post_comments");

    private String value;

    PlacementAreaEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static PlacementAreaEnum fromValue(String value) {
      for (PlacementAreaEnum b : PlacementAreaEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<PlacementAreaEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final PlacementAreaEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public PlacementAreaEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return PlacementAreaEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      PlacementAreaEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_PLACEMENT_AREA = "placement_area";
  @SerializedName(SERIALIZED_NAME_PLACEMENT_AREA)
  private PlacementAreaEnum placementArea;

  public static final String SERIALIZED_NAME_PUBLISHED = "published";
  @SerializedName(SERIALIZED_NAME_PUBLISHED)
  private Boolean published;

  public static final String SERIALIZED_NAME_TAG_LIST = "tag_list";
  @SerializedName(SERIALIZED_NAME_TAG_LIST)
  private String tagList;

  /**
   * Types of the billboards: in_house (created by admins), community (created by an entity, appears on entity&#39;s content), external ( created by an entity, or a non-entity, can appear everywhere) 
   */
  @JsonAdapter(TypeOfEnum.Adapter.class)
  public enum TypeOfEnum {
    IN_HOUSE("in_house"),
    
    COMMUNITY("community"),
    
    EXTERNAL("external");

    private String value;

    TypeOfEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static TypeOfEnum fromValue(String value) {
      for (TypeOfEnum b : TypeOfEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<TypeOfEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final TypeOfEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public TypeOfEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return TypeOfEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      TypeOfEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_TYPE_OF = "type_of";
  @SerializedName(SERIALIZED_NAME_TYPE_OF)
  private TypeOfEnum typeOf = TypeOfEnum.IN_HOUSE;

  public DisplayAd() {
  }

  public DisplayAd approved(Boolean approved) {
    this.approved = approved;
    return this;
  }

  /**
   * Ad must be both published and approved to be in rotation
   * @return approved
   */
  @javax.annotation.Nullable
  public Boolean getApproved() {
    return approved;
  }

  public void setApproved(Boolean approved) {
    this.approved = approved;
  }


  public DisplayAd articleExcludeIds(String articleExcludeIds) {
    this.articleExcludeIds = articleExcludeIds;
    return this;
  }

  /**
   * Articles this ad should *not* appear on (blank means no articles are disallowed, and this ad can appear next to any/all articles). Comma-separated list of integer Article IDs
   * @return articleExcludeIds
   */
  @javax.annotation.Nullable
  public String getArticleExcludeIds() {
    return articleExcludeIds;
  }

  public void setArticleExcludeIds(String articleExcludeIds) {
    this.articleExcludeIds = articleExcludeIds;
  }


  public DisplayAd bodyMarkdown(String bodyMarkdown) {
    this.bodyMarkdown = bodyMarkdown;
    return this;
  }

  /**
   * The text (in markdown) of the ad (required)
   * @return bodyMarkdown
   */
  @javax.annotation.Nonnull
  public String getBodyMarkdown() {
    return bodyMarkdown;
  }

  public void setBodyMarkdown(String bodyMarkdown) {
    this.bodyMarkdown = bodyMarkdown;
  }


  public DisplayAd creatorId(Integer creatorId) {
    this.creatorId = creatorId;
    return this;
  }

  /**
   * Identifies the user who created the ad.
   * @return creatorId
   */
  @javax.annotation.Nullable
  public Integer getCreatorId() {
    return creatorId;
  }

  public void setCreatorId(Integer creatorId) {
    this.creatorId = creatorId;
  }


  public DisplayAd displayTo(DisplayToEnum displayTo) {
    this.displayTo = displayTo;
    return this;
  }

  /**
   * Potentially limits visitors to whom the ad is visible
   * @return displayTo
   */
  @javax.annotation.Nullable
  public DisplayToEnum getDisplayTo() {
    return displayTo;
  }

  public void setDisplayTo(DisplayToEnum displayTo) {
    this.displayTo = displayTo;
  }


  public DisplayAd id(Integer id) {
    this.id = id;
    return this;
  }

  /**
   * The ID of the Display Ad
   * @return id
   */
  @javax.annotation.Nullable
  public Integer getId() {
    return id;
  }

  public void setId(Integer id) {
    this.id = id;
  }


  public DisplayAd name(String name) {
    this.name = name;
    return this;
  }

  /**
   * For internal use, helps distinguish ads from one another
   * @return name
   */
  @javax.annotation.Nonnull
  public String getName() {
    return name;
  }

  public void setName(String name) {
    this.name = name;
  }


  public DisplayAd organizationId(Integer organizationId) {
    this.organizationId = organizationId;
    return this;
  }

  /**
   * Identifies the organization to which the ad belongs
   * @return organizationId
   */
  @javax.annotation.Nullable
  public Integer getOrganizationId() {
    return organizationId;
  }

  public void setOrganizationId(Integer organizationId) {
    this.organizationId = organizationId;
  }


  public DisplayAd placementArea(PlacementAreaEnum placementArea) {
    this.placementArea = placementArea;
    return this;
  }

  /**
   * Identifies which area of site layout the ad can appear in
   * @return placementArea
   */
  @javax.annotation.Nonnull
  public PlacementAreaEnum getPlacementArea() {
    return placementArea;
  }

  public void setPlacementArea(PlacementAreaEnum placementArea) {
    this.placementArea = placementArea;
  }


  public DisplayAd published(Boolean published) {
    this.published = published;
    return this;
  }

  /**
   * Ad must be both published and approved to be in rotation
   * @return published
   */
  @javax.annotation.Nullable
  public Boolean getPublished() {
    return published;
  }

  public void setPublished(Boolean published) {
    this.published = published;
  }


  public DisplayAd tagList(String tagList) {
    this.tagList = tagList;
    return this;
  }

  /**
   * Tags on which this ad can be displayed (blank is all/any tags)
   * @return tagList
   */
  @javax.annotation.Nullable
  public String getTagList() {
    return tagList;
  }

  public void setTagList(String tagList) {
    this.tagList = tagList;
  }


  public DisplayAd typeOf(TypeOfEnum typeOf) {
    this.typeOf = typeOf;
    return this;
  }

  /**
   * Types of the billboards: in_house (created by admins), community (created by an entity, appears on entity&#39;s content), external ( created by an entity, or a non-entity, can appear everywhere) 
   * @return typeOf
   */
  @javax.annotation.Nullable
  public TypeOfEnum getTypeOf() {
    return typeOf;
  }

  public void setTypeOf(TypeOfEnum typeOf) {
    this.typeOf = typeOf;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    DisplayAd displayAd = (DisplayAd) o;
    return Objects.equals(this.approved, displayAd.approved) &&
        Objects.equals(this.articleExcludeIds, displayAd.articleExcludeIds) &&
        Objects.equals(this.bodyMarkdown, displayAd.bodyMarkdown) &&
        Objects.equals(this.creatorId, displayAd.creatorId) &&
        Objects.equals(this.displayTo, displayAd.displayTo) &&
        Objects.equals(this.id, displayAd.id) &&
        Objects.equals(this.name, displayAd.name) &&
        Objects.equals(this.organizationId, displayAd.organizationId) &&
        Objects.equals(this.placementArea, displayAd.placementArea) &&
        Objects.equals(this.published, displayAd.published) &&
        Objects.equals(this.tagList, displayAd.tagList) &&
        Objects.equals(this.typeOf, displayAd.typeOf);
  }

  private static <T> boolean equalsNullable(JsonNullable<T> a, JsonNullable<T> b) {
    return a == b || (a != null && b != null && a.isPresent() && b.isPresent() && Objects.deepEquals(a.get(), b.get()));
  }

  @Override
  public int hashCode() {
    return Objects.hash(approved, articleExcludeIds, bodyMarkdown, creatorId, displayTo, id, name, organizationId, placementArea, published, tagList, typeOf);
  }

  private static <T> int hashCodeNullable(JsonNullable<T> a) {
    if (a == null) {
      return 1;
    }
    return a.isPresent() ? Arrays.deepHashCode(new Object[]{a.get()}) : 31;
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class DisplayAd {\n");
    sb.append("    approved: ").append(toIndentedString(approved)).append("\n");
    sb.append("    articleExcludeIds: ").append(toIndentedString(articleExcludeIds)).append("\n");
    sb.append("    bodyMarkdown: ").append(toIndentedString(bodyMarkdown)).append("\n");
    sb.append("    creatorId: ").append(toIndentedString(creatorId)).append("\n");
    sb.append("    displayTo: ").append(toIndentedString(displayTo)).append("\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    organizationId: ").append(toIndentedString(organizationId)).append("\n");
    sb.append("    placementArea: ").append(toIndentedString(placementArea)).append("\n");
    sb.append("    published: ").append(toIndentedString(published)).append("\n");
    sb.append("    tagList: ").append(toIndentedString(tagList)).append("\n");
    sb.append("    typeOf: ").append(toIndentedString(typeOf)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("approved");
    openapiFields.add("article_exclude_ids");
    openapiFields.add("body_markdown");
    openapiFields.add("creator_id");
    openapiFields.add("display_to");
    openapiFields.add("id");
    openapiFields.add("name");
    openapiFields.add("organization_id");
    openapiFields.add("placement_area");
    openapiFields.add("published");
    openapiFields.add("tag_list");
    openapiFields.add("type_of");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("body_markdown");
    openapiRequiredFields.add("name");
    openapiRequiredFields.add("placement_area");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to DisplayAd
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!DisplayAd.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in DisplayAd is not found in the empty JSON string", DisplayAd.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!DisplayAd.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `DisplayAd` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : DisplayAd.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("article_exclude_ids") != null && !jsonObj.get("article_exclude_ids").isJsonNull()) && !jsonObj.get("article_exclude_ids").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `article_exclude_ids` to be a primitive type in the JSON string but got `%s`", jsonObj.get("article_exclude_ids").toString()));
      }
      if (!jsonObj.get("body_markdown").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `body_markdown` to be a primitive type in the JSON string but got `%s`", jsonObj.get("body_markdown").toString()));
      }
      if ((jsonObj.get("display_to") != null && !jsonObj.get("display_to").isJsonNull()) && !jsonObj.get("display_to").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `display_to` to be a primitive type in the JSON string but got `%s`", jsonObj.get("display_to").toString()));
      }
      // validate the optional field `display_to`
      if (jsonObj.get("display_to") != null && !jsonObj.get("display_to").isJsonNull()) {
        DisplayToEnum.validateJsonElement(jsonObj.get("display_to"));
      }
      if (!jsonObj.get("name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("name").toString()));
      }
      if (!jsonObj.get("placement_area").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `placement_area` to be a primitive type in the JSON string but got `%s`", jsonObj.get("placement_area").toString()));
      }
      // validate the required field `placement_area`
      PlacementAreaEnum.validateJsonElement(jsonObj.get("placement_area"));
      if ((jsonObj.get("tag_list") != null && !jsonObj.get("tag_list").isJsonNull()) && !jsonObj.get("tag_list").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `tag_list` to be a primitive type in the JSON string but got `%s`", jsonObj.get("tag_list").toString()));
      }
      if ((jsonObj.get("type_of") != null && !jsonObj.get("type_of").isJsonNull()) && !jsonObj.get("type_of").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `type_of` to be a primitive type in the JSON string but got `%s`", jsonObj.get("type_of").toString()));
      }
      // validate the optional field `type_of`
      if (jsonObj.get("type_of") != null && !jsonObj.get("type_of").isJsonNull()) {
        TypeOfEnum.validateJsonElement(jsonObj.get("type_of"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!DisplayAd.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'DisplayAd' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<DisplayAd> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(DisplayAd.class));

       return (TypeAdapter<T>) new TypeAdapter<DisplayAd>() {
           @Override
           public void write(JsonWriter out, DisplayAd value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public DisplayAd read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of DisplayAd given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of DisplayAd
   * @throws IOException if the JSON string is invalid with respect to DisplayAd
   */
  public static DisplayAd fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, DisplayAd.class);
  }

  /**
   * Convert an instance of DisplayAd to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

