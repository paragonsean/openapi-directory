/*
 * Forem API V1
 * Access Forem articles, users and other resources via API.         For a real-world example of Forem in action, check out [DEV](https://www.dev.to).         All endpoints can be accessed with the 'api-key' header and a accept header, but         some of them are accessible publicly without authentication.          Dates and date times, unless otherwise specified, must be in         the [RFC 3339](https://tools.ietf.org/html/rfc3339) format.
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiException;
import org.openapitools.client.model.Article;
import org.openapitools.client.model.ArticleIndex;
import org.openapitools.client.model.VideoArticle;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for ArticlesApi
 */
@Disabled
public class ArticlesApiTest {

    private final ArticlesApi api = new ArticlesApi();

    /**
     * Publish article
     *
     * This endpoint allows the client to create a new article.  \&quot;Articles\&quot; are all the posts that users create on DEV that typically show up in the feed. They can be a blog post, a discussion question, a help thread etc. but is referred to as article within the code.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void createArticleTest() throws ApiException {
        Article article = null;
        api.createArticle(article);
        // TODO: test validations
    }

    /**
     * Published article by id
     *
     * This endpoint allows the client to retrieve a single published article given its &#x60;id&#x60;.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getArticleByIdTest() throws ApiException {
        Integer id = null;
        List<ArticleIndex> response = api.getArticleById(id);
        // TODO: test validations
    }

    /**
     * Published article by path
     *
     * This endpoint allows the client to retrieve a single published article given its &#x60;path&#x60;.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getArticleByPathTest() throws ApiException {
        String username = null;
        String slug = null;
        List<ArticleIndex> response = api.getArticleByPath(username, slug);
        // TODO: test validations
    }

    /**
     * Published articles
     *
     * This endpoint allows the client to retrieve a list of articles.  \&quot;Articles\&quot; are all the posts that users create on DEV that typically show up in the feed. They can be a blog post, a discussion question, a help thread etc. but is referred to as article within the code.  By default it will return featured, published articles ordered by descending popularity.  It supports pagination, each page will contain &#x60;30&#x60; articles by default.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getArticlesTest() throws ApiException {
        Integer page = null;
        Integer perPage = null;
        String tag = null;
        String tags = null;
        String tagsExclude = null;
        String username = null;
        String state = null;
        Integer top = null;
        Integer collectionId = null;
        List<ArticleIndex> response = api.getArticles(page, perPage, tag, tags, tagsExclude, username, state, top, collectionId);
        // TODO: test validations
    }

    /**
     * Published articles sorted by published date
     *
     * This endpoint allows the client to retrieve a list of articles. ordered by descending publish date.  It supports pagination, each page will contain 30 articles by default.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getLatestArticlesTest() throws ApiException {
        Integer page = null;
        Integer perPage = null;
        List<ArticleIndex> response = api.getLatestArticles(page, perPage);
        // TODO: test validations
    }

    /**
     * Organization&#39;s Articles
     *
     * This endpoint allows the client to retrieve a list of Articles belonging to the organization  It supports pagination, each page will contain &#x60;30&#x60; users by default.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getOrgArticles_0Test() throws ApiException {
        String username = null;
        Integer page = null;
        Integer perPage = null;
        List<ArticleIndex> response = api.getOrgArticles_0(username, page, perPage);
        // TODO: test validations
    }

    /**
     * User&#39;s all articles
     *
     * This endpoint allows the client to retrieve a list of all articles on behalf of an authenticated user.  \&quot;Articles\&quot; are all the posts that users create on DEV that typically show up in the feed. They can be a blog post, a discussion question, a help thread etc. but is referred to as article within the code.  It will return both published and unpublished articles with pagination.  Unpublished articles will be at the top of the list in reverse chronological creation order. Published articles will follow in reverse chronological publication order.  By default a page will contain 30 articles.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getUserAllArticlesTest() throws ApiException {
        Integer page = null;
        Integer perPage = null;
        List<ArticleIndex> response = api.getUserAllArticles(page, perPage);
        // TODO: test validations
    }

    /**
     * User&#39;s articles
     *
     * This endpoint allows the client to retrieve a list of published articles on behalf of an authenticated user.  \&quot;Articles\&quot; are all the posts that users create on DEV that typically show up in the feed. They can be a blog post, a discussion question, a help thread etc. but is referred to as article within the code.  Published articles will be in reverse chronological publication order.  It will return published articles with pagination. By default a page will contain 30 articles.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getUserArticlesTest() throws ApiException {
        Integer page = null;
        Integer perPage = null;
        List<ArticleIndex> response = api.getUserArticles(page, perPage);
        // TODO: test validations
    }

    /**
     * User&#39;s published articles
     *
     * This endpoint allows the client to retrieve a list of published articles on behalf of an authenticated user.  \&quot;Articles\&quot; are all the posts that users create on DEV that typically show up in the feed. They can be a blog post, a discussion question, a help thread etc. but is referred to as article within the code.  Published articles will be in reverse chronological publication order.  It will return published articles with pagination. By default a page will contain 30 articles.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getUserPublishedArticlesTest() throws ApiException {
        Integer page = null;
        Integer perPage = null;
        List<ArticleIndex> response = api.getUserPublishedArticles(page, perPage);
        // TODO: test validations
    }

    /**
     * User&#39;s unpublished articles
     *
     * This endpoint allows the client to retrieve a list of unpublished articles on behalf of an authenticated user.  \&quot;Articles\&quot; are all the posts that users create on DEV that typically show up in the feed. They can be a blog post, a discussion question, a help thread etc. but is referred to as article within the code.  Unpublished articles will be in reverse chronological creation order.  It will return unpublished articles with pagination. By default a page will contain 30 articles.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getUserUnpublishedArticlesTest() throws ApiException {
        Integer page = null;
        Integer perPage = null;
        List<ArticleIndex> response = api.getUserUnpublishedArticles(page, perPage);
        // TODO: test validations
    }

    /**
     * Unpublish an article
     *
     * This endpoint allows the client to unpublish an article.  The user associated with the API key must have any &#39;admin&#39; or &#39;moderator&#39; role.  The article will be unpublished and will no longer be visible to the public. It will remain in the database and will set back to draft status on the author&#39;s posts dashboard. Any notifications associated with the article will be deleted. Any comments on the article will remain.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void unpublishArticleTest() throws ApiException {
        Integer id = null;
        String note = null;
        api.unpublishArticle(id, note);
        // TODO: test validations
    }

    /**
     * Update an article by id
     *
     * This endpoint allows the client to update an existing article.  \&quot;Articles\&quot; are all the posts that users create on DEV that typically show up in the feed. They can be a blog post, a discussion question, a help thread etc. but is referred to as article within the code.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void updateArticleTest() throws ApiException {
        Integer id = null;
        Article article = null;
        api.updateArticle(id, article);
        // TODO: test validations
    }

    /**
     * Articles with a video
     *
     * This endpoint allows the client to retrieve a list of articles that are uploaded with a video.  It will only return published video articles ordered by descending popularity.  It supports pagination, each page will contain 24 articles by default.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void videos_0Test() throws ApiException {
        Integer page = null;
        Integer perPage = null;
        List<VideoArticle> response = api.videos_0(page, perPage);
        // TODO: test validations
    }

}
