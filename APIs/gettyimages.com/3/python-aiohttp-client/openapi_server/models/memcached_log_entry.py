# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.log_level import LogLevel
from openapi_server import util


class MemcachedLogEntry(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, exception_message: str=None, log_level: LogLevel=None, message: str=None, time: datetime=None):
        """MemcachedLogEntry - a model defined in OpenAPI

        :param exception_message: The exception_message of this MemcachedLogEntry.
        :param log_level: The log_level of this MemcachedLogEntry.
        :param message: The message of this MemcachedLogEntry.
        :param time: The time of this MemcachedLogEntry.
        """
        self.openapi_types = {
            'exception_message': str,
            'log_level': LogLevel,
            'message': str,
            'time': datetime
        }

        self.attribute_map = {
            'exception_message': 'ExceptionMessage',
            'log_level': 'LogLevel',
            'message': 'Message',
            'time': 'Time'
        }

        self._exception_message = exception_message
        self._log_level = log_level
        self._message = message
        self._time = time

    @classmethod
    def from_dict(cls, dikt: dict) -> 'MemcachedLogEntry':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The MemcachedLogEntry of this MemcachedLogEntry.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def exception_message(self):
        """Gets the exception_message of this MemcachedLogEntry.


        :return: The exception_message of this MemcachedLogEntry.
        :rtype: str
        """
        return self._exception_message

    @exception_message.setter
    def exception_message(self, exception_message):
        """Sets the exception_message of this MemcachedLogEntry.


        :param exception_message: The exception_message of this MemcachedLogEntry.
        :type exception_message: str
        """

        self._exception_message = exception_message

    @property
    def log_level(self):
        """Gets the log_level of this MemcachedLogEntry.


        :return: The log_level of this MemcachedLogEntry.
        :rtype: LogLevel
        """
        return self._log_level

    @log_level.setter
    def log_level(self, log_level):
        """Sets the log_level of this MemcachedLogEntry.


        :param log_level: The log_level of this MemcachedLogEntry.
        :type log_level: LogLevel
        """

        self._log_level = log_level

    @property
    def message(self):
        """Gets the message of this MemcachedLogEntry.


        :return: The message of this MemcachedLogEntry.
        :rtype: str
        """
        return self._message

    @message.setter
    def message(self, message):
        """Sets the message of this MemcachedLogEntry.


        :param message: The message of this MemcachedLogEntry.
        :type message: str
        """

        self._message = message

    @property
    def time(self):
        """Gets the time of this MemcachedLogEntry.


        :return: The time of this MemcachedLogEntry.
        :rtype: datetime
        """
        return self._time

    @time.setter
    def time(self, time):
        """Sets the time of this MemcachedLogEntry.


        :param time: The time of this MemcachedLogEntry.
        :type time: datetime
        """

        self._time = time
