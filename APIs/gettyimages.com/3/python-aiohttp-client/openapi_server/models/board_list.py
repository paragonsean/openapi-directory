# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.board_list_board import BoardListBoard
from openapi_server import util


class BoardList(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, board_count: int=None, boards: List[BoardListBoard]=None):
        """BoardList - a model defined in OpenAPI

        :param board_count: The board_count of this BoardList.
        :param boards: The boards of this BoardList.
        """
        self.openapi_types = {
            'board_count': int,
            'boards': List[BoardListBoard]
        }

        self.attribute_map = {
            'board_count': 'board_count',
            'boards': 'boards'
        }

        self._board_count = board_count
        self._boards = boards

    @classmethod
    def from_dict(cls, dikt: dict) -> 'BoardList':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The BoardList of this BoardList.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def board_count(self):
        """Gets the board_count of this BoardList.


        :return: The board_count of this BoardList.
        :rtype: int
        """
        return self._board_count

    @board_count.setter
    def board_count(self, board_count):
        """Sets the board_count of this BoardList.


        :param board_count: The board_count of this BoardList.
        :type board_count: int
        """

        self._board_count = board_count

    @property
    def boards(self):
        """Gets the boards of this BoardList.


        :return: The boards of this BoardList.
        :rtype: List[BoardListBoard]
        """
        return self._boards

    @boards.setter
    def boards(self, boards):
        """Sets the boards of this BoardList.


        :param boards: The boards of this BoardList.
        :type boards: List[BoardListBoard]
        """

        self._boards = boards
