# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class Collection(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, asset_family: str=None, code: str=None, id: int=None, license_model: str=None, name: str=None, product_types: List[str]=None):
        """Collection - a model defined in OpenAPI

        :param asset_family: The asset_family of this Collection.
        :param code: The code of this Collection.
        :param id: The id of this Collection.
        :param license_model: The license_model of this Collection.
        :param name: The name of this Collection.
        :param product_types: The product_types of this Collection.
        """
        self.openapi_types = {
            'asset_family': str,
            'code': str,
            'id': int,
            'license_model': str,
            'name': str,
            'product_types': List[str]
        }

        self.attribute_map = {
            'asset_family': 'asset_family',
            'code': 'code',
            'id': 'id',
            'license_model': 'license_model',
            'name': 'name',
            'product_types': 'product_types'
        }

        self._asset_family = asset_family
        self._code = code
        self._id = id
        self._license_model = license_model
        self._name = name
        self._product_types = product_types

    @classmethod
    def from_dict(cls, dikt: dict) -> 'Collection':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Collection of this Collection.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def asset_family(self):
        """Gets the asset_family of this Collection.


        :return: The asset_family of this Collection.
        :rtype: str
        """
        return self._asset_family

    @asset_family.setter
    def asset_family(self, asset_family):
        """Sets the asset_family of this Collection.


        :param asset_family: The asset_family of this Collection.
        :type asset_family: str
        """

        self._asset_family = asset_family

    @property
    def code(self):
        """Gets the code of this Collection.


        :return: The code of this Collection.
        :rtype: str
        """
        return self._code

    @code.setter
    def code(self, code):
        """Sets the code of this Collection.


        :param code: The code of this Collection.
        :type code: str
        """

        self._code = code

    @property
    def id(self):
        """Gets the id of this Collection.


        :return: The id of this Collection.
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this Collection.


        :param id: The id of this Collection.
        :type id: int
        """

        self._id = id

    @property
    def license_model(self):
        """Gets the license_model of this Collection.


        :return: The license_model of this Collection.
        :rtype: str
        """
        return self._license_model

    @license_model.setter
    def license_model(self, license_model):
        """Sets the license_model of this Collection.


        :param license_model: The license_model of this Collection.
        :type license_model: str
        """

        self._license_model = license_model

    @property
    def name(self):
        """Gets the name of this Collection.


        :return: The name of this Collection.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this Collection.


        :param name: The name of this Collection.
        :type name: str
        """

        self._name = name

    @property
    def product_types(self):
        """Gets the product_types of this Collection.


        :return: The product_types of this Collection.
        :rtype: List[str]
        """
        return self._product_types

    @product_types.setter
    def product_types(self, product_types):
        """Sets the product_types of this Collection.


        :param product_types: The product_types of this Collection.
        :type product_types: List[str]
        """

        self._product_types = product_types
