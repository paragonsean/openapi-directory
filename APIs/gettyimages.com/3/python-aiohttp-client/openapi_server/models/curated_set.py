# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class CuratedSet(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, assets: List[str]=None, date_created: datetime=None, date_last_updated: datetime=None, description: str=None, hero_image_uri: str=None, keywords: List[str]=None, set_id: str=None, title: str=None):
        """CuratedSet - a model defined in OpenAPI

        :param assets: The assets of this CuratedSet.
        :param date_created: The date_created of this CuratedSet.
        :param date_last_updated: The date_last_updated of this CuratedSet.
        :param description: The description of this CuratedSet.
        :param hero_image_uri: The hero_image_uri of this CuratedSet.
        :param keywords: The keywords of this CuratedSet.
        :param set_id: The set_id of this CuratedSet.
        :param title: The title of this CuratedSet.
        """
        self.openapi_types = {
            'assets': List[str],
            'date_created': datetime,
            'date_last_updated': datetime,
            'description': str,
            'hero_image_uri': str,
            'keywords': List[str],
            'set_id': str,
            'title': str
        }

        self.attribute_map = {
            'assets': 'assets',
            'date_created': 'date_created',
            'date_last_updated': 'date_last_updated',
            'description': 'description',
            'hero_image_uri': 'hero_image_uri',
            'keywords': 'keywords',
            'set_id': 'set_id',
            'title': 'title'
        }

        self._assets = assets
        self._date_created = date_created
        self._date_last_updated = date_last_updated
        self._description = description
        self._hero_image_uri = hero_image_uri
        self._keywords = keywords
        self._set_id = set_id
        self._title = title

    @classmethod
    def from_dict(cls, dikt: dict) -> 'CuratedSet':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The CuratedSet of this CuratedSet.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def assets(self):
        """Gets the assets of this CuratedSet.


        :return: The assets of this CuratedSet.
        :rtype: List[str]
        """
        return self._assets

    @assets.setter
    def assets(self, assets):
        """Sets the assets of this CuratedSet.


        :param assets: The assets of this CuratedSet.
        :type assets: List[str]
        """

        self._assets = assets

    @property
    def date_created(self):
        """Gets the date_created of this CuratedSet.


        :return: The date_created of this CuratedSet.
        :rtype: datetime
        """
        return self._date_created

    @date_created.setter
    def date_created(self, date_created):
        """Sets the date_created of this CuratedSet.


        :param date_created: The date_created of this CuratedSet.
        :type date_created: datetime
        """

        self._date_created = date_created

    @property
    def date_last_updated(self):
        """Gets the date_last_updated of this CuratedSet.


        :return: The date_last_updated of this CuratedSet.
        :rtype: datetime
        """
        return self._date_last_updated

    @date_last_updated.setter
    def date_last_updated(self, date_last_updated):
        """Sets the date_last_updated of this CuratedSet.


        :param date_last_updated: The date_last_updated of this CuratedSet.
        :type date_last_updated: datetime
        """

        self._date_last_updated = date_last_updated

    @property
    def description(self):
        """Gets the description of this CuratedSet.


        :return: The description of this CuratedSet.
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this CuratedSet.


        :param description: The description of this CuratedSet.
        :type description: str
        """

        self._description = description

    @property
    def hero_image_uri(self):
        """Gets the hero_image_uri of this CuratedSet.


        :return: The hero_image_uri of this CuratedSet.
        :rtype: str
        """
        return self._hero_image_uri

    @hero_image_uri.setter
    def hero_image_uri(self, hero_image_uri):
        """Sets the hero_image_uri of this CuratedSet.


        :param hero_image_uri: The hero_image_uri of this CuratedSet.
        :type hero_image_uri: str
        """

        self._hero_image_uri = hero_image_uri

    @property
    def keywords(self):
        """Gets the keywords of this CuratedSet.


        :return: The keywords of this CuratedSet.
        :rtype: List[str]
        """
        return self._keywords

    @keywords.setter
    def keywords(self, keywords):
        """Sets the keywords of this CuratedSet.


        :param keywords: The keywords of this CuratedSet.
        :type keywords: List[str]
        """

        self._keywords = keywords

    @property
    def set_id(self):
        """Gets the set_id of this CuratedSet.


        :return: The set_id of this CuratedSet.
        :rtype: str
        """
        return self._set_id

    @set_id.setter
    def set_id(self, set_id):
        """Sets the set_id of this CuratedSet.


        :param set_id: The set_id of this CuratedSet.
        :type set_id: str
        """

        self._set_id = set_id

    @property
    def title(self):
        """Gets the title of this CuratedSet.


        :return: The title of this CuratedSet.
        :rtype: str
        """
        return self._title

    @title.setter
    def title(self, title):
        """Sets the title of this CuratedSet.


        :param title: The title of this CuratedSet.
        :type title: str
        """

        self._title = title
