# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.asset import Asset
from openapi_server.models.board_permissions import BoardPermissions
from openapi_server.models.links import Links
from openapi_server import util


class BoardDetail(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, asset_count: int=None, assets: List[Asset]=None, comment_count: int=None, date_created: datetime=None, date_last_updated: datetime=None, description: str=None, id: str=None, links: Links=None, name: str=None, permissions: BoardPermissions=None):
        """BoardDetail - a model defined in OpenAPI

        :param asset_count: The asset_count of this BoardDetail.
        :param assets: The assets of this BoardDetail.
        :param comment_count: The comment_count of this BoardDetail.
        :param date_created: The date_created of this BoardDetail.
        :param date_last_updated: The date_last_updated of this BoardDetail.
        :param description: The description of this BoardDetail.
        :param id: The id of this BoardDetail.
        :param links: The links of this BoardDetail.
        :param name: The name of this BoardDetail.
        :param permissions: The permissions of this BoardDetail.
        """
        self.openapi_types = {
            'asset_count': int,
            'assets': List[Asset],
            'comment_count': int,
            'date_created': datetime,
            'date_last_updated': datetime,
            'description': str,
            'id': str,
            'links': Links,
            'name': str,
            'permissions': BoardPermissions
        }

        self.attribute_map = {
            'asset_count': 'asset_count',
            'assets': 'assets',
            'comment_count': 'comment_count',
            'date_created': 'date_created',
            'date_last_updated': 'date_last_updated',
            'description': 'description',
            'id': 'id',
            'links': 'links',
            'name': 'name',
            'permissions': 'permissions'
        }

        self._asset_count = asset_count
        self._assets = assets
        self._comment_count = comment_count
        self._date_created = date_created
        self._date_last_updated = date_last_updated
        self._description = description
        self._id = id
        self._links = links
        self._name = name
        self._permissions = permissions

    @classmethod
    def from_dict(cls, dikt: dict) -> 'BoardDetail':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The BoardDetail of this BoardDetail.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def asset_count(self):
        """Gets the asset_count of this BoardDetail.


        :return: The asset_count of this BoardDetail.
        :rtype: int
        """
        return self._asset_count

    @asset_count.setter
    def asset_count(self, asset_count):
        """Sets the asset_count of this BoardDetail.


        :param asset_count: The asset_count of this BoardDetail.
        :type asset_count: int
        """

        self._asset_count = asset_count

    @property
    def assets(self):
        """Gets the assets of this BoardDetail.


        :return: The assets of this BoardDetail.
        :rtype: List[Asset]
        """
        return self._assets

    @assets.setter
    def assets(self, assets):
        """Sets the assets of this BoardDetail.


        :param assets: The assets of this BoardDetail.
        :type assets: List[Asset]
        """

        self._assets = assets

    @property
    def comment_count(self):
        """Gets the comment_count of this BoardDetail.


        :return: The comment_count of this BoardDetail.
        :rtype: int
        """
        return self._comment_count

    @comment_count.setter
    def comment_count(self, comment_count):
        """Sets the comment_count of this BoardDetail.


        :param comment_count: The comment_count of this BoardDetail.
        :type comment_count: int
        """

        self._comment_count = comment_count

    @property
    def date_created(self):
        """Gets the date_created of this BoardDetail.


        :return: The date_created of this BoardDetail.
        :rtype: datetime
        """
        return self._date_created

    @date_created.setter
    def date_created(self, date_created):
        """Sets the date_created of this BoardDetail.


        :param date_created: The date_created of this BoardDetail.
        :type date_created: datetime
        """

        self._date_created = date_created

    @property
    def date_last_updated(self):
        """Gets the date_last_updated of this BoardDetail.


        :return: The date_last_updated of this BoardDetail.
        :rtype: datetime
        """
        return self._date_last_updated

    @date_last_updated.setter
    def date_last_updated(self, date_last_updated):
        """Sets the date_last_updated of this BoardDetail.


        :param date_last_updated: The date_last_updated of this BoardDetail.
        :type date_last_updated: datetime
        """

        self._date_last_updated = date_last_updated

    @property
    def description(self):
        """Gets the description of this BoardDetail.


        :return: The description of this BoardDetail.
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this BoardDetail.


        :param description: The description of this BoardDetail.
        :type description: str
        """

        self._description = description

    @property
    def id(self):
        """Gets the id of this BoardDetail.


        :return: The id of this BoardDetail.
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this BoardDetail.


        :param id: The id of this BoardDetail.
        :type id: str
        """

        self._id = id

    @property
    def links(self):
        """Gets the links of this BoardDetail.


        :return: The links of this BoardDetail.
        :rtype: Links
        """
        return self._links

    @links.setter
    def links(self, links):
        """Sets the links of this BoardDetail.


        :param links: The links of this BoardDetail.
        :type links: Links
        """

        self._links = links

    @property
    def name(self):
        """Gets the name of this BoardDetail.


        :return: The name of this BoardDetail.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this BoardDetail.


        :param name: The name of this BoardDetail.
        :type name: str
        """

        self._name = name

    @property
    def permissions(self):
        """Gets the permissions of this BoardDetail.


        :return: The permissions of this BoardDetail.
        :rtype: BoardPermissions
        """
        return self._permissions

    @permissions.setter
    def permissions(self, permissions):
        """Sets the permissions of this BoardDetail.


        :param permissions: The permissions of this BoardDetail.
        :type permissions: BoardPermissions
        """

        self._permissions = permissions
