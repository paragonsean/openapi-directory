# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class OverageDetails(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, count: int=None, limit: int=None, overages_reached: bool=None, remaining: int=None):
        """OverageDetails - a model defined in OpenAPI

        :param count: The count of this OverageDetails.
        :param limit: The limit of this OverageDetails.
        :param overages_reached: The overages_reached of this OverageDetails.
        :param remaining: The remaining of this OverageDetails.
        """
        self.openapi_types = {
            'count': int,
            'limit': int,
            'overages_reached': bool,
            'remaining': int
        }

        self.attribute_map = {
            'count': 'count',
            'limit': 'limit',
            'overages_reached': 'overages_reached',
            'remaining': 'remaining'
        }

        self._count = count
        self._limit = limit
        self._overages_reached = overages_reached
        self._remaining = remaining

    @classmethod
    def from_dict(cls, dikt: dict) -> 'OverageDetails':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The OverageDetails of this OverageDetails.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def count(self):
        """Gets the count of this OverageDetails.


        :return: The count of this OverageDetails.
        :rtype: int
        """
        return self._count

    @count.setter
    def count(self, count):
        """Sets the count of this OverageDetails.


        :param count: The count of this OverageDetails.
        :type count: int
        """

        self._count = count

    @property
    def limit(self):
        """Gets the limit of this OverageDetails.


        :return: The limit of this OverageDetails.
        :rtype: int
        """
        return self._limit

    @limit.setter
    def limit(self, limit):
        """Sets the limit of this OverageDetails.


        :param limit: The limit of this OverageDetails.
        :type limit: int
        """

        self._limit = limit

    @property
    def overages_reached(self):
        """Gets the overages_reached of this OverageDetails.


        :return: The overages_reached of this OverageDetails.
        :rtype: bool
        """
        return self._overages_reached

    @overages_reached.setter
    def overages_reached(self, overages_reached):
        """Sets the overages_reached of this OverageDetails.


        :param overages_reached: The overages_reached of this OverageDetails.
        :type overages_reached: bool
        """

        self._overages_reached = overages_reached

    @property
    def remaining(self):
        """Gets the remaining of this OverageDetails.


        :return: The remaining of this OverageDetails.
        :rtype: int
        """
        return self._remaining

    @remaining.setter
    def remaining(self, remaining):
        """Sets the remaining of this OverageDetails.


        :param remaining: The remaining of this OverageDetails.
        :type remaining: int
        """

        self._remaining = remaining
