# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class LocationEvent(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, city: str=None, country: str=None, state_province: str=None, venue: str=None):
        """LocationEvent - a model defined in OpenAPI

        :param city: The city of this LocationEvent.
        :param country: The country of this LocationEvent.
        :param state_province: The state_province of this LocationEvent.
        :param venue: The venue of this LocationEvent.
        """
        self.openapi_types = {
            'city': str,
            'country': str,
            'state_province': str,
            'venue': str
        }

        self.attribute_map = {
            'city': 'city',
            'country': 'country',
            'state_province': 'state_province',
            'venue': 'venue'
        }

        self._city = city
        self._country = country
        self._state_province = state_province
        self._venue = venue

    @classmethod
    def from_dict(cls, dikt: dict) -> 'LocationEvent':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The LocationEvent of this LocationEvent.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def city(self):
        """Gets the city of this LocationEvent.


        :return: The city of this LocationEvent.
        :rtype: str
        """
        return self._city

    @city.setter
    def city(self, city):
        """Sets the city of this LocationEvent.


        :param city: The city of this LocationEvent.
        :type city: str
        """

        self._city = city

    @property
    def country(self):
        """Gets the country of this LocationEvent.


        :return: The country of this LocationEvent.
        :rtype: str
        """
        return self._country

    @country.setter
    def country(self, country):
        """Sets the country of this LocationEvent.


        :param country: The country of this LocationEvent.
        :type country: str
        """

        self._country = country

    @property
    def state_province(self):
        """Gets the state_province of this LocationEvent.


        :return: The state_province of this LocationEvent.
        :rtype: str
        """
        return self._state_province

    @state_province.setter
    def state_province(self, state_province):
        """Sets the state_province of this LocationEvent.


        :param state_province: The state_province of this LocationEvent.
        :type state_province: str
        """

        self._state_province = state_province

    @property
    def venue(self):
        """Gets the venue of this LocationEvent.


        :return: The venue of this LocationEvent.
        :rtype: str
        """
        return self._venue

    @venue.setter
    def venue(self, venue):
        """Sets the venue of this LocationEvent.


        :param venue: The venue of this LocationEvent.
        :type venue: str
        """

        self._venue = venue
