# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.extended_licenses import ExtendedLicenses
from openapi_server import util


class AcquireAssetLicensesRequest(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, extended_licenses: List[ExtendedLicenses]=None, use_team_credits: bool=None):
        """AcquireAssetLicensesRequest - a model defined in OpenAPI

        :param extended_licenses: The extended_licenses of this AcquireAssetLicensesRequest.
        :param use_team_credits: The use_team_credits of this AcquireAssetLicensesRequest.
        """
        self.openapi_types = {
            'extended_licenses': List[ExtendedLicenses],
            'use_team_credits': bool
        }

        self.attribute_map = {
            'extended_licenses': 'extended_licenses',
            'use_team_credits': 'use_team_credits'
        }

        self._extended_licenses = extended_licenses
        self._use_team_credits = use_team_credits

    @classmethod
    def from_dict(cls, dikt: dict) -> 'AcquireAssetLicensesRequest':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The AcquireAssetLicensesRequest of this AcquireAssetLicensesRequest.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def extended_licenses(self):
        """Gets the extended_licenses of this AcquireAssetLicensesRequest.


        :return: The extended_licenses of this AcquireAssetLicensesRequest.
        :rtype: List[ExtendedLicenses]
        """
        return self._extended_licenses

    @extended_licenses.setter
    def extended_licenses(self, extended_licenses):
        """Sets the extended_licenses of this AcquireAssetLicensesRequest.


        :param extended_licenses: The extended_licenses of this AcquireAssetLicensesRequest.
        :type extended_licenses: List[ExtendedLicenses]
        """
        if extended_licenses is None:
            raise ValueError("Invalid value for `extended_licenses`, must not be `None`")

        self._extended_licenses = extended_licenses

    @property
    def use_team_credits(self):
        """Gets the use_team_credits of this AcquireAssetLicensesRequest.

        Defaults to false.

        :return: The use_team_credits of this AcquireAssetLicensesRequest.
        :rtype: bool
        """
        return self._use_team_credits

    @use_team_credits.setter
    def use_team_credits(self, use_team_credits):
        """Sets the use_team_credits of this AcquireAssetLicensesRequest.

        Defaults to false.

        :param use_team_credits: The use_team_credits of this AcquireAssetLicensesRequest.
        :type use_team_credits: bool
        """

        self._use_team_credits = use_team_credits
