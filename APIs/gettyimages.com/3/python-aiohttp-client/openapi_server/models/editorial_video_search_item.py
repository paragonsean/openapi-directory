# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.allowed_use import AllowedUse
from openapi_server.models.download import Download
from openapi_server.models.i_stock_license import IStockLicense
from openapi_server.models.keyword import Keyword
from openapi_server.models.referral_destination import ReferralDestination
from openapi_server.models.video_search_item_display_size import VideoSearchItemDisplaySize
from openapi_server import util


class EditorialVideoSearchItem(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, allowed_use: AllowedUse=None, artist: str=None, asset_family: str=None, caption: str=None, clip_length: str=None, collection_code: str=None, collection_id: int=None, collection_name: str=None, color_type: str=None, copyright: str=None, date_created: datetime=None, display_sizes: List[VideoSearchItemDisplaySize]=None, download_product: str=None, era: str=None, event_ids: List[int]=None, id: str=None, istock_licenses: List[IStockLicense]=None, keywords: List[Keyword]=None, largest_downloads: List[Download]=None, license_model: str=None, mastered_to: str=None, originally_shot_on: str=None, product_types: List[str]=None, referral_destinations: List[ReferralDestination]=None, shot_speed: str=None, source: str=None, title: str=None):
        """EditorialVideoSearchItem - a model defined in OpenAPI

        :param allowed_use: The allowed_use of this EditorialVideoSearchItem.
        :param artist: The artist of this EditorialVideoSearchItem.
        :param asset_family: The asset_family of this EditorialVideoSearchItem.
        :param caption: The caption of this EditorialVideoSearchItem.
        :param clip_length: The clip_length of this EditorialVideoSearchItem.
        :param collection_code: The collection_code of this EditorialVideoSearchItem.
        :param collection_id: The collection_id of this EditorialVideoSearchItem.
        :param collection_name: The collection_name of this EditorialVideoSearchItem.
        :param color_type: The color_type of this EditorialVideoSearchItem.
        :param copyright: The copyright of this EditorialVideoSearchItem.
        :param date_created: The date_created of this EditorialVideoSearchItem.
        :param display_sizes: The display_sizes of this EditorialVideoSearchItem.
        :param download_product: The download_product of this EditorialVideoSearchItem.
        :param era: The era of this EditorialVideoSearchItem.
        :param event_ids: The event_ids of this EditorialVideoSearchItem.
        :param id: The id of this EditorialVideoSearchItem.
        :param istock_licenses: The istock_licenses of this EditorialVideoSearchItem.
        :param keywords: The keywords of this EditorialVideoSearchItem.
        :param largest_downloads: The largest_downloads of this EditorialVideoSearchItem.
        :param license_model: The license_model of this EditorialVideoSearchItem.
        :param mastered_to: The mastered_to of this EditorialVideoSearchItem.
        :param originally_shot_on: The originally_shot_on of this EditorialVideoSearchItem.
        :param product_types: The product_types of this EditorialVideoSearchItem.
        :param referral_destinations: The referral_destinations of this EditorialVideoSearchItem.
        :param shot_speed: The shot_speed of this EditorialVideoSearchItem.
        :param source: The source of this EditorialVideoSearchItem.
        :param title: The title of this EditorialVideoSearchItem.
        """
        self.openapi_types = {
            'allowed_use': AllowedUse,
            'artist': str,
            'asset_family': str,
            'caption': str,
            'clip_length': str,
            'collection_code': str,
            'collection_id': int,
            'collection_name': str,
            'color_type': str,
            'copyright': str,
            'date_created': datetime,
            'display_sizes': List[VideoSearchItemDisplaySize],
            'download_product': str,
            'era': str,
            'event_ids': List[int],
            'id': str,
            'istock_licenses': List[IStockLicense],
            'keywords': List[Keyword],
            'largest_downloads': List[Download],
            'license_model': str,
            'mastered_to': str,
            'originally_shot_on': str,
            'product_types': List[str],
            'referral_destinations': List[ReferralDestination],
            'shot_speed': str,
            'source': str,
            'title': str
        }

        self.attribute_map = {
            'allowed_use': 'allowed_use',
            'artist': 'artist',
            'asset_family': 'asset_family',
            'caption': 'caption',
            'clip_length': 'clip_length',
            'collection_code': 'collection_code',
            'collection_id': 'collection_id',
            'collection_name': 'collection_name',
            'color_type': 'color_type',
            'copyright': 'copyright',
            'date_created': 'date_created',
            'display_sizes': 'display_sizes',
            'download_product': 'download_product',
            'era': 'era',
            'event_ids': 'event_ids',
            'id': 'id',
            'istock_licenses': 'istock_licenses',
            'keywords': 'keywords',
            'largest_downloads': 'largest_downloads',
            'license_model': 'license_model',
            'mastered_to': 'mastered_to',
            'originally_shot_on': 'originally_shot_on',
            'product_types': 'product_types',
            'referral_destinations': 'referral_destinations',
            'shot_speed': 'shot_speed',
            'source': 'source',
            'title': 'title'
        }

        self._allowed_use = allowed_use
        self._artist = artist
        self._asset_family = asset_family
        self._caption = caption
        self._clip_length = clip_length
        self._collection_code = collection_code
        self._collection_id = collection_id
        self._collection_name = collection_name
        self._color_type = color_type
        self._copyright = copyright
        self._date_created = date_created
        self._display_sizes = display_sizes
        self._download_product = download_product
        self._era = era
        self._event_ids = event_ids
        self._id = id
        self._istock_licenses = istock_licenses
        self._keywords = keywords
        self._largest_downloads = largest_downloads
        self._license_model = license_model
        self._mastered_to = mastered_to
        self._originally_shot_on = originally_shot_on
        self._product_types = product_types
        self._referral_destinations = referral_destinations
        self._shot_speed = shot_speed
        self._source = source
        self._title = title

    @classmethod
    def from_dict(cls, dikt: dict) -> 'EditorialVideoSearchItem':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The EditorialVideoSearchItem of this EditorialVideoSearchItem.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def allowed_use(self):
        """Gets the allowed_use of this EditorialVideoSearchItem.


        :return: The allowed_use of this EditorialVideoSearchItem.
        :rtype: AllowedUse
        """
        return self._allowed_use

    @allowed_use.setter
    def allowed_use(self, allowed_use):
        """Sets the allowed_use of this EditorialVideoSearchItem.


        :param allowed_use: The allowed_use of this EditorialVideoSearchItem.
        :type allowed_use: AllowedUse
        """

        self._allowed_use = allowed_use

    @property
    def artist(self):
        """Gets the artist of this EditorialVideoSearchItem.


        :return: The artist of this EditorialVideoSearchItem.
        :rtype: str
        """
        return self._artist

    @artist.setter
    def artist(self, artist):
        """Sets the artist of this EditorialVideoSearchItem.


        :param artist: The artist of this EditorialVideoSearchItem.
        :type artist: str
        """

        self._artist = artist

    @property
    def asset_family(self):
        """Gets the asset_family of this EditorialVideoSearchItem.


        :return: The asset_family of this EditorialVideoSearchItem.
        :rtype: str
        """
        return self._asset_family

    @asset_family.setter
    def asset_family(self, asset_family):
        """Sets the asset_family of this EditorialVideoSearchItem.


        :param asset_family: The asset_family of this EditorialVideoSearchItem.
        :type asset_family: str
        """

        self._asset_family = asset_family

    @property
    def caption(self):
        """Gets the caption of this EditorialVideoSearchItem.


        :return: The caption of this EditorialVideoSearchItem.
        :rtype: str
        """
        return self._caption

    @caption.setter
    def caption(self, caption):
        """Sets the caption of this EditorialVideoSearchItem.


        :param caption: The caption of this EditorialVideoSearchItem.
        :type caption: str
        """

        self._caption = caption

    @property
    def clip_length(self):
        """Gets the clip_length of this EditorialVideoSearchItem.


        :return: The clip_length of this EditorialVideoSearchItem.
        :rtype: str
        """
        return self._clip_length

    @clip_length.setter
    def clip_length(self, clip_length):
        """Sets the clip_length of this EditorialVideoSearchItem.


        :param clip_length: The clip_length of this EditorialVideoSearchItem.
        :type clip_length: str
        """

        self._clip_length = clip_length

    @property
    def collection_code(self):
        """Gets the collection_code of this EditorialVideoSearchItem.


        :return: The collection_code of this EditorialVideoSearchItem.
        :rtype: str
        """
        return self._collection_code

    @collection_code.setter
    def collection_code(self, collection_code):
        """Sets the collection_code of this EditorialVideoSearchItem.


        :param collection_code: The collection_code of this EditorialVideoSearchItem.
        :type collection_code: str
        """

        self._collection_code = collection_code

    @property
    def collection_id(self):
        """Gets the collection_id of this EditorialVideoSearchItem.


        :return: The collection_id of this EditorialVideoSearchItem.
        :rtype: int
        """
        return self._collection_id

    @collection_id.setter
    def collection_id(self, collection_id):
        """Sets the collection_id of this EditorialVideoSearchItem.


        :param collection_id: The collection_id of this EditorialVideoSearchItem.
        :type collection_id: int
        """

        self._collection_id = collection_id

    @property
    def collection_name(self):
        """Gets the collection_name of this EditorialVideoSearchItem.


        :return: The collection_name of this EditorialVideoSearchItem.
        :rtype: str
        """
        return self._collection_name

    @collection_name.setter
    def collection_name(self, collection_name):
        """Sets the collection_name of this EditorialVideoSearchItem.


        :param collection_name: The collection_name of this EditorialVideoSearchItem.
        :type collection_name: str
        """

        self._collection_name = collection_name

    @property
    def color_type(self):
        """Gets the color_type of this EditorialVideoSearchItem.


        :return: The color_type of this EditorialVideoSearchItem.
        :rtype: str
        """
        return self._color_type

    @color_type.setter
    def color_type(self, color_type):
        """Sets the color_type of this EditorialVideoSearchItem.


        :param color_type: The color_type of this EditorialVideoSearchItem.
        :type color_type: str
        """

        self._color_type = color_type

    @property
    def copyright(self):
        """Gets the copyright of this EditorialVideoSearchItem.


        :return: The copyright of this EditorialVideoSearchItem.
        :rtype: str
        """
        return self._copyright

    @copyright.setter
    def copyright(self, copyright):
        """Sets the copyright of this EditorialVideoSearchItem.


        :param copyright: The copyright of this EditorialVideoSearchItem.
        :type copyright: str
        """

        self._copyright = copyright

    @property
    def date_created(self):
        """Gets the date_created of this EditorialVideoSearchItem.


        :return: The date_created of this EditorialVideoSearchItem.
        :rtype: datetime
        """
        return self._date_created

    @date_created.setter
    def date_created(self, date_created):
        """Sets the date_created of this EditorialVideoSearchItem.


        :param date_created: The date_created of this EditorialVideoSearchItem.
        :type date_created: datetime
        """

        self._date_created = date_created

    @property
    def display_sizes(self):
        """Gets the display_sizes of this EditorialVideoSearchItem.


        :return: The display_sizes of this EditorialVideoSearchItem.
        :rtype: List[VideoSearchItemDisplaySize]
        """
        return self._display_sizes

    @display_sizes.setter
    def display_sizes(self, display_sizes):
        """Sets the display_sizes of this EditorialVideoSearchItem.


        :param display_sizes: The display_sizes of this EditorialVideoSearchItem.
        :type display_sizes: List[VideoSearchItemDisplaySize]
        """

        self._display_sizes = display_sizes

    @property
    def download_product(self):
        """Gets the download_product of this EditorialVideoSearchItem.


        :return: The download_product of this EditorialVideoSearchItem.
        :rtype: str
        """
        return self._download_product

    @download_product.setter
    def download_product(self, download_product):
        """Sets the download_product of this EditorialVideoSearchItem.


        :param download_product: The download_product of this EditorialVideoSearchItem.
        :type download_product: str
        """

        self._download_product = download_product

    @property
    def era(self):
        """Gets the era of this EditorialVideoSearchItem.


        :return: The era of this EditorialVideoSearchItem.
        :rtype: str
        """
        return self._era

    @era.setter
    def era(self, era):
        """Sets the era of this EditorialVideoSearchItem.


        :param era: The era of this EditorialVideoSearchItem.
        :type era: str
        """

        self._era = era

    @property
    def event_ids(self):
        """Gets the event_ids of this EditorialVideoSearchItem.


        :return: The event_ids of this EditorialVideoSearchItem.
        :rtype: List[int]
        """
        return self._event_ids

    @event_ids.setter
    def event_ids(self, event_ids):
        """Sets the event_ids of this EditorialVideoSearchItem.


        :param event_ids: The event_ids of this EditorialVideoSearchItem.
        :type event_ids: List[int]
        """

        self._event_ids = event_ids

    @property
    def id(self):
        """Gets the id of this EditorialVideoSearchItem.


        :return: The id of this EditorialVideoSearchItem.
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this EditorialVideoSearchItem.


        :param id: The id of this EditorialVideoSearchItem.
        :type id: str
        """

        self._id = id

    @property
    def istock_licenses(self):
        """Gets the istock_licenses of this EditorialVideoSearchItem.


        :return: The istock_licenses of this EditorialVideoSearchItem.
        :rtype: List[IStockLicense]
        """
        return self._istock_licenses

    @istock_licenses.setter
    def istock_licenses(self, istock_licenses):
        """Sets the istock_licenses of this EditorialVideoSearchItem.


        :param istock_licenses: The istock_licenses of this EditorialVideoSearchItem.
        :type istock_licenses: List[IStockLicense]
        """

        self._istock_licenses = istock_licenses

    @property
    def keywords(self):
        """Gets the keywords of this EditorialVideoSearchItem.


        :return: The keywords of this EditorialVideoSearchItem.
        :rtype: List[Keyword]
        """
        return self._keywords

    @keywords.setter
    def keywords(self, keywords):
        """Sets the keywords of this EditorialVideoSearchItem.


        :param keywords: The keywords of this EditorialVideoSearchItem.
        :type keywords: List[Keyword]
        """

        self._keywords = keywords

    @property
    def largest_downloads(self):
        """Gets the largest_downloads of this EditorialVideoSearchItem.


        :return: The largest_downloads of this EditorialVideoSearchItem.
        :rtype: List[Download]
        """
        return self._largest_downloads

    @largest_downloads.setter
    def largest_downloads(self, largest_downloads):
        """Sets the largest_downloads of this EditorialVideoSearchItem.


        :param largest_downloads: The largest_downloads of this EditorialVideoSearchItem.
        :type largest_downloads: List[Download]
        """

        self._largest_downloads = largest_downloads

    @property
    def license_model(self):
        """Gets the license_model of this EditorialVideoSearchItem.


        :return: The license_model of this EditorialVideoSearchItem.
        :rtype: str
        """
        return self._license_model

    @license_model.setter
    def license_model(self, license_model):
        """Sets the license_model of this EditorialVideoSearchItem.


        :param license_model: The license_model of this EditorialVideoSearchItem.
        :type license_model: str
        """

        self._license_model = license_model

    @property
    def mastered_to(self):
        """Gets the mastered_to of this EditorialVideoSearchItem.


        :return: The mastered_to of this EditorialVideoSearchItem.
        :rtype: str
        """
        return self._mastered_to

    @mastered_to.setter
    def mastered_to(self, mastered_to):
        """Sets the mastered_to of this EditorialVideoSearchItem.


        :param mastered_to: The mastered_to of this EditorialVideoSearchItem.
        :type mastered_to: str
        """

        self._mastered_to = mastered_to

    @property
    def originally_shot_on(self):
        """Gets the originally_shot_on of this EditorialVideoSearchItem.


        :return: The originally_shot_on of this EditorialVideoSearchItem.
        :rtype: str
        """
        return self._originally_shot_on

    @originally_shot_on.setter
    def originally_shot_on(self, originally_shot_on):
        """Sets the originally_shot_on of this EditorialVideoSearchItem.


        :param originally_shot_on: The originally_shot_on of this EditorialVideoSearchItem.
        :type originally_shot_on: str
        """

        self._originally_shot_on = originally_shot_on

    @property
    def product_types(self):
        """Gets the product_types of this EditorialVideoSearchItem.


        :return: The product_types of this EditorialVideoSearchItem.
        :rtype: List[str]
        """
        return self._product_types

    @product_types.setter
    def product_types(self, product_types):
        """Sets the product_types of this EditorialVideoSearchItem.


        :param product_types: The product_types of this EditorialVideoSearchItem.
        :type product_types: List[str]
        """

        self._product_types = product_types

    @property
    def referral_destinations(self):
        """Gets the referral_destinations of this EditorialVideoSearchItem.


        :return: The referral_destinations of this EditorialVideoSearchItem.
        :rtype: List[ReferralDestination]
        """
        return self._referral_destinations

    @referral_destinations.setter
    def referral_destinations(self, referral_destinations):
        """Sets the referral_destinations of this EditorialVideoSearchItem.


        :param referral_destinations: The referral_destinations of this EditorialVideoSearchItem.
        :type referral_destinations: List[ReferralDestination]
        """

        self._referral_destinations = referral_destinations

    @property
    def shot_speed(self):
        """Gets the shot_speed of this EditorialVideoSearchItem.


        :return: The shot_speed of this EditorialVideoSearchItem.
        :rtype: str
        """
        return self._shot_speed

    @shot_speed.setter
    def shot_speed(self, shot_speed):
        """Sets the shot_speed of this EditorialVideoSearchItem.


        :param shot_speed: The shot_speed of this EditorialVideoSearchItem.
        :type shot_speed: str
        """

        self._shot_speed = shot_speed

    @property
    def source(self):
        """Gets the source of this EditorialVideoSearchItem.


        :return: The source of this EditorialVideoSearchItem.
        :rtype: str
        """
        return self._source

    @source.setter
    def source(self, source):
        """Sets the source of this EditorialVideoSearchItem.


        :param source: The source of this EditorialVideoSearchItem.
        :type source: str
        """

        self._source = source

    @property
    def title(self):
        """Gets the title of this EditorialVideoSearchItem.


        :return: The title of this EditorialVideoSearchItem.
        :rtype: str
        """
        return self._title

    @title.setter
    def title(self, title):
        """Sets the title of this EditorialVideoSearchItem.


        :param title: The title of this EditorialVideoSearchItem.
        :type title: str
        """

        self._title = title
