# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class CreativeVideosFieldValues(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    """
    allowed enum values
    """
    ALLOWED_USE = 'allowed_use'
    ARTIST = 'artist'
    ASPECT_RATIO = 'aspect_ratio'
    ASSET_FAMILY = 'asset_family'
    CALL_FOR_IMAGE = 'call_for_image'
    CAPTION = 'caption'
    CLIP_LENGTH = 'clip_length'
    COLLECTION_CODE = 'collection_code'
    COLLECTION_ID = 'collection_id'
    COLLECTION_NAME = 'collection_name'
    COLOR_TYPE = 'color_type'
    COMP = 'comp'
    COPYRIGHT = 'copyright'
    DATE_CREATED = 'date_created'
    DATE_SUBMITTED = 'date_submitted'
    DETAIL_SET = 'detail_set'
    DISPLAY_SET = 'display_set'
    DOWNLOAD_PRODUCT = 'download_product'
    DOWNLOAD_SIZES = 'download_sizes'
    ERA = 'era'
    ID = 'id'
    ISTOCK_COLLECTION = 'istock_collection'
    KEYWORDS = 'keywords'
    LARGEST_DOWNLOADS = 'largest_downloads'
    LICENSE_MODEL = 'license_model'
    MASTERED_TO = 'mastered_to'
    OBJECT_NAME = 'object_name'
    ORIENTATION = 'orientation'
    ORIGINALLY_SHOT_ON = 'originally_shot_on'
    PREVIEW = 'preview'
    PRODUCT_TYPES = 'product_types'
    QUALITY_RANK = 'quality_rank'
    REFERRAL_DESTINATIONS = 'referral_destinations'
    SHOT_SPEED = 'shot_speed'
    SUMMARY_SET = 'summary_set'
    THUMB = 'thumb'
    TITLE = 'title'

    def __init__(self):
        """CreativeVideosFieldValues - a model defined in OpenAPI

        """
        self.openapi_types = {
        }

        self.attribute_map = {
        }

    @classmethod
    def from_dict(cls, dikt: dict) -> 'CreativeVideosFieldValues':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The CreativeVideosFieldValues of this CreativeVideosFieldValues.
        """
        return util.deserialize_model(dikt, cls)
