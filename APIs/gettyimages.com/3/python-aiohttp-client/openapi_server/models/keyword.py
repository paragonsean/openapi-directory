# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class Keyword(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, entity_types: List[str]=None, entity_uris: List[str]=None, keyword_id: str=None, relevance: int=None, text: str=None, type: str=None):
        """Keyword - a model defined in OpenAPI

        :param entity_types: The entity_types of this Keyword.
        :param entity_uris: The entity_uris of this Keyword.
        :param keyword_id: The keyword_id of this Keyword.
        :param relevance: The relevance of this Keyword.
        :param text: The text of this Keyword.
        :param type: The type of this Keyword.
        """
        self.openapi_types = {
            'entity_types': List[str],
            'entity_uris': List[str],
            'keyword_id': str,
            'relevance': int,
            'text': str,
            'type': str
        }

        self.attribute_map = {
            'entity_types': 'entity_types',
            'entity_uris': 'entity_uris',
            'keyword_id': 'keyword_id',
            'relevance': 'relevance',
            'text': 'text',
            'type': 'type'
        }

        self._entity_types = entity_types
        self._entity_uris = entity_uris
        self._keyword_id = keyword_id
        self._relevance = relevance
        self._text = text
        self._type = type

    @classmethod
    def from_dict(cls, dikt: dict) -> 'Keyword':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Keyword of this Keyword.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def entity_types(self):
        """Gets the entity_types of this Keyword.


        :return: The entity_types of this Keyword.
        :rtype: List[str]
        """
        return self._entity_types

    @entity_types.setter
    def entity_types(self, entity_types):
        """Sets the entity_types of this Keyword.


        :param entity_types: The entity_types of this Keyword.
        :type entity_types: List[str]
        """

        self._entity_types = entity_types

    @property
    def entity_uris(self):
        """Gets the entity_uris of this Keyword.


        :return: The entity_uris of this Keyword.
        :rtype: List[str]
        """
        return self._entity_uris

    @entity_uris.setter
    def entity_uris(self, entity_uris):
        """Sets the entity_uris of this Keyword.


        :param entity_uris: The entity_uris of this Keyword.
        :type entity_uris: List[str]
        """

        self._entity_uris = entity_uris

    @property
    def keyword_id(self):
        """Gets the keyword_id of this Keyword.


        :return: The keyword_id of this Keyword.
        :rtype: str
        """
        return self._keyword_id

    @keyword_id.setter
    def keyword_id(self, keyword_id):
        """Sets the keyword_id of this Keyword.


        :param keyword_id: The keyword_id of this Keyword.
        :type keyword_id: str
        """

        self._keyword_id = keyword_id

    @property
    def relevance(self):
        """Gets the relevance of this Keyword.


        :return: The relevance of this Keyword.
        :rtype: int
        """
        return self._relevance

    @relevance.setter
    def relevance(self, relevance):
        """Sets the relevance of this Keyword.


        :param relevance: The relevance of this Keyword.
        :type relevance: int
        """

        self._relevance = relevance

    @property
    def text(self):
        """Gets the text of this Keyword.


        :return: The text of this Keyword.
        :rtype: str
        """
        return self._text

    @text.setter
    def text(self, text):
        """Sets the text of this Keyword.


        :param text: The text of this Keyword.
        :type text: str
        """

        self._text = text

    @property
    def type(self):
        """Gets the type of this Keyword.


        :return: The type of this Keyword.
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this Keyword.


        :param type: The type of this Keyword.
        :type type: str
        """

        self._type = type
