# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.blended_video_search_item import BlendedVideoSearchItem
from openapi_server.models.related_search import RelatedSearch
from openapi_server.models.search_facets_response import SearchFacetsResponse
from openapi_server import util


class BlendedVideoSearchResults(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, facets: SearchFacetsResponse=None, related_searches: List[RelatedSearch]=None, result_count: int=None, videos: List[BlendedVideoSearchItem]=None):
        """BlendedVideoSearchResults - a model defined in OpenAPI

        :param facets: The facets of this BlendedVideoSearchResults.
        :param related_searches: The related_searches of this BlendedVideoSearchResults.
        :param result_count: The result_count of this BlendedVideoSearchResults.
        :param videos: The videos of this BlendedVideoSearchResults.
        """
        self.openapi_types = {
            'facets': SearchFacetsResponse,
            'related_searches': List[RelatedSearch],
            'result_count': int,
            'videos': List[BlendedVideoSearchItem]
        }

        self.attribute_map = {
            'facets': 'facets',
            'related_searches': 'related_searches',
            'result_count': 'result_count',
            'videos': 'videos'
        }

        self._facets = facets
        self._related_searches = related_searches
        self._result_count = result_count
        self._videos = videos

    @classmethod
    def from_dict(cls, dikt: dict) -> 'BlendedVideoSearchResults':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The BlendedVideoSearchResults of this BlendedVideoSearchResults.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def facets(self):
        """Gets the facets of this BlendedVideoSearchResults.


        :return: The facets of this BlendedVideoSearchResults.
        :rtype: SearchFacetsResponse
        """
        return self._facets

    @facets.setter
    def facets(self, facets):
        """Sets the facets of this BlendedVideoSearchResults.


        :param facets: The facets of this BlendedVideoSearchResults.
        :type facets: SearchFacetsResponse
        """

        self._facets = facets

    @property
    def related_searches(self):
        """Gets the related_searches of this BlendedVideoSearchResults.


        :return: The related_searches of this BlendedVideoSearchResults.
        :rtype: List[RelatedSearch]
        """
        return self._related_searches

    @related_searches.setter
    def related_searches(self, related_searches):
        """Sets the related_searches of this BlendedVideoSearchResults.


        :param related_searches: The related_searches of this BlendedVideoSearchResults.
        :type related_searches: List[RelatedSearch]
        """

        self._related_searches = related_searches

    @property
    def result_count(self):
        """Gets the result_count of this BlendedVideoSearchResults.


        :return: The result_count of this BlendedVideoSearchResults.
        :rtype: int
        """
        return self._result_count

    @result_count.setter
    def result_count(self, result_count):
        """Sets the result_count of this BlendedVideoSearchResults.


        :param result_count: The result_count of this BlendedVideoSearchResults.
        :type result_count: int
        """

        self._result_count = result_count

    @property
    def videos(self):
        """Gets the videos of this BlendedVideoSearchResults.


        :return: The videos of this BlendedVideoSearchResults.
        :rtype: List[BlendedVideoSearchItem]
        """
        return self._videos

    @videos.setter
    def videos(self, videos):
        """Sets the videos of this BlendedVideoSearchResults.


        :param videos: The videos of this BlendedVideoSearchResults.
        :type videos: List[BlendedVideoSearchItem]
        """

        self._videos = videos
