# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.auto_corrections import AutoCorrections
from openapi_server.models.related_search import RelatedSearch
from openapi_server.models.search_facets_response import SearchFacetsResponse
from openapi_server import util


class SearchByImageResourceResults(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, auto_corrections: AutoCorrections=None, facets: SearchFacetsResponse=None, image_fingerprint: str=None, images: object=None, related_searches: List[RelatedSearch]=None, result_count: int=None):
        """SearchByImageResourceResults - a model defined in OpenAPI

        :param auto_corrections: The auto_corrections of this SearchByImageResourceResults.
        :param facets: The facets of this SearchByImageResourceResults.
        :param image_fingerprint: The image_fingerprint of this SearchByImageResourceResults.
        :param images: The images of this SearchByImageResourceResults.
        :param related_searches: The related_searches of this SearchByImageResourceResults.
        :param result_count: The result_count of this SearchByImageResourceResults.
        """
        self.openapi_types = {
            'auto_corrections': AutoCorrections,
            'facets': SearchFacetsResponse,
            'image_fingerprint': str,
            'images': object,
            'related_searches': List[RelatedSearch],
            'result_count': int
        }

        self.attribute_map = {
            'auto_corrections': 'auto_corrections',
            'facets': 'facets',
            'image_fingerprint': 'image_fingerprint',
            'images': 'images',
            'related_searches': 'related_searches',
            'result_count': 'result_count'
        }

        self._auto_corrections = auto_corrections
        self._facets = facets
        self._image_fingerprint = image_fingerprint
        self._images = images
        self._related_searches = related_searches
        self._result_count = result_count

    @classmethod
    def from_dict(cls, dikt: dict) -> 'SearchByImageResourceResults':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The SearchByImageResourceResults of this SearchByImageResourceResults.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def auto_corrections(self):
        """Gets the auto_corrections of this SearchByImageResourceResults.


        :return: The auto_corrections of this SearchByImageResourceResults.
        :rtype: AutoCorrections
        """
        return self._auto_corrections

    @auto_corrections.setter
    def auto_corrections(self, auto_corrections):
        """Sets the auto_corrections of this SearchByImageResourceResults.


        :param auto_corrections: The auto_corrections of this SearchByImageResourceResults.
        :type auto_corrections: AutoCorrections
        """

        self._auto_corrections = auto_corrections

    @property
    def facets(self):
        """Gets the facets of this SearchByImageResourceResults.


        :return: The facets of this SearchByImageResourceResults.
        :rtype: SearchFacetsResponse
        """
        return self._facets

    @facets.setter
    def facets(self, facets):
        """Sets the facets of this SearchByImageResourceResults.


        :param facets: The facets of this SearchByImageResourceResults.
        :type facets: SearchFacetsResponse
        """

        self._facets = facets

    @property
    def image_fingerprint(self):
        """Gets the image_fingerprint of this SearchByImageResourceResults.


        :return: The image_fingerprint of this SearchByImageResourceResults.
        :rtype: str
        """
        return self._image_fingerprint

    @image_fingerprint.setter
    def image_fingerprint(self, image_fingerprint):
        """Sets the image_fingerprint of this SearchByImageResourceResults.


        :param image_fingerprint: The image_fingerprint of this SearchByImageResourceResults.
        :type image_fingerprint: str
        """

        self._image_fingerprint = image_fingerprint

    @property
    def images(self):
        """Gets the images of this SearchByImageResourceResults.


        :return: The images of this SearchByImageResourceResults.
        :rtype: object
        """
        return self._images

    @images.setter
    def images(self, images):
        """Sets the images of this SearchByImageResourceResults.


        :param images: The images of this SearchByImageResourceResults.
        :type images: object
        """

        self._images = images

    @property
    def related_searches(self):
        """Gets the related_searches of this SearchByImageResourceResults.


        :return: The related_searches of this SearchByImageResourceResults.
        :rtype: List[RelatedSearch]
        """
        return self._related_searches

    @related_searches.setter
    def related_searches(self, related_searches):
        """Sets the related_searches of this SearchByImageResourceResults.


        :param related_searches: The related_searches of this SearchByImageResourceResults.
        :type related_searches: List[RelatedSearch]
        """

        self._related_searches = related_searches

    @property
    def result_count(self):
        """Gets the result_count of this SearchByImageResourceResults.


        :return: The result_count of this SearchByImageResourceResults.
        :rtype: int
        """
        return self._result_count

    @result_count.setter
    def result_count(self, result_count):
        """Sets the result_count of this SearchByImageResourceResults.


        :param result_count: The result_count of this SearchByImageResourceResults.
        :type result_count: int
        """

        self._result_count = result_count
