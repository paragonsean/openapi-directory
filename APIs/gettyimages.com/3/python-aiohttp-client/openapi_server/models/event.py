# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.hero_image import HeroImage
from openapi_server.models.location_event import LocationEvent
from openapi_server import util


class Event(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, child_event_count: int=None, editorial_segments: List[str]=None, hero_image: HeroImage=None, id: int=None, image_count: int=None, location: LocationEvent=None, name: str=None, start_date: datetime=None):
        """Event - a model defined in OpenAPI

        :param child_event_count: The child_event_count of this Event.
        :param editorial_segments: The editorial_segments of this Event.
        :param hero_image: The hero_image of this Event.
        :param id: The id of this Event.
        :param image_count: The image_count of this Event.
        :param location: The location of this Event.
        :param name: The name of this Event.
        :param start_date: The start_date of this Event.
        """
        self.openapi_types = {
            'child_event_count': int,
            'editorial_segments': List[str],
            'hero_image': HeroImage,
            'id': int,
            'image_count': int,
            'location': LocationEvent,
            'name': str,
            'start_date': datetime
        }

        self.attribute_map = {
            'child_event_count': 'child_event_count',
            'editorial_segments': 'editorial_segments',
            'hero_image': 'hero_image',
            'id': 'id',
            'image_count': 'image_count',
            'location': 'location',
            'name': 'name',
            'start_date': 'start_date'
        }

        self._child_event_count = child_event_count
        self._editorial_segments = editorial_segments
        self._hero_image = hero_image
        self._id = id
        self._image_count = image_count
        self._location = location
        self._name = name
        self._start_date = start_date

    @classmethod
    def from_dict(cls, dikt: dict) -> 'Event':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Event of this Event.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def child_event_count(self):
        """Gets the child_event_count of this Event.


        :return: The child_event_count of this Event.
        :rtype: int
        """
        return self._child_event_count

    @child_event_count.setter
    def child_event_count(self, child_event_count):
        """Sets the child_event_count of this Event.


        :param child_event_count: The child_event_count of this Event.
        :type child_event_count: int
        """

        self._child_event_count = child_event_count

    @property
    def editorial_segments(self):
        """Gets the editorial_segments of this Event.


        :return: The editorial_segments of this Event.
        :rtype: List[str]
        """
        return self._editorial_segments

    @editorial_segments.setter
    def editorial_segments(self, editorial_segments):
        """Sets the editorial_segments of this Event.


        :param editorial_segments: The editorial_segments of this Event.
        :type editorial_segments: List[str]
        """

        self._editorial_segments = editorial_segments

    @property
    def hero_image(self):
        """Gets the hero_image of this Event.


        :return: The hero_image of this Event.
        :rtype: HeroImage
        """
        return self._hero_image

    @hero_image.setter
    def hero_image(self, hero_image):
        """Sets the hero_image of this Event.


        :param hero_image: The hero_image of this Event.
        :type hero_image: HeroImage
        """

        self._hero_image = hero_image

    @property
    def id(self):
        """Gets the id of this Event.


        :return: The id of this Event.
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this Event.


        :param id: The id of this Event.
        :type id: int
        """

        self._id = id

    @property
    def image_count(self):
        """Gets the image_count of this Event.


        :return: The image_count of this Event.
        :rtype: int
        """
        return self._image_count

    @image_count.setter
    def image_count(self, image_count):
        """Sets the image_count of this Event.


        :param image_count: The image_count of this Event.
        :type image_count: int
        """

        self._image_count = image_count

    @property
    def location(self):
        """Gets the location of this Event.


        :return: The location of this Event.
        :rtype: LocationEvent
        """
        return self._location

    @location.setter
    def location(self, location):
        """Sets the location of this Event.


        :param location: The location of this Event.
        :type location: LocationEvent
        """

        self._location = location

    @property
    def name(self):
        """Gets the name of this Event.


        :return: The name of this Event.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this Event.


        :param name: The name of this Event.
        :type name: str
        """

        self._name = name

    @property
    def start_date(self):
        """Gets the start_date of this Event.


        :return: The start_date of this Event.
        :rtype: datetime
        """
        return self._start_date

    @start_date.setter
    def start_date(self, start_date):
        """Sets the start_date of this Event.


        :param start_date: The start_date of this Event.
        :type start_date: datetime
        """

        self._start_date = start_date
