# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class ReportUsageBatchResponse(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, invalid_assets: List[str]=None, total_asset_usages_processed: int=None):
        """ReportUsageBatchResponse - a model defined in OpenAPI

        :param invalid_assets: The invalid_assets of this ReportUsageBatchResponse.
        :param total_asset_usages_processed: The total_asset_usages_processed of this ReportUsageBatchResponse.
        """
        self.openapi_types = {
            'invalid_assets': List[str],
            'total_asset_usages_processed': int
        }

        self.attribute_map = {
            'invalid_assets': 'invalid_assets',
            'total_asset_usages_processed': 'total_asset_usages_processed'
        }

        self._invalid_assets = invalid_assets
        self._total_asset_usages_processed = total_asset_usages_processed

    @classmethod
    def from_dict(cls, dikt: dict) -> 'ReportUsageBatchResponse':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The report_usage_batch_response of this ReportUsageBatchResponse.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def invalid_assets(self):
        """Gets the invalid_assets of this ReportUsageBatchResponse.

        Identifies a list of asset ids submitted that did not match known Getty asset ids.

        :return: The invalid_assets of this ReportUsageBatchResponse.
        :rtype: List[str]
        """
        return self._invalid_assets

    @invalid_assets.setter
    def invalid_assets(self, invalid_assets):
        """Sets the invalid_assets of this ReportUsageBatchResponse.

        Identifies a list of asset ids submitted that did not match known Getty asset ids.

        :param invalid_assets: The invalid_assets of this ReportUsageBatchResponse.
        :type invalid_assets: List[str]
        """

        self._invalid_assets = invalid_assets

    @property
    def total_asset_usages_processed(self):
        """Gets the total_asset_usages_processed of this ReportUsageBatchResponse.

        Specifies the number of asset usage records that were successfully recorded.

        :return: The total_asset_usages_processed of this ReportUsageBatchResponse.
        :rtype: int
        """
        return self._total_asset_usages_processed

    @total_asset_usages_processed.setter
    def total_asset_usages_processed(self, total_asset_usages_processed):
        """Sets the total_asset_usages_processed of this ReportUsageBatchResponse.

        Specifies the number of asset usage records that were successfully recorded.

        :param total_asset_usages_processed: The total_asset_usages_processed of this ReportUsageBatchResponse.
        :type total_asset_usages_processed: int
        """

        self._total_asset_usages_processed = total_asset_usages_processed
