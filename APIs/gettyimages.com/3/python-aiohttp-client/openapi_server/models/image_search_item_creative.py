# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.allowed_use import AllowedUse
from openapi_server.models.download import Download
from openapi_server.models.image_search_item_display_size import ImageSearchItemDisplaySize
from openapi_server.models.keyword import Keyword
from openapi_server.models.max_dimensions import MaxDimensions
from openapi_server.models.referral_destination import ReferralDestination
from openapi_server import util


class ImageSearchItemCreative(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, allowed_use: AllowedUse=None, alternative_ids: Dict[str, str]=None, artist: str=None, asset_family: str=None, call_for_image: bool=None, caption: str=None, collection_code: str=None, collection_id: int=None, collection_name: str=None, color_type: str=None, copyright: str=None, date_camera_shot: datetime=None, date_created: datetime=None, display_sizes: List[ImageSearchItemDisplaySize]=None, download_product: str=None, graphical_style: str=None, id: str=None, keywords: List[Keyword]=None, largest_downloads: List[Download]=None, license_model: str=None, max_dimensions: MaxDimensions=None, orientation: str=None, quality_rank: int=None, referral_destinations: List[ReferralDestination]=None, title: str=None, uri_oembed: str=None):
        """ImageSearchItemCreative - a model defined in OpenAPI

        :param allowed_use: The allowed_use of this ImageSearchItemCreative.
        :param alternative_ids: The alternative_ids of this ImageSearchItemCreative.
        :param artist: The artist of this ImageSearchItemCreative.
        :param asset_family: The asset_family of this ImageSearchItemCreative.
        :param call_for_image: The call_for_image of this ImageSearchItemCreative.
        :param caption: The caption of this ImageSearchItemCreative.
        :param collection_code: The collection_code of this ImageSearchItemCreative.
        :param collection_id: The collection_id of this ImageSearchItemCreative.
        :param collection_name: The collection_name of this ImageSearchItemCreative.
        :param color_type: The color_type of this ImageSearchItemCreative.
        :param copyright: The copyright of this ImageSearchItemCreative.
        :param date_camera_shot: The date_camera_shot of this ImageSearchItemCreative.
        :param date_created: The date_created of this ImageSearchItemCreative.
        :param display_sizes: The display_sizes of this ImageSearchItemCreative.
        :param download_product: The download_product of this ImageSearchItemCreative.
        :param graphical_style: The graphical_style of this ImageSearchItemCreative.
        :param id: The id of this ImageSearchItemCreative.
        :param keywords: The keywords of this ImageSearchItemCreative.
        :param largest_downloads: The largest_downloads of this ImageSearchItemCreative.
        :param license_model: The license_model of this ImageSearchItemCreative.
        :param max_dimensions: The max_dimensions of this ImageSearchItemCreative.
        :param orientation: The orientation of this ImageSearchItemCreative.
        :param quality_rank: The quality_rank of this ImageSearchItemCreative.
        :param referral_destinations: The referral_destinations of this ImageSearchItemCreative.
        :param title: The title of this ImageSearchItemCreative.
        :param uri_oembed: The uri_oembed of this ImageSearchItemCreative.
        """
        self.openapi_types = {
            'allowed_use': AllowedUse,
            'alternative_ids': Dict[str, str],
            'artist': str,
            'asset_family': str,
            'call_for_image': bool,
            'caption': str,
            'collection_code': str,
            'collection_id': int,
            'collection_name': str,
            'color_type': str,
            'copyright': str,
            'date_camera_shot': datetime,
            'date_created': datetime,
            'display_sizes': List[ImageSearchItemDisplaySize],
            'download_product': str,
            'graphical_style': str,
            'id': str,
            'keywords': List[Keyword],
            'largest_downloads': List[Download],
            'license_model': str,
            'max_dimensions': MaxDimensions,
            'orientation': str,
            'quality_rank': int,
            'referral_destinations': List[ReferralDestination],
            'title': str,
            'uri_oembed': str
        }

        self.attribute_map = {
            'allowed_use': 'allowed_use',
            'alternative_ids': 'alternative_ids',
            'artist': 'artist',
            'asset_family': 'asset_family',
            'call_for_image': 'call_for_image',
            'caption': 'caption',
            'collection_code': 'collection_code',
            'collection_id': 'collection_id',
            'collection_name': 'collection_name',
            'color_type': 'color_type',
            'copyright': 'copyright',
            'date_camera_shot': 'date_camera_shot',
            'date_created': 'date_created',
            'display_sizes': 'display_sizes',
            'download_product': 'download_product',
            'graphical_style': 'graphical_style',
            'id': 'id',
            'keywords': 'keywords',
            'largest_downloads': 'largest_downloads',
            'license_model': 'license_model',
            'max_dimensions': 'max_dimensions',
            'orientation': 'orientation',
            'quality_rank': 'quality_rank',
            'referral_destinations': 'referral_destinations',
            'title': 'title',
            'uri_oembed': 'uri_oembed'
        }

        self._allowed_use = allowed_use
        self._alternative_ids = alternative_ids
        self._artist = artist
        self._asset_family = asset_family
        self._call_for_image = call_for_image
        self._caption = caption
        self._collection_code = collection_code
        self._collection_id = collection_id
        self._collection_name = collection_name
        self._color_type = color_type
        self._copyright = copyright
        self._date_camera_shot = date_camera_shot
        self._date_created = date_created
        self._display_sizes = display_sizes
        self._download_product = download_product
        self._graphical_style = graphical_style
        self._id = id
        self._keywords = keywords
        self._largest_downloads = largest_downloads
        self._license_model = license_model
        self._max_dimensions = max_dimensions
        self._orientation = orientation
        self._quality_rank = quality_rank
        self._referral_destinations = referral_destinations
        self._title = title
        self._uri_oembed = uri_oembed

    @classmethod
    def from_dict(cls, dikt: dict) -> 'ImageSearchItemCreative':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The ImageSearchItemCreative of this ImageSearchItemCreative.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def allowed_use(self):
        """Gets the allowed_use of this ImageSearchItemCreative.


        :return: The allowed_use of this ImageSearchItemCreative.
        :rtype: AllowedUse
        """
        return self._allowed_use

    @allowed_use.setter
    def allowed_use(self, allowed_use):
        """Sets the allowed_use of this ImageSearchItemCreative.


        :param allowed_use: The allowed_use of this ImageSearchItemCreative.
        :type allowed_use: AllowedUse
        """

        self._allowed_use = allowed_use

    @property
    def alternative_ids(self):
        """Gets the alternative_ids of this ImageSearchItemCreative.


        :return: The alternative_ids of this ImageSearchItemCreative.
        :rtype: Dict[str, str]
        """
        return self._alternative_ids

    @alternative_ids.setter
    def alternative_ids(self, alternative_ids):
        """Sets the alternative_ids of this ImageSearchItemCreative.


        :param alternative_ids: The alternative_ids of this ImageSearchItemCreative.
        :type alternative_ids: Dict[str, str]
        """

        self._alternative_ids = alternative_ids

    @property
    def artist(self):
        """Gets the artist of this ImageSearchItemCreative.


        :return: The artist of this ImageSearchItemCreative.
        :rtype: str
        """
        return self._artist

    @artist.setter
    def artist(self, artist):
        """Sets the artist of this ImageSearchItemCreative.


        :param artist: The artist of this ImageSearchItemCreative.
        :type artist: str
        """

        self._artist = artist

    @property
    def asset_family(self):
        """Gets the asset_family of this ImageSearchItemCreative.


        :return: The asset_family of this ImageSearchItemCreative.
        :rtype: str
        """
        return self._asset_family

    @asset_family.setter
    def asset_family(self, asset_family):
        """Sets the asset_family of this ImageSearchItemCreative.


        :param asset_family: The asset_family of this ImageSearchItemCreative.
        :type asset_family: str
        """

        self._asset_family = asset_family

    @property
    def call_for_image(self):
        """Gets the call_for_image of this ImageSearchItemCreative.


        :return: The call_for_image of this ImageSearchItemCreative.
        :rtype: bool
        """
        return self._call_for_image

    @call_for_image.setter
    def call_for_image(self, call_for_image):
        """Sets the call_for_image of this ImageSearchItemCreative.


        :param call_for_image: The call_for_image of this ImageSearchItemCreative.
        :type call_for_image: bool
        """

        self._call_for_image = call_for_image

    @property
    def caption(self):
        """Gets the caption of this ImageSearchItemCreative.


        :return: The caption of this ImageSearchItemCreative.
        :rtype: str
        """
        return self._caption

    @caption.setter
    def caption(self, caption):
        """Sets the caption of this ImageSearchItemCreative.


        :param caption: The caption of this ImageSearchItemCreative.
        :type caption: str
        """

        self._caption = caption

    @property
    def collection_code(self):
        """Gets the collection_code of this ImageSearchItemCreative.


        :return: The collection_code of this ImageSearchItemCreative.
        :rtype: str
        """
        return self._collection_code

    @collection_code.setter
    def collection_code(self, collection_code):
        """Sets the collection_code of this ImageSearchItemCreative.


        :param collection_code: The collection_code of this ImageSearchItemCreative.
        :type collection_code: str
        """

        self._collection_code = collection_code

    @property
    def collection_id(self):
        """Gets the collection_id of this ImageSearchItemCreative.


        :return: The collection_id of this ImageSearchItemCreative.
        :rtype: int
        """
        return self._collection_id

    @collection_id.setter
    def collection_id(self, collection_id):
        """Sets the collection_id of this ImageSearchItemCreative.


        :param collection_id: The collection_id of this ImageSearchItemCreative.
        :type collection_id: int
        """

        self._collection_id = collection_id

    @property
    def collection_name(self):
        """Gets the collection_name of this ImageSearchItemCreative.


        :return: The collection_name of this ImageSearchItemCreative.
        :rtype: str
        """
        return self._collection_name

    @collection_name.setter
    def collection_name(self, collection_name):
        """Sets the collection_name of this ImageSearchItemCreative.


        :param collection_name: The collection_name of this ImageSearchItemCreative.
        :type collection_name: str
        """

        self._collection_name = collection_name

    @property
    def color_type(self):
        """Gets the color_type of this ImageSearchItemCreative.


        :return: The color_type of this ImageSearchItemCreative.
        :rtype: str
        """
        return self._color_type

    @color_type.setter
    def color_type(self, color_type):
        """Sets the color_type of this ImageSearchItemCreative.


        :param color_type: The color_type of this ImageSearchItemCreative.
        :type color_type: str
        """

        self._color_type = color_type

    @property
    def copyright(self):
        """Gets the copyright of this ImageSearchItemCreative.


        :return: The copyright of this ImageSearchItemCreative.
        :rtype: str
        """
        return self._copyright

    @copyright.setter
    def copyright(self, copyright):
        """Sets the copyright of this ImageSearchItemCreative.


        :param copyright: The copyright of this ImageSearchItemCreative.
        :type copyright: str
        """

        self._copyright = copyright

    @property
    def date_camera_shot(self):
        """Gets the date_camera_shot of this ImageSearchItemCreative.


        :return: The date_camera_shot of this ImageSearchItemCreative.
        :rtype: datetime
        """
        return self._date_camera_shot

    @date_camera_shot.setter
    def date_camera_shot(self, date_camera_shot):
        """Sets the date_camera_shot of this ImageSearchItemCreative.


        :param date_camera_shot: The date_camera_shot of this ImageSearchItemCreative.
        :type date_camera_shot: datetime
        """

        self._date_camera_shot = date_camera_shot

    @property
    def date_created(self):
        """Gets the date_created of this ImageSearchItemCreative.


        :return: The date_created of this ImageSearchItemCreative.
        :rtype: datetime
        """
        return self._date_created

    @date_created.setter
    def date_created(self, date_created):
        """Sets the date_created of this ImageSearchItemCreative.


        :param date_created: The date_created of this ImageSearchItemCreative.
        :type date_created: datetime
        """

        self._date_created = date_created

    @property
    def display_sizes(self):
        """Gets the display_sizes of this ImageSearchItemCreative.


        :return: The display_sizes of this ImageSearchItemCreative.
        :rtype: List[ImageSearchItemDisplaySize]
        """
        return self._display_sizes

    @display_sizes.setter
    def display_sizes(self, display_sizes):
        """Sets the display_sizes of this ImageSearchItemCreative.


        :param display_sizes: The display_sizes of this ImageSearchItemCreative.
        :type display_sizes: List[ImageSearchItemDisplaySize]
        """

        self._display_sizes = display_sizes

    @property
    def download_product(self):
        """Gets the download_product of this ImageSearchItemCreative.


        :return: The download_product of this ImageSearchItemCreative.
        :rtype: str
        """
        return self._download_product

    @download_product.setter
    def download_product(self, download_product):
        """Sets the download_product of this ImageSearchItemCreative.


        :param download_product: The download_product of this ImageSearchItemCreative.
        :type download_product: str
        """

        self._download_product = download_product

    @property
    def graphical_style(self):
        """Gets the graphical_style of this ImageSearchItemCreative.


        :return: The graphical_style of this ImageSearchItemCreative.
        :rtype: str
        """
        return self._graphical_style

    @graphical_style.setter
    def graphical_style(self, graphical_style):
        """Sets the graphical_style of this ImageSearchItemCreative.


        :param graphical_style: The graphical_style of this ImageSearchItemCreative.
        :type graphical_style: str
        """

        self._graphical_style = graphical_style

    @property
    def id(self):
        """Gets the id of this ImageSearchItemCreative.


        :return: The id of this ImageSearchItemCreative.
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this ImageSearchItemCreative.


        :param id: The id of this ImageSearchItemCreative.
        :type id: str
        """

        self._id = id

    @property
    def keywords(self):
        """Gets the keywords of this ImageSearchItemCreative.


        :return: The keywords of this ImageSearchItemCreative.
        :rtype: List[Keyword]
        """
        return self._keywords

    @keywords.setter
    def keywords(self, keywords):
        """Sets the keywords of this ImageSearchItemCreative.


        :param keywords: The keywords of this ImageSearchItemCreative.
        :type keywords: List[Keyword]
        """

        self._keywords = keywords

    @property
    def largest_downloads(self):
        """Gets the largest_downloads of this ImageSearchItemCreative.


        :return: The largest_downloads of this ImageSearchItemCreative.
        :rtype: List[Download]
        """
        return self._largest_downloads

    @largest_downloads.setter
    def largest_downloads(self, largest_downloads):
        """Sets the largest_downloads of this ImageSearchItemCreative.


        :param largest_downloads: The largest_downloads of this ImageSearchItemCreative.
        :type largest_downloads: List[Download]
        """

        self._largest_downloads = largest_downloads

    @property
    def license_model(self):
        """Gets the license_model of this ImageSearchItemCreative.


        :return: The license_model of this ImageSearchItemCreative.
        :rtype: str
        """
        return self._license_model

    @license_model.setter
    def license_model(self, license_model):
        """Sets the license_model of this ImageSearchItemCreative.


        :param license_model: The license_model of this ImageSearchItemCreative.
        :type license_model: str
        """

        self._license_model = license_model

    @property
    def max_dimensions(self):
        """Gets the max_dimensions of this ImageSearchItemCreative.


        :return: The max_dimensions of this ImageSearchItemCreative.
        :rtype: MaxDimensions
        """
        return self._max_dimensions

    @max_dimensions.setter
    def max_dimensions(self, max_dimensions):
        """Sets the max_dimensions of this ImageSearchItemCreative.


        :param max_dimensions: The max_dimensions of this ImageSearchItemCreative.
        :type max_dimensions: MaxDimensions
        """

        self._max_dimensions = max_dimensions

    @property
    def orientation(self):
        """Gets the orientation of this ImageSearchItemCreative.


        :return: The orientation of this ImageSearchItemCreative.
        :rtype: str
        """
        return self._orientation

    @orientation.setter
    def orientation(self, orientation):
        """Sets the orientation of this ImageSearchItemCreative.


        :param orientation: The orientation of this ImageSearchItemCreative.
        :type orientation: str
        """

        self._orientation = orientation

    @property
    def quality_rank(self):
        """Gets the quality_rank of this ImageSearchItemCreative.


        :return: The quality_rank of this ImageSearchItemCreative.
        :rtype: int
        """
        return self._quality_rank

    @quality_rank.setter
    def quality_rank(self, quality_rank):
        """Sets the quality_rank of this ImageSearchItemCreative.


        :param quality_rank: The quality_rank of this ImageSearchItemCreative.
        :type quality_rank: int
        """

        self._quality_rank = quality_rank

    @property
    def referral_destinations(self):
        """Gets the referral_destinations of this ImageSearchItemCreative.


        :return: The referral_destinations of this ImageSearchItemCreative.
        :rtype: List[ReferralDestination]
        """
        return self._referral_destinations

    @referral_destinations.setter
    def referral_destinations(self, referral_destinations):
        """Sets the referral_destinations of this ImageSearchItemCreative.


        :param referral_destinations: The referral_destinations of this ImageSearchItemCreative.
        :type referral_destinations: List[ReferralDestination]
        """

        self._referral_destinations = referral_destinations

    @property
    def title(self):
        """Gets the title of this ImageSearchItemCreative.


        :return: The title of this ImageSearchItemCreative.
        :rtype: str
        """
        return self._title

    @title.setter
    def title(self, title):
        """Sets the title of this ImageSearchItemCreative.


        :param title: The title of this ImageSearchItemCreative.
        :type title: str
        """

        self._title = title

    @property
    def uri_oembed(self):
        """Gets the uri_oembed of this ImageSearchItemCreative.


        :return: The uri_oembed of this ImageSearchItemCreative.
        :rtype: str
        """
        return self._uri_oembed

    @uri_oembed.setter
    def uri_oembed(self, uri_oembed):
        """Sets the uri_oembed of this ImageSearchItemCreative.


        :param uri_oembed: The uri_oembed of this ImageSearchItemCreative.
        :type uri_oembed: str
        """

        self._uri_oembed = uri_oembed
