# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.image_search_item_editorial import ImageSearchItemEditorial
from openapi_server.models.related_search import RelatedSearch
from openapi_server import util


class EditorialImageSearchResults(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, images: List[ImageSearchItemEditorial]=None, related_searches: List[RelatedSearch]=None, result_count: int=None):
        """EditorialImageSearchResults - a model defined in OpenAPI

        :param images: The images of this EditorialImageSearchResults.
        :param related_searches: The related_searches of this EditorialImageSearchResults.
        :param result_count: The result_count of this EditorialImageSearchResults.
        """
        self.openapi_types = {
            'images': List[ImageSearchItemEditorial],
            'related_searches': List[RelatedSearch],
            'result_count': int
        }

        self.attribute_map = {
            'images': 'images',
            'related_searches': 'related_searches',
            'result_count': 'result_count'
        }

        self._images = images
        self._related_searches = related_searches
        self._result_count = result_count

    @classmethod
    def from_dict(cls, dikt: dict) -> 'EditorialImageSearchResults':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The EditorialImageSearchResults of this EditorialImageSearchResults.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def images(self):
        """Gets the images of this EditorialImageSearchResults.


        :return: The images of this EditorialImageSearchResults.
        :rtype: List[ImageSearchItemEditorial]
        """
        return self._images

    @images.setter
    def images(self, images):
        """Sets the images of this EditorialImageSearchResults.


        :param images: The images of this EditorialImageSearchResults.
        :type images: List[ImageSearchItemEditorial]
        """

        self._images = images

    @property
    def related_searches(self):
        """Gets the related_searches of this EditorialImageSearchResults.


        :return: The related_searches of this EditorialImageSearchResults.
        :rtype: List[RelatedSearch]
        """
        return self._related_searches

    @related_searches.setter
    def related_searches(self, related_searches):
        """Sets the related_searches of this EditorialImageSearchResults.


        :param related_searches: The related_searches of this EditorialImageSearchResults.
        :type related_searches: List[RelatedSearch]
        """

        self._related_searches = related_searches

    @property
    def result_count(self):
        """Gets the result_count of this EditorialImageSearchResults.


        :return: The result_count of this EditorialImageSearchResults.
        :rtype: int
        """
        return self._result_count

    @result_count.setter
    def result_count(self, result_count):
        """Sets the result_count of this EditorialImageSearchResults.


        :param result_count: The result_count of this EditorialImageSearchResults.
        :type result_count: int
        """

        self._result_count = result_count
