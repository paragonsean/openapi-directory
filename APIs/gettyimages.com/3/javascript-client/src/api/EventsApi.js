/**
 * Getty Images
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 3
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import EventDetailFieldValues from '../model/EventDetailFieldValues';

/**
* Events service.
* @module api/EventsApi
* @version 3
*/
export default class EventsApi {

    /**
    * Constructs a new EventsApi. 
    * @alias module:api/EventsApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the v3EventsGet operation.
     * @callback module:api/EventsApi~v3EventsGetCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get metadata for multiple events
     * This endpoint returns the detailed event metadata for all specified events. Getty Images news, sports and entertainment photographers and videographers cover editorially relevant events occurring around the world.  All images or video clips produced in association with  an event, are assigned the same EventID. EventIDs are part of the meta-data returned in SearchForImages Results. Only content  produced under a Getty Images brand name (Getty Images News, Getty Images Sports, Getty Images Entertainment, Film Magic, Wire Image)  will be consistently assigned an EventID. The Event framework may also be used to group similar content, such as  \"Hats from the Royal Wedding\" or \"Odd-ballOffbeat images of the week\".   You'll need an API key and access token to use this resource. 
     * @param {Object} opts Optional parameters
     * @param {String} [acceptLanguage] Provide a header to specify the language of result values. Supported values: cs (iStock only), de, en-GB, en-US, es, fi (iStock only), fr, hu (iStock only), id (iStock only), it, ja, ko (creative assets only), nl, pl (creative assets only), pt-BR, pt-PT, ro (iStock only), ru (creative assets only), sv, th (iStock only), tr, uk (iStock only), vi (iStock only), zh-HK (creative assets only).
     * @param {Array.<Number>} [ids] A comma separated list of event ids.
     * @param {Array.<module:model/EventDetailFieldValues>} [fields] A comma separated list of fields to return in the response.
     * @param {module:api/EventsApi~v3EventsGetCallback} callback The callback function, accepting three arguments: error, data, response
     */
    v3EventsGet(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'ids': this.apiClient.buildCollectionParam(opts['ids'], 'csv'),
        'fields': this.apiClient.buildCollectionParam(opts['fields'], 'csv')
      };
      let headerParams = {
        'Accept-Language': opts['acceptLanguage']
      };
      let formParams = {
      };

      let authNames = ['OAuth2', 'OAuth2', 'OAuth2', 'OAuth2', 'Api-Key'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/v3/events', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the v3EventsIdGet operation.
     * @callback module:api/EventsApi~v3EventsIdGetCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get metadata for a single event
     * This endpoint returns the detailed event metadata for a specified event. Getty Images news, sports and entertainment  photographers and videographers cover editorially relevant events occurring around the world.   All images or video clips produced in association with an event, are assigned the same EventID.  EventIDs are part of the meta-data returned in SearchForImages Results. Only content produced under a Getty Images  brand name (Getty Images News, Getty Images Sports, Getty Images Entertainment, Film Magic, Wire Image) will be  consistently assigned an EventID. The Event framework may also be used to group similar content, such as  \"Hats from the Royal Wedding\" or \"Odd-ballOffbeat images of the week\".   You'll need an API key and access token to use this resource. 
     * @param {Number} id An event id.
     * @param {Object} opts Optional parameters
     * @param {String} [acceptLanguage] Provide a header to specify the language of result values. Supported values: cs (iStock only), de, en-GB, en-US, es, fi (iStock only), fr, hu (iStock only), id (iStock only), it, ja, ko (creative assets only), nl, pl (creative assets only), pt-BR, pt-PT, ro (iStock only), ru (creative assets only), sv, th (iStock only), tr, uk (iStock only), vi (iStock only), zh-HK (creative assets only).
     * @param {Array.<module:model/EventDetailFieldValues>} [fields] A comma separated list of fields to return in the response.
     * @param {module:api/EventsApi~v3EventsIdGetCallback} callback The callback function, accepting three arguments: error, data, response
     */
    v3EventsIdGet(id, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling v3EventsIdGet");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
        'fields': this.apiClient.buildCollectionParam(opts['fields'], 'csv')
      };
      let headerParams = {
        'Accept-Language': opts['acceptLanguage']
      };
      let formParams = {
      };

      let authNames = ['OAuth2', 'OAuth2', 'OAuth2', 'OAuth2', 'Api-Key'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/v3/events/{id}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
