/**
 * Getty Images
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 3
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The Download model module.
 * @module model/Download
 * @version 3
 */
class Download {
    /**
     * Constructs a new <code>Download</code>.
     * @alias module:model/Download
     */
    constructor() { 
        
        Download.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>Download</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/Download} obj Optional instance to populate.
     * @return {module:model/Download} The populated <code>Download</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new Download();

            if (data.hasOwnProperty('agreement_name')) {
                obj['agreement_name'] = ApiClient.convertToType(data['agreement_name'], 'String');
            }
            if (data.hasOwnProperty('product_id')) {
                obj['product_id'] = ApiClient.convertToType(data['product_id'], 'String');
            }
            if (data.hasOwnProperty('product_type')) {
                obj['product_type'] = ApiClient.convertToType(data['product_type'], 'String');
            }
            if (data.hasOwnProperty('uri')) {
                obj['uri'] = ApiClient.convertToType(data['uri'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>Download</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>Download</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['agreement_name'] && !(typeof data['agreement_name'] === 'string' || data['agreement_name'] instanceof String)) {
            throw new Error("Expected the field `agreement_name` to be a primitive type in the JSON string but got " + data['agreement_name']);
        }
        // ensure the json data is a string
        if (data['product_id'] && !(typeof data['product_id'] === 'string' || data['product_id'] instanceof String)) {
            throw new Error("Expected the field `product_id` to be a primitive type in the JSON string but got " + data['product_id']);
        }
        // ensure the json data is a string
        if (data['product_type'] && !(typeof data['product_type'] === 'string' || data['product_type'] instanceof String)) {
            throw new Error("Expected the field `product_type` to be a primitive type in the JSON string but got " + data['product_type']);
        }
        // ensure the json data is a string
        if (data['uri'] && !(typeof data['uri'] === 'string' || data['uri'] instanceof String)) {
            throw new Error("Expected the field `uri` to be a primitive type in the JSON string but got " + data['uri']);
        }

        return true;
    }


}



/**
 * @member {String} agreement_name
 */
Download.prototype['agreement_name'] = undefined;

/**
 * @member {String} product_id
 */
Download.prototype['product_id'] = undefined;

/**
 * @member {String} product_type
 */
Download.prototype['product_type'] = undefined;

/**
 * @member {String} uri
 */
Download.prototype['uri'] = undefined;






export default Download;

