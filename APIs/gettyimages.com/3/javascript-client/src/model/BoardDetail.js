/**
 * Getty Images
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 3
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import Asset from './Asset';
import BoardPermissions from './BoardPermissions';
import Links from './Links';

/**
 * The BoardDetail model module.
 * @module model/BoardDetail
 * @version 3
 */
class BoardDetail {
    /**
     * Constructs a new <code>BoardDetail</code>.
     * @alias module:model/BoardDetail
     */
    constructor() { 
        
        BoardDetail.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>BoardDetail</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/BoardDetail} obj Optional instance to populate.
     * @return {module:model/BoardDetail} The populated <code>BoardDetail</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new BoardDetail();

            if (data.hasOwnProperty('asset_count')) {
                obj['asset_count'] = ApiClient.convertToType(data['asset_count'], 'Number');
            }
            if (data.hasOwnProperty('assets')) {
                obj['assets'] = ApiClient.convertToType(data['assets'], [Asset]);
            }
            if (data.hasOwnProperty('comment_count')) {
                obj['comment_count'] = ApiClient.convertToType(data['comment_count'], 'Number');
            }
            if (data.hasOwnProperty('date_created')) {
                obj['date_created'] = ApiClient.convertToType(data['date_created'], 'Date');
            }
            if (data.hasOwnProperty('date_last_updated')) {
                obj['date_last_updated'] = ApiClient.convertToType(data['date_last_updated'], 'Date');
            }
            if (data.hasOwnProperty('description')) {
                obj['description'] = ApiClient.convertToType(data['description'], 'String');
            }
            if (data.hasOwnProperty('id')) {
                obj['id'] = ApiClient.convertToType(data['id'], 'String');
            }
            if (data.hasOwnProperty('links')) {
                obj['links'] = Links.constructFromObject(data['links']);
            }
            if (data.hasOwnProperty('name')) {
                obj['name'] = ApiClient.convertToType(data['name'], 'String');
            }
            if (data.hasOwnProperty('permissions')) {
                obj['permissions'] = BoardPermissions.constructFromObject(data['permissions']);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>BoardDetail</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>BoardDetail</code>.
     */
    static validateJSON(data) {
        if (data['assets']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['assets'])) {
                throw new Error("Expected the field `assets` to be an array in the JSON data but got " + data['assets']);
            }
            // validate the optional field `assets` (array)
            for (const item of data['assets']) {
                Asset.validateJSON(item);
            };
        }
        // ensure the json data is a string
        if (data['description'] && !(typeof data['description'] === 'string' || data['description'] instanceof String)) {
            throw new Error("Expected the field `description` to be a primitive type in the JSON string but got " + data['description']);
        }
        // ensure the json data is a string
        if (data['id'] && !(typeof data['id'] === 'string' || data['id'] instanceof String)) {
            throw new Error("Expected the field `id` to be a primitive type in the JSON string but got " + data['id']);
        }
        // validate the optional field `links`
        if (data['links']) { // data not null
          Links.validateJSON(data['links']);
        }
        // ensure the json data is a string
        if (data['name'] && !(typeof data['name'] === 'string' || data['name'] instanceof String)) {
            throw new Error("Expected the field `name` to be a primitive type in the JSON string but got " + data['name']);
        }
        // validate the optional field `permissions`
        if (data['permissions']) { // data not null
          BoardPermissions.validateJSON(data['permissions']);
        }

        return true;
    }


}



/**
 * @member {Number} asset_count
 */
BoardDetail.prototype['asset_count'] = undefined;

/**
 * @member {Array.<module:model/Asset>} assets
 */
BoardDetail.prototype['assets'] = undefined;

/**
 * @member {Number} comment_count
 */
BoardDetail.prototype['comment_count'] = undefined;

/**
 * @member {Date} date_created
 */
BoardDetail.prototype['date_created'] = undefined;

/**
 * @member {Date} date_last_updated
 */
BoardDetail.prototype['date_last_updated'] = undefined;

/**
 * @member {String} description
 */
BoardDetail.prototype['description'] = undefined;

/**
 * @member {String} id
 */
BoardDetail.prototype['id'] = undefined;

/**
 * @member {module:model/Links} links
 */
BoardDetail.prototype['links'] = undefined;

/**
 * @member {String} name
 */
BoardDetail.prototype['name'] = undefined;

/**
 * @member {module:model/BoardPermissions} permissions
 */
BoardDetail.prototype['permissions'] = undefined;






export default BoardDetail;

