/**
 * Getty Images
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 3
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import AllowedUse from './AllowedUse';
import Download from './Download';
import ImageSearchItemDisplaySize from './ImageSearchItemDisplaySize';
import Keyword from './Keyword';
import MaxDimensions from './MaxDimensions';
import ReferralDestination from './ReferralDestination';

/**
 * The ImageSearchItemCreative model module.
 * @module model/ImageSearchItemCreative
 * @version 3
 */
class ImageSearchItemCreative {
    /**
     * Constructs a new <code>ImageSearchItemCreative</code>.
     * @alias module:model/ImageSearchItemCreative
     */
    constructor() { 
        
        ImageSearchItemCreative.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>ImageSearchItemCreative</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/ImageSearchItemCreative} obj Optional instance to populate.
     * @return {module:model/ImageSearchItemCreative} The populated <code>ImageSearchItemCreative</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new ImageSearchItemCreative();

            if (data.hasOwnProperty('allowed_use')) {
                obj['allowed_use'] = AllowedUse.constructFromObject(data['allowed_use']);
            }
            if (data.hasOwnProperty('alternative_ids')) {
                obj['alternative_ids'] = ApiClient.convertToType(data['alternative_ids'], {'String': 'String'});
            }
            if (data.hasOwnProperty('artist')) {
                obj['artist'] = ApiClient.convertToType(data['artist'], 'String');
            }
            if (data.hasOwnProperty('asset_family')) {
                obj['asset_family'] = ApiClient.convertToType(data['asset_family'], 'String');
            }
            if (data.hasOwnProperty('call_for_image')) {
                obj['call_for_image'] = ApiClient.convertToType(data['call_for_image'], 'Boolean');
            }
            if (data.hasOwnProperty('caption')) {
                obj['caption'] = ApiClient.convertToType(data['caption'], 'String');
            }
            if (data.hasOwnProperty('collection_code')) {
                obj['collection_code'] = ApiClient.convertToType(data['collection_code'], 'String');
            }
            if (data.hasOwnProperty('collection_id')) {
                obj['collection_id'] = ApiClient.convertToType(data['collection_id'], 'Number');
            }
            if (data.hasOwnProperty('collection_name')) {
                obj['collection_name'] = ApiClient.convertToType(data['collection_name'], 'String');
            }
            if (data.hasOwnProperty('color_type')) {
                obj['color_type'] = ApiClient.convertToType(data['color_type'], 'String');
            }
            if (data.hasOwnProperty('copyright')) {
                obj['copyright'] = ApiClient.convertToType(data['copyright'], 'String');
            }
            if (data.hasOwnProperty('date_camera_shot')) {
                obj['date_camera_shot'] = ApiClient.convertToType(data['date_camera_shot'], 'Date');
            }
            if (data.hasOwnProperty('date_created')) {
                obj['date_created'] = ApiClient.convertToType(data['date_created'], 'Date');
            }
            if (data.hasOwnProperty('display_sizes')) {
                obj['display_sizes'] = ApiClient.convertToType(data['display_sizes'], [ImageSearchItemDisplaySize]);
            }
            if (data.hasOwnProperty('download_product')) {
                obj['download_product'] = ApiClient.convertToType(data['download_product'], 'String');
            }
            if (data.hasOwnProperty('graphical_style')) {
                obj['graphical_style'] = ApiClient.convertToType(data['graphical_style'], 'String');
            }
            if (data.hasOwnProperty('id')) {
                obj['id'] = ApiClient.convertToType(data['id'], 'String');
            }
            if (data.hasOwnProperty('keywords')) {
                obj['keywords'] = ApiClient.convertToType(data['keywords'], [Keyword]);
            }
            if (data.hasOwnProperty('largest_downloads')) {
                obj['largest_downloads'] = ApiClient.convertToType(data['largest_downloads'], [Download]);
            }
            if (data.hasOwnProperty('license_model')) {
                obj['license_model'] = ApiClient.convertToType(data['license_model'], 'String');
            }
            if (data.hasOwnProperty('max_dimensions')) {
                obj['max_dimensions'] = MaxDimensions.constructFromObject(data['max_dimensions']);
            }
            if (data.hasOwnProperty('orientation')) {
                obj['orientation'] = ApiClient.convertToType(data['orientation'], 'String');
            }
            if (data.hasOwnProperty('quality_rank')) {
                obj['quality_rank'] = ApiClient.convertToType(data['quality_rank'], 'Number');
            }
            if (data.hasOwnProperty('referral_destinations')) {
                obj['referral_destinations'] = ApiClient.convertToType(data['referral_destinations'], [ReferralDestination]);
            }
            if (data.hasOwnProperty('title')) {
                obj['title'] = ApiClient.convertToType(data['title'], 'String');
            }
            if (data.hasOwnProperty('uri_oembed')) {
                obj['uri_oembed'] = ApiClient.convertToType(data['uri_oembed'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>ImageSearchItemCreative</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>ImageSearchItemCreative</code>.
     */
    static validateJSON(data) {
        // validate the optional field `allowed_use`
        if (data['allowed_use']) { // data not null
          AllowedUse.validateJSON(data['allowed_use']);
        }
        // ensure the json data is a string
        if (data['artist'] && !(typeof data['artist'] === 'string' || data['artist'] instanceof String)) {
            throw new Error("Expected the field `artist` to be a primitive type in the JSON string but got " + data['artist']);
        }
        // ensure the json data is a string
        if (data['asset_family'] && !(typeof data['asset_family'] === 'string' || data['asset_family'] instanceof String)) {
            throw new Error("Expected the field `asset_family` to be a primitive type in the JSON string but got " + data['asset_family']);
        }
        // ensure the json data is a string
        if (data['caption'] && !(typeof data['caption'] === 'string' || data['caption'] instanceof String)) {
            throw new Error("Expected the field `caption` to be a primitive type in the JSON string but got " + data['caption']);
        }
        // ensure the json data is a string
        if (data['collection_code'] && !(typeof data['collection_code'] === 'string' || data['collection_code'] instanceof String)) {
            throw new Error("Expected the field `collection_code` to be a primitive type in the JSON string but got " + data['collection_code']);
        }
        // ensure the json data is a string
        if (data['collection_name'] && !(typeof data['collection_name'] === 'string' || data['collection_name'] instanceof String)) {
            throw new Error("Expected the field `collection_name` to be a primitive type in the JSON string but got " + data['collection_name']);
        }
        // ensure the json data is a string
        if (data['color_type'] && !(typeof data['color_type'] === 'string' || data['color_type'] instanceof String)) {
            throw new Error("Expected the field `color_type` to be a primitive type in the JSON string but got " + data['color_type']);
        }
        // ensure the json data is a string
        if (data['copyright'] && !(typeof data['copyright'] === 'string' || data['copyright'] instanceof String)) {
            throw new Error("Expected the field `copyright` to be a primitive type in the JSON string but got " + data['copyright']);
        }
        if (data['display_sizes']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['display_sizes'])) {
                throw new Error("Expected the field `display_sizes` to be an array in the JSON data but got " + data['display_sizes']);
            }
            // validate the optional field `display_sizes` (array)
            for (const item of data['display_sizes']) {
                ImageSearchItemDisplaySize.validateJSON(item);
            };
        }
        // ensure the json data is a string
        if (data['download_product'] && !(typeof data['download_product'] === 'string' || data['download_product'] instanceof String)) {
            throw new Error("Expected the field `download_product` to be a primitive type in the JSON string but got " + data['download_product']);
        }
        // ensure the json data is a string
        if (data['graphical_style'] && !(typeof data['graphical_style'] === 'string' || data['graphical_style'] instanceof String)) {
            throw new Error("Expected the field `graphical_style` to be a primitive type in the JSON string but got " + data['graphical_style']);
        }
        // ensure the json data is a string
        if (data['id'] && !(typeof data['id'] === 'string' || data['id'] instanceof String)) {
            throw new Error("Expected the field `id` to be a primitive type in the JSON string but got " + data['id']);
        }
        if (data['keywords']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['keywords'])) {
                throw new Error("Expected the field `keywords` to be an array in the JSON data but got " + data['keywords']);
            }
            // validate the optional field `keywords` (array)
            for (const item of data['keywords']) {
                Keyword.validateJSON(item);
            };
        }
        if (data['largest_downloads']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['largest_downloads'])) {
                throw new Error("Expected the field `largest_downloads` to be an array in the JSON data but got " + data['largest_downloads']);
            }
            // validate the optional field `largest_downloads` (array)
            for (const item of data['largest_downloads']) {
                Download.validateJSON(item);
            };
        }
        // ensure the json data is a string
        if (data['license_model'] && !(typeof data['license_model'] === 'string' || data['license_model'] instanceof String)) {
            throw new Error("Expected the field `license_model` to be a primitive type in the JSON string but got " + data['license_model']);
        }
        // validate the optional field `max_dimensions`
        if (data['max_dimensions']) { // data not null
          MaxDimensions.validateJSON(data['max_dimensions']);
        }
        // ensure the json data is a string
        if (data['orientation'] && !(typeof data['orientation'] === 'string' || data['orientation'] instanceof String)) {
            throw new Error("Expected the field `orientation` to be a primitive type in the JSON string but got " + data['orientation']);
        }
        if (data['referral_destinations']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['referral_destinations'])) {
                throw new Error("Expected the field `referral_destinations` to be an array in the JSON data but got " + data['referral_destinations']);
            }
            // validate the optional field `referral_destinations` (array)
            for (const item of data['referral_destinations']) {
                ReferralDestination.validateJSON(item);
            };
        }
        // ensure the json data is a string
        if (data['title'] && !(typeof data['title'] === 'string' || data['title'] instanceof String)) {
            throw new Error("Expected the field `title` to be a primitive type in the JSON string but got " + data['title']);
        }
        // ensure the json data is a string
        if (data['uri_oembed'] && !(typeof data['uri_oembed'] === 'string' || data['uri_oembed'] instanceof String)) {
            throw new Error("Expected the field `uri_oembed` to be a primitive type in the JSON string but got " + data['uri_oembed']);
        }

        return true;
    }


}



/**
 * @member {module:model/AllowedUse} allowed_use
 */
ImageSearchItemCreative.prototype['allowed_use'] = undefined;

/**
 * @member {Object.<String, String>} alternative_ids
 */
ImageSearchItemCreative.prototype['alternative_ids'] = undefined;

/**
 * @member {String} artist
 */
ImageSearchItemCreative.prototype['artist'] = undefined;

/**
 * @member {String} asset_family
 */
ImageSearchItemCreative.prototype['asset_family'] = undefined;

/**
 * @member {Boolean} call_for_image
 */
ImageSearchItemCreative.prototype['call_for_image'] = undefined;

/**
 * @member {String} caption
 */
ImageSearchItemCreative.prototype['caption'] = undefined;

/**
 * @member {String} collection_code
 */
ImageSearchItemCreative.prototype['collection_code'] = undefined;

/**
 * @member {Number} collection_id
 */
ImageSearchItemCreative.prototype['collection_id'] = undefined;

/**
 * @member {String} collection_name
 */
ImageSearchItemCreative.prototype['collection_name'] = undefined;

/**
 * @member {String} color_type
 */
ImageSearchItemCreative.prototype['color_type'] = undefined;

/**
 * @member {String} copyright
 */
ImageSearchItemCreative.prototype['copyright'] = undefined;

/**
 * @member {Date} date_camera_shot
 */
ImageSearchItemCreative.prototype['date_camera_shot'] = undefined;

/**
 * @member {Date} date_created
 */
ImageSearchItemCreative.prototype['date_created'] = undefined;

/**
 * @member {Array.<module:model/ImageSearchItemDisplaySize>} display_sizes
 */
ImageSearchItemCreative.prototype['display_sizes'] = undefined;

/**
 * @member {String} download_product
 */
ImageSearchItemCreative.prototype['download_product'] = undefined;

/**
 * @member {String} graphical_style
 */
ImageSearchItemCreative.prototype['graphical_style'] = undefined;

/**
 * @member {String} id
 */
ImageSearchItemCreative.prototype['id'] = undefined;

/**
 * @member {Array.<module:model/Keyword>} keywords
 */
ImageSearchItemCreative.prototype['keywords'] = undefined;

/**
 * @member {Array.<module:model/Download>} largest_downloads
 */
ImageSearchItemCreative.prototype['largest_downloads'] = undefined;

/**
 * @member {String} license_model
 */
ImageSearchItemCreative.prototype['license_model'] = undefined;

/**
 * @member {module:model/MaxDimensions} max_dimensions
 */
ImageSearchItemCreative.prototype['max_dimensions'] = undefined;

/**
 * @member {String} orientation
 */
ImageSearchItemCreative.prototype['orientation'] = undefined;

/**
 * @member {Number} quality_rank
 */
ImageSearchItemCreative.prototype['quality_rank'] = undefined;

/**
 * @member {Array.<module:model/ReferralDestination>} referral_destinations
 */
ImageSearchItemCreative.prototype['referral_destinations'] = undefined;

/**
 * @member {String} title
 */
ImageSearchItemCreative.prototype['title'] = undefined;

/**
 * @member {String} uri_oembed
 */
ImageSearchItemCreative.prototype['uri_oembed'] = undefined;






export default ImageSearchItemCreative;

