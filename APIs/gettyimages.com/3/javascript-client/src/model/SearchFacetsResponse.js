/**
 * Getty Images
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 3
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import Artist from './Artist';
import Entertainment from './Entertainment';
import FacetEvent from './FacetEvent';
import Location from './Location';
import SpecificPeople from './SpecificPeople';

/**
 * The SearchFacetsResponse model module.
 * @module model/SearchFacetsResponse
 * @version 3
 */
class SearchFacetsResponse {
    /**
     * Constructs a new <code>SearchFacetsResponse</code>.
     * @alias module:model/SearchFacetsResponse
     */
    constructor() { 
        
        SearchFacetsResponse.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>SearchFacetsResponse</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/SearchFacetsResponse} obj Optional instance to populate.
     * @return {module:model/SearchFacetsResponse} The populated <code>SearchFacetsResponse</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new SearchFacetsResponse();

            if (data.hasOwnProperty('artists')) {
                obj['artists'] = ApiClient.convertToType(data['artists'], [Artist]);
            }
            if (data.hasOwnProperty('entertainment')) {
                obj['entertainment'] = ApiClient.convertToType(data['entertainment'], [Entertainment]);
            }
            if (data.hasOwnProperty('events')) {
                obj['events'] = ApiClient.convertToType(data['events'], [FacetEvent]);
            }
            if (data.hasOwnProperty('locations')) {
                obj['locations'] = ApiClient.convertToType(data['locations'], [Location]);
            }
            if (data.hasOwnProperty('specific_people')) {
                obj['specific_people'] = ApiClient.convertToType(data['specific_people'], [SpecificPeople]);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>SearchFacetsResponse</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>SearchFacetsResponse</code>.
     */
    static validateJSON(data) {
        if (data['artists']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['artists'])) {
                throw new Error("Expected the field `artists` to be an array in the JSON data but got " + data['artists']);
            }
            // validate the optional field `artists` (array)
            for (const item of data['artists']) {
                Artist.validateJSON(item);
            };
        }
        if (data['entertainment']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['entertainment'])) {
                throw new Error("Expected the field `entertainment` to be an array in the JSON data but got " + data['entertainment']);
            }
            // validate the optional field `entertainment` (array)
            for (const item of data['entertainment']) {
                Entertainment.validateJSON(item);
            };
        }
        if (data['events']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['events'])) {
                throw new Error("Expected the field `events` to be an array in the JSON data but got " + data['events']);
            }
            // validate the optional field `events` (array)
            for (const item of data['events']) {
                FacetEvent.validateJSON(item);
            };
        }
        if (data['locations']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['locations'])) {
                throw new Error("Expected the field `locations` to be an array in the JSON data but got " + data['locations']);
            }
            // validate the optional field `locations` (array)
            for (const item of data['locations']) {
                Location.validateJSON(item);
            };
        }
        if (data['specific_people']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['specific_people'])) {
                throw new Error("Expected the field `specific_people` to be an array in the JSON data but got " + data['specific_people']);
            }
            // validate the optional field `specific_people` (array)
            for (const item of data['specific_people']) {
                SpecificPeople.validateJSON(item);
            };
        }

        return true;
    }


}



/**
 * @member {Array.<module:model/Artist>} artists
 */
SearchFacetsResponse.prototype['artists'] = undefined;

/**
 * @member {Array.<module:model/Entertainment>} entertainment
 */
SearchFacetsResponse.prototype['entertainment'] = undefined;

/**
 * @member {Array.<module:model/FacetEvent>} events
 */
SearchFacetsResponse.prototype['events'] = undefined;

/**
 * @member {Array.<module:model/Location>} locations
 */
SearchFacetsResponse.prototype['locations'] = undefined;

/**
 * @member {Array.<module:model/SpecificPeople>} specific_people
 */
SearchFacetsResponse.prototype['specific_people'] = undefined;






export default SearchFacetsResponse;

