/*
 * Getty Images
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 3
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import org.openapitools.jackson.nullable.JsonNullable;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * AffiliateVideoUrls
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T10:09:49.731753-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class AffiliateVideoUrls {
  public static final String SERIALIZED_NAME_LARGE_MOTION = "large_motion";
  @SerializedName(SERIALIZED_NAME_LARGE_MOTION)
  private String largeMotion;

  public static final String SERIALIZED_NAME_LARGE_STILL = "large_still";
  @SerializedName(SERIALIZED_NAME_LARGE_STILL)
  private String largeStill;

  public static final String SERIALIZED_NAME_MEDIUM_STILL = "medium_still";
  @SerializedName(SERIALIZED_NAME_MEDIUM_STILL)
  private String mediumStill;

  public static final String SERIALIZED_NAME_SMALL_MOTION = "small_motion";
  @SerializedName(SERIALIZED_NAME_SMALL_MOTION)
  private String smallMotion;

  public static final String SERIALIZED_NAME_SMALL_STILL = "small_still";
  @SerializedName(SERIALIZED_NAME_SMALL_STILL)
  private String smallStill;

  public AffiliateVideoUrls() {
  }

  public AffiliateVideoUrls largeMotion(String largeMotion) {
    this.largeMotion = largeMotion;
    return this;
  }

  /**
   * Get largeMotion
   * @return largeMotion
   */
  @javax.annotation.Nullable
  public String getLargeMotion() {
    return largeMotion;
  }

  public void setLargeMotion(String largeMotion) {
    this.largeMotion = largeMotion;
  }


  public AffiliateVideoUrls largeStill(String largeStill) {
    this.largeStill = largeStill;
    return this;
  }

  /**
   * Get largeStill
   * @return largeStill
   */
  @javax.annotation.Nullable
  public String getLargeStill() {
    return largeStill;
  }

  public void setLargeStill(String largeStill) {
    this.largeStill = largeStill;
  }


  public AffiliateVideoUrls mediumStill(String mediumStill) {
    this.mediumStill = mediumStill;
    return this;
  }

  /**
   * Get mediumStill
   * @return mediumStill
   */
  @javax.annotation.Nullable
  public String getMediumStill() {
    return mediumStill;
  }

  public void setMediumStill(String mediumStill) {
    this.mediumStill = mediumStill;
  }


  public AffiliateVideoUrls smallMotion(String smallMotion) {
    this.smallMotion = smallMotion;
    return this;
  }

  /**
   * Get smallMotion
   * @return smallMotion
   */
  @javax.annotation.Nullable
  public String getSmallMotion() {
    return smallMotion;
  }

  public void setSmallMotion(String smallMotion) {
    this.smallMotion = smallMotion;
  }


  public AffiliateVideoUrls smallStill(String smallStill) {
    this.smallStill = smallStill;
    return this;
  }

  /**
   * Get smallStill
   * @return smallStill
   */
  @javax.annotation.Nullable
  public String getSmallStill() {
    return smallStill;
  }

  public void setSmallStill(String smallStill) {
    this.smallStill = smallStill;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    AffiliateVideoUrls affiliateVideoUrls = (AffiliateVideoUrls) o;
    return Objects.equals(this.largeMotion, affiliateVideoUrls.largeMotion) &&
        Objects.equals(this.largeStill, affiliateVideoUrls.largeStill) &&
        Objects.equals(this.mediumStill, affiliateVideoUrls.mediumStill) &&
        Objects.equals(this.smallMotion, affiliateVideoUrls.smallMotion) &&
        Objects.equals(this.smallStill, affiliateVideoUrls.smallStill);
  }

  private static <T> boolean equalsNullable(JsonNullable<T> a, JsonNullable<T> b) {
    return a == b || (a != null && b != null && a.isPresent() && b.isPresent() && Objects.deepEquals(a.get(), b.get()));
  }

  @Override
  public int hashCode() {
    return Objects.hash(largeMotion, largeStill, mediumStill, smallMotion, smallStill);
  }

  private static <T> int hashCodeNullable(JsonNullable<T> a) {
    if (a == null) {
      return 1;
    }
    return a.isPresent() ? Arrays.deepHashCode(new Object[]{a.get()}) : 31;
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class AffiliateVideoUrls {\n");
    sb.append("    largeMotion: ").append(toIndentedString(largeMotion)).append("\n");
    sb.append("    largeStill: ").append(toIndentedString(largeStill)).append("\n");
    sb.append("    mediumStill: ").append(toIndentedString(mediumStill)).append("\n");
    sb.append("    smallMotion: ").append(toIndentedString(smallMotion)).append("\n");
    sb.append("    smallStill: ").append(toIndentedString(smallStill)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("large_motion");
    openapiFields.add("large_still");
    openapiFields.add("medium_still");
    openapiFields.add("small_motion");
    openapiFields.add("small_still");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to AffiliateVideoUrls
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!AffiliateVideoUrls.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in AffiliateVideoUrls is not found in the empty JSON string", AffiliateVideoUrls.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!AffiliateVideoUrls.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `AffiliateVideoUrls` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("large_motion") != null && !jsonObj.get("large_motion").isJsonNull()) && !jsonObj.get("large_motion").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `large_motion` to be a primitive type in the JSON string but got `%s`", jsonObj.get("large_motion").toString()));
      }
      if ((jsonObj.get("large_still") != null && !jsonObj.get("large_still").isJsonNull()) && !jsonObj.get("large_still").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `large_still` to be a primitive type in the JSON string but got `%s`", jsonObj.get("large_still").toString()));
      }
      if ((jsonObj.get("medium_still") != null && !jsonObj.get("medium_still").isJsonNull()) && !jsonObj.get("medium_still").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `medium_still` to be a primitive type in the JSON string but got `%s`", jsonObj.get("medium_still").toString()));
      }
      if ((jsonObj.get("small_motion") != null && !jsonObj.get("small_motion").isJsonNull()) && !jsonObj.get("small_motion").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `small_motion` to be a primitive type in the JSON string but got `%s`", jsonObj.get("small_motion").toString()));
      }
      if ((jsonObj.get("small_still") != null && !jsonObj.get("small_still").isJsonNull()) && !jsonObj.get("small_still").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `small_still` to be a primitive type in the JSON string but got `%s`", jsonObj.get("small_still").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!AffiliateVideoUrls.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'AffiliateVideoUrls' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<AffiliateVideoUrls> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(AffiliateVideoUrls.class));

       return (TypeAdapter<T>) new TypeAdapter<AffiliateVideoUrls>() {
           @Override
           public void write(JsonWriter out, AffiliateVideoUrls value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public AffiliateVideoUrls read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of AffiliateVideoUrls given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of AffiliateVideoUrls
   * @throws IOException if the JSON string is invalid with respect to AffiliateVideoUrls
   */
  public static AffiliateVideoUrls fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, AffiliateVideoUrls.class);
  }

  /**
   * Convert an instance of AffiliateVideoUrls to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

