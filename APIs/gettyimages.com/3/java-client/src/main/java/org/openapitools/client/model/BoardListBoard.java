/*
 * Getty Images
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 3
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.time.OffsetDateTime;
import java.util.Arrays;
import org.openapitools.client.model.Asset;
import org.openapitools.jackson.nullable.JsonNullable;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * BoardListBoard
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T10:09:49.731753-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class BoardListBoard {
  public static final String SERIALIZED_NAME_ASSET_COUNT = "asset_count";
  @SerializedName(SERIALIZED_NAME_ASSET_COUNT)
  private Integer assetCount;

  public static final String SERIALIZED_NAME_BOARD_RELATIONSHIP = "board_relationship";
  @SerializedName(SERIALIZED_NAME_BOARD_RELATIONSHIP)
  private String boardRelationship;

  public static final String SERIALIZED_NAME_DATE_CREATED = "date_created";
  @SerializedName(SERIALIZED_NAME_DATE_CREATED)
  private OffsetDateTime dateCreated;

  public static final String SERIALIZED_NAME_DATE_LAST_UPDATED = "date_last_updated";
  @SerializedName(SERIALIZED_NAME_DATE_LAST_UPDATED)
  private OffsetDateTime dateLastUpdated;

  public static final String SERIALIZED_NAME_DESCRIPTION = "description";
  @SerializedName(SERIALIZED_NAME_DESCRIPTION)
  private String description;

  public static final String SERIALIZED_NAME_HERO_ASSET = "hero_asset";
  @SerializedName(SERIALIZED_NAME_HERO_ASSET)
  private Asset heroAsset;

  public static final String SERIALIZED_NAME_ID = "id";
  @SerializedName(SERIALIZED_NAME_ID)
  private String id;

  public static final String SERIALIZED_NAME_NAME = "name";
  @SerializedName(SERIALIZED_NAME_NAME)
  private String name;

  public BoardListBoard() {
  }

  public BoardListBoard assetCount(Integer assetCount) {
    this.assetCount = assetCount;
    return this;
  }

  /**
   * Get assetCount
   * @return assetCount
   */
  @javax.annotation.Nullable
  public Integer getAssetCount() {
    return assetCount;
  }

  public void setAssetCount(Integer assetCount) {
    this.assetCount = assetCount;
  }


  public BoardListBoard boardRelationship(String boardRelationship) {
    this.boardRelationship = boardRelationship;
    return this;
  }

  /**
   * Get boardRelationship
   * @return boardRelationship
   */
  @javax.annotation.Nullable
  public String getBoardRelationship() {
    return boardRelationship;
  }

  public void setBoardRelationship(String boardRelationship) {
    this.boardRelationship = boardRelationship;
  }


  public BoardListBoard dateCreated(OffsetDateTime dateCreated) {
    this.dateCreated = dateCreated;
    return this;
  }

  /**
   * Get dateCreated
   * @return dateCreated
   */
  @javax.annotation.Nullable
  public OffsetDateTime getDateCreated() {
    return dateCreated;
  }

  public void setDateCreated(OffsetDateTime dateCreated) {
    this.dateCreated = dateCreated;
  }


  public BoardListBoard dateLastUpdated(OffsetDateTime dateLastUpdated) {
    this.dateLastUpdated = dateLastUpdated;
    return this;
  }

  /**
   * Get dateLastUpdated
   * @return dateLastUpdated
   */
  @javax.annotation.Nullable
  public OffsetDateTime getDateLastUpdated() {
    return dateLastUpdated;
  }

  public void setDateLastUpdated(OffsetDateTime dateLastUpdated) {
    this.dateLastUpdated = dateLastUpdated;
  }


  public BoardListBoard description(String description) {
    this.description = description;
    return this;
  }

  /**
   * Get description
   * @return description
   */
  @javax.annotation.Nullable
  public String getDescription() {
    return description;
  }

  public void setDescription(String description) {
    this.description = description;
  }


  public BoardListBoard heroAsset(Asset heroAsset) {
    this.heroAsset = heroAsset;
    return this;
  }

  /**
   * Get heroAsset
   * @return heroAsset
   */
  @javax.annotation.Nullable
  public Asset getHeroAsset() {
    return heroAsset;
  }

  public void setHeroAsset(Asset heroAsset) {
    this.heroAsset = heroAsset;
  }


  public BoardListBoard id(String id) {
    this.id = id;
    return this;
  }

  /**
   * Get id
   * @return id
   */
  @javax.annotation.Nullable
  public String getId() {
    return id;
  }

  public void setId(String id) {
    this.id = id;
  }


  public BoardListBoard name(String name) {
    this.name = name;
    return this;
  }

  /**
   * Get name
   * @return name
   */
  @javax.annotation.Nullable
  public String getName() {
    return name;
  }

  public void setName(String name) {
    this.name = name;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    BoardListBoard boardListBoard = (BoardListBoard) o;
    return Objects.equals(this.assetCount, boardListBoard.assetCount) &&
        Objects.equals(this.boardRelationship, boardListBoard.boardRelationship) &&
        Objects.equals(this.dateCreated, boardListBoard.dateCreated) &&
        Objects.equals(this.dateLastUpdated, boardListBoard.dateLastUpdated) &&
        Objects.equals(this.description, boardListBoard.description) &&
        Objects.equals(this.heroAsset, boardListBoard.heroAsset) &&
        Objects.equals(this.id, boardListBoard.id) &&
        Objects.equals(this.name, boardListBoard.name);
  }

  private static <T> boolean equalsNullable(JsonNullable<T> a, JsonNullable<T> b) {
    return a == b || (a != null && b != null && a.isPresent() && b.isPresent() && Objects.deepEquals(a.get(), b.get()));
  }

  @Override
  public int hashCode() {
    return Objects.hash(assetCount, boardRelationship, dateCreated, dateLastUpdated, description, heroAsset, id, name);
  }

  private static <T> int hashCodeNullable(JsonNullable<T> a) {
    if (a == null) {
      return 1;
    }
    return a.isPresent() ? Arrays.deepHashCode(new Object[]{a.get()}) : 31;
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class BoardListBoard {\n");
    sb.append("    assetCount: ").append(toIndentedString(assetCount)).append("\n");
    sb.append("    boardRelationship: ").append(toIndentedString(boardRelationship)).append("\n");
    sb.append("    dateCreated: ").append(toIndentedString(dateCreated)).append("\n");
    sb.append("    dateLastUpdated: ").append(toIndentedString(dateLastUpdated)).append("\n");
    sb.append("    description: ").append(toIndentedString(description)).append("\n");
    sb.append("    heroAsset: ").append(toIndentedString(heroAsset)).append("\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("asset_count");
    openapiFields.add("board_relationship");
    openapiFields.add("date_created");
    openapiFields.add("date_last_updated");
    openapiFields.add("description");
    openapiFields.add("hero_asset");
    openapiFields.add("id");
    openapiFields.add("name");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to BoardListBoard
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!BoardListBoard.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in BoardListBoard is not found in the empty JSON string", BoardListBoard.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!BoardListBoard.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `BoardListBoard` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("board_relationship") != null && !jsonObj.get("board_relationship").isJsonNull()) && !jsonObj.get("board_relationship").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `board_relationship` to be a primitive type in the JSON string but got `%s`", jsonObj.get("board_relationship").toString()));
      }
      if ((jsonObj.get("description") != null && !jsonObj.get("description").isJsonNull()) && !jsonObj.get("description").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `description` to be a primitive type in the JSON string but got `%s`", jsonObj.get("description").toString()));
      }
      // validate the optional field `hero_asset`
      if (jsonObj.get("hero_asset") != null && !jsonObj.get("hero_asset").isJsonNull()) {
        Asset.validateJsonElement(jsonObj.get("hero_asset"));
      }
      if ((jsonObj.get("id") != null && !jsonObj.get("id").isJsonNull()) && !jsonObj.get("id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("id").toString()));
      }
      if ((jsonObj.get("name") != null && !jsonObj.get("name").isJsonNull()) && !jsonObj.get("name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("name").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!BoardListBoard.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'BoardListBoard' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<BoardListBoard> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(BoardListBoard.class));

       return (TypeAdapter<T>) new TypeAdapter<BoardListBoard>() {
           @Override
           public void write(JsonWriter out, BoardListBoard value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public BoardListBoard read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of BoardListBoard given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of BoardListBoard
   * @throws IOException if the JSON string is invalid with respect to BoardListBoard
   */
  public static BoardListBoard fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, BoardListBoard.class);
  }

  /**
   * Convert an instance of BoardListBoard to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

