/*
 * Getty Images
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 3
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.time.OffsetDateTime;
import java.util.Arrays;
import org.openapitools.client.model.Dimensions;
import org.openapitools.client.model.DownloadDetails;
import org.openapitools.client.model.User;
import org.openapitools.jackson.nullable.JsonNullable;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * HistoricalDownload
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T10:09:49.731753-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class HistoricalDownload {
  public static final String SERIALIZED_NAME_AGREEMENT_NAME = "agreement_name";
  @SerializedName(SERIALIZED_NAME_AGREEMENT_NAME)
  private String agreementName;

  public static final String SERIALIZED_NAME_ASSET_TYPE = "asset_type";
  @SerializedName(SERIALIZED_NAME_ASSET_TYPE)
  private String assetType;

  public static final String SERIALIZED_NAME_DATE_DOWNLOADED = "date_downloaded";
  @SerializedName(SERIALIZED_NAME_DATE_DOWNLOADED)
  private OffsetDateTime dateDownloaded;

  public static final String SERIALIZED_NAME_DIMENSIONS = "dimensions";
  @SerializedName(SERIALIZED_NAME_DIMENSIONS)
  private Dimensions dimensions;

  public static final String SERIALIZED_NAME_DOWNLOAD_DETAILS = "download_details";
  @SerializedName(SERIALIZED_NAME_DOWNLOAD_DETAILS)
  private DownloadDetails downloadDetails;

  public static final String SERIALIZED_NAME_DOWNLOAD_SOURCE = "download_source";
  @SerializedName(SERIALIZED_NAME_DOWNLOAD_SOURCE)
  private String downloadSource;

  public static final String SERIALIZED_NAME_ID = "id";
  @SerializedName(SERIALIZED_NAME_ID)
  private String id;

  public static final String SERIALIZED_NAME_PRODUCT_ID = "product_id";
  @SerializedName(SERIALIZED_NAME_PRODUCT_ID)
  private Integer productId;

  public static final String SERIALIZED_NAME_PRODUCT_TYPE = "product_type";
  @SerializedName(SERIALIZED_NAME_PRODUCT_TYPE)
  private String productType;

  public static final String SERIALIZED_NAME_SIZE_NAME = "size_name";
  @SerializedName(SERIALIZED_NAME_SIZE_NAME)
  private String sizeName;

  public static final String SERIALIZED_NAME_THUMB_URI = "thumb_uri";
  @SerializedName(SERIALIZED_NAME_THUMB_URI)
  private String thumbUri;

  public static final String SERIALIZED_NAME_USER = "user";
  @SerializedName(SERIALIZED_NAME_USER)
  private User user;

  public HistoricalDownload() {
  }

  public HistoricalDownload agreementName(String agreementName) {
    this.agreementName = agreementName;
    return this;
  }

  /**
   * Get agreementName
   * @return agreementName
   */
  @javax.annotation.Nullable
  public String getAgreementName() {
    return agreementName;
  }

  public void setAgreementName(String agreementName) {
    this.agreementName = agreementName;
  }


  public HistoricalDownload assetType(String assetType) {
    this.assetType = assetType;
    return this;
  }

  /**
   * Get assetType
   * @return assetType
   */
  @javax.annotation.Nullable
  public String getAssetType() {
    return assetType;
  }

  public void setAssetType(String assetType) {
    this.assetType = assetType;
  }


  public HistoricalDownload dateDownloaded(OffsetDateTime dateDownloaded) {
    this.dateDownloaded = dateDownloaded;
    return this;
  }

  /**
   * Get dateDownloaded
   * @return dateDownloaded
   */
  @javax.annotation.Nullable
  public OffsetDateTime getDateDownloaded() {
    return dateDownloaded;
  }

  public void setDateDownloaded(OffsetDateTime dateDownloaded) {
    this.dateDownloaded = dateDownloaded;
  }


  public HistoricalDownload dimensions(Dimensions dimensions) {
    this.dimensions = dimensions;
    return this;
  }

  /**
   * Get dimensions
   * @return dimensions
   */
  @javax.annotation.Nullable
  public Dimensions getDimensions() {
    return dimensions;
  }

  public void setDimensions(Dimensions dimensions) {
    this.dimensions = dimensions;
  }


  public HistoricalDownload downloadDetails(DownloadDetails downloadDetails) {
    this.downloadDetails = downloadDetails;
    return this;
  }

  /**
   * Get downloadDetails
   * @return downloadDetails
   */
  @javax.annotation.Nullable
  public DownloadDetails getDownloadDetails() {
    return downloadDetails;
  }

  public void setDownloadDetails(DownloadDetails downloadDetails) {
    this.downloadDetails = downloadDetails;
  }


  public HistoricalDownload downloadSource(String downloadSource) {
    this.downloadSource = downloadSource;
    return this;
  }

  /**
   * Get downloadSource
   * @return downloadSource
   */
  @javax.annotation.Nullable
  public String getDownloadSource() {
    return downloadSource;
  }

  public void setDownloadSource(String downloadSource) {
    this.downloadSource = downloadSource;
  }


  public HistoricalDownload id(String id) {
    this.id = id;
    return this;
  }

  /**
   * Get id
   * @return id
   */
  @javax.annotation.Nullable
  public String getId() {
    return id;
  }

  public void setId(String id) {
    this.id = id;
  }


  public HistoricalDownload productId(Integer productId) {
    this.productId = productId;
    return this;
  }

  /**
   * Get productId
   * @return productId
   */
  @javax.annotation.Nullable
  public Integer getProductId() {
    return productId;
  }

  public void setProductId(Integer productId) {
    this.productId = productId;
  }


  public HistoricalDownload productType(String productType) {
    this.productType = productType;
    return this;
  }

  /**
   * Get productType
   * @return productType
   */
  @javax.annotation.Nullable
  public String getProductType() {
    return productType;
  }

  public void setProductType(String productType) {
    this.productType = productType;
  }


  public HistoricalDownload sizeName(String sizeName) {
    this.sizeName = sizeName;
    return this;
  }

  /**
   * Get sizeName
   * @return sizeName
   */
  @javax.annotation.Nullable
  public String getSizeName() {
    return sizeName;
  }

  public void setSizeName(String sizeName) {
    this.sizeName = sizeName;
  }


  public HistoricalDownload thumbUri(String thumbUri) {
    this.thumbUri = thumbUri;
    return this;
  }

  /**
   * Get thumbUri
   * @return thumbUri
   */
  @javax.annotation.Nullable
  public String getThumbUri() {
    return thumbUri;
  }

  public void setThumbUri(String thumbUri) {
    this.thumbUri = thumbUri;
  }


  public HistoricalDownload user(User user) {
    this.user = user;
    return this;
  }

  /**
   * Get user
   * @return user
   */
  @javax.annotation.Nullable
  public User getUser() {
    return user;
  }

  public void setUser(User user) {
    this.user = user;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    HistoricalDownload historicalDownload = (HistoricalDownload) o;
    return Objects.equals(this.agreementName, historicalDownload.agreementName) &&
        Objects.equals(this.assetType, historicalDownload.assetType) &&
        Objects.equals(this.dateDownloaded, historicalDownload.dateDownloaded) &&
        Objects.equals(this.dimensions, historicalDownload.dimensions) &&
        Objects.equals(this.downloadDetails, historicalDownload.downloadDetails) &&
        Objects.equals(this.downloadSource, historicalDownload.downloadSource) &&
        Objects.equals(this.id, historicalDownload.id) &&
        Objects.equals(this.productId, historicalDownload.productId) &&
        Objects.equals(this.productType, historicalDownload.productType) &&
        Objects.equals(this.sizeName, historicalDownload.sizeName) &&
        Objects.equals(this.thumbUri, historicalDownload.thumbUri) &&
        Objects.equals(this.user, historicalDownload.user);
  }

  private static <T> boolean equalsNullable(JsonNullable<T> a, JsonNullable<T> b) {
    return a == b || (a != null && b != null && a.isPresent() && b.isPresent() && Objects.deepEquals(a.get(), b.get()));
  }

  @Override
  public int hashCode() {
    return Objects.hash(agreementName, assetType, dateDownloaded, dimensions, downloadDetails, downloadSource, id, productId, productType, sizeName, thumbUri, user);
  }

  private static <T> int hashCodeNullable(JsonNullable<T> a) {
    if (a == null) {
      return 1;
    }
    return a.isPresent() ? Arrays.deepHashCode(new Object[]{a.get()}) : 31;
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class HistoricalDownload {\n");
    sb.append("    agreementName: ").append(toIndentedString(agreementName)).append("\n");
    sb.append("    assetType: ").append(toIndentedString(assetType)).append("\n");
    sb.append("    dateDownloaded: ").append(toIndentedString(dateDownloaded)).append("\n");
    sb.append("    dimensions: ").append(toIndentedString(dimensions)).append("\n");
    sb.append("    downloadDetails: ").append(toIndentedString(downloadDetails)).append("\n");
    sb.append("    downloadSource: ").append(toIndentedString(downloadSource)).append("\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    productId: ").append(toIndentedString(productId)).append("\n");
    sb.append("    productType: ").append(toIndentedString(productType)).append("\n");
    sb.append("    sizeName: ").append(toIndentedString(sizeName)).append("\n");
    sb.append("    thumbUri: ").append(toIndentedString(thumbUri)).append("\n");
    sb.append("    user: ").append(toIndentedString(user)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("agreement_name");
    openapiFields.add("asset_type");
    openapiFields.add("date_downloaded");
    openapiFields.add("dimensions");
    openapiFields.add("download_details");
    openapiFields.add("download_source");
    openapiFields.add("id");
    openapiFields.add("product_id");
    openapiFields.add("product_type");
    openapiFields.add("size_name");
    openapiFields.add("thumb_uri");
    openapiFields.add("user");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to HistoricalDownload
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!HistoricalDownload.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in HistoricalDownload is not found in the empty JSON string", HistoricalDownload.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!HistoricalDownload.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `HistoricalDownload` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("agreement_name") != null && !jsonObj.get("agreement_name").isJsonNull()) && !jsonObj.get("agreement_name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `agreement_name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("agreement_name").toString()));
      }
      if ((jsonObj.get("asset_type") != null && !jsonObj.get("asset_type").isJsonNull()) && !jsonObj.get("asset_type").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `asset_type` to be a primitive type in the JSON string but got `%s`", jsonObj.get("asset_type").toString()));
      }
      // validate the optional field `dimensions`
      if (jsonObj.get("dimensions") != null && !jsonObj.get("dimensions").isJsonNull()) {
        Dimensions.validateJsonElement(jsonObj.get("dimensions"));
      }
      // validate the optional field `download_details`
      if (jsonObj.get("download_details") != null && !jsonObj.get("download_details").isJsonNull()) {
        DownloadDetails.validateJsonElement(jsonObj.get("download_details"));
      }
      if ((jsonObj.get("download_source") != null && !jsonObj.get("download_source").isJsonNull()) && !jsonObj.get("download_source").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `download_source` to be a primitive type in the JSON string but got `%s`", jsonObj.get("download_source").toString()));
      }
      if ((jsonObj.get("id") != null && !jsonObj.get("id").isJsonNull()) && !jsonObj.get("id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("id").toString()));
      }
      if ((jsonObj.get("product_type") != null && !jsonObj.get("product_type").isJsonNull()) && !jsonObj.get("product_type").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `product_type` to be a primitive type in the JSON string but got `%s`", jsonObj.get("product_type").toString()));
      }
      if ((jsonObj.get("size_name") != null && !jsonObj.get("size_name").isJsonNull()) && !jsonObj.get("size_name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `size_name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("size_name").toString()));
      }
      if ((jsonObj.get("thumb_uri") != null && !jsonObj.get("thumb_uri").isJsonNull()) && !jsonObj.get("thumb_uri").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `thumb_uri` to be a primitive type in the JSON string but got `%s`", jsonObj.get("thumb_uri").toString()));
      }
      // validate the optional field `user`
      if (jsonObj.get("user") != null && !jsonObj.get("user").isJsonNull()) {
        User.validateJsonElement(jsonObj.get("user"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!HistoricalDownload.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'HistoricalDownload' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<HistoricalDownload> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(HistoricalDownload.class));

       return (TypeAdapter<T>) new TypeAdapter<HistoricalDownload>() {
           @Override
           public void write(JsonWriter out, HistoricalDownload value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public HistoricalDownload read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of HistoricalDownload given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of HistoricalDownload
   * @throws IOException if the JSON string is invalid with respect to HistoricalDownload
   */
  public static HistoricalDownload fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, HistoricalDownload.class);
  }

  /**
   * Convert an instance of HistoricalDownload to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

