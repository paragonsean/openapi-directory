/*
 * Getty Images
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 3
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * BoardPermissions
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T10:09:49.731753-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class BoardPermissions {
  public static final String SERIALIZED_NAME_CAN_ADD_ASSETS = "can_add_assets";
  @SerializedName(SERIALIZED_NAME_CAN_ADD_ASSETS)
  private Boolean canAddAssets;

  public static final String SERIALIZED_NAME_CAN_DELETE_BOARD = "can_delete_board";
  @SerializedName(SERIALIZED_NAME_CAN_DELETE_BOARD)
  private Boolean canDeleteBoard;

  public static final String SERIALIZED_NAME_CAN_INVITE_TO_BOARD = "can_invite_to_board";
  @SerializedName(SERIALIZED_NAME_CAN_INVITE_TO_BOARD)
  private Boolean canInviteToBoard;

  public static final String SERIALIZED_NAME_CAN_REMOVE_ASSETS = "can_remove_assets";
  @SerializedName(SERIALIZED_NAME_CAN_REMOVE_ASSETS)
  private Boolean canRemoveAssets;

  public static final String SERIALIZED_NAME_CAN_UPDATE_DESCRIPTION = "can_update_description";
  @SerializedName(SERIALIZED_NAME_CAN_UPDATE_DESCRIPTION)
  private Boolean canUpdateDescription;

  public static final String SERIALIZED_NAME_CAN_UPDATE_NAME = "can_update_name";
  @SerializedName(SERIALIZED_NAME_CAN_UPDATE_NAME)
  private Boolean canUpdateName;

  public BoardPermissions() {
  }

  public BoardPermissions canAddAssets(Boolean canAddAssets) {
    this.canAddAssets = canAddAssets;
    return this;
  }

  /**
   * Get canAddAssets
   * @return canAddAssets
   */
  @javax.annotation.Nullable
  public Boolean getCanAddAssets() {
    return canAddAssets;
  }

  public void setCanAddAssets(Boolean canAddAssets) {
    this.canAddAssets = canAddAssets;
  }


  public BoardPermissions canDeleteBoard(Boolean canDeleteBoard) {
    this.canDeleteBoard = canDeleteBoard;
    return this;
  }

  /**
   * Get canDeleteBoard
   * @return canDeleteBoard
   */
  @javax.annotation.Nullable
  public Boolean getCanDeleteBoard() {
    return canDeleteBoard;
  }

  public void setCanDeleteBoard(Boolean canDeleteBoard) {
    this.canDeleteBoard = canDeleteBoard;
  }


  public BoardPermissions canInviteToBoard(Boolean canInviteToBoard) {
    this.canInviteToBoard = canInviteToBoard;
    return this;
  }

  /**
   * Get canInviteToBoard
   * @return canInviteToBoard
   */
  @javax.annotation.Nullable
  public Boolean getCanInviteToBoard() {
    return canInviteToBoard;
  }

  public void setCanInviteToBoard(Boolean canInviteToBoard) {
    this.canInviteToBoard = canInviteToBoard;
  }


  public BoardPermissions canRemoveAssets(Boolean canRemoveAssets) {
    this.canRemoveAssets = canRemoveAssets;
    return this;
  }

  /**
   * Get canRemoveAssets
   * @return canRemoveAssets
   */
  @javax.annotation.Nullable
  public Boolean getCanRemoveAssets() {
    return canRemoveAssets;
  }

  public void setCanRemoveAssets(Boolean canRemoveAssets) {
    this.canRemoveAssets = canRemoveAssets;
  }


  public BoardPermissions canUpdateDescription(Boolean canUpdateDescription) {
    this.canUpdateDescription = canUpdateDescription;
    return this;
  }

  /**
   * Get canUpdateDescription
   * @return canUpdateDescription
   */
  @javax.annotation.Nullable
  public Boolean getCanUpdateDescription() {
    return canUpdateDescription;
  }

  public void setCanUpdateDescription(Boolean canUpdateDescription) {
    this.canUpdateDescription = canUpdateDescription;
  }


  public BoardPermissions canUpdateName(Boolean canUpdateName) {
    this.canUpdateName = canUpdateName;
    return this;
  }

  /**
   * Get canUpdateName
   * @return canUpdateName
   */
  @javax.annotation.Nullable
  public Boolean getCanUpdateName() {
    return canUpdateName;
  }

  public void setCanUpdateName(Boolean canUpdateName) {
    this.canUpdateName = canUpdateName;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    BoardPermissions boardPermissions = (BoardPermissions) o;
    return Objects.equals(this.canAddAssets, boardPermissions.canAddAssets) &&
        Objects.equals(this.canDeleteBoard, boardPermissions.canDeleteBoard) &&
        Objects.equals(this.canInviteToBoard, boardPermissions.canInviteToBoard) &&
        Objects.equals(this.canRemoveAssets, boardPermissions.canRemoveAssets) &&
        Objects.equals(this.canUpdateDescription, boardPermissions.canUpdateDescription) &&
        Objects.equals(this.canUpdateName, boardPermissions.canUpdateName);
  }

  @Override
  public int hashCode() {
    return Objects.hash(canAddAssets, canDeleteBoard, canInviteToBoard, canRemoveAssets, canUpdateDescription, canUpdateName);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class BoardPermissions {\n");
    sb.append("    canAddAssets: ").append(toIndentedString(canAddAssets)).append("\n");
    sb.append("    canDeleteBoard: ").append(toIndentedString(canDeleteBoard)).append("\n");
    sb.append("    canInviteToBoard: ").append(toIndentedString(canInviteToBoard)).append("\n");
    sb.append("    canRemoveAssets: ").append(toIndentedString(canRemoveAssets)).append("\n");
    sb.append("    canUpdateDescription: ").append(toIndentedString(canUpdateDescription)).append("\n");
    sb.append("    canUpdateName: ").append(toIndentedString(canUpdateName)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("can_add_assets");
    openapiFields.add("can_delete_board");
    openapiFields.add("can_invite_to_board");
    openapiFields.add("can_remove_assets");
    openapiFields.add("can_update_description");
    openapiFields.add("can_update_name");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to BoardPermissions
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!BoardPermissions.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in BoardPermissions is not found in the empty JSON string", BoardPermissions.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!BoardPermissions.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `BoardPermissions` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!BoardPermissions.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'BoardPermissions' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<BoardPermissions> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(BoardPermissions.class));

       return (TypeAdapter<T>) new TypeAdapter<BoardPermissions>() {
           @Override
           public void write(JsonWriter out, BoardPermissions value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public BoardPermissions read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of BoardPermissions given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of BoardPermissions
   * @throws IOException if the JSON string is invalid with respect to BoardPermissions
   */
  public static BoardPermissions fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, BoardPermissions.class);
  }

  /**
   * Convert an instance of BoardPermissions to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

