/*
 * Getty Images
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 3
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiCallback;
import org.openapitools.client.ApiClient;
import org.openapitools.client.ApiException;
import org.openapitools.client.ApiResponse;
import org.openapitools.client.Configuration;
import org.openapitools.client.Pair;
import org.openapitools.client.ProgressRequestBody;
import org.openapitools.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import org.openapitools.client.model.AcquireAssetLicensesRequest;
import org.openapitools.client.model.AssetLicensingResponse;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class AssetLicensingApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public AssetLicensingApi() {
        this(Configuration.getDefaultApiClient());
    }

    public AssetLicensingApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for v3AssetLicensingAssetIdPost
     * @param assetId Getty Images assetId - examples 520621493, 112301284 (required)
     * @param acceptLanguage Provide a header to specify the language of result values. Supported values: cs (iStock only), de, en-GB, en-US, es, fi (iStock only), fr, hu (iStock only), id (iStock only), it, ja, ko (creative assets only), nl, pl (creative assets only), pt-BR, pt-PT, ro (iStock only), ru (creative assets only), sv, th (iStock only), tr, uk (iStock only), vi (iStock only), zh-HK (creative assets only). (optional)
     * @param acquireAssetLicensesRequest Structure that specifies an array of LicenseTypes (multiseat, unlimited, resale, indemnification) to acquire,              and whether or not to use Team Credits. Authenticated User must have access to Team Credits if UseTeamCredits is set to \&quot;true\&quot;. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> InvalidRequestParameters </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> AuthorizationTokenRequired </td><td>  -  </td></tr>
        <tr><td> 402 </td><td> NotEnoughCreditsForPurchase </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> StandardLicenseNotFound </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call v3AssetLicensingAssetIdPostCall(String assetId, String acceptLanguage, AcquireAssetLicensesRequest acquireAssetLicensesRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = acquireAssetLicensesRequest;

        // create path and map variables
        String localVarPath = "/v3/asset-licensing/{assetId}"
            .replace("{" + "assetId" + "}", localVarApiClient.escapeString(assetId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (acceptLanguage != null) {
            localVarHeaderParams.put("Accept-Language", localVarApiClient.parameterToString(acceptLanguage));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "OAuth2", "OAuth2", "OAuth2", "OAuth2", "Api-Key" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call v3AssetLicensingAssetIdPostValidateBeforeCall(String assetId, String acceptLanguage, AcquireAssetLicensesRequest acquireAssetLicensesRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'assetId' is set
        if (assetId == null) {
            throw new ApiException("Missing the required parameter 'assetId' when calling v3AssetLicensingAssetIdPost(Async)");
        }

        return v3AssetLicensingAssetIdPostCall(assetId, acceptLanguage, acquireAssetLicensesRequest, _callback);

    }

    /**
     * Endpoint for acquiring extended licenses with iStock credits for an asset.
     * 
     * @param assetId Getty Images assetId - examples 520621493, 112301284 (required)
     * @param acceptLanguage Provide a header to specify the language of result values. Supported values: cs (iStock only), de, en-GB, en-US, es, fi (iStock only), fr, hu (iStock only), id (iStock only), it, ja, ko (creative assets only), nl, pl (creative assets only), pt-BR, pt-PT, ro (iStock only), ru (creative assets only), sv, th (iStock only), tr, uk (iStock only), vi (iStock only), zh-HK (creative assets only). (optional)
     * @param acquireAssetLicensesRequest Structure that specifies an array of LicenseTypes (multiseat, unlimited, resale, indemnification) to acquire,              and whether or not to use Team Credits. Authenticated User must have access to Team Credits if UseTeamCredits is set to \&quot;true\&quot;. (optional)
     * @return AssetLicensingResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> InvalidRequestParameters </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> AuthorizationTokenRequired </td><td>  -  </td></tr>
        <tr><td> 402 </td><td> NotEnoughCreditsForPurchase </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> StandardLicenseNotFound </td><td>  -  </td></tr>
     </table>
     */
    public AssetLicensingResponse v3AssetLicensingAssetIdPost(String assetId, String acceptLanguage, AcquireAssetLicensesRequest acquireAssetLicensesRequest) throws ApiException {
        ApiResponse<AssetLicensingResponse> localVarResp = v3AssetLicensingAssetIdPostWithHttpInfo(assetId, acceptLanguage, acquireAssetLicensesRequest);
        return localVarResp.getData();
    }

    /**
     * Endpoint for acquiring extended licenses with iStock credits for an asset.
     * 
     * @param assetId Getty Images assetId - examples 520621493, 112301284 (required)
     * @param acceptLanguage Provide a header to specify the language of result values. Supported values: cs (iStock only), de, en-GB, en-US, es, fi (iStock only), fr, hu (iStock only), id (iStock only), it, ja, ko (creative assets only), nl, pl (creative assets only), pt-BR, pt-PT, ro (iStock only), ru (creative assets only), sv, th (iStock only), tr, uk (iStock only), vi (iStock only), zh-HK (creative assets only). (optional)
     * @param acquireAssetLicensesRequest Structure that specifies an array of LicenseTypes (multiseat, unlimited, resale, indemnification) to acquire,              and whether or not to use Team Credits. Authenticated User must have access to Team Credits if UseTeamCredits is set to \&quot;true\&quot;. (optional)
     * @return ApiResponse&lt;AssetLicensingResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> InvalidRequestParameters </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> AuthorizationTokenRequired </td><td>  -  </td></tr>
        <tr><td> 402 </td><td> NotEnoughCreditsForPurchase </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> StandardLicenseNotFound </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<AssetLicensingResponse> v3AssetLicensingAssetIdPostWithHttpInfo(String assetId, String acceptLanguage, AcquireAssetLicensesRequest acquireAssetLicensesRequest) throws ApiException {
        okhttp3.Call localVarCall = v3AssetLicensingAssetIdPostValidateBeforeCall(assetId, acceptLanguage, acquireAssetLicensesRequest, null);
        Type localVarReturnType = new TypeToken<AssetLicensingResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Endpoint for acquiring extended licenses with iStock credits for an asset. (asynchronously)
     * 
     * @param assetId Getty Images assetId - examples 520621493, 112301284 (required)
     * @param acceptLanguage Provide a header to specify the language of result values. Supported values: cs (iStock only), de, en-GB, en-US, es, fi (iStock only), fr, hu (iStock only), id (iStock only), it, ja, ko (creative assets only), nl, pl (creative assets only), pt-BR, pt-PT, ro (iStock only), ru (creative assets only), sv, th (iStock only), tr, uk (iStock only), vi (iStock only), zh-HK (creative assets only). (optional)
     * @param acquireAssetLicensesRequest Structure that specifies an array of LicenseTypes (multiseat, unlimited, resale, indemnification) to acquire,              and whether or not to use Team Credits. Authenticated User must have access to Team Credits if UseTeamCredits is set to \&quot;true\&quot;. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> InvalidRequestParameters </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> AuthorizationTokenRequired </td><td>  -  </td></tr>
        <tr><td> 402 </td><td> NotEnoughCreditsForPurchase </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> StandardLicenseNotFound </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call v3AssetLicensingAssetIdPostAsync(String assetId, String acceptLanguage, AcquireAssetLicensesRequest acquireAssetLicensesRequest, final ApiCallback<AssetLicensingResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = v3AssetLicensingAssetIdPostValidateBeforeCall(assetId, acceptLanguage, acquireAssetLicensesRequest, _callback);
        Type localVarReturnType = new TypeToken<AssetLicensingResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
