/*
 * Getty Images
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 3
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.time.OffsetDateTime;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.HeroImage;
import org.openapitools.client.model.LocationEvent;
import org.openapitools.jackson.nullable.JsonNullable;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Event
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T10:09:49.731753-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class Event {
  public static final String SERIALIZED_NAME_CHILD_EVENT_COUNT = "child_event_count";
  @SerializedName(SERIALIZED_NAME_CHILD_EVENT_COUNT)
  private Integer childEventCount;

  public static final String SERIALIZED_NAME_EDITORIAL_SEGMENTS = "editorial_segments";
  @SerializedName(SERIALIZED_NAME_EDITORIAL_SEGMENTS)
  private List<String> editorialSegments;

  public static final String SERIALIZED_NAME_HERO_IMAGE = "hero_image";
  @SerializedName(SERIALIZED_NAME_HERO_IMAGE)
  private HeroImage heroImage;

  public static final String SERIALIZED_NAME_ID = "id";
  @SerializedName(SERIALIZED_NAME_ID)
  private Integer id;

  public static final String SERIALIZED_NAME_IMAGE_COUNT = "image_count";
  @SerializedName(SERIALIZED_NAME_IMAGE_COUNT)
  private Integer imageCount;

  public static final String SERIALIZED_NAME_LOCATION = "location";
  @SerializedName(SERIALIZED_NAME_LOCATION)
  private LocationEvent location;

  public static final String SERIALIZED_NAME_NAME = "name";
  @SerializedName(SERIALIZED_NAME_NAME)
  private String name;

  public static final String SERIALIZED_NAME_START_DATE = "start_date";
  @SerializedName(SERIALIZED_NAME_START_DATE)
  private OffsetDateTime startDate;

  public Event() {
  }

  public Event childEventCount(Integer childEventCount) {
    this.childEventCount = childEventCount;
    return this;
  }

  /**
   * Get childEventCount
   * @return childEventCount
   */
  @javax.annotation.Nullable
  public Integer getChildEventCount() {
    return childEventCount;
  }

  public void setChildEventCount(Integer childEventCount) {
    this.childEventCount = childEventCount;
  }


  public Event editorialSegments(List<String> editorialSegments) {
    this.editorialSegments = editorialSegments;
    return this;
  }

  public Event addEditorialSegmentsItem(String editorialSegmentsItem) {
    if (this.editorialSegments == null) {
      this.editorialSegments = new ArrayList<>();
    }
    this.editorialSegments.add(editorialSegmentsItem);
    return this;
  }

  /**
   * Get editorialSegments
   * @return editorialSegments
   */
  @javax.annotation.Nullable
  public List<String> getEditorialSegments() {
    return editorialSegments;
  }

  public void setEditorialSegments(List<String> editorialSegments) {
    this.editorialSegments = editorialSegments;
  }


  public Event heroImage(HeroImage heroImage) {
    this.heroImage = heroImage;
    return this;
  }

  /**
   * Get heroImage
   * @return heroImage
   */
  @javax.annotation.Nullable
  public HeroImage getHeroImage() {
    return heroImage;
  }

  public void setHeroImage(HeroImage heroImage) {
    this.heroImage = heroImage;
  }


  public Event id(Integer id) {
    this.id = id;
    return this;
  }

  /**
   * Get id
   * @return id
   */
  @javax.annotation.Nullable
  public Integer getId() {
    return id;
  }

  public void setId(Integer id) {
    this.id = id;
  }


  public Event imageCount(Integer imageCount) {
    this.imageCount = imageCount;
    return this;
  }

  /**
   * Get imageCount
   * @return imageCount
   */
  @javax.annotation.Nullable
  public Integer getImageCount() {
    return imageCount;
  }

  public void setImageCount(Integer imageCount) {
    this.imageCount = imageCount;
  }


  public Event location(LocationEvent location) {
    this.location = location;
    return this;
  }

  /**
   * Get location
   * @return location
   */
  @javax.annotation.Nullable
  public LocationEvent getLocation() {
    return location;
  }

  public void setLocation(LocationEvent location) {
    this.location = location;
  }


  public Event name(String name) {
    this.name = name;
    return this;
  }

  /**
   * Get name
   * @return name
   */
  @javax.annotation.Nullable
  public String getName() {
    return name;
  }

  public void setName(String name) {
    this.name = name;
  }


  public Event startDate(OffsetDateTime startDate) {
    this.startDate = startDate;
    return this;
  }

  /**
   * Get startDate
   * @return startDate
   */
  @javax.annotation.Nullable
  public OffsetDateTime getStartDate() {
    return startDate;
  }

  public void setStartDate(OffsetDateTime startDate) {
    this.startDate = startDate;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    Event event = (Event) o;
    return Objects.equals(this.childEventCount, event.childEventCount) &&
        Objects.equals(this.editorialSegments, event.editorialSegments) &&
        Objects.equals(this.heroImage, event.heroImage) &&
        Objects.equals(this.id, event.id) &&
        Objects.equals(this.imageCount, event.imageCount) &&
        Objects.equals(this.location, event.location) &&
        Objects.equals(this.name, event.name) &&
        Objects.equals(this.startDate, event.startDate);
  }

  private static <T> boolean equalsNullable(JsonNullable<T> a, JsonNullable<T> b) {
    return a == b || (a != null && b != null && a.isPresent() && b.isPresent() && Objects.deepEquals(a.get(), b.get()));
  }

  @Override
  public int hashCode() {
    return Objects.hash(childEventCount, editorialSegments, heroImage, id, imageCount, location, name, startDate);
  }

  private static <T> int hashCodeNullable(JsonNullable<T> a) {
    if (a == null) {
      return 1;
    }
    return a.isPresent() ? Arrays.deepHashCode(new Object[]{a.get()}) : 31;
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class Event {\n");
    sb.append("    childEventCount: ").append(toIndentedString(childEventCount)).append("\n");
    sb.append("    editorialSegments: ").append(toIndentedString(editorialSegments)).append("\n");
    sb.append("    heroImage: ").append(toIndentedString(heroImage)).append("\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    imageCount: ").append(toIndentedString(imageCount)).append("\n");
    sb.append("    location: ").append(toIndentedString(location)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    startDate: ").append(toIndentedString(startDate)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("child_event_count");
    openapiFields.add("editorial_segments");
    openapiFields.add("hero_image");
    openapiFields.add("id");
    openapiFields.add("image_count");
    openapiFields.add("location");
    openapiFields.add("name");
    openapiFields.add("start_date");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to Event
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!Event.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in Event is not found in the empty JSON string", Event.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!Event.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `Event` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // ensure the optional json data is an array if present
      if (jsonObj.get("editorial_segments") != null && !jsonObj.get("editorial_segments").isJsonNull() && !jsonObj.get("editorial_segments").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `editorial_segments` to be an array in the JSON string but got `%s`", jsonObj.get("editorial_segments").toString()));
      }
      // validate the optional field `hero_image`
      if (jsonObj.get("hero_image") != null && !jsonObj.get("hero_image").isJsonNull()) {
        HeroImage.validateJsonElement(jsonObj.get("hero_image"));
      }
      // validate the optional field `location`
      if (jsonObj.get("location") != null && !jsonObj.get("location").isJsonNull()) {
        LocationEvent.validateJsonElement(jsonObj.get("location"));
      }
      if ((jsonObj.get("name") != null && !jsonObj.get("name").isJsonNull()) && !jsonObj.get("name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("name").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!Event.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'Event' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<Event> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(Event.class));

       return (TypeAdapter<T>) new TypeAdapter<Event>() {
           @Override
           public void write(JsonWriter out, Event value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public Event read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of Event given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of Event
   * @throws IOException if the JSON string is invalid with respect to Event
   */
  public static Event fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, Event.class);
  }

  /**
   * Convert an instance of Event to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

