/*
 * Getty Images
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 3
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.annotations.SerializedName;

import java.io.IOException;
import com.google.gson.TypeAdapter;
import com.google.gson.JsonElement;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;

/**
 * Gets or Sets CompositionsFilterType
 */
@JsonAdapter(CompositionsFilterType.Adapter.class)
public enum CompositionsFilterType {
  
  ABSTRACT("abstract"),
  
  CANDID("candid"),
  
  CLOSE_UP("close_up"),
  
  COPY_SPACE("copy_space"),
  
  CUT_OUT("cut_out"),
  
  FULL_FRAME("full_frame"),
  
  FULL_LENGTH("full_length"),
  
  HEADSHOT("headshot"),
  
  LOOKING_AT_CAMERA("looking_at_camera"),
  
  MACRO("macro"),
  
  PORTRAIT("portrait"),
  
  SPARSE("sparse"),
  
  STILL_LIFE("still_life"),
  
  THREE_QUARTER_LENGTH("three_quarter_length"),
  
  WAIST_UP("waist_up");

  private String value;

  CompositionsFilterType(String value) {
    this.value = value;
  }

  public String getValue() {
    return value;
  }

  @Override
  public String toString() {
    return String.valueOf(value);
  }

  public static CompositionsFilterType fromValue(String value) {
    for (CompositionsFilterType b : CompositionsFilterType.values()) {
      if (b.value.equals(value)) {
        return b;
      }
    }
    throw new IllegalArgumentException("Unexpected value '" + value + "'");
  }

  public static class Adapter extends TypeAdapter<CompositionsFilterType> {
    @Override
    public void write(final JsonWriter jsonWriter, final CompositionsFilterType enumeration) throws IOException {
      jsonWriter.value(enumeration.getValue());
    }

    @Override
    public CompositionsFilterType read(final JsonReader jsonReader) throws IOException {
      String value = jsonReader.nextString();
      return CompositionsFilterType.fromValue(value);
    }
  }

  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
    String value = jsonElement.getAsString();
    CompositionsFilterType.fromValue(value);
  }
}

