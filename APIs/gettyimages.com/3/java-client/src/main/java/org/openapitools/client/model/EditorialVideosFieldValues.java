/*
 * Getty Images
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 3
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.annotations.SerializedName;

import java.io.IOException;
import com.google.gson.TypeAdapter;
import com.google.gson.JsonElement;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;

/**
 * Gets or Sets EditorialVideosFieldValues
 */
@JsonAdapter(EditorialVideosFieldValues.Adapter.class)
public enum EditorialVideosFieldValues {
  
  ALLOWED_USE("allowed_use"),
  
  ARTIST("artist"),
  
  ASPECT_RATIO("aspect_ratio"),
  
  ASSET_FAMILY("asset_family"),
  
  CALL_FOR_IMAGE("call_for_image"),
  
  CAPTION("caption"),
  
  CLIP_LENGTH("clip_length"),
  
  COLLECTION_CODE("collection_code"),
  
  COLLECTION_ID("collection_id"),
  
  COLLECTION_NAME("collection_name"),
  
  COLOR_TYPE("color_type"),
  
  COMP("comp"),
  
  COPYRIGHT("copyright"),
  
  DATE_CREATED("date_created"),
  
  DATE_SUBMITTED("date_submitted"),
  
  DETAIL_SET("detail_set"),
  
  DISPLAY_SET("display_set"),
  
  DOWNLOAD_PRODUCT("download_product"),
  
  DOWNLOAD_SIZES("download_sizes"),
  
  EDITORIAL_SEGMENTS("editorial_segments"),
  
  ERA("era"),
  
  EVENT_IDS("event_ids"),
  
  ID("id"),
  
  ISTOCK_COLLECTION("istock_collection"),
  
  KEYWORDS("keywords"),
  
  LARGEST_DOWNLOADS("largest_downloads"),
  
  LICENSE_MODEL("license_model"),
  
  MASTERED_TO("mastered_to"),
  
  OBJECT_NAME("object_name"),
  
  ORIENTATION("orientation"),
  
  ORIGINALLY_SHOT_ON("originally_shot_on"),
  
  PREVIEW("preview"),
  
  PRODUCT_TYPES("product_types"),
  
  QUALITY_RANK("quality_rank"),
  
  REFERRAL_DESTINATIONS("referral_destinations"),
  
  SHOT_SPEED("shot_speed"),
  
  SOURCE("source"),
  
  SUMMARY_SET("summary_set"),
  
  THUMB("thumb"),
  
  TITLE("title"),
  
  ISTOCK_LICENSES("istock_licenses");

  private String value;

  EditorialVideosFieldValues(String value) {
    this.value = value;
  }

  public String getValue() {
    return value;
  }

  @Override
  public String toString() {
    return String.valueOf(value);
  }

  public static EditorialVideosFieldValues fromValue(String value) {
    for (EditorialVideosFieldValues b : EditorialVideosFieldValues.values()) {
      if (b.value.equals(value)) {
        return b;
      }
    }
    throw new IllegalArgumentException("Unexpected value '" + value + "'");
  }

  public static class Adapter extends TypeAdapter<EditorialVideosFieldValues> {
    @Override
    public void write(final JsonWriter jsonWriter, final EditorialVideosFieldValues enumeration) throws IOException {
      jsonWriter.value(enumeration.getValue());
    }

    @Override
    public EditorialVideosFieldValues read(final JsonReader jsonReader) throws IOException {
      String value = jsonReader.nextString();
      return EditorialVideosFieldValues.fromValue(value);
    }
  }

  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
    String value = jsonElement.getAsString();
    EditorialVideosFieldValues.fromValue(value);
  }
}

