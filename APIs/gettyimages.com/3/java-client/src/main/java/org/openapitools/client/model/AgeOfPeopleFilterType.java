/*
 * Getty Images
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 3
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.annotations.SerializedName;

import java.io.IOException;
import com.google.gson.TypeAdapter;
import com.google.gson.JsonElement;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;

/**
 * Gets or Sets AgeOfPeopleFilterType
 */
@JsonAdapter(AgeOfPeopleFilterType.Adapter.class)
public enum AgeOfPeopleFilterType {
  
  NEWBORN("newborn"),
  
  BABY("baby"),
  
  CHILD("child"),
  
  TEENAGER("teenager"),
  
  YOUNG_ADULT("young_adult"),
  
  ADULT("adult"),
  
  ADULTS_ONLY("adults_only"),
  
  MATURE_ADULT("mature_adult"),
  
  SENIOR_ADULT("senior_adult"),
  
  _0_1_MONTHS("0-1_months"),
  
  _2_5_MONTHS("2-5_months"),
  
  _6_11_MONTHS("6-11_months"),
  
  _12_17_MONTHS("12-17_months"),
  
  _18_23_MONTHS("18-23_months"),
  
  _2_3_YEARS("2-3_years"),
  
  _4_5_YEARS("4-5_years"),
  
  _6_7_YEARS("6-7_years"),
  
  _8_9_YEARS("8-9_years"),
  
  _10_11_YEARS("10-11_years"),
  
  _12_13_YEARS("12-13_years"),
  
  _14_15_YEARS("14-15_years"),
  
  _16_17_YEARS("16-17_years"),
  
  _18_19_YEARS("18-19_years"),
  
  _20_24_YEARS("20-24_years"),
  
  _20_29_YEARS("20-29_years"),
  
  _25_29_YEARS("25-29_years"),
  
  _30_34_YEARS("30-34_years"),
  
  _30_39_YEARS("30-39_years"),
  
  _35_39_YEARS("35-39_years"),
  
  _40_44_YEARS("40-44_years"),
  
  _40_49_YEARS("40-49_years"),
  
  _45_49_YEARS("45-49_years"),
  
  _50_54_YEARS("50-54_years"),
  
  _50_59_YEARS("50-59_years"),
  
  _55_59_YEARS("55-59_years"),
  
  _60_64_YEARS("60-64_years"),
  
  _60_69_YEARS("60-69_years"),
  
  _65_69_YEARS("65-69_years"),
  
  _70_79_YEARS("70-79_years"),
  
  _80_89_YEARS("80-89_years"),
  
  _90_PLUS_YEARS("90_plus_years"),
  
  _100_OVER("100_over");

  private String value;

  AgeOfPeopleFilterType(String value) {
    this.value = value;
  }

  public String getValue() {
    return value;
  }

  @Override
  public String toString() {
    return String.valueOf(value);
  }

  public static AgeOfPeopleFilterType fromValue(String value) {
    for (AgeOfPeopleFilterType b : AgeOfPeopleFilterType.values()) {
      if (b.value.equals(value)) {
        return b;
      }
    }
    throw new IllegalArgumentException("Unexpected value '" + value + "'");
  }

  public static class Adapter extends TypeAdapter<AgeOfPeopleFilterType> {
    @Override
    public void write(final JsonWriter jsonWriter, final AgeOfPeopleFilterType enumeration) throws IOException {
      jsonWriter.value(enumeration.getValue());
    }

    @Override
    public AgeOfPeopleFilterType read(final JsonReader jsonReader) throws IOException {
      String value = jsonReader.nextString();
      return AgeOfPeopleFilterType.fromValue(value);
    }
  }

  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
    String value = jsonElement.getAsString();
    AgeOfPeopleFilterType.fromValue(value);
  }
}

