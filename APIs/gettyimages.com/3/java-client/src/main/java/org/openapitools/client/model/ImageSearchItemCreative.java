/*
 * Getty Images
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 3
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.time.OffsetDateTime;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import org.openapitools.client.model.AllowedUse;
import org.openapitools.client.model.Download;
import org.openapitools.client.model.ImageSearchItemDisplaySize;
import org.openapitools.client.model.Keyword;
import org.openapitools.client.model.MaxDimensions;
import org.openapitools.client.model.ReferralDestination;
import org.openapitools.jackson.nullable.JsonNullable;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * ImageSearchItemCreative
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T10:09:49.731753-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class ImageSearchItemCreative {
  public static final String SERIALIZED_NAME_ALLOWED_USE = "allowed_use";
  @SerializedName(SERIALIZED_NAME_ALLOWED_USE)
  private AllowedUse allowedUse;

  public static final String SERIALIZED_NAME_ALTERNATIVE_IDS = "alternative_ids";
  @SerializedName(SERIALIZED_NAME_ALTERNATIVE_IDS)
  private Map<String, String> alternativeIds;

  public static final String SERIALIZED_NAME_ARTIST = "artist";
  @SerializedName(SERIALIZED_NAME_ARTIST)
  private String artist;

  public static final String SERIALIZED_NAME_ASSET_FAMILY = "asset_family";
  @SerializedName(SERIALIZED_NAME_ASSET_FAMILY)
  private String assetFamily;

  public static final String SERIALIZED_NAME_CALL_FOR_IMAGE = "call_for_image";
  @SerializedName(SERIALIZED_NAME_CALL_FOR_IMAGE)
  private Boolean callForImage;

  public static final String SERIALIZED_NAME_CAPTION = "caption";
  @SerializedName(SERIALIZED_NAME_CAPTION)
  private String caption;

  public static final String SERIALIZED_NAME_COLLECTION_CODE = "collection_code";
  @SerializedName(SERIALIZED_NAME_COLLECTION_CODE)
  private String collectionCode;

  public static final String SERIALIZED_NAME_COLLECTION_ID = "collection_id";
  @SerializedName(SERIALIZED_NAME_COLLECTION_ID)
  private Integer collectionId;

  public static final String SERIALIZED_NAME_COLLECTION_NAME = "collection_name";
  @SerializedName(SERIALIZED_NAME_COLLECTION_NAME)
  private String collectionName;

  public static final String SERIALIZED_NAME_COLOR_TYPE = "color_type";
  @SerializedName(SERIALIZED_NAME_COLOR_TYPE)
  private String colorType;

  public static final String SERIALIZED_NAME_COPYRIGHT = "copyright";
  @SerializedName(SERIALIZED_NAME_COPYRIGHT)
  private String copyright;

  public static final String SERIALIZED_NAME_DATE_CAMERA_SHOT = "date_camera_shot";
  @SerializedName(SERIALIZED_NAME_DATE_CAMERA_SHOT)
  private OffsetDateTime dateCameraShot;

  public static final String SERIALIZED_NAME_DATE_CREATED = "date_created";
  @SerializedName(SERIALIZED_NAME_DATE_CREATED)
  private OffsetDateTime dateCreated;

  public static final String SERIALIZED_NAME_DISPLAY_SIZES = "display_sizes";
  @SerializedName(SERIALIZED_NAME_DISPLAY_SIZES)
  private List<ImageSearchItemDisplaySize> displaySizes;

  public static final String SERIALIZED_NAME_DOWNLOAD_PRODUCT = "download_product";
  @SerializedName(SERIALIZED_NAME_DOWNLOAD_PRODUCT)
  private String downloadProduct;

  public static final String SERIALIZED_NAME_GRAPHICAL_STYLE = "graphical_style";
  @SerializedName(SERIALIZED_NAME_GRAPHICAL_STYLE)
  private String graphicalStyle;

  public static final String SERIALIZED_NAME_ID = "id";
  @SerializedName(SERIALIZED_NAME_ID)
  private String id;

  public static final String SERIALIZED_NAME_KEYWORDS = "keywords";
  @SerializedName(SERIALIZED_NAME_KEYWORDS)
  private List<Keyword> keywords;

  public static final String SERIALIZED_NAME_LARGEST_DOWNLOADS = "largest_downloads";
  @SerializedName(SERIALIZED_NAME_LARGEST_DOWNLOADS)
  private List<Download> largestDownloads;

  public static final String SERIALIZED_NAME_LICENSE_MODEL = "license_model";
  @SerializedName(SERIALIZED_NAME_LICENSE_MODEL)
  private String licenseModel;

  public static final String SERIALIZED_NAME_MAX_DIMENSIONS = "max_dimensions";
  @SerializedName(SERIALIZED_NAME_MAX_DIMENSIONS)
  private MaxDimensions maxDimensions;

  public static final String SERIALIZED_NAME_ORIENTATION = "orientation";
  @SerializedName(SERIALIZED_NAME_ORIENTATION)
  private String orientation;

  public static final String SERIALIZED_NAME_QUALITY_RANK = "quality_rank";
  @SerializedName(SERIALIZED_NAME_QUALITY_RANK)
  private Integer qualityRank;

  public static final String SERIALIZED_NAME_REFERRAL_DESTINATIONS = "referral_destinations";
  @SerializedName(SERIALIZED_NAME_REFERRAL_DESTINATIONS)
  private List<ReferralDestination> referralDestinations;

  public static final String SERIALIZED_NAME_TITLE = "title";
  @SerializedName(SERIALIZED_NAME_TITLE)
  private String title;

  public static final String SERIALIZED_NAME_URI_OEMBED = "uri_oembed";
  @SerializedName(SERIALIZED_NAME_URI_OEMBED)
  private String uriOembed;

  public ImageSearchItemCreative() {
  }

  public ImageSearchItemCreative allowedUse(AllowedUse allowedUse) {
    this.allowedUse = allowedUse;
    return this;
  }

  /**
   * Get allowedUse
   * @return allowedUse
   */
  @javax.annotation.Nullable
  public AllowedUse getAllowedUse() {
    return allowedUse;
  }

  public void setAllowedUse(AllowedUse allowedUse) {
    this.allowedUse = allowedUse;
  }


  public ImageSearchItemCreative alternativeIds(Map<String, String> alternativeIds) {
    this.alternativeIds = alternativeIds;
    return this;
  }

  public ImageSearchItemCreative putAlternativeIdsItem(String key, String alternativeIdsItem) {
    if (this.alternativeIds == null) {
      this.alternativeIds = new HashMap<>();
    }
    this.alternativeIds.put(key, alternativeIdsItem);
    return this;
  }

  /**
   * Get alternativeIds
   * @return alternativeIds
   */
  @javax.annotation.Nullable
  public Map<String, String> getAlternativeIds() {
    return alternativeIds;
  }

  public void setAlternativeIds(Map<String, String> alternativeIds) {
    this.alternativeIds = alternativeIds;
  }


  public ImageSearchItemCreative artist(String artist) {
    this.artist = artist;
    return this;
  }

  /**
   * Get artist
   * @return artist
   */
  @javax.annotation.Nullable
  public String getArtist() {
    return artist;
  }

  public void setArtist(String artist) {
    this.artist = artist;
  }


  public ImageSearchItemCreative assetFamily(String assetFamily) {
    this.assetFamily = assetFamily;
    return this;
  }

  /**
   * Get assetFamily
   * @return assetFamily
   */
  @javax.annotation.Nullable
  public String getAssetFamily() {
    return assetFamily;
  }

  public void setAssetFamily(String assetFamily) {
    this.assetFamily = assetFamily;
  }


  public ImageSearchItemCreative callForImage(Boolean callForImage) {
    this.callForImage = callForImage;
    return this;
  }

  /**
   * Get callForImage
   * @return callForImage
   */
  @javax.annotation.Nullable
  public Boolean getCallForImage() {
    return callForImage;
  }

  public void setCallForImage(Boolean callForImage) {
    this.callForImage = callForImage;
  }


  public ImageSearchItemCreative caption(String caption) {
    this.caption = caption;
    return this;
  }

  /**
   * Get caption
   * @return caption
   */
  @javax.annotation.Nullable
  public String getCaption() {
    return caption;
  }

  public void setCaption(String caption) {
    this.caption = caption;
  }


  public ImageSearchItemCreative collectionCode(String collectionCode) {
    this.collectionCode = collectionCode;
    return this;
  }

  /**
   * Get collectionCode
   * @return collectionCode
   */
  @javax.annotation.Nullable
  public String getCollectionCode() {
    return collectionCode;
  }

  public void setCollectionCode(String collectionCode) {
    this.collectionCode = collectionCode;
  }


  public ImageSearchItemCreative collectionId(Integer collectionId) {
    this.collectionId = collectionId;
    return this;
  }

  /**
   * Get collectionId
   * @return collectionId
   */
  @javax.annotation.Nullable
  public Integer getCollectionId() {
    return collectionId;
  }

  public void setCollectionId(Integer collectionId) {
    this.collectionId = collectionId;
  }


  public ImageSearchItemCreative collectionName(String collectionName) {
    this.collectionName = collectionName;
    return this;
  }

  /**
   * Get collectionName
   * @return collectionName
   */
  @javax.annotation.Nullable
  public String getCollectionName() {
    return collectionName;
  }

  public void setCollectionName(String collectionName) {
    this.collectionName = collectionName;
  }


  public ImageSearchItemCreative colorType(String colorType) {
    this.colorType = colorType;
    return this;
  }

  /**
   * Get colorType
   * @return colorType
   */
  @javax.annotation.Nullable
  public String getColorType() {
    return colorType;
  }

  public void setColorType(String colorType) {
    this.colorType = colorType;
  }


  public ImageSearchItemCreative copyright(String copyright) {
    this.copyright = copyright;
    return this;
  }

  /**
   * Get copyright
   * @return copyright
   */
  @javax.annotation.Nullable
  public String getCopyright() {
    return copyright;
  }

  public void setCopyright(String copyright) {
    this.copyright = copyright;
  }


  public ImageSearchItemCreative dateCameraShot(OffsetDateTime dateCameraShot) {
    this.dateCameraShot = dateCameraShot;
    return this;
  }

  /**
   * Get dateCameraShot
   * @return dateCameraShot
   */
  @javax.annotation.Nullable
  public OffsetDateTime getDateCameraShot() {
    return dateCameraShot;
  }

  public void setDateCameraShot(OffsetDateTime dateCameraShot) {
    this.dateCameraShot = dateCameraShot;
  }


  public ImageSearchItemCreative dateCreated(OffsetDateTime dateCreated) {
    this.dateCreated = dateCreated;
    return this;
  }

  /**
   * Get dateCreated
   * @return dateCreated
   */
  @javax.annotation.Nullable
  public OffsetDateTime getDateCreated() {
    return dateCreated;
  }

  public void setDateCreated(OffsetDateTime dateCreated) {
    this.dateCreated = dateCreated;
  }


  public ImageSearchItemCreative displaySizes(List<ImageSearchItemDisplaySize> displaySizes) {
    this.displaySizes = displaySizes;
    return this;
  }

  public ImageSearchItemCreative addDisplaySizesItem(ImageSearchItemDisplaySize displaySizesItem) {
    if (this.displaySizes == null) {
      this.displaySizes = new ArrayList<>();
    }
    this.displaySizes.add(displaySizesItem);
    return this;
  }

  /**
   * Get displaySizes
   * @return displaySizes
   */
  @javax.annotation.Nullable
  public List<ImageSearchItemDisplaySize> getDisplaySizes() {
    return displaySizes;
  }

  public void setDisplaySizes(List<ImageSearchItemDisplaySize> displaySizes) {
    this.displaySizes = displaySizes;
  }


  public ImageSearchItemCreative downloadProduct(String downloadProduct) {
    this.downloadProduct = downloadProduct;
    return this;
  }

  /**
   * Get downloadProduct
   * @return downloadProduct
   */
  @javax.annotation.Nullable
  public String getDownloadProduct() {
    return downloadProduct;
  }

  public void setDownloadProduct(String downloadProduct) {
    this.downloadProduct = downloadProduct;
  }


  public ImageSearchItemCreative graphicalStyle(String graphicalStyle) {
    this.graphicalStyle = graphicalStyle;
    return this;
  }

  /**
   * Get graphicalStyle
   * @return graphicalStyle
   */
  @javax.annotation.Nullable
  public String getGraphicalStyle() {
    return graphicalStyle;
  }

  public void setGraphicalStyle(String graphicalStyle) {
    this.graphicalStyle = graphicalStyle;
  }


  public ImageSearchItemCreative id(String id) {
    this.id = id;
    return this;
  }

  /**
   * Get id
   * @return id
   */
  @javax.annotation.Nullable
  public String getId() {
    return id;
  }

  public void setId(String id) {
    this.id = id;
  }


  public ImageSearchItemCreative keywords(List<Keyword> keywords) {
    this.keywords = keywords;
    return this;
  }

  public ImageSearchItemCreative addKeywordsItem(Keyword keywordsItem) {
    if (this.keywords == null) {
      this.keywords = new ArrayList<>();
    }
    this.keywords.add(keywordsItem);
    return this;
  }

  /**
   * Get keywords
   * @return keywords
   */
  @javax.annotation.Nullable
  public List<Keyword> getKeywords() {
    return keywords;
  }

  public void setKeywords(List<Keyword> keywords) {
    this.keywords = keywords;
  }


  public ImageSearchItemCreative largestDownloads(List<Download> largestDownloads) {
    this.largestDownloads = largestDownloads;
    return this;
  }

  public ImageSearchItemCreative addLargestDownloadsItem(Download largestDownloadsItem) {
    if (this.largestDownloads == null) {
      this.largestDownloads = new ArrayList<>();
    }
    this.largestDownloads.add(largestDownloadsItem);
    return this;
  }

  /**
   * Get largestDownloads
   * @return largestDownloads
   */
  @javax.annotation.Nullable
  public List<Download> getLargestDownloads() {
    return largestDownloads;
  }

  public void setLargestDownloads(List<Download> largestDownloads) {
    this.largestDownloads = largestDownloads;
  }


  public ImageSearchItemCreative licenseModel(String licenseModel) {
    this.licenseModel = licenseModel;
    return this;
  }

  /**
   * Get licenseModel
   * @return licenseModel
   */
  @javax.annotation.Nullable
  public String getLicenseModel() {
    return licenseModel;
  }

  public void setLicenseModel(String licenseModel) {
    this.licenseModel = licenseModel;
  }


  public ImageSearchItemCreative maxDimensions(MaxDimensions maxDimensions) {
    this.maxDimensions = maxDimensions;
    return this;
  }

  /**
   * Get maxDimensions
   * @return maxDimensions
   */
  @javax.annotation.Nullable
  public MaxDimensions getMaxDimensions() {
    return maxDimensions;
  }

  public void setMaxDimensions(MaxDimensions maxDimensions) {
    this.maxDimensions = maxDimensions;
  }


  public ImageSearchItemCreative orientation(String orientation) {
    this.orientation = orientation;
    return this;
  }

  /**
   * Get orientation
   * @return orientation
   */
  @javax.annotation.Nullable
  public String getOrientation() {
    return orientation;
  }

  public void setOrientation(String orientation) {
    this.orientation = orientation;
  }


  public ImageSearchItemCreative qualityRank(Integer qualityRank) {
    this.qualityRank = qualityRank;
    return this;
  }

  /**
   * Get qualityRank
   * @return qualityRank
   */
  @javax.annotation.Nullable
  public Integer getQualityRank() {
    return qualityRank;
  }

  public void setQualityRank(Integer qualityRank) {
    this.qualityRank = qualityRank;
  }


  public ImageSearchItemCreative referralDestinations(List<ReferralDestination> referralDestinations) {
    this.referralDestinations = referralDestinations;
    return this;
  }

  public ImageSearchItemCreative addReferralDestinationsItem(ReferralDestination referralDestinationsItem) {
    if (this.referralDestinations == null) {
      this.referralDestinations = new ArrayList<>();
    }
    this.referralDestinations.add(referralDestinationsItem);
    return this;
  }

  /**
   * Get referralDestinations
   * @return referralDestinations
   */
  @javax.annotation.Nullable
  public List<ReferralDestination> getReferralDestinations() {
    return referralDestinations;
  }

  public void setReferralDestinations(List<ReferralDestination> referralDestinations) {
    this.referralDestinations = referralDestinations;
  }


  public ImageSearchItemCreative title(String title) {
    this.title = title;
    return this;
  }

  /**
   * Get title
   * @return title
   */
  @javax.annotation.Nullable
  public String getTitle() {
    return title;
  }

  public void setTitle(String title) {
    this.title = title;
  }


  public ImageSearchItemCreative uriOembed(String uriOembed) {
    this.uriOembed = uriOembed;
    return this;
  }

  /**
   * Get uriOembed
   * @return uriOembed
   */
  @javax.annotation.Nullable
  public String getUriOembed() {
    return uriOembed;
  }

  public void setUriOembed(String uriOembed) {
    this.uriOembed = uriOembed;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ImageSearchItemCreative imageSearchItemCreative = (ImageSearchItemCreative) o;
    return Objects.equals(this.allowedUse, imageSearchItemCreative.allowedUse) &&
        Objects.equals(this.alternativeIds, imageSearchItemCreative.alternativeIds) &&
        Objects.equals(this.artist, imageSearchItemCreative.artist) &&
        Objects.equals(this.assetFamily, imageSearchItemCreative.assetFamily) &&
        Objects.equals(this.callForImage, imageSearchItemCreative.callForImage) &&
        Objects.equals(this.caption, imageSearchItemCreative.caption) &&
        Objects.equals(this.collectionCode, imageSearchItemCreative.collectionCode) &&
        Objects.equals(this.collectionId, imageSearchItemCreative.collectionId) &&
        Objects.equals(this.collectionName, imageSearchItemCreative.collectionName) &&
        Objects.equals(this.colorType, imageSearchItemCreative.colorType) &&
        Objects.equals(this.copyright, imageSearchItemCreative.copyright) &&
        Objects.equals(this.dateCameraShot, imageSearchItemCreative.dateCameraShot) &&
        Objects.equals(this.dateCreated, imageSearchItemCreative.dateCreated) &&
        Objects.equals(this.displaySizes, imageSearchItemCreative.displaySizes) &&
        Objects.equals(this.downloadProduct, imageSearchItemCreative.downloadProduct) &&
        Objects.equals(this.graphicalStyle, imageSearchItemCreative.graphicalStyle) &&
        Objects.equals(this.id, imageSearchItemCreative.id) &&
        Objects.equals(this.keywords, imageSearchItemCreative.keywords) &&
        Objects.equals(this.largestDownloads, imageSearchItemCreative.largestDownloads) &&
        Objects.equals(this.licenseModel, imageSearchItemCreative.licenseModel) &&
        Objects.equals(this.maxDimensions, imageSearchItemCreative.maxDimensions) &&
        Objects.equals(this.orientation, imageSearchItemCreative.orientation) &&
        Objects.equals(this.qualityRank, imageSearchItemCreative.qualityRank) &&
        Objects.equals(this.referralDestinations, imageSearchItemCreative.referralDestinations) &&
        Objects.equals(this.title, imageSearchItemCreative.title) &&
        Objects.equals(this.uriOembed, imageSearchItemCreative.uriOembed);
  }

  private static <T> boolean equalsNullable(JsonNullable<T> a, JsonNullable<T> b) {
    return a == b || (a != null && b != null && a.isPresent() && b.isPresent() && Objects.deepEquals(a.get(), b.get()));
  }

  @Override
  public int hashCode() {
    return Objects.hash(allowedUse, alternativeIds, artist, assetFamily, callForImage, caption, collectionCode, collectionId, collectionName, colorType, copyright, dateCameraShot, dateCreated, displaySizes, downloadProduct, graphicalStyle, id, keywords, largestDownloads, licenseModel, maxDimensions, orientation, qualityRank, referralDestinations, title, uriOembed);
  }

  private static <T> int hashCodeNullable(JsonNullable<T> a) {
    if (a == null) {
      return 1;
    }
    return a.isPresent() ? Arrays.deepHashCode(new Object[]{a.get()}) : 31;
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ImageSearchItemCreative {\n");
    sb.append("    allowedUse: ").append(toIndentedString(allowedUse)).append("\n");
    sb.append("    alternativeIds: ").append(toIndentedString(alternativeIds)).append("\n");
    sb.append("    artist: ").append(toIndentedString(artist)).append("\n");
    sb.append("    assetFamily: ").append(toIndentedString(assetFamily)).append("\n");
    sb.append("    callForImage: ").append(toIndentedString(callForImage)).append("\n");
    sb.append("    caption: ").append(toIndentedString(caption)).append("\n");
    sb.append("    collectionCode: ").append(toIndentedString(collectionCode)).append("\n");
    sb.append("    collectionId: ").append(toIndentedString(collectionId)).append("\n");
    sb.append("    collectionName: ").append(toIndentedString(collectionName)).append("\n");
    sb.append("    colorType: ").append(toIndentedString(colorType)).append("\n");
    sb.append("    copyright: ").append(toIndentedString(copyright)).append("\n");
    sb.append("    dateCameraShot: ").append(toIndentedString(dateCameraShot)).append("\n");
    sb.append("    dateCreated: ").append(toIndentedString(dateCreated)).append("\n");
    sb.append("    displaySizes: ").append(toIndentedString(displaySizes)).append("\n");
    sb.append("    downloadProduct: ").append(toIndentedString(downloadProduct)).append("\n");
    sb.append("    graphicalStyle: ").append(toIndentedString(graphicalStyle)).append("\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    keywords: ").append(toIndentedString(keywords)).append("\n");
    sb.append("    largestDownloads: ").append(toIndentedString(largestDownloads)).append("\n");
    sb.append("    licenseModel: ").append(toIndentedString(licenseModel)).append("\n");
    sb.append("    maxDimensions: ").append(toIndentedString(maxDimensions)).append("\n");
    sb.append("    orientation: ").append(toIndentedString(orientation)).append("\n");
    sb.append("    qualityRank: ").append(toIndentedString(qualityRank)).append("\n");
    sb.append("    referralDestinations: ").append(toIndentedString(referralDestinations)).append("\n");
    sb.append("    title: ").append(toIndentedString(title)).append("\n");
    sb.append("    uriOembed: ").append(toIndentedString(uriOembed)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("allowed_use");
    openapiFields.add("alternative_ids");
    openapiFields.add("artist");
    openapiFields.add("asset_family");
    openapiFields.add("call_for_image");
    openapiFields.add("caption");
    openapiFields.add("collection_code");
    openapiFields.add("collection_id");
    openapiFields.add("collection_name");
    openapiFields.add("color_type");
    openapiFields.add("copyright");
    openapiFields.add("date_camera_shot");
    openapiFields.add("date_created");
    openapiFields.add("display_sizes");
    openapiFields.add("download_product");
    openapiFields.add("graphical_style");
    openapiFields.add("id");
    openapiFields.add("keywords");
    openapiFields.add("largest_downloads");
    openapiFields.add("license_model");
    openapiFields.add("max_dimensions");
    openapiFields.add("orientation");
    openapiFields.add("quality_rank");
    openapiFields.add("referral_destinations");
    openapiFields.add("title");
    openapiFields.add("uri_oembed");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to ImageSearchItemCreative
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!ImageSearchItemCreative.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in ImageSearchItemCreative is not found in the empty JSON string", ImageSearchItemCreative.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!ImageSearchItemCreative.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `ImageSearchItemCreative` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `allowed_use`
      if (jsonObj.get("allowed_use") != null && !jsonObj.get("allowed_use").isJsonNull()) {
        AllowedUse.validateJsonElement(jsonObj.get("allowed_use"));
      }
      if ((jsonObj.get("artist") != null && !jsonObj.get("artist").isJsonNull()) && !jsonObj.get("artist").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `artist` to be a primitive type in the JSON string but got `%s`", jsonObj.get("artist").toString()));
      }
      if ((jsonObj.get("asset_family") != null && !jsonObj.get("asset_family").isJsonNull()) && !jsonObj.get("asset_family").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `asset_family` to be a primitive type in the JSON string but got `%s`", jsonObj.get("asset_family").toString()));
      }
      if ((jsonObj.get("caption") != null && !jsonObj.get("caption").isJsonNull()) && !jsonObj.get("caption").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `caption` to be a primitive type in the JSON string but got `%s`", jsonObj.get("caption").toString()));
      }
      if ((jsonObj.get("collection_code") != null && !jsonObj.get("collection_code").isJsonNull()) && !jsonObj.get("collection_code").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `collection_code` to be a primitive type in the JSON string but got `%s`", jsonObj.get("collection_code").toString()));
      }
      if ((jsonObj.get("collection_name") != null && !jsonObj.get("collection_name").isJsonNull()) && !jsonObj.get("collection_name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `collection_name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("collection_name").toString()));
      }
      if ((jsonObj.get("color_type") != null && !jsonObj.get("color_type").isJsonNull()) && !jsonObj.get("color_type").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `color_type` to be a primitive type in the JSON string but got `%s`", jsonObj.get("color_type").toString()));
      }
      if ((jsonObj.get("copyright") != null && !jsonObj.get("copyright").isJsonNull()) && !jsonObj.get("copyright").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `copyright` to be a primitive type in the JSON string but got `%s`", jsonObj.get("copyright").toString()));
      }
      if (jsonObj.get("display_sizes") != null && !jsonObj.get("display_sizes").isJsonNull()) {
        JsonArray jsonArraydisplaySizes = jsonObj.getAsJsonArray("display_sizes");
        if (jsonArraydisplaySizes != null) {
          // ensure the json data is an array
          if (!jsonObj.get("display_sizes").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `display_sizes` to be an array in the JSON string but got `%s`", jsonObj.get("display_sizes").toString()));
          }

          // validate the optional field `display_sizes` (array)
          for (int i = 0; i < jsonArraydisplaySizes.size(); i++) {
            ImageSearchItemDisplaySize.validateJsonElement(jsonArraydisplaySizes.get(i));
          };
        }
      }
      if ((jsonObj.get("download_product") != null && !jsonObj.get("download_product").isJsonNull()) && !jsonObj.get("download_product").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `download_product` to be a primitive type in the JSON string but got `%s`", jsonObj.get("download_product").toString()));
      }
      if ((jsonObj.get("graphical_style") != null && !jsonObj.get("graphical_style").isJsonNull()) && !jsonObj.get("graphical_style").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `graphical_style` to be a primitive type in the JSON string but got `%s`", jsonObj.get("graphical_style").toString()));
      }
      if ((jsonObj.get("id") != null && !jsonObj.get("id").isJsonNull()) && !jsonObj.get("id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("id").toString()));
      }
      if (jsonObj.get("keywords") != null && !jsonObj.get("keywords").isJsonNull()) {
        JsonArray jsonArraykeywords = jsonObj.getAsJsonArray("keywords");
        if (jsonArraykeywords != null) {
          // ensure the json data is an array
          if (!jsonObj.get("keywords").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `keywords` to be an array in the JSON string but got `%s`", jsonObj.get("keywords").toString()));
          }

          // validate the optional field `keywords` (array)
          for (int i = 0; i < jsonArraykeywords.size(); i++) {
            Keyword.validateJsonElement(jsonArraykeywords.get(i));
          };
        }
      }
      if (jsonObj.get("largest_downloads") != null && !jsonObj.get("largest_downloads").isJsonNull()) {
        JsonArray jsonArraylargestDownloads = jsonObj.getAsJsonArray("largest_downloads");
        if (jsonArraylargestDownloads != null) {
          // ensure the json data is an array
          if (!jsonObj.get("largest_downloads").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `largest_downloads` to be an array in the JSON string but got `%s`", jsonObj.get("largest_downloads").toString()));
          }

          // validate the optional field `largest_downloads` (array)
          for (int i = 0; i < jsonArraylargestDownloads.size(); i++) {
            Download.validateJsonElement(jsonArraylargestDownloads.get(i));
          };
        }
      }
      if ((jsonObj.get("license_model") != null && !jsonObj.get("license_model").isJsonNull()) && !jsonObj.get("license_model").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `license_model` to be a primitive type in the JSON string but got `%s`", jsonObj.get("license_model").toString()));
      }
      // validate the optional field `max_dimensions`
      if (jsonObj.get("max_dimensions") != null && !jsonObj.get("max_dimensions").isJsonNull()) {
        MaxDimensions.validateJsonElement(jsonObj.get("max_dimensions"));
      }
      if ((jsonObj.get("orientation") != null && !jsonObj.get("orientation").isJsonNull()) && !jsonObj.get("orientation").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `orientation` to be a primitive type in the JSON string but got `%s`", jsonObj.get("orientation").toString()));
      }
      if (jsonObj.get("referral_destinations") != null && !jsonObj.get("referral_destinations").isJsonNull()) {
        JsonArray jsonArrayreferralDestinations = jsonObj.getAsJsonArray("referral_destinations");
        if (jsonArrayreferralDestinations != null) {
          // ensure the json data is an array
          if (!jsonObj.get("referral_destinations").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `referral_destinations` to be an array in the JSON string but got `%s`", jsonObj.get("referral_destinations").toString()));
          }

          // validate the optional field `referral_destinations` (array)
          for (int i = 0; i < jsonArrayreferralDestinations.size(); i++) {
            ReferralDestination.validateJsonElement(jsonArrayreferralDestinations.get(i));
          };
        }
      }
      if ((jsonObj.get("title") != null && !jsonObj.get("title").isJsonNull()) && !jsonObj.get("title").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `title` to be a primitive type in the JSON string but got `%s`", jsonObj.get("title").toString()));
      }
      if ((jsonObj.get("uri_oembed") != null && !jsonObj.get("uri_oembed").isJsonNull()) && !jsonObj.get("uri_oembed").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `uri_oembed` to be a primitive type in the JSON string but got `%s`", jsonObj.get("uri_oembed").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!ImageSearchItemCreative.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'ImageSearchItemCreative' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<ImageSearchItemCreative> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(ImageSearchItemCreative.class));

       return (TypeAdapter<T>) new TypeAdapter<ImageSearchItemCreative>() {
           @Override
           public void write(JsonWriter out, ImageSearchItemCreative value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public ImageSearchItemCreative read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of ImageSearchItemCreative given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of ImageSearchItemCreative
   * @throws IOException if the JSON string is invalid with respect to ImageSearchItemCreative
   */
  public static ImageSearchItemCreative fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, ImageSearchItemCreative.class);
  }

  /**
   * Convert an instance of ImageSearchItemCreative to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

