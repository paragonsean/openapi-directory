/*
 * Getty Images
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 3
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.time.OffsetDateTime;
import java.util.Arrays;
import org.openapitools.client.model.AssetFamily;
import org.openapitools.client.model.AssetType;
import org.openapitools.jackson.nullable.JsonNullable;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Channel
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T10:09:49.731753-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class Channel {
  public static final String SERIALIZED_NAME_ASSET_CHANGE_TYPE = "AssetChangeType";
  @SerializedName(SERIALIZED_NAME_ASSET_CHANGE_TYPE)
  private String assetChangeType;

  public static final String SERIALIZED_NAME_ASSET_FAMILY = "AssetFamily";
  @SerializedName(SERIALIZED_NAME_ASSET_FAMILY)
  private AssetFamily assetFamily;

  public static final String SERIALIZED_NAME_ASSET_TYPE = "AssetType";
  @SerializedName(SERIALIZED_NAME_ASSET_TYPE)
  private AssetType assetType;

  public static final String SERIALIZED_NAME_CHANNEL_ID = "ChannelId";
  @SerializedName(SERIALIZED_NAME_CHANNEL_ID)
  private Integer channelId;

  public static final String SERIALIZED_NAME_CREATE_DATE_UTC = "CreateDateUtc";
  @SerializedName(SERIALIZED_NAME_CREATE_DATE_UTC)
  private OffsetDateTime createDateUtc;

  public static final String SERIALIZED_NAME_METADATA = "Metadata";
  @SerializedName(SERIALIZED_NAME_METADATA)
  private String metadata;

  public static final String SERIALIZED_NAME_NOTIFICATION_COUNT = "NotificationCount";
  @SerializedName(SERIALIZED_NAME_NOTIFICATION_COUNT)
  private Integer notificationCount;

  public static final String SERIALIZED_NAME_OLDEST_CHANGE_NOTIFICATION_DATE_UTC = "OldestChangeNotificationDateUtc";
  @SerializedName(SERIALIZED_NAME_OLDEST_CHANGE_NOTIFICATION_DATE_UTC)
  private OffsetDateTime oldestChangeNotificationDateUtc;

  public Channel() {
  }

  public Channel assetChangeType(String assetChangeType) {
    this.assetChangeType = assetChangeType;
    return this;
  }

  /**
   * Get assetChangeType
   * @return assetChangeType
   */
  @javax.annotation.Nullable
  public String getAssetChangeType() {
    return assetChangeType;
  }

  public void setAssetChangeType(String assetChangeType) {
    this.assetChangeType = assetChangeType;
  }


  public Channel assetFamily(AssetFamily assetFamily) {
    this.assetFamily = assetFamily;
    return this;
  }

  /**
   * Get assetFamily
   * @return assetFamily
   */
  @javax.annotation.Nullable
  public AssetFamily getAssetFamily() {
    return assetFamily;
  }

  public void setAssetFamily(AssetFamily assetFamily) {
    this.assetFamily = assetFamily;
  }


  public Channel assetType(AssetType assetType) {
    this.assetType = assetType;
    return this;
  }

  /**
   * Get assetType
   * @return assetType
   */
  @javax.annotation.Nullable
  public AssetType getAssetType() {
    return assetType;
  }

  public void setAssetType(AssetType assetType) {
    this.assetType = assetType;
  }


  public Channel channelId(Integer channelId) {
    this.channelId = channelId;
    return this;
  }

  /**
   * Get channelId
   * @return channelId
   */
  @javax.annotation.Nullable
  public Integer getChannelId() {
    return channelId;
  }

  public void setChannelId(Integer channelId) {
    this.channelId = channelId;
  }


  public Channel createDateUtc(OffsetDateTime createDateUtc) {
    this.createDateUtc = createDateUtc;
    return this;
  }

  /**
   * Get createDateUtc
   * @return createDateUtc
   */
  @javax.annotation.Nullable
  public OffsetDateTime getCreateDateUtc() {
    return createDateUtc;
  }

  public void setCreateDateUtc(OffsetDateTime createDateUtc) {
    this.createDateUtc = createDateUtc;
  }


  public Channel metadata(String metadata) {
    this.metadata = metadata;
    return this;
  }

  /**
   * Get metadata
   * @return metadata
   */
  @javax.annotation.Nullable
  public String getMetadata() {
    return metadata;
  }

  public void setMetadata(String metadata) {
    this.metadata = metadata;
  }


  public Channel notificationCount(Integer notificationCount) {
    this.notificationCount = notificationCount;
    return this;
  }

  /**
   * Get notificationCount
   * @return notificationCount
   */
  @javax.annotation.Nullable
  public Integer getNotificationCount() {
    return notificationCount;
  }

  public void setNotificationCount(Integer notificationCount) {
    this.notificationCount = notificationCount;
  }


  public Channel oldestChangeNotificationDateUtc(OffsetDateTime oldestChangeNotificationDateUtc) {
    this.oldestChangeNotificationDateUtc = oldestChangeNotificationDateUtc;
    return this;
  }

  /**
   * Get oldestChangeNotificationDateUtc
   * @return oldestChangeNotificationDateUtc
   */
  @javax.annotation.Nullable
  public OffsetDateTime getOldestChangeNotificationDateUtc() {
    return oldestChangeNotificationDateUtc;
  }

  public void setOldestChangeNotificationDateUtc(OffsetDateTime oldestChangeNotificationDateUtc) {
    this.oldestChangeNotificationDateUtc = oldestChangeNotificationDateUtc;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    Channel channel = (Channel) o;
    return Objects.equals(this.assetChangeType, channel.assetChangeType) &&
        Objects.equals(this.assetFamily, channel.assetFamily) &&
        Objects.equals(this.assetType, channel.assetType) &&
        Objects.equals(this.channelId, channel.channelId) &&
        Objects.equals(this.createDateUtc, channel.createDateUtc) &&
        Objects.equals(this.metadata, channel.metadata) &&
        Objects.equals(this.notificationCount, channel.notificationCount) &&
        Objects.equals(this.oldestChangeNotificationDateUtc, channel.oldestChangeNotificationDateUtc);
  }

  private static <T> boolean equalsNullable(JsonNullable<T> a, JsonNullable<T> b) {
    return a == b || (a != null && b != null && a.isPresent() && b.isPresent() && Objects.deepEquals(a.get(), b.get()));
  }

  @Override
  public int hashCode() {
    return Objects.hash(assetChangeType, assetFamily, assetType, channelId, createDateUtc, metadata, notificationCount, oldestChangeNotificationDateUtc);
  }

  private static <T> int hashCodeNullable(JsonNullable<T> a) {
    if (a == null) {
      return 1;
    }
    return a.isPresent() ? Arrays.deepHashCode(new Object[]{a.get()}) : 31;
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class Channel {\n");
    sb.append("    assetChangeType: ").append(toIndentedString(assetChangeType)).append("\n");
    sb.append("    assetFamily: ").append(toIndentedString(assetFamily)).append("\n");
    sb.append("    assetType: ").append(toIndentedString(assetType)).append("\n");
    sb.append("    channelId: ").append(toIndentedString(channelId)).append("\n");
    sb.append("    createDateUtc: ").append(toIndentedString(createDateUtc)).append("\n");
    sb.append("    metadata: ").append(toIndentedString(metadata)).append("\n");
    sb.append("    notificationCount: ").append(toIndentedString(notificationCount)).append("\n");
    sb.append("    oldestChangeNotificationDateUtc: ").append(toIndentedString(oldestChangeNotificationDateUtc)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("AssetChangeType");
    openapiFields.add("AssetFamily");
    openapiFields.add("AssetType");
    openapiFields.add("ChannelId");
    openapiFields.add("CreateDateUtc");
    openapiFields.add("Metadata");
    openapiFields.add("NotificationCount");
    openapiFields.add("OldestChangeNotificationDateUtc");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to Channel
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!Channel.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in Channel is not found in the empty JSON string", Channel.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!Channel.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `Channel` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("AssetChangeType") != null && !jsonObj.get("AssetChangeType").isJsonNull()) && !jsonObj.get("AssetChangeType").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `AssetChangeType` to be a primitive type in the JSON string but got `%s`", jsonObj.get("AssetChangeType").toString()));
      }
      // validate the optional field `AssetFamily`
      if (jsonObj.get("AssetFamily") != null && !jsonObj.get("AssetFamily").isJsonNull()) {
        AssetFamily.validateJsonElement(jsonObj.get("AssetFamily"));
      }
      // validate the optional field `AssetType`
      if (jsonObj.get("AssetType") != null && !jsonObj.get("AssetType").isJsonNull()) {
        AssetType.validateJsonElement(jsonObj.get("AssetType"));
      }
      if ((jsonObj.get("Metadata") != null && !jsonObj.get("Metadata").isJsonNull()) && !jsonObj.get("Metadata").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `Metadata` to be a primitive type in the JSON string but got `%s`", jsonObj.get("Metadata").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!Channel.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'Channel' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<Channel> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(Channel.class));

       return (TypeAdapter<T>) new TypeAdapter<Channel>() {
           @Override
           public void write(JsonWriter out, Channel value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public Channel read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of Channel given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of Channel
   * @throws IOException if the JSON string is invalid with respect to Channel
   */
  public static Channel fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, Channel.class);
  }

  /**
   * Convert an instance of Channel to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

