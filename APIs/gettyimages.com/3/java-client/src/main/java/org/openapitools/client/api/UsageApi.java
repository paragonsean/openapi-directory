/*
 * Getty Images
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 3
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiCallback;
import org.openapitools.client.ApiClient;
import org.openapitools.client.ApiException;
import org.openapitools.client.ApiResponse;
import org.openapitools.client.Configuration;
import org.openapitools.client.Pair;
import org.openapitools.client.ProgressRequestBody;
import org.openapitools.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import org.openapitools.client.model.ReportUsageBatchRequest;
import org.openapitools.client.model.ReportUsageBatchResponse;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class UsageApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public UsageApi() {
        this(Configuration.getDefaultApiClient());
    }

    public UsageApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for v3UsageBatchesIdPut
     * @param id Specifies a unique batch transaction id to identify the report. (required)
     * @param reportUsageBatchRequest Specifies up to 1000 sets of asset Id, usage count, and date of use to submit usages for.               Note that all asset Ids specified must be valid or the operation will fail causing no usages to be recorded.               All dates must be on or before this date and the format should be ISO 8601 (ex: YYYY-MM-DD), time is not needed. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Success - All usages reported were successfully recorded. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> InvalidRequest - The content of the request was invalid. Most commonly this is due to either too many assets specified, no assets or invalid JSON. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> AuthorizationTokenRequired - Authorization token was missing or not valid. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> UnauthorizedToReportUsage </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> TransactionIdDuplicated </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call v3UsageBatchesIdPutCall(String id, ReportUsageBatchRequest reportUsageBatchRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = reportUsageBatchRequest;

        // create path and map variables
        String localVarPath = "/v3/usage-batches/{id}"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "OAuth2", "OAuth2", "OAuth2", "OAuth2", "Api-Key" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call v3UsageBatchesIdPutValidateBeforeCall(String id, ReportUsageBatchRequest reportUsageBatchRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling v3UsageBatchesIdPut(Async)");
        }

        return v3UsageBatchesIdPutCall(id, reportUsageBatchRequest, _callback);

    }

    /**
     * Report usage of assets via a batch format.
     * # Report Usage  Use this endpoint to report the usages of a set of assets. The count of assets submitted in a single batch to this endpoint is limited to 1000. Note that all asset Ids specified must be valid or the operation will fail causing no usages to be recorded. In this case, you will need to remove the invalid asset Ids from the query request and re-submit the query.  ##  Quickstart  You&#39;ll need an API key and a [Resource Owner Grant](http://developers.gettyimages.com/en/authorization-faq.html) access token to use this resource. Please see our [Getting Started](http://developers.gettyimages.com/en/getting-started.html) page for more information on how to sign up for an API key.   _Note_: Date of use can be in any unambiguous date format. 
     * @param id Specifies a unique batch transaction id to identify the report. (required)
     * @param reportUsageBatchRequest Specifies up to 1000 sets of asset Id, usage count, and date of use to submit usages for.               Note that all asset Ids specified must be valid or the operation will fail causing no usages to be recorded.               All dates must be on or before this date and the format should be ISO 8601 (ex: YYYY-MM-DD), time is not needed. (optional)
     * @return ReportUsageBatchResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Success - All usages reported were successfully recorded. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> InvalidRequest - The content of the request was invalid. Most commonly this is due to either too many assets specified, no assets or invalid JSON. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> AuthorizationTokenRequired - Authorization token was missing or not valid. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> UnauthorizedToReportUsage </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> TransactionIdDuplicated </td><td>  -  </td></tr>
     </table>
     */
    public ReportUsageBatchResponse v3UsageBatchesIdPut(String id, ReportUsageBatchRequest reportUsageBatchRequest) throws ApiException {
        ApiResponse<ReportUsageBatchResponse> localVarResp = v3UsageBatchesIdPutWithHttpInfo(id, reportUsageBatchRequest);
        return localVarResp.getData();
    }

    /**
     * Report usage of assets via a batch format.
     * # Report Usage  Use this endpoint to report the usages of a set of assets. The count of assets submitted in a single batch to this endpoint is limited to 1000. Note that all asset Ids specified must be valid or the operation will fail causing no usages to be recorded. In this case, you will need to remove the invalid asset Ids from the query request and re-submit the query.  ##  Quickstart  You&#39;ll need an API key and a [Resource Owner Grant](http://developers.gettyimages.com/en/authorization-faq.html) access token to use this resource. Please see our [Getting Started](http://developers.gettyimages.com/en/getting-started.html) page for more information on how to sign up for an API key.   _Note_: Date of use can be in any unambiguous date format. 
     * @param id Specifies a unique batch transaction id to identify the report. (required)
     * @param reportUsageBatchRequest Specifies up to 1000 sets of asset Id, usage count, and date of use to submit usages for.               Note that all asset Ids specified must be valid or the operation will fail causing no usages to be recorded.               All dates must be on or before this date and the format should be ISO 8601 (ex: YYYY-MM-DD), time is not needed. (optional)
     * @return ApiResponse&lt;ReportUsageBatchResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Success - All usages reported were successfully recorded. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> InvalidRequest - The content of the request was invalid. Most commonly this is due to either too many assets specified, no assets or invalid JSON. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> AuthorizationTokenRequired - Authorization token was missing or not valid. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> UnauthorizedToReportUsage </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> TransactionIdDuplicated </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ReportUsageBatchResponse> v3UsageBatchesIdPutWithHttpInfo(String id, ReportUsageBatchRequest reportUsageBatchRequest) throws ApiException {
        okhttp3.Call localVarCall = v3UsageBatchesIdPutValidateBeforeCall(id, reportUsageBatchRequest, null);
        Type localVarReturnType = new TypeToken<ReportUsageBatchResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Report usage of assets via a batch format. (asynchronously)
     * # Report Usage  Use this endpoint to report the usages of a set of assets. The count of assets submitted in a single batch to this endpoint is limited to 1000. Note that all asset Ids specified must be valid or the operation will fail causing no usages to be recorded. In this case, you will need to remove the invalid asset Ids from the query request and re-submit the query.  ##  Quickstart  You&#39;ll need an API key and a [Resource Owner Grant](http://developers.gettyimages.com/en/authorization-faq.html) access token to use this resource. Please see our [Getting Started](http://developers.gettyimages.com/en/getting-started.html) page for more information on how to sign up for an API key.   _Note_: Date of use can be in any unambiguous date format. 
     * @param id Specifies a unique batch transaction id to identify the report. (required)
     * @param reportUsageBatchRequest Specifies up to 1000 sets of asset Id, usage count, and date of use to submit usages for.               Note that all asset Ids specified must be valid or the operation will fail causing no usages to be recorded.               All dates must be on or before this date and the format should be ISO 8601 (ex: YYYY-MM-DD), time is not needed. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Success - All usages reported were successfully recorded. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> InvalidRequest - The content of the request was invalid. Most commonly this is due to either too many assets specified, no assets or invalid JSON. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> AuthorizationTokenRequired - Authorization token was missing or not valid. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> UnauthorizedToReportUsage </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> TransactionIdDuplicated </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call v3UsageBatchesIdPutAsync(String id, ReportUsageBatchRequest reportUsageBatchRequest, final ApiCallback<ReportUsageBatchResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = v3UsageBatchesIdPutValidateBeforeCall(id, reportUsageBatchRequest, _callback);
        Type localVarReturnType = new TypeToken<ReportUsageBatchResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
