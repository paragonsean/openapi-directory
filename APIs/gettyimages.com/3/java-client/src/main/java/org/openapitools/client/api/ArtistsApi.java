/*
 * Getty Images
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 3
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiCallback;
import org.openapitools.client.ApiClient;
import org.openapitools.client.ApiException;
import org.openapitools.client.ApiResponse;
import org.openapitools.client.Configuration;
import org.openapitools.client.Pair;
import org.openapitools.client.ProgressRequestBody;
import org.openapitools.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import org.openapitools.client.model.ArtistsImageSearchFieldValues;
import org.openapitools.client.model.ArtistsVideoSearchFieldValues;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class ArtistsApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public ArtistsApi() {
        this(Configuration.getDefaultApiClient());
    }

    public ArtistsApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for v3ArtistsImagesGet
     * @param acceptLanguage Provide a header to specify the language of result values. Supported values: cs (iStock only), de, en-GB, en-US, es, fi (iStock only), fr, hu (iStock only), id (iStock only), it, ja, ko (creative assets only), nl, pl (creative assets only), pt-BR, pt-PT, ro (iStock only), ru (creative assets only), sv, th (iStock only), tr, uk (iStock only), vi (iStock only), zh-HK (creative assets only). (optional)
     * @param artistName Name of artist for desired images (optional)
     * @param fields Comma separated list of fields. Allows restricting which fields are returned. If no fields are selected, the summary_set of fields are returned. (optional)
     * @param page Identifies page to return. Default page is 1. (optional, default to 1)
     * @param pageSize Specifies page size. Default page_size is 10, maximum page_size is 100. (optional, default to 10)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> InvalidParameterValue </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call v3ArtistsImagesGetCall(String acceptLanguage, String artistName, List<ArtistsImageSearchFieldValues> fields, Integer page, Integer pageSize, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v3/artists/images";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (artistName != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("artist_name", artistName));
        }

        if (fields != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("csv", "fields", fields));
        }

        if (page != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("page", page));
        }

        if (pageSize != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("page_size", pageSize));
        }

        if (acceptLanguage != null) {
            localVarHeaderParams.put("Accept-Language", localVarApiClient.parameterToString(acceptLanguage));
        }

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "OAuth2", "OAuth2", "OAuth2", "OAuth2", "Api-Key" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call v3ArtistsImagesGetValidateBeforeCall(String acceptLanguage, String artistName, List<ArtistsImageSearchFieldValues> fields, Integer page, Integer pageSize, final ApiCallback _callback) throws ApiException {
        return v3ArtistsImagesGetCall(acceptLanguage, artistName, fields, page, pageSize, _callback);

    }

    /**
     * Search for images by a photographer
     * 
     * @param acceptLanguage Provide a header to specify the language of result values. Supported values: cs (iStock only), de, en-GB, en-US, es, fi (iStock only), fr, hu (iStock only), id (iStock only), it, ja, ko (creative assets only), nl, pl (creative assets only), pt-BR, pt-PT, ro (iStock only), ru (creative assets only), sv, th (iStock only), tr, uk (iStock only), vi (iStock only), zh-HK (creative assets only). (optional)
     * @param artistName Name of artist for desired images (optional)
     * @param fields Comma separated list of fields. Allows restricting which fields are returned. If no fields are selected, the summary_set of fields are returned. (optional)
     * @param page Identifies page to return. Default page is 1. (optional, default to 1)
     * @param pageSize Specifies page size. Default page_size is 10, maximum page_size is 100. (optional, default to 10)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> InvalidParameterValue </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
     </table>
     */
    public void v3ArtistsImagesGet(String acceptLanguage, String artistName, List<ArtistsImageSearchFieldValues> fields, Integer page, Integer pageSize) throws ApiException {
        v3ArtistsImagesGetWithHttpInfo(acceptLanguage, artistName, fields, page, pageSize);
    }

    /**
     * Search for images by a photographer
     * 
     * @param acceptLanguage Provide a header to specify the language of result values. Supported values: cs (iStock only), de, en-GB, en-US, es, fi (iStock only), fr, hu (iStock only), id (iStock only), it, ja, ko (creative assets only), nl, pl (creative assets only), pt-BR, pt-PT, ro (iStock only), ru (creative assets only), sv, th (iStock only), tr, uk (iStock only), vi (iStock only), zh-HK (creative assets only). (optional)
     * @param artistName Name of artist for desired images (optional)
     * @param fields Comma separated list of fields. Allows restricting which fields are returned. If no fields are selected, the summary_set of fields are returned. (optional)
     * @param page Identifies page to return. Default page is 1. (optional, default to 1)
     * @param pageSize Specifies page size. Default page_size is 10, maximum page_size is 100. (optional, default to 10)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> InvalidParameterValue </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> v3ArtistsImagesGetWithHttpInfo(String acceptLanguage, String artistName, List<ArtistsImageSearchFieldValues> fields, Integer page, Integer pageSize) throws ApiException {
        okhttp3.Call localVarCall = v3ArtistsImagesGetValidateBeforeCall(acceptLanguage, artistName, fields, page, pageSize, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Search for images by a photographer (asynchronously)
     * 
     * @param acceptLanguage Provide a header to specify the language of result values. Supported values: cs (iStock only), de, en-GB, en-US, es, fi (iStock only), fr, hu (iStock only), id (iStock only), it, ja, ko (creative assets only), nl, pl (creative assets only), pt-BR, pt-PT, ro (iStock only), ru (creative assets only), sv, th (iStock only), tr, uk (iStock only), vi (iStock only), zh-HK (creative assets only). (optional)
     * @param artistName Name of artist for desired images (optional)
     * @param fields Comma separated list of fields. Allows restricting which fields are returned. If no fields are selected, the summary_set of fields are returned. (optional)
     * @param page Identifies page to return. Default page is 1. (optional, default to 1)
     * @param pageSize Specifies page size. Default page_size is 10, maximum page_size is 100. (optional, default to 10)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> InvalidParameterValue </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call v3ArtistsImagesGetAsync(String acceptLanguage, String artistName, List<ArtistsImageSearchFieldValues> fields, Integer page, Integer pageSize, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = v3ArtistsImagesGetValidateBeforeCall(acceptLanguage, artistName, fields, page, pageSize, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for v3ArtistsVideosGet
     * @param acceptLanguage Provide a header to specify the language of result values. Supported values: cs (iStock only), de, en-GB, en-US, es, fi (iStock only), fr, hu (iStock only), id (iStock only), it, ja, ko (creative assets only), nl, pl (creative assets only), pt-BR, pt-PT, ro (iStock only), ru (creative assets only), sv, th (iStock only), tr, uk (iStock only), vi (iStock only), zh-HK (creative assets only). (optional)
     * @param artistName Name of artist for desired images (optional)
     * @param fields Comma separated list of fields. Allows restricting which fields are returned. If no fields are selected, the summary_set of fields are returned. (optional)
     * @param page Identifies page to return. Default page is 1. (optional, default to 1)
     * @param pageSize Specifies page size. Default page_size is 10, maximum page_size is 100. (optional, default to 10)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> InvalidParameterValue </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call v3ArtistsVideosGetCall(String acceptLanguage, String artistName, List<ArtistsVideoSearchFieldValues> fields, Integer page, Integer pageSize, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v3/artists/videos";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (artistName != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("artist_name", artistName));
        }

        if (fields != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("csv", "fields", fields));
        }

        if (page != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("page", page));
        }

        if (pageSize != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("page_size", pageSize));
        }

        if (acceptLanguage != null) {
            localVarHeaderParams.put("Accept-Language", localVarApiClient.parameterToString(acceptLanguage));
        }

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "OAuth2", "OAuth2", "OAuth2", "OAuth2", "Api-Key" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call v3ArtistsVideosGetValidateBeforeCall(String acceptLanguage, String artistName, List<ArtistsVideoSearchFieldValues> fields, Integer page, Integer pageSize, final ApiCallback _callback) throws ApiException {
        return v3ArtistsVideosGetCall(acceptLanguage, artistName, fields, page, pageSize, _callback);

    }

    /**
     * Search for videos by a photographer
     * 
     * @param acceptLanguage Provide a header to specify the language of result values. Supported values: cs (iStock only), de, en-GB, en-US, es, fi (iStock only), fr, hu (iStock only), id (iStock only), it, ja, ko (creative assets only), nl, pl (creative assets only), pt-BR, pt-PT, ro (iStock only), ru (creative assets only), sv, th (iStock only), tr, uk (iStock only), vi (iStock only), zh-HK (creative assets only). (optional)
     * @param artistName Name of artist for desired images (optional)
     * @param fields Comma separated list of fields. Allows restricting which fields are returned. If no fields are selected, the summary_set of fields are returned. (optional)
     * @param page Identifies page to return. Default page is 1. (optional, default to 1)
     * @param pageSize Specifies page size. Default page_size is 10, maximum page_size is 100. (optional, default to 10)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> InvalidParameterValue </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
     </table>
     */
    public void v3ArtistsVideosGet(String acceptLanguage, String artistName, List<ArtistsVideoSearchFieldValues> fields, Integer page, Integer pageSize) throws ApiException {
        v3ArtistsVideosGetWithHttpInfo(acceptLanguage, artistName, fields, page, pageSize);
    }

    /**
     * Search for videos by a photographer
     * 
     * @param acceptLanguage Provide a header to specify the language of result values. Supported values: cs (iStock only), de, en-GB, en-US, es, fi (iStock only), fr, hu (iStock only), id (iStock only), it, ja, ko (creative assets only), nl, pl (creative assets only), pt-BR, pt-PT, ro (iStock only), ru (creative assets only), sv, th (iStock only), tr, uk (iStock only), vi (iStock only), zh-HK (creative assets only). (optional)
     * @param artistName Name of artist for desired images (optional)
     * @param fields Comma separated list of fields. Allows restricting which fields are returned. If no fields are selected, the summary_set of fields are returned. (optional)
     * @param page Identifies page to return. Default page is 1. (optional, default to 1)
     * @param pageSize Specifies page size. Default page_size is 10, maximum page_size is 100. (optional, default to 10)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> InvalidParameterValue </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> v3ArtistsVideosGetWithHttpInfo(String acceptLanguage, String artistName, List<ArtistsVideoSearchFieldValues> fields, Integer page, Integer pageSize) throws ApiException {
        okhttp3.Call localVarCall = v3ArtistsVideosGetValidateBeforeCall(acceptLanguage, artistName, fields, page, pageSize, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Search for videos by a photographer (asynchronously)
     * 
     * @param acceptLanguage Provide a header to specify the language of result values. Supported values: cs (iStock only), de, en-GB, en-US, es, fi (iStock only), fr, hu (iStock only), id (iStock only), it, ja, ko (creative assets only), nl, pl (creative assets only), pt-BR, pt-PT, ro (iStock only), ru (creative assets only), sv, th (iStock only), tr, uk (iStock only), vi (iStock only), zh-HK (creative assets only). (optional)
     * @param artistName Name of artist for desired images (optional)
     * @param fields Comma separated list of fields. Allows restricting which fields are returned. If no fields are selected, the summary_set of fields are returned. (optional)
     * @param page Identifies page to return. Default page is 1. (optional, default to 1)
     * @param pageSize Specifies page size. Default page_size is 10, maximum page_size is 100. (optional, default to 10)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> InvalidParameterValue </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call v3ArtistsVideosGetAsync(String acceptLanguage, String artistName, List<ArtistsVideoSearchFieldValues> fields, Integer page, Integer pageSize, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = v3ArtistsVideosGetValidateBeforeCall(acceptLanguage, artistName, fields, page, pageSize, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
}
