/*
 * Getty Images
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 3
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.jackson.nullable.JsonNullable;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * DownloadRequirements
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T10:09:49.731753-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class DownloadRequirements {
  public static final String SERIALIZED_NAME_IS_NOTE_REQUIRED = "is_note_required";
  @SerializedName(SERIALIZED_NAME_IS_NOTE_REQUIRED)
  private Boolean isNoteRequired;

  public static final String SERIALIZED_NAME_IS_PROJECT_CODE_REQUIRED = "is_project_code_required";
  @SerializedName(SERIALIZED_NAME_IS_PROJECT_CODE_REQUIRED)
  private Boolean isProjectCodeRequired;

  public static final String SERIALIZED_NAME_PROJECT_CODES = "project_codes";
  @SerializedName(SERIALIZED_NAME_PROJECT_CODES)
  private List<String> projectCodes;

  public DownloadRequirements() {
  }

  public DownloadRequirements isNoteRequired(Boolean isNoteRequired) {
    this.isNoteRequired = isNoteRequired;
    return this;
  }

  /**
   * Get isNoteRequired
   * @return isNoteRequired
   */
  @javax.annotation.Nullable
  public Boolean getIsNoteRequired() {
    return isNoteRequired;
  }

  public void setIsNoteRequired(Boolean isNoteRequired) {
    this.isNoteRequired = isNoteRequired;
  }


  public DownloadRequirements isProjectCodeRequired(Boolean isProjectCodeRequired) {
    this.isProjectCodeRequired = isProjectCodeRequired;
    return this;
  }

  /**
   * Get isProjectCodeRequired
   * @return isProjectCodeRequired
   */
  @javax.annotation.Nullable
  public Boolean getIsProjectCodeRequired() {
    return isProjectCodeRequired;
  }

  public void setIsProjectCodeRequired(Boolean isProjectCodeRequired) {
    this.isProjectCodeRequired = isProjectCodeRequired;
  }


  public DownloadRequirements projectCodes(List<String> projectCodes) {
    this.projectCodes = projectCodes;
    return this;
  }

  public DownloadRequirements addProjectCodesItem(String projectCodesItem) {
    if (this.projectCodes == null) {
      this.projectCodes = new ArrayList<>();
    }
    this.projectCodes.add(projectCodesItem);
    return this;
  }

  /**
   * Get projectCodes
   * @return projectCodes
   */
  @javax.annotation.Nullable
  public List<String> getProjectCodes() {
    return projectCodes;
  }

  public void setProjectCodes(List<String> projectCodes) {
    this.projectCodes = projectCodes;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    DownloadRequirements downloadRequirements = (DownloadRequirements) o;
    return Objects.equals(this.isNoteRequired, downloadRequirements.isNoteRequired) &&
        Objects.equals(this.isProjectCodeRequired, downloadRequirements.isProjectCodeRequired) &&
        Objects.equals(this.projectCodes, downloadRequirements.projectCodes);
  }

  private static <T> boolean equalsNullable(JsonNullable<T> a, JsonNullable<T> b) {
    return a == b || (a != null && b != null && a.isPresent() && b.isPresent() && Objects.deepEquals(a.get(), b.get()));
  }

  @Override
  public int hashCode() {
    return Objects.hash(isNoteRequired, isProjectCodeRequired, projectCodes);
  }

  private static <T> int hashCodeNullable(JsonNullable<T> a) {
    if (a == null) {
      return 1;
    }
    return a.isPresent() ? Arrays.deepHashCode(new Object[]{a.get()}) : 31;
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class DownloadRequirements {\n");
    sb.append("    isNoteRequired: ").append(toIndentedString(isNoteRequired)).append("\n");
    sb.append("    isProjectCodeRequired: ").append(toIndentedString(isProjectCodeRequired)).append("\n");
    sb.append("    projectCodes: ").append(toIndentedString(projectCodes)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("is_note_required");
    openapiFields.add("is_project_code_required");
    openapiFields.add("project_codes");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to DownloadRequirements
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!DownloadRequirements.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in DownloadRequirements is not found in the empty JSON string", DownloadRequirements.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!DownloadRequirements.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `DownloadRequirements` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // ensure the optional json data is an array if present
      if (jsonObj.get("project_codes") != null && !jsonObj.get("project_codes").isJsonNull() && !jsonObj.get("project_codes").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `project_codes` to be an array in the JSON string but got `%s`", jsonObj.get("project_codes").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!DownloadRequirements.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'DownloadRequirements' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<DownloadRequirements> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(DownloadRequirements.class));

       return (TypeAdapter<T>) new TypeAdapter<DownloadRequirements>() {
           @Override
           public void write(JsonWriter out, DownloadRequirements value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public DownloadRequirements read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of DownloadRequirements given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of DownloadRequirements
   * @throws IOException if the JSON string is invalid with respect to DownloadRequirements
   */
  public static DownloadRequirements fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, DownloadRequirements.class);
  }

  /**
   * Convert an instance of DownloadRequirements to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

