/*
 * Getty Images
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 3
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.time.OffsetDateTime;
import java.util.Arrays;
import org.openapitools.jackson.nullable.JsonNullable;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * ChangedAssetDetail
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T10:09:49.731753-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class ChangedAssetDetail {
  public static final String SERIALIZED_NAME_ASSET_CHANGED_UTC_DATETIME = "asset_changed_utc_datetime";
  @SerializedName(SERIALIZED_NAME_ASSET_CHANGED_UTC_DATETIME)
  private OffsetDateTime assetChangedUtcDatetime;

  public static final String SERIALIZED_NAME_ASSET_LIFECYCLE = "asset_lifecycle";
  @SerializedName(SERIALIZED_NAME_ASSET_LIFECYCLE)
  private String assetLifecycle;

  public static final String SERIALIZED_NAME_ASSET_TYPE = "asset_type";
  @SerializedName(SERIALIZED_NAME_ASSET_TYPE)
  private String assetType;

  public static final String SERIALIZED_NAME_ID = "id";
  @SerializedName(SERIALIZED_NAME_ID)
  private String id;

  public static final String SERIALIZED_NAME_URI = "uri";
  @SerializedName(SERIALIZED_NAME_URI)
  private String uri;

  public ChangedAssetDetail() {
  }

  public ChangedAssetDetail assetChangedUtcDatetime(OffsetDateTime assetChangedUtcDatetime) {
    this.assetChangedUtcDatetime = assetChangedUtcDatetime;
    return this;
  }

  /**
   * Contains the date of the asset change.
   * @return assetChangedUtcDatetime
   */
  @javax.annotation.Nullable
  public OffsetDateTime getAssetChangedUtcDatetime() {
    return assetChangedUtcDatetime;
  }

  public void setAssetChangedUtcDatetime(OffsetDateTime assetChangedUtcDatetime) {
    this.assetChangedUtcDatetime = assetChangedUtcDatetime;
  }


  public ChangedAssetDetail assetLifecycle(String assetLifecycle) {
    this.assetLifecycle = assetLifecycle;
    return this;
  }

  /**
   * Contains the type of change this asset change is. (i.e. \&quot;New,\&quot; \&quot;Updated\&quot; or \&quot;Deleted\&quot;)
   * @return assetLifecycle
   */
  @javax.annotation.Nullable
  public String getAssetLifecycle() {
    return assetLifecycle;
  }

  public void setAssetLifecycle(String assetLifecycle) {
    this.assetLifecycle = assetLifecycle;
  }


  public ChangedAssetDetail assetType(String assetType) {
    this.assetType = assetType;
    return this;
  }

  /**
   * Contains the type of asset this asset change is (i.e. \&quot;Image\&quot;).
   * @return assetType
   */
  @javax.annotation.Nullable
  public String getAssetType() {
    return assetType;
  }

  public void setAssetType(String assetType) {
    this.assetType = assetType;
  }


  public ChangedAssetDetail id(String id) {
    this.id = id;
    return this;
  }

  /**
   * Contains the Id for the asset change.
   * @return id
   */
  @javax.annotation.Nullable
  public String getId() {
    return id;
  }

  public void setId(String id) {
    this.id = id;
  }


  public ChangedAssetDetail uri(String uri) {
    this.uri = uri;
    return this;
  }

  /**
   * Contains the asset download URL for assets with an AssetLifecycle of \&quot;New.\&quot;
   * @return uri
   */
  @javax.annotation.Nullable
  public String getUri() {
    return uri;
  }

  public void setUri(String uri) {
    this.uri = uri;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ChangedAssetDetail changedAssetDetail = (ChangedAssetDetail) o;
    return Objects.equals(this.assetChangedUtcDatetime, changedAssetDetail.assetChangedUtcDatetime) &&
        Objects.equals(this.assetLifecycle, changedAssetDetail.assetLifecycle) &&
        Objects.equals(this.assetType, changedAssetDetail.assetType) &&
        Objects.equals(this.id, changedAssetDetail.id) &&
        Objects.equals(this.uri, changedAssetDetail.uri);
  }

  private static <T> boolean equalsNullable(JsonNullable<T> a, JsonNullable<T> b) {
    return a == b || (a != null && b != null && a.isPresent() && b.isPresent() && Objects.deepEquals(a.get(), b.get()));
  }

  @Override
  public int hashCode() {
    return Objects.hash(assetChangedUtcDatetime, assetLifecycle, assetType, id, uri);
  }

  private static <T> int hashCodeNullable(JsonNullable<T> a) {
    if (a == null) {
      return 1;
    }
    return a.isPresent() ? Arrays.deepHashCode(new Object[]{a.get()}) : 31;
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ChangedAssetDetail {\n");
    sb.append("    assetChangedUtcDatetime: ").append(toIndentedString(assetChangedUtcDatetime)).append("\n");
    sb.append("    assetLifecycle: ").append(toIndentedString(assetLifecycle)).append("\n");
    sb.append("    assetType: ").append(toIndentedString(assetType)).append("\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    uri: ").append(toIndentedString(uri)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("asset_changed_utc_datetime");
    openapiFields.add("asset_lifecycle");
    openapiFields.add("asset_type");
    openapiFields.add("id");
    openapiFields.add("uri");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to ChangedAssetDetail
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!ChangedAssetDetail.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in ChangedAssetDetail is not found in the empty JSON string", ChangedAssetDetail.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!ChangedAssetDetail.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `ChangedAssetDetail` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("asset_lifecycle") != null && !jsonObj.get("asset_lifecycle").isJsonNull()) && !jsonObj.get("asset_lifecycle").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `asset_lifecycle` to be a primitive type in the JSON string but got `%s`", jsonObj.get("asset_lifecycle").toString()));
      }
      if ((jsonObj.get("asset_type") != null && !jsonObj.get("asset_type").isJsonNull()) && !jsonObj.get("asset_type").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `asset_type` to be a primitive type in the JSON string but got `%s`", jsonObj.get("asset_type").toString()));
      }
      if ((jsonObj.get("id") != null && !jsonObj.get("id").isJsonNull()) && !jsonObj.get("id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("id").toString()));
      }
      if ((jsonObj.get("uri") != null && !jsonObj.get("uri").isJsonNull()) && !jsonObj.get("uri").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `uri` to be a primitive type in the JSON string but got `%s`", jsonObj.get("uri").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!ChangedAssetDetail.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'ChangedAssetDetail' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<ChangedAssetDetail> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(ChangedAssetDetail.class));

       return (TypeAdapter<T>) new TypeAdapter<ChangedAssetDetail>() {
           @Override
           public void write(JsonWriter out, ChangedAssetDetail value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public ChangedAssetDetail read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of ChangedAssetDetail given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of ChangedAssetDetail
   * @throws IOException if the JSON string is invalid with respect to ChangedAssetDetail
   */
  public static ChangedAssetDetail fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, ChangedAssetDetail.class);
  }

  /**
   * Convert an instance of ChangedAssetDetail to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

