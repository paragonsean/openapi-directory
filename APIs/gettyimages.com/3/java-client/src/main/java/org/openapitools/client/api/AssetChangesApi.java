/*
 * Getty Images
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 3
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiCallback;
import org.openapitools.client.ApiClient;
import org.openapitools.client.ApiException;
import org.openapitools.client.ApiResponse;
import org.openapitools.client.Configuration;
import org.openapitools.client.Pair;
import org.openapitools.client.ProgressRequestBody;
import org.openapitools.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import org.openapitools.client.model.AssetChanges;
import org.openapitools.client.model.Channel;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class AssetChangesApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public AssetChangesApi() {
        this(Configuration.getDefaultApiClient());
    }

    public AssetChangesApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for v3AssetChangesChangeSetsChangeSetIdDelete
     * @param changeSetId Specify the change-set-id associated with a transaction resource whose receipt you want to confirm. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> InvalidChangeSetId </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Your access token does not authorize access to this resource </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Transaction was not found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call v3AssetChangesChangeSetsChangeSetIdDeleteCall(Long changeSetId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v3/asset-changes/change-sets/{change-set-id}"
            .replace("{" + "change-set-id" + "}", localVarApiClient.escapeString(changeSetId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "OAuth2", "OAuth2", "OAuth2", "OAuth2", "Api-Key" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call v3AssetChangesChangeSetsChangeSetIdDeleteValidateBeforeCall(Long changeSetId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'changeSetId' is set
        if (changeSetId == null) {
            throw new ApiException("Missing the required parameter 'changeSetId' when calling v3AssetChangesChangeSetsChangeSetIdDelete(Async)");
        }

        return v3AssetChangesChangeSetsChangeSetIdDeleteCall(changeSetId, _callback);

    }

    /**
     * Confirm asset change notifications.
     * # Delete Asset Changes  Confirm asset changes acknowledges receipt of asset changes (from the PUT asset-changes endpoint).  ##  Quickstart  You&#39;ll need an API key and an access token to use this resource.  Use the change_set_id from the PUT asset-changes/change-sets endpoint to confirm receipt of notifications. 
     * @param changeSetId Specify the change-set-id associated with a transaction resource whose receipt you want to confirm. (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> InvalidChangeSetId </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Your access token does not authorize access to this resource </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Transaction was not found </td><td>  -  </td></tr>
     </table>
     */
    public void v3AssetChangesChangeSetsChangeSetIdDelete(Long changeSetId) throws ApiException {
        v3AssetChangesChangeSetsChangeSetIdDeleteWithHttpInfo(changeSetId);
    }

    /**
     * Confirm asset change notifications.
     * # Delete Asset Changes  Confirm asset changes acknowledges receipt of asset changes (from the PUT asset-changes endpoint).  ##  Quickstart  You&#39;ll need an API key and an access token to use this resource.  Use the change_set_id from the PUT asset-changes/change-sets endpoint to confirm receipt of notifications. 
     * @param changeSetId Specify the change-set-id associated with a transaction resource whose receipt you want to confirm. (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> InvalidChangeSetId </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Your access token does not authorize access to this resource </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Transaction was not found </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> v3AssetChangesChangeSetsChangeSetIdDeleteWithHttpInfo(Long changeSetId) throws ApiException {
        okhttp3.Call localVarCall = v3AssetChangesChangeSetsChangeSetIdDeleteValidateBeforeCall(changeSetId, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Confirm asset change notifications. (asynchronously)
     * # Delete Asset Changes  Confirm asset changes acknowledges receipt of asset changes (from the PUT asset-changes endpoint).  ##  Quickstart  You&#39;ll need an API key and an access token to use this resource.  Use the change_set_id from the PUT asset-changes/change-sets endpoint to confirm receipt of notifications. 
     * @param changeSetId Specify the change-set-id associated with a transaction resource whose receipt you want to confirm. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> InvalidChangeSetId </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Your access token does not authorize access to this resource </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Transaction was not found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call v3AssetChangesChangeSetsChangeSetIdDeleteAsync(Long changeSetId, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = v3AssetChangesChangeSetsChangeSetIdDeleteValidateBeforeCall(changeSetId, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for v3AssetChangesChangeSetsPut
     * @param channelId Specifies the id of the channel for the asset data. Valid channel ids can be found in the results of the Get Partner Channel query. (optional)
     * @param batchSize Specifies the number of assets to return. The default is 2200; maximum is 2200. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success - Channel contains unconfirmed asset change notifications </td><td>  -  </td></tr>
        <tr><td> 201 </td><td> Created </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> InvalidChannelIdException </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Your access token does not authorize access to this resource </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The channel you specified does not exist </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call v3AssetChangesChangeSetsPutCall(Integer channelId, Integer batchSize, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v3/asset-changes/change-sets";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (channelId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("channel_id", channelId));
        }

        if (batchSize != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("batch_size", batchSize));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "OAuth2", "OAuth2", "OAuth2", "OAuth2", "Api-Key" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call v3AssetChangesChangeSetsPutValidateBeforeCall(Integer channelId, Integer batchSize, final ApiCallback _callback) throws ApiException {
        return v3AssetChangesChangeSetsPutCall(channelId, batchSize, _callback);

    }

    /**
     * Get asset change notifications.
     * # Asset Changes  Get notifications about new, updated or deleted assets for a specific channel.  ##  Quickstart  You&#39;ll need an API key and an access token to use this resource.   Maximum batch size is 2200.  Change-sets must be confirmed before a new batch of notifications can be retrieved from this endpoint. Use the DELETE asset-changes/change-sets/{change-set-id} endpoint to confirm reciept of these notifications.  Values returned for asset_type include Image, Film, and null. Values returned for asset_lifecycle include New, Update, and Delete.  Delete notifications may be provided for asset ids that have not previously been received as New or Update notifications. Delete notifications may return null for the asset_type.  If there are no notifications in the channel an empty response body will be returned.  Notifications older than 60 days will be removed from partner channels. 
     * @param channelId Specifies the id of the channel for the asset data. Valid channel ids can be found in the results of the Get Partner Channel query. (optional)
     * @param batchSize Specifies the number of assets to return. The default is 2200; maximum is 2200. (optional)
     * @return AssetChanges
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success - Channel contains unconfirmed asset change notifications </td><td>  -  </td></tr>
        <tr><td> 201 </td><td> Created </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> InvalidChannelIdException </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Your access token does not authorize access to this resource </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The channel you specified does not exist </td><td>  -  </td></tr>
     </table>
     */
    public AssetChanges v3AssetChangesChangeSetsPut(Integer channelId, Integer batchSize) throws ApiException {
        ApiResponse<AssetChanges> localVarResp = v3AssetChangesChangeSetsPutWithHttpInfo(channelId, batchSize);
        return localVarResp.getData();
    }

    /**
     * Get asset change notifications.
     * # Asset Changes  Get notifications about new, updated or deleted assets for a specific channel.  ##  Quickstart  You&#39;ll need an API key and an access token to use this resource.   Maximum batch size is 2200.  Change-sets must be confirmed before a new batch of notifications can be retrieved from this endpoint. Use the DELETE asset-changes/change-sets/{change-set-id} endpoint to confirm reciept of these notifications.  Values returned for asset_type include Image, Film, and null. Values returned for asset_lifecycle include New, Update, and Delete.  Delete notifications may be provided for asset ids that have not previously been received as New or Update notifications. Delete notifications may return null for the asset_type.  If there are no notifications in the channel an empty response body will be returned.  Notifications older than 60 days will be removed from partner channels. 
     * @param channelId Specifies the id of the channel for the asset data. Valid channel ids can be found in the results of the Get Partner Channel query. (optional)
     * @param batchSize Specifies the number of assets to return. The default is 2200; maximum is 2200. (optional)
     * @return ApiResponse&lt;AssetChanges&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success - Channel contains unconfirmed asset change notifications </td><td>  -  </td></tr>
        <tr><td> 201 </td><td> Created </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> InvalidChannelIdException </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Your access token does not authorize access to this resource </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The channel you specified does not exist </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<AssetChanges> v3AssetChangesChangeSetsPutWithHttpInfo(Integer channelId, Integer batchSize) throws ApiException {
        okhttp3.Call localVarCall = v3AssetChangesChangeSetsPutValidateBeforeCall(channelId, batchSize, null);
        Type localVarReturnType = new TypeToken<AssetChanges>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get asset change notifications. (asynchronously)
     * # Asset Changes  Get notifications about new, updated or deleted assets for a specific channel.  ##  Quickstart  You&#39;ll need an API key and an access token to use this resource.   Maximum batch size is 2200.  Change-sets must be confirmed before a new batch of notifications can be retrieved from this endpoint. Use the DELETE asset-changes/change-sets/{change-set-id} endpoint to confirm reciept of these notifications.  Values returned for asset_type include Image, Film, and null. Values returned for asset_lifecycle include New, Update, and Delete.  Delete notifications may be provided for asset ids that have not previously been received as New or Update notifications. Delete notifications may return null for the asset_type.  If there are no notifications in the channel an empty response body will be returned.  Notifications older than 60 days will be removed from partner channels. 
     * @param channelId Specifies the id of the channel for the asset data. Valid channel ids can be found in the results of the Get Partner Channel query. (optional)
     * @param batchSize Specifies the number of assets to return. The default is 2200; maximum is 2200. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success - Channel contains unconfirmed asset change notifications </td><td>  -  </td></tr>
        <tr><td> 201 </td><td> Created </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> InvalidChannelIdException </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Your access token does not authorize access to this resource </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The channel you specified does not exist </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call v3AssetChangesChangeSetsPutAsync(Integer channelId, Integer batchSize, final ApiCallback<AssetChanges> _callback) throws ApiException {

        okhttp3.Call localVarCall = v3AssetChangesChangeSetsPutValidateBeforeCall(channelId, batchSize, _callback);
        Type localVarReturnType = new TypeToken<AssetChanges>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for v3AssetChangesChannelsGet
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> UnauthorizedToAccessResource </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> ChannelsNotFound </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call v3AssetChangesChannelsGetCall(final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v3/asset-changes/channels";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "OAuth2", "OAuth2", "OAuth2", "OAuth2", "Api-Key" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call v3AssetChangesChannelsGetValidateBeforeCall(final ApiCallback _callback) throws ApiException {
        return v3AssetChangesChannelsGetCall(_callback);

    }

    /**
     * Get a list of asset change notification channels.
     * # Get Partner Channels  Retrieves the channel data for the partner. This data can be used to populate the channel_id parameter in the Put Asset Changes query.  ##  Quickstart  You&#39;ll need an API key and an access token to use this resource.  Partners who have a channel that has been removed should contact their sales representative to be set up again.  
     * @return List&lt;Channel&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> UnauthorizedToAccessResource </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> ChannelsNotFound </td><td>  -  </td></tr>
     </table>
     */
    public List<Channel> v3AssetChangesChannelsGet() throws ApiException {
        ApiResponse<List<Channel>> localVarResp = v3AssetChangesChannelsGetWithHttpInfo();
        return localVarResp.getData();
    }

    /**
     * Get a list of asset change notification channels.
     * # Get Partner Channels  Retrieves the channel data for the partner. This data can be used to populate the channel_id parameter in the Put Asset Changes query.  ##  Quickstart  You&#39;ll need an API key and an access token to use this resource.  Partners who have a channel that has been removed should contact their sales representative to be set up again.  
     * @return ApiResponse&lt;List&lt;Channel&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> UnauthorizedToAccessResource </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> ChannelsNotFound </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<Channel>> v3AssetChangesChannelsGetWithHttpInfo() throws ApiException {
        okhttp3.Call localVarCall = v3AssetChangesChannelsGetValidateBeforeCall(null);
        Type localVarReturnType = new TypeToken<List<Channel>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get a list of asset change notification channels. (asynchronously)
     * # Get Partner Channels  Retrieves the channel data for the partner. This data can be used to populate the channel_id parameter in the Put Asset Changes query.  ##  Quickstart  You&#39;ll need an API key and an access token to use this resource.  Partners who have a channel that has been removed should contact their sales representative to be set up again.  
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> UnauthorizedToAccessResource </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> ChannelsNotFound </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call v3AssetChangesChannelsGetAsync(final ApiCallback<List<Channel>> _callback) throws ApiException {

        okhttp3.Call localVarCall = v3AssetChangesChannelsGetValidateBeforeCall(_callback);
        Type localVarReturnType = new TypeToken<List<Channel>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
