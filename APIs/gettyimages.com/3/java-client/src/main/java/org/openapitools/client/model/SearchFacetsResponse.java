/*
 * Getty Images
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 3
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.Artist;
import org.openapitools.client.model.Entertainment;
import org.openapitools.client.model.FacetEvent;
import org.openapitools.client.model.Location;
import org.openapitools.client.model.SpecificPeople;
import org.openapitools.jackson.nullable.JsonNullable;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * SearchFacetsResponse
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T10:09:49.731753-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class SearchFacetsResponse {
  public static final String SERIALIZED_NAME_ARTISTS = "artists";
  @SerializedName(SERIALIZED_NAME_ARTISTS)
  private List<Artist> artists;

  public static final String SERIALIZED_NAME_ENTERTAINMENT = "entertainment";
  @SerializedName(SERIALIZED_NAME_ENTERTAINMENT)
  private List<Entertainment> entertainment;

  public static final String SERIALIZED_NAME_EVENTS = "events";
  @SerializedName(SERIALIZED_NAME_EVENTS)
  private List<FacetEvent> events;

  public static final String SERIALIZED_NAME_LOCATIONS = "locations";
  @SerializedName(SERIALIZED_NAME_LOCATIONS)
  private List<Location> locations;

  public static final String SERIALIZED_NAME_SPECIFIC_PEOPLE = "specific_people";
  @SerializedName(SERIALIZED_NAME_SPECIFIC_PEOPLE)
  private List<SpecificPeople> specificPeople;

  public SearchFacetsResponse() {
  }

  public SearchFacetsResponse artists(List<Artist> artists) {
    this.artists = artists;
    return this;
  }

  public SearchFacetsResponse addArtistsItem(Artist artistsItem) {
    if (this.artists == null) {
      this.artists = new ArrayList<>();
    }
    this.artists.add(artistsItem);
    return this;
  }

  /**
   * Get artists
   * @return artists
   */
  @javax.annotation.Nullable
  public List<Artist> getArtists() {
    return artists;
  }

  public void setArtists(List<Artist> artists) {
    this.artists = artists;
  }


  public SearchFacetsResponse entertainment(List<Entertainment> entertainment) {
    this.entertainment = entertainment;
    return this;
  }

  public SearchFacetsResponse addEntertainmentItem(Entertainment entertainmentItem) {
    if (this.entertainment == null) {
      this.entertainment = new ArrayList<>();
    }
    this.entertainment.add(entertainmentItem);
    return this;
  }

  /**
   * Get entertainment
   * @return entertainment
   */
  @javax.annotation.Nullable
  public List<Entertainment> getEntertainment() {
    return entertainment;
  }

  public void setEntertainment(List<Entertainment> entertainment) {
    this.entertainment = entertainment;
  }


  public SearchFacetsResponse events(List<FacetEvent> events) {
    this.events = events;
    return this;
  }

  public SearchFacetsResponse addEventsItem(FacetEvent eventsItem) {
    if (this.events == null) {
      this.events = new ArrayList<>();
    }
    this.events.add(eventsItem);
    return this;
  }

  /**
   * Get events
   * @return events
   */
  @javax.annotation.Nullable
  public List<FacetEvent> getEvents() {
    return events;
  }

  public void setEvents(List<FacetEvent> events) {
    this.events = events;
  }


  public SearchFacetsResponse locations(List<Location> locations) {
    this.locations = locations;
    return this;
  }

  public SearchFacetsResponse addLocationsItem(Location locationsItem) {
    if (this.locations == null) {
      this.locations = new ArrayList<>();
    }
    this.locations.add(locationsItem);
    return this;
  }

  /**
   * Get locations
   * @return locations
   */
  @javax.annotation.Nullable
  public List<Location> getLocations() {
    return locations;
  }

  public void setLocations(List<Location> locations) {
    this.locations = locations;
  }


  public SearchFacetsResponse specificPeople(List<SpecificPeople> specificPeople) {
    this.specificPeople = specificPeople;
    return this;
  }

  public SearchFacetsResponse addSpecificPeopleItem(SpecificPeople specificPeopleItem) {
    if (this.specificPeople == null) {
      this.specificPeople = new ArrayList<>();
    }
    this.specificPeople.add(specificPeopleItem);
    return this;
  }

  /**
   * Get specificPeople
   * @return specificPeople
   */
  @javax.annotation.Nullable
  public List<SpecificPeople> getSpecificPeople() {
    return specificPeople;
  }

  public void setSpecificPeople(List<SpecificPeople> specificPeople) {
    this.specificPeople = specificPeople;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    SearchFacetsResponse searchFacetsResponse = (SearchFacetsResponse) o;
    return Objects.equals(this.artists, searchFacetsResponse.artists) &&
        Objects.equals(this.entertainment, searchFacetsResponse.entertainment) &&
        Objects.equals(this.events, searchFacetsResponse.events) &&
        Objects.equals(this.locations, searchFacetsResponse.locations) &&
        Objects.equals(this.specificPeople, searchFacetsResponse.specificPeople);
  }

  private static <T> boolean equalsNullable(JsonNullable<T> a, JsonNullable<T> b) {
    return a == b || (a != null && b != null && a.isPresent() && b.isPresent() && Objects.deepEquals(a.get(), b.get()));
  }

  @Override
  public int hashCode() {
    return Objects.hash(artists, entertainment, events, locations, specificPeople);
  }

  private static <T> int hashCodeNullable(JsonNullable<T> a) {
    if (a == null) {
      return 1;
    }
    return a.isPresent() ? Arrays.deepHashCode(new Object[]{a.get()}) : 31;
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class SearchFacetsResponse {\n");
    sb.append("    artists: ").append(toIndentedString(artists)).append("\n");
    sb.append("    entertainment: ").append(toIndentedString(entertainment)).append("\n");
    sb.append("    events: ").append(toIndentedString(events)).append("\n");
    sb.append("    locations: ").append(toIndentedString(locations)).append("\n");
    sb.append("    specificPeople: ").append(toIndentedString(specificPeople)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("artists");
    openapiFields.add("entertainment");
    openapiFields.add("events");
    openapiFields.add("locations");
    openapiFields.add("specific_people");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to SearchFacetsResponse
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!SearchFacetsResponse.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in SearchFacetsResponse is not found in the empty JSON string", SearchFacetsResponse.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!SearchFacetsResponse.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `SearchFacetsResponse` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if (jsonObj.get("artists") != null && !jsonObj.get("artists").isJsonNull()) {
        JsonArray jsonArrayartists = jsonObj.getAsJsonArray("artists");
        if (jsonArrayartists != null) {
          // ensure the json data is an array
          if (!jsonObj.get("artists").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `artists` to be an array in the JSON string but got `%s`", jsonObj.get("artists").toString()));
          }

          // validate the optional field `artists` (array)
          for (int i = 0; i < jsonArrayartists.size(); i++) {
            Artist.validateJsonElement(jsonArrayartists.get(i));
          };
        }
      }
      if (jsonObj.get("entertainment") != null && !jsonObj.get("entertainment").isJsonNull()) {
        JsonArray jsonArrayentertainment = jsonObj.getAsJsonArray("entertainment");
        if (jsonArrayentertainment != null) {
          // ensure the json data is an array
          if (!jsonObj.get("entertainment").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `entertainment` to be an array in the JSON string but got `%s`", jsonObj.get("entertainment").toString()));
          }

          // validate the optional field `entertainment` (array)
          for (int i = 0; i < jsonArrayentertainment.size(); i++) {
            Entertainment.validateJsonElement(jsonArrayentertainment.get(i));
          };
        }
      }
      if (jsonObj.get("events") != null && !jsonObj.get("events").isJsonNull()) {
        JsonArray jsonArrayevents = jsonObj.getAsJsonArray("events");
        if (jsonArrayevents != null) {
          // ensure the json data is an array
          if (!jsonObj.get("events").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `events` to be an array in the JSON string but got `%s`", jsonObj.get("events").toString()));
          }

          // validate the optional field `events` (array)
          for (int i = 0; i < jsonArrayevents.size(); i++) {
            FacetEvent.validateJsonElement(jsonArrayevents.get(i));
          };
        }
      }
      if (jsonObj.get("locations") != null && !jsonObj.get("locations").isJsonNull()) {
        JsonArray jsonArraylocations = jsonObj.getAsJsonArray("locations");
        if (jsonArraylocations != null) {
          // ensure the json data is an array
          if (!jsonObj.get("locations").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `locations` to be an array in the JSON string but got `%s`", jsonObj.get("locations").toString()));
          }

          // validate the optional field `locations` (array)
          for (int i = 0; i < jsonArraylocations.size(); i++) {
            Location.validateJsonElement(jsonArraylocations.get(i));
          };
        }
      }
      if (jsonObj.get("specific_people") != null && !jsonObj.get("specific_people").isJsonNull()) {
        JsonArray jsonArrayspecificPeople = jsonObj.getAsJsonArray("specific_people");
        if (jsonArrayspecificPeople != null) {
          // ensure the json data is an array
          if (!jsonObj.get("specific_people").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `specific_people` to be an array in the JSON string but got `%s`", jsonObj.get("specific_people").toString()));
          }

          // validate the optional field `specific_people` (array)
          for (int i = 0; i < jsonArrayspecificPeople.size(); i++) {
            SpecificPeople.validateJsonElement(jsonArrayspecificPeople.get(i));
          };
        }
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!SearchFacetsResponse.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'SearchFacetsResponse' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<SearchFacetsResponse> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(SearchFacetsResponse.class));

       return (TypeAdapter<T>) new TypeAdapter<SearchFacetsResponse>() {
           @Override
           public void write(JsonWriter out, SearchFacetsResponse value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public SearchFacetsResponse read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of SearchFacetsResponse given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of SearchFacetsResponse
   * @throws IOException if the JSON string is invalid with respect to SearchFacetsResponse
   */
  public static SearchFacetsResponse fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, SearchFacetsResponse.class);
  }

  /**
   * Convert an instance of SearchFacetsResponse to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

