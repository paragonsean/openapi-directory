/*
 * Getty Images
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 3
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiCallback;
import org.openapitools.client.ApiClient;
import org.openapitools.client.ApiException;
import org.openapitools.client.ApiResponse;
import org.openapitools.client.Configuration;
import org.openapitools.client.Pair;
import org.openapitools.client.ProgressRequestBody;
import org.openapitools.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import org.openapitools.client.model.AddBoardAssetsResult;
import org.openapitools.client.model.BoardAsset;
import org.openapitools.client.model.BoardCreated;
import org.openapitools.client.model.BoardDetail;
import org.openapitools.client.model.BoardInfo;
import org.openapitools.client.model.BoardList;
import org.openapitools.client.model.BoardRelationship;
import org.openapitools.client.model.BoardSortOrder;
import org.openapitools.client.model.CommentCreated;
import org.openapitools.client.model.CommentRequest;
import org.openapitools.client.model.CommentsList;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class BoardsApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public BoardsApi() {
        this(Configuration.getDefaultApiClient());
    }

    public BoardsApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for v3BoardsBoardIdAssetsAssetIdDelete
     * @param boardId Specify the board to remove an asset from. (required)
     * @param assetId Specify the asset to remove from the board. (required)
     * @param acceptLanguage Provide a header to specify the language of result values. Supported values: cs (iStock only), de, en-GB, en-US, es, fi (iStock only), fr, hu (iStock only), id (iStock only), it, ja, ko (creative assets only), nl, pl (creative assets only), pt-BR, pt-PT, ro (iStock only), ru (creative assets only), sv, th (iStock only), tr, uk (iStock only), vi (iStock only), zh-HK (creative assets only). (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> InvalidParameterValue </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> InsufficientAccess </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> BoardNotFound </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call v3BoardsBoardIdAssetsAssetIdDeleteCall(String boardId, String assetId, String acceptLanguage, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v3/boards/{board_id}/assets/{asset_id}"
            .replace("{" + "board_id" + "}", localVarApiClient.escapeString(boardId.toString()))
            .replace("{" + "asset_id" + "}", localVarApiClient.escapeString(assetId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (acceptLanguage != null) {
            localVarHeaderParams.put("Accept-Language", localVarApiClient.parameterToString(acceptLanguage));
        }

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "OAuth2", "OAuth2", "OAuth2", "OAuth2", "Api-Key" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call v3BoardsBoardIdAssetsAssetIdDeleteValidateBeforeCall(String boardId, String assetId, String acceptLanguage, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'boardId' is set
        if (boardId == null) {
            throw new ApiException("Missing the required parameter 'boardId' when calling v3BoardsBoardIdAssetsAssetIdDelete(Async)");
        }

        // verify the required parameter 'assetId' is set
        if (assetId == null) {
            throw new ApiException("Missing the required parameter 'assetId' when calling v3BoardsBoardIdAssetsAssetIdDelete(Async)");
        }

        return v3BoardsBoardIdAssetsAssetIdDeleteCall(boardId, assetId, acceptLanguage, _callback);

    }

    /**
     * Remove an asset from a board
     * 
     * @param boardId Specify the board to remove an asset from. (required)
     * @param assetId Specify the asset to remove from the board. (required)
     * @param acceptLanguage Provide a header to specify the language of result values. Supported values: cs (iStock only), de, en-GB, en-US, es, fi (iStock only), fr, hu (iStock only), id (iStock only), it, ja, ko (creative assets only), nl, pl (creative assets only), pt-BR, pt-PT, ro (iStock only), ru (creative assets only), sv, th (iStock only), tr, uk (iStock only), vi (iStock only), zh-HK (creative assets only). (optional)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> InvalidParameterValue </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> InsufficientAccess </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> BoardNotFound </td><td>  -  </td></tr>
     </table>
     */
    public void v3BoardsBoardIdAssetsAssetIdDelete(String boardId, String assetId, String acceptLanguage) throws ApiException {
        v3BoardsBoardIdAssetsAssetIdDeleteWithHttpInfo(boardId, assetId, acceptLanguage);
    }

    /**
     * Remove an asset from a board
     * 
     * @param boardId Specify the board to remove an asset from. (required)
     * @param assetId Specify the asset to remove from the board. (required)
     * @param acceptLanguage Provide a header to specify the language of result values. Supported values: cs (iStock only), de, en-GB, en-US, es, fi (iStock only), fr, hu (iStock only), id (iStock only), it, ja, ko (creative assets only), nl, pl (creative assets only), pt-BR, pt-PT, ro (iStock only), ru (creative assets only), sv, th (iStock only), tr, uk (iStock only), vi (iStock only), zh-HK (creative assets only). (optional)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> InvalidParameterValue </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> InsufficientAccess </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> BoardNotFound </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> v3BoardsBoardIdAssetsAssetIdDeleteWithHttpInfo(String boardId, String assetId, String acceptLanguage) throws ApiException {
        okhttp3.Call localVarCall = v3BoardsBoardIdAssetsAssetIdDeleteValidateBeforeCall(boardId, assetId, acceptLanguage, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Remove an asset from a board (asynchronously)
     * 
     * @param boardId Specify the board to remove an asset from. (required)
     * @param assetId Specify the asset to remove from the board. (required)
     * @param acceptLanguage Provide a header to specify the language of result values. Supported values: cs (iStock only), de, en-GB, en-US, es, fi (iStock only), fr, hu (iStock only), id (iStock only), it, ja, ko (creative assets only), nl, pl (creative assets only), pt-BR, pt-PT, ro (iStock only), ru (creative assets only), sv, th (iStock only), tr, uk (iStock only), vi (iStock only), zh-HK (creative assets only). (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> InvalidParameterValue </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> InsufficientAccess </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> BoardNotFound </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call v3BoardsBoardIdAssetsAssetIdDeleteAsync(String boardId, String assetId, String acceptLanguage, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = v3BoardsBoardIdAssetsAssetIdDeleteValidateBeforeCall(boardId, assetId, acceptLanguage, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for v3BoardsBoardIdAssetsAssetIdPut
     * @param boardId Specify the board to add an asset to. (required)
     * @param assetId Specify the asset to add to the board. If it is already in the board&#39;s asset collection, no action is taken. (required)
     * @param acceptLanguage Provide a header to specify the language of result values. Supported values: cs (iStock only), de, en-GB, en-US, es, fi (iStock only), fr, hu (iStock only), id (iStock only), it, ja, ko (creative assets only), nl, pl (creative assets only), pt-BR, pt-PT, ro (iStock only), ru (creative assets only), sv, th (iStock only), tr, uk (iStock only), vi (iStock only), zh-HK (creative assets only). (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Created </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> InvalidParameterValue </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> AssetNotFound </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> BoardNotFound </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call v3BoardsBoardIdAssetsAssetIdPutCall(String boardId, String assetId, String acceptLanguage, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v3/boards/{board_id}/assets/{asset_id}"
            .replace("{" + "board_id" + "}", localVarApiClient.escapeString(boardId.toString()))
            .replace("{" + "asset_id" + "}", localVarApiClient.escapeString(assetId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (acceptLanguage != null) {
            localVarHeaderParams.put("Accept-Language", localVarApiClient.parameterToString(acceptLanguage));
        }

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "OAuth2", "OAuth2", "OAuth2", "OAuth2", "Api-Key" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call v3BoardsBoardIdAssetsAssetIdPutValidateBeforeCall(String boardId, String assetId, String acceptLanguage, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'boardId' is set
        if (boardId == null) {
            throw new ApiException("Missing the required parameter 'boardId' when calling v3BoardsBoardIdAssetsAssetIdPut(Async)");
        }

        // verify the required parameter 'assetId' is set
        if (assetId == null) {
            throw new ApiException("Missing the required parameter 'assetId' when calling v3BoardsBoardIdAssetsAssetIdPut(Async)");
        }

        return v3BoardsBoardIdAssetsAssetIdPutCall(boardId, assetId, acceptLanguage, _callback);

    }

    /**
     * Add an asset to a board
     * 
     * @param boardId Specify the board to add an asset to. (required)
     * @param assetId Specify the asset to add to the board. If it is already in the board&#39;s asset collection, no action is taken. (required)
     * @param acceptLanguage Provide a header to specify the language of result values. Supported values: cs (iStock only), de, en-GB, en-US, es, fi (iStock only), fr, hu (iStock only), id (iStock only), it, ja, ko (creative assets only), nl, pl (creative assets only), pt-BR, pt-PT, ro (iStock only), ru (creative assets only), sv, th (iStock only), tr, uk (iStock only), vi (iStock only), zh-HK (creative assets only). (optional)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Created </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> InvalidParameterValue </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> AssetNotFound </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> BoardNotFound </td><td>  -  </td></tr>
     </table>
     */
    public void v3BoardsBoardIdAssetsAssetIdPut(String boardId, String assetId, String acceptLanguage) throws ApiException {
        v3BoardsBoardIdAssetsAssetIdPutWithHttpInfo(boardId, assetId, acceptLanguage);
    }

    /**
     * Add an asset to a board
     * 
     * @param boardId Specify the board to add an asset to. (required)
     * @param assetId Specify the asset to add to the board. If it is already in the board&#39;s asset collection, no action is taken. (required)
     * @param acceptLanguage Provide a header to specify the language of result values. Supported values: cs (iStock only), de, en-GB, en-US, es, fi (iStock only), fr, hu (iStock only), id (iStock only), it, ja, ko (creative assets only), nl, pl (creative assets only), pt-BR, pt-PT, ro (iStock only), ru (creative assets only), sv, th (iStock only), tr, uk (iStock only), vi (iStock only), zh-HK (creative assets only). (optional)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Created </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> InvalidParameterValue </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> AssetNotFound </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> BoardNotFound </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> v3BoardsBoardIdAssetsAssetIdPutWithHttpInfo(String boardId, String assetId, String acceptLanguage) throws ApiException {
        okhttp3.Call localVarCall = v3BoardsBoardIdAssetsAssetIdPutValidateBeforeCall(boardId, assetId, acceptLanguage, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Add an asset to a board (asynchronously)
     * 
     * @param boardId Specify the board to add an asset to. (required)
     * @param assetId Specify the asset to add to the board. If it is already in the board&#39;s asset collection, no action is taken. (required)
     * @param acceptLanguage Provide a header to specify the language of result values. Supported values: cs (iStock only), de, en-GB, en-US, es, fi (iStock only), fr, hu (iStock only), id (iStock only), it, ja, ko (creative assets only), nl, pl (creative assets only), pt-BR, pt-PT, ro (iStock only), ru (creative assets only), sv, th (iStock only), tr, uk (iStock only), vi (iStock only), zh-HK (creative assets only). (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Created </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> InvalidParameterValue </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> AssetNotFound </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> BoardNotFound </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call v3BoardsBoardIdAssetsAssetIdPutAsync(String boardId, String assetId, String acceptLanguage, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = v3BoardsBoardIdAssetsAssetIdPutValidateBeforeCall(boardId, assetId, acceptLanguage, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for v3BoardsBoardIdAssetsDelete
     * @param boardId Specify the board to remove assets from. (required)
     * @param acceptLanguage Provide a header to specify the language of result values. Supported values: cs (iStock only), de, en-GB, en-US, es, fi (iStock only), fr, hu (iStock only), id (iStock only), it, ja, ko (creative assets only), nl, pl (creative assets only), pt-BR, pt-PT, ro (iStock only), ru (creative assets only), sv, th (iStock only), tr, uk (iStock only), vi (iStock only), zh-HK (creative assets only). (optional)
     * @param assetIds List the assets to be removed from the board. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> InvalidParameterValue </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> InsufficientAccess </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> BoardNotFound </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call v3BoardsBoardIdAssetsDeleteCall(String boardId, String acceptLanguage, List<String> assetIds, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v3/boards/{board_id}/assets"
            .replace("{" + "board_id" + "}", localVarApiClient.escapeString(boardId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (assetIds != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "asset_ids", assetIds));
        }

        if (acceptLanguage != null) {
            localVarHeaderParams.put("Accept-Language", localVarApiClient.parameterToString(acceptLanguage));
        }

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "OAuth2", "OAuth2", "OAuth2", "OAuth2", "Api-Key" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call v3BoardsBoardIdAssetsDeleteValidateBeforeCall(String boardId, String acceptLanguage, List<String> assetIds, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'boardId' is set
        if (boardId == null) {
            throw new ApiException("Missing the required parameter 'boardId' when calling v3BoardsBoardIdAssetsDelete(Async)");
        }

        return v3BoardsBoardIdAssetsDeleteCall(boardId, acceptLanguage, assetIds, _callback);

    }

    /**
     * Remove assets from a board
     * 
     * @param boardId Specify the board to remove assets from. (required)
     * @param acceptLanguage Provide a header to specify the language of result values. Supported values: cs (iStock only), de, en-GB, en-US, es, fi (iStock only), fr, hu (iStock only), id (iStock only), it, ja, ko (creative assets only), nl, pl (creative assets only), pt-BR, pt-PT, ro (iStock only), ru (creative assets only), sv, th (iStock only), tr, uk (iStock only), vi (iStock only), zh-HK (creative assets only). (optional)
     * @param assetIds List the assets to be removed from the board. (optional)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> InvalidParameterValue </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> InsufficientAccess </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> BoardNotFound </td><td>  -  </td></tr>
     </table>
     */
    public void v3BoardsBoardIdAssetsDelete(String boardId, String acceptLanguage, List<String> assetIds) throws ApiException {
        v3BoardsBoardIdAssetsDeleteWithHttpInfo(boardId, acceptLanguage, assetIds);
    }

    /**
     * Remove assets from a board
     * 
     * @param boardId Specify the board to remove assets from. (required)
     * @param acceptLanguage Provide a header to specify the language of result values. Supported values: cs (iStock only), de, en-GB, en-US, es, fi (iStock only), fr, hu (iStock only), id (iStock only), it, ja, ko (creative assets only), nl, pl (creative assets only), pt-BR, pt-PT, ro (iStock only), ru (creative assets only), sv, th (iStock only), tr, uk (iStock only), vi (iStock only), zh-HK (creative assets only). (optional)
     * @param assetIds List the assets to be removed from the board. (optional)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> InvalidParameterValue </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> InsufficientAccess </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> BoardNotFound </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> v3BoardsBoardIdAssetsDeleteWithHttpInfo(String boardId, String acceptLanguage, List<String> assetIds) throws ApiException {
        okhttp3.Call localVarCall = v3BoardsBoardIdAssetsDeleteValidateBeforeCall(boardId, acceptLanguage, assetIds, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Remove assets from a board (asynchronously)
     * 
     * @param boardId Specify the board to remove assets from. (required)
     * @param acceptLanguage Provide a header to specify the language of result values. Supported values: cs (iStock only), de, en-GB, en-US, es, fi (iStock only), fr, hu (iStock only), id (iStock only), it, ja, ko (creative assets only), nl, pl (creative assets only), pt-BR, pt-PT, ro (iStock only), ru (creative assets only), sv, th (iStock only), tr, uk (iStock only), vi (iStock only), zh-HK (creative assets only). (optional)
     * @param assetIds List the assets to be removed from the board. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> InvalidParameterValue </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> InsufficientAccess </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> BoardNotFound </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call v3BoardsBoardIdAssetsDeleteAsync(String boardId, String acceptLanguage, List<String> assetIds, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = v3BoardsBoardIdAssetsDeleteValidateBeforeCall(boardId, acceptLanguage, assetIds, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for v3BoardsBoardIdAssetsPut
     * @param boardId Specify the board to add assets to. (required)
     * @param acceptLanguage Provide a header to specify the language of result values. Supported values: cs (iStock only), de, en-GB, en-US, es, fi (iStock only), fr, hu (iStock only), id (iStock only), it, ja, ko (creative assets only), nl, pl (creative assets only), pt-BR, pt-PT, ro (iStock only), ru (creative assets only), sv, th (iStock only), tr, uk (iStock only), vi (iStock only), zh-HK (creative assets only). (optional)
     * @param boardAsset List assets to add to the board. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Created </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> InvalidParameterValue </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> InsufficientAccess </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> BoardNotFound </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call v3BoardsBoardIdAssetsPutCall(String boardId, String acceptLanguage, List<BoardAsset> boardAsset, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = boardAsset;

        // create path and map variables
        String localVarPath = "/v3/boards/{board_id}/assets"
            .replace("{" + "board_id" + "}", localVarApiClient.escapeString(boardId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (acceptLanguage != null) {
            localVarHeaderParams.put("Accept-Language", localVarApiClient.parameterToString(acceptLanguage));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "OAuth2", "OAuth2", "OAuth2", "OAuth2", "Api-Key" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call v3BoardsBoardIdAssetsPutValidateBeforeCall(String boardId, String acceptLanguage, List<BoardAsset> boardAsset, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'boardId' is set
        if (boardId == null) {
            throw new ApiException("Missing the required parameter 'boardId' when calling v3BoardsBoardIdAssetsPut(Async)");
        }

        return v3BoardsBoardIdAssetsPutCall(boardId, acceptLanguage, boardAsset, _callback);

    }

    /**
     * Add assets to a board
     * 
     * @param boardId Specify the board to add assets to. (required)
     * @param acceptLanguage Provide a header to specify the language of result values. Supported values: cs (iStock only), de, en-GB, en-US, es, fi (iStock only), fr, hu (iStock only), id (iStock only), it, ja, ko (creative assets only), nl, pl (creative assets only), pt-BR, pt-PT, ro (iStock only), ru (creative assets only), sv, th (iStock only), tr, uk (iStock only), vi (iStock only), zh-HK (creative assets only). (optional)
     * @param boardAsset List assets to add to the board. (optional)
     * @return AddBoardAssetsResult
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Created </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> InvalidParameterValue </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> InsufficientAccess </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> BoardNotFound </td><td>  -  </td></tr>
     </table>
     */
    public AddBoardAssetsResult v3BoardsBoardIdAssetsPut(String boardId, String acceptLanguage, List<BoardAsset> boardAsset) throws ApiException {
        ApiResponse<AddBoardAssetsResult> localVarResp = v3BoardsBoardIdAssetsPutWithHttpInfo(boardId, acceptLanguage, boardAsset);
        return localVarResp.getData();
    }

    /**
     * Add assets to a board
     * 
     * @param boardId Specify the board to add assets to. (required)
     * @param acceptLanguage Provide a header to specify the language of result values. Supported values: cs (iStock only), de, en-GB, en-US, es, fi (iStock only), fr, hu (iStock only), id (iStock only), it, ja, ko (creative assets only), nl, pl (creative assets only), pt-BR, pt-PT, ro (iStock only), ru (creative assets only), sv, th (iStock only), tr, uk (iStock only), vi (iStock only), zh-HK (creative assets only). (optional)
     * @param boardAsset List assets to add to the board. (optional)
     * @return ApiResponse&lt;AddBoardAssetsResult&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Created </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> InvalidParameterValue </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> InsufficientAccess </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> BoardNotFound </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<AddBoardAssetsResult> v3BoardsBoardIdAssetsPutWithHttpInfo(String boardId, String acceptLanguage, List<BoardAsset> boardAsset) throws ApiException {
        okhttp3.Call localVarCall = v3BoardsBoardIdAssetsPutValidateBeforeCall(boardId, acceptLanguage, boardAsset, null);
        Type localVarReturnType = new TypeToken<AddBoardAssetsResult>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Add assets to a board (asynchronously)
     * 
     * @param boardId Specify the board to add assets to. (required)
     * @param acceptLanguage Provide a header to specify the language of result values. Supported values: cs (iStock only), de, en-GB, en-US, es, fi (iStock only), fr, hu (iStock only), id (iStock only), it, ja, ko (creative assets only), nl, pl (creative assets only), pt-BR, pt-PT, ro (iStock only), ru (creative assets only), sv, th (iStock only), tr, uk (iStock only), vi (iStock only), zh-HK (creative assets only). (optional)
     * @param boardAsset List assets to add to the board. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Created </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> InvalidParameterValue </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> InsufficientAccess </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> BoardNotFound </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call v3BoardsBoardIdAssetsPutAsync(String boardId, String acceptLanguage, List<BoardAsset> boardAsset, final ApiCallback<AddBoardAssetsResult> _callback) throws ApiException {

        okhttp3.Call localVarCall = v3BoardsBoardIdAssetsPutValidateBeforeCall(boardId, acceptLanguage, boardAsset, _callback);
        Type localVarReturnType = new TypeToken<AddBoardAssetsResult>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for v3BoardsBoardIdCommentsCommentIdDelete
     * @param boardId Specify the board containing the comment to delete. (required)
     * @param commentId Specify the comment to delete. (required)
     * @param acceptLanguage Provide a header to specify the language of result values. Supported values: cs (iStock only), de, en-GB, en-US, es, fi (iStock only), fr, hu (iStock only), id (iStock only), it, ja, ko (creative assets only), nl, pl (creative assets only), pt-BR, pt-PT, ro (iStock only), ru (creative assets only), sv, th (iStock only), tr, uk (iStock only), vi (iStock only), zh-HK (creative assets only). (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 204 </td><td> CommentDeleted </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> InvalidParameterValue </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> InsufficientAccess </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> BoardNotFound </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call v3BoardsBoardIdCommentsCommentIdDeleteCall(String boardId, String commentId, String acceptLanguage, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v3/boards/{board_id}/comments/{comment_id}"
            .replace("{" + "board_id" + "}", localVarApiClient.escapeString(boardId.toString()))
            .replace("{" + "comment_id" + "}", localVarApiClient.escapeString(commentId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (acceptLanguage != null) {
            localVarHeaderParams.put("Accept-Language", localVarApiClient.parameterToString(acceptLanguage));
        }

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "OAuth2", "OAuth2", "OAuth2", "OAuth2", "Api-Key" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call v3BoardsBoardIdCommentsCommentIdDeleteValidateBeforeCall(String boardId, String commentId, String acceptLanguage, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'boardId' is set
        if (boardId == null) {
            throw new ApiException("Missing the required parameter 'boardId' when calling v3BoardsBoardIdCommentsCommentIdDelete(Async)");
        }

        // verify the required parameter 'commentId' is set
        if (commentId == null) {
            throw new ApiException("Missing the required parameter 'commentId' when calling v3BoardsBoardIdCommentsCommentIdDelete(Async)");
        }

        return v3BoardsBoardIdCommentsCommentIdDeleteCall(boardId, commentId, acceptLanguage, _callback);

    }

    /**
     * Delete a comment from a board
     * 
     * @param boardId Specify the board containing the comment to delete. (required)
     * @param commentId Specify the comment to delete. (required)
     * @param acceptLanguage Provide a header to specify the language of result values. Supported values: cs (iStock only), de, en-GB, en-US, es, fi (iStock only), fr, hu (iStock only), id (iStock only), it, ja, ko (creative assets only), nl, pl (creative assets only), pt-BR, pt-PT, ro (iStock only), ru (creative assets only), sv, th (iStock only), tr, uk (iStock only), vi (iStock only), zh-HK (creative assets only). (optional)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 204 </td><td> CommentDeleted </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> InvalidParameterValue </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> InsufficientAccess </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> BoardNotFound </td><td>  -  </td></tr>
     </table>
     */
    public void v3BoardsBoardIdCommentsCommentIdDelete(String boardId, String commentId, String acceptLanguage) throws ApiException {
        v3BoardsBoardIdCommentsCommentIdDeleteWithHttpInfo(boardId, commentId, acceptLanguage);
    }

    /**
     * Delete a comment from a board
     * 
     * @param boardId Specify the board containing the comment to delete. (required)
     * @param commentId Specify the comment to delete. (required)
     * @param acceptLanguage Provide a header to specify the language of result values. Supported values: cs (iStock only), de, en-GB, en-US, es, fi (iStock only), fr, hu (iStock only), id (iStock only), it, ja, ko (creative assets only), nl, pl (creative assets only), pt-BR, pt-PT, ro (iStock only), ru (creative assets only), sv, th (iStock only), tr, uk (iStock only), vi (iStock only), zh-HK (creative assets only). (optional)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 204 </td><td> CommentDeleted </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> InvalidParameterValue </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> InsufficientAccess </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> BoardNotFound </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> v3BoardsBoardIdCommentsCommentIdDeleteWithHttpInfo(String boardId, String commentId, String acceptLanguage) throws ApiException {
        okhttp3.Call localVarCall = v3BoardsBoardIdCommentsCommentIdDeleteValidateBeforeCall(boardId, commentId, acceptLanguage, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Delete a comment from a board (asynchronously)
     * 
     * @param boardId Specify the board containing the comment to delete. (required)
     * @param commentId Specify the comment to delete. (required)
     * @param acceptLanguage Provide a header to specify the language of result values. Supported values: cs (iStock only), de, en-GB, en-US, es, fi (iStock only), fr, hu (iStock only), id (iStock only), it, ja, ko (creative assets only), nl, pl (creative assets only), pt-BR, pt-PT, ro (iStock only), ru (creative assets only), sv, th (iStock only), tr, uk (iStock only), vi (iStock only), zh-HK (creative assets only). (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 204 </td><td> CommentDeleted </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> InvalidParameterValue </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> InsufficientAccess </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> BoardNotFound </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call v3BoardsBoardIdCommentsCommentIdDeleteAsync(String boardId, String commentId, String acceptLanguage, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = v3BoardsBoardIdCommentsCommentIdDeleteValidateBeforeCall(boardId, commentId, acceptLanguage, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for v3BoardsBoardIdCommentsGet
     * @param boardId Specify the board to retrieve comments from. (required)
     * @param acceptLanguage Provide a header to specify the language of result values. Supported values: cs (iStock only), de, en-GB, en-US, es, fi (iStock only), fr, hu (iStock only), id (iStock only), it, ja, ko (creative assets only), nl, pl (creative assets only), pt-BR, pt-PT, ro (iStock only), ru (creative assets only), sv, th (iStock only), tr, uk (iStock only), vi (iStock only), zh-HK (creative assets only). (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> InvalidParameterValue </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> BoardNotFound </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call v3BoardsBoardIdCommentsGetCall(String boardId, String acceptLanguage, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v3/boards/{board_id}/comments"
            .replace("{" + "board_id" + "}", localVarApiClient.escapeString(boardId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (acceptLanguage != null) {
            localVarHeaderParams.put("Accept-Language", localVarApiClient.parameterToString(acceptLanguage));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "OAuth2", "OAuth2", "OAuth2", "OAuth2", "Api-Key" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call v3BoardsBoardIdCommentsGetValidateBeforeCall(String boardId, String acceptLanguage, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'boardId' is set
        if (boardId == null) {
            throw new ApiException("Missing the required parameter 'boardId' when calling v3BoardsBoardIdCommentsGet(Async)");
        }

        return v3BoardsBoardIdCommentsGetCall(boardId, acceptLanguage, _callback);

    }

    /**
     * Get comments from a board
     * 
     * @param boardId Specify the board to retrieve comments from. (required)
     * @param acceptLanguage Provide a header to specify the language of result values. Supported values: cs (iStock only), de, en-GB, en-US, es, fi (iStock only), fr, hu (iStock only), id (iStock only), it, ja, ko (creative assets only), nl, pl (creative assets only), pt-BR, pt-PT, ro (iStock only), ru (creative assets only), sv, th (iStock only), tr, uk (iStock only), vi (iStock only), zh-HK (creative assets only). (optional)
     * @return CommentsList
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> InvalidParameterValue </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> BoardNotFound </td><td>  -  </td></tr>
     </table>
     */
    public CommentsList v3BoardsBoardIdCommentsGet(String boardId, String acceptLanguage) throws ApiException {
        ApiResponse<CommentsList> localVarResp = v3BoardsBoardIdCommentsGetWithHttpInfo(boardId, acceptLanguage);
        return localVarResp.getData();
    }

    /**
     * Get comments from a board
     * 
     * @param boardId Specify the board to retrieve comments from. (required)
     * @param acceptLanguage Provide a header to specify the language of result values. Supported values: cs (iStock only), de, en-GB, en-US, es, fi (iStock only), fr, hu (iStock only), id (iStock only), it, ja, ko (creative assets only), nl, pl (creative assets only), pt-BR, pt-PT, ro (iStock only), ru (creative assets only), sv, th (iStock only), tr, uk (iStock only), vi (iStock only), zh-HK (creative assets only). (optional)
     * @return ApiResponse&lt;CommentsList&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> InvalidParameterValue </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> BoardNotFound </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<CommentsList> v3BoardsBoardIdCommentsGetWithHttpInfo(String boardId, String acceptLanguage) throws ApiException {
        okhttp3.Call localVarCall = v3BoardsBoardIdCommentsGetValidateBeforeCall(boardId, acceptLanguage, null);
        Type localVarReturnType = new TypeToken<CommentsList>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get comments from a board (asynchronously)
     * 
     * @param boardId Specify the board to retrieve comments from. (required)
     * @param acceptLanguage Provide a header to specify the language of result values. Supported values: cs (iStock only), de, en-GB, en-US, es, fi (iStock only), fr, hu (iStock only), id (iStock only), it, ja, ko (creative assets only), nl, pl (creative assets only), pt-BR, pt-PT, ro (iStock only), ru (creative assets only), sv, th (iStock only), tr, uk (iStock only), vi (iStock only), zh-HK (creative assets only). (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> InvalidParameterValue </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> BoardNotFound </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call v3BoardsBoardIdCommentsGetAsync(String boardId, String acceptLanguage, final ApiCallback<CommentsList> _callback) throws ApiException {

        okhttp3.Call localVarCall = v3BoardsBoardIdCommentsGetValidateBeforeCall(boardId, acceptLanguage, _callback);
        Type localVarReturnType = new TypeToken<CommentsList>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for v3BoardsBoardIdCommentsPost
     * @param boardId Specify the board to add a comment to. (required)
     * @param acceptLanguage Provide a header to specify the language of result values. Supported values: cs (iStock only), de, en-GB, en-US, es, fi (iStock only), fr, hu (iStock only), id (iStock only), it, ja, ko (creative assets only), nl, pl (creative assets only), pt-BR, pt-PT, ro (iStock only), ru (creative assets only), sv, th (iStock only), tr, uk (iStock only), vi (iStock only), zh-HK (creative assets only). (optional)
     * @param commentRequest Comment to be added to the board. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Created </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> InvalidParameterValue </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> InsufficientAccess </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> BoardNotFound </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call v3BoardsBoardIdCommentsPostCall(String boardId, String acceptLanguage, CommentRequest commentRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = commentRequest;

        // create path and map variables
        String localVarPath = "/v3/boards/{board_id}/comments"
            .replace("{" + "board_id" + "}", localVarApiClient.escapeString(boardId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (acceptLanguage != null) {
            localVarHeaderParams.put("Accept-Language", localVarApiClient.parameterToString(acceptLanguage));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "OAuth2", "OAuth2", "OAuth2", "OAuth2", "Api-Key" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call v3BoardsBoardIdCommentsPostValidateBeforeCall(String boardId, String acceptLanguage, CommentRequest commentRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'boardId' is set
        if (boardId == null) {
            throw new ApiException("Missing the required parameter 'boardId' when calling v3BoardsBoardIdCommentsPost(Async)");
        }

        return v3BoardsBoardIdCommentsPostCall(boardId, acceptLanguage, commentRequest, _callback);

    }

    /**
     * Add a comment to a board
     * 
     * @param boardId Specify the board to add a comment to. (required)
     * @param acceptLanguage Provide a header to specify the language of result values. Supported values: cs (iStock only), de, en-GB, en-US, es, fi (iStock only), fr, hu (iStock only), id (iStock only), it, ja, ko (creative assets only), nl, pl (creative assets only), pt-BR, pt-PT, ro (iStock only), ru (creative assets only), sv, th (iStock only), tr, uk (iStock only), vi (iStock only), zh-HK (creative assets only). (optional)
     * @param commentRequest Comment to be added to the board. (optional)
     * @return CommentCreated
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Created </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> InvalidParameterValue </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> InsufficientAccess </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> BoardNotFound </td><td>  -  </td></tr>
     </table>
     */
    public CommentCreated v3BoardsBoardIdCommentsPost(String boardId, String acceptLanguage, CommentRequest commentRequest) throws ApiException {
        ApiResponse<CommentCreated> localVarResp = v3BoardsBoardIdCommentsPostWithHttpInfo(boardId, acceptLanguage, commentRequest);
        return localVarResp.getData();
    }

    /**
     * Add a comment to a board
     * 
     * @param boardId Specify the board to add a comment to. (required)
     * @param acceptLanguage Provide a header to specify the language of result values. Supported values: cs (iStock only), de, en-GB, en-US, es, fi (iStock only), fr, hu (iStock only), id (iStock only), it, ja, ko (creative assets only), nl, pl (creative assets only), pt-BR, pt-PT, ro (iStock only), ru (creative assets only), sv, th (iStock only), tr, uk (iStock only), vi (iStock only), zh-HK (creative assets only). (optional)
     * @param commentRequest Comment to be added to the board. (optional)
     * @return ApiResponse&lt;CommentCreated&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Created </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> InvalidParameterValue </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> InsufficientAccess </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> BoardNotFound </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<CommentCreated> v3BoardsBoardIdCommentsPostWithHttpInfo(String boardId, String acceptLanguage, CommentRequest commentRequest) throws ApiException {
        okhttp3.Call localVarCall = v3BoardsBoardIdCommentsPostValidateBeforeCall(boardId, acceptLanguage, commentRequest, null);
        Type localVarReturnType = new TypeToken<CommentCreated>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Add a comment to a board (asynchronously)
     * 
     * @param boardId Specify the board to add a comment to. (required)
     * @param acceptLanguage Provide a header to specify the language of result values. Supported values: cs (iStock only), de, en-GB, en-US, es, fi (iStock only), fr, hu (iStock only), id (iStock only), it, ja, ko (creative assets only), nl, pl (creative assets only), pt-BR, pt-PT, ro (iStock only), ru (creative assets only), sv, th (iStock only), tr, uk (iStock only), vi (iStock only), zh-HK (creative assets only). (optional)
     * @param commentRequest Comment to be added to the board. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Created </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> InvalidParameterValue </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> InsufficientAccess </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> BoardNotFound </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call v3BoardsBoardIdCommentsPostAsync(String boardId, String acceptLanguage, CommentRequest commentRequest, final ApiCallback<CommentCreated> _callback) throws ApiException {

        okhttp3.Call localVarCall = v3BoardsBoardIdCommentsPostValidateBeforeCall(boardId, acceptLanguage, commentRequest, _callback);
        Type localVarReturnType = new TypeToken<CommentCreated>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for v3BoardsBoardIdDelete
     * @param boardId Specify the board to delete. (required)
     * @param acceptLanguage Provide a header to specify the language of result values. Supported values: cs (iStock only), de, en-GB, en-US, es, fi (iStock only), fr, hu (iStock only), id (iStock only), it, ja, ko (creative assets only), nl, pl (creative assets only), pt-BR, pt-PT, ro (iStock only), ru (creative assets only), sv, th (iStock only), tr, uk (iStock only), vi (iStock only), zh-HK (creative assets only). (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 204 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> InvalidParameterValue </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> InsufficientAccess </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> BoardNotFound </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call v3BoardsBoardIdDeleteCall(String boardId, String acceptLanguage, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v3/boards/{board_id}"
            .replace("{" + "board_id" + "}", localVarApiClient.escapeString(boardId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (acceptLanguage != null) {
            localVarHeaderParams.put("Accept-Language", localVarApiClient.parameterToString(acceptLanguage));
        }

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "OAuth2", "OAuth2", "OAuth2", "OAuth2", "Api-Key" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call v3BoardsBoardIdDeleteValidateBeforeCall(String boardId, String acceptLanguage, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'boardId' is set
        if (boardId == null) {
            throw new ApiException("Missing the required parameter 'boardId' when calling v3BoardsBoardIdDelete(Async)");
        }

        return v3BoardsBoardIdDeleteCall(boardId, acceptLanguage, _callback);

    }

    /**
     * Delete a board
     * 
     * @param boardId Specify the board to delete. (required)
     * @param acceptLanguage Provide a header to specify the language of result values. Supported values: cs (iStock only), de, en-GB, en-US, es, fi (iStock only), fr, hu (iStock only), id (iStock only), it, ja, ko (creative assets only), nl, pl (creative assets only), pt-BR, pt-PT, ro (iStock only), ru (creative assets only), sv, th (iStock only), tr, uk (iStock only), vi (iStock only), zh-HK (creative assets only). (optional)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 204 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> InvalidParameterValue </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> InsufficientAccess </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> BoardNotFound </td><td>  -  </td></tr>
     </table>
     */
    public void v3BoardsBoardIdDelete(String boardId, String acceptLanguage) throws ApiException {
        v3BoardsBoardIdDeleteWithHttpInfo(boardId, acceptLanguage);
    }

    /**
     * Delete a board
     * 
     * @param boardId Specify the board to delete. (required)
     * @param acceptLanguage Provide a header to specify the language of result values. Supported values: cs (iStock only), de, en-GB, en-US, es, fi (iStock only), fr, hu (iStock only), id (iStock only), it, ja, ko (creative assets only), nl, pl (creative assets only), pt-BR, pt-PT, ro (iStock only), ru (creative assets only), sv, th (iStock only), tr, uk (iStock only), vi (iStock only), zh-HK (creative assets only). (optional)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 204 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> InvalidParameterValue </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> InsufficientAccess </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> BoardNotFound </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> v3BoardsBoardIdDeleteWithHttpInfo(String boardId, String acceptLanguage) throws ApiException {
        okhttp3.Call localVarCall = v3BoardsBoardIdDeleteValidateBeforeCall(boardId, acceptLanguage, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Delete a board (asynchronously)
     * 
     * @param boardId Specify the board to delete. (required)
     * @param acceptLanguage Provide a header to specify the language of result values. Supported values: cs (iStock only), de, en-GB, en-US, es, fi (iStock only), fr, hu (iStock only), id (iStock only), it, ja, ko (creative assets only), nl, pl (creative assets only), pt-BR, pt-PT, ro (iStock only), ru (creative assets only), sv, th (iStock only), tr, uk (iStock only), vi (iStock only), zh-HK (creative assets only). (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 204 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> InvalidParameterValue </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> InsufficientAccess </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> BoardNotFound </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call v3BoardsBoardIdDeleteAsync(String boardId, String acceptLanguage, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = v3BoardsBoardIdDeleteValidateBeforeCall(boardId, acceptLanguage, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for v3BoardsBoardIdGet
     * @param boardId Retrieve details for a specific board. (required)
     * @param acceptLanguage Provide a header to specify the language of result values. Supported values: cs (iStock only), de, en-GB, en-US, es, fi (iStock only), fr, hu (iStock only), id (iStock only), it, ja, ko (creative assets only), nl, pl (creative assets only), pt-BR, pt-PT, ro (iStock only), ru (creative assets only), sv, th (iStock only), tr, uk (iStock only), vi (iStock only), zh-HK (creative assets only). (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> InvalidParameterValue </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> BoardNotFound </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call v3BoardsBoardIdGetCall(String boardId, String acceptLanguage, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v3/boards/{board_id}"
            .replace("{" + "board_id" + "}", localVarApiClient.escapeString(boardId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (acceptLanguage != null) {
            localVarHeaderParams.put("Accept-Language", localVarApiClient.parameterToString(acceptLanguage));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "OAuth2", "OAuth2", "OAuth2", "OAuth2", "Api-Key" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call v3BoardsBoardIdGetValidateBeforeCall(String boardId, String acceptLanguage, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'boardId' is set
        if (boardId == null) {
            throw new ApiException("Missing the required parameter 'boardId' when calling v3BoardsBoardIdGet(Async)");
        }

        return v3BoardsBoardIdGetCall(boardId, acceptLanguage, _callback);

    }

    /**
     * Get assets and metadata for a specific board
     * 
     * @param boardId Retrieve details for a specific board. (required)
     * @param acceptLanguage Provide a header to specify the language of result values. Supported values: cs (iStock only), de, en-GB, en-US, es, fi (iStock only), fr, hu (iStock only), id (iStock only), it, ja, ko (creative assets only), nl, pl (creative assets only), pt-BR, pt-PT, ro (iStock only), ru (creative assets only), sv, th (iStock only), tr, uk (iStock only), vi (iStock only), zh-HK (creative assets only). (optional)
     * @return BoardDetail
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> InvalidParameterValue </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> BoardNotFound </td><td>  -  </td></tr>
     </table>
     */
    public BoardDetail v3BoardsBoardIdGet(String boardId, String acceptLanguage) throws ApiException {
        ApiResponse<BoardDetail> localVarResp = v3BoardsBoardIdGetWithHttpInfo(boardId, acceptLanguage);
        return localVarResp.getData();
    }

    /**
     * Get assets and metadata for a specific board
     * 
     * @param boardId Retrieve details for a specific board. (required)
     * @param acceptLanguage Provide a header to specify the language of result values. Supported values: cs (iStock only), de, en-GB, en-US, es, fi (iStock only), fr, hu (iStock only), id (iStock only), it, ja, ko (creative assets only), nl, pl (creative assets only), pt-BR, pt-PT, ro (iStock only), ru (creative assets only), sv, th (iStock only), tr, uk (iStock only), vi (iStock only), zh-HK (creative assets only). (optional)
     * @return ApiResponse&lt;BoardDetail&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> InvalidParameterValue </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> BoardNotFound </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<BoardDetail> v3BoardsBoardIdGetWithHttpInfo(String boardId, String acceptLanguage) throws ApiException {
        okhttp3.Call localVarCall = v3BoardsBoardIdGetValidateBeforeCall(boardId, acceptLanguage, null);
        Type localVarReturnType = new TypeToken<BoardDetail>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get assets and metadata for a specific board (asynchronously)
     * 
     * @param boardId Retrieve details for a specific board. (required)
     * @param acceptLanguage Provide a header to specify the language of result values. Supported values: cs (iStock only), de, en-GB, en-US, es, fi (iStock only), fr, hu (iStock only), id (iStock only), it, ja, ko (creative assets only), nl, pl (creative assets only), pt-BR, pt-PT, ro (iStock only), ru (creative assets only), sv, th (iStock only), tr, uk (iStock only), vi (iStock only), zh-HK (creative assets only). (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> InvalidParameterValue </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> BoardNotFound </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call v3BoardsBoardIdGetAsync(String boardId, String acceptLanguage, final ApiCallback<BoardDetail> _callback) throws ApiException {

        okhttp3.Call localVarCall = v3BoardsBoardIdGetValidateBeforeCall(boardId, acceptLanguage, _callback);
        Type localVarReturnType = new TypeToken<BoardDetail>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for v3BoardsBoardIdPut
     * @param boardId Specify the board to update. (required)
     * @param acceptLanguage Provide a header to specify the language of result values. Supported values: cs (iStock only), de, en-GB, en-US, es, fi (iStock only), fr, hu (iStock only), id (iStock only), it, ja, ko (creative assets only), nl, pl (creative assets only), pt-BR, pt-PT, ro (iStock only), ru (creative assets only), sv, th (iStock only), tr, uk (iStock only), vi (iStock only), zh-HK (creative assets only). (optional)
     * @param boardInfo Specify a new name and description for the board (name is required). (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 204 </td><td> Updated </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> InvalidParameterValue </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> InsufficientAccess </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> BoardNotFound </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call v3BoardsBoardIdPutCall(String boardId, String acceptLanguage, BoardInfo boardInfo, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = boardInfo;

        // create path and map variables
        String localVarPath = "/v3/boards/{board_id}"
            .replace("{" + "board_id" + "}", localVarApiClient.escapeString(boardId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (acceptLanguage != null) {
            localVarHeaderParams.put("Accept-Language", localVarApiClient.parameterToString(acceptLanguage));
        }

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "OAuth2", "OAuth2", "OAuth2", "OAuth2", "Api-Key" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call v3BoardsBoardIdPutValidateBeforeCall(String boardId, String acceptLanguage, BoardInfo boardInfo, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'boardId' is set
        if (boardId == null) {
            throw new ApiException("Missing the required parameter 'boardId' when calling v3BoardsBoardIdPut(Async)");
        }

        return v3BoardsBoardIdPutCall(boardId, acceptLanguage, boardInfo, _callback);

    }

    /**
     * Update a board
     * 
     * @param boardId Specify the board to update. (required)
     * @param acceptLanguage Provide a header to specify the language of result values. Supported values: cs (iStock only), de, en-GB, en-US, es, fi (iStock only), fr, hu (iStock only), id (iStock only), it, ja, ko (creative assets only), nl, pl (creative assets only), pt-BR, pt-PT, ro (iStock only), ru (creative assets only), sv, th (iStock only), tr, uk (iStock only), vi (iStock only), zh-HK (creative assets only). (optional)
     * @param boardInfo Specify a new name and description for the board (name is required). (optional)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 204 </td><td> Updated </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> InvalidParameterValue </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> InsufficientAccess </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> BoardNotFound </td><td>  -  </td></tr>
     </table>
     */
    public void v3BoardsBoardIdPut(String boardId, String acceptLanguage, BoardInfo boardInfo) throws ApiException {
        v3BoardsBoardIdPutWithHttpInfo(boardId, acceptLanguage, boardInfo);
    }

    /**
     * Update a board
     * 
     * @param boardId Specify the board to update. (required)
     * @param acceptLanguage Provide a header to specify the language of result values. Supported values: cs (iStock only), de, en-GB, en-US, es, fi (iStock only), fr, hu (iStock only), id (iStock only), it, ja, ko (creative assets only), nl, pl (creative assets only), pt-BR, pt-PT, ro (iStock only), ru (creative assets only), sv, th (iStock only), tr, uk (iStock only), vi (iStock only), zh-HK (creative assets only). (optional)
     * @param boardInfo Specify a new name and description for the board (name is required). (optional)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 204 </td><td> Updated </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> InvalidParameterValue </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> InsufficientAccess </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> BoardNotFound </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> v3BoardsBoardIdPutWithHttpInfo(String boardId, String acceptLanguage, BoardInfo boardInfo) throws ApiException {
        okhttp3.Call localVarCall = v3BoardsBoardIdPutValidateBeforeCall(boardId, acceptLanguage, boardInfo, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Update a board (asynchronously)
     * 
     * @param boardId Specify the board to update. (required)
     * @param acceptLanguage Provide a header to specify the language of result values. Supported values: cs (iStock only), de, en-GB, en-US, es, fi (iStock only), fr, hu (iStock only), id (iStock only), it, ja, ko (creative assets only), nl, pl (creative assets only), pt-BR, pt-PT, ro (iStock only), ru (creative assets only), sv, th (iStock only), tr, uk (iStock only), vi (iStock only), zh-HK (creative assets only). (optional)
     * @param boardInfo Specify a new name and description for the board (name is required). (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 204 </td><td> Updated </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> InvalidParameterValue </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> InsufficientAccess </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> BoardNotFound </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call v3BoardsBoardIdPutAsync(String boardId, String acceptLanguage, BoardInfo boardInfo, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = v3BoardsBoardIdPutValidateBeforeCall(boardId, acceptLanguage, boardInfo, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for v3BoardsGet
     * @param acceptLanguage Provide a header to specify the language of result values. Supported values: cs (iStock only), de, en-GB, en-US, es, fi (iStock only), fr, hu (iStock only), id (iStock only), it, ja, ko (creative assets only), nl, pl (creative assets only), pt-BR, pt-PT, ro (iStock only), ru (creative assets only), sv, th (iStock only), tr, uk (iStock only), vi (iStock only), zh-HK (creative assets only). (optional)
     * @param page Request results starting at a page number (default is 1). (optional, default to 1)
     * @param boardRelationship Search for boards the user owns or has been invited to as an editor. (optional)
     * @param sortOrder Sort the list of boards by last update date or name. Defaults to date_last_updated_descending. (optional)
     * @param pageSize Request number of boards to return in each page. (default is 30). (optional, default to 30)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> InvalidParameterValue </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call v3BoardsGetCall(String acceptLanguage, Integer page, BoardRelationship boardRelationship, BoardSortOrder sortOrder, Integer pageSize, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v3/boards";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (page != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("page", page));
        }

        if (boardRelationship != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("board_relationship", boardRelationship));
        }

        if (sortOrder != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("sort_order", sortOrder));
        }

        if (pageSize != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("pageSize", pageSize));
        }

        if (acceptLanguage != null) {
            localVarHeaderParams.put("Accept-Language", localVarApiClient.parameterToString(acceptLanguage));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "OAuth2", "OAuth2", "OAuth2", "OAuth2", "Api-Key" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call v3BoardsGetValidateBeforeCall(String acceptLanguage, Integer page, BoardRelationship boardRelationship, BoardSortOrder sortOrder, Integer pageSize, final ApiCallback _callback) throws ApiException {
        return v3BoardsGetCall(acceptLanguage, page, boardRelationship, sortOrder, pageSize, _callback);

    }

    /**
     * Get all boards that the user participates in
     * 
     * @param acceptLanguage Provide a header to specify the language of result values. Supported values: cs (iStock only), de, en-GB, en-US, es, fi (iStock only), fr, hu (iStock only), id (iStock only), it, ja, ko (creative assets only), nl, pl (creative assets only), pt-BR, pt-PT, ro (iStock only), ru (creative assets only), sv, th (iStock only), tr, uk (iStock only), vi (iStock only), zh-HK (creative assets only). (optional)
     * @param page Request results starting at a page number (default is 1). (optional, default to 1)
     * @param boardRelationship Search for boards the user owns or has been invited to as an editor. (optional)
     * @param sortOrder Sort the list of boards by last update date or name. Defaults to date_last_updated_descending. (optional)
     * @param pageSize Request number of boards to return in each page. (default is 30). (optional, default to 30)
     * @return BoardList
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> InvalidParameterValue </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
     </table>
     */
    public BoardList v3BoardsGet(String acceptLanguage, Integer page, BoardRelationship boardRelationship, BoardSortOrder sortOrder, Integer pageSize) throws ApiException {
        ApiResponse<BoardList> localVarResp = v3BoardsGetWithHttpInfo(acceptLanguage, page, boardRelationship, sortOrder, pageSize);
        return localVarResp.getData();
    }

    /**
     * Get all boards that the user participates in
     * 
     * @param acceptLanguage Provide a header to specify the language of result values. Supported values: cs (iStock only), de, en-GB, en-US, es, fi (iStock only), fr, hu (iStock only), id (iStock only), it, ja, ko (creative assets only), nl, pl (creative assets only), pt-BR, pt-PT, ro (iStock only), ru (creative assets only), sv, th (iStock only), tr, uk (iStock only), vi (iStock only), zh-HK (creative assets only). (optional)
     * @param page Request results starting at a page number (default is 1). (optional, default to 1)
     * @param boardRelationship Search for boards the user owns or has been invited to as an editor. (optional)
     * @param sortOrder Sort the list of boards by last update date or name. Defaults to date_last_updated_descending. (optional)
     * @param pageSize Request number of boards to return in each page. (default is 30). (optional, default to 30)
     * @return ApiResponse&lt;BoardList&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> InvalidParameterValue </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<BoardList> v3BoardsGetWithHttpInfo(String acceptLanguage, Integer page, BoardRelationship boardRelationship, BoardSortOrder sortOrder, Integer pageSize) throws ApiException {
        okhttp3.Call localVarCall = v3BoardsGetValidateBeforeCall(acceptLanguage, page, boardRelationship, sortOrder, pageSize, null);
        Type localVarReturnType = new TypeToken<BoardList>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get all boards that the user participates in (asynchronously)
     * 
     * @param acceptLanguage Provide a header to specify the language of result values. Supported values: cs (iStock only), de, en-GB, en-US, es, fi (iStock only), fr, hu (iStock only), id (iStock only), it, ja, ko (creative assets only), nl, pl (creative assets only), pt-BR, pt-PT, ro (iStock only), ru (creative assets only), sv, th (iStock only), tr, uk (iStock only), vi (iStock only), zh-HK (creative assets only). (optional)
     * @param page Request results starting at a page number (default is 1). (optional, default to 1)
     * @param boardRelationship Search for boards the user owns or has been invited to as an editor. (optional)
     * @param sortOrder Sort the list of boards by last update date or name. Defaults to date_last_updated_descending. (optional)
     * @param pageSize Request number of boards to return in each page. (default is 30). (optional, default to 30)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> InvalidParameterValue </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call v3BoardsGetAsync(String acceptLanguage, Integer page, BoardRelationship boardRelationship, BoardSortOrder sortOrder, Integer pageSize, final ApiCallback<BoardList> _callback) throws ApiException {

        okhttp3.Call localVarCall = v3BoardsGetValidateBeforeCall(acceptLanguage, page, boardRelationship, sortOrder, pageSize, _callback);
        Type localVarReturnType = new TypeToken<BoardList>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for v3BoardsPost
     * @param acceptLanguage Provide a header to specify the language of result values. Supported values: cs (iStock only), de, en-GB, en-US, es, fi (iStock only), fr, hu (iStock only), id (iStock only), it, ja, ko (creative assets only), nl, pl (creative assets only), pt-BR, pt-PT, ro (iStock only), ru (creative assets only), sv, th (iStock only), tr, uk (iStock only), vi (iStock only), zh-HK (creative assets only). (optional)
     * @param boardInfo Specify a name and description of the board to create (name is required). (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Created </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> InvalidParameterValue </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call v3BoardsPostCall(String acceptLanguage, BoardInfo boardInfo, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = boardInfo;

        // create path and map variables
        String localVarPath = "/v3/boards";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (acceptLanguage != null) {
            localVarHeaderParams.put("Accept-Language", localVarApiClient.parameterToString(acceptLanguage));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "OAuth2", "OAuth2", "OAuth2", "OAuth2", "Api-Key" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call v3BoardsPostValidateBeforeCall(String acceptLanguage, BoardInfo boardInfo, final ApiCallback _callback) throws ApiException {
        return v3BoardsPostCall(acceptLanguage, boardInfo, _callback);

    }

    /**
     * Create a new board
     * 
     * @param acceptLanguage Provide a header to specify the language of result values. Supported values: cs (iStock only), de, en-GB, en-US, es, fi (iStock only), fr, hu (iStock only), id (iStock only), it, ja, ko (creative assets only), nl, pl (creative assets only), pt-BR, pt-PT, ro (iStock only), ru (creative assets only), sv, th (iStock only), tr, uk (iStock only), vi (iStock only), zh-HK (creative assets only). (optional)
     * @param boardInfo Specify a name and description of the board to create (name is required). (optional)
     * @return BoardCreated
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Created </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> InvalidParameterValue </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
     </table>
     */
    public BoardCreated v3BoardsPost(String acceptLanguage, BoardInfo boardInfo) throws ApiException {
        ApiResponse<BoardCreated> localVarResp = v3BoardsPostWithHttpInfo(acceptLanguage, boardInfo);
        return localVarResp.getData();
    }

    /**
     * Create a new board
     * 
     * @param acceptLanguage Provide a header to specify the language of result values. Supported values: cs (iStock only), de, en-GB, en-US, es, fi (iStock only), fr, hu (iStock only), id (iStock only), it, ja, ko (creative assets only), nl, pl (creative assets only), pt-BR, pt-PT, ro (iStock only), ru (creative assets only), sv, th (iStock only), tr, uk (iStock only), vi (iStock only), zh-HK (creative assets only). (optional)
     * @param boardInfo Specify a name and description of the board to create (name is required). (optional)
     * @return ApiResponse&lt;BoardCreated&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Created </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> InvalidParameterValue </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<BoardCreated> v3BoardsPostWithHttpInfo(String acceptLanguage, BoardInfo boardInfo) throws ApiException {
        okhttp3.Call localVarCall = v3BoardsPostValidateBeforeCall(acceptLanguage, boardInfo, null);
        Type localVarReturnType = new TypeToken<BoardCreated>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Create a new board (asynchronously)
     * 
     * @param acceptLanguage Provide a header to specify the language of result values. Supported values: cs (iStock only), de, en-GB, en-US, es, fi (iStock only), fr, hu (iStock only), id (iStock only), it, ja, ko (creative assets only), nl, pl (creative assets only), pt-BR, pt-PT, ro (iStock only), ru (creative assets only), sv, th (iStock only), tr, uk (iStock only), vi (iStock only), zh-HK (creative assets only). (optional)
     * @param boardInfo Specify a name and description of the board to create (name is required). (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Created </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> InvalidParameterValue </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call v3BoardsPostAsync(String acceptLanguage, BoardInfo boardInfo, final ApiCallback<BoardCreated> _callback) throws ApiException {

        okhttp3.Call localVarCall = v3BoardsPostValidateBeforeCall(acceptLanguage, boardInfo, _callback);
        Type localVarReturnType = new TypeToken<BoardCreated>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
