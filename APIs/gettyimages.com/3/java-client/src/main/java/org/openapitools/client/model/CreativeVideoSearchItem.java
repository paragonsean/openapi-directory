/*
 * Getty Images
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 3
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.time.OffsetDateTime;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.AllowedUse;
import org.openapitools.client.model.Download;
import org.openapitools.client.model.IStockLicense;
import org.openapitools.client.model.Keyword;
import org.openapitools.client.model.ReferralDestination;
import org.openapitools.client.model.VideoSearchItemDisplaySize;
import org.openapitools.jackson.nullable.JsonNullable;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * CreativeVideoSearchItem
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T10:09:49.731753-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class CreativeVideoSearchItem {
  public static final String SERIALIZED_NAME_ALLOWED_USE = "allowed_use";
  @SerializedName(SERIALIZED_NAME_ALLOWED_USE)
  private AllowedUse allowedUse;

  public static final String SERIALIZED_NAME_ARTIST = "artist";
  @SerializedName(SERIALIZED_NAME_ARTIST)
  private String artist;

  public static final String SERIALIZED_NAME_ASSET_FAMILY = "asset_family";
  @SerializedName(SERIALIZED_NAME_ASSET_FAMILY)
  private String assetFamily;

  public static final String SERIALIZED_NAME_CAPTION = "caption";
  @SerializedName(SERIALIZED_NAME_CAPTION)
  private String caption;

  public static final String SERIALIZED_NAME_CLIP_LENGTH = "clip_length";
  @SerializedName(SERIALIZED_NAME_CLIP_LENGTH)
  private String clipLength;

  public static final String SERIALIZED_NAME_COLLECTION_CODE = "collection_code";
  @SerializedName(SERIALIZED_NAME_COLLECTION_CODE)
  private String collectionCode;

  public static final String SERIALIZED_NAME_COLLECTION_ID = "collection_id";
  @SerializedName(SERIALIZED_NAME_COLLECTION_ID)
  private Integer collectionId;

  public static final String SERIALIZED_NAME_COLLECTION_NAME = "collection_name";
  @SerializedName(SERIALIZED_NAME_COLLECTION_NAME)
  private String collectionName;

  public static final String SERIALIZED_NAME_COLOR_TYPE = "color_type";
  @SerializedName(SERIALIZED_NAME_COLOR_TYPE)
  private String colorType;

  public static final String SERIALIZED_NAME_COPYRIGHT = "copyright";
  @SerializedName(SERIALIZED_NAME_COPYRIGHT)
  private String copyright;

  public static final String SERIALIZED_NAME_DATE_CREATED = "date_created";
  @SerializedName(SERIALIZED_NAME_DATE_CREATED)
  private OffsetDateTime dateCreated;

  public static final String SERIALIZED_NAME_DISPLAY_SIZES = "display_sizes";
  @SerializedName(SERIALIZED_NAME_DISPLAY_SIZES)
  private List<VideoSearchItemDisplaySize> displaySizes;

  public static final String SERIALIZED_NAME_DOWNLOAD_PRODUCT = "download_product";
  @SerializedName(SERIALIZED_NAME_DOWNLOAD_PRODUCT)
  private String downloadProduct;

  public static final String SERIALIZED_NAME_ERA = "era";
  @SerializedName(SERIALIZED_NAME_ERA)
  private String era;

  public static final String SERIALIZED_NAME_EVENT_IDS = "event_ids";
  @SerializedName(SERIALIZED_NAME_EVENT_IDS)
  private List<Integer> eventIds;

  public static final String SERIALIZED_NAME_ID = "id";
  @SerializedName(SERIALIZED_NAME_ID)
  private String id;

  public static final String SERIALIZED_NAME_ISTOCK_LICENSES = "istock_licenses";
  @SerializedName(SERIALIZED_NAME_ISTOCK_LICENSES)
  private List<IStockLicense> istockLicenses;

  public static final String SERIALIZED_NAME_KEYWORDS = "keywords";
  @SerializedName(SERIALIZED_NAME_KEYWORDS)
  private List<Keyword> keywords;

  public static final String SERIALIZED_NAME_LARGEST_DOWNLOADS = "largest_downloads";
  @SerializedName(SERIALIZED_NAME_LARGEST_DOWNLOADS)
  private List<Download> largestDownloads;

  public static final String SERIALIZED_NAME_LICENSE_MODEL = "license_model";
  @SerializedName(SERIALIZED_NAME_LICENSE_MODEL)
  private String licenseModel;

  public static final String SERIALIZED_NAME_MASTERED_TO = "mastered_to";
  @SerializedName(SERIALIZED_NAME_MASTERED_TO)
  private String masteredTo;

  public static final String SERIALIZED_NAME_ORIGINALLY_SHOT_ON = "originally_shot_on";
  @SerializedName(SERIALIZED_NAME_ORIGINALLY_SHOT_ON)
  private String originallyShotOn;

  public static final String SERIALIZED_NAME_PRODUCT_TYPES = "product_types";
  @SerializedName(SERIALIZED_NAME_PRODUCT_TYPES)
  private List<String> productTypes;

  public static final String SERIALIZED_NAME_REFERRAL_DESTINATIONS = "referral_destinations";
  @SerializedName(SERIALIZED_NAME_REFERRAL_DESTINATIONS)
  private List<ReferralDestination> referralDestinations;

  public static final String SERIALIZED_NAME_SHOT_SPEED = "shot_speed";
  @SerializedName(SERIALIZED_NAME_SHOT_SPEED)
  private String shotSpeed;

  public static final String SERIALIZED_NAME_TITLE = "title";
  @SerializedName(SERIALIZED_NAME_TITLE)
  private String title;

  public CreativeVideoSearchItem() {
  }

  public CreativeVideoSearchItem allowedUse(AllowedUse allowedUse) {
    this.allowedUse = allowedUse;
    return this;
  }

  /**
   * Get allowedUse
   * @return allowedUse
   */
  @javax.annotation.Nullable
  public AllowedUse getAllowedUse() {
    return allowedUse;
  }

  public void setAllowedUse(AllowedUse allowedUse) {
    this.allowedUse = allowedUse;
  }


  public CreativeVideoSearchItem artist(String artist) {
    this.artist = artist;
    return this;
  }

  /**
   * Get artist
   * @return artist
   */
  @javax.annotation.Nullable
  public String getArtist() {
    return artist;
  }

  public void setArtist(String artist) {
    this.artist = artist;
  }


  public CreativeVideoSearchItem assetFamily(String assetFamily) {
    this.assetFamily = assetFamily;
    return this;
  }

  /**
   * Get assetFamily
   * @return assetFamily
   */
  @javax.annotation.Nullable
  public String getAssetFamily() {
    return assetFamily;
  }

  public void setAssetFamily(String assetFamily) {
    this.assetFamily = assetFamily;
  }


  public CreativeVideoSearchItem caption(String caption) {
    this.caption = caption;
    return this;
  }

  /**
   * Get caption
   * @return caption
   */
  @javax.annotation.Nullable
  public String getCaption() {
    return caption;
  }

  public void setCaption(String caption) {
    this.caption = caption;
  }


  public CreativeVideoSearchItem clipLength(String clipLength) {
    this.clipLength = clipLength;
    return this;
  }

  /**
   * Get clipLength
   * @return clipLength
   */
  @javax.annotation.Nullable
  public String getClipLength() {
    return clipLength;
  }

  public void setClipLength(String clipLength) {
    this.clipLength = clipLength;
  }


  public CreativeVideoSearchItem collectionCode(String collectionCode) {
    this.collectionCode = collectionCode;
    return this;
  }

  /**
   * Get collectionCode
   * @return collectionCode
   */
  @javax.annotation.Nullable
  public String getCollectionCode() {
    return collectionCode;
  }

  public void setCollectionCode(String collectionCode) {
    this.collectionCode = collectionCode;
  }


  public CreativeVideoSearchItem collectionId(Integer collectionId) {
    this.collectionId = collectionId;
    return this;
  }

  /**
   * Get collectionId
   * @return collectionId
   */
  @javax.annotation.Nullable
  public Integer getCollectionId() {
    return collectionId;
  }

  public void setCollectionId(Integer collectionId) {
    this.collectionId = collectionId;
  }


  public CreativeVideoSearchItem collectionName(String collectionName) {
    this.collectionName = collectionName;
    return this;
  }

  /**
   * Get collectionName
   * @return collectionName
   */
  @javax.annotation.Nullable
  public String getCollectionName() {
    return collectionName;
  }

  public void setCollectionName(String collectionName) {
    this.collectionName = collectionName;
  }


  public CreativeVideoSearchItem colorType(String colorType) {
    this.colorType = colorType;
    return this;
  }

  /**
   * Get colorType
   * @return colorType
   */
  @javax.annotation.Nullable
  public String getColorType() {
    return colorType;
  }

  public void setColorType(String colorType) {
    this.colorType = colorType;
  }


  public CreativeVideoSearchItem copyright(String copyright) {
    this.copyright = copyright;
    return this;
  }

  /**
   * Get copyright
   * @return copyright
   */
  @javax.annotation.Nullable
  public String getCopyright() {
    return copyright;
  }

  public void setCopyright(String copyright) {
    this.copyright = copyright;
  }


  public CreativeVideoSearchItem dateCreated(OffsetDateTime dateCreated) {
    this.dateCreated = dateCreated;
    return this;
  }

  /**
   * Get dateCreated
   * @return dateCreated
   */
  @javax.annotation.Nullable
  public OffsetDateTime getDateCreated() {
    return dateCreated;
  }

  public void setDateCreated(OffsetDateTime dateCreated) {
    this.dateCreated = dateCreated;
  }


  public CreativeVideoSearchItem displaySizes(List<VideoSearchItemDisplaySize> displaySizes) {
    this.displaySizes = displaySizes;
    return this;
  }

  public CreativeVideoSearchItem addDisplaySizesItem(VideoSearchItemDisplaySize displaySizesItem) {
    if (this.displaySizes == null) {
      this.displaySizes = new ArrayList<>();
    }
    this.displaySizes.add(displaySizesItem);
    return this;
  }

  /**
   * Get displaySizes
   * @return displaySizes
   */
  @javax.annotation.Nullable
  public List<VideoSearchItemDisplaySize> getDisplaySizes() {
    return displaySizes;
  }

  public void setDisplaySizes(List<VideoSearchItemDisplaySize> displaySizes) {
    this.displaySizes = displaySizes;
  }


  public CreativeVideoSearchItem downloadProduct(String downloadProduct) {
    this.downloadProduct = downloadProduct;
    return this;
  }

  /**
   * Get downloadProduct
   * @return downloadProduct
   */
  @javax.annotation.Nullable
  public String getDownloadProduct() {
    return downloadProduct;
  }

  public void setDownloadProduct(String downloadProduct) {
    this.downloadProduct = downloadProduct;
  }


  public CreativeVideoSearchItem era(String era) {
    this.era = era;
    return this;
  }

  /**
   * Get era
   * @return era
   */
  @javax.annotation.Nullable
  public String getEra() {
    return era;
  }

  public void setEra(String era) {
    this.era = era;
  }


  public CreativeVideoSearchItem eventIds(List<Integer> eventIds) {
    this.eventIds = eventIds;
    return this;
  }

  public CreativeVideoSearchItem addEventIdsItem(Integer eventIdsItem) {
    if (this.eventIds == null) {
      this.eventIds = new ArrayList<>();
    }
    this.eventIds.add(eventIdsItem);
    return this;
  }

  /**
   * Get eventIds
   * @return eventIds
   */
  @javax.annotation.Nullable
  public List<Integer> getEventIds() {
    return eventIds;
  }

  public void setEventIds(List<Integer> eventIds) {
    this.eventIds = eventIds;
  }


  public CreativeVideoSearchItem id(String id) {
    this.id = id;
    return this;
  }

  /**
   * Get id
   * @return id
   */
  @javax.annotation.Nullable
  public String getId() {
    return id;
  }

  public void setId(String id) {
    this.id = id;
  }


  public CreativeVideoSearchItem istockLicenses(List<IStockLicense> istockLicenses) {
    this.istockLicenses = istockLicenses;
    return this;
  }

  public CreativeVideoSearchItem addIstockLicensesItem(IStockLicense istockLicensesItem) {
    if (this.istockLicenses == null) {
      this.istockLicenses = new ArrayList<>();
    }
    this.istockLicenses.add(istockLicensesItem);
    return this;
  }

  /**
   * Get istockLicenses
   * @return istockLicenses
   */
  @javax.annotation.Nullable
  public List<IStockLicense> getIstockLicenses() {
    return istockLicenses;
  }

  public void setIstockLicenses(List<IStockLicense> istockLicenses) {
    this.istockLicenses = istockLicenses;
  }


  public CreativeVideoSearchItem keywords(List<Keyword> keywords) {
    this.keywords = keywords;
    return this;
  }

  public CreativeVideoSearchItem addKeywordsItem(Keyword keywordsItem) {
    if (this.keywords == null) {
      this.keywords = new ArrayList<>();
    }
    this.keywords.add(keywordsItem);
    return this;
  }

  /**
   * Get keywords
   * @return keywords
   */
  @javax.annotation.Nullable
  public List<Keyword> getKeywords() {
    return keywords;
  }

  public void setKeywords(List<Keyword> keywords) {
    this.keywords = keywords;
  }


  public CreativeVideoSearchItem largestDownloads(List<Download> largestDownloads) {
    this.largestDownloads = largestDownloads;
    return this;
  }

  public CreativeVideoSearchItem addLargestDownloadsItem(Download largestDownloadsItem) {
    if (this.largestDownloads == null) {
      this.largestDownloads = new ArrayList<>();
    }
    this.largestDownloads.add(largestDownloadsItem);
    return this;
  }

  /**
   * Get largestDownloads
   * @return largestDownloads
   */
  @javax.annotation.Nullable
  public List<Download> getLargestDownloads() {
    return largestDownloads;
  }

  public void setLargestDownloads(List<Download> largestDownloads) {
    this.largestDownloads = largestDownloads;
  }


  public CreativeVideoSearchItem licenseModel(String licenseModel) {
    this.licenseModel = licenseModel;
    return this;
  }

  /**
   * Get licenseModel
   * @return licenseModel
   */
  @javax.annotation.Nullable
  public String getLicenseModel() {
    return licenseModel;
  }

  public void setLicenseModel(String licenseModel) {
    this.licenseModel = licenseModel;
  }


  public CreativeVideoSearchItem masteredTo(String masteredTo) {
    this.masteredTo = masteredTo;
    return this;
  }

  /**
   * Get masteredTo
   * @return masteredTo
   */
  @javax.annotation.Nullable
  public String getMasteredTo() {
    return masteredTo;
  }

  public void setMasteredTo(String masteredTo) {
    this.masteredTo = masteredTo;
  }


  public CreativeVideoSearchItem originallyShotOn(String originallyShotOn) {
    this.originallyShotOn = originallyShotOn;
    return this;
  }

  /**
   * Get originallyShotOn
   * @return originallyShotOn
   */
  @javax.annotation.Nullable
  public String getOriginallyShotOn() {
    return originallyShotOn;
  }

  public void setOriginallyShotOn(String originallyShotOn) {
    this.originallyShotOn = originallyShotOn;
  }


  public CreativeVideoSearchItem productTypes(List<String> productTypes) {
    this.productTypes = productTypes;
    return this;
  }

  public CreativeVideoSearchItem addProductTypesItem(String productTypesItem) {
    if (this.productTypes == null) {
      this.productTypes = new ArrayList<>();
    }
    this.productTypes.add(productTypesItem);
    return this;
  }

  /**
   * Get productTypes
   * @return productTypes
   */
  @javax.annotation.Nullable
  public List<String> getProductTypes() {
    return productTypes;
  }

  public void setProductTypes(List<String> productTypes) {
    this.productTypes = productTypes;
  }


  public CreativeVideoSearchItem referralDestinations(List<ReferralDestination> referralDestinations) {
    this.referralDestinations = referralDestinations;
    return this;
  }

  public CreativeVideoSearchItem addReferralDestinationsItem(ReferralDestination referralDestinationsItem) {
    if (this.referralDestinations == null) {
      this.referralDestinations = new ArrayList<>();
    }
    this.referralDestinations.add(referralDestinationsItem);
    return this;
  }

  /**
   * Get referralDestinations
   * @return referralDestinations
   */
  @javax.annotation.Nullable
  public List<ReferralDestination> getReferralDestinations() {
    return referralDestinations;
  }

  public void setReferralDestinations(List<ReferralDestination> referralDestinations) {
    this.referralDestinations = referralDestinations;
  }


  public CreativeVideoSearchItem shotSpeed(String shotSpeed) {
    this.shotSpeed = shotSpeed;
    return this;
  }

  /**
   * Get shotSpeed
   * @return shotSpeed
   */
  @javax.annotation.Nullable
  public String getShotSpeed() {
    return shotSpeed;
  }

  public void setShotSpeed(String shotSpeed) {
    this.shotSpeed = shotSpeed;
  }


  public CreativeVideoSearchItem title(String title) {
    this.title = title;
    return this;
  }

  /**
   * Get title
   * @return title
   */
  @javax.annotation.Nullable
  public String getTitle() {
    return title;
  }

  public void setTitle(String title) {
    this.title = title;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    CreativeVideoSearchItem creativeVideoSearchItem = (CreativeVideoSearchItem) o;
    return Objects.equals(this.allowedUse, creativeVideoSearchItem.allowedUse) &&
        Objects.equals(this.artist, creativeVideoSearchItem.artist) &&
        Objects.equals(this.assetFamily, creativeVideoSearchItem.assetFamily) &&
        Objects.equals(this.caption, creativeVideoSearchItem.caption) &&
        Objects.equals(this.clipLength, creativeVideoSearchItem.clipLength) &&
        Objects.equals(this.collectionCode, creativeVideoSearchItem.collectionCode) &&
        Objects.equals(this.collectionId, creativeVideoSearchItem.collectionId) &&
        Objects.equals(this.collectionName, creativeVideoSearchItem.collectionName) &&
        Objects.equals(this.colorType, creativeVideoSearchItem.colorType) &&
        Objects.equals(this.copyright, creativeVideoSearchItem.copyright) &&
        Objects.equals(this.dateCreated, creativeVideoSearchItem.dateCreated) &&
        Objects.equals(this.displaySizes, creativeVideoSearchItem.displaySizes) &&
        Objects.equals(this.downloadProduct, creativeVideoSearchItem.downloadProduct) &&
        Objects.equals(this.era, creativeVideoSearchItem.era) &&
        Objects.equals(this.eventIds, creativeVideoSearchItem.eventIds) &&
        Objects.equals(this.id, creativeVideoSearchItem.id) &&
        Objects.equals(this.istockLicenses, creativeVideoSearchItem.istockLicenses) &&
        Objects.equals(this.keywords, creativeVideoSearchItem.keywords) &&
        Objects.equals(this.largestDownloads, creativeVideoSearchItem.largestDownloads) &&
        Objects.equals(this.licenseModel, creativeVideoSearchItem.licenseModel) &&
        Objects.equals(this.masteredTo, creativeVideoSearchItem.masteredTo) &&
        Objects.equals(this.originallyShotOn, creativeVideoSearchItem.originallyShotOn) &&
        Objects.equals(this.productTypes, creativeVideoSearchItem.productTypes) &&
        Objects.equals(this.referralDestinations, creativeVideoSearchItem.referralDestinations) &&
        Objects.equals(this.shotSpeed, creativeVideoSearchItem.shotSpeed) &&
        Objects.equals(this.title, creativeVideoSearchItem.title);
  }

  private static <T> boolean equalsNullable(JsonNullable<T> a, JsonNullable<T> b) {
    return a == b || (a != null && b != null && a.isPresent() && b.isPresent() && Objects.deepEquals(a.get(), b.get()));
  }

  @Override
  public int hashCode() {
    return Objects.hash(allowedUse, artist, assetFamily, caption, clipLength, collectionCode, collectionId, collectionName, colorType, copyright, dateCreated, displaySizes, downloadProduct, era, eventIds, id, istockLicenses, keywords, largestDownloads, licenseModel, masteredTo, originallyShotOn, productTypes, referralDestinations, shotSpeed, title);
  }

  private static <T> int hashCodeNullable(JsonNullable<T> a) {
    if (a == null) {
      return 1;
    }
    return a.isPresent() ? Arrays.deepHashCode(new Object[]{a.get()}) : 31;
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class CreativeVideoSearchItem {\n");
    sb.append("    allowedUse: ").append(toIndentedString(allowedUse)).append("\n");
    sb.append("    artist: ").append(toIndentedString(artist)).append("\n");
    sb.append("    assetFamily: ").append(toIndentedString(assetFamily)).append("\n");
    sb.append("    caption: ").append(toIndentedString(caption)).append("\n");
    sb.append("    clipLength: ").append(toIndentedString(clipLength)).append("\n");
    sb.append("    collectionCode: ").append(toIndentedString(collectionCode)).append("\n");
    sb.append("    collectionId: ").append(toIndentedString(collectionId)).append("\n");
    sb.append("    collectionName: ").append(toIndentedString(collectionName)).append("\n");
    sb.append("    colorType: ").append(toIndentedString(colorType)).append("\n");
    sb.append("    copyright: ").append(toIndentedString(copyright)).append("\n");
    sb.append("    dateCreated: ").append(toIndentedString(dateCreated)).append("\n");
    sb.append("    displaySizes: ").append(toIndentedString(displaySizes)).append("\n");
    sb.append("    downloadProduct: ").append(toIndentedString(downloadProduct)).append("\n");
    sb.append("    era: ").append(toIndentedString(era)).append("\n");
    sb.append("    eventIds: ").append(toIndentedString(eventIds)).append("\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    istockLicenses: ").append(toIndentedString(istockLicenses)).append("\n");
    sb.append("    keywords: ").append(toIndentedString(keywords)).append("\n");
    sb.append("    largestDownloads: ").append(toIndentedString(largestDownloads)).append("\n");
    sb.append("    licenseModel: ").append(toIndentedString(licenseModel)).append("\n");
    sb.append("    masteredTo: ").append(toIndentedString(masteredTo)).append("\n");
    sb.append("    originallyShotOn: ").append(toIndentedString(originallyShotOn)).append("\n");
    sb.append("    productTypes: ").append(toIndentedString(productTypes)).append("\n");
    sb.append("    referralDestinations: ").append(toIndentedString(referralDestinations)).append("\n");
    sb.append("    shotSpeed: ").append(toIndentedString(shotSpeed)).append("\n");
    sb.append("    title: ").append(toIndentedString(title)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("allowed_use");
    openapiFields.add("artist");
    openapiFields.add("asset_family");
    openapiFields.add("caption");
    openapiFields.add("clip_length");
    openapiFields.add("collection_code");
    openapiFields.add("collection_id");
    openapiFields.add("collection_name");
    openapiFields.add("color_type");
    openapiFields.add("copyright");
    openapiFields.add("date_created");
    openapiFields.add("display_sizes");
    openapiFields.add("download_product");
    openapiFields.add("era");
    openapiFields.add("event_ids");
    openapiFields.add("id");
    openapiFields.add("istock_licenses");
    openapiFields.add("keywords");
    openapiFields.add("largest_downloads");
    openapiFields.add("license_model");
    openapiFields.add("mastered_to");
    openapiFields.add("originally_shot_on");
    openapiFields.add("product_types");
    openapiFields.add("referral_destinations");
    openapiFields.add("shot_speed");
    openapiFields.add("title");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to CreativeVideoSearchItem
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!CreativeVideoSearchItem.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in CreativeVideoSearchItem is not found in the empty JSON string", CreativeVideoSearchItem.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!CreativeVideoSearchItem.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `CreativeVideoSearchItem` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `allowed_use`
      if (jsonObj.get("allowed_use") != null && !jsonObj.get("allowed_use").isJsonNull()) {
        AllowedUse.validateJsonElement(jsonObj.get("allowed_use"));
      }
      if ((jsonObj.get("artist") != null && !jsonObj.get("artist").isJsonNull()) && !jsonObj.get("artist").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `artist` to be a primitive type in the JSON string but got `%s`", jsonObj.get("artist").toString()));
      }
      if ((jsonObj.get("asset_family") != null && !jsonObj.get("asset_family").isJsonNull()) && !jsonObj.get("asset_family").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `asset_family` to be a primitive type in the JSON string but got `%s`", jsonObj.get("asset_family").toString()));
      }
      if ((jsonObj.get("caption") != null && !jsonObj.get("caption").isJsonNull()) && !jsonObj.get("caption").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `caption` to be a primitive type in the JSON string but got `%s`", jsonObj.get("caption").toString()));
      }
      if ((jsonObj.get("clip_length") != null && !jsonObj.get("clip_length").isJsonNull()) && !jsonObj.get("clip_length").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `clip_length` to be a primitive type in the JSON string but got `%s`", jsonObj.get("clip_length").toString()));
      }
      if ((jsonObj.get("collection_code") != null && !jsonObj.get("collection_code").isJsonNull()) && !jsonObj.get("collection_code").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `collection_code` to be a primitive type in the JSON string but got `%s`", jsonObj.get("collection_code").toString()));
      }
      if ((jsonObj.get("collection_name") != null && !jsonObj.get("collection_name").isJsonNull()) && !jsonObj.get("collection_name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `collection_name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("collection_name").toString()));
      }
      if ((jsonObj.get("color_type") != null && !jsonObj.get("color_type").isJsonNull()) && !jsonObj.get("color_type").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `color_type` to be a primitive type in the JSON string but got `%s`", jsonObj.get("color_type").toString()));
      }
      if ((jsonObj.get("copyright") != null && !jsonObj.get("copyright").isJsonNull()) && !jsonObj.get("copyright").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `copyright` to be a primitive type in the JSON string but got `%s`", jsonObj.get("copyright").toString()));
      }
      if (jsonObj.get("display_sizes") != null && !jsonObj.get("display_sizes").isJsonNull()) {
        JsonArray jsonArraydisplaySizes = jsonObj.getAsJsonArray("display_sizes");
        if (jsonArraydisplaySizes != null) {
          // ensure the json data is an array
          if (!jsonObj.get("display_sizes").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `display_sizes` to be an array in the JSON string but got `%s`", jsonObj.get("display_sizes").toString()));
          }

          // validate the optional field `display_sizes` (array)
          for (int i = 0; i < jsonArraydisplaySizes.size(); i++) {
            VideoSearchItemDisplaySize.validateJsonElement(jsonArraydisplaySizes.get(i));
          };
        }
      }
      if ((jsonObj.get("download_product") != null && !jsonObj.get("download_product").isJsonNull()) && !jsonObj.get("download_product").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `download_product` to be a primitive type in the JSON string but got `%s`", jsonObj.get("download_product").toString()));
      }
      if ((jsonObj.get("era") != null && !jsonObj.get("era").isJsonNull()) && !jsonObj.get("era").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `era` to be a primitive type in the JSON string but got `%s`", jsonObj.get("era").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("event_ids") != null && !jsonObj.get("event_ids").isJsonNull() && !jsonObj.get("event_ids").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `event_ids` to be an array in the JSON string but got `%s`", jsonObj.get("event_ids").toString()));
      }
      if ((jsonObj.get("id") != null && !jsonObj.get("id").isJsonNull()) && !jsonObj.get("id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("id").toString()));
      }
      if (jsonObj.get("istock_licenses") != null && !jsonObj.get("istock_licenses").isJsonNull()) {
        JsonArray jsonArrayistockLicenses = jsonObj.getAsJsonArray("istock_licenses");
        if (jsonArrayistockLicenses != null) {
          // ensure the json data is an array
          if (!jsonObj.get("istock_licenses").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `istock_licenses` to be an array in the JSON string but got `%s`", jsonObj.get("istock_licenses").toString()));
          }

          // validate the optional field `istock_licenses` (array)
          for (int i = 0; i < jsonArrayistockLicenses.size(); i++) {
            IStockLicense.validateJsonElement(jsonArrayistockLicenses.get(i));
          };
        }
      }
      if (jsonObj.get("keywords") != null && !jsonObj.get("keywords").isJsonNull()) {
        JsonArray jsonArraykeywords = jsonObj.getAsJsonArray("keywords");
        if (jsonArraykeywords != null) {
          // ensure the json data is an array
          if (!jsonObj.get("keywords").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `keywords` to be an array in the JSON string but got `%s`", jsonObj.get("keywords").toString()));
          }

          // validate the optional field `keywords` (array)
          for (int i = 0; i < jsonArraykeywords.size(); i++) {
            Keyword.validateJsonElement(jsonArraykeywords.get(i));
          };
        }
      }
      if (jsonObj.get("largest_downloads") != null && !jsonObj.get("largest_downloads").isJsonNull()) {
        JsonArray jsonArraylargestDownloads = jsonObj.getAsJsonArray("largest_downloads");
        if (jsonArraylargestDownloads != null) {
          // ensure the json data is an array
          if (!jsonObj.get("largest_downloads").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `largest_downloads` to be an array in the JSON string but got `%s`", jsonObj.get("largest_downloads").toString()));
          }

          // validate the optional field `largest_downloads` (array)
          for (int i = 0; i < jsonArraylargestDownloads.size(); i++) {
            Download.validateJsonElement(jsonArraylargestDownloads.get(i));
          };
        }
      }
      if ((jsonObj.get("license_model") != null && !jsonObj.get("license_model").isJsonNull()) && !jsonObj.get("license_model").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `license_model` to be a primitive type in the JSON string but got `%s`", jsonObj.get("license_model").toString()));
      }
      if ((jsonObj.get("mastered_to") != null && !jsonObj.get("mastered_to").isJsonNull()) && !jsonObj.get("mastered_to").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `mastered_to` to be a primitive type in the JSON string but got `%s`", jsonObj.get("mastered_to").toString()));
      }
      if ((jsonObj.get("originally_shot_on") != null && !jsonObj.get("originally_shot_on").isJsonNull()) && !jsonObj.get("originally_shot_on").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `originally_shot_on` to be a primitive type in the JSON string but got `%s`", jsonObj.get("originally_shot_on").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("product_types") != null && !jsonObj.get("product_types").isJsonNull() && !jsonObj.get("product_types").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `product_types` to be an array in the JSON string but got `%s`", jsonObj.get("product_types").toString()));
      }
      if (jsonObj.get("referral_destinations") != null && !jsonObj.get("referral_destinations").isJsonNull()) {
        JsonArray jsonArrayreferralDestinations = jsonObj.getAsJsonArray("referral_destinations");
        if (jsonArrayreferralDestinations != null) {
          // ensure the json data is an array
          if (!jsonObj.get("referral_destinations").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `referral_destinations` to be an array in the JSON string but got `%s`", jsonObj.get("referral_destinations").toString()));
          }

          // validate the optional field `referral_destinations` (array)
          for (int i = 0; i < jsonArrayreferralDestinations.size(); i++) {
            ReferralDestination.validateJsonElement(jsonArrayreferralDestinations.get(i));
          };
        }
      }
      if ((jsonObj.get("shot_speed") != null && !jsonObj.get("shot_speed").isJsonNull()) && !jsonObj.get("shot_speed").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `shot_speed` to be a primitive type in the JSON string but got `%s`", jsonObj.get("shot_speed").toString()));
      }
      if ((jsonObj.get("title") != null && !jsonObj.get("title").isJsonNull()) && !jsonObj.get("title").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `title` to be a primitive type in the JSON string but got `%s`", jsonObj.get("title").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!CreativeVideoSearchItem.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'CreativeVideoSearchItem' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<CreativeVideoSearchItem> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(CreativeVideoSearchItem.class));

       return (TypeAdapter<T>) new TypeAdapter<CreativeVideoSearchItem>() {
           @Override
           public void write(JsonWriter out, CreativeVideoSearchItem value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public CreativeVideoSearchItem read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of CreativeVideoSearchItem given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of CreativeVideoSearchItem
   * @throws IOException if the JSON string is invalid with respect to CreativeVideoSearchItem
   */
  public static CreativeVideoSearchItem fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, CreativeVideoSearchItem.class);
  }

  /**
   * Convert an instance of CreativeVideoSearchItem to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

