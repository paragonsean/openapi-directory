/*
 * Getty Images
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 3
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.AutoCorrections;
import org.openapitools.client.model.CreativeVideoSearchItem;
import org.openapitools.client.model.RelatedSearch;
import org.openapitools.client.model.SearchFacetsResponse;
import org.openapitools.jackson.nullable.JsonNullable;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * CreativeVideoSearchResults
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T10:09:49.731753-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class CreativeVideoSearchResults {
  public static final String SERIALIZED_NAME_AUTO_CORRECTIONS = "auto_corrections";
  @SerializedName(SERIALIZED_NAME_AUTO_CORRECTIONS)
  private AutoCorrections autoCorrections;

  public static final String SERIALIZED_NAME_FACETS = "facets";
  @SerializedName(SERIALIZED_NAME_FACETS)
  private SearchFacetsResponse facets;

  public static final String SERIALIZED_NAME_RELATED_SEARCHES = "related_searches";
  @SerializedName(SERIALIZED_NAME_RELATED_SEARCHES)
  private List<RelatedSearch> relatedSearches;

  public static final String SERIALIZED_NAME_RESULT_COUNT = "result_count";
  @SerializedName(SERIALIZED_NAME_RESULT_COUNT)
  private Integer resultCount;

  public static final String SERIALIZED_NAME_VIDEOS = "videos";
  @SerializedName(SERIALIZED_NAME_VIDEOS)
  private List<CreativeVideoSearchItem> videos;

  public CreativeVideoSearchResults() {
  }

  public CreativeVideoSearchResults autoCorrections(AutoCorrections autoCorrections) {
    this.autoCorrections = autoCorrections;
    return this;
  }

  /**
   * Get autoCorrections
   * @return autoCorrections
   */
  @javax.annotation.Nullable
  public AutoCorrections getAutoCorrections() {
    return autoCorrections;
  }

  public void setAutoCorrections(AutoCorrections autoCorrections) {
    this.autoCorrections = autoCorrections;
  }


  public CreativeVideoSearchResults facets(SearchFacetsResponse facets) {
    this.facets = facets;
    return this;
  }

  /**
   * Get facets
   * @return facets
   */
  @javax.annotation.Nullable
  public SearchFacetsResponse getFacets() {
    return facets;
  }

  public void setFacets(SearchFacetsResponse facets) {
    this.facets = facets;
  }


  public CreativeVideoSearchResults relatedSearches(List<RelatedSearch> relatedSearches) {
    this.relatedSearches = relatedSearches;
    return this;
  }

  public CreativeVideoSearchResults addRelatedSearchesItem(RelatedSearch relatedSearchesItem) {
    if (this.relatedSearches == null) {
      this.relatedSearches = new ArrayList<>();
    }
    this.relatedSearches.add(relatedSearchesItem);
    return this;
  }

  /**
   * Get relatedSearches
   * @return relatedSearches
   */
  @javax.annotation.Nullable
  public List<RelatedSearch> getRelatedSearches() {
    return relatedSearches;
  }

  public void setRelatedSearches(List<RelatedSearch> relatedSearches) {
    this.relatedSearches = relatedSearches;
  }


  public CreativeVideoSearchResults resultCount(Integer resultCount) {
    this.resultCount = resultCount;
    return this;
  }

  /**
   * Get resultCount
   * @return resultCount
   */
  @javax.annotation.Nullable
  public Integer getResultCount() {
    return resultCount;
  }

  public void setResultCount(Integer resultCount) {
    this.resultCount = resultCount;
  }


  public CreativeVideoSearchResults videos(List<CreativeVideoSearchItem> videos) {
    this.videos = videos;
    return this;
  }

  public CreativeVideoSearchResults addVideosItem(CreativeVideoSearchItem videosItem) {
    if (this.videos == null) {
      this.videos = new ArrayList<>();
    }
    this.videos.add(videosItem);
    return this;
  }

  /**
   * Get videos
   * @return videos
   */
  @javax.annotation.Nullable
  public List<CreativeVideoSearchItem> getVideos() {
    return videos;
  }

  public void setVideos(List<CreativeVideoSearchItem> videos) {
    this.videos = videos;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    CreativeVideoSearchResults creativeVideoSearchResults = (CreativeVideoSearchResults) o;
    return Objects.equals(this.autoCorrections, creativeVideoSearchResults.autoCorrections) &&
        Objects.equals(this.facets, creativeVideoSearchResults.facets) &&
        Objects.equals(this.relatedSearches, creativeVideoSearchResults.relatedSearches) &&
        Objects.equals(this.resultCount, creativeVideoSearchResults.resultCount) &&
        Objects.equals(this.videos, creativeVideoSearchResults.videos);
  }

  private static <T> boolean equalsNullable(JsonNullable<T> a, JsonNullable<T> b) {
    return a == b || (a != null && b != null && a.isPresent() && b.isPresent() && Objects.deepEquals(a.get(), b.get()));
  }

  @Override
  public int hashCode() {
    return Objects.hash(autoCorrections, facets, relatedSearches, resultCount, videos);
  }

  private static <T> int hashCodeNullable(JsonNullable<T> a) {
    if (a == null) {
      return 1;
    }
    return a.isPresent() ? Arrays.deepHashCode(new Object[]{a.get()}) : 31;
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class CreativeVideoSearchResults {\n");
    sb.append("    autoCorrections: ").append(toIndentedString(autoCorrections)).append("\n");
    sb.append("    facets: ").append(toIndentedString(facets)).append("\n");
    sb.append("    relatedSearches: ").append(toIndentedString(relatedSearches)).append("\n");
    sb.append("    resultCount: ").append(toIndentedString(resultCount)).append("\n");
    sb.append("    videos: ").append(toIndentedString(videos)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("auto_corrections");
    openapiFields.add("facets");
    openapiFields.add("related_searches");
    openapiFields.add("result_count");
    openapiFields.add("videos");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to CreativeVideoSearchResults
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!CreativeVideoSearchResults.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in CreativeVideoSearchResults is not found in the empty JSON string", CreativeVideoSearchResults.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!CreativeVideoSearchResults.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `CreativeVideoSearchResults` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `auto_corrections`
      if (jsonObj.get("auto_corrections") != null && !jsonObj.get("auto_corrections").isJsonNull()) {
        AutoCorrections.validateJsonElement(jsonObj.get("auto_corrections"));
      }
      // validate the optional field `facets`
      if (jsonObj.get("facets") != null && !jsonObj.get("facets").isJsonNull()) {
        SearchFacetsResponse.validateJsonElement(jsonObj.get("facets"));
      }
      if (jsonObj.get("related_searches") != null && !jsonObj.get("related_searches").isJsonNull()) {
        JsonArray jsonArrayrelatedSearches = jsonObj.getAsJsonArray("related_searches");
        if (jsonArrayrelatedSearches != null) {
          // ensure the json data is an array
          if (!jsonObj.get("related_searches").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `related_searches` to be an array in the JSON string but got `%s`", jsonObj.get("related_searches").toString()));
          }

          // validate the optional field `related_searches` (array)
          for (int i = 0; i < jsonArrayrelatedSearches.size(); i++) {
            RelatedSearch.validateJsonElement(jsonArrayrelatedSearches.get(i));
          };
        }
      }
      if (jsonObj.get("videos") != null && !jsonObj.get("videos").isJsonNull()) {
        JsonArray jsonArrayvideos = jsonObj.getAsJsonArray("videos");
        if (jsonArrayvideos != null) {
          // ensure the json data is an array
          if (!jsonObj.get("videos").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `videos` to be an array in the JSON string but got `%s`", jsonObj.get("videos").toString()));
          }

          // validate the optional field `videos` (array)
          for (int i = 0; i < jsonArrayvideos.size(); i++) {
            CreativeVideoSearchItem.validateJsonElement(jsonArrayvideos.get(i));
          };
        }
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!CreativeVideoSearchResults.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'CreativeVideoSearchResults' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<CreativeVideoSearchResults> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(CreativeVideoSearchResults.class));

       return (TypeAdapter<T>) new TypeAdapter<CreativeVideoSearchResults>() {
           @Override
           public void write(JsonWriter out, CreativeVideoSearchResults value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public CreativeVideoSearchResults read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of CreativeVideoSearchResults given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of CreativeVideoSearchResults
   * @throws IOException if the JSON string is invalid with respect to CreativeVideoSearchResults
   */
  public static CreativeVideoSearchResults fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, CreativeVideoSearchResults.class);
  }

  /**
   * Convert an instance of CreativeVideoSearchResults to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

