/*
 * Getty Images
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 3
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import org.openapitools.jackson.nullable.JsonNullable;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * AffiliateImageUrls
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T10:09:49.731753-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class AffiliateImageUrls {
  public static final String SERIALIZED_NAME_LARGE = "large";
  @SerializedName(SERIALIZED_NAME_LARGE)
  private String large;

  public static final String SERIALIZED_NAME_LARGE_HEIGHT = "large_height";
  @SerializedName(SERIALIZED_NAME_LARGE_HEIGHT)
  private Integer largeHeight;

  public static final String SERIALIZED_NAME_LARGE_WIDTH = "large_width";
  @SerializedName(SERIALIZED_NAME_LARGE_WIDTH)
  private Integer largeWidth;

  public static final String SERIALIZED_NAME_MEDIUM = "medium";
  @SerializedName(SERIALIZED_NAME_MEDIUM)
  private String medium;

  public static final String SERIALIZED_NAME_MEDIUM_HEIGHT = "medium_height";
  @SerializedName(SERIALIZED_NAME_MEDIUM_HEIGHT)
  private Integer mediumHeight;

  public static final String SERIALIZED_NAME_MEDIUM_WIDTH = "medium_width";
  @SerializedName(SERIALIZED_NAME_MEDIUM_WIDTH)
  private Integer mediumWidth;

  public static final String SERIALIZED_NAME_SMALL = "small";
  @SerializedName(SERIALIZED_NAME_SMALL)
  private String small;

  public static final String SERIALIZED_NAME_SMALL_HEIGHT = "small_height";
  @SerializedName(SERIALIZED_NAME_SMALL_HEIGHT)
  private Integer smallHeight;

  public static final String SERIALIZED_NAME_SMALL_WIDTH = "small_width";
  @SerializedName(SERIALIZED_NAME_SMALL_WIDTH)
  private Integer smallWidth;

  public AffiliateImageUrls() {
  }

  public AffiliateImageUrls large(String large) {
    this.large = large;
    return this;
  }

  /**
   * Get large
   * @return large
   */
  @javax.annotation.Nullable
  public String getLarge() {
    return large;
  }

  public void setLarge(String large) {
    this.large = large;
  }


  public AffiliateImageUrls largeHeight(Integer largeHeight) {
    this.largeHeight = largeHeight;
    return this;
  }

  /**
   * Get largeHeight
   * @return largeHeight
   */
  @javax.annotation.Nullable
  public Integer getLargeHeight() {
    return largeHeight;
  }

  public void setLargeHeight(Integer largeHeight) {
    this.largeHeight = largeHeight;
  }


  public AffiliateImageUrls largeWidth(Integer largeWidth) {
    this.largeWidth = largeWidth;
    return this;
  }

  /**
   * Get largeWidth
   * @return largeWidth
   */
  @javax.annotation.Nullable
  public Integer getLargeWidth() {
    return largeWidth;
  }

  public void setLargeWidth(Integer largeWidth) {
    this.largeWidth = largeWidth;
  }


  public AffiliateImageUrls medium(String medium) {
    this.medium = medium;
    return this;
  }

  /**
   * Get medium
   * @return medium
   */
  @javax.annotation.Nullable
  public String getMedium() {
    return medium;
  }

  public void setMedium(String medium) {
    this.medium = medium;
  }


  public AffiliateImageUrls mediumHeight(Integer mediumHeight) {
    this.mediumHeight = mediumHeight;
    return this;
  }

  /**
   * Get mediumHeight
   * @return mediumHeight
   */
  @javax.annotation.Nullable
  public Integer getMediumHeight() {
    return mediumHeight;
  }

  public void setMediumHeight(Integer mediumHeight) {
    this.mediumHeight = mediumHeight;
  }


  public AffiliateImageUrls mediumWidth(Integer mediumWidth) {
    this.mediumWidth = mediumWidth;
    return this;
  }

  /**
   * Get mediumWidth
   * @return mediumWidth
   */
  @javax.annotation.Nullable
  public Integer getMediumWidth() {
    return mediumWidth;
  }

  public void setMediumWidth(Integer mediumWidth) {
    this.mediumWidth = mediumWidth;
  }


  public AffiliateImageUrls small(String small) {
    this.small = small;
    return this;
  }

  /**
   * Get small
   * @return small
   */
  @javax.annotation.Nullable
  public String getSmall() {
    return small;
  }

  public void setSmall(String small) {
    this.small = small;
  }


  public AffiliateImageUrls smallHeight(Integer smallHeight) {
    this.smallHeight = smallHeight;
    return this;
  }

  /**
   * Get smallHeight
   * @return smallHeight
   */
  @javax.annotation.Nullable
  public Integer getSmallHeight() {
    return smallHeight;
  }

  public void setSmallHeight(Integer smallHeight) {
    this.smallHeight = smallHeight;
  }


  public AffiliateImageUrls smallWidth(Integer smallWidth) {
    this.smallWidth = smallWidth;
    return this;
  }

  /**
   * Get smallWidth
   * @return smallWidth
   */
  @javax.annotation.Nullable
  public Integer getSmallWidth() {
    return smallWidth;
  }

  public void setSmallWidth(Integer smallWidth) {
    this.smallWidth = smallWidth;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    AffiliateImageUrls affiliateImageUrls = (AffiliateImageUrls) o;
    return Objects.equals(this.large, affiliateImageUrls.large) &&
        Objects.equals(this.largeHeight, affiliateImageUrls.largeHeight) &&
        Objects.equals(this.largeWidth, affiliateImageUrls.largeWidth) &&
        Objects.equals(this.medium, affiliateImageUrls.medium) &&
        Objects.equals(this.mediumHeight, affiliateImageUrls.mediumHeight) &&
        Objects.equals(this.mediumWidth, affiliateImageUrls.mediumWidth) &&
        Objects.equals(this.small, affiliateImageUrls.small) &&
        Objects.equals(this.smallHeight, affiliateImageUrls.smallHeight) &&
        Objects.equals(this.smallWidth, affiliateImageUrls.smallWidth);
  }

  private static <T> boolean equalsNullable(JsonNullable<T> a, JsonNullable<T> b) {
    return a == b || (a != null && b != null && a.isPresent() && b.isPresent() && Objects.deepEquals(a.get(), b.get()));
  }

  @Override
  public int hashCode() {
    return Objects.hash(large, largeHeight, largeWidth, medium, mediumHeight, mediumWidth, small, smallHeight, smallWidth);
  }

  private static <T> int hashCodeNullable(JsonNullable<T> a) {
    if (a == null) {
      return 1;
    }
    return a.isPresent() ? Arrays.deepHashCode(new Object[]{a.get()}) : 31;
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class AffiliateImageUrls {\n");
    sb.append("    large: ").append(toIndentedString(large)).append("\n");
    sb.append("    largeHeight: ").append(toIndentedString(largeHeight)).append("\n");
    sb.append("    largeWidth: ").append(toIndentedString(largeWidth)).append("\n");
    sb.append("    medium: ").append(toIndentedString(medium)).append("\n");
    sb.append("    mediumHeight: ").append(toIndentedString(mediumHeight)).append("\n");
    sb.append("    mediumWidth: ").append(toIndentedString(mediumWidth)).append("\n");
    sb.append("    small: ").append(toIndentedString(small)).append("\n");
    sb.append("    smallHeight: ").append(toIndentedString(smallHeight)).append("\n");
    sb.append("    smallWidth: ").append(toIndentedString(smallWidth)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("large");
    openapiFields.add("large_height");
    openapiFields.add("large_width");
    openapiFields.add("medium");
    openapiFields.add("medium_height");
    openapiFields.add("medium_width");
    openapiFields.add("small");
    openapiFields.add("small_height");
    openapiFields.add("small_width");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to AffiliateImageUrls
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!AffiliateImageUrls.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in AffiliateImageUrls is not found in the empty JSON string", AffiliateImageUrls.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!AffiliateImageUrls.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `AffiliateImageUrls` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("large") != null && !jsonObj.get("large").isJsonNull()) && !jsonObj.get("large").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `large` to be a primitive type in the JSON string but got `%s`", jsonObj.get("large").toString()));
      }
      if ((jsonObj.get("medium") != null && !jsonObj.get("medium").isJsonNull()) && !jsonObj.get("medium").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `medium` to be a primitive type in the JSON string but got `%s`", jsonObj.get("medium").toString()));
      }
      if ((jsonObj.get("small") != null && !jsonObj.get("small").isJsonNull()) && !jsonObj.get("small").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `small` to be a primitive type in the JSON string but got `%s`", jsonObj.get("small").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!AffiliateImageUrls.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'AffiliateImageUrls' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<AffiliateImageUrls> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(AffiliateImageUrls.class));

       return (TypeAdapter<T>) new TypeAdapter<AffiliateImageUrls>() {
           @Override
           public void write(JsonWriter out, AffiliateImageUrls value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public AffiliateImageUrls read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of AffiliateImageUrls given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of AffiliateImageUrls
   * @throws IOException if the JSON string is invalid with respect to AffiliateImageUrls
   */
  public static AffiliateImageUrls fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, AffiliateImageUrls.class);
  }

  /**
   * Convert an instance of AffiliateImageUrls to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

