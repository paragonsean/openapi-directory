/**
 * Getty Images
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 3
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIPreviousPurchase.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIPreviousPurchase::OAIPreviousPurchase(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIPreviousPurchase::OAIPreviousPurchase() {
    this->initializeModel();
}

OAIPreviousPurchase::~OAIPreviousPurchase() {}

void OAIPreviousPurchase::initializeModel() {

    m_date_purchased_isSet = false;
    m_date_purchased_isValid = false;

    m_image_id_isSet = false;
    m_image_id_isValid = false;

    m_license_model_isSet = false;
    m_license_model_isValid = false;

    m_order_id_isSet = false;
    m_order_id_isValid = false;

    m_thumb_uri_isSet = false;
    m_thumb_uri_isValid = false;
}

void OAIPreviousPurchase::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIPreviousPurchase::fromJsonObject(QJsonObject json) {

    m_date_purchased_isValid = ::OpenAPI::fromJsonValue(m_date_purchased, json[QString("date_purchased")]);
    m_date_purchased_isSet = !json[QString("date_purchased")].isNull() && m_date_purchased_isValid;

    m_image_id_isValid = ::OpenAPI::fromJsonValue(m_image_id, json[QString("image_id")]);
    m_image_id_isSet = !json[QString("image_id")].isNull() && m_image_id_isValid;

    m_license_model_isValid = ::OpenAPI::fromJsonValue(m_license_model, json[QString("license_model")]);
    m_license_model_isSet = !json[QString("license_model")].isNull() && m_license_model_isValid;

    m_order_id_isValid = ::OpenAPI::fromJsonValue(m_order_id, json[QString("order_id")]);
    m_order_id_isSet = !json[QString("order_id")].isNull() && m_order_id_isValid;

    m_thumb_uri_isValid = ::OpenAPI::fromJsonValue(m_thumb_uri, json[QString("thumb_uri")]);
    m_thumb_uri_isSet = !json[QString("thumb_uri")].isNull() && m_thumb_uri_isValid;
}

QString OAIPreviousPurchase::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIPreviousPurchase::asJsonObject() const {
    QJsonObject obj;
    if (m_date_purchased_isSet) {
        obj.insert(QString("date_purchased"), ::OpenAPI::toJsonValue(m_date_purchased));
    }
    if (m_image_id_isSet) {
        obj.insert(QString("image_id"), ::OpenAPI::toJsonValue(m_image_id));
    }
    if (m_license_model_isSet) {
        obj.insert(QString("license_model"), ::OpenAPI::toJsonValue(m_license_model));
    }
    if (m_order_id_isSet) {
        obj.insert(QString("order_id"), ::OpenAPI::toJsonValue(m_order_id));
    }
    if (m_thumb_uri_isSet) {
        obj.insert(QString("thumb_uri"), ::OpenAPI::toJsonValue(m_thumb_uri));
    }
    return obj;
}

QDateTime OAIPreviousPurchase::getDatePurchased() const {
    return m_date_purchased;
}
void OAIPreviousPurchase::setDatePurchased(const QDateTime &date_purchased) {
    m_date_purchased = date_purchased;
    m_date_purchased_isSet = true;
}

bool OAIPreviousPurchase::is_date_purchased_Set() const{
    return m_date_purchased_isSet;
}

bool OAIPreviousPurchase::is_date_purchased_Valid() const{
    return m_date_purchased_isValid;
}

QString OAIPreviousPurchase::getImageId() const {
    return m_image_id;
}
void OAIPreviousPurchase::setImageId(const QString &image_id) {
    m_image_id = image_id;
    m_image_id_isSet = true;
}

bool OAIPreviousPurchase::is_image_id_Set() const{
    return m_image_id_isSet;
}

bool OAIPreviousPurchase::is_image_id_Valid() const{
    return m_image_id_isValid;
}

QString OAIPreviousPurchase::getLicenseModel() const {
    return m_license_model;
}
void OAIPreviousPurchase::setLicenseModel(const QString &license_model) {
    m_license_model = license_model;
    m_license_model_isSet = true;
}

bool OAIPreviousPurchase::is_license_model_Set() const{
    return m_license_model_isSet;
}

bool OAIPreviousPurchase::is_license_model_Valid() const{
    return m_license_model_isValid;
}

QString OAIPreviousPurchase::getOrderId() const {
    return m_order_id;
}
void OAIPreviousPurchase::setOrderId(const QString &order_id) {
    m_order_id = order_id;
    m_order_id_isSet = true;
}

bool OAIPreviousPurchase::is_order_id_Set() const{
    return m_order_id_isSet;
}

bool OAIPreviousPurchase::is_order_id_Valid() const{
    return m_order_id_isValid;
}

QString OAIPreviousPurchase::getThumbUri() const {
    return m_thumb_uri;
}
void OAIPreviousPurchase::setThumbUri(const QString &thumb_uri) {
    m_thumb_uri = thumb_uri;
    m_thumb_uri_isSet = true;
}

bool OAIPreviousPurchase::is_thumb_uri_Set() const{
    return m_thumb_uri_isSet;
}

bool OAIPreviousPurchase::is_thumb_uri_Valid() const{
    return m_thumb_uri_isValid;
}

bool OAIPreviousPurchase::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_date_purchased_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_image_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_license_model_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_order_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_thumb_uri_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIPreviousPurchase::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
