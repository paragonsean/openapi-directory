/**
 * Getty Images
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 3
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIExtendedLicenses.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIExtendedLicenses::OAIExtendedLicenses(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIExtendedLicenses::OAIExtendedLicenses() {
    this->initializeModel();
}

OAIExtendedLicenses::~OAIExtendedLicenses() {}

void OAIExtendedLicenses::initializeModel() {

    m_value_isSet = false;
    m_value_isValid = false;
    m_value = eOAIExtendedLicenses::INVALID_VALUE_OPENAPI_GENERATED;
}

void OAIExtendedLicenses::fromJson(QString jsonString) {
    
    if ( jsonString.compare("multiseat", Qt::CaseInsensitive) == 0) {
        m_value = eOAIExtendedLicenses::MULTISEAT;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("unlimited", Qt::CaseInsensitive) == 0) {
        m_value = eOAIExtendedLicenses::UNLIMITED;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("resale", Qt::CaseInsensitive) == 0) {
        m_value = eOAIExtendedLicenses::RESALE;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("indemnification", Qt::CaseInsensitive) == 0) {
        m_value = eOAIExtendedLicenses::INDEMNIFICATION;
        m_value_isSet = m_value_isValid = true;
    }
}

void OAIExtendedLicenses::fromJsonValue(QJsonValue json) {
fromJson(json.toString());
}

QString OAIExtendedLicenses::asJson() const {
    
    QString val;
    switch (m_value){
        case eOAIExtendedLicenses::MULTISEAT:
            val = "multiseat";
            break;
        case eOAIExtendedLicenses::UNLIMITED:
            val = "unlimited";
            break;
        case eOAIExtendedLicenses::RESALE:
            val = "resale";
            break;
        case eOAIExtendedLicenses::INDEMNIFICATION:
            val = "indemnification";
            break;
        default:
            break;
    }
    return val;
}

QJsonValue OAIExtendedLicenses::asJsonValue() const {
    
    return QJsonValue(asJson());
}


OAIExtendedLicenses::eOAIExtendedLicenses OAIExtendedLicenses::getValue() const {
    return m_value;
}

void OAIExtendedLicenses::setValue(const OAIExtendedLicenses::eOAIExtendedLicenses& value){
    m_value = value;
    m_value_isSet = true;
}
bool OAIExtendedLicenses::isSet() const {
    
    return m_value_isSet;
}

bool OAIExtendedLicenses::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_value_isValid;
}

} // namespace OpenAPI
