/**
 * Getty Images
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 3
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAILocationEvent.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAILocationEvent::OAILocationEvent(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAILocationEvent::OAILocationEvent() {
    this->initializeModel();
}

OAILocationEvent::~OAILocationEvent() {}

void OAILocationEvent::initializeModel() {

    m_city_isSet = false;
    m_city_isValid = false;

    m_country_isSet = false;
    m_country_isValid = false;

    m_state_province_isSet = false;
    m_state_province_isValid = false;

    m_venue_isSet = false;
    m_venue_isValid = false;
}

void OAILocationEvent::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAILocationEvent::fromJsonObject(QJsonObject json) {

    m_city_isValid = ::OpenAPI::fromJsonValue(m_city, json[QString("city")]);
    m_city_isSet = !json[QString("city")].isNull() && m_city_isValid;

    m_country_isValid = ::OpenAPI::fromJsonValue(m_country, json[QString("country")]);
    m_country_isSet = !json[QString("country")].isNull() && m_country_isValid;

    m_state_province_isValid = ::OpenAPI::fromJsonValue(m_state_province, json[QString("state_province")]);
    m_state_province_isSet = !json[QString("state_province")].isNull() && m_state_province_isValid;

    m_venue_isValid = ::OpenAPI::fromJsonValue(m_venue, json[QString("venue")]);
    m_venue_isSet = !json[QString("venue")].isNull() && m_venue_isValid;
}

QString OAILocationEvent::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAILocationEvent::asJsonObject() const {
    QJsonObject obj;
    if (m_city_isSet) {
        obj.insert(QString("city"), ::OpenAPI::toJsonValue(m_city));
    }
    if (m_country_isSet) {
        obj.insert(QString("country"), ::OpenAPI::toJsonValue(m_country));
    }
    if (m_state_province_isSet) {
        obj.insert(QString("state_province"), ::OpenAPI::toJsonValue(m_state_province));
    }
    if (m_venue_isSet) {
        obj.insert(QString("venue"), ::OpenAPI::toJsonValue(m_venue));
    }
    return obj;
}

QString OAILocationEvent::getCity() const {
    return m_city;
}
void OAILocationEvent::setCity(const QString &city) {
    m_city = city;
    m_city_isSet = true;
}

bool OAILocationEvent::is_city_Set() const{
    return m_city_isSet;
}

bool OAILocationEvent::is_city_Valid() const{
    return m_city_isValid;
}

QString OAILocationEvent::getCountry() const {
    return m_country;
}
void OAILocationEvent::setCountry(const QString &country) {
    m_country = country;
    m_country_isSet = true;
}

bool OAILocationEvent::is_country_Set() const{
    return m_country_isSet;
}

bool OAILocationEvent::is_country_Valid() const{
    return m_country_isValid;
}

QString OAILocationEvent::getStateProvince() const {
    return m_state_province;
}
void OAILocationEvent::setStateProvince(const QString &state_province) {
    m_state_province = state_province;
    m_state_province_isSet = true;
}

bool OAILocationEvent::is_state_province_Set() const{
    return m_state_province_isSet;
}

bool OAILocationEvent::is_state_province_Valid() const{
    return m_state_province_isValid;
}

QString OAILocationEvent::getVenue() const {
    return m_venue;
}
void OAILocationEvent::setVenue(const QString &venue) {
    m_venue = venue;
    m_venue_isSet = true;
}

bool OAILocationEvent::is_venue_Set() const{
    return m_venue_isSet;
}

bool OAILocationEvent::is_venue_Valid() const{
    return m_venue_isValid;
}

bool OAILocationEvent::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_city_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_country_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_state_province_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_venue_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAILocationEvent::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
