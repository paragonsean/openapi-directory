/**
 * Getty Images
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 3
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIAllowedUse.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIAllowedUse::OAIAllowedUse(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIAllowedUse::OAIAllowedUse() {
    this->initializeModel();
}

OAIAllowedUse::~OAIAllowedUse() {}

void OAIAllowedUse::initializeModel() {

    m_how_can_i_use_it_isSet = false;
    m_how_can_i_use_it_isValid = false;

    m_release_info_isSet = false;
    m_release_info_isValid = false;

    m_usage_restrictions_isSet = false;
    m_usage_restrictions_isValid = false;
}

void OAIAllowedUse::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIAllowedUse::fromJsonObject(QJsonObject json) {

    m_how_can_i_use_it_isValid = ::OpenAPI::fromJsonValue(m_how_can_i_use_it, json[QString("how_can_i_use_it")]);
    m_how_can_i_use_it_isSet = !json[QString("how_can_i_use_it")].isNull() && m_how_can_i_use_it_isValid;

    m_release_info_isValid = ::OpenAPI::fromJsonValue(m_release_info, json[QString("release_info")]);
    m_release_info_isSet = !json[QString("release_info")].isNull() && m_release_info_isValid;

    m_usage_restrictions_isValid = ::OpenAPI::fromJsonValue(m_usage_restrictions, json[QString("usage_restrictions")]);
    m_usage_restrictions_isSet = !json[QString("usage_restrictions")].isNull() && m_usage_restrictions_isValid;
}

QString OAIAllowedUse::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIAllowedUse::asJsonObject() const {
    QJsonObject obj;
    if (m_how_can_i_use_it_isSet) {
        obj.insert(QString("how_can_i_use_it"), ::OpenAPI::toJsonValue(m_how_can_i_use_it));
    }
    if (m_release_info_isSet) {
        obj.insert(QString("release_info"), ::OpenAPI::toJsonValue(m_release_info));
    }
    if (m_usage_restrictions.size() > 0) {
        obj.insert(QString("usage_restrictions"), ::OpenAPI::toJsonValue(m_usage_restrictions));
    }
    return obj;
}

QString OAIAllowedUse::getHowCanIUseIt() const {
    return m_how_can_i_use_it;
}
void OAIAllowedUse::setHowCanIUseIt(const QString &how_can_i_use_it) {
    m_how_can_i_use_it = how_can_i_use_it;
    m_how_can_i_use_it_isSet = true;
}

bool OAIAllowedUse::is_how_can_i_use_it_Set() const{
    return m_how_can_i_use_it_isSet;
}

bool OAIAllowedUse::is_how_can_i_use_it_Valid() const{
    return m_how_can_i_use_it_isValid;
}

QString OAIAllowedUse::getReleaseInfo() const {
    return m_release_info;
}
void OAIAllowedUse::setReleaseInfo(const QString &release_info) {
    m_release_info = release_info;
    m_release_info_isSet = true;
}

bool OAIAllowedUse::is_release_info_Set() const{
    return m_release_info_isSet;
}

bool OAIAllowedUse::is_release_info_Valid() const{
    return m_release_info_isValid;
}

QList<QString> OAIAllowedUse::getUsageRestrictions() const {
    return m_usage_restrictions;
}
void OAIAllowedUse::setUsageRestrictions(const QList<QString> &usage_restrictions) {
    m_usage_restrictions = usage_restrictions;
    m_usage_restrictions_isSet = true;
}

bool OAIAllowedUse::is_usage_restrictions_Set() const{
    return m_usage_restrictions_isSet;
}

bool OAIAllowedUse::is_usage_restrictions_Valid() const{
    return m_usage_restrictions_isValid;
}

bool OAIAllowedUse::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_how_can_i_use_it_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_release_info_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_usage_restrictions.size() > 0) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIAllowedUse::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
