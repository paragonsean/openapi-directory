/**
 * Getty Images
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 3
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIImageTechniquesFilterType.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIImageTechniquesFilterType::OAIImageTechniquesFilterType(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIImageTechniquesFilterType::OAIImageTechniquesFilterType() {
    this->initializeModel();
}

OAIImageTechniquesFilterType::~OAIImageTechniquesFilterType() {}

void OAIImageTechniquesFilterType::initializeModel() {

    m_value_isSet = false;
    m_value_isValid = false;
    m_value = eOAIImageTechniquesFilterType::INVALID_VALUE_OPENAPI_GENERATED;
}

void OAIImageTechniquesFilterType::fromJson(QString jsonString) {
    
    if ( jsonString.compare("realtime", Qt::CaseInsensitive) == 0) {
        m_value = eOAIImageTechniquesFilterType::REALTIME;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("time_lapse", Qt::CaseInsensitive) == 0) {
        m_value = eOAIImageTechniquesFilterType::TIME_LAPSE;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("slow_motion", Qt::CaseInsensitive) == 0) {
        m_value = eOAIImageTechniquesFilterType::SLOW_MOTION;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("color", Qt::CaseInsensitive) == 0) {
        m_value = eOAIImageTechniquesFilterType::COLOR;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("black_and_white", Qt::CaseInsensitive) == 0) {
        m_value = eOAIImageTechniquesFilterType::BLACK_AND_WHITE;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("animation", Qt::CaseInsensitive) == 0) {
        m_value = eOAIImageTechniquesFilterType::ANIMATION;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("selective_focus", Qt::CaseInsensitive) == 0) {
        m_value = eOAIImageTechniquesFilterType::SELECTIVE_FOCUS;
        m_value_isSet = m_value_isValid = true;
    }
}

void OAIImageTechniquesFilterType::fromJsonValue(QJsonValue json) {
fromJson(json.toString());
}

QString OAIImageTechniquesFilterType::asJson() const {
    
    QString val;
    switch (m_value){
        case eOAIImageTechniquesFilterType::REALTIME:
            val = "realtime";
            break;
        case eOAIImageTechniquesFilterType::TIME_LAPSE:
            val = "time_lapse";
            break;
        case eOAIImageTechniquesFilterType::SLOW_MOTION:
            val = "slow_motion";
            break;
        case eOAIImageTechniquesFilterType::COLOR:
            val = "color";
            break;
        case eOAIImageTechniquesFilterType::BLACK_AND_WHITE:
            val = "black_and_white";
            break;
        case eOAIImageTechniquesFilterType::ANIMATION:
            val = "animation";
            break;
        case eOAIImageTechniquesFilterType::SELECTIVE_FOCUS:
            val = "selective_focus";
            break;
        default:
            break;
    }
    return val;
}

QJsonValue OAIImageTechniquesFilterType::asJsonValue() const {
    
    return QJsonValue(asJson());
}


OAIImageTechniquesFilterType::eOAIImageTechniquesFilterType OAIImageTechniquesFilterType::getValue() const {
    return m_value;
}

void OAIImageTechniquesFilterType::setValue(const OAIImageTechniquesFilterType::eOAIImageTechniquesFilterType& value){
    m_value = value;
    m_value_isSet = true;
}
bool OAIImageTechniquesFilterType::isSet() const {
    
    return m_value_isSet;
}

bool OAIImageTechniquesFilterType::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_value_isValid;
}

} // namespace OpenAPI
