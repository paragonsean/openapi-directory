/**
 * Getty Images
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 3
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIOverageDetails.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIOverageDetails::OAIOverageDetails(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIOverageDetails::OAIOverageDetails() {
    this->initializeModel();
}

OAIOverageDetails::~OAIOverageDetails() {}

void OAIOverageDetails::initializeModel() {

    m_count_isSet = false;
    m_count_isValid = false;

    m_limit_isSet = false;
    m_limit_isValid = false;

    m_overages_reached_isSet = false;
    m_overages_reached_isValid = false;

    m_remaining_isSet = false;
    m_remaining_isValid = false;
}

void OAIOverageDetails::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIOverageDetails::fromJsonObject(QJsonObject json) {

    m_count_isValid = ::OpenAPI::fromJsonValue(m_count, json[QString("count")]);
    m_count_isSet = !json[QString("count")].isNull() && m_count_isValid;

    m_limit_isValid = ::OpenAPI::fromJsonValue(m_limit, json[QString("limit")]);
    m_limit_isSet = !json[QString("limit")].isNull() && m_limit_isValid;

    m_overages_reached_isValid = ::OpenAPI::fromJsonValue(m_overages_reached, json[QString("overages_reached")]);
    m_overages_reached_isSet = !json[QString("overages_reached")].isNull() && m_overages_reached_isValid;

    m_remaining_isValid = ::OpenAPI::fromJsonValue(m_remaining, json[QString("remaining")]);
    m_remaining_isSet = !json[QString("remaining")].isNull() && m_remaining_isValid;
}

QString OAIOverageDetails::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIOverageDetails::asJsonObject() const {
    QJsonObject obj;
    if (m_count_isSet) {
        obj.insert(QString("count"), ::OpenAPI::toJsonValue(m_count));
    }
    if (m_limit_isSet) {
        obj.insert(QString("limit"), ::OpenAPI::toJsonValue(m_limit));
    }
    if (m_overages_reached_isSet) {
        obj.insert(QString("overages_reached"), ::OpenAPI::toJsonValue(m_overages_reached));
    }
    if (m_remaining_isSet) {
        obj.insert(QString("remaining"), ::OpenAPI::toJsonValue(m_remaining));
    }
    return obj;
}

qint32 OAIOverageDetails::getCount() const {
    return m_count;
}
void OAIOverageDetails::setCount(const qint32 &count) {
    m_count = count;
    m_count_isSet = true;
}

bool OAIOverageDetails::is_count_Set() const{
    return m_count_isSet;
}

bool OAIOverageDetails::is_count_Valid() const{
    return m_count_isValid;
}

qint32 OAIOverageDetails::getLimit() const {
    return m_limit;
}
void OAIOverageDetails::setLimit(const qint32 &limit) {
    m_limit = limit;
    m_limit_isSet = true;
}

bool OAIOverageDetails::is_limit_Set() const{
    return m_limit_isSet;
}

bool OAIOverageDetails::is_limit_Valid() const{
    return m_limit_isValid;
}

bool OAIOverageDetails::isOveragesReached() const {
    return m_overages_reached;
}
void OAIOverageDetails::setOveragesReached(const bool &overages_reached) {
    m_overages_reached = overages_reached;
    m_overages_reached_isSet = true;
}

bool OAIOverageDetails::is_overages_reached_Set() const{
    return m_overages_reached_isSet;
}

bool OAIOverageDetails::is_overages_reached_Valid() const{
    return m_overages_reached_isValid;
}

qint32 OAIOverageDetails::getRemaining() const {
    return m_remaining;
}
void OAIOverageDetails::setRemaining(const qint32 &remaining) {
    m_remaining = remaining;
    m_remaining_isSet = true;
}

bool OAIOverageDetails::is_remaining_Set() const{
    return m_remaining_isSet;
}

bool OAIOverageDetails::is_remaining_Valid() const{
    return m_remaining_isValid;
}

bool OAIOverageDetails::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_count_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_limit_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_overages_reached_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_remaining_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIOverageDetails::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
