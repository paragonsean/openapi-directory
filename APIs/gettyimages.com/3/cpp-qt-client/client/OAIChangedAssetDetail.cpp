/**
 * Getty Images
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 3
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIChangedAssetDetail.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIChangedAssetDetail::OAIChangedAssetDetail(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIChangedAssetDetail::OAIChangedAssetDetail() {
    this->initializeModel();
}

OAIChangedAssetDetail::~OAIChangedAssetDetail() {}

void OAIChangedAssetDetail::initializeModel() {

    m_asset_changed_utc_datetime_isSet = false;
    m_asset_changed_utc_datetime_isValid = false;

    m_asset_lifecycle_isSet = false;
    m_asset_lifecycle_isValid = false;

    m_asset_type_isSet = false;
    m_asset_type_isValid = false;

    m_id_isSet = false;
    m_id_isValid = false;

    m_uri_isSet = false;
    m_uri_isValid = false;
}

void OAIChangedAssetDetail::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIChangedAssetDetail::fromJsonObject(QJsonObject json) {

    m_asset_changed_utc_datetime_isValid = ::OpenAPI::fromJsonValue(m_asset_changed_utc_datetime, json[QString("asset_changed_utc_datetime")]);
    m_asset_changed_utc_datetime_isSet = !json[QString("asset_changed_utc_datetime")].isNull() && m_asset_changed_utc_datetime_isValid;

    m_asset_lifecycle_isValid = ::OpenAPI::fromJsonValue(m_asset_lifecycle, json[QString("asset_lifecycle")]);
    m_asset_lifecycle_isSet = !json[QString("asset_lifecycle")].isNull() && m_asset_lifecycle_isValid;

    m_asset_type_isValid = ::OpenAPI::fromJsonValue(m_asset_type, json[QString("asset_type")]);
    m_asset_type_isSet = !json[QString("asset_type")].isNull() && m_asset_type_isValid;

    m_id_isValid = ::OpenAPI::fromJsonValue(m_id, json[QString("id")]);
    m_id_isSet = !json[QString("id")].isNull() && m_id_isValid;

    m_uri_isValid = ::OpenAPI::fromJsonValue(m_uri, json[QString("uri")]);
    m_uri_isSet = !json[QString("uri")].isNull() && m_uri_isValid;
}

QString OAIChangedAssetDetail::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIChangedAssetDetail::asJsonObject() const {
    QJsonObject obj;
    if (m_asset_changed_utc_datetime_isSet) {
        obj.insert(QString("asset_changed_utc_datetime"), ::OpenAPI::toJsonValue(m_asset_changed_utc_datetime));
    }
    if (m_asset_lifecycle_isSet) {
        obj.insert(QString("asset_lifecycle"), ::OpenAPI::toJsonValue(m_asset_lifecycle));
    }
    if (m_asset_type_isSet) {
        obj.insert(QString("asset_type"), ::OpenAPI::toJsonValue(m_asset_type));
    }
    if (m_id_isSet) {
        obj.insert(QString("id"), ::OpenAPI::toJsonValue(m_id));
    }
    if (m_uri_isSet) {
        obj.insert(QString("uri"), ::OpenAPI::toJsonValue(m_uri));
    }
    return obj;
}

QDateTime OAIChangedAssetDetail::getAssetChangedUtcDatetime() const {
    return m_asset_changed_utc_datetime;
}
void OAIChangedAssetDetail::setAssetChangedUtcDatetime(const QDateTime &asset_changed_utc_datetime) {
    m_asset_changed_utc_datetime = asset_changed_utc_datetime;
    m_asset_changed_utc_datetime_isSet = true;
}

bool OAIChangedAssetDetail::is_asset_changed_utc_datetime_Set() const{
    return m_asset_changed_utc_datetime_isSet;
}

bool OAIChangedAssetDetail::is_asset_changed_utc_datetime_Valid() const{
    return m_asset_changed_utc_datetime_isValid;
}

QString OAIChangedAssetDetail::getAssetLifecycle() const {
    return m_asset_lifecycle;
}
void OAIChangedAssetDetail::setAssetLifecycle(const QString &asset_lifecycle) {
    m_asset_lifecycle = asset_lifecycle;
    m_asset_lifecycle_isSet = true;
}

bool OAIChangedAssetDetail::is_asset_lifecycle_Set() const{
    return m_asset_lifecycle_isSet;
}

bool OAIChangedAssetDetail::is_asset_lifecycle_Valid() const{
    return m_asset_lifecycle_isValid;
}

QString OAIChangedAssetDetail::getAssetType() const {
    return m_asset_type;
}
void OAIChangedAssetDetail::setAssetType(const QString &asset_type) {
    m_asset_type = asset_type;
    m_asset_type_isSet = true;
}

bool OAIChangedAssetDetail::is_asset_type_Set() const{
    return m_asset_type_isSet;
}

bool OAIChangedAssetDetail::is_asset_type_Valid() const{
    return m_asset_type_isValid;
}

QString OAIChangedAssetDetail::getId() const {
    return m_id;
}
void OAIChangedAssetDetail::setId(const QString &id) {
    m_id = id;
    m_id_isSet = true;
}

bool OAIChangedAssetDetail::is_id_Set() const{
    return m_id_isSet;
}

bool OAIChangedAssetDetail::is_id_Valid() const{
    return m_id_isValid;
}

QString OAIChangedAssetDetail::getUri() const {
    return m_uri;
}
void OAIChangedAssetDetail::setUri(const QString &uri) {
    m_uri = uri;
    m_uri_isSet = true;
}

bool OAIChangedAssetDetail::is_uri_Set() const{
    return m_uri_isSet;
}

bool OAIChangedAssetDetail::is_uri_Valid() const{
    return m_uri_isValid;
}

bool OAIChangedAssetDetail::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_asset_changed_utc_datetime_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_asset_lifecycle_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_asset_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_uri_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIChangedAssetDetail::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
