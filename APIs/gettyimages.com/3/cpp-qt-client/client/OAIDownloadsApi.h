/**
 * Getty Images
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 3
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#ifndef OAI_OAIDownloadsApi_H
#define OAI_OAIDownloadsApi_H

#include "OAIHelpers.h"
#include "OAIHttpRequest.h"
#include "OAIServerConfiguration.h"
#include "OAIOauth.h"

#include "OAIDownloadFileType.h"
#include "OAIGetDownloadsResponse.h"
#include "OAIPremiumAccessDownloadData.h"
#include "OAIProductTypeForDownloads.h"
#include <QString>

#include <QObject>
#include <QByteArray>
#include <QStringList>
#include <QList>
#include <QNetworkAccessManager>

namespace OpenAPI {

class OAIDownloadsApi : public QObject {
    Q_OBJECT

public:
    OAIDownloadsApi(const int timeOut = 0);
    ~OAIDownloadsApi();

    void initializeServerConfigs();
    int setDefaultServerValue(int serverIndex,const QString &operation, const QString &variable,const QString &val);
    void setServerIndex(const QString &operation, int serverIndex);
    void setApiKey(const QString &apiKeyName, const QString &apiKey);
    void setBearerToken(const QString &token);
    void setUsername(const QString &username);
    void setPassword(const QString &password);
    void setTimeOut(const int timeOut);
    void setWorkingDirectory(const QString &path);
    void setNetworkAccessManager(QNetworkAccessManager* manager);
    int addServerConfiguration(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables = QMap<QString, OAIServerVariable>());
    void setNewServerForAllOperations(const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void setNewServer(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void addHeaders(const QString &key, const QString &value);
    void enableRequestCompression();
    void enableResponseCompression();
    void abortRequests();
    QString getParamStylePrefix(const QString &style);
    QString getParamStyleSuffix(const QString &style);
    QString getParamStyleDelimiter(const QString &style, const QString &name, bool isExplode);

    /**
    * @param[in]  accept_language QString [optional]
    * @param[in]  date_from QDateTime [optional]
    * @param[in]  date_to QDateTime [optional]
    * @param[in]  use_time bool [optional]
    * @param[in]  page qint32 [optional]
    * @param[in]  page_size qint32 [optional]
    * @param[in]  product_type OAIProductTypeForDownloads [optional]
    * @param[in]  company_downloads bool [optional]
    */
    virtual void v3DownloadsGet(const ::OpenAPI::OptionalParam<QString> &accept_language = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QDateTime> &date_from = ::OpenAPI::OptionalParam<QDateTime>(), const ::OpenAPI::OptionalParam<QDateTime> &date_to = ::OpenAPI::OptionalParam<QDateTime>(), const ::OpenAPI::OptionalParam<bool> &use_time = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<qint32> &page = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint32> &page_size = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<OAIProductTypeForDownloads> &product_type = ::OpenAPI::OptionalParam<OAIProductTypeForDownloads>(), const ::OpenAPI::OptionalParam<bool> &company_downloads = ::OpenAPI::OptionalParam<bool>());

    /**
    * @param[in]  id QString [required]
    * @param[in]  accept_language QString [optional]
    * @param[in]  auto_download bool [optional]
    * @param[in]  file_type OAIDownloadFileType [optional]
    * @param[in]  height QString [optional]
    * @param[in]  product_id qint32 [optional]
    * @param[in]  product_type OAIProductTypeForDownloads [optional]
    * @param[in]  use_team_credits bool [optional]
    * @param[in]  oai_premium_access_download_data OAIPremiumAccessDownloadData [optional]
    */
    virtual void v3DownloadsImagesIdPost(const QString &id, const ::OpenAPI::OptionalParam<QString> &accept_language = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &auto_download = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<OAIDownloadFileType> &file_type = ::OpenAPI::OptionalParam<OAIDownloadFileType>(), const ::OpenAPI::OptionalParam<QString> &height = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<qint32> &product_id = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<OAIProductTypeForDownloads> &product_type = ::OpenAPI::OptionalParam<OAIProductTypeForDownloads>(), const ::OpenAPI::OptionalParam<bool> &use_team_credits = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<OAIPremiumAccessDownloadData> &oai_premium_access_download_data = ::OpenAPI::OptionalParam<OAIPremiumAccessDownloadData>());

    /**
    * @param[in]  id QString [required]
    * @param[in]  accept_language QString [optional]
    * @param[in]  auto_download bool [optional]
    * @param[in]  size QString [optional]
    * @param[in]  product_id qint32 [optional]
    * @param[in]  product_type OAIProductTypeForDownloads [optional]
    * @param[in]  use_team_credits bool [optional]
    * @param[in]  oai_premium_access_download_data OAIPremiumAccessDownloadData [optional]
    */
    virtual void v3DownloadsVideosIdPost(const QString &id, const ::OpenAPI::OptionalParam<QString> &accept_language = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &auto_download = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QString> &size = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<qint32> &product_id = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<OAIProductTypeForDownloads> &product_type = ::OpenAPI::OptionalParam<OAIProductTypeForDownloads>(), const ::OpenAPI::OptionalParam<bool> &use_team_credits = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<OAIPremiumAccessDownloadData> &oai_premium_access_download_data = ::OpenAPI::OptionalParam<OAIPremiumAccessDownloadData>());


private:
    QMap<QString,int> _serverIndices;
    QMap<QString,QList<OAIServerConfiguration>> _serverConfigs;
    QMap<QString, QString> _apiKeys;
    QString _bearerToken;
    QString _username;
    QString _password;
    int _timeOut;
    QString _workingDirectory;
    QNetworkAccessManager* _manager;
    QMap<QString, QString> _defaultHeaders;
    bool _isResponseCompressionEnabled;
    bool _isRequestCompressionEnabled;
    OAIHttpRequestInput _latestInput;
    OAIHttpRequestWorker *_latestWorker;
    QStringList _latestScope;
    OauthCode _authFlow;
    OauthImplicit _implicitFlow;
    OauthCredentials _credentialFlow;
    OauthPassword _passwordFlow;
    int _OauthMethod = 0;

    void v3DownloadsGetCallback(OAIHttpRequestWorker *worker);
    void v3DownloadsImagesIdPostCallback(OAIHttpRequestWorker *worker);
    void v3DownloadsVideosIdPostCallback(OAIHttpRequestWorker *worker);

Q_SIGNALS:

    void v3DownloadsGetSignal(OAIGetDownloadsResponse summary);
    void v3DownloadsImagesIdPostSignal();
    void v3DownloadsVideosIdPostSignal();


    void v3DownloadsGetSignalFull(OAIHttpRequestWorker *worker, OAIGetDownloadsResponse summary);
    void v3DownloadsImagesIdPostSignalFull(OAIHttpRequestWorker *worker);
    void v3DownloadsVideosIdPostSignalFull(OAIHttpRequestWorker *worker);

    Q_DECL_DEPRECATED_X("Use v3DownloadsGetSignalError() instead")
    void v3DownloadsGetSignalE(OAIGetDownloadsResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void v3DownloadsGetSignalError(OAIGetDownloadsResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use v3DownloadsImagesIdPostSignalError() instead")
    void v3DownloadsImagesIdPostSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void v3DownloadsImagesIdPostSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use v3DownloadsVideosIdPostSignalError() instead")
    void v3DownloadsVideosIdPostSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void v3DownloadsVideosIdPostSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);

    Q_DECL_DEPRECATED_X("Use v3DownloadsGetSignalErrorFull() instead")
    void v3DownloadsGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void v3DownloadsGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use v3DownloadsImagesIdPostSignalErrorFull() instead")
    void v3DownloadsImagesIdPostSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void v3DownloadsImagesIdPostSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use v3DownloadsVideosIdPostSignalErrorFull() instead")
    void v3DownloadsVideosIdPostSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void v3DownloadsVideosIdPostSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);

    void abortRequestsSignal();
    void allPendingRequestsCompleted();

public Q_SLOTS:
    void tokenAvailable();
};

} // namespace OpenAPI
#endif
