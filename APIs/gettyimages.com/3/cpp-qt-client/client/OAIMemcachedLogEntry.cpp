/**
 * Getty Images
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 3
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIMemcachedLogEntry.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIMemcachedLogEntry::OAIMemcachedLogEntry(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIMemcachedLogEntry::OAIMemcachedLogEntry() {
    this->initializeModel();
}

OAIMemcachedLogEntry::~OAIMemcachedLogEntry() {}

void OAIMemcachedLogEntry::initializeModel() {

    m_exception_message_isSet = false;
    m_exception_message_isValid = false;

    m_log_level_isSet = false;
    m_log_level_isValid = false;

    m_message_isSet = false;
    m_message_isValid = false;

    m_time_isSet = false;
    m_time_isValid = false;
}

void OAIMemcachedLogEntry::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIMemcachedLogEntry::fromJsonObject(QJsonObject json) {

    m_exception_message_isValid = ::OpenAPI::fromJsonValue(m_exception_message, json[QString("ExceptionMessage")]);
    m_exception_message_isSet = !json[QString("ExceptionMessage")].isNull() && m_exception_message_isValid;

    m_log_level_isValid = ::OpenAPI::fromJsonValue(m_log_level, json[QString("LogLevel")]);
    m_log_level_isSet = !json[QString("LogLevel")].isNull() && m_log_level_isValid;

    m_message_isValid = ::OpenAPI::fromJsonValue(m_message, json[QString("Message")]);
    m_message_isSet = !json[QString("Message")].isNull() && m_message_isValid;

    m_time_isValid = ::OpenAPI::fromJsonValue(m_time, json[QString("Time")]);
    m_time_isSet = !json[QString("Time")].isNull() && m_time_isValid;
}

QString OAIMemcachedLogEntry::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIMemcachedLogEntry::asJsonObject() const {
    QJsonObject obj;
    if (m_exception_message_isSet) {
        obj.insert(QString("ExceptionMessage"), ::OpenAPI::toJsonValue(m_exception_message));
    }
    if (m_log_level.isSet()) {
        obj.insert(QString("LogLevel"), ::OpenAPI::toJsonValue(m_log_level));
    }
    if (m_message_isSet) {
        obj.insert(QString("Message"), ::OpenAPI::toJsonValue(m_message));
    }
    if (m_time_isSet) {
        obj.insert(QString("Time"), ::OpenAPI::toJsonValue(m_time));
    }
    return obj;
}

QString OAIMemcachedLogEntry::getExceptionMessage() const {
    return m_exception_message;
}
void OAIMemcachedLogEntry::setExceptionMessage(const QString &exception_message) {
    m_exception_message = exception_message;
    m_exception_message_isSet = true;
}

bool OAIMemcachedLogEntry::is_exception_message_Set() const{
    return m_exception_message_isSet;
}

bool OAIMemcachedLogEntry::is_exception_message_Valid() const{
    return m_exception_message_isValid;
}

OAILogLevel OAIMemcachedLogEntry::getLogLevel() const {
    return m_log_level;
}
void OAIMemcachedLogEntry::setLogLevel(const OAILogLevel &log_level) {
    m_log_level = log_level;
    m_log_level_isSet = true;
}

bool OAIMemcachedLogEntry::is_log_level_Set() const{
    return m_log_level_isSet;
}

bool OAIMemcachedLogEntry::is_log_level_Valid() const{
    return m_log_level_isValid;
}

QString OAIMemcachedLogEntry::getMessage() const {
    return m_message;
}
void OAIMemcachedLogEntry::setMessage(const QString &message) {
    m_message = message;
    m_message_isSet = true;
}

bool OAIMemcachedLogEntry::is_message_Set() const{
    return m_message_isSet;
}

bool OAIMemcachedLogEntry::is_message_Valid() const{
    return m_message_isValid;
}

QDateTime OAIMemcachedLogEntry::getTime() const {
    return m_time;
}
void OAIMemcachedLogEntry::setTime(const QDateTime &time) {
    m_time = time;
    m_time_isSet = true;
}

bool OAIMemcachedLogEntry::is_time_Set() const{
    return m_time_isSet;
}

bool OAIMemcachedLogEntry::is_time_Valid() const{
    return m_time_isValid;
}

bool OAIMemcachedLogEntry::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_exception_message_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_log_level.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_message_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_time_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIMemcachedLogEntry::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
