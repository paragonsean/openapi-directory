/**
 * Getty Images
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 3
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIEvent.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIEvent::OAIEvent(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIEvent::OAIEvent() {
    this->initializeModel();
}

OAIEvent::~OAIEvent() {}

void OAIEvent::initializeModel() {

    m_child_event_count_isSet = false;
    m_child_event_count_isValid = false;

    m_editorial_segments_isSet = false;
    m_editorial_segments_isValid = false;

    m_hero_image_isSet = false;
    m_hero_image_isValid = false;

    m_id_isSet = false;
    m_id_isValid = false;

    m_image_count_isSet = false;
    m_image_count_isValid = false;

    m_location_isSet = false;
    m_location_isValid = false;

    m_name_isSet = false;
    m_name_isValid = false;

    m_start_date_isSet = false;
    m_start_date_isValid = false;
}

void OAIEvent::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIEvent::fromJsonObject(QJsonObject json) {

    m_child_event_count_isValid = ::OpenAPI::fromJsonValue(m_child_event_count, json[QString("child_event_count")]);
    m_child_event_count_isSet = !json[QString("child_event_count")].isNull() && m_child_event_count_isValid;

    m_editorial_segments_isValid = ::OpenAPI::fromJsonValue(m_editorial_segments, json[QString("editorial_segments")]);
    m_editorial_segments_isSet = !json[QString("editorial_segments")].isNull() && m_editorial_segments_isValid;

    m_hero_image_isValid = ::OpenAPI::fromJsonValue(m_hero_image, json[QString("hero_image")]);
    m_hero_image_isSet = !json[QString("hero_image")].isNull() && m_hero_image_isValid;

    m_id_isValid = ::OpenAPI::fromJsonValue(m_id, json[QString("id")]);
    m_id_isSet = !json[QString("id")].isNull() && m_id_isValid;

    m_image_count_isValid = ::OpenAPI::fromJsonValue(m_image_count, json[QString("image_count")]);
    m_image_count_isSet = !json[QString("image_count")].isNull() && m_image_count_isValid;

    m_location_isValid = ::OpenAPI::fromJsonValue(m_location, json[QString("location")]);
    m_location_isSet = !json[QString("location")].isNull() && m_location_isValid;

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("name")]);
    m_name_isSet = !json[QString("name")].isNull() && m_name_isValid;

    m_start_date_isValid = ::OpenAPI::fromJsonValue(m_start_date, json[QString("start_date")]);
    m_start_date_isSet = !json[QString("start_date")].isNull() && m_start_date_isValid;
}

QString OAIEvent::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIEvent::asJsonObject() const {
    QJsonObject obj;
    if (m_child_event_count_isSet) {
        obj.insert(QString("child_event_count"), ::OpenAPI::toJsonValue(m_child_event_count));
    }
    if (m_editorial_segments.size() > 0) {
        obj.insert(QString("editorial_segments"), ::OpenAPI::toJsonValue(m_editorial_segments));
    }
    if (m_hero_image.isSet()) {
        obj.insert(QString("hero_image"), ::OpenAPI::toJsonValue(m_hero_image));
    }
    if (m_id_isSet) {
        obj.insert(QString("id"), ::OpenAPI::toJsonValue(m_id));
    }
    if (m_image_count_isSet) {
        obj.insert(QString("image_count"), ::OpenAPI::toJsonValue(m_image_count));
    }
    if (m_location.isSet()) {
        obj.insert(QString("location"), ::OpenAPI::toJsonValue(m_location));
    }
    if (m_name_isSet) {
        obj.insert(QString("name"), ::OpenAPI::toJsonValue(m_name));
    }
    if (m_start_date_isSet) {
        obj.insert(QString("start_date"), ::OpenAPI::toJsonValue(m_start_date));
    }
    return obj;
}

qint32 OAIEvent::getChildEventCount() const {
    return m_child_event_count;
}
void OAIEvent::setChildEventCount(const qint32 &child_event_count) {
    m_child_event_count = child_event_count;
    m_child_event_count_isSet = true;
}

bool OAIEvent::is_child_event_count_Set() const{
    return m_child_event_count_isSet;
}

bool OAIEvent::is_child_event_count_Valid() const{
    return m_child_event_count_isValid;
}

QList<QString> OAIEvent::getEditorialSegments() const {
    return m_editorial_segments;
}
void OAIEvent::setEditorialSegments(const QList<QString> &editorial_segments) {
    m_editorial_segments = editorial_segments;
    m_editorial_segments_isSet = true;
}

bool OAIEvent::is_editorial_segments_Set() const{
    return m_editorial_segments_isSet;
}

bool OAIEvent::is_editorial_segments_Valid() const{
    return m_editorial_segments_isValid;
}

OAIHeroImage OAIEvent::getHeroImage() const {
    return m_hero_image;
}
void OAIEvent::setHeroImage(const OAIHeroImage &hero_image) {
    m_hero_image = hero_image;
    m_hero_image_isSet = true;
}

bool OAIEvent::is_hero_image_Set() const{
    return m_hero_image_isSet;
}

bool OAIEvent::is_hero_image_Valid() const{
    return m_hero_image_isValid;
}

qint32 OAIEvent::getId() const {
    return m_id;
}
void OAIEvent::setId(const qint32 &id) {
    m_id = id;
    m_id_isSet = true;
}

bool OAIEvent::is_id_Set() const{
    return m_id_isSet;
}

bool OAIEvent::is_id_Valid() const{
    return m_id_isValid;
}

qint32 OAIEvent::getImageCount() const {
    return m_image_count;
}
void OAIEvent::setImageCount(const qint32 &image_count) {
    m_image_count = image_count;
    m_image_count_isSet = true;
}

bool OAIEvent::is_image_count_Set() const{
    return m_image_count_isSet;
}

bool OAIEvent::is_image_count_Valid() const{
    return m_image_count_isValid;
}

OAILocationEvent OAIEvent::getLocation() const {
    return m_location;
}
void OAIEvent::setLocation(const OAILocationEvent &location) {
    m_location = location;
    m_location_isSet = true;
}

bool OAIEvent::is_location_Set() const{
    return m_location_isSet;
}

bool OAIEvent::is_location_Valid() const{
    return m_location_isValid;
}

QString OAIEvent::getName() const {
    return m_name;
}
void OAIEvent::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAIEvent::is_name_Set() const{
    return m_name_isSet;
}

bool OAIEvent::is_name_Valid() const{
    return m_name_isValid;
}

QDateTime OAIEvent::getStartDate() const {
    return m_start_date;
}
void OAIEvent::setStartDate(const QDateTime &start_date) {
    m_start_date = start_date;
    m_start_date_isSet = true;
}

bool OAIEvent::is_start_date_Set() const{
    return m_start_date_isSet;
}

bool OAIEvent::is_start_date_Valid() const{
    return m_start_date_isValid;
}

bool OAIEvent::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_child_event_count_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_editorial_segments.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_hero_image.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_image_count_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_location.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_start_date_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIEvent::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
