/**
 * Getty Images
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 3
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIHistoricalDownload.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIHistoricalDownload::OAIHistoricalDownload(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIHistoricalDownload::OAIHistoricalDownload() {
    this->initializeModel();
}

OAIHistoricalDownload::~OAIHistoricalDownload() {}

void OAIHistoricalDownload::initializeModel() {

    m_agreement_name_isSet = false;
    m_agreement_name_isValid = false;

    m_asset_type_isSet = false;
    m_asset_type_isValid = false;

    m_date_downloaded_isSet = false;
    m_date_downloaded_isValid = false;

    m_dimensions_isSet = false;
    m_dimensions_isValid = false;

    m_download_details_isSet = false;
    m_download_details_isValid = false;

    m_download_source_isSet = false;
    m_download_source_isValid = false;

    m_id_isSet = false;
    m_id_isValid = false;

    m_product_id_isSet = false;
    m_product_id_isValid = false;

    m_product_type_isSet = false;
    m_product_type_isValid = false;

    m_size_name_isSet = false;
    m_size_name_isValid = false;

    m_thumb_uri_isSet = false;
    m_thumb_uri_isValid = false;

    m_user_isSet = false;
    m_user_isValid = false;
}

void OAIHistoricalDownload::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIHistoricalDownload::fromJsonObject(QJsonObject json) {

    m_agreement_name_isValid = ::OpenAPI::fromJsonValue(m_agreement_name, json[QString("agreement_name")]);
    m_agreement_name_isSet = !json[QString("agreement_name")].isNull() && m_agreement_name_isValid;

    m_asset_type_isValid = ::OpenAPI::fromJsonValue(m_asset_type, json[QString("asset_type")]);
    m_asset_type_isSet = !json[QString("asset_type")].isNull() && m_asset_type_isValid;

    m_date_downloaded_isValid = ::OpenAPI::fromJsonValue(m_date_downloaded, json[QString("date_downloaded")]);
    m_date_downloaded_isSet = !json[QString("date_downloaded")].isNull() && m_date_downloaded_isValid;

    m_dimensions_isValid = ::OpenAPI::fromJsonValue(m_dimensions, json[QString("dimensions")]);
    m_dimensions_isSet = !json[QString("dimensions")].isNull() && m_dimensions_isValid;

    m_download_details_isValid = ::OpenAPI::fromJsonValue(m_download_details, json[QString("download_details")]);
    m_download_details_isSet = !json[QString("download_details")].isNull() && m_download_details_isValid;

    m_download_source_isValid = ::OpenAPI::fromJsonValue(m_download_source, json[QString("download_source")]);
    m_download_source_isSet = !json[QString("download_source")].isNull() && m_download_source_isValid;

    m_id_isValid = ::OpenAPI::fromJsonValue(m_id, json[QString("id")]);
    m_id_isSet = !json[QString("id")].isNull() && m_id_isValid;

    m_product_id_isValid = ::OpenAPI::fromJsonValue(m_product_id, json[QString("product_id")]);
    m_product_id_isSet = !json[QString("product_id")].isNull() && m_product_id_isValid;

    m_product_type_isValid = ::OpenAPI::fromJsonValue(m_product_type, json[QString("product_type")]);
    m_product_type_isSet = !json[QString("product_type")].isNull() && m_product_type_isValid;

    m_size_name_isValid = ::OpenAPI::fromJsonValue(m_size_name, json[QString("size_name")]);
    m_size_name_isSet = !json[QString("size_name")].isNull() && m_size_name_isValid;

    m_thumb_uri_isValid = ::OpenAPI::fromJsonValue(m_thumb_uri, json[QString("thumb_uri")]);
    m_thumb_uri_isSet = !json[QString("thumb_uri")].isNull() && m_thumb_uri_isValid;

    m_user_isValid = ::OpenAPI::fromJsonValue(m_user, json[QString("user")]);
    m_user_isSet = !json[QString("user")].isNull() && m_user_isValid;
}

QString OAIHistoricalDownload::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIHistoricalDownload::asJsonObject() const {
    QJsonObject obj;
    if (m_agreement_name_isSet) {
        obj.insert(QString("agreement_name"), ::OpenAPI::toJsonValue(m_agreement_name));
    }
    if (m_asset_type_isSet) {
        obj.insert(QString("asset_type"), ::OpenAPI::toJsonValue(m_asset_type));
    }
    if (m_date_downloaded_isSet) {
        obj.insert(QString("date_downloaded"), ::OpenAPI::toJsonValue(m_date_downloaded));
    }
    if (m_dimensions.isSet()) {
        obj.insert(QString("dimensions"), ::OpenAPI::toJsonValue(m_dimensions));
    }
    if (m_download_details.isSet()) {
        obj.insert(QString("download_details"), ::OpenAPI::toJsonValue(m_download_details));
    }
    if (m_download_source_isSet) {
        obj.insert(QString("download_source"), ::OpenAPI::toJsonValue(m_download_source));
    }
    if (m_id_isSet) {
        obj.insert(QString("id"), ::OpenAPI::toJsonValue(m_id));
    }
    if (m_product_id_isSet) {
        obj.insert(QString("product_id"), ::OpenAPI::toJsonValue(m_product_id));
    }
    if (m_product_type_isSet) {
        obj.insert(QString("product_type"), ::OpenAPI::toJsonValue(m_product_type));
    }
    if (m_size_name_isSet) {
        obj.insert(QString("size_name"), ::OpenAPI::toJsonValue(m_size_name));
    }
    if (m_thumb_uri_isSet) {
        obj.insert(QString("thumb_uri"), ::OpenAPI::toJsonValue(m_thumb_uri));
    }
    if (m_user.isSet()) {
        obj.insert(QString("user"), ::OpenAPI::toJsonValue(m_user));
    }
    return obj;
}

QString OAIHistoricalDownload::getAgreementName() const {
    return m_agreement_name;
}
void OAIHistoricalDownload::setAgreementName(const QString &agreement_name) {
    m_agreement_name = agreement_name;
    m_agreement_name_isSet = true;
}

bool OAIHistoricalDownload::is_agreement_name_Set() const{
    return m_agreement_name_isSet;
}

bool OAIHistoricalDownload::is_agreement_name_Valid() const{
    return m_agreement_name_isValid;
}

QString OAIHistoricalDownload::getAssetType() const {
    return m_asset_type;
}
void OAIHistoricalDownload::setAssetType(const QString &asset_type) {
    m_asset_type = asset_type;
    m_asset_type_isSet = true;
}

bool OAIHistoricalDownload::is_asset_type_Set() const{
    return m_asset_type_isSet;
}

bool OAIHistoricalDownload::is_asset_type_Valid() const{
    return m_asset_type_isValid;
}

QDateTime OAIHistoricalDownload::getDateDownloaded() const {
    return m_date_downloaded;
}
void OAIHistoricalDownload::setDateDownloaded(const QDateTime &date_downloaded) {
    m_date_downloaded = date_downloaded;
    m_date_downloaded_isSet = true;
}

bool OAIHistoricalDownload::is_date_downloaded_Set() const{
    return m_date_downloaded_isSet;
}

bool OAIHistoricalDownload::is_date_downloaded_Valid() const{
    return m_date_downloaded_isValid;
}

OAIDimensions OAIHistoricalDownload::getDimensions() const {
    return m_dimensions;
}
void OAIHistoricalDownload::setDimensions(const OAIDimensions &dimensions) {
    m_dimensions = dimensions;
    m_dimensions_isSet = true;
}

bool OAIHistoricalDownload::is_dimensions_Set() const{
    return m_dimensions_isSet;
}

bool OAIHistoricalDownload::is_dimensions_Valid() const{
    return m_dimensions_isValid;
}

OAIDownloadDetails OAIHistoricalDownload::getDownloadDetails() const {
    return m_download_details;
}
void OAIHistoricalDownload::setDownloadDetails(const OAIDownloadDetails &download_details) {
    m_download_details = download_details;
    m_download_details_isSet = true;
}

bool OAIHistoricalDownload::is_download_details_Set() const{
    return m_download_details_isSet;
}

bool OAIHistoricalDownload::is_download_details_Valid() const{
    return m_download_details_isValid;
}

QString OAIHistoricalDownload::getDownloadSource() const {
    return m_download_source;
}
void OAIHistoricalDownload::setDownloadSource(const QString &download_source) {
    m_download_source = download_source;
    m_download_source_isSet = true;
}

bool OAIHistoricalDownload::is_download_source_Set() const{
    return m_download_source_isSet;
}

bool OAIHistoricalDownload::is_download_source_Valid() const{
    return m_download_source_isValid;
}

QString OAIHistoricalDownload::getId() const {
    return m_id;
}
void OAIHistoricalDownload::setId(const QString &id) {
    m_id = id;
    m_id_isSet = true;
}

bool OAIHistoricalDownload::is_id_Set() const{
    return m_id_isSet;
}

bool OAIHistoricalDownload::is_id_Valid() const{
    return m_id_isValid;
}

qint32 OAIHistoricalDownload::getProductId() const {
    return m_product_id;
}
void OAIHistoricalDownload::setProductId(const qint32 &product_id) {
    m_product_id = product_id;
    m_product_id_isSet = true;
}

bool OAIHistoricalDownload::is_product_id_Set() const{
    return m_product_id_isSet;
}

bool OAIHistoricalDownload::is_product_id_Valid() const{
    return m_product_id_isValid;
}

QString OAIHistoricalDownload::getProductType() const {
    return m_product_type;
}
void OAIHistoricalDownload::setProductType(const QString &product_type) {
    m_product_type = product_type;
    m_product_type_isSet = true;
}

bool OAIHistoricalDownload::is_product_type_Set() const{
    return m_product_type_isSet;
}

bool OAIHistoricalDownload::is_product_type_Valid() const{
    return m_product_type_isValid;
}

QString OAIHistoricalDownload::getSizeName() const {
    return m_size_name;
}
void OAIHistoricalDownload::setSizeName(const QString &size_name) {
    m_size_name = size_name;
    m_size_name_isSet = true;
}

bool OAIHistoricalDownload::is_size_name_Set() const{
    return m_size_name_isSet;
}

bool OAIHistoricalDownload::is_size_name_Valid() const{
    return m_size_name_isValid;
}

QString OAIHistoricalDownload::getThumbUri() const {
    return m_thumb_uri;
}
void OAIHistoricalDownload::setThumbUri(const QString &thumb_uri) {
    m_thumb_uri = thumb_uri;
    m_thumb_uri_isSet = true;
}

bool OAIHistoricalDownload::is_thumb_uri_Set() const{
    return m_thumb_uri_isSet;
}

bool OAIHistoricalDownload::is_thumb_uri_Valid() const{
    return m_thumb_uri_isValid;
}

OAIUser OAIHistoricalDownload::getUser() const {
    return m_user;
}
void OAIHistoricalDownload::setUser(const OAIUser &user) {
    m_user = user;
    m_user_isSet = true;
}

bool OAIHistoricalDownload::is_user_Set() const{
    return m_user_isSet;
}

bool OAIHistoricalDownload::is_user_Valid() const{
    return m_user_isValid;
}

bool OAIHistoricalDownload::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_agreement_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_asset_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_date_downloaded_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_dimensions.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_download_details.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_download_source_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_product_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_product_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_size_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_thumb_uri_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_user.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIHistoricalDownload::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
