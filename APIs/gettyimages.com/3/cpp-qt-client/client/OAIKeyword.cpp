/**
 * Getty Images
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 3
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIKeyword.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIKeyword::OAIKeyword(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIKeyword::OAIKeyword() {
    this->initializeModel();
}

OAIKeyword::~OAIKeyword() {}

void OAIKeyword::initializeModel() {

    m_entity_types_isSet = false;
    m_entity_types_isValid = false;

    m_entity_uris_isSet = false;
    m_entity_uris_isValid = false;

    m_keyword_id_isSet = false;
    m_keyword_id_isValid = false;

    m_relevance_isSet = false;
    m_relevance_isValid = false;

    m_text_isSet = false;
    m_text_isValid = false;

    m_type_isSet = false;
    m_type_isValid = false;
}

void OAIKeyword::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIKeyword::fromJsonObject(QJsonObject json) {

    m_entity_types_isValid = ::OpenAPI::fromJsonValue(m_entity_types, json[QString("entity_types")]);
    m_entity_types_isSet = !json[QString("entity_types")].isNull() && m_entity_types_isValid;

    m_entity_uris_isValid = ::OpenAPI::fromJsonValue(m_entity_uris, json[QString("entity_uris")]);
    m_entity_uris_isSet = !json[QString("entity_uris")].isNull() && m_entity_uris_isValid;

    m_keyword_id_isValid = ::OpenAPI::fromJsonValue(m_keyword_id, json[QString("keyword_id")]);
    m_keyword_id_isSet = !json[QString("keyword_id")].isNull() && m_keyword_id_isValid;

    m_relevance_isValid = ::OpenAPI::fromJsonValue(m_relevance, json[QString("relevance")]);
    m_relevance_isSet = !json[QString("relevance")].isNull() && m_relevance_isValid;

    m_text_isValid = ::OpenAPI::fromJsonValue(m_text, json[QString("text")]);
    m_text_isSet = !json[QString("text")].isNull() && m_text_isValid;

    m_type_isValid = ::OpenAPI::fromJsonValue(m_type, json[QString("type")]);
    m_type_isSet = !json[QString("type")].isNull() && m_type_isValid;
}

QString OAIKeyword::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIKeyword::asJsonObject() const {
    QJsonObject obj;
    if (m_entity_types.size() > 0) {
        obj.insert(QString("entity_types"), ::OpenAPI::toJsonValue(m_entity_types));
    }
    if (m_entity_uris.size() > 0) {
        obj.insert(QString("entity_uris"), ::OpenAPI::toJsonValue(m_entity_uris));
    }
    if (m_keyword_id_isSet) {
        obj.insert(QString("keyword_id"), ::OpenAPI::toJsonValue(m_keyword_id));
    }
    if (m_relevance_isSet) {
        obj.insert(QString("relevance"), ::OpenAPI::toJsonValue(m_relevance));
    }
    if (m_text_isSet) {
        obj.insert(QString("text"), ::OpenAPI::toJsonValue(m_text));
    }
    if (m_type_isSet) {
        obj.insert(QString("type"), ::OpenAPI::toJsonValue(m_type));
    }
    return obj;
}

QList<QString> OAIKeyword::getEntityTypes() const {
    return m_entity_types;
}
void OAIKeyword::setEntityTypes(const QList<QString> &entity_types) {
    m_entity_types = entity_types;
    m_entity_types_isSet = true;
}

bool OAIKeyword::is_entity_types_Set() const{
    return m_entity_types_isSet;
}

bool OAIKeyword::is_entity_types_Valid() const{
    return m_entity_types_isValid;
}

QList<QString> OAIKeyword::getEntityUris() const {
    return m_entity_uris;
}
void OAIKeyword::setEntityUris(const QList<QString> &entity_uris) {
    m_entity_uris = entity_uris;
    m_entity_uris_isSet = true;
}

bool OAIKeyword::is_entity_uris_Set() const{
    return m_entity_uris_isSet;
}

bool OAIKeyword::is_entity_uris_Valid() const{
    return m_entity_uris_isValid;
}

QString OAIKeyword::getKeywordId() const {
    return m_keyword_id;
}
void OAIKeyword::setKeywordId(const QString &keyword_id) {
    m_keyword_id = keyword_id;
    m_keyword_id_isSet = true;
}

bool OAIKeyword::is_keyword_id_Set() const{
    return m_keyword_id_isSet;
}

bool OAIKeyword::is_keyword_id_Valid() const{
    return m_keyword_id_isValid;
}

qint32 OAIKeyword::getRelevance() const {
    return m_relevance;
}
void OAIKeyword::setRelevance(const qint32 &relevance) {
    m_relevance = relevance;
    m_relevance_isSet = true;
}

bool OAIKeyword::is_relevance_Set() const{
    return m_relevance_isSet;
}

bool OAIKeyword::is_relevance_Valid() const{
    return m_relevance_isValid;
}

QString OAIKeyword::getText() const {
    return m_text;
}
void OAIKeyword::setText(const QString &text) {
    m_text = text;
    m_text_isSet = true;
}

bool OAIKeyword::is_text_Set() const{
    return m_text_isSet;
}

bool OAIKeyword::is_text_Valid() const{
    return m_text_isValid;
}

QString OAIKeyword::getType() const {
    return m_type;
}
void OAIKeyword::setType(const QString &type) {
    m_type = type;
    m_type_isSet = true;
}

bool OAIKeyword::is_type_Set() const{
    return m_type_isSet;
}

bool OAIKeyword::is_type_Valid() const{
    return m_type_isValid;
}

bool OAIKeyword::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_entity_types.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_entity_uris.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_keyword_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_relevance_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_text_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_type_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIKeyword::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
