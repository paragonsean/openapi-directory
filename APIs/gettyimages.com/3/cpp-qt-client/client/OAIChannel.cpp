/**
 * Getty Images
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 3
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIChannel.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIChannel::OAIChannel(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIChannel::OAIChannel() {
    this->initializeModel();
}

OAIChannel::~OAIChannel() {}

void OAIChannel::initializeModel() {

    m_asset_change_type_isSet = false;
    m_asset_change_type_isValid = false;

    m_asset_family_isSet = false;
    m_asset_family_isValid = false;

    m_asset_type_isSet = false;
    m_asset_type_isValid = false;

    m_channel_id_isSet = false;
    m_channel_id_isValid = false;

    m_create_date_utc_isSet = false;
    m_create_date_utc_isValid = false;

    m_metadata_isSet = false;
    m_metadata_isValid = false;

    m_notification_count_isSet = false;
    m_notification_count_isValid = false;

    m_oldest_change_notification_date_utc_isSet = false;
    m_oldest_change_notification_date_utc_isValid = false;
}

void OAIChannel::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIChannel::fromJsonObject(QJsonObject json) {

    m_asset_change_type_isValid = ::OpenAPI::fromJsonValue(m_asset_change_type, json[QString("AssetChangeType")]);
    m_asset_change_type_isSet = !json[QString("AssetChangeType")].isNull() && m_asset_change_type_isValid;

    m_asset_family_isValid = ::OpenAPI::fromJsonValue(m_asset_family, json[QString("AssetFamily")]);
    m_asset_family_isSet = !json[QString("AssetFamily")].isNull() && m_asset_family_isValid;

    m_asset_type_isValid = ::OpenAPI::fromJsonValue(m_asset_type, json[QString("AssetType")]);
    m_asset_type_isSet = !json[QString("AssetType")].isNull() && m_asset_type_isValid;

    m_channel_id_isValid = ::OpenAPI::fromJsonValue(m_channel_id, json[QString("ChannelId")]);
    m_channel_id_isSet = !json[QString("ChannelId")].isNull() && m_channel_id_isValid;

    m_create_date_utc_isValid = ::OpenAPI::fromJsonValue(m_create_date_utc, json[QString("CreateDateUtc")]);
    m_create_date_utc_isSet = !json[QString("CreateDateUtc")].isNull() && m_create_date_utc_isValid;

    m_metadata_isValid = ::OpenAPI::fromJsonValue(m_metadata, json[QString("Metadata")]);
    m_metadata_isSet = !json[QString("Metadata")].isNull() && m_metadata_isValid;

    m_notification_count_isValid = ::OpenAPI::fromJsonValue(m_notification_count, json[QString("NotificationCount")]);
    m_notification_count_isSet = !json[QString("NotificationCount")].isNull() && m_notification_count_isValid;

    m_oldest_change_notification_date_utc_isValid = ::OpenAPI::fromJsonValue(m_oldest_change_notification_date_utc, json[QString("OldestChangeNotificationDateUtc")]);
    m_oldest_change_notification_date_utc_isSet = !json[QString("OldestChangeNotificationDateUtc")].isNull() && m_oldest_change_notification_date_utc_isValid;
}

QString OAIChannel::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIChannel::asJsonObject() const {
    QJsonObject obj;
    if (m_asset_change_type_isSet) {
        obj.insert(QString("AssetChangeType"), ::OpenAPI::toJsonValue(m_asset_change_type));
    }
    if (m_asset_family.isSet()) {
        obj.insert(QString("AssetFamily"), ::OpenAPI::toJsonValue(m_asset_family));
    }
    if (m_asset_type.isSet()) {
        obj.insert(QString("AssetType"), ::OpenAPI::toJsonValue(m_asset_type));
    }
    if (m_channel_id_isSet) {
        obj.insert(QString("ChannelId"), ::OpenAPI::toJsonValue(m_channel_id));
    }
    if (m_create_date_utc_isSet) {
        obj.insert(QString("CreateDateUtc"), ::OpenAPI::toJsonValue(m_create_date_utc));
    }
    if (m_metadata_isSet) {
        obj.insert(QString("Metadata"), ::OpenAPI::toJsonValue(m_metadata));
    }
    if (m_notification_count_isSet) {
        obj.insert(QString("NotificationCount"), ::OpenAPI::toJsonValue(m_notification_count));
    }
    if (m_oldest_change_notification_date_utc_isSet) {
        obj.insert(QString("OldestChangeNotificationDateUtc"), ::OpenAPI::toJsonValue(m_oldest_change_notification_date_utc));
    }
    return obj;
}

QString OAIChannel::getAssetChangeType() const {
    return m_asset_change_type;
}
void OAIChannel::setAssetChangeType(const QString &asset_change_type) {
    m_asset_change_type = asset_change_type;
    m_asset_change_type_isSet = true;
}

bool OAIChannel::is_asset_change_type_Set() const{
    return m_asset_change_type_isSet;
}

bool OAIChannel::is_asset_change_type_Valid() const{
    return m_asset_change_type_isValid;
}

OAIAssetFamily OAIChannel::getAssetFamily() const {
    return m_asset_family;
}
void OAIChannel::setAssetFamily(const OAIAssetFamily &asset_family) {
    m_asset_family = asset_family;
    m_asset_family_isSet = true;
}

bool OAIChannel::is_asset_family_Set() const{
    return m_asset_family_isSet;
}

bool OAIChannel::is_asset_family_Valid() const{
    return m_asset_family_isValid;
}

OAIAssetType OAIChannel::getAssetType() const {
    return m_asset_type;
}
void OAIChannel::setAssetType(const OAIAssetType &asset_type) {
    m_asset_type = asset_type;
    m_asset_type_isSet = true;
}

bool OAIChannel::is_asset_type_Set() const{
    return m_asset_type_isSet;
}

bool OAIChannel::is_asset_type_Valid() const{
    return m_asset_type_isValid;
}

qint32 OAIChannel::getChannelId() const {
    return m_channel_id;
}
void OAIChannel::setChannelId(const qint32 &channel_id) {
    m_channel_id = channel_id;
    m_channel_id_isSet = true;
}

bool OAIChannel::is_channel_id_Set() const{
    return m_channel_id_isSet;
}

bool OAIChannel::is_channel_id_Valid() const{
    return m_channel_id_isValid;
}

QDateTime OAIChannel::getCreateDateUtc() const {
    return m_create_date_utc;
}
void OAIChannel::setCreateDateUtc(const QDateTime &create_date_utc) {
    m_create_date_utc = create_date_utc;
    m_create_date_utc_isSet = true;
}

bool OAIChannel::is_create_date_utc_Set() const{
    return m_create_date_utc_isSet;
}

bool OAIChannel::is_create_date_utc_Valid() const{
    return m_create_date_utc_isValid;
}

QString OAIChannel::getMetadata() const {
    return m_metadata;
}
void OAIChannel::setMetadata(const QString &metadata) {
    m_metadata = metadata;
    m_metadata_isSet = true;
}

bool OAIChannel::is_metadata_Set() const{
    return m_metadata_isSet;
}

bool OAIChannel::is_metadata_Valid() const{
    return m_metadata_isValid;
}

qint32 OAIChannel::getNotificationCount() const {
    return m_notification_count;
}
void OAIChannel::setNotificationCount(const qint32 &notification_count) {
    m_notification_count = notification_count;
    m_notification_count_isSet = true;
}

bool OAIChannel::is_notification_count_Set() const{
    return m_notification_count_isSet;
}

bool OAIChannel::is_notification_count_Valid() const{
    return m_notification_count_isValid;
}

QDateTime OAIChannel::getOldestChangeNotificationDateUtc() const {
    return m_oldest_change_notification_date_utc;
}
void OAIChannel::setOldestChangeNotificationDateUtc(const QDateTime &oldest_change_notification_date_utc) {
    m_oldest_change_notification_date_utc = oldest_change_notification_date_utc;
    m_oldest_change_notification_date_utc_isSet = true;
}

bool OAIChannel::is_oldest_change_notification_date_utc_Set() const{
    return m_oldest_change_notification_date_utc_isSet;
}

bool OAIChannel::is_oldest_change_notification_date_utc_Valid() const{
    return m_oldest_change_notification_date_utc_isValid;
}

bool OAIChannel::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_asset_change_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_asset_family.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_asset_type.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_channel_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_create_date_utc_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_metadata_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_notification_count_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_oldest_change_notification_date_utc_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIChannel::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
