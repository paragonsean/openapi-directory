/**
 * Getty Images
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 3
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIBoardPermissions.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIBoardPermissions::OAIBoardPermissions(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIBoardPermissions::OAIBoardPermissions() {
    this->initializeModel();
}

OAIBoardPermissions::~OAIBoardPermissions() {}

void OAIBoardPermissions::initializeModel() {

    m_can_add_assets_isSet = false;
    m_can_add_assets_isValid = false;

    m_can_delete_board_isSet = false;
    m_can_delete_board_isValid = false;

    m_can_invite_to_board_isSet = false;
    m_can_invite_to_board_isValid = false;

    m_can_remove_assets_isSet = false;
    m_can_remove_assets_isValid = false;

    m_can_update_description_isSet = false;
    m_can_update_description_isValid = false;

    m_can_update_name_isSet = false;
    m_can_update_name_isValid = false;
}

void OAIBoardPermissions::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIBoardPermissions::fromJsonObject(QJsonObject json) {

    m_can_add_assets_isValid = ::OpenAPI::fromJsonValue(m_can_add_assets, json[QString("can_add_assets")]);
    m_can_add_assets_isSet = !json[QString("can_add_assets")].isNull() && m_can_add_assets_isValid;

    m_can_delete_board_isValid = ::OpenAPI::fromJsonValue(m_can_delete_board, json[QString("can_delete_board")]);
    m_can_delete_board_isSet = !json[QString("can_delete_board")].isNull() && m_can_delete_board_isValid;

    m_can_invite_to_board_isValid = ::OpenAPI::fromJsonValue(m_can_invite_to_board, json[QString("can_invite_to_board")]);
    m_can_invite_to_board_isSet = !json[QString("can_invite_to_board")].isNull() && m_can_invite_to_board_isValid;

    m_can_remove_assets_isValid = ::OpenAPI::fromJsonValue(m_can_remove_assets, json[QString("can_remove_assets")]);
    m_can_remove_assets_isSet = !json[QString("can_remove_assets")].isNull() && m_can_remove_assets_isValid;

    m_can_update_description_isValid = ::OpenAPI::fromJsonValue(m_can_update_description, json[QString("can_update_description")]);
    m_can_update_description_isSet = !json[QString("can_update_description")].isNull() && m_can_update_description_isValid;

    m_can_update_name_isValid = ::OpenAPI::fromJsonValue(m_can_update_name, json[QString("can_update_name")]);
    m_can_update_name_isSet = !json[QString("can_update_name")].isNull() && m_can_update_name_isValid;
}

QString OAIBoardPermissions::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIBoardPermissions::asJsonObject() const {
    QJsonObject obj;
    if (m_can_add_assets_isSet) {
        obj.insert(QString("can_add_assets"), ::OpenAPI::toJsonValue(m_can_add_assets));
    }
    if (m_can_delete_board_isSet) {
        obj.insert(QString("can_delete_board"), ::OpenAPI::toJsonValue(m_can_delete_board));
    }
    if (m_can_invite_to_board_isSet) {
        obj.insert(QString("can_invite_to_board"), ::OpenAPI::toJsonValue(m_can_invite_to_board));
    }
    if (m_can_remove_assets_isSet) {
        obj.insert(QString("can_remove_assets"), ::OpenAPI::toJsonValue(m_can_remove_assets));
    }
    if (m_can_update_description_isSet) {
        obj.insert(QString("can_update_description"), ::OpenAPI::toJsonValue(m_can_update_description));
    }
    if (m_can_update_name_isSet) {
        obj.insert(QString("can_update_name"), ::OpenAPI::toJsonValue(m_can_update_name));
    }
    return obj;
}

bool OAIBoardPermissions::isCanAddAssets() const {
    return m_can_add_assets;
}
void OAIBoardPermissions::setCanAddAssets(const bool &can_add_assets) {
    m_can_add_assets = can_add_assets;
    m_can_add_assets_isSet = true;
}

bool OAIBoardPermissions::is_can_add_assets_Set() const{
    return m_can_add_assets_isSet;
}

bool OAIBoardPermissions::is_can_add_assets_Valid() const{
    return m_can_add_assets_isValid;
}

bool OAIBoardPermissions::isCanDeleteBoard() const {
    return m_can_delete_board;
}
void OAIBoardPermissions::setCanDeleteBoard(const bool &can_delete_board) {
    m_can_delete_board = can_delete_board;
    m_can_delete_board_isSet = true;
}

bool OAIBoardPermissions::is_can_delete_board_Set() const{
    return m_can_delete_board_isSet;
}

bool OAIBoardPermissions::is_can_delete_board_Valid() const{
    return m_can_delete_board_isValid;
}

bool OAIBoardPermissions::isCanInviteToBoard() const {
    return m_can_invite_to_board;
}
void OAIBoardPermissions::setCanInviteToBoard(const bool &can_invite_to_board) {
    m_can_invite_to_board = can_invite_to_board;
    m_can_invite_to_board_isSet = true;
}

bool OAIBoardPermissions::is_can_invite_to_board_Set() const{
    return m_can_invite_to_board_isSet;
}

bool OAIBoardPermissions::is_can_invite_to_board_Valid() const{
    return m_can_invite_to_board_isValid;
}

bool OAIBoardPermissions::isCanRemoveAssets() const {
    return m_can_remove_assets;
}
void OAIBoardPermissions::setCanRemoveAssets(const bool &can_remove_assets) {
    m_can_remove_assets = can_remove_assets;
    m_can_remove_assets_isSet = true;
}

bool OAIBoardPermissions::is_can_remove_assets_Set() const{
    return m_can_remove_assets_isSet;
}

bool OAIBoardPermissions::is_can_remove_assets_Valid() const{
    return m_can_remove_assets_isValid;
}

bool OAIBoardPermissions::isCanUpdateDescription() const {
    return m_can_update_description;
}
void OAIBoardPermissions::setCanUpdateDescription(const bool &can_update_description) {
    m_can_update_description = can_update_description;
    m_can_update_description_isSet = true;
}

bool OAIBoardPermissions::is_can_update_description_Set() const{
    return m_can_update_description_isSet;
}

bool OAIBoardPermissions::is_can_update_description_Valid() const{
    return m_can_update_description_isValid;
}

bool OAIBoardPermissions::isCanUpdateName() const {
    return m_can_update_name;
}
void OAIBoardPermissions::setCanUpdateName(const bool &can_update_name) {
    m_can_update_name = can_update_name;
    m_can_update_name_isSet = true;
}

bool OAIBoardPermissions::is_can_update_name_Set() const{
    return m_can_update_name_isSet;
}

bool OAIBoardPermissions::is_can_update_name_Valid() const{
    return m_can_update_name_isValid;
}

bool OAIBoardPermissions::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_can_add_assets_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_can_delete_board_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_can_invite_to_board_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_can_remove_assets_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_can_update_description_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_can_update_name_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIBoardPermissions::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
