/**
 * Getty Images
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 3
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#ifndef OAI_OAISearchApi_H
#define OAI_OAISearchApi_H

#include "OAIHelpers.h"
#include "OAIHttpRequest.h"
#include "OAIServerConfiguration.h"
#include "OAIOauth.h"

#include "OAIAgeOfPeopleFilterType.h"
#include "OAIBlendedImageSortOrder.h"
#include "OAICollectionsFilterType.h"
#include "OAICompositionsFilterType.h"
#include "OAICreateImageSearchFacetsFields.h"
#include "OAICreateVideoSearchFacetsFields.h"
#include "OAICreativeImageSearchResults.h"
#include "OAICreativeImageSortOrder.h"
#include "OAICreativeImagesFieldValues.h"
#include "OAICreativeVideoSearchResults.h"
#include "OAICreativeVideoSortOrder.h"
#include "OAICreativeVideosFieldValues.h"
#include "OAIEditorialGraphicalStyle.h"
#include "OAIEditorialImageSearchFacetsFields.h"
#include "OAIEditorialImageSearchResults.h"
#include "OAIEditorialImagesFieldValues.h"
#include "OAIEditorialSegmentContract.h"
#include "OAIEditorialVideoSearchFacetsFields.h"
#include "OAIEditorialVideoSearchResults.h"
#include "OAIEditorialVideoType.h"
#include "OAIEditorialVideosFieldValues.h"
#include "OAIEthnicityFilterType.h"
#include "OAIEventFieldValues.h"
#include "OAIEventSearchSortOrder.h"
#include "OAIEventsSearchResult.h"
#include "OAIGraphicalStyle.h"
#include "OAIGraphicalStylesFilterType.h"
#include "OAIImageOrientationRequest.h"
#include "OAIImageSearchItemSearchResults.h"
#include "OAIImageTechniquesFilterType.h"
#include "OAIImagesFieldValues.h"
#include "OAILicenseModelVideoRequest.h"
#include "OAINumberOfPeopleFilterType.h"
#include "OAIReleaseStatus.h"
#include "OAISearchByImageResourceResults.h"
#include "OAISearchFileType.h"
#include "OAISortOrder.h"
#include "OAITeeShirtSize.h"
#include "OAIVideoAspectRatioFilterType.h"
#include "OAIVideoFormatsRequest.h"
#include "OAIVideoFrameRates.h"
#include "OAIVideoOrientationRequest.h"
#include "OAIViewpointsFilterType.h"
#include <QByteArray>
#include <QString>

#include <QObject>
#include <QByteArray>
#include <QStringList>
#include <QList>
#include <QNetworkAccessManager>

namespace OpenAPI {

class OAISearchApi : public QObject {
    Q_OBJECT

public:
    OAISearchApi(const int timeOut = 0);
    ~OAISearchApi();

    void initializeServerConfigs();
    int setDefaultServerValue(int serverIndex,const QString &operation, const QString &variable,const QString &val);
    void setServerIndex(const QString &operation, int serverIndex);
    void setApiKey(const QString &apiKeyName, const QString &apiKey);
    void setBearerToken(const QString &token);
    void setUsername(const QString &username);
    void setPassword(const QString &password);
    void setTimeOut(const int timeOut);
    void setWorkingDirectory(const QString &path);
    void setNetworkAccessManager(QNetworkAccessManager* manager);
    int addServerConfiguration(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables = QMap<QString, OAIServerVariable>());
    void setNewServerForAllOperations(const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void setNewServer(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void addHeaders(const QString &key, const QString &value);
    void enableRequestCompression();
    void enableResponseCompression();
    void abortRequests();
    QString getParamStylePrefix(const QString &style);
    QString getParamStyleSuffix(const QString &style);
    QString getParamStyleDelimiter(const QString &style, const QString &name, bool isExplode);

    /**
    * @param[in]  file_name QString [required]
    * @param[in]  body QByteArray [optional]
    */
    virtual void v3SearchByImageUploadsFileNamePut(const QString &file_name, const ::OpenAPI::OptionalParam<QByteArray> &body = ::OpenAPI::OptionalParam<QByteArray>());

    /**
    * @param[in]  accept_language QString [optional]
    * @param[in]  gi_country_code QString [optional]
    * @param[in]  editorial_segment OAIEditorialSegmentContract [optional]
    * @param[in]  date_from QDateTime [optional]
    * @param[in]  date_to QDateTime [optional]
    * @param[in]  fields QList<OAIEventFieldValues> [optional]
    * @param[in]  page qint32 [optional]
    * @param[in]  page_size qint32 [optional]
    * @param[in]  phrase QString [optional]
    * @param[in]  sort_order OAIEventSearchSortOrder [optional]
    */
    virtual void v3SearchEventsGet(const ::OpenAPI::OptionalParam<QString> &accept_language = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &gi_country_code = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<OAIEditorialSegmentContract> &editorial_segment = ::OpenAPI::OptionalParam<OAIEditorialSegmentContract>(), const ::OpenAPI::OptionalParam<QDateTime> &date_from = ::OpenAPI::OptionalParam<QDateTime>(), const ::OpenAPI::OptionalParam<QDateTime> &date_to = ::OpenAPI::OptionalParam<QDateTime>(), const ::OpenAPI::OptionalParam<QList<OAIEventFieldValues>> &fields = ::OpenAPI::OptionalParam<QList<OAIEventFieldValues>>(), const ::OpenAPI::OptionalParam<qint32> &page = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint32> &page_size = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<QString> &phrase = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<OAIEventSearchSortOrder> &sort_order = ::OpenAPI::OptionalParam<OAIEventSearchSortOrder>());

    /**
    * @param[in]  accept_language QString [optional]
    * @param[in]  gi_country_code QString [optional]
    * @param[in]  asset_id QString [optional]
    * @param[in]  exclude_editorial_use_only bool [optional]
    * @param[in]  facet_fields QList<OAICreateImageSearchFacetsFields> [optional]
    * @param[in]  facet_max_count qint32 [optional]
    * @param[in]  fields QList<OAICreativeImagesFieldValues> [optional]
    * @param[in]  image_url QString [optional]
    * @param[in]  include_facets bool [optional]
    * @param[in]  page qint32 [optional]
    * @param[in]  page_size qint32 [optional]
    * @param[in]  product_types QList<QString> [optional]
    */
    virtual void v3SearchImagesCreativeByImageGet(const ::OpenAPI::OptionalParam<QString> &accept_language = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &gi_country_code = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &asset_id = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &exclude_editorial_use_only = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QList<OAICreateImageSearchFacetsFields>> &facet_fields = ::OpenAPI::OptionalParam<QList<OAICreateImageSearchFacetsFields>>(), const ::OpenAPI::OptionalParam<qint32> &facet_max_count = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<QList<OAICreativeImagesFieldValues>> &fields = ::OpenAPI::OptionalParam<QList<OAICreativeImagesFieldValues>>(), const ::OpenAPI::OptionalParam<QString> &image_url = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &include_facets = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<qint32> &page = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint32> &page_size = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<QList<QString>> &product_types = ::OpenAPI::OptionalParam<QList<QString>>());

    /**
    * @param[in]  accept_language QString [optional]
    * @param[in]  gi_country_code QString [optional]
    * @param[in]  age_of_people QList<OAIAgeOfPeopleFilterType> [optional]
    * @param[in]  artists QString [optional]
    * @param[in]  collection_codes QList<QString> [optional]
    * @param[in]  collections_filter_type OAICollectionsFilterType [optional]
    * @param[in]  color QString [optional]
    * @param[in]  compositions QList<OAICompositionsFilterType> [optional]
    * @param[in]  download_product QString [optional]
    * @param[in]  embed_content_only bool [optional]
    * @param[in]  ethnicity QList<OAIEthnicityFilterType> [optional]
    * @param[in]  exclude_keyword_ids QList<qint32> [optional]
    * @param[in]  exclude_nudity bool [optional]
    * @param[in]  exclude_editorial_use_only bool [optional]
    * @param[in]  fields QList<OAICreativeImagesFieldValues> [optional]
    * @param[in]  file_types QList<OAISearchFileType> [optional]
    * @param[in]  graphical_styles QList<OAIGraphicalStyle> [optional]
    * @param[in]  graphical_styles_filter_type OAIGraphicalStylesFilterType [optional]
    * @param[in]  include_related_searches bool [optional]
    * @param[in]  keyword_ids QList<qint32> [optional]
    * @param[in]  minimum_size OAITeeShirtSize [optional]
    * @param[in]  number_of_people QList<OAINumberOfPeopleFilterType> [optional]
    * @param[in]  orientations QList<OAIImageOrientationRequest> [optional]
    * @param[in]  page qint32 [optional]
    * @param[in]  page_size qint32 [optional]
    * @param[in]  phrase QString [optional]
    * @param[in]  safe_search bool [optional]
    * @param[in]  sort_order OAICreativeImageSortOrder [optional]
    * @param[in]  facet_fields QList<OAICreateImageSearchFacetsFields> [optional]
    * @param[in]  include_facets bool [optional]
    * @param[in]  facet_max_count qint32 [optional]
    */
    virtual void v3SearchImagesCreativeGet(const ::OpenAPI::OptionalParam<QString> &accept_language = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &gi_country_code = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QList<OAIAgeOfPeopleFilterType>> &age_of_people = ::OpenAPI::OptionalParam<QList<OAIAgeOfPeopleFilterType>>(), const ::OpenAPI::OptionalParam<QString> &artists = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QList<QString>> &collection_codes = ::OpenAPI::OptionalParam<QList<QString>>(), const ::OpenAPI::OptionalParam<OAICollectionsFilterType> &collections_filter_type = ::OpenAPI::OptionalParam<OAICollectionsFilterType>(), const ::OpenAPI::OptionalParam<QString> &color = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QList<OAICompositionsFilterType>> &compositions = ::OpenAPI::OptionalParam<QList<OAICompositionsFilterType>>(), const ::OpenAPI::OptionalParam<QString> &download_product = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &embed_content_only = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QList<OAIEthnicityFilterType>> &ethnicity = ::OpenAPI::OptionalParam<QList<OAIEthnicityFilterType>>(), const ::OpenAPI::OptionalParam<QList<qint32>> &exclude_keyword_ids = ::OpenAPI::OptionalParam<QList<qint32>>(), const ::OpenAPI::OptionalParam<bool> &exclude_nudity = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<bool> &exclude_editorial_use_only = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QList<OAICreativeImagesFieldValues>> &fields = ::OpenAPI::OptionalParam<QList<OAICreativeImagesFieldValues>>(), const ::OpenAPI::OptionalParam<QList<OAISearchFileType>> &file_types = ::OpenAPI::OptionalParam<QList<OAISearchFileType>>(), const ::OpenAPI::OptionalParam<QList<OAIGraphicalStyle>> &graphical_styles = ::OpenAPI::OptionalParam<QList<OAIGraphicalStyle>>(), const ::OpenAPI::OptionalParam<OAIGraphicalStylesFilterType> &graphical_styles_filter_type = ::OpenAPI::OptionalParam<OAIGraphicalStylesFilterType>(), const ::OpenAPI::OptionalParam<bool> &include_related_searches = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QList<qint32>> &keyword_ids = ::OpenAPI::OptionalParam<QList<qint32>>(), const ::OpenAPI::OptionalParam<OAITeeShirtSize> &minimum_size = ::OpenAPI::OptionalParam<OAITeeShirtSize>(), const ::OpenAPI::OptionalParam<QList<OAINumberOfPeopleFilterType>> &number_of_people = ::OpenAPI::OptionalParam<QList<OAINumberOfPeopleFilterType>>(), const ::OpenAPI::OptionalParam<QList<OAIImageOrientationRequest>> &orientations = ::OpenAPI::OptionalParam<QList<OAIImageOrientationRequest>>(), const ::OpenAPI::OptionalParam<qint32> &page = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint32> &page_size = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<QString> &phrase = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &safe_search = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<OAICreativeImageSortOrder> &sort_order = ::OpenAPI::OptionalParam<OAICreativeImageSortOrder>(), const ::OpenAPI::OptionalParam<QList<OAICreateImageSearchFacetsFields>> &facet_fields = ::OpenAPI::OptionalParam<QList<OAICreateImageSearchFacetsFields>>(), const ::OpenAPI::OptionalParam<bool> &include_facets = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<qint32> &facet_max_count = ::OpenAPI::OptionalParam<qint32>());

    /**
    * @param[in]  accept_language QString [optional]
    * @param[in]  gi_country_code QString [optional]
    * @param[in]  age_of_people QList<OAIAgeOfPeopleFilterType> [optional]
    * @param[in]  artists QString [optional]
    * @param[in]  collection_codes QList<QString> [optional]
    * @param[in]  collections_filter_type OAICollectionsFilterType [optional]
    * @param[in]  compositions QList<OAICompositionsFilterType> [optional]
    * @param[in]  date_from QDateTime [optional]
    * @param[in]  date_to QDateTime [optional]
    * @param[in]  download_product QString [optional]
    * @param[in]  editorial_segments QList<OAIEditorialSegmentContract> [optional]
    * @param[in]  embed_content_only bool [optional]
    * @param[in]  ethnicity QList<OAIEthnicityFilterType> [optional]
    * @param[in]  event_ids QList<qint32> [optional]
    * @param[in]  exclude_keyword_ids QList<qint32> [optional]
    * @param[in]  fields QList<OAIEditorialImagesFieldValues> [optional]
    * @param[in]  file_types QList<OAISearchFileType> [optional]
    * @param[in]  graphical_styles QList<OAIEditorialGraphicalStyle> [optional]
    * @param[in]  graphical_styles_filter_type OAIGraphicalStylesFilterType [optional]
    * @param[in]  include_related_searches bool [optional]
    * @param[in]  keyword_ids QList<qint32> [optional]
    * @param[in]  minimum_size OAITeeShirtSize [optional]
    * @param[in]  number_of_people QList<OAINumberOfPeopleFilterType> [optional]
    * @param[in]  orientations QList<OAIImageOrientationRequest> [optional]
    * @param[in]  page qint32 [optional]
    * @param[in]  page_size qint32 [optional]
    * @param[in]  phrase QString [optional]
    * @param[in]  sort_order OAISortOrder [optional]
    * @param[in]  specific_people QList<QString> [optional]
    * @param[in]  minimum_quality_rank qint32 [optional]
    * @param[in]  facet_fields QList<OAIEditorialImageSearchFacetsFields> [optional]
    * @param[in]  include_facets bool [optional]
    * @param[in]  facet_max_count qint32 [optional]
    */
    virtual void v3SearchImagesEditorialGet(const ::OpenAPI::OptionalParam<QString> &accept_language = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &gi_country_code = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QList<OAIAgeOfPeopleFilterType>> &age_of_people = ::OpenAPI::OptionalParam<QList<OAIAgeOfPeopleFilterType>>(), const ::OpenAPI::OptionalParam<QString> &artists = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QList<QString>> &collection_codes = ::OpenAPI::OptionalParam<QList<QString>>(), const ::OpenAPI::OptionalParam<OAICollectionsFilterType> &collections_filter_type = ::OpenAPI::OptionalParam<OAICollectionsFilterType>(), const ::OpenAPI::OptionalParam<QList<OAICompositionsFilterType>> &compositions = ::OpenAPI::OptionalParam<QList<OAICompositionsFilterType>>(), const ::OpenAPI::OptionalParam<QDateTime> &date_from = ::OpenAPI::OptionalParam<QDateTime>(), const ::OpenAPI::OptionalParam<QDateTime> &date_to = ::OpenAPI::OptionalParam<QDateTime>(), const ::OpenAPI::OptionalParam<QString> &download_product = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QList<OAIEditorialSegmentContract>> &editorial_segments = ::OpenAPI::OptionalParam<QList<OAIEditorialSegmentContract>>(), const ::OpenAPI::OptionalParam<bool> &embed_content_only = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QList<OAIEthnicityFilterType>> &ethnicity = ::OpenAPI::OptionalParam<QList<OAIEthnicityFilterType>>(), const ::OpenAPI::OptionalParam<QList<qint32>> &event_ids = ::OpenAPI::OptionalParam<QList<qint32>>(), const ::OpenAPI::OptionalParam<QList<qint32>> &exclude_keyword_ids = ::OpenAPI::OptionalParam<QList<qint32>>(), const ::OpenAPI::OptionalParam<QList<OAIEditorialImagesFieldValues>> &fields = ::OpenAPI::OptionalParam<QList<OAIEditorialImagesFieldValues>>(), const ::OpenAPI::OptionalParam<QList<OAISearchFileType>> &file_types = ::OpenAPI::OptionalParam<QList<OAISearchFileType>>(), const ::OpenAPI::OptionalParam<QList<OAIEditorialGraphicalStyle>> &graphical_styles = ::OpenAPI::OptionalParam<QList<OAIEditorialGraphicalStyle>>(), const ::OpenAPI::OptionalParam<OAIGraphicalStylesFilterType> &graphical_styles_filter_type = ::OpenAPI::OptionalParam<OAIGraphicalStylesFilterType>(), const ::OpenAPI::OptionalParam<bool> &include_related_searches = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QList<qint32>> &keyword_ids = ::OpenAPI::OptionalParam<QList<qint32>>(), const ::OpenAPI::OptionalParam<OAITeeShirtSize> &minimum_size = ::OpenAPI::OptionalParam<OAITeeShirtSize>(), const ::OpenAPI::OptionalParam<QList<OAINumberOfPeopleFilterType>> &number_of_people = ::OpenAPI::OptionalParam<QList<OAINumberOfPeopleFilterType>>(), const ::OpenAPI::OptionalParam<QList<OAIImageOrientationRequest>> &orientations = ::OpenAPI::OptionalParam<QList<OAIImageOrientationRequest>>(), const ::OpenAPI::OptionalParam<qint32> &page = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint32> &page_size = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<QString> &phrase = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<OAISortOrder> &sort_order = ::OpenAPI::OptionalParam<OAISortOrder>(), const ::OpenAPI::OptionalParam<QList<QString>> &specific_people = ::OpenAPI::OptionalParam<QList<QString>>(), const ::OpenAPI::OptionalParam<qint32> &minimum_quality_rank = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<QList<OAIEditorialImageSearchFacetsFields>> &facet_fields = ::OpenAPI::OptionalParam<QList<OAIEditorialImageSearchFacetsFields>>(), const ::OpenAPI::OptionalParam<bool> &include_facets = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<qint32> &facet_max_count = ::OpenAPI::OptionalParam<qint32>());

    /**
    * @param[in]  accept_language QString [optional]
    * @param[in]  gi_country_code QString [optional]
    * @param[in]  age_of_people QList<OAIAgeOfPeopleFilterType> [optional]
    * @param[in]  artists QString [optional]
    * @param[in]  collection_codes QList<QString> [optional]
    * @param[in]  collections_filter_type OAICollectionsFilterType [optional]
    * @param[in]  color QString [optional]
    * @param[in]  compositions QList<OAICompositionsFilterType> [optional]
    * @param[in]  download_product QString [optional]
    * @param[in]  embed_content_only bool [optional]
    * @param[in]  event_ids QList<qint32> [optional]
    * @param[in]  ethnicity QList<OAIEthnicityFilterType> [optional]
    * @param[in]  exclude_nudity bool [optional]
    * @param[in]  fields QList<OAIImagesFieldValues> [optional]
    * @param[in]  file_types QList<OAISearchFileType> [optional]
    * @param[in]  graphical_styles QList<OAIGraphicalStyle> [optional]
    * @param[in]  graphical_styles_filter_type OAIGraphicalStylesFilterType [optional]
    * @param[in]  include_related_searches bool [optional]
    * @param[in]  keyword_ids QList<qint32> [optional]
    * @param[in]  minimum_size OAITeeShirtSize [optional]
    * @param[in]  number_of_people QList<OAINumberOfPeopleFilterType> [optional]
    * @param[in]  orientations QList<OAIImageOrientationRequest> [optional]
    * @param[in]  page qint32 [optional]
    * @param[in]  page_size qint32 [optional]
    * @param[in]  phrase QString [optional]
    * @param[in]  sort_order OAIBlendedImageSortOrder [optional]
    * @param[in]  specific_people QList<QString> [optional]
    */
    virtual void v3SearchImagesGet(const ::OpenAPI::OptionalParam<QString> &accept_language = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &gi_country_code = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QList<OAIAgeOfPeopleFilterType>> &age_of_people = ::OpenAPI::OptionalParam<QList<OAIAgeOfPeopleFilterType>>(), const ::OpenAPI::OptionalParam<QString> &artists = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QList<QString>> &collection_codes = ::OpenAPI::OptionalParam<QList<QString>>(), const ::OpenAPI::OptionalParam<OAICollectionsFilterType> &collections_filter_type = ::OpenAPI::OptionalParam<OAICollectionsFilterType>(), const ::OpenAPI::OptionalParam<QString> &color = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QList<OAICompositionsFilterType>> &compositions = ::OpenAPI::OptionalParam<QList<OAICompositionsFilterType>>(), const ::OpenAPI::OptionalParam<QString> &download_product = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &embed_content_only = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QList<qint32>> &event_ids = ::OpenAPI::OptionalParam<QList<qint32>>(), const ::OpenAPI::OptionalParam<QList<OAIEthnicityFilterType>> &ethnicity = ::OpenAPI::OptionalParam<QList<OAIEthnicityFilterType>>(), const ::OpenAPI::OptionalParam<bool> &exclude_nudity = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QList<OAIImagesFieldValues>> &fields = ::OpenAPI::OptionalParam<QList<OAIImagesFieldValues>>(), const ::OpenAPI::OptionalParam<QList<OAISearchFileType>> &file_types = ::OpenAPI::OptionalParam<QList<OAISearchFileType>>(), const ::OpenAPI::OptionalParam<QList<OAIGraphicalStyle>> &graphical_styles = ::OpenAPI::OptionalParam<QList<OAIGraphicalStyle>>(), const ::OpenAPI::OptionalParam<OAIGraphicalStylesFilterType> &graphical_styles_filter_type = ::OpenAPI::OptionalParam<OAIGraphicalStylesFilterType>(), const ::OpenAPI::OptionalParam<bool> &include_related_searches = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QList<qint32>> &keyword_ids = ::OpenAPI::OptionalParam<QList<qint32>>(), const ::OpenAPI::OptionalParam<OAITeeShirtSize> &minimum_size = ::OpenAPI::OptionalParam<OAITeeShirtSize>(), const ::OpenAPI::OptionalParam<QList<OAINumberOfPeopleFilterType>> &number_of_people = ::OpenAPI::OptionalParam<QList<OAINumberOfPeopleFilterType>>(), const ::OpenAPI::OptionalParam<QList<OAIImageOrientationRequest>> &orientations = ::OpenAPI::OptionalParam<QList<OAIImageOrientationRequest>>(), const ::OpenAPI::OptionalParam<qint32> &page = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint32> &page_size = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<QString> &phrase = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<OAIBlendedImageSortOrder> &sort_order = ::OpenAPI::OptionalParam<OAIBlendedImageSortOrder>(), const ::OpenAPI::OptionalParam<QList<QString>> &specific_people = ::OpenAPI::OptionalParam<QList<QString>>());

    /**
    * @param[in]  accept_language QString [optional]
    * @param[in]  gi_country_code QString [optional]
    * @param[in]  asset_id QString [optional]
    * @param[in]  exclude_editorial_use_only bool [optional]
    * @param[in]  facet_fields QList<OAICreateVideoSearchFacetsFields> [optional]
    * @param[in]  facet_max_count qint32 [optional]
    * @param[in]  fields QList<OAICreativeVideosFieldValues> [optional]
    * @param[in]  image_url QString [optional]
    * @param[in]  include_facets bool [optional]
    * @param[in]  page qint32 [optional]
    * @param[in]  page_size qint32 [optional]
    * @param[in]  product_types QList<QString> [optional]
    */
    virtual void v3SearchVideosCreativeByImageGet(const ::OpenAPI::OptionalParam<QString> &accept_language = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &gi_country_code = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &asset_id = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &exclude_editorial_use_only = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QList<OAICreateVideoSearchFacetsFields>> &facet_fields = ::OpenAPI::OptionalParam<QList<OAICreateVideoSearchFacetsFields>>(), const ::OpenAPI::OptionalParam<qint32> &facet_max_count = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<QList<OAICreativeVideosFieldValues>> &fields = ::OpenAPI::OptionalParam<QList<OAICreativeVideosFieldValues>>(), const ::OpenAPI::OptionalParam<QString> &image_url = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &include_facets = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<qint32> &page = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint32> &page_size = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<QList<QString>> &product_types = ::OpenAPI::OptionalParam<QList<QString>>());

    /**
    * @param[in]  accept_language QString [optional]
    * @param[in]  gi_country_code QString [optional]
    * @param[in]  age_of_people QList<OAIAgeOfPeopleFilterType> [optional]
    * @param[in]  artists QString [optional]
    * @param[in]  aspect_ratios QList<OAIVideoAspectRatioFilterType> [optional]
    * @param[in]  collection_codes QList<QString> [optional]
    * @param[in]  collections_filter_type OAICollectionsFilterType [optional]
    * @param[in]  compositions QList<OAICompositionsFilterType> [optional]
    * @param[in]  download_product QString [optional]
    * @param[in]  exclude_nudity bool [optional]
    * @param[in]  exclude_editorial_use_only bool [optional]
    * @param[in]  exclude_keyword_ids QList<qint32> [optional]
    * @param[in]  fields QList<OAICreativeVideosFieldValues> [optional]
    * @param[in]  format_available OAIVideoFormatsRequest [optional]
    * @param[in]  frame_rates QList<OAIVideoFrameRates> [optional]
    * @param[in]  image_techniques QList<OAIImageTechniquesFilterType> [optional]
    * @param[in]  include_related_searches bool [optional]
    * @param[in]  keyword_ids QList<qint32> [optional]
    * @param[in]  license_models QList<OAILicenseModelVideoRequest> [optional]
    * @param[in]  orientations QList<OAIVideoOrientationRequest> [optional]
    * @param[in]  min_clip_length qint32 [optional]
    * @param[in]  max_clip_length qint32 [optional]
    * @param[in]  page qint32 [optional]
    * @param[in]  page_size qint32 [optional]
    * @param[in]  phrase QString [optional]
    * @param[in]  safe_search bool [optional]
    * @param[in]  sort_order OAICreativeVideoSortOrder [optional]
    * @param[in]  release_status OAIReleaseStatus [optional]
    * @param[in]  facet_fields QList<OAICreateVideoSearchFacetsFields> [optional]
    * @param[in]  facet_max_count qint32 [optional]
    * @param[in]  include_facets bool [optional]
    * @param[in]  viewpoints QList<OAIViewpointsFilterType> [optional]
    */
    virtual void v3SearchVideosCreativeGet(const ::OpenAPI::OptionalParam<QString> &accept_language = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &gi_country_code = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QList<OAIAgeOfPeopleFilterType>> &age_of_people = ::OpenAPI::OptionalParam<QList<OAIAgeOfPeopleFilterType>>(), const ::OpenAPI::OptionalParam<QString> &artists = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QList<OAIVideoAspectRatioFilterType>> &aspect_ratios = ::OpenAPI::OptionalParam<QList<OAIVideoAspectRatioFilterType>>(), const ::OpenAPI::OptionalParam<QList<QString>> &collection_codes = ::OpenAPI::OptionalParam<QList<QString>>(), const ::OpenAPI::OptionalParam<OAICollectionsFilterType> &collections_filter_type = ::OpenAPI::OptionalParam<OAICollectionsFilterType>(), const ::OpenAPI::OptionalParam<QList<OAICompositionsFilterType>> &compositions = ::OpenAPI::OptionalParam<QList<OAICompositionsFilterType>>(), const ::OpenAPI::OptionalParam<QString> &download_product = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &exclude_nudity = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<bool> &exclude_editorial_use_only = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QList<qint32>> &exclude_keyword_ids = ::OpenAPI::OptionalParam<QList<qint32>>(), const ::OpenAPI::OptionalParam<QList<OAICreativeVideosFieldValues>> &fields = ::OpenAPI::OptionalParam<QList<OAICreativeVideosFieldValues>>(), const ::OpenAPI::OptionalParam<OAIVideoFormatsRequest> &format_available = ::OpenAPI::OptionalParam<OAIVideoFormatsRequest>(), const ::OpenAPI::OptionalParam<QList<OAIVideoFrameRates>> &frame_rates = ::OpenAPI::OptionalParam<QList<OAIVideoFrameRates>>(), const ::OpenAPI::OptionalParam<QList<OAIImageTechniquesFilterType>> &image_techniques = ::OpenAPI::OptionalParam<QList<OAIImageTechniquesFilterType>>(), const ::OpenAPI::OptionalParam<bool> &include_related_searches = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QList<qint32>> &keyword_ids = ::OpenAPI::OptionalParam<QList<qint32>>(), const ::OpenAPI::OptionalParam<QList<OAILicenseModelVideoRequest>> &license_models = ::OpenAPI::OptionalParam<QList<OAILicenseModelVideoRequest>>(), const ::OpenAPI::OptionalParam<QList<OAIVideoOrientationRequest>> &orientations = ::OpenAPI::OptionalParam<QList<OAIVideoOrientationRequest>>(), const ::OpenAPI::OptionalParam<qint32> &min_clip_length = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint32> &max_clip_length = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint32> &page = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint32> &page_size = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<QString> &phrase = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &safe_search = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<OAICreativeVideoSortOrder> &sort_order = ::OpenAPI::OptionalParam<OAICreativeVideoSortOrder>(), const ::OpenAPI::OptionalParam<OAIReleaseStatus> &release_status = ::OpenAPI::OptionalParam<OAIReleaseStatus>(), const ::OpenAPI::OptionalParam<QList<OAICreateVideoSearchFacetsFields>> &facet_fields = ::OpenAPI::OptionalParam<QList<OAICreateVideoSearchFacetsFields>>(), const ::OpenAPI::OptionalParam<qint32> &facet_max_count = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<bool> &include_facets = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QList<OAIViewpointsFilterType>> &viewpoints = ::OpenAPI::OptionalParam<QList<OAIViewpointsFilterType>>());

    /**
    * @param[in]  accept_language QString [optional]
    * @param[in]  gi_country_code QString [optional]
    * @param[in]  age_of_people QList<OAIAgeOfPeopleFilterType> [optional]
    * @param[in]  artists QString [optional]
    * @param[in]  aspect_ratios QList<OAIVideoAspectRatioFilterType> [optional]
    * @param[in]  collection_codes QList<QString> [optional]
    * @param[in]  collections_filter_type OAICollectionsFilterType [optional]
    * @param[in]  compositions QList<OAICompositionsFilterType> [optional]
    * @param[in]  date_from QDateTime [optional]
    * @param[in]  date_to QDateTime [optional]
    * @param[in]  download_product QString [optional]
    * @param[in]  editorial_video_types QList<OAIEditorialVideoType> [optional]
    * @param[in]  fields QList<OAIEditorialVideosFieldValues> [optional]
    * @param[in]  format_available OAIVideoFormatsRequest [optional]
    * @param[in]  frame_rates QList<OAIVideoFrameRates> [optional]
    * @param[in]  image_techniques QList<OAIImageTechniquesFilterType> [optional]
    * @param[in]  include_related_searches bool [optional]
    * @param[in]  keyword_ids QList<qint32> [optional]
    * @param[in]  min_clip_length qint32 [optional]
    * @param[in]  max_clip_length qint32 [optional]
    * @param[in]  orientations QList<OAIVideoOrientationRequest> [optional]
    * @param[in]  page qint32 [optional]
    * @param[in]  page_size qint32 [optional]
    * @param[in]  phrase QString [optional]
    * @param[in]  sort_order OAISortOrder [optional]
    * @param[in]  specific_people QList<QString> [optional]
    * @param[in]  release_status OAIReleaseStatus [optional]
    * @param[in]  facet_fields QList<OAIEditorialVideoSearchFacetsFields> [optional]
    * @param[in]  include_facets bool [optional]
    * @param[in]  facet_max_count qint32 [optional]
    * @param[in]  viewpoints QList<OAIViewpointsFilterType> [optional]
    */
    virtual void v3SearchVideosEditorialGet(const ::OpenAPI::OptionalParam<QString> &accept_language = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &gi_country_code = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QList<OAIAgeOfPeopleFilterType>> &age_of_people = ::OpenAPI::OptionalParam<QList<OAIAgeOfPeopleFilterType>>(), const ::OpenAPI::OptionalParam<QString> &artists = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QList<OAIVideoAspectRatioFilterType>> &aspect_ratios = ::OpenAPI::OptionalParam<QList<OAIVideoAspectRatioFilterType>>(), const ::OpenAPI::OptionalParam<QList<QString>> &collection_codes = ::OpenAPI::OptionalParam<QList<QString>>(), const ::OpenAPI::OptionalParam<OAICollectionsFilterType> &collections_filter_type = ::OpenAPI::OptionalParam<OAICollectionsFilterType>(), const ::OpenAPI::OptionalParam<QList<OAICompositionsFilterType>> &compositions = ::OpenAPI::OptionalParam<QList<OAICompositionsFilterType>>(), const ::OpenAPI::OptionalParam<QDateTime> &date_from = ::OpenAPI::OptionalParam<QDateTime>(), const ::OpenAPI::OptionalParam<QDateTime> &date_to = ::OpenAPI::OptionalParam<QDateTime>(), const ::OpenAPI::OptionalParam<QString> &download_product = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QList<OAIEditorialVideoType>> &editorial_video_types = ::OpenAPI::OptionalParam<QList<OAIEditorialVideoType>>(), const ::OpenAPI::OptionalParam<QList<OAIEditorialVideosFieldValues>> &fields = ::OpenAPI::OptionalParam<QList<OAIEditorialVideosFieldValues>>(), const ::OpenAPI::OptionalParam<OAIVideoFormatsRequest> &format_available = ::OpenAPI::OptionalParam<OAIVideoFormatsRequest>(), const ::OpenAPI::OptionalParam<QList<OAIVideoFrameRates>> &frame_rates = ::OpenAPI::OptionalParam<QList<OAIVideoFrameRates>>(), const ::OpenAPI::OptionalParam<QList<OAIImageTechniquesFilterType>> &image_techniques = ::OpenAPI::OptionalParam<QList<OAIImageTechniquesFilterType>>(), const ::OpenAPI::OptionalParam<bool> &include_related_searches = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QList<qint32>> &keyword_ids = ::OpenAPI::OptionalParam<QList<qint32>>(), const ::OpenAPI::OptionalParam<qint32> &min_clip_length = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint32> &max_clip_length = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<QList<OAIVideoOrientationRequest>> &orientations = ::OpenAPI::OptionalParam<QList<OAIVideoOrientationRequest>>(), const ::OpenAPI::OptionalParam<qint32> &page = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint32> &page_size = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<QString> &phrase = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<OAISortOrder> &sort_order = ::OpenAPI::OptionalParam<OAISortOrder>(), const ::OpenAPI::OptionalParam<QList<QString>> &specific_people = ::OpenAPI::OptionalParam<QList<QString>>(), const ::OpenAPI::OptionalParam<OAIReleaseStatus> &release_status = ::OpenAPI::OptionalParam<OAIReleaseStatus>(), const ::OpenAPI::OptionalParam<QList<OAIEditorialVideoSearchFacetsFields>> &facet_fields = ::OpenAPI::OptionalParam<QList<OAIEditorialVideoSearchFacetsFields>>(), const ::OpenAPI::OptionalParam<bool> &include_facets = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<qint32> &facet_max_count = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<QList<OAIViewpointsFilterType>> &viewpoints = ::OpenAPI::OptionalParam<QList<OAIViewpointsFilterType>>());


private:
    QMap<QString,int> _serverIndices;
    QMap<QString,QList<OAIServerConfiguration>> _serverConfigs;
    QMap<QString, QString> _apiKeys;
    QString _bearerToken;
    QString _username;
    QString _password;
    int _timeOut;
    QString _workingDirectory;
    QNetworkAccessManager* _manager;
    QMap<QString, QString> _defaultHeaders;
    bool _isResponseCompressionEnabled;
    bool _isRequestCompressionEnabled;
    OAIHttpRequestInput _latestInput;
    OAIHttpRequestWorker *_latestWorker;
    QStringList _latestScope;
    OauthCode _authFlow;
    OauthImplicit _implicitFlow;
    OauthCredentials _credentialFlow;
    OauthPassword _passwordFlow;
    int _OauthMethod = 0;

    void v3SearchByImageUploadsFileNamePutCallback(OAIHttpRequestWorker *worker);
    void v3SearchEventsGetCallback(OAIHttpRequestWorker *worker);
    void v3SearchImagesCreativeByImageGetCallback(OAIHttpRequestWorker *worker);
    void v3SearchImagesCreativeGetCallback(OAIHttpRequestWorker *worker);
    void v3SearchImagesEditorialGetCallback(OAIHttpRequestWorker *worker);
    void v3SearchImagesGetCallback(OAIHttpRequestWorker *worker);
    void v3SearchVideosCreativeByImageGetCallback(OAIHttpRequestWorker *worker);
    void v3SearchVideosCreativeGetCallback(OAIHttpRequestWorker *worker);
    void v3SearchVideosEditorialGetCallback(OAIHttpRequestWorker *worker);

Q_SIGNALS:

    void v3SearchByImageUploadsFileNamePutSignal();
    void v3SearchEventsGetSignal(OAIEventsSearchResult summary);
    void v3SearchImagesCreativeByImageGetSignal(OAISearchByImageResourceResults summary);
    void v3SearchImagesCreativeGetSignal(OAICreativeImageSearchResults summary);
    void v3SearchImagesEditorialGetSignal(OAIEditorialImageSearchResults summary);
    void v3SearchImagesGetSignal(OAIImageSearchItemSearchResults summary);
    void v3SearchVideosCreativeByImageGetSignal(OAICreativeVideoSearchResults summary);
    void v3SearchVideosCreativeGetSignal(OAICreativeVideoSearchResults summary);
    void v3SearchVideosEditorialGetSignal(OAIEditorialVideoSearchResults summary);


    void v3SearchByImageUploadsFileNamePutSignalFull(OAIHttpRequestWorker *worker);
    void v3SearchEventsGetSignalFull(OAIHttpRequestWorker *worker, OAIEventsSearchResult summary);
    void v3SearchImagesCreativeByImageGetSignalFull(OAIHttpRequestWorker *worker, OAISearchByImageResourceResults summary);
    void v3SearchImagesCreativeGetSignalFull(OAIHttpRequestWorker *worker, OAICreativeImageSearchResults summary);
    void v3SearchImagesEditorialGetSignalFull(OAIHttpRequestWorker *worker, OAIEditorialImageSearchResults summary);
    void v3SearchImagesGetSignalFull(OAIHttpRequestWorker *worker, OAIImageSearchItemSearchResults summary);
    void v3SearchVideosCreativeByImageGetSignalFull(OAIHttpRequestWorker *worker, OAICreativeVideoSearchResults summary);
    void v3SearchVideosCreativeGetSignalFull(OAIHttpRequestWorker *worker, OAICreativeVideoSearchResults summary);
    void v3SearchVideosEditorialGetSignalFull(OAIHttpRequestWorker *worker, OAIEditorialVideoSearchResults summary);

    Q_DECL_DEPRECATED_X("Use v3SearchByImageUploadsFileNamePutSignalError() instead")
    void v3SearchByImageUploadsFileNamePutSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void v3SearchByImageUploadsFileNamePutSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use v3SearchEventsGetSignalError() instead")
    void v3SearchEventsGetSignalE(OAIEventsSearchResult summary, QNetworkReply::NetworkError error_type, QString error_str);
    void v3SearchEventsGetSignalError(OAIEventsSearchResult summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use v3SearchImagesCreativeByImageGetSignalError() instead")
    void v3SearchImagesCreativeByImageGetSignalE(OAISearchByImageResourceResults summary, QNetworkReply::NetworkError error_type, QString error_str);
    void v3SearchImagesCreativeByImageGetSignalError(OAISearchByImageResourceResults summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use v3SearchImagesCreativeGetSignalError() instead")
    void v3SearchImagesCreativeGetSignalE(OAICreativeImageSearchResults summary, QNetworkReply::NetworkError error_type, QString error_str);
    void v3SearchImagesCreativeGetSignalError(OAICreativeImageSearchResults summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use v3SearchImagesEditorialGetSignalError() instead")
    void v3SearchImagesEditorialGetSignalE(OAIEditorialImageSearchResults summary, QNetworkReply::NetworkError error_type, QString error_str);
    void v3SearchImagesEditorialGetSignalError(OAIEditorialImageSearchResults summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use v3SearchImagesGetSignalError() instead")
    void v3SearchImagesGetSignalE(OAIImageSearchItemSearchResults summary, QNetworkReply::NetworkError error_type, QString error_str);
    void v3SearchImagesGetSignalError(OAIImageSearchItemSearchResults summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use v3SearchVideosCreativeByImageGetSignalError() instead")
    void v3SearchVideosCreativeByImageGetSignalE(OAICreativeVideoSearchResults summary, QNetworkReply::NetworkError error_type, QString error_str);
    void v3SearchVideosCreativeByImageGetSignalError(OAICreativeVideoSearchResults summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use v3SearchVideosCreativeGetSignalError() instead")
    void v3SearchVideosCreativeGetSignalE(OAICreativeVideoSearchResults summary, QNetworkReply::NetworkError error_type, QString error_str);
    void v3SearchVideosCreativeGetSignalError(OAICreativeVideoSearchResults summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use v3SearchVideosEditorialGetSignalError() instead")
    void v3SearchVideosEditorialGetSignalE(OAIEditorialVideoSearchResults summary, QNetworkReply::NetworkError error_type, QString error_str);
    void v3SearchVideosEditorialGetSignalError(OAIEditorialVideoSearchResults summary, QNetworkReply::NetworkError error_type, const QString &error_str);

    Q_DECL_DEPRECATED_X("Use v3SearchByImageUploadsFileNamePutSignalErrorFull() instead")
    void v3SearchByImageUploadsFileNamePutSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void v3SearchByImageUploadsFileNamePutSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use v3SearchEventsGetSignalErrorFull() instead")
    void v3SearchEventsGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void v3SearchEventsGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use v3SearchImagesCreativeByImageGetSignalErrorFull() instead")
    void v3SearchImagesCreativeByImageGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void v3SearchImagesCreativeByImageGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use v3SearchImagesCreativeGetSignalErrorFull() instead")
    void v3SearchImagesCreativeGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void v3SearchImagesCreativeGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use v3SearchImagesEditorialGetSignalErrorFull() instead")
    void v3SearchImagesEditorialGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void v3SearchImagesEditorialGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use v3SearchImagesGetSignalErrorFull() instead")
    void v3SearchImagesGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void v3SearchImagesGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use v3SearchVideosCreativeByImageGetSignalErrorFull() instead")
    void v3SearchVideosCreativeByImageGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void v3SearchVideosCreativeByImageGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use v3SearchVideosCreativeGetSignalErrorFull() instead")
    void v3SearchVideosCreativeGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void v3SearchVideosCreativeGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use v3SearchVideosEditorialGetSignalErrorFull() instead")
    void v3SearchVideosEditorialGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void v3SearchVideosEditorialGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);

    void abortRequestsSignal();
    void allPendingRequestsCompleted();

public Q_SLOTS:
    void tokenAvailable();
};

} // namespace OpenAPI
#endif
