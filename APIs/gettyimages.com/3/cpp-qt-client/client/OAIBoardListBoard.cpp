/**
 * Getty Images
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 3
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIBoardListBoard.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIBoardListBoard::OAIBoardListBoard(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIBoardListBoard::OAIBoardListBoard() {
    this->initializeModel();
}

OAIBoardListBoard::~OAIBoardListBoard() {}

void OAIBoardListBoard::initializeModel() {

    m_asset_count_isSet = false;
    m_asset_count_isValid = false;

    m_board_relationship_isSet = false;
    m_board_relationship_isValid = false;

    m_date_created_isSet = false;
    m_date_created_isValid = false;

    m_date_last_updated_isSet = false;
    m_date_last_updated_isValid = false;

    m_description_isSet = false;
    m_description_isValid = false;

    m_hero_asset_isSet = false;
    m_hero_asset_isValid = false;

    m_id_isSet = false;
    m_id_isValid = false;

    m_name_isSet = false;
    m_name_isValid = false;
}

void OAIBoardListBoard::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIBoardListBoard::fromJsonObject(QJsonObject json) {

    m_asset_count_isValid = ::OpenAPI::fromJsonValue(m_asset_count, json[QString("asset_count")]);
    m_asset_count_isSet = !json[QString("asset_count")].isNull() && m_asset_count_isValid;

    m_board_relationship_isValid = ::OpenAPI::fromJsonValue(m_board_relationship, json[QString("board_relationship")]);
    m_board_relationship_isSet = !json[QString("board_relationship")].isNull() && m_board_relationship_isValid;

    m_date_created_isValid = ::OpenAPI::fromJsonValue(m_date_created, json[QString("date_created")]);
    m_date_created_isSet = !json[QString("date_created")].isNull() && m_date_created_isValid;

    m_date_last_updated_isValid = ::OpenAPI::fromJsonValue(m_date_last_updated, json[QString("date_last_updated")]);
    m_date_last_updated_isSet = !json[QString("date_last_updated")].isNull() && m_date_last_updated_isValid;

    m_description_isValid = ::OpenAPI::fromJsonValue(m_description, json[QString("description")]);
    m_description_isSet = !json[QString("description")].isNull() && m_description_isValid;

    m_hero_asset_isValid = ::OpenAPI::fromJsonValue(m_hero_asset, json[QString("hero_asset")]);
    m_hero_asset_isSet = !json[QString("hero_asset")].isNull() && m_hero_asset_isValid;

    m_id_isValid = ::OpenAPI::fromJsonValue(m_id, json[QString("id")]);
    m_id_isSet = !json[QString("id")].isNull() && m_id_isValid;

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("name")]);
    m_name_isSet = !json[QString("name")].isNull() && m_name_isValid;
}

QString OAIBoardListBoard::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIBoardListBoard::asJsonObject() const {
    QJsonObject obj;
    if (m_asset_count_isSet) {
        obj.insert(QString("asset_count"), ::OpenAPI::toJsonValue(m_asset_count));
    }
    if (m_board_relationship_isSet) {
        obj.insert(QString("board_relationship"), ::OpenAPI::toJsonValue(m_board_relationship));
    }
    if (m_date_created_isSet) {
        obj.insert(QString("date_created"), ::OpenAPI::toJsonValue(m_date_created));
    }
    if (m_date_last_updated_isSet) {
        obj.insert(QString("date_last_updated"), ::OpenAPI::toJsonValue(m_date_last_updated));
    }
    if (m_description_isSet) {
        obj.insert(QString("description"), ::OpenAPI::toJsonValue(m_description));
    }
    if (m_hero_asset.isSet()) {
        obj.insert(QString("hero_asset"), ::OpenAPI::toJsonValue(m_hero_asset));
    }
    if (m_id_isSet) {
        obj.insert(QString("id"), ::OpenAPI::toJsonValue(m_id));
    }
    if (m_name_isSet) {
        obj.insert(QString("name"), ::OpenAPI::toJsonValue(m_name));
    }
    return obj;
}

qint32 OAIBoardListBoard::getAssetCount() const {
    return m_asset_count;
}
void OAIBoardListBoard::setAssetCount(const qint32 &asset_count) {
    m_asset_count = asset_count;
    m_asset_count_isSet = true;
}

bool OAIBoardListBoard::is_asset_count_Set() const{
    return m_asset_count_isSet;
}

bool OAIBoardListBoard::is_asset_count_Valid() const{
    return m_asset_count_isValid;
}

QString OAIBoardListBoard::getBoardRelationship() const {
    return m_board_relationship;
}
void OAIBoardListBoard::setBoardRelationship(const QString &board_relationship) {
    m_board_relationship = board_relationship;
    m_board_relationship_isSet = true;
}

bool OAIBoardListBoard::is_board_relationship_Set() const{
    return m_board_relationship_isSet;
}

bool OAIBoardListBoard::is_board_relationship_Valid() const{
    return m_board_relationship_isValid;
}

QDateTime OAIBoardListBoard::getDateCreated() const {
    return m_date_created;
}
void OAIBoardListBoard::setDateCreated(const QDateTime &date_created) {
    m_date_created = date_created;
    m_date_created_isSet = true;
}

bool OAIBoardListBoard::is_date_created_Set() const{
    return m_date_created_isSet;
}

bool OAIBoardListBoard::is_date_created_Valid() const{
    return m_date_created_isValid;
}

QDateTime OAIBoardListBoard::getDateLastUpdated() const {
    return m_date_last_updated;
}
void OAIBoardListBoard::setDateLastUpdated(const QDateTime &date_last_updated) {
    m_date_last_updated = date_last_updated;
    m_date_last_updated_isSet = true;
}

bool OAIBoardListBoard::is_date_last_updated_Set() const{
    return m_date_last_updated_isSet;
}

bool OAIBoardListBoard::is_date_last_updated_Valid() const{
    return m_date_last_updated_isValid;
}

QString OAIBoardListBoard::getDescription() const {
    return m_description;
}
void OAIBoardListBoard::setDescription(const QString &description) {
    m_description = description;
    m_description_isSet = true;
}

bool OAIBoardListBoard::is_description_Set() const{
    return m_description_isSet;
}

bool OAIBoardListBoard::is_description_Valid() const{
    return m_description_isValid;
}

OAIAsset OAIBoardListBoard::getHeroAsset() const {
    return m_hero_asset;
}
void OAIBoardListBoard::setHeroAsset(const OAIAsset &hero_asset) {
    m_hero_asset = hero_asset;
    m_hero_asset_isSet = true;
}

bool OAIBoardListBoard::is_hero_asset_Set() const{
    return m_hero_asset_isSet;
}

bool OAIBoardListBoard::is_hero_asset_Valid() const{
    return m_hero_asset_isValid;
}

QString OAIBoardListBoard::getId() const {
    return m_id;
}
void OAIBoardListBoard::setId(const QString &id) {
    m_id = id;
    m_id_isSet = true;
}

bool OAIBoardListBoard::is_id_Set() const{
    return m_id_isSet;
}

bool OAIBoardListBoard::is_id_Valid() const{
    return m_id_isValid;
}

QString OAIBoardListBoard::getName() const {
    return m_name;
}
void OAIBoardListBoard::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAIBoardListBoard::is_name_Set() const{
    return m_name_isSet;
}

bool OAIBoardListBoard::is_name_Valid() const{
    return m_name_isValid;
}

bool OAIBoardListBoard::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_asset_count_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_board_relationship_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_date_created_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_date_last_updated_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_description_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_hero_asset.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIBoardListBoard::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
