/**
 * Getty Images
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 3
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIAsset_usage.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIAsset_usage::OAIAsset_usage(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIAsset_usage::OAIAsset_usage() {
    this->initializeModel();
}

OAIAsset_usage::~OAIAsset_usage() {}

void OAIAsset_usage::initializeModel() {

    m_asset_id_isSet = false;
    m_asset_id_isValid = false;

    m_quantity_isSet = false;
    m_quantity_isValid = false;

    m_usage_date_isSet = false;
    m_usage_date_isValid = false;
}

void OAIAsset_usage::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIAsset_usage::fromJsonObject(QJsonObject json) {

    m_asset_id_isValid = ::OpenAPI::fromJsonValue(m_asset_id, json[QString("asset_id")]);
    m_asset_id_isSet = !json[QString("asset_id")].isNull() && m_asset_id_isValid;

    m_quantity_isValid = ::OpenAPI::fromJsonValue(m_quantity, json[QString("quantity")]);
    m_quantity_isSet = !json[QString("quantity")].isNull() && m_quantity_isValid;

    m_usage_date_isValid = ::OpenAPI::fromJsonValue(m_usage_date, json[QString("usage_date")]);
    m_usage_date_isSet = !json[QString("usage_date")].isNull() && m_usage_date_isValid;
}

QString OAIAsset_usage::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIAsset_usage::asJsonObject() const {
    QJsonObject obj;
    if (m_asset_id_isSet) {
        obj.insert(QString("asset_id"), ::OpenAPI::toJsonValue(m_asset_id));
    }
    if (m_quantity_isSet) {
        obj.insert(QString("quantity"), ::OpenAPI::toJsonValue(m_quantity));
    }
    if (m_usage_date_isSet) {
        obj.insert(QString("usage_date"), ::OpenAPI::toJsonValue(m_usage_date));
    }
    return obj;
}

QString OAIAsset_usage::getAssetId() const {
    return m_asset_id;
}
void OAIAsset_usage::setAssetId(const QString &asset_id) {
    m_asset_id = asset_id;
    m_asset_id_isSet = true;
}

bool OAIAsset_usage::is_asset_id_Set() const{
    return m_asset_id_isSet;
}

bool OAIAsset_usage::is_asset_id_Valid() const{
    return m_asset_id_isValid;
}

qint32 OAIAsset_usage::getQuantity() const {
    return m_quantity;
}
void OAIAsset_usage::setQuantity(const qint32 &quantity) {
    m_quantity = quantity;
    m_quantity_isSet = true;
}

bool OAIAsset_usage::is_quantity_Set() const{
    return m_quantity_isSet;
}

bool OAIAsset_usage::is_quantity_Valid() const{
    return m_quantity_isValid;
}

QDateTime OAIAsset_usage::getUsageDate() const {
    return m_usage_date;
}
void OAIAsset_usage::setUsageDate(const QDateTime &usage_date) {
    m_usage_date = usage_date;
    m_usage_date_isSet = true;
}

bool OAIAsset_usage::is_usage_date_Set() const{
    return m_usage_date_isSet;
}

bool OAIAsset_usage::is_usage_date_Valid() const{
    return m_usage_date_isValid;
}

bool OAIAsset_usage::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_asset_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_quantity_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_usage_date_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIAsset_usage::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
