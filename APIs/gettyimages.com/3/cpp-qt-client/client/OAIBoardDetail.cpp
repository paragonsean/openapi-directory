/**
 * Getty Images
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 3
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIBoardDetail.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIBoardDetail::OAIBoardDetail(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIBoardDetail::OAIBoardDetail() {
    this->initializeModel();
}

OAIBoardDetail::~OAIBoardDetail() {}

void OAIBoardDetail::initializeModel() {

    m_asset_count_isSet = false;
    m_asset_count_isValid = false;

    m_assets_isSet = false;
    m_assets_isValid = false;

    m_comment_count_isSet = false;
    m_comment_count_isValid = false;

    m_date_created_isSet = false;
    m_date_created_isValid = false;

    m_date_last_updated_isSet = false;
    m_date_last_updated_isValid = false;

    m_description_isSet = false;
    m_description_isValid = false;

    m_id_isSet = false;
    m_id_isValid = false;

    m_links_isSet = false;
    m_links_isValid = false;

    m_name_isSet = false;
    m_name_isValid = false;

    m_permissions_isSet = false;
    m_permissions_isValid = false;
}

void OAIBoardDetail::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIBoardDetail::fromJsonObject(QJsonObject json) {

    m_asset_count_isValid = ::OpenAPI::fromJsonValue(m_asset_count, json[QString("asset_count")]);
    m_asset_count_isSet = !json[QString("asset_count")].isNull() && m_asset_count_isValid;

    m_assets_isValid = ::OpenAPI::fromJsonValue(m_assets, json[QString("assets")]);
    m_assets_isSet = !json[QString("assets")].isNull() && m_assets_isValid;

    m_comment_count_isValid = ::OpenAPI::fromJsonValue(m_comment_count, json[QString("comment_count")]);
    m_comment_count_isSet = !json[QString("comment_count")].isNull() && m_comment_count_isValid;

    m_date_created_isValid = ::OpenAPI::fromJsonValue(m_date_created, json[QString("date_created")]);
    m_date_created_isSet = !json[QString("date_created")].isNull() && m_date_created_isValid;

    m_date_last_updated_isValid = ::OpenAPI::fromJsonValue(m_date_last_updated, json[QString("date_last_updated")]);
    m_date_last_updated_isSet = !json[QString("date_last_updated")].isNull() && m_date_last_updated_isValid;

    m_description_isValid = ::OpenAPI::fromJsonValue(m_description, json[QString("description")]);
    m_description_isSet = !json[QString("description")].isNull() && m_description_isValid;

    m_id_isValid = ::OpenAPI::fromJsonValue(m_id, json[QString("id")]);
    m_id_isSet = !json[QString("id")].isNull() && m_id_isValid;

    m_links_isValid = ::OpenAPI::fromJsonValue(m_links, json[QString("links")]);
    m_links_isSet = !json[QString("links")].isNull() && m_links_isValid;

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("name")]);
    m_name_isSet = !json[QString("name")].isNull() && m_name_isValid;

    m_permissions_isValid = ::OpenAPI::fromJsonValue(m_permissions, json[QString("permissions")]);
    m_permissions_isSet = !json[QString("permissions")].isNull() && m_permissions_isValid;
}

QString OAIBoardDetail::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIBoardDetail::asJsonObject() const {
    QJsonObject obj;
    if (m_asset_count_isSet) {
        obj.insert(QString("asset_count"), ::OpenAPI::toJsonValue(m_asset_count));
    }
    if (m_assets.size() > 0) {
        obj.insert(QString("assets"), ::OpenAPI::toJsonValue(m_assets));
    }
    if (m_comment_count_isSet) {
        obj.insert(QString("comment_count"), ::OpenAPI::toJsonValue(m_comment_count));
    }
    if (m_date_created_isSet) {
        obj.insert(QString("date_created"), ::OpenAPI::toJsonValue(m_date_created));
    }
    if (m_date_last_updated_isSet) {
        obj.insert(QString("date_last_updated"), ::OpenAPI::toJsonValue(m_date_last_updated));
    }
    if (m_description_isSet) {
        obj.insert(QString("description"), ::OpenAPI::toJsonValue(m_description));
    }
    if (m_id_isSet) {
        obj.insert(QString("id"), ::OpenAPI::toJsonValue(m_id));
    }
    if (m_links.isSet()) {
        obj.insert(QString("links"), ::OpenAPI::toJsonValue(m_links));
    }
    if (m_name_isSet) {
        obj.insert(QString("name"), ::OpenAPI::toJsonValue(m_name));
    }
    if (m_permissions.isSet()) {
        obj.insert(QString("permissions"), ::OpenAPI::toJsonValue(m_permissions));
    }
    return obj;
}

qint32 OAIBoardDetail::getAssetCount() const {
    return m_asset_count;
}
void OAIBoardDetail::setAssetCount(const qint32 &asset_count) {
    m_asset_count = asset_count;
    m_asset_count_isSet = true;
}

bool OAIBoardDetail::is_asset_count_Set() const{
    return m_asset_count_isSet;
}

bool OAIBoardDetail::is_asset_count_Valid() const{
    return m_asset_count_isValid;
}

QList<OAIAsset> OAIBoardDetail::getAssets() const {
    return m_assets;
}
void OAIBoardDetail::setAssets(const QList<OAIAsset> &assets) {
    m_assets = assets;
    m_assets_isSet = true;
}

bool OAIBoardDetail::is_assets_Set() const{
    return m_assets_isSet;
}

bool OAIBoardDetail::is_assets_Valid() const{
    return m_assets_isValid;
}

qint32 OAIBoardDetail::getCommentCount() const {
    return m_comment_count;
}
void OAIBoardDetail::setCommentCount(const qint32 &comment_count) {
    m_comment_count = comment_count;
    m_comment_count_isSet = true;
}

bool OAIBoardDetail::is_comment_count_Set() const{
    return m_comment_count_isSet;
}

bool OAIBoardDetail::is_comment_count_Valid() const{
    return m_comment_count_isValid;
}

QDateTime OAIBoardDetail::getDateCreated() const {
    return m_date_created;
}
void OAIBoardDetail::setDateCreated(const QDateTime &date_created) {
    m_date_created = date_created;
    m_date_created_isSet = true;
}

bool OAIBoardDetail::is_date_created_Set() const{
    return m_date_created_isSet;
}

bool OAIBoardDetail::is_date_created_Valid() const{
    return m_date_created_isValid;
}

QDateTime OAIBoardDetail::getDateLastUpdated() const {
    return m_date_last_updated;
}
void OAIBoardDetail::setDateLastUpdated(const QDateTime &date_last_updated) {
    m_date_last_updated = date_last_updated;
    m_date_last_updated_isSet = true;
}

bool OAIBoardDetail::is_date_last_updated_Set() const{
    return m_date_last_updated_isSet;
}

bool OAIBoardDetail::is_date_last_updated_Valid() const{
    return m_date_last_updated_isValid;
}

QString OAIBoardDetail::getDescription() const {
    return m_description;
}
void OAIBoardDetail::setDescription(const QString &description) {
    m_description = description;
    m_description_isSet = true;
}

bool OAIBoardDetail::is_description_Set() const{
    return m_description_isSet;
}

bool OAIBoardDetail::is_description_Valid() const{
    return m_description_isValid;
}

QString OAIBoardDetail::getId() const {
    return m_id;
}
void OAIBoardDetail::setId(const QString &id) {
    m_id = id;
    m_id_isSet = true;
}

bool OAIBoardDetail::is_id_Set() const{
    return m_id_isSet;
}

bool OAIBoardDetail::is_id_Valid() const{
    return m_id_isValid;
}

OAILinks OAIBoardDetail::getLinks() const {
    return m_links;
}
void OAIBoardDetail::setLinks(const OAILinks &links) {
    m_links = links;
    m_links_isSet = true;
}

bool OAIBoardDetail::is_links_Set() const{
    return m_links_isSet;
}

bool OAIBoardDetail::is_links_Valid() const{
    return m_links_isValid;
}

QString OAIBoardDetail::getName() const {
    return m_name;
}
void OAIBoardDetail::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAIBoardDetail::is_name_Set() const{
    return m_name_isSet;
}

bool OAIBoardDetail::is_name_Valid() const{
    return m_name_isValid;
}

OAIBoardPermissions OAIBoardDetail::getPermissions() const {
    return m_permissions;
}
void OAIBoardDetail::setPermissions(const OAIBoardPermissions &permissions) {
    m_permissions = permissions;
    m_permissions_isSet = true;
}

bool OAIBoardDetail::is_permissions_Set() const{
    return m_permissions_isSet;
}

bool OAIBoardDetail::is_permissions_Valid() const{
    return m_permissions_isValid;
}

bool OAIBoardDetail::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_asset_count_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_assets.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_comment_count_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_date_created_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_date_last_updated_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_description_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_links.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_permissions.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIBoardDetail::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
