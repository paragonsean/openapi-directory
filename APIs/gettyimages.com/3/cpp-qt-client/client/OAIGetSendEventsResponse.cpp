/**
 * Getty Images
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 3
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIGetSendEventsResponse.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIGetSendEventsResponse::OAIGetSendEventsResponse(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIGetSendEventsResponse::OAIGetSendEventsResponse() {
    this->initializeModel();
}

OAIGetSendEventsResponse::~OAIGetSendEventsResponse() {}

void OAIGetSendEventsResponse::initializeModel() {

    m_asset_send_events_isSet = false;
    m_asset_send_events_isValid = false;

    m_last_offset_isSet = false;
    m_last_offset_isValid = false;
}

void OAIGetSendEventsResponse::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIGetSendEventsResponse::fromJsonObject(QJsonObject json) {

    m_asset_send_events_isValid = ::OpenAPI::fromJsonValue(m_asset_send_events, json[QString("asset_send_events")]);
    m_asset_send_events_isSet = !json[QString("asset_send_events")].isNull() && m_asset_send_events_isValid;

    m_last_offset_isValid = ::OpenAPI::fromJsonValue(m_last_offset, json[QString("last_offset")]);
    m_last_offset_isSet = !json[QString("last_offset")].isNull() && m_last_offset_isValid;
}

QString OAIGetSendEventsResponse::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIGetSendEventsResponse::asJsonObject() const {
    QJsonObject obj;
    if (m_asset_send_events.size() > 0) {
        obj.insert(QString("asset_send_events"), ::OpenAPI::toJsonValue(m_asset_send_events));
    }
    if (m_last_offset_isSet) {
        obj.insert(QString("last_offset"), ::OpenAPI::toJsonValue(m_last_offset));
    }
    return obj;
}

QList<OAIAssetEvent> OAIGetSendEventsResponse::getAssetSendEvents() const {
    return m_asset_send_events;
}
void OAIGetSendEventsResponse::setAssetSendEvents(const QList<OAIAssetEvent> &asset_send_events) {
    m_asset_send_events = asset_send_events;
    m_asset_send_events_isSet = true;
}

bool OAIGetSendEventsResponse::is_asset_send_events_Set() const{
    return m_asset_send_events_isSet;
}

bool OAIGetSendEventsResponse::is_asset_send_events_Valid() const{
    return m_asset_send_events_isValid;
}

QDateTime OAIGetSendEventsResponse::getLastOffset() const {
    return m_last_offset;
}
void OAIGetSendEventsResponse::setLastOffset(const QDateTime &last_offset) {
    m_last_offset = last_offset;
    m_last_offset_isSet = true;
}

bool OAIGetSendEventsResponse::is_last_offset_Set() const{
    return m_last_offset_isSet;
}

bool OAIGetSendEventsResponse::is_last_offset_Valid() const{
    return m_last_offset_isValid;
}

bool OAIGetSendEventsResponse::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_asset_send_events.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_last_offset_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIGetSendEventsResponse::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
