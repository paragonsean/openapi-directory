/**
 * Getty Images
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 3
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAICollection.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAICollection::OAICollection(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAICollection::OAICollection() {
    this->initializeModel();
}

OAICollection::~OAICollection() {}

void OAICollection::initializeModel() {

    m_asset_family_isSet = false;
    m_asset_family_isValid = false;

    m_code_isSet = false;
    m_code_isValid = false;

    m_id_isSet = false;
    m_id_isValid = false;

    m_license_model_isSet = false;
    m_license_model_isValid = false;

    m_name_isSet = false;
    m_name_isValid = false;

    m_product_types_isSet = false;
    m_product_types_isValid = false;
}

void OAICollection::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAICollection::fromJsonObject(QJsonObject json) {

    m_asset_family_isValid = ::OpenAPI::fromJsonValue(m_asset_family, json[QString("asset_family")]);
    m_asset_family_isSet = !json[QString("asset_family")].isNull() && m_asset_family_isValid;

    m_code_isValid = ::OpenAPI::fromJsonValue(m_code, json[QString("code")]);
    m_code_isSet = !json[QString("code")].isNull() && m_code_isValid;

    m_id_isValid = ::OpenAPI::fromJsonValue(m_id, json[QString("id")]);
    m_id_isSet = !json[QString("id")].isNull() && m_id_isValid;

    m_license_model_isValid = ::OpenAPI::fromJsonValue(m_license_model, json[QString("license_model")]);
    m_license_model_isSet = !json[QString("license_model")].isNull() && m_license_model_isValid;

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("name")]);
    m_name_isSet = !json[QString("name")].isNull() && m_name_isValid;

    m_product_types_isValid = ::OpenAPI::fromJsonValue(m_product_types, json[QString("product_types")]);
    m_product_types_isSet = !json[QString("product_types")].isNull() && m_product_types_isValid;
}

QString OAICollection::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAICollection::asJsonObject() const {
    QJsonObject obj;
    if (m_asset_family_isSet) {
        obj.insert(QString("asset_family"), ::OpenAPI::toJsonValue(m_asset_family));
    }
    if (m_code_isSet) {
        obj.insert(QString("code"), ::OpenAPI::toJsonValue(m_code));
    }
    if (m_id_isSet) {
        obj.insert(QString("id"), ::OpenAPI::toJsonValue(m_id));
    }
    if (m_license_model_isSet) {
        obj.insert(QString("license_model"), ::OpenAPI::toJsonValue(m_license_model));
    }
    if (m_name_isSet) {
        obj.insert(QString("name"), ::OpenAPI::toJsonValue(m_name));
    }
    if (m_product_types.size() > 0) {
        obj.insert(QString("product_types"), ::OpenAPI::toJsonValue(m_product_types));
    }
    return obj;
}

QString OAICollection::getAssetFamily() const {
    return m_asset_family;
}
void OAICollection::setAssetFamily(const QString &asset_family) {
    m_asset_family = asset_family;
    m_asset_family_isSet = true;
}

bool OAICollection::is_asset_family_Set() const{
    return m_asset_family_isSet;
}

bool OAICollection::is_asset_family_Valid() const{
    return m_asset_family_isValid;
}

QString OAICollection::getCode() const {
    return m_code;
}
void OAICollection::setCode(const QString &code) {
    m_code = code;
    m_code_isSet = true;
}

bool OAICollection::is_code_Set() const{
    return m_code_isSet;
}

bool OAICollection::is_code_Valid() const{
    return m_code_isValid;
}

qint32 OAICollection::getId() const {
    return m_id;
}
void OAICollection::setId(const qint32 &id) {
    m_id = id;
    m_id_isSet = true;
}

bool OAICollection::is_id_Set() const{
    return m_id_isSet;
}

bool OAICollection::is_id_Valid() const{
    return m_id_isValid;
}

QString OAICollection::getLicenseModel() const {
    return m_license_model;
}
void OAICollection::setLicenseModel(const QString &license_model) {
    m_license_model = license_model;
    m_license_model_isSet = true;
}

bool OAICollection::is_license_model_Set() const{
    return m_license_model_isSet;
}

bool OAICollection::is_license_model_Valid() const{
    return m_license_model_isValid;
}

QString OAICollection::getName() const {
    return m_name;
}
void OAICollection::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAICollection::is_name_Set() const{
    return m_name_isSet;
}

bool OAICollection::is_name_Valid() const{
    return m_name_isValid;
}

QList<QString> OAICollection::getProductTypes() const {
    return m_product_types;
}
void OAICollection::setProductTypes(const QList<QString> &product_types) {
    m_product_types = product_types;
    m_product_types_isSet = true;
}

bool OAICollection::is_product_types_Set() const{
    return m_product_types_isSet;
}

bool OAICollection::is_product_types_Valid() const{
    return m_product_types_isValid;
}

bool OAICollection::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_asset_family_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_code_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_license_model_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_product_types.size() > 0) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAICollection::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
