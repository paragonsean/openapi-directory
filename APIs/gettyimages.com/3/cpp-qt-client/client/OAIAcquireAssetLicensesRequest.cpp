/**
 * Getty Images
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 3
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIAcquireAssetLicensesRequest.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIAcquireAssetLicensesRequest::OAIAcquireAssetLicensesRequest(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIAcquireAssetLicensesRequest::OAIAcquireAssetLicensesRequest() {
    this->initializeModel();
}

OAIAcquireAssetLicensesRequest::~OAIAcquireAssetLicensesRequest() {}

void OAIAcquireAssetLicensesRequest::initializeModel() {

    m_extended_licenses_isSet = false;
    m_extended_licenses_isValid = false;

    m_use_team_credits_isSet = false;
    m_use_team_credits_isValid = false;
}

void OAIAcquireAssetLicensesRequest::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIAcquireAssetLicensesRequest::fromJsonObject(QJsonObject json) {

    m_extended_licenses_isValid = ::OpenAPI::fromJsonValue(m_extended_licenses, json[QString("extended_licenses")]);
    m_extended_licenses_isSet = !json[QString("extended_licenses")].isNull() && m_extended_licenses_isValid;

    m_use_team_credits_isValid = ::OpenAPI::fromJsonValue(m_use_team_credits, json[QString("use_team_credits")]);
    m_use_team_credits_isSet = !json[QString("use_team_credits")].isNull() && m_use_team_credits_isValid;
}

QString OAIAcquireAssetLicensesRequest::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIAcquireAssetLicensesRequest::asJsonObject() const {
    QJsonObject obj;
    if (m_extended_licenses.size() > 0) {
        obj.insert(QString("extended_licenses"), ::OpenAPI::toJsonValue(m_extended_licenses));
    }
    if (m_use_team_credits_isSet) {
        obj.insert(QString("use_team_credits"), ::OpenAPI::toJsonValue(m_use_team_credits));
    }
    return obj;
}

QList<OAIExtendedLicenses> OAIAcquireAssetLicensesRequest::getExtendedLicenses() const {
    return m_extended_licenses;
}
void OAIAcquireAssetLicensesRequest::setExtendedLicenses(const QList<OAIExtendedLicenses> &extended_licenses) {
    m_extended_licenses = extended_licenses;
    m_extended_licenses_isSet = true;
}

bool OAIAcquireAssetLicensesRequest::is_extended_licenses_Set() const{
    return m_extended_licenses_isSet;
}

bool OAIAcquireAssetLicensesRequest::is_extended_licenses_Valid() const{
    return m_extended_licenses_isValid;
}

bool OAIAcquireAssetLicensesRequest::isUseTeamCredits() const {
    return m_use_team_credits;
}
void OAIAcquireAssetLicensesRequest::setUseTeamCredits(const bool &use_team_credits) {
    m_use_team_credits = use_team_credits;
    m_use_team_credits_isSet = true;
}

bool OAIAcquireAssetLicensesRequest::is_use_team_credits_Set() const{
    return m_use_team_credits_isSet;
}

bool OAIAcquireAssetLicensesRequest::is_use_team_credits_Valid() const{
    return m_use_team_credits_isValid;
}

bool OAIAcquireAssetLicensesRequest::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_extended_licenses.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_use_team_credits_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIAcquireAssetLicensesRequest::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_extended_licenses_isValid && true;
}

} // namespace OpenAPI
