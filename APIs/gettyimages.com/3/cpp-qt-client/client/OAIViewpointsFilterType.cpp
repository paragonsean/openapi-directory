/**
 * Getty Images
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 3
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIViewpointsFilterType.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIViewpointsFilterType::OAIViewpointsFilterType(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIViewpointsFilterType::OAIViewpointsFilterType() {
    this->initializeModel();
}

OAIViewpointsFilterType::~OAIViewpointsFilterType() {}

void OAIViewpointsFilterType::initializeModel() {

    m_value_isSet = false;
    m_value_isValid = false;
    m_value = eOAIViewpointsFilterType::INVALID_VALUE_OPENAPI_GENERATED;
}

void OAIViewpointsFilterType::fromJson(QString jsonString) {
    
    if ( jsonString.compare("lockdown", Qt::CaseInsensitive) == 0) {
        m_value = eOAIViewpointsFilterType::LOCKDOWN;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("panning", Qt::CaseInsensitive) == 0) {
        m_value = eOAIViewpointsFilterType::PANNING;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("tracking_shot", Qt::CaseInsensitive) == 0) {
        m_value = eOAIViewpointsFilterType::TRACKING_SHOT;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("aerial_view", Qt::CaseInsensitive) == 0) {
        m_value = eOAIViewpointsFilterType::AERIAL_VIEW;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("high_angle_view", Qt::CaseInsensitive) == 0) {
        m_value = eOAIViewpointsFilterType::HIGH_ANGLE_VIEW;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("low_angle_view", Qt::CaseInsensitive) == 0) {
        m_value = eOAIViewpointsFilterType::LOW_ANGLE_VIEW;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("tilt", Qt::CaseInsensitive) == 0) {
        m_value = eOAIViewpointsFilterType::TILT;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("point_of_view", Qt::CaseInsensitive) == 0) {
        m_value = eOAIViewpointsFilterType::POINT_OF_VIEW;
        m_value_isSet = m_value_isValid = true;
    }
}

void OAIViewpointsFilterType::fromJsonValue(QJsonValue json) {
fromJson(json.toString());
}

QString OAIViewpointsFilterType::asJson() const {
    
    QString val;
    switch (m_value){
        case eOAIViewpointsFilterType::LOCKDOWN:
            val = "lockdown";
            break;
        case eOAIViewpointsFilterType::PANNING:
            val = "panning";
            break;
        case eOAIViewpointsFilterType::TRACKING_SHOT:
            val = "tracking_shot";
            break;
        case eOAIViewpointsFilterType::AERIAL_VIEW:
            val = "aerial_view";
            break;
        case eOAIViewpointsFilterType::HIGH_ANGLE_VIEW:
            val = "high_angle_view";
            break;
        case eOAIViewpointsFilterType::LOW_ANGLE_VIEW:
            val = "low_angle_view";
            break;
        case eOAIViewpointsFilterType::TILT:
            val = "tilt";
            break;
        case eOAIViewpointsFilterType::POINT_OF_VIEW:
            val = "point_of_view";
            break;
        default:
            break;
    }
    return val;
}

QJsonValue OAIViewpointsFilterType::asJsonValue() const {
    
    return QJsonValue(asJson());
}


OAIViewpointsFilterType::eOAIViewpointsFilterType OAIViewpointsFilterType::getValue() const {
    return m_value;
}

void OAIViewpointsFilterType::setValue(const OAIViewpointsFilterType::eOAIViewpointsFilterType& value){
    m_value = value;
    m_value_isSet = true;
}
bool OAIViewpointsFilterType::isSet() const {
    
    return m_value_isSet;
}

bool OAIViewpointsFilterType::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_value_isValid;
}

} // namespace OpenAPI
