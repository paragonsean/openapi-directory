/**
 * Getty Images
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 3
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAICompositionsFilterType.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAICompositionsFilterType::OAICompositionsFilterType(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAICompositionsFilterType::OAICompositionsFilterType() {
    this->initializeModel();
}

OAICompositionsFilterType::~OAICompositionsFilterType() {}

void OAICompositionsFilterType::initializeModel() {

    m_value_isSet = false;
    m_value_isValid = false;
    m_value = eOAICompositionsFilterType::INVALID_VALUE_OPENAPI_GENERATED;
}

void OAICompositionsFilterType::fromJson(QString jsonString) {
    
    if ( jsonString.compare("abstract", Qt::CaseInsensitive) == 0) {
        m_value = eOAICompositionsFilterType::ABSTRACT;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("candid", Qt::CaseInsensitive) == 0) {
        m_value = eOAICompositionsFilterType::CANDID;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("close_up", Qt::CaseInsensitive) == 0) {
        m_value = eOAICompositionsFilterType::CLOSE_UP;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("copy_space", Qt::CaseInsensitive) == 0) {
        m_value = eOAICompositionsFilterType::COPY_SPACE;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("cut_out", Qt::CaseInsensitive) == 0) {
        m_value = eOAICompositionsFilterType::CUT_OUT;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("full_frame", Qt::CaseInsensitive) == 0) {
        m_value = eOAICompositionsFilterType::FULL_FRAME;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("full_length", Qt::CaseInsensitive) == 0) {
        m_value = eOAICompositionsFilterType::FULL_LENGTH;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("headshot", Qt::CaseInsensitive) == 0) {
        m_value = eOAICompositionsFilterType::HEADSHOT;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("looking_at_camera", Qt::CaseInsensitive) == 0) {
        m_value = eOAICompositionsFilterType::LOOKING_AT_CAMERA;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("macro", Qt::CaseInsensitive) == 0) {
        m_value = eOAICompositionsFilterType::MACRO;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("portrait", Qt::CaseInsensitive) == 0) {
        m_value = eOAICompositionsFilterType::PORTRAIT;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("sparse", Qt::CaseInsensitive) == 0) {
        m_value = eOAICompositionsFilterType::SPARSE;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("still_life", Qt::CaseInsensitive) == 0) {
        m_value = eOAICompositionsFilterType::STILL_LIFE;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("three_quarter_length", Qt::CaseInsensitive) == 0) {
        m_value = eOAICompositionsFilterType::THREE_QUARTER_LENGTH;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("waist_up", Qt::CaseInsensitive) == 0) {
        m_value = eOAICompositionsFilterType::WAIST_UP;
        m_value_isSet = m_value_isValid = true;
    }
}

void OAICompositionsFilterType::fromJsonValue(QJsonValue json) {
fromJson(json.toString());
}

QString OAICompositionsFilterType::asJson() const {
    
    QString val;
    switch (m_value){
        case eOAICompositionsFilterType::ABSTRACT:
            val = "abstract";
            break;
        case eOAICompositionsFilterType::CANDID:
            val = "candid";
            break;
        case eOAICompositionsFilterType::CLOSE_UP:
            val = "close_up";
            break;
        case eOAICompositionsFilterType::COPY_SPACE:
            val = "copy_space";
            break;
        case eOAICompositionsFilterType::CUT_OUT:
            val = "cut_out";
            break;
        case eOAICompositionsFilterType::FULL_FRAME:
            val = "full_frame";
            break;
        case eOAICompositionsFilterType::FULL_LENGTH:
            val = "full_length";
            break;
        case eOAICompositionsFilterType::HEADSHOT:
            val = "headshot";
            break;
        case eOAICompositionsFilterType::LOOKING_AT_CAMERA:
            val = "looking_at_camera";
            break;
        case eOAICompositionsFilterType::MACRO:
            val = "macro";
            break;
        case eOAICompositionsFilterType::PORTRAIT:
            val = "portrait";
            break;
        case eOAICompositionsFilterType::SPARSE:
            val = "sparse";
            break;
        case eOAICompositionsFilterType::STILL_LIFE:
            val = "still_life";
            break;
        case eOAICompositionsFilterType::THREE_QUARTER_LENGTH:
            val = "three_quarter_length";
            break;
        case eOAICompositionsFilterType::WAIST_UP:
            val = "waist_up";
            break;
        default:
            break;
    }
    return val;
}

QJsonValue OAICompositionsFilterType::asJsonValue() const {
    
    return QJsonValue(asJson());
}


OAICompositionsFilterType::eOAICompositionsFilterType OAICompositionsFilterType::getValue() const {
    return m_value;
}

void OAICompositionsFilterType::setValue(const OAICompositionsFilterType::eOAICompositionsFilterType& value){
    m_value = value;
    m_value_isSet = true;
}
bool OAICompositionsFilterType::isSet() const {
    
    return m_value_isSet;
}

bool OAICompositionsFilterType::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_value_isValid;
}

} // namespace OpenAPI
