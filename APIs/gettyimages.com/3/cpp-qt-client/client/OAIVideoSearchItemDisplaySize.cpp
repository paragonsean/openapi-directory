/**
 * Getty Images
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 3
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIVideoSearchItemDisplaySize.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIVideoSearchItemDisplaySize::OAIVideoSearchItemDisplaySize(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIVideoSearchItemDisplaySize::OAIVideoSearchItemDisplaySize() {
    this->initializeModel();
}

OAIVideoSearchItemDisplaySize::~OAIVideoSearchItemDisplaySize() {}

void OAIVideoSearchItemDisplaySize::initializeModel() {

    m_aspect_ratio_isSet = false;
    m_aspect_ratio_isValid = false;

    m_is_watermarked_isSet = false;
    m_is_watermarked_isValid = false;

    m_name_isSet = false;
    m_name_isValid = false;

    m_uri_isSet = false;
    m_uri_isValid = false;
}

void OAIVideoSearchItemDisplaySize::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIVideoSearchItemDisplaySize::fromJsonObject(QJsonObject json) {

    m_aspect_ratio_isValid = ::OpenAPI::fromJsonValue(m_aspect_ratio, json[QString("aspect_ratio")]);
    m_aspect_ratio_isSet = !json[QString("aspect_ratio")].isNull() && m_aspect_ratio_isValid;

    m_is_watermarked_isValid = ::OpenAPI::fromJsonValue(m_is_watermarked, json[QString("is_watermarked")]);
    m_is_watermarked_isSet = !json[QString("is_watermarked")].isNull() && m_is_watermarked_isValid;

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("name")]);
    m_name_isSet = !json[QString("name")].isNull() && m_name_isValid;

    m_uri_isValid = ::OpenAPI::fromJsonValue(m_uri, json[QString("uri")]);
    m_uri_isSet = !json[QString("uri")].isNull() && m_uri_isValid;
}

QString OAIVideoSearchItemDisplaySize::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIVideoSearchItemDisplaySize::asJsonObject() const {
    QJsonObject obj;
    if (m_aspect_ratio_isSet) {
        obj.insert(QString("aspect_ratio"), ::OpenAPI::toJsonValue(m_aspect_ratio));
    }
    if (m_is_watermarked_isSet) {
        obj.insert(QString("is_watermarked"), ::OpenAPI::toJsonValue(m_is_watermarked));
    }
    if (m_name_isSet) {
        obj.insert(QString("name"), ::OpenAPI::toJsonValue(m_name));
    }
    if (m_uri_isSet) {
        obj.insert(QString("uri"), ::OpenAPI::toJsonValue(m_uri));
    }
    return obj;
}

QString OAIVideoSearchItemDisplaySize::getAspectRatio() const {
    return m_aspect_ratio;
}
void OAIVideoSearchItemDisplaySize::setAspectRatio(const QString &aspect_ratio) {
    m_aspect_ratio = aspect_ratio;
    m_aspect_ratio_isSet = true;
}

bool OAIVideoSearchItemDisplaySize::is_aspect_ratio_Set() const{
    return m_aspect_ratio_isSet;
}

bool OAIVideoSearchItemDisplaySize::is_aspect_ratio_Valid() const{
    return m_aspect_ratio_isValid;
}

bool OAIVideoSearchItemDisplaySize::isIsWatermarked() const {
    return m_is_watermarked;
}
void OAIVideoSearchItemDisplaySize::setIsWatermarked(const bool &is_watermarked) {
    m_is_watermarked = is_watermarked;
    m_is_watermarked_isSet = true;
}

bool OAIVideoSearchItemDisplaySize::is_is_watermarked_Set() const{
    return m_is_watermarked_isSet;
}

bool OAIVideoSearchItemDisplaySize::is_is_watermarked_Valid() const{
    return m_is_watermarked_isValid;
}

QString OAIVideoSearchItemDisplaySize::getName() const {
    return m_name;
}
void OAIVideoSearchItemDisplaySize::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAIVideoSearchItemDisplaySize::is_name_Set() const{
    return m_name_isSet;
}

bool OAIVideoSearchItemDisplaySize::is_name_Valid() const{
    return m_name_isValid;
}

QString OAIVideoSearchItemDisplaySize::getUri() const {
    return m_uri;
}
void OAIVideoSearchItemDisplaySize::setUri(const QString &uri) {
    m_uri = uri;
    m_uri_isSet = true;
}

bool OAIVideoSearchItemDisplaySize::is_uri_Set() const{
    return m_uri_isSet;
}

bool OAIVideoSearchItemDisplaySize::is_uri_Valid() const{
    return m_uri_isValid;
}

bool OAIVideoSearchItemDisplaySize::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_aspect_ratio_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_is_watermarked_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_uri_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIVideoSearchItemDisplaySize::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
