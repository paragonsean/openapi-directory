/**
 * Getty Images
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 3
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#ifndef OAI_OAIImagesApi_H
#define OAI_OAIImagesApi_H

#include "OAIHelpers.h"
#include "OAIHttpRequest.h"
#include "OAIServerConfiguration.h"
#include "OAIOauth.h"

#include "OAIAssetDownloadHistoryResults.h"
#include "OAIImageDetailFieldValues.h"
#include "OAIImageSearchItemSearchResults.h"
#include "OAIImagesDetailResults.h"
#include "OAIImagesFieldValues.h"
#include <QString>

#include <QObject>
#include <QByteArray>
#include <QStringList>
#include <QList>
#include <QNetworkAccessManager>

namespace OpenAPI {

class OAIImagesApi : public QObject {
    Q_OBJECT

public:
    OAIImagesApi(const int timeOut = 0);
    ~OAIImagesApi();

    void initializeServerConfigs();
    int setDefaultServerValue(int serverIndex,const QString &operation, const QString &variable,const QString &val);
    void setServerIndex(const QString &operation, int serverIndex);
    void setApiKey(const QString &apiKeyName, const QString &apiKey);
    void setBearerToken(const QString &token);
    void setUsername(const QString &username);
    void setPassword(const QString &password);
    void setTimeOut(const int timeOut);
    void setWorkingDirectory(const QString &path);
    void setNetworkAccessManager(QNetworkAccessManager* manager);
    int addServerConfiguration(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables = QMap<QString, OAIServerVariable>());
    void setNewServerForAllOperations(const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void setNewServer(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void addHeaders(const QString &key, const QString &value);
    void enableRequestCompression();
    void enableResponseCompression();
    void abortRequests();
    QString getParamStylePrefix(const QString &style);
    QString getParamStyleSuffix(const QString &style);
    QString getParamStyleDelimiter(const QString &style, const QString &name, bool isExplode);

    /**
    * @param[in]  accept_language QString [optional]
    * @param[in]  ids QList<QString> [optional]
    * @param[in]  fields QList<OAIImageDetailFieldValues> [optional]
    */
    virtual void v3ImagesGet(const ::OpenAPI::OptionalParam<QString> &accept_language = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QList<QString>> &ids = ::OpenAPI::OptionalParam<QList<QString>>(), const ::OpenAPI::OptionalParam<QList<OAIImageDetailFieldValues>> &fields = ::OpenAPI::OptionalParam<QList<OAIImageDetailFieldValues>>());

    /**
    * @param[in]  id QString [required]
    * @param[in]  accept_language QString [optional]
    * @param[in]  company_downloads bool [optional]
    */
    virtual void v3ImagesIdDownloadhistoryGet(const QString &id, const ::OpenAPI::OptionalParam<QString> &accept_language = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &company_downloads = ::OpenAPI::OptionalParam<bool>());

    /**
    * @param[in]  id QString [required]
    * @param[in]  accept_language QString [optional]
    * @param[in]  fields QList<OAIImageDetailFieldValues> [optional]
    */
    virtual void v3ImagesIdGet(const QString &id, const ::OpenAPI::OptionalParam<QString> &accept_language = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QList<OAIImageDetailFieldValues>> &fields = ::OpenAPI::OptionalParam<QList<OAIImageDetailFieldValues>>());

    /**
    * @param[in]  id QString [required]
    * @param[in]  accept_language QString [optional]
    * @param[in]  fields QList<OAIImagesFieldValues> [optional]
    * @param[in]  page qint32 [optional]
    * @param[in]  page_size qint32 [optional]
    */
    virtual void v3ImagesIdSameSeriesGet(const QString &id, const ::OpenAPI::OptionalParam<QString> &accept_language = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QList<OAIImagesFieldValues>> &fields = ::OpenAPI::OptionalParam<QList<OAIImagesFieldValues>>(), const ::OpenAPI::OptionalParam<qint32> &page = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint32> &page_size = ::OpenAPI::OptionalParam<qint32>());

    /**
    * @param[in]  id QString [required]
    * @param[in]  accept_language QString [optional]
    * @param[in]  fields QList<OAIImagesFieldValues> [optional]
    * @param[in]  page qint32 [optional]
    * @param[in]  page_size qint32 [optional]
    */
    virtual void v3ImagesIdSimilarGet(const QString &id, const ::OpenAPI::OptionalParam<QString> &accept_language = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QList<OAIImagesFieldValues>> &fields = ::OpenAPI::OptionalParam<QList<OAIImagesFieldValues>>(), const ::OpenAPI::OptionalParam<qint32> &page = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint32> &page_size = ::OpenAPI::OptionalParam<qint32>());


private:
    QMap<QString,int> _serverIndices;
    QMap<QString,QList<OAIServerConfiguration>> _serverConfigs;
    QMap<QString, QString> _apiKeys;
    QString _bearerToken;
    QString _username;
    QString _password;
    int _timeOut;
    QString _workingDirectory;
    QNetworkAccessManager* _manager;
    QMap<QString, QString> _defaultHeaders;
    bool _isResponseCompressionEnabled;
    bool _isRequestCompressionEnabled;
    OAIHttpRequestInput _latestInput;
    OAIHttpRequestWorker *_latestWorker;
    QStringList _latestScope;
    OauthCode _authFlow;
    OauthImplicit _implicitFlow;
    OauthCredentials _credentialFlow;
    OauthPassword _passwordFlow;
    int _OauthMethod = 0;

    void v3ImagesGetCallback(OAIHttpRequestWorker *worker);
    void v3ImagesIdDownloadhistoryGetCallback(OAIHttpRequestWorker *worker);
    void v3ImagesIdGetCallback(OAIHttpRequestWorker *worker);
    void v3ImagesIdSameSeriesGetCallback(OAIHttpRequestWorker *worker);
    void v3ImagesIdSimilarGetCallback(OAIHttpRequestWorker *worker);

Q_SIGNALS:

    void v3ImagesGetSignal(OAIImagesDetailResults summary);
    void v3ImagesIdDownloadhistoryGetSignal(OAIAssetDownloadHistoryResults summary);
    void v3ImagesIdGetSignal(OAIImagesDetailResults summary);
    void v3ImagesIdSameSeriesGetSignal(OAIImageSearchItemSearchResults summary);
    void v3ImagesIdSimilarGetSignal(OAIImageSearchItemSearchResults summary);


    void v3ImagesGetSignalFull(OAIHttpRequestWorker *worker, OAIImagesDetailResults summary);
    void v3ImagesIdDownloadhistoryGetSignalFull(OAIHttpRequestWorker *worker, OAIAssetDownloadHistoryResults summary);
    void v3ImagesIdGetSignalFull(OAIHttpRequestWorker *worker, OAIImagesDetailResults summary);
    void v3ImagesIdSameSeriesGetSignalFull(OAIHttpRequestWorker *worker, OAIImageSearchItemSearchResults summary);
    void v3ImagesIdSimilarGetSignalFull(OAIHttpRequestWorker *worker, OAIImageSearchItemSearchResults summary);

    Q_DECL_DEPRECATED_X("Use v3ImagesGetSignalError() instead")
    void v3ImagesGetSignalE(OAIImagesDetailResults summary, QNetworkReply::NetworkError error_type, QString error_str);
    void v3ImagesGetSignalError(OAIImagesDetailResults summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use v3ImagesIdDownloadhistoryGetSignalError() instead")
    void v3ImagesIdDownloadhistoryGetSignalE(OAIAssetDownloadHistoryResults summary, QNetworkReply::NetworkError error_type, QString error_str);
    void v3ImagesIdDownloadhistoryGetSignalError(OAIAssetDownloadHistoryResults summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use v3ImagesIdGetSignalError() instead")
    void v3ImagesIdGetSignalE(OAIImagesDetailResults summary, QNetworkReply::NetworkError error_type, QString error_str);
    void v3ImagesIdGetSignalError(OAIImagesDetailResults summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use v3ImagesIdSameSeriesGetSignalError() instead")
    void v3ImagesIdSameSeriesGetSignalE(OAIImageSearchItemSearchResults summary, QNetworkReply::NetworkError error_type, QString error_str);
    void v3ImagesIdSameSeriesGetSignalError(OAIImageSearchItemSearchResults summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use v3ImagesIdSimilarGetSignalError() instead")
    void v3ImagesIdSimilarGetSignalE(OAIImageSearchItemSearchResults summary, QNetworkReply::NetworkError error_type, QString error_str);
    void v3ImagesIdSimilarGetSignalError(OAIImageSearchItemSearchResults summary, QNetworkReply::NetworkError error_type, const QString &error_str);

    Q_DECL_DEPRECATED_X("Use v3ImagesGetSignalErrorFull() instead")
    void v3ImagesGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void v3ImagesGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use v3ImagesIdDownloadhistoryGetSignalErrorFull() instead")
    void v3ImagesIdDownloadhistoryGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void v3ImagesIdDownloadhistoryGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use v3ImagesIdGetSignalErrorFull() instead")
    void v3ImagesIdGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void v3ImagesIdGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use v3ImagesIdSameSeriesGetSignalErrorFull() instead")
    void v3ImagesIdSameSeriesGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void v3ImagesIdSameSeriesGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use v3ImagesIdSimilarGetSignalErrorFull() instead")
    void v3ImagesIdSimilarGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void v3ImagesIdSimilarGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);

    void abortRequestsSignal();
    void allPendingRequestsCompleted();

public Q_SLOTS:
    void tokenAvailable();
};

} // namespace OpenAPI
#endif
