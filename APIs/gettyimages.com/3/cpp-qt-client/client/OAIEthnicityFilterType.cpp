/**
 * Getty Images
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 3
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIEthnicityFilterType.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIEthnicityFilterType::OAIEthnicityFilterType(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIEthnicityFilterType::OAIEthnicityFilterType() {
    this->initializeModel();
}

OAIEthnicityFilterType::~OAIEthnicityFilterType() {}

void OAIEthnicityFilterType::initializeModel() {

    m_value_isSet = false;
    m_value_isValid = false;
    m_value = eOAIEthnicityFilterType::INVALID_VALUE_OPENAPI_GENERATED;
}

void OAIEthnicityFilterType::fromJson(QString jsonString) {
    
    if ( jsonString.compare("black", Qt::CaseInsensitive) == 0) {
        m_value = eOAIEthnicityFilterType::BLACK;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("caucasian", Qt::CaseInsensitive) == 0) {
        m_value = eOAIEthnicityFilterType::CAUCASIAN;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("east_asian", Qt::CaseInsensitive) == 0) {
        m_value = eOAIEthnicityFilterType::EAST_ASIAN;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("hispanic_latino", Qt::CaseInsensitive) == 0) {
        m_value = eOAIEthnicityFilterType::HISPANIC_LATINO;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("japanese", Qt::CaseInsensitive) == 0) {
        m_value = eOAIEthnicityFilterType::JAPANESE;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("middle_eastern", Qt::CaseInsensitive) == 0) {
        m_value = eOAIEthnicityFilterType::MIDDLE_EASTERN;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("mixed_race_person", Qt::CaseInsensitive) == 0) {
        m_value = eOAIEthnicityFilterType::MIXED_RACE_PERSON;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("multiethnic_group", Qt::CaseInsensitive) == 0) {
        m_value = eOAIEthnicityFilterType::MULTIETHNIC_GROUP;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("native_american_first_nations", Qt::CaseInsensitive) == 0) {
        m_value = eOAIEthnicityFilterType::NATIVE_AMERICAN_FIRST_NATIONS;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("pacific_islander", Qt::CaseInsensitive) == 0) {
        m_value = eOAIEthnicityFilterType::PACIFIC_ISLANDER;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("south_asian", Qt::CaseInsensitive) == 0) {
        m_value = eOAIEthnicityFilterType::SOUTH_ASIAN;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("southeast_asian", Qt::CaseInsensitive) == 0) {
        m_value = eOAIEthnicityFilterType::SOUTHEAST_ASIAN;
        m_value_isSet = m_value_isValid = true;
    }
}

void OAIEthnicityFilterType::fromJsonValue(QJsonValue json) {
fromJson(json.toString());
}

QString OAIEthnicityFilterType::asJson() const {
    
    QString val;
    switch (m_value){
        case eOAIEthnicityFilterType::BLACK:
            val = "black";
            break;
        case eOAIEthnicityFilterType::CAUCASIAN:
            val = "caucasian";
            break;
        case eOAIEthnicityFilterType::EAST_ASIAN:
            val = "east_asian";
            break;
        case eOAIEthnicityFilterType::HISPANIC_LATINO:
            val = "hispanic_latino";
            break;
        case eOAIEthnicityFilterType::JAPANESE:
            val = "japanese";
            break;
        case eOAIEthnicityFilterType::MIDDLE_EASTERN:
            val = "middle_eastern";
            break;
        case eOAIEthnicityFilterType::MIXED_RACE_PERSON:
            val = "mixed_race_person";
            break;
        case eOAIEthnicityFilterType::MULTIETHNIC_GROUP:
            val = "multiethnic_group";
            break;
        case eOAIEthnicityFilterType::NATIVE_AMERICAN_FIRST_NATIONS:
            val = "native_american_first_nations";
            break;
        case eOAIEthnicityFilterType::PACIFIC_ISLANDER:
            val = "pacific_islander";
            break;
        case eOAIEthnicityFilterType::SOUTH_ASIAN:
            val = "south_asian";
            break;
        case eOAIEthnicityFilterType::SOUTHEAST_ASIAN:
            val = "southeast_asian";
            break;
        default:
            break;
    }
    return val;
}

QJsonValue OAIEthnicityFilterType::asJsonValue() const {
    
    return QJsonValue(asJson());
}


OAIEthnicityFilterType::eOAIEthnicityFilterType OAIEthnicityFilterType::getValue() const {
    return m_value;
}

void OAIEthnicityFilterType::setValue(const OAIEthnicityFilterType::eOAIEthnicityFilterType& value){
    m_value = value;
    m_value_isSet = true;
}
bool OAIEthnicityFilterType::isSet() const {
    
    return m_value_isSet;
}

bool OAIEthnicityFilterType::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_value_isValid;
}

} // namespace OpenAPI
