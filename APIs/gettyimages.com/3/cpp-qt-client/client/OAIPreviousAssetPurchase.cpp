/**
 * Getty Images
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 3
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIPreviousAssetPurchase.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIPreviousAssetPurchase::OAIPreviousAssetPurchase(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIPreviousAssetPurchase::OAIPreviousAssetPurchase() {
    this->initializeModel();
}

OAIPreviousAssetPurchase::~OAIPreviousAssetPurchase() {}

void OAIPreviousAssetPurchase::initializeModel() {

    m_asset_id_isSet = false;
    m_asset_id_isValid = false;

    m_asset_type_isSet = false;
    m_asset_type_isValid = false;

    m_date_purchased_isSet = false;
    m_date_purchased_isValid = false;

    m_download_uri_isSet = false;
    m_download_uri_isValid = false;

    m_file_size_in_bytes_isSet = false;
    m_file_size_in_bytes_isValid = false;

    m_license_model_isSet = false;
    m_license_model_isValid = false;

    m_order_id_isSet = false;
    m_order_id_isValid = false;

    m_purchased_by_isSet = false;
    m_purchased_by_isValid = false;

    m_size_name_isSet = false;
    m_size_name_isValid = false;

    m_thumb_uri_isSet = false;
    m_thumb_uri_isValid = false;
}

void OAIPreviousAssetPurchase::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIPreviousAssetPurchase::fromJsonObject(QJsonObject json) {

    m_asset_id_isValid = ::OpenAPI::fromJsonValue(m_asset_id, json[QString("asset_id")]);
    m_asset_id_isSet = !json[QString("asset_id")].isNull() && m_asset_id_isValid;

    m_asset_type_isValid = ::OpenAPI::fromJsonValue(m_asset_type, json[QString("asset_type")]);
    m_asset_type_isSet = !json[QString("asset_type")].isNull() && m_asset_type_isValid;

    m_date_purchased_isValid = ::OpenAPI::fromJsonValue(m_date_purchased, json[QString("date_purchased")]);
    m_date_purchased_isSet = !json[QString("date_purchased")].isNull() && m_date_purchased_isValid;

    m_download_uri_isValid = ::OpenAPI::fromJsonValue(m_download_uri, json[QString("download_uri")]);
    m_download_uri_isSet = !json[QString("download_uri")].isNull() && m_download_uri_isValid;

    m_file_size_in_bytes_isValid = ::OpenAPI::fromJsonValue(m_file_size_in_bytes, json[QString("file_size_in_bytes")]);
    m_file_size_in_bytes_isSet = !json[QString("file_size_in_bytes")].isNull() && m_file_size_in_bytes_isValid;

    m_license_model_isValid = ::OpenAPI::fromJsonValue(m_license_model, json[QString("license_model")]);
    m_license_model_isSet = !json[QString("license_model")].isNull() && m_license_model_isValid;

    m_order_id_isValid = ::OpenAPI::fromJsonValue(m_order_id, json[QString("order_id")]);
    m_order_id_isSet = !json[QString("order_id")].isNull() && m_order_id_isValid;

    m_purchased_by_isValid = ::OpenAPI::fromJsonValue(m_purchased_by, json[QString("purchased_by")]);
    m_purchased_by_isSet = !json[QString("purchased_by")].isNull() && m_purchased_by_isValid;

    m_size_name_isValid = ::OpenAPI::fromJsonValue(m_size_name, json[QString("size_name")]);
    m_size_name_isSet = !json[QString("size_name")].isNull() && m_size_name_isValid;

    m_thumb_uri_isValid = ::OpenAPI::fromJsonValue(m_thumb_uri, json[QString("thumb_uri")]);
    m_thumb_uri_isSet = !json[QString("thumb_uri")].isNull() && m_thumb_uri_isValid;
}

QString OAIPreviousAssetPurchase::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIPreviousAssetPurchase::asJsonObject() const {
    QJsonObject obj;
    if (m_asset_id_isSet) {
        obj.insert(QString("asset_id"), ::OpenAPI::toJsonValue(m_asset_id));
    }
    if (m_asset_type_isSet) {
        obj.insert(QString("asset_type"), ::OpenAPI::toJsonValue(m_asset_type));
    }
    if (m_date_purchased_isSet) {
        obj.insert(QString("date_purchased"), ::OpenAPI::toJsonValue(m_date_purchased));
    }
    if (m_download_uri_isSet) {
        obj.insert(QString("download_uri"), ::OpenAPI::toJsonValue(m_download_uri));
    }
    if (m_file_size_in_bytes_isSet) {
        obj.insert(QString("file_size_in_bytes"), ::OpenAPI::toJsonValue(m_file_size_in_bytes));
    }
    if (m_license_model_isSet) {
        obj.insert(QString("license_model"), ::OpenAPI::toJsonValue(m_license_model));
    }
    if (m_order_id_isSet) {
        obj.insert(QString("order_id"), ::OpenAPI::toJsonValue(m_order_id));
    }
    if (m_purchased_by_isSet) {
        obj.insert(QString("purchased_by"), ::OpenAPI::toJsonValue(m_purchased_by));
    }
    if (m_size_name_isSet) {
        obj.insert(QString("size_name"), ::OpenAPI::toJsonValue(m_size_name));
    }
    if (m_thumb_uri_isSet) {
        obj.insert(QString("thumb_uri"), ::OpenAPI::toJsonValue(m_thumb_uri));
    }
    return obj;
}

QString OAIPreviousAssetPurchase::getAssetId() const {
    return m_asset_id;
}
void OAIPreviousAssetPurchase::setAssetId(const QString &asset_id) {
    m_asset_id = asset_id;
    m_asset_id_isSet = true;
}

bool OAIPreviousAssetPurchase::is_asset_id_Set() const{
    return m_asset_id_isSet;
}

bool OAIPreviousAssetPurchase::is_asset_id_Valid() const{
    return m_asset_id_isValid;
}

QString OAIPreviousAssetPurchase::getAssetType() const {
    return m_asset_type;
}
void OAIPreviousAssetPurchase::setAssetType(const QString &asset_type) {
    m_asset_type = asset_type;
    m_asset_type_isSet = true;
}

bool OAIPreviousAssetPurchase::is_asset_type_Set() const{
    return m_asset_type_isSet;
}

bool OAIPreviousAssetPurchase::is_asset_type_Valid() const{
    return m_asset_type_isValid;
}

QDateTime OAIPreviousAssetPurchase::getDatePurchased() const {
    return m_date_purchased;
}
void OAIPreviousAssetPurchase::setDatePurchased(const QDateTime &date_purchased) {
    m_date_purchased = date_purchased;
    m_date_purchased_isSet = true;
}

bool OAIPreviousAssetPurchase::is_date_purchased_Set() const{
    return m_date_purchased_isSet;
}

bool OAIPreviousAssetPurchase::is_date_purchased_Valid() const{
    return m_date_purchased_isValid;
}

QString OAIPreviousAssetPurchase::getDownloadUri() const {
    return m_download_uri;
}
void OAIPreviousAssetPurchase::setDownloadUri(const QString &download_uri) {
    m_download_uri = download_uri;
    m_download_uri_isSet = true;
}

bool OAIPreviousAssetPurchase::is_download_uri_Set() const{
    return m_download_uri_isSet;
}

bool OAIPreviousAssetPurchase::is_download_uri_Valid() const{
    return m_download_uri_isValid;
}

QString OAIPreviousAssetPurchase::getFileSizeInBytes() const {
    return m_file_size_in_bytes;
}
void OAIPreviousAssetPurchase::setFileSizeInBytes(const QString &file_size_in_bytes) {
    m_file_size_in_bytes = file_size_in_bytes;
    m_file_size_in_bytes_isSet = true;
}

bool OAIPreviousAssetPurchase::is_file_size_in_bytes_Set() const{
    return m_file_size_in_bytes_isSet;
}

bool OAIPreviousAssetPurchase::is_file_size_in_bytes_Valid() const{
    return m_file_size_in_bytes_isValid;
}

QString OAIPreviousAssetPurchase::getLicenseModel() const {
    return m_license_model;
}
void OAIPreviousAssetPurchase::setLicenseModel(const QString &license_model) {
    m_license_model = license_model;
    m_license_model_isSet = true;
}

bool OAIPreviousAssetPurchase::is_license_model_Set() const{
    return m_license_model_isSet;
}

bool OAIPreviousAssetPurchase::is_license_model_Valid() const{
    return m_license_model_isValid;
}

QString OAIPreviousAssetPurchase::getOrderId() const {
    return m_order_id;
}
void OAIPreviousAssetPurchase::setOrderId(const QString &order_id) {
    m_order_id = order_id;
    m_order_id_isSet = true;
}

bool OAIPreviousAssetPurchase::is_order_id_Set() const{
    return m_order_id_isSet;
}

bool OAIPreviousAssetPurchase::is_order_id_Valid() const{
    return m_order_id_isValid;
}

QString OAIPreviousAssetPurchase::getPurchasedBy() const {
    return m_purchased_by;
}
void OAIPreviousAssetPurchase::setPurchasedBy(const QString &purchased_by) {
    m_purchased_by = purchased_by;
    m_purchased_by_isSet = true;
}

bool OAIPreviousAssetPurchase::is_purchased_by_Set() const{
    return m_purchased_by_isSet;
}

bool OAIPreviousAssetPurchase::is_purchased_by_Valid() const{
    return m_purchased_by_isValid;
}

QString OAIPreviousAssetPurchase::getSizeName() const {
    return m_size_name;
}
void OAIPreviousAssetPurchase::setSizeName(const QString &size_name) {
    m_size_name = size_name;
    m_size_name_isSet = true;
}

bool OAIPreviousAssetPurchase::is_size_name_Set() const{
    return m_size_name_isSet;
}

bool OAIPreviousAssetPurchase::is_size_name_Valid() const{
    return m_size_name_isValid;
}

QString OAIPreviousAssetPurchase::getThumbUri() const {
    return m_thumb_uri;
}
void OAIPreviousAssetPurchase::setThumbUri(const QString &thumb_uri) {
    m_thumb_uri = thumb_uri;
    m_thumb_uri_isSet = true;
}

bool OAIPreviousAssetPurchase::is_thumb_uri_Set() const{
    return m_thumb_uri_isSet;
}

bool OAIPreviousAssetPurchase::is_thumb_uri_Valid() const{
    return m_thumb_uri_isValid;
}

bool OAIPreviousAssetPurchase::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_asset_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_asset_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_date_purchased_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_download_uri_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_file_size_in_bytes_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_license_model_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_order_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_purchased_by_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_size_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_thumb_uri_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIPreviousAssetPurchase::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
