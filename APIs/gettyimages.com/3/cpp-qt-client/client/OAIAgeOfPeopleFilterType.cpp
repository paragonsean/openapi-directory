/**
 * Getty Images
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 3
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIAgeOfPeopleFilterType.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIAgeOfPeopleFilterType::OAIAgeOfPeopleFilterType(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIAgeOfPeopleFilterType::OAIAgeOfPeopleFilterType() {
    this->initializeModel();
}

OAIAgeOfPeopleFilterType::~OAIAgeOfPeopleFilterType() {}

void OAIAgeOfPeopleFilterType::initializeModel() {

    m_value_isSet = false;
    m_value_isValid = false;
    m_value = eOAIAgeOfPeopleFilterType::INVALID_VALUE_OPENAPI_GENERATED;
}

void OAIAgeOfPeopleFilterType::fromJson(QString jsonString) {
    
    if ( jsonString.compare("newborn", Qt::CaseInsensitive) == 0) {
        m_value = eOAIAgeOfPeopleFilterType::NEWBORN;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("baby", Qt::CaseInsensitive) == 0) {
        m_value = eOAIAgeOfPeopleFilterType::BABY;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("child", Qt::CaseInsensitive) == 0) {
        m_value = eOAIAgeOfPeopleFilterType::CHILD;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("teenager", Qt::CaseInsensitive) == 0) {
        m_value = eOAIAgeOfPeopleFilterType::TEENAGER;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("young_adult", Qt::CaseInsensitive) == 0) {
        m_value = eOAIAgeOfPeopleFilterType::YOUNG_ADULT;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("adult", Qt::CaseInsensitive) == 0) {
        m_value = eOAIAgeOfPeopleFilterType::ADULT;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("adults_only", Qt::CaseInsensitive) == 0) {
        m_value = eOAIAgeOfPeopleFilterType::ADULTS_ONLY;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("mature_adult", Qt::CaseInsensitive) == 0) {
        m_value = eOAIAgeOfPeopleFilterType::MATURE_ADULT;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("senior_adult", Qt::CaseInsensitive) == 0) {
        m_value = eOAIAgeOfPeopleFilterType::SENIOR_ADULT;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("0-1_months", Qt::CaseInsensitive) == 0) {
        m_value = eOAIAgeOfPeopleFilterType::_0_1_MONTHS;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("2-5_months", Qt::CaseInsensitive) == 0) {
        m_value = eOAIAgeOfPeopleFilterType::_2_5_MONTHS;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("6-11_months", Qt::CaseInsensitive) == 0) {
        m_value = eOAIAgeOfPeopleFilterType::_6_11_MONTHS;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("12-17_months", Qt::CaseInsensitive) == 0) {
        m_value = eOAIAgeOfPeopleFilterType::_12_17_MONTHS;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("18-23_months", Qt::CaseInsensitive) == 0) {
        m_value = eOAIAgeOfPeopleFilterType::_18_23_MONTHS;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("2-3_years", Qt::CaseInsensitive) == 0) {
        m_value = eOAIAgeOfPeopleFilterType::_2_3_YEARS;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("4-5_years", Qt::CaseInsensitive) == 0) {
        m_value = eOAIAgeOfPeopleFilterType::_4_5_YEARS;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("6-7_years", Qt::CaseInsensitive) == 0) {
        m_value = eOAIAgeOfPeopleFilterType::_6_7_YEARS;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("8-9_years", Qt::CaseInsensitive) == 0) {
        m_value = eOAIAgeOfPeopleFilterType::_8_9_YEARS;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("10-11_years", Qt::CaseInsensitive) == 0) {
        m_value = eOAIAgeOfPeopleFilterType::_10_11_YEARS;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("12-13_years", Qt::CaseInsensitive) == 0) {
        m_value = eOAIAgeOfPeopleFilterType::_12_13_YEARS;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("14-15_years", Qt::CaseInsensitive) == 0) {
        m_value = eOAIAgeOfPeopleFilterType::_14_15_YEARS;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("16-17_years", Qt::CaseInsensitive) == 0) {
        m_value = eOAIAgeOfPeopleFilterType::_16_17_YEARS;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("18-19_years", Qt::CaseInsensitive) == 0) {
        m_value = eOAIAgeOfPeopleFilterType::_18_19_YEARS;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("20-24_years", Qt::CaseInsensitive) == 0) {
        m_value = eOAIAgeOfPeopleFilterType::_20_24_YEARS;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("20-29_years", Qt::CaseInsensitive) == 0) {
        m_value = eOAIAgeOfPeopleFilterType::_20_29_YEARS;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("25-29_years", Qt::CaseInsensitive) == 0) {
        m_value = eOAIAgeOfPeopleFilterType::_25_29_YEARS;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("30-34_years", Qt::CaseInsensitive) == 0) {
        m_value = eOAIAgeOfPeopleFilterType::_30_34_YEARS;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("30-39_years", Qt::CaseInsensitive) == 0) {
        m_value = eOAIAgeOfPeopleFilterType::_30_39_YEARS;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("35-39_years", Qt::CaseInsensitive) == 0) {
        m_value = eOAIAgeOfPeopleFilterType::_35_39_YEARS;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("40-44_years", Qt::CaseInsensitive) == 0) {
        m_value = eOAIAgeOfPeopleFilterType::_40_44_YEARS;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("40-49_years", Qt::CaseInsensitive) == 0) {
        m_value = eOAIAgeOfPeopleFilterType::_40_49_YEARS;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("45-49_years", Qt::CaseInsensitive) == 0) {
        m_value = eOAIAgeOfPeopleFilterType::_45_49_YEARS;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("50-54_years", Qt::CaseInsensitive) == 0) {
        m_value = eOAIAgeOfPeopleFilterType::_50_54_YEARS;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("50-59_years", Qt::CaseInsensitive) == 0) {
        m_value = eOAIAgeOfPeopleFilterType::_50_59_YEARS;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("55-59_years", Qt::CaseInsensitive) == 0) {
        m_value = eOAIAgeOfPeopleFilterType::_55_59_YEARS;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("60-64_years", Qt::CaseInsensitive) == 0) {
        m_value = eOAIAgeOfPeopleFilterType::_60_64_YEARS;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("60-69_years", Qt::CaseInsensitive) == 0) {
        m_value = eOAIAgeOfPeopleFilterType::_60_69_YEARS;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("65-69_years", Qt::CaseInsensitive) == 0) {
        m_value = eOAIAgeOfPeopleFilterType::_65_69_YEARS;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("70-79_years", Qt::CaseInsensitive) == 0) {
        m_value = eOAIAgeOfPeopleFilterType::_70_79_YEARS;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("80-89_years", Qt::CaseInsensitive) == 0) {
        m_value = eOAIAgeOfPeopleFilterType::_80_89_YEARS;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("90_plus_years", Qt::CaseInsensitive) == 0) {
        m_value = eOAIAgeOfPeopleFilterType::_90_PLUS_YEARS;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("100_over", Qt::CaseInsensitive) == 0) {
        m_value = eOAIAgeOfPeopleFilterType::_100_OVER;
        m_value_isSet = m_value_isValid = true;
    }
}

void OAIAgeOfPeopleFilterType::fromJsonValue(QJsonValue json) {
fromJson(json.toString());
}

QString OAIAgeOfPeopleFilterType::asJson() const {
    
    QString val;
    switch (m_value){
        case eOAIAgeOfPeopleFilterType::NEWBORN:
            val = "newborn";
            break;
        case eOAIAgeOfPeopleFilterType::BABY:
            val = "baby";
            break;
        case eOAIAgeOfPeopleFilterType::CHILD:
            val = "child";
            break;
        case eOAIAgeOfPeopleFilterType::TEENAGER:
            val = "teenager";
            break;
        case eOAIAgeOfPeopleFilterType::YOUNG_ADULT:
            val = "young_adult";
            break;
        case eOAIAgeOfPeopleFilterType::ADULT:
            val = "adult";
            break;
        case eOAIAgeOfPeopleFilterType::ADULTS_ONLY:
            val = "adults_only";
            break;
        case eOAIAgeOfPeopleFilterType::MATURE_ADULT:
            val = "mature_adult";
            break;
        case eOAIAgeOfPeopleFilterType::SENIOR_ADULT:
            val = "senior_adult";
            break;
        case eOAIAgeOfPeopleFilterType::_0_1_MONTHS:
            val = "0-1_months";
            break;
        case eOAIAgeOfPeopleFilterType::_2_5_MONTHS:
            val = "2-5_months";
            break;
        case eOAIAgeOfPeopleFilterType::_6_11_MONTHS:
            val = "6-11_months";
            break;
        case eOAIAgeOfPeopleFilterType::_12_17_MONTHS:
            val = "12-17_months";
            break;
        case eOAIAgeOfPeopleFilterType::_18_23_MONTHS:
            val = "18-23_months";
            break;
        case eOAIAgeOfPeopleFilterType::_2_3_YEARS:
            val = "2-3_years";
            break;
        case eOAIAgeOfPeopleFilterType::_4_5_YEARS:
            val = "4-5_years";
            break;
        case eOAIAgeOfPeopleFilterType::_6_7_YEARS:
            val = "6-7_years";
            break;
        case eOAIAgeOfPeopleFilterType::_8_9_YEARS:
            val = "8-9_years";
            break;
        case eOAIAgeOfPeopleFilterType::_10_11_YEARS:
            val = "10-11_years";
            break;
        case eOAIAgeOfPeopleFilterType::_12_13_YEARS:
            val = "12-13_years";
            break;
        case eOAIAgeOfPeopleFilterType::_14_15_YEARS:
            val = "14-15_years";
            break;
        case eOAIAgeOfPeopleFilterType::_16_17_YEARS:
            val = "16-17_years";
            break;
        case eOAIAgeOfPeopleFilterType::_18_19_YEARS:
            val = "18-19_years";
            break;
        case eOAIAgeOfPeopleFilterType::_20_24_YEARS:
            val = "20-24_years";
            break;
        case eOAIAgeOfPeopleFilterType::_20_29_YEARS:
            val = "20-29_years";
            break;
        case eOAIAgeOfPeopleFilterType::_25_29_YEARS:
            val = "25-29_years";
            break;
        case eOAIAgeOfPeopleFilterType::_30_34_YEARS:
            val = "30-34_years";
            break;
        case eOAIAgeOfPeopleFilterType::_30_39_YEARS:
            val = "30-39_years";
            break;
        case eOAIAgeOfPeopleFilterType::_35_39_YEARS:
            val = "35-39_years";
            break;
        case eOAIAgeOfPeopleFilterType::_40_44_YEARS:
            val = "40-44_years";
            break;
        case eOAIAgeOfPeopleFilterType::_40_49_YEARS:
            val = "40-49_years";
            break;
        case eOAIAgeOfPeopleFilterType::_45_49_YEARS:
            val = "45-49_years";
            break;
        case eOAIAgeOfPeopleFilterType::_50_54_YEARS:
            val = "50-54_years";
            break;
        case eOAIAgeOfPeopleFilterType::_50_59_YEARS:
            val = "50-59_years";
            break;
        case eOAIAgeOfPeopleFilterType::_55_59_YEARS:
            val = "55-59_years";
            break;
        case eOAIAgeOfPeopleFilterType::_60_64_YEARS:
            val = "60-64_years";
            break;
        case eOAIAgeOfPeopleFilterType::_60_69_YEARS:
            val = "60-69_years";
            break;
        case eOAIAgeOfPeopleFilterType::_65_69_YEARS:
            val = "65-69_years";
            break;
        case eOAIAgeOfPeopleFilterType::_70_79_YEARS:
            val = "70-79_years";
            break;
        case eOAIAgeOfPeopleFilterType::_80_89_YEARS:
            val = "80-89_years";
            break;
        case eOAIAgeOfPeopleFilterType::_90_PLUS_YEARS:
            val = "90_plus_years";
            break;
        case eOAIAgeOfPeopleFilterType::_100_OVER:
            val = "100_over";
            break;
        default:
            break;
    }
    return val;
}

QJsonValue OAIAgeOfPeopleFilterType::asJsonValue() const {
    
    return QJsonValue(asJson());
}


OAIAgeOfPeopleFilterType::eOAIAgeOfPeopleFilterType OAIAgeOfPeopleFilterType::getValue() const {
    return m_value;
}

void OAIAgeOfPeopleFilterType::setValue(const OAIAgeOfPeopleFilterType::eOAIAgeOfPeopleFilterType& value){
    m_value = value;
    m_value_isSet = true;
}
bool OAIAgeOfPeopleFilterType::isSet() const {
    
    return m_value_isSet;
}

bool OAIAgeOfPeopleFilterType::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_value_isValid;
}

} // namespace OpenAPI
