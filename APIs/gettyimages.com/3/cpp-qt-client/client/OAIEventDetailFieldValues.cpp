/**
 * Getty Images
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 3
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIEventDetailFieldValues.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIEventDetailFieldValues::OAIEventDetailFieldValues(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIEventDetailFieldValues::OAIEventDetailFieldValues() {
    this->initializeModel();
}

OAIEventDetailFieldValues::~OAIEventDetailFieldValues() {}

void OAIEventDetailFieldValues::initializeModel() {

    m_value_isSet = false;
    m_value_isValid = false;
    m_value = eOAIEventDetailFieldValues::INVALID_VALUE_OPENAPI_GENERATED;
}

void OAIEventDetailFieldValues::fromJson(QString jsonString) {
    
    if ( jsonString.compare("id", Qt::CaseInsensitive) == 0) {
        m_value = eOAIEventDetailFieldValues::ID;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("child_event_count", Qt::CaseInsensitive) == 0) {
        m_value = eOAIEventDetailFieldValues::CHILD_EVENT_COUNT;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("editorial_segments", Qt::CaseInsensitive) == 0) {
        m_value = eOAIEventDetailFieldValues::EDITORIAL_SEGMENTS;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("hero_image", Qt::CaseInsensitive) == 0) {
        m_value = eOAIEventDetailFieldValues::HERO_IMAGE;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("image_count", Qt::CaseInsensitive) == 0) {
        m_value = eOAIEventDetailFieldValues::IMAGE_COUNT;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("location", Qt::CaseInsensitive) == 0) {
        m_value = eOAIEventDetailFieldValues::LOCATION;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("name", Qt::CaseInsensitive) == 0) {
        m_value = eOAIEventDetailFieldValues::NAME;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("start_date", Qt::CaseInsensitive) == 0) {
        m_value = eOAIEventDetailFieldValues::START_DATE;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("type", Qt::CaseInsensitive) == 0) {
        m_value = eOAIEventDetailFieldValues::TYPE;
        m_value_isSet = m_value_isValid = true;
    }
}

void OAIEventDetailFieldValues::fromJsonValue(QJsonValue json) {
fromJson(json.toString());
}

QString OAIEventDetailFieldValues::asJson() const {
    
    QString val;
    switch (m_value){
        case eOAIEventDetailFieldValues::ID:
            val = "id";
            break;
        case eOAIEventDetailFieldValues::CHILD_EVENT_COUNT:
            val = "child_event_count";
            break;
        case eOAIEventDetailFieldValues::EDITORIAL_SEGMENTS:
            val = "editorial_segments";
            break;
        case eOAIEventDetailFieldValues::HERO_IMAGE:
            val = "hero_image";
            break;
        case eOAIEventDetailFieldValues::IMAGE_COUNT:
            val = "image_count";
            break;
        case eOAIEventDetailFieldValues::LOCATION:
            val = "location";
            break;
        case eOAIEventDetailFieldValues::NAME:
            val = "name";
            break;
        case eOAIEventDetailFieldValues::START_DATE:
            val = "start_date";
            break;
        case eOAIEventDetailFieldValues::TYPE:
            val = "type";
            break;
        default:
            break;
    }
    return val;
}

QJsonValue OAIEventDetailFieldValues::asJsonValue() const {
    
    return QJsonValue(asJson());
}


OAIEventDetailFieldValues::eOAIEventDetailFieldValues OAIEventDetailFieldValues::getValue() const {
    return m_value;
}

void OAIEventDetailFieldValues::setValue(const OAIEventDetailFieldValues::eOAIEventDetailFieldValues& value){
    m_value = value;
    m_value_isSet = true;
}
bool OAIEventDetailFieldValues::isSet() const {
    
    return m_value_isSet;
}

bool OAIEventDetailFieldValues::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_value_isValid;
}

} // namespace OpenAPI
