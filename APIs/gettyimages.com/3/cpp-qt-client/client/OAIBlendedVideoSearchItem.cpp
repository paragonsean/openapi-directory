/**
 * Getty Images
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 3
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIBlendedVideoSearchItem.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIBlendedVideoSearchItem::OAIBlendedVideoSearchItem(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIBlendedVideoSearchItem::OAIBlendedVideoSearchItem() {
    this->initializeModel();
}

OAIBlendedVideoSearchItem::~OAIBlendedVideoSearchItem() {}

void OAIBlendedVideoSearchItem::initializeModel() {

    m_allowed_use_isSet = false;
    m_allowed_use_isValid = false;

    m_artist_isSet = false;
    m_artist_isValid = false;

    m_asset_family_isSet = false;
    m_asset_family_isValid = false;

    m_caption_isSet = false;
    m_caption_isValid = false;

    m_clip_length_isSet = false;
    m_clip_length_isValid = false;

    m_collection_code_isSet = false;
    m_collection_code_isValid = false;

    m_collection_id_isSet = false;
    m_collection_id_isValid = false;

    m_collection_name_isSet = false;
    m_collection_name_isValid = false;

    m_color_type_isSet = false;
    m_color_type_isValid = false;

    m_copyright_isSet = false;
    m_copyright_isValid = false;

    m_date_created_isSet = false;
    m_date_created_isValid = false;

    m_display_sizes_isSet = false;
    m_display_sizes_isValid = false;

    m_download_product_isSet = false;
    m_download_product_isValid = false;

    m_era_isSet = false;
    m_era_isValid = false;

    m_event_ids_isSet = false;
    m_event_ids_isValid = false;

    m_id_isSet = false;
    m_id_isValid = false;

    m_istock_licenses_isSet = false;
    m_istock_licenses_isValid = false;

    m_keywords_isSet = false;
    m_keywords_isValid = false;

    m_largest_downloads_isSet = false;
    m_largest_downloads_isValid = false;

    m_license_model_isSet = false;
    m_license_model_isValid = false;

    m_mastered_to_isSet = false;
    m_mastered_to_isValid = false;

    m_originally_shot_on_isSet = false;
    m_originally_shot_on_isValid = false;

    m_product_types_isSet = false;
    m_product_types_isValid = false;

    m_referral_destinations_isSet = false;
    m_referral_destinations_isValid = false;

    m_shot_speed_isSet = false;
    m_shot_speed_isValid = false;

    m_source_isSet = false;
    m_source_isValid = false;

    m_title_isSet = false;
    m_title_isValid = false;
}

void OAIBlendedVideoSearchItem::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIBlendedVideoSearchItem::fromJsonObject(QJsonObject json) {

    m_allowed_use_isValid = ::OpenAPI::fromJsonValue(m_allowed_use, json[QString("allowed_use")]);
    m_allowed_use_isSet = !json[QString("allowed_use")].isNull() && m_allowed_use_isValid;

    m_artist_isValid = ::OpenAPI::fromJsonValue(m_artist, json[QString("artist")]);
    m_artist_isSet = !json[QString("artist")].isNull() && m_artist_isValid;

    m_asset_family_isValid = ::OpenAPI::fromJsonValue(m_asset_family, json[QString("asset_family")]);
    m_asset_family_isSet = !json[QString("asset_family")].isNull() && m_asset_family_isValid;

    m_caption_isValid = ::OpenAPI::fromJsonValue(m_caption, json[QString("caption")]);
    m_caption_isSet = !json[QString("caption")].isNull() && m_caption_isValid;

    m_clip_length_isValid = ::OpenAPI::fromJsonValue(m_clip_length, json[QString("clip_length")]);
    m_clip_length_isSet = !json[QString("clip_length")].isNull() && m_clip_length_isValid;

    m_collection_code_isValid = ::OpenAPI::fromJsonValue(m_collection_code, json[QString("collection_code")]);
    m_collection_code_isSet = !json[QString("collection_code")].isNull() && m_collection_code_isValid;

    m_collection_id_isValid = ::OpenAPI::fromJsonValue(m_collection_id, json[QString("collection_id")]);
    m_collection_id_isSet = !json[QString("collection_id")].isNull() && m_collection_id_isValid;

    m_collection_name_isValid = ::OpenAPI::fromJsonValue(m_collection_name, json[QString("collection_name")]);
    m_collection_name_isSet = !json[QString("collection_name")].isNull() && m_collection_name_isValid;

    m_color_type_isValid = ::OpenAPI::fromJsonValue(m_color_type, json[QString("color_type")]);
    m_color_type_isSet = !json[QString("color_type")].isNull() && m_color_type_isValid;

    m_copyright_isValid = ::OpenAPI::fromJsonValue(m_copyright, json[QString("copyright")]);
    m_copyright_isSet = !json[QString("copyright")].isNull() && m_copyright_isValid;

    m_date_created_isValid = ::OpenAPI::fromJsonValue(m_date_created, json[QString("date_created")]);
    m_date_created_isSet = !json[QString("date_created")].isNull() && m_date_created_isValid;

    m_display_sizes_isValid = ::OpenAPI::fromJsonValue(m_display_sizes, json[QString("display_sizes")]);
    m_display_sizes_isSet = !json[QString("display_sizes")].isNull() && m_display_sizes_isValid;

    m_download_product_isValid = ::OpenAPI::fromJsonValue(m_download_product, json[QString("download_product")]);
    m_download_product_isSet = !json[QString("download_product")].isNull() && m_download_product_isValid;

    m_era_isValid = ::OpenAPI::fromJsonValue(m_era, json[QString("era")]);
    m_era_isSet = !json[QString("era")].isNull() && m_era_isValid;

    m_event_ids_isValid = ::OpenAPI::fromJsonValue(m_event_ids, json[QString("event_ids")]);
    m_event_ids_isSet = !json[QString("event_ids")].isNull() && m_event_ids_isValid;

    m_id_isValid = ::OpenAPI::fromJsonValue(m_id, json[QString("id")]);
    m_id_isSet = !json[QString("id")].isNull() && m_id_isValid;

    m_istock_licenses_isValid = ::OpenAPI::fromJsonValue(m_istock_licenses, json[QString("istock_licenses")]);
    m_istock_licenses_isSet = !json[QString("istock_licenses")].isNull() && m_istock_licenses_isValid;

    m_keywords_isValid = ::OpenAPI::fromJsonValue(m_keywords, json[QString("keywords")]);
    m_keywords_isSet = !json[QString("keywords")].isNull() && m_keywords_isValid;

    m_largest_downloads_isValid = ::OpenAPI::fromJsonValue(m_largest_downloads, json[QString("largest_downloads")]);
    m_largest_downloads_isSet = !json[QString("largest_downloads")].isNull() && m_largest_downloads_isValid;

    m_license_model_isValid = ::OpenAPI::fromJsonValue(m_license_model, json[QString("license_model")]);
    m_license_model_isSet = !json[QString("license_model")].isNull() && m_license_model_isValid;

    m_mastered_to_isValid = ::OpenAPI::fromJsonValue(m_mastered_to, json[QString("mastered_to")]);
    m_mastered_to_isSet = !json[QString("mastered_to")].isNull() && m_mastered_to_isValid;

    m_originally_shot_on_isValid = ::OpenAPI::fromJsonValue(m_originally_shot_on, json[QString("originally_shot_on")]);
    m_originally_shot_on_isSet = !json[QString("originally_shot_on")].isNull() && m_originally_shot_on_isValid;

    m_product_types_isValid = ::OpenAPI::fromJsonValue(m_product_types, json[QString("product_types")]);
    m_product_types_isSet = !json[QString("product_types")].isNull() && m_product_types_isValid;

    m_referral_destinations_isValid = ::OpenAPI::fromJsonValue(m_referral_destinations, json[QString("referral_destinations")]);
    m_referral_destinations_isSet = !json[QString("referral_destinations")].isNull() && m_referral_destinations_isValid;

    m_shot_speed_isValid = ::OpenAPI::fromJsonValue(m_shot_speed, json[QString("shot_speed")]);
    m_shot_speed_isSet = !json[QString("shot_speed")].isNull() && m_shot_speed_isValid;

    m_source_isValid = ::OpenAPI::fromJsonValue(m_source, json[QString("source")]);
    m_source_isSet = !json[QString("source")].isNull() && m_source_isValid;

    m_title_isValid = ::OpenAPI::fromJsonValue(m_title, json[QString("title")]);
    m_title_isSet = !json[QString("title")].isNull() && m_title_isValid;
}

QString OAIBlendedVideoSearchItem::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIBlendedVideoSearchItem::asJsonObject() const {
    QJsonObject obj;
    if (m_allowed_use.isSet()) {
        obj.insert(QString("allowed_use"), ::OpenAPI::toJsonValue(m_allowed_use));
    }
    if (m_artist_isSet) {
        obj.insert(QString("artist"), ::OpenAPI::toJsonValue(m_artist));
    }
    if (m_asset_family_isSet) {
        obj.insert(QString("asset_family"), ::OpenAPI::toJsonValue(m_asset_family));
    }
    if (m_caption_isSet) {
        obj.insert(QString("caption"), ::OpenAPI::toJsonValue(m_caption));
    }
    if (m_clip_length_isSet) {
        obj.insert(QString("clip_length"), ::OpenAPI::toJsonValue(m_clip_length));
    }
    if (m_collection_code_isSet) {
        obj.insert(QString("collection_code"), ::OpenAPI::toJsonValue(m_collection_code));
    }
    if (m_collection_id_isSet) {
        obj.insert(QString("collection_id"), ::OpenAPI::toJsonValue(m_collection_id));
    }
    if (m_collection_name_isSet) {
        obj.insert(QString("collection_name"), ::OpenAPI::toJsonValue(m_collection_name));
    }
    if (m_color_type_isSet) {
        obj.insert(QString("color_type"), ::OpenAPI::toJsonValue(m_color_type));
    }
    if (m_copyright_isSet) {
        obj.insert(QString("copyright"), ::OpenAPI::toJsonValue(m_copyright));
    }
    if (m_date_created_isSet) {
        obj.insert(QString("date_created"), ::OpenAPI::toJsonValue(m_date_created));
    }
    if (m_display_sizes.size() > 0) {
        obj.insert(QString("display_sizes"), ::OpenAPI::toJsonValue(m_display_sizes));
    }
    if (m_download_product_isSet) {
        obj.insert(QString("download_product"), ::OpenAPI::toJsonValue(m_download_product));
    }
    if (m_era_isSet) {
        obj.insert(QString("era"), ::OpenAPI::toJsonValue(m_era));
    }
    if (m_event_ids.size() > 0) {
        obj.insert(QString("event_ids"), ::OpenAPI::toJsonValue(m_event_ids));
    }
    if (m_id_isSet) {
        obj.insert(QString("id"), ::OpenAPI::toJsonValue(m_id));
    }
    if (m_istock_licenses.size() > 0) {
        obj.insert(QString("istock_licenses"), ::OpenAPI::toJsonValue(m_istock_licenses));
    }
    if (m_keywords.size() > 0) {
        obj.insert(QString("keywords"), ::OpenAPI::toJsonValue(m_keywords));
    }
    if (m_largest_downloads.size() > 0) {
        obj.insert(QString("largest_downloads"), ::OpenAPI::toJsonValue(m_largest_downloads));
    }
    if (m_license_model_isSet) {
        obj.insert(QString("license_model"), ::OpenAPI::toJsonValue(m_license_model));
    }
    if (m_mastered_to_isSet) {
        obj.insert(QString("mastered_to"), ::OpenAPI::toJsonValue(m_mastered_to));
    }
    if (m_originally_shot_on_isSet) {
        obj.insert(QString("originally_shot_on"), ::OpenAPI::toJsonValue(m_originally_shot_on));
    }
    if (m_product_types.size() > 0) {
        obj.insert(QString("product_types"), ::OpenAPI::toJsonValue(m_product_types));
    }
    if (m_referral_destinations.size() > 0) {
        obj.insert(QString("referral_destinations"), ::OpenAPI::toJsonValue(m_referral_destinations));
    }
    if (m_shot_speed_isSet) {
        obj.insert(QString("shot_speed"), ::OpenAPI::toJsonValue(m_shot_speed));
    }
    if (m_source_isSet) {
        obj.insert(QString("source"), ::OpenAPI::toJsonValue(m_source));
    }
    if (m_title_isSet) {
        obj.insert(QString("title"), ::OpenAPI::toJsonValue(m_title));
    }
    return obj;
}

OAIAllowedUse OAIBlendedVideoSearchItem::getAllowedUse() const {
    return m_allowed_use;
}
void OAIBlendedVideoSearchItem::setAllowedUse(const OAIAllowedUse &allowed_use) {
    m_allowed_use = allowed_use;
    m_allowed_use_isSet = true;
}

bool OAIBlendedVideoSearchItem::is_allowed_use_Set() const{
    return m_allowed_use_isSet;
}

bool OAIBlendedVideoSearchItem::is_allowed_use_Valid() const{
    return m_allowed_use_isValid;
}

QString OAIBlendedVideoSearchItem::getArtist() const {
    return m_artist;
}
void OAIBlendedVideoSearchItem::setArtist(const QString &artist) {
    m_artist = artist;
    m_artist_isSet = true;
}

bool OAIBlendedVideoSearchItem::is_artist_Set() const{
    return m_artist_isSet;
}

bool OAIBlendedVideoSearchItem::is_artist_Valid() const{
    return m_artist_isValid;
}

QString OAIBlendedVideoSearchItem::getAssetFamily() const {
    return m_asset_family;
}
void OAIBlendedVideoSearchItem::setAssetFamily(const QString &asset_family) {
    m_asset_family = asset_family;
    m_asset_family_isSet = true;
}

bool OAIBlendedVideoSearchItem::is_asset_family_Set() const{
    return m_asset_family_isSet;
}

bool OAIBlendedVideoSearchItem::is_asset_family_Valid() const{
    return m_asset_family_isValid;
}

QString OAIBlendedVideoSearchItem::getCaption() const {
    return m_caption;
}
void OAIBlendedVideoSearchItem::setCaption(const QString &caption) {
    m_caption = caption;
    m_caption_isSet = true;
}

bool OAIBlendedVideoSearchItem::is_caption_Set() const{
    return m_caption_isSet;
}

bool OAIBlendedVideoSearchItem::is_caption_Valid() const{
    return m_caption_isValid;
}

QString OAIBlendedVideoSearchItem::getClipLength() const {
    return m_clip_length;
}
void OAIBlendedVideoSearchItem::setClipLength(const QString &clip_length) {
    m_clip_length = clip_length;
    m_clip_length_isSet = true;
}

bool OAIBlendedVideoSearchItem::is_clip_length_Set() const{
    return m_clip_length_isSet;
}

bool OAIBlendedVideoSearchItem::is_clip_length_Valid() const{
    return m_clip_length_isValid;
}

QString OAIBlendedVideoSearchItem::getCollectionCode() const {
    return m_collection_code;
}
void OAIBlendedVideoSearchItem::setCollectionCode(const QString &collection_code) {
    m_collection_code = collection_code;
    m_collection_code_isSet = true;
}

bool OAIBlendedVideoSearchItem::is_collection_code_Set() const{
    return m_collection_code_isSet;
}

bool OAIBlendedVideoSearchItem::is_collection_code_Valid() const{
    return m_collection_code_isValid;
}

qint32 OAIBlendedVideoSearchItem::getCollectionId() const {
    return m_collection_id;
}
void OAIBlendedVideoSearchItem::setCollectionId(const qint32 &collection_id) {
    m_collection_id = collection_id;
    m_collection_id_isSet = true;
}

bool OAIBlendedVideoSearchItem::is_collection_id_Set() const{
    return m_collection_id_isSet;
}

bool OAIBlendedVideoSearchItem::is_collection_id_Valid() const{
    return m_collection_id_isValid;
}

QString OAIBlendedVideoSearchItem::getCollectionName() const {
    return m_collection_name;
}
void OAIBlendedVideoSearchItem::setCollectionName(const QString &collection_name) {
    m_collection_name = collection_name;
    m_collection_name_isSet = true;
}

bool OAIBlendedVideoSearchItem::is_collection_name_Set() const{
    return m_collection_name_isSet;
}

bool OAIBlendedVideoSearchItem::is_collection_name_Valid() const{
    return m_collection_name_isValid;
}

QString OAIBlendedVideoSearchItem::getColorType() const {
    return m_color_type;
}
void OAIBlendedVideoSearchItem::setColorType(const QString &color_type) {
    m_color_type = color_type;
    m_color_type_isSet = true;
}

bool OAIBlendedVideoSearchItem::is_color_type_Set() const{
    return m_color_type_isSet;
}

bool OAIBlendedVideoSearchItem::is_color_type_Valid() const{
    return m_color_type_isValid;
}

QString OAIBlendedVideoSearchItem::getCopyright() const {
    return m_copyright;
}
void OAIBlendedVideoSearchItem::setCopyright(const QString &copyright) {
    m_copyright = copyright;
    m_copyright_isSet = true;
}

bool OAIBlendedVideoSearchItem::is_copyright_Set() const{
    return m_copyright_isSet;
}

bool OAIBlendedVideoSearchItem::is_copyright_Valid() const{
    return m_copyright_isValid;
}

QDateTime OAIBlendedVideoSearchItem::getDateCreated() const {
    return m_date_created;
}
void OAIBlendedVideoSearchItem::setDateCreated(const QDateTime &date_created) {
    m_date_created = date_created;
    m_date_created_isSet = true;
}

bool OAIBlendedVideoSearchItem::is_date_created_Set() const{
    return m_date_created_isSet;
}

bool OAIBlendedVideoSearchItem::is_date_created_Valid() const{
    return m_date_created_isValid;
}

QList<OAIVideoSearchItemDisplaySize> OAIBlendedVideoSearchItem::getDisplaySizes() const {
    return m_display_sizes;
}
void OAIBlendedVideoSearchItem::setDisplaySizes(const QList<OAIVideoSearchItemDisplaySize> &display_sizes) {
    m_display_sizes = display_sizes;
    m_display_sizes_isSet = true;
}

bool OAIBlendedVideoSearchItem::is_display_sizes_Set() const{
    return m_display_sizes_isSet;
}

bool OAIBlendedVideoSearchItem::is_display_sizes_Valid() const{
    return m_display_sizes_isValid;
}

QString OAIBlendedVideoSearchItem::getDownloadProduct() const {
    return m_download_product;
}
void OAIBlendedVideoSearchItem::setDownloadProduct(const QString &download_product) {
    m_download_product = download_product;
    m_download_product_isSet = true;
}

bool OAIBlendedVideoSearchItem::is_download_product_Set() const{
    return m_download_product_isSet;
}

bool OAIBlendedVideoSearchItem::is_download_product_Valid() const{
    return m_download_product_isValid;
}

QString OAIBlendedVideoSearchItem::getEra() const {
    return m_era;
}
void OAIBlendedVideoSearchItem::setEra(const QString &era) {
    m_era = era;
    m_era_isSet = true;
}

bool OAIBlendedVideoSearchItem::is_era_Set() const{
    return m_era_isSet;
}

bool OAIBlendedVideoSearchItem::is_era_Valid() const{
    return m_era_isValid;
}

QList<qint32> OAIBlendedVideoSearchItem::getEventIds() const {
    return m_event_ids;
}
void OAIBlendedVideoSearchItem::setEventIds(const QList<qint32> &event_ids) {
    m_event_ids = event_ids;
    m_event_ids_isSet = true;
}

bool OAIBlendedVideoSearchItem::is_event_ids_Set() const{
    return m_event_ids_isSet;
}

bool OAIBlendedVideoSearchItem::is_event_ids_Valid() const{
    return m_event_ids_isValid;
}

QString OAIBlendedVideoSearchItem::getId() const {
    return m_id;
}
void OAIBlendedVideoSearchItem::setId(const QString &id) {
    m_id = id;
    m_id_isSet = true;
}

bool OAIBlendedVideoSearchItem::is_id_Set() const{
    return m_id_isSet;
}

bool OAIBlendedVideoSearchItem::is_id_Valid() const{
    return m_id_isValid;
}

QList<OAIIStockLicense> OAIBlendedVideoSearchItem::getIstockLicenses() const {
    return m_istock_licenses;
}
void OAIBlendedVideoSearchItem::setIstockLicenses(const QList<OAIIStockLicense> &istock_licenses) {
    m_istock_licenses = istock_licenses;
    m_istock_licenses_isSet = true;
}

bool OAIBlendedVideoSearchItem::is_istock_licenses_Set() const{
    return m_istock_licenses_isSet;
}

bool OAIBlendedVideoSearchItem::is_istock_licenses_Valid() const{
    return m_istock_licenses_isValid;
}

QList<OAIKeyword> OAIBlendedVideoSearchItem::getKeywords() const {
    return m_keywords;
}
void OAIBlendedVideoSearchItem::setKeywords(const QList<OAIKeyword> &keywords) {
    m_keywords = keywords;
    m_keywords_isSet = true;
}

bool OAIBlendedVideoSearchItem::is_keywords_Set() const{
    return m_keywords_isSet;
}

bool OAIBlendedVideoSearchItem::is_keywords_Valid() const{
    return m_keywords_isValid;
}

QList<OAIDownload> OAIBlendedVideoSearchItem::getLargestDownloads() const {
    return m_largest_downloads;
}
void OAIBlendedVideoSearchItem::setLargestDownloads(const QList<OAIDownload> &largest_downloads) {
    m_largest_downloads = largest_downloads;
    m_largest_downloads_isSet = true;
}

bool OAIBlendedVideoSearchItem::is_largest_downloads_Set() const{
    return m_largest_downloads_isSet;
}

bool OAIBlendedVideoSearchItem::is_largest_downloads_Valid() const{
    return m_largest_downloads_isValid;
}

QString OAIBlendedVideoSearchItem::getLicenseModel() const {
    return m_license_model;
}
void OAIBlendedVideoSearchItem::setLicenseModel(const QString &license_model) {
    m_license_model = license_model;
    m_license_model_isSet = true;
}

bool OAIBlendedVideoSearchItem::is_license_model_Set() const{
    return m_license_model_isSet;
}

bool OAIBlendedVideoSearchItem::is_license_model_Valid() const{
    return m_license_model_isValid;
}

QString OAIBlendedVideoSearchItem::getMasteredTo() const {
    return m_mastered_to;
}
void OAIBlendedVideoSearchItem::setMasteredTo(const QString &mastered_to) {
    m_mastered_to = mastered_to;
    m_mastered_to_isSet = true;
}

bool OAIBlendedVideoSearchItem::is_mastered_to_Set() const{
    return m_mastered_to_isSet;
}

bool OAIBlendedVideoSearchItem::is_mastered_to_Valid() const{
    return m_mastered_to_isValid;
}

QString OAIBlendedVideoSearchItem::getOriginallyShotOn() const {
    return m_originally_shot_on;
}
void OAIBlendedVideoSearchItem::setOriginallyShotOn(const QString &originally_shot_on) {
    m_originally_shot_on = originally_shot_on;
    m_originally_shot_on_isSet = true;
}

bool OAIBlendedVideoSearchItem::is_originally_shot_on_Set() const{
    return m_originally_shot_on_isSet;
}

bool OAIBlendedVideoSearchItem::is_originally_shot_on_Valid() const{
    return m_originally_shot_on_isValid;
}

QList<QString> OAIBlendedVideoSearchItem::getProductTypes() const {
    return m_product_types;
}
void OAIBlendedVideoSearchItem::setProductTypes(const QList<QString> &product_types) {
    m_product_types = product_types;
    m_product_types_isSet = true;
}

bool OAIBlendedVideoSearchItem::is_product_types_Set() const{
    return m_product_types_isSet;
}

bool OAIBlendedVideoSearchItem::is_product_types_Valid() const{
    return m_product_types_isValid;
}

QList<OAIReferralDestination> OAIBlendedVideoSearchItem::getReferralDestinations() const {
    return m_referral_destinations;
}
void OAIBlendedVideoSearchItem::setReferralDestinations(const QList<OAIReferralDestination> &referral_destinations) {
    m_referral_destinations = referral_destinations;
    m_referral_destinations_isSet = true;
}

bool OAIBlendedVideoSearchItem::is_referral_destinations_Set() const{
    return m_referral_destinations_isSet;
}

bool OAIBlendedVideoSearchItem::is_referral_destinations_Valid() const{
    return m_referral_destinations_isValid;
}

QString OAIBlendedVideoSearchItem::getShotSpeed() const {
    return m_shot_speed;
}
void OAIBlendedVideoSearchItem::setShotSpeed(const QString &shot_speed) {
    m_shot_speed = shot_speed;
    m_shot_speed_isSet = true;
}

bool OAIBlendedVideoSearchItem::is_shot_speed_Set() const{
    return m_shot_speed_isSet;
}

bool OAIBlendedVideoSearchItem::is_shot_speed_Valid() const{
    return m_shot_speed_isValid;
}

QString OAIBlendedVideoSearchItem::getSource() const {
    return m_source;
}
void OAIBlendedVideoSearchItem::setSource(const QString &source) {
    m_source = source;
    m_source_isSet = true;
}

bool OAIBlendedVideoSearchItem::is_source_Set() const{
    return m_source_isSet;
}

bool OAIBlendedVideoSearchItem::is_source_Valid() const{
    return m_source_isValid;
}

QString OAIBlendedVideoSearchItem::getTitle() const {
    return m_title;
}
void OAIBlendedVideoSearchItem::setTitle(const QString &title) {
    m_title = title;
    m_title_isSet = true;
}

bool OAIBlendedVideoSearchItem::is_title_Set() const{
    return m_title_isSet;
}

bool OAIBlendedVideoSearchItem::is_title_Valid() const{
    return m_title_isValid;
}

bool OAIBlendedVideoSearchItem::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_allowed_use.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_artist_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_asset_family_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_caption_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_clip_length_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_collection_code_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_collection_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_collection_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_color_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_copyright_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_date_created_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_display_sizes.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_download_product_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_era_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_event_ids.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_istock_licenses.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_keywords.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_largest_downloads.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_license_model_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_mastered_to_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_originally_shot_on_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_product_types.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_referral_destinations.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_shot_speed_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_source_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_title_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIBlendedVideoSearchItem::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
