/**
 * Getty Images
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 3
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAISearchFacetsResponse.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAISearchFacetsResponse::OAISearchFacetsResponse(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAISearchFacetsResponse::OAISearchFacetsResponse() {
    this->initializeModel();
}

OAISearchFacetsResponse::~OAISearchFacetsResponse() {}

void OAISearchFacetsResponse::initializeModel() {

    m_artists_isSet = false;
    m_artists_isValid = false;

    m_entertainment_isSet = false;
    m_entertainment_isValid = false;

    m_events_isSet = false;
    m_events_isValid = false;

    m_locations_isSet = false;
    m_locations_isValid = false;

    m_specific_people_isSet = false;
    m_specific_people_isValid = false;
}

void OAISearchFacetsResponse::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAISearchFacetsResponse::fromJsonObject(QJsonObject json) {

    m_artists_isValid = ::OpenAPI::fromJsonValue(m_artists, json[QString("artists")]);
    m_artists_isSet = !json[QString("artists")].isNull() && m_artists_isValid;

    m_entertainment_isValid = ::OpenAPI::fromJsonValue(m_entertainment, json[QString("entertainment")]);
    m_entertainment_isSet = !json[QString("entertainment")].isNull() && m_entertainment_isValid;

    m_events_isValid = ::OpenAPI::fromJsonValue(m_events, json[QString("events")]);
    m_events_isSet = !json[QString("events")].isNull() && m_events_isValid;

    m_locations_isValid = ::OpenAPI::fromJsonValue(m_locations, json[QString("locations")]);
    m_locations_isSet = !json[QString("locations")].isNull() && m_locations_isValid;

    m_specific_people_isValid = ::OpenAPI::fromJsonValue(m_specific_people, json[QString("specific_people")]);
    m_specific_people_isSet = !json[QString("specific_people")].isNull() && m_specific_people_isValid;
}

QString OAISearchFacetsResponse::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAISearchFacetsResponse::asJsonObject() const {
    QJsonObject obj;
    if (m_artists.size() > 0) {
        obj.insert(QString("artists"), ::OpenAPI::toJsonValue(m_artists));
    }
    if (m_entertainment.size() > 0) {
        obj.insert(QString("entertainment"), ::OpenAPI::toJsonValue(m_entertainment));
    }
    if (m_events.size() > 0) {
        obj.insert(QString("events"), ::OpenAPI::toJsonValue(m_events));
    }
    if (m_locations.size() > 0) {
        obj.insert(QString("locations"), ::OpenAPI::toJsonValue(m_locations));
    }
    if (m_specific_people.size() > 0) {
        obj.insert(QString("specific_people"), ::OpenAPI::toJsonValue(m_specific_people));
    }
    return obj;
}

QList<OAIArtist> OAISearchFacetsResponse::getArtists() const {
    return m_artists;
}
void OAISearchFacetsResponse::setArtists(const QList<OAIArtist> &artists) {
    m_artists = artists;
    m_artists_isSet = true;
}

bool OAISearchFacetsResponse::is_artists_Set() const{
    return m_artists_isSet;
}

bool OAISearchFacetsResponse::is_artists_Valid() const{
    return m_artists_isValid;
}

QList<OAIEntertainment> OAISearchFacetsResponse::getEntertainment() const {
    return m_entertainment;
}
void OAISearchFacetsResponse::setEntertainment(const QList<OAIEntertainment> &entertainment) {
    m_entertainment = entertainment;
    m_entertainment_isSet = true;
}

bool OAISearchFacetsResponse::is_entertainment_Set() const{
    return m_entertainment_isSet;
}

bool OAISearchFacetsResponse::is_entertainment_Valid() const{
    return m_entertainment_isValid;
}

QList<OAIFacetEvent> OAISearchFacetsResponse::getEvents() const {
    return m_events;
}
void OAISearchFacetsResponse::setEvents(const QList<OAIFacetEvent> &events) {
    m_events = events;
    m_events_isSet = true;
}

bool OAISearchFacetsResponse::is_events_Set() const{
    return m_events_isSet;
}

bool OAISearchFacetsResponse::is_events_Valid() const{
    return m_events_isValid;
}

QList<OAILocation> OAISearchFacetsResponse::getLocations() const {
    return m_locations;
}
void OAISearchFacetsResponse::setLocations(const QList<OAILocation> &locations) {
    m_locations = locations;
    m_locations_isSet = true;
}

bool OAISearchFacetsResponse::is_locations_Set() const{
    return m_locations_isSet;
}

bool OAISearchFacetsResponse::is_locations_Valid() const{
    return m_locations_isValid;
}

QList<OAISpecificPeople> OAISearchFacetsResponse::getSpecificPeople() const {
    return m_specific_people;
}
void OAISearchFacetsResponse::setSpecificPeople(const QList<OAISpecificPeople> &specific_people) {
    m_specific_people = specific_people;
    m_specific_people_isSet = true;
}

bool OAISearchFacetsResponse::is_specific_people_Set() const{
    return m_specific_people_isSet;
}

bool OAISearchFacetsResponse::is_specific_people_Valid() const{
    return m_specific_people_isValid;
}

bool OAISearchFacetsResponse::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_artists.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_entertainment.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_events.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_locations.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_specific_people.size() > 0) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAISearchFacetsResponse::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
