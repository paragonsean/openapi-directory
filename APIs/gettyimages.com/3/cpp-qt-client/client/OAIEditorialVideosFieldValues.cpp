/**
 * Getty Images
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 3
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIEditorialVideosFieldValues.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIEditorialVideosFieldValues::OAIEditorialVideosFieldValues(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIEditorialVideosFieldValues::OAIEditorialVideosFieldValues() {
    this->initializeModel();
}

OAIEditorialVideosFieldValues::~OAIEditorialVideosFieldValues() {}

void OAIEditorialVideosFieldValues::initializeModel() {

    m_value_isSet = false;
    m_value_isValid = false;
    m_value = eOAIEditorialVideosFieldValues::INVALID_VALUE_OPENAPI_GENERATED;
}

void OAIEditorialVideosFieldValues::fromJson(QString jsonString) {
    
    if ( jsonString.compare("allowed_use", Qt::CaseInsensitive) == 0) {
        m_value = eOAIEditorialVideosFieldValues::ALLOWED_USE;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("artist", Qt::CaseInsensitive) == 0) {
        m_value = eOAIEditorialVideosFieldValues::ARTIST;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("aspect_ratio", Qt::CaseInsensitive) == 0) {
        m_value = eOAIEditorialVideosFieldValues::ASPECT_RATIO;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("asset_family", Qt::CaseInsensitive) == 0) {
        m_value = eOAIEditorialVideosFieldValues::ASSET_FAMILY;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("call_for_image", Qt::CaseInsensitive) == 0) {
        m_value = eOAIEditorialVideosFieldValues::CALL_FOR_IMAGE;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("caption", Qt::CaseInsensitive) == 0) {
        m_value = eOAIEditorialVideosFieldValues::CAPTION;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("clip_length", Qt::CaseInsensitive) == 0) {
        m_value = eOAIEditorialVideosFieldValues::CLIP_LENGTH;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("collection_code", Qt::CaseInsensitive) == 0) {
        m_value = eOAIEditorialVideosFieldValues::COLLECTION_CODE;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("collection_id", Qt::CaseInsensitive) == 0) {
        m_value = eOAIEditorialVideosFieldValues::COLLECTION_ID;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("collection_name", Qt::CaseInsensitive) == 0) {
        m_value = eOAIEditorialVideosFieldValues::COLLECTION_NAME;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("color_type", Qt::CaseInsensitive) == 0) {
        m_value = eOAIEditorialVideosFieldValues::COLOR_TYPE;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("comp", Qt::CaseInsensitive) == 0) {
        m_value = eOAIEditorialVideosFieldValues::COMP;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("copyright", Qt::CaseInsensitive) == 0) {
        m_value = eOAIEditorialVideosFieldValues::COPYRIGHT;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("date_created", Qt::CaseInsensitive) == 0) {
        m_value = eOAIEditorialVideosFieldValues::DATE_CREATED;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("date_submitted", Qt::CaseInsensitive) == 0) {
        m_value = eOAIEditorialVideosFieldValues::DATE_SUBMITTED;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("detail_set", Qt::CaseInsensitive) == 0) {
        m_value = eOAIEditorialVideosFieldValues::DETAIL_SET;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("display_set", Qt::CaseInsensitive) == 0) {
        m_value = eOAIEditorialVideosFieldValues::DISPLAY_SET;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("download_product", Qt::CaseInsensitive) == 0) {
        m_value = eOAIEditorialVideosFieldValues::DOWNLOAD_PRODUCT;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("download_sizes", Qt::CaseInsensitive) == 0) {
        m_value = eOAIEditorialVideosFieldValues::DOWNLOAD_SIZES;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("editorial_segments", Qt::CaseInsensitive) == 0) {
        m_value = eOAIEditorialVideosFieldValues::EDITORIAL_SEGMENTS;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("era", Qt::CaseInsensitive) == 0) {
        m_value = eOAIEditorialVideosFieldValues::ERA;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("event_ids", Qt::CaseInsensitive) == 0) {
        m_value = eOAIEditorialVideosFieldValues::EVENT_IDS;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("id", Qt::CaseInsensitive) == 0) {
        m_value = eOAIEditorialVideosFieldValues::ID;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("istock_collection", Qt::CaseInsensitive) == 0) {
        m_value = eOAIEditorialVideosFieldValues::ISTOCK_COLLECTION;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("keywords", Qt::CaseInsensitive) == 0) {
        m_value = eOAIEditorialVideosFieldValues::KEYWORDS;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("largest_downloads", Qt::CaseInsensitive) == 0) {
        m_value = eOAIEditorialVideosFieldValues::LARGEST_DOWNLOADS;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("license_model", Qt::CaseInsensitive) == 0) {
        m_value = eOAIEditorialVideosFieldValues::LICENSE_MODEL;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("mastered_to", Qt::CaseInsensitive) == 0) {
        m_value = eOAIEditorialVideosFieldValues::MASTERED_TO;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("object_name", Qt::CaseInsensitive) == 0) {
        m_value = eOAIEditorialVideosFieldValues::OBJECT_NAME;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("orientation", Qt::CaseInsensitive) == 0) {
        m_value = eOAIEditorialVideosFieldValues::ORIENTATION;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("originally_shot_on", Qt::CaseInsensitive) == 0) {
        m_value = eOAIEditorialVideosFieldValues::ORIGINALLY_SHOT_ON;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("preview", Qt::CaseInsensitive) == 0) {
        m_value = eOAIEditorialVideosFieldValues::PREVIEW;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("product_types", Qt::CaseInsensitive) == 0) {
        m_value = eOAIEditorialVideosFieldValues::PRODUCT_TYPES;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("quality_rank", Qt::CaseInsensitive) == 0) {
        m_value = eOAIEditorialVideosFieldValues::QUALITY_RANK;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("referral_destinations", Qt::CaseInsensitive) == 0) {
        m_value = eOAIEditorialVideosFieldValues::REFERRAL_DESTINATIONS;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("shot_speed", Qt::CaseInsensitive) == 0) {
        m_value = eOAIEditorialVideosFieldValues::SHOT_SPEED;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("source", Qt::CaseInsensitive) == 0) {
        m_value = eOAIEditorialVideosFieldValues::SOURCE;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("summary_set", Qt::CaseInsensitive) == 0) {
        m_value = eOAIEditorialVideosFieldValues::SUMMARY_SET;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("thumb", Qt::CaseInsensitive) == 0) {
        m_value = eOAIEditorialVideosFieldValues::THUMB;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("title", Qt::CaseInsensitive) == 0) {
        m_value = eOAIEditorialVideosFieldValues::TITLE;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("istock_licenses", Qt::CaseInsensitive) == 0) {
        m_value = eOAIEditorialVideosFieldValues::ISTOCK_LICENSES;
        m_value_isSet = m_value_isValid = true;
    }
}

void OAIEditorialVideosFieldValues::fromJsonValue(QJsonValue json) {
fromJson(json.toString());
}

QString OAIEditorialVideosFieldValues::asJson() const {
    
    QString val;
    switch (m_value){
        case eOAIEditorialVideosFieldValues::ALLOWED_USE:
            val = "allowed_use";
            break;
        case eOAIEditorialVideosFieldValues::ARTIST:
            val = "artist";
            break;
        case eOAIEditorialVideosFieldValues::ASPECT_RATIO:
            val = "aspect_ratio";
            break;
        case eOAIEditorialVideosFieldValues::ASSET_FAMILY:
            val = "asset_family";
            break;
        case eOAIEditorialVideosFieldValues::CALL_FOR_IMAGE:
            val = "call_for_image";
            break;
        case eOAIEditorialVideosFieldValues::CAPTION:
            val = "caption";
            break;
        case eOAIEditorialVideosFieldValues::CLIP_LENGTH:
            val = "clip_length";
            break;
        case eOAIEditorialVideosFieldValues::COLLECTION_CODE:
            val = "collection_code";
            break;
        case eOAIEditorialVideosFieldValues::COLLECTION_ID:
            val = "collection_id";
            break;
        case eOAIEditorialVideosFieldValues::COLLECTION_NAME:
            val = "collection_name";
            break;
        case eOAIEditorialVideosFieldValues::COLOR_TYPE:
            val = "color_type";
            break;
        case eOAIEditorialVideosFieldValues::COMP:
            val = "comp";
            break;
        case eOAIEditorialVideosFieldValues::COPYRIGHT:
            val = "copyright";
            break;
        case eOAIEditorialVideosFieldValues::DATE_CREATED:
            val = "date_created";
            break;
        case eOAIEditorialVideosFieldValues::DATE_SUBMITTED:
            val = "date_submitted";
            break;
        case eOAIEditorialVideosFieldValues::DETAIL_SET:
            val = "detail_set";
            break;
        case eOAIEditorialVideosFieldValues::DISPLAY_SET:
            val = "display_set";
            break;
        case eOAIEditorialVideosFieldValues::DOWNLOAD_PRODUCT:
            val = "download_product";
            break;
        case eOAIEditorialVideosFieldValues::DOWNLOAD_SIZES:
            val = "download_sizes";
            break;
        case eOAIEditorialVideosFieldValues::EDITORIAL_SEGMENTS:
            val = "editorial_segments";
            break;
        case eOAIEditorialVideosFieldValues::ERA:
            val = "era";
            break;
        case eOAIEditorialVideosFieldValues::EVENT_IDS:
            val = "event_ids";
            break;
        case eOAIEditorialVideosFieldValues::ID:
            val = "id";
            break;
        case eOAIEditorialVideosFieldValues::ISTOCK_COLLECTION:
            val = "istock_collection";
            break;
        case eOAIEditorialVideosFieldValues::KEYWORDS:
            val = "keywords";
            break;
        case eOAIEditorialVideosFieldValues::LARGEST_DOWNLOADS:
            val = "largest_downloads";
            break;
        case eOAIEditorialVideosFieldValues::LICENSE_MODEL:
            val = "license_model";
            break;
        case eOAIEditorialVideosFieldValues::MASTERED_TO:
            val = "mastered_to";
            break;
        case eOAIEditorialVideosFieldValues::OBJECT_NAME:
            val = "object_name";
            break;
        case eOAIEditorialVideosFieldValues::ORIENTATION:
            val = "orientation";
            break;
        case eOAIEditorialVideosFieldValues::ORIGINALLY_SHOT_ON:
            val = "originally_shot_on";
            break;
        case eOAIEditorialVideosFieldValues::PREVIEW:
            val = "preview";
            break;
        case eOAIEditorialVideosFieldValues::PRODUCT_TYPES:
            val = "product_types";
            break;
        case eOAIEditorialVideosFieldValues::QUALITY_RANK:
            val = "quality_rank";
            break;
        case eOAIEditorialVideosFieldValues::REFERRAL_DESTINATIONS:
            val = "referral_destinations";
            break;
        case eOAIEditorialVideosFieldValues::SHOT_SPEED:
            val = "shot_speed";
            break;
        case eOAIEditorialVideosFieldValues::SOURCE:
            val = "source";
            break;
        case eOAIEditorialVideosFieldValues::SUMMARY_SET:
            val = "summary_set";
            break;
        case eOAIEditorialVideosFieldValues::THUMB:
            val = "thumb";
            break;
        case eOAIEditorialVideosFieldValues::TITLE:
            val = "title";
            break;
        case eOAIEditorialVideosFieldValues::ISTOCK_LICENSES:
            val = "istock_licenses";
            break;
        default:
            break;
    }
    return val;
}

QJsonValue OAIEditorialVideosFieldValues::asJsonValue() const {
    
    return QJsonValue(asJson());
}


OAIEditorialVideosFieldValues::eOAIEditorialVideosFieldValues OAIEditorialVideosFieldValues::getValue() const {
    return m_value;
}

void OAIEditorialVideosFieldValues::setValue(const OAIEditorialVideosFieldValues::eOAIEditorialVideosFieldValues& value){
    m_value = value;
    m_value_isSet = true;
}
bool OAIEditorialVideosFieldValues::isSet() const {
    
    return m_value_isSet;
}

bool OAIEditorialVideosFieldValues::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_value_isValid;
}

} // namespace OpenAPI
