/**
 * Getty Images
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 3
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAICreativeVideoSearchResults.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAICreativeVideoSearchResults::OAICreativeVideoSearchResults(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAICreativeVideoSearchResults::OAICreativeVideoSearchResults() {
    this->initializeModel();
}

OAICreativeVideoSearchResults::~OAICreativeVideoSearchResults() {}

void OAICreativeVideoSearchResults::initializeModel() {

    m_auto_corrections_isSet = false;
    m_auto_corrections_isValid = false;

    m_facets_isSet = false;
    m_facets_isValid = false;

    m_related_searches_isSet = false;
    m_related_searches_isValid = false;

    m_result_count_isSet = false;
    m_result_count_isValid = false;

    m_videos_isSet = false;
    m_videos_isValid = false;
}

void OAICreativeVideoSearchResults::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAICreativeVideoSearchResults::fromJsonObject(QJsonObject json) {

    m_auto_corrections_isValid = ::OpenAPI::fromJsonValue(m_auto_corrections, json[QString("auto_corrections")]);
    m_auto_corrections_isSet = !json[QString("auto_corrections")].isNull() && m_auto_corrections_isValid;

    m_facets_isValid = ::OpenAPI::fromJsonValue(m_facets, json[QString("facets")]);
    m_facets_isSet = !json[QString("facets")].isNull() && m_facets_isValid;

    m_related_searches_isValid = ::OpenAPI::fromJsonValue(m_related_searches, json[QString("related_searches")]);
    m_related_searches_isSet = !json[QString("related_searches")].isNull() && m_related_searches_isValid;

    m_result_count_isValid = ::OpenAPI::fromJsonValue(m_result_count, json[QString("result_count")]);
    m_result_count_isSet = !json[QString("result_count")].isNull() && m_result_count_isValid;

    m_videos_isValid = ::OpenAPI::fromJsonValue(m_videos, json[QString("videos")]);
    m_videos_isSet = !json[QString("videos")].isNull() && m_videos_isValid;
}

QString OAICreativeVideoSearchResults::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAICreativeVideoSearchResults::asJsonObject() const {
    QJsonObject obj;
    if (m_auto_corrections.isSet()) {
        obj.insert(QString("auto_corrections"), ::OpenAPI::toJsonValue(m_auto_corrections));
    }
    if (m_facets.isSet()) {
        obj.insert(QString("facets"), ::OpenAPI::toJsonValue(m_facets));
    }
    if (m_related_searches.size() > 0) {
        obj.insert(QString("related_searches"), ::OpenAPI::toJsonValue(m_related_searches));
    }
    if (m_result_count_isSet) {
        obj.insert(QString("result_count"), ::OpenAPI::toJsonValue(m_result_count));
    }
    if (m_videos.size() > 0) {
        obj.insert(QString("videos"), ::OpenAPI::toJsonValue(m_videos));
    }
    return obj;
}

OAIAutoCorrections OAICreativeVideoSearchResults::getAutoCorrections() const {
    return m_auto_corrections;
}
void OAICreativeVideoSearchResults::setAutoCorrections(const OAIAutoCorrections &auto_corrections) {
    m_auto_corrections = auto_corrections;
    m_auto_corrections_isSet = true;
}

bool OAICreativeVideoSearchResults::is_auto_corrections_Set() const{
    return m_auto_corrections_isSet;
}

bool OAICreativeVideoSearchResults::is_auto_corrections_Valid() const{
    return m_auto_corrections_isValid;
}

OAISearchFacetsResponse OAICreativeVideoSearchResults::getFacets() const {
    return m_facets;
}
void OAICreativeVideoSearchResults::setFacets(const OAISearchFacetsResponse &facets) {
    m_facets = facets;
    m_facets_isSet = true;
}

bool OAICreativeVideoSearchResults::is_facets_Set() const{
    return m_facets_isSet;
}

bool OAICreativeVideoSearchResults::is_facets_Valid() const{
    return m_facets_isValid;
}

QList<OAIRelatedSearch> OAICreativeVideoSearchResults::getRelatedSearches() const {
    return m_related_searches;
}
void OAICreativeVideoSearchResults::setRelatedSearches(const QList<OAIRelatedSearch> &related_searches) {
    m_related_searches = related_searches;
    m_related_searches_isSet = true;
}

bool OAICreativeVideoSearchResults::is_related_searches_Set() const{
    return m_related_searches_isSet;
}

bool OAICreativeVideoSearchResults::is_related_searches_Valid() const{
    return m_related_searches_isValid;
}

qint32 OAICreativeVideoSearchResults::getResultCount() const {
    return m_result_count;
}
void OAICreativeVideoSearchResults::setResultCount(const qint32 &result_count) {
    m_result_count = result_count;
    m_result_count_isSet = true;
}

bool OAICreativeVideoSearchResults::is_result_count_Set() const{
    return m_result_count_isSet;
}

bool OAICreativeVideoSearchResults::is_result_count_Valid() const{
    return m_result_count_isValid;
}

QList<OAICreativeVideoSearchItem> OAICreativeVideoSearchResults::getVideos() const {
    return m_videos;
}
void OAICreativeVideoSearchResults::setVideos(const QList<OAICreativeVideoSearchItem> &videos) {
    m_videos = videos;
    m_videos_isSet = true;
}

bool OAICreativeVideoSearchResults::is_videos_Set() const{
    return m_videos_isSet;
}

bool OAICreativeVideoSearchResults::is_videos_Valid() const{
    return m_videos_isValid;
}

bool OAICreativeVideoSearchResults::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_auto_corrections.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_facets.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_related_searches.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_result_count_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_videos.size() > 0) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAICreativeVideoSearchResults::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
