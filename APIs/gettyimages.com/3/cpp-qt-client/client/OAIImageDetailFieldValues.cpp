/**
 * Getty Images
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 3
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIImageDetailFieldValues.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIImageDetailFieldValues::OAIImageDetailFieldValues(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIImageDetailFieldValues::OAIImageDetailFieldValues() {
    this->initializeModel();
}

OAIImageDetailFieldValues::~OAIImageDetailFieldValues() {}

void OAIImageDetailFieldValues::initializeModel() {

    m_value_isSet = false;
    m_value_isValid = false;
    m_value = eOAIImageDetailFieldValues::INVALID_VALUE_OPENAPI_GENERATED;
}

void OAIImageDetailFieldValues::fromJson(QString jsonString) {
    
    if ( jsonString.compare("allowed_use", Qt::CaseInsensitive) == 0) {
        m_value = eOAIImageDetailFieldValues::ALLOWED_USE;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("alternative_ids", Qt::CaseInsensitive) == 0) {
        m_value = eOAIImageDetailFieldValues::ALTERNATIVE_IDS;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("artist", Qt::CaseInsensitive) == 0) {
        m_value = eOAIImageDetailFieldValues::ARTIST;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("artist_title", Qt::CaseInsensitive) == 0) {
        m_value = eOAIImageDetailFieldValues::ARTIST_TITLE;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("asset_family", Qt::CaseInsensitive) == 0) {
        m_value = eOAIImageDetailFieldValues::ASSET_FAMILY;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("call_for_image", Qt::CaseInsensitive) == 0) {
        m_value = eOAIImageDetailFieldValues::CALL_FOR_IMAGE;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("caption", Qt::CaseInsensitive) == 0) {
        m_value = eOAIImageDetailFieldValues::CAPTION;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("city", Qt::CaseInsensitive) == 0) {
        m_value = eOAIImageDetailFieldValues::CITY;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("collection_code", Qt::CaseInsensitive) == 0) {
        m_value = eOAIImageDetailFieldValues::COLLECTION_CODE;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("collection_id", Qt::CaseInsensitive) == 0) {
        m_value = eOAIImageDetailFieldValues::COLLECTION_ID;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("collection_name", Qt::CaseInsensitive) == 0) {
        m_value = eOAIImageDetailFieldValues::COLLECTION_NAME;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("color_type", Qt::CaseInsensitive) == 0) {
        m_value = eOAIImageDetailFieldValues::COLOR_TYPE;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("comp", Qt::CaseInsensitive) == 0) {
        m_value = eOAIImageDetailFieldValues::COMP;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("copyright", Qt::CaseInsensitive) == 0) {
        m_value = eOAIImageDetailFieldValues::COPYRIGHT;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("country", Qt::CaseInsensitive) == 0) {
        m_value = eOAIImageDetailFieldValues::COUNTRY;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("credit_line", Qt::CaseInsensitive) == 0) {
        m_value = eOAIImageDetailFieldValues::CREDIT_LINE;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("date_camera_shot", Qt::CaseInsensitive) == 0) {
        m_value = eOAIImageDetailFieldValues::DATE_CAMERA_SHOT;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("date_created", Qt::CaseInsensitive) == 0) {
        m_value = eOAIImageDetailFieldValues::DATE_CREATED;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("date_submitted", Qt::CaseInsensitive) == 0) {
        m_value = eOAIImageDetailFieldValues::DATE_SUBMITTED;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("detail_set", Qt::CaseInsensitive) == 0) {
        m_value = eOAIImageDetailFieldValues::DETAIL_SET;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("display_set", Qt::CaseInsensitive) == 0) {
        m_value = eOAIImageDetailFieldValues::DISPLAY_SET;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("download_sizes", Qt::CaseInsensitive) == 0) {
        m_value = eOAIImageDetailFieldValues::DOWNLOAD_SIZES;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("download_product", Qt::CaseInsensitive) == 0) {
        m_value = eOAIImageDetailFieldValues::DOWNLOAD_PRODUCT;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("downloads", Qt::CaseInsensitive) == 0) {
        m_value = eOAIImageDetailFieldValues::DOWNLOADS;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("editorial_segments", Qt::CaseInsensitive) == 0) {
        m_value = eOAIImageDetailFieldValues::EDITORIAL_SEGMENTS;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("editorial_source", Qt::CaseInsensitive) == 0) {
        m_value = eOAIImageDetailFieldValues::EDITORIAL_SOURCE;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("entity_details", Qt::CaseInsensitive) == 0) {
        m_value = eOAIImageDetailFieldValues::ENTITY_DETAILS;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("event_ids", Qt::CaseInsensitive) == 0) {
        m_value = eOAIImageDetailFieldValues::EVENT_IDS;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("graphical_style", Qt::CaseInsensitive) == 0) {
        m_value = eOAIImageDetailFieldValues::GRAPHICAL_STYLE;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("id", Qt::CaseInsensitive) == 0) {
        m_value = eOAIImageDetailFieldValues::ID;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("istock_collection", Qt::CaseInsensitive) == 0) {
        m_value = eOAIImageDetailFieldValues::ISTOCK_COLLECTION;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("istock_licenses", Qt::CaseInsensitive) == 0) {
        m_value = eOAIImageDetailFieldValues::ISTOCK_LICENSES;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("keywords", Qt::CaseInsensitive) == 0) {
        m_value = eOAIImageDetailFieldValues::KEYWORDS;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("largest_downloads", Qt::CaseInsensitive) == 0) {
        m_value = eOAIImageDetailFieldValues::LARGEST_DOWNLOADS;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("license_model", Qt::CaseInsensitive) == 0) {
        m_value = eOAIImageDetailFieldValues::LICENSE_MODEL;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("links", Qt::CaseInsensitive) == 0) {
        m_value = eOAIImageDetailFieldValues::LINKS;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("max_dimensions", Qt::CaseInsensitive) == 0) {
        m_value = eOAIImageDetailFieldValues::MAX_DIMENSIONS;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("object_name", Qt::CaseInsensitive) == 0) {
        m_value = eOAIImageDetailFieldValues::OBJECT_NAME;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("orientation", Qt::CaseInsensitive) == 0) {
        m_value = eOAIImageDetailFieldValues::ORIENTATION;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("people", Qt::CaseInsensitive) == 0) {
        m_value = eOAIImageDetailFieldValues::PEOPLE;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("preview", Qt::CaseInsensitive) == 0) {
        m_value = eOAIImageDetailFieldValues::PREVIEW;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("product_types", Qt::CaseInsensitive) == 0) {
        m_value = eOAIImageDetailFieldValues::PRODUCT_TYPES;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("quality_rank", Qt::CaseInsensitive) == 0) {
        m_value = eOAIImageDetailFieldValues::QUALITY_RANK;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("referral_destinations", Qt::CaseInsensitive) == 0) {
        m_value = eOAIImageDetailFieldValues::REFERRAL_DESTINATIONS;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("state_province", Qt::CaseInsensitive) == 0) {
        m_value = eOAIImageDetailFieldValues::STATE_PROVINCE;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("summary_set", Qt::CaseInsensitive) == 0) {
        m_value = eOAIImageDetailFieldValues::SUMMARY_SET;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("thumb", Qt::CaseInsensitive) == 0) {
        m_value = eOAIImageDetailFieldValues::THUMB;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("title", Qt::CaseInsensitive) == 0) {
        m_value = eOAIImageDetailFieldValues::TITLE;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("uri_oembed", Qt::CaseInsensitive) == 0) {
        m_value = eOAIImageDetailFieldValues::URI_OEMBED;
        m_value_isSet = m_value_isValid = true;
    }
}

void OAIImageDetailFieldValues::fromJsonValue(QJsonValue json) {
fromJson(json.toString());
}

QString OAIImageDetailFieldValues::asJson() const {
    
    QString val;
    switch (m_value){
        case eOAIImageDetailFieldValues::ALLOWED_USE:
            val = "allowed_use";
            break;
        case eOAIImageDetailFieldValues::ALTERNATIVE_IDS:
            val = "alternative_ids";
            break;
        case eOAIImageDetailFieldValues::ARTIST:
            val = "artist";
            break;
        case eOAIImageDetailFieldValues::ARTIST_TITLE:
            val = "artist_title";
            break;
        case eOAIImageDetailFieldValues::ASSET_FAMILY:
            val = "asset_family";
            break;
        case eOAIImageDetailFieldValues::CALL_FOR_IMAGE:
            val = "call_for_image";
            break;
        case eOAIImageDetailFieldValues::CAPTION:
            val = "caption";
            break;
        case eOAIImageDetailFieldValues::CITY:
            val = "city";
            break;
        case eOAIImageDetailFieldValues::COLLECTION_CODE:
            val = "collection_code";
            break;
        case eOAIImageDetailFieldValues::COLLECTION_ID:
            val = "collection_id";
            break;
        case eOAIImageDetailFieldValues::COLLECTION_NAME:
            val = "collection_name";
            break;
        case eOAIImageDetailFieldValues::COLOR_TYPE:
            val = "color_type";
            break;
        case eOAIImageDetailFieldValues::COMP:
            val = "comp";
            break;
        case eOAIImageDetailFieldValues::COPYRIGHT:
            val = "copyright";
            break;
        case eOAIImageDetailFieldValues::COUNTRY:
            val = "country";
            break;
        case eOAIImageDetailFieldValues::CREDIT_LINE:
            val = "credit_line";
            break;
        case eOAIImageDetailFieldValues::DATE_CAMERA_SHOT:
            val = "date_camera_shot";
            break;
        case eOAIImageDetailFieldValues::DATE_CREATED:
            val = "date_created";
            break;
        case eOAIImageDetailFieldValues::DATE_SUBMITTED:
            val = "date_submitted";
            break;
        case eOAIImageDetailFieldValues::DETAIL_SET:
            val = "detail_set";
            break;
        case eOAIImageDetailFieldValues::DISPLAY_SET:
            val = "display_set";
            break;
        case eOAIImageDetailFieldValues::DOWNLOAD_SIZES:
            val = "download_sizes";
            break;
        case eOAIImageDetailFieldValues::DOWNLOAD_PRODUCT:
            val = "download_product";
            break;
        case eOAIImageDetailFieldValues::DOWNLOADS:
            val = "downloads";
            break;
        case eOAIImageDetailFieldValues::EDITORIAL_SEGMENTS:
            val = "editorial_segments";
            break;
        case eOAIImageDetailFieldValues::EDITORIAL_SOURCE:
            val = "editorial_source";
            break;
        case eOAIImageDetailFieldValues::ENTITY_DETAILS:
            val = "entity_details";
            break;
        case eOAIImageDetailFieldValues::EVENT_IDS:
            val = "event_ids";
            break;
        case eOAIImageDetailFieldValues::GRAPHICAL_STYLE:
            val = "graphical_style";
            break;
        case eOAIImageDetailFieldValues::ID:
            val = "id";
            break;
        case eOAIImageDetailFieldValues::ISTOCK_COLLECTION:
            val = "istock_collection";
            break;
        case eOAIImageDetailFieldValues::ISTOCK_LICENSES:
            val = "istock_licenses";
            break;
        case eOAIImageDetailFieldValues::KEYWORDS:
            val = "keywords";
            break;
        case eOAIImageDetailFieldValues::LARGEST_DOWNLOADS:
            val = "largest_downloads";
            break;
        case eOAIImageDetailFieldValues::LICENSE_MODEL:
            val = "license_model";
            break;
        case eOAIImageDetailFieldValues::LINKS:
            val = "links";
            break;
        case eOAIImageDetailFieldValues::MAX_DIMENSIONS:
            val = "max_dimensions";
            break;
        case eOAIImageDetailFieldValues::OBJECT_NAME:
            val = "object_name";
            break;
        case eOAIImageDetailFieldValues::ORIENTATION:
            val = "orientation";
            break;
        case eOAIImageDetailFieldValues::PEOPLE:
            val = "people";
            break;
        case eOAIImageDetailFieldValues::PREVIEW:
            val = "preview";
            break;
        case eOAIImageDetailFieldValues::PRODUCT_TYPES:
            val = "product_types";
            break;
        case eOAIImageDetailFieldValues::QUALITY_RANK:
            val = "quality_rank";
            break;
        case eOAIImageDetailFieldValues::REFERRAL_DESTINATIONS:
            val = "referral_destinations";
            break;
        case eOAIImageDetailFieldValues::STATE_PROVINCE:
            val = "state_province";
            break;
        case eOAIImageDetailFieldValues::SUMMARY_SET:
            val = "summary_set";
            break;
        case eOAIImageDetailFieldValues::THUMB:
            val = "thumb";
            break;
        case eOAIImageDetailFieldValues::TITLE:
            val = "title";
            break;
        case eOAIImageDetailFieldValues::URI_OEMBED:
            val = "uri_oembed";
            break;
        default:
            break;
    }
    return val;
}

QJsonValue OAIImageDetailFieldValues::asJsonValue() const {
    
    return QJsonValue(asJson());
}


OAIImageDetailFieldValues::eOAIImageDetailFieldValues OAIImageDetailFieldValues::getValue() const {
    return m_value;
}

void OAIImageDetailFieldValues::setValue(const OAIImageDetailFieldValues::eOAIImageDetailFieldValues& value){
    m_value = value;
    m_value_isSet = true;
}
bool OAIImageDetailFieldValues::isSet() const {
    
    return m_value_isSet;
}

bool OAIImageDetailFieldValues::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_value_isValid;
}

} // namespace OpenAPI
