/**
 * Getty Images
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 3
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#ifndef OAI_OAIBoardsApi_H
#define OAI_OAIBoardsApi_H

#include "OAIHelpers.h"
#include "OAIHttpRequest.h"
#include "OAIServerConfiguration.h"
#include "OAIOauth.h"

#include "OAIAddBoardAssetsResult.h"
#include "OAIBoardAsset.h"
#include "OAIBoardCreated.h"
#include "OAIBoardDetail.h"
#include "OAIBoardInfo.h"
#include "OAIBoardList.h"
#include "OAIBoardRelationship.h"
#include "OAIBoardSortOrder.h"
#include "OAICommentCreated.h"
#include "OAICommentRequest.h"
#include "OAICommentsList.h"
#include <QString>

#include <QObject>
#include <QByteArray>
#include <QStringList>
#include <QList>
#include <QNetworkAccessManager>

namespace OpenAPI {

class OAIBoardsApi : public QObject {
    Q_OBJECT

public:
    OAIBoardsApi(const int timeOut = 0);
    ~OAIBoardsApi();

    void initializeServerConfigs();
    int setDefaultServerValue(int serverIndex,const QString &operation, const QString &variable,const QString &val);
    void setServerIndex(const QString &operation, int serverIndex);
    void setApiKey(const QString &apiKeyName, const QString &apiKey);
    void setBearerToken(const QString &token);
    void setUsername(const QString &username);
    void setPassword(const QString &password);
    void setTimeOut(const int timeOut);
    void setWorkingDirectory(const QString &path);
    void setNetworkAccessManager(QNetworkAccessManager* manager);
    int addServerConfiguration(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables = QMap<QString, OAIServerVariable>());
    void setNewServerForAllOperations(const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void setNewServer(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void addHeaders(const QString &key, const QString &value);
    void enableRequestCompression();
    void enableResponseCompression();
    void abortRequests();
    QString getParamStylePrefix(const QString &style);
    QString getParamStyleSuffix(const QString &style);
    QString getParamStyleDelimiter(const QString &style, const QString &name, bool isExplode);

    /**
    * @param[in]  board_id QString [required]
    * @param[in]  asset_id QString [required]
    * @param[in]  accept_language QString [optional]
    */
    virtual void v3BoardsBoardIdAssetsAssetIdDelete(const QString &board_id, const QString &asset_id, const ::OpenAPI::OptionalParam<QString> &accept_language = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  board_id QString [required]
    * @param[in]  asset_id QString [required]
    * @param[in]  accept_language QString [optional]
    */
    virtual void v3BoardsBoardIdAssetsAssetIdPut(const QString &board_id, const QString &asset_id, const ::OpenAPI::OptionalParam<QString> &accept_language = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  board_id QString [required]
    * @param[in]  accept_language QString [optional]
    * @param[in]  asset_ids QList<QString> [optional]
    */
    virtual void v3BoardsBoardIdAssetsDelete(const QString &board_id, const ::OpenAPI::OptionalParam<QString> &accept_language = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QList<QString>> &asset_ids = ::OpenAPI::OptionalParam<QList<QString>>());

    /**
    * @param[in]  board_id QString [required]
    * @param[in]  accept_language QString [optional]
    * @param[in]  oai_board_asset QList<OAIBoardAsset> [optional]
    */
    virtual void v3BoardsBoardIdAssetsPut(const QString &board_id, const ::OpenAPI::OptionalParam<QString> &accept_language = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QList<OAIBoardAsset>> &oai_board_asset = ::OpenAPI::OptionalParam<QList<OAIBoardAsset>>());

    /**
    * @param[in]  board_id QString [required]
    * @param[in]  comment_id QString [required]
    * @param[in]  accept_language QString [optional]
    */
    virtual void v3BoardsBoardIdCommentsCommentIdDelete(const QString &board_id, const QString &comment_id, const ::OpenAPI::OptionalParam<QString> &accept_language = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  board_id QString [required]
    * @param[in]  accept_language QString [optional]
    */
    virtual void v3BoardsBoardIdCommentsGet(const QString &board_id, const ::OpenAPI::OptionalParam<QString> &accept_language = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  board_id QString [required]
    * @param[in]  accept_language QString [optional]
    * @param[in]  oai_comment_request OAICommentRequest [optional]
    */
    virtual void v3BoardsBoardIdCommentsPost(const QString &board_id, const ::OpenAPI::OptionalParam<QString> &accept_language = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<OAICommentRequest> &oai_comment_request = ::OpenAPI::OptionalParam<OAICommentRequest>());

    /**
    * @param[in]  board_id QString [required]
    * @param[in]  accept_language QString [optional]
    */
    virtual void v3BoardsBoardIdDelete(const QString &board_id, const ::OpenAPI::OptionalParam<QString> &accept_language = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  board_id QString [required]
    * @param[in]  accept_language QString [optional]
    */
    virtual void v3BoardsBoardIdGet(const QString &board_id, const ::OpenAPI::OptionalParam<QString> &accept_language = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  board_id QString [required]
    * @param[in]  accept_language QString [optional]
    * @param[in]  oai_board_info OAIBoardInfo [optional]
    */
    virtual void v3BoardsBoardIdPut(const QString &board_id, const ::OpenAPI::OptionalParam<QString> &accept_language = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<OAIBoardInfo> &oai_board_info = ::OpenAPI::OptionalParam<OAIBoardInfo>());

    /**
    * @param[in]  accept_language QString [optional]
    * @param[in]  page qint32 [optional]
    * @param[in]  board_relationship OAIBoardRelationship [optional]
    * @param[in]  sort_order OAIBoardSortOrder [optional]
    * @param[in]  page_size qint32 [optional]
    */
    virtual void v3BoardsGet(const ::OpenAPI::OptionalParam<QString> &accept_language = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<qint32> &page = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<OAIBoardRelationship> &board_relationship = ::OpenAPI::OptionalParam<OAIBoardRelationship>(), const ::OpenAPI::OptionalParam<OAIBoardSortOrder> &sort_order = ::OpenAPI::OptionalParam<OAIBoardSortOrder>(), const ::OpenAPI::OptionalParam<qint32> &page_size = ::OpenAPI::OptionalParam<qint32>());

    /**
    * @param[in]  accept_language QString [optional]
    * @param[in]  oai_board_info OAIBoardInfo [optional]
    */
    virtual void v3BoardsPost(const ::OpenAPI::OptionalParam<QString> &accept_language = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<OAIBoardInfo> &oai_board_info = ::OpenAPI::OptionalParam<OAIBoardInfo>());


private:
    QMap<QString,int> _serverIndices;
    QMap<QString,QList<OAIServerConfiguration>> _serverConfigs;
    QMap<QString, QString> _apiKeys;
    QString _bearerToken;
    QString _username;
    QString _password;
    int _timeOut;
    QString _workingDirectory;
    QNetworkAccessManager* _manager;
    QMap<QString, QString> _defaultHeaders;
    bool _isResponseCompressionEnabled;
    bool _isRequestCompressionEnabled;
    OAIHttpRequestInput _latestInput;
    OAIHttpRequestWorker *_latestWorker;
    QStringList _latestScope;
    OauthCode _authFlow;
    OauthImplicit _implicitFlow;
    OauthCredentials _credentialFlow;
    OauthPassword _passwordFlow;
    int _OauthMethod = 0;

    void v3BoardsBoardIdAssetsAssetIdDeleteCallback(OAIHttpRequestWorker *worker);
    void v3BoardsBoardIdAssetsAssetIdPutCallback(OAIHttpRequestWorker *worker);
    void v3BoardsBoardIdAssetsDeleteCallback(OAIHttpRequestWorker *worker);
    void v3BoardsBoardIdAssetsPutCallback(OAIHttpRequestWorker *worker);
    void v3BoardsBoardIdCommentsCommentIdDeleteCallback(OAIHttpRequestWorker *worker);
    void v3BoardsBoardIdCommentsGetCallback(OAIHttpRequestWorker *worker);
    void v3BoardsBoardIdCommentsPostCallback(OAIHttpRequestWorker *worker);
    void v3BoardsBoardIdDeleteCallback(OAIHttpRequestWorker *worker);
    void v3BoardsBoardIdGetCallback(OAIHttpRequestWorker *worker);
    void v3BoardsBoardIdPutCallback(OAIHttpRequestWorker *worker);
    void v3BoardsGetCallback(OAIHttpRequestWorker *worker);
    void v3BoardsPostCallback(OAIHttpRequestWorker *worker);

Q_SIGNALS:

    void v3BoardsBoardIdAssetsAssetIdDeleteSignal();
    void v3BoardsBoardIdAssetsAssetIdPutSignal();
    void v3BoardsBoardIdAssetsDeleteSignal();
    void v3BoardsBoardIdAssetsPutSignal(OAIAddBoardAssetsResult summary);
    void v3BoardsBoardIdCommentsCommentIdDeleteSignal();
    void v3BoardsBoardIdCommentsGetSignal(OAICommentsList summary);
    void v3BoardsBoardIdCommentsPostSignal(OAICommentCreated summary);
    void v3BoardsBoardIdDeleteSignal();
    void v3BoardsBoardIdGetSignal(OAIBoardDetail summary);
    void v3BoardsBoardIdPutSignal();
    void v3BoardsGetSignal(OAIBoardList summary);
    void v3BoardsPostSignal(OAIBoardCreated summary);


    void v3BoardsBoardIdAssetsAssetIdDeleteSignalFull(OAIHttpRequestWorker *worker);
    void v3BoardsBoardIdAssetsAssetIdPutSignalFull(OAIHttpRequestWorker *worker);
    void v3BoardsBoardIdAssetsDeleteSignalFull(OAIHttpRequestWorker *worker);
    void v3BoardsBoardIdAssetsPutSignalFull(OAIHttpRequestWorker *worker, OAIAddBoardAssetsResult summary);
    void v3BoardsBoardIdCommentsCommentIdDeleteSignalFull(OAIHttpRequestWorker *worker);
    void v3BoardsBoardIdCommentsGetSignalFull(OAIHttpRequestWorker *worker, OAICommentsList summary);
    void v3BoardsBoardIdCommentsPostSignalFull(OAIHttpRequestWorker *worker, OAICommentCreated summary);
    void v3BoardsBoardIdDeleteSignalFull(OAIHttpRequestWorker *worker);
    void v3BoardsBoardIdGetSignalFull(OAIHttpRequestWorker *worker, OAIBoardDetail summary);
    void v3BoardsBoardIdPutSignalFull(OAIHttpRequestWorker *worker);
    void v3BoardsGetSignalFull(OAIHttpRequestWorker *worker, OAIBoardList summary);
    void v3BoardsPostSignalFull(OAIHttpRequestWorker *worker, OAIBoardCreated summary);

    Q_DECL_DEPRECATED_X("Use v3BoardsBoardIdAssetsAssetIdDeleteSignalError() instead")
    void v3BoardsBoardIdAssetsAssetIdDeleteSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void v3BoardsBoardIdAssetsAssetIdDeleteSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use v3BoardsBoardIdAssetsAssetIdPutSignalError() instead")
    void v3BoardsBoardIdAssetsAssetIdPutSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void v3BoardsBoardIdAssetsAssetIdPutSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use v3BoardsBoardIdAssetsDeleteSignalError() instead")
    void v3BoardsBoardIdAssetsDeleteSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void v3BoardsBoardIdAssetsDeleteSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use v3BoardsBoardIdAssetsPutSignalError() instead")
    void v3BoardsBoardIdAssetsPutSignalE(OAIAddBoardAssetsResult summary, QNetworkReply::NetworkError error_type, QString error_str);
    void v3BoardsBoardIdAssetsPutSignalError(OAIAddBoardAssetsResult summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use v3BoardsBoardIdCommentsCommentIdDeleteSignalError() instead")
    void v3BoardsBoardIdCommentsCommentIdDeleteSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void v3BoardsBoardIdCommentsCommentIdDeleteSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use v3BoardsBoardIdCommentsGetSignalError() instead")
    void v3BoardsBoardIdCommentsGetSignalE(OAICommentsList summary, QNetworkReply::NetworkError error_type, QString error_str);
    void v3BoardsBoardIdCommentsGetSignalError(OAICommentsList summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use v3BoardsBoardIdCommentsPostSignalError() instead")
    void v3BoardsBoardIdCommentsPostSignalE(OAICommentCreated summary, QNetworkReply::NetworkError error_type, QString error_str);
    void v3BoardsBoardIdCommentsPostSignalError(OAICommentCreated summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use v3BoardsBoardIdDeleteSignalError() instead")
    void v3BoardsBoardIdDeleteSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void v3BoardsBoardIdDeleteSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use v3BoardsBoardIdGetSignalError() instead")
    void v3BoardsBoardIdGetSignalE(OAIBoardDetail summary, QNetworkReply::NetworkError error_type, QString error_str);
    void v3BoardsBoardIdGetSignalError(OAIBoardDetail summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use v3BoardsBoardIdPutSignalError() instead")
    void v3BoardsBoardIdPutSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void v3BoardsBoardIdPutSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use v3BoardsGetSignalError() instead")
    void v3BoardsGetSignalE(OAIBoardList summary, QNetworkReply::NetworkError error_type, QString error_str);
    void v3BoardsGetSignalError(OAIBoardList summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use v3BoardsPostSignalError() instead")
    void v3BoardsPostSignalE(OAIBoardCreated summary, QNetworkReply::NetworkError error_type, QString error_str);
    void v3BoardsPostSignalError(OAIBoardCreated summary, QNetworkReply::NetworkError error_type, const QString &error_str);

    Q_DECL_DEPRECATED_X("Use v3BoardsBoardIdAssetsAssetIdDeleteSignalErrorFull() instead")
    void v3BoardsBoardIdAssetsAssetIdDeleteSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void v3BoardsBoardIdAssetsAssetIdDeleteSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use v3BoardsBoardIdAssetsAssetIdPutSignalErrorFull() instead")
    void v3BoardsBoardIdAssetsAssetIdPutSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void v3BoardsBoardIdAssetsAssetIdPutSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use v3BoardsBoardIdAssetsDeleteSignalErrorFull() instead")
    void v3BoardsBoardIdAssetsDeleteSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void v3BoardsBoardIdAssetsDeleteSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use v3BoardsBoardIdAssetsPutSignalErrorFull() instead")
    void v3BoardsBoardIdAssetsPutSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void v3BoardsBoardIdAssetsPutSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use v3BoardsBoardIdCommentsCommentIdDeleteSignalErrorFull() instead")
    void v3BoardsBoardIdCommentsCommentIdDeleteSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void v3BoardsBoardIdCommentsCommentIdDeleteSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use v3BoardsBoardIdCommentsGetSignalErrorFull() instead")
    void v3BoardsBoardIdCommentsGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void v3BoardsBoardIdCommentsGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use v3BoardsBoardIdCommentsPostSignalErrorFull() instead")
    void v3BoardsBoardIdCommentsPostSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void v3BoardsBoardIdCommentsPostSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use v3BoardsBoardIdDeleteSignalErrorFull() instead")
    void v3BoardsBoardIdDeleteSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void v3BoardsBoardIdDeleteSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use v3BoardsBoardIdGetSignalErrorFull() instead")
    void v3BoardsBoardIdGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void v3BoardsBoardIdGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use v3BoardsBoardIdPutSignalErrorFull() instead")
    void v3BoardsBoardIdPutSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void v3BoardsBoardIdPutSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use v3BoardsGetSignalErrorFull() instead")
    void v3BoardsGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void v3BoardsGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use v3BoardsPostSignalErrorFull() instead")
    void v3BoardsPostSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void v3BoardsPostSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);

    void abortRequestsSignal();
    void allPendingRequestsCompleted();

public Q_SLOTS:
    void tokenAvailable();
};

} // namespace OpenAPI
#endif
