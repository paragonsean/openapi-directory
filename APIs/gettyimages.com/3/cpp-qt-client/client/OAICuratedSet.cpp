/**
 * Getty Images
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 3
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAICuratedSet.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAICuratedSet::OAICuratedSet(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAICuratedSet::OAICuratedSet() {
    this->initializeModel();
}

OAICuratedSet::~OAICuratedSet() {}

void OAICuratedSet::initializeModel() {

    m_assets_isSet = false;
    m_assets_isValid = false;

    m_date_created_isSet = false;
    m_date_created_isValid = false;

    m_date_last_updated_isSet = false;
    m_date_last_updated_isValid = false;

    m_description_isSet = false;
    m_description_isValid = false;

    m_hero_image_uri_isSet = false;
    m_hero_image_uri_isValid = false;

    m_keywords_isSet = false;
    m_keywords_isValid = false;

    m_set_id_isSet = false;
    m_set_id_isValid = false;

    m_title_isSet = false;
    m_title_isValid = false;
}

void OAICuratedSet::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAICuratedSet::fromJsonObject(QJsonObject json) {

    m_assets_isValid = ::OpenAPI::fromJsonValue(m_assets, json[QString("assets")]);
    m_assets_isSet = !json[QString("assets")].isNull() && m_assets_isValid;

    m_date_created_isValid = ::OpenAPI::fromJsonValue(m_date_created, json[QString("date_created")]);
    m_date_created_isSet = !json[QString("date_created")].isNull() && m_date_created_isValid;

    m_date_last_updated_isValid = ::OpenAPI::fromJsonValue(m_date_last_updated, json[QString("date_last_updated")]);
    m_date_last_updated_isSet = !json[QString("date_last_updated")].isNull() && m_date_last_updated_isValid;

    m_description_isValid = ::OpenAPI::fromJsonValue(m_description, json[QString("description")]);
    m_description_isSet = !json[QString("description")].isNull() && m_description_isValid;

    m_hero_image_uri_isValid = ::OpenAPI::fromJsonValue(m_hero_image_uri, json[QString("hero_image_uri")]);
    m_hero_image_uri_isSet = !json[QString("hero_image_uri")].isNull() && m_hero_image_uri_isValid;

    m_keywords_isValid = ::OpenAPI::fromJsonValue(m_keywords, json[QString("keywords")]);
    m_keywords_isSet = !json[QString("keywords")].isNull() && m_keywords_isValid;

    m_set_id_isValid = ::OpenAPI::fromJsonValue(m_set_id, json[QString("set_id")]);
    m_set_id_isSet = !json[QString("set_id")].isNull() && m_set_id_isValid;

    m_title_isValid = ::OpenAPI::fromJsonValue(m_title, json[QString("title")]);
    m_title_isSet = !json[QString("title")].isNull() && m_title_isValid;
}

QString OAICuratedSet::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAICuratedSet::asJsonObject() const {
    QJsonObject obj;
    if (m_assets.size() > 0) {
        obj.insert(QString("assets"), ::OpenAPI::toJsonValue(m_assets));
    }
    if (m_date_created_isSet) {
        obj.insert(QString("date_created"), ::OpenAPI::toJsonValue(m_date_created));
    }
    if (m_date_last_updated_isSet) {
        obj.insert(QString("date_last_updated"), ::OpenAPI::toJsonValue(m_date_last_updated));
    }
    if (m_description_isSet) {
        obj.insert(QString("description"), ::OpenAPI::toJsonValue(m_description));
    }
    if (m_hero_image_uri_isSet) {
        obj.insert(QString("hero_image_uri"), ::OpenAPI::toJsonValue(m_hero_image_uri));
    }
    if (m_keywords.size() > 0) {
        obj.insert(QString("keywords"), ::OpenAPI::toJsonValue(m_keywords));
    }
    if (m_set_id_isSet) {
        obj.insert(QString("set_id"), ::OpenAPI::toJsonValue(m_set_id));
    }
    if (m_title_isSet) {
        obj.insert(QString("title"), ::OpenAPI::toJsonValue(m_title));
    }
    return obj;
}

QList<QString> OAICuratedSet::getAssets() const {
    return m_assets;
}
void OAICuratedSet::setAssets(const QList<QString> &assets) {
    m_assets = assets;
    m_assets_isSet = true;
}

bool OAICuratedSet::is_assets_Set() const{
    return m_assets_isSet;
}

bool OAICuratedSet::is_assets_Valid() const{
    return m_assets_isValid;
}

QDateTime OAICuratedSet::getDateCreated() const {
    return m_date_created;
}
void OAICuratedSet::setDateCreated(const QDateTime &date_created) {
    m_date_created = date_created;
    m_date_created_isSet = true;
}

bool OAICuratedSet::is_date_created_Set() const{
    return m_date_created_isSet;
}

bool OAICuratedSet::is_date_created_Valid() const{
    return m_date_created_isValid;
}

QDateTime OAICuratedSet::getDateLastUpdated() const {
    return m_date_last_updated;
}
void OAICuratedSet::setDateLastUpdated(const QDateTime &date_last_updated) {
    m_date_last_updated = date_last_updated;
    m_date_last_updated_isSet = true;
}

bool OAICuratedSet::is_date_last_updated_Set() const{
    return m_date_last_updated_isSet;
}

bool OAICuratedSet::is_date_last_updated_Valid() const{
    return m_date_last_updated_isValid;
}

QString OAICuratedSet::getDescription() const {
    return m_description;
}
void OAICuratedSet::setDescription(const QString &description) {
    m_description = description;
    m_description_isSet = true;
}

bool OAICuratedSet::is_description_Set() const{
    return m_description_isSet;
}

bool OAICuratedSet::is_description_Valid() const{
    return m_description_isValid;
}

QString OAICuratedSet::getHeroImageUri() const {
    return m_hero_image_uri;
}
void OAICuratedSet::setHeroImageUri(const QString &hero_image_uri) {
    m_hero_image_uri = hero_image_uri;
    m_hero_image_uri_isSet = true;
}

bool OAICuratedSet::is_hero_image_uri_Set() const{
    return m_hero_image_uri_isSet;
}

bool OAICuratedSet::is_hero_image_uri_Valid() const{
    return m_hero_image_uri_isValid;
}

QList<QString> OAICuratedSet::getKeywords() const {
    return m_keywords;
}
void OAICuratedSet::setKeywords(const QList<QString> &keywords) {
    m_keywords = keywords;
    m_keywords_isSet = true;
}

bool OAICuratedSet::is_keywords_Set() const{
    return m_keywords_isSet;
}

bool OAICuratedSet::is_keywords_Valid() const{
    return m_keywords_isValid;
}

QString OAICuratedSet::getSetId() const {
    return m_set_id;
}
void OAICuratedSet::setSetId(const QString &set_id) {
    m_set_id = set_id;
    m_set_id_isSet = true;
}

bool OAICuratedSet::is_set_id_Set() const{
    return m_set_id_isSet;
}

bool OAICuratedSet::is_set_id_Valid() const{
    return m_set_id_isValid;
}

QString OAICuratedSet::getTitle() const {
    return m_title;
}
void OAICuratedSet::setTitle(const QString &title) {
    m_title = title;
    m_title_isSet = true;
}

bool OAICuratedSet::is_title_Set() const{
    return m_title_isSet;
}

bool OAICuratedSet::is_title_Valid() const{
    return m_title_isValid;
}

bool OAICuratedSet::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_assets.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_date_created_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_date_last_updated_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_description_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_hero_image_uri_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_keywords.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_set_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_title_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAICuratedSet::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
