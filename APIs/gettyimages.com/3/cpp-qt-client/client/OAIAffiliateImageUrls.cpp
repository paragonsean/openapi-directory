/**
 * Getty Images
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 3
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIAffiliateImageUrls.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIAffiliateImageUrls::OAIAffiliateImageUrls(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIAffiliateImageUrls::OAIAffiliateImageUrls() {
    this->initializeModel();
}

OAIAffiliateImageUrls::~OAIAffiliateImageUrls() {}

void OAIAffiliateImageUrls::initializeModel() {

    m_large_isSet = false;
    m_large_isValid = false;

    m_large_height_isSet = false;
    m_large_height_isValid = false;

    m_large_width_isSet = false;
    m_large_width_isValid = false;

    m_medium_isSet = false;
    m_medium_isValid = false;

    m_medium_height_isSet = false;
    m_medium_height_isValid = false;

    m_medium_width_isSet = false;
    m_medium_width_isValid = false;

    m_small_isSet = false;
    m_small_isValid = false;

    m_small_height_isSet = false;
    m_small_height_isValid = false;

    m_small_width_isSet = false;
    m_small_width_isValid = false;
}

void OAIAffiliateImageUrls::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIAffiliateImageUrls::fromJsonObject(QJsonObject json) {

    m_large_isValid = ::OpenAPI::fromJsonValue(m_large, json[QString("large")]);
    m_large_isSet = !json[QString("large")].isNull() && m_large_isValid;

    m_large_height_isValid = ::OpenAPI::fromJsonValue(m_large_height, json[QString("large_height")]);
    m_large_height_isSet = !json[QString("large_height")].isNull() && m_large_height_isValid;

    m_large_width_isValid = ::OpenAPI::fromJsonValue(m_large_width, json[QString("large_width")]);
    m_large_width_isSet = !json[QString("large_width")].isNull() && m_large_width_isValid;

    m_medium_isValid = ::OpenAPI::fromJsonValue(m_medium, json[QString("medium")]);
    m_medium_isSet = !json[QString("medium")].isNull() && m_medium_isValid;

    m_medium_height_isValid = ::OpenAPI::fromJsonValue(m_medium_height, json[QString("medium_height")]);
    m_medium_height_isSet = !json[QString("medium_height")].isNull() && m_medium_height_isValid;

    m_medium_width_isValid = ::OpenAPI::fromJsonValue(m_medium_width, json[QString("medium_width")]);
    m_medium_width_isSet = !json[QString("medium_width")].isNull() && m_medium_width_isValid;

    m_small_isValid = ::OpenAPI::fromJsonValue(m_small, json[QString("small")]);
    m_small_isSet = !json[QString("small")].isNull() && m_small_isValid;

    m_small_height_isValid = ::OpenAPI::fromJsonValue(m_small_height, json[QString("small_height")]);
    m_small_height_isSet = !json[QString("small_height")].isNull() && m_small_height_isValid;

    m_small_width_isValid = ::OpenAPI::fromJsonValue(m_small_width, json[QString("small_width")]);
    m_small_width_isSet = !json[QString("small_width")].isNull() && m_small_width_isValid;
}

QString OAIAffiliateImageUrls::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIAffiliateImageUrls::asJsonObject() const {
    QJsonObject obj;
    if (m_large_isSet) {
        obj.insert(QString("large"), ::OpenAPI::toJsonValue(m_large));
    }
    if (m_large_height_isSet) {
        obj.insert(QString("large_height"), ::OpenAPI::toJsonValue(m_large_height));
    }
    if (m_large_width_isSet) {
        obj.insert(QString("large_width"), ::OpenAPI::toJsonValue(m_large_width));
    }
    if (m_medium_isSet) {
        obj.insert(QString("medium"), ::OpenAPI::toJsonValue(m_medium));
    }
    if (m_medium_height_isSet) {
        obj.insert(QString("medium_height"), ::OpenAPI::toJsonValue(m_medium_height));
    }
    if (m_medium_width_isSet) {
        obj.insert(QString("medium_width"), ::OpenAPI::toJsonValue(m_medium_width));
    }
    if (m_small_isSet) {
        obj.insert(QString("small"), ::OpenAPI::toJsonValue(m_small));
    }
    if (m_small_height_isSet) {
        obj.insert(QString("small_height"), ::OpenAPI::toJsonValue(m_small_height));
    }
    if (m_small_width_isSet) {
        obj.insert(QString("small_width"), ::OpenAPI::toJsonValue(m_small_width));
    }
    return obj;
}

QString OAIAffiliateImageUrls::getLarge() const {
    return m_large;
}
void OAIAffiliateImageUrls::setLarge(const QString &large) {
    m_large = large;
    m_large_isSet = true;
}

bool OAIAffiliateImageUrls::is_large_Set() const{
    return m_large_isSet;
}

bool OAIAffiliateImageUrls::is_large_Valid() const{
    return m_large_isValid;
}

qint32 OAIAffiliateImageUrls::getLargeHeight() const {
    return m_large_height;
}
void OAIAffiliateImageUrls::setLargeHeight(const qint32 &large_height) {
    m_large_height = large_height;
    m_large_height_isSet = true;
}

bool OAIAffiliateImageUrls::is_large_height_Set() const{
    return m_large_height_isSet;
}

bool OAIAffiliateImageUrls::is_large_height_Valid() const{
    return m_large_height_isValid;
}

qint32 OAIAffiliateImageUrls::getLargeWidth() const {
    return m_large_width;
}
void OAIAffiliateImageUrls::setLargeWidth(const qint32 &large_width) {
    m_large_width = large_width;
    m_large_width_isSet = true;
}

bool OAIAffiliateImageUrls::is_large_width_Set() const{
    return m_large_width_isSet;
}

bool OAIAffiliateImageUrls::is_large_width_Valid() const{
    return m_large_width_isValid;
}

QString OAIAffiliateImageUrls::getMedium() const {
    return m_medium;
}
void OAIAffiliateImageUrls::setMedium(const QString &medium) {
    m_medium = medium;
    m_medium_isSet = true;
}

bool OAIAffiliateImageUrls::is_medium_Set() const{
    return m_medium_isSet;
}

bool OAIAffiliateImageUrls::is_medium_Valid() const{
    return m_medium_isValid;
}

qint32 OAIAffiliateImageUrls::getMediumHeight() const {
    return m_medium_height;
}
void OAIAffiliateImageUrls::setMediumHeight(const qint32 &medium_height) {
    m_medium_height = medium_height;
    m_medium_height_isSet = true;
}

bool OAIAffiliateImageUrls::is_medium_height_Set() const{
    return m_medium_height_isSet;
}

bool OAIAffiliateImageUrls::is_medium_height_Valid() const{
    return m_medium_height_isValid;
}

qint32 OAIAffiliateImageUrls::getMediumWidth() const {
    return m_medium_width;
}
void OAIAffiliateImageUrls::setMediumWidth(const qint32 &medium_width) {
    m_medium_width = medium_width;
    m_medium_width_isSet = true;
}

bool OAIAffiliateImageUrls::is_medium_width_Set() const{
    return m_medium_width_isSet;
}

bool OAIAffiliateImageUrls::is_medium_width_Valid() const{
    return m_medium_width_isValid;
}

QString OAIAffiliateImageUrls::getSmall() const {
    return m_small;
}
void OAIAffiliateImageUrls::setSmall(const QString &small) {
    m_small = small;
    m_small_isSet = true;
}

bool OAIAffiliateImageUrls::is_small_Set() const{
    return m_small_isSet;
}

bool OAIAffiliateImageUrls::is_small_Valid() const{
    return m_small_isValid;
}

qint32 OAIAffiliateImageUrls::getSmallHeight() const {
    return m_small_height;
}
void OAIAffiliateImageUrls::setSmallHeight(const qint32 &small_height) {
    m_small_height = small_height;
    m_small_height_isSet = true;
}

bool OAIAffiliateImageUrls::is_small_height_Set() const{
    return m_small_height_isSet;
}

bool OAIAffiliateImageUrls::is_small_height_Valid() const{
    return m_small_height_isValid;
}

qint32 OAIAffiliateImageUrls::getSmallWidth() const {
    return m_small_width;
}
void OAIAffiliateImageUrls::setSmallWidth(const qint32 &small_width) {
    m_small_width = small_width;
    m_small_width_isSet = true;
}

bool OAIAffiliateImageUrls::is_small_width_Set() const{
    return m_small_width_isSet;
}

bool OAIAffiliateImageUrls::is_small_width_Valid() const{
    return m_small_width_isValid;
}

bool OAIAffiliateImageUrls::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_large_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_large_height_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_large_width_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_medium_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_medium_height_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_medium_width_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_small_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_small_height_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_small_width_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIAffiliateImageUrls::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
