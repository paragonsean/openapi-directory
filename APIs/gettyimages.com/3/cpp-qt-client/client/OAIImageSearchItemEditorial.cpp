/**
 * Getty Images
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 3
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIImageSearchItemEditorial.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIImageSearchItemEditorial::OAIImageSearchItemEditorial(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIImageSearchItemEditorial::OAIImageSearchItemEditorial() {
    this->initializeModel();
}

OAIImageSearchItemEditorial::~OAIImageSearchItemEditorial() {}

void OAIImageSearchItemEditorial::initializeModel() {

    m_allowed_use_isSet = false;
    m_allowed_use_isValid = false;

    m_alternative_ids_isSet = false;
    m_alternative_ids_isValid = false;

    m_artist_isSet = false;
    m_artist_isValid = false;

    m_asset_family_isSet = false;
    m_asset_family_isValid = false;

    m_call_for_image_isSet = false;
    m_call_for_image_isValid = false;

    m_caption_isSet = false;
    m_caption_isValid = false;

    m_collection_code_isSet = false;
    m_collection_code_isValid = false;

    m_collection_id_isSet = false;
    m_collection_id_isValid = false;

    m_collection_name_isSet = false;
    m_collection_name_isValid = false;

    m_color_type_isSet = false;
    m_color_type_isValid = false;

    m_copyright_isSet = false;
    m_copyright_isValid = false;

    m_date_camera_shot_isSet = false;
    m_date_camera_shot_isValid = false;

    m_date_created_isSet = false;
    m_date_created_isValid = false;

    m_display_sizes_isSet = false;
    m_display_sizes_isValid = false;

    m_download_product_isSet = false;
    m_download_product_isValid = false;

    m_editorial_segments_isSet = false;
    m_editorial_segments_isValid = false;

    m_editorial_source_isSet = false;
    m_editorial_source_isValid = false;

    m_event_ids_isSet = false;
    m_event_ids_isValid = false;

    m_graphical_style_isSet = false;
    m_graphical_style_isValid = false;

    m_id_isSet = false;
    m_id_isValid = false;

    m_keywords_isSet = false;
    m_keywords_isValid = false;

    m_largest_downloads_isSet = false;
    m_largest_downloads_isValid = false;

    m_license_model_isSet = false;
    m_license_model_isValid = false;

    m_max_dimensions_isSet = false;
    m_max_dimensions_isValid = false;

    m_orientation_isSet = false;
    m_orientation_isValid = false;

    m_people_isSet = false;
    m_people_isValid = false;

    m_product_types_isSet = false;
    m_product_types_isValid = false;

    m_quality_rank_isSet = false;
    m_quality_rank_isValid = false;

    m_referral_destinations_isSet = false;
    m_referral_destinations_isValid = false;

    m_title_isSet = false;
    m_title_isValid = false;

    m_uri_oembed_isSet = false;
    m_uri_oembed_isValid = false;
}

void OAIImageSearchItemEditorial::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIImageSearchItemEditorial::fromJsonObject(QJsonObject json) {

    m_allowed_use_isValid = ::OpenAPI::fromJsonValue(m_allowed_use, json[QString("allowed_use")]);
    m_allowed_use_isSet = !json[QString("allowed_use")].isNull() && m_allowed_use_isValid;

    m_alternative_ids_isValid = ::OpenAPI::fromJsonValue(m_alternative_ids, json[QString("alternative_ids")]);
    m_alternative_ids_isSet = !json[QString("alternative_ids")].isNull() && m_alternative_ids_isValid;

    m_artist_isValid = ::OpenAPI::fromJsonValue(m_artist, json[QString("artist")]);
    m_artist_isSet = !json[QString("artist")].isNull() && m_artist_isValid;

    m_asset_family_isValid = ::OpenAPI::fromJsonValue(m_asset_family, json[QString("asset_family")]);
    m_asset_family_isSet = !json[QString("asset_family")].isNull() && m_asset_family_isValid;

    m_call_for_image_isValid = ::OpenAPI::fromJsonValue(m_call_for_image, json[QString("call_for_image")]);
    m_call_for_image_isSet = !json[QString("call_for_image")].isNull() && m_call_for_image_isValid;

    m_caption_isValid = ::OpenAPI::fromJsonValue(m_caption, json[QString("caption")]);
    m_caption_isSet = !json[QString("caption")].isNull() && m_caption_isValid;

    m_collection_code_isValid = ::OpenAPI::fromJsonValue(m_collection_code, json[QString("collection_code")]);
    m_collection_code_isSet = !json[QString("collection_code")].isNull() && m_collection_code_isValid;

    m_collection_id_isValid = ::OpenAPI::fromJsonValue(m_collection_id, json[QString("collection_id")]);
    m_collection_id_isSet = !json[QString("collection_id")].isNull() && m_collection_id_isValid;

    m_collection_name_isValid = ::OpenAPI::fromJsonValue(m_collection_name, json[QString("collection_name")]);
    m_collection_name_isSet = !json[QString("collection_name")].isNull() && m_collection_name_isValid;

    m_color_type_isValid = ::OpenAPI::fromJsonValue(m_color_type, json[QString("color_type")]);
    m_color_type_isSet = !json[QString("color_type")].isNull() && m_color_type_isValid;

    m_copyright_isValid = ::OpenAPI::fromJsonValue(m_copyright, json[QString("copyright")]);
    m_copyright_isSet = !json[QString("copyright")].isNull() && m_copyright_isValid;

    m_date_camera_shot_isValid = ::OpenAPI::fromJsonValue(m_date_camera_shot, json[QString("date_camera_shot")]);
    m_date_camera_shot_isSet = !json[QString("date_camera_shot")].isNull() && m_date_camera_shot_isValid;

    m_date_created_isValid = ::OpenAPI::fromJsonValue(m_date_created, json[QString("date_created")]);
    m_date_created_isSet = !json[QString("date_created")].isNull() && m_date_created_isValid;

    m_display_sizes_isValid = ::OpenAPI::fromJsonValue(m_display_sizes, json[QString("display_sizes")]);
    m_display_sizes_isSet = !json[QString("display_sizes")].isNull() && m_display_sizes_isValid;

    m_download_product_isValid = ::OpenAPI::fromJsonValue(m_download_product, json[QString("download_product")]);
    m_download_product_isSet = !json[QString("download_product")].isNull() && m_download_product_isValid;

    m_editorial_segments_isValid = ::OpenAPI::fromJsonValue(m_editorial_segments, json[QString("editorial_segments")]);
    m_editorial_segments_isSet = !json[QString("editorial_segments")].isNull() && m_editorial_segments_isValid;

    m_editorial_source_isValid = ::OpenAPI::fromJsonValue(m_editorial_source, json[QString("editorial_source")]);
    m_editorial_source_isSet = !json[QString("editorial_source")].isNull() && m_editorial_source_isValid;

    m_event_ids_isValid = ::OpenAPI::fromJsonValue(m_event_ids, json[QString("event_ids")]);
    m_event_ids_isSet = !json[QString("event_ids")].isNull() && m_event_ids_isValid;

    m_graphical_style_isValid = ::OpenAPI::fromJsonValue(m_graphical_style, json[QString("graphical_style")]);
    m_graphical_style_isSet = !json[QString("graphical_style")].isNull() && m_graphical_style_isValid;

    m_id_isValid = ::OpenAPI::fromJsonValue(m_id, json[QString("id")]);
    m_id_isSet = !json[QString("id")].isNull() && m_id_isValid;

    m_keywords_isValid = ::OpenAPI::fromJsonValue(m_keywords, json[QString("keywords")]);
    m_keywords_isSet = !json[QString("keywords")].isNull() && m_keywords_isValid;

    m_largest_downloads_isValid = ::OpenAPI::fromJsonValue(m_largest_downloads, json[QString("largest_downloads")]);
    m_largest_downloads_isSet = !json[QString("largest_downloads")].isNull() && m_largest_downloads_isValid;

    m_license_model_isValid = ::OpenAPI::fromJsonValue(m_license_model, json[QString("license_model")]);
    m_license_model_isSet = !json[QString("license_model")].isNull() && m_license_model_isValid;

    m_max_dimensions_isValid = ::OpenAPI::fromJsonValue(m_max_dimensions, json[QString("max_dimensions")]);
    m_max_dimensions_isSet = !json[QString("max_dimensions")].isNull() && m_max_dimensions_isValid;

    m_orientation_isValid = ::OpenAPI::fromJsonValue(m_orientation, json[QString("orientation")]);
    m_orientation_isSet = !json[QString("orientation")].isNull() && m_orientation_isValid;

    m_people_isValid = ::OpenAPI::fromJsonValue(m_people, json[QString("people")]);
    m_people_isSet = !json[QString("people")].isNull() && m_people_isValid;

    m_product_types_isValid = ::OpenAPI::fromJsonValue(m_product_types, json[QString("product_types")]);
    m_product_types_isSet = !json[QString("product_types")].isNull() && m_product_types_isValid;

    m_quality_rank_isValid = ::OpenAPI::fromJsonValue(m_quality_rank, json[QString("quality_rank")]);
    m_quality_rank_isSet = !json[QString("quality_rank")].isNull() && m_quality_rank_isValid;

    m_referral_destinations_isValid = ::OpenAPI::fromJsonValue(m_referral_destinations, json[QString("referral_destinations")]);
    m_referral_destinations_isSet = !json[QString("referral_destinations")].isNull() && m_referral_destinations_isValid;

    m_title_isValid = ::OpenAPI::fromJsonValue(m_title, json[QString("title")]);
    m_title_isSet = !json[QString("title")].isNull() && m_title_isValid;

    m_uri_oembed_isValid = ::OpenAPI::fromJsonValue(m_uri_oembed, json[QString("uri_oembed")]);
    m_uri_oembed_isSet = !json[QString("uri_oembed")].isNull() && m_uri_oembed_isValid;
}

QString OAIImageSearchItemEditorial::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIImageSearchItemEditorial::asJsonObject() const {
    QJsonObject obj;
    if (m_allowed_use.isSet()) {
        obj.insert(QString("allowed_use"), ::OpenAPI::toJsonValue(m_allowed_use));
    }
    if (m_alternative_ids.size() > 0) {
        obj.insert(QString("alternative_ids"), ::OpenAPI::toJsonValue(m_alternative_ids));
    }
    if (m_artist_isSet) {
        obj.insert(QString("artist"), ::OpenAPI::toJsonValue(m_artist));
    }
    if (m_asset_family_isSet) {
        obj.insert(QString("asset_family"), ::OpenAPI::toJsonValue(m_asset_family));
    }
    if (m_call_for_image_isSet) {
        obj.insert(QString("call_for_image"), ::OpenAPI::toJsonValue(m_call_for_image));
    }
    if (m_caption_isSet) {
        obj.insert(QString("caption"), ::OpenAPI::toJsonValue(m_caption));
    }
    if (m_collection_code_isSet) {
        obj.insert(QString("collection_code"), ::OpenAPI::toJsonValue(m_collection_code));
    }
    if (m_collection_id_isSet) {
        obj.insert(QString("collection_id"), ::OpenAPI::toJsonValue(m_collection_id));
    }
    if (m_collection_name_isSet) {
        obj.insert(QString("collection_name"), ::OpenAPI::toJsonValue(m_collection_name));
    }
    if (m_color_type_isSet) {
        obj.insert(QString("color_type"), ::OpenAPI::toJsonValue(m_color_type));
    }
    if (m_copyright_isSet) {
        obj.insert(QString("copyright"), ::OpenAPI::toJsonValue(m_copyright));
    }
    if (m_date_camera_shot_isSet) {
        obj.insert(QString("date_camera_shot"), ::OpenAPI::toJsonValue(m_date_camera_shot));
    }
    if (m_date_created_isSet) {
        obj.insert(QString("date_created"), ::OpenAPI::toJsonValue(m_date_created));
    }
    if (m_display_sizes.size() > 0) {
        obj.insert(QString("display_sizes"), ::OpenAPI::toJsonValue(m_display_sizes));
    }
    if (m_download_product_isSet) {
        obj.insert(QString("download_product"), ::OpenAPI::toJsonValue(m_download_product));
    }
    if (m_editorial_segments.size() > 0) {
        obj.insert(QString("editorial_segments"), ::OpenAPI::toJsonValue(m_editorial_segments));
    }
    if (m_editorial_source.isSet()) {
        obj.insert(QString("editorial_source"), ::OpenAPI::toJsonValue(m_editorial_source));
    }
    if (m_event_ids.size() > 0) {
        obj.insert(QString("event_ids"), ::OpenAPI::toJsonValue(m_event_ids));
    }
    if (m_graphical_style_isSet) {
        obj.insert(QString("graphical_style"), ::OpenAPI::toJsonValue(m_graphical_style));
    }
    if (m_id_isSet) {
        obj.insert(QString("id"), ::OpenAPI::toJsonValue(m_id));
    }
    if (m_keywords.size() > 0) {
        obj.insert(QString("keywords"), ::OpenAPI::toJsonValue(m_keywords));
    }
    if (m_largest_downloads.size() > 0) {
        obj.insert(QString("largest_downloads"), ::OpenAPI::toJsonValue(m_largest_downloads));
    }
    if (m_license_model_isSet) {
        obj.insert(QString("license_model"), ::OpenAPI::toJsonValue(m_license_model));
    }
    if (m_max_dimensions.isSet()) {
        obj.insert(QString("max_dimensions"), ::OpenAPI::toJsonValue(m_max_dimensions));
    }
    if (m_orientation_isSet) {
        obj.insert(QString("orientation"), ::OpenAPI::toJsonValue(m_orientation));
    }
    if (m_people.size() > 0) {
        obj.insert(QString("people"), ::OpenAPI::toJsonValue(m_people));
    }
    if (m_product_types.size() > 0) {
        obj.insert(QString("product_types"), ::OpenAPI::toJsonValue(m_product_types));
    }
    if (m_quality_rank_isSet) {
        obj.insert(QString("quality_rank"), ::OpenAPI::toJsonValue(m_quality_rank));
    }
    if (m_referral_destinations.size() > 0) {
        obj.insert(QString("referral_destinations"), ::OpenAPI::toJsonValue(m_referral_destinations));
    }
    if (m_title_isSet) {
        obj.insert(QString("title"), ::OpenAPI::toJsonValue(m_title));
    }
    if (m_uri_oembed_isSet) {
        obj.insert(QString("uri_oembed"), ::OpenAPI::toJsonValue(m_uri_oembed));
    }
    return obj;
}

OAIAllowedUse OAIImageSearchItemEditorial::getAllowedUse() const {
    return m_allowed_use;
}
void OAIImageSearchItemEditorial::setAllowedUse(const OAIAllowedUse &allowed_use) {
    m_allowed_use = allowed_use;
    m_allowed_use_isSet = true;
}

bool OAIImageSearchItemEditorial::is_allowed_use_Set() const{
    return m_allowed_use_isSet;
}

bool OAIImageSearchItemEditorial::is_allowed_use_Valid() const{
    return m_allowed_use_isValid;
}

QMap<QString, QString> OAIImageSearchItemEditorial::getAlternativeIds() const {
    return m_alternative_ids;
}
void OAIImageSearchItemEditorial::setAlternativeIds(const QMap<QString, QString> &alternative_ids) {
    m_alternative_ids = alternative_ids;
    m_alternative_ids_isSet = true;
}

bool OAIImageSearchItemEditorial::is_alternative_ids_Set() const{
    return m_alternative_ids_isSet;
}

bool OAIImageSearchItemEditorial::is_alternative_ids_Valid() const{
    return m_alternative_ids_isValid;
}

QString OAIImageSearchItemEditorial::getArtist() const {
    return m_artist;
}
void OAIImageSearchItemEditorial::setArtist(const QString &artist) {
    m_artist = artist;
    m_artist_isSet = true;
}

bool OAIImageSearchItemEditorial::is_artist_Set() const{
    return m_artist_isSet;
}

bool OAIImageSearchItemEditorial::is_artist_Valid() const{
    return m_artist_isValid;
}

QString OAIImageSearchItemEditorial::getAssetFamily() const {
    return m_asset_family;
}
void OAIImageSearchItemEditorial::setAssetFamily(const QString &asset_family) {
    m_asset_family = asset_family;
    m_asset_family_isSet = true;
}

bool OAIImageSearchItemEditorial::is_asset_family_Set() const{
    return m_asset_family_isSet;
}

bool OAIImageSearchItemEditorial::is_asset_family_Valid() const{
    return m_asset_family_isValid;
}

bool OAIImageSearchItemEditorial::isCallForImage() const {
    return m_call_for_image;
}
void OAIImageSearchItemEditorial::setCallForImage(const bool &call_for_image) {
    m_call_for_image = call_for_image;
    m_call_for_image_isSet = true;
}

bool OAIImageSearchItemEditorial::is_call_for_image_Set() const{
    return m_call_for_image_isSet;
}

bool OAIImageSearchItemEditorial::is_call_for_image_Valid() const{
    return m_call_for_image_isValid;
}

QString OAIImageSearchItemEditorial::getCaption() const {
    return m_caption;
}
void OAIImageSearchItemEditorial::setCaption(const QString &caption) {
    m_caption = caption;
    m_caption_isSet = true;
}

bool OAIImageSearchItemEditorial::is_caption_Set() const{
    return m_caption_isSet;
}

bool OAIImageSearchItemEditorial::is_caption_Valid() const{
    return m_caption_isValid;
}

QString OAIImageSearchItemEditorial::getCollectionCode() const {
    return m_collection_code;
}
void OAIImageSearchItemEditorial::setCollectionCode(const QString &collection_code) {
    m_collection_code = collection_code;
    m_collection_code_isSet = true;
}

bool OAIImageSearchItemEditorial::is_collection_code_Set() const{
    return m_collection_code_isSet;
}

bool OAIImageSearchItemEditorial::is_collection_code_Valid() const{
    return m_collection_code_isValid;
}

qint32 OAIImageSearchItemEditorial::getCollectionId() const {
    return m_collection_id;
}
void OAIImageSearchItemEditorial::setCollectionId(const qint32 &collection_id) {
    m_collection_id = collection_id;
    m_collection_id_isSet = true;
}

bool OAIImageSearchItemEditorial::is_collection_id_Set() const{
    return m_collection_id_isSet;
}

bool OAIImageSearchItemEditorial::is_collection_id_Valid() const{
    return m_collection_id_isValid;
}

QString OAIImageSearchItemEditorial::getCollectionName() const {
    return m_collection_name;
}
void OAIImageSearchItemEditorial::setCollectionName(const QString &collection_name) {
    m_collection_name = collection_name;
    m_collection_name_isSet = true;
}

bool OAIImageSearchItemEditorial::is_collection_name_Set() const{
    return m_collection_name_isSet;
}

bool OAIImageSearchItemEditorial::is_collection_name_Valid() const{
    return m_collection_name_isValid;
}

QString OAIImageSearchItemEditorial::getColorType() const {
    return m_color_type;
}
void OAIImageSearchItemEditorial::setColorType(const QString &color_type) {
    m_color_type = color_type;
    m_color_type_isSet = true;
}

bool OAIImageSearchItemEditorial::is_color_type_Set() const{
    return m_color_type_isSet;
}

bool OAIImageSearchItemEditorial::is_color_type_Valid() const{
    return m_color_type_isValid;
}

QString OAIImageSearchItemEditorial::getCopyright() const {
    return m_copyright;
}
void OAIImageSearchItemEditorial::setCopyright(const QString &copyright) {
    m_copyright = copyright;
    m_copyright_isSet = true;
}

bool OAIImageSearchItemEditorial::is_copyright_Set() const{
    return m_copyright_isSet;
}

bool OAIImageSearchItemEditorial::is_copyright_Valid() const{
    return m_copyright_isValid;
}

QDateTime OAIImageSearchItemEditorial::getDateCameraShot() const {
    return m_date_camera_shot;
}
void OAIImageSearchItemEditorial::setDateCameraShot(const QDateTime &date_camera_shot) {
    m_date_camera_shot = date_camera_shot;
    m_date_camera_shot_isSet = true;
}

bool OAIImageSearchItemEditorial::is_date_camera_shot_Set() const{
    return m_date_camera_shot_isSet;
}

bool OAIImageSearchItemEditorial::is_date_camera_shot_Valid() const{
    return m_date_camera_shot_isValid;
}

QDateTime OAIImageSearchItemEditorial::getDateCreated() const {
    return m_date_created;
}
void OAIImageSearchItemEditorial::setDateCreated(const QDateTime &date_created) {
    m_date_created = date_created;
    m_date_created_isSet = true;
}

bool OAIImageSearchItemEditorial::is_date_created_Set() const{
    return m_date_created_isSet;
}

bool OAIImageSearchItemEditorial::is_date_created_Valid() const{
    return m_date_created_isValid;
}

QList<OAIImageSearchItemDisplaySize> OAIImageSearchItemEditorial::getDisplaySizes() const {
    return m_display_sizes;
}
void OAIImageSearchItemEditorial::setDisplaySizes(const QList<OAIImageSearchItemDisplaySize> &display_sizes) {
    m_display_sizes = display_sizes;
    m_display_sizes_isSet = true;
}

bool OAIImageSearchItemEditorial::is_display_sizes_Set() const{
    return m_display_sizes_isSet;
}

bool OAIImageSearchItemEditorial::is_display_sizes_Valid() const{
    return m_display_sizes_isValid;
}

QString OAIImageSearchItemEditorial::getDownloadProduct() const {
    return m_download_product;
}
void OAIImageSearchItemEditorial::setDownloadProduct(const QString &download_product) {
    m_download_product = download_product;
    m_download_product_isSet = true;
}

bool OAIImageSearchItemEditorial::is_download_product_Set() const{
    return m_download_product_isSet;
}

bool OAIImageSearchItemEditorial::is_download_product_Valid() const{
    return m_download_product_isValid;
}

QList<QString> OAIImageSearchItemEditorial::getEditorialSegments() const {
    return m_editorial_segments;
}
void OAIImageSearchItemEditorial::setEditorialSegments(const QList<QString> &editorial_segments) {
    m_editorial_segments = editorial_segments;
    m_editorial_segments_isSet = true;
}

bool OAIImageSearchItemEditorial::is_editorial_segments_Set() const{
    return m_editorial_segments_isSet;
}

bool OAIImageSearchItemEditorial::is_editorial_segments_Valid() const{
    return m_editorial_segments_isValid;
}

OAIEditorialSource OAIImageSearchItemEditorial::getEditorialSource() const {
    return m_editorial_source;
}
void OAIImageSearchItemEditorial::setEditorialSource(const OAIEditorialSource &editorial_source) {
    m_editorial_source = editorial_source;
    m_editorial_source_isSet = true;
}

bool OAIImageSearchItemEditorial::is_editorial_source_Set() const{
    return m_editorial_source_isSet;
}

bool OAIImageSearchItemEditorial::is_editorial_source_Valid() const{
    return m_editorial_source_isValid;
}

QList<qint32> OAIImageSearchItemEditorial::getEventIds() const {
    return m_event_ids;
}
void OAIImageSearchItemEditorial::setEventIds(const QList<qint32> &event_ids) {
    m_event_ids = event_ids;
    m_event_ids_isSet = true;
}

bool OAIImageSearchItemEditorial::is_event_ids_Set() const{
    return m_event_ids_isSet;
}

bool OAIImageSearchItemEditorial::is_event_ids_Valid() const{
    return m_event_ids_isValid;
}

QString OAIImageSearchItemEditorial::getGraphicalStyle() const {
    return m_graphical_style;
}
void OAIImageSearchItemEditorial::setGraphicalStyle(const QString &graphical_style) {
    m_graphical_style = graphical_style;
    m_graphical_style_isSet = true;
}

bool OAIImageSearchItemEditorial::is_graphical_style_Set() const{
    return m_graphical_style_isSet;
}

bool OAIImageSearchItemEditorial::is_graphical_style_Valid() const{
    return m_graphical_style_isValid;
}

QString OAIImageSearchItemEditorial::getId() const {
    return m_id;
}
void OAIImageSearchItemEditorial::setId(const QString &id) {
    m_id = id;
    m_id_isSet = true;
}

bool OAIImageSearchItemEditorial::is_id_Set() const{
    return m_id_isSet;
}

bool OAIImageSearchItemEditorial::is_id_Valid() const{
    return m_id_isValid;
}

QList<OAIKeyword> OAIImageSearchItemEditorial::getKeywords() const {
    return m_keywords;
}
void OAIImageSearchItemEditorial::setKeywords(const QList<OAIKeyword> &keywords) {
    m_keywords = keywords;
    m_keywords_isSet = true;
}

bool OAIImageSearchItemEditorial::is_keywords_Set() const{
    return m_keywords_isSet;
}

bool OAIImageSearchItemEditorial::is_keywords_Valid() const{
    return m_keywords_isValid;
}

QList<OAIDownload> OAIImageSearchItemEditorial::getLargestDownloads() const {
    return m_largest_downloads;
}
void OAIImageSearchItemEditorial::setLargestDownloads(const QList<OAIDownload> &largest_downloads) {
    m_largest_downloads = largest_downloads;
    m_largest_downloads_isSet = true;
}

bool OAIImageSearchItemEditorial::is_largest_downloads_Set() const{
    return m_largest_downloads_isSet;
}

bool OAIImageSearchItemEditorial::is_largest_downloads_Valid() const{
    return m_largest_downloads_isValid;
}

QString OAIImageSearchItemEditorial::getLicenseModel() const {
    return m_license_model;
}
void OAIImageSearchItemEditorial::setLicenseModel(const QString &license_model) {
    m_license_model = license_model;
    m_license_model_isSet = true;
}

bool OAIImageSearchItemEditorial::is_license_model_Set() const{
    return m_license_model_isSet;
}

bool OAIImageSearchItemEditorial::is_license_model_Valid() const{
    return m_license_model_isValid;
}

OAIMaxDimensions OAIImageSearchItemEditorial::getMaxDimensions() const {
    return m_max_dimensions;
}
void OAIImageSearchItemEditorial::setMaxDimensions(const OAIMaxDimensions &max_dimensions) {
    m_max_dimensions = max_dimensions;
    m_max_dimensions_isSet = true;
}

bool OAIImageSearchItemEditorial::is_max_dimensions_Set() const{
    return m_max_dimensions_isSet;
}

bool OAIImageSearchItemEditorial::is_max_dimensions_Valid() const{
    return m_max_dimensions_isValid;
}

QString OAIImageSearchItemEditorial::getOrientation() const {
    return m_orientation;
}
void OAIImageSearchItemEditorial::setOrientation(const QString &orientation) {
    m_orientation = orientation;
    m_orientation_isSet = true;
}

bool OAIImageSearchItemEditorial::is_orientation_Set() const{
    return m_orientation_isSet;
}

bool OAIImageSearchItemEditorial::is_orientation_Valid() const{
    return m_orientation_isValid;
}

QList<QString> OAIImageSearchItemEditorial::getPeople() const {
    return m_people;
}
void OAIImageSearchItemEditorial::setPeople(const QList<QString> &people) {
    m_people = people;
    m_people_isSet = true;
}

bool OAIImageSearchItemEditorial::is_people_Set() const{
    return m_people_isSet;
}

bool OAIImageSearchItemEditorial::is_people_Valid() const{
    return m_people_isValid;
}

QList<QString> OAIImageSearchItemEditorial::getProductTypes() const {
    return m_product_types;
}
void OAIImageSearchItemEditorial::setProductTypes(const QList<QString> &product_types) {
    m_product_types = product_types;
    m_product_types_isSet = true;
}

bool OAIImageSearchItemEditorial::is_product_types_Set() const{
    return m_product_types_isSet;
}

bool OAIImageSearchItemEditorial::is_product_types_Valid() const{
    return m_product_types_isValid;
}

qint32 OAIImageSearchItemEditorial::getQualityRank() const {
    return m_quality_rank;
}
void OAIImageSearchItemEditorial::setQualityRank(const qint32 &quality_rank) {
    m_quality_rank = quality_rank;
    m_quality_rank_isSet = true;
}

bool OAIImageSearchItemEditorial::is_quality_rank_Set() const{
    return m_quality_rank_isSet;
}

bool OAIImageSearchItemEditorial::is_quality_rank_Valid() const{
    return m_quality_rank_isValid;
}

QList<OAIReferralDestination> OAIImageSearchItemEditorial::getReferralDestinations() const {
    return m_referral_destinations;
}
void OAIImageSearchItemEditorial::setReferralDestinations(const QList<OAIReferralDestination> &referral_destinations) {
    m_referral_destinations = referral_destinations;
    m_referral_destinations_isSet = true;
}

bool OAIImageSearchItemEditorial::is_referral_destinations_Set() const{
    return m_referral_destinations_isSet;
}

bool OAIImageSearchItemEditorial::is_referral_destinations_Valid() const{
    return m_referral_destinations_isValid;
}

QString OAIImageSearchItemEditorial::getTitle() const {
    return m_title;
}
void OAIImageSearchItemEditorial::setTitle(const QString &title) {
    m_title = title;
    m_title_isSet = true;
}

bool OAIImageSearchItemEditorial::is_title_Set() const{
    return m_title_isSet;
}

bool OAIImageSearchItemEditorial::is_title_Valid() const{
    return m_title_isValid;
}

QString OAIImageSearchItemEditorial::getUriOembed() const {
    return m_uri_oembed;
}
void OAIImageSearchItemEditorial::setUriOembed(const QString &uri_oembed) {
    m_uri_oembed = uri_oembed;
    m_uri_oembed_isSet = true;
}

bool OAIImageSearchItemEditorial::is_uri_oembed_Set() const{
    return m_uri_oembed_isSet;
}

bool OAIImageSearchItemEditorial::is_uri_oembed_Valid() const{
    return m_uri_oembed_isValid;
}

bool OAIImageSearchItemEditorial::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_allowed_use.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_alternative_ids.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_artist_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_asset_family_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_call_for_image_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_caption_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_collection_code_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_collection_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_collection_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_color_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_copyright_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_date_camera_shot_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_date_created_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_display_sizes.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_download_product_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_editorial_segments.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_editorial_source.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_event_ids.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_graphical_style_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_keywords.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_largest_downloads.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_license_model_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_max_dimensions.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_orientation_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_people.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_product_types.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_quality_rank_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_referral_destinations.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_title_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_uri_oembed_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIImageSearchItemEditorial::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
