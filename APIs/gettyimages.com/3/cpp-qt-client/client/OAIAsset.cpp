/**
 * Getty Images
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 3
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIAsset.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIAsset::OAIAsset(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIAsset::OAIAsset() {
    this->initializeModel();
}

OAIAsset::~OAIAsset() {}

void OAIAsset::initializeModel() {

    m_asset_type_isSet = false;
    m_asset_type_isValid = false;

    m_date_added_isSet = false;
    m_date_added_isValid = false;

    m_display_sizes_isSet = false;
    m_display_sizes_isValid = false;

    m_id_isSet = false;
    m_id_isValid = false;
}

void OAIAsset::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIAsset::fromJsonObject(QJsonObject json) {

    m_asset_type_isValid = ::OpenAPI::fromJsonValue(m_asset_type, json[QString("asset_type")]);
    m_asset_type_isSet = !json[QString("asset_type")].isNull() && m_asset_type_isValid;

    m_date_added_isValid = ::OpenAPI::fromJsonValue(m_date_added, json[QString("date_added")]);
    m_date_added_isSet = !json[QString("date_added")].isNull() && m_date_added_isValid;

    m_display_sizes_isValid = ::OpenAPI::fromJsonValue(m_display_sizes, json[QString("display_sizes")]);
    m_display_sizes_isSet = !json[QString("display_sizes")].isNull() && m_display_sizes_isValid;

    m_id_isValid = ::OpenAPI::fromJsonValue(m_id, json[QString("id")]);
    m_id_isSet = !json[QString("id")].isNull() && m_id_isValid;
}

QString OAIAsset::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIAsset::asJsonObject() const {
    QJsonObject obj;
    if (m_asset_type_isSet) {
        obj.insert(QString("asset_type"), ::OpenAPI::toJsonValue(m_asset_type));
    }
    if (m_date_added_isSet) {
        obj.insert(QString("date_added"), ::OpenAPI::toJsonValue(m_date_added));
    }
    if (m_display_sizes.size() > 0) {
        obj.insert(QString("display_sizes"), ::OpenAPI::toJsonValue(m_display_sizes));
    }
    if (m_id_isSet) {
        obj.insert(QString("id"), ::OpenAPI::toJsonValue(m_id));
    }
    return obj;
}

QString OAIAsset::getAssetType() const {
    return m_asset_type;
}
void OAIAsset::setAssetType(const QString &asset_type) {
    m_asset_type = asset_type;
    m_asset_type_isSet = true;
}

bool OAIAsset::is_asset_type_Set() const{
    return m_asset_type_isSet;
}

bool OAIAsset::is_asset_type_Valid() const{
    return m_asset_type_isValid;
}

QDateTime OAIAsset::getDateAdded() const {
    return m_date_added;
}
void OAIAsset::setDateAdded(const QDateTime &date_added) {
    m_date_added = date_added;
    m_date_added_isSet = true;
}

bool OAIAsset::is_date_added_Set() const{
    return m_date_added_isSet;
}

bool OAIAsset::is_date_added_Valid() const{
    return m_date_added_isValid;
}

QList<OAIDisplaySize> OAIAsset::getDisplaySizes() const {
    return m_display_sizes;
}
void OAIAsset::setDisplaySizes(const QList<OAIDisplaySize> &display_sizes) {
    m_display_sizes = display_sizes;
    m_display_sizes_isSet = true;
}

bool OAIAsset::is_display_sizes_Set() const{
    return m_display_sizes_isSet;
}

bool OAIAsset::is_display_sizes_Valid() const{
    return m_display_sizes_isValid;
}

QString OAIAsset::getId() const {
    return m_id;
}
void OAIAsset::setId(const QString &id) {
    m_id = id;
    m_id_isSet = true;
}

bool OAIAsset::is_id_Set() const{
    return m_id_isSet;
}

bool OAIAsset::is_id_Valid() const{
    return m_id_isValid;
}

bool OAIAsset::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_asset_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_date_added_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_display_sizes.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_id_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIAsset::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
