/**
 * Getty Images
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 3
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIAssetLicensingResponse.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIAssetLicensingResponse::OAIAssetLicensingResponse(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIAssetLicensingResponse::OAIAssetLicensingResponse() {
    this->initializeModel();
}

OAIAssetLicensingResponse::~OAIAssetLicensingResponse() {}

void OAIAssetLicensingResponse::initializeModel() {

    m_acquired_licenses_isSet = false;
    m_acquired_licenses_isValid = false;

    m_credits_used_isSet = false;
    m_credits_used_isValid = false;
}

void OAIAssetLicensingResponse::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIAssetLicensingResponse::fromJsonObject(QJsonObject json) {

    m_acquired_licenses_isValid = ::OpenAPI::fromJsonValue(m_acquired_licenses, json[QString("acquired_licenses")]);
    m_acquired_licenses_isSet = !json[QString("acquired_licenses")].isNull() && m_acquired_licenses_isValid;

    m_credits_used_isValid = ::OpenAPI::fromJsonValue(m_credits_used, json[QString("credits_used")]);
    m_credits_used_isSet = !json[QString("credits_used")].isNull() && m_credits_used_isValid;
}

QString OAIAssetLicensingResponse::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIAssetLicensingResponse::asJsonObject() const {
    QJsonObject obj;
    if (m_acquired_licenses.size() > 0) {
        obj.insert(QString("acquired_licenses"), ::OpenAPI::toJsonValue(m_acquired_licenses));
    }
    if (m_credits_used_isSet) {
        obj.insert(QString("credits_used"), ::OpenAPI::toJsonValue(m_credits_used));
    }
    return obj;
}

QList<OAIExtendedLicenses> OAIAssetLicensingResponse::getAcquiredLicenses() const {
    return m_acquired_licenses;
}
void OAIAssetLicensingResponse::setAcquiredLicenses(const QList<OAIExtendedLicenses> &acquired_licenses) {
    m_acquired_licenses = acquired_licenses;
    m_acquired_licenses_isSet = true;
}

bool OAIAssetLicensingResponse::is_acquired_licenses_Set() const{
    return m_acquired_licenses_isSet;
}

bool OAIAssetLicensingResponse::is_acquired_licenses_Valid() const{
    return m_acquired_licenses_isValid;
}

qint32 OAIAssetLicensingResponse::getCreditsUsed() const {
    return m_credits_used;
}
void OAIAssetLicensingResponse::setCreditsUsed(const qint32 &credits_used) {
    m_credits_used = credits_used;
    m_credits_used_isSet = true;
}

bool OAIAssetLicensingResponse::is_credits_used_Set() const{
    return m_credits_used_isSet;
}

bool OAIAssetLicensingResponse::is_credits_used_Valid() const{
    return m_credits_used_isValid;
}

bool OAIAssetLicensingResponse::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_acquired_licenses.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_credits_used_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIAssetLicensingResponse::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
