/**
 * SwaggerHub Registry API
 * # Overview Use SwaggerHub Registry API to access, manage, and update the following resources in SwaggerHub, bypassing the web interface:   * APIs   * Domains   * Integrations   * Projects   * Templates   SwaggerHub also provides the [User Management API](https://app.swaggerhub.com/apis-docs/swagger-hub/user-management-api/) to get information about organizations and manage organization members.  # Base URL Use the following base URL for SwaggerHub SaaS:          http(s)://api.swaggerhub.com  **Note:** This documentation is for SwaggerHub SaaS. On-Premise customers should use the bundled API definition, which can be found at the URLs provided below.  Version 1.29.0 or later:      http(s)://SERVER/v1/openapi.yaml - YAML version     http(s)://SERVER/v1/openapi.json - JSON version  Earlier versions:      http(s)://SERVER/v1/swagger.yaml - YAML version     http(s)://SERVER/v1/swagger.json - JSON version  # Authentication Operations that update data or access private data require authentication using an API key. You can find your personal API key on the [API Keys](https://app.swaggerhub.com/settings/apiKey) page in your account settings. Send this key in the `Authorization` header when making requests to the Registry API:      Authorization: YOUR_API_KEY  To test API calls from this documentation page, click the **Authorize** button below and paste your API key there.  **Important:** Keep the API key secure and do not store it directly in your code. # Tools In addition to calling the Registry API directly, you can use the following tools to interact with the API from the command line or CI/CD pipeline:   * [SwaggerHub CLI](https://www.npmjs.com/package/swaggerhub-cli)   * [Maven plugin](https://github.com/swagger-api/swaggerhub-maven-plugin)  * [Gradle plugin](https://github.com/swagger-api/swaggerhub-gradle-plugin) 
 *
 * The version of the OpenAPI document: 1.0.66
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAIAmazonApiGatewayIntegration.h
 *
 * Configuration details for the [Amazon API Gateway](https://support.smartbear.com/swaggerhub/docs/integrations/amazon-api-gateway.html) integration
 */

#ifndef OAIAmazonApiGatewayIntegration_H
#define OAIAmazonApiGatewayIntegration_H

#include <QJsonObject>

#include <QString>

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {

class OAIAmazonApiGatewayIntegration : public OAIObject {
public:
    OAIAmazonApiGatewayIntegration();
    OAIAmazonApiGatewayIntegration(QString json);
    ~OAIAmazonApiGatewayIntegration() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    bool isEnabled() const;
    void setEnabled(const bool &enabled);
    bool is_enabled_Set() const;
    bool is_enabled_Valid() const;

    QString getId() const;
    void setId(const QString &id);
    bool is_id_Set() const;
    bool is_id_Valid() const;

    QString getName() const;
    void setName(const QString &name);
    bool is_name_Set() const;
    bool is_name_Valid() const;

    QString getAccessKey() const;
    void setAccessKey(const QString &access_key);
    bool is_access_key_Set() const;
    bool is_access_key_Valid() const;

    QString getApiId() const;
    void setApiId(const QString &api_id);
    bool is_api_id_Set() const;
    bool is_api_id_Valid() const;

    QString getBasePathMode() const;
    void setBasePathMode(const QString &base_path_mode);
    bool is_base_path_mode_Set() const;
    bool is_base_path_mode_Valid() const;

    QString getDeploymentMode() const;
    void setDeploymentMode(const QString &deployment_mode);
    bool is_deployment_mode_Set() const;
    bool is_deployment_mode_Valid() const;

    QString getPublishMode() const;
    void setPublishMode(const QString &publish_mode);
    bool is_publish_mode_Set() const;
    bool is_publish_mode_Valid() const;

    QString getRegion() const;
    void setRegion(const QString &region);
    bool is_region_Set() const;
    bool is_region_Valid() const;

    QString getSecretKey() const;
    void setSecretKey(const QString &secret_key);
    bool is_secret_key_Set() const;
    bool is_secret_key_Valid() const;

    bool isUpdateDefinition() const;
    void setUpdateDefinition(const bool &update_definition);
    bool is_update_definition_Set() const;
    bool is_update_definition_Valid() const;

    QString getConfigType() const;
    void setConfigType(const QString &config_type);
    bool is_config_type_Set() const;
    bool is_config_type_Valid() const;

    QString getProxyToAddress() const;
    void setProxyToAddress(const QString &proxy_to_address);
    bool is_proxy_to_address_Set() const;
    bool is_proxy_to_address_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    bool m_enabled;
    bool m_enabled_isSet;
    bool m_enabled_isValid;

    QString m_id;
    bool m_id_isSet;
    bool m_id_isValid;

    QString m_name;
    bool m_name_isSet;
    bool m_name_isValid;

    QString m_access_key;
    bool m_access_key_isSet;
    bool m_access_key_isValid;

    QString m_api_id;
    bool m_api_id_isSet;
    bool m_api_id_isValid;

    QString m_base_path_mode;
    bool m_base_path_mode_isSet;
    bool m_base_path_mode_isValid;

    QString m_deployment_mode;
    bool m_deployment_mode_isSet;
    bool m_deployment_mode_isValid;

    QString m_publish_mode;
    bool m_publish_mode_isSet;
    bool m_publish_mode_isValid;

    QString m_region;
    bool m_region_isSet;
    bool m_region_isValid;

    QString m_secret_key;
    bool m_secret_key_isSet;
    bool m_secret_key_isValid;

    bool m_update_definition;
    bool m_update_definition_isSet;
    bool m_update_definition_isValid;

    QString m_config_type;
    bool m_config_type_isSet;
    bool m_config_type_isValid;

    QString m_proxy_to_address;
    bool m_proxy_to_address_isSet;
    bool m_proxy_to_address_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAIAmazonApiGatewayIntegration)

#endif // OAIAmazonApiGatewayIntegration_H
