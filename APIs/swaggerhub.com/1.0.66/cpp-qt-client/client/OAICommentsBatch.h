/**
 * SwaggerHub Registry API
 * # Overview Use SwaggerHub Registry API to access, manage, and update the following resources in SwaggerHub, bypassing the web interface:   * APIs   * Domains   * Integrations   * Projects   * Templates   SwaggerHub also provides the [User Management API](https://app.swaggerhub.com/apis-docs/swagger-hub/user-management-api/) to get information about organizations and manage organization members.  # Base URL Use the following base URL for SwaggerHub SaaS:          http(s)://api.swaggerhub.com  **Note:** This documentation is for SwaggerHub SaaS. On-Premise customers should use the bundled API definition, which can be found at the URLs provided below.  Version 1.29.0 or later:      http(s)://SERVER/v1/openapi.yaml - YAML version     http(s)://SERVER/v1/openapi.json - JSON version  Earlier versions:      http(s)://SERVER/v1/swagger.yaml - YAML version     http(s)://SERVER/v1/swagger.json - JSON version  # Authentication Operations that update data or access private data require authentication using an API key. You can find your personal API key on the [API Keys](https://app.swaggerhub.com/settings/apiKey) page in your account settings. Send this key in the `Authorization` header when making requests to the Registry API:      Authorization: YOUR_API_KEY  To test API calls from this documentation page, click the **Authorize** button below and paste your API key there.  **Important:** Keep the API key secure and do not store it directly in your code. # Tools In addition to calling the Registry API directly, you can use the following tools to interact with the API from the command line or CI/CD pipeline:   * [SwaggerHub CLI](https://www.npmjs.com/package/swaggerhub-cli)   * [Maven plugin](https://github.com/swagger-api/swaggerhub-maven-plugin)  * [Gradle plugin](https://github.com/swagger-api/swaggerhub-gradle-plugin) 
 *
 * The version of the OpenAPI document: 1.0.66
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAICommentsBatch.h
 *
 * 
 */

#ifndef OAICommentsBatch_H
#define OAICommentsBatch_H

#include <QJsonObject>

#include "OAIClosableCommentPatch.h"
#include "OAICommentPatch.h"
#include "OAINewComment.h"
#include "OAINewReply.h"
#include <QList>
#include <QMap>
#include <QSet>
#include <QString>

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {
class OAINewComment;
class OAINewReply;
class OAIClosableCommentPatch;
class OAICommentPatch;

class OAICommentsBatch : public OAIObject {
public:
    OAICommentsBatch();
    OAICommentsBatch(QString json);
    ~OAICommentsBatch() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    QList<OAINewComment> getAddComment() const;
    void setAddComment(const QList<OAINewComment> &add_comment);
    bool is_add_comment_Set() const;
    bool is_add_comment_Valid() const;

    QMap<QString, QList<OAINewReply>> getAddReply() const;
    void setAddReply(const QMap<QString, QList<OAINewReply>> &add_reply);
    bool is_add_reply_Set() const;
    bool is_add_reply_Valid() const;

    QList<QString> getDeleteComment() const;
    void setDeleteComment(const QList<QString> &delete_comment);
    bool is_delete_comment_Set() const;
    bool is_delete_comment_Valid() const;

    QMap<QString, QSet<QString>> getDeleteReply() const;
    void setDeleteReply(const QMap<QString, QSet<QString>> &delete_reply);
    bool is_delete_reply_Set() const;
    bool is_delete_reply_Valid() const;

    QMap<QString, OAIClosableCommentPatch> getUpdateComment() const;
    void setUpdateComment(const QMap<QString, OAIClosableCommentPatch> &update_comment);
    bool is_update_comment_Set() const;
    bool is_update_comment_Valid() const;

    QMap<QString, QMap<QString, OAICommentPatch>> getUpdateReply() const;
    void setUpdateReply(const QMap<QString, QMap<QString, OAICommentPatch>> &update_reply);
    bool is_update_reply_Set() const;
    bool is_update_reply_Valid() const;

    QMap<QString, QString> getUpdateStatus() const;
    void setUpdateStatus(const QMap<QString, QString> &update_status);
    bool is_update_status_Set() const;
    bool is_update_status_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    QList<OAINewComment> m_add_comment;
    bool m_add_comment_isSet;
    bool m_add_comment_isValid;

    QMap<QString, QList<OAINewReply>> m_add_reply;
    bool m_add_reply_isSet;
    bool m_add_reply_isValid;

    QList<QString> m_delete_comment;
    bool m_delete_comment_isSet;
    bool m_delete_comment_isValid;

    QMap<QString, QSet<QString>> m_delete_reply;
    bool m_delete_reply_isSet;
    bool m_delete_reply_isValid;

    QMap<QString, OAIClosableCommentPatch> m_update_comment;
    bool m_update_comment_isSet;
    bool m_update_comment_isValid;

    QMap<QString, QMap<QString, OAICommentPatch>> m_update_reply;
    bool m_update_reply_isSet;
    bool m_update_reply_isValid;

    QMap<QString, QString> m_update_status;
    bool m_update_status_isSet;
    bool m_update_status_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAICommentsBatch)

#endif // OAICommentsBatch_H
