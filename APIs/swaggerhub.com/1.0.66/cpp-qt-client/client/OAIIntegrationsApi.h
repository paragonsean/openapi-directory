/**
 * SwaggerHub Registry API
 * # Overview Use SwaggerHub Registry API to access, manage, and update the following resources in SwaggerHub, bypassing the web interface:   * APIs   * Domains   * Integrations   * Projects   * Templates   SwaggerHub also provides the [User Management API](https://app.swaggerhub.com/apis-docs/swagger-hub/user-management-api/) to get information about organizations and manage organization members.  # Base URL Use the following base URL for SwaggerHub SaaS:          http(s)://api.swaggerhub.com  **Note:** This documentation is for SwaggerHub SaaS. On-Premise customers should use the bundled API definition, which can be found at the URLs provided below.  Version 1.29.0 or later:      http(s)://SERVER/v1/openapi.yaml - YAML version     http(s)://SERVER/v1/openapi.json - JSON version  Earlier versions:      http(s)://SERVER/v1/swagger.yaml - YAML version     http(s)://SERVER/v1/swagger.json - JSON version  # Authentication Operations that update data or access private data require authentication using an API key. You can find your personal API key on the [API Keys](https://app.swaggerhub.com/settings/apiKey) page in your account settings. Send this key in the `Authorization` header when making requests to the Registry API:      Authorization: YOUR_API_KEY  To test API calls from this documentation page, click the **Authorize** button below and paste your API key there.  **Important:** Keep the API key secure and do not store it directly in your code. # Tools In addition to calling the Registry API directly, you can use the following tools to interact with the API from the command line or CI/CD pipeline:   * [SwaggerHub CLI](https://www.npmjs.com/package/swaggerhub-cli)   * [Maven plugin](https://github.com/swagger-api/swaggerhub-maven-plugin)  * [Gradle plugin](https://github.com/swagger-api/swaggerhub-gradle-plugin) 
 *
 * The version of the OpenAPI document: 1.0.66
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#ifndef OAI_OAIIntegrationsApi_H
#define OAI_OAIIntegrationsApi_H

#include "OAIHelpers.h"
#include "OAIHttpRequest.h"
#include "OAIServerConfiguration.h"
#include "OAIOauth.h"

#include "OAIIntegrationConfiguration.h"
#include "OAIIntegrationConfigurations.h"
#include "OAIObject.h"
#include <QString>

#include <QObject>
#include <QByteArray>
#include <QStringList>
#include <QList>
#include <QNetworkAccessManager>

namespace OpenAPI {

class OAIIntegrationsApi : public QObject {
    Q_OBJECT

public:
    OAIIntegrationsApi(const int timeOut = 0);
    ~OAIIntegrationsApi();

    void initializeServerConfigs();
    int setDefaultServerValue(int serverIndex,const QString &operation, const QString &variable,const QString &val);
    void setServerIndex(const QString &operation, int serverIndex);
    void setApiKey(const QString &apiKeyName, const QString &apiKey);
    void setBearerToken(const QString &token);
    void setUsername(const QString &username);
    void setPassword(const QString &password);
    void setTimeOut(const int timeOut);
    void setWorkingDirectory(const QString &path);
    void setNetworkAccessManager(QNetworkAccessManager* manager);
    int addServerConfiguration(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables = QMap<QString, OAIServerVariable>());
    void setNewServerForAllOperations(const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void setNewServer(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void addHeaders(const QString &key, const QString &value);
    void enableRequestCompression();
    void enableResponseCompression();
    void abortRequests();
    QString getParamStylePrefix(const QString &style);
    QString getParamStyleSuffix(const QString &style);
    QString getParamStyleDelimiter(const QString &style, const QString &name, bool isExplode);

    /**
    * @param[in]  owner QString [required]
    * @param[in]  api QString [required]
    * @param[in]  version QString [required]
    * @param[in]  integration_type_configuration OAIObject [required]
    */
    virtual void createIntegration(const QString &owner, const QString &api, const QString &version, const OAIObject &integration_type_configuration);

    /**
    * @param[in]  owner QString [required]
    * @param[in]  api QString [required]
    * @param[in]  version QString [required]
    * @param[in]  integration_id QString [required]
    */
    virtual void deleteIntegration(const QString &owner, const QString &api, const QString &version, const QString &integration_id);

    /**
    * @param[in]  owner QString [required]
    * @param[in]  api QString [required]
    * @param[in]  version QString [required]
    * @param[in]  integration_id QString [required]
    * @param[in]  commit_message QString [optional]
    */
    virtual void executeIntegration(const QString &owner, const QString &api, const QString &version, const QString &integration_id, const ::OpenAPI::OptionalParam<QString> &commit_message = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  owner QString [required]
    * @param[in]  api QString [required]
    * @param[in]  version QString [required]
    * @param[in]  integration_id QString [required]
    */
    virtual void getIntegrationById(const QString &owner, const QString &api, const QString &version, const QString &integration_id);

    /**
    * @param[in]  owner QString [required]
    * @param[in]  api QString [required]
    * @param[in]  version QString [required]
    */
    virtual void getIntegrations(const QString &owner, const QString &api, const QString &version);

    /**
    * @param[in]  owner QString [required]
    * @param[in]  api QString [required]
    * @param[in]  version QString [required]
    * @param[in]  integration_id QString [required]
    * @param[in]  integration_type_configuration OAIObject [required]
    */
    virtual void patchIntegration(const QString &owner, const QString &api, const QString &version, const QString &integration_id, const OAIObject &integration_type_configuration);

    /**
    * @param[in]  owner QString [required]
    * @param[in]  api QString [required]
    * @param[in]  version QString [required]
    * @param[in]  integration_id QString [required]
    * @param[in]  integration_type_configuration OAIObject [required]
    */
    virtual void updateIntegration(const QString &owner, const QString &api, const QString &version, const QString &integration_id, const OAIObject &integration_type_configuration);


private:
    QMap<QString,int> _serverIndices;
    QMap<QString,QList<OAIServerConfiguration>> _serverConfigs;
    QMap<QString, QString> _apiKeys;
    QString _bearerToken;
    QString _username;
    QString _password;
    int _timeOut;
    QString _workingDirectory;
    QNetworkAccessManager* _manager;
    QMap<QString, QString> _defaultHeaders;
    bool _isResponseCompressionEnabled;
    bool _isRequestCompressionEnabled;
    OAIHttpRequestInput _latestInput;
    OAIHttpRequestWorker *_latestWorker;
    QStringList _latestScope;
    OauthCode _authFlow;
    OauthImplicit _implicitFlow;
    OauthCredentials _credentialFlow;
    OauthPassword _passwordFlow;
    int _OauthMethod = 0;

    void createIntegrationCallback(OAIHttpRequestWorker *worker);
    void deleteIntegrationCallback(OAIHttpRequestWorker *worker);
    void executeIntegrationCallback(OAIHttpRequestWorker *worker);
    void getIntegrationByIdCallback(OAIHttpRequestWorker *worker);
    void getIntegrationsCallback(OAIHttpRequestWorker *worker);
    void patchIntegrationCallback(OAIHttpRequestWorker *worker);
    void updateIntegrationCallback(OAIHttpRequestWorker *worker);

Q_SIGNALS:

    void createIntegrationSignal(OAIIntegrationConfiguration summary);
    void deleteIntegrationSignal();
    void executeIntegrationSignal();
    void getIntegrationByIdSignal(OAIIntegrationConfiguration summary);
    void getIntegrationsSignal(OAIIntegrationConfigurations summary);
    void patchIntegrationSignal();
    void updateIntegrationSignal();


    void createIntegrationSignalFull(OAIHttpRequestWorker *worker, OAIIntegrationConfiguration summary);
    void deleteIntegrationSignalFull(OAIHttpRequestWorker *worker);
    void executeIntegrationSignalFull(OAIHttpRequestWorker *worker);
    void getIntegrationByIdSignalFull(OAIHttpRequestWorker *worker, OAIIntegrationConfiguration summary);
    void getIntegrationsSignalFull(OAIHttpRequestWorker *worker, OAIIntegrationConfigurations summary);
    void patchIntegrationSignalFull(OAIHttpRequestWorker *worker);
    void updateIntegrationSignalFull(OAIHttpRequestWorker *worker);

    Q_DECL_DEPRECATED_X("Use createIntegrationSignalError() instead")
    void createIntegrationSignalE(OAIIntegrationConfiguration summary, QNetworkReply::NetworkError error_type, QString error_str);
    void createIntegrationSignalError(OAIIntegrationConfiguration summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use deleteIntegrationSignalError() instead")
    void deleteIntegrationSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void deleteIntegrationSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use executeIntegrationSignalError() instead")
    void executeIntegrationSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void executeIntegrationSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getIntegrationByIdSignalError() instead")
    void getIntegrationByIdSignalE(OAIIntegrationConfiguration summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getIntegrationByIdSignalError(OAIIntegrationConfiguration summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getIntegrationsSignalError() instead")
    void getIntegrationsSignalE(OAIIntegrationConfigurations summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getIntegrationsSignalError(OAIIntegrationConfigurations summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use patchIntegrationSignalError() instead")
    void patchIntegrationSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void patchIntegrationSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use updateIntegrationSignalError() instead")
    void updateIntegrationSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void updateIntegrationSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);

    Q_DECL_DEPRECATED_X("Use createIntegrationSignalErrorFull() instead")
    void createIntegrationSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void createIntegrationSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use deleteIntegrationSignalErrorFull() instead")
    void deleteIntegrationSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void deleteIntegrationSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use executeIntegrationSignalErrorFull() instead")
    void executeIntegrationSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void executeIntegrationSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getIntegrationByIdSignalErrorFull() instead")
    void getIntegrationByIdSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getIntegrationByIdSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getIntegrationsSignalErrorFull() instead")
    void getIntegrationsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getIntegrationsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use patchIntegrationSignalErrorFull() instead")
    void patchIntegrationSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void patchIntegrationSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use updateIntegrationSignalErrorFull() instead")
    void updateIntegrationSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void updateIntegrationSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);

    void abortRequestsSignal();
    void allPendingRequestsCompleted();

public Q_SLOTS:
    void tokenAvailable();
};

} // namespace OpenAPI
#endif
