/**
 * SwaggerHub Registry API
 * # Overview Use SwaggerHub Registry API to access, manage, and update the following resources in SwaggerHub, bypassing the web interface:   * APIs   * Domains   * Integrations   * Projects   * Templates   SwaggerHub also provides the [User Management API](https://app.swaggerhub.com/apis-docs/swagger-hub/user-management-api/) to get information about organizations and manage organization members.  # Base URL Use the following base URL for SwaggerHub SaaS:          http(s)://api.swaggerhub.com  **Note:** This documentation is for SwaggerHub SaaS. On-Premise customers should use the bundled API definition, which can be found at the URLs provided below.  Version 1.29.0 or later:      http(s)://SERVER/v1/openapi.yaml - YAML version     http(s)://SERVER/v1/openapi.json - JSON version  Earlier versions:      http(s)://SERVER/v1/swagger.yaml - YAML version     http(s)://SERVER/v1/swagger.json - JSON version  # Authentication Operations that update data or access private data require authentication using an API key. You can find your personal API key on the [API Keys](https://app.swaggerhub.com/settings/apiKey) page in your account settings. Send this key in the `Authorization` header when making requests to the Registry API:      Authorization: YOUR_API_KEY  To test API calls from this documentation page, click the **Authorize** button below and paste your API key there.  **Important:** Keep the API key secure and do not store it directly in your code. # Tools In addition to calling the Registry API directly, you can use the following tools to interact with the API from the command line or CI/CD pipeline:   * [SwaggerHub CLI](https://www.npmjs.com/package/swaggerhub-cli)   * [Maven plugin](https://github.com/swagger-api/swaggerhub-maven-plugin)  * [Gradle plugin](https://github.com/swagger-api/swaggerhub-gradle-plugin) 
 *
 * The version of the OpenAPI document: 1.0.66
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIAzureDevopsServicesIntegration.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIAzureDevopsServicesIntegration::OAIAzureDevopsServicesIntegration(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIAzureDevopsServicesIntegration::OAIAzureDevopsServicesIntegration() {
    this->initializeModel();
}

OAIAzureDevopsServicesIntegration::~OAIAzureDevopsServicesIntegration() {}

void OAIAzureDevopsServicesIntegration::initializeModel() {

    m_enabled_isSet = false;
    m_enabled_isValid = false;

    m_id_isSet = false;
    m_id_isValid = false;

    m_name_isSet = false;
    m_name_isValid = false;

    m_branch_isSet = false;
    m_branch_isValid = false;

    m_ignored_paths_isSet = false;
    m_ignored_paths_isValid = false;

    m_managed_paths_isSet = false;
    m_managed_paths_isValid = false;

    m_output_file_isSet = false;
    m_output_file_isValid = false;

    m_output_folder_isSet = false;
    m_output_folder_isValid = false;

    m_provided_paths_isSet = false;
    m_provided_paths_isValid = false;

    m_repository_isSet = false;
    m_repository_isValid = false;

    m_sync_method_isSet = false;
    m_sync_method_isValid = false;

    m_target_isSet = false;
    m_target_isValid = false;

    m_config_type_isSet = false;
    m_config_type_isValid = false;

    m_organization_isSet = false;
    m_organization_isValid = false;

    m_personal_access_token_isSet = false;
    m_personal_access_token_isValid = false;

    m_project_isSet = false;
    m_project_isValid = false;
}

void OAIAzureDevopsServicesIntegration::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIAzureDevopsServicesIntegration::fromJsonObject(QJsonObject json) {

    m_enabled_isValid = ::OpenAPI::fromJsonValue(m_enabled, json[QString("enabled")]);
    m_enabled_isSet = !json[QString("enabled")].isNull() && m_enabled_isValid;

    m_id_isValid = ::OpenAPI::fromJsonValue(m_id, json[QString("id")]);
    m_id_isSet = !json[QString("id")].isNull() && m_id_isValid;

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("name")]);
    m_name_isSet = !json[QString("name")].isNull() && m_name_isValid;

    m_branch_isValid = ::OpenAPI::fromJsonValue(m_branch, json[QString("branch")]);
    m_branch_isSet = !json[QString("branch")].isNull() && m_branch_isValid;

    m_ignored_paths_isValid = ::OpenAPI::fromJsonValue(m_ignored_paths, json[QString("ignoredPaths")]);
    m_ignored_paths_isSet = !json[QString("ignoredPaths")].isNull() && m_ignored_paths_isValid;

    m_managed_paths_isValid = ::OpenAPI::fromJsonValue(m_managed_paths, json[QString("managedPaths")]);
    m_managed_paths_isSet = !json[QString("managedPaths")].isNull() && m_managed_paths_isValid;

    m_output_file_isValid = ::OpenAPI::fromJsonValue(m_output_file, json[QString("outputFile")]);
    m_output_file_isSet = !json[QString("outputFile")].isNull() && m_output_file_isValid;

    m_output_folder_isValid = ::OpenAPI::fromJsonValue(m_output_folder, json[QString("outputFolder")]);
    m_output_folder_isSet = !json[QString("outputFolder")].isNull() && m_output_folder_isValid;

    m_provided_paths_isValid = ::OpenAPI::fromJsonValue(m_provided_paths, json[QString("providedPaths")]);
    m_provided_paths_isSet = !json[QString("providedPaths")].isNull() && m_provided_paths_isValid;

    m_repository_isValid = ::OpenAPI::fromJsonValue(m_repository, json[QString("repository")]);
    m_repository_isSet = !json[QString("repository")].isNull() && m_repository_isValid;

    m_sync_method_isValid = ::OpenAPI::fromJsonValue(m_sync_method, json[QString("syncMethod")]);
    m_sync_method_isSet = !json[QString("syncMethod")].isNull() && m_sync_method_isValid;

    m_target_isValid = ::OpenAPI::fromJsonValue(m_target, json[QString("target")]);
    m_target_isSet = !json[QString("target")].isNull() && m_target_isValid;

    m_config_type_isValid = ::OpenAPI::fromJsonValue(m_config_type, json[QString("configType")]);
    m_config_type_isSet = !json[QString("configType")].isNull() && m_config_type_isValid;

    m_organization_isValid = ::OpenAPI::fromJsonValue(m_organization, json[QString("organization")]);
    m_organization_isSet = !json[QString("organization")].isNull() && m_organization_isValid;

    m_personal_access_token_isValid = ::OpenAPI::fromJsonValue(m_personal_access_token, json[QString("personalAccessToken")]);
    m_personal_access_token_isSet = !json[QString("personalAccessToken")].isNull() && m_personal_access_token_isValid;

    m_project_isValid = ::OpenAPI::fromJsonValue(m_project, json[QString("project")]);
    m_project_isSet = !json[QString("project")].isNull() && m_project_isValid;
}

QString OAIAzureDevopsServicesIntegration::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIAzureDevopsServicesIntegration::asJsonObject() const {
    QJsonObject obj;
    if (m_enabled_isSet) {
        obj.insert(QString("enabled"), ::OpenAPI::toJsonValue(m_enabled));
    }
    if (m_id_isSet) {
        obj.insert(QString("id"), ::OpenAPI::toJsonValue(m_id));
    }
    if (m_name_isSet) {
        obj.insert(QString("name"), ::OpenAPI::toJsonValue(m_name));
    }
    if (m_branch_isSet) {
        obj.insert(QString("branch"), ::OpenAPI::toJsonValue(m_branch));
    }
    if (m_ignored_paths.size() > 0) {
        obj.insert(QString("ignoredPaths"), ::OpenAPI::toJsonValue(m_ignored_paths));
    }
    if (m_managed_paths.size() > 0) {
        obj.insert(QString("managedPaths"), ::OpenAPI::toJsonValue(m_managed_paths));
    }
    if (m_output_file_isSet) {
        obj.insert(QString("outputFile"), ::OpenAPI::toJsonValue(m_output_file));
    }
    if (m_output_folder_isSet) {
        obj.insert(QString("outputFolder"), ::OpenAPI::toJsonValue(m_output_folder));
    }
    if (m_provided_paths.size() > 0) {
        obj.insert(QString("providedPaths"), ::OpenAPI::toJsonValue(m_provided_paths));
    }
    if (m_repository_isSet) {
        obj.insert(QString("repository"), ::OpenAPI::toJsonValue(m_repository));
    }
    if (m_sync_method_isSet) {
        obj.insert(QString("syncMethod"), ::OpenAPI::toJsonValue(m_sync_method));
    }
    if (m_target_isSet) {
        obj.insert(QString("target"), ::OpenAPI::toJsonValue(m_target));
    }
    if (m_config_type_isSet) {
        obj.insert(QString("configType"), ::OpenAPI::toJsonValue(m_config_type));
    }
    if (m_organization_isSet) {
        obj.insert(QString("organization"), ::OpenAPI::toJsonValue(m_organization));
    }
    if (m_personal_access_token_isSet) {
        obj.insert(QString("personalAccessToken"), ::OpenAPI::toJsonValue(m_personal_access_token));
    }
    if (m_project_isSet) {
        obj.insert(QString("project"), ::OpenAPI::toJsonValue(m_project));
    }
    return obj;
}

bool OAIAzureDevopsServicesIntegration::isEnabled() const {
    return m_enabled;
}
void OAIAzureDevopsServicesIntegration::setEnabled(const bool &enabled) {
    m_enabled = enabled;
    m_enabled_isSet = true;
}

bool OAIAzureDevopsServicesIntegration::is_enabled_Set() const{
    return m_enabled_isSet;
}

bool OAIAzureDevopsServicesIntegration::is_enabled_Valid() const{
    return m_enabled_isValid;
}

QString OAIAzureDevopsServicesIntegration::getId() const {
    return m_id;
}
void OAIAzureDevopsServicesIntegration::setId(const QString &id) {
    m_id = id;
    m_id_isSet = true;
}

bool OAIAzureDevopsServicesIntegration::is_id_Set() const{
    return m_id_isSet;
}

bool OAIAzureDevopsServicesIntegration::is_id_Valid() const{
    return m_id_isValid;
}

QString OAIAzureDevopsServicesIntegration::getName() const {
    return m_name;
}
void OAIAzureDevopsServicesIntegration::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAIAzureDevopsServicesIntegration::is_name_Set() const{
    return m_name_isSet;
}

bool OAIAzureDevopsServicesIntegration::is_name_Valid() const{
    return m_name_isValid;
}

QString OAIAzureDevopsServicesIntegration::getBranch() const {
    return m_branch;
}
void OAIAzureDevopsServicesIntegration::setBranch(const QString &branch) {
    m_branch = branch;
    m_branch_isSet = true;
}

bool OAIAzureDevopsServicesIntegration::is_branch_Set() const{
    return m_branch_isSet;
}

bool OAIAzureDevopsServicesIntegration::is_branch_Valid() const{
    return m_branch_isValid;
}

QList<QString> OAIAzureDevopsServicesIntegration::getIgnoredPaths() const {
    return m_ignored_paths;
}
void OAIAzureDevopsServicesIntegration::setIgnoredPaths(const QList<QString> &ignored_paths) {
    m_ignored_paths = ignored_paths;
    m_ignored_paths_isSet = true;
}

bool OAIAzureDevopsServicesIntegration::is_ignored_paths_Set() const{
    return m_ignored_paths_isSet;
}

bool OAIAzureDevopsServicesIntegration::is_ignored_paths_Valid() const{
    return m_ignored_paths_isValid;
}

QList<QString> OAIAzureDevopsServicesIntegration::getManagedPaths() const {
    return m_managed_paths;
}
void OAIAzureDevopsServicesIntegration::setManagedPaths(const QList<QString> &managed_paths) {
    m_managed_paths = managed_paths;
    m_managed_paths_isSet = true;
}

bool OAIAzureDevopsServicesIntegration::is_managed_paths_Set() const{
    return m_managed_paths_isSet;
}

bool OAIAzureDevopsServicesIntegration::is_managed_paths_Valid() const{
    return m_managed_paths_isValid;
}

QString OAIAzureDevopsServicesIntegration::getOutputFile() const {
    return m_output_file;
}
void OAIAzureDevopsServicesIntegration::setOutputFile(const QString &output_file) {
    m_output_file = output_file;
    m_output_file_isSet = true;
}

bool OAIAzureDevopsServicesIntegration::is_output_file_Set() const{
    return m_output_file_isSet;
}

bool OAIAzureDevopsServicesIntegration::is_output_file_Valid() const{
    return m_output_file_isValid;
}

QString OAIAzureDevopsServicesIntegration::getOutputFolder() const {
    return m_output_folder;
}
void OAIAzureDevopsServicesIntegration::setOutputFolder(const QString &output_folder) {
    m_output_folder = output_folder;
    m_output_folder_isSet = true;
}

bool OAIAzureDevopsServicesIntegration::is_output_folder_Set() const{
    return m_output_folder_isSet;
}

bool OAIAzureDevopsServicesIntegration::is_output_folder_Valid() const{
    return m_output_folder_isValid;
}

QList<QString> OAIAzureDevopsServicesIntegration::getProvidedPaths() const {
    return m_provided_paths;
}
void OAIAzureDevopsServicesIntegration::setProvidedPaths(const QList<QString> &provided_paths) {
    m_provided_paths = provided_paths;
    m_provided_paths_isSet = true;
}

bool OAIAzureDevopsServicesIntegration::is_provided_paths_Set() const{
    return m_provided_paths_isSet;
}

bool OAIAzureDevopsServicesIntegration::is_provided_paths_Valid() const{
    return m_provided_paths_isValid;
}

QString OAIAzureDevopsServicesIntegration::getRepository() const {
    return m_repository;
}
void OAIAzureDevopsServicesIntegration::setRepository(const QString &repository) {
    m_repository = repository;
    m_repository_isSet = true;
}

bool OAIAzureDevopsServicesIntegration::is_repository_Set() const{
    return m_repository_isSet;
}

bool OAIAzureDevopsServicesIntegration::is_repository_Valid() const{
    return m_repository_isValid;
}

QString OAIAzureDevopsServicesIntegration::getSyncMethod() const {
    return m_sync_method;
}
void OAIAzureDevopsServicesIntegration::setSyncMethod(const QString &sync_method) {
    m_sync_method = sync_method;
    m_sync_method_isSet = true;
}

bool OAIAzureDevopsServicesIntegration::is_sync_method_Set() const{
    return m_sync_method_isSet;
}

bool OAIAzureDevopsServicesIntegration::is_sync_method_Valid() const{
    return m_sync_method_isValid;
}

QString OAIAzureDevopsServicesIntegration::getTarget() const {
    return m_target;
}
void OAIAzureDevopsServicesIntegration::setTarget(const QString &target) {
    m_target = target;
    m_target_isSet = true;
}

bool OAIAzureDevopsServicesIntegration::is_target_Set() const{
    return m_target_isSet;
}

bool OAIAzureDevopsServicesIntegration::is_target_Valid() const{
    return m_target_isValid;
}

QString OAIAzureDevopsServicesIntegration::getConfigType() const {
    return m_config_type;
}
void OAIAzureDevopsServicesIntegration::setConfigType(const QString &config_type) {
    m_config_type = config_type;
    m_config_type_isSet = true;
}

bool OAIAzureDevopsServicesIntegration::is_config_type_Set() const{
    return m_config_type_isSet;
}

bool OAIAzureDevopsServicesIntegration::is_config_type_Valid() const{
    return m_config_type_isValid;
}

QString OAIAzureDevopsServicesIntegration::getOrganization() const {
    return m_organization;
}
void OAIAzureDevopsServicesIntegration::setOrganization(const QString &organization) {
    m_organization = organization;
    m_organization_isSet = true;
}

bool OAIAzureDevopsServicesIntegration::is_organization_Set() const{
    return m_organization_isSet;
}

bool OAIAzureDevopsServicesIntegration::is_organization_Valid() const{
    return m_organization_isValid;
}

QString OAIAzureDevopsServicesIntegration::getPersonalAccessToken() const {
    return m_personal_access_token;
}
void OAIAzureDevopsServicesIntegration::setPersonalAccessToken(const QString &personal_access_token) {
    m_personal_access_token = personal_access_token;
    m_personal_access_token_isSet = true;
}

bool OAIAzureDevopsServicesIntegration::is_personal_access_token_Set() const{
    return m_personal_access_token_isSet;
}

bool OAIAzureDevopsServicesIntegration::is_personal_access_token_Valid() const{
    return m_personal_access_token_isValid;
}

QString OAIAzureDevopsServicesIntegration::getProject() const {
    return m_project;
}
void OAIAzureDevopsServicesIntegration::setProject(const QString &project) {
    m_project = project;
    m_project_isSet = true;
}

bool OAIAzureDevopsServicesIntegration::is_project_Set() const{
    return m_project_isSet;
}

bool OAIAzureDevopsServicesIntegration::is_project_Valid() const{
    return m_project_isValid;
}

bool OAIAzureDevopsServicesIntegration::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_enabled_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_branch_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_ignored_paths.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_managed_paths.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_output_file_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_output_folder_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_provided_paths.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_repository_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_sync_method_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_target_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_config_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_organization_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_personal_access_token_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_project_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIAzureDevopsServicesIntegration::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_name_isValid && m_branch_isValid && m_output_folder_isValid && m_repository_isValid && m_sync_method_isValid && m_target_isValid && m_config_type_isValid && m_organization_isValid && m_project_isValid && true;
}

} // namespace OpenAPI
