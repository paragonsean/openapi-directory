/**
 * SwaggerHub Registry API
 * # Overview Use SwaggerHub Registry API to access, manage, and update the following resources in SwaggerHub, bypassing the web interface:   * APIs   * Domains   * Integrations   * Projects   * Templates   SwaggerHub also provides the [User Management API](https://app.swaggerhub.com/apis-docs/swagger-hub/user-management-api/) to get information about organizations and manage organization members.  # Base URL Use the following base URL for SwaggerHub SaaS:          http(s)://api.swaggerhub.com  **Note:** This documentation is for SwaggerHub SaaS. On-Premise customers should use the bundled API definition, which can be found at the URLs provided below.  Version 1.29.0 or later:      http(s)://SERVER/v1/openapi.yaml - YAML version     http(s)://SERVER/v1/openapi.json - JSON version  Earlier versions:      http(s)://SERVER/v1/swagger.yaml - YAML version     http(s)://SERVER/v1/swagger.json - JSON version  # Authentication Operations that update data or access private data require authentication using an API key. You can find your personal API key on the [API Keys](https://app.swaggerhub.com/settings/apiKey) page in your account settings. Send this key in the `Authorization` header when making requests to the Registry API:      Authorization: YOUR_API_KEY  To test API calls from this documentation page, click the **Authorize** button below and paste your API key there.  **Important:** Keep the API key secure and do not store it directly in your code. # Tools In addition to calling the Registry API directly, you can use the following tools to interact with the API from the command line or CI/CD pipeline:   * [SwaggerHub CLI](https://www.npmjs.com/package/swaggerhub-cli)   * [Maven plugin](https://github.com/swagger-api/swaggerhub-maven-plugin)  * [Gradle plugin](https://github.com/swagger-api/swaggerhub-gradle-plugin) 
 *
 * The version of the OpenAPI document: 1.0.66
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAICommentPatch.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAICommentPatch::OAICommentPatch(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAICommentPatch::OAICommentPatch() {
    this->initializeModel();
}

OAICommentPatch::~OAICommentPatch() {}

void OAICommentPatch::initializeModel() {

    m_body_isSet = false;
    m_body_isValid = false;
}

void OAICommentPatch::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAICommentPatch::fromJsonObject(QJsonObject json) {

    m_body_isValid = ::OpenAPI::fromJsonValue(m_body, json[QString("body")]);
    m_body_isSet = !json[QString("body")].isNull() && m_body_isValid;
}

QString OAICommentPatch::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAICommentPatch::asJsonObject() const {
    QJsonObject obj;
    if (m_body_isSet) {
        obj.insert(QString("body"), ::OpenAPI::toJsonValue(m_body));
    }
    return obj;
}

QString OAICommentPatch::getBody() const {
    return m_body;
}
void OAICommentPatch::setBody(const QString &body) {
    m_body = body;
    m_body_isSet = true;
}

bool OAICommentPatch::is_body_Set() const{
    return m_body_isSet;
}

bool OAICommentPatch::is_body_Valid() const{
    return m_body_isValid;
}

bool OAICommentPatch::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_body_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAICommentPatch::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
