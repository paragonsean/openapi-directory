/**
 * SwaggerHub Registry API
 * # Overview Use SwaggerHub Registry API to access, manage, and update the following resources in SwaggerHub, bypassing the web interface:   * APIs   * Domains   * Integrations   * Projects   * Templates   SwaggerHub also provides the [User Management API](https://app.swaggerhub.com/apis-docs/swagger-hub/user-management-api/) to get information about organizations and manage organization members.  # Base URL Use the following base URL for SwaggerHub SaaS:          http(s)://api.swaggerhub.com  **Note:** This documentation is for SwaggerHub SaaS. On-Premise customers should use the bundled API definition, which can be found at the URLs provided below.  Version 1.29.0 or later:      http(s)://SERVER/v1/openapi.yaml - YAML version     http(s)://SERVER/v1/openapi.json - JSON version  Earlier versions:      http(s)://SERVER/v1/swagger.yaml - YAML version     http(s)://SERVER/v1/swagger.json - JSON version  # Authentication Operations that update data or access private data require authentication using an API key. You can find your personal API key on the [API Keys](https://app.swaggerhub.com/settings/apiKey) page in your account settings. Send this key in the `Authorization` header when making requests to the Registry API:      Authorization: YOUR_API_KEY  To test API calls from this documentation page, click the **Authorize** button below and paste your API key there.  **Important:** Keep the API key secure and do not store it directly in your code. # Tools In addition to calling the Registry API directly, you can use the following tools to interact with the API from the command line or CI/CD pipeline:   * [SwaggerHub CLI](https://www.npmjs.com/package/swaggerhub-cli)   * [Maven plugin](https://github.com/swagger-api/swaggerhub-maven-plugin)  * [Gradle plugin](https://github.com/swagger-api/swaggerhub-gradle-plugin) 
 *
 * The version of the OpenAPI document: 1.0.66
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#ifndef OAI_OAIProjectsApi_H
#define OAI_OAIProjectsApi_H

#include "OAIHelpers.h"
#include "OAIHttpRequest.h"
#include "OAIServerConfiguration.h"
#include "OAIOauth.h"

#include "OAIProject.h"
#include "OAIProjectMemberList.h"
#include "OAIProjectsJson.h"
#include <QString>

#include <QObject>
#include <QByteArray>
#include <QStringList>
#include <QList>
#include <QNetworkAccessManager>

namespace OpenAPI {

class OAIProjectsApi : public QObject {
    Q_OBJECT

public:
    OAIProjectsApi(const int timeOut = 0);
    ~OAIProjectsApi();

    void initializeServerConfigs();
    int setDefaultServerValue(int serverIndex,const QString &operation, const QString &variable,const QString &val);
    void setServerIndex(const QString &operation, int serverIndex);
    void setApiKey(const QString &apiKeyName, const QString &apiKey);
    void setBearerToken(const QString &token);
    void setUsername(const QString &username);
    void setPassword(const QString &password);
    void setTimeOut(const int timeOut);
    void setWorkingDirectory(const QString &path);
    void setNetworkAccessManager(QNetworkAccessManager* manager);
    int addServerConfiguration(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables = QMap<QString, OAIServerVariable>());
    void setNewServerForAllOperations(const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void setNewServer(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void addHeaders(const QString &key, const QString &value);
    void enableRequestCompression();
    void enableResponseCompression();
    void abortRequests();
    QString getParamStylePrefix(const QString &style);
    QString getParamStyleSuffix(const QString &style);
    QString getParamStyleDelimiter(const QString &style, const QString &name, bool isExplode);

    /**
    * @param[in]  owner QString [required]
    * @param[in]  project_id QString [required]
    * @param[in]  spec_type QString [required]
    * @param[in]  name QString [required]
    */
    virtual void addSpecToProjectV2(const QString &owner, const QString &project_id, const QString &spec_type, const QString &name);

    /**
    * @param[in]  owner QString [required]
    * @param[in]  project_request OAIProject [required]
    */
    virtual void createProject(const QString &owner, const OAIProject &project_request);

    /**
    * @param[in]  owner QString [required]
    * @param[in]  project_id QString [required]
    */
    virtual void deleteProjectV2(const QString &owner, const QString &project_id);

    /**
    * @param[in]  owner QString [required]
    * @param[in]  name_only bool [optional]
    * @param[in]  page qint32 [optional]
    * @param[in]  limit qint32 [optional]
    * @param[in]  order QString [optional]
    */
    virtual void getOrgProjectsV2(const QString &owner, const ::OpenAPI::OptionalParam<bool> &name_only = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<qint32> &page = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint32> &limit = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<QString> &order = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  owner QString [required]
    * @param[in]  project_id QString [required]
    */
    virtual void getProjectMembersV2(const QString &owner, const QString &project_id);

    /**
    * @param[in]  owner QString [required]
    * @param[in]  project_id QString [required]
    */
    virtual void getProjectV2(const QString &owner, const QString &project_id);

    /**
    * @param[in]  name_only bool [optional]
    * @param[in]  page qint32 [optional]
    * @param[in]  limit qint32 [optional]
    * @param[in]  sort QString [optional]
    * @param[in]  order QString [optional]
    */
    virtual void getUserProjects(const ::OpenAPI::OptionalParam<bool> &name_only = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<qint32> &page = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint32> &limit = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<QString> &sort = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &order = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  owner QString [required]
    * @param[in]  project_id QString [required]
    * @param[in]  project_request OAIProject [required]
    */
    virtual void saveProjectV2(const QString &owner, const QString &project_id, const OAIProject &project_request);

    /**
    * @param[in]  owner QString [required]
    * @param[in]  project_id QString [required]
    * @param[in]  project_member_list OAIProjectMemberList [required]
    */
    virtual void updateProjectMembersV2(const QString &owner, const QString &project_id, const OAIProjectMemberList &project_member_list);


private:
    QMap<QString,int> _serverIndices;
    QMap<QString,QList<OAIServerConfiguration>> _serverConfigs;
    QMap<QString, QString> _apiKeys;
    QString _bearerToken;
    QString _username;
    QString _password;
    int _timeOut;
    QString _workingDirectory;
    QNetworkAccessManager* _manager;
    QMap<QString, QString> _defaultHeaders;
    bool _isResponseCompressionEnabled;
    bool _isRequestCompressionEnabled;
    OAIHttpRequestInput _latestInput;
    OAIHttpRequestWorker *_latestWorker;
    QStringList _latestScope;
    OauthCode _authFlow;
    OauthImplicit _implicitFlow;
    OauthCredentials _credentialFlow;
    OauthPassword _passwordFlow;
    int _OauthMethod = 0;

    void addSpecToProjectV2Callback(OAIHttpRequestWorker *worker);
    void createProjectCallback(OAIHttpRequestWorker *worker);
    void deleteProjectV2Callback(OAIHttpRequestWorker *worker);
    void getOrgProjectsV2Callback(OAIHttpRequestWorker *worker);
    void getProjectMembersV2Callback(OAIHttpRequestWorker *worker);
    void getProjectV2Callback(OAIHttpRequestWorker *worker);
    void getUserProjectsCallback(OAIHttpRequestWorker *worker);
    void saveProjectV2Callback(OAIHttpRequestWorker *worker);
    void updateProjectMembersV2Callback(OAIHttpRequestWorker *worker);

Q_SIGNALS:

    void addSpecToProjectV2Signal();
    void createProjectSignal();
    void deleteProjectV2Signal();
    void getOrgProjectsV2Signal(OAIProjectsJson summary);
    void getProjectMembersV2Signal(OAIProjectMemberList summary);
    void getProjectV2Signal(OAIProject summary);
    void getUserProjectsSignal(OAIProjectsJson summary);
    void saveProjectV2Signal();
    void updateProjectMembersV2Signal();


    void addSpecToProjectV2SignalFull(OAIHttpRequestWorker *worker);
    void createProjectSignalFull(OAIHttpRequestWorker *worker);
    void deleteProjectV2SignalFull(OAIHttpRequestWorker *worker);
    void getOrgProjectsV2SignalFull(OAIHttpRequestWorker *worker, OAIProjectsJson summary);
    void getProjectMembersV2SignalFull(OAIHttpRequestWorker *worker, OAIProjectMemberList summary);
    void getProjectV2SignalFull(OAIHttpRequestWorker *worker, OAIProject summary);
    void getUserProjectsSignalFull(OAIHttpRequestWorker *worker, OAIProjectsJson summary);
    void saveProjectV2SignalFull(OAIHttpRequestWorker *worker);
    void updateProjectMembersV2SignalFull(OAIHttpRequestWorker *worker);

    Q_DECL_DEPRECATED_X("Use addSpecToProjectV2SignalError() instead")
    void addSpecToProjectV2SignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void addSpecToProjectV2SignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use createProjectSignalError() instead")
    void createProjectSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void createProjectSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use deleteProjectV2SignalError() instead")
    void deleteProjectV2SignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void deleteProjectV2SignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getOrgProjectsV2SignalError() instead")
    void getOrgProjectsV2SignalE(OAIProjectsJson summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getOrgProjectsV2SignalError(OAIProjectsJson summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getProjectMembersV2SignalError() instead")
    void getProjectMembersV2SignalE(OAIProjectMemberList summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getProjectMembersV2SignalError(OAIProjectMemberList summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getProjectV2SignalError() instead")
    void getProjectV2SignalE(OAIProject summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getProjectV2SignalError(OAIProject summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getUserProjectsSignalError() instead")
    void getUserProjectsSignalE(OAIProjectsJson summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getUserProjectsSignalError(OAIProjectsJson summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use saveProjectV2SignalError() instead")
    void saveProjectV2SignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void saveProjectV2SignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use updateProjectMembersV2SignalError() instead")
    void updateProjectMembersV2SignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void updateProjectMembersV2SignalError(QNetworkReply::NetworkError error_type, const QString &error_str);

    Q_DECL_DEPRECATED_X("Use addSpecToProjectV2SignalErrorFull() instead")
    void addSpecToProjectV2SignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void addSpecToProjectV2SignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use createProjectSignalErrorFull() instead")
    void createProjectSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void createProjectSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use deleteProjectV2SignalErrorFull() instead")
    void deleteProjectV2SignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void deleteProjectV2SignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getOrgProjectsV2SignalErrorFull() instead")
    void getOrgProjectsV2SignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getOrgProjectsV2SignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getProjectMembersV2SignalErrorFull() instead")
    void getProjectMembersV2SignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getProjectMembersV2SignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getProjectV2SignalErrorFull() instead")
    void getProjectV2SignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getProjectV2SignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getUserProjectsSignalErrorFull() instead")
    void getUserProjectsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getUserProjectsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use saveProjectV2SignalErrorFull() instead")
    void saveProjectV2SignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void saveProjectV2SignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use updateProjectMembersV2SignalErrorFull() instead")
    void updateProjectMembersV2SignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void updateProjectMembersV2SignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);

    void abortRequestsSignal();
    void allPendingRequestsCompleted();

public Q_SLOTS:
    void tokenAvailable();
};

} // namespace OpenAPI
#endif
