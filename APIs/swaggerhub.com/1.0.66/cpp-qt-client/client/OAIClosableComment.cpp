/**
 * SwaggerHub Registry API
 * # Overview Use SwaggerHub Registry API to access, manage, and update the following resources in SwaggerHub, bypassing the web interface:   * APIs   * Domains   * Integrations   * Projects   * Templates   SwaggerHub also provides the [User Management API](https://app.swaggerhub.com/apis-docs/swagger-hub/user-management-api/) to get information about organizations and manage organization members.  # Base URL Use the following base URL for SwaggerHub SaaS:          http(s)://api.swaggerhub.com  **Note:** This documentation is for SwaggerHub SaaS. On-Premise customers should use the bundled API definition, which can be found at the URLs provided below.  Version 1.29.0 or later:      http(s)://SERVER/v1/openapi.yaml - YAML version     http(s)://SERVER/v1/openapi.json - JSON version  Earlier versions:      http(s)://SERVER/v1/swagger.yaml - YAML version     http(s)://SERVER/v1/swagger.json - JSON version  # Authentication Operations that update data or access private data require authentication using an API key. You can find your personal API key on the [API Keys](https://app.swaggerhub.com/settings/apiKey) page in your account settings. Send this key in the `Authorization` header when making requests to the Registry API:      Authorization: YOUR_API_KEY  To test API calls from this documentation page, click the **Authorize** button below and paste your API key there.  **Important:** Keep the API key secure and do not store it directly in your code. # Tools In addition to calling the Registry API directly, you can use the following tools to interact with the API from the command line or CI/CD pipeline:   * [SwaggerHub CLI](https://www.npmjs.com/package/swaggerhub-cli)   * [Maven plugin](https://github.com/swagger-api/swaggerhub-maven-plugin)  * [Gradle plugin](https://github.com/swagger-api/swaggerhub-gradle-plugin) 
 *
 * The version of the OpenAPI document: 1.0.66
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIClosableComment.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIClosableComment::OAIClosableComment(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIClosableComment::OAIClosableComment() {
    this->initializeModel();
}

OAIClosableComment::~OAIClosableComment() {}

void OAIClosableComment::initializeModel() {

    m_body_isSet = false;
    m_body_isValid = false;

    m_created_isSet = false;
    m_created_isValid = false;

    m_id_isSet = false;
    m_id_isValid = false;

    m_modified_isSet = false;
    m_modified_isValid = false;

    m_user_isSet = false;
    m_user_isValid = false;

    m_position_isSet = false;
    m_position_isValid = false;

    m_replies_isSet = false;
    m_replies_isValid = false;

    m_status_isSet = false;
    m_status_isValid = false;
}

void OAIClosableComment::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIClosableComment::fromJsonObject(QJsonObject json) {

    m_body_isValid = ::OpenAPI::fromJsonValue(m_body, json[QString("body")]);
    m_body_isSet = !json[QString("body")].isNull() && m_body_isValid;

    m_created_isValid = ::OpenAPI::fromJsonValue(m_created, json[QString("created")]);
    m_created_isSet = !json[QString("created")].isNull() && m_created_isValid;

    m_id_isValid = ::OpenAPI::fromJsonValue(m_id, json[QString("id")]);
    m_id_isSet = !json[QString("id")].isNull() && m_id_isValid;

    m_modified_isValid = ::OpenAPI::fromJsonValue(m_modified, json[QString("modified")]);
    m_modified_isSet = !json[QString("modified")].isNull() && m_modified_isValid;

    m_user_isValid = ::OpenAPI::fromJsonValue(m_user, json[QString("user")]);
    m_user_isSet = !json[QString("user")].isNull() && m_user_isValid;

    m_position_isValid = ::OpenAPI::fromJsonValue(m_position, json[QString("position")]);
    m_position_isSet = !json[QString("position")].isNull() && m_position_isValid;

    m_replies_isValid = ::OpenAPI::fromJsonValue(m_replies, json[QString("replies")]);
    m_replies_isSet = !json[QString("replies")].isNull() && m_replies_isValid;

    m_status_isValid = ::OpenAPI::fromJsonValue(m_status, json[QString("status")]);
    m_status_isSet = !json[QString("status")].isNull() && m_status_isValid;
}

QString OAIClosableComment::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIClosableComment::asJsonObject() const {
    QJsonObject obj;
    if (m_body_isSet) {
        obj.insert(QString("body"), ::OpenAPI::toJsonValue(m_body));
    }
    if (m_created_isSet) {
        obj.insert(QString("created"), ::OpenAPI::toJsonValue(m_created));
    }
    if (m_id_isSet) {
        obj.insert(QString("id"), ::OpenAPI::toJsonValue(m_id));
    }
    if (m_modified_isSet) {
        obj.insert(QString("modified"), ::OpenAPI::toJsonValue(m_modified));
    }
    if (m_user.isSet()) {
        obj.insert(QString("user"), ::OpenAPI::toJsonValue(m_user));
    }
    if (m_position_isSet) {
        obj.insert(QString("position"), ::OpenAPI::toJsonValue(m_position));
    }
    if (m_replies.size() > 0) {
        obj.insert(QString("replies"), ::OpenAPI::toJsonValue(m_replies));
    }
    if (m_status_isSet) {
        obj.insert(QString("status"), ::OpenAPI::toJsonValue(m_status));
    }
    return obj;
}

QString OAIClosableComment::getBody() const {
    return m_body;
}
void OAIClosableComment::setBody(const QString &body) {
    m_body = body;
    m_body_isSet = true;
}

bool OAIClosableComment::is_body_Set() const{
    return m_body_isSet;
}

bool OAIClosableComment::is_body_Valid() const{
    return m_body_isValid;
}

QDateTime OAIClosableComment::getCreated() const {
    return m_created;
}
void OAIClosableComment::setCreated(const QDateTime &created) {
    m_created = created;
    m_created_isSet = true;
}

bool OAIClosableComment::is_created_Set() const{
    return m_created_isSet;
}

bool OAIClosableComment::is_created_Valid() const{
    return m_created_isValid;
}

QString OAIClosableComment::getId() const {
    return m_id;
}
void OAIClosableComment::setId(const QString &id) {
    m_id = id;
    m_id_isSet = true;
}

bool OAIClosableComment::is_id_Set() const{
    return m_id_isSet;
}

bool OAIClosableComment::is_id_Valid() const{
    return m_id_isValid;
}

QDateTime OAIClosableComment::getModified() const {
    return m_modified;
}
void OAIClosableComment::setModified(const QDateTime &modified) {
    m_modified = modified;
    m_modified_isSet = true;
}

bool OAIClosableComment::is_modified_Set() const{
    return m_modified_isSet;
}

bool OAIClosableComment::is_modified_Valid() const{
    return m_modified_isValid;
}

OAIUser OAIClosableComment::getUser() const {
    return m_user;
}
void OAIClosableComment::setUser(const OAIUser &user) {
    m_user = user;
    m_user_isSet = true;
}

bool OAIClosableComment::is_user_Set() const{
    return m_user_isSet;
}

bool OAIClosableComment::is_user_Valid() const{
    return m_user_isValid;
}

qint32 OAIClosableComment::getPosition() const {
    return m_position;
}
void OAIClosableComment::setPosition(const qint32 &position) {
    m_position = position;
    m_position_isSet = true;
}

bool OAIClosableComment::is_position_Set() const{
    return m_position_isSet;
}

bool OAIClosableComment::is_position_Valid() const{
    return m_position_isValid;
}

QList<OAIComment> OAIClosableComment::getReplies() const {
    return m_replies;
}
void OAIClosableComment::setReplies(const QList<OAIComment> &replies) {
    m_replies = replies;
    m_replies_isSet = true;
}

bool OAIClosableComment::is_replies_Set() const{
    return m_replies_isSet;
}

bool OAIClosableComment::is_replies_Valid() const{
    return m_replies_isValid;
}

QString OAIClosableComment::getStatus() const {
    return m_status;
}
void OAIClosableComment::setStatus(const QString &status) {
    m_status = status;
    m_status_isSet = true;
}

bool OAIClosableComment::is_status_Set() const{
    return m_status_isSet;
}

bool OAIClosableComment::is_status_Valid() const{
    return m_status_isValid;
}

bool OAIClosableComment::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_body_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_created_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_modified_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_user.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_position_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_replies.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_status_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIClosableComment::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_body_isValid && m_created_isValid && m_id_isValid && m_user_isValid && true;
}

} // namespace OpenAPI
