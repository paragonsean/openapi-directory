/**
 * SwaggerHub Registry API
 * # Overview Use SwaggerHub Registry API to access, manage, and update the following resources in SwaggerHub, bypassing the web interface:   * APIs   * Domains   * Integrations   * Projects   * Templates   SwaggerHub also provides the [User Management API](https://app.swaggerhub.com/apis-docs/swagger-hub/user-management-api/) to get information about organizations and manage organization members.  # Base URL Use the following base URL for SwaggerHub SaaS:          http(s)://api.swaggerhub.com  **Note:** This documentation is for SwaggerHub SaaS. On-Premise customers should use the bundled API definition, which can be found at the URLs provided below.  Version 1.29.0 or later:      http(s)://SERVER/v1/openapi.yaml - YAML version     http(s)://SERVER/v1/openapi.json - JSON version  Earlier versions:      http(s)://SERVER/v1/swagger.yaml - YAML version     http(s)://SERVER/v1/swagger.json - JSON version  # Authentication Operations that update data or access private data require authentication using an API key. You can find your personal API key on the [API Keys](https://app.swaggerhub.com/settings/apiKey) page in your account settings. Send this key in the `Authorization` header when making requests to the Registry API:      Authorization: YOUR_API_KEY  To test API calls from this documentation page, click the **Authorize** button below and paste your API key there.  **Important:** Keep the API key secure and do not store it directly in your code. # Tools In addition to calling the Registry API directly, you can use the following tools to interact with the API from the command line or CI/CD pipeline:   * [SwaggerHub CLI](https://www.npmjs.com/package/swaggerhub-cli)   * [Maven plugin](https://github.com/swagger-api/swaggerhub-maven-plugin)  * [Gradle plugin](https://github.com/swagger-api/swaggerhub-gradle-plugin) 
 *
 * The version of the OpenAPI document: 1.0.66
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIAmazonIntegration.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIAmazonIntegration::OAIAmazonIntegration(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIAmazonIntegration::OAIAmazonIntegration() {
    this->initializeModel();
}

OAIAmazonIntegration::~OAIAmazonIntegration() {}

void OAIAmazonIntegration::initializeModel() {

    m_enabled_isSet = false;
    m_enabled_isValid = false;

    m_id_isSet = false;
    m_id_isValid = false;

    m_name_isSet = false;
    m_name_isValid = false;

    m_access_key_isSet = false;
    m_access_key_isValid = false;

    m_api_id_isSet = false;
    m_api_id_isValid = false;

    m_base_path_mode_isSet = false;
    m_base_path_mode_isValid = false;

    m_deployment_mode_isSet = false;
    m_deployment_mode_isValid = false;

    m_publish_mode_isSet = false;
    m_publish_mode_isValid = false;

    m_region_isSet = false;
    m_region_isValid = false;

    m_secret_key_isSet = false;
    m_secret_key_isValid = false;

    m_update_definition_isSet = false;
    m_update_definition_isValid = false;
}

void OAIAmazonIntegration::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIAmazonIntegration::fromJsonObject(QJsonObject json) {

    m_enabled_isValid = ::OpenAPI::fromJsonValue(m_enabled, json[QString("enabled")]);
    m_enabled_isSet = !json[QString("enabled")].isNull() && m_enabled_isValid;

    m_id_isValid = ::OpenAPI::fromJsonValue(m_id, json[QString("id")]);
    m_id_isSet = !json[QString("id")].isNull() && m_id_isValid;

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("name")]);
    m_name_isSet = !json[QString("name")].isNull() && m_name_isValid;

    m_access_key_isValid = ::OpenAPI::fromJsonValue(m_access_key, json[QString("accessKey")]);
    m_access_key_isSet = !json[QString("accessKey")].isNull() && m_access_key_isValid;

    m_api_id_isValid = ::OpenAPI::fromJsonValue(m_api_id, json[QString("apiId")]);
    m_api_id_isSet = !json[QString("apiId")].isNull() && m_api_id_isValid;

    m_base_path_mode_isValid = ::OpenAPI::fromJsonValue(m_base_path_mode, json[QString("basePathMode")]);
    m_base_path_mode_isSet = !json[QString("basePathMode")].isNull() && m_base_path_mode_isValid;

    m_deployment_mode_isValid = ::OpenAPI::fromJsonValue(m_deployment_mode, json[QString("deploymentMode")]);
    m_deployment_mode_isSet = !json[QString("deploymentMode")].isNull() && m_deployment_mode_isValid;

    m_publish_mode_isValid = ::OpenAPI::fromJsonValue(m_publish_mode, json[QString("publishMode")]);
    m_publish_mode_isSet = !json[QString("publishMode")].isNull() && m_publish_mode_isValid;

    m_region_isValid = ::OpenAPI::fromJsonValue(m_region, json[QString("region")]);
    m_region_isSet = !json[QString("region")].isNull() && m_region_isValid;

    m_secret_key_isValid = ::OpenAPI::fromJsonValue(m_secret_key, json[QString("secretKey")]);
    m_secret_key_isSet = !json[QString("secretKey")].isNull() && m_secret_key_isValid;

    m_update_definition_isValid = ::OpenAPI::fromJsonValue(m_update_definition, json[QString("updateDefinition")]);
    m_update_definition_isSet = !json[QString("updateDefinition")].isNull() && m_update_definition_isValid;
}

QString OAIAmazonIntegration::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIAmazonIntegration::asJsonObject() const {
    QJsonObject obj;
    if (m_enabled_isSet) {
        obj.insert(QString("enabled"), ::OpenAPI::toJsonValue(m_enabled));
    }
    if (m_id_isSet) {
        obj.insert(QString("id"), ::OpenAPI::toJsonValue(m_id));
    }
    if (m_name_isSet) {
        obj.insert(QString("name"), ::OpenAPI::toJsonValue(m_name));
    }
    if (m_access_key_isSet) {
        obj.insert(QString("accessKey"), ::OpenAPI::toJsonValue(m_access_key));
    }
    if (m_api_id_isSet) {
        obj.insert(QString("apiId"), ::OpenAPI::toJsonValue(m_api_id));
    }
    if (m_base_path_mode_isSet) {
        obj.insert(QString("basePathMode"), ::OpenAPI::toJsonValue(m_base_path_mode));
    }
    if (m_deployment_mode_isSet) {
        obj.insert(QString("deploymentMode"), ::OpenAPI::toJsonValue(m_deployment_mode));
    }
    if (m_publish_mode_isSet) {
        obj.insert(QString("publishMode"), ::OpenAPI::toJsonValue(m_publish_mode));
    }
    if (m_region_isSet) {
        obj.insert(QString("region"), ::OpenAPI::toJsonValue(m_region));
    }
    if (m_secret_key_isSet) {
        obj.insert(QString("secretKey"), ::OpenAPI::toJsonValue(m_secret_key));
    }
    if (m_update_definition_isSet) {
        obj.insert(QString("updateDefinition"), ::OpenAPI::toJsonValue(m_update_definition));
    }
    return obj;
}

bool OAIAmazonIntegration::isEnabled() const {
    return m_enabled;
}
void OAIAmazonIntegration::setEnabled(const bool &enabled) {
    m_enabled = enabled;
    m_enabled_isSet = true;
}

bool OAIAmazonIntegration::is_enabled_Set() const{
    return m_enabled_isSet;
}

bool OAIAmazonIntegration::is_enabled_Valid() const{
    return m_enabled_isValid;
}

QString OAIAmazonIntegration::getId() const {
    return m_id;
}
void OAIAmazonIntegration::setId(const QString &id) {
    m_id = id;
    m_id_isSet = true;
}

bool OAIAmazonIntegration::is_id_Set() const{
    return m_id_isSet;
}

bool OAIAmazonIntegration::is_id_Valid() const{
    return m_id_isValid;
}

QString OAIAmazonIntegration::getName() const {
    return m_name;
}
void OAIAmazonIntegration::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAIAmazonIntegration::is_name_Set() const{
    return m_name_isSet;
}

bool OAIAmazonIntegration::is_name_Valid() const{
    return m_name_isValid;
}

QString OAIAmazonIntegration::getAccessKey() const {
    return m_access_key;
}
void OAIAmazonIntegration::setAccessKey(const QString &access_key) {
    m_access_key = access_key;
    m_access_key_isSet = true;
}

bool OAIAmazonIntegration::is_access_key_Set() const{
    return m_access_key_isSet;
}

bool OAIAmazonIntegration::is_access_key_Valid() const{
    return m_access_key_isValid;
}

QString OAIAmazonIntegration::getApiId() const {
    return m_api_id;
}
void OAIAmazonIntegration::setApiId(const QString &api_id) {
    m_api_id = api_id;
    m_api_id_isSet = true;
}

bool OAIAmazonIntegration::is_api_id_Set() const{
    return m_api_id_isSet;
}

bool OAIAmazonIntegration::is_api_id_Valid() const{
    return m_api_id_isValid;
}

QString OAIAmazonIntegration::getBasePathMode() const {
    return m_base_path_mode;
}
void OAIAmazonIntegration::setBasePathMode(const QString &base_path_mode) {
    m_base_path_mode = base_path_mode;
    m_base_path_mode_isSet = true;
}

bool OAIAmazonIntegration::is_base_path_mode_Set() const{
    return m_base_path_mode_isSet;
}

bool OAIAmazonIntegration::is_base_path_mode_Valid() const{
    return m_base_path_mode_isValid;
}

QString OAIAmazonIntegration::getDeploymentMode() const {
    return m_deployment_mode;
}
void OAIAmazonIntegration::setDeploymentMode(const QString &deployment_mode) {
    m_deployment_mode = deployment_mode;
    m_deployment_mode_isSet = true;
}

bool OAIAmazonIntegration::is_deployment_mode_Set() const{
    return m_deployment_mode_isSet;
}

bool OAIAmazonIntegration::is_deployment_mode_Valid() const{
    return m_deployment_mode_isValid;
}

QString OAIAmazonIntegration::getPublishMode() const {
    return m_publish_mode;
}
void OAIAmazonIntegration::setPublishMode(const QString &publish_mode) {
    m_publish_mode = publish_mode;
    m_publish_mode_isSet = true;
}

bool OAIAmazonIntegration::is_publish_mode_Set() const{
    return m_publish_mode_isSet;
}

bool OAIAmazonIntegration::is_publish_mode_Valid() const{
    return m_publish_mode_isValid;
}

QString OAIAmazonIntegration::getRegion() const {
    return m_region;
}
void OAIAmazonIntegration::setRegion(const QString &region) {
    m_region = region;
    m_region_isSet = true;
}

bool OAIAmazonIntegration::is_region_Set() const{
    return m_region_isSet;
}

bool OAIAmazonIntegration::is_region_Valid() const{
    return m_region_isValid;
}

QString OAIAmazonIntegration::getSecretKey() const {
    return m_secret_key;
}
void OAIAmazonIntegration::setSecretKey(const QString &secret_key) {
    m_secret_key = secret_key;
    m_secret_key_isSet = true;
}

bool OAIAmazonIntegration::is_secret_key_Set() const{
    return m_secret_key_isSet;
}

bool OAIAmazonIntegration::is_secret_key_Valid() const{
    return m_secret_key_isValid;
}

bool OAIAmazonIntegration::isUpdateDefinition() const {
    return m_update_definition;
}
void OAIAmazonIntegration::setUpdateDefinition(const bool &update_definition) {
    m_update_definition = update_definition;
    m_update_definition_isSet = true;
}

bool OAIAmazonIntegration::is_update_definition_Set() const{
    return m_update_definition_isSet;
}

bool OAIAmazonIntegration::is_update_definition_Valid() const{
    return m_update_definition_isValid;
}

bool OAIAmazonIntegration::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_enabled_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_access_key_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_api_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_base_path_mode_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_deployment_mode_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_publish_mode_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_region_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_secret_key_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_update_definition_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIAmazonIntegration::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_name_isValid && m_region_isValid && true;
}

} // namespace OpenAPI
