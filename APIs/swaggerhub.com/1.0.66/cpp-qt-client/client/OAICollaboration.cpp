/**
 * SwaggerHub Registry API
 * # Overview Use SwaggerHub Registry API to access, manage, and update the following resources in SwaggerHub, bypassing the web interface:   * APIs   * Domains   * Integrations   * Projects   * Templates   SwaggerHub also provides the [User Management API](https://app.swaggerhub.com/apis-docs/swagger-hub/user-management-api/) to get information about organizations and manage organization members.  # Base URL Use the following base URL for SwaggerHub SaaS:          http(s)://api.swaggerhub.com  **Note:** This documentation is for SwaggerHub SaaS. On-Premise customers should use the bundled API definition, which can be found at the URLs provided below.  Version 1.29.0 or later:      http(s)://SERVER/v1/openapi.yaml - YAML version     http(s)://SERVER/v1/openapi.json - JSON version  Earlier versions:      http(s)://SERVER/v1/swagger.yaml - YAML version     http(s)://SERVER/v1/swagger.json - JSON version  # Authentication Operations that update data or access private data require authentication using an API key. You can find your personal API key on the [API Keys](https://app.swaggerhub.com/settings/apiKey) page in your account settings. Send this key in the `Authorization` header when making requests to the Registry API:      Authorization: YOUR_API_KEY  To test API calls from this documentation page, click the **Authorize** button below and paste your API key there.  **Important:** Keep the API key secure and do not store it directly in your code. # Tools In addition to calling the Registry API directly, you can use the following tools to interact with the API from the command line or CI/CD pipeline:   * [SwaggerHub CLI](https://www.npmjs.com/package/swaggerhub-cli)   * [Maven plugin](https://github.com/swagger-api/swaggerhub-maven-plugin)  * [Gradle plugin](https://github.com/swagger-api/swaggerhub-gradle-plugin) 
 *
 * The version of the OpenAPI document: 1.0.66
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAICollaboration.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAICollaboration::OAICollaboration(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAICollaboration::OAICollaboration() {
    this->initializeModel();
}

OAICollaboration::~OAICollaboration() {}

void OAICollaboration::initializeModel() {

    m_members_isSet = false;
    m_members_isValid = false;

    m_owner_isSet = false;
    m_owner_isValid = false;

    m_owner_name_isSet = false;
    m_owner_name_isValid = false;

    m_owners_isSet = false;
    m_owners_isValid = false;

    m_pending_members_isSet = false;
    m_pending_members_isValid = false;

    m_teams_isSet = false;
    m_teams_isValid = false;
}

void OAICollaboration::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAICollaboration::fromJsonObject(QJsonObject json) {

    m_members_isValid = ::OpenAPI::fromJsonValue(m_members, json[QString("members")]);
    m_members_isSet = !json[QString("members")].isNull() && m_members_isValid;

    m_owner_isValid = ::OpenAPI::fromJsonValue(m_owner, json[QString("owner")]);
    m_owner_isSet = !json[QString("owner")].isNull() && m_owner_isValid;

    m_owner_name_isValid = ::OpenAPI::fromJsonValue(m_owner_name, json[QString("ownerName")]);
    m_owner_name_isSet = !json[QString("ownerName")].isNull() && m_owner_name_isValid;

    m_owners_isValid = ::OpenAPI::fromJsonValue(m_owners, json[QString("owners")]);
    m_owners_isSet = !json[QString("owners")].isNull() && m_owners_isValid;

    m_pending_members_isValid = ::OpenAPI::fromJsonValue(m_pending_members, json[QString("pendingMembers")]);
    m_pending_members_isSet = !json[QString("pendingMembers")].isNull() && m_pending_members_isValid;

    m_teams_isValid = ::OpenAPI::fromJsonValue(m_teams, json[QString("teams")]);
    m_teams_isSet = !json[QString("teams")].isNull() && m_teams_isValid;
}

QString OAICollaboration::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAICollaboration::asJsonObject() const {
    QJsonObject obj;
    if (m_members.size() > 0) {
        obj.insert(QString("members"), ::OpenAPI::toJsonValue(m_members));
    }
    if (m_owner_isSet) {
        obj.insert(QString("owner"), ::OpenAPI::toJsonValue(m_owner));
    }
    if (m_owner_name_isSet) {
        obj.insert(QString("ownerName"), ::OpenAPI::toJsonValue(m_owner_name));
    }
    if (m_owners.size() > 0) {
        obj.insert(QString("owners"), ::OpenAPI::toJsonValue(m_owners));
    }
    if (m_pending_members.size() > 0) {
        obj.insert(QString("pendingMembers"), ::OpenAPI::toJsonValue(m_pending_members));
    }
    if (m_teams.size() > 0) {
        obj.insert(QString("teams"), ::OpenAPI::toJsonValue(m_teams));
    }
    return obj;
}

QList<OAICollaborationMembership> OAICollaboration::getMembers() const {
    return m_members;
}
void OAICollaboration::setMembers(const QList<OAICollaborationMembership> &members) {
    m_members = members;
    m_members_isSet = true;
}

bool OAICollaboration::is_members_Set() const{
    return m_members_isSet;
}

bool OAICollaboration::is_members_Valid() const{
    return m_members_isValid;
}

QString OAICollaboration::getOwner() const {
    return m_owner;
}
void OAICollaboration::setOwner(const QString &owner) {
    m_owner = owner;
    m_owner_isSet = true;
}

bool OAICollaboration::is_owner_Set() const{
    return m_owner_isSet;
}

bool OAICollaboration::is_owner_Valid() const{
    return m_owner_isValid;
}

QString OAICollaboration::getOwnerName() const {
    return m_owner_name;
}
void OAICollaboration::setOwnerName(const QString &owner_name) {
    m_owner_name = owner_name;
    m_owner_name_isSet = true;
}

bool OAICollaboration::is_owner_name_Set() const{
    return m_owner_name_isSet;
}

bool OAICollaboration::is_owner_name_Valid() const{
    return m_owner_name_isValid;
}

QList<OAIOrganizationOwner> OAICollaboration::getOwners() const {
    return m_owners;
}
void OAICollaboration::setOwners(const QList<OAIOrganizationOwner> &owners) {
    m_owners = owners;
    m_owners_isSet = true;
}

bool OAICollaboration::is_owners_Set() const{
    return m_owners_isSet;
}

bool OAICollaboration::is_owners_Valid() const{
    return m_owners_isValid;
}

QList<OAICollaborationMembership> OAICollaboration::getPendingMembers() const {
    return m_pending_members;
}
void OAICollaboration::setPendingMembers(const QList<OAICollaborationMembership> &pending_members) {
    m_pending_members = pending_members;
    m_pending_members_isSet = true;
}

bool OAICollaboration::is_pending_members_Set() const{
    return m_pending_members_isSet;
}

bool OAICollaboration::is_pending_members_Valid() const{
    return m_pending_members_isValid;
}

QList<OAICollaborationTeamMembership> OAICollaboration::getTeams() const {
    return m_teams;
}
void OAICollaboration::setTeams(const QList<OAICollaborationTeamMembership> &teams) {
    m_teams = teams;
    m_teams_isSet = true;
}

bool OAICollaboration::is_teams_Set() const{
    return m_teams_isSet;
}

bool OAICollaboration::is_teams_Valid() const{
    return m_teams_isValid;
}

bool OAICollaboration::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_members.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_owner_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_owner_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_owners.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_pending_members.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_teams.size() > 0) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAICollaboration::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
