/**
 * SwaggerHub Registry API
 * # Overview Use SwaggerHub Registry API to access, manage, and update the following resources in SwaggerHub, bypassing the web interface:   * APIs   * Domains   * Integrations   * Projects   * Templates   SwaggerHub also provides the [User Management API](https://app.swaggerhub.com/apis-docs/swagger-hub/user-management-api/) to get information about organizations and manage organization members.  # Base URL Use the following base URL for SwaggerHub SaaS:          http(s)://api.swaggerhub.com  **Note:** This documentation is for SwaggerHub SaaS. On-Premise customers should use the bundled API definition, which can be found at the URLs provided below.  Version 1.29.0 or later:      http(s)://SERVER/v1/openapi.yaml - YAML version     http(s)://SERVER/v1/openapi.json - JSON version  Earlier versions:      http(s)://SERVER/v1/swagger.yaml - YAML version     http(s)://SERVER/v1/swagger.json - JSON version  # Authentication Operations that update data or access private data require authentication using an API key. You can find your personal API key on the [API Keys](https://app.swaggerhub.com/settings/apiKey) page in your account settings. Send this key in the `Authorization` header when making requests to the Registry API:      Authorization: YOUR_API_KEY  To test API calls from this documentation page, click the **Authorize** button below and paste your API key there.  **Important:** Keep the API key secure and do not store it directly in your code. # Tools In addition to calling the Registry API directly, you can use the following tools to interact with the API from the command line or CI/CD pipeline:   * [SwaggerHub CLI](https://www.npmjs.com/package/swaggerhub-cli)   * [Maven plugin](https://github.com/swagger-api/swaggerhub-maven-plugin)  * [Gradle plugin](https://github.com/swagger-api/swaggerhub-gradle-plugin) 
 *
 * The version of the OpenAPI document: 1.0.66
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAIAzureDevopsServicesIntegration.h
 *
 * Configuration details for the Azure DevOps Services integration
 */

#ifndef OAIAzureDevopsServicesIntegration_H
#define OAIAzureDevopsServicesIntegration_H

#include <QJsonObject>

#include <QList>
#include <QString>

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {

class OAIAzureDevopsServicesIntegration : public OAIObject {
public:
    OAIAzureDevopsServicesIntegration();
    OAIAzureDevopsServicesIntegration(QString json);
    ~OAIAzureDevopsServicesIntegration() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    bool isEnabled() const;
    void setEnabled(const bool &enabled);
    bool is_enabled_Set() const;
    bool is_enabled_Valid() const;

    QString getId() const;
    void setId(const QString &id);
    bool is_id_Set() const;
    bool is_id_Valid() const;

    QString getName() const;
    void setName(const QString &name);
    bool is_name_Set() const;
    bool is_name_Valid() const;

    QString getBranch() const;
    void setBranch(const QString &branch);
    bool is_branch_Set() const;
    bool is_branch_Valid() const;

    QList<QString> getIgnoredPaths() const;
    void setIgnoredPaths(const QList<QString> &ignored_paths);
    bool is_ignored_paths_Set() const;
    bool is_ignored_paths_Valid() const;

    QList<QString> getManagedPaths() const;
    void setManagedPaths(const QList<QString> &managed_paths);
    bool is_managed_paths_Set() const;
    bool is_managed_paths_Valid() const;

    QString getOutputFile() const;
    void setOutputFile(const QString &output_file);
    bool is_output_file_Set() const;
    bool is_output_file_Valid() const;

    QString getOutputFolder() const;
    void setOutputFolder(const QString &output_folder);
    bool is_output_folder_Set() const;
    bool is_output_folder_Valid() const;

    QList<QString> getProvidedPaths() const;
    void setProvidedPaths(const QList<QString> &provided_paths);
    bool is_provided_paths_Set() const;
    bool is_provided_paths_Valid() const;

    QString getRepository() const;
    void setRepository(const QString &repository);
    bool is_repository_Set() const;
    bool is_repository_Valid() const;

    QString getSyncMethod() const;
    void setSyncMethod(const QString &sync_method);
    bool is_sync_method_Set() const;
    bool is_sync_method_Valid() const;

    QString getTarget() const;
    void setTarget(const QString &target);
    bool is_target_Set() const;
    bool is_target_Valid() const;

    QString getConfigType() const;
    void setConfigType(const QString &config_type);
    bool is_config_type_Set() const;
    bool is_config_type_Valid() const;

    QString getOrganization() const;
    void setOrganization(const QString &organization);
    bool is_organization_Set() const;
    bool is_organization_Valid() const;

    QString getPersonalAccessToken() const;
    void setPersonalAccessToken(const QString &personal_access_token);
    bool is_personal_access_token_Set() const;
    bool is_personal_access_token_Valid() const;

    QString getProject() const;
    void setProject(const QString &project);
    bool is_project_Set() const;
    bool is_project_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    bool m_enabled;
    bool m_enabled_isSet;
    bool m_enabled_isValid;

    QString m_id;
    bool m_id_isSet;
    bool m_id_isValid;

    QString m_name;
    bool m_name_isSet;
    bool m_name_isValid;

    QString m_branch;
    bool m_branch_isSet;
    bool m_branch_isValid;

    QList<QString> m_ignored_paths;
    bool m_ignored_paths_isSet;
    bool m_ignored_paths_isValid;

    QList<QString> m_managed_paths;
    bool m_managed_paths_isSet;
    bool m_managed_paths_isValid;

    QString m_output_file;
    bool m_output_file_isSet;
    bool m_output_file_isValid;

    QString m_output_folder;
    bool m_output_folder_isSet;
    bool m_output_folder_isValid;

    QList<QString> m_provided_paths;
    bool m_provided_paths_isSet;
    bool m_provided_paths_isValid;

    QString m_repository;
    bool m_repository_isSet;
    bool m_repository_isValid;

    QString m_sync_method;
    bool m_sync_method_isSet;
    bool m_sync_method_isValid;

    QString m_target;
    bool m_target_isSet;
    bool m_target_isValid;

    QString m_config_type;
    bool m_config_type_isSet;
    bool m_config_type_isValid;

    QString m_organization;
    bool m_organization_isSet;
    bool m_organization_isValid;

    QString m_personal_access_token;
    bool m_personal_access_token_isSet;
    bool m_personal_access_token_isValid;

    QString m_project;
    bool m_project_isSet;
    bool m_project_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAIAzureDevopsServicesIntegration)

#endif // OAIAzureDevopsServicesIntegration_H
