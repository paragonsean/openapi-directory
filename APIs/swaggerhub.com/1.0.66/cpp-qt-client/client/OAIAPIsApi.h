/**
 * SwaggerHub Registry API
 * # Overview Use SwaggerHub Registry API to access, manage, and update the following resources in SwaggerHub, bypassing the web interface:   * APIs   * Domains   * Integrations   * Projects   * Templates   SwaggerHub also provides the [User Management API](https://app.swaggerhub.com/apis-docs/swagger-hub/user-management-api/) to get information about organizations and manage organization members.  # Base URL Use the following base URL for SwaggerHub SaaS:          http(s)://api.swaggerhub.com  **Note:** This documentation is for SwaggerHub SaaS. On-Premise customers should use the bundled API definition, which can be found at the URLs provided below.  Version 1.29.0 or later:      http(s)://SERVER/v1/openapi.yaml - YAML version     http(s)://SERVER/v1/openapi.json - JSON version  Earlier versions:      http(s)://SERVER/v1/swagger.yaml - YAML version     http(s)://SERVER/v1/swagger.json - JSON version  # Authentication Operations that update data or access private data require authentication using an API key. You can find your personal API key on the [API Keys](https://app.swaggerhub.com/settings/apiKey) page in your account settings. Send this key in the `Authorization` header when making requests to the Registry API:      Authorization: YOUR_API_KEY  To test API calls from this documentation page, click the **Authorize** button below and paste your API key there.  **Important:** Keep the API key secure and do not store it directly in your code. # Tools In addition to calling the Registry API directly, you can use the following tools to interact with the API from the command line or CI/CD pipeline:   * [SwaggerHub CLI](https://www.npmjs.com/package/swaggerhub-cli)   * [Maven plugin](https://github.com/swagger-api/swaggerhub-maven-plugin)  * [Gradle plugin](https://github.com/swagger-api/swaggerhub-gradle-plugin) 
 *
 * The version of the OpenAPI document: 1.0.66
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#ifndef OAI_OAIAPIsApi_H
#define OAI_OAIAPIsApi_H

#include "OAIHelpers.h"
#include "OAIHttpRequest.h"
#include "OAIServerConfiguration.h"
#include "OAIOauth.h"

#include "OAIApisJson.h"
#include "OAIClosableComment.h"
#include "OAIClosableCommentPatch.h"
#include "OAIComment.h"
#include "OAICommentPatch.h"
#include "OAICommentsBatch.h"
#include "OAIDefaultVersion.h"
#include "OAIForkVersion.h"
#include "OAILifecycleSettings.h"
#include "OAINewComment.h"
#include "OAINewReply.h"
#include "OAINewVersion.h"
#include "OAIObject.h"
#include "OAIStandardizationResult.h"
#include "OAIValidationResult.h"
#include "OAIVisibilitySettings.h"
#include <QString>

#include <QObject>
#include <QByteArray>
#include <QStringList>
#include <QList>
#include <QNetworkAccessManager>

namespace OpenAPI {

class OAIAPIsApi : public QObject {
    Q_OBJECT

public:
    OAIAPIsApi(const int timeOut = 0);
    ~OAIAPIsApi();

    void initializeServerConfigs();
    int setDefaultServerValue(int serverIndex,const QString &operation, const QString &variable,const QString &val);
    void setServerIndex(const QString &operation, int serverIndex);
    void setApiKey(const QString &apiKeyName, const QString &apiKey);
    void setBearerToken(const QString &token);
    void setUsername(const QString &username);
    void setPassword(const QString &password);
    void setTimeOut(const int timeOut);
    void setWorkingDirectory(const QString &path);
    void setNetworkAccessManager(QNetworkAccessManager* manager);
    int addServerConfiguration(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables = QMap<QString, OAIServerVariable>());
    void setNewServerForAllOperations(const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void setNewServer(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void addHeaders(const QString &key, const QString &value);
    void enableRequestCompression();
    void enableResponseCompression();
    void abortRequests();
    QString getParamStylePrefix(const QString &style);
    QString getParamStyleSuffix(const QString &style);
    QString getParamStyleDelimiter(const QString &style, const QString &name, bool isExplode);

    /**
    * @param[in]  owner QString [required]
    * @param[in]  api QString [required]
    * @param[in]  version QString [required]
    * @param[in]  comment QString [required]
    * @param[in]  body OAINewReply [required]
    */
    virtual void addApiCommentReplyV2(const QString &owner, const QString &api, const QString &version, const QString &comment, const OAINewReply &body);

    /**
    * @param[in]  owner QString [required]
    * @param[in]  api QString [required]
    * @param[in]  version QString [required]
    * @param[in]  body OAINewComment [required]
    */
    virtual void addApiCommentV2(const QString &owner, const QString &api, const QString &version, const OAINewComment &body);

    /**
    * @param[in]  owner QString [required]
    * @param[in]  api QString [required]
    * @param[in]  version QString [required]
    * @param[in]  new_version OAINewVersion [required]
    */
    virtual void cloneApi(const QString &owner, const QString &api, const QString &version, const OAINewVersion &new_version);

    /**
    * @param[in]  owner QString [required]
    * @param[in]  api QString [required]
    */
    virtual void deleteApi(const QString &owner, const QString &api);

    /**
    * @param[in]  owner QString [required]
    * @param[in]  api QString [required]
    * @param[in]  version QString [required]
    * @param[in]  comment QString [required]
    * @param[in]  reply QString [required]
    */
    virtual void deleteApiCommentReplyV2(const QString &owner, const QString &api, const QString &version, const QString &comment, const QString &reply);

    /**
    * @param[in]  owner QString [required]
    * @param[in]  api QString [required]
    * @param[in]  version QString [required]
    * @param[in]  comment QString [required]
    */
    virtual void deleteApiCommentV2(const QString &owner, const QString &api, const QString &version, const QString &comment);

    /**
    * @param[in]  owner QString [required]
    * @param[in]  api QString [required]
    * @param[in]  version QString [required]
    */
    virtual void deleteApiVersion(const QString &owner, const QString &api, const QString &version);

    /**
    * @param[in]  owner QString [required]
    * @param[in]  api QString [required]
    * @param[in]  version QString [required]
    * @param[in]  fork_version OAIForkVersion [required]
    */
    virtual void forkApi(const QString &owner, const QString &api, const QString &version, const OAIForkVersion &fork_version);

    /**
    * @param[in]  owner QString [required]
    * @param[in]  api QString [required]
    * @param[in]  version QString [required]
    */
    virtual void getApiCommentsV2(const QString &owner, const QString &api, const QString &version);

    /**
    * @param[in]  owner QString [required]
    * @param[in]  api QString [required]
    */
    virtual void getApiDefaultVersion(const QString &owner, const QString &api);

    /**
    * @param[in]  owner QString [required]
    * @param[in]  api QString [required]
    */
    virtual void getApiVersions(const QString &owner, const QString &api);

    /**
    * @param[in]  owner QString [required]
    * @param[in]  api QString [required]
    * @param[in]  version QString [required]
    * @param[in]  resolved bool [optional]
    * @param[in]  flatten bool [optional]
    */
    virtual void getDefinition(const QString &owner, const QString &api, const QString &version, const ::OpenAPI::OptionalParam<bool> &resolved = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<bool> &flatten = ::OpenAPI::OptionalParam<bool>());

    /**
    * @param[in]  owner QString [required]
    * @param[in]  api QString [required]
    * @param[in]  version QString [required]
    * @param[in]  resolved bool [optional]
    * @param[in]  flatten bool [optional]
    */
    virtual void getJsonDefinition(const QString &owner, const QString &api, const QString &version, const ::OpenAPI::OptionalParam<bool> &resolved = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<bool> &flatten = ::OpenAPI::OptionalParam<bool>());

    /**
    * @param[in]  owner QString [required]
    * @param[in]  api QString [required]
    * @param[in]  version QString [required]
    */
    virtual void getLifecycleSettings(const QString &owner, const QString &api, const QString &version);

    /**
    * @param[in]  owner QString [required]
    * @param[in]  page qint32 [optional]
    * @param[in]  limit qint32 [optional]
    * @param[in]  sort QString [optional]
    * @param[in]  order QString [optional]
    */
    virtual void getOwnerApis(const QString &owner, const ::OpenAPI::OptionalParam<qint32> &page = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint32> &limit = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<QString> &sort = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &order = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  owner QString [required]
    * @param[in]  api QString [required]
    * @param[in]  version QString [required]
    */
    virtual void getPrivateSettings(const QString &owner, const QString &api, const QString &version);

    /**
    * @param[in]  owner QString [required]
    * @param[in]  api QString [required]
    * @param[in]  version QString [required]
    */
    virtual void getStandardizationErrors(const QString &owner, const QString &api, const QString &version);

    /**
    * @param[in]  owner QString [required]
    * @param[in]  api QString [required]
    * @param[in]  version QString [required]
    */
    Q_DECL_DEPRECATED virtual void getValidation(const QString &owner, const QString &api, const QString &version);

    /**
    * @param[in]  owner QString [required]
    * @param[in]  api QString [required]
    * @param[in]  version QString [required]
    * @param[in]  resolved bool [optional]
    * @param[in]  flatten bool [optional]
    */
    virtual void getYamlDefinition(const QString &owner, const QString &api, const QString &version, const ::OpenAPI::OptionalParam<bool> &resolved = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<bool> &flatten = ::OpenAPI::OptionalParam<bool>());

    /**
    * @param[in]  owner QString [required]
    * @param[in]  api QString [required]
    * @param[in]  new_name QString [required]
    */
    virtual void renameApi(const QString &owner, const QString &api, const QString &new_name);

    /**
    * @param[in]  owner QString [required]
    * @param[in]  api QString [required]
    * @param[in]  definition QString [required]
    * @param[in]  is_private bool [optional]
    * @param[in]  version QString [optional]
    * @param[in]  force bool [optional]
    */
    virtual void saveDefinition(const QString &owner, const QString &api, const QString &definition, const ::OpenAPI::OptionalParam<bool> &is_private = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QString> &version = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &force = ::OpenAPI::OptionalParam<bool>());

    /**
    * @param[in]  query QString [optional]
    * @param[in]  state QString [optional]
    * @param[in]  page qint32 [optional]
    * @param[in]  limit qint32 [optional]
    * @param[in]  sort QString [optional]
    * @param[in]  order QString [optional]
    */
    virtual void searchApis(const ::OpenAPI::OptionalParam<QString> &query = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &state = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<qint32> &page = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint32> &limit = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<QString> &sort = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &order = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  spec_type QString [optional]
    * @param[in]  visibility QString [optional]
    * @param[in]  state QString [optional]
    * @param[in]  owner QString [optional]
    * @param[in]  query QString [optional]
    * @param[in]  page qint32 [optional]
    * @param[in]  limit qint32 [optional]
    * @param[in]  sort QString [optional]
    * @param[in]  order QString [optional]
    */
    virtual void searchApisAndDomains(const ::OpenAPI::OptionalParam<QString> &spec_type = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &visibility = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &state = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &owner = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &query = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<qint32> &page = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint32> &limit = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<QString> &sort = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &order = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  owner QString [required]
    * @param[in]  api QString [required]
    * @param[in]  version QString [required]
    * @param[in]  comment QString [required]
    * @param[in]  status QString [required]
    */
    virtual void setApiCommentStatusV2(const QString &owner, const QString &api, const QString &version, const QString &comment, const QString &status);

    /**
    * @param[in]  owner QString [required]
    * @param[in]  api QString [required]
    * @param[in]  default_version OAIDefaultVersion [required]
    */
    virtual void setApiDefaultVersion(const QString &owner, const QString &api, const OAIDefaultVersion &default_version);

    /**
    * @param[in]  owner QString [required]
    * @param[in]  api QString [required]
    * @param[in]  version QString [required]
    * @param[in]  settings OAILifecycleSettings [required]
    * @param[in]  force bool [optional]
    */
    virtual void setLifecycleSettings(const QString &owner, const QString &api, const QString &version, const OAILifecycleSettings &settings, const ::OpenAPI::OptionalParam<bool> &force = ::OpenAPI::OptionalParam<bool>());

    /**
    * @param[in]  owner QString [required]
    * @param[in]  api QString [required]
    * @param[in]  version QString [required]
    * @param[in]  settings OAIVisibilitySettings [required]
    */
    virtual void setPrivateSettings(const QString &owner, const QString &api, const QString &version, const OAIVisibilitySettings &settings);

    /**
    * @param[in]  owner QString [required]
    * @param[in]  api QString [required]
    * @param[in]  version QString [required]
    * @param[in]  comment QString [required]
    * @param[in]  reply QString [required]
    * @param[in]  body OAICommentPatch [optional]
    */
    virtual void updateApiCommentReplyV2(const QString &owner, const QString &api, const QString &version, const QString &comment, const QString &reply, const ::OpenAPI::OptionalParam<OAICommentPatch> &body = ::OpenAPI::OptionalParam<OAICommentPatch>());

    /**
    * @param[in]  owner QString [required]
    * @param[in]  api QString [required]
    * @param[in]  version QString [required]
    * @param[in]  comment QString [required]
    * @param[in]  body OAIClosableCommentPatch [optional]
    */
    virtual void updateApiCommentV2(const QString &owner, const QString &api, const QString &version, const QString &comment, const ::OpenAPI::OptionalParam<OAIClosableCommentPatch> &body = ::OpenAPI::OptionalParam<OAIClosableCommentPatch>());

    /**
    * @param[in]  owner QString [required]
    * @param[in]  api QString [required]
    * @param[in]  version QString [required]
    * @param[in]  body OAICommentsBatch [required]
    */
    virtual void updateApiCommentsV2(const QString &owner, const QString &api, const QString &version, const OAICommentsBatch &body);


private:
    QMap<QString,int> _serverIndices;
    QMap<QString,QList<OAIServerConfiguration>> _serverConfigs;
    QMap<QString, QString> _apiKeys;
    QString _bearerToken;
    QString _username;
    QString _password;
    int _timeOut;
    QString _workingDirectory;
    QNetworkAccessManager* _manager;
    QMap<QString, QString> _defaultHeaders;
    bool _isResponseCompressionEnabled;
    bool _isRequestCompressionEnabled;
    OAIHttpRequestInput _latestInput;
    OAIHttpRequestWorker *_latestWorker;
    QStringList _latestScope;
    OauthCode _authFlow;
    OauthImplicit _implicitFlow;
    OauthCredentials _credentialFlow;
    OauthPassword _passwordFlow;
    int _OauthMethod = 0;

    void addApiCommentReplyV2Callback(OAIHttpRequestWorker *worker);
    void addApiCommentV2Callback(OAIHttpRequestWorker *worker);
    void cloneApiCallback(OAIHttpRequestWorker *worker);
    void deleteApiCallback(OAIHttpRequestWorker *worker);
    void deleteApiCommentReplyV2Callback(OAIHttpRequestWorker *worker);
    void deleteApiCommentV2Callback(OAIHttpRequestWorker *worker);
    void deleteApiVersionCallback(OAIHttpRequestWorker *worker);
    void forkApiCallback(OAIHttpRequestWorker *worker);
    void getApiCommentsV2Callback(OAIHttpRequestWorker *worker);
    void getApiDefaultVersionCallback(OAIHttpRequestWorker *worker);
    void getApiVersionsCallback(OAIHttpRequestWorker *worker);
    void getDefinitionCallback(OAIHttpRequestWorker *worker);
    void getJsonDefinitionCallback(OAIHttpRequestWorker *worker);
    void getLifecycleSettingsCallback(OAIHttpRequestWorker *worker);
    void getOwnerApisCallback(OAIHttpRequestWorker *worker);
    void getPrivateSettingsCallback(OAIHttpRequestWorker *worker);
    void getStandardizationErrorsCallback(OAIHttpRequestWorker *worker);
    void getValidationCallback(OAIHttpRequestWorker *worker);
    void getYamlDefinitionCallback(OAIHttpRequestWorker *worker);
    void renameApiCallback(OAIHttpRequestWorker *worker);
    void saveDefinitionCallback(OAIHttpRequestWorker *worker);
    void searchApisCallback(OAIHttpRequestWorker *worker);
    void searchApisAndDomainsCallback(OAIHttpRequestWorker *worker);
    void setApiCommentStatusV2Callback(OAIHttpRequestWorker *worker);
    void setApiDefaultVersionCallback(OAIHttpRequestWorker *worker);
    void setLifecycleSettingsCallback(OAIHttpRequestWorker *worker);
    void setPrivateSettingsCallback(OAIHttpRequestWorker *worker);
    void updateApiCommentReplyV2Callback(OAIHttpRequestWorker *worker);
    void updateApiCommentV2Callback(OAIHttpRequestWorker *worker);
    void updateApiCommentsV2Callback(OAIHttpRequestWorker *worker);

Q_SIGNALS:

    void addApiCommentReplyV2Signal(QList<OAIComment> summary);
    void addApiCommentV2Signal(OAIClosableComment summary);
    void cloneApiSignal();
    void deleteApiSignal();
    void deleteApiCommentReplyV2Signal();
    void deleteApiCommentV2Signal();
    void deleteApiVersionSignal();
    void forkApiSignal();
    void getApiCommentsV2Signal(QList<OAIClosableComment> summary);
    void getApiDefaultVersionSignal(OAIDefaultVersion summary);
    void getApiVersionsSignal(OAIApisJson summary);
    void getDefinitionSignal(OAIObject summary);
    void getJsonDefinitionSignal(OAIObject summary);
    void getLifecycleSettingsSignal(OAILifecycleSettings summary);
    void getOwnerApisSignal(OAIApisJson summary);
    void getPrivateSettingsSignal(OAIVisibilitySettings summary);
    void getStandardizationErrorsSignal(OAIStandardizationResult summary);
    void getValidationSignal(OAIValidationResult summary);
    void getYamlDefinitionSignal(OAIObject summary);
    void renameApiSignal();
    void saveDefinitionSignal();
    void searchApisSignal();
    void searchApisAndDomainsSignal(OAIApisJson summary);
    void setApiCommentStatusV2Signal();
    void setApiDefaultVersionSignal();
    void setLifecycleSettingsSignal();
    void setPrivateSettingsSignal();
    void updateApiCommentReplyV2Signal(OAIComment summary);
    void updateApiCommentV2Signal(OAIClosableComment summary);
    void updateApiCommentsV2Signal();


    void addApiCommentReplyV2SignalFull(OAIHttpRequestWorker *worker, QList<OAIComment> summary);
    void addApiCommentV2SignalFull(OAIHttpRequestWorker *worker, OAIClosableComment summary);
    void cloneApiSignalFull(OAIHttpRequestWorker *worker);
    void deleteApiSignalFull(OAIHttpRequestWorker *worker);
    void deleteApiCommentReplyV2SignalFull(OAIHttpRequestWorker *worker);
    void deleteApiCommentV2SignalFull(OAIHttpRequestWorker *worker);
    void deleteApiVersionSignalFull(OAIHttpRequestWorker *worker);
    void forkApiSignalFull(OAIHttpRequestWorker *worker);
    void getApiCommentsV2SignalFull(OAIHttpRequestWorker *worker, QList<OAIClosableComment> summary);
    void getApiDefaultVersionSignalFull(OAIHttpRequestWorker *worker, OAIDefaultVersion summary);
    void getApiVersionsSignalFull(OAIHttpRequestWorker *worker, OAIApisJson summary);
    void getDefinitionSignalFull(OAIHttpRequestWorker *worker, OAIObject summary);
    void getJsonDefinitionSignalFull(OAIHttpRequestWorker *worker, OAIObject summary);
    void getLifecycleSettingsSignalFull(OAIHttpRequestWorker *worker, OAILifecycleSettings summary);
    void getOwnerApisSignalFull(OAIHttpRequestWorker *worker, OAIApisJson summary);
    void getPrivateSettingsSignalFull(OAIHttpRequestWorker *worker, OAIVisibilitySettings summary);
    void getStandardizationErrorsSignalFull(OAIHttpRequestWorker *worker, OAIStandardizationResult summary);
    void getValidationSignalFull(OAIHttpRequestWorker *worker, OAIValidationResult summary);
    void getYamlDefinitionSignalFull(OAIHttpRequestWorker *worker, OAIObject summary);
    void renameApiSignalFull(OAIHttpRequestWorker *worker);
    void saveDefinitionSignalFull(OAIHttpRequestWorker *worker);
    void searchApisSignalFull(OAIHttpRequestWorker *worker);
    void searchApisAndDomainsSignalFull(OAIHttpRequestWorker *worker, OAIApisJson summary);
    void setApiCommentStatusV2SignalFull(OAIHttpRequestWorker *worker);
    void setApiDefaultVersionSignalFull(OAIHttpRequestWorker *worker);
    void setLifecycleSettingsSignalFull(OAIHttpRequestWorker *worker);
    void setPrivateSettingsSignalFull(OAIHttpRequestWorker *worker);
    void updateApiCommentReplyV2SignalFull(OAIHttpRequestWorker *worker, OAIComment summary);
    void updateApiCommentV2SignalFull(OAIHttpRequestWorker *worker, OAIClosableComment summary);
    void updateApiCommentsV2SignalFull(OAIHttpRequestWorker *worker);

    Q_DECL_DEPRECATED_X("Use addApiCommentReplyV2SignalError() instead")
    void addApiCommentReplyV2SignalE(QList<OAIComment> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void addApiCommentReplyV2SignalError(QList<OAIComment> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use addApiCommentV2SignalError() instead")
    void addApiCommentV2SignalE(OAIClosableComment summary, QNetworkReply::NetworkError error_type, QString error_str);
    void addApiCommentV2SignalError(OAIClosableComment summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use cloneApiSignalError() instead")
    void cloneApiSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void cloneApiSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use deleteApiSignalError() instead")
    void deleteApiSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void deleteApiSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use deleteApiCommentReplyV2SignalError() instead")
    void deleteApiCommentReplyV2SignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void deleteApiCommentReplyV2SignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use deleteApiCommentV2SignalError() instead")
    void deleteApiCommentV2SignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void deleteApiCommentV2SignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use deleteApiVersionSignalError() instead")
    void deleteApiVersionSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void deleteApiVersionSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use forkApiSignalError() instead")
    void forkApiSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void forkApiSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getApiCommentsV2SignalError() instead")
    void getApiCommentsV2SignalE(QList<OAIClosableComment> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getApiCommentsV2SignalError(QList<OAIClosableComment> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getApiDefaultVersionSignalError() instead")
    void getApiDefaultVersionSignalE(OAIDefaultVersion summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getApiDefaultVersionSignalError(OAIDefaultVersion summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getApiVersionsSignalError() instead")
    void getApiVersionsSignalE(OAIApisJson summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getApiVersionsSignalError(OAIApisJson summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getDefinitionSignalError() instead")
    void getDefinitionSignalE(OAIObject summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getDefinitionSignalError(OAIObject summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getJsonDefinitionSignalError() instead")
    void getJsonDefinitionSignalE(OAIObject summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getJsonDefinitionSignalError(OAIObject summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getLifecycleSettingsSignalError() instead")
    void getLifecycleSettingsSignalE(OAILifecycleSettings summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getLifecycleSettingsSignalError(OAILifecycleSettings summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getOwnerApisSignalError() instead")
    void getOwnerApisSignalE(OAIApisJson summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getOwnerApisSignalError(OAIApisJson summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getPrivateSettingsSignalError() instead")
    void getPrivateSettingsSignalE(OAIVisibilitySettings summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getPrivateSettingsSignalError(OAIVisibilitySettings summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getStandardizationErrorsSignalError() instead")
    void getStandardizationErrorsSignalE(OAIStandardizationResult summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getStandardizationErrorsSignalError(OAIStandardizationResult summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getValidationSignalError() instead")
    void getValidationSignalE(OAIValidationResult summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getValidationSignalError(OAIValidationResult summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getYamlDefinitionSignalError() instead")
    void getYamlDefinitionSignalE(OAIObject summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getYamlDefinitionSignalError(OAIObject summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use renameApiSignalError() instead")
    void renameApiSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void renameApiSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use saveDefinitionSignalError() instead")
    void saveDefinitionSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void saveDefinitionSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use searchApisSignalError() instead")
    void searchApisSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void searchApisSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use searchApisAndDomainsSignalError() instead")
    void searchApisAndDomainsSignalE(OAIApisJson summary, QNetworkReply::NetworkError error_type, QString error_str);
    void searchApisAndDomainsSignalError(OAIApisJson summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use setApiCommentStatusV2SignalError() instead")
    void setApiCommentStatusV2SignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void setApiCommentStatusV2SignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use setApiDefaultVersionSignalError() instead")
    void setApiDefaultVersionSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void setApiDefaultVersionSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use setLifecycleSettingsSignalError() instead")
    void setLifecycleSettingsSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void setLifecycleSettingsSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use setPrivateSettingsSignalError() instead")
    void setPrivateSettingsSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void setPrivateSettingsSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use updateApiCommentReplyV2SignalError() instead")
    void updateApiCommentReplyV2SignalE(OAIComment summary, QNetworkReply::NetworkError error_type, QString error_str);
    void updateApiCommentReplyV2SignalError(OAIComment summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use updateApiCommentV2SignalError() instead")
    void updateApiCommentV2SignalE(OAIClosableComment summary, QNetworkReply::NetworkError error_type, QString error_str);
    void updateApiCommentV2SignalError(OAIClosableComment summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use updateApiCommentsV2SignalError() instead")
    void updateApiCommentsV2SignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void updateApiCommentsV2SignalError(QNetworkReply::NetworkError error_type, const QString &error_str);

    Q_DECL_DEPRECATED_X("Use addApiCommentReplyV2SignalErrorFull() instead")
    void addApiCommentReplyV2SignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void addApiCommentReplyV2SignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use addApiCommentV2SignalErrorFull() instead")
    void addApiCommentV2SignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void addApiCommentV2SignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use cloneApiSignalErrorFull() instead")
    void cloneApiSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void cloneApiSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use deleteApiSignalErrorFull() instead")
    void deleteApiSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void deleteApiSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use deleteApiCommentReplyV2SignalErrorFull() instead")
    void deleteApiCommentReplyV2SignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void deleteApiCommentReplyV2SignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use deleteApiCommentV2SignalErrorFull() instead")
    void deleteApiCommentV2SignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void deleteApiCommentV2SignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use deleteApiVersionSignalErrorFull() instead")
    void deleteApiVersionSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void deleteApiVersionSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use forkApiSignalErrorFull() instead")
    void forkApiSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void forkApiSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getApiCommentsV2SignalErrorFull() instead")
    void getApiCommentsV2SignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getApiCommentsV2SignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getApiDefaultVersionSignalErrorFull() instead")
    void getApiDefaultVersionSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getApiDefaultVersionSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getApiVersionsSignalErrorFull() instead")
    void getApiVersionsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getApiVersionsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getDefinitionSignalErrorFull() instead")
    void getDefinitionSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getDefinitionSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getJsonDefinitionSignalErrorFull() instead")
    void getJsonDefinitionSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getJsonDefinitionSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getLifecycleSettingsSignalErrorFull() instead")
    void getLifecycleSettingsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getLifecycleSettingsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getOwnerApisSignalErrorFull() instead")
    void getOwnerApisSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getOwnerApisSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getPrivateSettingsSignalErrorFull() instead")
    void getPrivateSettingsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getPrivateSettingsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getStandardizationErrorsSignalErrorFull() instead")
    void getStandardizationErrorsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getStandardizationErrorsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getValidationSignalErrorFull() instead")
    void getValidationSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getValidationSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getYamlDefinitionSignalErrorFull() instead")
    void getYamlDefinitionSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getYamlDefinitionSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use renameApiSignalErrorFull() instead")
    void renameApiSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void renameApiSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use saveDefinitionSignalErrorFull() instead")
    void saveDefinitionSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void saveDefinitionSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use searchApisSignalErrorFull() instead")
    void searchApisSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void searchApisSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use searchApisAndDomainsSignalErrorFull() instead")
    void searchApisAndDomainsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void searchApisAndDomainsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use setApiCommentStatusV2SignalErrorFull() instead")
    void setApiCommentStatusV2SignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void setApiCommentStatusV2SignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use setApiDefaultVersionSignalErrorFull() instead")
    void setApiDefaultVersionSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void setApiDefaultVersionSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use setLifecycleSettingsSignalErrorFull() instead")
    void setLifecycleSettingsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void setLifecycleSettingsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use setPrivateSettingsSignalErrorFull() instead")
    void setPrivateSettingsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void setPrivateSettingsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use updateApiCommentReplyV2SignalErrorFull() instead")
    void updateApiCommentReplyV2SignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void updateApiCommentReplyV2SignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use updateApiCommentV2SignalErrorFull() instead")
    void updateApiCommentV2SignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void updateApiCommentV2SignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use updateApiCommentsV2SignalErrorFull() instead")
    void updateApiCommentsV2SignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void updateApiCommentsV2SignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);

    void abortRequestsSignal();
    void allPendingRequestsCompleted();

public Q_SLOTS:
    void tokenAvailable();
};

} // namespace OpenAPI
#endif
