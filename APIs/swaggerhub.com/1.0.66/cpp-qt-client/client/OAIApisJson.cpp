/**
 * SwaggerHub Registry API
 * # Overview Use SwaggerHub Registry API to access, manage, and update the following resources in SwaggerHub, bypassing the web interface:   * APIs   * Domains   * Integrations   * Projects   * Templates   SwaggerHub also provides the [User Management API](https://app.swaggerhub.com/apis-docs/swagger-hub/user-management-api/) to get information about organizations and manage organization members.  # Base URL Use the following base URL for SwaggerHub SaaS:          http(s)://api.swaggerhub.com  **Note:** This documentation is for SwaggerHub SaaS. On-Premise customers should use the bundled API definition, which can be found at the URLs provided below.  Version 1.29.0 or later:      http(s)://SERVER/v1/openapi.yaml - YAML version     http(s)://SERVER/v1/openapi.json - JSON version  Earlier versions:      http(s)://SERVER/v1/swagger.yaml - YAML version     http(s)://SERVER/v1/swagger.json - JSON version  # Authentication Operations that update data or access private data require authentication using an API key. You can find your personal API key on the [API Keys](https://app.swaggerhub.com/settings/apiKey) page in your account settings. Send this key in the `Authorization` header when making requests to the Registry API:      Authorization: YOUR_API_KEY  To test API calls from this documentation page, click the **Authorize** button below and paste your API key there.  **Important:** Keep the API key secure and do not store it directly in your code. # Tools In addition to calling the Registry API directly, you can use the following tools to interact with the API from the command line or CI/CD pipeline:   * [SwaggerHub CLI](https://www.npmjs.com/package/swaggerhub-cli)   * [Maven plugin](https://github.com/swagger-api/swaggerhub-maven-plugin)  * [Gradle plugin](https://github.com/swagger-api/swaggerhub-gradle-plugin) 
 *
 * The version of the OpenAPI document: 1.0.66
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIApisJson.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIApisJson::OAIApisJson(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIApisJson::OAIApisJson() {
    this->initializeModel();
}

OAIApisJson::~OAIApisJson() {}

void OAIApisJson::initializeModel() {

    m_apis_isSet = false;
    m_apis_isValid = false;

    m_description_isSet = false;
    m_description_isValid = false;

    m_name_isSet = false;
    m_name_isValid = false;

    m_offset_isSet = false;
    m_offset_isValid = false;

    m_total_count_isSet = false;
    m_total_count_isValid = false;

    m_url_isSet = false;
    m_url_isValid = false;
}

void OAIApisJson::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIApisJson::fromJsonObject(QJsonObject json) {

    m_apis_isValid = ::OpenAPI::fromJsonValue(m_apis, json[QString("apis")]);
    m_apis_isSet = !json[QString("apis")].isNull() && m_apis_isValid;

    m_description_isValid = ::OpenAPI::fromJsonValue(m_description, json[QString("description")]);
    m_description_isSet = !json[QString("description")].isNull() && m_description_isValid;

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("name")]);
    m_name_isSet = !json[QString("name")].isNull() && m_name_isValid;

    m_offset_isValid = ::OpenAPI::fromJsonValue(m_offset, json[QString("offset")]);
    m_offset_isSet = !json[QString("offset")].isNull() && m_offset_isValid;

    m_total_count_isValid = ::OpenAPI::fromJsonValue(m_total_count, json[QString("totalCount")]);
    m_total_count_isSet = !json[QString("totalCount")].isNull() && m_total_count_isValid;

    m_url_isValid = ::OpenAPI::fromJsonValue(m_url, json[QString("url")]);
    m_url_isSet = !json[QString("url")].isNull() && m_url_isValid;
}

QString OAIApisJson::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIApisJson::asJsonObject() const {
    QJsonObject obj;
    if (m_apis.size() > 0) {
        obj.insert(QString("apis"), ::OpenAPI::toJsonValue(m_apis));
    }
    if (m_description_isSet) {
        obj.insert(QString("description"), ::OpenAPI::toJsonValue(m_description));
    }
    if (m_name_isSet) {
        obj.insert(QString("name"), ::OpenAPI::toJsonValue(m_name));
    }
    if (m_offset_isSet) {
        obj.insert(QString("offset"), ::OpenAPI::toJsonValue(m_offset));
    }
    if (m_total_count_isSet) {
        obj.insert(QString("totalCount"), ::OpenAPI::toJsonValue(m_total_count));
    }
    if (m_url_isSet) {
        obj.insert(QString("url"), ::OpenAPI::toJsonValue(m_url));
    }
    return obj;
}

QList<OAIApisJsonApi> OAIApisJson::getApis() const {
    return m_apis;
}
void OAIApisJson::setApis(const QList<OAIApisJsonApi> &apis) {
    m_apis = apis;
    m_apis_isSet = true;
}

bool OAIApisJson::is_apis_Set() const{
    return m_apis_isSet;
}

bool OAIApisJson::is_apis_Valid() const{
    return m_apis_isValid;
}

QString OAIApisJson::getDescription() const {
    return m_description;
}
void OAIApisJson::setDescription(const QString &description) {
    m_description = description;
    m_description_isSet = true;
}

bool OAIApisJson::is_description_Set() const{
    return m_description_isSet;
}

bool OAIApisJson::is_description_Valid() const{
    return m_description_isValid;
}

QString OAIApisJson::getName() const {
    return m_name;
}
void OAIApisJson::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAIApisJson::is_name_Set() const{
    return m_name_isSet;
}

bool OAIApisJson::is_name_Valid() const{
    return m_name_isValid;
}

qint32 OAIApisJson::getOffset() const {
    return m_offset;
}
void OAIApisJson::setOffset(const qint32 &offset) {
    m_offset = offset;
    m_offset_isSet = true;
}

bool OAIApisJson::is_offset_Set() const{
    return m_offset_isSet;
}

bool OAIApisJson::is_offset_Valid() const{
    return m_offset_isValid;
}

qint64 OAIApisJson::getTotalCount() const {
    return m_total_count;
}
void OAIApisJson::setTotalCount(const qint64 &total_count) {
    m_total_count = total_count;
    m_total_count_isSet = true;
}

bool OAIApisJson::is_total_count_Set() const{
    return m_total_count_isSet;
}

bool OAIApisJson::is_total_count_Valid() const{
    return m_total_count_isValid;
}

QString OAIApisJson::getUrl() const {
    return m_url;
}
void OAIApisJson::setUrl(const QString &url) {
    m_url = url;
    m_url_isSet = true;
}

bool OAIApisJson::is_url_Set() const{
    return m_url_isSet;
}

bool OAIApisJson::is_url_Valid() const{
    return m_url_isValid;
}

bool OAIApisJson::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_apis.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_description_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_offset_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_total_count_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_url_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIApisJson::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
