/**
 * SwaggerHub Registry API
 * # Overview Use SwaggerHub Registry API to access, manage, and update the following resources in SwaggerHub, bypassing the web interface:   * APIs   * Domains   * Integrations   * Projects   * Templates   SwaggerHub also provides the [User Management API](https://app.swaggerhub.com/apis-docs/swagger-hub/user-management-api/) to get information about organizations and manage organization members.  # Base URL Use the following base URL for SwaggerHub SaaS:          http(s)://api.swaggerhub.com  **Note:** This documentation is for SwaggerHub SaaS. On-Premise customers should use the bundled API definition, which can be found at the URLs provided below.  Version 1.29.0 or later:      http(s)://SERVER/v1/openapi.yaml - YAML version     http(s)://SERVER/v1/openapi.json - JSON version  Earlier versions:      http(s)://SERVER/v1/swagger.yaml - YAML version     http(s)://SERVER/v1/swagger.json - JSON version  # Authentication Operations that update data or access private data require authentication using an API key. You can find your personal API key on the [API Keys](https://app.swaggerhub.com/settings/apiKey) page in your account settings. Send this key in the `Authorization` header when making requests to the Registry API:      Authorization: YOUR_API_KEY  To test API calls from this documentation page, click the **Authorize** button below and paste your API key there.  **Important:** Keep the API key secure and do not store it directly in your code. # Tools In addition to calling the Registry API directly, you can use the following tools to interact with the API from the command line or CI/CD pipeline:   * [SwaggerHub CLI](https://www.npmjs.com/package/swaggerhub-cli)   * [Maven plugin](https://github.com/swagger-api/swaggerhub-maven-plugin)  * [Gradle plugin](https://github.com/swagger-api/swaggerhub-gradle-plugin) 
 *
 * The version of the OpenAPI document: 1.0.66
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAICommentsBatch.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAICommentsBatch::OAICommentsBatch(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAICommentsBatch::OAICommentsBatch() {
    this->initializeModel();
}

OAICommentsBatch::~OAICommentsBatch() {}

void OAICommentsBatch::initializeModel() {

    m_add_comment_isSet = false;
    m_add_comment_isValid = false;

    m_add_reply_isSet = false;
    m_add_reply_isValid = false;

    m_delete_comment_isSet = false;
    m_delete_comment_isValid = false;

    m_delete_reply_isSet = false;
    m_delete_reply_isValid = false;

    m_update_comment_isSet = false;
    m_update_comment_isValid = false;

    m_update_reply_isSet = false;
    m_update_reply_isValid = false;

    m_update_status_isSet = false;
    m_update_status_isValid = false;
}

void OAICommentsBatch::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAICommentsBatch::fromJsonObject(QJsonObject json) {

    m_add_comment_isValid = ::OpenAPI::fromJsonValue(m_add_comment, json[QString("addComment")]);
    m_add_comment_isSet = !json[QString("addComment")].isNull() && m_add_comment_isValid;

    if(json["addReply"].isObject()){
        auto varmap = json["addReply"].toObject().toVariantMap();
        m_add_reply_isValid = true;
        if(varmap.count() > 0){
            for(auto val : varmap.keys()){
                QList<OAINewReply> item;
                auto jval = QJsonValue::fromVariant(varmap.value(val));
                m_add_reply_isValid &= ::OpenAPI::fromJsonValue(item, jval);
                m_add_reply_isSet &= !jval.isNull() && m_add_reply_isValid;
                m_add_reply.insert(m_add_reply.end(), val, item);
            }
        }
    }

    m_delete_comment_isValid = ::OpenAPI::fromJsonValue(m_delete_comment, json[QString("deleteComment")]);
    m_delete_comment_isSet = !json[QString("deleteComment")].isNull() && m_delete_comment_isValid;

    if(json["deleteReply"].isObject()){
        auto varmap = json["deleteReply"].toObject().toVariantMap();
        m_delete_reply_isValid = true;
        if(varmap.count() > 0){
            for(auto val : varmap.keys()){
                QList<QString> item;
                auto jval = QJsonValue::fromVariant(varmap.value(val));
                m_delete_reply_isValid &= ::OpenAPI::fromJsonValue(item, jval);
                m_delete_reply_isSet &= !jval.isNull() && m_delete_reply_isValid;
                m_delete_reply.insert(m_delete_reply.end(), val, item);
            }
        }
    }

    m_update_comment_isValid = ::OpenAPI::fromJsonValue(m_update_comment, json[QString("updateComment")]);
    m_update_comment_isSet = !json[QString("updateComment")].isNull() && m_update_comment_isValid;

    if(json["updateReply"].isObject()){
        auto varmap = json["updateReply"].toObject().toVariantMap();
        m_update_reply_isValid = true;
        if(varmap.count() > 0){
            for(auto val : varmap.keys()){
                QMap<QString, OAICommentPatch> item;
                auto jval = QJsonValue::fromVariant(varmap.value(val));
                m_update_reply_isValid &= ::OpenAPI::fromJsonValue(item, jval);
                m_update_reply_isSet &= !jval.isNull() && m_update_reply_isValid;
                m_update_reply.insert(m_update_reply.end(), val, item);
            }
        }
    }

    m_update_status_isValid = ::OpenAPI::fromJsonValue(m_update_status, json[QString("updateStatus")]);
    m_update_status_isSet = !json[QString("updateStatus")].isNull() && m_update_status_isValid;
}

QString OAICommentsBatch::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAICommentsBatch::asJsonObject() const {
    QJsonObject obj;
    if (m_add_comment.size() > 0) {
        obj.insert(QString("addComment"), ::OpenAPI::toJsonValue(m_add_comment));
    }
    if (m_add_reply.size() > 0) {
        
        obj.insert(QString("addReply"), toJsonValue(m_add_reply));
    }
    if (m_delete_comment.size() > 0) {
        obj.insert(QString("deleteComment"), ::OpenAPI::toJsonValue(m_delete_comment));
    }
    if (m_delete_reply.size() > 0) {
        
        obj.insert(QString("deleteReply"), toJsonValue(m_delete_reply));
    }
    if (m_update_comment.size() > 0) {
        obj.insert(QString("updateComment"), ::OpenAPI::toJsonValue(m_update_comment));
    }
    if (m_update_reply.size() > 0) {
        
        obj.insert(QString("updateReply"), toJsonValue(m_update_reply));
    }
    if (m_update_status.size() > 0) {
        obj.insert(QString("updateStatus"), ::OpenAPI::toJsonValue(m_update_status));
    }
    return obj;
}

QList<OAINewComment> OAICommentsBatch::getAddComment() const {
    return m_add_comment;
}
void OAICommentsBatch::setAddComment(const QList<OAINewComment> &add_comment) {
    m_add_comment = add_comment;
    m_add_comment_isSet = true;
}

bool OAICommentsBatch::is_add_comment_Set() const{
    return m_add_comment_isSet;
}

bool OAICommentsBatch::is_add_comment_Valid() const{
    return m_add_comment_isValid;
}

QMap<QString, QList<OAINewReply>> OAICommentsBatch::getAddReply() const {
    return m_add_reply;
}
void OAICommentsBatch::setAddReply(const QMap<QString, QList<OAINewReply>> &add_reply) {
    m_add_reply = add_reply;
    m_add_reply_isSet = true;
}

bool OAICommentsBatch::is_add_reply_Set() const{
    return m_add_reply_isSet;
}

bool OAICommentsBatch::is_add_reply_Valid() const{
    return m_add_reply_isValid;
}

QList<QString> OAICommentsBatch::getDeleteComment() const {
    return m_delete_comment;
}
void OAICommentsBatch::setDeleteComment(const QList<QString> &delete_comment) {
    m_delete_comment = delete_comment;
    m_delete_comment_isSet = true;
}

bool OAICommentsBatch::is_delete_comment_Set() const{
    return m_delete_comment_isSet;
}

bool OAICommentsBatch::is_delete_comment_Valid() const{
    return m_delete_comment_isValid;
}

QMap<QString, QSet<QString>> OAICommentsBatch::getDeleteReply() const {
    return m_delete_reply;
}
void OAICommentsBatch::setDeleteReply(const QMap<QString, QSet<QString>> &delete_reply) {
    m_delete_reply = delete_reply;
    m_delete_reply_isSet = true;
}

bool OAICommentsBatch::is_delete_reply_Set() const{
    return m_delete_reply_isSet;
}

bool OAICommentsBatch::is_delete_reply_Valid() const{
    return m_delete_reply_isValid;
}

QMap<QString, OAIClosableCommentPatch> OAICommentsBatch::getUpdateComment() const {
    return m_update_comment;
}
void OAICommentsBatch::setUpdateComment(const QMap<QString, OAIClosableCommentPatch> &update_comment) {
    m_update_comment = update_comment;
    m_update_comment_isSet = true;
}

bool OAICommentsBatch::is_update_comment_Set() const{
    return m_update_comment_isSet;
}

bool OAICommentsBatch::is_update_comment_Valid() const{
    return m_update_comment_isValid;
}

QMap<QString, QMap<QString, OAICommentPatch>> OAICommentsBatch::getUpdateReply() const {
    return m_update_reply;
}
void OAICommentsBatch::setUpdateReply(const QMap<QString, QMap<QString, OAICommentPatch>> &update_reply) {
    m_update_reply = update_reply;
    m_update_reply_isSet = true;
}

bool OAICommentsBatch::is_update_reply_Set() const{
    return m_update_reply_isSet;
}

bool OAICommentsBatch::is_update_reply_Valid() const{
    return m_update_reply_isValid;
}

QMap<QString, QString> OAICommentsBatch::getUpdateStatus() const {
    return m_update_status;
}
void OAICommentsBatch::setUpdateStatus(const QMap<QString, QString> &update_status) {
    m_update_status = update_status;
    m_update_status_isSet = true;
}

bool OAICommentsBatch::is_update_status_Set() const{
    return m_update_status_isSet;
}

bool OAICommentsBatch::is_update_status_Valid() const{
    return m_update_status_isValid;
}

bool OAICommentsBatch::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_add_comment.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_add_reply.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_delete_comment.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_delete_reply.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_update_comment.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_update_reply.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_update_status.size() > 0) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAICommentsBatch::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
