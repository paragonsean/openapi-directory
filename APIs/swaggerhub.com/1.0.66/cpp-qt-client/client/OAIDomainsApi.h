/**
 * SwaggerHub Registry API
 * # Overview Use SwaggerHub Registry API to access, manage, and update the following resources in SwaggerHub, bypassing the web interface:   * APIs   * Domains   * Integrations   * Projects   * Templates   SwaggerHub also provides the [User Management API](https://app.swaggerhub.com/apis-docs/swagger-hub/user-management-api/) to get information about organizations and manage organization members.  # Base URL Use the following base URL for SwaggerHub SaaS:          http(s)://api.swaggerhub.com  **Note:** This documentation is for SwaggerHub SaaS. On-Premise customers should use the bundled API definition, which can be found at the URLs provided below.  Version 1.29.0 or later:      http(s)://SERVER/v1/openapi.yaml - YAML version     http(s)://SERVER/v1/openapi.json - JSON version  Earlier versions:      http(s)://SERVER/v1/swagger.yaml - YAML version     http(s)://SERVER/v1/swagger.json - JSON version  # Authentication Operations that update data or access private data require authentication using an API key. You can find your personal API key on the [API Keys](https://app.swaggerhub.com/settings/apiKey) page in your account settings. Send this key in the `Authorization` header when making requests to the Registry API:      Authorization: YOUR_API_KEY  To test API calls from this documentation page, click the **Authorize** button below and paste your API key there.  **Important:** Keep the API key secure and do not store it directly in your code. # Tools In addition to calling the Registry API directly, you can use the following tools to interact with the API from the command line or CI/CD pipeline:   * [SwaggerHub CLI](https://www.npmjs.com/package/swaggerhub-cli)   * [Maven plugin](https://github.com/swagger-api/swaggerhub-maven-plugin)  * [Gradle plugin](https://github.com/swagger-api/swaggerhub-gradle-plugin) 
 *
 * The version of the OpenAPI document: 1.0.66
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#ifndef OAI_OAIDomainsApi_H
#define OAI_OAIDomainsApi_H

#include "OAIHelpers.h"
#include "OAIHttpRequest.h"
#include "OAIServerConfiguration.h"
#include "OAIOauth.h"

#include "OAIApisJson.h"
#include "OAIClosableComment.h"
#include "OAIClosableCommentPatch.h"
#include "OAIComment.h"
#include "OAICommentPatch.h"
#include "OAICommentsBatch.h"
#include "OAIDefaultVersion.h"
#include "OAIForkVersion.h"
#include "OAILifecycleSettings.h"
#include "OAINewComment.h"
#include "OAINewReply.h"
#include "OAINewVersion.h"
#include "OAIObject.h"
#include "OAIVisibilitySettings.h"
#include <QString>

#include <QObject>
#include <QByteArray>
#include <QStringList>
#include <QList>
#include <QNetworkAccessManager>

namespace OpenAPI {

class OAIDomainsApi : public QObject {
    Q_OBJECT

public:
    OAIDomainsApi(const int timeOut = 0);
    ~OAIDomainsApi();

    void initializeServerConfigs();
    int setDefaultServerValue(int serverIndex,const QString &operation, const QString &variable,const QString &val);
    void setServerIndex(const QString &operation, int serverIndex);
    void setApiKey(const QString &apiKeyName, const QString &apiKey);
    void setBearerToken(const QString &token);
    void setUsername(const QString &username);
    void setPassword(const QString &password);
    void setTimeOut(const int timeOut);
    void setWorkingDirectory(const QString &path);
    void setNetworkAccessManager(QNetworkAccessManager* manager);
    int addServerConfiguration(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables = QMap<QString, OAIServerVariable>());
    void setNewServerForAllOperations(const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void setNewServer(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void addHeaders(const QString &key, const QString &value);
    void enableRequestCompression();
    void enableResponseCompression();
    void abortRequests();
    QString getParamStylePrefix(const QString &style);
    QString getParamStyleSuffix(const QString &style);
    QString getParamStyleDelimiter(const QString &style, const QString &name, bool isExplode);

    /**
    * @param[in]  owner QString [required]
    * @param[in]  domain QString [required]
    * @param[in]  version QString [required]
    * @param[in]  comment QString [required]
    * @param[in]  body OAINewReply [required]
    */
    virtual void addDomainCommentReplyV2(const QString &owner, const QString &domain, const QString &version, const QString &comment, const OAINewReply &body);

    /**
    * @param[in]  owner QString [required]
    * @param[in]  domain QString [required]
    * @param[in]  version QString [required]
    * @param[in]  body OAINewComment [required]
    */
    virtual void addDomainCommentV2(const QString &owner, const QString &domain, const QString &version, const OAINewComment &body);

    /**
    * @param[in]  owner QString [required]
    * @param[in]  domain QString [required]
    * @param[in]  version QString [required]
    * @param[in]  new_version OAINewVersion [required]
    */
    virtual void cloneDomain(const QString &owner, const QString &domain, const QString &version, const OAINewVersion &new_version);

    /**
    * @param[in]  owner QString [required]
    * @param[in]  domain QString [required]
    * @param[in]  force bool [optional]
    */
    virtual void deleteDomain(const QString &owner, const QString &domain, const ::OpenAPI::OptionalParam<bool> &force = ::OpenAPI::OptionalParam<bool>());

    /**
    * @param[in]  owner QString [required]
    * @param[in]  domain QString [required]
    * @param[in]  version QString [required]
    * @param[in]  comment QString [required]
    * @param[in]  reply QString [required]
    */
    virtual void deleteDomainCommentReplyV2(const QString &owner, const QString &domain, const QString &version, const QString &comment, const QString &reply);

    /**
    * @param[in]  owner QString [required]
    * @param[in]  domain QString [required]
    * @param[in]  version QString [required]
    * @param[in]  comment QString [required]
    */
    virtual void deleteDomainCommentV2(const QString &owner, const QString &domain, const QString &version, const QString &comment);

    /**
    * @param[in]  owner QString [required]
    * @param[in]  domain QString [required]
    * @param[in]  version QString [required]
    * @param[in]  force bool [optional]
    */
    virtual void deleteDomainVersion(const QString &owner, const QString &domain, const QString &version, const ::OpenAPI::OptionalParam<bool> &force = ::OpenAPI::OptionalParam<bool>());

    /**
    * @param[in]  owner QString [required]
    * @param[in]  domain QString [required]
    * @param[in]  version QString [required]
    * @param[in]  fork_version OAIForkVersion [required]
    */
    virtual void forkDomain(const QString &owner, const QString &domain, const QString &version, const OAIForkVersion &fork_version);

    /**
    * @param[in]  owner QString [required]
    * @param[in]  domain QString [required]
    * @param[in]  version QString [required]
    */
    virtual void getDomainCommentsV2(const QString &owner, const QString &domain, const QString &version);

    /**
    * @param[in]  owner QString [required]
    * @param[in]  domain QString [required]
    */
    virtual void getDomainDefaultVersion(const QString &owner, const QString &domain);

    /**
    * @param[in]  owner QString [required]
    * @param[in]  domain QString [required]
    * @param[in]  version QString [required]
    */
    virtual void getDomainDefinition(const QString &owner, const QString &domain, const QString &version);

    /**
    * @param[in]  owner QString [required]
    * @param[in]  domain QString [required]
    * @param[in]  version QString [required]
    */
    virtual void getDomainJsonDefinition(const QString &owner, const QString &domain, const QString &version);

    /**
    * @param[in]  owner QString [required]
    * @param[in]  domain QString [required]
    * @param[in]  version QString [required]
    */
    virtual void getDomainLifecycleSettings(const QString &owner, const QString &domain, const QString &version);

    /**
    * @param[in]  owner QString [required]
    * @param[in]  domain QString [required]
    * @param[in]  version QString [required]
    */
    virtual void getDomainPrivateSettings(const QString &owner, const QString &domain, const QString &version);

    /**
    * @param[in]  owner QString [required]
    * @param[in]  domain QString [required]
    */
    virtual void getDomainVersions(const QString &owner, const QString &domain);

    /**
    * @param[in]  owner QString [required]
    * @param[in]  domain QString [required]
    * @param[in]  version QString [required]
    */
    virtual void getDomainYamlDefinition(const QString &owner, const QString &domain, const QString &version);

    /**
    * @param[in]  owner QString [required]
    * @param[in]  page qint32 [optional]
    * @param[in]  limit qint32 [optional]
    * @param[in]  sort QString [optional]
    * @param[in]  order QString [optional]
    */
    virtual void getOwnerDomains(const QString &owner, const ::OpenAPI::OptionalParam<qint32> &page = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint32> &limit = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<QString> &sort = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &order = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  owner QString [required]
    * @param[in]  domain QString [required]
    * @param[in]  new_name QString [required]
    * @param[in]  force bool [optional]
    */
    virtual void renameDomain(const QString &owner, const QString &domain, const QString &new_name, const ::OpenAPI::OptionalParam<bool> &force = ::OpenAPI::OptionalParam<bool>());

    /**
    * @param[in]  owner QString [required]
    * @param[in]  domain QString [required]
    * @param[in]  is_private bool [optional]
    * @param[in]  version QString [optional]
    * @param[in]  force bool [optional]
    * @param[in]  definition QString [optional]
    */
    virtual void saveDomainDefinition(const QString &owner, const QString &domain, const ::OpenAPI::OptionalParam<bool> &is_private = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QString> &version = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &force = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QString> &definition = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  spec_type QString [optional]
    * @param[in]  visibility QString [optional]
    * @param[in]  state QString [optional]
    * @param[in]  owner QString [optional]
    * @param[in]  query QString [optional]
    * @param[in]  page qint32 [optional]
    * @param[in]  limit qint32 [optional]
    * @param[in]  sort QString [optional]
    * @param[in]  order QString [optional]
    */
    virtual void searchApisAndDomains(const ::OpenAPI::OptionalParam<QString> &spec_type = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &visibility = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &state = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &owner = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &query = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<qint32> &page = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint32> &limit = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<QString> &sort = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &order = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  query QString [optional]
    * @param[in]  state QString [optional]
    * @param[in]  page qint32 [optional]
    * @param[in]  limit qint32 [optional]
    * @param[in]  sort QString [optional]
    * @param[in]  order QString [optional]
    */
    virtual void searchDomains(const ::OpenAPI::OptionalParam<QString> &query = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &state = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<qint32> &page = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint32> &limit = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<QString> &sort = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &order = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  owner QString [required]
    * @param[in]  domain QString [required]
    * @param[in]  version QString [required]
    * @param[in]  comment QString [required]
    * @param[in]  status QString [required]
    */
    virtual void setDomainCommentStatusV2(const QString &owner, const QString &domain, const QString &version, const QString &comment, const QString &status);

    /**
    * @param[in]  owner QString [required]
    * @param[in]  domain QString [required]
    * @param[in]  default_version OAIDefaultVersion [required]
    */
    virtual void setDomainDefaultVersion(const QString &owner, const QString &domain, const OAIDefaultVersion &default_version);

    /**
    * @param[in]  owner QString [required]
    * @param[in]  domain QString [required]
    * @param[in]  version QString [required]
    * @param[in]  settings OAILifecycleSettings [required]
    * @param[in]  force bool [optional]
    */
    virtual void setDomainLifecycleSettings(const QString &owner, const QString &domain, const QString &version, const OAILifecycleSettings &settings, const ::OpenAPI::OptionalParam<bool> &force = ::OpenAPI::OptionalParam<bool>());

    /**
    * @param[in]  owner QString [required]
    * @param[in]  domain QString [required]
    * @param[in]  version QString [required]
    * @param[in]  settings OAIVisibilitySettings [required]
    * @param[in]  force bool [optional]
    */
    virtual void setDomainPrivateSettings(const QString &owner, const QString &domain, const QString &version, const OAIVisibilitySettings &settings, const ::OpenAPI::OptionalParam<bool> &force = ::OpenAPI::OptionalParam<bool>());

    /**
    * @param[in]  owner QString [required]
    * @param[in]  domain QString [required]
    * @param[in]  version QString [required]
    * @param[in]  comment QString [required]
    * @param[in]  reply QString [required]
    * @param[in]  body OAICommentPatch [optional]
    */
    virtual void updateDomainCommentReplyV2(const QString &owner, const QString &domain, const QString &version, const QString &comment, const QString &reply, const ::OpenAPI::OptionalParam<OAICommentPatch> &body = ::OpenAPI::OptionalParam<OAICommentPatch>());

    /**
    * @param[in]  owner QString [required]
    * @param[in]  domain QString [required]
    * @param[in]  version QString [required]
    * @param[in]  comment QString [required]
    * @param[in]  body OAIClosableCommentPatch [optional]
    */
    virtual void updateDomainCommentV2(const QString &owner, const QString &domain, const QString &version, const QString &comment, const ::OpenAPI::OptionalParam<OAIClosableCommentPatch> &body = ::OpenAPI::OptionalParam<OAIClosableCommentPatch>());

    /**
    * @param[in]  owner QString [required]
    * @param[in]  domain QString [required]
    * @param[in]  version QString [required]
    * @param[in]  body OAICommentsBatch [required]
    */
    virtual void updateDomainCommentsV2(const QString &owner, const QString &domain, const QString &version, const OAICommentsBatch &body);


private:
    QMap<QString,int> _serverIndices;
    QMap<QString,QList<OAIServerConfiguration>> _serverConfigs;
    QMap<QString, QString> _apiKeys;
    QString _bearerToken;
    QString _username;
    QString _password;
    int _timeOut;
    QString _workingDirectory;
    QNetworkAccessManager* _manager;
    QMap<QString, QString> _defaultHeaders;
    bool _isResponseCompressionEnabled;
    bool _isRequestCompressionEnabled;
    OAIHttpRequestInput _latestInput;
    OAIHttpRequestWorker *_latestWorker;
    QStringList _latestScope;
    OauthCode _authFlow;
    OauthImplicit _implicitFlow;
    OauthCredentials _credentialFlow;
    OauthPassword _passwordFlow;
    int _OauthMethod = 0;

    void addDomainCommentReplyV2Callback(OAIHttpRequestWorker *worker);
    void addDomainCommentV2Callback(OAIHttpRequestWorker *worker);
    void cloneDomainCallback(OAIHttpRequestWorker *worker);
    void deleteDomainCallback(OAIHttpRequestWorker *worker);
    void deleteDomainCommentReplyV2Callback(OAIHttpRequestWorker *worker);
    void deleteDomainCommentV2Callback(OAIHttpRequestWorker *worker);
    void deleteDomainVersionCallback(OAIHttpRequestWorker *worker);
    void forkDomainCallback(OAIHttpRequestWorker *worker);
    void getDomainCommentsV2Callback(OAIHttpRequestWorker *worker);
    void getDomainDefaultVersionCallback(OAIHttpRequestWorker *worker);
    void getDomainDefinitionCallback(OAIHttpRequestWorker *worker);
    void getDomainJsonDefinitionCallback(OAIHttpRequestWorker *worker);
    void getDomainLifecycleSettingsCallback(OAIHttpRequestWorker *worker);
    void getDomainPrivateSettingsCallback(OAIHttpRequestWorker *worker);
    void getDomainVersionsCallback(OAIHttpRequestWorker *worker);
    void getDomainYamlDefinitionCallback(OAIHttpRequestWorker *worker);
    void getOwnerDomainsCallback(OAIHttpRequestWorker *worker);
    void renameDomainCallback(OAIHttpRequestWorker *worker);
    void saveDomainDefinitionCallback(OAIHttpRequestWorker *worker);
    void searchApisAndDomainsCallback(OAIHttpRequestWorker *worker);
    void searchDomainsCallback(OAIHttpRequestWorker *worker);
    void setDomainCommentStatusV2Callback(OAIHttpRequestWorker *worker);
    void setDomainDefaultVersionCallback(OAIHttpRequestWorker *worker);
    void setDomainLifecycleSettingsCallback(OAIHttpRequestWorker *worker);
    void setDomainPrivateSettingsCallback(OAIHttpRequestWorker *worker);
    void updateDomainCommentReplyV2Callback(OAIHttpRequestWorker *worker);
    void updateDomainCommentV2Callback(OAIHttpRequestWorker *worker);
    void updateDomainCommentsV2Callback(OAIHttpRequestWorker *worker);

Q_SIGNALS:

    void addDomainCommentReplyV2Signal(QList<OAIComment> summary);
    void addDomainCommentV2Signal(OAIClosableComment summary);
    void cloneDomainSignal();
    void deleteDomainSignal();
    void deleteDomainCommentReplyV2Signal();
    void deleteDomainCommentV2Signal();
    void deleteDomainVersionSignal();
    void forkDomainSignal();
    void getDomainCommentsV2Signal(QList<OAIClosableComment> summary);
    void getDomainDefaultVersionSignal(OAIDefaultVersion summary);
    void getDomainDefinitionSignal(OAIObject summary);
    void getDomainJsonDefinitionSignal(OAIObject summary);
    void getDomainLifecycleSettingsSignal(OAILifecycleSettings summary);
    void getDomainPrivateSettingsSignal(OAIVisibilitySettings summary);
    void getDomainVersionsSignal(OAIApisJson summary);
    void getDomainYamlDefinitionSignal(OAIObject summary);
    void getOwnerDomainsSignal(OAIApisJson summary);
    void renameDomainSignal();
    void saveDomainDefinitionSignal();
    void searchApisAndDomainsSignal(OAIApisJson summary);
    void searchDomainsSignal();
    void setDomainCommentStatusV2Signal();
    void setDomainDefaultVersionSignal();
    void setDomainLifecycleSettingsSignal();
    void setDomainPrivateSettingsSignal();
    void updateDomainCommentReplyV2Signal(OAIComment summary);
    void updateDomainCommentV2Signal(OAIClosableComment summary);
    void updateDomainCommentsV2Signal();


    void addDomainCommentReplyV2SignalFull(OAIHttpRequestWorker *worker, QList<OAIComment> summary);
    void addDomainCommentV2SignalFull(OAIHttpRequestWorker *worker, OAIClosableComment summary);
    void cloneDomainSignalFull(OAIHttpRequestWorker *worker);
    void deleteDomainSignalFull(OAIHttpRequestWorker *worker);
    void deleteDomainCommentReplyV2SignalFull(OAIHttpRequestWorker *worker);
    void deleteDomainCommentV2SignalFull(OAIHttpRequestWorker *worker);
    void deleteDomainVersionSignalFull(OAIHttpRequestWorker *worker);
    void forkDomainSignalFull(OAIHttpRequestWorker *worker);
    void getDomainCommentsV2SignalFull(OAIHttpRequestWorker *worker, QList<OAIClosableComment> summary);
    void getDomainDefaultVersionSignalFull(OAIHttpRequestWorker *worker, OAIDefaultVersion summary);
    void getDomainDefinitionSignalFull(OAIHttpRequestWorker *worker, OAIObject summary);
    void getDomainJsonDefinitionSignalFull(OAIHttpRequestWorker *worker, OAIObject summary);
    void getDomainLifecycleSettingsSignalFull(OAIHttpRequestWorker *worker, OAILifecycleSettings summary);
    void getDomainPrivateSettingsSignalFull(OAIHttpRequestWorker *worker, OAIVisibilitySettings summary);
    void getDomainVersionsSignalFull(OAIHttpRequestWorker *worker, OAIApisJson summary);
    void getDomainYamlDefinitionSignalFull(OAIHttpRequestWorker *worker, OAIObject summary);
    void getOwnerDomainsSignalFull(OAIHttpRequestWorker *worker, OAIApisJson summary);
    void renameDomainSignalFull(OAIHttpRequestWorker *worker);
    void saveDomainDefinitionSignalFull(OAIHttpRequestWorker *worker);
    void searchApisAndDomainsSignalFull(OAIHttpRequestWorker *worker, OAIApisJson summary);
    void searchDomainsSignalFull(OAIHttpRequestWorker *worker);
    void setDomainCommentStatusV2SignalFull(OAIHttpRequestWorker *worker);
    void setDomainDefaultVersionSignalFull(OAIHttpRequestWorker *worker);
    void setDomainLifecycleSettingsSignalFull(OAIHttpRequestWorker *worker);
    void setDomainPrivateSettingsSignalFull(OAIHttpRequestWorker *worker);
    void updateDomainCommentReplyV2SignalFull(OAIHttpRequestWorker *worker, OAIComment summary);
    void updateDomainCommentV2SignalFull(OAIHttpRequestWorker *worker, OAIClosableComment summary);
    void updateDomainCommentsV2SignalFull(OAIHttpRequestWorker *worker);

    Q_DECL_DEPRECATED_X("Use addDomainCommentReplyV2SignalError() instead")
    void addDomainCommentReplyV2SignalE(QList<OAIComment> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void addDomainCommentReplyV2SignalError(QList<OAIComment> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use addDomainCommentV2SignalError() instead")
    void addDomainCommentV2SignalE(OAIClosableComment summary, QNetworkReply::NetworkError error_type, QString error_str);
    void addDomainCommentV2SignalError(OAIClosableComment summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use cloneDomainSignalError() instead")
    void cloneDomainSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void cloneDomainSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use deleteDomainSignalError() instead")
    void deleteDomainSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void deleteDomainSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use deleteDomainCommentReplyV2SignalError() instead")
    void deleteDomainCommentReplyV2SignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void deleteDomainCommentReplyV2SignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use deleteDomainCommentV2SignalError() instead")
    void deleteDomainCommentV2SignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void deleteDomainCommentV2SignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use deleteDomainVersionSignalError() instead")
    void deleteDomainVersionSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void deleteDomainVersionSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use forkDomainSignalError() instead")
    void forkDomainSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void forkDomainSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getDomainCommentsV2SignalError() instead")
    void getDomainCommentsV2SignalE(QList<OAIClosableComment> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getDomainCommentsV2SignalError(QList<OAIClosableComment> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getDomainDefaultVersionSignalError() instead")
    void getDomainDefaultVersionSignalE(OAIDefaultVersion summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getDomainDefaultVersionSignalError(OAIDefaultVersion summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getDomainDefinitionSignalError() instead")
    void getDomainDefinitionSignalE(OAIObject summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getDomainDefinitionSignalError(OAIObject summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getDomainJsonDefinitionSignalError() instead")
    void getDomainJsonDefinitionSignalE(OAIObject summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getDomainJsonDefinitionSignalError(OAIObject summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getDomainLifecycleSettingsSignalError() instead")
    void getDomainLifecycleSettingsSignalE(OAILifecycleSettings summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getDomainLifecycleSettingsSignalError(OAILifecycleSettings summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getDomainPrivateSettingsSignalError() instead")
    void getDomainPrivateSettingsSignalE(OAIVisibilitySettings summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getDomainPrivateSettingsSignalError(OAIVisibilitySettings summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getDomainVersionsSignalError() instead")
    void getDomainVersionsSignalE(OAIApisJson summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getDomainVersionsSignalError(OAIApisJson summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getDomainYamlDefinitionSignalError() instead")
    void getDomainYamlDefinitionSignalE(OAIObject summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getDomainYamlDefinitionSignalError(OAIObject summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getOwnerDomainsSignalError() instead")
    void getOwnerDomainsSignalE(OAIApisJson summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getOwnerDomainsSignalError(OAIApisJson summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use renameDomainSignalError() instead")
    void renameDomainSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void renameDomainSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use saveDomainDefinitionSignalError() instead")
    void saveDomainDefinitionSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void saveDomainDefinitionSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use searchApisAndDomainsSignalError() instead")
    void searchApisAndDomainsSignalE(OAIApisJson summary, QNetworkReply::NetworkError error_type, QString error_str);
    void searchApisAndDomainsSignalError(OAIApisJson summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use searchDomainsSignalError() instead")
    void searchDomainsSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void searchDomainsSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use setDomainCommentStatusV2SignalError() instead")
    void setDomainCommentStatusV2SignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void setDomainCommentStatusV2SignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use setDomainDefaultVersionSignalError() instead")
    void setDomainDefaultVersionSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void setDomainDefaultVersionSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use setDomainLifecycleSettingsSignalError() instead")
    void setDomainLifecycleSettingsSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void setDomainLifecycleSettingsSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use setDomainPrivateSettingsSignalError() instead")
    void setDomainPrivateSettingsSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void setDomainPrivateSettingsSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use updateDomainCommentReplyV2SignalError() instead")
    void updateDomainCommentReplyV2SignalE(OAIComment summary, QNetworkReply::NetworkError error_type, QString error_str);
    void updateDomainCommentReplyV2SignalError(OAIComment summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use updateDomainCommentV2SignalError() instead")
    void updateDomainCommentV2SignalE(OAIClosableComment summary, QNetworkReply::NetworkError error_type, QString error_str);
    void updateDomainCommentV2SignalError(OAIClosableComment summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use updateDomainCommentsV2SignalError() instead")
    void updateDomainCommentsV2SignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void updateDomainCommentsV2SignalError(QNetworkReply::NetworkError error_type, const QString &error_str);

    Q_DECL_DEPRECATED_X("Use addDomainCommentReplyV2SignalErrorFull() instead")
    void addDomainCommentReplyV2SignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void addDomainCommentReplyV2SignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use addDomainCommentV2SignalErrorFull() instead")
    void addDomainCommentV2SignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void addDomainCommentV2SignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use cloneDomainSignalErrorFull() instead")
    void cloneDomainSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void cloneDomainSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use deleteDomainSignalErrorFull() instead")
    void deleteDomainSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void deleteDomainSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use deleteDomainCommentReplyV2SignalErrorFull() instead")
    void deleteDomainCommentReplyV2SignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void deleteDomainCommentReplyV2SignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use deleteDomainCommentV2SignalErrorFull() instead")
    void deleteDomainCommentV2SignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void deleteDomainCommentV2SignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use deleteDomainVersionSignalErrorFull() instead")
    void deleteDomainVersionSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void deleteDomainVersionSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use forkDomainSignalErrorFull() instead")
    void forkDomainSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void forkDomainSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getDomainCommentsV2SignalErrorFull() instead")
    void getDomainCommentsV2SignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getDomainCommentsV2SignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getDomainDefaultVersionSignalErrorFull() instead")
    void getDomainDefaultVersionSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getDomainDefaultVersionSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getDomainDefinitionSignalErrorFull() instead")
    void getDomainDefinitionSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getDomainDefinitionSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getDomainJsonDefinitionSignalErrorFull() instead")
    void getDomainJsonDefinitionSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getDomainJsonDefinitionSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getDomainLifecycleSettingsSignalErrorFull() instead")
    void getDomainLifecycleSettingsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getDomainLifecycleSettingsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getDomainPrivateSettingsSignalErrorFull() instead")
    void getDomainPrivateSettingsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getDomainPrivateSettingsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getDomainVersionsSignalErrorFull() instead")
    void getDomainVersionsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getDomainVersionsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getDomainYamlDefinitionSignalErrorFull() instead")
    void getDomainYamlDefinitionSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getDomainYamlDefinitionSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getOwnerDomainsSignalErrorFull() instead")
    void getOwnerDomainsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getOwnerDomainsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use renameDomainSignalErrorFull() instead")
    void renameDomainSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void renameDomainSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use saveDomainDefinitionSignalErrorFull() instead")
    void saveDomainDefinitionSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void saveDomainDefinitionSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use searchApisAndDomainsSignalErrorFull() instead")
    void searchApisAndDomainsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void searchApisAndDomainsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use searchDomainsSignalErrorFull() instead")
    void searchDomainsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void searchDomainsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use setDomainCommentStatusV2SignalErrorFull() instead")
    void setDomainCommentStatusV2SignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void setDomainCommentStatusV2SignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use setDomainDefaultVersionSignalErrorFull() instead")
    void setDomainDefaultVersionSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void setDomainDefaultVersionSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use setDomainLifecycleSettingsSignalErrorFull() instead")
    void setDomainLifecycleSettingsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void setDomainLifecycleSettingsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use setDomainPrivateSettingsSignalErrorFull() instead")
    void setDomainPrivateSettingsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void setDomainPrivateSettingsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use updateDomainCommentReplyV2SignalErrorFull() instead")
    void updateDomainCommentReplyV2SignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void updateDomainCommentReplyV2SignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use updateDomainCommentV2SignalErrorFull() instead")
    void updateDomainCommentV2SignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void updateDomainCommentV2SignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use updateDomainCommentsV2SignalErrorFull() instead")
    void updateDomainCommentsV2SignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void updateDomainCommentsV2SignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);

    void abortRequestsSignal();
    void allPendingRequestsCompleted();

public Q_SLOTS:
    void tokenAvailable();
};

} // namespace OpenAPI
#endif
