/**
 * SwaggerHub Registry API
 * # Overview Use SwaggerHub Registry API to access, manage, and update the following resources in SwaggerHub, bypassing the web interface:   * APIs   * Domains   * Integrations   * Projects   * Templates   SwaggerHub also provides the [User Management API](https://app.swaggerhub.com/apis-docs/swagger-hub/user-management-api/) to get information about organizations and manage organization members.  # Base URL Use the following base URL for SwaggerHub SaaS:          http(s)://api.swaggerhub.com  **Note:** This documentation is for SwaggerHub SaaS. On-Premise customers should use the bundled API definition, which can be found at the URLs provided below.  Version 1.29.0 or later:      http(s)://SERVER/v1/openapi.yaml - YAML version     http(s)://SERVER/v1/openapi.json - JSON version  Earlier versions:      http(s)://SERVER/v1/swagger.yaml - YAML version     http(s)://SERVER/v1/swagger.json - JSON version  # Authentication Operations that update data or access private data require authentication using an API key. You can find your personal API key on the [API Keys](https://app.swaggerhub.com/settings/apiKey) page in your account settings. Send this key in the `Authorization` header when making requests to the Registry API:      Authorization: YOUR_API_KEY  To test API calls from this documentation page, click the **Authorize** button below and paste your API key there.  **Important:** Keep the API key secure and do not store it directly in your code. # Tools In addition to calling the Registry API directly, you can use the following tools to interact with the API from the command line or CI/CD pipeline:   * [SwaggerHub CLI](https://www.npmjs.com/package/swaggerhub-cli)   * [Maven plugin](https://github.com/swagger-api/swaggerhub-maven-plugin)  * [Gradle plugin](https://github.com/swagger-api/swaggerhub-gradle-plugin) 
 *
 * The version of the OpenAPI document: 1.0.66
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAICollaborationMembership.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAICollaborationMembership::OAICollaborationMembership(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAICollaborationMembership::OAICollaborationMembership() {
    this->initializeModel();
}

OAICollaborationMembership::~OAICollaborationMembership() {}

void OAICollaborationMembership::initializeModel() {

    m_blocked_isSet = false;
    m_blocked_isValid = false;

    m_name_isSet = false;
    m_name_isValid = false;

    m_start_time_isSet = false;
    m_start_time_isValid = false;

    m_uuid_isSet = false;
    m_uuid_isValid = false;

    m_donotdisturb_isSet = false;
    m_donotdisturb_isValid = false;

    m_roles_isSet = false;
    m_roles_isValid = false;
}

void OAICollaborationMembership::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAICollaborationMembership::fromJsonObject(QJsonObject json) {

    m_blocked_isValid = ::OpenAPI::fromJsonValue(m_blocked, json[QString("blocked")]);
    m_blocked_isSet = !json[QString("blocked")].isNull() && m_blocked_isValid;

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("name")]);
    m_name_isSet = !json[QString("name")].isNull() && m_name_isValid;

    m_start_time_isValid = ::OpenAPI::fromJsonValue(m_start_time, json[QString("startTime")]);
    m_start_time_isSet = !json[QString("startTime")].isNull() && m_start_time_isValid;

    m_uuid_isValid = ::OpenAPI::fromJsonValue(m_uuid, json[QString("uuid")]);
    m_uuid_isSet = !json[QString("uuid")].isNull() && m_uuid_isValid;

    m_donotdisturb_isValid = ::OpenAPI::fromJsonValue(m_donotdisturb, json[QString("donotdisturb")]);
    m_donotdisturb_isSet = !json[QString("donotdisturb")].isNull() && m_donotdisturb_isValid;

    m_roles_isValid = ::OpenAPI::fromJsonValue(m_roles, json[QString("roles")]);
    m_roles_isSet = !json[QString("roles")].isNull() && m_roles_isValid;
}

QString OAICollaborationMembership::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAICollaborationMembership::asJsonObject() const {
    QJsonObject obj;
    if (m_blocked_isSet) {
        obj.insert(QString("blocked"), ::OpenAPI::toJsonValue(m_blocked));
    }
    if (m_name_isSet) {
        obj.insert(QString("name"), ::OpenAPI::toJsonValue(m_name));
    }
    if (m_start_time_isSet) {
        obj.insert(QString("startTime"), ::OpenAPI::toJsonValue(m_start_time));
    }
    if (m_uuid_isSet) {
        obj.insert(QString("uuid"), ::OpenAPI::toJsonValue(m_uuid));
    }
    if (m_donotdisturb_isSet) {
        obj.insert(QString("donotdisturb"), ::OpenAPI::toJsonValue(m_donotdisturb));
    }
    if (m_roles.size() > 0) {
        obj.insert(QString("roles"), ::OpenAPI::toJsonValue(m_roles));
    }
    return obj;
}

bool OAICollaborationMembership::isBlocked() const {
    return m_blocked;
}
void OAICollaborationMembership::setBlocked(const bool &blocked) {
    m_blocked = blocked;
    m_blocked_isSet = true;
}

bool OAICollaborationMembership::is_blocked_Set() const{
    return m_blocked_isSet;
}

bool OAICollaborationMembership::is_blocked_Valid() const{
    return m_blocked_isValid;
}

QString OAICollaborationMembership::getName() const {
    return m_name;
}
void OAICollaborationMembership::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAICollaborationMembership::is_name_Set() const{
    return m_name_isSet;
}

bool OAICollaborationMembership::is_name_Valid() const{
    return m_name_isValid;
}

QDateTime OAICollaborationMembership::getStartTime() const {
    return m_start_time;
}
void OAICollaborationMembership::setStartTime(const QDateTime &start_time) {
    m_start_time = start_time;
    m_start_time_isSet = true;
}

bool OAICollaborationMembership::is_start_time_Set() const{
    return m_start_time_isSet;
}

bool OAICollaborationMembership::is_start_time_Valid() const{
    return m_start_time_isValid;
}

QString OAICollaborationMembership::getUuid() const {
    return m_uuid;
}
void OAICollaborationMembership::setUuid(const QString &uuid) {
    m_uuid = uuid;
    m_uuid_isSet = true;
}

bool OAICollaborationMembership::is_uuid_Set() const{
    return m_uuid_isSet;
}

bool OAICollaborationMembership::is_uuid_Valid() const{
    return m_uuid_isValid;
}

bool OAICollaborationMembership::isDonotdisturb() const {
    return m_donotdisturb;
}
void OAICollaborationMembership::setDonotdisturb(const bool &donotdisturb) {
    m_donotdisturb = donotdisturb;
    m_donotdisturb_isSet = true;
}

bool OAICollaborationMembership::is_donotdisturb_Set() const{
    return m_donotdisturb_isSet;
}

bool OAICollaborationMembership::is_donotdisturb_Valid() const{
    return m_donotdisturb_isValid;
}

QList<QString> OAICollaborationMembership::getRoles() const {
    return m_roles;
}
void OAICollaborationMembership::setRoles(const QList<QString> &roles) {
    m_roles = roles;
    m_roles_isSet = true;
}

bool OAICollaborationMembership::is_roles_Set() const{
    return m_roles_isSet;
}

bool OAICollaborationMembership::is_roles_Valid() const{
    return m_roles_isValid;
}

bool OAICollaborationMembership::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_blocked_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_start_time_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_uuid_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_donotdisturb_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_roles.size() > 0) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAICollaborationMembership::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_name_isValid && m_roles_isValid && true;
}

} // namespace OpenAPI
