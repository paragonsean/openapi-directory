/**
 * SwaggerHub Registry API
 * # Overview Use SwaggerHub Registry API to access, manage, and update the following resources in SwaggerHub, bypassing the web interface:   * APIs   * Domains   * Integrations   * Projects   * Templates   SwaggerHub also provides the [User Management API](https://app.swaggerhub.com/apis-docs/swagger-hub/user-management-api/) to get information about organizations and manage organization members.  # Base URL Use the following base URL for SwaggerHub SaaS:          http(s)://api.swaggerhub.com  **Note:** This documentation is for SwaggerHub SaaS. On-Premise customers should use the bundled API definition, which can be found at the URLs provided below.  Version 1.29.0 or later:      http(s)://SERVER/v1/openapi.yaml - YAML version     http(s)://SERVER/v1/openapi.json - JSON version  Earlier versions:      http(s)://SERVER/v1/swagger.yaml - YAML version     http(s)://SERVER/v1/swagger.json - JSON version  # Authentication Operations that update data or access private data require authentication using an API key. You can find your personal API key on the [API Keys](https://app.swaggerhub.com/settings/apiKey) page in your account settings. Send this key in the `Authorization` header when making requests to the Registry API:      Authorization: YOUR_API_KEY  To test API calls from this documentation page, click the **Authorize** button below and paste your API key there.  **Important:** Keep the API key secure and do not store it directly in your code. # Tools In addition to calling the Registry API directly, you can use the following tools to interact with the API from the command line or CI/CD pipeline:   * [SwaggerHub CLI](https://www.npmjs.com/package/swaggerhub-cli)   * [Maven plugin](https://github.com/swagger-api/swaggerhub-maven-plugin)  * [Gradle plugin](https://github.com/swagger-api/swaggerhub-gradle-plugin) 
 *
 * The version of the OpenAPI document: 1.0.66
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIWebhookIntegration.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIWebhookIntegration::OAIWebhookIntegration(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIWebhookIntegration::OAIWebhookIntegration() {
    this->initializeModel();
}

OAIWebhookIntegration::~OAIWebhookIntegration() {}

void OAIWebhookIntegration::initializeModel() {

    m_enabled_isSet = false;
    m_enabled_isValid = false;

    m_id_isSet = false;
    m_id_isValid = false;

    m_name_isSet = false;
    m_name_isValid = false;

    m_additional_headers_isSet = false;
    m_additional_headers_isValid = false;

    m_config_type_isSet = false;
    m_config_type_isValid = false;

    m_content_type_isSet = false;
    m_content_type_isValid = false;

    m_life_cycle_events_isSet = false;
    m_life_cycle_events_isValid = false;

    m_url_isSet = false;
    m_url_isValid = false;
}

void OAIWebhookIntegration::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIWebhookIntegration::fromJsonObject(QJsonObject json) {

    m_enabled_isValid = ::OpenAPI::fromJsonValue(m_enabled, json[QString("enabled")]);
    m_enabled_isSet = !json[QString("enabled")].isNull() && m_enabled_isValid;

    m_id_isValid = ::OpenAPI::fromJsonValue(m_id, json[QString("id")]);
    m_id_isSet = !json[QString("id")].isNull() && m_id_isValid;

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("name")]);
    m_name_isSet = !json[QString("name")].isNull() && m_name_isValid;

    m_additional_headers_isValid = ::OpenAPI::fromJsonValue(m_additional_headers, json[QString("additionalHeaders")]);
    m_additional_headers_isSet = !json[QString("additionalHeaders")].isNull() && m_additional_headers_isValid;

    m_config_type_isValid = ::OpenAPI::fromJsonValue(m_config_type, json[QString("configType")]);
    m_config_type_isSet = !json[QString("configType")].isNull() && m_config_type_isValid;

    m_content_type_isValid = ::OpenAPI::fromJsonValue(m_content_type, json[QString("contentType")]);
    m_content_type_isSet = !json[QString("contentType")].isNull() && m_content_type_isValid;

    m_life_cycle_events_isValid = ::OpenAPI::fromJsonValue(m_life_cycle_events, json[QString("lifeCycleEvents")]);
    m_life_cycle_events_isSet = !json[QString("lifeCycleEvents")].isNull() && m_life_cycle_events_isValid;

    m_url_isValid = ::OpenAPI::fromJsonValue(m_url, json[QString("url")]);
    m_url_isSet = !json[QString("url")].isNull() && m_url_isValid;
}

QString OAIWebhookIntegration::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIWebhookIntegration::asJsonObject() const {
    QJsonObject obj;
    if (m_enabled_isSet) {
        obj.insert(QString("enabled"), ::OpenAPI::toJsonValue(m_enabled));
    }
    if (m_id_isSet) {
        obj.insert(QString("id"), ::OpenAPI::toJsonValue(m_id));
    }
    if (m_name_isSet) {
        obj.insert(QString("name"), ::OpenAPI::toJsonValue(m_name));
    }
    if (m_additional_headers.size() > 0) {
        obj.insert(QString("additionalHeaders"), ::OpenAPI::toJsonValue(m_additional_headers));
    }
    if (m_config_type_isSet) {
        obj.insert(QString("configType"), ::OpenAPI::toJsonValue(m_config_type));
    }
    if (m_content_type_isSet) {
        obj.insert(QString("contentType"), ::OpenAPI::toJsonValue(m_content_type));
    }
    if (m_life_cycle_events.size() > 0) {
        obj.insert(QString("lifeCycleEvents"), ::OpenAPI::toJsonValue(m_life_cycle_events));
    }
    if (m_url_isSet) {
        obj.insert(QString("url"), ::OpenAPI::toJsonValue(m_url));
    }
    return obj;
}

bool OAIWebhookIntegration::isEnabled() const {
    return m_enabled;
}
void OAIWebhookIntegration::setEnabled(const bool &enabled) {
    m_enabled = enabled;
    m_enabled_isSet = true;
}

bool OAIWebhookIntegration::is_enabled_Set() const{
    return m_enabled_isSet;
}

bool OAIWebhookIntegration::is_enabled_Valid() const{
    return m_enabled_isValid;
}

QString OAIWebhookIntegration::getId() const {
    return m_id;
}
void OAIWebhookIntegration::setId(const QString &id) {
    m_id = id;
    m_id_isSet = true;
}

bool OAIWebhookIntegration::is_id_Set() const{
    return m_id_isSet;
}

bool OAIWebhookIntegration::is_id_Valid() const{
    return m_id_isValid;
}

QString OAIWebhookIntegration::getName() const {
    return m_name;
}
void OAIWebhookIntegration::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAIWebhookIntegration::is_name_Set() const{
    return m_name_isSet;
}

bool OAIWebhookIntegration::is_name_Valid() const{
    return m_name_isValid;
}

QList<QString> OAIWebhookIntegration::getAdditionalHeaders() const {
    return m_additional_headers;
}
void OAIWebhookIntegration::setAdditionalHeaders(const QList<QString> &additional_headers) {
    m_additional_headers = additional_headers;
    m_additional_headers_isSet = true;
}

bool OAIWebhookIntegration::is_additional_headers_Set() const{
    return m_additional_headers_isSet;
}

bool OAIWebhookIntegration::is_additional_headers_Valid() const{
    return m_additional_headers_isValid;
}

QString OAIWebhookIntegration::getConfigType() const {
    return m_config_type;
}
void OAIWebhookIntegration::setConfigType(const QString &config_type) {
    m_config_type = config_type;
    m_config_type_isSet = true;
}

bool OAIWebhookIntegration::is_config_type_Set() const{
    return m_config_type_isSet;
}

bool OAIWebhookIntegration::is_config_type_Valid() const{
    return m_config_type_isValid;
}

QString OAIWebhookIntegration::getContentType() const {
    return m_content_type;
}
void OAIWebhookIntegration::setContentType(const QString &content_type) {
    m_content_type = content_type;
    m_content_type_isSet = true;
}

bool OAIWebhookIntegration::is_content_type_Set() const{
    return m_content_type_isSet;
}

bool OAIWebhookIntegration::is_content_type_Valid() const{
    return m_content_type_isValid;
}

QList<QString> OAIWebhookIntegration::getLifeCycleEvents() const {
    return m_life_cycle_events;
}
void OAIWebhookIntegration::setLifeCycleEvents(const QList<QString> &life_cycle_events) {
    m_life_cycle_events = life_cycle_events;
    m_life_cycle_events_isSet = true;
}

bool OAIWebhookIntegration::is_life_cycle_events_Set() const{
    return m_life_cycle_events_isSet;
}

bool OAIWebhookIntegration::is_life_cycle_events_Valid() const{
    return m_life_cycle_events_isValid;
}

QString OAIWebhookIntegration::getUrl() const {
    return m_url;
}
void OAIWebhookIntegration::setUrl(const QString &url) {
    m_url = url;
    m_url_isSet = true;
}

bool OAIWebhookIntegration::is_url_Set() const{
    return m_url_isSet;
}

bool OAIWebhookIntegration::is_url_Valid() const{
    return m_url_isValid;
}

bool OAIWebhookIntegration::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_enabled_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_additional_headers.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_config_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_content_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_life_cycle_events.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_url_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIWebhookIntegration::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_name_isValid && m_config_type_isValid && m_content_type_isValid && m_url_isValid && true;
}

} // namespace OpenAPI
