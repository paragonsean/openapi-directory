/**
 * SwaggerHub Registry API
 * # Overview Use SwaggerHub Registry API to access, manage, and update the following resources in SwaggerHub, bypassing the web interface:   * APIs   * Domains   * Integrations   * Projects   * Templates   SwaggerHub also provides the [User Management API](https://app.swaggerhub.com/apis-docs/swagger-hub/user-management-api/) to get information about organizations and manage organization members.  # Base URL Use the following base URL for SwaggerHub SaaS:          http(s)://api.swaggerhub.com  **Note:** This documentation is for SwaggerHub SaaS. On-Premise customers should use the bundled API definition, which can be found at the URLs provided below.  Version 1.29.0 or later:      http(s)://SERVER/v1/openapi.yaml - YAML version     http(s)://SERVER/v1/openapi.json - JSON version  Earlier versions:      http(s)://SERVER/v1/swagger.yaml - YAML version     http(s)://SERVER/v1/swagger.json - JSON version  # Authentication Operations that update data or access private data require authentication using an API key. You can find your personal API key on the [API Keys](https://app.swaggerhub.com/settings/apiKey) page in your account settings. Send this key in the `Authorization` header when making requests to the Registry API:      Authorization: YOUR_API_KEY  To test API calls from this documentation page, click the **Authorize** button below and paste your API key there.  **Important:** Keep the API key secure and do not store it directly in your code. # Tools In addition to calling the Registry API directly, you can use the following tools to interact with the API from the command line or CI/CD pipeline:   * [SwaggerHub CLI](https://www.npmjs.com/package/swaggerhub-cli)   * [Maven plugin](https://github.com/swagger-api/swaggerhub-maven-plugin)  * [Gradle plugin](https://github.com/swagger-api/swaggerhub-gradle-plugin) 
 *
 * The version of the OpenAPI document: 1.0.66
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#ifndef OAI_OAITemplatesApi_H
#define OAI_OAITemplatesApi_H

#include "OAIHelpers.h"
#include "OAIHttpRequest.h"
#include "OAIServerConfiguration.h"
#include "OAIOauth.h"

#include "OAIApisJson.h"
#include "OAIClosableComment.h"
#include "OAICommentsBatch.h"
#include "OAIForkVersion.h"
#include "OAILifecycleSettings.h"
#include "OAIObject.h"
#include "OAITemplateWrapper.h"
#include "OAIVisibilitySettings.h"
#include <QString>

#include <QObject>
#include <QByteArray>
#include <QStringList>
#include <QList>
#include <QNetworkAccessManager>

namespace OpenAPI {

class OAITemplatesApi : public QObject {
    Q_OBJECT

public:
    OAITemplatesApi(const int timeOut = 0);
    ~OAITemplatesApi();

    void initializeServerConfigs();
    int setDefaultServerValue(int serverIndex,const QString &operation, const QString &variable,const QString &val);
    void setServerIndex(const QString &operation, int serverIndex);
    void setApiKey(const QString &apiKeyName, const QString &apiKey);
    void setBearerToken(const QString &token);
    void setUsername(const QString &username);
    void setPassword(const QString &password);
    void setTimeOut(const int timeOut);
    void setWorkingDirectory(const QString &path);
    void setNetworkAccessManager(QNetworkAccessManager* manager);
    int addServerConfiguration(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables = QMap<QString, OAIServerVariable>());
    void setNewServerForAllOperations(const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void setNewServer(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void addHeaders(const QString &key, const QString &value);
    void enableRequestCompression();
    void enableResponseCompression();
    void abortRequests();
    QString getParamStylePrefix(const QString &style);
    QString getParamStyleSuffix(const QString &style);
    QString getParamStyleDelimiter(const QString &style, const QString &name, bool isExplode);

    /**
    * @param[in]  owner QString [required]
    * @param[in]  template_id QString [required]
    */
    virtual void deleteTemplate(const QString &owner, const QString &template_id);

    /**
    * @param[in]  owner QString [required]
    * @param[in]  template_id QString [required]
    * @param[in]  version QString [required]
    */
    virtual void deleteTemplateVersion(const QString &owner, const QString &template_id, const QString &version);

    /**
    * @param[in]  owner QString [required]
    * @param[in]  template_id QString [required]
    * @param[in]  version QString [required]
    * @param[in]  body OAIForkVersion [required]
    */
    virtual void forkTemplate(const QString &owner, const QString &template_id, const QString &version, const OAIForkVersion &body);

    /**
    * @param[in]  owner QString [required]
    * @param[in]  template_id QString [required]
    * @param[in]  version QString [required]
    */
    virtual void getTemplateComments(const QString &owner, const QString &template_id, const QString &version);

    /**
    * @param[in]  owner QString [required]
    * @param[in]  template_id QString [required]
    * @param[in]  version QString [required]
    * @param[in]  flatten bool [optional]
    */
    virtual void getTemplateDefinition(const QString &owner, const QString &template_id, const QString &version, const ::OpenAPI::OptionalParam<bool> &flatten = ::OpenAPI::OptionalParam<bool>());

    /**
    * @param[in]  owner QString [required]
    * @param[in]  template_id QString [required]
    * @param[in]  version QString [required]
    */
    virtual void getTemplateLifecycleSettings(const QString &owner, const QString &template_id, const QString &version);

    /**
    * @param[in]  owner QString [required]
    * @param[in]  template_id QString [required]
    * @param[in]  version QString [required]
    */
    virtual void getTemplatePrivateSettings(const QString &owner, const QString &template_id, const QString &version);

    /**
    * @param[in]  owner QString [required]
    * @param[in]  template_id QString [required]
    */
    virtual void getTemplateVersions(const QString &owner, const QString &template_id);

    /**
    * @param[in]  owner QString [optional]
    */
    virtual void getTemplates(const ::OpenAPI::OptionalParam<QString> &owner = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  owner QString [required]
    * @param[in]  template_id QString [required]
    * @param[in]  new_name QString [required]
    */
    virtual void renameTemplate(const QString &owner, const QString &template_id, const QString &new_name);

    /**
    * @param[in]  owner QString [required]
    * @param[in]  template_id QString [required]
    * @param[in]  body QString [required]
    * @param[in]  is_private bool [optional]
    * @param[in]  version QString [optional]
    * @param[in]  force bool [optional]
    * @param[in]  project_name QString [optional]
    */
    virtual void saveTemplateDefinition(const QString &owner, const QString &template_id, const QString &body, const ::OpenAPI::OptionalParam<bool> &is_private = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QString> &version = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &force = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QString> &project_name = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  spec_type QString [optional]
    * @param[in]  visibility QString [optional]
    * @param[in]  state QString [optional]
    * @param[in]  owner QString [optional]
    * @param[in]  query QString [optional]
    * @param[in]  page qint32 [optional]
    * @param[in]  limit qint32 [optional]
    * @param[in]  sort QString [optional]
    * @param[in]  order QString [optional]
    */
    virtual void searchApisAndDomains(const ::OpenAPI::OptionalParam<QString> &spec_type = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &visibility = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &state = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &owner = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &query = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<qint32> &page = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint32> &limit = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<QString> &sort = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &order = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  owner QString [required]
    * @param[in]  template_id QString [required]
    * @param[in]  version QString [required]
    * @param[in]  body OAILifecycleSettings [required]
    * @param[in]  force bool [optional]
    */
    virtual void setTemplateLifecycleSettings(const QString &owner, const QString &template_id, const QString &version, const OAILifecycleSettings &body, const ::OpenAPI::OptionalParam<bool> &force = ::OpenAPI::OptionalParam<bool>());

    /**
    * @param[in]  owner QString [required]
    * @param[in]  template_id QString [required]
    * @param[in]  version QString [required]
    * @param[in]  body OAIVisibilitySettings [required]
    */
    virtual void setTemplatePrivateSettings(const QString &owner, const QString &template_id, const QString &version, const OAIVisibilitySettings &body);

    /**
    * @param[in]  owner QString [required]
    * @param[in]  template_id QString [required]
    * @param[in]  version QString [required]
    * @param[in]  body OAICommentsBatch [required]
    */
    virtual void updateTemplateComments(const QString &owner, const QString &template_id, const QString &version, const OAICommentsBatch &body);


private:
    QMap<QString,int> _serverIndices;
    QMap<QString,QList<OAIServerConfiguration>> _serverConfigs;
    QMap<QString, QString> _apiKeys;
    QString _bearerToken;
    QString _username;
    QString _password;
    int _timeOut;
    QString _workingDirectory;
    QNetworkAccessManager* _manager;
    QMap<QString, QString> _defaultHeaders;
    bool _isResponseCompressionEnabled;
    bool _isRequestCompressionEnabled;
    OAIHttpRequestInput _latestInput;
    OAIHttpRequestWorker *_latestWorker;
    QStringList _latestScope;
    OauthCode _authFlow;
    OauthImplicit _implicitFlow;
    OauthCredentials _credentialFlow;
    OauthPassword _passwordFlow;
    int _OauthMethod = 0;

    void deleteTemplateCallback(OAIHttpRequestWorker *worker);
    void deleteTemplateVersionCallback(OAIHttpRequestWorker *worker);
    void forkTemplateCallback(OAIHttpRequestWorker *worker);
    void getTemplateCommentsCallback(OAIHttpRequestWorker *worker);
    void getTemplateDefinitionCallback(OAIHttpRequestWorker *worker);
    void getTemplateLifecycleSettingsCallback(OAIHttpRequestWorker *worker);
    void getTemplatePrivateSettingsCallback(OAIHttpRequestWorker *worker);
    void getTemplateVersionsCallback(OAIHttpRequestWorker *worker);
    void getTemplatesCallback(OAIHttpRequestWorker *worker);
    void renameTemplateCallback(OAIHttpRequestWorker *worker);
    void saveTemplateDefinitionCallback(OAIHttpRequestWorker *worker);
    void searchApisAndDomainsCallback(OAIHttpRequestWorker *worker);
    void setTemplateLifecycleSettingsCallback(OAIHttpRequestWorker *worker);
    void setTemplatePrivateSettingsCallback(OAIHttpRequestWorker *worker);
    void updateTemplateCommentsCallback(OAIHttpRequestWorker *worker);

Q_SIGNALS:

    void deleteTemplateSignal();
    void deleteTemplateVersionSignal();
    void forkTemplateSignal();
    void getTemplateCommentsSignal(QList<OAIClosableComment> summary);
    void getTemplateDefinitionSignal(OAIObject summary);
    void getTemplateLifecycleSettingsSignal(OAILifecycleSettings summary);
    void getTemplatePrivateSettingsSignal(OAIVisibilitySettings summary);
    void getTemplateVersionsSignal(OAIApisJson summary);
    void getTemplatesSignal(OAITemplateWrapper summary);
    void renameTemplateSignal();
    void saveTemplateDefinitionSignal();
    void searchApisAndDomainsSignal(OAIApisJson summary);
    void setTemplateLifecycleSettingsSignal();
    void setTemplatePrivateSettingsSignal();
    void updateTemplateCommentsSignal();


    void deleteTemplateSignalFull(OAIHttpRequestWorker *worker);
    void deleteTemplateVersionSignalFull(OAIHttpRequestWorker *worker);
    void forkTemplateSignalFull(OAIHttpRequestWorker *worker);
    void getTemplateCommentsSignalFull(OAIHttpRequestWorker *worker, QList<OAIClosableComment> summary);
    void getTemplateDefinitionSignalFull(OAIHttpRequestWorker *worker, OAIObject summary);
    void getTemplateLifecycleSettingsSignalFull(OAIHttpRequestWorker *worker, OAILifecycleSettings summary);
    void getTemplatePrivateSettingsSignalFull(OAIHttpRequestWorker *worker, OAIVisibilitySettings summary);
    void getTemplateVersionsSignalFull(OAIHttpRequestWorker *worker, OAIApisJson summary);
    void getTemplatesSignalFull(OAIHttpRequestWorker *worker, OAITemplateWrapper summary);
    void renameTemplateSignalFull(OAIHttpRequestWorker *worker);
    void saveTemplateDefinitionSignalFull(OAIHttpRequestWorker *worker);
    void searchApisAndDomainsSignalFull(OAIHttpRequestWorker *worker, OAIApisJson summary);
    void setTemplateLifecycleSettingsSignalFull(OAIHttpRequestWorker *worker);
    void setTemplatePrivateSettingsSignalFull(OAIHttpRequestWorker *worker);
    void updateTemplateCommentsSignalFull(OAIHttpRequestWorker *worker);

    Q_DECL_DEPRECATED_X("Use deleteTemplateSignalError() instead")
    void deleteTemplateSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void deleteTemplateSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use deleteTemplateVersionSignalError() instead")
    void deleteTemplateVersionSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void deleteTemplateVersionSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use forkTemplateSignalError() instead")
    void forkTemplateSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void forkTemplateSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getTemplateCommentsSignalError() instead")
    void getTemplateCommentsSignalE(QList<OAIClosableComment> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getTemplateCommentsSignalError(QList<OAIClosableComment> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getTemplateDefinitionSignalError() instead")
    void getTemplateDefinitionSignalE(OAIObject summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getTemplateDefinitionSignalError(OAIObject summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getTemplateLifecycleSettingsSignalError() instead")
    void getTemplateLifecycleSettingsSignalE(OAILifecycleSettings summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getTemplateLifecycleSettingsSignalError(OAILifecycleSettings summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getTemplatePrivateSettingsSignalError() instead")
    void getTemplatePrivateSettingsSignalE(OAIVisibilitySettings summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getTemplatePrivateSettingsSignalError(OAIVisibilitySettings summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getTemplateVersionsSignalError() instead")
    void getTemplateVersionsSignalE(OAIApisJson summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getTemplateVersionsSignalError(OAIApisJson summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getTemplatesSignalError() instead")
    void getTemplatesSignalE(OAITemplateWrapper summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getTemplatesSignalError(OAITemplateWrapper summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use renameTemplateSignalError() instead")
    void renameTemplateSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void renameTemplateSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use saveTemplateDefinitionSignalError() instead")
    void saveTemplateDefinitionSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void saveTemplateDefinitionSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use searchApisAndDomainsSignalError() instead")
    void searchApisAndDomainsSignalE(OAIApisJson summary, QNetworkReply::NetworkError error_type, QString error_str);
    void searchApisAndDomainsSignalError(OAIApisJson summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use setTemplateLifecycleSettingsSignalError() instead")
    void setTemplateLifecycleSettingsSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void setTemplateLifecycleSettingsSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use setTemplatePrivateSettingsSignalError() instead")
    void setTemplatePrivateSettingsSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void setTemplatePrivateSettingsSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use updateTemplateCommentsSignalError() instead")
    void updateTemplateCommentsSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void updateTemplateCommentsSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);

    Q_DECL_DEPRECATED_X("Use deleteTemplateSignalErrorFull() instead")
    void deleteTemplateSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void deleteTemplateSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use deleteTemplateVersionSignalErrorFull() instead")
    void deleteTemplateVersionSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void deleteTemplateVersionSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use forkTemplateSignalErrorFull() instead")
    void forkTemplateSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void forkTemplateSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getTemplateCommentsSignalErrorFull() instead")
    void getTemplateCommentsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getTemplateCommentsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getTemplateDefinitionSignalErrorFull() instead")
    void getTemplateDefinitionSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getTemplateDefinitionSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getTemplateLifecycleSettingsSignalErrorFull() instead")
    void getTemplateLifecycleSettingsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getTemplateLifecycleSettingsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getTemplatePrivateSettingsSignalErrorFull() instead")
    void getTemplatePrivateSettingsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getTemplatePrivateSettingsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getTemplateVersionsSignalErrorFull() instead")
    void getTemplateVersionsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getTemplateVersionsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getTemplatesSignalErrorFull() instead")
    void getTemplatesSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getTemplatesSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use renameTemplateSignalErrorFull() instead")
    void renameTemplateSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void renameTemplateSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use saveTemplateDefinitionSignalErrorFull() instead")
    void saveTemplateDefinitionSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void saveTemplateDefinitionSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use searchApisAndDomainsSignalErrorFull() instead")
    void searchApisAndDomainsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void searchApisAndDomainsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use setTemplateLifecycleSettingsSignalErrorFull() instead")
    void setTemplateLifecycleSettingsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void setTemplateLifecycleSettingsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use setTemplatePrivateSettingsSignalErrorFull() instead")
    void setTemplatePrivateSettingsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void setTemplatePrivateSettingsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use updateTemplateCommentsSignalErrorFull() instead")
    void updateTemplateCommentsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void updateTemplateCommentsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);

    void abortRequestsSignal();
    void allPendingRequestsCompleted();

public Q_SLOTS:
    void tokenAvailable();
};

} // namespace OpenAPI
#endif
