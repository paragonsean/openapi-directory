# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.collaboration_membership import CollaborationMembership
from openapi_server.models.collaboration_team_membership import CollaborationTeamMembership
from openapi_server.models.organization_owner import OrganizationOwner
from openapi_server import util


class Collaboration(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, members: List[CollaborationMembership]=None, owner: str=None, owner_name: str=None, owners: List[OrganizationOwner]=None, pending_members: List[CollaborationMembership]=None, teams: List[CollaborationTeamMembership]=None):
        """Collaboration - a model defined in OpenAPI

        :param members: The members of this Collaboration.
        :param owner: The owner of this Collaboration.
        :param owner_name: The owner_name of this Collaboration.
        :param owners: The owners of this Collaboration.
        :param pending_members: The pending_members of this Collaboration.
        :param teams: The teams of this Collaboration.
        """
        self.openapi_types = {
            'members': List[CollaborationMembership],
            'owner': str,
            'owner_name': str,
            'owners': List[OrganizationOwner],
            'pending_members': List[CollaborationMembership],
            'teams': List[CollaborationTeamMembership]
        }

        self.attribute_map = {
            'members': 'members',
            'owner': 'owner',
            'owner_name': 'ownerName',
            'owners': 'owners',
            'pending_members': 'pendingMembers',
            'teams': 'teams'
        }

        self._members = members
        self._owner = owner
        self._owner_name = owner_name
        self._owners = owners
        self._pending_members = pending_members
        self._teams = teams

    @classmethod
    def from_dict(cls, dikt: dict) -> 'Collaboration':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Collaboration of this Collaboration.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def members(self):
        """Gets the members of this Collaboration.

        A list of users who are existing collaborators on this API

        :return: The members of this Collaboration.
        :rtype: List[CollaborationMembership]
        """
        return self._members

    @members.setter
    def members(self, members):
        """Sets the members of this Collaboration.

        A list of users who are existing collaborators on this API

        :param members: The members of this Collaboration.
        :type members: List[CollaborationMembership]
        """

        self._members = members

    @property
    def owner(self):
        """Gets the owner of this Collaboration.

        Internal ID of the API owner (organization or user)

        :return: The owner of this Collaboration.
        :rtype: str
        """
        return self._owner

    @owner.setter
    def owner(self, owner):
        """Sets the owner of this Collaboration.

        Internal ID of the API owner (organization or user)

        :param owner: The owner of this Collaboration.
        :type owner: str
        """

        self._owner = owner

    @property
    def owner_name(self):
        """Gets the owner_name of this Collaboration.

        The name of the API owner (organization or user)

        :return: The owner_name of this Collaboration.
        :rtype: str
        """
        return self._owner_name

    @owner_name.setter
    def owner_name(self, owner_name):
        """Sets the owner_name of this Collaboration.

        The name of the API owner (organization or user)

        :param owner_name: The owner_name of this Collaboration.
        :type owner_name: str
        """

        self._owner_name = owner_name

    @property
    def owners(self):
        """Gets the owners of this Collaboration.

        If the API owner is an organization, this list contains the IDs of the organization owners. If the API owner is a user, an empty array is returned. 

        :return: The owners of this Collaboration.
        :rtype: List[OrganizationOwner]
        """
        return self._owners

    @owners.setter
    def owners(self, owners):
        """Sets the owners of this Collaboration.

        If the API owner is an organization, this list contains the IDs of the organization owners. If the API owner is a user, an empty array is returned. 

        :param owners: The owners of this Collaboration.
        :type owners: List[OrganizationOwner]
        """

        self._owners = owners

    @property
    def pending_members(self):
        """Gets the pending_members of this Collaboration.

        A list of pending collaborators - users who were invited to collaborate on this API but have not accepted the invitation yet

        :return: The pending_members of this Collaboration.
        :rtype: List[CollaborationMembership]
        """
        return self._pending_members

    @pending_members.setter
    def pending_members(self, pending_members):
        """Sets the pending_members of this Collaboration.

        A list of pending collaborators - users who were invited to collaborate on this API but have not accepted the invitation yet

        :param pending_members: The pending_members of this Collaboration.
        :type pending_members: List[CollaborationMembership]
        """

        self._pending_members = pending_members

    @property
    def teams(self):
        """Gets the teams of this Collaboration.

        A list of teams that collaborate on this API

        :return: The teams of this Collaboration.
        :rtype: List[CollaborationTeamMembership]
        """
        return self._teams

    @teams.setter
    def teams(self, teams):
        """Sets the teams of this Collaboration.

        A list of teams that collaborate on this API

        :param teams: The teams of this Collaboration.
        :type teams: List[CollaborationTeamMembership]
        """

        self._teams = teams
