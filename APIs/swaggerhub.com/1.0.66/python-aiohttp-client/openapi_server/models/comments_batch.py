# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.closable_comment_patch import ClosableCommentPatch
from openapi_server.models.comment_patch import CommentPatch
from openapi_server.models.new_comment import NewComment
from openapi_server.models.new_reply import NewReply
from openapi_server import util


class CommentsBatch(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, add_comment: List[NewComment]=None, add_reply: Dict[str, List[NewReply]]=None, delete_comment: List[str]=None, delete_reply: Dict[str, list[str]]=None, update_comment: Dict[str, ClosableCommentPatch]=None, update_reply: Dict[str, Dict[str, CommentPatch]]=None, update_status: Dict[str, str]=None):
        """CommentsBatch - a model defined in OpenAPI

        :param add_comment: The add_comment of this CommentsBatch.
        :param add_reply: The add_reply of this CommentsBatch.
        :param delete_comment: The delete_comment of this CommentsBatch.
        :param delete_reply: The delete_reply of this CommentsBatch.
        :param update_comment: The update_comment of this CommentsBatch.
        :param update_reply: The update_reply of this CommentsBatch.
        :param update_status: The update_status of this CommentsBatch.
        """
        self.openapi_types = {
            'add_comment': List[NewComment],
            'add_reply': Dict[str, List[NewReply]],
            'delete_comment': List[str],
            'delete_reply': Dict[str, list[str]],
            'update_comment': Dict[str, ClosableCommentPatch],
            'update_reply': Dict[str, Dict[str, CommentPatch]],
            'update_status': Dict[str, str]
        }

        self.attribute_map = {
            'add_comment': 'addComment',
            'add_reply': 'addReply',
            'delete_comment': 'deleteComment',
            'delete_reply': 'deleteReply',
            'update_comment': 'updateComment',
            'update_reply': 'updateReply',
            'update_status': 'updateStatus'
        }

        self._add_comment = add_comment
        self._add_reply = add_reply
        self._delete_comment = delete_comment
        self._delete_reply = delete_reply
        self._update_comment = update_comment
        self._update_reply = update_reply
        self._update_status = update_status

    @classmethod
    def from_dict(cls, dikt: dict) -> 'CommentsBatch':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The CommentsBatch of this CommentsBatch.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def add_comment(self):
        """Gets the add_comment of this CommentsBatch.


        :return: The add_comment of this CommentsBatch.
        :rtype: List[NewComment]
        """
        return self._add_comment

    @add_comment.setter
    def add_comment(self, add_comment):
        """Sets the add_comment of this CommentsBatch.


        :param add_comment: The add_comment of this CommentsBatch.
        :type add_comment: List[NewComment]
        """

        self._add_comment = add_comment

    @property
    def add_reply(self):
        """Gets the add_reply of this CommentsBatch.


        :return: The add_reply of this CommentsBatch.
        :rtype: Dict[str, List[NewReply]]
        """
        return self._add_reply

    @add_reply.setter
    def add_reply(self, add_reply):
        """Sets the add_reply of this CommentsBatch.


        :param add_reply: The add_reply of this CommentsBatch.
        :type add_reply: Dict[str, List[NewReply]]
        """

        self._add_reply = add_reply

    @property
    def delete_comment(self):
        """Gets the delete_comment of this CommentsBatch.


        :return: The delete_comment of this CommentsBatch.
        :rtype: List[str]
        """
        return self._delete_comment

    @delete_comment.setter
    def delete_comment(self, delete_comment):
        """Sets the delete_comment of this CommentsBatch.


        :param delete_comment: The delete_comment of this CommentsBatch.
        :type delete_comment: List[str]
        """

        self._delete_comment = delete_comment

    @property
    def delete_reply(self):
        """Gets the delete_reply of this CommentsBatch.


        :return: The delete_reply of this CommentsBatch.
        :rtype: Dict[str, list[str]]
        """
        return self._delete_reply

    @delete_reply.setter
    def delete_reply(self, delete_reply):
        """Sets the delete_reply of this CommentsBatch.


        :param delete_reply: The delete_reply of this CommentsBatch.
        :type delete_reply: Dict[str, list[str]]
        """

        self._delete_reply = delete_reply

    @property
    def update_comment(self):
        """Gets the update_comment of this CommentsBatch.


        :return: The update_comment of this CommentsBatch.
        :rtype: Dict[str, ClosableCommentPatch]
        """
        return self._update_comment

    @update_comment.setter
    def update_comment(self, update_comment):
        """Sets the update_comment of this CommentsBatch.


        :param update_comment: The update_comment of this CommentsBatch.
        :type update_comment: Dict[str, ClosableCommentPatch]
        """

        self._update_comment = update_comment

    @property
    def update_reply(self):
        """Gets the update_reply of this CommentsBatch.


        :return: The update_reply of this CommentsBatch.
        :rtype: Dict[str, Dict[str, CommentPatch]]
        """
        return self._update_reply

    @update_reply.setter
    def update_reply(self, update_reply):
        """Sets the update_reply of this CommentsBatch.


        :param update_reply: The update_reply of this CommentsBatch.
        :type update_reply: Dict[str, Dict[str, CommentPatch]]
        """

        self._update_reply = update_reply

    @property
    def update_status(self):
        """Gets the update_status of this CommentsBatch.


        :return: The update_status of this CommentsBatch.
        :rtype: Dict[str, str]
        """
        return self._update_status

    @update_status.setter
    def update_status(self, update_status):
        """Sets the update_status of this CommentsBatch.


        :param update_status: The update_status of this CommentsBatch.
        :type update_status: Dict[str, str]
        """
        allowed_values = ["OPEN", "RESOLVED"]  # noqa: E501
        if not set(update_status.keys()).issubset(set(allowed_values)):
            raise ValueError(
                "Invalid keys in `update_status` [{0}], must be a subset of [{1}]"
                .format(", ".join(map(str, set(update_status.keys()) - set(allowed_values))),
                        ", ".join(map(str, allowed_values)))
            )

        self._update_status = update_status
