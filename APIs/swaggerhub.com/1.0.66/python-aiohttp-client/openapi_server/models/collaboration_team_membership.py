# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.collaboration_member import CollaborationMember
from openapi_server import util


class CollaborationTeamMembership(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, blocked: bool=None, name: str=None, start_time: datetime=None, uuid: str=None, donotdisturb: bool=None, roles: List[str]=None, invited: List[CollaborationMember]=None, members: List[CollaborationMember]=None):
        """CollaborationTeamMembership - a model defined in OpenAPI

        :param blocked: The blocked of this CollaborationTeamMembership.
        :param name: The name of this CollaborationTeamMembership.
        :param start_time: The start_time of this CollaborationTeamMembership.
        :param uuid: The uuid of this CollaborationTeamMembership.
        :param donotdisturb: The donotdisturb of this CollaborationTeamMembership.
        :param roles: The roles of this CollaborationTeamMembership.
        :param invited: The invited of this CollaborationTeamMembership.
        :param members: The members of this CollaborationTeamMembership.
        """
        self.openapi_types = {
            'blocked': bool,
            'name': str,
            'start_time': datetime,
            'uuid': str,
            'donotdisturb': bool,
            'roles': List[str],
            'invited': List[CollaborationMember],
            'members': List[CollaborationMember]
        }

        self.attribute_map = {
            'blocked': 'blocked',
            'name': 'name',
            'start_time': 'startTime',
            'uuid': 'uuid',
            'donotdisturb': 'donotdisturb',
            'roles': 'roles',
            'invited': 'invited',
            'members': 'members'
        }

        self._blocked = blocked
        self._name = name
        self._start_time = start_time
        self._uuid = uuid
        self._donotdisturb = donotdisturb
        self._roles = roles
        self._invited = invited
        self._members = members

    @classmethod
    def from_dict(cls, dikt: dict) -> 'CollaborationTeamMembership':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The CollaborationTeamMembership of this CollaborationTeamMembership.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def blocked(self):
        """Gets the blocked of this CollaborationTeamMembership.


        :return: The blocked of this CollaborationTeamMembership.
        :rtype: bool
        """
        return self._blocked

    @blocked.setter
    def blocked(self, blocked):
        """Sets the blocked of this CollaborationTeamMembership.


        :param blocked: The blocked of this CollaborationTeamMembership.
        :type blocked: bool
        """

        self._blocked = blocked

    @property
    def name(self):
        """Gets the name of this CollaborationTeamMembership.

        The name of a user or team

        :return: The name of this CollaborationTeamMembership.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this CollaborationTeamMembership.

        The name of a user or team

        :param name: The name of this CollaborationTeamMembership.
        :type name: str
        """
        if name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")

        self._name = name

    @property
    def start_time(self):
        """Gets the start_time of this CollaborationTeamMembership.

        The date and time this user or team was added as a collaborator

        :return: The start_time of this CollaborationTeamMembership.
        :rtype: datetime
        """
        return self._start_time

    @start_time.setter
    def start_time(self, start_time):
        """Sets the start_time of this CollaborationTeamMembership.

        The date and time this user or team was added as a collaborator

        :param start_time: The start_time of this CollaborationTeamMembership.
        :type start_time: datetime
        """

        self._start_time = start_time

    @property
    def uuid(self):
        """Gets the uuid of this CollaborationTeamMembership.

        Internal ID of a user or team

        :return: The uuid of this CollaborationTeamMembership.
        :rtype: str
        """
        return self._uuid

    @uuid.setter
    def uuid(self, uuid):
        """Sets the uuid of this CollaborationTeamMembership.

        Internal ID of a user or team

        :param uuid: The uuid of this CollaborationTeamMembership.
        :type uuid: str
        """

        self._uuid = uuid

    @property
    def donotdisturb(self):
        """Gets the donotdisturb of this CollaborationTeamMembership.


        :return: The donotdisturb of this CollaborationTeamMembership.
        :rtype: bool
        """
        return self._donotdisturb

    @donotdisturb.setter
    def donotdisturb(self, donotdisturb):
        """Sets the donotdisturb of this CollaborationTeamMembership.


        :param donotdisturb: The donotdisturb of this CollaborationTeamMembership.
        :type donotdisturb: bool
        """

        self._donotdisturb = donotdisturb

    @property
    def roles(self):
        """Gets the roles of this CollaborationTeamMembership.

        A list of this collaborator's roles

        :return: The roles of this CollaborationTeamMembership.
        :rtype: List[str]
        """
        return self._roles

    @roles.setter
    def roles(self, roles):
        """Sets the roles of this CollaborationTeamMembership.

        A list of this collaborator's roles

        :param roles: The roles of this CollaborationTeamMembership.
        :type roles: List[str]
        """
        allowed_values = ["EDIT", "COMMENT", "VIEW"]  # noqa: E501
        if not set(roles).issubset(set(allowed_values)):
            raise ValueError(
                "Invalid values for `roles` [{0}], must be a subset of [{1}]"
                .format(", ".join(map(str, set(roles) - set(allowed_values))),
                        ", ".join(map(str, allowed_values)))
            )

        self._roles = roles

    @property
    def invited(self):
        """Gets the invited of this CollaborationTeamMembership.

        Reserved for future use. Currently, this field is always an empty array.

        :return: The invited of this CollaborationTeamMembership.
        :rtype: List[CollaborationMember]
        """
        return self._invited

    @invited.setter
    def invited(self, invited):
        """Sets the invited of this CollaborationTeamMembership.

        Reserved for future use. Currently, this field is always an empty array.

        :param invited: The invited of this CollaborationTeamMembership.
        :type invited: List[CollaborationMember]
        """

        self._invited = invited

    @property
    def members(self):
        """Gets the members of this CollaborationTeamMembership.

        A list of team members

        :return: The members of this CollaborationTeamMembership.
        :rtype: List[CollaborationMember]
        """
        return self._members

    @members.setter
    def members(self, members):
        """Sets the members of this CollaborationTeamMembership.

        A list of team members

        :param members: The members of this CollaborationTeamMembership.
        :type members: List[CollaborationMember]
        """

        self._members = members
