# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class AutoMockingIntegration(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, enabled: bool=True, id: str=None, name: str=None, config_type: str=None, default_response_type: str='json', modify: bool=True, token: str=None):
        """AutoMockingIntegration - a model defined in OpenAPI

        :param enabled: The enabled of this AutoMockingIntegration.
        :param id: The id of this AutoMockingIntegration.
        :param name: The name of this AutoMockingIntegration.
        :param config_type: The config_type of this AutoMockingIntegration.
        :param default_response_type: The default_response_type of this AutoMockingIntegration.
        :param modify: The modify of this AutoMockingIntegration.
        :param token: The token of this AutoMockingIntegration.
        """
        self.openapi_types = {
            'enabled': bool,
            'id': str,
            'name': str,
            'config_type': str,
            'default_response_type': str,
            'modify': bool,
            'token': str
        }

        self.attribute_map = {
            'enabled': 'enabled',
            'id': 'id',
            'name': 'name',
            'config_type': 'configType',
            'default_response_type': 'defaultResponseType',
            'modify': 'modify',
            'token': 'token'
        }

        self._enabled = enabled
        self._id = id
        self._name = name
        self._config_type = config_type
        self._default_response_type = default_response_type
        self._modify = modify
        self._token = token

    @classmethod
    def from_dict(cls, dikt: dict) -> 'AutoMockingIntegration':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The AutoMockingIntegration of this AutoMockingIntegration.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def enabled(self):
        """Gets the enabled of this AutoMockingIntegration.

        Whether the integration is enabled or disabled

        :return: The enabled of this AutoMockingIntegration.
        :rtype: bool
        """
        return self._enabled

    @enabled.setter
    def enabled(self, enabled):
        """Sets the enabled of this AutoMockingIntegration.

        Whether the integration is enabled or disabled

        :param enabled: The enabled of this AutoMockingIntegration.
        :type enabled: bool
        """

        self._enabled = enabled

    @property
    def id(self):
        """Gets the id of this AutoMockingIntegration.

        ID of the integration

        :return: The id of this AutoMockingIntegration.
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this AutoMockingIntegration.

        ID of the integration

        :param id: The id of this AutoMockingIntegration.
        :type id: str
        """

        self._id = id

    @property
    def name(self):
        """Gets the name of this AutoMockingIntegration.

        The display name of the integration. Must be unique among all integrations configured for the given API version.

        :return: The name of this AutoMockingIntegration.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this AutoMockingIntegration.

        The display name of the integration. Must be unique among all integrations configured for the given API version.

        :param name: The name of this AutoMockingIntegration.
        :type name: str
        """
        if name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")

        self._name = name

    @property
    def config_type(self):
        """Gets the config_type of this AutoMockingIntegration.

        Integration type

        :return: The config_type of this AutoMockingIntegration.
        :rtype: str
        """
        return self._config_type

    @config_type.setter
    def config_type(self, config_type):
        """Sets the config_type of this AutoMockingIntegration.

        Integration type

        :param config_type: The config_type of this AutoMockingIntegration.
        :type config_type: str
        """
        allowed_values = ["API_AUTO_MOCKING"]  # noqa: E501
        if config_type not in allowed_values:
            raise ValueError(
                "Invalid value for `config_type` ({0}), must be one of {1}"
                .format(config_type, allowed_values)
            )

        self._config_type = config_type

    @property
    def default_response_type(self):
        """Gets the default_response_type of this AutoMockingIntegration.

        Response content type that the mock server will return if no `Accept` header is specified.

        :return: The default_response_type of this AutoMockingIntegration.
        :rtype: str
        """
        return self._default_response_type

    @default_response_type.setter
    def default_response_type(self, default_response_type):
        """Sets the default_response_type of this AutoMockingIntegration.

        Response content type that the mock server will return if no `Accept` header is specified.

        :param default_response_type: The default_response_type of this AutoMockingIntegration.
        :type default_response_type: str
        """
        allowed_values = ["application/json", "application/xml", "application/yaml"]  # noqa: E501
        if default_response_type not in allowed_values:
            raise ValueError(
                "Invalid value for `default_response_type` ({0}), must be one of {1}"
                .format(default_response_type, allowed_values)
            )

        self._default_response_type = default_response_type

    @property
    def modify(self):
        """Gets the modify of this AutoMockingIntegration.

        Whether to update the `host`/`servers` in the API definition to point to the mock server. `modify`=`true` can only be used if the API is _unpublished_.

        :return: The modify of this AutoMockingIntegration.
        :rtype: bool
        """
        return self._modify

    @modify.setter
    def modify(self, modify):
        """Sets the modify of this AutoMockingIntegration.

        Whether to update the `host`/`servers` in the API definition to point to the mock server. `modify`=`true` can only be used if the API is _unpublished_.

        :param modify: The modify of this AutoMockingIntegration.
        :type modify: bool
        """

        self._modify = modify

    @property
    def token(self):
        """Gets the token of this AutoMockingIntegration.

        (For private APIs only.) An arbitrary bearer token that the users will need to send in requests to the mock server.

        :return: The token of this AutoMockingIntegration.
        :rtype: str
        """
        return self._token

    @token.setter
    def token(self, token):
        """Sets the token of this AutoMockingIntegration.

        (For private APIs only.) An arbitrary bearer token that the users will need to send in requests to the mock server.

        :param token: The token of this AutoMockingIntegration.
        :type token: str
        """

        self._token = token
