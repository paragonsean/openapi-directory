# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class ProjectMember(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, name: str=None, roles: List[str]=None, type: str='USER'):
        """ProjectMember - a model defined in OpenAPI

        :param name: The name of this ProjectMember.
        :param roles: The roles of this ProjectMember.
        :param type: The type of this ProjectMember.
        """
        self.openapi_types = {
            'name': str,
            'roles': List[str],
            'type': str
        }

        self.attribute_map = {
            'name': 'name',
            'roles': 'roles',
            'type': 'type'
        }

        self._name = name
        self._roles = roles
        self._type = type

    @classmethod
    def from_dict(cls, dikt: dict) -> 'ProjectMember':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The ProjectMember of this ProjectMember.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def name(self):
        """Gets the name of this ProjectMember.


        :return: The name of this ProjectMember.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this ProjectMember.


        :param name: The name of this ProjectMember.
        :type name: str
        """
        if name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")

        self._name = name

    @property
    def roles(self):
        """Gets the roles of this ProjectMember.


        :return: The roles of this ProjectMember.
        :rtype: List[str]
        """
        return self._roles

    @roles.setter
    def roles(self, roles):
        """Sets the roles of this ProjectMember.


        :param roles: The roles of this ProjectMember.
        :type roles: List[str]
        """
        allowed_values = ["MEMBER", "OWNER"]  # noqa: E501
        if not set(roles).issubset(set(allowed_values)):
            raise ValueError(
                "Invalid values for `roles` [{0}], must be a subset of [{1}]"
                .format(", ".join(map(str, set(roles) - set(allowed_values))),
                        ", ".join(map(str, allowed_values)))
            )

        self._roles = roles

    @property
    def type(self):
        """Gets the type of this ProjectMember.


        :return: The type of this ProjectMember.
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this ProjectMember.


        :param type: The type of this ProjectMember.
        :type type: str
        """
        allowed_values = ["USER", "TEAM"]  # noqa: E501
        if type not in allowed_values:
            raise ValueError(
                "Invalid value for `type` ({0}), must be one of {1}"
                .format(type, allowed_values)
            )

        self._type = type
