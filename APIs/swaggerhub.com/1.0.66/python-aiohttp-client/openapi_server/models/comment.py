# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.user import User
from openapi_server import util


class Comment(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, body: str=None, created: datetime=None, id: str=None, modified: datetime=None, user: User=None):
        """Comment - a model defined in OpenAPI

        :param body: The body of this Comment.
        :param created: The created of this Comment.
        :param id: The id of this Comment.
        :param modified: The modified of this Comment.
        :param user: The user of this Comment.
        """
        self.openapi_types = {
            'body': str,
            'created': datetime,
            'id': str,
            'modified': datetime,
            'user': User
        }

        self.attribute_map = {
            'body': 'body',
            'created': 'created',
            'id': 'id',
            'modified': 'modified',
            'user': 'user'
        }

        self._body = body
        self._created = created
        self._id = id
        self._modified = modified
        self._user = user

    @classmethod
    def from_dict(cls, dikt: dict) -> 'Comment':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Comment of this Comment.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def body(self):
        """Gets the body of this Comment.

        Markdown contents of the comment

        :return: The body of this Comment.
        :rtype: str
        """
        return self._body

    @body.setter
    def body(self, body):
        """Sets the body of this Comment.

        Markdown contents of the comment

        :param body: The body of this Comment.
        :type body: str
        """
        if body is None:
            raise ValueError("Invalid value for `body`, must not be `None`")

        self._body = body

    @property
    def created(self):
        """Gets the created of this Comment.

        The UTC date and time when the comment was added

        :return: The created of this Comment.
        :rtype: datetime
        """
        return self._created

    @created.setter
    def created(self, created):
        """Sets the created of this Comment.

        The UTC date and time when the comment was added

        :param created: The created of this Comment.
        :type created: datetime
        """
        if created is None:
            raise ValueError("Invalid value for `created`, must not be `None`")

        self._created = created

    @property
    def id(self):
        """Gets the id of this Comment.

        The unique ID of the comment

        :return: The id of this Comment.
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this Comment.

        The unique ID of the comment

        :param id: The id of this Comment.
        :type id: str
        """
        if id is None:
            raise ValueError("Invalid value for `id`, must not be `None`")

        self._id = id

    @property
    def modified(self):
        """Gets the modified of this Comment.

        The UTC date and time the when the comment was last edited

        :return: The modified of this Comment.
        :rtype: datetime
        """
        return self._modified

    @modified.setter
    def modified(self, modified):
        """Sets the modified of this Comment.

        The UTC date and time the when the comment was last edited

        :param modified: The modified of this Comment.
        :type modified: datetime
        """

        self._modified = modified

    @property
    def user(self):
        """Gets the user of this Comment.


        :return: The user of this Comment.
        :rtype: User
        """
        return self._user

    @user.setter
    def user(self, user):
        """Sets the user of this Comment.


        :param user: The user of this Comment.
        :type user: User
        """
        if user is None:
            raise ValueError("Invalid value for `user`, must not be `None`")

        self._user = user
