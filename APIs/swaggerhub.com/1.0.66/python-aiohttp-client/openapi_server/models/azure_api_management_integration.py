# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class AzureApiManagementIntegration(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, enabled: bool=True, id: str=None, name: str=None, api_id: str=None, config_type: str=None, service_instance: str=None, token: str=None, url_suffix: str=None):
        """AzureApiManagementIntegration - a model defined in OpenAPI

        :param enabled: The enabled of this AzureApiManagementIntegration.
        :param id: The id of this AzureApiManagementIntegration.
        :param name: The name of this AzureApiManagementIntegration.
        :param api_id: The api_id of this AzureApiManagementIntegration.
        :param config_type: The config_type of this AzureApiManagementIntegration.
        :param service_instance: The service_instance of this AzureApiManagementIntegration.
        :param token: The token of this AzureApiManagementIntegration.
        :param url_suffix: The url_suffix of this AzureApiManagementIntegration.
        """
        self.openapi_types = {
            'enabled': bool,
            'id': str,
            'name': str,
            'api_id': str,
            'config_type': str,
            'service_instance': str,
            'token': str,
            'url_suffix': str
        }

        self.attribute_map = {
            'enabled': 'enabled',
            'id': 'id',
            'name': 'name',
            'api_id': 'apiId',
            'config_type': 'configType',
            'service_instance': 'serviceInstance',
            'token': 'token',
            'url_suffix': 'urlSuffix'
        }

        self._enabled = enabled
        self._id = id
        self._name = name
        self._api_id = api_id
        self._config_type = config_type
        self._service_instance = service_instance
        self._token = token
        self._url_suffix = url_suffix

    @classmethod
    def from_dict(cls, dikt: dict) -> 'AzureApiManagementIntegration':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The AzureApiManagementIntegration of this AzureApiManagementIntegration.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def enabled(self):
        """Gets the enabled of this AzureApiManagementIntegration.

        Whether the integration is enabled or disabled

        :return: The enabled of this AzureApiManagementIntegration.
        :rtype: bool
        """
        return self._enabled

    @enabled.setter
    def enabled(self, enabled):
        """Sets the enabled of this AzureApiManagementIntegration.

        Whether the integration is enabled or disabled

        :param enabled: The enabled of this AzureApiManagementIntegration.
        :type enabled: bool
        """

        self._enabled = enabled

    @property
    def id(self):
        """Gets the id of this AzureApiManagementIntegration.

        ID of the integration

        :return: The id of this AzureApiManagementIntegration.
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this AzureApiManagementIntegration.

        ID of the integration

        :param id: The id of this AzureApiManagementIntegration.
        :type id: str
        """

        self._id = id

    @property
    def name(self):
        """Gets the name of this AzureApiManagementIntegration.

        The display name of the integration. Must be unique among all integrations configured for the given API version.

        :return: The name of this AzureApiManagementIntegration.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this AzureApiManagementIntegration.

        The display name of the integration. Must be unique among all integrations configured for the given API version.

        :param name: The name of this AzureApiManagementIntegration.
        :type name: str
        """
        if name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")

        self._name = name

    @property
    def api_id(self):
        """Gets the api_id of this AzureApiManagementIntegration.

        A unique identifier that allows you to connect your definition to an existing API. If left blank, a unique identifier will be added using an extension, `x-azure-api-id`. This value will be ignored if a value exists in the definition. 

        :return: The api_id of this AzureApiManagementIntegration.
        :rtype: str
        """
        return self._api_id

    @api_id.setter
    def api_id(self, api_id):
        """Sets the api_id of this AzureApiManagementIntegration.

        A unique identifier that allows you to connect your definition to an existing API. If left blank, a unique identifier will be added using an extension, `x-azure-api-id`. This value will be ignored if a value exists in the definition. 

        :param api_id: The api_id of this AzureApiManagementIntegration.
        :type api_id: str
        """

        self._api_id = api_id

    @property
    def config_type(self):
        """Gets the config_type of this AzureApiManagementIntegration.

        Integration type

        :return: The config_type of this AzureApiManagementIntegration.
        :rtype: str
        """
        return self._config_type

    @config_type.setter
    def config_type(self, config_type):
        """Sets the config_type of this AzureApiManagementIntegration.

        Integration type

        :param config_type: The config_type of this AzureApiManagementIntegration.
        :type config_type: str
        """
        allowed_values = ["AZURE_API_MANAGEMENT"]  # noqa: E501
        if config_type not in allowed_values:
            raise ValueError(
                "Invalid value for `config_type` ({0}), must be one of {1}"
                .format(config_type, allowed_values)
            )

        self._config_type = config_type

    @property
    def service_instance(self):
        """Gets the service_instance of this AzureApiManagementIntegration.

        The name of the Azure API Management service instance as it appears in the \"All resources\" list in the Azure portal 

        :return: The service_instance of this AzureApiManagementIntegration.
        :rtype: str
        """
        return self._service_instance

    @service_instance.setter
    def service_instance(self, service_instance):
        """Sets the service_instance of this AzureApiManagementIntegration.

        The name of the Azure API Management service instance as it appears in the \"All resources\" list in the Azure portal 

        :param service_instance: The service_instance of this AzureApiManagementIntegration.
        :type service_instance: str
        """
        if service_instance is None:
            raise ValueError("Invalid value for `service_instance`, must not be `None`")

        self._service_instance = service_instance

    @property
    def token(self):
        """Gets the token of this AzureApiManagementIntegration.

        A personal access token for accessing the Azure API Management service. Documentation for generating tokens is here:  https://docs.microsoft.com/en-us/rest/api/apimanagement/apimanagementrest/azure-api-management-rest-api-authentication Write-only property. Required to create and update the integration. 

        :return: The token of this AzureApiManagementIntegration.
        :rtype: str
        """
        return self._token

    @token.setter
    def token(self, token):
        """Sets the token of this AzureApiManagementIntegration.

        A personal access token for accessing the Azure API Management service. Documentation for generating tokens is here:  https://docs.microsoft.com/en-us/rest/api/apimanagement/apimanagementrest/azure-api-management-rest-api-authentication Write-only property. Required to create and update the integration. 

        :param token: The token of this AzureApiManagementIntegration.
        :type token: str
        """

        self._token = token

    @property
    def url_suffix(self):
        """Gets the url_suffix of this AzureApiManagementIntegration.

        This suffix will be appended to the hostname of your API Management service instance to create a public URL for your API

        :return: The url_suffix of this AzureApiManagementIntegration.
        :rtype: str
        """
        return self._url_suffix

    @url_suffix.setter
    def url_suffix(self, url_suffix):
        """Sets the url_suffix of this AzureApiManagementIntegration.

        This suffix will be appended to the hostname of your API Management service instance to create a public URL for your API

        :param url_suffix: The url_suffix of this AzureApiManagementIntegration.
        :type url_suffix: str
        """

        self._url_suffix = url_suffix
