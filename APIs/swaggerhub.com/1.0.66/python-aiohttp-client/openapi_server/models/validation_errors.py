# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class ValidationErrors(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, description: str=None, line: int=None, severity: str=None):
        """ValidationErrors - a model defined in OpenAPI

        :param description: The description of this ValidationErrors.
        :param line: The line of this ValidationErrors.
        :param severity: The severity of this ValidationErrors.
        """
        self.openapi_types = {
            'description': str,
            'line': int,
            'severity': str
        }

        self.attribute_map = {
            'description': 'description',
            'line': 'line',
            'severity': 'severity'
        }

        self._description = description
        self._line = line
        self._severity = severity

    @classmethod
    def from_dict(cls, dikt: dict) -> 'ValidationErrors':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The ValidationErrors of this ValidationErrors.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def description(self):
        """Gets the description of this ValidationErrors.

        The error message

        :return: The description of this ValidationErrors.
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this ValidationErrors.

        The error message

        :param description: The description of this ValidationErrors.
        :type description: str
        """
        if description is None:
            raise ValueError("Invalid value for `description`, must not be `None`")

        self._description = description

    @property
    def line(self):
        """Gets the line of this ValidationErrors.

        The line number (0-based) where the issue occurs. If, for some reason, the broken rule does not include a line number, defaults to 0.

        :return: The line of this ValidationErrors.
        :rtype: int
        """
        return self._line

    @line.setter
    def line(self, line):
        """Sets the line of this ValidationErrors.

        The line number (0-based) where the issue occurs. If, for some reason, the broken rule does not include a line number, defaults to 0.

        :param line: The line of this ValidationErrors.
        :type line: int
        """
        if line is None:
            raise ValueError("Invalid value for `line`, must not be `None`")
        if line is not None and line < 0:
            raise ValueError("Invalid value for `line`, must be a value greater than or equal to `0`")

        self._line = line

    @property
    def severity(self):
        """Gets the severity of this ValidationErrors.

        The issue type: `CRITICAL` (error) or `WARNING`

        :return: The severity of this ValidationErrors.
        :rtype: str
        """
        return self._severity

    @severity.setter
    def severity(self, severity):
        """Sets the severity of this ValidationErrors.

        The issue type: `CRITICAL` (error) or `WARNING`

        :param severity: The severity of this ValidationErrors.
        :type severity: str
        """
        allowed_values = ["CRITICAL", "WARNING"]  # noqa: E501
        if severity not in allowed_values:
            raise ValueError(
                "Invalid value for `severity` ({0}), must be one of {1}"
                .format(severity, allowed_values)
            )

        self._severity = severity
