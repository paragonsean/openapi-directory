# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class ApigeeEdgeIntegration(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, enabled: bool=True, id: str=None, name: str=None, api_name: str=None, config_type: str=None, email: str=None, host: str='https://api.enterprise.apigee.com/v1', organization: str=None, password: str=None, target_url: str=None):
        """ApigeeEdgeIntegration - a model defined in OpenAPI

        :param enabled: The enabled of this ApigeeEdgeIntegration.
        :param id: The id of this ApigeeEdgeIntegration.
        :param name: The name of this ApigeeEdgeIntegration.
        :param api_name: The api_name of this ApigeeEdgeIntegration.
        :param config_type: The config_type of this ApigeeEdgeIntegration.
        :param email: The email of this ApigeeEdgeIntegration.
        :param host: The host of this ApigeeEdgeIntegration.
        :param organization: The organization of this ApigeeEdgeIntegration.
        :param password: The password of this ApigeeEdgeIntegration.
        :param target_url: The target_url of this ApigeeEdgeIntegration.
        """
        self.openapi_types = {
            'enabled': bool,
            'id': str,
            'name': str,
            'api_name': str,
            'config_type': str,
            'email': str,
            'host': str,
            'organization': str,
            'password': str,
            'target_url': str
        }

        self.attribute_map = {
            'enabled': 'enabled',
            'id': 'id',
            'name': 'name',
            'api_name': 'apiName',
            'config_type': 'configType',
            'email': 'email',
            'host': 'host',
            'organization': 'organization',
            'password': 'password',
            'target_url': 'targetUrl'
        }

        self._enabled = enabled
        self._id = id
        self._name = name
        self._api_name = api_name
        self._config_type = config_type
        self._email = email
        self._host = host
        self._organization = organization
        self._password = password
        self._target_url = target_url

    @classmethod
    def from_dict(cls, dikt: dict) -> 'ApigeeEdgeIntegration':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The ApigeeEdgeIntegration of this ApigeeEdgeIntegration.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def enabled(self):
        """Gets the enabled of this ApigeeEdgeIntegration.

        Whether the integration is enabled or disabled

        :return: The enabled of this ApigeeEdgeIntegration.
        :rtype: bool
        """
        return self._enabled

    @enabled.setter
    def enabled(self, enabled):
        """Sets the enabled of this ApigeeEdgeIntegration.

        Whether the integration is enabled or disabled

        :param enabled: The enabled of this ApigeeEdgeIntegration.
        :type enabled: bool
        """

        self._enabled = enabled

    @property
    def id(self):
        """Gets the id of this ApigeeEdgeIntegration.

        ID of the integration

        :return: The id of this ApigeeEdgeIntegration.
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this ApigeeEdgeIntegration.

        ID of the integration

        :param id: The id of this ApigeeEdgeIntegration.
        :type id: str
        """

        self._id = id

    @property
    def name(self):
        """Gets the name of this ApigeeEdgeIntegration.

        The display name of the integration. Must be unique among all integrations configured for the given API version.

        :return: The name of this ApigeeEdgeIntegration.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this ApigeeEdgeIntegration.

        The display name of the integration. Must be unique among all integrations configured for the given API version.

        :param name: The name of this ApigeeEdgeIntegration.
        :type name: str
        """
        if name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")

        self._name = name

    @property
    def api_name(self):
        """Gets the api_name of this ApigeeEdgeIntegration.

        Name for the API that is going to be saved in your Apigee account

        :return: The api_name of this ApigeeEdgeIntegration.
        :rtype: str
        """
        return self._api_name

    @api_name.setter
    def api_name(self, api_name):
        """Sets the api_name of this ApigeeEdgeIntegration.

        Name for the API that is going to be saved in your Apigee account

        :param api_name: The api_name of this ApigeeEdgeIntegration.
        :type api_name: str
        """
        if api_name is None:
            raise ValueError("Invalid value for `api_name`, must not be `None`")

        self._api_name = api_name

    @property
    def config_type(self):
        """Gets the config_type of this ApigeeEdgeIntegration.

        Integration type

        :return: The config_type of this ApigeeEdgeIntegration.
        :rtype: str
        """
        return self._config_type

    @config_type.setter
    def config_type(self, config_type):
        """Sets the config_type of this ApigeeEdgeIntegration.

        Integration type

        :param config_type: The config_type of this ApigeeEdgeIntegration.
        :type config_type: str
        """
        allowed_values = ["APIGEE_EDGE"]  # noqa: E501
        if config_type not in allowed_values:
            raise ValueError(
                "Invalid value for `config_type` ({0}), must be one of {1}"
                .format(config_type, allowed_values)
            )

        self._config_type = config_type

    @property
    def email(self):
        """Gets the email of this ApigeeEdgeIntegration.

        Email address of your Apigee account

        :return: The email of this ApigeeEdgeIntegration.
        :rtype: str
        """
        return self._email

    @email.setter
    def email(self, email):
        """Sets the email of this ApigeeEdgeIntegration.

        Email address of your Apigee account

        :param email: The email of this ApigeeEdgeIntegration.
        :type email: str
        """
        if email is None:
            raise ValueError("Invalid value for `email`, must not be `None`")

        self._email = email

    @property
    def host(self):
        """Gets the host of this ApigeeEdgeIntegration.

        Apigee Edge Management instance URL. Use the default URL `https://api.enterprise.apigee.com/v1` for the cloud version of Apigee Edge. If using an On-Premise deployment, enter the URL to your Edge instance.

        :return: The host of this ApigeeEdgeIntegration.
        :rtype: str
        """
        return self._host

    @host.setter
    def host(self, host):
        """Sets the host of this ApigeeEdgeIntegration.

        Apigee Edge Management instance URL. Use the default URL `https://api.enterprise.apigee.com/v1` for the cloud version of Apigee Edge. If using an On-Premise deployment, enter the URL to your Edge instance.

        :param host: The host of this ApigeeEdgeIntegration.
        :type host: str
        """

        self._host = host

    @property
    def organization(self):
        """Gets the organization of this ApigeeEdgeIntegration.

        Organization where the API will be saved

        :return: The organization of this ApigeeEdgeIntegration.
        :rtype: str
        """
        return self._organization

    @organization.setter
    def organization(self, organization):
        """Sets the organization of this ApigeeEdgeIntegration.

        Organization where the API will be saved

        :param organization: The organization of this ApigeeEdgeIntegration.
        :type organization: str
        """
        if organization is None:
            raise ValueError("Invalid value for `organization`, must not be `None`")

        self._organization = organization

    @property
    def password(self):
        """Gets the password of this ApigeeEdgeIntegration.

        Password of your Apigee account. Write-only property. Required to create and update the integration.

        :return: The password of this ApigeeEdgeIntegration.
        :rtype: str
        """
        return self._password

    @password.setter
    def password(self, password):
        """Sets the password of this ApigeeEdgeIntegration.

        Password of your Apigee account. Write-only property. Required to create and update the integration.

        :param password: The password of this ApigeeEdgeIntegration.
        :type password: str
        """

        self._password = password

    @property
    def target_url(self):
        """Gets the target_url of this ApigeeEdgeIntegration.

        Target endpoint for proxy

        :return: The target_url of this ApigeeEdgeIntegration.
        :rtype: str
        """
        return self._target_url

    @target_url.setter
    def target_url(self, target_url):
        """Sets the target_url of this ApigeeEdgeIntegration.

        Target endpoint for proxy

        :param target_url: The target_url of this ApigeeEdgeIntegration.
        :type target_url: str
        """
        if target_url is None:
            raise ValueError("Invalid value for `target_url`, must not be `None`")

        self._target_url = target_url
