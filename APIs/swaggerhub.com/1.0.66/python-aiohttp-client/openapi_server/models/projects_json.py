# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.project import Project
from openapi_server import util


class ProjectsJson(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, offset: int=None, projects: List[Project]=None, total_count: int=None):
        """ProjectsJson - a model defined in OpenAPI

        :param offset: The offset of this ProjectsJson.
        :param projects: The projects of this ProjectsJson.
        :param total_count: The total_count of this ProjectsJson.
        """
        self.openapi_types = {
            'offset': int,
            'projects': List[Project],
            'total_count': int
        }

        self.attribute_map = {
            'offset': 'offset',
            'projects': 'projects',
            'total_count': 'totalCount'
        }

        self._offset = offset
        self._projects = projects
        self._total_count = total_count

    @classmethod
    def from_dict(cls, dikt: dict) -> 'ProjectsJson':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The ProjectsJson of this ProjectsJson.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def offset(self):
        """Gets the offset of this ProjectsJson.


        :return: The offset of this ProjectsJson.
        :rtype: int
        """
        return self._offset

    @offset.setter
    def offset(self, offset):
        """Sets the offset of this ProjectsJson.


        :param offset: The offset of this ProjectsJson.
        :type offset: int
        """

        self._offset = offset

    @property
    def projects(self):
        """Gets the projects of this ProjectsJson.


        :return: The projects of this ProjectsJson.
        :rtype: List[Project]
        """
        return self._projects

    @projects.setter
    def projects(self, projects):
        """Sets the projects of this ProjectsJson.


        :param projects: The projects of this ProjectsJson.
        :type projects: List[Project]
        """

        self._projects = projects

    @property
    def total_count(self):
        """Gets the total_count of this ProjectsJson.


        :return: The total_count of this ProjectsJson.
        :rtype: int
        """
        return self._total_count

    @total_count.setter
    def total_count(self, total_count):
        """Sets the total_count of this ProjectsJson.


        :param total_count: The total_count of this ProjectsJson.
        :type total_count: int
        """

        self._total_count = total_count
