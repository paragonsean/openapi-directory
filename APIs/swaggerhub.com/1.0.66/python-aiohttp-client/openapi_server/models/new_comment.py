# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.new_reply import NewReply
from openapi_server import util


class NewComment(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, body: str=None, position: int=None, replies: List[NewReply]=None):
        """NewComment - a model defined in OpenAPI

        :param body: The body of this NewComment.
        :param position: The position of this NewComment.
        :param replies: The replies of this NewComment.
        """
        self.openapi_types = {
            'body': str,
            'position': int,
            'replies': List[NewReply]
        }

        self.attribute_map = {
            'body': 'body',
            'position': 'position',
            'replies': 'replies'
        }

        self._body = body
        self._position = position
        self._replies = replies

    @classmethod
    def from_dict(cls, dikt: dict) -> 'NewComment':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The NewComment of this NewComment.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def body(self):
        """Gets the body of this NewComment.


        :return: The body of this NewComment.
        :rtype: str
        """
        return self._body

    @body.setter
    def body(self, body):
        """Sets the body of this NewComment.


        :param body: The body of this NewComment.
        :type body: str
        """
        if body is None:
            raise ValueError("Invalid value for `body`, must not be `None`")

        self._body = body

    @property
    def position(self):
        """Gets the position of this NewComment.


        :return: The position of this NewComment.
        :rtype: int
        """
        return self._position

    @position.setter
    def position(self, position):
        """Sets the position of this NewComment.


        :param position: The position of this NewComment.
        :type position: int
        """
        if position is None:
            raise ValueError("Invalid value for `position`, must not be `None`")
        if position is not None and position < 0:
            raise ValueError("Invalid value for `position`, must be a value greater than or equal to `0`")

        self._position = position

    @property
    def replies(self):
        """Gets the replies of this NewComment.


        :return: The replies of this NewComment.
        :rtype: List[NewReply]
        """
        return self._replies

    @replies.setter
    def replies(self, replies):
        """Sets the replies of this NewComment.


        :param replies: The replies of this NewComment.
        :type replies: List[NewReply]
        """

        self._replies = replies
