# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class IBMApiConnectIntegration(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, enabled: bool=True, id: str=None, name: str=None, api_id: str=None, api_key: str=None, config_type: str=None, org_display_name: str=None, org_id: str=None):
        """IBMApiConnectIntegration - a model defined in OpenAPI

        :param enabled: The enabled of this IBMApiConnectIntegration.
        :param id: The id of this IBMApiConnectIntegration.
        :param name: The name of this IBMApiConnectIntegration.
        :param api_id: The api_id of this IBMApiConnectIntegration.
        :param api_key: The api_key of this IBMApiConnectIntegration.
        :param config_type: The config_type of this IBMApiConnectIntegration.
        :param org_display_name: The org_display_name of this IBMApiConnectIntegration.
        :param org_id: The org_id of this IBMApiConnectIntegration.
        """
        self.openapi_types = {
            'enabled': bool,
            'id': str,
            'name': str,
            'api_id': str,
            'api_key': str,
            'config_type': str,
            'org_display_name': str,
            'org_id': str
        }

        self.attribute_map = {
            'enabled': 'enabled',
            'id': 'id',
            'name': 'name',
            'api_id': 'apiId',
            'api_key': 'apiKey',
            'config_type': 'configType',
            'org_display_name': 'orgDisplayName',
            'org_id': 'orgId'
        }

        self._enabled = enabled
        self._id = id
        self._name = name
        self._api_id = api_id
        self._api_key = api_key
        self._config_type = config_type
        self._org_display_name = org_display_name
        self._org_id = org_id

    @classmethod
    def from_dict(cls, dikt: dict) -> 'IBMApiConnectIntegration':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The IBMApiConnectIntegration of this IBMApiConnectIntegration.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def enabled(self):
        """Gets the enabled of this IBMApiConnectIntegration.

        Whether the integration is enabled or disabled

        :return: The enabled of this IBMApiConnectIntegration.
        :rtype: bool
        """
        return self._enabled

    @enabled.setter
    def enabled(self, enabled):
        """Sets the enabled of this IBMApiConnectIntegration.

        Whether the integration is enabled or disabled

        :param enabled: The enabled of this IBMApiConnectIntegration.
        :type enabled: bool
        """

        self._enabled = enabled

    @property
    def id(self):
        """Gets the id of this IBMApiConnectIntegration.

        ID of the integration

        :return: The id of this IBMApiConnectIntegration.
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this IBMApiConnectIntegration.

        ID of the integration

        :param id: The id of this IBMApiConnectIntegration.
        :type id: str
        """

        self._id = id

    @property
    def name(self):
        """Gets the name of this IBMApiConnectIntegration.

        The display name of the integration. Must be unique among all integrations configured for the given API version.

        :return: The name of this IBMApiConnectIntegration.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this IBMApiConnectIntegration.

        The display name of the integration. Must be unique among all integrations configured for the given API version.

        :param name: The name of this IBMApiConnectIntegration.
        :type name: str
        """
        if name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")

        self._name = name

    @property
    def api_id(self):
        """Gets the api_id of this IBMApiConnectIntegration.

        The name of the API in your IBM Cloud organization to publish to. If left blank, a new API will be created when the integration is triggered. When specified, any existing API definition will be overwritten.

        :return: The api_id of this IBMApiConnectIntegration.
        :rtype: str
        """
        return self._api_id

    @api_id.setter
    def api_id(self, api_id):
        """Sets the api_id of this IBMApiConnectIntegration.

        The name of the API in your IBM Cloud organization to publish to. If left blank, a new API will be created when the integration is triggered. When specified, any existing API definition will be overwritten.

        :param api_id: The api_id of this IBMApiConnectIntegration.
        :type api_id: str
        """

        self._api_id = api_id

    @property
    def api_key(self):
        """Gets the api_key of this IBMApiConnectIntegration.

        IBM Cloud API Key, obtain a key via https://cloud.ibm.com/iam/apikeys. Write-only property. Required to create and update the integration.

        :return: The api_key of this IBMApiConnectIntegration.
        :rtype: str
        """
        return self._api_key

    @api_key.setter
    def api_key(self, api_key):
        """Sets the api_key of this IBMApiConnectIntegration.

        IBM Cloud API Key, obtain a key via https://cloud.ibm.com/iam/apikeys. Write-only property. Required to create and update the integration.

        :param api_key: The api_key of this IBMApiConnectIntegration.
        :type api_key: str
        """

        self._api_key = api_key

    @property
    def config_type(self):
        """Gets the config_type of this IBMApiConnectIntegration.

        Integration type

        :return: The config_type of this IBMApiConnectIntegration.
        :rtype: str
        """
        return self._config_type

    @config_type.setter
    def config_type(self, config_type):
        """Sets the config_type of this IBMApiConnectIntegration.

        Integration type

        :param config_type: The config_type of this IBMApiConnectIntegration.
        :type config_type: str
        """
        allowed_values = ["IBM_API_CONNECT"]  # noqa: E501
        if config_type not in allowed_values:
            raise ValueError(
                "Invalid value for `config_type` ({0}), must be one of {1}"
                .format(config_type, allowed_values)
            )

        self._config_type = config_type

    @property
    def org_display_name(self):
        """Gets the org_display_name of this IBMApiConnectIntegration.

        The organization display name under your IBM Cloud account

        :return: The org_display_name of this IBMApiConnectIntegration.
        :rtype: str
        """
        return self._org_display_name

    @org_display_name.setter
    def org_display_name(self, org_display_name):
        """Sets the org_display_name of this IBMApiConnectIntegration.

        The organization display name under your IBM Cloud account

        :param org_display_name: The org_display_name of this IBMApiConnectIntegration.
        :type org_display_name: str
        """

        self._org_display_name = org_display_name

    @property
    def org_id(self):
        """Gets the org_id of this IBMApiConnectIntegration.

        The organization under your IBM Cloud account to which you want to deploy your API. Can be specified by ID or name.  The organization ID is an alphanumeric string like `680ee27a0cf28d61b4e9a462`. The organization name uses the format `<cloudFoundryOrgName>-<spaceName>`, where `<cloudFoundryOrgName>` is your Cloud Foundry organization name changed to lowercase and with non-alphanumeric characters removed.  The easiest way to find the value for `orgId` is to start configuring the IBM integration in SwaggerHub UI. After you authenticate using an IBM API key, you will see a list of organizations in the format \"CFOrgName (SpaceName) (OrgId)\". The value in the last parentheses is the `orgId`.  Alternatively, if you have the [API Connect Developer Toolkit](https://www.npmjs.com/package/apiconnect) installed, you can use the `apic orgs --server apimanager.us-south.apiconnect.cloud.ibm.com` command to get the organization names that can be used as `orgId`.

        :return: The org_id of this IBMApiConnectIntegration.
        :rtype: str
        """
        return self._org_id

    @org_id.setter
    def org_id(self, org_id):
        """Sets the org_id of this IBMApiConnectIntegration.

        The organization under your IBM Cloud account to which you want to deploy your API. Can be specified by ID or name.  The organization ID is an alphanumeric string like `680ee27a0cf28d61b4e9a462`. The organization name uses the format `<cloudFoundryOrgName>-<spaceName>`, where `<cloudFoundryOrgName>` is your Cloud Foundry organization name changed to lowercase and with non-alphanumeric characters removed.  The easiest way to find the value for `orgId` is to start configuring the IBM integration in SwaggerHub UI. After you authenticate using an IBM API key, you will see a list of organizations in the format \"CFOrgName (SpaceName) (OrgId)\". The value in the last parentheses is the `orgId`.  Alternatively, if you have the [API Connect Developer Toolkit](https://www.npmjs.com/package/apiconnect) installed, you can use the `apic orgs --server apimanager.us-south.apiconnect.cloud.ibm.com` command to get the organization names that can be used as `orgId`.

        :param org_id: The org_id of this IBMApiConnectIntegration.
        :type org_id: str
        """
        if org_id is None:
            raise ValueError("Invalid value for `org_id`, must not be `None`")

        self._org_id = org_id
