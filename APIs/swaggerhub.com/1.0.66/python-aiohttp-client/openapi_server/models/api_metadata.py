# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.api_metadata_link import ApiMetadataLink
from openapi_server import util


class ApiMetadata(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, categories: list[str]=None, default_version: str=None, links: list[ApiMetadataLink]=None, tags: list[str]=None):
        """ApiMetadata - a model defined in OpenAPI

        :param categories: The categories of this ApiMetadata.
        :param default_version: The default_version of this ApiMetadata.
        :param links: The links of this ApiMetadata.
        :param tags: The tags of this ApiMetadata.
        """
        self.openapi_types = {
            'categories': list[str],
            'default_version': str,
            'links': list[ApiMetadataLink],
            'tags': list[str]
        }

        self.attribute_map = {
            'categories': 'categories',
            'default_version': 'defaultVersion',
            'links': 'links',
            'tags': 'tags'
        }

        self._categories = categories
        self._default_version = default_version
        self._links = links
        self._tags = tags

    @classmethod
    def from_dict(cls, dikt: dict) -> 'ApiMetadata':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The ApiMetadata of this ApiMetadata.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def categories(self):
        """Gets the categories of this ApiMetadata.


        :return: The categories of this ApiMetadata.
        :rtype: list[str]
        """
        return self._categories

    @categories.setter
    def categories(self, categories):
        """Sets the categories of this ApiMetadata.


        :param categories: The categories of this ApiMetadata.
        :type categories: list[str]
        """
        if categories is None:
            raise ValueError("Invalid value for `categories`, must not be `None`")

        self._categories = categories

    @property
    def default_version(self):
        """Gets the default_version of this ApiMetadata.


        :return: The default_version of this ApiMetadata.
        :rtype: str
        """
        return self._default_version

    @default_version.setter
    def default_version(self, default_version):
        """Sets the default_version of this ApiMetadata.


        :param default_version: The default_version of this ApiMetadata.
        :type default_version: str
        """

        self._default_version = default_version

    @property
    def links(self):
        """Gets the links of this ApiMetadata.


        :return: The links of this ApiMetadata.
        :rtype: list[ApiMetadataLink]
        """
        return self._links

    @links.setter
    def links(self, links):
        """Sets the links of this ApiMetadata.


        :param links: The links of this ApiMetadata.
        :type links: list[ApiMetadataLink]
        """
        if links is None:
            raise ValueError("Invalid value for `links`, must not be `None`")

        self._links = links

    @property
    def tags(self):
        """Gets the tags of this ApiMetadata.


        :return: The tags of this ApiMetadata.
        :rtype: list[str]
        """
        return self._tags

    @tags.setter
    def tags(self, tags):
        """Sets the tags of this ApiMetadata.


        :param tags: The tags of this ApiMetadata.
        :type tags: list[str]
        """
        if tags is None:
            raise ValueError("Invalid value for `tags`, must not be `None`")

        self._tags = tags
