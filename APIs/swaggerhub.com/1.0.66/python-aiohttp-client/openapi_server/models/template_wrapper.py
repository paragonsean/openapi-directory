# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class TemplateWrapper(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, built_in: bool=None, default_version: str=None, id: str=None, specification: str=None, title: str=None):
        """TemplateWrapper - a model defined in OpenAPI

        :param built_in: The built_in of this TemplateWrapper.
        :param default_version: The default_version of this TemplateWrapper.
        :param id: The id of this TemplateWrapper.
        :param specification: The specification of this TemplateWrapper.
        :param title: The title of this TemplateWrapper.
        """
        self.openapi_types = {
            'built_in': bool,
            'default_version': str,
            'id': str,
            'specification': str,
            'title': str
        }

        self.attribute_map = {
            'built_in': 'builtIn',
            'default_version': 'defaultVersion',
            'id': 'id',
            'specification': 'specification',
            'title': 'title'
        }

        self._built_in = built_in
        self._default_version = default_version
        self._id = id
        self._specification = specification
        self._title = title

    @classmethod
    def from_dict(cls, dikt: dict) -> 'TemplateWrapper':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The TemplateWrapper of this TemplateWrapper.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def built_in(self):
        """Gets the built_in of this TemplateWrapper.


        :return: The built_in of this TemplateWrapper.
        :rtype: bool
        """
        return self._built_in

    @built_in.setter
    def built_in(self, built_in):
        """Sets the built_in of this TemplateWrapper.


        :param built_in: The built_in of this TemplateWrapper.
        :type built_in: bool
        """

        self._built_in = built_in

    @property
    def default_version(self):
        """Gets the default_version of this TemplateWrapper.


        :return: The default_version of this TemplateWrapper.
        :rtype: str
        """
        return self._default_version

    @default_version.setter
    def default_version(self, default_version):
        """Sets the default_version of this TemplateWrapper.


        :param default_version: The default_version of this TemplateWrapper.
        :type default_version: str
        """

        self._default_version = default_version

    @property
    def id(self):
        """Gets the id of this TemplateWrapper.


        :return: The id of this TemplateWrapper.
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this TemplateWrapper.


        :param id: The id of this TemplateWrapper.
        :type id: str
        """

        self._id = id

    @property
    def specification(self):
        """Gets the specification of this TemplateWrapper.


        :return: The specification of this TemplateWrapper.
        :rtype: str
        """
        return self._specification

    @specification.setter
    def specification(self, specification):
        """Sets the specification of this TemplateWrapper.


        :param specification: The specification of this TemplateWrapper.
        :type specification: str
        """

        self._specification = specification

    @property
    def title(self):
        """Gets the title of this TemplateWrapper.


        :return: The title of this TemplateWrapper.
        :rtype: str
        """
        return self._title

    @title.setter
    def title(self, title):
        """Sets the title of this TemplateWrapper.


        :param title: The title of this TemplateWrapper.
        :type title: str
        """

        self._title = title
