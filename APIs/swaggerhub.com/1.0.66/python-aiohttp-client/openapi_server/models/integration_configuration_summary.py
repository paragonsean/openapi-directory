# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class IntegrationConfigurationSummary(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, enabled: bool=True, id: str=None, name: str=None, config_type: str=None):
        """IntegrationConfigurationSummary - a model defined in OpenAPI

        :param enabled: The enabled of this IntegrationConfigurationSummary.
        :param id: The id of this IntegrationConfigurationSummary.
        :param name: The name of this IntegrationConfigurationSummary.
        :param config_type: The config_type of this IntegrationConfigurationSummary.
        """
        self.openapi_types = {
            'enabled': bool,
            'id': str,
            'name': str,
            'config_type': str
        }

        self.attribute_map = {
            'enabled': 'enabled',
            'id': 'id',
            'name': 'name',
            'config_type': 'configType'
        }

        self._enabled = enabled
        self._id = id
        self._name = name
        self._config_type = config_type

    @classmethod
    def from_dict(cls, dikt: dict) -> 'IntegrationConfigurationSummary':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The IntegrationConfigurationSummary of this IntegrationConfigurationSummary.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def enabled(self):
        """Gets the enabled of this IntegrationConfigurationSummary.

        Whether the integration is enabled or disabled

        :return: The enabled of this IntegrationConfigurationSummary.
        :rtype: bool
        """
        return self._enabled

    @enabled.setter
    def enabled(self, enabled):
        """Sets the enabled of this IntegrationConfigurationSummary.

        Whether the integration is enabled or disabled

        :param enabled: The enabled of this IntegrationConfigurationSummary.
        :type enabled: bool
        """

        self._enabled = enabled

    @property
    def id(self):
        """Gets the id of this IntegrationConfigurationSummary.

        ID of the integration

        :return: The id of this IntegrationConfigurationSummary.
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this IntegrationConfigurationSummary.

        ID of the integration

        :param id: The id of this IntegrationConfigurationSummary.
        :type id: str
        """

        self._id = id

    @property
    def name(self):
        """Gets the name of this IntegrationConfigurationSummary.

        The display name of the integration. Must be unique among all integrations configured for the given API version.

        :return: The name of this IntegrationConfigurationSummary.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this IntegrationConfigurationSummary.

        The display name of the integration. Must be unique among all integrations configured for the given API version.

        :param name: The name of this IntegrationConfigurationSummary.
        :type name: str
        """
        if name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")

        self._name = name

    @property
    def config_type(self):
        """Gets the config_type of this IntegrationConfigurationSummary.

        Integration type

        :return: The config_type of this IntegrationConfigurationSummary.
        :rtype: str
        """
        return self._config_type

    @config_type.setter
    def config_type(self, config_type):
        """Sets the config_type of this IntegrationConfigurationSummary.

        Integration type

        :param config_type: The config_type of this IntegrationConfigurationSummary.
        :type config_type: str
        """
        allowed_values = ["AMAZON_API_GATEWAY", "AMAZON_API_GATEWAY_LAMBDA", "API_AUTO_MOCKING", "APIGEE_EDGE", "AZURE_DEVOPS_SERVICES", "BITBUCKET_CLOUD", "BITBUCKET_SERVER", "GITHUB", "GITHUB_ENTERPRISE", "GITLAB", "WEBHOOK"]  # noqa: E501
        if config_type not in allowed_values:
            raise ValueError(
                "Invalid value for `config_type` ({0}), must be one of {1}"
                .format(config_type, allowed_values)
            )

        self._config_type = config_type
