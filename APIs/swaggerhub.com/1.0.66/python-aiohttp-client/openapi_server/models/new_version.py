# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class NewVersion(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, private: bool=None, version: str=None):
        """NewVersion - a model defined in OpenAPI

        :param private: The private of this NewVersion.
        :param version: The version of this NewVersion.
        """
        self.openapi_types = {
            'private': bool,
            'version': str
        }

        self.attribute_map = {
            'private': 'private',
            'version': 'version'
        }

        self._private = private
        self._version = version

    @classmethod
    def from_dict(cls, dikt: dict) -> 'NewVersion':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The NewVersion of this NewVersion.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def private(self):
        """Gets the private of this NewVersion.

        Whether the new version should be public (`false`) or private (`true`)

        :return: The private of this NewVersion.
        :rtype: bool
        """
        return self._private

    @private.setter
    def private(self, private):
        """Sets the private of this NewVersion.

        Whether the new version should be public (`false`) or private (`true`)

        :param private: The private of this NewVersion.
        :type private: bool
        """

        self._private = private

    @property
    def version(self):
        """Gets the version of this NewVersion.

        The version identifier for the new version

        :return: The version of this NewVersion.
        :rtype: str
        """
        return self._version

    @version.setter
    def version(self, version):
        """Sets the version of this NewVersion.

        The version identifier for the new version

        :param version: The version of this NewVersion.
        :type version: str
        """
        if version is None:
            raise ValueError("Invalid value for `version`, must not be `None`")
        if version is not None and len(version) < 1:
            raise ValueError("Invalid value for `version`, length must be greater than or equal to `1`")

        self._version = version
