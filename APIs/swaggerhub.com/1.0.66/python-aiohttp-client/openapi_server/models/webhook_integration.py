# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class WebhookIntegration(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, enabled: bool=True, id: str=None, name: str=None, additional_headers: List[str]=None, config_type: str=None, content_type: str=None, life_cycle_events: List[str]=None, url: str=None):
        """WebhookIntegration - a model defined in OpenAPI

        :param enabled: The enabled of this WebhookIntegration.
        :param id: The id of this WebhookIntegration.
        :param name: The name of this WebhookIntegration.
        :param additional_headers: The additional_headers of this WebhookIntegration.
        :param config_type: The config_type of this WebhookIntegration.
        :param content_type: The content_type of this WebhookIntegration.
        :param life_cycle_events: The life_cycle_events of this WebhookIntegration.
        :param url: The url of this WebhookIntegration.
        """
        self.openapi_types = {
            'enabled': bool,
            'id': str,
            'name': str,
            'additional_headers': List[str],
            'config_type': str,
            'content_type': str,
            'life_cycle_events': List[str],
            'url': str
        }

        self.attribute_map = {
            'enabled': 'enabled',
            'id': 'id',
            'name': 'name',
            'additional_headers': 'additionalHeaders',
            'config_type': 'configType',
            'content_type': 'contentType',
            'life_cycle_events': 'lifeCycleEvents',
            'url': 'url'
        }

        self._enabled = enabled
        self._id = id
        self._name = name
        self._additional_headers = additional_headers
        self._config_type = config_type
        self._content_type = content_type
        self._life_cycle_events = life_cycle_events
        self._url = url

    @classmethod
    def from_dict(cls, dikt: dict) -> 'WebhookIntegration':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The WebhookIntegration of this WebhookIntegration.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def enabled(self):
        """Gets the enabled of this WebhookIntegration.

        Whether the integration is enabled or disabled

        :return: The enabled of this WebhookIntegration.
        :rtype: bool
        """
        return self._enabled

    @enabled.setter
    def enabled(self, enabled):
        """Sets the enabled of this WebhookIntegration.

        Whether the integration is enabled or disabled

        :param enabled: The enabled of this WebhookIntegration.
        :type enabled: bool
        """

        self._enabled = enabled

    @property
    def id(self):
        """Gets the id of this WebhookIntegration.

        ID of the integration

        :return: The id of this WebhookIntegration.
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this WebhookIntegration.

        ID of the integration

        :param id: The id of this WebhookIntegration.
        :type id: str
        """

        self._id = id

    @property
    def name(self):
        """Gets the name of this WebhookIntegration.

        The display name of the integration. Must be unique among all integrations configured for the given API version.

        :return: The name of this WebhookIntegration.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this WebhookIntegration.

        The display name of the integration. Must be unique among all integrations configured for the given API version.

        :param name: The name of this WebhookIntegration.
        :type name: str
        """
        if name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")

        self._name = name

    @property
    def additional_headers(self):
        """Gets the additional_headers of this WebhookIntegration.

        Custom HTTP headers to be sent with the webhook. Use the \"name: value\" format for each header.

        :return: The additional_headers of this WebhookIntegration.
        :rtype: List[str]
        """
        return self._additional_headers

    @additional_headers.setter
    def additional_headers(self, additional_headers):
        """Sets the additional_headers of this WebhookIntegration.

        Custom HTTP headers to be sent with the webhook. Use the \"name: value\" format for each header.

        :param additional_headers: The additional_headers of this WebhookIntegration.
        :type additional_headers: List[str]
        """

        self._additional_headers = additional_headers

    @property
    def config_type(self):
        """Gets the config_type of this WebhookIntegration.

        Integration type

        :return: The config_type of this WebhookIntegration.
        :rtype: str
        """
        return self._config_type

    @config_type.setter
    def config_type(self, config_type):
        """Sets the config_type of this WebhookIntegration.

        Integration type

        :param config_type: The config_type of this WebhookIntegration.
        :type config_type: str
        """
        allowed_values = ["WEBHOOK"]  # noqa: E501
        if config_type not in allowed_values:
            raise ValueError(
                "Invalid value for `config_type` ({0}), must be one of {1}"
                .format(config_type, allowed_values)
            )

        self._config_type = config_type

    @property
    def content_type(self):
        """Gets the content_type of this WebhookIntegration.

        Webhook content type

        :return: The content_type of this WebhookIntegration.
        :rtype: str
        """
        return self._content_type

    @content_type.setter
    def content_type(self, content_type):
        """Sets the content_type of this WebhookIntegration.

        Webhook content type

        :param content_type: The content_type of this WebhookIntegration.
        :type content_type: str
        """
        allowed_values = ["application/json", "application/x-www-form-urlencoded"]  # noqa: E501
        if content_type not in allowed_values:
            raise ValueError(
                "Invalid value for `content_type` ({0}), must be one of {1}"
                .format(content_type, allowed_values)
            )

        self._content_type = content_type

    @property
    def life_cycle_events(self):
        """Gets the life_cycle_events of this WebhookIntegration.

        Events that will trigger the webhook

        :return: The life_cycle_events of this WebhookIntegration.
        :rtype: List[str]
        """
        return self._life_cycle_events

    @life_cycle_events.setter
    def life_cycle_events(self, life_cycle_events):
        """Sets the life_cycle_events of this WebhookIntegration.

        Events that will trigger the webhook

        :param life_cycle_events: The life_cycle_events of this WebhookIntegration.
        :type life_cycle_events: List[str]
        """
        allowed_values = ["API_SAVED", "API_PUBLISHED"]  # noqa: E501
        if not set(life_cycle_events).issubset(set(allowed_values)):
            raise ValueError(
                "Invalid values for `life_cycle_events` [{0}], must be a subset of [{1}]"
                .format(", ".join(map(str, set(life_cycle_events) - set(allowed_values))),
                        ", ".join(map(str, allowed_values)))
            )

        self._life_cycle_events = life_cycle_events

    @property
    def url(self):
        """Gets the url of this WebhookIntegration.

        The URL to send the webhook to

        :return: The url of this WebhookIntegration.
        :rtype: str
        """
        return self._url

    @url.setter
    def url(self, url):
        """Sets the url of this WebhookIntegration.

        The URL to send the webhook to

        :param url: The url of this WebhookIntegration.
        :type url: str
        """
        if url is None:
            raise ValueError("Invalid value for `url`, must not be `None`")

        self._url = url
