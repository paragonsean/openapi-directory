# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class SCMIntegrationConfiguration(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, enabled: bool=True, id: str=None, name: str=None, branch: str=None, ignored_paths: List[str]=None, managed_paths: List[str]=None, output_file: str=None, output_folder: str=None, provided_paths: List[str]=None, repository: str=None, sync_method: str=None, target: str=None):
        """SCMIntegrationConfiguration - a model defined in OpenAPI

        :param enabled: The enabled of this SCMIntegrationConfiguration.
        :param id: The id of this SCMIntegrationConfiguration.
        :param name: The name of this SCMIntegrationConfiguration.
        :param branch: The branch of this SCMIntegrationConfiguration.
        :param ignored_paths: The ignored_paths of this SCMIntegrationConfiguration.
        :param managed_paths: The managed_paths of this SCMIntegrationConfiguration.
        :param output_file: The output_file of this SCMIntegrationConfiguration.
        :param output_folder: The output_folder of this SCMIntegrationConfiguration.
        :param provided_paths: The provided_paths of this SCMIntegrationConfiguration.
        :param repository: The repository of this SCMIntegrationConfiguration.
        :param sync_method: The sync_method of this SCMIntegrationConfiguration.
        :param target: The target of this SCMIntegrationConfiguration.
        """
        self.openapi_types = {
            'enabled': bool,
            'id': str,
            'name': str,
            'branch': str,
            'ignored_paths': List[str],
            'managed_paths': List[str],
            'output_file': str,
            'output_folder': str,
            'provided_paths': List[str],
            'repository': str,
            'sync_method': str,
            'target': str
        }

        self.attribute_map = {
            'enabled': 'enabled',
            'id': 'id',
            'name': 'name',
            'branch': 'branch',
            'ignored_paths': 'ignoredPaths',
            'managed_paths': 'managedPaths',
            'output_file': 'outputFile',
            'output_folder': 'outputFolder',
            'provided_paths': 'providedPaths',
            'repository': 'repository',
            'sync_method': 'syncMethod',
            'target': 'target'
        }

        self._enabled = enabled
        self._id = id
        self._name = name
        self._branch = branch
        self._ignored_paths = ignored_paths
        self._managed_paths = managed_paths
        self._output_file = output_file
        self._output_folder = output_folder
        self._provided_paths = provided_paths
        self._repository = repository
        self._sync_method = sync_method
        self._target = target

    @classmethod
    def from_dict(cls, dikt: dict) -> 'SCMIntegrationConfiguration':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The SCMIntegrationConfiguration of this SCMIntegrationConfiguration.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def enabled(self):
        """Gets the enabled of this SCMIntegrationConfiguration.

        Whether the integration is enabled or disabled

        :return: The enabled of this SCMIntegrationConfiguration.
        :rtype: bool
        """
        return self._enabled

    @enabled.setter
    def enabled(self, enabled):
        """Sets the enabled of this SCMIntegrationConfiguration.

        Whether the integration is enabled or disabled

        :param enabled: The enabled of this SCMIntegrationConfiguration.
        :type enabled: bool
        """

        self._enabled = enabled

    @property
    def id(self):
        """Gets the id of this SCMIntegrationConfiguration.

        ID of the integration

        :return: The id of this SCMIntegrationConfiguration.
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this SCMIntegrationConfiguration.

        ID of the integration

        :param id: The id of this SCMIntegrationConfiguration.
        :type id: str
        """

        self._id = id

    @property
    def name(self):
        """Gets the name of this SCMIntegrationConfiguration.

        The display name of the integration. Must be unique among all integrations configured for the given API version.

        :return: The name of this SCMIntegrationConfiguration.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this SCMIntegrationConfiguration.

        The display name of the integration. Must be unique among all integrations configured for the given API version.

        :param name: The name of this SCMIntegrationConfiguration.
        :type name: str
        """
        if name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")

        self._name = name

    @property
    def branch(self):
        """Gets the branch of this SCMIntegrationConfiguration.

        The branch to synchronize to. If it does not exist in the repository, it will be created based on the default branch. Branch name must not contain whitespace characters. 

        :return: The branch of this SCMIntegrationConfiguration.
        :rtype: str
        """
        return self._branch

    @branch.setter
    def branch(self, branch):
        """Sets the branch of this SCMIntegrationConfiguration.

        The branch to synchronize to. If it does not exist in the repository, it will be created based on the default branch. Branch name must not contain whitespace characters. 

        :param branch: The branch of this SCMIntegrationConfiguration.
        :type branch: str
        """
        if branch is None:
            raise ValueError("Invalid value for `branch`, must not be `None`")

        self._branch = branch

    @property
    def ignored_paths(self):
        """Gets the ignored_paths of this SCMIntegrationConfiguration.

        Ignored Paths: These files and folders (if exist) will remain as is and will not be changed in any way. Paths are relative to the `outputFolder`. Use forward slashes `/` as folder separators, but do not add `/` at the beginning of the paths. 

        :return: The ignored_paths of this SCMIntegrationConfiguration.
        :rtype: List[str]
        """
        return self._ignored_paths

    @ignored_paths.setter
    def ignored_paths(self, ignored_paths):
        """Sets the ignored_paths of this SCMIntegrationConfiguration.

        Ignored Paths: These files and folders (if exist) will remain as is and will not be changed in any way. Paths are relative to the `outputFolder`. Use forward slashes `/` as folder separators, but do not add `/` at the beginning of the paths. 

        :param ignored_paths: The ignored_paths of this SCMIntegrationConfiguration.
        :type ignored_paths: List[str]
        """

        self._ignored_paths = ignored_paths

    @property
    def managed_paths(self):
        """Gets the managed_paths of this SCMIntegrationConfiguration.

        Fully Managed Paths: These files and folders will be completely managed by the integration. New files will be added, the existing files will be overwritten, and the files that are no longer used will be deleted.  Paths are relative to the `outputFolder`. Use forward slashes `/` as folder separators, but do not add `/` at the beginning of the paths. `*` means all files in the `outputFolder`. 

        :return: The managed_paths of this SCMIntegrationConfiguration.
        :rtype: List[str]
        """
        return self._managed_paths

    @managed_paths.setter
    def managed_paths(self, managed_paths):
        """Sets the managed_paths of this SCMIntegrationConfiguration.

        Fully Managed Paths: These files and folders will be completely managed by the integration. New files will be added, the existing files will be overwritten, and the files that are no longer used will be deleted.  Paths are relative to the `outputFolder`. Use forward slashes `/` as folder separators, but do not add `/` at the beginning of the paths. `*` means all files in the `outputFolder`. 

        :param managed_paths: The managed_paths of this SCMIntegrationConfiguration.
        :type managed_paths: List[str]
        """

        self._managed_paths = managed_paths

    @property
    def output_file(self):
        """Gets the output_file of this SCMIntegrationConfiguration.

        Required if `target` is \"YAML (Resolved)\", \"YAML (Unresolved)\", \"JSON (Resolved)\", or \"JSON (Unresolved)\". Specifies the file name for the generated definition.

        :return: The output_file of this SCMIntegrationConfiguration.
        :rtype: str
        """
        return self._output_file

    @output_file.setter
    def output_file(self, output_file):
        """Sets the output_file of this SCMIntegrationConfiguration.

        Required if `target` is \"YAML (Resolved)\", \"YAML (Unresolved)\", \"JSON (Resolved)\", or \"JSON (Unresolved)\". Specifies the file name for the generated definition.

        :param output_file: The output_file of this SCMIntegrationConfiguration.
        :type output_file: str
        """

        self._output_file = output_file

    @property
    def output_folder(self):
        """Gets the output_folder of this SCMIntegrationConfiguration.

        The output folder for the generated code or definition, relative to the repository root. If this folder does not exist, it will be created. If the output folder is not specified, SwaggerHub will create files and folders in the repository root. Use forward slashes `/` as path separators, but do not add `/` at the beginning. 

        :return: The output_folder of this SCMIntegrationConfiguration.
        :rtype: str
        """
        return self._output_folder

    @output_folder.setter
    def output_folder(self, output_folder):
        """Sets the output_folder of this SCMIntegrationConfiguration.

        The output folder for the generated code or definition, relative to the repository root. If this folder does not exist, it will be created. If the output folder is not specified, SwaggerHub will create files and folders in the repository root. Use forward slashes `/` as path separators, but do not add `/` at the beginning. 

        :param output_folder: The output_folder of this SCMIntegrationConfiguration.
        :type output_folder: str
        """
        if output_folder is None:
            raise ValueError("Invalid value for `output_folder`, must not be `None`")

        self._output_folder = output_folder

    @property
    def provided_paths(self):
        """Gets the provided_paths of this SCMIntegrationConfiguration.

        Partially Managed Paths: These files and folders will be created only if they do not exist. Existing files will not be modified. Paths are relative to the `outputFolder`. Use forward slashes `/` as folder separators, but do not add `/` at the beginning of the paths. `*` means all files in the `outputFolder`. 

        :return: The provided_paths of this SCMIntegrationConfiguration.
        :rtype: List[str]
        """
        return self._provided_paths

    @provided_paths.setter
    def provided_paths(self, provided_paths):
        """Sets the provided_paths of this SCMIntegrationConfiguration.

        Partially Managed Paths: These files and folders will be created only if they do not exist. Existing files will not be modified. Paths are relative to the `outputFolder`. Use forward slashes `/` as folder separators, but do not add `/` at the beginning of the paths. `*` means all files in the `outputFolder`. 

        :param provided_paths: The provided_paths of this SCMIntegrationConfiguration.
        :type provided_paths: List[str]
        """

        self._provided_paths = provided_paths

    @property
    def repository(self):
        """Gets the repository of this SCMIntegrationConfiguration.

        The repository to synchronize with

        :return: The repository of this SCMIntegrationConfiguration.
        :rtype: str
        """
        return self._repository

    @repository.setter
    def repository(self, repository):
        """Sets the repository of this SCMIntegrationConfiguration.

        The repository to synchronize with

        :param repository: The repository of this SCMIntegrationConfiguration.
        :type repository: str
        """
        if repository is None:
            raise ValueError("Invalid value for `repository`, must not be `None`")

        self._repository = repository

    @property
    def sync_method(self):
        """Gets the sync_method of this SCMIntegrationConfiguration.

        \"Basic Sync\" or \"Advanced Sync\". Basic Sync will manage all files and folders in the branch. Advanced Sync allows you to define which files and folders will be managed by SwaggerHub. Note: If \"Advanced Sync\" is used, you must specify either `providedPaths` or `managedPaths`. 

        :return: The sync_method of this SCMIntegrationConfiguration.
        :rtype: str
        """
        return self._sync_method

    @sync_method.setter
    def sync_method(self, sync_method):
        """Sets the sync_method of this SCMIntegrationConfiguration.

        \"Basic Sync\" or \"Advanced Sync\". Basic Sync will manage all files and folders in the branch. Advanced Sync allows you to define which files and folders will be managed by SwaggerHub. Note: If \"Advanced Sync\" is used, you must specify either `providedPaths` or `managedPaths`. 

        :param sync_method: The sync_method of this SCMIntegrationConfiguration.
        :type sync_method: str
        """
        allowed_values = ["Basic Sync", "Advanced Sync"]  # noqa: E501
        if sync_method not in allowed_values:
            raise ValueError(
                "Invalid value for `sync_method` ({0}), must be one of {1}"
                .format(sync_method, allowed_values)
            )

        self._sync_method = sync_method

    @property
    def target(self):
        """Gets the target of this SCMIntegrationConfiguration.

        The type of code to generate and push to the repository. For the possible values, start creating any source control integration manually and check the \"Generated API Code\" values. Note that the available codegens for OAS2 and OAS3 vary. 

        :return: The target of this SCMIntegrationConfiguration.
        :rtype: str
        """
        return self._target

    @target.setter
    def target(self, target):
        """Sets the target of this SCMIntegrationConfiguration.

        The type of code to generate and push to the repository. For the possible values, start creating any source control integration manually and check the \"Generated API Code\" values. Note that the available codegens for OAS2 and OAS3 vary. 

        :param target: The target of this SCMIntegrationConfiguration.
        :type target: str
        """
        if target is None:
            raise ValueError("Invalid value for `target`, must not be `None`")

        self._target = target
