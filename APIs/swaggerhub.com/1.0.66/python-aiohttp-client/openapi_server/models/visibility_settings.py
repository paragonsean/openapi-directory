# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class VisibilitySettings(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, private: bool=None):
        """VisibilitySettings - a model defined in OpenAPI

        :param private: The private of this VisibilitySettings.
        """
        self.openapi_types = {
            'private': bool
        }

        self.attribute_map = {
            'private': 'private'
        }

        self._private = private

    @classmethod
    def from_dict(cls, dikt: dict) -> 'VisibilitySettings':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The VisibilitySettings of this VisibilitySettings.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def private(self):
        """Gets the private of this VisibilitySettings.

        Whether the definition version is private (`true`) or public (`false`)

        :return: The private of this VisibilitySettings.
        :rtype: bool
        """
        return self._private

    @private.setter
    def private(self, private):
        """Sets the private of this VisibilitySettings.

        Whether the definition version is private (`true`) or public (`false`)

        :param private: The private of this VisibilitySettings.
        :type private: bool
        """
        if private is None:
            raise ValueError("Invalid value for `private`, must not be `None`")

        self._private = private
