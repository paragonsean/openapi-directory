# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class AmazonIntegration(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, enabled: bool=True, id: str=None, name: str=None, access_key: str=None, api_id: str=None, base_path_mode: str='ignore', deployment_mode: str='on save', publish_mode: str='merge', region: str=None, secret_key: str=None, update_definition: bool=False):
        """AmazonIntegration - a model defined in OpenAPI

        :param enabled: The enabled of this AmazonIntegration.
        :param id: The id of this AmazonIntegration.
        :param name: The name of this AmazonIntegration.
        :param access_key: The access_key of this AmazonIntegration.
        :param api_id: The api_id of this AmazonIntegration.
        :param base_path_mode: The base_path_mode of this AmazonIntegration.
        :param deployment_mode: The deployment_mode of this AmazonIntegration.
        :param publish_mode: The publish_mode of this AmazonIntegration.
        :param region: The region of this AmazonIntegration.
        :param secret_key: The secret_key of this AmazonIntegration.
        :param update_definition: The update_definition of this AmazonIntegration.
        """
        self.openapi_types = {
            'enabled': bool,
            'id': str,
            'name': str,
            'access_key': str,
            'api_id': str,
            'base_path_mode': str,
            'deployment_mode': str,
            'publish_mode': str,
            'region': str,
            'secret_key': str,
            'update_definition': bool
        }

        self.attribute_map = {
            'enabled': 'enabled',
            'id': 'id',
            'name': 'name',
            'access_key': 'accessKey',
            'api_id': 'apiId',
            'base_path_mode': 'basePathMode',
            'deployment_mode': 'deploymentMode',
            'publish_mode': 'publishMode',
            'region': 'region',
            'secret_key': 'secretKey',
            'update_definition': 'updateDefinition'
        }

        self._enabled = enabled
        self._id = id
        self._name = name
        self._access_key = access_key
        self._api_id = api_id
        self._base_path_mode = base_path_mode
        self._deployment_mode = deployment_mode
        self._publish_mode = publish_mode
        self._region = region
        self._secret_key = secret_key
        self._update_definition = update_definition

    @classmethod
    def from_dict(cls, dikt: dict) -> 'AmazonIntegration':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The AmazonIntegration of this AmazonIntegration.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def enabled(self):
        """Gets the enabled of this AmazonIntegration.

        Whether the integration is enabled or disabled

        :return: The enabled of this AmazonIntegration.
        :rtype: bool
        """
        return self._enabled

    @enabled.setter
    def enabled(self, enabled):
        """Sets the enabled of this AmazonIntegration.

        Whether the integration is enabled or disabled

        :param enabled: The enabled of this AmazonIntegration.
        :type enabled: bool
        """

        self._enabled = enabled

    @property
    def id(self):
        """Gets the id of this AmazonIntegration.

        ID of the integration

        :return: The id of this AmazonIntegration.
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this AmazonIntegration.

        ID of the integration

        :param id: The id of this AmazonIntegration.
        :type id: str
        """

        self._id = id

    @property
    def name(self):
        """Gets the name of this AmazonIntegration.

        The display name of the integration. Must be unique among all integrations configured for the given API version.

        :return: The name of this AmazonIntegration.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this AmazonIntegration.

        The display name of the integration. Must be unique among all integrations configured for the given API version.

        :param name: The name of this AmazonIntegration.
        :type name: str
        """
        if name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")

        self._name = name

    @property
    def access_key(self):
        """Gets the access_key of this AmazonIntegration.

        AWS access key. Write-only property. Required to create and update the integration.

        :return: The access_key of this AmazonIntegration.
        :rtype: str
        """
        return self._access_key

    @access_key.setter
    def access_key(self, access_key):
        """Sets the access_key of this AmazonIntegration.

        AWS access key. Write-only property. Required to create and update the integration.

        :param access_key: The access_key of this AmazonIntegration.
        :type access_key: str
        """

        self._access_key = access_key

    @property
    def api_id(self):
        """Gets the api_id of this AmazonIntegration.

        AWS ID of the API to update. Empty value will create a new API in AWS.

        :return: The api_id of this AmazonIntegration.
        :rtype: str
        """
        return self._api_id

    @api_id.setter
    def api_id(self, api_id):
        """Sets the api_id of this AmazonIntegration.

        AWS ID of the API to update. Empty value will create a new API in AWS.

        :param api_id: The api_id of this AmazonIntegration.
        :type api_id: str
        """

        self._api_id = api_id

    @property
    def base_path_mode(self):
        """Gets the base_path_mode of this AmazonIntegration.

        How to handle the API's `basePath` value. Refer to [AWS documentation](https://docs.aws.amazon.com/apigateway/latest/developerguide/api-gateway-import-api-basePath.html) for details.

        :return: The base_path_mode of this AmazonIntegration.
        :rtype: str
        """
        return self._base_path_mode

    @base_path_mode.setter
    def base_path_mode(self, base_path_mode):
        """Sets the base_path_mode of this AmazonIntegration.

        How to handle the API's `basePath` value. Refer to [AWS documentation](https://docs.aws.amazon.com/apigateway/latest/developerguide/api-gateway-import-api-basePath.html) for details.

        :param base_path_mode: The base_path_mode of this AmazonIntegration.
        :type base_path_mode: str
        """
        allowed_values = ["ignore", "prepend", "split"]  # noqa: E501
        if base_path_mode not in allowed_values:
            raise ValueError(
                "Invalid value for `base_path_mode` ({0}), must be one of {1}"
                .format(base_path_mode, allowed_values)
            )

        self._base_path_mode = base_path_mode

    @property
    def deployment_mode(self):
        """Gets the deployment_mode of this AmazonIntegration.

        Should be \"on save\". The value \"never\" means the integration is disabled.

        :return: The deployment_mode of this AmazonIntegration.
        :rtype: str
        """
        return self._deployment_mode

    @deployment_mode.setter
    def deployment_mode(self, deployment_mode):
        """Sets the deployment_mode of this AmazonIntegration.

        Should be \"on save\". The value \"never\" means the integration is disabled.

        :param deployment_mode: The deployment_mode of this AmazonIntegration.
        :type deployment_mode: str
        """
        allowed_values = ["on save", "never"]  # noqa: E501
        if deployment_mode not in allowed_values:
            raise ValueError(
                "Invalid value for `deployment_mode` ({0}), must be one of {1}"
                .format(deployment_mode, allowed_values)
            )

        self._deployment_mode = deployment_mode

    @property
    def publish_mode(self):
        """Gets the publish_mode of this AmazonIntegration.

        How to update an existing API in AWS

        :return: The publish_mode of this AmazonIntegration.
        :rtype: str
        """
        return self._publish_mode

    @publish_mode.setter
    def publish_mode(self, publish_mode):
        """Sets the publish_mode of this AmazonIntegration.

        How to update an existing API in AWS

        :param publish_mode: The publish_mode of this AmazonIntegration.
        :type publish_mode: str
        """
        allowed_values = ["merge", "overwrite"]  # noqa: E501
        if publish_mode not in allowed_values:
            raise ValueError(
                "Invalid value for `publish_mode` ({0}), must be one of {1}"
                .format(publish_mode, allowed_values)
            )

        self._publish_mode = publish_mode

    @property
    def region(self):
        """Gets the region of this AmazonIntegration.

        AWS region where the API will be published

        :return: The region of this AmazonIntegration.
        :rtype: str
        """
        return self._region

    @region.setter
    def region(self, region):
        """Sets the region of this AmazonIntegration.

        AWS region where the API will be published

        :param region: The region of this AmazonIntegration.
        :type region: str
        """
        allowed_values = ["us-east-1", "us-east-2", "us-west-1", "us-west-2", "eu-west-1", "eu-west-2", "eu-west-3", "eu-central-1", "eu-north-1", "eu-south-1", "ap-east-1", "ap-south-1", "ap-southeast-1", "ap-southeast-2", "ap-northeast-1", "ap-northeast-2", "sa-east-1", "cn-north-1", "cn-northwest-1", "ca-central-1", "me-south-1", "af-south-1"]  # noqa: E501
        if region not in allowed_values:
            raise ValueError(
                "Invalid value for `region` ({0}), must be one of {1}"
                .format(region, allowed_values)
            )

        self._region = region

    @property
    def secret_key(self):
        """Gets the secret_key of this AmazonIntegration.

        AWS secret key. Write-only property. Required to create and update the integration.

        :return: The secret_key of this AmazonIntegration.
        :rtype: str
        """
        return self._secret_key

    @secret_key.setter
    def secret_key(self, secret_key):
        """Sets the secret_key of this AmazonIntegration.

        AWS secret key. Write-only property. Required to create and update the integration.

        :param secret_key: The secret_key of this AmazonIntegration.
        :type secret_key: str
        """

        self._secret_key = secret_key

    @property
    def update_definition(self):
        """Gets the update_definition of this AmazonIntegration.

        Whether to update the API definition with Amazon-specific extensions and compatibility modifications

        :return: The update_definition of this AmazonIntegration.
        :rtype: bool
        """
        return self._update_definition

    @update_definition.setter
    def update_definition(self, update_definition):
        """Sets the update_definition of this AmazonIntegration.

        Whether to update the API definition with Amazon-specific extensions and compatibility modifications

        :param update_definition: The update_definition of this AmazonIntegration.
        :type update_definition: bool
        """

        self._update_definition = update_definition
