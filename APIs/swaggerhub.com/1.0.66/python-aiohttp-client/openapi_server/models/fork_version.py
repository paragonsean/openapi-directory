# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class ForkVersion(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, name: str=None, owner: str=None, private: bool=None, project: str=None, version: str=None):
        """ForkVersion - a model defined in OpenAPI

        :param name: The name of this ForkVersion.
        :param owner: The owner of this ForkVersion.
        :param private: The private of this ForkVersion.
        :param project: The project of this ForkVersion.
        :param version: The version of this ForkVersion.
        """
        self.openapi_types = {
            'name': str,
            'owner': str,
            'private': bool,
            'project': str,
            'version': str
        }

        self.attribute_map = {
            'name': 'name',
            'owner': 'owner',
            'private': 'private',
            'project': 'project',
            'version': 'version'
        }

        self._name = name
        self._owner = owner
        self._private = private
        self._project = project
        self._version = version

    @classmethod
    def from_dict(cls, dikt: dict) -> 'ForkVersion':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The ForkVersion of this ForkVersion.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def name(self):
        """Gets the name of this ForkVersion.

        The name for the forked definition. Must follow the [naming rules](https://support.smartbear.com/swaggerhub/docs/apis/creating-api.html). Can be the name of an existing definition, in which case the fork will become a new version in that definition, unless that version already exists.

        :return: The name of this ForkVersion.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this ForkVersion.

        The name for the forked definition. Must follow the [naming rules](https://support.smartbear.com/swaggerhub/docs/apis/creating-api.html). Can be the name of an existing definition, in which case the fork will become a new version in that definition, unless that version already exists.

        :param name: The name of this ForkVersion.
        :type name: str
        """
        if name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")
        if name is not None and len(name) > 60:
            raise ValueError("Invalid value for `name`, length must be less than or equal to `60`")
        if name is not None and len(name) < 3:
            raise ValueError("Invalid value for `name`, length must be greater than or equal to `3`")

        self._name = name

    @property
    def owner(self):
        """Gets the owner of this ForkVersion.

        The account to fork into. Can be an organization or user name. Case-sensitive. The authenticated user must have permissions to create definitions in this account.

        :return: The owner of this ForkVersion.
        :rtype: str
        """
        return self._owner

    @owner.setter
    def owner(self, owner):
        """Sets the owner of this ForkVersion.

        The account to fork into. Can be an organization or user name. Case-sensitive. The authenticated user must have permissions to create definitions in this account.

        :param owner: The owner of this ForkVersion.
        :type owner: str
        """
        if owner is None:
            raise ValueError("Invalid value for `owner`, must not be `None`")
        if owner is not None and len(owner) < 3:
            raise ValueError("Invalid value for `owner`, length must be greater than or equal to `3`")

        self._owner = owner

    @property
    def private(self):
        """Gets the private of this ForkVersion.

        Whether the forked version should be public (`false`) or private (`true`). If the value is not set, the original version's setting will be used.

        :return: The private of this ForkVersion.
        :rtype: bool
        """
        return self._private

    @private.setter
    def private(self, private):
        """Sets the private of this ForkVersion.

        Whether the forked version should be public (`false`) or private (`true`). If the value is not set, the original version's setting will be used.

        :param private: The private of this ForkVersion.
        :type private: bool
        """

        self._private = private

    @property
    def project(self):
        """Gets the project of this ForkVersion.

        If forking into an organization, you can optionally specify an existing project to add the forked definition to.

        :return: The project of this ForkVersion.
        :rtype: str
        """
        return self._project

    @project.setter
    def project(self, project):
        """Sets the project of this ForkVersion.

        If forking into an organization, you can optionally specify an existing project to add the forked definition to.

        :param project: The project of this ForkVersion.
        :type project: str
        """
        if project is not None and len(project) < 1:
            raise ValueError("Invalid value for `project`, length must be greater than or equal to `1`")

        self._project = project

    @property
    def version(self):
        """Gets the version of this ForkVersion.

        Version identifier for the forked definition. Must follow the [naming rules](https://support.smartbear.com/swaggerhub/docs/apis/versioning.html#format). If forking into an existing definition, this version must not already exist.

        :return: The version of this ForkVersion.
        :rtype: str
        """
        return self._version

    @version.setter
    def version(self, version):
        """Sets the version of this ForkVersion.

        Version identifier for the forked definition. Must follow the [naming rules](https://support.smartbear.com/swaggerhub/docs/apis/versioning.html#format). If forking into an existing definition, this version must not already exist.

        :param version: The version of this ForkVersion.
        :type version: str
        """
        if version is None:
            raise ValueError("Invalid value for `version`, must not be `None`")
        if version is not None and len(version) < 1:
            raise ValueError("Invalid value for `version`, length must be greater than or equal to `1`")

        self._version = version
