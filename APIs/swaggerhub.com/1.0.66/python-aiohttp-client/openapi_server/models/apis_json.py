# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.apis_json_api import ApisJsonApi
from openapi_server import util


class ApisJson(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, apis: List[ApisJsonApi]=None, description: str=None, name: str=None, offset: int=None, total_count: int=None, url: str=None):
        """ApisJson - a model defined in OpenAPI

        :param apis: The apis of this ApisJson.
        :param description: The description of this ApisJson.
        :param name: The name of this ApisJson.
        :param offset: The offset of this ApisJson.
        :param total_count: The total_count of this ApisJson.
        :param url: The url of this ApisJson.
        """
        self.openapi_types = {
            'apis': List[ApisJsonApi],
            'description': str,
            'name': str,
            'offset': int,
            'total_count': int,
            'url': str
        }

        self.attribute_map = {
            'apis': 'apis',
            'description': 'description',
            'name': 'name',
            'offset': 'offset',
            'total_count': 'totalCount',
            'url': 'url'
        }

        self._apis = apis
        self._description = description
        self._name = name
        self._offset = offset
        self._total_count = total_count
        self._url = url

    @classmethod
    def from_dict(cls, dikt: dict) -> 'ApisJson':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The ApisJson of this ApisJson.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def apis(self):
        """Gets the apis of this ApisJson.


        :return: The apis of this ApisJson.
        :rtype: List[ApisJsonApi]
        """
        return self._apis

    @apis.setter
    def apis(self, apis):
        """Sets the apis of this ApisJson.


        :param apis: The apis of this ApisJson.
        :type apis: List[ApisJsonApi]
        """

        self._apis = apis

    @property
    def description(self):
        """Gets the description of this ApisJson.


        :return: The description of this ApisJson.
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this ApisJson.


        :param description: The description of this ApisJson.
        :type description: str
        """

        self._description = description

    @property
    def name(self):
        """Gets the name of this ApisJson.


        :return: The name of this ApisJson.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this ApisJson.


        :param name: The name of this ApisJson.
        :type name: str
        """

        self._name = name

    @property
    def offset(self):
        """Gets the offset of this ApisJson.


        :return: The offset of this ApisJson.
        :rtype: int
        """
        return self._offset

    @offset.setter
    def offset(self, offset):
        """Sets the offset of this ApisJson.


        :param offset: The offset of this ApisJson.
        :type offset: int
        """

        self._offset = offset

    @property
    def total_count(self):
        """Gets the total_count of this ApisJson.


        :return: The total_count of this ApisJson.
        :rtype: int
        """
        return self._total_count

    @total_count.setter
    def total_count(self, total_count):
        """Sets the total_count of this ApisJson.


        :param total_count: The total_count of this ApisJson.
        :type total_count: int
        """

        self._total_count = total_count

    @property
    def url(self):
        """Gets the url of this ApisJson.


        :return: The url of this ApisJson.
        :rtype: str
        """
        return self._url

    @url.setter
    def url(self, url):
        """Sets the url of this ApisJson.


        :param url: The url of this ApisJson.
        :type url: str
        """

        self._url = url
