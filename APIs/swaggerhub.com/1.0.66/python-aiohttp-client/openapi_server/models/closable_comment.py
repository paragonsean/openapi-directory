# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.comment import Comment
from openapi_server.models.user import User
from openapi_server import util


class ClosableComment(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, body: str=None, created: datetime=None, id: str=None, modified: datetime=None, user: User=None, position: int=None, replies: List[Comment]=None, status: str=None):
        """ClosableComment - a model defined in OpenAPI

        :param body: The body of this ClosableComment.
        :param created: The created of this ClosableComment.
        :param id: The id of this ClosableComment.
        :param modified: The modified of this ClosableComment.
        :param user: The user of this ClosableComment.
        :param position: The position of this ClosableComment.
        :param replies: The replies of this ClosableComment.
        :param status: The status of this ClosableComment.
        """
        self.openapi_types = {
            'body': str,
            'created': datetime,
            'id': str,
            'modified': datetime,
            'user': User,
            'position': int,
            'replies': List[Comment],
            'status': str
        }

        self.attribute_map = {
            'body': 'body',
            'created': 'created',
            'id': 'id',
            'modified': 'modified',
            'user': 'user',
            'position': 'position',
            'replies': 'replies',
            'status': 'status'
        }

        self._body = body
        self._created = created
        self._id = id
        self._modified = modified
        self._user = user
        self._position = position
        self._replies = replies
        self._status = status

    @classmethod
    def from_dict(cls, dikt: dict) -> 'ClosableComment':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The ClosableComment of this ClosableComment.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def body(self):
        """Gets the body of this ClosableComment.

        Markdown contents of the comment

        :return: The body of this ClosableComment.
        :rtype: str
        """
        return self._body

    @body.setter
    def body(self, body):
        """Sets the body of this ClosableComment.

        Markdown contents of the comment

        :param body: The body of this ClosableComment.
        :type body: str
        """
        if body is None:
            raise ValueError("Invalid value for `body`, must not be `None`")

        self._body = body

    @property
    def created(self):
        """Gets the created of this ClosableComment.

        The UTC date and time when the comment was added

        :return: The created of this ClosableComment.
        :rtype: datetime
        """
        return self._created

    @created.setter
    def created(self, created):
        """Sets the created of this ClosableComment.

        The UTC date and time when the comment was added

        :param created: The created of this ClosableComment.
        :type created: datetime
        """
        if created is None:
            raise ValueError("Invalid value for `created`, must not be `None`")

        self._created = created

    @property
    def id(self):
        """Gets the id of this ClosableComment.

        The unique ID of the comment

        :return: The id of this ClosableComment.
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this ClosableComment.

        The unique ID of the comment

        :param id: The id of this ClosableComment.
        :type id: str
        """
        if id is None:
            raise ValueError("Invalid value for `id`, must not be `None`")

        self._id = id

    @property
    def modified(self):
        """Gets the modified of this ClosableComment.

        The UTC date and time the when the comment was last edited

        :return: The modified of this ClosableComment.
        :rtype: datetime
        """
        return self._modified

    @modified.setter
    def modified(self, modified):
        """Sets the modified of this ClosableComment.

        The UTC date and time the when the comment was last edited

        :param modified: The modified of this ClosableComment.
        :type modified: datetime
        """

        self._modified = modified

    @property
    def user(self):
        """Gets the user of this ClosableComment.


        :return: The user of this ClosableComment.
        :rtype: User
        """
        return self._user

    @user.setter
    def user(self, user):
        """Sets the user of this ClosableComment.


        :param user: The user of this ClosableComment.
        :type user: User
        """
        if user is None:
            raise ValueError("Invalid value for `user`, must not be `None`")

        self._user = user

    @property
    def position(self):
        """Gets the position of this ClosableComment.

        The line number (zero-based) the comment is associated with. For example, if the comment is on line 7 in the editor, `position`=6. 

        :return: The position of this ClosableComment.
        :rtype: int
        """
        return self._position

    @position.setter
    def position(self, position):
        """Sets the position of this ClosableComment.

        The line number (zero-based) the comment is associated with. For example, if the comment is on line 7 in the editor, `position`=6. 

        :param position: The position of this ClosableComment.
        :type position: int
        """

        self._position = position

    @property
    def replies(self):
        """Gets the replies of this ClosableComment.

        A list of replies to this comment

        :return: The replies of this ClosableComment.
        :rtype: List[Comment]
        """
        return self._replies

    @replies.setter
    def replies(self, replies):
        """Sets the replies of this ClosableComment.

        A list of replies to this comment

        :param replies: The replies of this ClosableComment.
        :type replies: List[Comment]
        """

        self._replies = replies

    @property
    def status(self):
        """Gets the status of this ClosableComment.

        Comment status

        :return: The status of this ClosableComment.
        :rtype: str
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this ClosableComment.

        Comment status

        :param status: The status of this ClosableComment.
        :type status: str
        """
        allowed_values = ["OPEN", "RESOLVED"]  # noqa: E501
        if status not in allowed_values:
            raise ValueError(
                "Invalid value for `status` ({0}), must be one of {1}"
                .format(status, allowed_values)
            )

        self._status = status
