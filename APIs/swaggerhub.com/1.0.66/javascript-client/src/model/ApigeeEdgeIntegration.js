/**
 * SwaggerHub Registry API
 * # Overview Use SwaggerHub Registry API to access, manage, and update the following resources in SwaggerHub, bypassing the web interface:   * APIs   * Domains   * Integrations   * Projects   * Templates   SwaggerHub also provides the [User Management API](https://app.swaggerhub.com/apis-docs/swagger-hub/user-management-api/) to get information about organizations and manage organization members.  # Base URL Use the following base URL for SwaggerHub SaaS:          http(s)://api.swaggerhub.com  **Note:** This documentation is for SwaggerHub SaaS. On-Premise customers should use the bundled API definition, which can be found at the URLs provided below.  Version 1.29.0 or later:      http(s)://SERVER/v1/openapi.yaml - YAML version     http(s)://SERVER/v1/openapi.json - JSON version  Earlier versions:      http(s)://SERVER/v1/swagger.yaml - YAML version     http(s)://SERVER/v1/swagger.json - JSON version  # Authentication Operations that update data or access private data require authentication using an API key. You can find your personal API key on the [API Keys](https://app.swaggerhub.com/settings/apiKey) page in your account settings. Send this key in the `Authorization` header when making requests to the Registry API:      Authorization: YOUR_API_KEY  To test API calls from this documentation page, click the **Authorize** button below and paste your API key there.  **Important:** Keep the API key secure and do not store it directly in your code. # Tools In addition to calling the Registry API directly, you can use the following tools to interact with the API from the command line or CI/CD pipeline:   * [SwaggerHub CLI](https://www.npmjs.com/package/swaggerhub-cli)   * [Maven plugin](https://github.com/swagger-api/swaggerhub-maven-plugin)  * [Gradle plugin](https://github.com/swagger-api/swaggerhub-gradle-plugin) 
 *
 * The version of the OpenAPI document: 1.0.66
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import IntegrationConfiguration from './IntegrationConfiguration';

/**
 * The ApigeeEdgeIntegration model module.
 * @module model/ApigeeEdgeIntegration
 * @version 1.0.66
 */
class ApigeeEdgeIntegration {
    /**
     * Constructs a new <code>ApigeeEdgeIntegration</code>.
     * Configuration details for the [Apigee Edge](https://support.smartbear.com/swaggerhub/docs/integrations/apigee-edge.html) integration
     * @alias module:model/ApigeeEdgeIntegration
     * @implements module:model/IntegrationConfiguration
     * @param name {String} The display name of the integration. Must be unique among all integrations configured for the given API version.
     * @param apiName {String} Name for the API that is going to be saved in your Apigee account
     * @param configType {module:model/ApigeeEdgeIntegration.ConfigTypeEnum} Integration type
     * @param email {String} Email address of your Apigee account
     * @param organization {String} Organization where the API will be saved
     * @param targetUrl {String} Target endpoint for proxy
     */
    constructor(name, apiName, configType, email, organization, targetUrl) { 
        IntegrationConfiguration.initialize(this, name);
        ApigeeEdgeIntegration.initialize(this, name, apiName, configType, email, organization, targetUrl);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, name, apiName, configType, email, organization, targetUrl) { 
        obj['enabled'] = true;
        obj['name'] = name;
        obj['apiName'] = apiName;
        obj['configType'] = configType;
        obj['email'] = email;
        obj['host'] = 'https://api.enterprise.apigee.com/v1';
        obj['organization'] = organization;
        obj['targetUrl'] = targetUrl;
    }

    /**
     * Constructs a <code>ApigeeEdgeIntegration</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/ApigeeEdgeIntegration} obj Optional instance to populate.
     * @return {module:model/ApigeeEdgeIntegration} The populated <code>ApigeeEdgeIntegration</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new ApigeeEdgeIntegration();
            IntegrationConfiguration.constructFromObject(data, obj);

            if (data.hasOwnProperty('enabled')) {
                obj['enabled'] = ApiClient.convertToType(data['enabled'], 'Boolean');
            }
            if (data.hasOwnProperty('id')) {
                obj['id'] = ApiClient.convertToType(data['id'], 'String');
            }
            if (data.hasOwnProperty('name')) {
                obj['name'] = ApiClient.convertToType(data['name'], 'String');
            }
            if (data.hasOwnProperty('apiName')) {
                obj['apiName'] = ApiClient.convertToType(data['apiName'], 'String');
            }
            if (data.hasOwnProperty('configType')) {
                obj['configType'] = ApiClient.convertToType(data['configType'], 'String');
            }
            if (data.hasOwnProperty('email')) {
                obj['email'] = ApiClient.convertToType(data['email'], 'String');
            }
            if (data.hasOwnProperty('host')) {
                obj['host'] = ApiClient.convertToType(data['host'], 'String');
            }
            if (data.hasOwnProperty('organization')) {
                obj['organization'] = ApiClient.convertToType(data['organization'], 'String');
            }
            if (data.hasOwnProperty('password')) {
                obj['password'] = ApiClient.convertToType(data['password'], 'String');
            }
            if (data.hasOwnProperty('targetUrl')) {
                obj['targetUrl'] = ApiClient.convertToType(data['targetUrl'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>ApigeeEdgeIntegration</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>ApigeeEdgeIntegration</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of ApigeeEdgeIntegration.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // ensure the json data is a string
        if (data['id'] && !(typeof data['id'] === 'string' || data['id'] instanceof String)) {
            throw new Error("Expected the field `id` to be a primitive type in the JSON string but got " + data['id']);
        }
        // ensure the json data is a string
        if (data['name'] && !(typeof data['name'] === 'string' || data['name'] instanceof String)) {
            throw new Error("Expected the field `name` to be a primitive type in the JSON string but got " + data['name']);
        }
        // ensure the json data is a string
        if (data['apiName'] && !(typeof data['apiName'] === 'string' || data['apiName'] instanceof String)) {
            throw new Error("Expected the field `apiName` to be a primitive type in the JSON string but got " + data['apiName']);
        }
        // ensure the json data is a string
        if (data['configType'] && !(typeof data['configType'] === 'string' || data['configType'] instanceof String)) {
            throw new Error("Expected the field `configType` to be a primitive type in the JSON string but got " + data['configType']);
        }
        // ensure the json data is a string
        if (data['email'] && !(typeof data['email'] === 'string' || data['email'] instanceof String)) {
            throw new Error("Expected the field `email` to be a primitive type in the JSON string but got " + data['email']);
        }
        // ensure the json data is a string
        if (data['host'] && !(typeof data['host'] === 'string' || data['host'] instanceof String)) {
            throw new Error("Expected the field `host` to be a primitive type in the JSON string but got " + data['host']);
        }
        // ensure the json data is a string
        if (data['organization'] && !(typeof data['organization'] === 'string' || data['organization'] instanceof String)) {
            throw new Error("Expected the field `organization` to be a primitive type in the JSON string but got " + data['organization']);
        }
        // ensure the json data is a string
        if (data['password'] && !(typeof data['password'] === 'string' || data['password'] instanceof String)) {
            throw new Error("Expected the field `password` to be a primitive type in the JSON string but got " + data['password']);
        }
        // ensure the json data is a string
        if (data['targetUrl'] && !(typeof data['targetUrl'] === 'string' || data['targetUrl'] instanceof String)) {
            throw new Error("Expected the field `targetUrl` to be a primitive type in the JSON string but got " + data['targetUrl']);
        }

        return true;
    }


}

ApigeeEdgeIntegration.RequiredProperties = ["name", "apiName", "configType", "email", "organization", "targetUrl"];

/**
 * Whether the integration is enabled or disabled
 * @member {Boolean} enabled
 * @default true
 */
ApigeeEdgeIntegration.prototype['enabled'] = true;

/**
 * ID of the integration
 * @member {String} id
 */
ApigeeEdgeIntegration.prototype['id'] = undefined;

/**
 * The display name of the integration. Must be unique among all integrations configured for the given API version.
 * @member {String} name
 */
ApigeeEdgeIntegration.prototype['name'] = undefined;

/**
 * Name for the API that is going to be saved in your Apigee account
 * @member {String} apiName
 */
ApigeeEdgeIntegration.prototype['apiName'] = undefined;

/**
 * Integration type
 * @member {module:model/ApigeeEdgeIntegration.ConfigTypeEnum} configType
 */
ApigeeEdgeIntegration.prototype['configType'] = undefined;

/**
 * Email address of your Apigee account
 * @member {String} email
 */
ApigeeEdgeIntegration.prototype['email'] = undefined;

/**
 * Apigee Edge Management instance URL. Use the default URL `https://api.enterprise.apigee.com/v1` for the cloud version of Apigee Edge. If using an On-Premise deployment, enter the URL to your Edge instance.
 * @member {String} host
 * @default 'https://api.enterprise.apigee.com/v1'
 */
ApigeeEdgeIntegration.prototype['host'] = 'https://api.enterprise.apigee.com/v1';

/**
 * Organization where the API will be saved
 * @member {String} organization
 */
ApigeeEdgeIntegration.prototype['organization'] = undefined;

/**
 * Password of your Apigee account. Write-only property. Required to create and update the integration.
 * @member {String} password
 */
ApigeeEdgeIntegration.prototype['password'] = undefined;

/**
 * Target endpoint for proxy
 * @member {String} targetUrl
 */
ApigeeEdgeIntegration.prototype['targetUrl'] = undefined;


// Implement IntegrationConfiguration interface:
/**
 * Whether the integration is enabled or disabled
 * @member {Boolean} enabled
 * @default true
 */
IntegrationConfiguration.prototype['enabled'] = true;
/**
 * ID of the integration
 * @member {String} id
 */
IntegrationConfiguration.prototype['id'] = undefined;
/**
 * The display name of the integration. Must be unique among all integrations configured for the given API version.
 * @member {String} name
 */
IntegrationConfiguration.prototype['name'] = undefined;



/**
 * Allowed values for the <code>configType</code> property.
 * @enum {String}
 * @readonly
 */
ApigeeEdgeIntegration['ConfigTypeEnum'] = {

    /**
     * value: "APIGEE_EDGE"
     * @const
     */
    "APIGEE_EDGE": "APIGEE_EDGE"
};



export default ApigeeEdgeIntegration;

