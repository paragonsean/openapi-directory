/**
 * SwaggerHub Registry API
 * # Overview Use SwaggerHub Registry API to access, manage, and update the following resources in SwaggerHub, bypassing the web interface:   * APIs   * Domains   * Integrations   * Projects   * Templates   SwaggerHub also provides the [User Management API](https://app.swaggerhub.com/apis-docs/swagger-hub/user-management-api/) to get information about organizations and manage organization members.  # Base URL Use the following base URL for SwaggerHub SaaS:          http(s)://api.swaggerhub.com  **Note:** This documentation is for SwaggerHub SaaS. On-Premise customers should use the bundled API definition, which can be found at the URLs provided below.  Version 1.29.0 or later:      http(s)://SERVER/v1/openapi.yaml - YAML version     http(s)://SERVER/v1/openapi.json - JSON version  Earlier versions:      http(s)://SERVER/v1/swagger.yaml - YAML version     http(s)://SERVER/v1/swagger.json - JSON version  # Authentication Operations that update data or access private data require authentication using an API key. You can find your personal API key on the [API Keys](https://app.swaggerhub.com/settings/apiKey) page in your account settings. Send this key in the `Authorization` header when making requests to the Registry API:      Authorization: YOUR_API_KEY  To test API calls from this documentation page, click the **Authorize** button below and paste your API key there.  **Important:** Keep the API key secure and do not store it directly in your code. # Tools In addition to calling the Registry API directly, you can use the following tools to interact with the API from the command line or CI/CD pipeline:   * [SwaggerHub CLI](https://www.npmjs.com/package/swaggerhub-cli)   * [Maven plugin](https://github.com/swagger-api/swaggerhub-maven-plugin)  * [Gradle plugin](https://github.com/swagger-api/swaggerhub-gradle-plugin) 
 *
 * The version of the OpenAPI document: 1.0.66
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import Comment from './Comment';
import User from './User';

/**
 * The ClosableComment model module.
 * @module model/ClosableComment
 * @version 1.0.66
 */
class ClosableComment {
    /**
     * Constructs a new <code>ClosableComment</code>.
     * @alias module:model/ClosableComment
     * @implements module:model/Comment
     * @param body {String} Markdown contents of the comment
     * @param created {Date} The UTC date and time when the comment was added
     * @param id {String} The unique ID of the comment
     * @param user {module:model/User} 
     */
    constructor(body, created, id, user) { 
        Comment.initialize(this, body, created, id, user);
        ClosableComment.initialize(this, body, created, id, user);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, body, created, id, user) { 
        obj['body'] = body;
        obj['created'] = created;
        obj['id'] = id;
        obj['user'] = user;
    }

    /**
     * Constructs a <code>ClosableComment</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/ClosableComment} obj Optional instance to populate.
     * @return {module:model/ClosableComment} The populated <code>ClosableComment</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new ClosableComment();
            Comment.constructFromObject(data, obj);

            if (data.hasOwnProperty('body')) {
                obj['body'] = ApiClient.convertToType(data['body'], 'String');
            }
            if (data.hasOwnProperty('created')) {
                obj['created'] = ApiClient.convertToType(data['created'], 'Date');
            }
            if (data.hasOwnProperty('id')) {
                obj['id'] = ApiClient.convertToType(data['id'], 'String');
            }
            if (data.hasOwnProperty('modified')) {
                obj['modified'] = ApiClient.convertToType(data['modified'], 'Date');
            }
            if (data.hasOwnProperty('user')) {
                obj['user'] = User.constructFromObject(data['user']);
            }
            if (data.hasOwnProperty('position')) {
                obj['position'] = ApiClient.convertToType(data['position'], 'Number');
            }
            if (data.hasOwnProperty('replies')) {
                obj['replies'] = ApiClient.convertToType(data['replies'], [Comment]);
            }
            if (data.hasOwnProperty('status')) {
                obj['status'] = ApiClient.convertToType(data['status'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>ClosableComment</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>ClosableComment</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of ClosableComment.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // ensure the json data is a string
        if (data['body'] && !(typeof data['body'] === 'string' || data['body'] instanceof String)) {
            throw new Error("Expected the field `body` to be a primitive type in the JSON string but got " + data['body']);
        }
        // ensure the json data is a string
        if (data['id'] && !(typeof data['id'] === 'string' || data['id'] instanceof String)) {
            throw new Error("Expected the field `id` to be a primitive type in the JSON string but got " + data['id']);
        }
        // validate the optional field `user`
        if (data['user']) { // data not null
          User.validateJSON(data['user']);
        }
        if (data['replies']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['replies'])) {
                throw new Error("Expected the field `replies` to be an array in the JSON data but got " + data['replies']);
            }
            // validate the optional field `replies` (array)
            for (const item of data['replies']) {
                Comment.validateJSON(item);
            };
        }
        // ensure the json data is a string
        if (data['status'] && !(typeof data['status'] === 'string' || data['status'] instanceof String)) {
            throw new Error("Expected the field `status` to be a primitive type in the JSON string but got " + data['status']);
        }

        return true;
    }


}

ClosableComment.RequiredProperties = ["body", "created", "id", "user"];

/**
 * Markdown contents of the comment
 * @member {String} body
 */
ClosableComment.prototype['body'] = undefined;

/**
 * The UTC date and time when the comment was added
 * @member {Date} created
 */
ClosableComment.prototype['created'] = undefined;

/**
 * The unique ID of the comment
 * @member {String} id
 */
ClosableComment.prototype['id'] = undefined;

/**
 * The UTC date and time the when the comment was last edited
 * @member {Date} modified
 */
ClosableComment.prototype['modified'] = undefined;

/**
 * @member {module:model/User} user
 */
ClosableComment.prototype['user'] = undefined;

/**
 * The line number (zero-based) the comment is associated with. For example, if the comment is on line 7 in the editor, `position`=6. 
 * @member {Number} position
 */
ClosableComment.prototype['position'] = undefined;

/**
 * A list of replies to this comment
 * @member {Array.<module:model/Comment>} replies
 */
ClosableComment.prototype['replies'] = undefined;

/**
 * Comment status
 * @member {module:model/ClosableComment.StatusEnum} status
 */
ClosableComment.prototype['status'] = undefined;


// Implement Comment interface:
/**
 * Markdown contents of the comment
 * @member {String} body
 */
Comment.prototype['body'] = undefined;
/**
 * The UTC date and time when the comment was added
 * @member {Date} created
 */
Comment.prototype['created'] = undefined;
/**
 * The unique ID of the comment
 * @member {String} id
 */
Comment.prototype['id'] = undefined;
/**
 * The UTC date and time the when the comment was last edited
 * @member {Date} modified
 */
Comment.prototype['modified'] = undefined;
/**
 * @member {module:model/User} user
 */
Comment.prototype['user'] = undefined;



/**
 * Allowed values for the <code>status</code> property.
 * @enum {String}
 * @readonly
 */
ClosableComment['StatusEnum'] = {

    /**
     * value: "OPEN"
     * @const
     */
    "OPEN": "OPEN",

    /**
     * value: "RESOLVED"
     * @const
     */
    "RESOLVED": "RESOLVED"
};



export default ClosableComment;

