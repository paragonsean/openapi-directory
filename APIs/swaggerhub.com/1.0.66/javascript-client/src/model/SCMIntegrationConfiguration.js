/**
 * SwaggerHub Registry API
 * # Overview Use SwaggerHub Registry API to access, manage, and update the following resources in SwaggerHub, bypassing the web interface:   * APIs   * Domains   * Integrations   * Projects   * Templates   SwaggerHub also provides the [User Management API](https://app.swaggerhub.com/apis-docs/swagger-hub/user-management-api/) to get information about organizations and manage organization members.  # Base URL Use the following base URL for SwaggerHub SaaS:          http(s)://api.swaggerhub.com  **Note:** This documentation is for SwaggerHub SaaS. On-Premise customers should use the bundled API definition, which can be found at the URLs provided below.  Version 1.29.0 or later:      http(s)://SERVER/v1/openapi.yaml - YAML version     http(s)://SERVER/v1/openapi.json - JSON version  Earlier versions:      http(s)://SERVER/v1/swagger.yaml - YAML version     http(s)://SERVER/v1/swagger.json - JSON version  # Authentication Operations that update data or access private data require authentication using an API key. You can find your personal API key on the [API Keys](https://app.swaggerhub.com/settings/apiKey) page in your account settings. Send this key in the `Authorization` header when making requests to the Registry API:      Authorization: YOUR_API_KEY  To test API calls from this documentation page, click the **Authorize** button below and paste your API key there.  **Important:** Keep the API key secure and do not store it directly in your code. # Tools In addition to calling the Registry API directly, you can use the following tools to interact with the API from the command line or CI/CD pipeline:   * [SwaggerHub CLI](https://www.npmjs.com/package/swaggerhub-cli)   * [Maven plugin](https://github.com/swagger-api/swaggerhub-maven-plugin)  * [Gradle plugin](https://github.com/swagger-api/swaggerhub-gradle-plugin) 
 *
 * The version of the OpenAPI document: 1.0.66
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import IntegrationConfiguration from './IntegrationConfiguration';

/**
 * The SCMIntegrationConfiguration model module.
 * @module model/SCMIntegrationConfiguration
 * @version 1.0.66
 */
class SCMIntegrationConfiguration {
    /**
     * Constructs a new <code>SCMIntegrationConfiguration</code>.
     * Common configuration details for source control integrations
     * @alias module:model/SCMIntegrationConfiguration
     * @implements module:model/IntegrationConfiguration
     * @param name {String} The display name of the integration. Must be unique among all integrations configured for the given API version.
     * @param branch {String} The branch to synchronize to. If it does not exist in the repository, it will be created based on the default branch. Branch name must not contain whitespace characters. 
     * @param outputFolder {String} The output folder for the generated code or definition, relative to the repository root. If this folder does not exist, it will be created. If the output folder is not specified, SwaggerHub will create files and folders in the repository root. Use forward slashes `/` as path separators, but do not add `/` at the beginning. 
     * @param repository {String} The repository to synchronize with
     * @param syncMethod {module:model/SCMIntegrationConfiguration.SyncMethodEnum} \"Basic Sync\" or \"Advanced Sync\". Basic Sync will manage all files and folders in the branch. Advanced Sync allows you to define which files and folders will be managed by SwaggerHub. Note: If \"Advanced Sync\" is used, you must specify either `providedPaths` or `managedPaths`. 
     * @param target {String} The type of code to generate and push to the repository. For the possible values, start creating any source control integration manually and check the \"Generated API Code\" values. Note that the available codegens for OAS2 and OAS3 vary. 
     */
    constructor(name, branch, outputFolder, repository, syncMethod, target) { 
        IntegrationConfiguration.initialize(this, name);
        SCMIntegrationConfiguration.initialize(this, name, branch, outputFolder, repository, syncMethod, target);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, name, branch, outputFolder, repository, syncMethod, target) { 
        obj['enabled'] = true;
        obj['name'] = name;
        obj['branch'] = branch;
        obj['outputFolder'] = outputFolder;
        obj['repository'] = repository;
        obj['syncMethod'] = syncMethod;
        obj['target'] = target;
    }

    /**
     * Constructs a <code>SCMIntegrationConfiguration</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/SCMIntegrationConfiguration} obj Optional instance to populate.
     * @return {module:model/SCMIntegrationConfiguration} The populated <code>SCMIntegrationConfiguration</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new SCMIntegrationConfiguration();
            IntegrationConfiguration.constructFromObject(data, obj);

            if (data.hasOwnProperty('enabled')) {
                obj['enabled'] = ApiClient.convertToType(data['enabled'], 'Boolean');
            }
            if (data.hasOwnProperty('id')) {
                obj['id'] = ApiClient.convertToType(data['id'], 'String');
            }
            if (data.hasOwnProperty('name')) {
                obj['name'] = ApiClient.convertToType(data['name'], 'String');
            }
            if (data.hasOwnProperty('branch')) {
                obj['branch'] = ApiClient.convertToType(data['branch'], 'String');
            }
            if (data.hasOwnProperty('ignoredPaths')) {
                obj['ignoredPaths'] = ApiClient.convertToType(data['ignoredPaths'], ['String']);
            }
            if (data.hasOwnProperty('managedPaths')) {
                obj['managedPaths'] = ApiClient.convertToType(data['managedPaths'], ['String']);
            }
            if (data.hasOwnProperty('outputFile')) {
                obj['outputFile'] = ApiClient.convertToType(data['outputFile'], 'String');
            }
            if (data.hasOwnProperty('outputFolder')) {
                obj['outputFolder'] = ApiClient.convertToType(data['outputFolder'], 'String');
            }
            if (data.hasOwnProperty('providedPaths')) {
                obj['providedPaths'] = ApiClient.convertToType(data['providedPaths'], ['String']);
            }
            if (data.hasOwnProperty('repository')) {
                obj['repository'] = ApiClient.convertToType(data['repository'], 'String');
            }
            if (data.hasOwnProperty('syncMethod')) {
                obj['syncMethod'] = ApiClient.convertToType(data['syncMethod'], 'String');
            }
            if (data.hasOwnProperty('target')) {
                obj['target'] = ApiClient.convertToType(data['target'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>SCMIntegrationConfiguration</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>SCMIntegrationConfiguration</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of SCMIntegrationConfiguration.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // ensure the json data is a string
        if (data['id'] && !(typeof data['id'] === 'string' || data['id'] instanceof String)) {
            throw new Error("Expected the field `id` to be a primitive type in the JSON string but got " + data['id']);
        }
        // ensure the json data is a string
        if (data['name'] && !(typeof data['name'] === 'string' || data['name'] instanceof String)) {
            throw new Error("Expected the field `name` to be a primitive type in the JSON string but got " + data['name']);
        }
        // ensure the json data is a string
        if (data['branch'] && !(typeof data['branch'] === 'string' || data['branch'] instanceof String)) {
            throw new Error("Expected the field `branch` to be a primitive type in the JSON string but got " + data['branch']);
        }
        // ensure the json data is an array
        if (!Array.isArray(data['ignoredPaths'])) {
            throw new Error("Expected the field `ignoredPaths` to be an array in the JSON data but got " + data['ignoredPaths']);
        }
        // ensure the json data is an array
        if (!Array.isArray(data['managedPaths'])) {
            throw new Error("Expected the field `managedPaths` to be an array in the JSON data but got " + data['managedPaths']);
        }
        // ensure the json data is a string
        if (data['outputFile'] && !(typeof data['outputFile'] === 'string' || data['outputFile'] instanceof String)) {
            throw new Error("Expected the field `outputFile` to be a primitive type in the JSON string but got " + data['outputFile']);
        }
        // ensure the json data is a string
        if (data['outputFolder'] && !(typeof data['outputFolder'] === 'string' || data['outputFolder'] instanceof String)) {
            throw new Error("Expected the field `outputFolder` to be a primitive type in the JSON string but got " + data['outputFolder']);
        }
        // ensure the json data is an array
        if (!Array.isArray(data['providedPaths'])) {
            throw new Error("Expected the field `providedPaths` to be an array in the JSON data but got " + data['providedPaths']);
        }
        // ensure the json data is a string
        if (data['repository'] && !(typeof data['repository'] === 'string' || data['repository'] instanceof String)) {
            throw new Error("Expected the field `repository` to be a primitive type in the JSON string but got " + data['repository']);
        }
        // ensure the json data is a string
        if (data['syncMethod'] && !(typeof data['syncMethod'] === 'string' || data['syncMethod'] instanceof String)) {
            throw new Error("Expected the field `syncMethod` to be a primitive type in the JSON string but got " + data['syncMethod']);
        }
        // ensure the json data is a string
        if (data['target'] && !(typeof data['target'] === 'string' || data['target'] instanceof String)) {
            throw new Error("Expected the field `target` to be a primitive type in the JSON string but got " + data['target']);
        }

        return true;
    }


}

SCMIntegrationConfiguration.RequiredProperties = ["name", "branch", "outputFolder", "repository", "syncMethod", "target"];

/**
 * Whether the integration is enabled or disabled
 * @member {Boolean} enabled
 * @default true
 */
SCMIntegrationConfiguration.prototype['enabled'] = true;

/**
 * ID of the integration
 * @member {String} id
 */
SCMIntegrationConfiguration.prototype['id'] = undefined;

/**
 * The display name of the integration. Must be unique among all integrations configured for the given API version.
 * @member {String} name
 */
SCMIntegrationConfiguration.prototype['name'] = undefined;

/**
 * The branch to synchronize to. If it does not exist in the repository, it will be created based on the default branch. Branch name must not contain whitespace characters. 
 * @member {String} branch
 */
SCMIntegrationConfiguration.prototype['branch'] = undefined;

/**
 * Ignored Paths: These files and folders (if exist) will remain as is and will not be changed in any way. Paths are relative to the `outputFolder`. Use forward slashes `/` as folder separators, but do not add `/` at the beginning of the paths. 
 * @member {Array.<String>} ignoredPaths
 */
SCMIntegrationConfiguration.prototype['ignoredPaths'] = undefined;

/**
 * Fully Managed Paths: These files and folders will be completely managed by the integration. New files will be added, the existing files will be overwritten, and the files that are no longer used will be deleted.  Paths are relative to the `outputFolder`. Use forward slashes `/` as folder separators, but do not add `/` at the beginning of the paths. `*` means all files in the `outputFolder`. 
 * @member {Array.<String>} managedPaths
 */
SCMIntegrationConfiguration.prototype['managedPaths'] = undefined;

/**
 * Required if `target` is \"YAML (Resolved)\", \"YAML (Unresolved)\", \"JSON (Resolved)\", or \"JSON (Unresolved)\". Specifies the file name for the generated definition.
 * @member {String} outputFile
 */
SCMIntegrationConfiguration.prototype['outputFile'] = undefined;

/**
 * The output folder for the generated code or definition, relative to the repository root. If this folder does not exist, it will be created. If the output folder is not specified, SwaggerHub will create files and folders in the repository root. Use forward slashes `/` as path separators, but do not add `/` at the beginning. 
 * @member {String} outputFolder
 */
SCMIntegrationConfiguration.prototype['outputFolder'] = undefined;

/**
 * Partially Managed Paths: These files and folders will be created only if they do not exist. Existing files will not be modified. Paths are relative to the `outputFolder`. Use forward slashes `/` as folder separators, but do not add `/` at the beginning of the paths. `*` means all files in the `outputFolder`. 
 * @member {Array.<String>} providedPaths
 */
SCMIntegrationConfiguration.prototype['providedPaths'] = undefined;

/**
 * The repository to synchronize with
 * @member {String} repository
 */
SCMIntegrationConfiguration.prototype['repository'] = undefined;

/**
 * \"Basic Sync\" or \"Advanced Sync\". Basic Sync will manage all files and folders in the branch. Advanced Sync allows you to define which files and folders will be managed by SwaggerHub. Note: If \"Advanced Sync\" is used, you must specify either `providedPaths` or `managedPaths`. 
 * @member {module:model/SCMIntegrationConfiguration.SyncMethodEnum} syncMethod
 */
SCMIntegrationConfiguration.prototype['syncMethod'] = undefined;

/**
 * The type of code to generate and push to the repository. For the possible values, start creating any source control integration manually and check the \"Generated API Code\" values. Note that the available codegens for OAS2 and OAS3 vary. 
 * @member {String} target
 */
SCMIntegrationConfiguration.prototype['target'] = undefined;


// Implement IntegrationConfiguration interface:
/**
 * Whether the integration is enabled or disabled
 * @member {Boolean} enabled
 * @default true
 */
IntegrationConfiguration.prototype['enabled'] = true;
/**
 * ID of the integration
 * @member {String} id
 */
IntegrationConfiguration.prototype['id'] = undefined;
/**
 * The display name of the integration. Must be unique among all integrations configured for the given API version.
 * @member {String} name
 */
IntegrationConfiguration.prototype['name'] = undefined;



/**
 * Allowed values for the <code>syncMethod</code> property.
 * @enum {String}
 * @readonly
 */
SCMIntegrationConfiguration['SyncMethodEnum'] = {

    /**
     * value: "Basic Sync"
     * @const
     */
    "Basic Sync": "Basic Sync",

    /**
     * value: "Advanced Sync"
     * @const
     */
    "Advanced Sync": "Advanced Sync"
};



export default SCMIntegrationConfiguration;

