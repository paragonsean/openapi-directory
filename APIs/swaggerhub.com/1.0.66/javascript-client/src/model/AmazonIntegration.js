/**
 * SwaggerHub Registry API
 * # Overview Use SwaggerHub Registry API to access, manage, and update the following resources in SwaggerHub, bypassing the web interface:   * APIs   * Domains   * Integrations   * Projects   * Templates   SwaggerHub also provides the [User Management API](https://app.swaggerhub.com/apis-docs/swagger-hub/user-management-api/) to get information about organizations and manage organization members.  # Base URL Use the following base URL for SwaggerHub SaaS:          http(s)://api.swaggerhub.com  **Note:** This documentation is for SwaggerHub SaaS. On-Premise customers should use the bundled API definition, which can be found at the URLs provided below.  Version 1.29.0 or later:      http(s)://SERVER/v1/openapi.yaml - YAML version     http(s)://SERVER/v1/openapi.json - JSON version  Earlier versions:      http(s)://SERVER/v1/swagger.yaml - YAML version     http(s)://SERVER/v1/swagger.json - JSON version  # Authentication Operations that update data or access private data require authentication using an API key. You can find your personal API key on the [API Keys](https://app.swaggerhub.com/settings/apiKey) page in your account settings. Send this key in the `Authorization` header when making requests to the Registry API:      Authorization: YOUR_API_KEY  To test API calls from this documentation page, click the **Authorize** button below and paste your API key there.  **Important:** Keep the API key secure and do not store it directly in your code. # Tools In addition to calling the Registry API directly, you can use the following tools to interact with the API from the command line or CI/CD pipeline:   * [SwaggerHub CLI](https://www.npmjs.com/package/swaggerhub-cli)   * [Maven plugin](https://github.com/swagger-api/swaggerhub-maven-plugin)  * [Gradle plugin](https://github.com/swagger-api/swaggerhub-gradle-plugin) 
 *
 * The version of the OpenAPI document: 1.0.66
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import IntegrationConfiguration from './IntegrationConfiguration';

/**
 * The AmazonIntegration model module.
 * @module model/AmazonIntegration
 * @version 1.0.66
 */
class AmazonIntegration {
    /**
     * Constructs a new <code>AmazonIntegration</code>.
     * Common configuration details for Amazon integrations
     * @alias module:model/AmazonIntegration
     * @implements module:model/IntegrationConfiguration
     * @param name {String} The display name of the integration. Must be unique among all integrations configured for the given API version.
     * @param region {module:model/AmazonIntegration.RegionEnum} AWS region where the API will be published
     */
    constructor(name, region) { 
        IntegrationConfiguration.initialize(this, name);
        AmazonIntegration.initialize(this, name, region);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, name, region) { 
        obj['enabled'] = true;
        obj['name'] = name;
        obj['basePathMode'] = 'ignore';
        obj['deploymentMode'] = 'on save';
        obj['publishMode'] = 'merge';
        obj['region'] = region;
        obj['updateDefinition'] = false;
    }

    /**
     * Constructs a <code>AmazonIntegration</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/AmazonIntegration} obj Optional instance to populate.
     * @return {module:model/AmazonIntegration} The populated <code>AmazonIntegration</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new AmazonIntegration();
            IntegrationConfiguration.constructFromObject(data, obj);

            if (data.hasOwnProperty('enabled')) {
                obj['enabled'] = ApiClient.convertToType(data['enabled'], 'Boolean');
            }
            if (data.hasOwnProperty('id')) {
                obj['id'] = ApiClient.convertToType(data['id'], 'String');
            }
            if (data.hasOwnProperty('name')) {
                obj['name'] = ApiClient.convertToType(data['name'], 'String');
            }
            if (data.hasOwnProperty('accessKey')) {
                obj['accessKey'] = ApiClient.convertToType(data['accessKey'], 'String');
            }
            if (data.hasOwnProperty('apiId')) {
                obj['apiId'] = ApiClient.convertToType(data['apiId'], 'String');
            }
            if (data.hasOwnProperty('basePathMode')) {
                obj['basePathMode'] = ApiClient.convertToType(data['basePathMode'], 'String');
            }
            if (data.hasOwnProperty('deploymentMode')) {
                obj['deploymentMode'] = ApiClient.convertToType(data['deploymentMode'], 'String');
            }
            if (data.hasOwnProperty('publishMode')) {
                obj['publishMode'] = ApiClient.convertToType(data['publishMode'], 'String');
            }
            if (data.hasOwnProperty('region')) {
                obj['region'] = ApiClient.convertToType(data['region'], 'String');
            }
            if (data.hasOwnProperty('secretKey')) {
                obj['secretKey'] = ApiClient.convertToType(data['secretKey'], 'String');
            }
            if (data.hasOwnProperty('updateDefinition')) {
                obj['updateDefinition'] = ApiClient.convertToType(data['updateDefinition'], 'Boolean');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>AmazonIntegration</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>AmazonIntegration</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of AmazonIntegration.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // ensure the json data is a string
        if (data['id'] && !(typeof data['id'] === 'string' || data['id'] instanceof String)) {
            throw new Error("Expected the field `id` to be a primitive type in the JSON string but got " + data['id']);
        }
        // ensure the json data is a string
        if (data['name'] && !(typeof data['name'] === 'string' || data['name'] instanceof String)) {
            throw new Error("Expected the field `name` to be a primitive type in the JSON string but got " + data['name']);
        }
        // ensure the json data is a string
        if (data['accessKey'] && !(typeof data['accessKey'] === 'string' || data['accessKey'] instanceof String)) {
            throw new Error("Expected the field `accessKey` to be a primitive type in the JSON string but got " + data['accessKey']);
        }
        // ensure the json data is a string
        if (data['apiId'] && !(typeof data['apiId'] === 'string' || data['apiId'] instanceof String)) {
            throw new Error("Expected the field `apiId` to be a primitive type in the JSON string but got " + data['apiId']);
        }
        // ensure the json data is a string
        if (data['basePathMode'] && !(typeof data['basePathMode'] === 'string' || data['basePathMode'] instanceof String)) {
            throw new Error("Expected the field `basePathMode` to be a primitive type in the JSON string but got " + data['basePathMode']);
        }
        // ensure the json data is a string
        if (data['deploymentMode'] && !(typeof data['deploymentMode'] === 'string' || data['deploymentMode'] instanceof String)) {
            throw new Error("Expected the field `deploymentMode` to be a primitive type in the JSON string but got " + data['deploymentMode']);
        }
        // ensure the json data is a string
        if (data['publishMode'] && !(typeof data['publishMode'] === 'string' || data['publishMode'] instanceof String)) {
            throw new Error("Expected the field `publishMode` to be a primitive type in the JSON string but got " + data['publishMode']);
        }
        // ensure the json data is a string
        if (data['region'] && !(typeof data['region'] === 'string' || data['region'] instanceof String)) {
            throw new Error("Expected the field `region` to be a primitive type in the JSON string but got " + data['region']);
        }
        // ensure the json data is a string
        if (data['secretKey'] && !(typeof data['secretKey'] === 'string' || data['secretKey'] instanceof String)) {
            throw new Error("Expected the field `secretKey` to be a primitive type in the JSON string but got " + data['secretKey']);
        }

        return true;
    }


}

AmazonIntegration.RequiredProperties = ["name", "region"];

/**
 * Whether the integration is enabled or disabled
 * @member {Boolean} enabled
 * @default true
 */
AmazonIntegration.prototype['enabled'] = true;

/**
 * ID of the integration
 * @member {String} id
 */
AmazonIntegration.prototype['id'] = undefined;

/**
 * The display name of the integration. Must be unique among all integrations configured for the given API version.
 * @member {String} name
 */
AmazonIntegration.prototype['name'] = undefined;

/**
 * AWS access key. Write-only property. Required to create and update the integration.
 * @member {String} accessKey
 */
AmazonIntegration.prototype['accessKey'] = undefined;

/**
 * AWS ID of the API to update. Empty value will create a new API in AWS.
 * @member {String} apiId
 */
AmazonIntegration.prototype['apiId'] = undefined;

/**
 * How to handle the API's `basePath` value. Refer to [AWS documentation](https://docs.aws.amazon.com/apigateway/latest/developerguide/api-gateway-import-api-basePath.html) for details.
 * @member {module:model/AmazonIntegration.BasePathModeEnum} basePathMode
 * @default 'ignore'
 */
AmazonIntegration.prototype['basePathMode'] = 'ignore';

/**
 * Should be \"on save\". The value \"never\" means the integration is disabled.
 * @member {module:model/AmazonIntegration.DeploymentModeEnum} deploymentMode
 * @default 'on save'
 */
AmazonIntegration.prototype['deploymentMode'] = 'on save';

/**
 * How to update an existing API in AWS
 * @member {module:model/AmazonIntegration.PublishModeEnum} publishMode
 * @default 'merge'
 */
AmazonIntegration.prototype['publishMode'] = 'merge';

/**
 * AWS region where the API will be published
 * @member {module:model/AmazonIntegration.RegionEnum} region
 */
AmazonIntegration.prototype['region'] = undefined;

/**
 * AWS secret key. Write-only property. Required to create and update the integration.
 * @member {String} secretKey
 */
AmazonIntegration.prototype['secretKey'] = undefined;

/**
 * Whether to update the API definition with Amazon-specific extensions and compatibility modifications
 * @member {Boolean} updateDefinition
 * @default false
 */
AmazonIntegration.prototype['updateDefinition'] = false;


// Implement IntegrationConfiguration interface:
/**
 * Whether the integration is enabled or disabled
 * @member {Boolean} enabled
 * @default true
 */
IntegrationConfiguration.prototype['enabled'] = true;
/**
 * ID of the integration
 * @member {String} id
 */
IntegrationConfiguration.prototype['id'] = undefined;
/**
 * The display name of the integration. Must be unique among all integrations configured for the given API version.
 * @member {String} name
 */
IntegrationConfiguration.prototype['name'] = undefined;



/**
 * Allowed values for the <code>basePathMode</code> property.
 * @enum {String}
 * @readonly
 */
AmazonIntegration['BasePathModeEnum'] = {

    /**
     * value: "ignore"
     * @const
     */
    "ignore": "ignore",

    /**
     * value: "prepend"
     * @const
     */
    "prepend": "prepend",

    /**
     * value: "split"
     * @const
     */
    "split": "split"
};


/**
 * Allowed values for the <code>deploymentMode</code> property.
 * @enum {String}
 * @readonly
 */
AmazonIntegration['DeploymentModeEnum'] = {

    /**
     * value: "on save"
     * @const
     */
    "on save": "on save",

    /**
     * value: "never"
     * @const
     */
    "never": "never"
};


/**
 * Allowed values for the <code>publishMode</code> property.
 * @enum {String}
 * @readonly
 */
AmazonIntegration['PublishModeEnum'] = {

    /**
     * value: "merge"
     * @const
     */
    "merge": "merge",

    /**
     * value: "overwrite"
     * @const
     */
    "overwrite": "overwrite"
};


/**
 * Allowed values for the <code>region</code> property.
 * @enum {String}
 * @readonly
 */
AmazonIntegration['RegionEnum'] = {

    /**
     * value: "us-east-1"
     * @const
     */
    "us-east-1": "us-east-1",

    /**
     * value: "us-east-2"
     * @const
     */
    "us-east-2": "us-east-2",

    /**
     * value: "us-west-1"
     * @const
     */
    "us-west-1": "us-west-1",

    /**
     * value: "us-west-2"
     * @const
     */
    "us-west-2": "us-west-2",

    /**
     * value: "eu-west-1"
     * @const
     */
    "eu-west-1": "eu-west-1",

    /**
     * value: "eu-west-2"
     * @const
     */
    "eu-west-2": "eu-west-2",

    /**
     * value: "eu-west-3"
     * @const
     */
    "eu-west-3": "eu-west-3",

    /**
     * value: "eu-central-1"
     * @const
     */
    "eu-central-1": "eu-central-1",

    /**
     * value: "eu-north-1"
     * @const
     */
    "eu-north-1": "eu-north-1",

    /**
     * value: "eu-south-1"
     * @const
     */
    "eu-south-1": "eu-south-1",

    /**
     * value: "ap-east-1"
     * @const
     */
    "ap-east-1": "ap-east-1",

    /**
     * value: "ap-south-1"
     * @const
     */
    "ap-south-1": "ap-south-1",

    /**
     * value: "ap-southeast-1"
     * @const
     */
    "ap-southeast-1": "ap-southeast-1",

    /**
     * value: "ap-southeast-2"
     * @const
     */
    "ap-southeast-2": "ap-southeast-2",

    /**
     * value: "ap-northeast-1"
     * @const
     */
    "ap-northeast-1": "ap-northeast-1",

    /**
     * value: "ap-northeast-2"
     * @const
     */
    "ap-northeast-2": "ap-northeast-2",

    /**
     * value: "sa-east-1"
     * @const
     */
    "sa-east-1": "sa-east-1",

    /**
     * value: "cn-north-1"
     * @const
     */
    "cn-north-1": "cn-north-1",

    /**
     * value: "cn-northwest-1"
     * @const
     */
    "cn-northwest-1": "cn-northwest-1",

    /**
     * value: "ca-central-1"
     * @const
     */
    "ca-central-1": "ca-central-1",

    /**
     * value: "me-south-1"
     * @const
     */
    "me-south-1": "me-south-1",

    /**
     * value: "af-south-1"
     * @const
     */
    "af-south-1": "af-south-1"
};



export default AmazonIntegration;

