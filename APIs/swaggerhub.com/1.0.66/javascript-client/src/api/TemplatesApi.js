/**
 * SwaggerHub Registry API
 * # Overview Use SwaggerHub Registry API to access, manage, and update the following resources in SwaggerHub, bypassing the web interface:   * APIs   * Domains   * Integrations   * Projects   * Templates   SwaggerHub also provides the [User Management API](https://app.swaggerhub.com/apis-docs/swagger-hub/user-management-api/) to get information about organizations and manage organization members.  # Base URL Use the following base URL for SwaggerHub SaaS:          http(s)://api.swaggerhub.com  **Note:** This documentation is for SwaggerHub SaaS. On-Premise customers should use the bundled API definition, which can be found at the URLs provided below.  Version 1.29.0 or later:      http(s)://SERVER/v1/openapi.yaml - YAML version     http(s)://SERVER/v1/openapi.json - JSON version  Earlier versions:      http(s)://SERVER/v1/swagger.yaml - YAML version     http(s)://SERVER/v1/swagger.json - JSON version  # Authentication Operations that update data or access private data require authentication using an API key. You can find your personal API key on the [API Keys](https://app.swaggerhub.com/settings/apiKey) page in your account settings. Send this key in the `Authorization` header when making requests to the Registry API:      Authorization: YOUR_API_KEY  To test API calls from this documentation page, click the **Authorize** button below and paste your API key there.  **Important:** Keep the API key secure and do not store it directly in your code. # Tools In addition to calling the Registry API directly, you can use the following tools to interact with the API from the command line or CI/CD pipeline:   * [SwaggerHub CLI](https://www.npmjs.com/package/swaggerhub-cli)   * [Maven plugin](https://github.com/swagger-api/swaggerhub-maven-plugin)  * [Gradle plugin](https://github.com/swagger-api/swaggerhub-gradle-plugin) 
 *
 * The version of the OpenAPI document: 1.0.66
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import ApisJson from '../model/ApisJson';
import ClosableComment from '../model/ClosableComment';
import CommentsBatch from '../model/CommentsBatch';
import ForkVersion from '../model/ForkVersion';
import LifecycleSettings from '../model/LifecycleSettings';
import TemplateWrapper from '../model/TemplateWrapper';
import VisibilitySettings from '../model/VisibilitySettings';

/**
* Templates service.
* @module api/TemplatesApi
* @version 1.0.66
*/
export default class TemplatesApi {

    /**
    * Constructs a new TemplatesApi. 
    * @alias module:api/TemplatesApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the deleteTemplate operation.
     * @callback module:api/TemplatesApi~deleteTemplateCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete a template
     * @param {String} owner API, domain, or template owner identifier (case-sensitive)
     * @param {String} templateId Template identifier
     * @param {module:api/TemplatesApi~deleteTemplateCallback} callback The callback function, accepting three arguments: error, data, response
     */
    deleteTemplate(owner, templateId, callback) {
      let postBody = null;
      // verify the required parameter 'owner' is set
      if (owner === undefined || owner === null) {
        throw new Error("Missing the required parameter 'owner' when calling deleteTemplate");
      }
      // verify the required parameter 'templateId' is set
      if (templateId === undefined || templateId === null) {
        throw new Error("Missing the required parameter 'templateId' when calling deleteTemplate");
      }

      let pathParams = {
        'owner': owner,
        'templateId': templateId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['TokenSecured'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/templates/{owner}/{templateId}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteTemplateVersion operation.
     * @callback module:api/TemplatesApi~deleteTemplateVersionCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete a particular version of a template
     * @param {String} owner API, domain, or template owner identifier (case-sensitive)
     * @param {String} templateId Template identifier
     * @param {String} version Version identifier
     * @param {module:api/TemplatesApi~deleteTemplateVersionCallback} callback The callback function, accepting three arguments: error, data, response
     */
    deleteTemplateVersion(owner, templateId, version, callback) {
      let postBody = null;
      // verify the required parameter 'owner' is set
      if (owner === undefined || owner === null) {
        throw new Error("Missing the required parameter 'owner' when calling deleteTemplateVersion");
      }
      // verify the required parameter 'templateId' is set
      if (templateId === undefined || templateId === null) {
        throw new Error("Missing the required parameter 'templateId' when calling deleteTemplateVersion");
      }
      // verify the required parameter 'version' is set
      if (version === undefined || version === null) {
        throw new Error("Missing the required parameter 'version' when calling deleteTemplateVersion");
      }

      let pathParams = {
        'owner': owner,
        'templateId': templateId,
        'version': version
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['TokenSecured'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/templates/{owner}/{templateId}/{version}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the forkTemplate operation.
     * @callback module:api/TemplatesApi~forkTemplateCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Create a fork for a template
     * @param {String} owner API, domain, or template owner identifier (case-sensitive)
     * @param {String} templateId Template identifier
     * @param {String} version Version identifier
     * @param {module:model/ForkVersion} body Fork version information
     * @param {module:api/TemplatesApi~forkTemplateCallback} callback The callback function, accepting three arguments: error, data, response
     */
    forkTemplate(owner, templateId, version, body, callback) {
      let postBody = body;
      // verify the required parameter 'owner' is set
      if (owner === undefined || owner === null) {
        throw new Error("Missing the required parameter 'owner' when calling forkTemplate");
      }
      // verify the required parameter 'templateId' is set
      if (templateId === undefined || templateId === null) {
        throw new Error("Missing the required parameter 'templateId' when calling forkTemplate");
      }
      // verify the required parameter 'version' is set
      if (version === undefined || version === null) {
        throw new Error("Missing the required parameter 'version' when calling forkTemplate");
      }
      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling forkTemplate");
      }

      let pathParams = {
        'owner': owner,
        'templateId': templateId,
        'version': version
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['TokenSecured'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/templates/{owner}/{templateId}/{version}/fork', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getTemplateComments operation.
     * @callback module:api/TemplatesApi~getTemplateCommentsCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/ClosableComment>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Return the list of comments for a template
     * @param {String} owner API, domain, or template owner identifier (case-sensitive)
     * @param {String} templateId Template identifier
     * @param {String} version Version identifier
     * @param {module:api/TemplatesApi~getTemplateCommentsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/ClosableComment>}
     */
    getTemplateComments(owner, templateId, version, callback) {
      let postBody = null;
      // verify the required parameter 'owner' is set
      if (owner === undefined || owner === null) {
        throw new Error("Missing the required parameter 'owner' when calling getTemplateComments");
      }
      // verify the required parameter 'templateId' is set
      if (templateId === undefined || templateId === null) {
        throw new Error("Missing the required parameter 'templateId' when calling getTemplateComments");
      }
      // verify the required parameter 'version' is set
      if (version === undefined || version === null) {
        throw new Error("Missing the required parameter 'version' when calling getTemplateComments");
      }

      let pathParams = {
        'owner': owner,
        'templateId': templateId,
        'version': version
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['TokenSecured'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [ClosableComment];
      return this.apiClient.callApi(
        '/templates/{owner}/{templateId}/{version}/comments', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getTemplateDefinition operation.
     * @callback module:api/TemplatesApi~getTemplateDefinitionCallback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Retrieve a template definition
     * @param {String} owner API, domain, or template owner identifier (case-sensitive)
     * @param {String} templateId Template identifier
     * @param {String} version Version identifier
     * @param {Object} opts Optional parameters
     * @param {Boolean} [flatten = false)] If set to `true`, it creates models from inline schemas in OpenAPI definition. AsyncAPI definitions cannot be flattened.
     * @param {module:api/TemplatesApi~getTemplateDefinitionCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    getTemplateDefinition(owner, templateId, version, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'owner' is set
      if (owner === undefined || owner === null) {
        throw new Error("Missing the required parameter 'owner' when calling getTemplateDefinition");
      }
      // verify the required parameter 'templateId' is set
      if (templateId === undefined || templateId === null) {
        throw new Error("Missing the required parameter 'templateId' when calling getTemplateDefinition");
      }
      // verify the required parameter 'version' is set
      if (version === undefined || version === null) {
        throw new Error("Missing the required parameter 'version' when calling getTemplateDefinition");
      }

      let pathParams = {
        'owner': owner,
        'templateId': templateId,
        'version': version
      };
      let queryParams = {
        'flatten': opts['flatten']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['TokenSecured'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Object;
      return this.apiClient.callApi(
        '/templates/{owner}/{templateId}/{version}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getTemplateLifecycleSettings operation.
     * @callback module:api/TemplatesApi~getTemplateLifecycleSettingsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/LifecycleSettings} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Retrieve lifecycle settings for a template
     * @param {String} owner API, domain, or template owner identifier (case-sensitive)
     * @param {String} templateId Template identifier
     * @param {String} version Version identifier
     * @param {module:api/TemplatesApi~getTemplateLifecycleSettingsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/LifecycleSettings}
     */
    getTemplateLifecycleSettings(owner, templateId, version, callback) {
      let postBody = null;
      // verify the required parameter 'owner' is set
      if (owner === undefined || owner === null) {
        throw new Error("Missing the required parameter 'owner' when calling getTemplateLifecycleSettings");
      }
      // verify the required parameter 'templateId' is set
      if (templateId === undefined || templateId === null) {
        throw new Error("Missing the required parameter 'templateId' when calling getTemplateLifecycleSettings");
      }
      // verify the required parameter 'version' is set
      if (version === undefined || version === null) {
        throw new Error("Missing the required parameter 'version' when calling getTemplateLifecycleSettings");
      }

      let pathParams = {
        'owner': owner,
        'templateId': templateId,
        'version': version
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['TokenSecured'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = LifecycleSettings;
      return this.apiClient.callApi(
        '/templates/{owner}/{templateId}/{version}/settings/lifecycle', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getTemplatePrivateSettings operation.
     * @callback module:api/TemplatesApi~getTemplatePrivateSettingsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/VisibilitySettings} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Retrieve visibility settings for a template
     * @param {String} owner API, domain, or template owner identifier (case-sensitive)
     * @param {String} templateId Template identifier
     * @param {String} version Version identifier
     * @param {module:api/TemplatesApi~getTemplatePrivateSettingsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/VisibilitySettings}
     */
    getTemplatePrivateSettings(owner, templateId, version, callback) {
      let postBody = null;
      // verify the required parameter 'owner' is set
      if (owner === undefined || owner === null) {
        throw new Error("Missing the required parameter 'owner' when calling getTemplatePrivateSettings");
      }
      // verify the required parameter 'templateId' is set
      if (templateId === undefined || templateId === null) {
        throw new Error("Missing the required parameter 'templateId' when calling getTemplatePrivateSettings");
      }
      // verify the required parameter 'version' is set
      if (version === undefined || version === null) {
        throw new Error("Missing the required parameter 'version' when calling getTemplatePrivateSettings");
      }

      let pathParams = {
        'owner': owner,
        'templateId': templateId,
        'version': version
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['TokenSecured'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = VisibilitySettings;
      return this.apiClient.callApi(
        '/templates/{owner}/{templateId}/{version}/settings/private', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getTemplateVersions operation.
     * @callback module:api/TemplatesApi~getTemplateVersionsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ApisJson} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Retrieve an APIs.json listing for all template versions for an owner and template
     * @param {String} owner API, domain, or template owner identifier (case-sensitive)
     * @param {String} templateId Template identifier
     * @param {module:api/TemplatesApi~getTemplateVersionsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ApisJson}
     */
    getTemplateVersions(owner, templateId, callback) {
      let postBody = null;
      // verify the required parameter 'owner' is set
      if (owner === undefined || owner === null) {
        throw new Error("Missing the required parameter 'owner' when calling getTemplateVersions");
      }
      // verify the required parameter 'templateId' is set
      if (templateId === undefined || templateId === null) {
        throw new Error("Missing the required parameter 'templateId' when calling getTemplateVersions");
      }

      let pathParams = {
        'owner': owner,
        'templateId': templateId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['TokenSecured'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ApisJson;
      return this.apiClient.callApi(
        '/templates/{owner}/{templateId}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getTemplates operation.
     * @callback module:api/TemplatesApi~getTemplatesCallback
     * @param {String} error Error message, if any.
     * @param {module:model/TemplateWrapper} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Retrieve a list of templates for an owner
     * @param {Object} opts Optional parameters
     * @param {String} [owner] Owner name
     * @param {module:api/TemplatesApi~getTemplatesCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/TemplateWrapper}
     */
    getTemplates(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'owner': opts['owner']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['TokenSecured'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = TemplateWrapper;
      return this.apiClient.callApi(
        '/templates', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the renameTemplate operation.
     * @callback module:api/TemplatesApi~renameTemplateCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Rename a template
     * @param {String} owner API, domain, or template owner identifier (case-sensitive)
     * @param {String} templateId Template identifier
     * @param {String} newName New name
     * @param {module:api/TemplatesApi~renameTemplateCallback} callback The callback function, accepting three arguments: error, data, response
     */
    renameTemplate(owner, templateId, newName, callback) {
      let postBody = null;
      // verify the required parameter 'owner' is set
      if (owner === undefined || owner === null) {
        throw new Error("Missing the required parameter 'owner' when calling renameTemplate");
      }
      // verify the required parameter 'templateId' is set
      if (templateId === undefined || templateId === null) {
        throw new Error("Missing the required parameter 'templateId' when calling renameTemplate");
      }
      // verify the required parameter 'newName' is set
      if (newName === undefined || newName === null) {
        throw new Error("Missing the required parameter 'newName' when calling renameTemplate");
      }

      let pathParams = {
        'owner': owner,
        'templateId': templateId
      };
      let queryParams = {
        'newName': newName
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['TokenSecured'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/templates/{owner}/{templateId}/rename', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the saveTemplateDefinition operation.
     * @callback module:api/TemplatesApi~saveTemplateDefinitionCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Create or update a template
     * Saves the provided template definition; the owner must match the token owner. The version will be extracted from the template definitions itself.
     * @param {String} owner API, domain, or template owner identifier (case-sensitive)
     * @param {String} templateId Template identifier
     * @param {String} body The template definition
     * @param {Object} opts Optional parameters
     * @param {Boolean} [isPrivate = false)] Defines whether the API or template has to be private
     * @param {String} [version] Template version to create or update. If omitted, the version will be taken from the `info.version` field in the definition.
     * @param {Boolean} [force] Force update
     * @param {String} [projectName] The project to add the API, domain, or template to
     * @param {module:api/TemplatesApi~saveTemplateDefinitionCallback} callback The callback function, accepting three arguments: error, data, response
     */
    saveTemplateDefinition(owner, templateId, body, opts, callback) {
      opts = opts || {};
      let postBody = body;
      // verify the required parameter 'owner' is set
      if (owner === undefined || owner === null) {
        throw new Error("Missing the required parameter 'owner' when calling saveTemplateDefinition");
      }
      // verify the required parameter 'templateId' is set
      if (templateId === undefined || templateId === null) {
        throw new Error("Missing the required parameter 'templateId' when calling saveTemplateDefinition");
      }
      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling saveTemplateDefinition");
      }

      let pathParams = {
        'owner': owner,
        'templateId': templateId
      };
      let queryParams = {
        'isPrivate': opts['isPrivate'],
        'version': opts['version'],
        'force': opts['force'],
        'projectName': opts['projectName']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['TokenSecured'];
      let contentTypes = ['application/json', 'application/yaml'];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/templates/{owner}/{templateId}', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the searchApisAndDomains_1 operation.
     * @callback module:api/TemplatesApi~searchApisAndDomains_1Callback
     * @param {String} error Error message, if any.
     * @param {module:model/ApisJson} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Retrieve a list of currently defined APIs, domains, and templates in APIs.json format
     * @param {Object} opts Optional parameters
     * @param {module:model/String} [specType = 'ANY')] Type of definitions to search: * API - APIs only * DOMAIN - domains only * TEMPLATE - templates only * ANY - APIs, domains, and templates 
     * @param {module:model/String} [visibility = 'ANY')] The visibility of a definition in SwaggerHub: * PUBLIC - can be viewed by anyone * PRIVATE - can only be viewed by you or your organization and those that you are collaborating with or have shared it with * ANY - either PUBLIC or PRIVATE 
     * @param {module:model/String} [state = 'ALL')] Matches against published state of the spec: * UNPUBLISHED - spec is a draft, a work in progress * PUBLISHED - spec is a stable version ready for consuming from client applications * ANY - either PUBLISHED or UNPUBLISHED 
     * @param {String} [owner] API or domain owner. Can be username or organization name. Case-sensitive.
     * @param {String} [query] Free text query to match
     * @param {Number} [page = 0)] Page to return
     * @param {Number} [limit = 10)] Number of results per page (1 .. 100)
     * @param {module:model/String} [sort = 'NAME')] Sort criteria of result set: * NAME * UPDATED * CREATED * OWNER * BEST_MATCH - by relevance * TITLE - by `info.title` 
     * @param {module:model/String} [order = 'ASC')] Sort order
     * @param {module:api/TemplatesApi~searchApisAndDomains_1Callback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ApisJson}
     */
    searchApisAndDomains_1(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'specType': opts['specType'],
        'visibility': opts['visibility'],
        'state': opts['state'],
        'owner': opts['owner'],
        'query': opts['query'],
        'page': opts['page'],
        'limit': opts['limit'],
        'sort': opts['sort'],
        'order': opts['order']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['TokenSecured'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ApisJson;
      return this.apiClient.callApi(
        '/specs', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the setTemplateLifecycleSettings operation.
     * @callback module:api/TemplatesApi~setTemplateLifecycleSettingsCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update lifecycle settings for a template
     * @param {String} owner API, domain, or template owner identifier (case-sensitive)
     * @param {String} templateId Template identifier
     * @param {String} version Version identifier
     * @param {module:model/LifecycleSettings} body Fork version information
     * @param {Object} opts Optional parameters
     * @param {Boolean} [force] Force update
     * @param {module:api/TemplatesApi~setTemplateLifecycleSettingsCallback} callback The callback function, accepting three arguments: error, data, response
     */
    setTemplateLifecycleSettings(owner, templateId, version, body, opts, callback) {
      opts = opts || {};
      let postBody = body;
      // verify the required parameter 'owner' is set
      if (owner === undefined || owner === null) {
        throw new Error("Missing the required parameter 'owner' when calling setTemplateLifecycleSettings");
      }
      // verify the required parameter 'templateId' is set
      if (templateId === undefined || templateId === null) {
        throw new Error("Missing the required parameter 'templateId' when calling setTemplateLifecycleSettings");
      }
      // verify the required parameter 'version' is set
      if (version === undefined || version === null) {
        throw new Error("Missing the required parameter 'version' when calling setTemplateLifecycleSettings");
      }
      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling setTemplateLifecycleSettings");
      }

      let pathParams = {
        'owner': owner,
        'templateId': templateId,
        'version': version
      };
      let queryParams = {
        'force': opts['force']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['TokenSecured'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/templates/{owner}/{templateId}/{version}/settings/lifecycle', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the setTemplatePrivateSettings operation.
     * @callback module:api/TemplatesApi~setTemplatePrivateSettingsCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update visibility settings for a template
     * @param {String} owner API, domain, or template owner identifier (case-sensitive)
     * @param {String} templateId Template identifier
     * @param {String} version Version identifier
     * @param {module:model/VisibilitySettings} body Private settings
     * @param {module:api/TemplatesApi~setTemplatePrivateSettingsCallback} callback The callback function, accepting three arguments: error, data, response
     */
    setTemplatePrivateSettings(owner, templateId, version, body, callback) {
      let postBody = body;
      // verify the required parameter 'owner' is set
      if (owner === undefined || owner === null) {
        throw new Error("Missing the required parameter 'owner' when calling setTemplatePrivateSettings");
      }
      // verify the required parameter 'templateId' is set
      if (templateId === undefined || templateId === null) {
        throw new Error("Missing the required parameter 'templateId' when calling setTemplatePrivateSettings");
      }
      // verify the required parameter 'version' is set
      if (version === undefined || version === null) {
        throw new Error("Missing the required parameter 'version' when calling setTemplatePrivateSettings");
      }
      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling setTemplatePrivateSettings");
      }

      let pathParams = {
        'owner': owner,
        'templateId': templateId,
        'version': version
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/templates/{owner}/{templateId}/{version}/settings/private', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the updateTemplateComments operation.
     * @callback module:api/TemplatesApi~updateTemplateCommentsCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update the list of comments for a template
     * @param {String} owner API, domain, or template owner identifier (case-sensitive)
     * @param {String} templateId Template identifier
     * @param {String} version Version identifier
     * @param {module:model/CommentsBatch} body 
     * @param {module:api/TemplatesApi~updateTemplateCommentsCallback} callback The callback function, accepting three arguments: error, data, response
     */
    updateTemplateComments(owner, templateId, version, body, callback) {
      let postBody = body;
      // verify the required parameter 'owner' is set
      if (owner === undefined || owner === null) {
        throw new Error("Missing the required parameter 'owner' when calling updateTemplateComments");
      }
      // verify the required parameter 'templateId' is set
      if (templateId === undefined || templateId === null) {
        throw new Error("Missing the required parameter 'templateId' when calling updateTemplateComments");
      }
      // verify the required parameter 'version' is set
      if (version === undefined || version === null) {
        throw new Error("Missing the required parameter 'version' when calling updateTemplateComments");
      }
      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling updateTemplateComments");
      }

      let pathParams = {
        'owner': owner,
        'templateId': templateId,
        'version': version
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['TokenSecured'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/templates/{owner}/{templateId}/{version}/comments/batch', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
