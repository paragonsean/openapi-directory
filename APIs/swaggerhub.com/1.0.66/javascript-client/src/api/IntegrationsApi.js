/**
 * SwaggerHub Registry API
 * # Overview Use SwaggerHub Registry API to access, manage, and update the following resources in SwaggerHub, bypassing the web interface:   * APIs   * Domains   * Integrations   * Projects   * Templates   SwaggerHub also provides the [User Management API](https://app.swaggerhub.com/apis-docs/swagger-hub/user-management-api/) to get information about organizations and manage organization members.  # Base URL Use the following base URL for SwaggerHub SaaS:          http(s)://api.swaggerhub.com  **Note:** This documentation is for SwaggerHub SaaS. On-Premise customers should use the bundled API definition, which can be found at the URLs provided below.  Version 1.29.0 or later:      http(s)://SERVER/v1/openapi.yaml - YAML version     http(s)://SERVER/v1/openapi.json - JSON version  Earlier versions:      http(s)://SERVER/v1/swagger.yaml - YAML version     http(s)://SERVER/v1/swagger.json - JSON version  # Authentication Operations that update data or access private data require authentication using an API key. You can find your personal API key on the [API Keys](https://app.swaggerhub.com/settings/apiKey) page in your account settings. Send this key in the `Authorization` header when making requests to the Registry API:      Authorization: YOUR_API_KEY  To test API calls from this documentation page, click the **Authorize** button below and paste your API key there.  **Important:** Keep the API key secure and do not store it directly in your code. # Tools In addition to calling the Registry API directly, you can use the following tools to interact with the API from the command line or CI/CD pipeline:   * [SwaggerHub CLI](https://www.npmjs.com/package/swaggerhub-cli)   * [Maven plugin](https://github.com/swagger-api/swaggerhub-maven-plugin)  * [Gradle plugin](https://github.com/swagger-api/swaggerhub-gradle-plugin) 
 *
 * The version of the OpenAPI document: 1.0.66
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import IntegrationConfiguration from '../model/IntegrationConfiguration';
import IntegrationConfigurations from '../model/IntegrationConfigurations';

/**
* Integrations service.
* @module api/IntegrationsApi
* @version 1.0.66
*/
export default class IntegrationsApi {

    /**
    * Constructs a new IntegrationsApi. 
    * @alias module:api/IntegrationsApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the createIntegration operation.
     * @callback module:api/IntegrationsApi~createIntegrationCallback
     * @param {String} error Error message, if any.
     * @param {module:model/IntegrationConfiguration} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Create an integration for the specified API and version
     * Use this operation to configure an integration for a specific API version. The integration type is determined by which object is provided in the request body (specifically, by the `configType` value).  For a list of fields that need to be provided in the request body, see the descriptions of the following objects in the \"Models\" section at the bottom of API docs:   * `AmazonApiGatewayIntegration`  * `AmazonApiGatewayLambdaIntegration`  * `ApigeeEdgeIntegration`  * `AutoMockingIntegration`  * `AzureApiManagementIntegration`  * `AzureDevopsServicesIntegration`  * `BitbucketCloudIntegration`  * `BitbucketServerIntegration`  * `GitHubIntegration`  * `GitHubEnterpriseIntegration`  * `GitLabIntegration`  * `IBMApiConnectIntegration`  * `WebhookIntegration`  **Notes:**   * The integration `name` must be unique among all integrations configured for the given API version.   * If `target` is the YAMl/JSON definition, you must specify the `outputFile`.   * If `syncMethod`=_Advanced Sync_, you must specify a non-empty list of either `providedPaths` or `managedPaths` (or both). If you are not sure which paths to use, use `providedPaths`=`[\"*\"]`.   * The operation does not validate the repository details and access tokens.
     * @param {String} owner API owner (organization or user, case-sensitive)
     * @param {String} api API name (case-sensitive)
     * @param {String} version Version identifier
     * @param {Object.<String, Object>} integrationTypeConfiguration Can be one of the following objects:  | `configType` value        | Object | | ------------------------- | ------ | | AMAZON_API_GATEWAY        | AmazonApiGatewayIntegration | | AMAZON_API_GATEWAY_LAMBDA | AmazonApiGatewayLambdaIntegration | | API_AUTO_MOCKING          | AutoMockingIntegration | | APIGEE_EDGE               | ApigeeEdgeIntegration | | AZURE_API_MANAGEMENT      | AzureApiManagementIntegration | | AZURE_DEVOPS_SERVICES     | AzureDevopsServicesIntegration | | BITBUCKET_CLOUD           | BitbucketCloudIntegration | | BITBUCKET_SERVER          | BitbucketServerIntegration | | GITHUB                    | GitHubIntegration | | GITHUB_ENTERPRISE         | GitHubEnterpriseIntegration | | GITLAB                    | GitLabIntegration | | IBM_API_CONNECT           | IBMApiConnectIntegration | | WEBHOOK                   | WebhookIntegration |  For more examples, see the JSON files in this repository: https://github.com/SmartBear/swaggerhub-cli/tree/master/examples/integrations
     * @param {module:api/IntegrationsApi~createIntegrationCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/IntegrationConfiguration}
     */
    createIntegration(owner, api, version, integrationTypeConfiguration, callback) {
      let postBody = integrationTypeConfiguration;
      // verify the required parameter 'owner' is set
      if (owner === undefined || owner === null) {
        throw new Error("Missing the required parameter 'owner' when calling createIntegration");
      }
      // verify the required parameter 'api' is set
      if (api === undefined || api === null) {
        throw new Error("Missing the required parameter 'api' when calling createIntegration");
      }
      // verify the required parameter 'version' is set
      if (version === undefined || version === null) {
        throw new Error("Missing the required parameter 'version' when calling createIntegration");
      }
      // verify the required parameter 'integrationTypeConfiguration' is set
      if (integrationTypeConfiguration === undefined || integrationTypeConfiguration === null) {
        throw new Error("Missing the required parameter 'integrationTypeConfiguration' when calling createIntegration");
      }

      let pathParams = {
        'owner': owner,
        'api': api,
        'version': version
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['TokenSecured'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = IntegrationConfiguration;
      return this.apiClient.callApi(
        '/apis/{owner}/{api}/{version}/integrations', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteIntegration operation.
     * @callback module:api/IntegrationsApi~deleteIntegrationCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete an integration
     * Delete an existing integration specified by its ID.
     * @param {String} owner API owner (organization or user, case-sensitive)
     * @param {String} api API name (case-sensitive)
     * @param {String} version Version identifier
     * @param {String} integrationId Integration ID (case-sensitive). To get the available integration IDs, use `GET /apis/{owner}/{api}/{version}/integrations`
     * @param {module:api/IntegrationsApi~deleteIntegrationCallback} callback The callback function, accepting three arguments: error, data, response
     */
    deleteIntegration(owner, api, version, integrationId, callback) {
      let postBody = null;
      // verify the required parameter 'owner' is set
      if (owner === undefined || owner === null) {
        throw new Error("Missing the required parameter 'owner' when calling deleteIntegration");
      }
      // verify the required parameter 'api' is set
      if (api === undefined || api === null) {
        throw new Error("Missing the required parameter 'api' when calling deleteIntegration");
      }
      // verify the required parameter 'version' is set
      if (version === undefined || version === null) {
        throw new Error("Missing the required parameter 'version' when calling deleteIntegration");
      }
      // verify the required parameter 'integrationId' is set
      if (integrationId === undefined || integrationId === null) {
        throw new Error("Missing the required parameter 'integrationId' when calling deleteIntegration");
      }

      let pathParams = {
        'owner': owner,
        'api': api,
        'version': version,
        'integrationId': integrationId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['TokenSecured'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/apis/{owner}/{api}/{version}/integrations/{integrationId}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the executeIntegration operation.
     * @callback module:api/IntegrationsApi~executeIntegrationCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Run an integration
     * Use this operation to trigger an existing integration.  Source control integrations push to (not pull from) the configured repository and branch. You can optionally provide a custom commit message.  **Note:** Webhooks cannot be triggered by this operation, they are only triggered when an API is saved or published. An attempt to trigger a webhook will return status code 400.
     * @param {String} owner API owner (organization or user, case-sensitive)
     * @param {String} api API name (case-sensitive)
     * @param {String} version Version identifier
     * @param {String} integrationId Integration ID (case-sensitive). To get the available integration IDs, use `GET /apis/{owner}/{api}/{version}/integrations`
     * @param {Object} opts Optional parameters
     * @param {String} [commitMessage] Commit message for source control integrations
     * @param {module:api/IntegrationsApi~executeIntegrationCallback} callback The callback function, accepting three arguments: error, data, response
     */
    executeIntegration(owner, api, version, integrationId, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'owner' is set
      if (owner === undefined || owner === null) {
        throw new Error("Missing the required parameter 'owner' when calling executeIntegration");
      }
      // verify the required parameter 'api' is set
      if (api === undefined || api === null) {
        throw new Error("Missing the required parameter 'api' when calling executeIntegration");
      }
      // verify the required parameter 'version' is set
      if (version === undefined || version === null) {
        throw new Error("Missing the required parameter 'version' when calling executeIntegration");
      }
      // verify the required parameter 'integrationId' is set
      if (integrationId === undefined || integrationId === null) {
        throw new Error("Missing the required parameter 'integrationId' when calling executeIntegration");
      }

      let pathParams = {
        'owner': owner,
        'api': api,
        'version': version,
        'integrationId': integrationId
      };
      let queryParams = {
        'commitMessage': opts['commitMessage']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['TokenSecured'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/apis/{owner}/{api}/{version}/integrations/{integrationId}/execute', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getIntegrationById operation.
     * @callback module:api/IntegrationsApi~getIntegrationByIdCallback
     * @param {String} error Error message, if any.
     * @param {module:model/IntegrationConfiguration} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get integration settings
     * Returns the configuration of the specified integration. Access tokens and passwords are not returned for security reasons.
     * @param {String} owner API owner (organization or user, case-sensitive)
     * @param {String} api API name (case-sensitive)
     * @param {String} version Version identifier
     * @param {String} integrationId Integration ID (case-sensitive). To get the available integration IDs, use `GET /apis/{owner}/{api}/{version}/integrations`
     * @param {module:api/IntegrationsApi~getIntegrationByIdCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/IntegrationConfiguration}
     */
    getIntegrationById(owner, api, version, integrationId, callback) {
      let postBody = null;
      // verify the required parameter 'owner' is set
      if (owner === undefined || owner === null) {
        throw new Error("Missing the required parameter 'owner' when calling getIntegrationById");
      }
      // verify the required parameter 'api' is set
      if (api === undefined || api === null) {
        throw new Error("Missing the required parameter 'api' when calling getIntegrationById");
      }
      // verify the required parameter 'version' is set
      if (version === undefined || version === null) {
        throw new Error("Missing the required parameter 'version' when calling getIntegrationById");
      }
      // verify the required parameter 'integrationId' is set
      if (integrationId === undefined || integrationId === null) {
        throw new Error("Missing the required parameter 'integrationId' when calling getIntegrationById");
      }

      let pathParams = {
        'owner': owner,
        'api': api,
        'version': version,
        'integrationId': integrationId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['TokenSecured'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = IntegrationConfiguration;
      return this.apiClient.callApi(
        '/apis/{owner}/{api}/{version}/integrations/{integrationId}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getIntegrations operation.
     * @callback module:api/IntegrationsApi~getIntegrationsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/IntegrationConfigurations} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get all integrations configured for the specified API version
     * The returned information includes integration types, names, unique IDs, and enabled/disabled status.  **Note:** The following integration types are currently not returned: Amazon API Gateway Lambda Sync, Apigee Edge, Azure API Management, IBM API Connect.
     * @param {String} owner API owner (organization or user, case-sensitive)
     * @param {String} api API name (case-sensitive)
     * @param {String} version Version identifier
     * @param {module:api/IntegrationsApi~getIntegrationsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/IntegrationConfigurations}
     */
    getIntegrations(owner, api, version, callback) {
      let postBody = null;
      // verify the required parameter 'owner' is set
      if (owner === undefined || owner === null) {
        throw new Error("Missing the required parameter 'owner' when calling getIntegrations");
      }
      // verify the required parameter 'api' is set
      if (api === undefined || api === null) {
        throw new Error("Missing the required parameter 'api' when calling getIntegrations");
      }
      // verify the required parameter 'version' is set
      if (version === undefined || version === null) {
        throw new Error("Missing the required parameter 'version' when calling getIntegrations");
      }

      let pathParams = {
        'owner': owner,
        'api': api,
        'version': version
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['TokenSecured'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = IntegrationConfigurations;
      return this.apiClient.callApi(
        '/apis/{owner}/{api}/{version}/integrations', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the patchIntegration operation.
     * @callback module:api/IntegrationsApi~patchIntegrationCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Partially update integration settings
     * Use this operation to partially update integration settings for the specified API and integration ID. For example, enable or disable an integration, or specify a new access token.  Only the fields provided in the request body will be updated; other settings will remain unchanged. For a list of fields that can be updated, see the following objects in the \"Models\" section at the bottom of API docs:   * `AmazonApiGatewayIntegration`  * `AmazonApiGatewayLambdaIntegration`  * `ApigeeEdgeIntegration`  * `AutoMockingIntegration`  * `AzureApiManagementIntegration`  * `AzureDevopsServicesIntegration`  * `BitbucketCloudIntegration`  * `BitbucketServerIntegration`  * `GitHubIntegration`  * `GitHubEnterpriseIntegration`  * `GitLabIntegration`  * `IBMApiConnectIntegration`  * `WebhookIntegration`  **Notes:**   * `configType` (integration type) cannot be changed.   * If updating the integration `name`, make sure the new name is unique among all integrations configured for the given API version.   * If you change `target` to the YAMl/JSON definition, you must also specify the `outputFile`.   * If you change `syncMethod` to _Advanced Sync_, you must also specify a non-empty list of either `providedPaths` or `managedPaths` (or both). If you are not sure which paths to use, use `providedPaths`=`[\"*\"]`.   * The update operation does not validate the repository details and access tokens.
     * @param {String} owner API owner (organization or user, case-sensitive)
     * @param {String} api API name (case-sensitive)
     * @param {String} version Version identifier
     * @param {String} integrationId Integration ID (case-sensitive). To get the available integration IDs, use `GET /apis/{owner}/{api}/{version}/integrations`
     * @param {Object.<String, Object>} integrationTypeConfiguration An object that contains the integration parameters you want to update
     * @param {module:api/IntegrationsApi~patchIntegrationCallback} callback The callback function, accepting three arguments: error, data, response
     */
    patchIntegration(owner, api, version, integrationId, integrationTypeConfiguration, callback) {
      let postBody = integrationTypeConfiguration;
      // verify the required parameter 'owner' is set
      if (owner === undefined || owner === null) {
        throw new Error("Missing the required parameter 'owner' when calling patchIntegration");
      }
      // verify the required parameter 'api' is set
      if (api === undefined || api === null) {
        throw new Error("Missing the required parameter 'api' when calling patchIntegration");
      }
      // verify the required parameter 'version' is set
      if (version === undefined || version === null) {
        throw new Error("Missing the required parameter 'version' when calling patchIntegration");
      }
      // verify the required parameter 'integrationId' is set
      if (integrationId === undefined || integrationId === null) {
        throw new Error("Missing the required parameter 'integrationId' when calling patchIntegration");
      }
      // verify the required parameter 'integrationTypeConfiguration' is set
      if (integrationTypeConfiguration === undefined || integrationTypeConfiguration === null) {
        throw new Error("Missing the required parameter 'integrationTypeConfiguration' when calling patchIntegration");
      }

      let pathParams = {
        'owner': owner,
        'api': api,
        'version': version,
        'integrationId': integrationId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['TokenSecured'];
      let contentTypes = ['application/json'];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/apis/{owner}/{api}/{version}/integrations/{integrationId}', 'PATCH',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the updateIntegration operation.
     * @callback module:api/IntegrationsApi~updateIntegrationCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update integration settings
     * Updates integration settings for the specified API and integration ID. The integration type is determined by which object is passed in the request body.  The request body must contain a **full representation** of an integration object. If you want to update just a few parameters, use the PATCH operation instead.  For a list of fields that need to be provided in the request body, see the descriptions of the following objects in the \"Models\" section at the bottom of API docs:   * `AmazonApiGatewayIntegration`  * `AmazonApiGatewayLambdaIntegration`  * `ApigeeEdgeIntegration`  * `AutoMockingIntegration`  * `AzureApiManagementIntegration`  * `AzureDevopsServicesIntegration`  * `BitbucketCloudIntegration`  * `BitbucketServerIntegration`  * `GitHubIntegration`  * `GitHubEnterpriseIntegration`  * `GitLabIntegration`  * `IBMApiConnectIntegration`  * `WebhookIntegration`  **Notes:**   * The integration `name` must be unique among all integrations configured for the given API version.   * If `target` is the YAMl/JSON definition, you must specify the `outputFile`.   * If `syncMethod`=_Advanced Sync_, you must specify a non-empty list of either `providedPaths` or `managedPaths` (or both). If you are not sure which paths to use, use `providedPaths`=`[\"*\"]`.   * The operation does not validate the repository details and access tokens.
     * @param {String} owner API owner (organization or user, case-sensitive)
     * @param {String} api API name (case-sensitive)
     * @param {String} version Version identifier
     * @param {String} integrationId Integration ID (case-sensitive). To get the available integration IDs, use `GET /apis/{owner}/{api}/{version}/integrations`
     * @param {Object.<String, Object>} integrationTypeConfiguration Can be one of the following objects:  | `configType` value        | Object | | ------------------------- | ------ | | AMAZON_API_GATEWAY        | AmazonApiGatewayIntegration | | AMAZON_API_GATEWAY_LAMBDA | AmazonApiGatewayLambdaIntegration | | API_AUTO_MOCKING          | AutoMockingIntegration | | APIGEE_EDGE               | ApigeeEdgeIntegration | | AZURE_API_MANAGEMENT      | AzureApiManagementIntegration | | AZURE_DEVOPS_SERVICES     | AzureDevopsServicesIntegration | | BITBUCKET_CLOUD           | BitbucketCloudIntegration | | BITBUCKET_SERVER          | BitbucketServerIntegration | | GITHUB                    | GitHubIntegration | | GITHUB_ENTERPRISE         | GitHubEnterpriseIntegration | | GITLAB                    | GitLabIntegration | | IBM_API_CONNECT           | IBMApiConnectIntegration | | WEBHOOK                   | WebhookIntegration |  For more examples, see the JSON files in this repository: https://github.com/SmartBear/swaggerhub-cli/tree/master/examples/integrations
     * @param {module:api/IntegrationsApi~updateIntegrationCallback} callback The callback function, accepting three arguments: error, data, response
     */
    updateIntegration(owner, api, version, integrationId, integrationTypeConfiguration, callback) {
      let postBody = integrationTypeConfiguration;
      // verify the required parameter 'owner' is set
      if (owner === undefined || owner === null) {
        throw new Error("Missing the required parameter 'owner' when calling updateIntegration");
      }
      // verify the required parameter 'api' is set
      if (api === undefined || api === null) {
        throw new Error("Missing the required parameter 'api' when calling updateIntegration");
      }
      // verify the required parameter 'version' is set
      if (version === undefined || version === null) {
        throw new Error("Missing the required parameter 'version' when calling updateIntegration");
      }
      // verify the required parameter 'integrationId' is set
      if (integrationId === undefined || integrationId === null) {
        throw new Error("Missing the required parameter 'integrationId' when calling updateIntegration");
      }
      // verify the required parameter 'integrationTypeConfiguration' is set
      if (integrationTypeConfiguration === undefined || integrationTypeConfiguration === null) {
        throw new Error("Missing the required parameter 'integrationTypeConfiguration' when calling updateIntegration");
      }

      let pathParams = {
        'owner': owner,
        'api': api,
        'version': version,
        'integrationId': integrationId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['TokenSecured'];
      let contentTypes = ['application/json'];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/apis/{owner}/{api}/{version}/integrations/{integrationId}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
