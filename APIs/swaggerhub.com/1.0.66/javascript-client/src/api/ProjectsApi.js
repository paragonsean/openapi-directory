/**
 * SwaggerHub Registry API
 * # Overview Use SwaggerHub Registry API to access, manage, and update the following resources in SwaggerHub, bypassing the web interface:   * APIs   * Domains   * Integrations   * Projects   * Templates   SwaggerHub also provides the [User Management API](https://app.swaggerhub.com/apis-docs/swagger-hub/user-management-api/) to get information about organizations and manage organization members.  # Base URL Use the following base URL for SwaggerHub SaaS:          http(s)://api.swaggerhub.com  **Note:** This documentation is for SwaggerHub SaaS. On-Premise customers should use the bundled API definition, which can be found at the URLs provided below.  Version 1.29.0 or later:      http(s)://SERVER/v1/openapi.yaml - YAML version     http(s)://SERVER/v1/openapi.json - JSON version  Earlier versions:      http(s)://SERVER/v1/swagger.yaml - YAML version     http(s)://SERVER/v1/swagger.json - JSON version  # Authentication Operations that update data or access private data require authentication using an API key. You can find your personal API key on the [API Keys](https://app.swaggerhub.com/settings/apiKey) page in your account settings. Send this key in the `Authorization` header when making requests to the Registry API:      Authorization: YOUR_API_KEY  To test API calls from this documentation page, click the **Authorize** button below and paste your API key there.  **Important:** Keep the API key secure and do not store it directly in your code. # Tools In addition to calling the Registry API directly, you can use the following tools to interact with the API from the command line or CI/CD pipeline:   * [SwaggerHub CLI](https://www.npmjs.com/package/swaggerhub-cli)   * [Maven plugin](https://github.com/swagger-api/swaggerhub-maven-plugin)  * [Gradle plugin](https://github.com/swagger-api/swaggerhub-gradle-plugin) 
 *
 * The version of the OpenAPI document: 1.0.66
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import Project from '../model/Project';
import ProjectMemberList from '../model/ProjectMemberList';
import ProjectsJson from '../model/ProjectsJson';

/**
* Projects service.
* @module api/ProjectsApi
* @version 1.0.66
*/
export default class ProjectsApi {

    /**
    * Constructs a new ProjectsApi. 
    * @alias module:api/ProjectsApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the addSpecToProjectV2 operation.
     * @callback module:api/ProjectsApi~addSpecToProjectV2Callback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Add an API or domain to a project
     * Use this operation to add a single API or domain to the specified project.  To add multiple APIs or domains at once, use `PUT /projects/{owner}/{projectId}`.
     * @param {String} owner Organization name (case-sensitive)
     * @param {String} projectId Project name (case-sensitive)
     * @param {module:model/String} specType Definition type - `apis` or `domains`.
     * @param {String} name The name of an API or domain that you want to add to the project. Case-sensitive.
     * @param {module:api/ProjectsApi~addSpecToProjectV2Callback} callback The callback function, accepting three arguments: error, data, response
     */
    addSpecToProjectV2(owner, projectId, specType, name, callback) {
      let postBody = null;
      // verify the required parameter 'owner' is set
      if (owner === undefined || owner === null) {
        throw new Error("Missing the required parameter 'owner' when calling addSpecToProjectV2");
      }
      // verify the required parameter 'projectId' is set
      if (projectId === undefined || projectId === null) {
        throw new Error("Missing the required parameter 'projectId' when calling addSpecToProjectV2");
      }
      // verify the required parameter 'specType' is set
      if (specType === undefined || specType === null) {
        throw new Error("Missing the required parameter 'specType' when calling addSpecToProjectV2");
      }
      // verify the required parameter 'name' is set
      if (name === undefined || name === null) {
        throw new Error("Missing the required parameter 'name' when calling addSpecToProjectV2");
      }

      let pathParams = {
        'owner': owner,
        'projectId': projectId,
        'specType': specType,
        'name': name
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['TokenSecured'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/projects/{owner}/{projectId}/{specType}/{name}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the createProject operation.
     * @callback module:api/ProjectsApi~createProjectCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Create a project in an organization
     * @param {String} owner Organization name (case-sensitive)
     * @param {module:model/Project} projectRequest The project data. Properties that are not provided are set to empty values. 
     * @param {module:api/ProjectsApi~createProjectCallback} callback The callback function, accepting three arguments: error, data, response
     */
    createProject(owner, projectRequest, callback) {
      let postBody = projectRequest;
      // verify the required parameter 'owner' is set
      if (owner === undefined || owner === null) {
        throw new Error("Missing the required parameter 'owner' when calling createProject");
      }
      // verify the required parameter 'projectRequest' is set
      if (projectRequest === undefined || projectRequest === null) {
        throw new Error("Missing the required parameter 'projectRequest' when calling createProject");
      }

      let pathParams = {
        'owner': owner
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['TokenSecured'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/projects/{owner}', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteProjectV2 operation.
     * @callback module:api/ProjectsApi~deleteProjectV2Callback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete a project
     * @param {String} owner Organization name (case-sensitive)
     * @param {String} projectId Project name (case-sensitive)
     * @param {module:api/ProjectsApi~deleteProjectV2Callback} callback The callback function, accepting three arguments: error, data, response
     */
    deleteProjectV2(owner, projectId, callback) {
      let postBody = null;
      // verify the required parameter 'owner' is set
      if (owner === undefined || owner === null) {
        throw new Error("Missing the required parameter 'owner' when calling deleteProjectV2");
      }
      // verify the required parameter 'projectId' is set
      if (projectId === undefined || projectId === null) {
        throw new Error("Missing the required parameter 'projectId' when calling deleteProjectV2");
      }

      let pathParams = {
        'owner': owner,
        'projectId': projectId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['TokenSecured'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/projects/{owner}/{projectId}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getOrgProjectsV2 operation.
     * @callback module:api/ProjectsApi~getOrgProjectsV2Callback
     * @param {String} error Error message, if any.
     * @param {module:model/ProjectsJson} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get all projects of an organization
     * @param {String} owner Organization name (case-sensitive)
     * @param {Object} opts Optional parameters
     * @param {Boolean} [nameOnly = false)] Return the project information excluding APIs and domains
     * @param {Number} [page = 0)] Page to return
     * @param {Number} [limit = 10)] Number of results per page (1 .. 100)
     * @param {module:model/String} [order = 'ASC')] Sort order
     * @param {module:api/ProjectsApi~getOrgProjectsV2Callback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ProjectsJson}
     */
    getOrgProjectsV2(owner, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'owner' is set
      if (owner === undefined || owner === null) {
        throw new Error("Missing the required parameter 'owner' when calling getOrgProjectsV2");
      }

      let pathParams = {
        'owner': owner
      };
      let queryParams = {
        'nameOnly': opts['nameOnly'],
        'page': opts['page'],
        'limit': opts['limit'],
        'order': opts['order']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['TokenSecured'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ProjectsJson;
      return this.apiClient.callApi(
        '/projects/{owner}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getProjectMembersV2 operation.
     * @callback module:api/ProjectsApi~getProjectMembersV2Callback
     * @param {String} error Error message, if any.
     * @param {module:model/ProjectMemberList} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get project members
     * @param {String} owner Organization name (case-sensitive)
     * @param {String} projectId Project name (case-sensitive)
     * @param {module:api/ProjectsApi~getProjectMembersV2Callback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ProjectMemberList}
     */
    getProjectMembersV2(owner, projectId, callback) {
      let postBody = null;
      // verify the required parameter 'owner' is set
      if (owner === undefined || owner === null) {
        throw new Error("Missing the required parameter 'owner' when calling getProjectMembersV2");
      }
      // verify the required parameter 'projectId' is set
      if (projectId === undefined || projectId === null) {
        throw new Error("Missing the required parameter 'projectId' when calling getProjectMembersV2");
      }

      let pathParams = {
        'owner': owner,
        'projectId': projectId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['TokenSecured'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ProjectMemberList;
      return this.apiClient.callApi(
        '/projects/{owner}/{projectId}/members', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getProjectV2 operation.
     * @callback module:api/ProjectsApi~getProjectV2Callback
     * @param {String} error Error message, if any.
     * @param {module:model/Project} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get project information
     * @param {String} owner Organization name (case-sensitive)
     * @param {String} projectId Project name (case-sensitive)
     * @param {module:api/ProjectsApi~getProjectV2Callback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Project}
     */
    getProjectV2(owner, projectId, callback) {
      let postBody = null;
      // verify the required parameter 'owner' is set
      if (owner === undefined || owner === null) {
        throw new Error("Missing the required parameter 'owner' when calling getProjectV2");
      }
      // verify the required parameter 'projectId' is set
      if (projectId === undefined || projectId === null) {
        throw new Error("Missing the required parameter 'projectId' when calling getProjectV2");
      }

      let pathParams = {
        'owner': owner,
        'projectId': projectId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['TokenSecured'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Project;
      return this.apiClient.callApi(
        '/projects/{owner}/{projectId}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getUserProjects operation.
     * @callback module:api/ProjectsApi~getUserProjectsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ProjectsJson} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get all projects that a user has access to
     * Returns all projects that the authenticating user has access to. Organization owners get a list of all projects in owned organizations. Other members get a list of just the projects they are member of.
     * @param {Object} opts Optional parameters
     * @param {Boolean} [nameOnly = false)] Return the project information excluding APIs and domains
     * @param {Number} [page = 0)] Page to return
     * @param {Number} [limit = 10)] Number of results per page (1 .. 100)
     * @param {module:model/String} [sort = 'NAME')] Sort criteria or result set: * NAME * OWNER 
     * @param {module:model/String} [order = 'ASC')] Sort order
     * @param {module:api/ProjectsApi~getUserProjectsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ProjectsJson}
     */
    getUserProjects(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'nameOnly': opts['nameOnly'],
        'page': opts['page'],
        'limit': opts['limit'],
        'sort': opts['sort'],
        'order': opts['order']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['TokenSecured'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ProjectsJson;
      return this.apiClient.callApi(
        '/projects', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the saveProjectV2 operation.
     * @callback module:api/ProjectsApi~saveProjectV2Callback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update a project
     * Use this operation to update an existing project, for example, add or remove APIs, or change the project description.  When updating a project, the `apis` and `domains` lists _replace_ the existing ones. This means that to add new APIs and domains to a project, you need to send the `apis` and `domains` lists containing both the existing and new APIs and domains.  To add a single API or domain to a project, you can use `PUT /projects/{owner}/{projectId}/{specType}/{name}` instead.
     * @param {String} owner Organization name (case-sensitive)
     * @param {String} projectId Project name (case-sensitive)
     * @param {module:model/Project} projectRequest The project data. Properties that are not provided are set to empty values. 
     * @param {module:api/ProjectsApi~saveProjectV2Callback} callback The callback function, accepting three arguments: error, data, response
     */
    saveProjectV2(owner, projectId, projectRequest, callback) {
      let postBody = projectRequest;
      // verify the required parameter 'owner' is set
      if (owner === undefined || owner === null) {
        throw new Error("Missing the required parameter 'owner' when calling saveProjectV2");
      }
      // verify the required parameter 'projectId' is set
      if (projectId === undefined || projectId === null) {
        throw new Error("Missing the required parameter 'projectId' when calling saveProjectV2");
      }
      // verify the required parameter 'projectRequest' is set
      if (projectRequest === undefined || projectRequest === null) {
        throw new Error("Missing the required parameter 'projectRequest' when calling saveProjectV2");
      }

      let pathParams = {
        'owner': owner,
        'projectId': projectId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['TokenSecured'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/projects/{owner}/{projectId}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the updateProjectMembersV2 operation.
     * @callback module:api/ProjectsApi~updateProjectMembersV2Callback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update a project's members list
     * When updating a project, the `members` list _replaces_ the existing one. This means that to add new members to a project, you need to send the `members` list containing both the existing and new members. 
     * @param {String} owner Organization name (case-sensitive)
     * @param {String} projectId Project name (case-sensitive)
     * @param {module:model/ProjectMemberList} projectMemberList A list of users and teams to add to the project
     * @param {module:api/ProjectsApi~updateProjectMembersV2Callback} callback The callback function, accepting three arguments: error, data, response
     */
    updateProjectMembersV2(owner, projectId, projectMemberList, callback) {
      let postBody = projectMemberList;
      // verify the required parameter 'owner' is set
      if (owner === undefined || owner === null) {
        throw new Error("Missing the required parameter 'owner' when calling updateProjectMembersV2");
      }
      // verify the required parameter 'projectId' is set
      if (projectId === undefined || projectId === null) {
        throw new Error("Missing the required parameter 'projectId' when calling updateProjectMembersV2");
      }
      // verify the required parameter 'projectMemberList' is set
      if (projectMemberList === undefined || projectMemberList === null) {
        throw new Error("Missing the required parameter 'projectMemberList' when calling updateProjectMembersV2");
      }

      let pathParams = {
        'owner': owner,
        'projectId': projectId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['TokenSecured'];
      let contentTypes = ['application/json'];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/projects/{owner}/{projectId}/members', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
