/**
 * SwaggerHub Registry API
 * # Overview Use SwaggerHub Registry API to access, manage, and update the following resources in SwaggerHub, bypassing the web interface:   * APIs   * Domains   * Integrations   * Projects   * Templates   SwaggerHub also provides the [User Management API](https://app.swaggerhub.com/apis-docs/swagger-hub/user-management-api/) to get information about organizations and manage organization members.  # Base URL Use the following base URL for SwaggerHub SaaS:          http(s)://api.swaggerhub.com  **Note:** This documentation is for SwaggerHub SaaS. On-Premise customers should use the bundled API definition, which can be found at the URLs provided below.  Version 1.29.0 or later:      http(s)://SERVER/v1/openapi.yaml - YAML version     http(s)://SERVER/v1/openapi.json - JSON version  Earlier versions:      http(s)://SERVER/v1/swagger.yaml - YAML version     http(s)://SERVER/v1/swagger.json - JSON version  # Authentication Operations that update data or access private data require authentication using an API key. You can find your personal API key on the [API Keys](https://app.swaggerhub.com/settings/apiKey) page in your account settings. Send this key in the `Authorization` header when making requests to the Registry API:      Authorization: YOUR_API_KEY  To test API calls from this documentation page, click the **Authorize** button below and paste your API key there.  **Important:** Keep the API key secure and do not store it directly in your code. # Tools In addition to calling the Registry API directly, you can use the following tools to interact with the API from the command line or CI/CD pipeline:   * [SwaggerHub CLI](https://www.npmjs.com/package/swaggerhub-cli)   * [Maven plugin](https://github.com/swagger-api/swaggerhub-maven-plugin)  * [Gradle plugin](https://github.com/swagger-api/swaggerhub-gradle-plugin) 
 *
 * The version of the OpenAPI document: 1.0.66
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import ApisJson from '../model/ApisJson';
import ClosableComment from '../model/ClosableComment';
import ClosableCommentPatch from '../model/ClosableCommentPatch';
import Comment from '../model/Comment';
import CommentPatch from '../model/CommentPatch';
import CommentsBatch from '../model/CommentsBatch';
import DefaultVersion from '../model/DefaultVersion';
import ForkVersion from '../model/ForkVersion';
import LifecycleSettings from '../model/LifecycleSettings';
import NewComment from '../model/NewComment';
import NewReply from '../model/NewReply';
import NewVersion from '../model/NewVersion';
import VisibilitySettings from '../model/VisibilitySettings';

/**
* Domains service.
* @module api/DomainsApi
* @version 1.0.66
*/
export default class DomainsApi {

    /**
    * Constructs a new DomainsApi. 
    * @alias module:api/DomainsApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the addDomainCommentReplyV2 operation.
     * @callback module:api/DomainsApi~addDomainCommentReplyV2Callback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/Comment>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Reply to a comment
     * @param {String} owner Domain owner (organization or user, case-sensitive)
     * @param {String} domain Domain name (case-sensitive)
     * @param {String} version Version identifier
     * @param {String} comment Comment identifier
     * @param {module:model/NewReply} body 
     * @param {module:api/DomainsApi~addDomainCommentReplyV2Callback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/Comment>}
     */
    addDomainCommentReplyV2(owner, domain, version, comment, body, callback) {
      let postBody = body;
      // verify the required parameter 'owner' is set
      if (owner === undefined || owner === null) {
        throw new Error("Missing the required parameter 'owner' when calling addDomainCommentReplyV2");
      }
      // verify the required parameter 'domain' is set
      if (domain === undefined || domain === null) {
        throw new Error("Missing the required parameter 'domain' when calling addDomainCommentReplyV2");
      }
      // verify the required parameter 'version' is set
      if (version === undefined || version === null) {
        throw new Error("Missing the required parameter 'version' when calling addDomainCommentReplyV2");
      }
      // verify the required parameter 'comment' is set
      if (comment === undefined || comment === null) {
        throw new Error("Missing the required parameter 'comment' when calling addDomainCommentReplyV2");
      }
      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling addDomainCommentReplyV2");
      }

      let pathParams = {
        'owner': owner,
        'domain': domain,
        'version': version,
        'comment': comment
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['TokenSecured'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [Comment];
      return this.apiClient.callApi(
        '/domains/{owner}/{domain}/{version}/comments/{comment}/replies', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the addDomainCommentV2 operation.
     * @callback module:api/DomainsApi~addDomainCommentV2Callback
     * @param {String} error Error message, if any.
     * @param {module:model/ClosableComment} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Add a new comment
     * @param {String} owner Domain owner (organization or user, case-sensitive)
     * @param {String} domain Domain name (case-sensitive)
     * @param {String} version Version identifier
     * @param {module:model/NewComment} body 
     * @param {module:api/DomainsApi~addDomainCommentV2Callback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ClosableComment}
     */
    addDomainCommentV2(owner, domain, version, body, callback) {
      let postBody = body;
      // verify the required parameter 'owner' is set
      if (owner === undefined || owner === null) {
        throw new Error("Missing the required parameter 'owner' when calling addDomainCommentV2");
      }
      // verify the required parameter 'domain' is set
      if (domain === undefined || domain === null) {
        throw new Error("Missing the required parameter 'domain' when calling addDomainCommentV2");
      }
      // verify the required parameter 'version' is set
      if (version === undefined || version === null) {
        throw new Error("Missing the required parameter 'version' when calling addDomainCommentV2");
      }
      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling addDomainCommentV2");
      }

      let pathParams = {
        'owner': owner,
        'domain': domain,
        'version': version
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['TokenSecured'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ClosableComment;
      return this.apiClient.callApi(
        '/domains/{owner}/{domain}/{version}/comments', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the cloneDomain operation.
     * @callback module:api/DomainsApi~cloneDomainCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Create a new domain version
     * Use this operation to clone an existing domain version as a new version.  Note that the new version is not automatically set as the default version.
     * @param {String} owner Domain owner (organization or user, case-sensitive)
     * @param {String} domain Domain name (case-sensitive)
     * @param {String} version The version to clone (case-sensitive)
     * @param {module:model/NewVersion} newVersion An object that contains the new version number and other parameters. The version number must be in the format described in the [documentation](https://support.smartbear.com/swaggerhub/docs/apis/versioning.html#format).
     * @param {module:api/DomainsApi~cloneDomainCallback} callback The callback function, accepting three arguments: error, data, response
     */
    cloneDomain(owner, domain, version, newVersion, callback) {
      let postBody = newVersion;
      // verify the required parameter 'owner' is set
      if (owner === undefined || owner === null) {
        throw new Error("Missing the required parameter 'owner' when calling cloneDomain");
      }
      // verify the required parameter 'domain' is set
      if (domain === undefined || domain === null) {
        throw new Error("Missing the required parameter 'domain' when calling cloneDomain");
      }
      // verify the required parameter 'version' is set
      if (version === undefined || version === null) {
        throw new Error("Missing the required parameter 'version' when calling cloneDomain");
      }
      // verify the required parameter 'newVersion' is set
      if (newVersion === undefined || newVersion === null) {
        throw new Error("Missing the required parameter 'newVersion' when calling cloneDomain");
      }

      let pathParams = {
        'owner': owner,
        'domain': domain,
        'version': version
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['TokenSecured'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/domains/{owner}/{domain}/{version}/clone', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteDomain operation.
     * @callback module:api/DomainsApi~deleteDomainCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete a domain
     * @param {String} owner Domain owner (organization or user, case-sensitive)
     * @param {String} domain Domain name (case-sensitive)
     * @param {Object} opts Optional parameters
     * @param {Boolean} [force = false)] If this domain is referenced from other APIs and domains, this parameter must be `true`. Otherwise, the request will be rejected with status code 424.
     * @param {module:api/DomainsApi~deleteDomainCallback} callback The callback function, accepting three arguments: error, data, response
     */
    deleteDomain(owner, domain, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'owner' is set
      if (owner === undefined || owner === null) {
        throw new Error("Missing the required parameter 'owner' when calling deleteDomain");
      }
      // verify the required parameter 'domain' is set
      if (domain === undefined || domain === null) {
        throw new Error("Missing the required parameter 'domain' when calling deleteDomain");
      }

      let pathParams = {
        'owner': owner,
        'domain': domain
      };
      let queryParams = {
        'force': opts['force']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['TokenSecured'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/domains/{owner}/{domain}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteDomainCommentReplyV2 operation.
     * @callback module:api/DomainsApi~deleteDomainCommentReplyV2Callback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete a comment reply
     * @param {String} owner Domain owner (organization or user, case-sensitive)
     * @param {String} domain Domain name (case-sensitive)
     * @param {String} version Version identifier
     * @param {String} comment Comment identifier
     * @param {String} reply Reply identifier
     * @param {module:api/DomainsApi~deleteDomainCommentReplyV2Callback} callback The callback function, accepting three arguments: error, data, response
     */
    deleteDomainCommentReplyV2(owner, domain, version, comment, reply, callback) {
      let postBody = null;
      // verify the required parameter 'owner' is set
      if (owner === undefined || owner === null) {
        throw new Error("Missing the required parameter 'owner' when calling deleteDomainCommentReplyV2");
      }
      // verify the required parameter 'domain' is set
      if (domain === undefined || domain === null) {
        throw new Error("Missing the required parameter 'domain' when calling deleteDomainCommentReplyV2");
      }
      // verify the required parameter 'version' is set
      if (version === undefined || version === null) {
        throw new Error("Missing the required parameter 'version' when calling deleteDomainCommentReplyV2");
      }
      // verify the required parameter 'comment' is set
      if (comment === undefined || comment === null) {
        throw new Error("Missing the required parameter 'comment' when calling deleteDomainCommentReplyV2");
      }
      // verify the required parameter 'reply' is set
      if (reply === undefined || reply === null) {
        throw new Error("Missing the required parameter 'reply' when calling deleteDomainCommentReplyV2");
      }

      let pathParams = {
        'owner': owner,
        'domain': domain,
        'version': version,
        'comment': comment,
        'reply': reply
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['TokenSecured'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/domains/{owner}/{domain}/{version}/comments/{comment}/replies/{reply}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteDomainCommentV2 operation.
     * @callback module:api/DomainsApi~deleteDomainCommentV2Callback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete a comment
     * @param {String} owner Domain owner (organization or user, case-sensitive)
     * @param {String} domain Domain name (case-sensitive)
     * @param {String} version Version identifier
     * @param {String} comment Comment identifier
     * @param {module:api/DomainsApi~deleteDomainCommentV2Callback} callback The callback function, accepting three arguments: error, data, response
     */
    deleteDomainCommentV2(owner, domain, version, comment, callback) {
      let postBody = null;
      // verify the required parameter 'owner' is set
      if (owner === undefined || owner === null) {
        throw new Error("Missing the required parameter 'owner' when calling deleteDomainCommentV2");
      }
      // verify the required parameter 'domain' is set
      if (domain === undefined || domain === null) {
        throw new Error("Missing the required parameter 'domain' when calling deleteDomainCommentV2");
      }
      // verify the required parameter 'version' is set
      if (version === undefined || version === null) {
        throw new Error("Missing the required parameter 'version' when calling deleteDomainCommentV2");
      }
      // verify the required parameter 'comment' is set
      if (comment === undefined || comment === null) {
        throw new Error("Missing the required parameter 'comment' when calling deleteDomainCommentV2");
      }

      let pathParams = {
        'owner': owner,
        'domain': domain,
        'version': version,
        'comment': comment
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['TokenSecured'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/domains/{owner}/{domain}/{version}/comments/{comment}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteDomainVersion operation.
     * @callback module:api/DomainsApi~deleteDomainVersionCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete a domain version
     * @param {String} owner Domain owner (organization or user, case-sensitive)
     * @param {String} domain Domain name (case-sensitive)
     * @param {String} version Version identifier
     * @param {Object} opts Optional parameters
     * @param {Boolean} [force = false)] If this domain version is referenced from other APIs and domains, this parameter must be `true`. Otherwise, the request will be rejected with status code 424.
     * @param {module:api/DomainsApi~deleteDomainVersionCallback} callback The callback function, accepting three arguments: error, data, response
     */
    deleteDomainVersion(owner, domain, version, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'owner' is set
      if (owner === undefined || owner === null) {
        throw new Error("Missing the required parameter 'owner' when calling deleteDomainVersion");
      }
      // verify the required parameter 'domain' is set
      if (domain === undefined || domain === null) {
        throw new Error("Missing the required parameter 'domain' when calling deleteDomainVersion");
      }
      // verify the required parameter 'version' is set
      if (version === undefined || version === null) {
        throw new Error("Missing the required parameter 'version' when calling deleteDomainVersion");
      }

      let pathParams = {
        'owner': owner,
        'domain': domain,
        'version': version
      };
      let queryParams = {
        'force': opts['force']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['TokenSecured'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/domains/{owner}/{domain}/{version}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the forkDomain operation.
     * @callback module:api/DomainsApi~forkDomainCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Fork a domain
     * Creates a [fork](https://support.smartbear.com/swaggerhub/docs/apis/forking-api.html) of the specified domain definition and version. The fork can be created as a new domain, or as a new version in another existing domain.
     * @param {String} owner Domain owner (organization or user, case-sensitive)
     * @param {String} domain Domain name (case-sensitive)
     * @param {String} version Version identifier
     * @param {module:model/ForkVersion} forkVersion Fork parameters
     * @param {module:api/DomainsApi~forkDomainCallback} callback The callback function, accepting three arguments: error, data, response
     */
    forkDomain(owner, domain, version, forkVersion, callback) {
      let postBody = forkVersion;
      // verify the required parameter 'owner' is set
      if (owner === undefined || owner === null) {
        throw new Error("Missing the required parameter 'owner' when calling forkDomain");
      }
      // verify the required parameter 'domain' is set
      if (domain === undefined || domain === null) {
        throw new Error("Missing the required parameter 'domain' when calling forkDomain");
      }
      // verify the required parameter 'version' is set
      if (version === undefined || version === null) {
        throw new Error("Missing the required parameter 'version' when calling forkDomain");
      }
      // verify the required parameter 'forkVersion' is set
      if (forkVersion === undefined || forkVersion === null) {
        throw new Error("Missing the required parameter 'forkVersion' when calling forkDomain");
      }

      let pathParams = {
        'owner': owner,
        'domain': domain,
        'version': version
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['TokenSecured'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/domains/{owner}/{domain}/{version}/fork', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getDomainCommentsV2 operation.
     * @callback module:api/DomainsApi~getDomainCommentsV2Callback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/ClosableComment>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get comments for the specified domain version
     * @param {String} owner Domain owner (organization or user, case-sensitive)
     * @param {String} domain Domain name (case-sensitive)
     * @param {String} version Version identifier
     * @param {module:api/DomainsApi~getDomainCommentsV2Callback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/ClosableComment>}
     */
    getDomainCommentsV2(owner, domain, version, callback) {
      let postBody = null;
      // verify the required parameter 'owner' is set
      if (owner === undefined || owner === null) {
        throw new Error("Missing the required parameter 'owner' when calling getDomainCommentsV2");
      }
      // verify the required parameter 'domain' is set
      if (domain === undefined || domain === null) {
        throw new Error("Missing the required parameter 'domain' when calling getDomainCommentsV2");
      }
      // verify the required parameter 'version' is set
      if (version === undefined || version === null) {
        throw new Error("Missing the required parameter 'version' when calling getDomainCommentsV2");
      }

      let pathParams = {
        'owner': owner,
        'domain': domain,
        'version': version
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['TokenSecured'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [ClosableComment];
      return this.apiClient.callApi(
        '/domains/{owner}/{domain}/{version}/comments', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getDomainDefaultVersion operation.
     * @callback module:api/DomainsApi~getDomainDefaultVersionCallback
     * @param {String} error Error message, if any.
     * @param {module:model/DefaultVersion} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get the default version of a domain
     * This operation returns the version identifier, such as `1.0.0`. To get the definition itself, use `GET /domains/{owner}/{domain}/{version}`.
     * @param {String} owner Domain owner (organization or user, case-sensitive)
     * @param {String} domain Domain name (case-sensitive)
     * @param {module:api/DomainsApi~getDomainDefaultVersionCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/DefaultVersion}
     */
    getDomainDefaultVersion(owner, domain, callback) {
      let postBody = null;
      // verify the required parameter 'owner' is set
      if (owner === undefined || owner === null) {
        throw new Error("Missing the required parameter 'owner' when calling getDomainDefaultVersion");
      }
      // verify the required parameter 'domain' is set
      if (domain === undefined || domain === null) {
        throw new Error("Missing the required parameter 'domain' when calling getDomainDefaultVersion");
      }

      let pathParams = {
        'owner': owner,
        'domain': domain
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['TokenSecured'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = DefaultVersion;
      return this.apiClient.callApi(
        '/domains/{owner}/{domain}/settings/default', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getDomainDefinition operation.
     * @callback module:api/DomainsApi~getDomainDefinitionCallback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get the OpenAPI definition of the specified domain version
     * @param {String} owner Domain owner (organization or user, case-sensitive)
     * @param {String} domain Domain name (case-sensitive)
     * @param {String} version Version identifier
     * @param {module:api/DomainsApi~getDomainDefinitionCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    getDomainDefinition(owner, domain, version, callback) {
      let postBody = null;
      // verify the required parameter 'owner' is set
      if (owner === undefined || owner === null) {
        throw new Error("Missing the required parameter 'owner' when calling getDomainDefinition");
      }
      // verify the required parameter 'domain' is set
      if (domain === undefined || domain === null) {
        throw new Error("Missing the required parameter 'domain' when calling getDomainDefinition");
      }
      // verify the required parameter 'version' is set
      if (version === undefined || version === null) {
        throw new Error("Missing the required parameter 'version' when calling getDomainDefinition");
      }

      let pathParams = {
        'owner': owner,
        'domain': domain,
        'version': version
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['TokenSecured'];
      let contentTypes = [];
      let accepts = ['application/json', 'application/yaml'];
      let returnType = Object;
      return this.apiClient.callApi(
        '/domains/{owner}/{domain}/{version}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getDomainJsonDefinition operation.
     * @callback module:api/DomainsApi~getDomainJsonDefinitionCallback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get the OpenAPI definition for the specified domain version in JSON format
     * @param {String} owner Domain owner (organization or user, case-sensitive)
     * @param {String} domain Domain name (case-sensitive)
     * @param {String} version Version identifier
     * @param {module:api/DomainsApi~getDomainJsonDefinitionCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    getDomainJsonDefinition(owner, domain, version, callback) {
      let postBody = null;
      // verify the required parameter 'owner' is set
      if (owner === undefined || owner === null) {
        throw new Error("Missing the required parameter 'owner' when calling getDomainJsonDefinition");
      }
      // verify the required parameter 'domain' is set
      if (domain === undefined || domain === null) {
        throw new Error("Missing the required parameter 'domain' when calling getDomainJsonDefinition");
      }
      // verify the required parameter 'version' is set
      if (version === undefined || version === null) {
        throw new Error("Missing the required parameter 'version' when calling getDomainJsonDefinition");
      }

      let pathParams = {
        'owner': owner,
        'domain': domain,
        'version': version
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['TokenSecured'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Object;
      return this.apiClient.callApi(
        '/domains/{owner}/{domain}/{version}/domain.json', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getDomainLifecycleSettings operation.
     * @callback module:api/DomainsApi~getDomainLifecycleSettingsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/LifecycleSettings} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get the published status for the specified domain and version
     * @param {String} owner Domain owner (organization or user, case-sensitive)
     * @param {String} domain Domain name (case-sensitive)
     * @param {String} version Version identifier
     * @param {module:api/DomainsApi~getDomainLifecycleSettingsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/LifecycleSettings}
     */
    getDomainLifecycleSettings(owner, domain, version, callback) {
      let postBody = null;
      // verify the required parameter 'owner' is set
      if (owner === undefined || owner === null) {
        throw new Error("Missing the required parameter 'owner' when calling getDomainLifecycleSettings");
      }
      // verify the required parameter 'domain' is set
      if (domain === undefined || domain === null) {
        throw new Error("Missing the required parameter 'domain' when calling getDomainLifecycleSettings");
      }
      // verify the required parameter 'version' is set
      if (version === undefined || version === null) {
        throw new Error("Missing the required parameter 'version' when calling getDomainLifecycleSettings");
      }

      let pathParams = {
        'owner': owner,
        'domain': domain,
        'version': version
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['TokenSecured'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = LifecycleSettings;
      return this.apiClient.callApi(
        '/domains/{owner}/{domain}/{version}/settings/lifecycle', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getDomainPrivateSettings operation.
     * @callback module:api/DomainsApi~getDomainPrivateSettingsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/VisibilitySettings} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get the visibility (public or private) of a domain version
     * @param {String} owner Domain owner (organization or user, case-sensitive)
     * @param {String} domain Domain name (case-sensitive)
     * @param {String} version Version identifier
     * @param {module:api/DomainsApi~getDomainPrivateSettingsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/VisibilitySettings}
     */
    getDomainPrivateSettings(owner, domain, version, callback) {
      let postBody = null;
      // verify the required parameter 'owner' is set
      if (owner === undefined || owner === null) {
        throw new Error("Missing the required parameter 'owner' when calling getDomainPrivateSettings");
      }
      // verify the required parameter 'domain' is set
      if (domain === undefined || domain === null) {
        throw new Error("Missing the required parameter 'domain' when calling getDomainPrivateSettings");
      }
      // verify the required parameter 'version' is set
      if (version === undefined || version === null) {
        throw new Error("Missing the required parameter 'version' when calling getDomainPrivateSettings");
      }

      let pathParams = {
        'owner': owner,
        'domain': domain,
        'version': version
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['TokenSecured'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = VisibilitySettings;
      return this.apiClient.callApi(
        '/domains/{owner}/{domain}/{version}/settings/private', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getDomainVersions operation.
     * @callback module:api/DomainsApi~getDomainVersionsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ApisJson} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get a list of domain versions
     * @param {String} owner Domain owner (organization or user, case-sensitive)
     * @param {String} domain Domain name (case-sensitive)
     * @param {module:api/DomainsApi~getDomainVersionsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ApisJson}
     */
    getDomainVersions(owner, domain, callback) {
      let postBody = null;
      // verify the required parameter 'owner' is set
      if (owner === undefined || owner === null) {
        throw new Error("Missing the required parameter 'owner' when calling getDomainVersions");
      }
      // verify the required parameter 'domain' is set
      if (domain === undefined || domain === null) {
        throw new Error("Missing the required parameter 'domain' when calling getDomainVersions");
      }

      let pathParams = {
        'owner': owner,
        'domain': domain
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['TokenSecured'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ApisJson;
      return this.apiClient.callApi(
        '/domains/{owner}/{domain}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getDomainYamlDefinition operation.
     * @callback module:api/DomainsApi~getDomainYamlDefinitionCallback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get the OpenAPI definition for the specified domain version in YAML format
     * @param {String} owner Domain owner (organization or user, case-sensitive)
     * @param {String} domain Domain name (case-sensitive)
     * @param {String} version Version identifier
     * @param {module:api/DomainsApi~getDomainYamlDefinitionCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    getDomainYamlDefinition(owner, domain, version, callback) {
      let postBody = null;
      // verify the required parameter 'owner' is set
      if (owner === undefined || owner === null) {
        throw new Error("Missing the required parameter 'owner' when calling getDomainYamlDefinition");
      }
      // verify the required parameter 'domain' is set
      if (domain === undefined || domain === null) {
        throw new Error("Missing the required parameter 'domain' when calling getDomainYamlDefinition");
      }
      // verify the required parameter 'version' is set
      if (version === undefined || version === null) {
        throw new Error("Missing the required parameter 'version' when calling getDomainYamlDefinition");
      }

      let pathParams = {
        'owner': owner,
        'domain': domain,
        'version': version
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['TokenSecured'];
      let contentTypes = [];
      let accepts = ['application/yaml'];
      let returnType = Object;
      return this.apiClient.callApi(
        '/domains/{owner}/{domain}/{version}/domain.yaml', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getOwnerDomains operation.
     * @callback module:api/DomainsApi~getOwnerDomainsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ApisJson} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get a list of domains of the specified owner
     * @param {String} owner Domain owner (organization or user, case-sensitive)
     * @param {Object} opts Optional parameters
     * @param {Number} [page = 0)] Page to return
     * @param {Number} [limit = 10)] Number of results per page (1 .. 100)
     * @param {module:model/String} [sort = 'NAME')] Sort criteria of result set: * NAME * UPDATED * CREATED * OWNER * BEST_MATCH - by relevance * TITLE - by `info.title` 
     * @param {module:model/String} [order = 'ASC')] Sort order
     * @param {module:api/DomainsApi~getOwnerDomainsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ApisJson}
     */
    getOwnerDomains(owner, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'owner' is set
      if (owner === undefined || owner === null) {
        throw new Error("Missing the required parameter 'owner' when calling getOwnerDomains");
      }

      let pathParams = {
        'owner': owner
      };
      let queryParams = {
        'page': opts['page'],
        'limit': opts['limit'],
        'sort': opts['sort'],
        'order': opts['order']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['TokenSecured'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ApisJson;
      return this.apiClient.callApi(
        '/domains/{owner}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the renameDomain operation.
     * @callback module:api/DomainsApi~renameDomainCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Rename a domain
     * The new name must follow the [naming rules](https://support.smartbear.com/swaggerhub/docs/apis/creating-api.html).
     * @param {String} owner Domain owner (organization or user, case-sensitive)
     * @param {String} domain Domain name (case-sensitive)
     * @param {String} newName New name
     * @param {Object} opts Optional parameters
     * @param {Boolean} [force = false)] If this domain is referenced from other APIs and domains, this parameter must be true. Otherwise, the request will be rejected with status code 424.
     * @param {module:api/DomainsApi~renameDomainCallback} callback The callback function, accepting three arguments: error, data, response
     */
    renameDomain(owner, domain, newName, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'owner' is set
      if (owner === undefined || owner === null) {
        throw new Error("Missing the required parameter 'owner' when calling renameDomain");
      }
      // verify the required parameter 'domain' is set
      if (domain === undefined || domain === null) {
        throw new Error("Missing the required parameter 'domain' when calling renameDomain");
      }
      // verify the required parameter 'newName' is set
      if (newName === undefined || newName === null) {
        throw new Error("Missing the required parameter 'newName' when calling renameDomain");
      }

      let pathParams = {
        'owner': owner,
        'domain': domain
      };
      let queryParams = {
        'newName': newName,
        'force': opts['force']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['TokenSecured'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/domains/{owner}/{domain}/rename', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the saveDomainDefinition operation.
     * @callback module:api/DomainsApi~saveDomainDefinitionCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Create or update a domain
     * @param {String} owner Domain owner (organization or user, case-sensitive)
     * @param {String} domain Domain name (case-sensitive)
     * @param {Object} opts Optional parameters
     * @param {Boolean} [isPrivate = false)] Specifies whether the domain has to be private
     * @param {String} [version] Domain version. If omitted, will be taken from the `info.version` field in the definition.
     * @param {Boolean} [force] Force update
     * @param {String} [definition] OpenAPI definition of this domain
     * @param {module:api/DomainsApi~saveDomainDefinitionCallback} callback The callback function, accepting three arguments: error, data, response
     */
    saveDomainDefinition(owner, domain, opts, callback) {
      opts = opts || {};
      let postBody = opts['definition'];
      // verify the required parameter 'owner' is set
      if (owner === undefined || owner === null) {
        throw new Error("Missing the required parameter 'owner' when calling saveDomainDefinition");
      }
      // verify the required parameter 'domain' is set
      if (domain === undefined || domain === null) {
        throw new Error("Missing the required parameter 'domain' when calling saveDomainDefinition");
      }

      let pathParams = {
        'owner': owner,
        'domain': domain
      };
      let queryParams = {
        'isPrivate': opts['isPrivate'],
        'version': opts['version'],
        'force': opts['force']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['TokenSecured'];
      let contentTypes = ['application/json', 'application/yaml'];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/domains/{owner}/{domain}', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the searchApisAndDomains_0 operation.
     * @callback module:api/DomainsApi~searchApisAndDomains_0Callback
     * @param {String} error Error message, if any.
     * @param {module:model/ApisJson} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Retrieve a list of currently defined APIs, domains, and templates in APIs.json format
     * @param {Object} opts Optional parameters
     * @param {module:model/String} [specType = 'ANY')] Type of definitions to search: * API - APIs only * DOMAIN - domains only * TEMPLATE - templates only * ANY - APIs, domains, and templates 
     * @param {module:model/String} [visibility = 'ANY')] The visibility of a definition in SwaggerHub: * PUBLIC - can be viewed by anyone * PRIVATE - can only be viewed by you or your organization and those that you are collaborating with or have shared it with * ANY - either PUBLIC or PRIVATE 
     * @param {module:model/String} [state = 'ALL')] Matches against published state of the spec: * UNPUBLISHED - spec is a draft, a work in progress * PUBLISHED - spec is a stable version ready for consuming from client applications * ANY - either PUBLISHED or UNPUBLISHED 
     * @param {String} [owner] API or domain owner. Can be username or organization name. Case-sensitive.
     * @param {String} [query] Free text query to match
     * @param {Number} [page = 0)] Page to return
     * @param {Number} [limit = 10)] Number of results per page (1 .. 100)
     * @param {module:model/String} [sort = 'NAME')] Sort criteria of result set: * NAME * UPDATED * CREATED * OWNER * BEST_MATCH - by relevance * TITLE - by `info.title` 
     * @param {module:model/String} [order = 'ASC')] Sort order
     * @param {module:api/DomainsApi~searchApisAndDomains_0Callback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ApisJson}
     */
    searchApisAndDomains_0(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'specType': opts['specType'],
        'visibility': opts['visibility'],
        'state': opts['state'],
        'owner': opts['owner'],
        'query': opts['query'],
        'page': opts['page'],
        'limit': opts['limit'],
        'sort': opts['sort'],
        'order': opts['order']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['TokenSecured'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ApisJson;
      return this.apiClient.callApi(
        '/specs', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the searchDomains operation.
     * @callback module:api/DomainsApi~searchDomainsCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Search domains
     * This is a convenience alias for `GET /specs?specType=DOMAIN`.
     * @param {Object} opts Optional parameters
     * @param {String} [query] Free text query to match
     * @param {module:model/String} [state = 'ALL')] Matches against published state of the spec: * UNPUBLISHED - spec is a draft, a work in progress * PUBLISHED - spec is a stable version ready for consuming from client applications * ANY - either PUBLISHED or UNPUBLISHED 
     * @param {Number} [page = 0)] Page to return
     * @param {Number} [limit = 10)] Number of results per page (1 .. 100)
     * @param {module:model/String} [sort = 'NAME')] Sort criteria of result set: * NAME * UPDATED * CREATED * OWNER * BEST_MATCH - by relevance * TITLE - by `info.title` 
     * @param {module:model/String} [order = 'ASC')] Sort order
     * @param {module:api/DomainsApi~searchDomainsCallback} callback The callback function, accepting three arguments: error, data, response
     */
    searchDomains(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'query': opts['query'],
        'state': opts['state'],
        'page': opts['page'],
        'limit': opts['limit'],
        'sort': opts['sort'],
        'order': opts['order']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['TokenSecured'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/domains', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the setDomainCommentStatusV2 operation.
     * @callback module:api/DomainsApi~setDomainCommentStatusV2Callback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Resolve or reopen a comment
     * @param {String} owner Domain owner (organization or user, case-sensitive)
     * @param {String} domain Domain name (case-sensitive)
     * @param {String} version Version identifier
     * @param {String} comment Comment identifier
     * @param {module:model/String} status Comment status
     * @param {module:api/DomainsApi~setDomainCommentStatusV2Callback} callback The callback function, accepting three arguments: error, data, response
     */
    setDomainCommentStatusV2(owner, domain, version, comment, status, callback) {
      let postBody = null;
      // verify the required parameter 'owner' is set
      if (owner === undefined || owner === null) {
        throw new Error("Missing the required parameter 'owner' when calling setDomainCommentStatusV2");
      }
      // verify the required parameter 'domain' is set
      if (domain === undefined || domain === null) {
        throw new Error("Missing the required parameter 'domain' when calling setDomainCommentStatusV2");
      }
      // verify the required parameter 'version' is set
      if (version === undefined || version === null) {
        throw new Error("Missing the required parameter 'version' when calling setDomainCommentStatusV2");
      }
      // verify the required parameter 'comment' is set
      if (comment === undefined || comment === null) {
        throw new Error("Missing the required parameter 'comment' when calling setDomainCommentStatusV2");
      }
      // verify the required parameter 'status' is set
      if (status === undefined || status === null) {
        throw new Error("Missing the required parameter 'status' when calling setDomainCommentStatusV2");
      }

      let pathParams = {
        'owner': owner,
        'domain': domain,
        'version': version,
        'comment': comment,
        'status': status
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['TokenSecured'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/domains/{owner}/{domain}/{version}/comments/{comment}/status/{status}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the setDomainDefaultVersion operation.
     * @callback module:api/DomainsApi~setDomainDefaultVersionCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Set the default version for a domain
     * @param {String} owner Domain owner (organization or user, case-sensitive)
     * @param {String} domain Domain name (case-sensitive)
     * @param {module:model/DefaultVersion} defaultVersion An object that specifies the default version for this domain
     * @param {module:api/DomainsApi~setDomainDefaultVersionCallback} callback The callback function, accepting three arguments: error, data, response
     */
    setDomainDefaultVersion(owner, domain, defaultVersion, callback) {
      let postBody = defaultVersion;
      // verify the required parameter 'owner' is set
      if (owner === undefined || owner === null) {
        throw new Error("Missing the required parameter 'owner' when calling setDomainDefaultVersion");
      }
      // verify the required parameter 'domain' is set
      if (domain === undefined || domain === null) {
        throw new Error("Missing the required parameter 'domain' when calling setDomainDefaultVersion");
      }
      // verify the required parameter 'defaultVersion' is set
      if (defaultVersion === undefined || defaultVersion === null) {
        throw new Error("Missing the required parameter 'defaultVersion' when calling setDomainDefaultVersion");
      }

      let pathParams = {
        'owner': owner,
        'domain': domain
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['TokenSecured'];
      let contentTypes = ['application/json'];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/domains/{owner}/{domain}/settings/default', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the setDomainLifecycleSettings operation.
     * @callback module:api/DomainsApi~setDomainLifecycleSettingsCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Publish or unpublish a domain version
     * @param {String} owner Domain owner (organization or user, case-sensitive)
     * @param {String} domain Domain name (case-sensitive)
     * @param {String} version Version identifier
     * @param {module:model/LifecycleSettings} settings An object that specifies the new `published` state: `true` means published, `false` - unpublished
     * @param {Object} opts Optional parameters
     * @param {Boolean} [force = false)] To publish a domain that references other _unpublished_ domains, this parameter must be `true`. Otherwise, the request will be rejected with status code 424.
     * @param {module:api/DomainsApi~setDomainLifecycleSettingsCallback} callback The callback function, accepting three arguments: error, data, response
     */
    setDomainLifecycleSettings(owner, domain, version, settings, opts, callback) {
      opts = opts || {};
      let postBody = settings;
      // verify the required parameter 'owner' is set
      if (owner === undefined || owner === null) {
        throw new Error("Missing the required parameter 'owner' when calling setDomainLifecycleSettings");
      }
      // verify the required parameter 'domain' is set
      if (domain === undefined || domain === null) {
        throw new Error("Missing the required parameter 'domain' when calling setDomainLifecycleSettings");
      }
      // verify the required parameter 'version' is set
      if (version === undefined || version === null) {
        throw new Error("Missing the required parameter 'version' when calling setDomainLifecycleSettings");
      }
      // verify the required parameter 'settings' is set
      if (settings === undefined || settings === null) {
        throw new Error("Missing the required parameter 'settings' when calling setDomainLifecycleSettings");
      }

      let pathParams = {
        'owner': owner,
        'domain': domain,
        'version': version
      };
      let queryParams = {
        'force': opts['force']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['TokenSecured'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/domains/{owner}/{domain}/{version}/settings/lifecycle', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the setDomainPrivateSettings operation.
     * @callback module:api/DomainsApi~setDomainPrivateSettingsCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Set the visibility (public or private) of a domain version
     * @param {String} owner Domain owner (organization or user, case-sensitive)
     * @param {String} domain Domain name (case-sensitive)
     * @param {String} version Version identifier
     * @param {module:model/VisibilitySettings} settings An object that specifies the new visibility level: `true` means private, `false` - public
     * @param {Object} opts Optional parameters
     * @param {Boolean} [force = false)] To change the visibility from _public_ to _private_ in case this domain is referenced from other _public_ definitions, this parameter must be `true`. Otherwise, the request will be rejected with status code 424.
     * @param {module:api/DomainsApi~setDomainPrivateSettingsCallback} callback The callback function, accepting three arguments: error, data, response
     */
    setDomainPrivateSettings(owner, domain, version, settings, opts, callback) {
      opts = opts || {};
      let postBody = settings;
      // verify the required parameter 'owner' is set
      if (owner === undefined || owner === null) {
        throw new Error("Missing the required parameter 'owner' when calling setDomainPrivateSettings");
      }
      // verify the required parameter 'domain' is set
      if (domain === undefined || domain === null) {
        throw new Error("Missing the required parameter 'domain' when calling setDomainPrivateSettings");
      }
      // verify the required parameter 'version' is set
      if (version === undefined || version === null) {
        throw new Error("Missing the required parameter 'version' when calling setDomainPrivateSettings");
      }
      // verify the required parameter 'settings' is set
      if (settings === undefined || settings === null) {
        throw new Error("Missing the required parameter 'settings' when calling setDomainPrivateSettings");
      }

      let pathParams = {
        'owner': owner,
        'domain': domain,
        'version': version
      };
      let queryParams = {
        'force': opts['force']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['TokenSecured'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/domains/{owner}/{domain}/{version}/settings/private', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the updateDomainCommentReplyV2 operation.
     * @callback module:api/DomainsApi~updateDomainCommentReplyV2Callback
     * @param {String} error Error message, if any.
     * @param {module:model/Comment} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update a comment reply
     * @param {String} owner Domain owner (organization or user, case-sensitive)
     * @param {String} domain Domain name (case-sensitive)
     * @param {String} version Version identifier
     * @param {String} comment Comment identifier
     * @param {String} reply Reply identifier
     * @param {Object} opts Optional parameters
     * @param {module:model/CommentPatch} [body] 
     * @param {module:api/DomainsApi~updateDomainCommentReplyV2Callback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Comment}
     */
    updateDomainCommentReplyV2(owner, domain, version, comment, reply, opts, callback) {
      opts = opts || {};
      let postBody = opts['body'];
      // verify the required parameter 'owner' is set
      if (owner === undefined || owner === null) {
        throw new Error("Missing the required parameter 'owner' when calling updateDomainCommentReplyV2");
      }
      // verify the required parameter 'domain' is set
      if (domain === undefined || domain === null) {
        throw new Error("Missing the required parameter 'domain' when calling updateDomainCommentReplyV2");
      }
      // verify the required parameter 'version' is set
      if (version === undefined || version === null) {
        throw new Error("Missing the required parameter 'version' when calling updateDomainCommentReplyV2");
      }
      // verify the required parameter 'comment' is set
      if (comment === undefined || comment === null) {
        throw new Error("Missing the required parameter 'comment' when calling updateDomainCommentReplyV2");
      }
      // verify the required parameter 'reply' is set
      if (reply === undefined || reply === null) {
        throw new Error("Missing the required parameter 'reply' when calling updateDomainCommentReplyV2");
      }

      let pathParams = {
        'owner': owner,
        'domain': domain,
        'version': version,
        'comment': comment,
        'reply': reply
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['TokenSecured'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Comment;
      return this.apiClient.callApi(
        '/domains/{owner}/{domain}/{version}/comments/{comment}/replies/{reply}', 'PATCH',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the updateDomainCommentV2 operation.
     * @callback module:api/DomainsApi~updateDomainCommentV2Callback
     * @param {String} error Error message, if any.
     * @param {module:model/ClosableComment} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update a comment
     * @param {String} owner Domain owner (organization or user, case-sensitive)
     * @param {String} domain Domain name (case-sensitive)
     * @param {String} version Version identifier
     * @param {String} comment Comment identifier
     * @param {Object} opts Optional parameters
     * @param {module:model/ClosableCommentPatch} [body] 
     * @param {module:api/DomainsApi~updateDomainCommentV2Callback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ClosableComment}
     */
    updateDomainCommentV2(owner, domain, version, comment, opts, callback) {
      opts = opts || {};
      let postBody = opts['body'];
      // verify the required parameter 'owner' is set
      if (owner === undefined || owner === null) {
        throw new Error("Missing the required parameter 'owner' when calling updateDomainCommentV2");
      }
      // verify the required parameter 'domain' is set
      if (domain === undefined || domain === null) {
        throw new Error("Missing the required parameter 'domain' when calling updateDomainCommentV2");
      }
      // verify the required parameter 'version' is set
      if (version === undefined || version === null) {
        throw new Error("Missing the required parameter 'version' when calling updateDomainCommentV2");
      }
      // verify the required parameter 'comment' is set
      if (comment === undefined || comment === null) {
        throw new Error("Missing the required parameter 'comment' when calling updateDomainCommentV2");
      }

      let pathParams = {
        'owner': owner,
        'domain': domain,
        'version': version,
        'comment': comment
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['TokenSecured'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ClosableComment;
      return this.apiClient.callApi(
        '/domains/{owner}/{domain}/{version}/comments/{comment}', 'PATCH',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the updateDomainCommentsV2 operation.
     * @callback module:api/DomainsApi~updateDomainCommentsV2Callback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Bulk update comments
     * @param {String} owner Domain owner (organization or user, case-sensitive)
     * @param {String} domain Domain name (case-sensitive)
     * @param {String} version Version identifier
     * @param {module:model/CommentsBatch} body 
     * @param {module:api/DomainsApi~updateDomainCommentsV2Callback} callback The callback function, accepting three arguments: error, data, response
     */
    updateDomainCommentsV2(owner, domain, version, body, callback) {
      let postBody = body;
      // verify the required parameter 'owner' is set
      if (owner === undefined || owner === null) {
        throw new Error("Missing the required parameter 'owner' when calling updateDomainCommentsV2");
      }
      // verify the required parameter 'domain' is set
      if (domain === undefined || domain === null) {
        throw new Error("Missing the required parameter 'domain' when calling updateDomainCommentsV2");
      }
      // verify the required parameter 'version' is set
      if (version === undefined || version === null) {
        throw new Error("Missing the required parameter 'version' when calling updateDomainCommentsV2");
      }
      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling updateDomainCommentsV2");
      }

      let pathParams = {
        'owner': owner,
        'domain': domain,
        'version': version
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['TokenSecured'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/domains/{owner}/{domain}/{version}/comments/batch', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
