/**
 * SwaggerHub Registry API
 * # Overview Use SwaggerHub Registry API to access, manage, and update the following resources in SwaggerHub, bypassing the web interface:   * APIs   * Domains   * Integrations   * Projects   * Templates   SwaggerHub also provides the [User Management API](https://app.swaggerhub.com/apis-docs/swagger-hub/user-management-api/) to get information about organizations and manage organization members.  # Base URL Use the following base URL for SwaggerHub SaaS:          http(s)://api.swaggerhub.com  **Note:** This documentation is for SwaggerHub SaaS. On-Premise customers should use the bundled API definition, which can be found at the URLs provided below.  Version 1.29.0 or later:      http(s)://SERVER/v1/openapi.yaml - YAML version     http(s)://SERVER/v1/openapi.json - JSON version  Earlier versions:      http(s)://SERVER/v1/swagger.yaml - YAML version     http(s)://SERVER/v1/swagger.json - JSON version  # Authentication Operations that update data or access private data require authentication using an API key. You can find your personal API key on the [API Keys](https://app.swaggerhub.com/settings/apiKey) page in your account settings. Send this key in the `Authorization` header when making requests to the Registry API:      Authorization: YOUR_API_KEY  To test API calls from this documentation page, click the **Authorize** button below and paste your API key there.  **Important:** Keep the API key secure and do not store it directly in your code. # Tools In addition to calling the Registry API directly, you can use the following tools to interact with the API from the command line or CI/CD pipeline:   * [SwaggerHub CLI](https://www.npmjs.com/package/swaggerhub-cli)   * [Maven plugin](https://github.com/swagger-api/swaggerhub-maven-plugin)  * [Gradle plugin](https://github.com/swagger-api/swaggerhub-gradle-plugin) 
 *
 * The version of the OpenAPI document: 1.0.66
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import ApisJson from '../model/ApisJson';
import ClosableComment from '../model/ClosableComment';
import ClosableCommentPatch from '../model/ClosableCommentPatch';
import Comment from '../model/Comment';
import CommentPatch from '../model/CommentPatch';
import CommentsBatch from '../model/CommentsBatch';
import DefaultVersion from '../model/DefaultVersion';
import ForkVersion from '../model/ForkVersion';
import LifecycleSettings from '../model/LifecycleSettings';
import NewComment from '../model/NewComment';
import NewReply from '../model/NewReply';
import NewVersion from '../model/NewVersion';
import StandardizationResult from '../model/StandardizationResult';
import ValidationResult from '../model/ValidationResult';
import VisibilitySettings from '../model/VisibilitySettings';

/**
* APIs service.
* @module api/APIsApi
* @version 1.0.66
*/
export default class APIsApi {

    /**
    * Constructs a new APIsApi. 
    * @alias module:api/APIsApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the addApiCommentReplyV2 operation.
     * @callback module:api/APIsApi~addApiCommentReplyV2Callback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/Comment>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Reply to a comment
     * @param {String} owner API owner (organization or user, case-sensitive)
     * @param {String} api API name (case-sensitive)
     * @param {String} version Version identifier
     * @param {String} comment Comment identifier
     * @param {module:model/NewReply} body 
     * @param {module:api/APIsApi~addApiCommentReplyV2Callback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/Comment>}
     */
    addApiCommentReplyV2(owner, api, version, comment, body, callback) {
      let postBody = body;
      // verify the required parameter 'owner' is set
      if (owner === undefined || owner === null) {
        throw new Error("Missing the required parameter 'owner' when calling addApiCommentReplyV2");
      }
      // verify the required parameter 'api' is set
      if (api === undefined || api === null) {
        throw new Error("Missing the required parameter 'api' when calling addApiCommentReplyV2");
      }
      // verify the required parameter 'version' is set
      if (version === undefined || version === null) {
        throw new Error("Missing the required parameter 'version' when calling addApiCommentReplyV2");
      }
      // verify the required parameter 'comment' is set
      if (comment === undefined || comment === null) {
        throw new Error("Missing the required parameter 'comment' when calling addApiCommentReplyV2");
      }
      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling addApiCommentReplyV2");
      }

      let pathParams = {
        'owner': owner,
        'api': api,
        'version': version,
        'comment': comment
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['TokenSecured'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [Comment];
      return this.apiClient.callApi(
        '/apis/{owner}/{api}/{version}/comments/{comment}/replies', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the addApiCommentV2 operation.
     * @callback module:api/APIsApi~addApiCommentV2Callback
     * @param {String} error Error message, if any.
     * @param {module:model/ClosableComment} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Add a new comment
     * @param {String} owner API owner (organization or user, case-sensitive)
     * @param {String} api API name (case-sensitive)
     * @param {String} version Version identifier
     * @param {module:model/NewComment} body 
     * @param {module:api/APIsApi~addApiCommentV2Callback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ClosableComment}
     */
    addApiCommentV2(owner, api, version, body, callback) {
      let postBody = body;
      // verify the required parameter 'owner' is set
      if (owner === undefined || owner === null) {
        throw new Error("Missing the required parameter 'owner' when calling addApiCommentV2");
      }
      // verify the required parameter 'api' is set
      if (api === undefined || api === null) {
        throw new Error("Missing the required parameter 'api' when calling addApiCommentV2");
      }
      // verify the required parameter 'version' is set
      if (version === undefined || version === null) {
        throw new Error("Missing the required parameter 'version' when calling addApiCommentV2");
      }
      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling addApiCommentV2");
      }

      let pathParams = {
        'owner': owner,
        'api': api,
        'version': version
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['TokenSecured'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ClosableComment;
      return this.apiClient.callApi(
        '/apis/{owner}/{api}/{version}/comments', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the cloneApi operation.
     * @callback module:api/APIsApi~cloneApiCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Create a new API version
     * Use this operation to clone an existing API version as a new version. The new version will have the same YAML content but with updated `info.version`.  **Note:** Comments, integrations, and codegen options are not copied to the new version. The default version also remains unchanged.
     * @param {String} owner API owner (organization or user, case-sensitive)
     * @param {String} api API name (case-sensitive)
     * @param {String} version The version to clone (case-sensitive)
     * @param {module:model/NewVersion} newVersion An object that contains the new version number and other parameters. The version number must be in the format described in the [documentation](https://support.smartbear.com/swaggerhub/docs/apis/versioning.html#format).
     * @param {module:api/APIsApi~cloneApiCallback} callback The callback function, accepting three arguments: error, data, response
     */
    cloneApi(owner, api, version, newVersion, callback) {
      let postBody = newVersion;
      // verify the required parameter 'owner' is set
      if (owner === undefined || owner === null) {
        throw new Error("Missing the required parameter 'owner' when calling cloneApi");
      }
      // verify the required parameter 'api' is set
      if (api === undefined || api === null) {
        throw new Error("Missing the required parameter 'api' when calling cloneApi");
      }
      // verify the required parameter 'version' is set
      if (version === undefined || version === null) {
        throw new Error("Missing the required parameter 'version' when calling cloneApi");
      }
      // verify the required parameter 'newVersion' is set
      if (newVersion === undefined || newVersion === null) {
        throw new Error("Missing the required parameter 'newVersion' when calling cloneApi");
      }

      let pathParams = {
        'owner': owner,
        'api': api,
        'version': version
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['TokenSecured'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/apis/{owner}/{api}/{version}/clone', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteApi operation.
     * @callback module:api/APIsApi~deleteApiCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete an API
     * @param {String} owner API owner (organization or user, case-sensitive)
     * @param {String} api API name (case-sensitive)
     * @param {module:api/APIsApi~deleteApiCallback} callback The callback function, accepting three arguments: error, data, response
     */
    deleteApi(owner, api, callback) {
      let postBody = null;
      // verify the required parameter 'owner' is set
      if (owner === undefined || owner === null) {
        throw new Error("Missing the required parameter 'owner' when calling deleteApi");
      }
      // verify the required parameter 'api' is set
      if (api === undefined || api === null) {
        throw new Error("Missing the required parameter 'api' when calling deleteApi");
      }

      let pathParams = {
        'owner': owner,
        'api': api
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['TokenSecured'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/apis/{owner}/{api}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteApiCommentReplyV2 operation.
     * @callback module:api/APIsApi~deleteApiCommentReplyV2Callback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete a comment reply
     * @param {String} owner API owner (organization or user, case-sensitive)
     * @param {String} api API name (case-sensitive)
     * @param {String} version Version identifier
     * @param {String} comment Comment identifier
     * @param {String} reply Reply identifier
     * @param {module:api/APIsApi~deleteApiCommentReplyV2Callback} callback The callback function, accepting three arguments: error, data, response
     */
    deleteApiCommentReplyV2(owner, api, version, comment, reply, callback) {
      let postBody = null;
      // verify the required parameter 'owner' is set
      if (owner === undefined || owner === null) {
        throw new Error("Missing the required parameter 'owner' when calling deleteApiCommentReplyV2");
      }
      // verify the required parameter 'api' is set
      if (api === undefined || api === null) {
        throw new Error("Missing the required parameter 'api' when calling deleteApiCommentReplyV2");
      }
      // verify the required parameter 'version' is set
      if (version === undefined || version === null) {
        throw new Error("Missing the required parameter 'version' when calling deleteApiCommentReplyV2");
      }
      // verify the required parameter 'comment' is set
      if (comment === undefined || comment === null) {
        throw new Error("Missing the required parameter 'comment' when calling deleteApiCommentReplyV2");
      }
      // verify the required parameter 'reply' is set
      if (reply === undefined || reply === null) {
        throw new Error("Missing the required parameter 'reply' when calling deleteApiCommentReplyV2");
      }

      let pathParams = {
        'owner': owner,
        'api': api,
        'version': version,
        'comment': comment,
        'reply': reply
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['TokenSecured'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/apis/{owner}/{api}/{version}/comments/{comment}/replies/{reply}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteApiCommentV2 operation.
     * @callback module:api/APIsApi~deleteApiCommentV2Callback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete a comment
     * @param {String} owner API owner (organization or user, case-sensitive)
     * @param {String} api API name (case-sensitive)
     * @param {String} version Version identifier
     * @param {String} comment Comment identifier
     * @param {module:api/APIsApi~deleteApiCommentV2Callback} callback The callback function, accepting three arguments: error, data, response
     */
    deleteApiCommentV2(owner, api, version, comment, callback) {
      let postBody = null;
      // verify the required parameter 'owner' is set
      if (owner === undefined || owner === null) {
        throw new Error("Missing the required parameter 'owner' when calling deleteApiCommentV2");
      }
      // verify the required parameter 'api' is set
      if (api === undefined || api === null) {
        throw new Error("Missing the required parameter 'api' when calling deleteApiCommentV2");
      }
      // verify the required parameter 'version' is set
      if (version === undefined || version === null) {
        throw new Error("Missing the required parameter 'version' when calling deleteApiCommentV2");
      }
      // verify the required parameter 'comment' is set
      if (comment === undefined || comment === null) {
        throw new Error("Missing the required parameter 'comment' when calling deleteApiCommentV2");
      }

      let pathParams = {
        'owner': owner,
        'api': api,
        'version': version,
        'comment': comment
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['TokenSecured'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/apis/{owner}/{api}/{version}/comments/{comment}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteApiVersion operation.
     * @callback module:api/APIsApi~deleteApiVersionCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete an API version
     * @param {String} owner API owner (organization or user, case-sensitive)
     * @param {String} api API name (case-sensitive)
     * @param {String} version Version identifier
     * @param {module:api/APIsApi~deleteApiVersionCallback} callback The callback function, accepting three arguments: error, data, response
     */
    deleteApiVersion(owner, api, version, callback) {
      let postBody = null;
      // verify the required parameter 'owner' is set
      if (owner === undefined || owner === null) {
        throw new Error("Missing the required parameter 'owner' when calling deleteApiVersion");
      }
      // verify the required parameter 'api' is set
      if (api === undefined || api === null) {
        throw new Error("Missing the required parameter 'api' when calling deleteApiVersion");
      }
      // verify the required parameter 'version' is set
      if (version === undefined || version === null) {
        throw new Error("Missing the required parameter 'version' when calling deleteApiVersion");
      }

      let pathParams = {
        'owner': owner,
        'api': api,
        'version': version
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['TokenSecured'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/apis/{owner}/{api}/{version}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the forkApi operation.
     * @callback module:api/APIsApi~forkApiCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Fork an API
     * Creates a [fork](https://support.smartbear.com/swaggerhub/docs/apis/forking-api.html) of the specified API definition and version. The fork can be created as a new API, or as a new version in another existing API.
     * @param {String} owner API owner (organization or user, case-sensitive)
     * @param {String} api API name (case-sensitive)
     * @param {String} version Version identifier
     * @param {module:model/ForkVersion} forkVersion Fork parameters
     * @param {module:api/APIsApi~forkApiCallback} callback The callback function, accepting three arguments: error, data, response
     */
    forkApi(owner, api, version, forkVersion, callback) {
      let postBody = forkVersion;
      // verify the required parameter 'owner' is set
      if (owner === undefined || owner === null) {
        throw new Error("Missing the required parameter 'owner' when calling forkApi");
      }
      // verify the required parameter 'api' is set
      if (api === undefined || api === null) {
        throw new Error("Missing the required parameter 'api' when calling forkApi");
      }
      // verify the required parameter 'version' is set
      if (version === undefined || version === null) {
        throw new Error("Missing the required parameter 'version' when calling forkApi");
      }
      // verify the required parameter 'forkVersion' is set
      if (forkVersion === undefined || forkVersion === null) {
        throw new Error("Missing the required parameter 'forkVersion' when calling forkApi");
      }

      let pathParams = {
        'owner': owner,
        'api': api,
        'version': version
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['TokenSecured'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/apis/{owner}/{api}/{version}/fork', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getApiCommentsV2 operation.
     * @callback module:api/APIsApi~getApiCommentsV2Callback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/ClosableComment>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get comments for the specified API version
     * @param {String} owner API owner (organization or user, case-sensitive)
     * @param {String} api API name (case-sensitive)
     * @param {String} version Version identifier
     * @param {module:api/APIsApi~getApiCommentsV2Callback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/ClosableComment>}
     */
    getApiCommentsV2(owner, api, version, callback) {
      let postBody = null;
      // verify the required parameter 'owner' is set
      if (owner === undefined || owner === null) {
        throw new Error("Missing the required parameter 'owner' when calling getApiCommentsV2");
      }
      // verify the required parameter 'api' is set
      if (api === undefined || api === null) {
        throw new Error("Missing the required parameter 'api' when calling getApiCommentsV2");
      }
      // verify the required parameter 'version' is set
      if (version === undefined || version === null) {
        throw new Error("Missing the required parameter 'version' when calling getApiCommentsV2");
      }

      let pathParams = {
        'owner': owner,
        'api': api,
        'version': version
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['TokenSecured'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [ClosableComment];
      return this.apiClient.callApi(
        '/apis/{owner}/{api}/{version}/comments', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getApiDefaultVersion operation.
     * @callback module:api/APIsApi~getApiDefaultVersionCallback
     * @param {String} error Error message, if any.
     * @param {module:model/DefaultVersion} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get the default version of an API
     * This operation returns the version identifier, such as `1.0.0`. To get the definition itself, use `GET /apis/{owner}/{api}/{version}`.
     * @param {String} owner API owner (organization or user, case-sensitive)
     * @param {String} api API name (case-sensitive)
     * @param {module:api/APIsApi~getApiDefaultVersionCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/DefaultVersion}
     */
    getApiDefaultVersion(owner, api, callback) {
      let postBody = null;
      // verify the required parameter 'owner' is set
      if (owner === undefined || owner === null) {
        throw new Error("Missing the required parameter 'owner' when calling getApiDefaultVersion");
      }
      // verify the required parameter 'api' is set
      if (api === undefined || api === null) {
        throw new Error("Missing the required parameter 'api' when calling getApiDefaultVersion");
      }

      let pathParams = {
        'owner': owner,
        'api': api
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['TokenSecured'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = DefaultVersion;
      return this.apiClient.callApi(
        '/apis/{owner}/{api}/settings/default', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getApiVersions operation.
     * @callback module:api/APIsApi~getApiVersionsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ApisJson} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get a list of API versions
     * @param {String} owner API owner (organization or user, case-sensitive)
     * @param {String} api API name (case-sensitive)
     * @param {module:api/APIsApi~getApiVersionsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ApisJson}
     */
    getApiVersions(owner, api, callback) {
      let postBody = null;
      // verify the required parameter 'owner' is set
      if (owner === undefined || owner === null) {
        throw new Error("Missing the required parameter 'owner' when calling getApiVersions");
      }
      // verify the required parameter 'api' is set
      if (api === undefined || api === null) {
        throw new Error("Missing the required parameter 'api' when calling getApiVersions");
      }

      let pathParams = {
        'owner': owner,
        'api': api
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['TokenSecured'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ApisJson;
      return this.apiClient.callApi(
        '/apis/{owner}/{api}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getDefinition operation.
     * @callback module:api/APIsApi~getDefinitionCallback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get the OpenAPI definition of the specified API version
     * @param {String} owner API owner (organization or user, case-sensitive)
     * @param {String} api API name (case-sensitive)
     * @param {String} version Version identifier
     * @param {Object} opts Optional parameters
     * @param {Boolean} [resolved = false)] Set to true to get the resolved version of the API definition. The content of all external $refs will be included in the resulting file.
     * @param {Boolean} [flatten = false)] If set to `true`, it creates models from inline schemas in OpenAPI definition. AsyncAPI definitions cannot be flattened.
     * @param {module:api/APIsApi~getDefinitionCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    getDefinition(owner, api, version, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'owner' is set
      if (owner === undefined || owner === null) {
        throw new Error("Missing the required parameter 'owner' when calling getDefinition");
      }
      // verify the required parameter 'api' is set
      if (api === undefined || api === null) {
        throw new Error("Missing the required parameter 'api' when calling getDefinition");
      }
      // verify the required parameter 'version' is set
      if (version === undefined || version === null) {
        throw new Error("Missing the required parameter 'version' when calling getDefinition");
      }

      let pathParams = {
        'owner': owner,
        'api': api,
        'version': version
      };
      let queryParams = {
        'resolved': opts['resolved'],
        'flatten': opts['flatten']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['TokenSecured'];
      let contentTypes = [];
      let accepts = ['application/json', 'application/yaml'];
      let returnType = Object;
      return this.apiClient.callApi(
        '/apis/{owner}/{api}/{version}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getJsonDefinition operation.
     * @callback module:api/APIsApi~getJsonDefinitionCallback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get the OpenAPI definition for the specified API version in JSON format
     * @param {String} owner API owner (organization or user, case-sensitive)
     * @param {String} api API name (case-sensitive)
     * @param {String} version Version identifier
     * @param {Object} opts Optional parameters
     * @param {Boolean} [resolved = false)] Set to true to get the resolved version of the API definition. The content of all external $refs will be included in the resulting file.
     * @param {Boolean} [flatten = false)] If set to `true`, it creates models from inline schemas in OpenAPI definition. AsyncAPI definitions cannot be flattened.
     * @param {module:api/APIsApi~getJsonDefinitionCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    getJsonDefinition(owner, api, version, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'owner' is set
      if (owner === undefined || owner === null) {
        throw new Error("Missing the required parameter 'owner' when calling getJsonDefinition");
      }
      // verify the required parameter 'api' is set
      if (api === undefined || api === null) {
        throw new Error("Missing the required parameter 'api' when calling getJsonDefinition");
      }
      // verify the required parameter 'version' is set
      if (version === undefined || version === null) {
        throw new Error("Missing the required parameter 'version' when calling getJsonDefinition");
      }

      let pathParams = {
        'owner': owner,
        'api': api,
        'version': version
      };
      let queryParams = {
        'resolved': opts['resolved'],
        'flatten': opts['flatten']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['TokenSecured'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Object;
      return this.apiClient.callApi(
        '/apis/{owner}/{api}/{version}/swagger.json', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getLifecycleSettings operation.
     * @callback module:api/APIsApi~getLifecycleSettingsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/LifecycleSettings} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get the published status for the specified API and version
     * @param {String} owner API owner (organization or user, case-sensitive)
     * @param {String} api API name (case-sensitive)
     * @param {String} version Version identifier
     * @param {module:api/APIsApi~getLifecycleSettingsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/LifecycleSettings}
     */
    getLifecycleSettings(owner, api, version, callback) {
      let postBody = null;
      // verify the required parameter 'owner' is set
      if (owner === undefined || owner === null) {
        throw new Error("Missing the required parameter 'owner' when calling getLifecycleSettings");
      }
      // verify the required parameter 'api' is set
      if (api === undefined || api === null) {
        throw new Error("Missing the required parameter 'api' when calling getLifecycleSettings");
      }
      // verify the required parameter 'version' is set
      if (version === undefined || version === null) {
        throw new Error("Missing the required parameter 'version' when calling getLifecycleSettings");
      }

      let pathParams = {
        'owner': owner,
        'api': api,
        'version': version
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['TokenSecured'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = LifecycleSettings;
      return this.apiClient.callApi(
        '/apis/{owner}/{api}/{version}/settings/lifecycle', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getOwnerApis operation.
     * @callback module:api/APIsApi~getOwnerApisCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ApisJson} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get a list of APIs of the specified owner
     * @param {String} owner API owner (organization or user, case-sensitive)
     * @param {Object} opts Optional parameters
     * @param {Number} [page = 0)] Page to return
     * @param {Number} [limit = 10)] Number of results per page (1 .. 100)
     * @param {module:model/String} [sort = 'NAME')] Sort criteria of result set: * NAME * UPDATED * CREATED * OWNER * BEST_MATCH - by relevance * TITLE - by `info.title` 
     * @param {module:model/String} [order = 'ASC')] Sort order
     * @param {module:api/APIsApi~getOwnerApisCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ApisJson}
     */
    getOwnerApis(owner, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'owner' is set
      if (owner === undefined || owner === null) {
        throw new Error("Missing the required parameter 'owner' when calling getOwnerApis");
      }

      let pathParams = {
        'owner': owner
      };
      let queryParams = {
        'page': opts['page'],
        'limit': opts['limit'],
        'sort': opts['sort'],
        'order': opts['order']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['TokenSecured'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ApisJson;
      return this.apiClient.callApi(
        '/apis/{owner}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getPrivateSettings operation.
     * @callback module:api/APIsApi~getPrivateSettingsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/VisibilitySettings} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get the visibility (public or private) of API version
     * @param {String} owner API owner (organization or user, case-sensitive)
     * @param {String} api API name (case-sensitive)
     * @param {String} version Version identifier
     * @param {module:api/APIsApi~getPrivateSettingsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/VisibilitySettings}
     */
    getPrivateSettings(owner, api, version, callback) {
      let postBody = null;
      // verify the required parameter 'owner' is set
      if (owner === undefined || owner === null) {
        throw new Error("Missing the required parameter 'owner' when calling getPrivateSettings");
      }
      // verify the required parameter 'api' is set
      if (api === undefined || api === null) {
        throw new Error("Missing the required parameter 'api' when calling getPrivateSettings");
      }
      // verify the required parameter 'version' is set
      if (version === undefined || version === null) {
        throw new Error("Missing the required parameter 'version' when calling getPrivateSettings");
      }

      let pathParams = {
        'owner': owner,
        'api': api,
        'version': version
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['TokenSecured'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = VisibilitySettings;
      return this.apiClient.callApi(
        '/apis/{owner}/{api}/{version}/settings/private', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getStandardizationErrors operation.
     * @callback module:api/APIsApi~getStandardizationErrorsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/StandardizationResult} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Retrieve the standardization errors for a given API definition
     * @param {String} owner API owner (organization or user, case-sensitive)
     * @param {String} api 
     * @param {String} version Version identifier
     * @param {module:api/APIsApi~getStandardizationErrorsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/StandardizationResult}
     */
    getStandardizationErrors(owner, api, version, callback) {
      let postBody = null;
      // verify the required parameter 'owner' is set
      if (owner === undefined || owner === null) {
        throw new Error("Missing the required parameter 'owner' when calling getStandardizationErrors");
      }
      // verify the required parameter 'api' is set
      if (api === undefined || api === null) {
        throw new Error("Missing the required parameter 'api' when calling getStandardizationErrors");
      }
      // verify the required parameter 'version' is set
      if (version === undefined || version === null) {
        throw new Error("Missing the required parameter 'version' when calling getStandardizationErrors");
      }

      let pathParams = {
        'owner': owner,
        'api': api,
        'version': version
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['TokenSecured'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = StandardizationResult;
      return this.apiClient.callApi(
        '/apis/{owner}/{api}/{version}/standardization', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getValidation operation.
     * @callback module:api/APIsApi~getValidationCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ValidationResult} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Deprecated Get API Standardization errors and warnings
     * **Note:** This endpoint is deprecated. Use the following new endpoint instead: GET /apis/{owner}/{api}/{version}/standardization   If your organization has [API standardization](https://support.smartbear.com/swaggerhub/docs/organizations/api-standardization.html) configured, you can use this operation to validate a specific API version and get a list of errors or warnings with line numbers.  This operation checks for standardization errors only and does not return OpenAPI syntax errors (such as misspelled keywords) or YAML syntax errors.
     * @param {String} owner Organization name (case-sensitive)
     * @param {String} api API name (case-sensitive)
     * @param {String} version Version identifier
     * @param {module:api/APIsApi~getValidationCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ValidationResult}
     */
    getValidation(owner, api, version, callback) {
      let postBody = null;
      // verify the required parameter 'owner' is set
      if (owner === undefined || owner === null) {
        throw new Error("Missing the required parameter 'owner' when calling getValidation");
      }
      // verify the required parameter 'api' is set
      if (api === undefined || api === null) {
        throw new Error("Missing the required parameter 'api' when calling getValidation");
      }
      // verify the required parameter 'version' is set
      if (version === undefined || version === null) {
        throw new Error("Missing the required parameter 'version' when calling getValidation");
      }

      let pathParams = {
        'owner': owner,
        'api': api,
        'version': version
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['TokenSecured'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ValidationResult;
      return this.apiClient.callApi(
        '/apis/{owner}/{api}/{version}/validation', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getYamlDefinition operation.
     * @callback module:api/APIsApi~getYamlDefinitionCallback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get the OpenAPI definition for the specified API version in YAML format
     * @param {String} owner API owner (organization or user, case-sensitive)
     * @param {String} api API name (case-sensitive)
     * @param {String} version Version identifier
     * @param {Object} opts Optional parameters
     * @param {Boolean} [resolved = false)] Set to true to get the resolved version of the API definition. The content of all external $refs will be included in the resulting file.
     * @param {Boolean} [flatten = false)] If set to `true`, it creates models from inline schemas in OpenAPI definition. AsyncAPI definitions cannot be flattened.
     * @param {module:api/APIsApi~getYamlDefinitionCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    getYamlDefinition(owner, api, version, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'owner' is set
      if (owner === undefined || owner === null) {
        throw new Error("Missing the required parameter 'owner' when calling getYamlDefinition");
      }
      // verify the required parameter 'api' is set
      if (api === undefined || api === null) {
        throw new Error("Missing the required parameter 'api' when calling getYamlDefinition");
      }
      // verify the required parameter 'version' is set
      if (version === undefined || version === null) {
        throw new Error("Missing the required parameter 'version' when calling getYamlDefinition");
      }

      let pathParams = {
        'owner': owner,
        'api': api,
        'version': version
      };
      let queryParams = {
        'resolved': opts['resolved'],
        'flatten': opts['flatten']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['TokenSecured'];
      let contentTypes = [];
      let accepts = ['application/yaml', 'application/json'];
      let returnType = Object;
      return this.apiClient.callApi(
        '/apis/{owner}/{api}/{version}/swagger.yaml', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the renameApi operation.
     * @callback module:api/APIsApi~renameApiCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Rename an API
     * The new name must follow the [naming rules](https://support.smartbear.com/swaggerhub/docs/apis/creating-api.html).
     * @param {String} owner API owner (organization or user, case-sensitive)
     * @param {String} api API name (case-sensitive)
     * @param {String} newName New name
     * @param {module:api/APIsApi~renameApiCallback} callback The callback function, accepting three arguments: error, data, response
     */
    renameApi(owner, api, newName, callback) {
      let postBody = null;
      // verify the required parameter 'owner' is set
      if (owner === undefined || owner === null) {
        throw new Error("Missing the required parameter 'owner' when calling renameApi");
      }
      // verify the required parameter 'api' is set
      if (api === undefined || api === null) {
        throw new Error("Missing the required parameter 'api' when calling renameApi");
      }
      // verify the required parameter 'newName' is set
      if (newName === undefined || newName === null) {
        throw new Error("Missing the required parameter 'newName' when calling renameApi");
      }

      let pathParams = {
        'owner': owner,
        'api': api
      };
      let queryParams = {
        'newName': newName
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['TokenSecured'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/apis/{owner}/{api}/rename', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the saveDefinition operation.
     * @callback module:api/APIsApi~saveDefinitionCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Create or update an API
     * Use this operation to create a new API or update an existing API by uploading its OpenAPI definition in YAML or JSON format. The authenticating user must have permissions to create or update APIs in the specified `owner` account.  The API name and version must follow SwaggerHub naming rules, otherwise the request will be rejected. Refer to:    * [API name format](https://support.smartbear.com/swaggerhub/docs/apis/creating-api.html)  * [Version format](https://support.smartbear.com/swaggerhub/docs/apis/versioning.html#format)   When a new version of an existing API is created, it does not automatically become the default version. You can use `PUT /apis/{owner}/{api}/settings/default` to set the default version.  ### cURL example Line breaks are added for readability.      curl -X POST \"https://api.swaggerhub.com/apis/OWNER/API_TO_CREATE_OR_UPDATE\"          -H \"Authorization: SWAGGERHUB_API_KEY\"          -H \"Content-Type: application/yaml\"          --data-binary @C:\\work\\swagger.yaml  **Note:** Use `--data-binary` (not `-d`) when uploading YAML files using cURL, and remember to specify the correct `Content-Type` header.
     * @param {String} owner API owner name (organization or user name, case-sensitive)
     * @param {String} api API name (case-sensitive)
     * @param {String} definition OpenAPI definition in the YAML or JSON format. The content must be syntactically valid YAML or JSON.
     * @param {Object} opts Optional parameters
     * @param {Boolean} [isPrivate = false)] Whether to make the API private (`true`) or public (`false`)
     * @param {String} [version] API version to create or update. If omitted, the version is extracted from the `info.version` field of the provided OpenAPI definition.  Either the `version` parameter or the `info.version` value must be specified, otherwise the request will be rejected. If both are specified, the `version` parameter overrides the `info.version` value.  If this API version already exists, it will be updated with the new definition (unless that version has been published - in this case the update will be rejected).
     * @param {Boolean} [force] Force update
     * @param {module:api/APIsApi~saveDefinitionCallback} callback The callback function, accepting three arguments: error, data, response
     */
    saveDefinition(owner, api, definition, opts, callback) {
      opts = opts || {};
      let postBody = definition;
      // verify the required parameter 'owner' is set
      if (owner === undefined || owner === null) {
        throw new Error("Missing the required parameter 'owner' when calling saveDefinition");
      }
      // verify the required parameter 'api' is set
      if (api === undefined || api === null) {
        throw new Error("Missing the required parameter 'api' when calling saveDefinition");
      }
      // verify the required parameter 'definition' is set
      if (definition === undefined || definition === null) {
        throw new Error("Missing the required parameter 'definition' when calling saveDefinition");
      }

      let pathParams = {
        'owner': owner,
        'api': api
      };
      let queryParams = {
        'isPrivate': opts['isPrivate'],
        'version': opts['version'],
        'force': opts['force']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['TokenSecured'];
      let contentTypes = ['application/json', 'application/yaml'];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/apis/{owner}/{api}', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the searchApis operation.
     * @callback module:api/APIsApi~searchApisCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Search APIs
     * This is a convenience alias for `GET /specs?specType=API`.
     * @param {Object} opts Optional parameters
     * @param {String} [query] Free text query to match
     * @param {module:model/String} [state = 'ALL')] Matches against published state of the spec: * UNPUBLISHED - spec is a draft, a work in progress * PUBLISHED - spec is a stable version ready for consuming from client applications * ANY - either PUBLISHED or UNPUBLISHED 
     * @param {Number} [page = 0)] Page to return
     * @param {Number} [limit = 10)] Number of results per page (1 .. 100)
     * @param {module:model/String} [sort = 'NAME')] Sort criteria of result set: * NAME * UPDATED * CREATED * OWNER * BEST_MATCH - by relevance * TITLE - by `info.title` 
     * @param {module:model/String} [order = 'ASC')] Sort order
     * @param {module:api/APIsApi~searchApisCallback} callback The callback function, accepting three arguments: error, data, response
     */
    searchApis(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'query': opts['query'],
        'state': opts['state'],
        'page': opts['page'],
        'limit': opts['limit'],
        'sort': opts['sort'],
        'order': opts['order']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['TokenSecured'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/apis', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the searchApisAndDomains operation.
     * @callback module:api/APIsApi~searchApisAndDomainsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ApisJson} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Retrieve a list of currently defined APIs, domains, and templates in APIs.json format
     * @param {Object} opts Optional parameters
     * @param {module:model/String} [specType = 'ANY')] Type of definitions to search: * API - APIs only * DOMAIN - domains only * TEMPLATE - templates only * ANY - APIs, domains, and templates 
     * @param {module:model/String} [visibility = 'ANY')] The visibility of a definition in SwaggerHub: * PUBLIC - can be viewed by anyone * PRIVATE - can only be viewed by you or your organization and those that you are collaborating with or have shared it with * ANY - either PUBLIC or PRIVATE 
     * @param {module:model/String} [state = 'ALL')] Matches against published state of the spec: * UNPUBLISHED - spec is a draft, a work in progress * PUBLISHED - spec is a stable version ready for consuming from client applications * ANY - either PUBLISHED or UNPUBLISHED 
     * @param {String} [owner] API or domain owner. Can be username or organization name. Case-sensitive.
     * @param {String} [query] Free text query to match
     * @param {Number} [page = 0)] Page to return
     * @param {Number} [limit = 10)] Number of results per page (1 .. 100)
     * @param {module:model/String} [sort = 'NAME')] Sort criteria of result set: * NAME * UPDATED * CREATED * OWNER * BEST_MATCH - by relevance * TITLE - by `info.title` 
     * @param {module:model/String} [order = 'ASC')] Sort order
     * @param {module:api/APIsApi~searchApisAndDomainsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ApisJson}
     */
    searchApisAndDomains(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'specType': opts['specType'],
        'visibility': opts['visibility'],
        'state': opts['state'],
        'owner': opts['owner'],
        'query': opts['query'],
        'page': opts['page'],
        'limit': opts['limit'],
        'sort': opts['sort'],
        'order': opts['order']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['TokenSecured'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ApisJson;
      return this.apiClient.callApi(
        '/specs', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the setApiCommentStatusV2 operation.
     * @callback module:api/APIsApi~setApiCommentStatusV2Callback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Resolve or reopen a comment
     * @param {String} owner API owner (organization or user, case-sensitive)
     * @param {String} api API name (case-sensitive)
     * @param {String} version Version identifier
     * @param {String} comment Comment identifier
     * @param {module:model/String} status Comment status
     * @param {module:api/APIsApi~setApiCommentStatusV2Callback} callback The callback function, accepting three arguments: error, data, response
     */
    setApiCommentStatusV2(owner, api, version, comment, status, callback) {
      let postBody = null;
      // verify the required parameter 'owner' is set
      if (owner === undefined || owner === null) {
        throw new Error("Missing the required parameter 'owner' when calling setApiCommentStatusV2");
      }
      // verify the required parameter 'api' is set
      if (api === undefined || api === null) {
        throw new Error("Missing the required parameter 'api' when calling setApiCommentStatusV2");
      }
      // verify the required parameter 'version' is set
      if (version === undefined || version === null) {
        throw new Error("Missing the required parameter 'version' when calling setApiCommentStatusV2");
      }
      // verify the required parameter 'comment' is set
      if (comment === undefined || comment === null) {
        throw new Error("Missing the required parameter 'comment' when calling setApiCommentStatusV2");
      }
      // verify the required parameter 'status' is set
      if (status === undefined || status === null) {
        throw new Error("Missing the required parameter 'status' when calling setApiCommentStatusV2");
      }

      let pathParams = {
        'owner': owner,
        'api': api,
        'version': version,
        'comment': comment,
        'status': status
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['TokenSecured'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/apis/{owner}/{api}/{version}/comments/{comment}/status/{status}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the setApiDefaultVersion operation.
     * @callback module:api/APIsApi~setApiDefaultVersionCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Set the default API version
     * @param {String} owner API owner (organization or user, case-sensitive)
     * @param {String} api API name (case-sensitive)
     * @param {module:model/DefaultVersion} defaultVersion An object that specifies the default version for this API
     * @param {module:api/APIsApi~setApiDefaultVersionCallback} callback The callback function, accepting three arguments: error, data, response
     */
    setApiDefaultVersion(owner, api, defaultVersion, callback) {
      let postBody = defaultVersion;
      // verify the required parameter 'owner' is set
      if (owner === undefined || owner === null) {
        throw new Error("Missing the required parameter 'owner' when calling setApiDefaultVersion");
      }
      // verify the required parameter 'api' is set
      if (api === undefined || api === null) {
        throw new Error("Missing the required parameter 'api' when calling setApiDefaultVersion");
      }
      // verify the required parameter 'defaultVersion' is set
      if (defaultVersion === undefined || defaultVersion === null) {
        throw new Error("Missing the required parameter 'defaultVersion' when calling setApiDefaultVersion");
      }

      let pathParams = {
        'owner': owner,
        'api': api
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['TokenSecured'];
      let contentTypes = ['application/json'];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/apis/{owner}/{api}/settings/default', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the setLifecycleSettings operation.
     * @callback module:api/APIsApi~setLifecycleSettingsCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Publish or unpublish an API version
     * @param {String} owner API owner (organization or user, case-sensitive)
     * @param {String} api API name (case-sensitive)
     * @param {String} version Version identifier
     * @param {module:model/LifecycleSettings} settings An object that specifies the new `published` state: `true` means published, `false` - unpublished
     * @param {Object} opts Optional parameters
     * @param {Boolean} [force = false)] To publish an API that references _unpublished_ domains, this parameter must be `true`. Otherwise, the request will be rejected with status code 424.
     * @param {module:api/APIsApi~setLifecycleSettingsCallback} callback The callback function, accepting three arguments: error, data, response
     */
    setLifecycleSettings(owner, api, version, settings, opts, callback) {
      opts = opts || {};
      let postBody = settings;
      // verify the required parameter 'owner' is set
      if (owner === undefined || owner === null) {
        throw new Error("Missing the required parameter 'owner' when calling setLifecycleSettings");
      }
      // verify the required parameter 'api' is set
      if (api === undefined || api === null) {
        throw new Error("Missing the required parameter 'api' when calling setLifecycleSettings");
      }
      // verify the required parameter 'version' is set
      if (version === undefined || version === null) {
        throw new Error("Missing the required parameter 'version' when calling setLifecycleSettings");
      }
      // verify the required parameter 'settings' is set
      if (settings === undefined || settings === null) {
        throw new Error("Missing the required parameter 'settings' when calling setLifecycleSettings");
      }

      let pathParams = {
        'owner': owner,
        'api': api,
        'version': version
      };
      let queryParams = {
        'force': opts['force']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['TokenSecured'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/apis/{owner}/{api}/{version}/settings/lifecycle', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the setPrivateSettings operation.
     * @callback module:api/APIsApi~setPrivateSettingsCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Set the visibility (public or private) of an API version
     * @param {String} owner API owner (organization or user, case-sensitive)
     * @param {String} api API name (case-sensitive)
     * @param {String} version Version identifier
     * @param {module:model/VisibilitySettings} settings An object that specifies the new visibility level: `true` means private, `false` - public
     * @param {module:api/APIsApi~setPrivateSettingsCallback} callback The callback function, accepting three arguments: error, data, response
     */
    setPrivateSettings(owner, api, version, settings, callback) {
      let postBody = settings;
      // verify the required parameter 'owner' is set
      if (owner === undefined || owner === null) {
        throw new Error("Missing the required parameter 'owner' when calling setPrivateSettings");
      }
      // verify the required parameter 'api' is set
      if (api === undefined || api === null) {
        throw new Error("Missing the required parameter 'api' when calling setPrivateSettings");
      }
      // verify the required parameter 'version' is set
      if (version === undefined || version === null) {
        throw new Error("Missing the required parameter 'version' when calling setPrivateSettings");
      }
      // verify the required parameter 'settings' is set
      if (settings === undefined || settings === null) {
        throw new Error("Missing the required parameter 'settings' when calling setPrivateSettings");
      }

      let pathParams = {
        'owner': owner,
        'api': api,
        'version': version
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['TokenSecured'];
      let contentTypes = ['application/json'];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/apis/{owner}/{api}/{version}/settings/private', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the updateApiCommentReplyV2 operation.
     * @callback module:api/APIsApi~updateApiCommentReplyV2Callback
     * @param {String} error Error message, if any.
     * @param {module:model/Comment} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update a comment reply
     * @param {String} owner API owner (organization or user, case-sensitive)
     * @param {String} api API name (case-sensitive)
     * @param {String} version Version identifier
     * @param {String} comment Comment identifier
     * @param {String} reply Reply identifier
     * @param {Object} opts Optional parameters
     * @param {module:model/CommentPatch} [body] 
     * @param {module:api/APIsApi~updateApiCommentReplyV2Callback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Comment}
     */
    updateApiCommentReplyV2(owner, api, version, comment, reply, opts, callback) {
      opts = opts || {};
      let postBody = opts['body'];
      // verify the required parameter 'owner' is set
      if (owner === undefined || owner === null) {
        throw new Error("Missing the required parameter 'owner' when calling updateApiCommentReplyV2");
      }
      // verify the required parameter 'api' is set
      if (api === undefined || api === null) {
        throw new Error("Missing the required parameter 'api' when calling updateApiCommentReplyV2");
      }
      // verify the required parameter 'version' is set
      if (version === undefined || version === null) {
        throw new Error("Missing the required parameter 'version' when calling updateApiCommentReplyV2");
      }
      // verify the required parameter 'comment' is set
      if (comment === undefined || comment === null) {
        throw new Error("Missing the required parameter 'comment' when calling updateApiCommentReplyV2");
      }
      // verify the required parameter 'reply' is set
      if (reply === undefined || reply === null) {
        throw new Error("Missing the required parameter 'reply' when calling updateApiCommentReplyV2");
      }

      let pathParams = {
        'owner': owner,
        'api': api,
        'version': version,
        'comment': comment,
        'reply': reply
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['TokenSecured'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Comment;
      return this.apiClient.callApi(
        '/apis/{owner}/{api}/{version}/comments/{comment}/replies/{reply}', 'PATCH',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the updateApiCommentV2 operation.
     * @callback module:api/APIsApi~updateApiCommentV2Callback
     * @param {String} error Error message, if any.
     * @param {module:model/ClosableComment} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update a comment
     * @param {String} owner API owner (organization or user, case-sensitive)
     * @param {String} api API name (case-sensitive)
     * @param {String} version Version identifier
     * @param {String} comment Comment identifier
     * @param {Object} opts Optional parameters
     * @param {module:model/ClosableCommentPatch} [body] 
     * @param {module:api/APIsApi~updateApiCommentV2Callback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ClosableComment}
     */
    updateApiCommentV2(owner, api, version, comment, opts, callback) {
      opts = opts || {};
      let postBody = opts['body'];
      // verify the required parameter 'owner' is set
      if (owner === undefined || owner === null) {
        throw new Error("Missing the required parameter 'owner' when calling updateApiCommentV2");
      }
      // verify the required parameter 'api' is set
      if (api === undefined || api === null) {
        throw new Error("Missing the required parameter 'api' when calling updateApiCommentV2");
      }
      // verify the required parameter 'version' is set
      if (version === undefined || version === null) {
        throw new Error("Missing the required parameter 'version' when calling updateApiCommentV2");
      }
      // verify the required parameter 'comment' is set
      if (comment === undefined || comment === null) {
        throw new Error("Missing the required parameter 'comment' when calling updateApiCommentV2");
      }

      let pathParams = {
        'owner': owner,
        'api': api,
        'version': version,
        'comment': comment
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['TokenSecured'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ClosableComment;
      return this.apiClient.callApi(
        '/apis/{owner}/{api}/{version}/comments/{comment}', 'PATCH',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the updateApiCommentsV2 operation.
     * @callback module:api/APIsApi~updateApiCommentsV2Callback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Bulk update comments
     * @param {String} owner API owner (organization or user, case-sensitive)
     * @param {String} api API name (case-sensitive)
     * @param {String} version Version identifier
     * @param {module:model/CommentsBatch} body 
     * @param {module:api/APIsApi~updateApiCommentsV2Callback} callback The callback function, accepting three arguments: error, data, response
     */
    updateApiCommentsV2(owner, api, version, body, callback) {
      let postBody = body;
      // verify the required parameter 'owner' is set
      if (owner === undefined || owner === null) {
        throw new Error("Missing the required parameter 'owner' when calling updateApiCommentsV2");
      }
      // verify the required parameter 'api' is set
      if (api === undefined || api === null) {
        throw new Error("Missing the required parameter 'api' when calling updateApiCommentsV2");
      }
      // verify the required parameter 'version' is set
      if (version === undefined || version === null) {
        throw new Error("Missing the required parameter 'version' when calling updateApiCommentsV2");
      }
      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling updateApiCommentsV2");
      }

      let pathParams = {
        'owner': owner,
        'api': api,
        'version': version
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['TokenSecured'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/apis/{owner}/{api}/{version}/comments/batch', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
