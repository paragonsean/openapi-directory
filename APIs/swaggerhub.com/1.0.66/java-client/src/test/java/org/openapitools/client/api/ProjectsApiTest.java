/*
 * SwaggerHub Registry API
 * # Overview Use SwaggerHub Registry API to access, manage, and update the following resources in SwaggerHub, bypassing the web interface:   * APIs   * Domains   * Integrations   * Projects   * Templates   SwaggerHub also provides the [User Management API](https://app.swaggerhub.com/apis-docs/swagger-hub/user-management-api/) to get information about organizations and manage organization members.  # Base URL Use the following base URL for SwaggerHub SaaS:          http(s)://api.swaggerhub.com  **Note:** This documentation is for SwaggerHub SaaS. On-Premise customers should use the bundled API definition, which can be found at the URLs provided below.  Version 1.29.0 or later:      http(s)://SERVER/v1/openapi.yaml - YAML version     http(s)://SERVER/v1/openapi.json - JSON version  Earlier versions:      http(s)://SERVER/v1/swagger.yaml - YAML version     http(s)://SERVER/v1/swagger.json - JSON version  # Authentication Operations that update data or access private data require authentication using an API key. You can find your personal API key on the [API Keys](https://app.swaggerhub.com/settings/apiKey) page in your account settings. Send this key in the `Authorization` header when making requests to the Registry API:      Authorization: YOUR_API_KEY  To test API calls from this documentation page, click the **Authorize** button below and paste your API key there.  **Important:** Keep the API key secure and do not store it directly in your code. # Tools In addition to calling the Registry API directly, you can use the following tools to interact with the API from the command line or CI/CD pipeline:   * [SwaggerHub CLI](https://www.npmjs.com/package/swaggerhub-cli)   * [Maven plugin](https://github.com/swagger-api/swaggerhub-maven-plugin)  * [Gradle plugin](https://github.com/swagger-api/swaggerhub-gradle-plugin) 
 *
 * The version of the OpenAPI document: 1.0.66
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiException;
import org.openapitools.client.model.Project;
import org.openapitools.client.model.ProjectMemberList;
import org.openapitools.client.model.ProjectsJson;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for ProjectsApi
 */
@Disabled
public class ProjectsApiTest {

    private final ProjectsApi api = new ProjectsApi();

    /**
     * Add an API or domain to a project
     *
     * Use this operation to add a single API or domain to the specified project.  To add multiple APIs or domains at once, use &#x60;PUT /projects/{owner}/{projectId}&#x60;.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void addSpecToProjectV2Test() throws ApiException {
        String owner = null;
        String projectId = null;
        String specType = null;
        String name = null;
        api.addSpecToProjectV2(owner, projectId, specType, name);
        // TODO: test validations
    }

    /**
     * Create a project in an organization
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void createProjectTest() throws ApiException {
        String owner = null;
        Project projectRequest = null;
        api.createProject(owner, projectRequest);
        // TODO: test validations
    }

    /**
     * Delete a project
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void deleteProjectV2Test() throws ApiException {
        String owner = null;
        String projectId = null;
        api.deleteProjectV2(owner, projectId);
        // TODO: test validations
    }

    /**
     * Get all projects of an organization
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getOrgProjectsV2Test() throws ApiException {
        String owner = null;
        Boolean nameOnly = null;
        Integer page = null;
        Integer limit = null;
        String order = null;
        ProjectsJson response = api.getOrgProjectsV2(owner, nameOnly, page, limit, order);
        // TODO: test validations
    }

    /**
     * Get project members
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getProjectMembersV2Test() throws ApiException {
        String owner = null;
        String projectId = null;
        ProjectMemberList response = api.getProjectMembersV2(owner, projectId);
        // TODO: test validations
    }

    /**
     * Get project information
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getProjectV2Test() throws ApiException {
        String owner = null;
        String projectId = null;
        Project response = api.getProjectV2(owner, projectId);
        // TODO: test validations
    }

    /**
     * Get all projects that a user has access to
     *
     * Returns all projects that the authenticating user has access to. Organization owners get a list of all projects in owned organizations. Other members get a list of just the projects they are member of.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getUserProjectsTest() throws ApiException {
        Boolean nameOnly = null;
        Integer page = null;
        Integer limit = null;
        String sort = null;
        String order = null;
        ProjectsJson response = api.getUserProjects(nameOnly, page, limit, sort, order);
        // TODO: test validations
    }

    /**
     * Update a project
     *
     * Use this operation to update an existing project, for example, add or remove APIs, or change the project description.  When updating a project, the &#x60;apis&#x60; and &#x60;domains&#x60; lists _replace_ the existing ones. This means that to add new APIs and domains to a project, you need to send the &#x60;apis&#x60; and &#x60;domains&#x60; lists containing both the existing and new APIs and domains.  To add a single API or domain to a project, you can use &#x60;PUT /projects/{owner}/{projectId}/{specType}/{name}&#x60; instead.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void saveProjectV2Test() throws ApiException {
        String owner = null;
        String projectId = null;
        Project projectRequest = null;
        api.saveProjectV2(owner, projectId, projectRequest);
        // TODO: test validations
    }

    /**
     * Update a project&#39;s members list
     *
     * When updating a project, the &#x60;members&#x60; list _replaces_ the existing one. This means that to add new members to a project, you need to send the &#x60;members&#x60; list containing both the existing and new members. 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void updateProjectMembersV2Test() throws ApiException {
        String owner = null;
        String projectId = null;
        ProjectMemberList projectMemberList = null;
        api.updateProjectMembersV2(owner, projectId, projectMemberList);
        // TODO: test validations
    }

}
