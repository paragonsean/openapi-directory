/*
 * SwaggerHub Registry API
 * # Overview Use SwaggerHub Registry API to access, manage, and update the following resources in SwaggerHub, bypassing the web interface:   * APIs   * Domains   * Integrations   * Projects   * Templates   SwaggerHub also provides the [User Management API](https://app.swaggerhub.com/apis-docs/swagger-hub/user-management-api/) to get information about organizations and manage organization members.  # Base URL Use the following base URL for SwaggerHub SaaS:          http(s)://api.swaggerhub.com  **Note:** This documentation is for SwaggerHub SaaS. On-Premise customers should use the bundled API definition, which can be found at the URLs provided below.  Version 1.29.0 or later:      http(s)://SERVER/v1/openapi.yaml - YAML version     http(s)://SERVER/v1/openapi.json - JSON version  Earlier versions:      http(s)://SERVER/v1/swagger.yaml - YAML version     http(s)://SERVER/v1/swagger.json - JSON version  # Authentication Operations that update data or access private data require authentication using an API key. You can find your personal API key on the [API Keys](https://app.swaggerhub.com/settings/apiKey) page in your account settings. Send this key in the `Authorization` header when making requests to the Registry API:      Authorization: YOUR_API_KEY  To test API calls from this documentation page, click the **Authorize** button below and paste your API key there.  **Important:** Keep the API key secure and do not store it directly in your code. # Tools In addition to calling the Registry API directly, you can use the following tools to interact with the API from the command line or CI/CD pipeline:   * [SwaggerHub CLI](https://www.npmjs.com/package/swaggerhub-cli)   * [Maven plugin](https://github.com/swagger-api/swaggerhub-maven-plugin)  * [Gradle plugin](https://github.com/swagger-api/swaggerhub-gradle-plugin) 
 *
 * The version of the OpenAPI document: 1.0.66
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiException;
import org.openapitools.client.model.ApisJson;
import org.openapitools.client.model.ClosableComment;
import org.openapitools.client.model.ClosableCommentPatch;
import org.openapitools.client.model.Comment;
import org.openapitools.client.model.CommentPatch;
import org.openapitools.client.model.CommentsBatch;
import org.openapitools.client.model.DefaultVersion;
import org.openapitools.client.model.ForkVersion;
import org.openapitools.client.model.LifecycleSettings;
import org.openapitools.client.model.NewComment;
import org.openapitools.client.model.NewReply;
import org.openapitools.client.model.NewVersion;
import org.openapitools.client.model.StandardizationResult;
import org.openapitools.client.model.ValidationResult;
import org.openapitools.client.model.VisibilitySettings;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for ApisApi
 */
@Disabled
public class ApisApiTest {

    private final ApisApi api = new ApisApi();

    /**
     * Reply to a comment
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void addApiCommentReplyV2Test() throws ApiException {
        String owner = null;
        String api = null;
        String version = null;
        String comment = null;
        NewReply body = null;
        List<Comment> response = api.addApiCommentReplyV2(owner, api, version, comment, body);
        // TODO: test validations
    }

    /**
     * Add a new comment
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void addApiCommentV2Test() throws ApiException {
        String owner = null;
        String api = null;
        String version = null;
        NewComment body = null;
        ClosableComment response = api.addApiCommentV2(owner, api, version, body);
        // TODO: test validations
    }

    /**
     * Create a new API version
     *
     * Use this operation to clone an existing API version as a new version. The new version will have the same YAML content but with updated &#x60;info.version&#x60;.  **Note:** Comments, integrations, and codegen options are not copied to the new version. The default version also remains unchanged.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void cloneApiTest() throws ApiException {
        String owner = null;
        String api = null;
        String version = null;
        NewVersion newVersion = null;
        api.cloneApi(owner, api, version, newVersion);
        // TODO: test validations
    }

    /**
     * Delete an API
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void deleteApiTest() throws ApiException {
        String owner = null;
        String api = null;
        api.deleteApi(owner, api);
        // TODO: test validations
    }

    /**
     * Delete a comment reply
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void deleteApiCommentReplyV2Test() throws ApiException {
        String owner = null;
        String api = null;
        String version = null;
        String comment = null;
        String reply = null;
        api.deleteApiCommentReplyV2(owner, api, version, comment, reply);
        // TODO: test validations
    }

    /**
     * Delete a comment
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void deleteApiCommentV2Test() throws ApiException {
        String owner = null;
        String api = null;
        String version = null;
        String comment = null;
        api.deleteApiCommentV2(owner, api, version, comment);
        // TODO: test validations
    }

    /**
     * Delete an API version
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void deleteApiVersionTest() throws ApiException {
        String owner = null;
        String api = null;
        String version = null;
        api.deleteApiVersion(owner, api, version);
        // TODO: test validations
    }

    /**
     * Fork an API
     *
     * Creates a [fork](https://support.smartbear.com/swaggerhub/docs/apis/forking-api.html) of the specified API definition and version. The fork can be created as a new API, or as a new version in another existing API.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void forkApiTest() throws ApiException {
        String owner = null;
        String api = null;
        String version = null;
        ForkVersion forkVersion = null;
        api.forkApi(owner, api, version, forkVersion);
        // TODO: test validations
    }

    /**
     * Get comments for the specified API version
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getApiCommentsV2Test() throws ApiException {
        String owner = null;
        String api = null;
        String version = null;
        List<ClosableComment> response = api.getApiCommentsV2(owner, api, version);
        // TODO: test validations
    }

    /**
     * Get the default version of an API
     *
     * This operation returns the version identifier, such as &#x60;1.0.0&#x60;. To get the definition itself, use &#x60;GET /apis/{owner}/{api}/{version}&#x60;.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getApiDefaultVersionTest() throws ApiException {
        String owner = null;
        String api = null;
        DefaultVersion response = api.getApiDefaultVersion(owner, api);
        // TODO: test validations
    }

    /**
     * Get a list of API versions
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getApiVersionsTest() throws ApiException {
        String owner = null;
        String api = null;
        ApisJson response = api.getApiVersions(owner, api);
        // TODO: test validations
    }

    /**
     * Get the OpenAPI definition of the specified API version
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getDefinitionTest() throws ApiException {
        String owner = null;
        String api = null;
        String version = null;
        Boolean resolved = null;
        Boolean flatten = null;
        Object response = api.getDefinition(owner, api, version, resolved, flatten);
        // TODO: test validations
    }

    /**
     * Get the OpenAPI definition for the specified API version in JSON format
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getJsonDefinitionTest() throws ApiException {
        String owner = null;
        String api = null;
        String version = null;
        Boolean resolved = null;
        Boolean flatten = null;
        Object response = api.getJsonDefinition(owner, api, version, resolved, flatten);
        // TODO: test validations
    }

    /**
     * Get the published status for the specified API and version
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getLifecycleSettingsTest() throws ApiException {
        String owner = null;
        String api = null;
        String version = null;
        LifecycleSettings response = api.getLifecycleSettings(owner, api, version);
        // TODO: test validations
    }

    /**
     * Get a list of APIs of the specified owner
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getOwnerApisTest() throws ApiException {
        String owner = null;
        Integer page = null;
        Integer limit = null;
        String sort = null;
        String order = null;
        ApisJson response = api.getOwnerApis(owner, page, limit, sort, order);
        // TODO: test validations
    }

    /**
     * Get the visibility (public or private) of API version
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getPrivateSettingsTest() throws ApiException {
        String owner = null;
        String api = null;
        String version = null;
        VisibilitySettings response = api.getPrivateSettings(owner, api, version);
        // TODO: test validations
    }

    /**
     * Retrieve the standardization errors for a given API definition
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getStandardizationErrorsTest() throws ApiException {
        String owner = null;
        String api = null;
        String version = null;
        StandardizationResult response = api.getStandardizationErrors(owner, api, version);
        // TODO: test validations
    }

    /**
     * Deprecated Get API Standardization errors and warnings
     *
     * **Note:** This endpoint is deprecated. Use the following new endpoint instead: GET /apis/{owner}/{api}/{version}/standardization   If your organization has [API standardization](https://support.smartbear.com/swaggerhub/docs/organizations/api-standardization.html) configured, you can use this operation to validate a specific API version and get a list of errors or warnings with line numbers.  This operation checks for standardization errors only and does not return OpenAPI syntax errors (such as misspelled keywords) or YAML syntax errors.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getValidationTest() throws ApiException {
        String owner = null;
        String api = null;
        String version = null;
        ValidationResult response = api.getValidation(owner, api, version);
        // TODO: test validations
    }

    /**
     * Get the OpenAPI definition for the specified API version in YAML format
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getYamlDefinitionTest() throws ApiException {
        String owner = null;
        String api = null;
        String version = null;
        Boolean resolved = null;
        Boolean flatten = null;
        Object response = api.getYamlDefinition(owner, api, version, resolved, flatten);
        // TODO: test validations
    }

    /**
     * Rename an API
     *
     * The new name must follow the [naming rules](https://support.smartbear.com/swaggerhub/docs/apis/creating-api.html).
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void renameApiTest() throws ApiException {
        String owner = null;
        String api = null;
        String newName = null;
        api.renameApi(owner, api, newName);
        // TODO: test validations
    }

    /**
     * Create or update an API
     *
     * Use this operation to create a new API or update an existing API by uploading its OpenAPI definition in YAML or JSON format. The authenticating user must have permissions to create or update APIs in the specified &#x60;owner&#x60; account.  The API name and version must follow SwaggerHub naming rules, otherwise the request will be rejected. Refer to:    * [API name format](https://support.smartbear.com/swaggerhub/docs/apis/creating-api.html)  * [Version format](https://support.smartbear.com/swaggerhub/docs/apis/versioning.html#format)   When a new version of an existing API is created, it does not automatically become the default version. You can use &#x60;PUT /apis/{owner}/{api}/settings/default&#x60; to set the default version.  ### cURL example Line breaks are added for readability.      curl -X POST \&quot;https://api.swaggerhub.com/apis/OWNER/API_TO_CREATE_OR_UPDATE\&quot;          -H \&quot;Authorization: SWAGGERHUB_API_KEY\&quot;          -H \&quot;Content-Type: application/yaml\&quot;          --data-binary @C:\\work\\swagger.yaml  **Note:** Use &#x60;--data-binary&#x60; (not &#x60;-d&#x60;) when uploading YAML files using cURL, and remember to specify the correct &#x60;Content-Type&#x60; header.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void saveDefinitionTest() throws ApiException {
        String owner = null;
        String api = null;
        String definition = null;
        Boolean isPrivate = null;
        String version = null;
        Boolean force = null;
        api.saveDefinition(owner, api, definition, isPrivate, version, force);
        // TODO: test validations
    }

    /**
     * Search APIs
     *
     * This is a convenience alias for &#x60;GET /specs?specType&#x3D;API&#x60;.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void searchApisTest() throws ApiException {
        String query = null;
        String state = null;
        Integer page = null;
        Integer limit = null;
        String sort = null;
        String order = null;
        api.searchApis(query, state, page, limit, sort, order);
        // TODO: test validations
    }

    /**
     * Retrieve a list of currently defined APIs, domains, and templates in APIs.json format
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void searchApisAndDomainsTest() throws ApiException {
        String specType = null;
        String visibility = null;
        String state = null;
        String owner = null;
        String query = null;
        Integer page = null;
        Integer limit = null;
        String sort = null;
        String order = null;
        ApisJson response = api.searchApisAndDomains(specType, visibility, state, owner, query, page, limit, sort, order);
        // TODO: test validations
    }

    /**
     * Resolve or reopen a comment
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void setApiCommentStatusV2Test() throws ApiException {
        String owner = null;
        String api = null;
        String version = null;
        String comment = null;
        String status = null;
        api.setApiCommentStatusV2(owner, api, version, comment, status);
        // TODO: test validations
    }

    /**
     * Set the default API version
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void setApiDefaultVersionTest() throws ApiException {
        String owner = null;
        String api = null;
        DefaultVersion defaultVersion = null;
        api.setApiDefaultVersion(owner, api, defaultVersion);
        // TODO: test validations
    }

    /**
     * Publish or unpublish an API version
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void setLifecycleSettingsTest() throws ApiException {
        String owner = null;
        String api = null;
        String version = null;
        LifecycleSettings settings = null;
        Boolean force = null;
        api.setLifecycleSettings(owner, api, version, settings, force);
        // TODO: test validations
    }

    /**
     * Set the visibility (public or private) of an API version
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void setPrivateSettingsTest() throws ApiException {
        String owner = null;
        String api = null;
        String version = null;
        VisibilitySettings settings = null;
        api.setPrivateSettings(owner, api, version, settings);
        // TODO: test validations
    }

    /**
     * Update a comment reply
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void updateApiCommentReplyV2Test() throws ApiException {
        String owner = null;
        String api = null;
        String version = null;
        String comment = null;
        String reply = null;
        CommentPatch body = null;
        Comment response = api.updateApiCommentReplyV2(owner, api, version, comment, reply, body);
        // TODO: test validations
    }

    /**
     * Update a comment
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void updateApiCommentV2Test() throws ApiException {
        String owner = null;
        String api = null;
        String version = null;
        String comment = null;
        ClosableCommentPatch body = null;
        ClosableComment response = api.updateApiCommentV2(owner, api, version, comment, body);
        // TODO: test validations
    }

    /**
     * Bulk update comments
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void updateApiCommentsV2Test() throws ApiException {
        String owner = null;
        String api = null;
        String version = null;
        CommentsBatch body = null;
        api.updateApiCommentsV2(owner, api, version, body);
        // TODO: test validations
    }

}
