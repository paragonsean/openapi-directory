/*
 * SwaggerHub Registry API
 * # Overview Use SwaggerHub Registry API to access, manage, and update the following resources in SwaggerHub, bypassing the web interface:   * APIs   * Domains   * Integrations   * Projects   * Templates   SwaggerHub also provides the [User Management API](https://app.swaggerhub.com/apis-docs/swagger-hub/user-management-api/) to get information about organizations and manage organization members.  # Base URL Use the following base URL for SwaggerHub SaaS:          http(s)://api.swaggerhub.com  **Note:** This documentation is for SwaggerHub SaaS. On-Premise customers should use the bundled API definition, which can be found at the URLs provided below.  Version 1.29.0 or later:      http(s)://SERVER/v1/openapi.yaml - YAML version     http(s)://SERVER/v1/openapi.json - JSON version  Earlier versions:      http(s)://SERVER/v1/swagger.yaml - YAML version     http(s)://SERVER/v1/swagger.json - JSON version  # Authentication Operations that update data or access private data require authentication using an API key. You can find your personal API key on the [API Keys](https://app.swaggerhub.com/settings/apiKey) page in your account settings. Send this key in the `Authorization` header when making requests to the Registry API:      Authorization: YOUR_API_KEY  To test API calls from this documentation page, click the **Authorize** button below and paste your API key there.  **Important:** Keep the API key secure and do not store it directly in your code. # Tools In addition to calling the Registry API directly, you can use the following tools to interact with the API from the command line or CI/CD pipeline:   * [SwaggerHub CLI](https://www.npmjs.com/package/swaggerhub-cli)   * [Maven plugin](https://github.com/swagger-api/swaggerhub-maven-plugin)  * [Gradle plugin](https://github.com/swagger-api/swaggerhub-gradle-plugin) 
 *
 * The version of the OpenAPI document: 1.0.66
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiException;
import org.openapitools.client.model.IntegrationConfiguration;
import org.openapitools.client.model.IntegrationConfigurations;
import java.util.UUID;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for IntegrationsApi
 */
@Disabled
public class IntegrationsApiTest {

    private final IntegrationsApi api = new IntegrationsApi();

    /**
     * Create an integration for the specified API and version
     *
     * Use this operation to configure an integration for a specific API version. The integration type is determined by which object is provided in the request body (specifically, by the &#x60;configType&#x60; value).  For a list of fields that need to be provided in the request body, see the descriptions of the following objects in the \&quot;Models\&quot; section at the bottom of API docs:   * &#x60;AmazonApiGatewayIntegration&#x60;  * &#x60;AmazonApiGatewayLambdaIntegration&#x60;  * &#x60;ApigeeEdgeIntegration&#x60;  * &#x60;AutoMockingIntegration&#x60;  * &#x60;AzureApiManagementIntegration&#x60;  * &#x60;AzureDevopsServicesIntegration&#x60;  * &#x60;BitbucketCloudIntegration&#x60;  * &#x60;BitbucketServerIntegration&#x60;  * &#x60;GitHubIntegration&#x60;  * &#x60;GitHubEnterpriseIntegration&#x60;  * &#x60;GitLabIntegration&#x60;  * &#x60;IBMApiConnectIntegration&#x60;  * &#x60;WebhookIntegration&#x60;  **Notes:**   * The integration &#x60;name&#x60; must be unique among all integrations configured for the given API version.   * If &#x60;target&#x60; is the YAMl/JSON definition, you must specify the &#x60;outputFile&#x60;.   * If &#x60;syncMethod&#x60;&#x3D;_Advanced Sync_, you must specify a non-empty list of either &#x60;providedPaths&#x60; or &#x60;managedPaths&#x60; (or both). If you are not sure which paths to use, use &#x60;providedPaths&#x60;&#x3D;&#x60;[\&quot;*\&quot;]&#x60;.   * The operation does not validate the repository details and access tokens.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void createIntegrationTest() throws ApiException {
        String owner = null;
        String api = null;
        String version = null;
        Object integrationTypeConfiguration = null;
        IntegrationConfiguration response = api.createIntegration(owner, api, version, integrationTypeConfiguration);
        // TODO: test validations
    }

    /**
     * Delete an integration
     *
     * Delete an existing integration specified by its ID.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void deleteIntegrationTest() throws ApiException {
        String owner = null;
        String api = null;
        String version = null;
        UUID integrationId = null;
        api.deleteIntegration(owner, api, version, integrationId);
        // TODO: test validations
    }

    /**
     * Run an integration
     *
     * Use this operation to trigger an existing integration.  Source control integrations push to (not pull from) the configured repository and branch. You can optionally provide a custom commit message.  **Note:** Webhooks cannot be triggered by this operation, they are only triggered when an API is saved or published. An attempt to trigger a webhook will return status code 400.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void executeIntegrationTest() throws ApiException {
        String owner = null;
        String api = null;
        String version = null;
        UUID integrationId = null;
        String commitMessage = null;
        api.executeIntegration(owner, api, version, integrationId, commitMessage);
        // TODO: test validations
    }

    /**
     * Get integration settings
     *
     * Returns the configuration of the specified integration. Access tokens and passwords are not returned for security reasons.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getIntegrationByIdTest() throws ApiException {
        String owner = null;
        String api = null;
        String version = null;
        UUID integrationId = null;
        IntegrationConfiguration response = api.getIntegrationById(owner, api, version, integrationId);
        // TODO: test validations
    }

    /**
     * Get all integrations configured for the specified API version
     *
     * The returned information includes integration types, names, unique IDs, and enabled/disabled status.  **Note:** The following integration types are currently not returned: Amazon API Gateway Lambda Sync, Apigee Edge, Azure API Management, IBM API Connect.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getIntegrationsTest() throws ApiException {
        String owner = null;
        String api = null;
        String version = null;
        IntegrationConfigurations response = api.getIntegrations(owner, api, version);
        // TODO: test validations
    }

    /**
     * Partially update integration settings
     *
     * Use this operation to partially update integration settings for the specified API and integration ID. For example, enable or disable an integration, or specify a new access token.  Only the fields provided in the request body will be updated; other settings will remain unchanged. For a list of fields that can be updated, see the following objects in the \&quot;Models\&quot; section at the bottom of API docs:   * &#x60;AmazonApiGatewayIntegration&#x60;  * &#x60;AmazonApiGatewayLambdaIntegration&#x60;  * &#x60;ApigeeEdgeIntegration&#x60;  * &#x60;AutoMockingIntegration&#x60;  * &#x60;AzureApiManagementIntegration&#x60;  * &#x60;AzureDevopsServicesIntegration&#x60;  * &#x60;BitbucketCloudIntegration&#x60;  * &#x60;BitbucketServerIntegration&#x60;  * &#x60;GitHubIntegration&#x60;  * &#x60;GitHubEnterpriseIntegration&#x60;  * &#x60;GitLabIntegration&#x60;  * &#x60;IBMApiConnectIntegration&#x60;  * &#x60;WebhookIntegration&#x60;  **Notes:**   * &#x60;configType&#x60; (integration type) cannot be changed.   * If updating the integration &#x60;name&#x60;, make sure the new name is unique among all integrations configured for the given API version.   * If you change &#x60;target&#x60; to the YAMl/JSON definition, you must also specify the &#x60;outputFile&#x60;.   * If you change &#x60;syncMethod&#x60; to _Advanced Sync_, you must also specify a non-empty list of either &#x60;providedPaths&#x60; or &#x60;managedPaths&#x60; (or both). If you are not sure which paths to use, use &#x60;providedPaths&#x60;&#x3D;&#x60;[\&quot;*\&quot;]&#x60;.   * The update operation does not validate the repository details and access tokens.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void patchIntegrationTest() throws ApiException {
        String owner = null;
        String api = null;
        String version = null;
        UUID integrationId = null;
        Object integrationTypeConfiguration = null;
        api.patchIntegration(owner, api, version, integrationId, integrationTypeConfiguration);
        // TODO: test validations
    }

    /**
     * Update integration settings
     *
     * Updates integration settings for the specified API and integration ID. The integration type is determined by which object is passed in the request body.  The request body must contain a **full representation** of an integration object. If you want to update just a few parameters, use the PATCH operation instead.  For a list of fields that need to be provided in the request body, see the descriptions of the following objects in the \&quot;Models\&quot; section at the bottom of API docs:   * &#x60;AmazonApiGatewayIntegration&#x60;  * &#x60;AmazonApiGatewayLambdaIntegration&#x60;  * &#x60;ApigeeEdgeIntegration&#x60;  * &#x60;AutoMockingIntegration&#x60;  * &#x60;AzureApiManagementIntegration&#x60;  * &#x60;AzureDevopsServicesIntegration&#x60;  * &#x60;BitbucketCloudIntegration&#x60;  * &#x60;BitbucketServerIntegration&#x60;  * &#x60;GitHubIntegration&#x60;  * &#x60;GitHubEnterpriseIntegration&#x60;  * &#x60;GitLabIntegration&#x60;  * &#x60;IBMApiConnectIntegration&#x60;  * &#x60;WebhookIntegration&#x60;  **Notes:**   * The integration &#x60;name&#x60; must be unique among all integrations configured for the given API version.   * If &#x60;target&#x60; is the YAMl/JSON definition, you must specify the &#x60;outputFile&#x60;.   * If &#x60;syncMethod&#x60;&#x3D;_Advanced Sync_, you must specify a non-empty list of either &#x60;providedPaths&#x60; or &#x60;managedPaths&#x60; (or both). If you are not sure which paths to use, use &#x60;providedPaths&#x60;&#x3D;&#x60;[\&quot;*\&quot;]&#x60;.   * The operation does not validate the repository details and access tokens.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void updateIntegrationTest() throws ApiException {
        String owner = null;
        String api = null;
        String version = null;
        UUID integrationId = null;
        Object integrationTypeConfiguration = null;
        api.updateIntegration(owner, api, version, integrationId, integrationTypeConfiguration);
        // TODO: test validations
    }

}
