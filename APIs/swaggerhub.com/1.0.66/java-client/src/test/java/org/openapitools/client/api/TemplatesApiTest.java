/*
 * SwaggerHub Registry API
 * # Overview Use SwaggerHub Registry API to access, manage, and update the following resources in SwaggerHub, bypassing the web interface:   * APIs   * Domains   * Integrations   * Projects   * Templates   SwaggerHub also provides the [User Management API](https://app.swaggerhub.com/apis-docs/swagger-hub/user-management-api/) to get information about organizations and manage organization members.  # Base URL Use the following base URL for SwaggerHub SaaS:          http(s)://api.swaggerhub.com  **Note:** This documentation is for SwaggerHub SaaS. On-Premise customers should use the bundled API definition, which can be found at the URLs provided below.  Version 1.29.0 or later:      http(s)://SERVER/v1/openapi.yaml - YAML version     http(s)://SERVER/v1/openapi.json - JSON version  Earlier versions:      http(s)://SERVER/v1/swagger.yaml - YAML version     http(s)://SERVER/v1/swagger.json - JSON version  # Authentication Operations that update data or access private data require authentication using an API key. You can find your personal API key on the [API Keys](https://app.swaggerhub.com/settings/apiKey) page in your account settings. Send this key in the `Authorization` header when making requests to the Registry API:      Authorization: YOUR_API_KEY  To test API calls from this documentation page, click the **Authorize** button below and paste your API key there.  **Important:** Keep the API key secure and do not store it directly in your code. # Tools In addition to calling the Registry API directly, you can use the following tools to interact with the API from the command line or CI/CD pipeline:   * [SwaggerHub CLI](https://www.npmjs.com/package/swaggerhub-cli)   * [Maven plugin](https://github.com/swagger-api/swaggerhub-maven-plugin)  * [Gradle plugin](https://github.com/swagger-api/swaggerhub-gradle-plugin) 
 *
 * The version of the OpenAPI document: 1.0.66
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiException;
import org.openapitools.client.model.ApisJson;
import org.openapitools.client.model.ClosableComment;
import org.openapitools.client.model.CommentsBatch;
import org.openapitools.client.model.ForkVersion;
import org.openapitools.client.model.LifecycleSettings;
import org.openapitools.client.model.TemplateWrapper;
import org.openapitools.client.model.VisibilitySettings;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for TemplatesApi
 */
@Disabled
public class TemplatesApiTest {

    private final TemplatesApi api = new TemplatesApi();

    /**
     * Delete a template
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void deleteTemplateTest() throws ApiException {
        String owner = null;
        String templateId = null;
        api.deleteTemplate(owner, templateId);
        // TODO: test validations
    }

    /**
     * Delete a particular version of a template
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void deleteTemplateVersionTest() throws ApiException {
        String owner = null;
        String templateId = null;
        String version = null;
        api.deleteTemplateVersion(owner, templateId, version);
        // TODO: test validations
    }

    /**
     * Create a fork for a template
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void forkTemplateTest() throws ApiException {
        String owner = null;
        String templateId = null;
        String version = null;
        ForkVersion body = null;
        api.forkTemplate(owner, templateId, version, body);
        // TODO: test validations
    }

    /**
     * Return the list of comments for a template
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getTemplateCommentsTest() throws ApiException {
        String owner = null;
        String templateId = null;
        String version = null;
        List<ClosableComment> response = api.getTemplateComments(owner, templateId, version);
        // TODO: test validations
    }

    /**
     * Retrieve a template definition
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getTemplateDefinitionTest() throws ApiException {
        String owner = null;
        String templateId = null;
        String version = null;
        Boolean flatten = null;
        Object response = api.getTemplateDefinition(owner, templateId, version, flatten);
        // TODO: test validations
    }

    /**
     * Retrieve lifecycle settings for a template
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getTemplateLifecycleSettingsTest() throws ApiException {
        String owner = null;
        String templateId = null;
        String version = null;
        LifecycleSettings response = api.getTemplateLifecycleSettings(owner, templateId, version);
        // TODO: test validations
    }

    /**
     * Retrieve visibility settings for a template
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getTemplatePrivateSettingsTest() throws ApiException {
        String owner = null;
        String templateId = null;
        String version = null;
        VisibilitySettings response = api.getTemplatePrivateSettings(owner, templateId, version);
        // TODO: test validations
    }

    /**
     * Retrieve an APIs.json listing for all template versions for an owner and template
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getTemplateVersionsTest() throws ApiException {
        String owner = null;
        String templateId = null;
        ApisJson response = api.getTemplateVersions(owner, templateId);
        // TODO: test validations
    }

    /**
     * Retrieve a list of templates for an owner
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getTemplatesTest() throws ApiException {
        String owner = null;
        TemplateWrapper response = api.getTemplates(owner);
        // TODO: test validations
    }

    /**
     * Rename a template
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void renameTemplateTest() throws ApiException {
        String owner = null;
        String templateId = null;
        String newName = null;
        api.renameTemplate(owner, templateId, newName);
        // TODO: test validations
    }

    /**
     * Create or update a template
     *
     * Saves the provided template definition; the owner must match the token owner. The version will be extracted from the template definitions itself.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void saveTemplateDefinitionTest() throws ApiException {
        String owner = null;
        String templateId = null;
        String body = null;
        Boolean isPrivate = null;
        String version = null;
        Boolean force = null;
        String projectName = null;
        api.saveTemplateDefinition(owner, templateId, body, isPrivate, version, force, projectName);
        // TODO: test validations
    }

    /**
     * Retrieve a list of currently defined APIs, domains, and templates in APIs.json format
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void searchApisAndDomains_1Test() throws ApiException {
        String specType = null;
        String visibility = null;
        String state = null;
        String owner = null;
        String query = null;
        Integer page = null;
        Integer limit = null;
        String sort = null;
        String order = null;
        ApisJson response = api.searchApisAndDomains_1(specType, visibility, state, owner, query, page, limit, sort, order);
        // TODO: test validations
    }

    /**
     * Update lifecycle settings for a template
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void setTemplateLifecycleSettingsTest() throws ApiException {
        String owner = null;
        String templateId = null;
        String version = null;
        LifecycleSettings body = null;
        Boolean force = null;
        api.setTemplateLifecycleSettings(owner, templateId, version, body, force);
        // TODO: test validations
    }

    /**
     * Update visibility settings for a template
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void setTemplatePrivateSettingsTest() throws ApiException {
        String owner = null;
        String templateId = null;
        String version = null;
        VisibilitySettings body = null;
        api.setTemplatePrivateSettings(owner, templateId, version, body);
        // TODO: test validations
    }

    /**
     * Update the list of comments for a template
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void updateTemplateCommentsTest() throws ApiException {
        String owner = null;
        String templateId = null;
        String version = null;
        CommentsBatch body = null;
        api.updateTemplateComments(owner, templateId, version, body);
        // TODO: test validations
    }

}
