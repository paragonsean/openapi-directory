/*
 * SwaggerHub Registry API
 * # Overview Use SwaggerHub Registry API to access, manage, and update the following resources in SwaggerHub, bypassing the web interface:   * APIs   * Domains   * Integrations   * Projects   * Templates   SwaggerHub also provides the [User Management API](https://app.swaggerhub.com/apis-docs/swagger-hub/user-management-api/) to get information about organizations and manage organization members.  # Base URL Use the following base URL for SwaggerHub SaaS:          http(s)://api.swaggerhub.com  **Note:** This documentation is for SwaggerHub SaaS. On-Premise customers should use the bundled API definition, which can be found at the URLs provided below.  Version 1.29.0 or later:      http(s)://SERVER/v1/openapi.yaml - YAML version     http(s)://SERVER/v1/openapi.json - JSON version  Earlier versions:      http(s)://SERVER/v1/swagger.yaml - YAML version     http(s)://SERVER/v1/swagger.json - JSON version  # Authentication Operations that update data or access private data require authentication using an API key. You can find your personal API key on the [API Keys](https://app.swaggerhub.com/settings/apiKey) page in your account settings. Send this key in the `Authorization` header when making requests to the Registry API:      Authorization: YOUR_API_KEY  To test API calls from this documentation page, click the **Authorize** button below and paste your API key there.  **Important:** Keep the API key secure and do not store it directly in your code. # Tools In addition to calling the Registry API directly, you can use the following tools to interact with the API from the command line or CI/CD pipeline:   * [SwaggerHub CLI](https://www.npmjs.com/package/swaggerhub-cli)   * [Maven plugin](https://github.com/swagger-api/swaggerhub-maven-plugin)  * [Gradle plugin](https://github.com/swagger-api/swaggerhub-gradle-plugin) 
 *
 * The version of the OpenAPI document: 1.0.66
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiException;
import org.openapitools.client.model.ApisJson;
import org.openapitools.client.model.ClosableComment;
import org.openapitools.client.model.ClosableCommentPatch;
import org.openapitools.client.model.Comment;
import org.openapitools.client.model.CommentPatch;
import org.openapitools.client.model.CommentsBatch;
import org.openapitools.client.model.DefaultVersion;
import org.openapitools.client.model.ForkVersion;
import org.openapitools.client.model.LifecycleSettings;
import org.openapitools.client.model.NewComment;
import org.openapitools.client.model.NewReply;
import org.openapitools.client.model.NewVersion;
import org.openapitools.client.model.VisibilitySettings;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for DomainsApi
 */
@Disabled
public class DomainsApiTest {

    private final DomainsApi api = new DomainsApi();

    /**
     * Reply to a comment
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void addDomainCommentReplyV2Test() throws ApiException {
        String owner = null;
        String domain = null;
        String version = null;
        String comment = null;
        NewReply body = null;
        List<Comment> response = api.addDomainCommentReplyV2(owner, domain, version, comment, body);
        // TODO: test validations
    }

    /**
     * Add a new comment
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void addDomainCommentV2Test() throws ApiException {
        String owner = null;
        String domain = null;
        String version = null;
        NewComment body = null;
        ClosableComment response = api.addDomainCommentV2(owner, domain, version, body);
        // TODO: test validations
    }

    /**
     * Create a new domain version
     *
     * Use this operation to clone an existing domain version as a new version.  Note that the new version is not automatically set as the default version.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void cloneDomainTest() throws ApiException {
        String owner = null;
        String domain = null;
        String version = null;
        NewVersion newVersion = null;
        api.cloneDomain(owner, domain, version, newVersion);
        // TODO: test validations
    }

    /**
     * Delete a domain
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void deleteDomainTest() throws ApiException {
        String owner = null;
        String domain = null;
        Boolean force = null;
        api.deleteDomain(owner, domain, force);
        // TODO: test validations
    }

    /**
     * Delete a comment reply
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void deleteDomainCommentReplyV2Test() throws ApiException {
        String owner = null;
        String domain = null;
        String version = null;
        String comment = null;
        String reply = null;
        api.deleteDomainCommentReplyV2(owner, domain, version, comment, reply);
        // TODO: test validations
    }

    /**
     * Delete a comment
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void deleteDomainCommentV2Test() throws ApiException {
        String owner = null;
        String domain = null;
        String version = null;
        String comment = null;
        api.deleteDomainCommentV2(owner, domain, version, comment);
        // TODO: test validations
    }

    /**
     * Delete a domain version
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void deleteDomainVersionTest() throws ApiException {
        String owner = null;
        String domain = null;
        String version = null;
        Boolean force = null;
        api.deleteDomainVersion(owner, domain, version, force);
        // TODO: test validations
    }

    /**
     * Fork a domain
     *
     * Creates a [fork](https://support.smartbear.com/swaggerhub/docs/apis/forking-api.html) of the specified domain definition and version. The fork can be created as a new domain, or as a new version in another existing domain.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void forkDomainTest() throws ApiException {
        String owner = null;
        String domain = null;
        String version = null;
        ForkVersion forkVersion = null;
        api.forkDomain(owner, domain, version, forkVersion);
        // TODO: test validations
    }

    /**
     * Get comments for the specified domain version
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getDomainCommentsV2Test() throws ApiException {
        String owner = null;
        String domain = null;
        String version = null;
        List<ClosableComment> response = api.getDomainCommentsV2(owner, domain, version);
        // TODO: test validations
    }

    /**
     * Get the default version of a domain
     *
     * This operation returns the version identifier, such as &#x60;1.0.0&#x60;. To get the definition itself, use &#x60;GET /domains/{owner}/{domain}/{version}&#x60;.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getDomainDefaultVersionTest() throws ApiException {
        String owner = null;
        String domain = null;
        DefaultVersion response = api.getDomainDefaultVersion(owner, domain);
        // TODO: test validations
    }

    /**
     * Get the OpenAPI definition of the specified domain version
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getDomainDefinitionTest() throws ApiException {
        String owner = null;
        String domain = null;
        String version = null;
        Object response = api.getDomainDefinition(owner, domain, version);
        // TODO: test validations
    }

    /**
     * Get the OpenAPI definition for the specified domain version in JSON format
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getDomainJsonDefinitionTest() throws ApiException {
        String owner = null;
        String domain = null;
        String version = null;
        Object response = api.getDomainJsonDefinition(owner, domain, version);
        // TODO: test validations
    }

    /**
     * Get the published status for the specified domain and version
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getDomainLifecycleSettingsTest() throws ApiException {
        String owner = null;
        String domain = null;
        String version = null;
        LifecycleSettings response = api.getDomainLifecycleSettings(owner, domain, version);
        // TODO: test validations
    }

    /**
     * Get the visibility (public or private) of a domain version
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getDomainPrivateSettingsTest() throws ApiException {
        String owner = null;
        String domain = null;
        String version = null;
        VisibilitySettings response = api.getDomainPrivateSettings(owner, domain, version);
        // TODO: test validations
    }

    /**
     * Get a list of domain versions
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getDomainVersionsTest() throws ApiException {
        String owner = null;
        String domain = null;
        ApisJson response = api.getDomainVersions(owner, domain);
        // TODO: test validations
    }

    /**
     * Get the OpenAPI definition for the specified domain version in YAML format
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getDomainYamlDefinitionTest() throws ApiException {
        String owner = null;
        String domain = null;
        String version = null;
        Object response = api.getDomainYamlDefinition(owner, domain, version);
        // TODO: test validations
    }

    /**
     * Get a list of domains of the specified owner
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getOwnerDomainsTest() throws ApiException {
        String owner = null;
        Integer page = null;
        Integer limit = null;
        String sort = null;
        String order = null;
        ApisJson response = api.getOwnerDomains(owner, page, limit, sort, order);
        // TODO: test validations
    }

    /**
     * Rename a domain
     *
     * The new name must follow the [naming rules](https://support.smartbear.com/swaggerhub/docs/apis/creating-api.html).
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void renameDomainTest() throws ApiException {
        String owner = null;
        String domain = null;
        String newName = null;
        Boolean force = null;
        api.renameDomain(owner, domain, newName, force);
        // TODO: test validations
    }

    /**
     * Create or update a domain
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void saveDomainDefinitionTest() throws ApiException {
        String owner = null;
        String domain = null;
        Boolean isPrivate = null;
        String version = null;
        Boolean force = null;
        String definition = null;
        api.saveDomainDefinition(owner, domain, isPrivate, version, force, definition);
        // TODO: test validations
    }

    /**
     * Retrieve a list of currently defined APIs, domains, and templates in APIs.json format
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void searchApisAndDomains_0Test() throws ApiException {
        String specType = null;
        String visibility = null;
        String state = null;
        String owner = null;
        String query = null;
        Integer page = null;
        Integer limit = null;
        String sort = null;
        String order = null;
        ApisJson response = api.searchApisAndDomains_0(specType, visibility, state, owner, query, page, limit, sort, order);
        // TODO: test validations
    }

    /**
     * Search domains
     *
     * This is a convenience alias for &#x60;GET /specs?specType&#x3D;DOMAIN&#x60;.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void searchDomainsTest() throws ApiException {
        String query = null;
        String state = null;
        Integer page = null;
        Integer limit = null;
        String sort = null;
        String order = null;
        api.searchDomains(query, state, page, limit, sort, order);
        // TODO: test validations
    }

    /**
     * Resolve or reopen a comment
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void setDomainCommentStatusV2Test() throws ApiException {
        String owner = null;
        String domain = null;
        String version = null;
        String comment = null;
        String status = null;
        api.setDomainCommentStatusV2(owner, domain, version, comment, status);
        // TODO: test validations
    }

    /**
     * Set the default version for a domain
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void setDomainDefaultVersionTest() throws ApiException {
        String owner = null;
        String domain = null;
        DefaultVersion defaultVersion = null;
        api.setDomainDefaultVersion(owner, domain, defaultVersion);
        // TODO: test validations
    }

    /**
     * Publish or unpublish a domain version
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void setDomainLifecycleSettingsTest() throws ApiException {
        String owner = null;
        String domain = null;
        String version = null;
        LifecycleSettings settings = null;
        Boolean force = null;
        api.setDomainLifecycleSettings(owner, domain, version, settings, force);
        // TODO: test validations
    }

    /**
     * Set the visibility (public or private) of a domain version
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void setDomainPrivateSettingsTest() throws ApiException {
        String owner = null;
        String domain = null;
        String version = null;
        VisibilitySettings settings = null;
        Boolean force = null;
        api.setDomainPrivateSettings(owner, domain, version, settings, force);
        // TODO: test validations
    }

    /**
     * Update a comment reply
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void updateDomainCommentReplyV2Test() throws ApiException {
        String owner = null;
        String domain = null;
        String version = null;
        String comment = null;
        String reply = null;
        CommentPatch body = null;
        Comment response = api.updateDomainCommentReplyV2(owner, domain, version, comment, reply, body);
        // TODO: test validations
    }

    /**
     * Update a comment
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void updateDomainCommentV2Test() throws ApiException {
        String owner = null;
        String domain = null;
        String version = null;
        String comment = null;
        ClosableCommentPatch body = null;
        ClosableComment response = api.updateDomainCommentV2(owner, domain, version, comment, body);
        // TODO: test validations
    }

    /**
     * Bulk update comments
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void updateDomainCommentsV2Test() throws ApiException {
        String owner = null;
        String domain = null;
        String version = null;
        CommentsBatch body = null;
        api.updateDomainCommentsV2(owner, domain, version, body);
        // TODO: test validations
    }

}
