/*
 * SwaggerHub Registry API
 * # Overview Use SwaggerHub Registry API to access, manage, and update the following resources in SwaggerHub, bypassing the web interface:   * APIs   * Domains   * Integrations   * Projects   * Templates   SwaggerHub also provides the [User Management API](https://app.swaggerhub.com/apis-docs/swagger-hub/user-management-api/) to get information about organizations and manage organization members.  # Base URL Use the following base URL for SwaggerHub SaaS:          http(s)://api.swaggerhub.com  **Note:** This documentation is for SwaggerHub SaaS. On-Premise customers should use the bundled API definition, which can be found at the URLs provided below.  Version 1.29.0 or later:      http(s)://SERVER/v1/openapi.yaml - YAML version     http(s)://SERVER/v1/openapi.json - JSON version  Earlier versions:      http(s)://SERVER/v1/swagger.yaml - YAML version     http(s)://SERVER/v1/swagger.json - JSON version  # Authentication Operations that update data or access private data require authentication using an API key. You can find your personal API key on the [API Keys](https://app.swaggerhub.com/settings/apiKey) page in your account settings. Send this key in the `Authorization` header when making requests to the Registry API:      Authorization: YOUR_API_KEY  To test API calls from this documentation page, click the **Authorize** button below and paste your API key there.  **Important:** Keep the API key secure and do not store it directly in your code. # Tools In addition to calling the Registry API directly, you can use the following tools to interact with the API from the command line or CI/CD pipeline:   * [SwaggerHub CLI](https://www.npmjs.com/package/swaggerhub-cli)   * [Maven plugin](https://github.com/swagger-api/swaggerhub-maven-plugin)  * [Gradle plugin](https://github.com/swagger-api/swaggerhub-gradle-plugin) 
 *
 * The version of the OpenAPI document: 1.0.66
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import java.util.UUID;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Configuration details for the [IBM API Connect](https://support.smartbear.com/swaggerhub/docs/integrations/ibm-api-connect.html) integration
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:18:22.732961-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class IBMApiConnectIntegration {
  public static final String SERIALIZED_NAME_ENABLED = "enabled";
  @SerializedName(SERIALIZED_NAME_ENABLED)
  private Boolean enabled = true;

  public static final String SERIALIZED_NAME_ID = "id";
  @SerializedName(SERIALIZED_NAME_ID)
  private UUID id;

  public static final String SERIALIZED_NAME_NAME = "name";
  @SerializedName(SERIALIZED_NAME_NAME)
  private String name;

  public static final String SERIALIZED_NAME_API_ID = "apiId";
  @SerializedName(SERIALIZED_NAME_API_ID)
  private String apiId;

  public static final String SERIALIZED_NAME_API_KEY = "apiKey";
  @SerializedName(SERIALIZED_NAME_API_KEY)
  private String apiKey;

  /**
   * Integration type
   */
  @JsonAdapter(ConfigTypeEnum.Adapter.class)
  public enum ConfigTypeEnum {
    IBM_API_CONNECT("IBM_API_CONNECT");

    private String value;

    ConfigTypeEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static ConfigTypeEnum fromValue(String value) {
      for (ConfigTypeEnum b : ConfigTypeEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<ConfigTypeEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final ConfigTypeEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public ConfigTypeEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return ConfigTypeEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      ConfigTypeEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_CONFIG_TYPE = "configType";
  @SerializedName(SERIALIZED_NAME_CONFIG_TYPE)
  private ConfigTypeEnum configType;

  public static final String SERIALIZED_NAME_ORG_DISPLAY_NAME = "orgDisplayName";
  @SerializedName(SERIALIZED_NAME_ORG_DISPLAY_NAME)
  private String orgDisplayName;

  public static final String SERIALIZED_NAME_ORG_ID = "orgId";
  @SerializedName(SERIALIZED_NAME_ORG_ID)
  private String orgId;

  public IBMApiConnectIntegration() {
  }

  public IBMApiConnectIntegration(
     UUID id, 
     String orgDisplayName
  ) {
    this();
    this.id = id;
    this.orgDisplayName = orgDisplayName;
  }

  public IBMApiConnectIntegration enabled(Boolean enabled) {
    this.enabled = enabled;
    return this;
  }

  /**
   * Whether the integration is enabled or disabled
   * @return enabled
   */
  @javax.annotation.Nullable
  public Boolean getEnabled() {
    return enabled;
  }

  public void setEnabled(Boolean enabled) {
    this.enabled = enabled;
  }


  /**
   * ID of the integration
   * @return id
   */
  @javax.annotation.Nullable
  public UUID getId() {
    return id;
  }



  public IBMApiConnectIntegration name(String name) {
    this.name = name;
    return this;
  }

  /**
   * The display name of the integration. Must be unique among all integrations configured for the given API version.
   * @return name
   */
  @javax.annotation.Nonnull
  public String getName() {
    return name;
  }

  public void setName(String name) {
    this.name = name;
  }


  public IBMApiConnectIntegration apiId(String apiId) {
    this.apiId = apiId;
    return this;
  }

  /**
   * The name of the API in your IBM Cloud organization to publish to. If left blank, a new API will be created when the integration is triggered. When specified, any existing API definition will be overwritten.
   * @return apiId
   */
  @javax.annotation.Nullable
  public String getApiId() {
    return apiId;
  }

  public void setApiId(String apiId) {
    this.apiId = apiId;
  }


  public IBMApiConnectIntegration apiKey(String apiKey) {
    this.apiKey = apiKey;
    return this;
  }

  /**
   * IBM Cloud API Key, obtain a key via https://cloud.ibm.com/iam/apikeys. Write-only property. Required to create and update the integration.
   * @return apiKey
   */
  @javax.annotation.Nullable
  public String getApiKey() {
    return apiKey;
  }

  public void setApiKey(String apiKey) {
    this.apiKey = apiKey;
  }


  public IBMApiConnectIntegration configType(ConfigTypeEnum configType) {
    this.configType = configType;
    return this;
  }

  /**
   * Integration type
   * @return configType
   */
  @javax.annotation.Nonnull
  public ConfigTypeEnum getConfigType() {
    return configType;
  }

  public void setConfigType(ConfigTypeEnum configType) {
    this.configType = configType;
  }


  /**
   * The organization display name under your IBM Cloud account
   * @return orgDisplayName
   */
  @javax.annotation.Nullable
  public String getOrgDisplayName() {
    return orgDisplayName;
  }



  public IBMApiConnectIntegration orgId(String orgId) {
    this.orgId = orgId;
    return this;
  }

  /**
   * The organization under your IBM Cloud account to which you want to deploy your API. Can be specified by ID or name.  The organization ID is an alphanumeric string like &#x60;680ee27a0cf28d61b4e9a462&#x60;. The organization name uses the format &#x60;&lt;cloudFoundryOrgName&gt;-&lt;spaceName&gt;&#x60;, where &#x60;&lt;cloudFoundryOrgName&gt;&#x60; is your Cloud Foundry organization name changed to lowercase and with non-alphanumeric characters removed.  The easiest way to find the value for &#x60;orgId&#x60; is to start configuring the IBM integration in SwaggerHub UI. After you authenticate using an IBM API key, you will see a list of organizations in the format \&quot;CFOrgName (SpaceName) (OrgId)\&quot;. The value in the last parentheses is the &#x60;orgId&#x60;.  Alternatively, if you have the [API Connect Developer Toolkit](https://www.npmjs.com/package/apiconnect) installed, you can use the &#x60;apic orgs --server apimanager.us-south.apiconnect.cloud.ibm.com&#x60; command to get the organization names that can be used as &#x60;orgId&#x60;.
   * @return orgId
   */
  @javax.annotation.Nonnull
  public String getOrgId() {
    return orgId;
  }

  public void setOrgId(String orgId) {
    this.orgId = orgId;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    IBMApiConnectIntegration ibMApiConnectIntegration = (IBMApiConnectIntegration) o;
    return Objects.equals(this.enabled, ibMApiConnectIntegration.enabled) &&
        Objects.equals(this.id, ibMApiConnectIntegration.id) &&
        Objects.equals(this.name, ibMApiConnectIntegration.name) &&
        Objects.equals(this.apiId, ibMApiConnectIntegration.apiId) &&
        Objects.equals(this.apiKey, ibMApiConnectIntegration.apiKey) &&
        Objects.equals(this.configType, ibMApiConnectIntegration.configType) &&
        Objects.equals(this.orgDisplayName, ibMApiConnectIntegration.orgDisplayName) &&
        Objects.equals(this.orgId, ibMApiConnectIntegration.orgId);
  }

  @Override
  public int hashCode() {
    return Objects.hash(enabled, id, name, apiId, apiKey, configType, orgDisplayName, orgId);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class IBMApiConnectIntegration {\n");
    sb.append("    enabled: ").append(toIndentedString(enabled)).append("\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    apiId: ").append(toIndentedString(apiId)).append("\n");
    sb.append("    apiKey: ").append("*").append("\n");
    sb.append("    configType: ").append(toIndentedString(configType)).append("\n");
    sb.append("    orgDisplayName: ").append(toIndentedString(orgDisplayName)).append("\n");
    sb.append("    orgId: ").append(toIndentedString(orgId)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("enabled");
    openapiFields.add("id");
    openapiFields.add("name");
    openapiFields.add("apiId");
    openapiFields.add("apiKey");
    openapiFields.add("configType");
    openapiFields.add("orgDisplayName");
    openapiFields.add("orgId");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("name");
    openapiRequiredFields.add("configType");
    openapiRequiredFields.add("orgId");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to IBMApiConnectIntegration
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!IBMApiConnectIntegration.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in IBMApiConnectIntegration is not found in the empty JSON string", IBMApiConnectIntegration.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!IBMApiConnectIntegration.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `IBMApiConnectIntegration` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : IBMApiConnectIntegration.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("id") != null && !jsonObj.get("id").isJsonNull()) && !jsonObj.get("id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("id").toString()));
      }
      if (!jsonObj.get("name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("name").toString()));
      }
      if ((jsonObj.get("apiId") != null && !jsonObj.get("apiId").isJsonNull()) && !jsonObj.get("apiId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `apiId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("apiId").toString()));
      }
      if ((jsonObj.get("apiKey") != null && !jsonObj.get("apiKey").isJsonNull()) && !jsonObj.get("apiKey").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `apiKey` to be a primitive type in the JSON string but got `%s`", jsonObj.get("apiKey").toString()));
      }
      if (!jsonObj.get("configType").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `configType` to be a primitive type in the JSON string but got `%s`", jsonObj.get("configType").toString()));
      }
      // validate the required field `configType`
      ConfigTypeEnum.validateJsonElement(jsonObj.get("configType"));
      if ((jsonObj.get("orgDisplayName") != null && !jsonObj.get("orgDisplayName").isJsonNull()) && !jsonObj.get("orgDisplayName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `orgDisplayName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("orgDisplayName").toString()));
      }
      if (!jsonObj.get("orgId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `orgId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("orgId").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!IBMApiConnectIntegration.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'IBMApiConnectIntegration' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<IBMApiConnectIntegration> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(IBMApiConnectIntegration.class));

       return (TypeAdapter<T>) new TypeAdapter<IBMApiConnectIntegration>() {
           @Override
           public void write(JsonWriter out, IBMApiConnectIntegration value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public IBMApiConnectIntegration read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of IBMApiConnectIntegration given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of IBMApiConnectIntegration
   * @throws IOException if the JSON string is invalid with respect to IBMApiConnectIntegration
   */
  public static IBMApiConnectIntegration fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, IBMApiConnectIntegration.class);
  }

  /**
   * Convert an instance of IBMApiConnectIntegration to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

