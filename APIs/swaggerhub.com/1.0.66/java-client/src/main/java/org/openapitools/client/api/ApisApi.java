/*
 * SwaggerHub Registry API
 * # Overview Use SwaggerHub Registry API to access, manage, and update the following resources in SwaggerHub, bypassing the web interface:   * APIs   * Domains   * Integrations   * Projects   * Templates   SwaggerHub also provides the [User Management API](https://app.swaggerhub.com/apis-docs/swagger-hub/user-management-api/) to get information about organizations and manage organization members.  # Base URL Use the following base URL for SwaggerHub SaaS:          http(s)://api.swaggerhub.com  **Note:** This documentation is for SwaggerHub SaaS. On-Premise customers should use the bundled API definition, which can be found at the URLs provided below.  Version 1.29.0 or later:      http(s)://SERVER/v1/openapi.yaml - YAML version     http(s)://SERVER/v1/openapi.json - JSON version  Earlier versions:      http(s)://SERVER/v1/swagger.yaml - YAML version     http(s)://SERVER/v1/swagger.json - JSON version  # Authentication Operations that update data or access private data require authentication using an API key. You can find your personal API key on the [API Keys](https://app.swaggerhub.com/settings/apiKey) page in your account settings. Send this key in the `Authorization` header when making requests to the Registry API:      Authorization: YOUR_API_KEY  To test API calls from this documentation page, click the **Authorize** button below and paste your API key there.  **Important:** Keep the API key secure and do not store it directly in your code. # Tools In addition to calling the Registry API directly, you can use the following tools to interact with the API from the command line or CI/CD pipeline:   * [SwaggerHub CLI](https://www.npmjs.com/package/swaggerhub-cli)   * [Maven plugin](https://github.com/swagger-api/swaggerhub-maven-plugin)  * [Gradle plugin](https://github.com/swagger-api/swaggerhub-gradle-plugin) 
 *
 * The version of the OpenAPI document: 1.0.66
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiCallback;
import org.openapitools.client.ApiClient;
import org.openapitools.client.ApiException;
import org.openapitools.client.ApiResponse;
import org.openapitools.client.Configuration;
import org.openapitools.client.Pair;
import org.openapitools.client.ProgressRequestBody;
import org.openapitools.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import org.openapitools.client.model.ApisJson;
import org.openapitools.client.model.ClosableComment;
import org.openapitools.client.model.ClosableCommentPatch;
import org.openapitools.client.model.Comment;
import org.openapitools.client.model.CommentPatch;
import org.openapitools.client.model.CommentsBatch;
import org.openapitools.client.model.DefaultVersion;
import org.openapitools.client.model.ForkVersion;
import org.openapitools.client.model.LifecycleSettings;
import org.openapitools.client.model.NewComment;
import org.openapitools.client.model.NewReply;
import org.openapitools.client.model.NewVersion;
import org.openapitools.client.model.StandardizationResult;
import org.openapitools.client.model.ValidationResult;
import org.openapitools.client.model.VisibilitySettings;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class ApisApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public ApisApi() {
        this(Configuration.getDefaultApiClient());
    }

    public ApisApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for addApiCommentReplyV2
     * @param owner API owner (organization or user, case-sensitive) (required)
     * @param api API name (case-sensitive) (required)
     * @param version Version identifier (required)
     * @param comment Comment identifier (required)
     * @param body  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Newly created reply </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Request body invalid </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Access token is not set or invalid </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> The comment feature is not available for the organization&#39;s plan, or the authenticating user does not have permission to complete this action </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The specified API or comment was not found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call addApiCommentReplyV2Call(String owner, String api, String version, String comment, NewReply body, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = body;

        // create path and map variables
        String localVarPath = "/apis/{owner}/{api}/{version}/comments/{comment}/replies"
            .replace("{" + "owner" + "}", localVarApiClient.escapeString(owner.toString()))
            .replace("{" + "api" + "}", localVarApiClient.escapeString(api.toString()))
            .replace("{" + "version" + "}", localVarApiClient.escapeString(version.toString()))
            .replace("{" + "comment" + "}", localVarApiClient.escapeString(comment.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "TokenSecured" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call addApiCommentReplyV2ValidateBeforeCall(String owner, String api, String version, String comment, NewReply body, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'owner' is set
        if (owner == null) {
            throw new ApiException("Missing the required parameter 'owner' when calling addApiCommentReplyV2(Async)");
        }

        // verify the required parameter 'api' is set
        if (api == null) {
            throw new ApiException("Missing the required parameter 'api' when calling addApiCommentReplyV2(Async)");
        }

        // verify the required parameter 'version' is set
        if (version == null) {
            throw new ApiException("Missing the required parameter 'version' when calling addApiCommentReplyV2(Async)");
        }

        // verify the required parameter 'comment' is set
        if (comment == null) {
            throw new ApiException("Missing the required parameter 'comment' when calling addApiCommentReplyV2(Async)");
        }

        // verify the required parameter 'body' is set
        if (body == null) {
            throw new ApiException("Missing the required parameter 'body' when calling addApiCommentReplyV2(Async)");
        }

        return addApiCommentReplyV2Call(owner, api, version, comment, body, _callback);

    }

    /**
     * Reply to a comment
     * 
     * @param owner API owner (organization or user, case-sensitive) (required)
     * @param api API name (case-sensitive) (required)
     * @param version Version identifier (required)
     * @param comment Comment identifier (required)
     * @param body  (required)
     * @return List&lt;Comment&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Newly created reply </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Request body invalid </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Access token is not set or invalid </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> The comment feature is not available for the organization&#39;s plan, or the authenticating user does not have permission to complete this action </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The specified API or comment was not found </td><td>  -  </td></tr>
     </table>
     */
    public List<Comment> addApiCommentReplyV2(String owner, String api, String version, String comment, NewReply body) throws ApiException {
        ApiResponse<List<Comment>> localVarResp = addApiCommentReplyV2WithHttpInfo(owner, api, version, comment, body);
        return localVarResp.getData();
    }

    /**
     * Reply to a comment
     * 
     * @param owner API owner (organization or user, case-sensitive) (required)
     * @param api API name (case-sensitive) (required)
     * @param version Version identifier (required)
     * @param comment Comment identifier (required)
     * @param body  (required)
     * @return ApiResponse&lt;List&lt;Comment&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Newly created reply </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Request body invalid </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Access token is not set or invalid </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> The comment feature is not available for the organization&#39;s plan, or the authenticating user does not have permission to complete this action </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The specified API or comment was not found </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<Comment>> addApiCommentReplyV2WithHttpInfo(String owner, String api, String version, String comment, NewReply body) throws ApiException {
        okhttp3.Call localVarCall = addApiCommentReplyV2ValidateBeforeCall(owner, api, version, comment, body, null);
        Type localVarReturnType = new TypeToken<List<Comment>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Reply to a comment (asynchronously)
     * 
     * @param owner API owner (organization or user, case-sensitive) (required)
     * @param api API name (case-sensitive) (required)
     * @param version Version identifier (required)
     * @param comment Comment identifier (required)
     * @param body  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Newly created reply </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Request body invalid </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Access token is not set or invalid </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> The comment feature is not available for the organization&#39;s plan, or the authenticating user does not have permission to complete this action </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The specified API or comment was not found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call addApiCommentReplyV2Async(String owner, String api, String version, String comment, NewReply body, final ApiCallback<List<Comment>> _callback) throws ApiException {

        okhttp3.Call localVarCall = addApiCommentReplyV2ValidateBeforeCall(owner, api, version, comment, body, _callback);
        Type localVarReturnType = new TypeToken<List<Comment>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for addApiCommentV2
     * @param owner API owner (organization or user, case-sensitive) (required)
     * @param api API name (case-sensitive) (required)
     * @param version Version identifier (required)
     * @param body  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Newly created comment for the specified API </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Request body invalid </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Access token is not set or invalid </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> The comment feature is not available for the organization&#39;s plan, or the authenticating user does not have permission to complete this action </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The specified API was not found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call addApiCommentV2Call(String owner, String api, String version, NewComment body, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = body;

        // create path and map variables
        String localVarPath = "/apis/{owner}/{api}/{version}/comments"
            .replace("{" + "owner" + "}", localVarApiClient.escapeString(owner.toString()))
            .replace("{" + "api" + "}", localVarApiClient.escapeString(api.toString()))
            .replace("{" + "version" + "}", localVarApiClient.escapeString(version.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "TokenSecured" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call addApiCommentV2ValidateBeforeCall(String owner, String api, String version, NewComment body, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'owner' is set
        if (owner == null) {
            throw new ApiException("Missing the required parameter 'owner' when calling addApiCommentV2(Async)");
        }

        // verify the required parameter 'api' is set
        if (api == null) {
            throw new ApiException("Missing the required parameter 'api' when calling addApiCommentV2(Async)");
        }

        // verify the required parameter 'version' is set
        if (version == null) {
            throw new ApiException("Missing the required parameter 'version' when calling addApiCommentV2(Async)");
        }

        // verify the required parameter 'body' is set
        if (body == null) {
            throw new ApiException("Missing the required parameter 'body' when calling addApiCommentV2(Async)");
        }

        return addApiCommentV2Call(owner, api, version, body, _callback);

    }

    /**
     * Add a new comment
     * 
     * @param owner API owner (organization or user, case-sensitive) (required)
     * @param api API name (case-sensitive) (required)
     * @param version Version identifier (required)
     * @param body  (required)
     * @return ClosableComment
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Newly created comment for the specified API </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Request body invalid </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Access token is not set or invalid </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> The comment feature is not available for the organization&#39;s plan, or the authenticating user does not have permission to complete this action </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The specified API was not found </td><td>  -  </td></tr>
     </table>
     */
    public ClosableComment addApiCommentV2(String owner, String api, String version, NewComment body) throws ApiException {
        ApiResponse<ClosableComment> localVarResp = addApiCommentV2WithHttpInfo(owner, api, version, body);
        return localVarResp.getData();
    }

    /**
     * Add a new comment
     * 
     * @param owner API owner (organization or user, case-sensitive) (required)
     * @param api API name (case-sensitive) (required)
     * @param version Version identifier (required)
     * @param body  (required)
     * @return ApiResponse&lt;ClosableComment&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Newly created comment for the specified API </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Request body invalid </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Access token is not set or invalid </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> The comment feature is not available for the organization&#39;s plan, or the authenticating user does not have permission to complete this action </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The specified API was not found </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ClosableComment> addApiCommentV2WithHttpInfo(String owner, String api, String version, NewComment body) throws ApiException {
        okhttp3.Call localVarCall = addApiCommentV2ValidateBeforeCall(owner, api, version, body, null);
        Type localVarReturnType = new TypeToken<ClosableComment>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Add a new comment (asynchronously)
     * 
     * @param owner API owner (organization or user, case-sensitive) (required)
     * @param api API name (case-sensitive) (required)
     * @param version Version identifier (required)
     * @param body  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Newly created comment for the specified API </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Request body invalid </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Access token is not set or invalid </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> The comment feature is not available for the organization&#39;s plan, or the authenticating user does not have permission to complete this action </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The specified API was not found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call addApiCommentV2Async(String owner, String api, String version, NewComment body, final ApiCallback<ClosableComment> _callback) throws ApiException {

        okhttp3.Call localVarCall = addApiCommentV2ValidateBeforeCall(owner, api, version, body, _callback);
        Type localVarReturnType = new TypeToken<ClosableComment>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for cloneApi
     * @param owner API owner (organization or user, case-sensitive) (required)
     * @param api API name (case-sensitive) (required)
     * @param version The version to clone (case-sensitive) (required)
     * @param newVersion An object that contains the new version number and other parameters. The version number must be in the format described in the [documentation](https://support.smartbear.com/swaggerhub/docs/apis/versioning.html#format). (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> New API version was successfully created </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Access denied </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The specified API or version was not found </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> The API version you are trying to create already exists </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call cloneApiCall(String owner, String api, String version, NewVersion newVersion, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = newVersion;

        // create path and map variables
        String localVarPath = "/apis/{owner}/{api}/{version}/clone"
            .replace("{" + "owner" + "}", localVarApiClient.escapeString(owner.toString()))
            .replace("{" + "api" + "}", localVarApiClient.escapeString(api.toString()))
            .replace("{" + "version" + "}", localVarApiClient.escapeString(version.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "TokenSecured" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call cloneApiValidateBeforeCall(String owner, String api, String version, NewVersion newVersion, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'owner' is set
        if (owner == null) {
            throw new ApiException("Missing the required parameter 'owner' when calling cloneApi(Async)");
        }

        // verify the required parameter 'api' is set
        if (api == null) {
            throw new ApiException("Missing the required parameter 'api' when calling cloneApi(Async)");
        }

        // verify the required parameter 'version' is set
        if (version == null) {
            throw new ApiException("Missing the required parameter 'version' when calling cloneApi(Async)");
        }

        // verify the required parameter 'newVersion' is set
        if (newVersion == null) {
            throw new ApiException("Missing the required parameter 'newVersion' when calling cloneApi(Async)");
        }

        return cloneApiCall(owner, api, version, newVersion, _callback);

    }

    /**
     * Create a new API version
     * Use this operation to clone an existing API version as a new version. The new version will have the same YAML content but with updated &#x60;info.version&#x60;.  **Note:** Comments, integrations, and codegen options are not copied to the new version. The default version also remains unchanged.
     * @param owner API owner (organization or user, case-sensitive) (required)
     * @param api API name (case-sensitive) (required)
     * @param version The version to clone (case-sensitive) (required)
     * @param newVersion An object that contains the new version number and other parameters. The version number must be in the format described in the [documentation](https://support.smartbear.com/swaggerhub/docs/apis/versioning.html#format). (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> New API version was successfully created </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Access denied </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The specified API or version was not found </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> The API version you are trying to create already exists </td><td>  -  </td></tr>
     </table>
     */
    public void cloneApi(String owner, String api, String version, NewVersion newVersion) throws ApiException {
        cloneApiWithHttpInfo(owner, api, version, newVersion);
    }

    /**
     * Create a new API version
     * Use this operation to clone an existing API version as a new version. The new version will have the same YAML content but with updated &#x60;info.version&#x60;.  **Note:** Comments, integrations, and codegen options are not copied to the new version. The default version also remains unchanged.
     * @param owner API owner (organization or user, case-sensitive) (required)
     * @param api API name (case-sensitive) (required)
     * @param version The version to clone (case-sensitive) (required)
     * @param newVersion An object that contains the new version number and other parameters. The version number must be in the format described in the [documentation](https://support.smartbear.com/swaggerhub/docs/apis/versioning.html#format). (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> New API version was successfully created </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Access denied </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The specified API or version was not found </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> The API version you are trying to create already exists </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> cloneApiWithHttpInfo(String owner, String api, String version, NewVersion newVersion) throws ApiException {
        okhttp3.Call localVarCall = cloneApiValidateBeforeCall(owner, api, version, newVersion, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Create a new API version (asynchronously)
     * Use this operation to clone an existing API version as a new version. The new version will have the same YAML content but with updated &#x60;info.version&#x60;.  **Note:** Comments, integrations, and codegen options are not copied to the new version. The default version also remains unchanged.
     * @param owner API owner (organization or user, case-sensitive) (required)
     * @param api API name (case-sensitive) (required)
     * @param version The version to clone (case-sensitive) (required)
     * @param newVersion An object that contains the new version number and other parameters. The version number must be in the format described in the [documentation](https://support.smartbear.com/swaggerhub/docs/apis/versioning.html#format). (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> New API version was successfully created </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Access denied </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The specified API or version was not found </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> The API version you are trying to create already exists </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call cloneApiAsync(String owner, String api, String version, NewVersion newVersion, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = cloneApiValidateBeforeCall(owner, api, version, newVersion, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for deleteApi
     * @param owner API owner (organization or user, case-sensitive) (required)
     * @param api API name (case-sensitive) (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The API was successfully deleted </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Access denied </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The specified API not found </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> The API has published versions and cannot be deleted </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteApiCall(String owner, String api, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/apis/{owner}/{api}"
            .replace("{" + "owner" + "}", localVarApiClient.escapeString(owner.toString()))
            .replace("{" + "api" + "}", localVarApiClient.escapeString(api.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "TokenSecured" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call deleteApiValidateBeforeCall(String owner, String api, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'owner' is set
        if (owner == null) {
            throw new ApiException("Missing the required parameter 'owner' when calling deleteApi(Async)");
        }

        // verify the required parameter 'api' is set
        if (api == null) {
            throw new ApiException("Missing the required parameter 'api' when calling deleteApi(Async)");
        }

        return deleteApiCall(owner, api, _callback);

    }

    /**
     * Delete an API
     * 
     * @param owner API owner (organization or user, case-sensitive) (required)
     * @param api API name (case-sensitive) (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The API was successfully deleted </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Access denied </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The specified API not found </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> The API has published versions and cannot be deleted </td><td>  -  </td></tr>
     </table>
     */
    public void deleteApi(String owner, String api) throws ApiException {
        deleteApiWithHttpInfo(owner, api);
    }

    /**
     * Delete an API
     * 
     * @param owner API owner (organization or user, case-sensitive) (required)
     * @param api API name (case-sensitive) (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The API was successfully deleted </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Access denied </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The specified API not found </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> The API has published versions and cannot be deleted </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> deleteApiWithHttpInfo(String owner, String api) throws ApiException {
        okhttp3.Call localVarCall = deleteApiValidateBeforeCall(owner, api, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Delete an API (asynchronously)
     * 
     * @param owner API owner (organization or user, case-sensitive) (required)
     * @param api API name (case-sensitive) (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The API was successfully deleted </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Access denied </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The specified API not found </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> The API has published versions and cannot be deleted </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteApiAsync(String owner, String api, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = deleteApiValidateBeforeCall(owner, api, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for deleteApiCommentReplyV2
     * @param owner API owner (organization or user, case-sensitive) (required)
     * @param api API name (case-sensitive) (required)
     * @param version Version identifier (required)
     * @param comment Comment identifier (required)
     * @param reply Reply identifier (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Сomment reply was deleted </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Access token is not set or invalid </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> The comment feature is not available for the organization&#39;s plan, or the authenticating user does not have permission to complete this action </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The specified API, comment, or reply was not found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteApiCommentReplyV2Call(String owner, String api, String version, String comment, String reply, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/apis/{owner}/{api}/{version}/comments/{comment}/replies/{reply}"
            .replace("{" + "owner" + "}", localVarApiClient.escapeString(owner.toString()))
            .replace("{" + "api" + "}", localVarApiClient.escapeString(api.toString()))
            .replace("{" + "version" + "}", localVarApiClient.escapeString(version.toString()))
            .replace("{" + "comment" + "}", localVarApiClient.escapeString(comment.toString()))
            .replace("{" + "reply" + "}", localVarApiClient.escapeString(reply.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "TokenSecured" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call deleteApiCommentReplyV2ValidateBeforeCall(String owner, String api, String version, String comment, String reply, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'owner' is set
        if (owner == null) {
            throw new ApiException("Missing the required parameter 'owner' when calling deleteApiCommentReplyV2(Async)");
        }

        // verify the required parameter 'api' is set
        if (api == null) {
            throw new ApiException("Missing the required parameter 'api' when calling deleteApiCommentReplyV2(Async)");
        }

        // verify the required parameter 'version' is set
        if (version == null) {
            throw new ApiException("Missing the required parameter 'version' when calling deleteApiCommentReplyV2(Async)");
        }

        // verify the required parameter 'comment' is set
        if (comment == null) {
            throw new ApiException("Missing the required parameter 'comment' when calling deleteApiCommentReplyV2(Async)");
        }

        // verify the required parameter 'reply' is set
        if (reply == null) {
            throw new ApiException("Missing the required parameter 'reply' when calling deleteApiCommentReplyV2(Async)");
        }

        return deleteApiCommentReplyV2Call(owner, api, version, comment, reply, _callback);

    }

    /**
     * Delete a comment reply
     * 
     * @param owner API owner (organization or user, case-sensitive) (required)
     * @param api API name (case-sensitive) (required)
     * @param version Version identifier (required)
     * @param comment Comment identifier (required)
     * @param reply Reply identifier (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Сomment reply was deleted </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Access token is not set or invalid </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> The comment feature is not available for the organization&#39;s plan, or the authenticating user does not have permission to complete this action </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The specified API, comment, or reply was not found </td><td>  -  </td></tr>
     </table>
     */
    public void deleteApiCommentReplyV2(String owner, String api, String version, String comment, String reply) throws ApiException {
        deleteApiCommentReplyV2WithHttpInfo(owner, api, version, comment, reply);
    }

    /**
     * Delete a comment reply
     * 
     * @param owner API owner (organization or user, case-sensitive) (required)
     * @param api API name (case-sensitive) (required)
     * @param version Version identifier (required)
     * @param comment Comment identifier (required)
     * @param reply Reply identifier (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Сomment reply was deleted </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Access token is not set or invalid </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> The comment feature is not available for the organization&#39;s plan, or the authenticating user does not have permission to complete this action </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The specified API, comment, or reply was not found </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> deleteApiCommentReplyV2WithHttpInfo(String owner, String api, String version, String comment, String reply) throws ApiException {
        okhttp3.Call localVarCall = deleteApiCommentReplyV2ValidateBeforeCall(owner, api, version, comment, reply, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Delete a comment reply (asynchronously)
     * 
     * @param owner API owner (organization or user, case-sensitive) (required)
     * @param api API name (case-sensitive) (required)
     * @param version Version identifier (required)
     * @param comment Comment identifier (required)
     * @param reply Reply identifier (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Сomment reply was deleted </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Access token is not set or invalid </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> The comment feature is not available for the organization&#39;s plan, or the authenticating user does not have permission to complete this action </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The specified API, comment, or reply was not found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteApiCommentReplyV2Async(String owner, String api, String version, String comment, String reply, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = deleteApiCommentReplyV2ValidateBeforeCall(owner, api, version, comment, reply, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for deleteApiCommentV2
     * @param owner API owner (organization or user, case-sensitive) (required)
     * @param api API name (case-sensitive) (required)
     * @param version Version identifier (required)
     * @param comment Comment identifier (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Comment was deleted </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Access token is not set or invalid </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> The comment feature is not available for the organization&#39;s plan, or the authenticating user does not have permission to complete this action </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The specified API or comment was not found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteApiCommentV2Call(String owner, String api, String version, String comment, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/apis/{owner}/{api}/{version}/comments/{comment}"
            .replace("{" + "owner" + "}", localVarApiClient.escapeString(owner.toString()))
            .replace("{" + "api" + "}", localVarApiClient.escapeString(api.toString()))
            .replace("{" + "version" + "}", localVarApiClient.escapeString(version.toString()))
            .replace("{" + "comment" + "}", localVarApiClient.escapeString(comment.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "TokenSecured" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call deleteApiCommentV2ValidateBeforeCall(String owner, String api, String version, String comment, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'owner' is set
        if (owner == null) {
            throw new ApiException("Missing the required parameter 'owner' when calling deleteApiCommentV2(Async)");
        }

        // verify the required parameter 'api' is set
        if (api == null) {
            throw new ApiException("Missing the required parameter 'api' when calling deleteApiCommentV2(Async)");
        }

        // verify the required parameter 'version' is set
        if (version == null) {
            throw new ApiException("Missing the required parameter 'version' when calling deleteApiCommentV2(Async)");
        }

        // verify the required parameter 'comment' is set
        if (comment == null) {
            throw new ApiException("Missing the required parameter 'comment' when calling deleteApiCommentV2(Async)");
        }

        return deleteApiCommentV2Call(owner, api, version, comment, _callback);

    }

    /**
     * Delete a comment
     * 
     * @param owner API owner (organization or user, case-sensitive) (required)
     * @param api API name (case-sensitive) (required)
     * @param version Version identifier (required)
     * @param comment Comment identifier (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Comment was deleted </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Access token is not set or invalid </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> The comment feature is not available for the organization&#39;s plan, or the authenticating user does not have permission to complete this action </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The specified API or comment was not found </td><td>  -  </td></tr>
     </table>
     */
    public void deleteApiCommentV2(String owner, String api, String version, String comment) throws ApiException {
        deleteApiCommentV2WithHttpInfo(owner, api, version, comment);
    }

    /**
     * Delete a comment
     * 
     * @param owner API owner (organization or user, case-sensitive) (required)
     * @param api API name (case-sensitive) (required)
     * @param version Version identifier (required)
     * @param comment Comment identifier (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Comment was deleted </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Access token is not set or invalid </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> The comment feature is not available for the organization&#39;s plan, or the authenticating user does not have permission to complete this action </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The specified API or comment was not found </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> deleteApiCommentV2WithHttpInfo(String owner, String api, String version, String comment) throws ApiException {
        okhttp3.Call localVarCall = deleteApiCommentV2ValidateBeforeCall(owner, api, version, comment, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Delete a comment (asynchronously)
     * 
     * @param owner API owner (organization or user, case-sensitive) (required)
     * @param api API name (case-sensitive) (required)
     * @param version Version identifier (required)
     * @param comment Comment identifier (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Comment was deleted </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Access token is not set or invalid </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> The comment feature is not available for the organization&#39;s plan, or the authenticating user does not have permission to complete this action </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The specified API or comment was not found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteApiCommentV2Async(String owner, String api, String version, String comment, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = deleteApiCommentV2ValidateBeforeCall(owner, api, version, comment, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for deleteApiVersion
     * @param owner API owner (organization or user, case-sensitive) (required)
     * @param api API name (case-sensitive) (required)
     * @param version Version identifier (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The API version was successfully deleted </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Access denied </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The specified API was not found </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> The API version is published and cannot be deleted or it is the only version of this API </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteApiVersionCall(String owner, String api, String version, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/apis/{owner}/{api}/{version}"
            .replace("{" + "owner" + "}", localVarApiClient.escapeString(owner.toString()))
            .replace("{" + "api" + "}", localVarApiClient.escapeString(api.toString()))
            .replace("{" + "version" + "}", localVarApiClient.escapeString(version.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "TokenSecured" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call deleteApiVersionValidateBeforeCall(String owner, String api, String version, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'owner' is set
        if (owner == null) {
            throw new ApiException("Missing the required parameter 'owner' when calling deleteApiVersion(Async)");
        }

        // verify the required parameter 'api' is set
        if (api == null) {
            throw new ApiException("Missing the required parameter 'api' when calling deleteApiVersion(Async)");
        }

        // verify the required parameter 'version' is set
        if (version == null) {
            throw new ApiException("Missing the required parameter 'version' when calling deleteApiVersion(Async)");
        }

        return deleteApiVersionCall(owner, api, version, _callback);

    }

    /**
     * Delete an API version
     * 
     * @param owner API owner (organization or user, case-sensitive) (required)
     * @param api API name (case-sensitive) (required)
     * @param version Version identifier (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The API version was successfully deleted </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Access denied </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The specified API was not found </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> The API version is published and cannot be deleted or it is the only version of this API </td><td>  -  </td></tr>
     </table>
     */
    public void deleteApiVersion(String owner, String api, String version) throws ApiException {
        deleteApiVersionWithHttpInfo(owner, api, version);
    }

    /**
     * Delete an API version
     * 
     * @param owner API owner (organization or user, case-sensitive) (required)
     * @param api API name (case-sensitive) (required)
     * @param version Version identifier (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The API version was successfully deleted </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Access denied </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The specified API was not found </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> The API version is published and cannot be deleted or it is the only version of this API </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> deleteApiVersionWithHttpInfo(String owner, String api, String version) throws ApiException {
        okhttp3.Call localVarCall = deleteApiVersionValidateBeforeCall(owner, api, version, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Delete an API version (asynchronously)
     * 
     * @param owner API owner (organization or user, case-sensitive) (required)
     * @param api API name (case-sensitive) (required)
     * @param version Version identifier (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The API version was successfully deleted </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Access denied </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The specified API was not found </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> The API version is published and cannot be deleted or it is the only version of this API </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteApiVersionAsync(String owner, String api, String version, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = deleteApiVersionValidateBeforeCall(owner, api, version, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for forkApi
     * @param owner API owner (organization or user, case-sensitive) (required)
     * @param api API name (case-sensitive) (required)
     * @param version Version identifier (required)
     * @param forkVersion Fork parameters (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> The API was successfully forked </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Some parameters are missing or invalid </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Access token is not set or invalid </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Access denied </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The specified owner or API was not found </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> An API with the name and version you&#39;re trying to create already exists </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call forkApiCall(String owner, String api, String version, ForkVersion forkVersion, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = forkVersion;

        // create path and map variables
        String localVarPath = "/apis/{owner}/{api}/{version}/fork"
            .replace("{" + "owner" + "}", localVarApiClient.escapeString(owner.toString()))
            .replace("{" + "api" + "}", localVarApiClient.escapeString(api.toString()))
            .replace("{" + "version" + "}", localVarApiClient.escapeString(version.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "TokenSecured" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call forkApiValidateBeforeCall(String owner, String api, String version, ForkVersion forkVersion, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'owner' is set
        if (owner == null) {
            throw new ApiException("Missing the required parameter 'owner' when calling forkApi(Async)");
        }

        // verify the required parameter 'api' is set
        if (api == null) {
            throw new ApiException("Missing the required parameter 'api' when calling forkApi(Async)");
        }

        // verify the required parameter 'version' is set
        if (version == null) {
            throw new ApiException("Missing the required parameter 'version' when calling forkApi(Async)");
        }

        // verify the required parameter 'forkVersion' is set
        if (forkVersion == null) {
            throw new ApiException("Missing the required parameter 'forkVersion' when calling forkApi(Async)");
        }

        return forkApiCall(owner, api, version, forkVersion, _callback);

    }

    /**
     * Fork an API
     * Creates a [fork](https://support.smartbear.com/swaggerhub/docs/apis/forking-api.html) of the specified API definition and version. The fork can be created as a new API, or as a new version in another existing API.
     * @param owner API owner (organization or user, case-sensitive) (required)
     * @param api API name (case-sensitive) (required)
     * @param version Version identifier (required)
     * @param forkVersion Fork parameters (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> The API was successfully forked </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Some parameters are missing or invalid </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Access token is not set or invalid </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Access denied </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The specified owner or API was not found </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> An API with the name and version you&#39;re trying to create already exists </td><td>  -  </td></tr>
     </table>
     */
    public void forkApi(String owner, String api, String version, ForkVersion forkVersion) throws ApiException {
        forkApiWithHttpInfo(owner, api, version, forkVersion);
    }

    /**
     * Fork an API
     * Creates a [fork](https://support.smartbear.com/swaggerhub/docs/apis/forking-api.html) of the specified API definition and version. The fork can be created as a new API, or as a new version in another existing API.
     * @param owner API owner (organization or user, case-sensitive) (required)
     * @param api API name (case-sensitive) (required)
     * @param version Version identifier (required)
     * @param forkVersion Fork parameters (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> The API was successfully forked </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Some parameters are missing or invalid </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Access token is not set or invalid </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Access denied </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The specified owner or API was not found </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> An API with the name and version you&#39;re trying to create already exists </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> forkApiWithHttpInfo(String owner, String api, String version, ForkVersion forkVersion) throws ApiException {
        okhttp3.Call localVarCall = forkApiValidateBeforeCall(owner, api, version, forkVersion, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Fork an API (asynchronously)
     * Creates a [fork](https://support.smartbear.com/swaggerhub/docs/apis/forking-api.html) of the specified API definition and version. The fork can be created as a new API, or as a new version in another existing API.
     * @param owner API owner (organization or user, case-sensitive) (required)
     * @param api API name (case-sensitive) (required)
     * @param version Version identifier (required)
     * @param forkVersion Fork parameters (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> The API was successfully forked </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Some parameters are missing or invalid </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Access token is not set or invalid </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Access denied </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The specified owner or API was not found </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> An API with the name and version you&#39;re trying to create already exists </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call forkApiAsync(String owner, String api, String version, ForkVersion forkVersion, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = forkApiValidateBeforeCall(owner, api, version, forkVersion, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for getApiCommentsV2
     * @param owner API owner (organization or user, case-sensitive) (required)
     * @param api API name (case-sensitive) (required)
     * @param version Version identifier (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Comments for the specified API </td><td>  -  </td></tr>
        <tr><td> 204 </td><td> No comments were found for the specified API </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Access token is not set or invalid </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> The comment feature is not available for the organization&#39;s plan, or the authenticating user does not have permission to complete this action </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The specified API was not found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getApiCommentsV2Call(String owner, String api, String version, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/apis/{owner}/{api}/{version}/comments"
            .replace("{" + "owner" + "}", localVarApiClient.escapeString(owner.toString()))
            .replace("{" + "api" + "}", localVarApiClient.escapeString(api.toString()))
            .replace("{" + "version" + "}", localVarApiClient.escapeString(version.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "TokenSecured" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getApiCommentsV2ValidateBeforeCall(String owner, String api, String version, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'owner' is set
        if (owner == null) {
            throw new ApiException("Missing the required parameter 'owner' when calling getApiCommentsV2(Async)");
        }

        // verify the required parameter 'api' is set
        if (api == null) {
            throw new ApiException("Missing the required parameter 'api' when calling getApiCommentsV2(Async)");
        }

        // verify the required parameter 'version' is set
        if (version == null) {
            throw new ApiException("Missing the required parameter 'version' when calling getApiCommentsV2(Async)");
        }

        return getApiCommentsV2Call(owner, api, version, _callback);

    }

    /**
     * Get comments for the specified API version
     * 
     * @param owner API owner (organization or user, case-sensitive) (required)
     * @param api API name (case-sensitive) (required)
     * @param version Version identifier (required)
     * @return List&lt;ClosableComment&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Comments for the specified API </td><td>  -  </td></tr>
        <tr><td> 204 </td><td> No comments were found for the specified API </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Access token is not set or invalid </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> The comment feature is not available for the organization&#39;s plan, or the authenticating user does not have permission to complete this action </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The specified API was not found </td><td>  -  </td></tr>
     </table>
     */
    public List<ClosableComment> getApiCommentsV2(String owner, String api, String version) throws ApiException {
        ApiResponse<List<ClosableComment>> localVarResp = getApiCommentsV2WithHttpInfo(owner, api, version);
        return localVarResp.getData();
    }

    /**
     * Get comments for the specified API version
     * 
     * @param owner API owner (organization or user, case-sensitive) (required)
     * @param api API name (case-sensitive) (required)
     * @param version Version identifier (required)
     * @return ApiResponse&lt;List&lt;ClosableComment&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Comments for the specified API </td><td>  -  </td></tr>
        <tr><td> 204 </td><td> No comments were found for the specified API </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Access token is not set or invalid </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> The comment feature is not available for the organization&#39;s plan, or the authenticating user does not have permission to complete this action </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The specified API was not found </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<ClosableComment>> getApiCommentsV2WithHttpInfo(String owner, String api, String version) throws ApiException {
        okhttp3.Call localVarCall = getApiCommentsV2ValidateBeforeCall(owner, api, version, null);
        Type localVarReturnType = new TypeToken<List<ClosableComment>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get comments for the specified API version (asynchronously)
     * 
     * @param owner API owner (organization or user, case-sensitive) (required)
     * @param api API name (case-sensitive) (required)
     * @param version Version identifier (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Comments for the specified API </td><td>  -  </td></tr>
        <tr><td> 204 </td><td> No comments were found for the specified API </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Access token is not set or invalid </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> The comment feature is not available for the organization&#39;s plan, or the authenticating user does not have permission to complete this action </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The specified API was not found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getApiCommentsV2Async(String owner, String api, String version, final ApiCallback<List<ClosableComment>> _callback) throws ApiException {

        okhttp3.Call localVarCall = getApiCommentsV2ValidateBeforeCall(owner, api, version, _callback);
        Type localVarReturnType = new TypeToken<List<ClosableComment>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getApiDefaultVersion
     * @param owner API owner (organization or user, case-sensitive) (required)
     * @param api API name (case-sensitive) (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The default version identifier for this API </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The specified API was not found. If it is private, make sure the request is authenticated and the authenticating user has access to this API. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getApiDefaultVersionCall(String owner, String api, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/apis/{owner}/{api}/settings/default"
            .replace("{" + "owner" + "}", localVarApiClient.escapeString(owner.toString()))
            .replace("{" + "api" + "}", localVarApiClient.escapeString(api.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "TokenSecured" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getApiDefaultVersionValidateBeforeCall(String owner, String api, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'owner' is set
        if (owner == null) {
            throw new ApiException("Missing the required parameter 'owner' when calling getApiDefaultVersion(Async)");
        }

        // verify the required parameter 'api' is set
        if (api == null) {
            throw new ApiException("Missing the required parameter 'api' when calling getApiDefaultVersion(Async)");
        }

        return getApiDefaultVersionCall(owner, api, _callback);

    }

    /**
     * Get the default version of an API
     * This operation returns the version identifier, such as &#x60;1.0.0&#x60;. To get the definition itself, use &#x60;GET /apis/{owner}/{api}/{version}&#x60;.
     * @param owner API owner (organization or user, case-sensitive) (required)
     * @param api API name (case-sensitive) (required)
     * @return DefaultVersion
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The default version identifier for this API </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The specified API was not found. If it is private, make sure the request is authenticated and the authenticating user has access to this API. </td><td>  -  </td></tr>
     </table>
     */
    public DefaultVersion getApiDefaultVersion(String owner, String api) throws ApiException {
        ApiResponse<DefaultVersion> localVarResp = getApiDefaultVersionWithHttpInfo(owner, api);
        return localVarResp.getData();
    }

    /**
     * Get the default version of an API
     * This operation returns the version identifier, such as &#x60;1.0.0&#x60;. To get the definition itself, use &#x60;GET /apis/{owner}/{api}/{version}&#x60;.
     * @param owner API owner (organization or user, case-sensitive) (required)
     * @param api API name (case-sensitive) (required)
     * @return ApiResponse&lt;DefaultVersion&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The default version identifier for this API </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The specified API was not found. If it is private, make sure the request is authenticated and the authenticating user has access to this API. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<DefaultVersion> getApiDefaultVersionWithHttpInfo(String owner, String api) throws ApiException {
        okhttp3.Call localVarCall = getApiDefaultVersionValidateBeforeCall(owner, api, null);
        Type localVarReturnType = new TypeToken<DefaultVersion>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get the default version of an API (asynchronously)
     * This operation returns the version identifier, such as &#x60;1.0.0&#x60;. To get the definition itself, use &#x60;GET /apis/{owner}/{api}/{version}&#x60;.
     * @param owner API owner (organization or user, case-sensitive) (required)
     * @param api API name (case-sensitive) (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The default version identifier for this API </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The specified API was not found. If it is private, make sure the request is authenticated and the authenticating user has access to this API. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getApiDefaultVersionAsync(String owner, String api, final ApiCallback<DefaultVersion> _callback) throws ApiException {

        okhttp3.Call localVarCall = getApiDefaultVersionValidateBeforeCall(owner, api, _callback);
        Type localVarReturnType = new TypeToken<DefaultVersion>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getApiVersions
     * @param owner API owner (organization or user, case-sensitive) (required)
     * @param api API name (case-sensitive) (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A list of API versions in APIs.json format </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The specified API was not found. If it is private, make sure the request is authenticated and the authenticating user has access to this API. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getApiVersionsCall(String owner, String api, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/apis/{owner}/{api}"
            .replace("{" + "owner" + "}", localVarApiClient.escapeString(owner.toString()))
            .replace("{" + "api" + "}", localVarApiClient.escapeString(api.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "TokenSecured" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getApiVersionsValidateBeforeCall(String owner, String api, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'owner' is set
        if (owner == null) {
            throw new ApiException("Missing the required parameter 'owner' when calling getApiVersions(Async)");
        }

        // verify the required parameter 'api' is set
        if (api == null) {
            throw new ApiException("Missing the required parameter 'api' when calling getApiVersions(Async)");
        }

        return getApiVersionsCall(owner, api, _callback);

    }

    /**
     * Get a list of API versions
     * 
     * @param owner API owner (organization or user, case-sensitive) (required)
     * @param api API name (case-sensitive) (required)
     * @return ApisJson
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A list of API versions in APIs.json format </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The specified API was not found. If it is private, make sure the request is authenticated and the authenticating user has access to this API. </td><td>  -  </td></tr>
     </table>
     */
    public ApisJson getApiVersions(String owner, String api) throws ApiException {
        ApiResponse<ApisJson> localVarResp = getApiVersionsWithHttpInfo(owner, api);
        return localVarResp.getData();
    }

    /**
     * Get a list of API versions
     * 
     * @param owner API owner (organization or user, case-sensitive) (required)
     * @param api API name (case-sensitive) (required)
     * @return ApiResponse&lt;ApisJson&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A list of API versions in APIs.json format </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The specified API was not found. If it is private, make sure the request is authenticated and the authenticating user has access to this API. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ApisJson> getApiVersionsWithHttpInfo(String owner, String api) throws ApiException {
        okhttp3.Call localVarCall = getApiVersionsValidateBeforeCall(owner, api, null);
        Type localVarReturnType = new TypeToken<ApisJson>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get a list of API versions (asynchronously)
     * 
     * @param owner API owner (organization or user, case-sensitive) (required)
     * @param api API name (case-sensitive) (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A list of API versions in APIs.json format </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The specified API was not found. If it is private, make sure the request is authenticated and the authenticating user has access to this API. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getApiVersionsAsync(String owner, String api, final ApiCallback<ApisJson> _callback) throws ApiException {

        okhttp3.Call localVarCall = getApiVersionsValidateBeforeCall(owner, api, _callback);
        Type localVarReturnType = new TypeToken<ApisJson>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getDefinition
     * @param owner API owner (organization or user, case-sensitive) (required)
     * @param api API name (case-sensitive) (required)
     * @param version Version identifier (required)
     * @param resolved Set to true to get the resolved version of the API definition. The content of all external $refs will be included in the resulting file. (optional, default to false)
     * @param flatten If set to &#x60;true&#x60;, it creates models from inline schemas in OpenAPI definition. AsyncAPI definitions cannot be flattened. (optional, default to false)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OpenAPI definition in the requested format (YAML or JSON) </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Could not generate resolved definition due to syntax errors in the definition </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The specified API or version was not found. If it is private, make sure the request is authenticated and the authenticating user has access to this API. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getDefinitionCall(String owner, String api, String version, Boolean resolved, Boolean flatten, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/apis/{owner}/{api}/{version}"
            .replace("{" + "owner" + "}", localVarApiClient.escapeString(owner.toString()))
            .replace("{" + "api" + "}", localVarApiClient.escapeString(api.toString()))
            .replace("{" + "version" + "}", localVarApiClient.escapeString(version.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (resolved != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("resolved", resolved));
        }

        if (flatten != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("flatten", flatten));
        }

        final String[] localVarAccepts = {
            "application/json",
            "application/yaml"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "TokenSecured" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getDefinitionValidateBeforeCall(String owner, String api, String version, Boolean resolved, Boolean flatten, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'owner' is set
        if (owner == null) {
            throw new ApiException("Missing the required parameter 'owner' when calling getDefinition(Async)");
        }

        // verify the required parameter 'api' is set
        if (api == null) {
            throw new ApiException("Missing the required parameter 'api' when calling getDefinition(Async)");
        }

        // verify the required parameter 'version' is set
        if (version == null) {
            throw new ApiException("Missing the required parameter 'version' when calling getDefinition(Async)");
        }

        return getDefinitionCall(owner, api, version, resolved, flatten, _callback);

    }

    /**
     * Get the OpenAPI definition of the specified API version
     * 
     * @param owner API owner (organization or user, case-sensitive) (required)
     * @param api API name (case-sensitive) (required)
     * @param version Version identifier (required)
     * @param resolved Set to true to get the resolved version of the API definition. The content of all external $refs will be included in the resulting file. (optional, default to false)
     * @param flatten If set to &#x60;true&#x60;, it creates models from inline schemas in OpenAPI definition. AsyncAPI definitions cannot be flattened. (optional, default to false)
     * @return Object
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OpenAPI definition in the requested format (YAML or JSON) </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Could not generate resolved definition due to syntax errors in the definition </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The specified API or version was not found. If it is private, make sure the request is authenticated and the authenticating user has access to this API. </td><td>  -  </td></tr>
     </table>
     */
    public Object getDefinition(String owner, String api, String version, Boolean resolved, Boolean flatten) throws ApiException {
        ApiResponse<Object> localVarResp = getDefinitionWithHttpInfo(owner, api, version, resolved, flatten);
        return localVarResp.getData();
    }

    /**
     * Get the OpenAPI definition of the specified API version
     * 
     * @param owner API owner (organization or user, case-sensitive) (required)
     * @param api API name (case-sensitive) (required)
     * @param version Version identifier (required)
     * @param resolved Set to true to get the resolved version of the API definition. The content of all external $refs will be included in the resulting file. (optional, default to false)
     * @param flatten If set to &#x60;true&#x60;, it creates models from inline schemas in OpenAPI definition. AsyncAPI definitions cannot be flattened. (optional, default to false)
     * @return ApiResponse&lt;Object&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OpenAPI definition in the requested format (YAML or JSON) </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Could not generate resolved definition due to syntax errors in the definition </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The specified API or version was not found. If it is private, make sure the request is authenticated and the authenticating user has access to this API. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Object> getDefinitionWithHttpInfo(String owner, String api, String version, Boolean resolved, Boolean flatten) throws ApiException {
        okhttp3.Call localVarCall = getDefinitionValidateBeforeCall(owner, api, version, resolved, flatten, null);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get the OpenAPI definition of the specified API version (asynchronously)
     * 
     * @param owner API owner (organization or user, case-sensitive) (required)
     * @param api API name (case-sensitive) (required)
     * @param version Version identifier (required)
     * @param resolved Set to true to get the resolved version of the API definition. The content of all external $refs will be included in the resulting file. (optional, default to false)
     * @param flatten If set to &#x60;true&#x60;, it creates models from inline schemas in OpenAPI definition. AsyncAPI definitions cannot be flattened. (optional, default to false)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OpenAPI definition in the requested format (YAML or JSON) </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Could not generate resolved definition due to syntax errors in the definition </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The specified API or version was not found. If it is private, make sure the request is authenticated and the authenticating user has access to this API. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getDefinitionAsync(String owner, String api, String version, Boolean resolved, Boolean flatten, final ApiCallback<Object> _callback) throws ApiException {

        okhttp3.Call localVarCall = getDefinitionValidateBeforeCall(owner, api, version, resolved, flatten, _callback);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getJsonDefinition
     * @param owner API owner (organization or user, case-sensitive) (required)
     * @param api API name (case-sensitive) (required)
     * @param version Version identifier (required)
     * @param resolved Set to true to get the resolved version of the API definition. The content of all external $refs will be included in the resulting file. (optional, default to false)
     * @param flatten If set to &#x60;true&#x60;, it creates models from inline schemas in OpenAPI definition. AsyncAPI definitions cannot be flattened. (optional, default to false)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OpenAPI definition in JSON format </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Could not generate resolved definition due to syntax errors in the definition </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The specified API or version was not found. If it is private, make sure the request is authenticated and the authenticating user has access to this API. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getJsonDefinitionCall(String owner, String api, String version, Boolean resolved, Boolean flatten, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/apis/{owner}/{api}/{version}/swagger.json"
            .replace("{" + "owner" + "}", localVarApiClient.escapeString(owner.toString()))
            .replace("{" + "api" + "}", localVarApiClient.escapeString(api.toString()))
            .replace("{" + "version" + "}", localVarApiClient.escapeString(version.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (resolved != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("resolved", resolved));
        }

        if (flatten != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("flatten", flatten));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "TokenSecured" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getJsonDefinitionValidateBeforeCall(String owner, String api, String version, Boolean resolved, Boolean flatten, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'owner' is set
        if (owner == null) {
            throw new ApiException("Missing the required parameter 'owner' when calling getJsonDefinition(Async)");
        }

        // verify the required parameter 'api' is set
        if (api == null) {
            throw new ApiException("Missing the required parameter 'api' when calling getJsonDefinition(Async)");
        }

        // verify the required parameter 'version' is set
        if (version == null) {
            throw new ApiException("Missing the required parameter 'version' when calling getJsonDefinition(Async)");
        }

        return getJsonDefinitionCall(owner, api, version, resolved, flatten, _callback);

    }

    /**
     * Get the OpenAPI definition for the specified API version in JSON format
     * 
     * @param owner API owner (organization or user, case-sensitive) (required)
     * @param api API name (case-sensitive) (required)
     * @param version Version identifier (required)
     * @param resolved Set to true to get the resolved version of the API definition. The content of all external $refs will be included in the resulting file. (optional, default to false)
     * @param flatten If set to &#x60;true&#x60;, it creates models from inline schemas in OpenAPI definition. AsyncAPI definitions cannot be flattened. (optional, default to false)
     * @return Object
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OpenAPI definition in JSON format </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Could not generate resolved definition due to syntax errors in the definition </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The specified API or version was not found. If it is private, make sure the request is authenticated and the authenticating user has access to this API. </td><td>  -  </td></tr>
     </table>
     */
    public Object getJsonDefinition(String owner, String api, String version, Boolean resolved, Boolean flatten) throws ApiException {
        ApiResponse<Object> localVarResp = getJsonDefinitionWithHttpInfo(owner, api, version, resolved, flatten);
        return localVarResp.getData();
    }

    /**
     * Get the OpenAPI definition for the specified API version in JSON format
     * 
     * @param owner API owner (organization or user, case-sensitive) (required)
     * @param api API name (case-sensitive) (required)
     * @param version Version identifier (required)
     * @param resolved Set to true to get the resolved version of the API definition. The content of all external $refs will be included in the resulting file. (optional, default to false)
     * @param flatten If set to &#x60;true&#x60;, it creates models from inline schemas in OpenAPI definition. AsyncAPI definitions cannot be flattened. (optional, default to false)
     * @return ApiResponse&lt;Object&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OpenAPI definition in JSON format </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Could not generate resolved definition due to syntax errors in the definition </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The specified API or version was not found. If it is private, make sure the request is authenticated and the authenticating user has access to this API. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Object> getJsonDefinitionWithHttpInfo(String owner, String api, String version, Boolean resolved, Boolean flatten) throws ApiException {
        okhttp3.Call localVarCall = getJsonDefinitionValidateBeforeCall(owner, api, version, resolved, flatten, null);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get the OpenAPI definition for the specified API version in JSON format (asynchronously)
     * 
     * @param owner API owner (organization or user, case-sensitive) (required)
     * @param api API name (case-sensitive) (required)
     * @param version Version identifier (required)
     * @param resolved Set to true to get the resolved version of the API definition. The content of all external $refs will be included in the resulting file. (optional, default to false)
     * @param flatten If set to &#x60;true&#x60;, it creates models from inline schemas in OpenAPI definition. AsyncAPI definitions cannot be flattened. (optional, default to false)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OpenAPI definition in JSON format </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Could not generate resolved definition due to syntax errors in the definition </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The specified API or version was not found. If it is private, make sure the request is authenticated and the authenticating user has access to this API. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getJsonDefinitionAsync(String owner, String api, String version, Boolean resolved, Boolean flatten, final ApiCallback<Object> _callback) throws ApiException {

        okhttp3.Call localVarCall = getJsonDefinitionValidateBeforeCall(owner, api, version, resolved, flatten, _callback);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getLifecycleSettings
     * @param owner API owner (organization or user, case-sensitive) (required)
     * @param api API name (case-sensitive) (required)
     * @param version Version identifier (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The published status of this API version </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Access token is not set or invalid </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The specified API or version was not found. If it is private, make sure the request is authenticated and the authenticating user has access to this API. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getLifecycleSettingsCall(String owner, String api, String version, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/apis/{owner}/{api}/{version}/settings/lifecycle"
            .replace("{" + "owner" + "}", localVarApiClient.escapeString(owner.toString()))
            .replace("{" + "api" + "}", localVarApiClient.escapeString(api.toString()))
            .replace("{" + "version" + "}", localVarApiClient.escapeString(version.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "TokenSecured" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getLifecycleSettingsValidateBeforeCall(String owner, String api, String version, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'owner' is set
        if (owner == null) {
            throw new ApiException("Missing the required parameter 'owner' when calling getLifecycleSettings(Async)");
        }

        // verify the required parameter 'api' is set
        if (api == null) {
            throw new ApiException("Missing the required parameter 'api' when calling getLifecycleSettings(Async)");
        }

        // verify the required parameter 'version' is set
        if (version == null) {
            throw new ApiException("Missing the required parameter 'version' when calling getLifecycleSettings(Async)");
        }

        return getLifecycleSettingsCall(owner, api, version, _callback);

    }

    /**
     * Get the published status for the specified API and version
     * 
     * @param owner API owner (organization or user, case-sensitive) (required)
     * @param api API name (case-sensitive) (required)
     * @param version Version identifier (required)
     * @return LifecycleSettings
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The published status of this API version </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Access token is not set or invalid </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The specified API or version was not found. If it is private, make sure the request is authenticated and the authenticating user has access to this API. </td><td>  -  </td></tr>
     </table>
     */
    public LifecycleSettings getLifecycleSettings(String owner, String api, String version) throws ApiException {
        ApiResponse<LifecycleSettings> localVarResp = getLifecycleSettingsWithHttpInfo(owner, api, version);
        return localVarResp.getData();
    }

    /**
     * Get the published status for the specified API and version
     * 
     * @param owner API owner (organization or user, case-sensitive) (required)
     * @param api API name (case-sensitive) (required)
     * @param version Version identifier (required)
     * @return ApiResponse&lt;LifecycleSettings&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The published status of this API version </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Access token is not set or invalid </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The specified API or version was not found. If it is private, make sure the request is authenticated and the authenticating user has access to this API. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<LifecycleSettings> getLifecycleSettingsWithHttpInfo(String owner, String api, String version) throws ApiException {
        okhttp3.Call localVarCall = getLifecycleSettingsValidateBeforeCall(owner, api, version, null);
        Type localVarReturnType = new TypeToken<LifecycleSettings>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get the published status for the specified API and version (asynchronously)
     * 
     * @param owner API owner (organization or user, case-sensitive) (required)
     * @param api API name (case-sensitive) (required)
     * @param version Version identifier (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The published status of this API version </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Access token is not set or invalid </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The specified API or version was not found. If it is private, make sure the request is authenticated and the authenticating user has access to this API. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getLifecycleSettingsAsync(String owner, String api, String version, final ApiCallback<LifecycleSettings> _callback) throws ApiException {

        okhttp3.Call localVarCall = getLifecycleSettingsValidateBeforeCall(owner, api, version, _callback);
        Type localVarReturnType = new TypeToken<LifecycleSettings>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getOwnerApis
     * @param owner API owner (organization or user, case-sensitive) (required)
     * @param page Page to return (optional, default to 0)
     * @param limit Number of results per page (1 .. 100) (optional, default to 10)
     * @param sort Sort criteria of result set: * NAME * UPDATED * CREATED * OWNER * BEST_MATCH - by relevance * TITLE - by &#x60;info.title&#x60;  (optional, default to NAME)
     * @param order Sort order (optional, default to ASC)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A list of APIs in APIs.json format </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getOwnerApisCall(String owner, Integer page, Integer limit, String sort, String order, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/apis/{owner}"
            .replace("{" + "owner" + "}", localVarApiClient.escapeString(owner.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (page != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("page", page));
        }

        if (limit != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("limit", limit));
        }

        if (sort != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("sort", sort));
        }

        if (order != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("order", order));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "TokenSecured" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getOwnerApisValidateBeforeCall(String owner, Integer page, Integer limit, String sort, String order, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'owner' is set
        if (owner == null) {
            throw new ApiException("Missing the required parameter 'owner' when calling getOwnerApis(Async)");
        }

        return getOwnerApisCall(owner, page, limit, sort, order, _callback);

    }

    /**
     * Get a list of APIs of the specified owner
     * 
     * @param owner API owner (organization or user, case-sensitive) (required)
     * @param page Page to return (optional, default to 0)
     * @param limit Number of results per page (1 .. 100) (optional, default to 10)
     * @param sort Sort criteria of result set: * NAME * UPDATED * CREATED * OWNER * BEST_MATCH - by relevance * TITLE - by &#x60;info.title&#x60;  (optional, default to NAME)
     * @param order Sort order (optional, default to ASC)
     * @return ApisJson
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A list of APIs in APIs.json format </td><td>  -  </td></tr>
     </table>
     */
    public ApisJson getOwnerApis(String owner, Integer page, Integer limit, String sort, String order) throws ApiException {
        ApiResponse<ApisJson> localVarResp = getOwnerApisWithHttpInfo(owner, page, limit, sort, order);
        return localVarResp.getData();
    }

    /**
     * Get a list of APIs of the specified owner
     * 
     * @param owner API owner (organization or user, case-sensitive) (required)
     * @param page Page to return (optional, default to 0)
     * @param limit Number of results per page (1 .. 100) (optional, default to 10)
     * @param sort Sort criteria of result set: * NAME * UPDATED * CREATED * OWNER * BEST_MATCH - by relevance * TITLE - by &#x60;info.title&#x60;  (optional, default to NAME)
     * @param order Sort order (optional, default to ASC)
     * @return ApiResponse&lt;ApisJson&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A list of APIs in APIs.json format </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ApisJson> getOwnerApisWithHttpInfo(String owner, Integer page, Integer limit, String sort, String order) throws ApiException {
        okhttp3.Call localVarCall = getOwnerApisValidateBeforeCall(owner, page, limit, sort, order, null);
        Type localVarReturnType = new TypeToken<ApisJson>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get a list of APIs of the specified owner (asynchronously)
     * 
     * @param owner API owner (organization or user, case-sensitive) (required)
     * @param page Page to return (optional, default to 0)
     * @param limit Number of results per page (1 .. 100) (optional, default to 10)
     * @param sort Sort criteria of result set: * NAME * UPDATED * CREATED * OWNER * BEST_MATCH - by relevance * TITLE - by &#x60;info.title&#x60;  (optional, default to NAME)
     * @param order Sort order (optional, default to ASC)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A list of APIs in APIs.json format </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getOwnerApisAsync(String owner, Integer page, Integer limit, String sort, String order, final ApiCallback<ApisJson> _callback) throws ApiException {

        okhttp3.Call localVarCall = getOwnerApisValidateBeforeCall(owner, page, limit, sort, order, _callback);
        Type localVarReturnType = new TypeToken<ApisJson>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getPrivateSettings
     * @param owner API owner (organization or user, case-sensitive) (required)
     * @param api API name (case-sensitive) (required)
     * @param version Version identifier (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The response body indicates whether this API version is private (&#x60;true&#x60;) or public (&#x60;false&#x60;) </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Access token is not set or invalid </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The specified API or version was not found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getPrivateSettingsCall(String owner, String api, String version, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/apis/{owner}/{api}/{version}/settings/private"
            .replace("{" + "owner" + "}", localVarApiClient.escapeString(owner.toString()))
            .replace("{" + "api" + "}", localVarApiClient.escapeString(api.toString()))
            .replace("{" + "version" + "}", localVarApiClient.escapeString(version.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "TokenSecured" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getPrivateSettingsValidateBeforeCall(String owner, String api, String version, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'owner' is set
        if (owner == null) {
            throw new ApiException("Missing the required parameter 'owner' when calling getPrivateSettings(Async)");
        }

        // verify the required parameter 'api' is set
        if (api == null) {
            throw new ApiException("Missing the required parameter 'api' when calling getPrivateSettings(Async)");
        }

        // verify the required parameter 'version' is set
        if (version == null) {
            throw new ApiException("Missing the required parameter 'version' when calling getPrivateSettings(Async)");
        }

        return getPrivateSettingsCall(owner, api, version, _callback);

    }

    /**
     * Get the visibility (public or private) of API version
     * 
     * @param owner API owner (organization or user, case-sensitive) (required)
     * @param api API name (case-sensitive) (required)
     * @param version Version identifier (required)
     * @return VisibilitySettings
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The response body indicates whether this API version is private (&#x60;true&#x60;) or public (&#x60;false&#x60;) </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Access token is not set or invalid </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The specified API or version was not found </td><td>  -  </td></tr>
     </table>
     */
    public VisibilitySettings getPrivateSettings(String owner, String api, String version) throws ApiException {
        ApiResponse<VisibilitySettings> localVarResp = getPrivateSettingsWithHttpInfo(owner, api, version);
        return localVarResp.getData();
    }

    /**
     * Get the visibility (public or private) of API version
     * 
     * @param owner API owner (organization or user, case-sensitive) (required)
     * @param api API name (case-sensitive) (required)
     * @param version Version identifier (required)
     * @return ApiResponse&lt;VisibilitySettings&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The response body indicates whether this API version is private (&#x60;true&#x60;) or public (&#x60;false&#x60;) </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Access token is not set or invalid </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The specified API or version was not found </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<VisibilitySettings> getPrivateSettingsWithHttpInfo(String owner, String api, String version) throws ApiException {
        okhttp3.Call localVarCall = getPrivateSettingsValidateBeforeCall(owner, api, version, null);
        Type localVarReturnType = new TypeToken<VisibilitySettings>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get the visibility (public or private) of API version (asynchronously)
     * 
     * @param owner API owner (organization or user, case-sensitive) (required)
     * @param api API name (case-sensitive) (required)
     * @param version Version identifier (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The response body indicates whether this API version is private (&#x60;true&#x60;) or public (&#x60;false&#x60;) </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Access token is not set or invalid </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The specified API or version was not found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getPrivateSettingsAsync(String owner, String api, String version, final ApiCallback<VisibilitySettings> _callback) throws ApiException {

        okhttp3.Call localVarCall = getPrivateSettingsValidateBeforeCall(owner, api, version, _callback);
        Type localVarReturnType = new TypeToken<VisibilitySettings>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getStandardizationErrors
     * @param owner API owner (organization or user, case-sensitive) (required)
     * @param api  (required)
     * @param version Version identifier (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Returns a list of standardization errors for the given API definition  </td><td>  -  </td></tr>
        <tr><td> 400 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 404 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getStandardizationErrorsCall(String owner, String api, String version, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/apis/{owner}/{api}/{version}/standardization"
            .replace("{" + "owner" + "}", localVarApiClient.escapeString(owner.toString()))
            .replace("{" + "api" + "}", localVarApiClient.escapeString(api.toString()))
            .replace("{" + "version" + "}", localVarApiClient.escapeString(version.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "TokenSecured" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getStandardizationErrorsValidateBeforeCall(String owner, String api, String version, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'owner' is set
        if (owner == null) {
            throw new ApiException("Missing the required parameter 'owner' when calling getStandardizationErrors(Async)");
        }

        // verify the required parameter 'api' is set
        if (api == null) {
            throw new ApiException("Missing the required parameter 'api' when calling getStandardizationErrors(Async)");
        }

        // verify the required parameter 'version' is set
        if (version == null) {
            throw new ApiException("Missing the required parameter 'version' when calling getStandardizationErrors(Async)");
        }

        return getStandardizationErrorsCall(owner, api, version, _callback);

    }

    /**
     * Retrieve the standardization errors for a given API definition
     * 
     * @param owner API owner (organization or user, case-sensitive) (required)
     * @param api  (required)
     * @param version Version identifier (required)
     * @return StandardizationResult
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Returns a list of standardization errors for the given API definition  </td><td>  -  </td></tr>
        <tr><td> 400 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 404 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public StandardizationResult getStandardizationErrors(String owner, String api, String version) throws ApiException {
        ApiResponse<StandardizationResult> localVarResp = getStandardizationErrorsWithHttpInfo(owner, api, version);
        return localVarResp.getData();
    }

    /**
     * Retrieve the standardization errors for a given API definition
     * 
     * @param owner API owner (organization or user, case-sensitive) (required)
     * @param api  (required)
     * @param version Version identifier (required)
     * @return ApiResponse&lt;StandardizationResult&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Returns a list of standardization errors for the given API definition  </td><td>  -  </td></tr>
        <tr><td> 400 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 404 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<StandardizationResult> getStandardizationErrorsWithHttpInfo(String owner, String api, String version) throws ApiException {
        okhttp3.Call localVarCall = getStandardizationErrorsValidateBeforeCall(owner, api, version, null);
        Type localVarReturnType = new TypeToken<StandardizationResult>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Retrieve the standardization errors for a given API definition (asynchronously)
     * 
     * @param owner API owner (organization or user, case-sensitive) (required)
     * @param api  (required)
     * @param version Version identifier (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Returns a list of standardization errors for the given API definition  </td><td>  -  </td></tr>
        <tr><td> 400 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 404 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getStandardizationErrorsAsync(String owner, String api, String version, final ApiCallback<StandardizationResult> _callback) throws ApiException {

        okhttp3.Call localVarCall = getStandardizationErrorsValidateBeforeCall(owner, api, version, _callback);
        Type localVarReturnType = new TypeToken<StandardizationResult>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getValidation
     * @param owner Organization name (case-sensitive) (required)
     * @param api API name (case-sensitive) (required)
     * @param version Version identifier (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> An object that contains a list of standardization errors and warnings found in the specified API version. Error information includes line numbers, severity (error or warning), and error messages. If no standardization errors or warnings are found, an empty validation array is returned. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Access denied </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The specified API or version was not found, or standardization is not enabled for this organization. </td><td>  -  </td></tr>
     </table>
     * @deprecated
     */
    @Deprecated
    public okhttp3.Call getValidationCall(String owner, String api, String version, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/apis/{owner}/{api}/{version}/validation"
            .replace("{" + "owner" + "}", localVarApiClient.escapeString(owner.toString()))
            .replace("{" + "api" + "}", localVarApiClient.escapeString(api.toString()))
            .replace("{" + "version" + "}", localVarApiClient.escapeString(version.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "TokenSecured" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @Deprecated
    @SuppressWarnings("rawtypes")
    private okhttp3.Call getValidationValidateBeforeCall(String owner, String api, String version, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'owner' is set
        if (owner == null) {
            throw new ApiException("Missing the required parameter 'owner' when calling getValidation(Async)");
        }

        // verify the required parameter 'api' is set
        if (api == null) {
            throw new ApiException("Missing the required parameter 'api' when calling getValidation(Async)");
        }

        // verify the required parameter 'version' is set
        if (version == null) {
            throw new ApiException("Missing the required parameter 'version' when calling getValidation(Async)");
        }

        return getValidationCall(owner, api, version, _callback);

    }

    /**
     * Deprecated Get API Standardization errors and warnings
     * **Note:** This endpoint is deprecated. Use the following new endpoint instead: GET /apis/{owner}/{api}/{version}/standardization   If your organization has [API standardization](https://support.smartbear.com/swaggerhub/docs/organizations/api-standardization.html) configured, you can use this operation to validate a specific API version and get a list of errors or warnings with line numbers.  This operation checks for standardization errors only and does not return OpenAPI syntax errors (such as misspelled keywords) or YAML syntax errors.
     * @param owner Organization name (case-sensitive) (required)
     * @param api API name (case-sensitive) (required)
     * @param version Version identifier (required)
     * @return ValidationResult
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> An object that contains a list of standardization errors and warnings found in the specified API version. Error information includes line numbers, severity (error or warning), and error messages. If no standardization errors or warnings are found, an empty validation array is returned. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Access denied </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The specified API or version was not found, or standardization is not enabled for this organization. </td><td>  -  </td></tr>
     </table>
     * @deprecated
     */
    @Deprecated
    public ValidationResult getValidation(String owner, String api, String version) throws ApiException {
        ApiResponse<ValidationResult> localVarResp = getValidationWithHttpInfo(owner, api, version);
        return localVarResp.getData();
    }

    /**
     * Deprecated Get API Standardization errors and warnings
     * **Note:** This endpoint is deprecated. Use the following new endpoint instead: GET /apis/{owner}/{api}/{version}/standardization   If your organization has [API standardization](https://support.smartbear.com/swaggerhub/docs/organizations/api-standardization.html) configured, you can use this operation to validate a specific API version and get a list of errors or warnings with line numbers.  This operation checks for standardization errors only and does not return OpenAPI syntax errors (such as misspelled keywords) or YAML syntax errors.
     * @param owner Organization name (case-sensitive) (required)
     * @param api API name (case-sensitive) (required)
     * @param version Version identifier (required)
     * @return ApiResponse&lt;ValidationResult&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> An object that contains a list of standardization errors and warnings found in the specified API version. Error information includes line numbers, severity (error or warning), and error messages. If no standardization errors or warnings are found, an empty validation array is returned. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Access denied </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The specified API or version was not found, or standardization is not enabled for this organization. </td><td>  -  </td></tr>
     </table>
     * @deprecated
     */
    @Deprecated
    public ApiResponse<ValidationResult> getValidationWithHttpInfo(String owner, String api, String version) throws ApiException {
        okhttp3.Call localVarCall = getValidationValidateBeforeCall(owner, api, version, null);
        Type localVarReturnType = new TypeToken<ValidationResult>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Deprecated Get API Standardization errors and warnings (asynchronously)
     * **Note:** This endpoint is deprecated. Use the following new endpoint instead: GET /apis/{owner}/{api}/{version}/standardization   If your organization has [API standardization](https://support.smartbear.com/swaggerhub/docs/organizations/api-standardization.html) configured, you can use this operation to validate a specific API version and get a list of errors or warnings with line numbers.  This operation checks for standardization errors only and does not return OpenAPI syntax errors (such as misspelled keywords) or YAML syntax errors.
     * @param owner Organization name (case-sensitive) (required)
     * @param api API name (case-sensitive) (required)
     * @param version Version identifier (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> An object that contains a list of standardization errors and warnings found in the specified API version. Error information includes line numbers, severity (error or warning), and error messages. If no standardization errors or warnings are found, an empty validation array is returned. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Access denied </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The specified API or version was not found, or standardization is not enabled for this organization. </td><td>  -  </td></tr>
     </table>
     * @deprecated
     */
    @Deprecated
    public okhttp3.Call getValidationAsync(String owner, String api, String version, final ApiCallback<ValidationResult> _callback) throws ApiException {

        okhttp3.Call localVarCall = getValidationValidateBeforeCall(owner, api, version, _callback);
        Type localVarReturnType = new TypeToken<ValidationResult>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getYamlDefinition
     * @param owner API owner (organization or user, case-sensitive) (required)
     * @param api API name (case-sensitive) (required)
     * @param version Version identifier (required)
     * @param resolved Set to true to get the resolved version of the API definition. The content of all external $refs will be included in the resulting file. (optional, default to false)
     * @param flatten If set to &#x60;true&#x60;, it creates models from inline schemas in OpenAPI definition. AsyncAPI definitions cannot be flattened. (optional, default to false)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OpenAPI definition in YAML format </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Could not generate resolved definition due to syntax errors in the definition </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The specified API or version was not found. If it is private, make sure the request is authenticated and the authenticating user has access to this API. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getYamlDefinitionCall(String owner, String api, String version, Boolean resolved, Boolean flatten, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/apis/{owner}/{api}/{version}/swagger.yaml"
            .replace("{" + "owner" + "}", localVarApiClient.escapeString(owner.toString()))
            .replace("{" + "api" + "}", localVarApiClient.escapeString(api.toString()))
            .replace("{" + "version" + "}", localVarApiClient.escapeString(version.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (resolved != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("resolved", resolved));
        }

        if (flatten != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("flatten", flatten));
        }

        final String[] localVarAccepts = {
            "application/yaml",
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "TokenSecured" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getYamlDefinitionValidateBeforeCall(String owner, String api, String version, Boolean resolved, Boolean flatten, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'owner' is set
        if (owner == null) {
            throw new ApiException("Missing the required parameter 'owner' when calling getYamlDefinition(Async)");
        }

        // verify the required parameter 'api' is set
        if (api == null) {
            throw new ApiException("Missing the required parameter 'api' when calling getYamlDefinition(Async)");
        }

        // verify the required parameter 'version' is set
        if (version == null) {
            throw new ApiException("Missing the required parameter 'version' when calling getYamlDefinition(Async)");
        }

        return getYamlDefinitionCall(owner, api, version, resolved, flatten, _callback);

    }

    /**
     * Get the OpenAPI definition for the specified API version in YAML format
     * 
     * @param owner API owner (organization or user, case-sensitive) (required)
     * @param api API name (case-sensitive) (required)
     * @param version Version identifier (required)
     * @param resolved Set to true to get the resolved version of the API definition. The content of all external $refs will be included in the resulting file. (optional, default to false)
     * @param flatten If set to &#x60;true&#x60;, it creates models from inline schemas in OpenAPI definition. AsyncAPI definitions cannot be flattened. (optional, default to false)
     * @return Object
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OpenAPI definition in YAML format </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Could not generate resolved definition due to syntax errors in the definition </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The specified API or version was not found. If it is private, make sure the request is authenticated and the authenticating user has access to this API. </td><td>  -  </td></tr>
     </table>
     */
    public Object getYamlDefinition(String owner, String api, String version, Boolean resolved, Boolean flatten) throws ApiException {
        ApiResponse<Object> localVarResp = getYamlDefinitionWithHttpInfo(owner, api, version, resolved, flatten);
        return localVarResp.getData();
    }

    /**
     * Get the OpenAPI definition for the specified API version in YAML format
     * 
     * @param owner API owner (organization or user, case-sensitive) (required)
     * @param api API name (case-sensitive) (required)
     * @param version Version identifier (required)
     * @param resolved Set to true to get the resolved version of the API definition. The content of all external $refs will be included in the resulting file. (optional, default to false)
     * @param flatten If set to &#x60;true&#x60;, it creates models from inline schemas in OpenAPI definition. AsyncAPI definitions cannot be flattened. (optional, default to false)
     * @return ApiResponse&lt;Object&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OpenAPI definition in YAML format </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Could not generate resolved definition due to syntax errors in the definition </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The specified API or version was not found. If it is private, make sure the request is authenticated and the authenticating user has access to this API. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Object> getYamlDefinitionWithHttpInfo(String owner, String api, String version, Boolean resolved, Boolean flatten) throws ApiException {
        okhttp3.Call localVarCall = getYamlDefinitionValidateBeforeCall(owner, api, version, resolved, flatten, null);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get the OpenAPI definition for the specified API version in YAML format (asynchronously)
     * 
     * @param owner API owner (organization or user, case-sensitive) (required)
     * @param api API name (case-sensitive) (required)
     * @param version Version identifier (required)
     * @param resolved Set to true to get the resolved version of the API definition. The content of all external $refs will be included in the resulting file. (optional, default to false)
     * @param flatten If set to &#x60;true&#x60;, it creates models from inline schemas in OpenAPI definition. AsyncAPI definitions cannot be flattened. (optional, default to false)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OpenAPI definition in YAML format </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Could not generate resolved definition due to syntax errors in the definition </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The specified API or version was not found. If it is private, make sure the request is authenticated and the authenticating user has access to this API. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getYamlDefinitionAsync(String owner, String api, String version, Boolean resolved, Boolean flatten, final ApiCallback<Object> _callback) throws ApiException {

        okhttp3.Call localVarCall = getYamlDefinitionValidateBeforeCall(owner, api, version, resolved, flatten, _callback);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for renameApi
     * @param owner API owner (organization or user, case-sensitive) (required)
     * @param api API name (case-sensitive) (required)
     * @param newName New name (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The API was successfully renamed </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Access token is not set or invalid </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Access denied (insufficient user permissions) </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The specified owner or API was not found </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> An API or domain with the new name already exists, or the new and old names are the same </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call renameApiCall(String owner, String api, String newName, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/apis/{owner}/{api}/rename"
            .replace("{" + "owner" + "}", localVarApiClient.escapeString(owner.toString()))
            .replace("{" + "api" + "}", localVarApiClient.escapeString(api.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (newName != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("newName", newName));
        }

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "TokenSecured" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call renameApiValidateBeforeCall(String owner, String api, String newName, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'owner' is set
        if (owner == null) {
            throw new ApiException("Missing the required parameter 'owner' when calling renameApi(Async)");
        }

        // verify the required parameter 'api' is set
        if (api == null) {
            throw new ApiException("Missing the required parameter 'api' when calling renameApi(Async)");
        }

        // verify the required parameter 'newName' is set
        if (newName == null) {
            throw new ApiException("Missing the required parameter 'newName' when calling renameApi(Async)");
        }

        return renameApiCall(owner, api, newName, _callback);

    }

    /**
     * Rename an API
     * The new name must follow the [naming rules](https://support.smartbear.com/swaggerhub/docs/apis/creating-api.html).
     * @param owner API owner (organization or user, case-sensitive) (required)
     * @param api API name (case-sensitive) (required)
     * @param newName New name (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The API was successfully renamed </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Access token is not set or invalid </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Access denied (insufficient user permissions) </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The specified owner or API was not found </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> An API or domain with the new name already exists, or the new and old names are the same </td><td>  -  </td></tr>
     </table>
     */
    public void renameApi(String owner, String api, String newName) throws ApiException {
        renameApiWithHttpInfo(owner, api, newName);
    }

    /**
     * Rename an API
     * The new name must follow the [naming rules](https://support.smartbear.com/swaggerhub/docs/apis/creating-api.html).
     * @param owner API owner (organization or user, case-sensitive) (required)
     * @param api API name (case-sensitive) (required)
     * @param newName New name (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The API was successfully renamed </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Access token is not set or invalid </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Access denied (insufficient user permissions) </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The specified owner or API was not found </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> An API or domain with the new name already exists, or the new and old names are the same </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> renameApiWithHttpInfo(String owner, String api, String newName) throws ApiException {
        okhttp3.Call localVarCall = renameApiValidateBeforeCall(owner, api, newName, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Rename an API (asynchronously)
     * The new name must follow the [naming rules](https://support.smartbear.com/swaggerhub/docs/apis/creating-api.html).
     * @param owner API owner (organization or user, case-sensitive) (required)
     * @param api API name (case-sensitive) (required)
     * @param newName New name (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The API was successfully renamed </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Access token is not set or invalid </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Access denied (insufficient user permissions) </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The specified owner or API was not found </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> An API or domain with the new name already exists, or the new and old names are the same </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call renameApiAsync(String owner, String api, String newName, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = renameApiValidateBeforeCall(owner, api, newName, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for saveDefinition
     * @param owner API owner name (organization or user name, case-sensitive) (required)
     * @param api API name (case-sensitive) (required)
     * @param definition OpenAPI definition in the YAML or JSON format. The content must be syntactically valid YAML or JSON. (required)
     * @param isPrivate Whether to make the API private (&#x60;true&#x60;) or public (&#x60;false&#x60;) (optional, default to false)
     * @param version API version to create or update. If omitted, the version is extracted from the &#x60;info.version&#x60; field of the provided OpenAPI definition.  Either the &#x60;version&#x60; parameter or the &#x60;info.version&#x60; value must be specified, otherwise the request will be rejected. If both are specified, the &#x60;version&#x60; parameter overrides the &#x60;info.version&#x60; value.  If this API version already exists, it will be updated with the new definition (unless that version has been published - in this case the update will be rejected). (optional)
     * @param force Force update (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Existing API version was successfully updated </td><td>  -  </td></tr>
        <tr><td> 201 </td><td> New API or version was successfully created </td><td>  -  </td></tr>
        <tr><td> 205 </td><td> This status is returned when updating existing API versions that use [API Auto Mocking](https://support.smartbear.com/swaggerhub/docs/integrations/api-auto-mocking.html) with the \&quot;Update host setting\&quot; option enabled. Status 205 means the uploaded definition was successfully saved, and its &#x60;servers&#x60; or &#x60;host&#x60;+&#x60;basePath&#x60; values were automatically updated to point to the mock server.  The client can download the updated definition from SwaggerHub by using &#x60;GET /apis/{owner}/{api}&#x60;. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Possible reasons:   * Some parameter values are invalid, or the provided OpenAPI definition is invalid.  * The specified &#x60;projectName&#x60; does not exist in the &#x60;owner&#x60; organization, or the authenticating user does not have access to this project.  * Cannot create a new API because a domain with this name already exists in the &#x60;owner&#x60; account. Try a different name. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Access token is not set or invalid </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Maximum number of APIs reached </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The specified owner was not found </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> Cannot overwrite a published API version </td><td>  -  </td></tr>
        <tr><td> 415 </td><td> Invalid content type </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call saveDefinitionCall(String owner, String api, String definition, Boolean isPrivate, String version, Boolean force, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = definition;

        // create path and map variables
        String localVarPath = "/apis/{owner}/{api}"
            .replace("{" + "owner" + "}", localVarApiClient.escapeString(owner.toString()))
            .replace("{" + "api" + "}", localVarApiClient.escapeString(api.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (isPrivate != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("isPrivate", isPrivate));
        }

        if (version != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("version", version));
        }

        if (force != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("force", force));
        }

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json",
            "application/yaml"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "TokenSecured" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call saveDefinitionValidateBeforeCall(String owner, String api, String definition, Boolean isPrivate, String version, Boolean force, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'owner' is set
        if (owner == null) {
            throw new ApiException("Missing the required parameter 'owner' when calling saveDefinition(Async)");
        }

        // verify the required parameter 'api' is set
        if (api == null) {
            throw new ApiException("Missing the required parameter 'api' when calling saveDefinition(Async)");
        }

        // verify the required parameter 'definition' is set
        if (definition == null) {
            throw new ApiException("Missing the required parameter 'definition' when calling saveDefinition(Async)");
        }

        return saveDefinitionCall(owner, api, definition, isPrivate, version, force, _callback);

    }

    /**
     * Create or update an API
     * Use this operation to create a new API or update an existing API by uploading its OpenAPI definition in YAML or JSON format. The authenticating user must have permissions to create or update APIs in the specified &#x60;owner&#x60; account.  The API name and version must follow SwaggerHub naming rules, otherwise the request will be rejected. Refer to:    * [API name format](https://support.smartbear.com/swaggerhub/docs/apis/creating-api.html)  * [Version format](https://support.smartbear.com/swaggerhub/docs/apis/versioning.html#format)   When a new version of an existing API is created, it does not automatically become the default version. You can use &#x60;PUT /apis/{owner}/{api}/settings/default&#x60; to set the default version.  ### cURL example Line breaks are added for readability.      curl -X POST \&quot;https://api.swaggerhub.com/apis/OWNER/API_TO_CREATE_OR_UPDATE\&quot;          -H \&quot;Authorization: SWAGGERHUB_API_KEY\&quot;          -H \&quot;Content-Type: application/yaml\&quot;          --data-binary @C:\\work\\swagger.yaml  **Note:** Use &#x60;--data-binary&#x60; (not &#x60;-d&#x60;) when uploading YAML files using cURL, and remember to specify the correct &#x60;Content-Type&#x60; header.
     * @param owner API owner name (organization or user name, case-sensitive) (required)
     * @param api API name (case-sensitive) (required)
     * @param definition OpenAPI definition in the YAML or JSON format. The content must be syntactically valid YAML or JSON. (required)
     * @param isPrivate Whether to make the API private (&#x60;true&#x60;) or public (&#x60;false&#x60;) (optional, default to false)
     * @param version API version to create or update. If omitted, the version is extracted from the &#x60;info.version&#x60; field of the provided OpenAPI definition.  Either the &#x60;version&#x60; parameter or the &#x60;info.version&#x60; value must be specified, otherwise the request will be rejected. If both are specified, the &#x60;version&#x60; parameter overrides the &#x60;info.version&#x60; value.  If this API version already exists, it will be updated with the new definition (unless that version has been published - in this case the update will be rejected). (optional)
     * @param force Force update (optional)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Existing API version was successfully updated </td><td>  -  </td></tr>
        <tr><td> 201 </td><td> New API or version was successfully created </td><td>  -  </td></tr>
        <tr><td> 205 </td><td> This status is returned when updating existing API versions that use [API Auto Mocking](https://support.smartbear.com/swaggerhub/docs/integrations/api-auto-mocking.html) with the \&quot;Update host setting\&quot; option enabled. Status 205 means the uploaded definition was successfully saved, and its &#x60;servers&#x60; or &#x60;host&#x60;+&#x60;basePath&#x60; values were automatically updated to point to the mock server.  The client can download the updated definition from SwaggerHub by using &#x60;GET /apis/{owner}/{api}&#x60;. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Possible reasons:   * Some parameter values are invalid, or the provided OpenAPI definition is invalid.  * The specified &#x60;projectName&#x60; does not exist in the &#x60;owner&#x60; organization, or the authenticating user does not have access to this project.  * Cannot create a new API because a domain with this name already exists in the &#x60;owner&#x60; account. Try a different name. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Access token is not set or invalid </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Maximum number of APIs reached </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The specified owner was not found </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> Cannot overwrite a published API version </td><td>  -  </td></tr>
        <tr><td> 415 </td><td> Invalid content type </td><td>  -  </td></tr>
     </table>
     */
    public void saveDefinition(String owner, String api, String definition, Boolean isPrivate, String version, Boolean force) throws ApiException {
        saveDefinitionWithHttpInfo(owner, api, definition, isPrivate, version, force);
    }

    /**
     * Create or update an API
     * Use this operation to create a new API or update an existing API by uploading its OpenAPI definition in YAML or JSON format. The authenticating user must have permissions to create or update APIs in the specified &#x60;owner&#x60; account.  The API name and version must follow SwaggerHub naming rules, otherwise the request will be rejected. Refer to:    * [API name format](https://support.smartbear.com/swaggerhub/docs/apis/creating-api.html)  * [Version format](https://support.smartbear.com/swaggerhub/docs/apis/versioning.html#format)   When a new version of an existing API is created, it does not automatically become the default version. You can use &#x60;PUT /apis/{owner}/{api}/settings/default&#x60; to set the default version.  ### cURL example Line breaks are added for readability.      curl -X POST \&quot;https://api.swaggerhub.com/apis/OWNER/API_TO_CREATE_OR_UPDATE\&quot;          -H \&quot;Authorization: SWAGGERHUB_API_KEY\&quot;          -H \&quot;Content-Type: application/yaml\&quot;          --data-binary @C:\\work\\swagger.yaml  **Note:** Use &#x60;--data-binary&#x60; (not &#x60;-d&#x60;) when uploading YAML files using cURL, and remember to specify the correct &#x60;Content-Type&#x60; header.
     * @param owner API owner name (organization or user name, case-sensitive) (required)
     * @param api API name (case-sensitive) (required)
     * @param definition OpenAPI definition in the YAML or JSON format. The content must be syntactically valid YAML or JSON. (required)
     * @param isPrivate Whether to make the API private (&#x60;true&#x60;) or public (&#x60;false&#x60;) (optional, default to false)
     * @param version API version to create or update. If omitted, the version is extracted from the &#x60;info.version&#x60; field of the provided OpenAPI definition.  Either the &#x60;version&#x60; parameter or the &#x60;info.version&#x60; value must be specified, otherwise the request will be rejected. If both are specified, the &#x60;version&#x60; parameter overrides the &#x60;info.version&#x60; value.  If this API version already exists, it will be updated with the new definition (unless that version has been published - in this case the update will be rejected). (optional)
     * @param force Force update (optional)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Existing API version was successfully updated </td><td>  -  </td></tr>
        <tr><td> 201 </td><td> New API or version was successfully created </td><td>  -  </td></tr>
        <tr><td> 205 </td><td> This status is returned when updating existing API versions that use [API Auto Mocking](https://support.smartbear.com/swaggerhub/docs/integrations/api-auto-mocking.html) with the \&quot;Update host setting\&quot; option enabled. Status 205 means the uploaded definition was successfully saved, and its &#x60;servers&#x60; or &#x60;host&#x60;+&#x60;basePath&#x60; values were automatically updated to point to the mock server.  The client can download the updated definition from SwaggerHub by using &#x60;GET /apis/{owner}/{api}&#x60;. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Possible reasons:   * Some parameter values are invalid, or the provided OpenAPI definition is invalid.  * The specified &#x60;projectName&#x60; does not exist in the &#x60;owner&#x60; organization, or the authenticating user does not have access to this project.  * Cannot create a new API because a domain with this name already exists in the &#x60;owner&#x60; account. Try a different name. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Access token is not set or invalid </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Maximum number of APIs reached </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The specified owner was not found </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> Cannot overwrite a published API version </td><td>  -  </td></tr>
        <tr><td> 415 </td><td> Invalid content type </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> saveDefinitionWithHttpInfo(String owner, String api, String definition, Boolean isPrivate, String version, Boolean force) throws ApiException {
        okhttp3.Call localVarCall = saveDefinitionValidateBeforeCall(owner, api, definition, isPrivate, version, force, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Create or update an API (asynchronously)
     * Use this operation to create a new API or update an existing API by uploading its OpenAPI definition in YAML or JSON format. The authenticating user must have permissions to create or update APIs in the specified &#x60;owner&#x60; account.  The API name and version must follow SwaggerHub naming rules, otherwise the request will be rejected. Refer to:    * [API name format](https://support.smartbear.com/swaggerhub/docs/apis/creating-api.html)  * [Version format](https://support.smartbear.com/swaggerhub/docs/apis/versioning.html#format)   When a new version of an existing API is created, it does not automatically become the default version. You can use &#x60;PUT /apis/{owner}/{api}/settings/default&#x60; to set the default version.  ### cURL example Line breaks are added for readability.      curl -X POST \&quot;https://api.swaggerhub.com/apis/OWNER/API_TO_CREATE_OR_UPDATE\&quot;          -H \&quot;Authorization: SWAGGERHUB_API_KEY\&quot;          -H \&quot;Content-Type: application/yaml\&quot;          --data-binary @C:\\work\\swagger.yaml  **Note:** Use &#x60;--data-binary&#x60; (not &#x60;-d&#x60;) when uploading YAML files using cURL, and remember to specify the correct &#x60;Content-Type&#x60; header.
     * @param owner API owner name (organization or user name, case-sensitive) (required)
     * @param api API name (case-sensitive) (required)
     * @param definition OpenAPI definition in the YAML or JSON format. The content must be syntactically valid YAML or JSON. (required)
     * @param isPrivate Whether to make the API private (&#x60;true&#x60;) or public (&#x60;false&#x60;) (optional, default to false)
     * @param version API version to create or update. If omitted, the version is extracted from the &#x60;info.version&#x60; field of the provided OpenAPI definition.  Either the &#x60;version&#x60; parameter or the &#x60;info.version&#x60; value must be specified, otherwise the request will be rejected. If both are specified, the &#x60;version&#x60; parameter overrides the &#x60;info.version&#x60; value.  If this API version already exists, it will be updated with the new definition (unless that version has been published - in this case the update will be rejected). (optional)
     * @param force Force update (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Existing API version was successfully updated </td><td>  -  </td></tr>
        <tr><td> 201 </td><td> New API or version was successfully created </td><td>  -  </td></tr>
        <tr><td> 205 </td><td> This status is returned when updating existing API versions that use [API Auto Mocking](https://support.smartbear.com/swaggerhub/docs/integrations/api-auto-mocking.html) with the \&quot;Update host setting\&quot; option enabled. Status 205 means the uploaded definition was successfully saved, and its &#x60;servers&#x60; or &#x60;host&#x60;+&#x60;basePath&#x60; values were automatically updated to point to the mock server.  The client can download the updated definition from SwaggerHub by using &#x60;GET /apis/{owner}/{api}&#x60;. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Possible reasons:   * Some parameter values are invalid, or the provided OpenAPI definition is invalid.  * The specified &#x60;projectName&#x60; does not exist in the &#x60;owner&#x60; organization, or the authenticating user does not have access to this project.  * Cannot create a new API because a domain with this name already exists in the &#x60;owner&#x60; account. Try a different name. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Access token is not set or invalid </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Maximum number of APIs reached </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The specified owner was not found </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> Cannot overwrite a published API version </td><td>  -  </td></tr>
        <tr><td> 415 </td><td> Invalid content type </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call saveDefinitionAsync(String owner, String api, String definition, Boolean isPrivate, String version, Boolean force, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = saveDefinitionValidateBeforeCall(owner, api, definition, isPrivate, version, force, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for searchApis
     * @param query Free text query to match (optional)
     * @param state Matches against published state of the spec: * UNPUBLISHED - spec is a draft, a work in progress * PUBLISHED - spec is a stable version ready for consuming from client applications * ANY - either PUBLISHED or UNPUBLISHED  (optional, default to ALL)
     * @param page Page to return (optional, default to 0)
     * @param limit Number of results per page (1 .. 100) (optional, default to 10)
     * @param sort Sort criteria of result set: * NAME * UPDATED * CREATED * OWNER * BEST_MATCH - by relevance * TITLE - by &#x60;info.title&#x60;  (optional, default to NAME)
     * @param order Sort order (optional, default to ASC)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 303 </td><td> Redirect to &#x60;GET /specs&#x60;, with all query parameters preserved </td><td>  * Location -  <br>  </td></tr>
     </table>
     */
    public okhttp3.Call searchApisCall(String query, String state, Integer page, Integer limit, String sort, String order, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/apis";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (query != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("query", query));
        }

        if (state != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("state", state));
        }

        if (page != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("page", page));
        }

        if (limit != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("limit", limit));
        }

        if (sort != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("sort", sort));
        }

        if (order != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("order", order));
        }

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "TokenSecured" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call searchApisValidateBeforeCall(String query, String state, Integer page, Integer limit, String sort, String order, final ApiCallback _callback) throws ApiException {
        return searchApisCall(query, state, page, limit, sort, order, _callback);

    }

    /**
     * Search APIs
     * This is a convenience alias for &#x60;GET /specs?specType&#x3D;API&#x60;.
     * @param query Free text query to match (optional)
     * @param state Matches against published state of the spec: * UNPUBLISHED - spec is a draft, a work in progress * PUBLISHED - spec is a stable version ready for consuming from client applications * ANY - either PUBLISHED or UNPUBLISHED  (optional, default to ALL)
     * @param page Page to return (optional, default to 0)
     * @param limit Number of results per page (1 .. 100) (optional, default to 10)
     * @param sort Sort criteria of result set: * NAME * UPDATED * CREATED * OWNER * BEST_MATCH - by relevance * TITLE - by &#x60;info.title&#x60;  (optional, default to NAME)
     * @param order Sort order (optional, default to ASC)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 303 </td><td> Redirect to &#x60;GET /specs&#x60;, with all query parameters preserved </td><td>  * Location -  <br>  </td></tr>
     </table>
     */
    public void searchApis(String query, String state, Integer page, Integer limit, String sort, String order) throws ApiException {
        searchApisWithHttpInfo(query, state, page, limit, sort, order);
    }

    /**
     * Search APIs
     * This is a convenience alias for &#x60;GET /specs?specType&#x3D;API&#x60;.
     * @param query Free text query to match (optional)
     * @param state Matches against published state of the spec: * UNPUBLISHED - spec is a draft, a work in progress * PUBLISHED - spec is a stable version ready for consuming from client applications * ANY - either PUBLISHED or UNPUBLISHED  (optional, default to ALL)
     * @param page Page to return (optional, default to 0)
     * @param limit Number of results per page (1 .. 100) (optional, default to 10)
     * @param sort Sort criteria of result set: * NAME * UPDATED * CREATED * OWNER * BEST_MATCH - by relevance * TITLE - by &#x60;info.title&#x60;  (optional, default to NAME)
     * @param order Sort order (optional, default to ASC)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 303 </td><td> Redirect to &#x60;GET /specs&#x60;, with all query parameters preserved </td><td>  * Location -  <br>  </td></tr>
     </table>
     */
    public ApiResponse<Void> searchApisWithHttpInfo(String query, String state, Integer page, Integer limit, String sort, String order) throws ApiException {
        okhttp3.Call localVarCall = searchApisValidateBeforeCall(query, state, page, limit, sort, order, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Search APIs (asynchronously)
     * This is a convenience alias for &#x60;GET /specs?specType&#x3D;API&#x60;.
     * @param query Free text query to match (optional)
     * @param state Matches against published state of the spec: * UNPUBLISHED - spec is a draft, a work in progress * PUBLISHED - spec is a stable version ready for consuming from client applications * ANY - either PUBLISHED or UNPUBLISHED  (optional, default to ALL)
     * @param page Page to return (optional, default to 0)
     * @param limit Number of results per page (1 .. 100) (optional, default to 10)
     * @param sort Sort criteria of result set: * NAME * UPDATED * CREATED * OWNER * BEST_MATCH - by relevance * TITLE - by &#x60;info.title&#x60;  (optional, default to NAME)
     * @param order Sort order (optional, default to ASC)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 303 </td><td> Redirect to &#x60;GET /specs&#x60;, with all query parameters preserved </td><td>  * Location -  <br>  </td></tr>
     </table>
     */
    public okhttp3.Call searchApisAsync(String query, String state, Integer page, Integer limit, String sort, String order, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = searchApisValidateBeforeCall(query, state, page, limit, sort, order, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for searchApisAndDomains
     * @param specType Type of definitions to search: * API - APIs only * DOMAIN - domains only * TEMPLATE - templates only * ANY - APIs, domains, and templates  (optional, default to ANY)
     * @param visibility The visibility of a definition in SwaggerHub: * PUBLIC - can be viewed by anyone * PRIVATE - can only be viewed by you or your organization and those that you are collaborating with or have shared it with * ANY - either PUBLIC or PRIVATE  (optional, default to ANY)
     * @param state Matches against published state of the spec: * UNPUBLISHED - spec is a draft, a work in progress * PUBLISHED - spec is a stable version ready for consuming from client applications * ANY - either PUBLISHED or UNPUBLISHED  (optional, default to ALL)
     * @param owner API or domain owner. Can be username or organization name. Case-sensitive. (optional)
     * @param query Free text query to match (optional)
     * @param page Page to return (optional, default to 0)
     * @param limit Number of results per page (1 .. 100) (optional, default to 10)
     * @param sort Sort criteria of result set: * NAME * UPDATED * CREATED * OWNER * BEST_MATCH - by relevance * TITLE - by &#x60;info.title&#x60;  (optional, default to NAME)
     * @param order Sort order (optional, default to ASC)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A list of APIs, domains, and templates in APIs.json format </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call searchApisAndDomainsCall(String specType, String visibility, String state, String owner, String query, Integer page, Integer limit, String sort, String order, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/specs";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (specType != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("specType", specType));
        }

        if (visibility != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("visibility", visibility));
        }

        if (state != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("state", state));
        }

        if (owner != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("owner", owner));
        }

        if (query != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("query", query));
        }

        if (page != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("page", page));
        }

        if (limit != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("limit", limit));
        }

        if (sort != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("sort", sort));
        }

        if (order != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("order", order));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "TokenSecured" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call searchApisAndDomainsValidateBeforeCall(String specType, String visibility, String state, String owner, String query, Integer page, Integer limit, String sort, String order, final ApiCallback _callback) throws ApiException {
        return searchApisAndDomainsCall(specType, visibility, state, owner, query, page, limit, sort, order, _callback);

    }

    /**
     * Retrieve a list of currently defined APIs, domains, and templates in APIs.json format
     * 
     * @param specType Type of definitions to search: * API - APIs only * DOMAIN - domains only * TEMPLATE - templates only * ANY - APIs, domains, and templates  (optional, default to ANY)
     * @param visibility The visibility of a definition in SwaggerHub: * PUBLIC - can be viewed by anyone * PRIVATE - can only be viewed by you or your organization and those that you are collaborating with or have shared it with * ANY - either PUBLIC or PRIVATE  (optional, default to ANY)
     * @param state Matches against published state of the spec: * UNPUBLISHED - spec is a draft, a work in progress * PUBLISHED - spec is a stable version ready for consuming from client applications * ANY - either PUBLISHED or UNPUBLISHED  (optional, default to ALL)
     * @param owner API or domain owner. Can be username or organization name. Case-sensitive. (optional)
     * @param query Free text query to match (optional)
     * @param page Page to return (optional, default to 0)
     * @param limit Number of results per page (1 .. 100) (optional, default to 10)
     * @param sort Sort criteria of result set: * NAME * UPDATED * CREATED * OWNER * BEST_MATCH - by relevance * TITLE - by &#x60;info.title&#x60;  (optional, default to NAME)
     * @param order Sort order (optional, default to ASC)
     * @return ApisJson
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A list of APIs, domains, and templates in APIs.json format </td><td>  -  </td></tr>
     </table>
     */
    public ApisJson searchApisAndDomains(String specType, String visibility, String state, String owner, String query, Integer page, Integer limit, String sort, String order) throws ApiException {
        ApiResponse<ApisJson> localVarResp = searchApisAndDomainsWithHttpInfo(specType, visibility, state, owner, query, page, limit, sort, order);
        return localVarResp.getData();
    }

    /**
     * Retrieve a list of currently defined APIs, domains, and templates in APIs.json format
     * 
     * @param specType Type of definitions to search: * API - APIs only * DOMAIN - domains only * TEMPLATE - templates only * ANY - APIs, domains, and templates  (optional, default to ANY)
     * @param visibility The visibility of a definition in SwaggerHub: * PUBLIC - can be viewed by anyone * PRIVATE - can only be viewed by you or your organization and those that you are collaborating with or have shared it with * ANY - either PUBLIC or PRIVATE  (optional, default to ANY)
     * @param state Matches against published state of the spec: * UNPUBLISHED - spec is a draft, a work in progress * PUBLISHED - spec is a stable version ready for consuming from client applications * ANY - either PUBLISHED or UNPUBLISHED  (optional, default to ALL)
     * @param owner API or domain owner. Can be username or organization name. Case-sensitive. (optional)
     * @param query Free text query to match (optional)
     * @param page Page to return (optional, default to 0)
     * @param limit Number of results per page (1 .. 100) (optional, default to 10)
     * @param sort Sort criteria of result set: * NAME * UPDATED * CREATED * OWNER * BEST_MATCH - by relevance * TITLE - by &#x60;info.title&#x60;  (optional, default to NAME)
     * @param order Sort order (optional, default to ASC)
     * @return ApiResponse&lt;ApisJson&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A list of APIs, domains, and templates in APIs.json format </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ApisJson> searchApisAndDomainsWithHttpInfo(String specType, String visibility, String state, String owner, String query, Integer page, Integer limit, String sort, String order) throws ApiException {
        okhttp3.Call localVarCall = searchApisAndDomainsValidateBeforeCall(specType, visibility, state, owner, query, page, limit, sort, order, null);
        Type localVarReturnType = new TypeToken<ApisJson>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Retrieve a list of currently defined APIs, domains, and templates in APIs.json format (asynchronously)
     * 
     * @param specType Type of definitions to search: * API - APIs only * DOMAIN - domains only * TEMPLATE - templates only * ANY - APIs, domains, and templates  (optional, default to ANY)
     * @param visibility The visibility of a definition in SwaggerHub: * PUBLIC - can be viewed by anyone * PRIVATE - can only be viewed by you or your organization and those that you are collaborating with or have shared it with * ANY - either PUBLIC or PRIVATE  (optional, default to ANY)
     * @param state Matches against published state of the spec: * UNPUBLISHED - spec is a draft, a work in progress * PUBLISHED - spec is a stable version ready for consuming from client applications * ANY - either PUBLISHED or UNPUBLISHED  (optional, default to ALL)
     * @param owner API or domain owner. Can be username or organization name. Case-sensitive. (optional)
     * @param query Free text query to match (optional)
     * @param page Page to return (optional, default to 0)
     * @param limit Number of results per page (1 .. 100) (optional, default to 10)
     * @param sort Sort criteria of result set: * NAME * UPDATED * CREATED * OWNER * BEST_MATCH - by relevance * TITLE - by &#x60;info.title&#x60;  (optional, default to NAME)
     * @param order Sort order (optional, default to ASC)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A list of APIs, domains, and templates in APIs.json format </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call searchApisAndDomainsAsync(String specType, String visibility, String state, String owner, String query, Integer page, Integer limit, String sort, String order, final ApiCallback<ApisJson> _callback) throws ApiException {

        okhttp3.Call localVarCall = searchApisAndDomainsValidateBeforeCall(specType, visibility, state, owner, query, page, limit, sort, order, _callback);
        Type localVarReturnType = new TypeToken<ApisJson>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for setApiCommentStatusV2
     * @param owner API owner (organization or user, case-sensitive) (required)
     * @param api API name (case-sensitive) (required)
     * @param version Version identifier (required)
     * @param comment Comment identifier (required)
     * @param status Comment status (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Comment status was updated </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Request body invalid </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Access token is not set or invalid </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> The comment feature is not available for the organization&#39;s plan, or the authenticating user does not have permission to complete this action </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The specified API or comment was not found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call setApiCommentStatusV2Call(String owner, String api, String version, String comment, String status, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/apis/{owner}/{api}/{version}/comments/{comment}/status/{status}"
            .replace("{" + "owner" + "}", localVarApiClient.escapeString(owner.toString()))
            .replace("{" + "api" + "}", localVarApiClient.escapeString(api.toString()))
            .replace("{" + "version" + "}", localVarApiClient.escapeString(version.toString()))
            .replace("{" + "comment" + "}", localVarApiClient.escapeString(comment.toString()))
            .replace("{" + "status" + "}", localVarApiClient.escapeString(status.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "TokenSecured" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call setApiCommentStatusV2ValidateBeforeCall(String owner, String api, String version, String comment, String status, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'owner' is set
        if (owner == null) {
            throw new ApiException("Missing the required parameter 'owner' when calling setApiCommentStatusV2(Async)");
        }

        // verify the required parameter 'api' is set
        if (api == null) {
            throw new ApiException("Missing the required parameter 'api' when calling setApiCommentStatusV2(Async)");
        }

        // verify the required parameter 'version' is set
        if (version == null) {
            throw new ApiException("Missing the required parameter 'version' when calling setApiCommentStatusV2(Async)");
        }

        // verify the required parameter 'comment' is set
        if (comment == null) {
            throw new ApiException("Missing the required parameter 'comment' when calling setApiCommentStatusV2(Async)");
        }

        // verify the required parameter 'status' is set
        if (status == null) {
            throw new ApiException("Missing the required parameter 'status' when calling setApiCommentStatusV2(Async)");
        }

        return setApiCommentStatusV2Call(owner, api, version, comment, status, _callback);

    }

    /**
     * Resolve or reopen a comment
     * 
     * @param owner API owner (organization or user, case-sensitive) (required)
     * @param api API name (case-sensitive) (required)
     * @param version Version identifier (required)
     * @param comment Comment identifier (required)
     * @param status Comment status (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Comment status was updated </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Request body invalid </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Access token is not set or invalid </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> The comment feature is not available for the organization&#39;s plan, or the authenticating user does not have permission to complete this action </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The specified API or comment was not found </td><td>  -  </td></tr>
     </table>
     */
    public void setApiCommentStatusV2(String owner, String api, String version, String comment, String status) throws ApiException {
        setApiCommentStatusV2WithHttpInfo(owner, api, version, comment, status);
    }

    /**
     * Resolve or reopen a comment
     * 
     * @param owner API owner (organization or user, case-sensitive) (required)
     * @param api API name (case-sensitive) (required)
     * @param version Version identifier (required)
     * @param comment Comment identifier (required)
     * @param status Comment status (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Comment status was updated </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Request body invalid </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Access token is not set or invalid </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> The comment feature is not available for the organization&#39;s plan, or the authenticating user does not have permission to complete this action </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The specified API or comment was not found </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> setApiCommentStatusV2WithHttpInfo(String owner, String api, String version, String comment, String status) throws ApiException {
        okhttp3.Call localVarCall = setApiCommentStatusV2ValidateBeforeCall(owner, api, version, comment, status, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Resolve or reopen a comment (asynchronously)
     * 
     * @param owner API owner (organization or user, case-sensitive) (required)
     * @param api API name (case-sensitive) (required)
     * @param version Version identifier (required)
     * @param comment Comment identifier (required)
     * @param status Comment status (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Comment status was updated </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Request body invalid </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Access token is not set or invalid </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> The comment feature is not available for the organization&#39;s plan, or the authenticating user does not have permission to complete this action </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The specified API or comment was not found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call setApiCommentStatusV2Async(String owner, String api, String version, String comment, String status, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = setApiCommentStatusV2ValidateBeforeCall(owner, api, version, comment, status, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for setApiDefaultVersion
     * @param owner API owner (organization or user, case-sensitive) (required)
     * @param api API name (case-sensitive) (required)
     * @param defaultVersion An object that specifies the default version for this API (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The default version was successfully changed </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Access token is not set or invalid </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Access denied (insufficient user permissions) </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The specified API or version was not found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call setApiDefaultVersionCall(String owner, String api, DefaultVersion defaultVersion, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = defaultVersion;

        // create path and map variables
        String localVarPath = "/apis/{owner}/{api}/settings/default"
            .replace("{" + "owner" + "}", localVarApiClient.escapeString(owner.toString()))
            .replace("{" + "api" + "}", localVarApiClient.escapeString(api.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "TokenSecured" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call setApiDefaultVersionValidateBeforeCall(String owner, String api, DefaultVersion defaultVersion, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'owner' is set
        if (owner == null) {
            throw new ApiException("Missing the required parameter 'owner' when calling setApiDefaultVersion(Async)");
        }

        // verify the required parameter 'api' is set
        if (api == null) {
            throw new ApiException("Missing the required parameter 'api' when calling setApiDefaultVersion(Async)");
        }

        // verify the required parameter 'defaultVersion' is set
        if (defaultVersion == null) {
            throw new ApiException("Missing the required parameter 'defaultVersion' when calling setApiDefaultVersion(Async)");
        }

        return setApiDefaultVersionCall(owner, api, defaultVersion, _callback);

    }

    /**
     * Set the default API version
     * 
     * @param owner API owner (organization or user, case-sensitive) (required)
     * @param api API name (case-sensitive) (required)
     * @param defaultVersion An object that specifies the default version for this API (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The default version was successfully changed </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Access token is not set or invalid </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Access denied (insufficient user permissions) </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The specified API or version was not found </td><td>  -  </td></tr>
     </table>
     */
    public void setApiDefaultVersion(String owner, String api, DefaultVersion defaultVersion) throws ApiException {
        setApiDefaultVersionWithHttpInfo(owner, api, defaultVersion);
    }

    /**
     * Set the default API version
     * 
     * @param owner API owner (organization or user, case-sensitive) (required)
     * @param api API name (case-sensitive) (required)
     * @param defaultVersion An object that specifies the default version for this API (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The default version was successfully changed </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Access token is not set or invalid </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Access denied (insufficient user permissions) </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The specified API or version was not found </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> setApiDefaultVersionWithHttpInfo(String owner, String api, DefaultVersion defaultVersion) throws ApiException {
        okhttp3.Call localVarCall = setApiDefaultVersionValidateBeforeCall(owner, api, defaultVersion, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Set the default API version (asynchronously)
     * 
     * @param owner API owner (organization or user, case-sensitive) (required)
     * @param api API name (case-sensitive) (required)
     * @param defaultVersion An object that specifies the default version for this API (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The default version was successfully changed </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Access token is not set or invalid </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Access denied (insufficient user permissions) </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The specified API or version was not found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call setApiDefaultVersionAsync(String owner, String api, DefaultVersion defaultVersion, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = setApiDefaultVersionValidateBeforeCall(owner, api, defaultVersion, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for setLifecycleSettings
     * @param owner API owner (organization or user, case-sensitive) (required)
     * @param api API name (case-sensitive) (required)
     * @param version Version identifier (required)
     * @param settings An object that specifies the new &#x60;published&#x60; state: &#x60;true&#x60; means published, &#x60;false&#x60; - unpublished (required)
     * @param force To publish an API that references _unpublished_ domains, this parameter must be &#x60;true&#x60;. Otherwise, the request will be rejected with status code 424. (optional, default to false)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successfully published or unpublished the API </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> The API definition contains [standardization](https://support.smartbear.com/swaggerhub/docs/organizations/api-standardization.html) errors which prevent it from being published. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Access token is not set or invalid </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Access denied (insufficient user permissions) </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The specified API or version was not found </td><td>  -  </td></tr>
        <tr><td> 424 </td><td> The API version you are trying to publish contains references to _unpublished_ domains. If those domains change, it may affect your API. To publish the API anyway, repeat the request with the &#x60;force&#x3D;true&#x60; query parameter.  The response body contains a list of unpublished domains referenced from this API. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call setLifecycleSettingsCall(String owner, String api, String version, LifecycleSettings settings, Boolean force, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = settings;

        // create path and map variables
        String localVarPath = "/apis/{owner}/{api}/{version}/settings/lifecycle"
            .replace("{" + "owner" + "}", localVarApiClient.escapeString(owner.toString()))
            .replace("{" + "api" + "}", localVarApiClient.escapeString(api.toString()))
            .replace("{" + "version" + "}", localVarApiClient.escapeString(version.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (force != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("force", force));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "TokenSecured" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call setLifecycleSettingsValidateBeforeCall(String owner, String api, String version, LifecycleSettings settings, Boolean force, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'owner' is set
        if (owner == null) {
            throw new ApiException("Missing the required parameter 'owner' when calling setLifecycleSettings(Async)");
        }

        // verify the required parameter 'api' is set
        if (api == null) {
            throw new ApiException("Missing the required parameter 'api' when calling setLifecycleSettings(Async)");
        }

        // verify the required parameter 'version' is set
        if (version == null) {
            throw new ApiException("Missing the required parameter 'version' when calling setLifecycleSettings(Async)");
        }

        // verify the required parameter 'settings' is set
        if (settings == null) {
            throw new ApiException("Missing the required parameter 'settings' when calling setLifecycleSettings(Async)");
        }

        return setLifecycleSettingsCall(owner, api, version, settings, force, _callback);

    }

    /**
     * Publish or unpublish an API version
     * 
     * @param owner API owner (organization or user, case-sensitive) (required)
     * @param api API name (case-sensitive) (required)
     * @param version Version identifier (required)
     * @param settings An object that specifies the new &#x60;published&#x60; state: &#x60;true&#x60; means published, &#x60;false&#x60; - unpublished (required)
     * @param force To publish an API that references _unpublished_ domains, this parameter must be &#x60;true&#x60;. Otherwise, the request will be rejected with status code 424. (optional, default to false)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successfully published or unpublished the API </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> The API definition contains [standardization](https://support.smartbear.com/swaggerhub/docs/organizations/api-standardization.html) errors which prevent it from being published. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Access token is not set or invalid </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Access denied (insufficient user permissions) </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The specified API or version was not found </td><td>  -  </td></tr>
        <tr><td> 424 </td><td> The API version you are trying to publish contains references to _unpublished_ domains. If those domains change, it may affect your API. To publish the API anyway, repeat the request with the &#x60;force&#x3D;true&#x60; query parameter.  The response body contains a list of unpublished domains referenced from this API. </td><td>  -  </td></tr>
     </table>
     */
    public void setLifecycleSettings(String owner, String api, String version, LifecycleSettings settings, Boolean force) throws ApiException {
        setLifecycleSettingsWithHttpInfo(owner, api, version, settings, force);
    }

    /**
     * Publish or unpublish an API version
     * 
     * @param owner API owner (organization or user, case-sensitive) (required)
     * @param api API name (case-sensitive) (required)
     * @param version Version identifier (required)
     * @param settings An object that specifies the new &#x60;published&#x60; state: &#x60;true&#x60; means published, &#x60;false&#x60; - unpublished (required)
     * @param force To publish an API that references _unpublished_ domains, this parameter must be &#x60;true&#x60;. Otherwise, the request will be rejected with status code 424. (optional, default to false)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successfully published or unpublished the API </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> The API definition contains [standardization](https://support.smartbear.com/swaggerhub/docs/organizations/api-standardization.html) errors which prevent it from being published. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Access token is not set or invalid </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Access denied (insufficient user permissions) </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The specified API or version was not found </td><td>  -  </td></tr>
        <tr><td> 424 </td><td> The API version you are trying to publish contains references to _unpublished_ domains. If those domains change, it may affect your API. To publish the API anyway, repeat the request with the &#x60;force&#x3D;true&#x60; query parameter.  The response body contains a list of unpublished domains referenced from this API. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> setLifecycleSettingsWithHttpInfo(String owner, String api, String version, LifecycleSettings settings, Boolean force) throws ApiException {
        okhttp3.Call localVarCall = setLifecycleSettingsValidateBeforeCall(owner, api, version, settings, force, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Publish or unpublish an API version (asynchronously)
     * 
     * @param owner API owner (organization or user, case-sensitive) (required)
     * @param api API name (case-sensitive) (required)
     * @param version Version identifier (required)
     * @param settings An object that specifies the new &#x60;published&#x60; state: &#x60;true&#x60; means published, &#x60;false&#x60; - unpublished (required)
     * @param force To publish an API that references _unpublished_ domains, this parameter must be &#x60;true&#x60;. Otherwise, the request will be rejected with status code 424. (optional, default to false)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successfully published or unpublished the API </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> The API definition contains [standardization](https://support.smartbear.com/swaggerhub/docs/organizations/api-standardization.html) errors which prevent it from being published. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Access token is not set or invalid </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Access denied (insufficient user permissions) </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The specified API or version was not found </td><td>  -  </td></tr>
        <tr><td> 424 </td><td> The API version you are trying to publish contains references to _unpublished_ domains. If those domains change, it may affect your API. To publish the API anyway, repeat the request with the &#x60;force&#x3D;true&#x60; query parameter.  The response body contains a list of unpublished domains referenced from this API. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call setLifecycleSettingsAsync(String owner, String api, String version, LifecycleSettings settings, Boolean force, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = setLifecycleSettingsValidateBeforeCall(owner, api, version, settings, force, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for setPrivateSettings
     * @param owner API owner (organization or user, case-sensitive) (required)
     * @param api API name (case-sensitive) (required)
     * @param version Version identifier (required)
     * @param settings An object that specifies the new visibility level: &#x60;true&#x60; means private, &#x60;false&#x60; - public (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> API visibility was updated </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Access token is not set or invalid </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Access denied (insufficient user permissions) </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The specified API or version was not found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call setPrivateSettingsCall(String owner, String api, String version, VisibilitySettings settings, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = settings;

        // create path and map variables
        String localVarPath = "/apis/{owner}/{api}/{version}/settings/private"
            .replace("{" + "owner" + "}", localVarApiClient.escapeString(owner.toString()))
            .replace("{" + "api" + "}", localVarApiClient.escapeString(api.toString()))
            .replace("{" + "version" + "}", localVarApiClient.escapeString(version.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "TokenSecured" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call setPrivateSettingsValidateBeforeCall(String owner, String api, String version, VisibilitySettings settings, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'owner' is set
        if (owner == null) {
            throw new ApiException("Missing the required parameter 'owner' when calling setPrivateSettings(Async)");
        }

        // verify the required parameter 'api' is set
        if (api == null) {
            throw new ApiException("Missing the required parameter 'api' when calling setPrivateSettings(Async)");
        }

        // verify the required parameter 'version' is set
        if (version == null) {
            throw new ApiException("Missing the required parameter 'version' when calling setPrivateSettings(Async)");
        }

        // verify the required parameter 'settings' is set
        if (settings == null) {
            throw new ApiException("Missing the required parameter 'settings' when calling setPrivateSettings(Async)");
        }

        return setPrivateSettingsCall(owner, api, version, settings, _callback);

    }

    /**
     * Set the visibility (public or private) of an API version
     * 
     * @param owner API owner (organization or user, case-sensitive) (required)
     * @param api API name (case-sensitive) (required)
     * @param version Version identifier (required)
     * @param settings An object that specifies the new visibility level: &#x60;true&#x60; means private, &#x60;false&#x60; - public (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> API visibility was updated </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Access token is not set or invalid </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Access denied (insufficient user permissions) </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The specified API or version was not found </td><td>  -  </td></tr>
     </table>
     */
    public void setPrivateSettings(String owner, String api, String version, VisibilitySettings settings) throws ApiException {
        setPrivateSettingsWithHttpInfo(owner, api, version, settings);
    }

    /**
     * Set the visibility (public or private) of an API version
     * 
     * @param owner API owner (organization or user, case-sensitive) (required)
     * @param api API name (case-sensitive) (required)
     * @param version Version identifier (required)
     * @param settings An object that specifies the new visibility level: &#x60;true&#x60; means private, &#x60;false&#x60; - public (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> API visibility was updated </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Access token is not set or invalid </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Access denied (insufficient user permissions) </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The specified API or version was not found </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> setPrivateSettingsWithHttpInfo(String owner, String api, String version, VisibilitySettings settings) throws ApiException {
        okhttp3.Call localVarCall = setPrivateSettingsValidateBeforeCall(owner, api, version, settings, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Set the visibility (public or private) of an API version (asynchronously)
     * 
     * @param owner API owner (organization or user, case-sensitive) (required)
     * @param api API name (case-sensitive) (required)
     * @param version Version identifier (required)
     * @param settings An object that specifies the new visibility level: &#x60;true&#x60; means private, &#x60;false&#x60; - public (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> API visibility was updated </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Access token is not set or invalid </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Access denied (insufficient user permissions) </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The specified API or version was not found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call setPrivateSettingsAsync(String owner, String api, String version, VisibilitySettings settings, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = setPrivateSettingsValidateBeforeCall(owner, api, version, settings, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for updateApiCommentReplyV2
     * @param owner API owner (organization or user, case-sensitive) (required)
     * @param api API name (case-sensitive) (required)
     * @param version Version identifier (required)
     * @param comment Comment identifier (required)
     * @param reply Reply identifier (required)
     * @param body  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Сomment reply was updated </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Request body invalid </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Access token is not set or invalid </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> The comment feature is not available for the organization&#39;s plan, or the authenticating user does not have permission to complete this action </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The specified API, comment, or reply was not found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateApiCommentReplyV2Call(String owner, String api, String version, String comment, String reply, CommentPatch body, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = body;

        // create path and map variables
        String localVarPath = "/apis/{owner}/{api}/{version}/comments/{comment}/replies/{reply}"
            .replace("{" + "owner" + "}", localVarApiClient.escapeString(owner.toString()))
            .replace("{" + "api" + "}", localVarApiClient.escapeString(api.toString()))
            .replace("{" + "version" + "}", localVarApiClient.escapeString(version.toString()))
            .replace("{" + "comment" + "}", localVarApiClient.escapeString(comment.toString()))
            .replace("{" + "reply" + "}", localVarApiClient.escapeString(reply.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "TokenSecured" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PATCH", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call updateApiCommentReplyV2ValidateBeforeCall(String owner, String api, String version, String comment, String reply, CommentPatch body, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'owner' is set
        if (owner == null) {
            throw new ApiException("Missing the required parameter 'owner' when calling updateApiCommentReplyV2(Async)");
        }

        // verify the required parameter 'api' is set
        if (api == null) {
            throw new ApiException("Missing the required parameter 'api' when calling updateApiCommentReplyV2(Async)");
        }

        // verify the required parameter 'version' is set
        if (version == null) {
            throw new ApiException("Missing the required parameter 'version' when calling updateApiCommentReplyV2(Async)");
        }

        // verify the required parameter 'comment' is set
        if (comment == null) {
            throw new ApiException("Missing the required parameter 'comment' when calling updateApiCommentReplyV2(Async)");
        }

        // verify the required parameter 'reply' is set
        if (reply == null) {
            throw new ApiException("Missing the required parameter 'reply' when calling updateApiCommentReplyV2(Async)");
        }

        return updateApiCommentReplyV2Call(owner, api, version, comment, reply, body, _callback);

    }

    /**
     * Update a comment reply
     * 
     * @param owner API owner (organization or user, case-sensitive) (required)
     * @param api API name (case-sensitive) (required)
     * @param version Version identifier (required)
     * @param comment Comment identifier (required)
     * @param reply Reply identifier (required)
     * @param body  (optional)
     * @return Comment
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Сomment reply was updated </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Request body invalid </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Access token is not set or invalid </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> The comment feature is not available for the organization&#39;s plan, or the authenticating user does not have permission to complete this action </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The specified API, comment, or reply was not found </td><td>  -  </td></tr>
     </table>
     */
    public Comment updateApiCommentReplyV2(String owner, String api, String version, String comment, String reply, CommentPatch body) throws ApiException {
        ApiResponse<Comment> localVarResp = updateApiCommentReplyV2WithHttpInfo(owner, api, version, comment, reply, body);
        return localVarResp.getData();
    }

    /**
     * Update a comment reply
     * 
     * @param owner API owner (organization or user, case-sensitive) (required)
     * @param api API name (case-sensitive) (required)
     * @param version Version identifier (required)
     * @param comment Comment identifier (required)
     * @param reply Reply identifier (required)
     * @param body  (optional)
     * @return ApiResponse&lt;Comment&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Сomment reply was updated </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Request body invalid </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Access token is not set or invalid </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> The comment feature is not available for the organization&#39;s plan, or the authenticating user does not have permission to complete this action </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The specified API, comment, or reply was not found </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Comment> updateApiCommentReplyV2WithHttpInfo(String owner, String api, String version, String comment, String reply, CommentPatch body) throws ApiException {
        okhttp3.Call localVarCall = updateApiCommentReplyV2ValidateBeforeCall(owner, api, version, comment, reply, body, null);
        Type localVarReturnType = new TypeToken<Comment>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Update a comment reply (asynchronously)
     * 
     * @param owner API owner (organization or user, case-sensitive) (required)
     * @param api API name (case-sensitive) (required)
     * @param version Version identifier (required)
     * @param comment Comment identifier (required)
     * @param reply Reply identifier (required)
     * @param body  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Сomment reply was updated </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Request body invalid </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Access token is not set or invalid </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> The comment feature is not available for the organization&#39;s plan, or the authenticating user does not have permission to complete this action </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The specified API, comment, or reply was not found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateApiCommentReplyV2Async(String owner, String api, String version, String comment, String reply, CommentPatch body, final ApiCallback<Comment> _callback) throws ApiException {

        okhttp3.Call localVarCall = updateApiCommentReplyV2ValidateBeforeCall(owner, api, version, comment, reply, body, _callback);
        Type localVarReturnType = new TypeToken<Comment>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for updateApiCommentV2
     * @param owner API owner (organization or user, case-sensitive) (required)
     * @param api API name (case-sensitive) (required)
     * @param version Version identifier (required)
     * @param comment Comment identifier (required)
     * @param body  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Comment was updated </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Request body invalid </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Access token is not set or invalid </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> The comment feature is not available for the organization&#39;s plan, or the authenticating user does not have permission to complete this action </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The specified API or comment was not found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateApiCommentV2Call(String owner, String api, String version, String comment, ClosableCommentPatch body, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = body;

        // create path and map variables
        String localVarPath = "/apis/{owner}/{api}/{version}/comments/{comment}"
            .replace("{" + "owner" + "}", localVarApiClient.escapeString(owner.toString()))
            .replace("{" + "api" + "}", localVarApiClient.escapeString(api.toString()))
            .replace("{" + "version" + "}", localVarApiClient.escapeString(version.toString()))
            .replace("{" + "comment" + "}", localVarApiClient.escapeString(comment.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "TokenSecured" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PATCH", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call updateApiCommentV2ValidateBeforeCall(String owner, String api, String version, String comment, ClosableCommentPatch body, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'owner' is set
        if (owner == null) {
            throw new ApiException("Missing the required parameter 'owner' when calling updateApiCommentV2(Async)");
        }

        // verify the required parameter 'api' is set
        if (api == null) {
            throw new ApiException("Missing the required parameter 'api' when calling updateApiCommentV2(Async)");
        }

        // verify the required parameter 'version' is set
        if (version == null) {
            throw new ApiException("Missing the required parameter 'version' when calling updateApiCommentV2(Async)");
        }

        // verify the required parameter 'comment' is set
        if (comment == null) {
            throw new ApiException("Missing the required parameter 'comment' when calling updateApiCommentV2(Async)");
        }

        return updateApiCommentV2Call(owner, api, version, comment, body, _callback);

    }

    /**
     * Update a comment
     * 
     * @param owner API owner (organization or user, case-sensitive) (required)
     * @param api API name (case-sensitive) (required)
     * @param version Version identifier (required)
     * @param comment Comment identifier (required)
     * @param body  (optional)
     * @return ClosableComment
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Comment was updated </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Request body invalid </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Access token is not set or invalid </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> The comment feature is not available for the organization&#39;s plan, or the authenticating user does not have permission to complete this action </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The specified API or comment was not found </td><td>  -  </td></tr>
     </table>
     */
    public ClosableComment updateApiCommentV2(String owner, String api, String version, String comment, ClosableCommentPatch body) throws ApiException {
        ApiResponse<ClosableComment> localVarResp = updateApiCommentV2WithHttpInfo(owner, api, version, comment, body);
        return localVarResp.getData();
    }

    /**
     * Update a comment
     * 
     * @param owner API owner (organization or user, case-sensitive) (required)
     * @param api API name (case-sensitive) (required)
     * @param version Version identifier (required)
     * @param comment Comment identifier (required)
     * @param body  (optional)
     * @return ApiResponse&lt;ClosableComment&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Comment was updated </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Request body invalid </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Access token is not set or invalid </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> The comment feature is not available for the organization&#39;s plan, or the authenticating user does not have permission to complete this action </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The specified API or comment was not found </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ClosableComment> updateApiCommentV2WithHttpInfo(String owner, String api, String version, String comment, ClosableCommentPatch body) throws ApiException {
        okhttp3.Call localVarCall = updateApiCommentV2ValidateBeforeCall(owner, api, version, comment, body, null);
        Type localVarReturnType = new TypeToken<ClosableComment>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Update a comment (asynchronously)
     * 
     * @param owner API owner (organization or user, case-sensitive) (required)
     * @param api API name (case-sensitive) (required)
     * @param version Version identifier (required)
     * @param comment Comment identifier (required)
     * @param body  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Comment was updated </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Request body invalid </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Access token is not set or invalid </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> The comment feature is not available for the organization&#39;s plan, or the authenticating user does not have permission to complete this action </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The specified API or comment was not found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateApiCommentV2Async(String owner, String api, String version, String comment, ClosableCommentPatch body, final ApiCallback<ClosableComment> _callback) throws ApiException {

        okhttp3.Call localVarCall = updateApiCommentV2ValidateBeforeCall(owner, api, version, comment, body, _callback);
        Type localVarReturnType = new TypeToken<ClosableComment>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for updateApiCommentsV2
     * @param owner API owner (organization or user, case-sensitive) (required)
     * @param api API name (case-sensitive) (required)
     * @param version Version identifier (required)
     * @param body  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Comments were updated </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Request body invalid </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Access token is not set or invalid </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> The comment feature is not available for the organization&#39;s plan, or the authenticating user does not have permission to complete this action </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The specified API, comment, or reply was not found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateApiCommentsV2Call(String owner, String api, String version, CommentsBatch body, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = body;

        // create path and map variables
        String localVarPath = "/apis/{owner}/{api}/{version}/comments/batch"
            .replace("{" + "owner" + "}", localVarApiClient.escapeString(owner.toString()))
            .replace("{" + "api" + "}", localVarApiClient.escapeString(api.toString()))
            .replace("{" + "version" + "}", localVarApiClient.escapeString(version.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "TokenSecured" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call updateApiCommentsV2ValidateBeforeCall(String owner, String api, String version, CommentsBatch body, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'owner' is set
        if (owner == null) {
            throw new ApiException("Missing the required parameter 'owner' when calling updateApiCommentsV2(Async)");
        }

        // verify the required parameter 'api' is set
        if (api == null) {
            throw new ApiException("Missing the required parameter 'api' when calling updateApiCommentsV2(Async)");
        }

        // verify the required parameter 'version' is set
        if (version == null) {
            throw new ApiException("Missing the required parameter 'version' when calling updateApiCommentsV2(Async)");
        }

        // verify the required parameter 'body' is set
        if (body == null) {
            throw new ApiException("Missing the required parameter 'body' when calling updateApiCommentsV2(Async)");
        }

        return updateApiCommentsV2Call(owner, api, version, body, _callback);

    }

    /**
     * Bulk update comments
     * 
     * @param owner API owner (organization or user, case-sensitive) (required)
     * @param api API name (case-sensitive) (required)
     * @param version Version identifier (required)
     * @param body  (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Comments were updated </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Request body invalid </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Access token is not set or invalid </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> The comment feature is not available for the organization&#39;s plan, or the authenticating user does not have permission to complete this action </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The specified API, comment, or reply was not found </td><td>  -  </td></tr>
     </table>
     */
    public void updateApiCommentsV2(String owner, String api, String version, CommentsBatch body) throws ApiException {
        updateApiCommentsV2WithHttpInfo(owner, api, version, body);
    }

    /**
     * Bulk update comments
     * 
     * @param owner API owner (organization or user, case-sensitive) (required)
     * @param api API name (case-sensitive) (required)
     * @param version Version identifier (required)
     * @param body  (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Comments were updated </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Request body invalid </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Access token is not set or invalid </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> The comment feature is not available for the organization&#39;s plan, or the authenticating user does not have permission to complete this action </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The specified API, comment, or reply was not found </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> updateApiCommentsV2WithHttpInfo(String owner, String api, String version, CommentsBatch body) throws ApiException {
        okhttp3.Call localVarCall = updateApiCommentsV2ValidateBeforeCall(owner, api, version, body, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Bulk update comments (asynchronously)
     * 
     * @param owner API owner (organization or user, case-sensitive) (required)
     * @param api API name (case-sensitive) (required)
     * @param version Version identifier (required)
     * @param body  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Comments were updated </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Request body invalid </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Access token is not set or invalid </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> The comment feature is not available for the organization&#39;s plan, or the authenticating user does not have permission to complete this action </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The specified API, comment, or reply was not found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateApiCommentsV2Async(String owner, String api, String version, CommentsBatch body, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = updateApiCommentsV2ValidateBeforeCall(owner, api, version, body, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
}
