/*
 * SwaggerHub Registry API
 * # Overview Use SwaggerHub Registry API to access, manage, and update the following resources in SwaggerHub, bypassing the web interface:   * APIs   * Domains   * Integrations   * Projects   * Templates   SwaggerHub also provides the [User Management API](https://app.swaggerhub.com/apis-docs/swagger-hub/user-management-api/) to get information about organizations and manage organization members.  # Base URL Use the following base URL for SwaggerHub SaaS:          http(s)://api.swaggerhub.com  **Note:** This documentation is for SwaggerHub SaaS. On-Premise customers should use the bundled API definition, which can be found at the URLs provided below.  Version 1.29.0 or later:      http(s)://SERVER/v1/openapi.yaml - YAML version     http(s)://SERVER/v1/openapi.json - JSON version  Earlier versions:      http(s)://SERVER/v1/swagger.yaml - YAML version     http(s)://SERVER/v1/swagger.json - JSON version  # Authentication Operations that update data or access private data require authentication using an API key. You can find your personal API key on the [API Keys](https://app.swaggerhub.com/settings/apiKey) page in your account settings. Send this key in the `Authorization` header when making requests to the Registry API:      Authorization: YOUR_API_KEY  To test API calls from this documentation page, click the **Authorize** button below and paste your API key there.  **Important:** Keep the API key secure and do not store it directly in your code. # Tools In addition to calling the Registry API directly, you can use the following tools to interact with the API from the command line or CI/CD pipeline:   * [SwaggerHub CLI](https://www.npmjs.com/package/swaggerhub-cli)   * [Maven plugin](https://github.com/swagger-api/swaggerhub-maven-plugin)  * [Gradle plugin](https://github.com/swagger-api/swaggerhub-gradle-plugin) 
 *
 * The version of the OpenAPI document: 1.0.66
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiCallback;
import org.openapitools.client.ApiClient;
import org.openapitools.client.ApiException;
import org.openapitools.client.ApiResponse;
import org.openapitools.client.Configuration;
import org.openapitools.client.Pair;
import org.openapitools.client.ProgressRequestBody;
import org.openapitools.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import org.openapitools.client.model.IntegrationConfiguration;
import org.openapitools.client.model.IntegrationConfigurations;
import java.util.UUID;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class IntegrationsApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public IntegrationsApi() {
        this(Configuration.getDefaultApiClient());
    }

    public IntegrationsApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for createIntegration
     * @param owner API owner (organization or user, case-sensitive) (required)
     * @param api API name (case-sensitive) (required)
     * @param version Version identifier (required)
     * @param integrationTypeConfiguration Can be one of the following objects:  | &#x60;configType&#x60; value        | Object | | ------------------------- | ------ | | AMAZON_API_GATEWAY        | AmazonApiGatewayIntegration | | AMAZON_API_GATEWAY_LAMBDA | AmazonApiGatewayLambdaIntegration | | API_AUTO_MOCKING          | AutoMockingIntegration | | APIGEE_EDGE               | ApigeeEdgeIntegration | | AZURE_API_MANAGEMENT      | AzureApiManagementIntegration | | AZURE_DEVOPS_SERVICES     | AzureDevopsServicesIntegration | | BITBUCKET_CLOUD           | BitbucketCloudIntegration | | BITBUCKET_SERVER          | BitbucketServerIntegration | | GITHUB                    | GitHubIntegration | | GITHUB_ENTERPRISE         | GitHubEnterpriseIntegration | | GITLAB                    | GitLabIntegration | | IBM_API_CONNECT           | IBMApiConnectIntegration | | WEBHOOK                   | WebhookIntegration |  For more examples, see the JSON files in this repository: https://github.com/SmartBear/swaggerhub-cli/tree/master/examples/integrations (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> The integration was successfully created. The response contains the auto-generated ID of the created integration and its confguration (excluding the access tokens and passwords). </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> The integration configuration was invalid </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Access token is not set or invalid </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> The authenticating user does not have permissions to create integrations in this API </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The specified owner, API, or version was not found </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> An integration with this name already exists in this API </td><td>  -  </td></tr>
        <tr><td> 415 </td><td> Invalid content type </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call createIntegrationCall(String owner, String api, String version, Object integrationTypeConfiguration, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = integrationTypeConfiguration;

        // create path and map variables
        String localVarPath = "/apis/{owner}/{api}/{version}/integrations"
            .replace("{" + "owner" + "}", localVarApiClient.escapeString(owner.toString()))
            .replace("{" + "api" + "}", localVarApiClient.escapeString(api.toString()))
            .replace("{" + "version" + "}", localVarApiClient.escapeString(version.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "TokenSecured" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call createIntegrationValidateBeforeCall(String owner, String api, String version, Object integrationTypeConfiguration, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'owner' is set
        if (owner == null) {
            throw new ApiException("Missing the required parameter 'owner' when calling createIntegration(Async)");
        }

        // verify the required parameter 'api' is set
        if (api == null) {
            throw new ApiException("Missing the required parameter 'api' when calling createIntegration(Async)");
        }

        // verify the required parameter 'version' is set
        if (version == null) {
            throw new ApiException("Missing the required parameter 'version' when calling createIntegration(Async)");
        }

        // verify the required parameter 'integrationTypeConfiguration' is set
        if (integrationTypeConfiguration == null) {
            throw new ApiException("Missing the required parameter 'integrationTypeConfiguration' when calling createIntegration(Async)");
        }

        return createIntegrationCall(owner, api, version, integrationTypeConfiguration, _callback);

    }

    /**
     * Create an integration for the specified API and version
     * Use this operation to configure an integration for a specific API version. The integration type is determined by which object is provided in the request body (specifically, by the &#x60;configType&#x60; value).  For a list of fields that need to be provided in the request body, see the descriptions of the following objects in the \&quot;Models\&quot; section at the bottom of API docs:   * &#x60;AmazonApiGatewayIntegration&#x60;  * &#x60;AmazonApiGatewayLambdaIntegration&#x60;  * &#x60;ApigeeEdgeIntegration&#x60;  * &#x60;AutoMockingIntegration&#x60;  * &#x60;AzureApiManagementIntegration&#x60;  * &#x60;AzureDevopsServicesIntegration&#x60;  * &#x60;BitbucketCloudIntegration&#x60;  * &#x60;BitbucketServerIntegration&#x60;  * &#x60;GitHubIntegration&#x60;  * &#x60;GitHubEnterpriseIntegration&#x60;  * &#x60;GitLabIntegration&#x60;  * &#x60;IBMApiConnectIntegration&#x60;  * &#x60;WebhookIntegration&#x60;  **Notes:**   * The integration &#x60;name&#x60; must be unique among all integrations configured for the given API version.   * If &#x60;target&#x60; is the YAMl/JSON definition, you must specify the &#x60;outputFile&#x60;.   * If &#x60;syncMethod&#x60;&#x3D;_Advanced Sync_, you must specify a non-empty list of either &#x60;providedPaths&#x60; or &#x60;managedPaths&#x60; (or both). If you are not sure which paths to use, use &#x60;providedPaths&#x60;&#x3D;&#x60;[\&quot;*\&quot;]&#x60;.   * The operation does not validate the repository details and access tokens.
     * @param owner API owner (organization or user, case-sensitive) (required)
     * @param api API name (case-sensitive) (required)
     * @param version Version identifier (required)
     * @param integrationTypeConfiguration Can be one of the following objects:  | &#x60;configType&#x60; value        | Object | | ------------------------- | ------ | | AMAZON_API_GATEWAY        | AmazonApiGatewayIntegration | | AMAZON_API_GATEWAY_LAMBDA | AmazonApiGatewayLambdaIntegration | | API_AUTO_MOCKING          | AutoMockingIntegration | | APIGEE_EDGE               | ApigeeEdgeIntegration | | AZURE_API_MANAGEMENT      | AzureApiManagementIntegration | | AZURE_DEVOPS_SERVICES     | AzureDevopsServicesIntegration | | BITBUCKET_CLOUD           | BitbucketCloudIntegration | | BITBUCKET_SERVER          | BitbucketServerIntegration | | GITHUB                    | GitHubIntegration | | GITHUB_ENTERPRISE         | GitHubEnterpriseIntegration | | GITLAB                    | GitLabIntegration | | IBM_API_CONNECT           | IBMApiConnectIntegration | | WEBHOOK                   | WebhookIntegration |  For more examples, see the JSON files in this repository: https://github.com/SmartBear/swaggerhub-cli/tree/master/examples/integrations (required)
     * @return IntegrationConfiguration
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> The integration was successfully created. The response contains the auto-generated ID of the created integration and its confguration (excluding the access tokens and passwords). </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> The integration configuration was invalid </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Access token is not set or invalid </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> The authenticating user does not have permissions to create integrations in this API </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The specified owner, API, or version was not found </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> An integration with this name already exists in this API </td><td>  -  </td></tr>
        <tr><td> 415 </td><td> Invalid content type </td><td>  -  </td></tr>
     </table>
     */
    public IntegrationConfiguration createIntegration(String owner, String api, String version, Object integrationTypeConfiguration) throws ApiException {
        ApiResponse<IntegrationConfiguration> localVarResp = createIntegrationWithHttpInfo(owner, api, version, integrationTypeConfiguration);
        return localVarResp.getData();
    }

    /**
     * Create an integration for the specified API and version
     * Use this operation to configure an integration for a specific API version. The integration type is determined by which object is provided in the request body (specifically, by the &#x60;configType&#x60; value).  For a list of fields that need to be provided in the request body, see the descriptions of the following objects in the \&quot;Models\&quot; section at the bottom of API docs:   * &#x60;AmazonApiGatewayIntegration&#x60;  * &#x60;AmazonApiGatewayLambdaIntegration&#x60;  * &#x60;ApigeeEdgeIntegration&#x60;  * &#x60;AutoMockingIntegration&#x60;  * &#x60;AzureApiManagementIntegration&#x60;  * &#x60;AzureDevopsServicesIntegration&#x60;  * &#x60;BitbucketCloudIntegration&#x60;  * &#x60;BitbucketServerIntegration&#x60;  * &#x60;GitHubIntegration&#x60;  * &#x60;GitHubEnterpriseIntegration&#x60;  * &#x60;GitLabIntegration&#x60;  * &#x60;IBMApiConnectIntegration&#x60;  * &#x60;WebhookIntegration&#x60;  **Notes:**   * The integration &#x60;name&#x60; must be unique among all integrations configured for the given API version.   * If &#x60;target&#x60; is the YAMl/JSON definition, you must specify the &#x60;outputFile&#x60;.   * If &#x60;syncMethod&#x60;&#x3D;_Advanced Sync_, you must specify a non-empty list of either &#x60;providedPaths&#x60; or &#x60;managedPaths&#x60; (or both). If you are not sure which paths to use, use &#x60;providedPaths&#x60;&#x3D;&#x60;[\&quot;*\&quot;]&#x60;.   * The operation does not validate the repository details and access tokens.
     * @param owner API owner (organization or user, case-sensitive) (required)
     * @param api API name (case-sensitive) (required)
     * @param version Version identifier (required)
     * @param integrationTypeConfiguration Can be one of the following objects:  | &#x60;configType&#x60; value        | Object | | ------------------------- | ------ | | AMAZON_API_GATEWAY        | AmazonApiGatewayIntegration | | AMAZON_API_GATEWAY_LAMBDA | AmazonApiGatewayLambdaIntegration | | API_AUTO_MOCKING          | AutoMockingIntegration | | APIGEE_EDGE               | ApigeeEdgeIntegration | | AZURE_API_MANAGEMENT      | AzureApiManagementIntegration | | AZURE_DEVOPS_SERVICES     | AzureDevopsServicesIntegration | | BITBUCKET_CLOUD           | BitbucketCloudIntegration | | BITBUCKET_SERVER          | BitbucketServerIntegration | | GITHUB                    | GitHubIntegration | | GITHUB_ENTERPRISE         | GitHubEnterpriseIntegration | | GITLAB                    | GitLabIntegration | | IBM_API_CONNECT           | IBMApiConnectIntegration | | WEBHOOK                   | WebhookIntegration |  For more examples, see the JSON files in this repository: https://github.com/SmartBear/swaggerhub-cli/tree/master/examples/integrations (required)
     * @return ApiResponse&lt;IntegrationConfiguration&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> The integration was successfully created. The response contains the auto-generated ID of the created integration and its confguration (excluding the access tokens and passwords). </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> The integration configuration was invalid </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Access token is not set or invalid </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> The authenticating user does not have permissions to create integrations in this API </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The specified owner, API, or version was not found </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> An integration with this name already exists in this API </td><td>  -  </td></tr>
        <tr><td> 415 </td><td> Invalid content type </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<IntegrationConfiguration> createIntegrationWithHttpInfo(String owner, String api, String version, Object integrationTypeConfiguration) throws ApiException {
        okhttp3.Call localVarCall = createIntegrationValidateBeforeCall(owner, api, version, integrationTypeConfiguration, null);
        Type localVarReturnType = new TypeToken<IntegrationConfiguration>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Create an integration for the specified API and version (asynchronously)
     * Use this operation to configure an integration for a specific API version. The integration type is determined by which object is provided in the request body (specifically, by the &#x60;configType&#x60; value).  For a list of fields that need to be provided in the request body, see the descriptions of the following objects in the \&quot;Models\&quot; section at the bottom of API docs:   * &#x60;AmazonApiGatewayIntegration&#x60;  * &#x60;AmazonApiGatewayLambdaIntegration&#x60;  * &#x60;ApigeeEdgeIntegration&#x60;  * &#x60;AutoMockingIntegration&#x60;  * &#x60;AzureApiManagementIntegration&#x60;  * &#x60;AzureDevopsServicesIntegration&#x60;  * &#x60;BitbucketCloudIntegration&#x60;  * &#x60;BitbucketServerIntegration&#x60;  * &#x60;GitHubIntegration&#x60;  * &#x60;GitHubEnterpriseIntegration&#x60;  * &#x60;GitLabIntegration&#x60;  * &#x60;IBMApiConnectIntegration&#x60;  * &#x60;WebhookIntegration&#x60;  **Notes:**   * The integration &#x60;name&#x60; must be unique among all integrations configured for the given API version.   * If &#x60;target&#x60; is the YAMl/JSON definition, you must specify the &#x60;outputFile&#x60;.   * If &#x60;syncMethod&#x60;&#x3D;_Advanced Sync_, you must specify a non-empty list of either &#x60;providedPaths&#x60; or &#x60;managedPaths&#x60; (or both). If you are not sure which paths to use, use &#x60;providedPaths&#x60;&#x3D;&#x60;[\&quot;*\&quot;]&#x60;.   * The operation does not validate the repository details and access tokens.
     * @param owner API owner (organization or user, case-sensitive) (required)
     * @param api API name (case-sensitive) (required)
     * @param version Version identifier (required)
     * @param integrationTypeConfiguration Can be one of the following objects:  | &#x60;configType&#x60; value        | Object | | ------------------------- | ------ | | AMAZON_API_GATEWAY        | AmazonApiGatewayIntegration | | AMAZON_API_GATEWAY_LAMBDA | AmazonApiGatewayLambdaIntegration | | API_AUTO_MOCKING          | AutoMockingIntegration | | APIGEE_EDGE               | ApigeeEdgeIntegration | | AZURE_API_MANAGEMENT      | AzureApiManagementIntegration | | AZURE_DEVOPS_SERVICES     | AzureDevopsServicesIntegration | | BITBUCKET_CLOUD           | BitbucketCloudIntegration | | BITBUCKET_SERVER          | BitbucketServerIntegration | | GITHUB                    | GitHubIntegration | | GITHUB_ENTERPRISE         | GitHubEnterpriseIntegration | | GITLAB                    | GitLabIntegration | | IBM_API_CONNECT           | IBMApiConnectIntegration | | WEBHOOK                   | WebhookIntegration |  For more examples, see the JSON files in this repository: https://github.com/SmartBear/swaggerhub-cli/tree/master/examples/integrations (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> The integration was successfully created. The response contains the auto-generated ID of the created integration and its confguration (excluding the access tokens and passwords). </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> The integration configuration was invalid </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Access token is not set or invalid </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> The authenticating user does not have permissions to create integrations in this API </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The specified owner, API, or version was not found </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> An integration with this name already exists in this API </td><td>  -  </td></tr>
        <tr><td> 415 </td><td> Invalid content type </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call createIntegrationAsync(String owner, String api, String version, Object integrationTypeConfiguration, final ApiCallback<IntegrationConfiguration> _callback) throws ApiException {

        okhttp3.Call localVarCall = createIntegrationValidateBeforeCall(owner, api, version, integrationTypeConfiguration, _callback);
        Type localVarReturnType = new TypeToken<IntegrationConfiguration>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for deleteIntegration
     * @param owner API owner (organization or user, case-sensitive) (required)
     * @param api API name (case-sensitive) (required)
     * @param version Version identifier (required)
     * @param integrationId Integration ID (case-sensitive). To get the available integration IDs, use &#x60;GET /apis/{owner}/{api}/{version}/integrations&#x60; (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> The integration was successfully deleted </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Access token is not set or invalid </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> The authenticating user does not have permissions to delete integrations from this API </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The specified owner, API, version, or integration ID was not found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteIntegrationCall(String owner, String api, String version, UUID integrationId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/apis/{owner}/{api}/{version}/integrations/{integrationId}"
            .replace("{" + "owner" + "}", localVarApiClient.escapeString(owner.toString()))
            .replace("{" + "api" + "}", localVarApiClient.escapeString(api.toString()))
            .replace("{" + "version" + "}", localVarApiClient.escapeString(version.toString()))
            .replace("{" + "integrationId" + "}", localVarApiClient.escapeString(integrationId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "TokenSecured" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call deleteIntegrationValidateBeforeCall(String owner, String api, String version, UUID integrationId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'owner' is set
        if (owner == null) {
            throw new ApiException("Missing the required parameter 'owner' when calling deleteIntegration(Async)");
        }

        // verify the required parameter 'api' is set
        if (api == null) {
            throw new ApiException("Missing the required parameter 'api' when calling deleteIntegration(Async)");
        }

        // verify the required parameter 'version' is set
        if (version == null) {
            throw new ApiException("Missing the required parameter 'version' when calling deleteIntegration(Async)");
        }

        // verify the required parameter 'integrationId' is set
        if (integrationId == null) {
            throw new ApiException("Missing the required parameter 'integrationId' when calling deleteIntegration(Async)");
        }

        return deleteIntegrationCall(owner, api, version, integrationId, _callback);

    }

    /**
     * Delete an integration
     * Delete an existing integration specified by its ID.
     * @param owner API owner (organization or user, case-sensitive) (required)
     * @param api API name (case-sensitive) (required)
     * @param version Version identifier (required)
     * @param integrationId Integration ID (case-sensitive). To get the available integration IDs, use &#x60;GET /apis/{owner}/{api}/{version}/integrations&#x60; (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> The integration was successfully deleted </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Access token is not set or invalid </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> The authenticating user does not have permissions to delete integrations from this API </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The specified owner, API, version, or integration ID was not found </td><td>  -  </td></tr>
     </table>
     */
    public void deleteIntegration(String owner, String api, String version, UUID integrationId) throws ApiException {
        deleteIntegrationWithHttpInfo(owner, api, version, integrationId);
    }

    /**
     * Delete an integration
     * Delete an existing integration specified by its ID.
     * @param owner API owner (organization or user, case-sensitive) (required)
     * @param api API name (case-sensitive) (required)
     * @param version Version identifier (required)
     * @param integrationId Integration ID (case-sensitive). To get the available integration IDs, use &#x60;GET /apis/{owner}/{api}/{version}/integrations&#x60; (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> The integration was successfully deleted </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Access token is not set or invalid </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> The authenticating user does not have permissions to delete integrations from this API </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The specified owner, API, version, or integration ID was not found </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> deleteIntegrationWithHttpInfo(String owner, String api, String version, UUID integrationId) throws ApiException {
        okhttp3.Call localVarCall = deleteIntegrationValidateBeforeCall(owner, api, version, integrationId, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Delete an integration (asynchronously)
     * Delete an existing integration specified by its ID.
     * @param owner API owner (organization or user, case-sensitive) (required)
     * @param api API name (case-sensitive) (required)
     * @param version Version identifier (required)
     * @param integrationId Integration ID (case-sensitive). To get the available integration IDs, use &#x60;GET /apis/{owner}/{api}/{version}/integrations&#x60; (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> The integration was successfully deleted </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Access token is not set or invalid </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> The authenticating user does not have permissions to delete integrations from this API </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The specified owner, API, version, or integration ID was not found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteIntegrationAsync(String owner, String api, String version, UUID integrationId, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = deleteIntegrationValidateBeforeCall(owner, api, version, integrationId, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for executeIntegration
     * @param owner API owner (organization or user, case-sensitive) (required)
     * @param api API name (case-sensitive) (required)
     * @param version Version identifier (required)
     * @param integrationId Integration ID (case-sensitive). To get the available integration IDs, use &#x60;GET /apis/{owner}/{api}/{version}/integrations&#x60; (required)
     * @param commitMessage Commit message for source control integrations (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The integration was executed successfully </td><td>  -  </td></tr>
        <tr><td> 205 </td><td> The integration was executed successfully and the API has been updated </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> The integration encountered an error while executing. Check that the integration settings (such as access tokens) are valid. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Access token is not set or invalid </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> The authenticating user does not have access to integrations in this API </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The specified API or integration ID was not found </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> The specified integration is disabled </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call executeIntegrationCall(String owner, String api, String version, UUID integrationId, String commitMessage, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/apis/{owner}/{api}/{version}/integrations/{integrationId}/execute"
            .replace("{" + "owner" + "}", localVarApiClient.escapeString(owner.toString()))
            .replace("{" + "api" + "}", localVarApiClient.escapeString(api.toString()))
            .replace("{" + "version" + "}", localVarApiClient.escapeString(version.toString()))
            .replace("{" + "integrationId" + "}", localVarApiClient.escapeString(integrationId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (commitMessage != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("commitMessage", commitMessage));
        }

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "TokenSecured" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call executeIntegrationValidateBeforeCall(String owner, String api, String version, UUID integrationId, String commitMessage, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'owner' is set
        if (owner == null) {
            throw new ApiException("Missing the required parameter 'owner' when calling executeIntegration(Async)");
        }

        // verify the required parameter 'api' is set
        if (api == null) {
            throw new ApiException("Missing the required parameter 'api' when calling executeIntegration(Async)");
        }

        // verify the required parameter 'version' is set
        if (version == null) {
            throw new ApiException("Missing the required parameter 'version' when calling executeIntegration(Async)");
        }

        // verify the required parameter 'integrationId' is set
        if (integrationId == null) {
            throw new ApiException("Missing the required parameter 'integrationId' when calling executeIntegration(Async)");
        }

        return executeIntegrationCall(owner, api, version, integrationId, commitMessage, _callback);

    }

    /**
     * Run an integration
     * Use this operation to trigger an existing integration.  Source control integrations push to (not pull from) the configured repository and branch. You can optionally provide a custom commit message.  **Note:** Webhooks cannot be triggered by this operation, they are only triggered when an API is saved or published. An attempt to trigger a webhook will return status code 400.
     * @param owner API owner (organization or user, case-sensitive) (required)
     * @param api API name (case-sensitive) (required)
     * @param version Version identifier (required)
     * @param integrationId Integration ID (case-sensitive). To get the available integration IDs, use &#x60;GET /apis/{owner}/{api}/{version}/integrations&#x60; (required)
     * @param commitMessage Commit message for source control integrations (optional)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The integration was executed successfully </td><td>  -  </td></tr>
        <tr><td> 205 </td><td> The integration was executed successfully and the API has been updated </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> The integration encountered an error while executing. Check that the integration settings (such as access tokens) are valid. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Access token is not set or invalid </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> The authenticating user does not have access to integrations in this API </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The specified API or integration ID was not found </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> The specified integration is disabled </td><td>  -  </td></tr>
     </table>
     */
    public void executeIntegration(String owner, String api, String version, UUID integrationId, String commitMessage) throws ApiException {
        executeIntegrationWithHttpInfo(owner, api, version, integrationId, commitMessage);
    }

    /**
     * Run an integration
     * Use this operation to trigger an existing integration.  Source control integrations push to (not pull from) the configured repository and branch. You can optionally provide a custom commit message.  **Note:** Webhooks cannot be triggered by this operation, they are only triggered when an API is saved or published. An attempt to trigger a webhook will return status code 400.
     * @param owner API owner (organization or user, case-sensitive) (required)
     * @param api API name (case-sensitive) (required)
     * @param version Version identifier (required)
     * @param integrationId Integration ID (case-sensitive). To get the available integration IDs, use &#x60;GET /apis/{owner}/{api}/{version}/integrations&#x60; (required)
     * @param commitMessage Commit message for source control integrations (optional)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The integration was executed successfully </td><td>  -  </td></tr>
        <tr><td> 205 </td><td> The integration was executed successfully and the API has been updated </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> The integration encountered an error while executing. Check that the integration settings (such as access tokens) are valid. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Access token is not set or invalid </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> The authenticating user does not have access to integrations in this API </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The specified API or integration ID was not found </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> The specified integration is disabled </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> executeIntegrationWithHttpInfo(String owner, String api, String version, UUID integrationId, String commitMessage) throws ApiException {
        okhttp3.Call localVarCall = executeIntegrationValidateBeforeCall(owner, api, version, integrationId, commitMessage, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Run an integration (asynchronously)
     * Use this operation to trigger an existing integration.  Source control integrations push to (not pull from) the configured repository and branch. You can optionally provide a custom commit message.  **Note:** Webhooks cannot be triggered by this operation, they are only triggered when an API is saved or published. An attempt to trigger a webhook will return status code 400.
     * @param owner API owner (organization or user, case-sensitive) (required)
     * @param api API name (case-sensitive) (required)
     * @param version Version identifier (required)
     * @param integrationId Integration ID (case-sensitive). To get the available integration IDs, use &#x60;GET /apis/{owner}/{api}/{version}/integrations&#x60; (required)
     * @param commitMessage Commit message for source control integrations (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The integration was executed successfully </td><td>  -  </td></tr>
        <tr><td> 205 </td><td> The integration was executed successfully and the API has been updated </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> The integration encountered an error while executing. Check that the integration settings (such as access tokens) are valid. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Access token is not set or invalid </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> The authenticating user does not have access to integrations in this API </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The specified API or integration ID was not found </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> The specified integration is disabled </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call executeIntegrationAsync(String owner, String api, String version, UUID integrationId, String commitMessage, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = executeIntegrationValidateBeforeCall(owner, api, version, integrationId, commitMessage, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for getIntegrationById
     * @param owner API owner (organization or user, case-sensitive) (required)
     * @param api API name (case-sensitive) (required)
     * @param version Version identifier (required)
     * @param integrationId Integration ID (case-sensitive). To get the available integration IDs, use &#x60;GET /apis/{owner}/{api}/{version}/integrations&#x60; (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Can be one of the following objects: &#x60;AmazonApiGatewayIntegration&#x60;, &#x60;AmazonApiGatewayLambdaIntegration&#x60;, &#x60;ApigeeEdgeIntegration&#x60;, &#x60;AutoMockingIntegration&#x60;, &#x60;AzureApiManagementIntegration&#x60;, &#x60;AzureDevopsServicesIntegration&#x60;, &#x60;BitbucketCloudIntegration&#x60;, &#x60;BitbucketServerIntegration&#x60;, &#x60;GitHubIntegration&#x60;, &#x60;GitHubEnterpriseIntegration&#x60;, &#x60;GitLabIntegration&#x60;, &#x60;IBMApiConnectIntegration&#x60;, &#x60;WebhookIntegration&#x60;  </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Access token is not set or invalid </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> The authenticating user does not have access to integrations in this API </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The specified owner, API, version, or integration ID was not found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getIntegrationByIdCall(String owner, String api, String version, UUID integrationId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/apis/{owner}/{api}/{version}/integrations/{integrationId}"
            .replace("{" + "owner" + "}", localVarApiClient.escapeString(owner.toString()))
            .replace("{" + "api" + "}", localVarApiClient.escapeString(api.toString()))
            .replace("{" + "version" + "}", localVarApiClient.escapeString(version.toString()))
            .replace("{" + "integrationId" + "}", localVarApiClient.escapeString(integrationId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "TokenSecured" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getIntegrationByIdValidateBeforeCall(String owner, String api, String version, UUID integrationId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'owner' is set
        if (owner == null) {
            throw new ApiException("Missing the required parameter 'owner' when calling getIntegrationById(Async)");
        }

        // verify the required parameter 'api' is set
        if (api == null) {
            throw new ApiException("Missing the required parameter 'api' when calling getIntegrationById(Async)");
        }

        // verify the required parameter 'version' is set
        if (version == null) {
            throw new ApiException("Missing the required parameter 'version' when calling getIntegrationById(Async)");
        }

        // verify the required parameter 'integrationId' is set
        if (integrationId == null) {
            throw new ApiException("Missing the required parameter 'integrationId' when calling getIntegrationById(Async)");
        }

        return getIntegrationByIdCall(owner, api, version, integrationId, _callback);

    }

    /**
     * Get integration settings
     * Returns the configuration of the specified integration. Access tokens and passwords are not returned for security reasons.
     * @param owner API owner (organization or user, case-sensitive) (required)
     * @param api API name (case-sensitive) (required)
     * @param version Version identifier (required)
     * @param integrationId Integration ID (case-sensitive). To get the available integration IDs, use &#x60;GET /apis/{owner}/{api}/{version}/integrations&#x60; (required)
     * @return IntegrationConfiguration
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Can be one of the following objects: &#x60;AmazonApiGatewayIntegration&#x60;, &#x60;AmazonApiGatewayLambdaIntegration&#x60;, &#x60;ApigeeEdgeIntegration&#x60;, &#x60;AutoMockingIntegration&#x60;, &#x60;AzureApiManagementIntegration&#x60;, &#x60;AzureDevopsServicesIntegration&#x60;, &#x60;BitbucketCloudIntegration&#x60;, &#x60;BitbucketServerIntegration&#x60;, &#x60;GitHubIntegration&#x60;, &#x60;GitHubEnterpriseIntegration&#x60;, &#x60;GitLabIntegration&#x60;, &#x60;IBMApiConnectIntegration&#x60;, &#x60;WebhookIntegration&#x60;  </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Access token is not set or invalid </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> The authenticating user does not have access to integrations in this API </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The specified owner, API, version, or integration ID was not found </td><td>  -  </td></tr>
     </table>
     */
    public IntegrationConfiguration getIntegrationById(String owner, String api, String version, UUID integrationId) throws ApiException {
        ApiResponse<IntegrationConfiguration> localVarResp = getIntegrationByIdWithHttpInfo(owner, api, version, integrationId);
        return localVarResp.getData();
    }

    /**
     * Get integration settings
     * Returns the configuration of the specified integration. Access tokens and passwords are not returned for security reasons.
     * @param owner API owner (organization or user, case-sensitive) (required)
     * @param api API name (case-sensitive) (required)
     * @param version Version identifier (required)
     * @param integrationId Integration ID (case-sensitive). To get the available integration IDs, use &#x60;GET /apis/{owner}/{api}/{version}/integrations&#x60; (required)
     * @return ApiResponse&lt;IntegrationConfiguration&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Can be one of the following objects: &#x60;AmazonApiGatewayIntegration&#x60;, &#x60;AmazonApiGatewayLambdaIntegration&#x60;, &#x60;ApigeeEdgeIntegration&#x60;, &#x60;AutoMockingIntegration&#x60;, &#x60;AzureApiManagementIntegration&#x60;, &#x60;AzureDevopsServicesIntegration&#x60;, &#x60;BitbucketCloudIntegration&#x60;, &#x60;BitbucketServerIntegration&#x60;, &#x60;GitHubIntegration&#x60;, &#x60;GitHubEnterpriseIntegration&#x60;, &#x60;GitLabIntegration&#x60;, &#x60;IBMApiConnectIntegration&#x60;, &#x60;WebhookIntegration&#x60;  </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Access token is not set or invalid </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> The authenticating user does not have access to integrations in this API </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The specified owner, API, version, or integration ID was not found </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<IntegrationConfiguration> getIntegrationByIdWithHttpInfo(String owner, String api, String version, UUID integrationId) throws ApiException {
        okhttp3.Call localVarCall = getIntegrationByIdValidateBeforeCall(owner, api, version, integrationId, null);
        Type localVarReturnType = new TypeToken<IntegrationConfiguration>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get integration settings (asynchronously)
     * Returns the configuration of the specified integration. Access tokens and passwords are not returned for security reasons.
     * @param owner API owner (organization or user, case-sensitive) (required)
     * @param api API name (case-sensitive) (required)
     * @param version Version identifier (required)
     * @param integrationId Integration ID (case-sensitive). To get the available integration IDs, use &#x60;GET /apis/{owner}/{api}/{version}/integrations&#x60; (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Can be one of the following objects: &#x60;AmazonApiGatewayIntegration&#x60;, &#x60;AmazonApiGatewayLambdaIntegration&#x60;, &#x60;ApigeeEdgeIntegration&#x60;, &#x60;AutoMockingIntegration&#x60;, &#x60;AzureApiManagementIntegration&#x60;, &#x60;AzureDevopsServicesIntegration&#x60;, &#x60;BitbucketCloudIntegration&#x60;, &#x60;BitbucketServerIntegration&#x60;, &#x60;GitHubIntegration&#x60;, &#x60;GitHubEnterpriseIntegration&#x60;, &#x60;GitLabIntegration&#x60;, &#x60;IBMApiConnectIntegration&#x60;, &#x60;WebhookIntegration&#x60;  </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Access token is not set or invalid </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> The authenticating user does not have access to integrations in this API </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The specified owner, API, version, or integration ID was not found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getIntegrationByIdAsync(String owner, String api, String version, UUID integrationId, final ApiCallback<IntegrationConfiguration> _callback) throws ApiException {

        okhttp3.Call localVarCall = getIntegrationByIdValidateBeforeCall(owner, api, version, integrationId, _callback);
        Type localVarReturnType = new TypeToken<IntegrationConfiguration>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getIntegrations
     * @param owner API owner (organization or user, case-sensitive) (required)
     * @param api API name (case-sensitive) (required)
     * @param version Version identifier (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> An object that contains information about the configured integrations </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Access token is not set or invalid </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> The authenticating user does not have access to integrations in this API </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The specified API or version was not found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getIntegrationsCall(String owner, String api, String version, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/apis/{owner}/{api}/{version}/integrations"
            .replace("{" + "owner" + "}", localVarApiClient.escapeString(owner.toString()))
            .replace("{" + "api" + "}", localVarApiClient.escapeString(api.toString()))
            .replace("{" + "version" + "}", localVarApiClient.escapeString(version.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "TokenSecured" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getIntegrationsValidateBeforeCall(String owner, String api, String version, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'owner' is set
        if (owner == null) {
            throw new ApiException("Missing the required parameter 'owner' when calling getIntegrations(Async)");
        }

        // verify the required parameter 'api' is set
        if (api == null) {
            throw new ApiException("Missing the required parameter 'api' when calling getIntegrations(Async)");
        }

        // verify the required parameter 'version' is set
        if (version == null) {
            throw new ApiException("Missing the required parameter 'version' when calling getIntegrations(Async)");
        }

        return getIntegrationsCall(owner, api, version, _callback);

    }

    /**
     * Get all integrations configured for the specified API version
     * The returned information includes integration types, names, unique IDs, and enabled/disabled status.  **Note:** The following integration types are currently not returned: Amazon API Gateway Lambda Sync, Apigee Edge, Azure API Management, IBM API Connect.
     * @param owner API owner (organization or user, case-sensitive) (required)
     * @param api API name (case-sensitive) (required)
     * @param version Version identifier (required)
     * @return IntegrationConfigurations
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> An object that contains information about the configured integrations </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Access token is not set or invalid </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> The authenticating user does not have access to integrations in this API </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The specified API or version was not found </td><td>  -  </td></tr>
     </table>
     */
    public IntegrationConfigurations getIntegrations(String owner, String api, String version) throws ApiException {
        ApiResponse<IntegrationConfigurations> localVarResp = getIntegrationsWithHttpInfo(owner, api, version);
        return localVarResp.getData();
    }

    /**
     * Get all integrations configured for the specified API version
     * The returned information includes integration types, names, unique IDs, and enabled/disabled status.  **Note:** The following integration types are currently not returned: Amazon API Gateway Lambda Sync, Apigee Edge, Azure API Management, IBM API Connect.
     * @param owner API owner (organization or user, case-sensitive) (required)
     * @param api API name (case-sensitive) (required)
     * @param version Version identifier (required)
     * @return ApiResponse&lt;IntegrationConfigurations&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> An object that contains information about the configured integrations </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Access token is not set or invalid </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> The authenticating user does not have access to integrations in this API </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The specified API or version was not found </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<IntegrationConfigurations> getIntegrationsWithHttpInfo(String owner, String api, String version) throws ApiException {
        okhttp3.Call localVarCall = getIntegrationsValidateBeforeCall(owner, api, version, null);
        Type localVarReturnType = new TypeToken<IntegrationConfigurations>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get all integrations configured for the specified API version (asynchronously)
     * The returned information includes integration types, names, unique IDs, and enabled/disabled status.  **Note:** The following integration types are currently not returned: Amazon API Gateway Lambda Sync, Apigee Edge, Azure API Management, IBM API Connect.
     * @param owner API owner (organization or user, case-sensitive) (required)
     * @param api API name (case-sensitive) (required)
     * @param version Version identifier (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> An object that contains information about the configured integrations </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Access token is not set or invalid </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> The authenticating user does not have access to integrations in this API </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The specified API or version was not found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getIntegrationsAsync(String owner, String api, String version, final ApiCallback<IntegrationConfigurations> _callback) throws ApiException {

        okhttp3.Call localVarCall = getIntegrationsValidateBeforeCall(owner, api, version, _callback);
        Type localVarReturnType = new TypeToken<IntegrationConfigurations>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for patchIntegration
     * @param owner API owner (organization or user, case-sensitive) (required)
     * @param api API name (case-sensitive) (required)
     * @param version Version identifier (required)
     * @param integrationId Integration ID (case-sensitive). To get the available integration IDs, use &#x60;GET /apis/{owner}/{api}/{version}/integrations&#x60; (required)
     * @param integrationTypeConfiguration An object that contains the integration parameters you want to update (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Integration was successfully updated </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> The specified integration configuration is invalid </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Access token is not set or invalid </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> The authenticating user does not have access to integrations in this API </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The specified owner, API, version, or integration ID was not found </td><td>  -  </td></tr>
        <tr><td> 415 </td><td> Invalid content type </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call patchIntegrationCall(String owner, String api, String version, UUID integrationId, Object integrationTypeConfiguration, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = integrationTypeConfiguration;

        // create path and map variables
        String localVarPath = "/apis/{owner}/{api}/{version}/integrations/{integrationId}"
            .replace("{" + "owner" + "}", localVarApiClient.escapeString(owner.toString()))
            .replace("{" + "api" + "}", localVarApiClient.escapeString(api.toString()))
            .replace("{" + "version" + "}", localVarApiClient.escapeString(version.toString()))
            .replace("{" + "integrationId" + "}", localVarApiClient.escapeString(integrationId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "TokenSecured" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PATCH", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call patchIntegrationValidateBeforeCall(String owner, String api, String version, UUID integrationId, Object integrationTypeConfiguration, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'owner' is set
        if (owner == null) {
            throw new ApiException("Missing the required parameter 'owner' when calling patchIntegration(Async)");
        }

        // verify the required parameter 'api' is set
        if (api == null) {
            throw new ApiException("Missing the required parameter 'api' when calling patchIntegration(Async)");
        }

        // verify the required parameter 'version' is set
        if (version == null) {
            throw new ApiException("Missing the required parameter 'version' when calling patchIntegration(Async)");
        }

        // verify the required parameter 'integrationId' is set
        if (integrationId == null) {
            throw new ApiException("Missing the required parameter 'integrationId' when calling patchIntegration(Async)");
        }

        // verify the required parameter 'integrationTypeConfiguration' is set
        if (integrationTypeConfiguration == null) {
            throw new ApiException("Missing the required parameter 'integrationTypeConfiguration' when calling patchIntegration(Async)");
        }

        return patchIntegrationCall(owner, api, version, integrationId, integrationTypeConfiguration, _callback);

    }

    /**
     * Partially update integration settings
     * Use this operation to partially update integration settings for the specified API and integration ID. For example, enable or disable an integration, or specify a new access token.  Only the fields provided in the request body will be updated; other settings will remain unchanged. For a list of fields that can be updated, see the following objects in the \&quot;Models\&quot; section at the bottom of API docs:   * &#x60;AmazonApiGatewayIntegration&#x60;  * &#x60;AmazonApiGatewayLambdaIntegration&#x60;  * &#x60;ApigeeEdgeIntegration&#x60;  * &#x60;AutoMockingIntegration&#x60;  * &#x60;AzureApiManagementIntegration&#x60;  * &#x60;AzureDevopsServicesIntegration&#x60;  * &#x60;BitbucketCloudIntegration&#x60;  * &#x60;BitbucketServerIntegration&#x60;  * &#x60;GitHubIntegration&#x60;  * &#x60;GitHubEnterpriseIntegration&#x60;  * &#x60;GitLabIntegration&#x60;  * &#x60;IBMApiConnectIntegration&#x60;  * &#x60;WebhookIntegration&#x60;  **Notes:**   * &#x60;configType&#x60; (integration type) cannot be changed.   * If updating the integration &#x60;name&#x60;, make sure the new name is unique among all integrations configured for the given API version.   * If you change &#x60;target&#x60; to the YAMl/JSON definition, you must also specify the &#x60;outputFile&#x60;.   * If you change &#x60;syncMethod&#x60; to _Advanced Sync_, you must also specify a non-empty list of either &#x60;providedPaths&#x60; or &#x60;managedPaths&#x60; (or both). If you are not sure which paths to use, use &#x60;providedPaths&#x60;&#x3D;&#x60;[\&quot;*\&quot;]&#x60;.   * The update operation does not validate the repository details and access tokens.
     * @param owner API owner (organization or user, case-sensitive) (required)
     * @param api API name (case-sensitive) (required)
     * @param version Version identifier (required)
     * @param integrationId Integration ID (case-sensitive). To get the available integration IDs, use &#x60;GET /apis/{owner}/{api}/{version}/integrations&#x60; (required)
     * @param integrationTypeConfiguration An object that contains the integration parameters you want to update (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Integration was successfully updated </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> The specified integration configuration is invalid </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Access token is not set or invalid </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> The authenticating user does not have access to integrations in this API </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The specified owner, API, version, or integration ID was not found </td><td>  -  </td></tr>
        <tr><td> 415 </td><td> Invalid content type </td><td>  -  </td></tr>
     </table>
     */
    public void patchIntegration(String owner, String api, String version, UUID integrationId, Object integrationTypeConfiguration) throws ApiException {
        patchIntegrationWithHttpInfo(owner, api, version, integrationId, integrationTypeConfiguration);
    }

    /**
     * Partially update integration settings
     * Use this operation to partially update integration settings for the specified API and integration ID. For example, enable or disable an integration, or specify a new access token.  Only the fields provided in the request body will be updated; other settings will remain unchanged. For a list of fields that can be updated, see the following objects in the \&quot;Models\&quot; section at the bottom of API docs:   * &#x60;AmazonApiGatewayIntegration&#x60;  * &#x60;AmazonApiGatewayLambdaIntegration&#x60;  * &#x60;ApigeeEdgeIntegration&#x60;  * &#x60;AutoMockingIntegration&#x60;  * &#x60;AzureApiManagementIntegration&#x60;  * &#x60;AzureDevopsServicesIntegration&#x60;  * &#x60;BitbucketCloudIntegration&#x60;  * &#x60;BitbucketServerIntegration&#x60;  * &#x60;GitHubIntegration&#x60;  * &#x60;GitHubEnterpriseIntegration&#x60;  * &#x60;GitLabIntegration&#x60;  * &#x60;IBMApiConnectIntegration&#x60;  * &#x60;WebhookIntegration&#x60;  **Notes:**   * &#x60;configType&#x60; (integration type) cannot be changed.   * If updating the integration &#x60;name&#x60;, make sure the new name is unique among all integrations configured for the given API version.   * If you change &#x60;target&#x60; to the YAMl/JSON definition, you must also specify the &#x60;outputFile&#x60;.   * If you change &#x60;syncMethod&#x60; to _Advanced Sync_, you must also specify a non-empty list of either &#x60;providedPaths&#x60; or &#x60;managedPaths&#x60; (or both). If you are not sure which paths to use, use &#x60;providedPaths&#x60;&#x3D;&#x60;[\&quot;*\&quot;]&#x60;.   * The update operation does not validate the repository details and access tokens.
     * @param owner API owner (organization or user, case-sensitive) (required)
     * @param api API name (case-sensitive) (required)
     * @param version Version identifier (required)
     * @param integrationId Integration ID (case-sensitive). To get the available integration IDs, use &#x60;GET /apis/{owner}/{api}/{version}/integrations&#x60; (required)
     * @param integrationTypeConfiguration An object that contains the integration parameters you want to update (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Integration was successfully updated </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> The specified integration configuration is invalid </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Access token is not set or invalid </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> The authenticating user does not have access to integrations in this API </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The specified owner, API, version, or integration ID was not found </td><td>  -  </td></tr>
        <tr><td> 415 </td><td> Invalid content type </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> patchIntegrationWithHttpInfo(String owner, String api, String version, UUID integrationId, Object integrationTypeConfiguration) throws ApiException {
        okhttp3.Call localVarCall = patchIntegrationValidateBeforeCall(owner, api, version, integrationId, integrationTypeConfiguration, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Partially update integration settings (asynchronously)
     * Use this operation to partially update integration settings for the specified API and integration ID. For example, enable or disable an integration, or specify a new access token.  Only the fields provided in the request body will be updated; other settings will remain unchanged. For a list of fields that can be updated, see the following objects in the \&quot;Models\&quot; section at the bottom of API docs:   * &#x60;AmazonApiGatewayIntegration&#x60;  * &#x60;AmazonApiGatewayLambdaIntegration&#x60;  * &#x60;ApigeeEdgeIntegration&#x60;  * &#x60;AutoMockingIntegration&#x60;  * &#x60;AzureApiManagementIntegration&#x60;  * &#x60;AzureDevopsServicesIntegration&#x60;  * &#x60;BitbucketCloudIntegration&#x60;  * &#x60;BitbucketServerIntegration&#x60;  * &#x60;GitHubIntegration&#x60;  * &#x60;GitHubEnterpriseIntegration&#x60;  * &#x60;GitLabIntegration&#x60;  * &#x60;IBMApiConnectIntegration&#x60;  * &#x60;WebhookIntegration&#x60;  **Notes:**   * &#x60;configType&#x60; (integration type) cannot be changed.   * If updating the integration &#x60;name&#x60;, make sure the new name is unique among all integrations configured for the given API version.   * If you change &#x60;target&#x60; to the YAMl/JSON definition, you must also specify the &#x60;outputFile&#x60;.   * If you change &#x60;syncMethod&#x60; to _Advanced Sync_, you must also specify a non-empty list of either &#x60;providedPaths&#x60; or &#x60;managedPaths&#x60; (or both). If you are not sure which paths to use, use &#x60;providedPaths&#x60;&#x3D;&#x60;[\&quot;*\&quot;]&#x60;.   * The update operation does not validate the repository details and access tokens.
     * @param owner API owner (organization or user, case-sensitive) (required)
     * @param api API name (case-sensitive) (required)
     * @param version Version identifier (required)
     * @param integrationId Integration ID (case-sensitive). To get the available integration IDs, use &#x60;GET /apis/{owner}/{api}/{version}/integrations&#x60; (required)
     * @param integrationTypeConfiguration An object that contains the integration parameters you want to update (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Integration was successfully updated </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> The specified integration configuration is invalid </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Access token is not set or invalid </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> The authenticating user does not have access to integrations in this API </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The specified owner, API, version, or integration ID was not found </td><td>  -  </td></tr>
        <tr><td> 415 </td><td> Invalid content type </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call patchIntegrationAsync(String owner, String api, String version, UUID integrationId, Object integrationTypeConfiguration, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = patchIntegrationValidateBeforeCall(owner, api, version, integrationId, integrationTypeConfiguration, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for updateIntegration
     * @param owner API owner (organization or user, case-sensitive) (required)
     * @param api API name (case-sensitive) (required)
     * @param version Version identifier (required)
     * @param integrationId Integration ID (case-sensitive). To get the available integration IDs, use &#x60;GET /apis/{owner}/{api}/{version}/integrations&#x60; (required)
     * @param integrationTypeConfiguration Can be one of the following objects:  | &#x60;configType&#x60; value        | Object | | ------------------------- | ------ | | AMAZON_API_GATEWAY        | AmazonApiGatewayIntegration | | AMAZON_API_GATEWAY_LAMBDA | AmazonApiGatewayLambdaIntegration | | API_AUTO_MOCKING          | AutoMockingIntegration | | APIGEE_EDGE               | ApigeeEdgeIntegration | | AZURE_API_MANAGEMENT      | AzureApiManagementIntegration | | AZURE_DEVOPS_SERVICES     | AzureDevopsServicesIntegration | | BITBUCKET_CLOUD           | BitbucketCloudIntegration | | BITBUCKET_SERVER          | BitbucketServerIntegration | | GITHUB                    | GitHubIntegration | | GITHUB_ENTERPRISE         | GitHubEnterpriseIntegration | | GITLAB                    | GitLabIntegration | | IBM_API_CONNECT           | IBMApiConnectIntegration | | WEBHOOK                   | WebhookIntegration |  For more examples, see the JSON files in this repository: https://github.com/SmartBear/swaggerhub-cli/tree/master/examples/integrations (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Integration was successfully updated </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> The specified integration configuration is invalid </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Access token is not set or invalid </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> The authenticating user does not have access to integrations in this API </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The specified combination of owner, API, version, integrationId, and configType was not found </td><td>  -  </td></tr>
        <tr><td> 415 </td><td> Invalid content type </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateIntegrationCall(String owner, String api, String version, UUID integrationId, Object integrationTypeConfiguration, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = integrationTypeConfiguration;

        // create path and map variables
        String localVarPath = "/apis/{owner}/{api}/{version}/integrations/{integrationId}"
            .replace("{" + "owner" + "}", localVarApiClient.escapeString(owner.toString()))
            .replace("{" + "api" + "}", localVarApiClient.escapeString(api.toString()))
            .replace("{" + "version" + "}", localVarApiClient.escapeString(version.toString()))
            .replace("{" + "integrationId" + "}", localVarApiClient.escapeString(integrationId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "TokenSecured" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call updateIntegrationValidateBeforeCall(String owner, String api, String version, UUID integrationId, Object integrationTypeConfiguration, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'owner' is set
        if (owner == null) {
            throw new ApiException("Missing the required parameter 'owner' when calling updateIntegration(Async)");
        }

        // verify the required parameter 'api' is set
        if (api == null) {
            throw new ApiException("Missing the required parameter 'api' when calling updateIntegration(Async)");
        }

        // verify the required parameter 'version' is set
        if (version == null) {
            throw new ApiException("Missing the required parameter 'version' when calling updateIntegration(Async)");
        }

        // verify the required parameter 'integrationId' is set
        if (integrationId == null) {
            throw new ApiException("Missing the required parameter 'integrationId' when calling updateIntegration(Async)");
        }

        // verify the required parameter 'integrationTypeConfiguration' is set
        if (integrationTypeConfiguration == null) {
            throw new ApiException("Missing the required parameter 'integrationTypeConfiguration' when calling updateIntegration(Async)");
        }

        return updateIntegrationCall(owner, api, version, integrationId, integrationTypeConfiguration, _callback);

    }

    /**
     * Update integration settings
     * Updates integration settings for the specified API and integration ID. The integration type is determined by which object is passed in the request body.  The request body must contain a **full representation** of an integration object. If you want to update just a few parameters, use the PATCH operation instead.  For a list of fields that need to be provided in the request body, see the descriptions of the following objects in the \&quot;Models\&quot; section at the bottom of API docs:   * &#x60;AmazonApiGatewayIntegration&#x60;  * &#x60;AmazonApiGatewayLambdaIntegration&#x60;  * &#x60;ApigeeEdgeIntegration&#x60;  * &#x60;AutoMockingIntegration&#x60;  * &#x60;AzureApiManagementIntegration&#x60;  * &#x60;AzureDevopsServicesIntegration&#x60;  * &#x60;BitbucketCloudIntegration&#x60;  * &#x60;BitbucketServerIntegration&#x60;  * &#x60;GitHubIntegration&#x60;  * &#x60;GitHubEnterpriseIntegration&#x60;  * &#x60;GitLabIntegration&#x60;  * &#x60;IBMApiConnectIntegration&#x60;  * &#x60;WebhookIntegration&#x60;  **Notes:**   * The integration &#x60;name&#x60; must be unique among all integrations configured for the given API version.   * If &#x60;target&#x60; is the YAMl/JSON definition, you must specify the &#x60;outputFile&#x60;.   * If &#x60;syncMethod&#x60;&#x3D;_Advanced Sync_, you must specify a non-empty list of either &#x60;providedPaths&#x60; or &#x60;managedPaths&#x60; (or both). If you are not sure which paths to use, use &#x60;providedPaths&#x60;&#x3D;&#x60;[\&quot;*\&quot;]&#x60;.   * The operation does not validate the repository details and access tokens.
     * @param owner API owner (organization or user, case-sensitive) (required)
     * @param api API name (case-sensitive) (required)
     * @param version Version identifier (required)
     * @param integrationId Integration ID (case-sensitive). To get the available integration IDs, use &#x60;GET /apis/{owner}/{api}/{version}/integrations&#x60; (required)
     * @param integrationTypeConfiguration Can be one of the following objects:  | &#x60;configType&#x60; value        | Object | | ------------------------- | ------ | | AMAZON_API_GATEWAY        | AmazonApiGatewayIntegration | | AMAZON_API_GATEWAY_LAMBDA | AmazonApiGatewayLambdaIntegration | | API_AUTO_MOCKING          | AutoMockingIntegration | | APIGEE_EDGE               | ApigeeEdgeIntegration | | AZURE_API_MANAGEMENT      | AzureApiManagementIntegration | | AZURE_DEVOPS_SERVICES     | AzureDevopsServicesIntegration | | BITBUCKET_CLOUD           | BitbucketCloudIntegration | | BITBUCKET_SERVER          | BitbucketServerIntegration | | GITHUB                    | GitHubIntegration | | GITHUB_ENTERPRISE         | GitHubEnterpriseIntegration | | GITLAB                    | GitLabIntegration | | IBM_API_CONNECT           | IBMApiConnectIntegration | | WEBHOOK                   | WebhookIntegration |  For more examples, see the JSON files in this repository: https://github.com/SmartBear/swaggerhub-cli/tree/master/examples/integrations (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Integration was successfully updated </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> The specified integration configuration is invalid </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Access token is not set or invalid </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> The authenticating user does not have access to integrations in this API </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The specified combination of owner, API, version, integrationId, and configType was not found </td><td>  -  </td></tr>
        <tr><td> 415 </td><td> Invalid content type </td><td>  -  </td></tr>
     </table>
     */
    public void updateIntegration(String owner, String api, String version, UUID integrationId, Object integrationTypeConfiguration) throws ApiException {
        updateIntegrationWithHttpInfo(owner, api, version, integrationId, integrationTypeConfiguration);
    }

    /**
     * Update integration settings
     * Updates integration settings for the specified API and integration ID. The integration type is determined by which object is passed in the request body.  The request body must contain a **full representation** of an integration object. If you want to update just a few parameters, use the PATCH operation instead.  For a list of fields that need to be provided in the request body, see the descriptions of the following objects in the \&quot;Models\&quot; section at the bottom of API docs:   * &#x60;AmazonApiGatewayIntegration&#x60;  * &#x60;AmazonApiGatewayLambdaIntegration&#x60;  * &#x60;ApigeeEdgeIntegration&#x60;  * &#x60;AutoMockingIntegration&#x60;  * &#x60;AzureApiManagementIntegration&#x60;  * &#x60;AzureDevopsServicesIntegration&#x60;  * &#x60;BitbucketCloudIntegration&#x60;  * &#x60;BitbucketServerIntegration&#x60;  * &#x60;GitHubIntegration&#x60;  * &#x60;GitHubEnterpriseIntegration&#x60;  * &#x60;GitLabIntegration&#x60;  * &#x60;IBMApiConnectIntegration&#x60;  * &#x60;WebhookIntegration&#x60;  **Notes:**   * The integration &#x60;name&#x60; must be unique among all integrations configured for the given API version.   * If &#x60;target&#x60; is the YAMl/JSON definition, you must specify the &#x60;outputFile&#x60;.   * If &#x60;syncMethod&#x60;&#x3D;_Advanced Sync_, you must specify a non-empty list of either &#x60;providedPaths&#x60; or &#x60;managedPaths&#x60; (or both). If you are not sure which paths to use, use &#x60;providedPaths&#x60;&#x3D;&#x60;[\&quot;*\&quot;]&#x60;.   * The operation does not validate the repository details and access tokens.
     * @param owner API owner (organization or user, case-sensitive) (required)
     * @param api API name (case-sensitive) (required)
     * @param version Version identifier (required)
     * @param integrationId Integration ID (case-sensitive). To get the available integration IDs, use &#x60;GET /apis/{owner}/{api}/{version}/integrations&#x60; (required)
     * @param integrationTypeConfiguration Can be one of the following objects:  | &#x60;configType&#x60; value        | Object | | ------------------------- | ------ | | AMAZON_API_GATEWAY        | AmazonApiGatewayIntegration | | AMAZON_API_GATEWAY_LAMBDA | AmazonApiGatewayLambdaIntegration | | API_AUTO_MOCKING          | AutoMockingIntegration | | APIGEE_EDGE               | ApigeeEdgeIntegration | | AZURE_API_MANAGEMENT      | AzureApiManagementIntegration | | AZURE_DEVOPS_SERVICES     | AzureDevopsServicesIntegration | | BITBUCKET_CLOUD           | BitbucketCloudIntegration | | BITBUCKET_SERVER          | BitbucketServerIntegration | | GITHUB                    | GitHubIntegration | | GITHUB_ENTERPRISE         | GitHubEnterpriseIntegration | | GITLAB                    | GitLabIntegration | | IBM_API_CONNECT           | IBMApiConnectIntegration | | WEBHOOK                   | WebhookIntegration |  For more examples, see the JSON files in this repository: https://github.com/SmartBear/swaggerhub-cli/tree/master/examples/integrations (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Integration was successfully updated </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> The specified integration configuration is invalid </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Access token is not set or invalid </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> The authenticating user does not have access to integrations in this API </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The specified combination of owner, API, version, integrationId, and configType was not found </td><td>  -  </td></tr>
        <tr><td> 415 </td><td> Invalid content type </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> updateIntegrationWithHttpInfo(String owner, String api, String version, UUID integrationId, Object integrationTypeConfiguration) throws ApiException {
        okhttp3.Call localVarCall = updateIntegrationValidateBeforeCall(owner, api, version, integrationId, integrationTypeConfiguration, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Update integration settings (asynchronously)
     * Updates integration settings for the specified API and integration ID. The integration type is determined by which object is passed in the request body.  The request body must contain a **full representation** of an integration object. If you want to update just a few parameters, use the PATCH operation instead.  For a list of fields that need to be provided in the request body, see the descriptions of the following objects in the \&quot;Models\&quot; section at the bottom of API docs:   * &#x60;AmazonApiGatewayIntegration&#x60;  * &#x60;AmazonApiGatewayLambdaIntegration&#x60;  * &#x60;ApigeeEdgeIntegration&#x60;  * &#x60;AutoMockingIntegration&#x60;  * &#x60;AzureApiManagementIntegration&#x60;  * &#x60;AzureDevopsServicesIntegration&#x60;  * &#x60;BitbucketCloudIntegration&#x60;  * &#x60;BitbucketServerIntegration&#x60;  * &#x60;GitHubIntegration&#x60;  * &#x60;GitHubEnterpriseIntegration&#x60;  * &#x60;GitLabIntegration&#x60;  * &#x60;IBMApiConnectIntegration&#x60;  * &#x60;WebhookIntegration&#x60;  **Notes:**   * The integration &#x60;name&#x60; must be unique among all integrations configured for the given API version.   * If &#x60;target&#x60; is the YAMl/JSON definition, you must specify the &#x60;outputFile&#x60;.   * If &#x60;syncMethod&#x60;&#x3D;_Advanced Sync_, you must specify a non-empty list of either &#x60;providedPaths&#x60; or &#x60;managedPaths&#x60; (or both). If you are not sure which paths to use, use &#x60;providedPaths&#x60;&#x3D;&#x60;[\&quot;*\&quot;]&#x60;.   * The operation does not validate the repository details and access tokens.
     * @param owner API owner (organization or user, case-sensitive) (required)
     * @param api API name (case-sensitive) (required)
     * @param version Version identifier (required)
     * @param integrationId Integration ID (case-sensitive). To get the available integration IDs, use &#x60;GET /apis/{owner}/{api}/{version}/integrations&#x60; (required)
     * @param integrationTypeConfiguration Can be one of the following objects:  | &#x60;configType&#x60; value        | Object | | ------------------------- | ------ | | AMAZON_API_GATEWAY        | AmazonApiGatewayIntegration | | AMAZON_API_GATEWAY_LAMBDA | AmazonApiGatewayLambdaIntegration | | API_AUTO_MOCKING          | AutoMockingIntegration | | APIGEE_EDGE               | ApigeeEdgeIntegration | | AZURE_API_MANAGEMENT      | AzureApiManagementIntegration | | AZURE_DEVOPS_SERVICES     | AzureDevopsServicesIntegration | | BITBUCKET_CLOUD           | BitbucketCloudIntegration | | BITBUCKET_SERVER          | BitbucketServerIntegration | | GITHUB                    | GitHubIntegration | | GITHUB_ENTERPRISE         | GitHubEnterpriseIntegration | | GITLAB                    | GitLabIntegration | | IBM_API_CONNECT           | IBMApiConnectIntegration | | WEBHOOK                   | WebhookIntegration |  For more examples, see the JSON files in this repository: https://github.com/SmartBear/swaggerhub-cli/tree/master/examples/integrations (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Integration was successfully updated </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> The specified integration configuration is invalid </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Access token is not set or invalid </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> The authenticating user does not have access to integrations in this API </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The specified combination of owner, API, version, integrationId, and configType was not found </td><td>  -  </td></tr>
        <tr><td> 415 </td><td> Invalid content type </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateIntegrationAsync(String owner, String api, String version, UUID integrationId, Object integrationTypeConfiguration, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = updateIntegrationValidateBeforeCall(owner, api, version, integrationId, integrationTypeConfiguration, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
}
