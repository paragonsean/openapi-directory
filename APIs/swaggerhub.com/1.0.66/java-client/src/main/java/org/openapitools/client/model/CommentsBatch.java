/*
 * SwaggerHub Registry API
 * # Overview Use SwaggerHub Registry API to access, manage, and update the following resources in SwaggerHub, bypassing the web interface:   * APIs   * Domains   * Integrations   * Projects   * Templates   SwaggerHub also provides the [User Management API](https://app.swaggerhub.com/apis-docs/swagger-hub/user-management-api/) to get information about organizations and manage organization members.  # Base URL Use the following base URL for SwaggerHub SaaS:          http(s)://api.swaggerhub.com  **Note:** This documentation is for SwaggerHub SaaS. On-Premise customers should use the bundled API definition, which can be found at the URLs provided below.  Version 1.29.0 or later:      http(s)://SERVER/v1/openapi.yaml - YAML version     http(s)://SERVER/v1/openapi.json - JSON version  Earlier versions:      http(s)://SERVER/v1/swagger.yaml - YAML version     http(s)://SERVER/v1/swagger.json - JSON version  # Authentication Operations that update data or access private data require authentication using an API key. You can find your personal API key on the [API Keys](https://app.swaggerhub.com/settings/apiKey) page in your account settings. Send this key in the `Authorization` header when making requests to the Registry API:      Authorization: YOUR_API_KEY  To test API calls from this documentation page, click the **Authorize** button below and paste your API key there.  **Important:** Keep the API key secure and do not store it directly in your code. # Tools In addition to calling the Registry API directly, you can use the following tools to interact with the API from the command line or CI/CD pipeline:   * [SwaggerHub CLI](https://www.npmjs.com/package/swaggerhub-cli)   * [Maven plugin](https://github.com/swagger-api/swaggerhub-maven-plugin)  * [Gradle plugin](https://github.com/swagger-api/swaggerhub-gradle-plugin) 
 *
 * The version of the OpenAPI document: 1.0.66
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.Set;
import org.openapitools.client.model.ClosableCommentPatch;
import org.openapitools.client.model.CommentPatch;
import org.openapitools.client.model.NewComment;
import org.openapitools.client.model.NewReply;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * CommentsBatch
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:18:22.732961-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class CommentsBatch {
  public static final String SERIALIZED_NAME_ADD_COMMENT = "addComment";
  @SerializedName(SERIALIZED_NAME_ADD_COMMENT)
  private List<NewComment> addComment = new ArrayList<>();

  public static final String SERIALIZED_NAME_ADD_REPLY = "addReply";
  @SerializedName(SERIALIZED_NAME_ADD_REPLY)
  private Map<String, List<NewReply>> addReply = new HashMap<>();

  public static final String SERIALIZED_NAME_DELETE_COMMENT = "deleteComment";
  @SerializedName(SERIALIZED_NAME_DELETE_COMMENT)
  private List<String> deleteComment = new ArrayList<>();

  public static final String SERIALIZED_NAME_DELETE_REPLY = "deleteReply";
  @SerializedName(SERIALIZED_NAME_DELETE_REPLY)
  private Map<String, Set<String>> deleteReply = new HashMap<>();

  public static final String SERIALIZED_NAME_UPDATE_COMMENT = "updateComment";
  @SerializedName(SERIALIZED_NAME_UPDATE_COMMENT)
  private Map<String, ClosableCommentPatch> updateComment = new HashMap<>();

  public static final String SERIALIZED_NAME_UPDATE_REPLY = "updateReply";
  @SerializedName(SERIALIZED_NAME_UPDATE_REPLY)
  private Map<String, Map<String, CommentPatch>> updateReply = new HashMap<>();

  /**
   * Gets or Sets inner
   */
  @JsonAdapter(InnerEnum.Adapter.class)
  public enum InnerEnum {
    OPEN("OPEN"),
    
    RESOLVED("RESOLVED");

    private String value;

    InnerEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static InnerEnum fromValue(String value) {
      for (InnerEnum b : InnerEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<InnerEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final InnerEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public InnerEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return InnerEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      InnerEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_UPDATE_STATUS = "updateStatus";
  @SerializedName(SERIALIZED_NAME_UPDATE_STATUS)
  private Map<String, InnerEnum> updateStatus = new HashMap<>();

  public CommentsBatch() {
  }

  public CommentsBatch addComment(List<NewComment> addComment) {
    this.addComment = addComment;
    return this;
  }

  public CommentsBatch addAddCommentItem(NewComment addCommentItem) {
    if (this.addComment == null) {
      this.addComment = new ArrayList<>();
    }
    this.addComment.add(addCommentItem);
    return this;
  }

  /**
   * Get addComment
   * @return addComment
   */
  @javax.annotation.Nullable
  public List<NewComment> getAddComment() {
    return addComment;
  }

  public void setAddComment(List<NewComment> addComment) {
    this.addComment = addComment;
  }


  public CommentsBatch addReply(Map<String, List<NewReply>> addReply) {
    this.addReply = addReply;
    return this;
  }

  public CommentsBatch putAddReplyItem(String key, List<NewReply> addReplyItem) {
    if (this.addReply == null) {
      this.addReply = new HashMap<>();
    }
    this.addReply.put(key, addReplyItem);
    return this;
  }

  /**
   * Get addReply
   * @return addReply
   */
  @javax.annotation.Nullable
  public Map<String, List<NewReply>> getAddReply() {
    return addReply;
  }

  public void setAddReply(Map<String, List<NewReply>> addReply) {
    this.addReply = addReply;
  }


  public CommentsBatch deleteComment(List<String> deleteComment) {
    this.deleteComment = deleteComment;
    return this;
  }

  public CommentsBatch addDeleteCommentItem(String deleteCommentItem) {
    if (this.deleteComment == null) {
      this.deleteComment = new ArrayList<>();
    }
    this.deleteComment.add(deleteCommentItem);
    return this;
  }

  /**
   * Get deleteComment
   * @return deleteComment
   */
  @javax.annotation.Nullable
  public List<String> getDeleteComment() {
    return deleteComment;
  }

  public void setDeleteComment(List<String> deleteComment) {
    this.deleteComment = deleteComment;
  }


  public CommentsBatch deleteReply(Map<String, Set<String>> deleteReply) {
    this.deleteReply = deleteReply;
    return this;
  }

  public CommentsBatch putDeleteReplyItem(String key, Set<String> deleteReplyItem) {
    if (this.deleteReply == null) {
      this.deleteReply = new HashMap<>();
    }
    this.deleteReply.put(key, deleteReplyItem);
    return this;
  }

  /**
   * Get deleteReply
   * @return deleteReply
   */
  @javax.annotation.Nullable
  public Map<String, Set<String>> getDeleteReply() {
    return deleteReply;
  }

  public void setDeleteReply(Map<String, Set<String>> deleteReply) {
    this.deleteReply = deleteReply;
  }


  public CommentsBatch updateComment(Map<String, ClosableCommentPatch> updateComment) {
    this.updateComment = updateComment;
    return this;
  }

  public CommentsBatch putUpdateCommentItem(String key, ClosableCommentPatch updateCommentItem) {
    if (this.updateComment == null) {
      this.updateComment = new HashMap<>();
    }
    this.updateComment.put(key, updateCommentItem);
    return this;
  }

  /**
   * Get updateComment
   * @return updateComment
   */
  @javax.annotation.Nullable
  public Map<String, ClosableCommentPatch> getUpdateComment() {
    return updateComment;
  }

  public void setUpdateComment(Map<String, ClosableCommentPatch> updateComment) {
    this.updateComment = updateComment;
  }


  public CommentsBatch updateReply(Map<String, Map<String, CommentPatch>> updateReply) {
    this.updateReply = updateReply;
    return this;
  }

  public CommentsBatch putUpdateReplyItem(String key, Map<String, CommentPatch> updateReplyItem) {
    if (this.updateReply == null) {
      this.updateReply = new HashMap<>();
    }
    this.updateReply.put(key, updateReplyItem);
    return this;
  }

  /**
   * Get updateReply
   * @return updateReply
   */
  @javax.annotation.Nullable
  public Map<String, Map<String, CommentPatch>> getUpdateReply() {
    return updateReply;
  }

  public void setUpdateReply(Map<String, Map<String, CommentPatch>> updateReply) {
    this.updateReply = updateReply;
  }


  public CommentsBatch updateStatus(Map<String, InnerEnum> updateStatus) {
    this.updateStatus = updateStatus;
    return this;
  }

  public CommentsBatch putUpdateStatusItem(String key, InnerEnum updateStatusItem) {
    if (this.updateStatus == null) {
      this.updateStatus = new HashMap<>();
    }
    this.updateStatus.put(key, updateStatusItem);
    return this;
  }

  /**
   * Get updateStatus
   * @return updateStatus
   */
  @javax.annotation.Nullable
  public Map<String, InnerEnum> getUpdateStatus() {
    return updateStatus;
  }

  public void setUpdateStatus(Map<String, InnerEnum> updateStatus) {
    this.updateStatus = updateStatus;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    CommentsBatch commentsBatch = (CommentsBatch) o;
    return Objects.equals(this.addComment, commentsBatch.addComment) &&
        Objects.equals(this.addReply, commentsBatch.addReply) &&
        Objects.equals(this.deleteComment, commentsBatch.deleteComment) &&
        Objects.equals(this.deleteReply, commentsBatch.deleteReply) &&
        Objects.equals(this.updateComment, commentsBatch.updateComment) &&
        Objects.equals(this.updateReply, commentsBatch.updateReply) &&
        Objects.equals(this.updateStatus, commentsBatch.updateStatus);
  }

  @Override
  public int hashCode() {
    return Objects.hash(addComment, addReply, deleteComment, deleteReply, updateComment, updateReply, updateStatus);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class CommentsBatch {\n");
    sb.append("    addComment: ").append(toIndentedString(addComment)).append("\n");
    sb.append("    addReply: ").append(toIndentedString(addReply)).append("\n");
    sb.append("    deleteComment: ").append(toIndentedString(deleteComment)).append("\n");
    sb.append("    deleteReply: ").append(toIndentedString(deleteReply)).append("\n");
    sb.append("    updateComment: ").append(toIndentedString(updateComment)).append("\n");
    sb.append("    updateReply: ").append(toIndentedString(updateReply)).append("\n");
    sb.append("    updateStatus: ").append(toIndentedString(updateStatus)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("addComment");
    openapiFields.add("addReply");
    openapiFields.add("deleteComment");
    openapiFields.add("deleteReply");
    openapiFields.add("updateComment");
    openapiFields.add("updateReply");
    openapiFields.add("updateStatus");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to CommentsBatch
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!CommentsBatch.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in CommentsBatch is not found in the empty JSON string", CommentsBatch.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!CommentsBatch.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `CommentsBatch` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if (jsonObj.get("addComment") != null && !jsonObj.get("addComment").isJsonNull()) {
        JsonArray jsonArrayaddComment = jsonObj.getAsJsonArray("addComment");
        if (jsonArrayaddComment != null) {
          // ensure the json data is an array
          if (!jsonObj.get("addComment").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `addComment` to be an array in the JSON string but got `%s`", jsonObj.get("addComment").toString()));
          }

          // validate the optional field `addComment` (array)
          for (int i = 0; i < jsonArrayaddComment.size(); i++) {
            NewComment.validateJsonElement(jsonArrayaddComment.get(i));
          };
        }
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("deleteComment") != null && !jsonObj.get("deleteComment").isJsonNull() && !jsonObj.get("deleteComment").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `deleteComment` to be an array in the JSON string but got `%s`", jsonObj.get("deleteComment").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!CommentsBatch.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'CommentsBatch' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<CommentsBatch> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(CommentsBatch.class));

       return (TypeAdapter<T>) new TypeAdapter<CommentsBatch>() {
           @Override
           public void write(JsonWriter out, CommentsBatch value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public CommentsBatch read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of CommentsBatch given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of CommentsBatch
   * @throws IOException if the JSON string is invalid with respect to CommentsBatch
   */
  public static CommentsBatch fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, CommentsBatch.class);
  }

  /**
   * Convert an instance of CommentsBatch to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

