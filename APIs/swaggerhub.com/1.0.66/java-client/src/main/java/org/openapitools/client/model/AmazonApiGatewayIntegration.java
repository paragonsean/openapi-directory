/*
 * SwaggerHub Registry API
 * # Overview Use SwaggerHub Registry API to access, manage, and update the following resources in SwaggerHub, bypassing the web interface:   * APIs   * Domains   * Integrations   * Projects   * Templates   SwaggerHub also provides the [User Management API](https://app.swaggerhub.com/apis-docs/swagger-hub/user-management-api/) to get information about organizations and manage organization members.  # Base URL Use the following base URL for SwaggerHub SaaS:          http(s)://api.swaggerhub.com  **Note:** This documentation is for SwaggerHub SaaS. On-Premise customers should use the bundled API definition, which can be found at the URLs provided below.  Version 1.29.0 or later:      http(s)://SERVER/v1/openapi.yaml - YAML version     http(s)://SERVER/v1/openapi.json - JSON version  Earlier versions:      http(s)://SERVER/v1/swagger.yaml - YAML version     http(s)://SERVER/v1/swagger.json - JSON version  # Authentication Operations that update data or access private data require authentication using an API key. You can find your personal API key on the [API Keys](https://app.swaggerhub.com/settings/apiKey) page in your account settings. Send this key in the `Authorization` header when making requests to the Registry API:      Authorization: YOUR_API_KEY  To test API calls from this documentation page, click the **Authorize** button below and paste your API key there.  **Important:** Keep the API key secure and do not store it directly in your code. # Tools In addition to calling the Registry API directly, you can use the following tools to interact with the API from the command line or CI/CD pipeline:   * [SwaggerHub CLI](https://www.npmjs.com/package/swaggerhub-cli)   * [Maven plugin](https://github.com/swagger-api/swaggerhub-maven-plugin)  * [Gradle plugin](https://github.com/swagger-api/swaggerhub-gradle-plugin) 
 *
 * The version of the OpenAPI document: 1.0.66
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import java.util.UUID;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Configuration details for the [Amazon API Gateway](https://support.smartbear.com/swaggerhub/docs/integrations/amazon-api-gateway.html) integration
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:18:22.732961-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class AmazonApiGatewayIntegration {
  public static final String SERIALIZED_NAME_ENABLED = "enabled";
  @SerializedName(SERIALIZED_NAME_ENABLED)
  private Boolean enabled = true;

  public static final String SERIALIZED_NAME_ID = "id";
  @SerializedName(SERIALIZED_NAME_ID)
  private UUID id;

  public static final String SERIALIZED_NAME_NAME = "name";
  @SerializedName(SERIALIZED_NAME_NAME)
  private String name;

  public static final String SERIALIZED_NAME_ACCESS_KEY = "accessKey";
  @SerializedName(SERIALIZED_NAME_ACCESS_KEY)
  private String accessKey;

  public static final String SERIALIZED_NAME_API_ID = "apiId";
  @SerializedName(SERIALIZED_NAME_API_ID)
  private String apiId;

  /**
   * How to handle the API&#39;s &#x60;basePath&#x60; value. Refer to [AWS documentation](https://docs.aws.amazon.com/apigateway/latest/developerguide/api-gateway-import-api-basePath.html) for details.
   */
  @JsonAdapter(BasePathModeEnum.Adapter.class)
  public enum BasePathModeEnum {
    IGNORE("ignore"),
    
    PREPEND("prepend"),
    
    SPLIT("split");

    private String value;

    BasePathModeEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static BasePathModeEnum fromValue(String value) {
      for (BasePathModeEnum b : BasePathModeEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<BasePathModeEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final BasePathModeEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public BasePathModeEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return BasePathModeEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      BasePathModeEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_BASE_PATH_MODE = "basePathMode";
  @SerializedName(SERIALIZED_NAME_BASE_PATH_MODE)
  private BasePathModeEnum basePathMode = BasePathModeEnum.IGNORE;

  /**
   * Should be \&quot;on save\&quot;. The value \&quot;never\&quot; means the integration is disabled.
   */
  @JsonAdapter(DeploymentModeEnum.Adapter.class)
  public enum DeploymentModeEnum {
    ON_SAVE("on save"),
    
    NEVER("never");

    private String value;

    DeploymentModeEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static DeploymentModeEnum fromValue(String value) {
      for (DeploymentModeEnum b : DeploymentModeEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<DeploymentModeEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final DeploymentModeEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public DeploymentModeEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return DeploymentModeEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      DeploymentModeEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_DEPLOYMENT_MODE = "deploymentMode";
  @SerializedName(SERIALIZED_NAME_DEPLOYMENT_MODE)
  private DeploymentModeEnum deploymentMode = DeploymentModeEnum.ON_SAVE;

  /**
   * How to update an existing API in AWS
   */
  @JsonAdapter(PublishModeEnum.Adapter.class)
  public enum PublishModeEnum {
    MERGE("merge"),
    
    OVERWRITE("overwrite");

    private String value;

    PublishModeEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static PublishModeEnum fromValue(String value) {
      for (PublishModeEnum b : PublishModeEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<PublishModeEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final PublishModeEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public PublishModeEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return PublishModeEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      PublishModeEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_PUBLISH_MODE = "publishMode";
  @SerializedName(SERIALIZED_NAME_PUBLISH_MODE)
  private PublishModeEnum publishMode = PublishModeEnum.MERGE;

  /**
   * AWS region where the API will be published
   */
  @JsonAdapter(RegionEnum.Adapter.class)
  public enum RegionEnum {
    US_EAST_1("us-east-1"),
    
    US_EAST_2("us-east-2"),
    
    US_WEST_1("us-west-1"),
    
    US_WEST_2("us-west-2"),
    
    EU_WEST_1("eu-west-1"),
    
    EU_WEST_2("eu-west-2"),
    
    EU_WEST_3("eu-west-3"),
    
    EU_CENTRAL_1("eu-central-1"),
    
    EU_NORTH_1("eu-north-1"),
    
    EU_SOUTH_1("eu-south-1"),
    
    AP_EAST_1("ap-east-1"),
    
    AP_SOUTH_1("ap-south-1"),
    
    AP_SOUTHEAST_1("ap-southeast-1"),
    
    AP_SOUTHEAST_2("ap-southeast-2"),
    
    AP_NORTHEAST_1("ap-northeast-1"),
    
    AP_NORTHEAST_2("ap-northeast-2"),
    
    SA_EAST_1("sa-east-1"),
    
    CN_NORTH_1("cn-north-1"),
    
    CN_NORTHWEST_1("cn-northwest-1"),
    
    CA_CENTRAL_1("ca-central-1"),
    
    ME_SOUTH_1("me-south-1"),
    
    AF_SOUTH_1("af-south-1");

    private String value;

    RegionEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static RegionEnum fromValue(String value) {
      for (RegionEnum b : RegionEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<RegionEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final RegionEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public RegionEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return RegionEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      RegionEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_REGION = "region";
  @SerializedName(SERIALIZED_NAME_REGION)
  private RegionEnum region;

  public static final String SERIALIZED_NAME_SECRET_KEY = "secretKey";
  @SerializedName(SERIALIZED_NAME_SECRET_KEY)
  private String secretKey;

  public static final String SERIALIZED_NAME_UPDATE_DEFINITION = "updateDefinition";
  @SerializedName(SERIALIZED_NAME_UPDATE_DEFINITION)
  private Boolean updateDefinition = false;

  /**
   * Integration type
   */
  @JsonAdapter(ConfigTypeEnum.Adapter.class)
  public enum ConfigTypeEnum {
    AMAZON_API_GATEWAY("AMAZON_API_GATEWAY");

    private String value;

    ConfigTypeEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static ConfigTypeEnum fromValue(String value) {
      for (ConfigTypeEnum b : ConfigTypeEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<ConfigTypeEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final ConfigTypeEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public ConfigTypeEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return ConfigTypeEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      ConfigTypeEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_CONFIG_TYPE = "configType";
  @SerializedName(SERIALIZED_NAME_CONFIG_TYPE)
  private ConfigTypeEnum configType;

  public static final String SERIALIZED_NAME_PROXY_TO_ADDRESS = "proxyToAddress";
  @SerializedName(SERIALIZED_NAME_PROXY_TO_ADDRESS)
  private String proxyToAddress;

  public AmazonApiGatewayIntegration() {
  }

  public AmazonApiGatewayIntegration(
     UUID id
  ) {
    this();
    this.id = id;
  }

  public AmazonApiGatewayIntegration enabled(Boolean enabled) {
    this.enabled = enabled;
    return this;
  }

  /**
   * Whether the integration is enabled or disabled
   * @return enabled
   */
  @javax.annotation.Nullable
  public Boolean getEnabled() {
    return enabled;
  }

  public void setEnabled(Boolean enabled) {
    this.enabled = enabled;
  }


  /**
   * ID of the integration
   * @return id
   */
  @javax.annotation.Nullable
  public UUID getId() {
    return id;
  }



  public AmazonApiGatewayIntegration name(String name) {
    this.name = name;
    return this;
  }

  /**
   * The display name of the integration. Must be unique among all integrations configured for the given API version.
   * @return name
   */
  @javax.annotation.Nonnull
  public String getName() {
    return name;
  }

  public void setName(String name) {
    this.name = name;
  }


  public AmazonApiGatewayIntegration accessKey(String accessKey) {
    this.accessKey = accessKey;
    return this;
  }

  /**
   * AWS access key. Write-only property. Required to create and update the integration.
   * @return accessKey
   */
  @javax.annotation.Nullable
  public String getAccessKey() {
    return accessKey;
  }

  public void setAccessKey(String accessKey) {
    this.accessKey = accessKey;
  }


  public AmazonApiGatewayIntegration apiId(String apiId) {
    this.apiId = apiId;
    return this;
  }

  /**
   * AWS ID of the API to update. Empty value will create a new API in AWS.
   * @return apiId
   */
  @javax.annotation.Nullable
  public String getApiId() {
    return apiId;
  }

  public void setApiId(String apiId) {
    this.apiId = apiId;
  }


  public AmazonApiGatewayIntegration basePathMode(BasePathModeEnum basePathMode) {
    this.basePathMode = basePathMode;
    return this;
  }

  /**
   * How to handle the API&#39;s &#x60;basePath&#x60; value. Refer to [AWS documentation](https://docs.aws.amazon.com/apigateway/latest/developerguide/api-gateway-import-api-basePath.html) for details.
   * @return basePathMode
   */
  @javax.annotation.Nullable
  public BasePathModeEnum getBasePathMode() {
    return basePathMode;
  }

  public void setBasePathMode(BasePathModeEnum basePathMode) {
    this.basePathMode = basePathMode;
  }


  public AmazonApiGatewayIntegration deploymentMode(DeploymentModeEnum deploymentMode) {
    this.deploymentMode = deploymentMode;
    return this;
  }

  /**
   * Should be \&quot;on save\&quot;. The value \&quot;never\&quot; means the integration is disabled.
   * @return deploymentMode
   */
  @javax.annotation.Nullable
  public DeploymentModeEnum getDeploymentMode() {
    return deploymentMode;
  }

  public void setDeploymentMode(DeploymentModeEnum deploymentMode) {
    this.deploymentMode = deploymentMode;
  }


  public AmazonApiGatewayIntegration publishMode(PublishModeEnum publishMode) {
    this.publishMode = publishMode;
    return this;
  }

  /**
   * How to update an existing API in AWS
   * @return publishMode
   */
  @javax.annotation.Nullable
  public PublishModeEnum getPublishMode() {
    return publishMode;
  }

  public void setPublishMode(PublishModeEnum publishMode) {
    this.publishMode = publishMode;
  }


  public AmazonApiGatewayIntegration region(RegionEnum region) {
    this.region = region;
    return this;
  }

  /**
   * AWS region where the API will be published
   * @return region
   */
  @javax.annotation.Nonnull
  public RegionEnum getRegion() {
    return region;
  }

  public void setRegion(RegionEnum region) {
    this.region = region;
  }


  public AmazonApiGatewayIntegration secretKey(String secretKey) {
    this.secretKey = secretKey;
    return this;
  }

  /**
   * AWS secret key. Write-only property. Required to create and update the integration.
   * @return secretKey
   */
  @javax.annotation.Nullable
  public String getSecretKey() {
    return secretKey;
  }

  public void setSecretKey(String secretKey) {
    this.secretKey = secretKey;
  }


  public AmazonApiGatewayIntegration updateDefinition(Boolean updateDefinition) {
    this.updateDefinition = updateDefinition;
    return this;
  }

  /**
   * Whether to update the API definition with Amazon-specific extensions and compatibility modifications
   * @return updateDefinition
   */
  @javax.annotation.Nullable
  public Boolean getUpdateDefinition() {
    return updateDefinition;
  }

  public void setUpdateDefinition(Boolean updateDefinition) {
    this.updateDefinition = updateDefinition;
  }


  public AmazonApiGatewayIntegration configType(ConfigTypeEnum configType) {
    this.configType = configType;
    return this;
  }

  /**
   * Integration type
   * @return configType
   */
  @javax.annotation.Nonnull
  public ConfigTypeEnum getConfigType() {
    return configType;
  }

  public void setConfigType(ConfigTypeEnum configType) {
    this.configType = configType;
  }


  public AmazonApiGatewayIntegration proxyToAddress(String proxyToAddress) {
    this.proxyToAddress = proxyToAddress;
    return this;
  }

  /**
   * The URL of the backend endpoint to which API Gateway will proxy the requests
   * @return proxyToAddress
   */
  @javax.annotation.Nonnull
  public String getProxyToAddress() {
    return proxyToAddress;
  }

  public void setProxyToAddress(String proxyToAddress) {
    this.proxyToAddress = proxyToAddress;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    AmazonApiGatewayIntegration amazonApiGatewayIntegration = (AmazonApiGatewayIntegration) o;
    return Objects.equals(this.enabled, amazonApiGatewayIntegration.enabled) &&
        Objects.equals(this.id, amazonApiGatewayIntegration.id) &&
        Objects.equals(this.name, amazonApiGatewayIntegration.name) &&
        Objects.equals(this.accessKey, amazonApiGatewayIntegration.accessKey) &&
        Objects.equals(this.apiId, amazonApiGatewayIntegration.apiId) &&
        Objects.equals(this.basePathMode, amazonApiGatewayIntegration.basePathMode) &&
        Objects.equals(this.deploymentMode, amazonApiGatewayIntegration.deploymentMode) &&
        Objects.equals(this.publishMode, amazonApiGatewayIntegration.publishMode) &&
        Objects.equals(this.region, amazonApiGatewayIntegration.region) &&
        Objects.equals(this.secretKey, amazonApiGatewayIntegration.secretKey) &&
        Objects.equals(this.updateDefinition, amazonApiGatewayIntegration.updateDefinition) &&
        Objects.equals(this.configType, amazonApiGatewayIntegration.configType) &&
        Objects.equals(this.proxyToAddress, amazonApiGatewayIntegration.proxyToAddress);
  }

  @Override
  public int hashCode() {
    return Objects.hash(enabled, id, name, accessKey, apiId, basePathMode, deploymentMode, publishMode, region, secretKey, updateDefinition, configType, proxyToAddress);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class AmazonApiGatewayIntegration {\n");
    sb.append("    enabled: ").append(toIndentedString(enabled)).append("\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    accessKey: ").append("*").append("\n");
    sb.append("    apiId: ").append(toIndentedString(apiId)).append("\n");
    sb.append("    basePathMode: ").append(toIndentedString(basePathMode)).append("\n");
    sb.append("    deploymentMode: ").append(toIndentedString(deploymentMode)).append("\n");
    sb.append("    publishMode: ").append(toIndentedString(publishMode)).append("\n");
    sb.append("    region: ").append(toIndentedString(region)).append("\n");
    sb.append("    secretKey: ").append("*").append("\n");
    sb.append("    updateDefinition: ").append(toIndentedString(updateDefinition)).append("\n");
    sb.append("    configType: ").append(toIndentedString(configType)).append("\n");
    sb.append("    proxyToAddress: ").append(toIndentedString(proxyToAddress)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("enabled");
    openapiFields.add("id");
    openapiFields.add("name");
    openapiFields.add("accessKey");
    openapiFields.add("apiId");
    openapiFields.add("basePathMode");
    openapiFields.add("deploymentMode");
    openapiFields.add("publishMode");
    openapiFields.add("region");
    openapiFields.add("secretKey");
    openapiFields.add("updateDefinition");
    openapiFields.add("configType");
    openapiFields.add("proxyToAddress");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("name");
    openapiRequiredFields.add("region");
    openapiRequiredFields.add("configType");
    openapiRequiredFields.add("proxyToAddress");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to AmazonApiGatewayIntegration
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!AmazonApiGatewayIntegration.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in AmazonApiGatewayIntegration is not found in the empty JSON string", AmazonApiGatewayIntegration.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!AmazonApiGatewayIntegration.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `AmazonApiGatewayIntegration` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : AmazonApiGatewayIntegration.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("id") != null && !jsonObj.get("id").isJsonNull()) && !jsonObj.get("id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("id").toString()));
      }
      if (!jsonObj.get("name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("name").toString()));
      }
      if ((jsonObj.get("accessKey") != null && !jsonObj.get("accessKey").isJsonNull()) && !jsonObj.get("accessKey").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `accessKey` to be a primitive type in the JSON string but got `%s`", jsonObj.get("accessKey").toString()));
      }
      if ((jsonObj.get("apiId") != null && !jsonObj.get("apiId").isJsonNull()) && !jsonObj.get("apiId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `apiId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("apiId").toString()));
      }
      if ((jsonObj.get("basePathMode") != null && !jsonObj.get("basePathMode").isJsonNull()) && !jsonObj.get("basePathMode").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `basePathMode` to be a primitive type in the JSON string but got `%s`", jsonObj.get("basePathMode").toString()));
      }
      // validate the optional field `basePathMode`
      if (jsonObj.get("basePathMode") != null && !jsonObj.get("basePathMode").isJsonNull()) {
        BasePathModeEnum.validateJsonElement(jsonObj.get("basePathMode"));
      }
      if ((jsonObj.get("deploymentMode") != null && !jsonObj.get("deploymentMode").isJsonNull()) && !jsonObj.get("deploymentMode").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `deploymentMode` to be a primitive type in the JSON string but got `%s`", jsonObj.get("deploymentMode").toString()));
      }
      // validate the optional field `deploymentMode`
      if (jsonObj.get("deploymentMode") != null && !jsonObj.get("deploymentMode").isJsonNull()) {
        DeploymentModeEnum.validateJsonElement(jsonObj.get("deploymentMode"));
      }
      if ((jsonObj.get("publishMode") != null && !jsonObj.get("publishMode").isJsonNull()) && !jsonObj.get("publishMode").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `publishMode` to be a primitive type in the JSON string but got `%s`", jsonObj.get("publishMode").toString()));
      }
      // validate the optional field `publishMode`
      if (jsonObj.get("publishMode") != null && !jsonObj.get("publishMode").isJsonNull()) {
        PublishModeEnum.validateJsonElement(jsonObj.get("publishMode"));
      }
      if (!jsonObj.get("region").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `region` to be a primitive type in the JSON string but got `%s`", jsonObj.get("region").toString()));
      }
      // validate the required field `region`
      RegionEnum.validateJsonElement(jsonObj.get("region"));
      if ((jsonObj.get("secretKey") != null && !jsonObj.get("secretKey").isJsonNull()) && !jsonObj.get("secretKey").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `secretKey` to be a primitive type in the JSON string but got `%s`", jsonObj.get("secretKey").toString()));
      }
      if (!jsonObj.get("configType").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `configType` to be a primitive type in the JSON string but got `%s`", jsonObj.get("configType").toString()));
      }
      // validate the required field `configType`
      ConfigTypeEnum.validateJsonElement(jsonObj.get("configType"));
      if (!jsonObj.get("proxyToAddress").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `proxyToAddress` to be a primitive type in the JSON string but got `%s`", jsonObj.get("proxyToAddress").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!AmazonApiGatewayIntegration.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'AmazonApiGatewayIntegration' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<AmazonApiGatewayIntegration> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(AmazonApiGatewayIntegration.class));

       return (TypeAdapter<T>) new TypeAdapter<AmazonApiGatewayIntegration>() {
           @Override
           public void write(JsonWriter out, AmazonApiGatewayIntegration value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public AmazonApiGatewayIntegration read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of AmazonApiGatewayIntegration given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of AmazonApiGatewayIntegration
   * @throws IOException if the JSON string is invalid with respect to AmazonApiGatewayIntegration
   */
  public static AmazonApiGatewayIntegration fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, AmazonApiGatewayIntegration.class);
  }

  /**
   * Convert an instance of AmazonApiGatewayIntegration to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

