/*
 * SwaggerHub Registry API
 * # Overview Use SwaggerHub Registry API to access, manage, and update the following resources in SwaggerHub, bypassing the web interface:   * APIs   * Domains   * Integrations   * Projects   * Templates   SwaggerHub also provides the [User Management API](https://app.swaggerhub.com/apis-docs/swagger-hub/user-management-api/) to get information about organizations and manage organization members.  # Base URL Use the following base URL for SwaggerHub SaaS:          http(s)://api.swaggerhub.com  **Note:** This documentation is for SwaggerHub SaaS. On-Premise customers should use the bundled API definition, which can be found at the URLs provided below.  Version 1.29.0 or later:      http(s)://SERVER/v1/openapi.yaml - YAML version     http(s)://SERVER/v1/openapi.json - JSON version  Earlier versions:      http(s)://SERVER/v1/swagger.yaml - YAML version     http(s)://SERVER/v1/swagger.json - JSON version  # Authentication Operations that update data or access private data require authentication using an API key. You can find your personal API key on the [API Keys](https://app.swaggerhub.com/settings/apiKey) page in your account settings. Send this key in the `Authorization` header when making requests to the Registry API:      Authorization: YOUR_API_KEY  To test API calls from this documentation page, click the **Authorize** button below and paste your API key there.  **Important:** Keep the API key secure and do not store it directly in your code. # Tools In addition to calling the Registry API directly, you can use the following tools to interact with the API from the command line or CI/CD pipeline:   * [SwaggerHub CLI](https://www.npmjs.com/package/swaggerhub-cli)   * [Maven plugin](https://github.com/swagger-api/swaggerhub-maven-plugin)  * [Gradle plugin](https://github.com/swagger-api/swaggerhub-gradle-plugin) 
 *
 * The version of the OpenAPI document: 1.0.66
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import java.util.UUID;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Configuration details for the Bitbucket Cloud integration
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:18:22.732961-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class BitbucketCloudIntegration {
  public static final String SERIALIZED_NAME_ENABLED = "enabled";
  @SerializedName(SERIALIZED_NAME_ENABLED)
  private Boolean enabled = true;

  public static final String SERIALIZED_NAME_ID = "id";
  @SerializedName(SERIALIZED_NAME_ID)
  private UUID id;

  public static final String SERIALIZED_NAME_NAME = "name";
  @SerializedName(SERIALIZED_NAME_NAME)
  private String name;

  public static final String SERIALIZED_NAME_BRANCH = "branch";
  @SerializedName(SERIALIZED_NAME_BRANCH)
  private String branch;

  public static final String SERIALIZED_NAME_IGNORED_PATHS = "ignoredPaths";
  @SerializedName(SERIALIZED_NAME_IGNORED_PATHS)
  private List<String> ignoredPaths = new ArrayList<>();

  public static final String SERIALIZED_NAME_MANAGED_PATHS = "managedPaths";
  @SerializedName(SERIALIZED_NAME_MANAGED_PATHS)
  private List<String> managedPaths = new ArrayList<>();

  public static final String SERIALIZED_NAME_OUTPUT_FILE = "outputFile";
  @SerializedName(SERIALIZED_NAME_OUTPUT_FILE)
  private String outputFile;

  public static final String SERIALIZED_NAME_OUTPUT_FOLDER = "outputFolder";
  @SerializedName(SERIALIZED_NAME_OUTPUT_FOLDER)
  private String outputFolder;

  public static final String SERIALIZED_NAME_PROVIDED_PATHS = "providedPaths";
  @SerializedName(SERIALIZED_NAME_PROVIDED_PATHS)
  private List<String> providedPaths = new ArrayList<>();

  public static final String SERIALIZED_NAME_REPOSITORY = "repository";
  @SerializedName(SERIALIZED_NAME_REPOSITORY)
  private String repository;

  /**
   * \&quot;Basic Sync\&quot; or \&quot;Advanced Sync\&quot;. Basic Sync will manage all files and folders in the branch. Advanced Sync allows you to define which files and folders will be managed by SwaggerHub. Note: If \&quot;Advanced Sync\&quot; is used, you must specify either &#x60;providedPaths&#x60; or &#x60;managedPaths&#x60;. 
   */
  @JsonAdapter(SyncMethodEnum.Adapter.class)
  public enum SyncMethodEnum {
    BASIC_SYNC("Basic Sync"),
    
    ADVANCED_SYNC("Advanced Sync");

    private String value;

    SyncMethodEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static SyncMethodEnum fromValue(String value) {
      for (SyncMethodEnum b : SyncMethodEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<SyncMethodEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final SyncMethodEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public SyncMethodEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return SyncMethodEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      SyncMethodEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_SYNC_METHOD = "syncMethod";
  @SerializedName(SERIALIZED_NAME_SYNC_METHOD)
  private SyncMethodEnum syncMethod;

  public static final String SERIALIZED_NAME_TARGET = "target";
  @SerializedName(SERIALIZED_NAME_TARGET)
  private String target;

  /**
   * Integration type
   */
  @JsonAdapter(ConfigTypeEnum.Adapter.class)
  public enum ConfigTypeEnum {
    BITBUCKET_CLOUD("BITBUCKET_CLOUD");

    private String value;

    ConfigTypeEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static ConfigTypeEnum fromValue(String value) {
      for (ConfigTypeEnum b : ConfigTypeEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<ConfigTypeEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final ConfigTypeEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public ConfigTypeEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return ConfigTypeEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      ConfigTypeEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_CONFIG_TYPE = "configType";
  @SerializedName(SERIALIZED_NAME_CONFIG_TYPE)
  private ConfigTypeEnum configType;

  public static final String SERIALIZED_NAME_OWNER = "owner";
  @SerializedName(SERIALIZED_NAME_OWNER)
  private String owner;

  public static final String SERIALIZED_NAME_PASSWORD = "password";
  @SerializedName(SERIALIZED_NAME_PASSWORD)
  private String password;

  public static final String SERIALIZED_NAME_USERNAME = "username";
  @SerializedName(SERIALIZED_NAME_USERNAME)
  private String username;

  public BitbucketCloudIntegration() {
  }

  public BitbucketCloudIntegration(
     UUID id
  ) {
    this();
    this.id = id;
  }

  public BitbucketCloudIntegration enabled(Boolean enabled) {
    this.enabled = enabled;
    return this;
  }

  /**
   * Whether the integration is enabled or disabled
   * @return enabled
   */
  @javax.annotation.Nullable
  public Boolean getEnabled() {
    return enabled;
  }

  public void setEnabled(Boolean enabled) {
    this.enabled = enabled;
  }


  /**
   * ID of the integration
   * @return id
   */
  @javax.annotation.Nullable
  public UUID getId() {
    return id;
  }



  public BitbucketCloudIntegration name(String name) {
    this.name = name;
    return this;
  }

  /**
   * The display name of the integration. Must be unique among all integrations configured for the given API version.
   * @return name
   */
  @javax.annotation.Nonnull
  public String getName() {
    return name;
  }

  public void setName(String name) {
    this.name = name;
  }


  public BitbucketCloudIntegration branch(String branch) {
    this.branch = branch;
    return this;
  }

  /**
   * The branch to synchronize to. If it does not exist in the repository, it will be created based on the default branch. Branch name must not contain whitespace characters. 
   * @return branch
   */
  @javax.annotation.Nonnull
  public String getBranch() {
    return branch;
  }

  public void setBranch(String branch) {
    this.branch = branch;
  }


  public BitbucketCloudIntegration ignoredPaths(List<String> ignoredPaths) {
    this.ignoredPaths = ignoredPaths;
    return this;
  }

  public BitbucketCloudIntegration addIgnoredPathsItem(String ignoredPathsItem) {
    if (this.ignoredPaths == null) {
      this.ignoredPaths = new ArrayList<>();
    }
    this.ignoredPaths.add(ignoredPathsItem);
    return this;
  }

  /**
   * Ignored Paths: These files and folders (if exist) will remain as is and will not be changed in any way. Paths are relative to the &#x60;outputFolder&#x60;. Use forward slashes &#x60;/&#x60; as folder separators, but do not add &#x60;/&#x60; at the beginning of the paths. 
   * @return ignoredPaths
   */
  @javax.annotation.Nullable
  public List<String> getIgnoredPaths() {
    return ignoredPaths;
  }

  public void setIgnoredPaths(List<String> ignoredPaths) {
    this.ignoredPaths = ignoredPaths;
  }


  public BitbucketCloudIntegration managedPaths(List<String> managedPaths) {
    this.managedPaths = managedPaths;
    return this;
  }

  public BitbucketCloudIntegration addManagedPathsItem(String managedPathsItem) {
    if (this.managedPaths == null) {
      this.managedPaths = new ArrayList<>();
    }
    this.managedPaths.add(managedPathsItem);
    return this;
  }

  /**
   * Fully Managed Paths: These files and folders will be completely managed by the integration. New files will be added, the existing files will be overwritten, and the files that are no longer used will be deleted.  Paths are relative to the &#x60;outputFolder&#x60;. Use forward slashes &#x60;/&#x60; as folder separators, but do not add &#x60;/&#x60; at the beginning of the paths. &#x60;*&#x60; means all files in the &#x60;outputFolder&#x60;. 
   * @return managedPaths
   */
  @javax.annotation.Nullable
  public List<String> getManagedPaths() {
    return managedPaths;
  }

  public void setManagedPaths(List<String> managedPaths) {
    this.managedPaths = managedPaths;
  }


  public BitbucketCloudIntegration outputFile(String outputFile) {
    this.outputFile = outputFile;
    return this;
  }

  /**
   * Required if &#x60;target&#x60; is \&quot;YAML (Resolved)\&quot;, \&quot;YAML (Unresolved)\&quot;, \&quot;JSON (Resolved)\&quot;, or \&quot;JSON (Unresolved)\&quot;. Specifies the file name for the generated definition.
   * @return outputFile
   */
  @javax.annotation.Nullable
  public String getOutputFile() {
    return outputFile;
  }

  public void setOutputFile(String outputFile) {
    this.outputFile = outputFile;
  }


  public BitbucketCloudIntegration outputFolder(String outputFolder) {
    this.outputFolder = outputFolder;
    return this;
  }

  /**
   * The output folder for the generated code or definition, relative to the repository root. If this folder does not exist, it will be created. If the output folder is not specified, SwaggerHub will create files and folders in the repository root. Use forward slashes &#x60;/&#x60; as path separators, but do not add &#x60;/&#x60; at the beginning. 
   * @return outputFolder
   */
  @javax.annotation.Nonnull
  public String getOutputFolder() {
    return outputFolder;
  }

  public void setOutputFolder(String outputFolder) {
    this.outputFolder = outputFolder;
  }


  public BitbucketCloudIntegration providedPaths(List<String> providedPaths) {
    this.providedPaths = providedPaths;
    return this;
  }

  public BitbucketCloudIntegration addProvidedPathsItem(String providedPathsItem) {
    if (this.providedPaths == null) {
      this.providedPaths = new ArrayList<>();
    }
    this.providedPaths.add(providedPathsItem);
    return this;
  }

  /**
   * Partially Managed Paths: These files and folders will be created only if they do not exist. Existing files will not be modified. Paths are relative to the &#x60;outputFolder&#x60;. Use forward slashes &#x60;/&#x60; as folder separators, but do not add &#x60;/&#x60; at the beginning of the paths. &#x60;*&#x60; means all files in the &#x60;outputFolder&#x60;. 
   * @return providedPaths
   */
  @javax.annotation.Nullable
  public List<String> getProvidedPaths() {
    return providedPaths;
  }

  public void setProvidedPaths(List<String> providedPaths) {
    this.providedPaths = providedPaths;
  }


  public BitbucketCloudIntegration repository(String repository) {
    this.repository = repository;
    return this;
  }

  /**
   * The repository to synchronize with
   * @return repository
   */
  @javax.annotation.Nonnull
  public String getRepository() {
    return repository;
  }

  public void setRepository(String repository) {
    this.repository = repository;
  }


  public BitbucketCloudIntegration syncMethod(SyncMethodEnum syncMethod) {
    this.syncMethod = syncMethod;
    return this;
  }

  /**
   * \&quot;Basic Sync\&quot; or \&quot;Advanced Sync\&quot;. Basic Sync will manage all files and folders in the branch. Advanced Sync allows you to define which files and folders will be managed by SwaggerHub. Note: If \&quot;Advanced Sync\&quot; is used, you must specify either &#x60;providedPaths&#x60; or &#x60;managedPaths&#x60;. 
   * @return syncMethod
   */
  @javax.annotation.Nonnull
  public SyncMethodEnum getSyncMethod() {
    return syncMethod;
  }

  public void setSyncMethod(SyncMethodEnum syncMethod) {
    this.syncMethod = syncMethod;
  }


  public BitbucketCloudIntegration target(String target) {
    this.target = target;
    return this;
  }

  /**
   * The type of code to generate and push to the repository. For the possible values, start creating any source control integration manually and check the \&quot;Generated API Code\&quot; values. Note that the available codegens for OAS2 and OAS3 vary. 
   * @return target
   */
  @javax.annotation.Nonnull
  public String getTarget() {
    return target;
  }

  public void setTarget(String target) {
    this.target = target;
  }


  public BitbucketCloudIntegration configType(ConfigTypeEnum configType) {
    this.configType = configType;
    return this;
  }

  /**
   * Integration type
   * @return configType
   */
  @javax.annotation.Nonnull
  public ConfigTypeEnum getConfigType() {
    return configType;
  }

  public void setConfigType(ConfigTypeEnum configType) {
    this.configType = configType;
  }


  public BitbucketCloudIntegration owner(String owner) {
    this.owner = owner;
    return this;
  }

  /**
   * The owner of the Bitbucket repository to synchronize with
   * @return owner
   */
  @javax.annotation.Nonnull
  public String getOwner() {
    return owner;
  }

  public void setOwner(String owner) {
    this.owner = owner;
  }


  public BitbucketCloudIntegration password(String password) {
    this.password = password;
    return this;
  }

  /**
   * Bitbucket [app password](https://support.atlassian.com/bitbucket-cloud/docs/app-passwords/) to authenticate with. Write-only property. Required to create and update the integration. This app password must correspond to the &#x60;username&#x60; account and have the following permissions:   * Account: Email, Read  * Repositories: Read, Write 
   * @return password
   */
  @javax.annotation.Nullable
  public String getPassword() {
    return password;
  }

  public void setPassword(String password) {
    this.password = password;
  }


  public BitbucketCloudIntegration username(String username) {
    this.username = username;
    return this;
  }

  /**
   * Bitbucket username to authenticate with
   * @return username
   */
  @javax.annotation.Nonnull
  public String getUsername() {
    return username;
  }

  public void setUsername(String username) {
    this.username = username;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    BitbucketCloudIntegration bitbucketCloudIntegration = (BitbucketCloudIntegration) o;
    return Objects.equals(this.enabled, bitbucketCloudIntegration.enabled) &&
        Objects.equals(this.id, bitbucketCloudIntegration.id) &&
        Objects.equals(this.name, bitbucketCloudIntegration.name) &&
        Objects.equals(this.branch, bitbucketCloudIntegration.branch) &&
        Objects.equals(this.ignoredPaths, bitbucketCloudIntegration.ignoredPaths) &&
        Objects.equals(this.managedPaths, bitbucketCloudIntegration.managedPaths) &&
        Objects.equals(this.outputFile, bitbucketCloudIntegration.outputFile) &&
        Objects.equals(this.outputFolder, bitbucketCloudIntegration.outputFolder) &&
        Objects.equals(this.providedPaths, bitbucketCloudIntegration.providedPaths) &&
        Objects.equals(this.repository, bitbucketCloudIntegration.repository) &&
        Objects.equals(this.syncMethod, bitbucketCloudIntegration.syncMethod) &&
        Objects.equals(this.target, bitbucketCloudIntegration.target) &&
        Objects.equals(this.configType, bitbucketCloudIntegration.configType) &&
        Objects.equals(this.owner, bitbucketCloudIntegration.owner) &&
        Objects.equals(this.password, bitbucketCloudIntegration.password) &&
        Objects.equals(this.username, bitbucketCloudIntegration.username);
  }

  @Override
  public int hashCode() {
    return Objects.hash(enabled, id, name, branch, ignoredPaths, managedPaths, outputFile, outputFolder, providedPaths, repository, syncMethod, target, configType, owner, password, username);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class BitbucketCloudIntegration {\n");
    sb.append("    enabled: ").append(toIndentedString(enabled)).append("\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    branch: ").append(toIndentedString(branch)).append("\n");
    sb.append("    ignoredPaths: ").append(toIndentedString(ignoredPaths)).append("\n");
    sb.append("    managedPaths: ").append(toIndentedString(managedPaths)).append("\n");
    sb.append("    outputFile: ").append(toIndentedString(outputFile)).append("\n");
    sb.append("    outputFolder: ").append(toIndentedString(outputFolder)).append("\n");
    sb.append("    providedPaths: ").append(toIndentedString(providedPaths)).append("\n");
    sb.append("    repository: ").append(toIndentedString(repository)).append("\n");
    sb.append("    syncMethod: ").append(toIndentedString(syncMethod)).append("\n");
    sb.append("    target: ").append(toIndentedString(target)).append("\n");
    sb.append("    configType: ").append(toIndentedString(configType)).append("\n");
    sb.append("    owner: ").append(toIndentedString(owner)).append("\n");
    sb.append("    password: ").append("*").append("\n");
    sb.append("    username: ").append(toIndentedString(username)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("enabled");
    openapiFields.add("id");
    openapiFields.add("name");
    openapiFields.add("branch");
    openapiFields.add("ignoredPaths");
    openapiFields.add("managedPaths");
    openapiFields.add("outputFile");
    openapiFields.add("outputFolder");
    openapiFields.add("providedPaths");
    openapiFields.add("repository");
    openapiFields.add("syncMethod");
    openapiFields.add("target");
    openapiFields.add("configType");
    openapiFields.add("owner");
    openapiFields.add("password");
    openapiFields.add("username");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("name");
    openapiRequiredFields.add("branch");
    openapiRequiredFields.add("outputFolder");
    openapiRequiredFields.add("repository");
    openapiRequiredFields.add("syncMethod");
    openapiRequiredFields.add("target");
    openapiRequiredFields.add("configType");
    openapiRequiredFields.add("owner");
    openapiRequiredFields.add("username");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to BitbucketCloudIntegration
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!BitbucketCloudIntegration.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in BitbucketCloudIntegration is not found in the empty JSON string", BitbucketCloudIntegration.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!BitbucketCloudIntegration.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `BitbucketCloudIntegration` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : BitbucketCloudIntegration.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("id") != null && !jsonObj.get("id").isJsonNull()) && !jsonObj.get("id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("id").toString()));
      }
      if (!jsonObj.get("name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("name").toString()));
      }
      if (!jsonObj.get("branch").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `branch` to be a primitive type in the JSON string but got `%s`", jsonObj.get("branch").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("ignoredPaths") != null && !jsonObj.get("ignoredPaths").isJsonNull() && !jsonObj.get("ignoredPaths").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `ignoredPaths` to be an array in the JSON string but got `%s`", jsonObj.get("ignoredPaths").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("managedPaths") != null && !jsonObj.get("managedPaths").isJsonNull() && !jsonObj.get("managedPaths").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `managedPaths` to be an array in the JSON string but got `%s`", jsonObj.get("managedPaths").toString()));
      }
      if ((jsonObj.get("outputFile") != null && !jsonObj.get("outputFile").isJsonNull()) && !jsonObj.get("outputFile").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `outputFile` to be a primitive type in the JSON string but got `%s`", jsonObj.get("outputFile").toString()));
      }
      if (!jsonObj.get("outputFolder").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `outputFolder` to be a primitive type in the JSON string but got `%s`", jsonObj.get("outputFolder").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("providedPaths") != null && !jsonObj.get("providedPaths").isJsonNull() && !jsonObj.get("providedPaths").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `providedPaths` to be an array in the JSON string but got `%s`", jsonObj.get("providedPaths").toString()));
      }
      if (!jsonObj.get("repository").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `repository` to be a primitive type in the JSON string but got `%s`", jsonObj.get("repository").toString()));
      }
      if (!jsonObj.get("syncMethod").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `syncMethod` to be a primitive type in the JSON string but got `%s`", jsonObj.get("syncMethod").toString()));
      }
      // validate the required field `syncMethod`
      SyncMethodEnum.validateJsonElement(jsonObj.get("syncMethod"));
      if (!jsonObj.get("target").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `target` to be a primitive type in the JSON string but got `%s`", jsonObj.get("target").toString()));
      }
      if (!jsonObj.get("configType").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `configType` to be a primitive type in the JSON string but got `%s`", jsonObj.get("configType").toString()));
      }
      // validate the required field `configType`
      ConfigTypeEnum.validateJsonElement(jsonObj.get("configType"));
      if (!jsonObj.get("owner").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `owner` to be a primitive type in the JSON string but got `%s`", jsonObj.get("owner").toString()));
      }
      if ((jsonObj.get("password") != null && !jsonObj.get("password").isJsonNull()) && !jsonObj.get("password").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `password` to be a primitive type in the JSON string but got `%s`", jsonObj.get("password").toString()));
      }
      if (!jsonObj.get("username").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `username` to be a primitive type in the JSON string but got `%s`", jsonObj.get("username").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!BitbucketCloudIntegration.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'BitbucketCloudIntegration' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<BitbucketCloudIntegration> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(BitbucketCloudIntegration.class));

       return (TypeAdapter<T>) new TypeAdapter<BitbucketCloudIntegration>() {
           @Override
           public void write(JsonWriter out, BitbucketCloudIntegration value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public BitbucketCloudIntegration read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of BitbucketCloudIntegration given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of BitbucketCloudIntegration
   * @throws IOException if the JSON string is invalid with respect to BitbucketCloudIntegration
   */
  public static BitbucketCloudIntegration fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, BitbucketCloudIntegration.class);
  }

  /**
   * Convert an instance of BitbucketCloudIntegration to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

