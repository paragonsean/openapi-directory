/*
 * SwaggerHub Registry API
 * # Overview Use SwaggerHub Registry API to access, manage, and update the following resources in SwaggerHub, bypassing the web interface:   * APIs   * Domains   * Integrations   * Projects   * Templates   SwaggerHub also provides the [User Management API](https://app.swaggerhub.com/apis-docs/swagger-hub/user-management-api/) to get information about organizations and manage organization members.  # Base URL Use the following base URL for SwaggerHub SaaS:          http(s)://api.swaggerhub.com  **Note:** This documentation is for SwaggerHub SaaS. On-Premise customers should use the bundled API definition, which can be found at the URLs provided below.  Version 1.29.0 or later:      http(s)://SERVER/v1/openapi.yaml - YAML version     http(s)://SERVER/v1/openapi.json - JSON version  Earlier versions:      http(s)://SERVER/v1/swagger.yaml - YAML version     http(s)://SERVER/v1/swagger.json - JSON version  # Authentication Operations that update data or access private data require authentication using an API key. You can find your personal API key on the [API Keys](https://app.swaggerhub.com/settings/apiKey) page in your account settings. Send this key in the `Authorization` header when making requests to the Registry API:      Authorization: YOUR_API_KEY  To test API calls from this documentation page, click the **Authorize** button below and paste your API key there.  **Important:** Keep the API key secure and do not store it directly in your code. # Tools In addition to calling the Registry API directly, you can use the following tools to interact with the API from the command line or CI/CD pipeline:   * [SwaggerHub CLI](https://www.npmjs.com/package/swaggerhub-cli)   * [Maven plugin](https://github.com/swagger-api/swaggerhub-maven-plugin)  * [Gradle plugin](https://github.com/swagger-api/swaggerhub-gradle-plugin) 
 *
 * The version of the OpenAPI document: 1.0.66
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.CollaborationMembership;
import org.openapitools.client.model.CollaborationTeamMembership;
import org.openapitools.client.model.OrganizationOwner;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Collaboration
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:18:22.732961-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class Collaboration {
  public static final String SERIALIZED_NAME_MEMBERS = "members";
  @SerializedName(SERIALIZED_NAME_MEMBERS)
  private List<CollaborationMembership> members = new ArrayList<>();

  public static final String SERIALIZED_NAME_OWNER = "owner";
  @SerializedName(SERIALIZED_NAME_OWNER)
  private String owner;

  public static final String SERIALIZED_NAME_OWNER_NAME = "ownerName";
  @SerializedName(SERIALIZED_NAME_OWNER_NAME)
  private String ownerName;

  public static final String SERIALIZED_NAME_OWNERS = "owners";
  @SerializedName(SERIALIZED_NAME_OWNERS)
  private List<OrganizationOwner> owners = new ArrayList<>();

  public static final String SERIALIZED_NAME_PENDING_MEMBERS = "pendingMembers";
  @SerializedName(SERIALIZED_NAME_PENDING_MEMBERS)
  private List<CollaborationMembership> pendingMembers = new ArrayList<>();

  public static final String SERIALIZED_NAME_TEAMS = "teams";
  @SerializedName(SERIALIZED_NAME_TEAMS)
  private List<CollaborationTeamMembership> teams = new ArrayList<>();

  public Collaboration() {
  }

  public Collaboration(
     String owner, 
     String ownerName, 
     List<OrganizationOwner> owners
  ) {
    this();
    this.owner = owner;
    this.ownerName = ownerName;
    this.owners = owners;
  }

  public Collaboration members(List<CollaborationMembership> members) {
    this.members = members;
    return this;
  }

  public Collaboration addMembersItem(CollaborationMembership membersItem) {
    if (this.members == null) {
      this.members = new ArrayList<>();
    }
    this.members.add(membersItem);
    return this;
  }

  /**
   * A list of users who are existing collaborators on this API
   * @return members
   */
  @javax.annotation.Nullable
  public List<CollaborationMembership> getMembers() {
    return members;
  }

  public void setMembers(List<CollaborationMembership> members) {
    this.members = members;
  }


  /**
   * Internal ID of the API owner (organization or user)
   * @return owner
   */
  @javax.annotation.Nullable
  public String getOwner() {
    return owner;
  }



  /**
   * The name of the API owner (organization or user)
   * @return ownerName
   */
  @javax.annotation.Nullable
  public String getOwnerName() {
    return ownerName;
  }



  /**
   * If the API owner is an organization, this list contains the IDs of the organization owners. If the API owner is a user, an empty array is returned. 
   * @return owners
   */
  @javax.annotation.Nullable
  public List<OrganizationOwner> getOwners() {
    return owners;
  }



  public Collaboration pendingMembers(List<CollaborationMembership> pendingMembers) {
    this.pendingMembers = pendingMembers;
    return this;
  }

  public Collaboration addPendingMembersItem(CollaborationMembership pendingMembersItem) {
    if (this.pendingMembers == null) {
      this.pendingMembers = new ArrayList<>();
    }
    this.pendingMembers.add(pendingMembersItem);
    return this;
  }

  /**
   * A list of pending collaborators - users who were invited to collaborate on this API but have not accepted the invitation yet
   * @return pendingMembers
   */
  @javax.annotation.Nullable
  public List<CollaborationMembership> getPendingMembers() {
    return pendingMembers;
  }

  public void setPendingMembers(List<CollaborationMembership> pendingMembers) {
    this.pendingMembers = pendingMembers;
  }


  public Collaboration teams(List<CollaborationTeamMembership> teams) {
    this.teams = teams;
    return this;
  }

  public Collaboration addTeamsItem(CollaborationTeamMembership teamsItem) {
    if (this.teams == null) {
      this.teams = new ArrayList<>();
    }
    this.teams.add(teamsItem);
    return this;
  }

  /**
   * A list of teams that collaborate on this API
   * @return teams
   */
  @javax.annotation.Nullable
  public List<CollaborationTeamMembership> getTeams() {
    return teams;
  }

  public void setTeams(List<CollaborationTeamMembership> teams) {
    this.teams = teams;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    Collaboration collaboration = (Collaboration) o;
    return Objects.equals(this.members, collaboration.members) &&
        Objects.equals(this.owner, collaboration.owner) &&
        Objects.equals(this.ownerName, collaboration.ownerName) &&
        Objects.equals(this.owners, collaboration.owners) &&
        Objects.equals(this.pendingMembers, collaboration.pendingMembers) &&
        Objects.equals(this.teams, collaboration.teams);
  }

  @Override
  public int hashCode() {
    return Objects.hash(members, owner, ownerName, owners, pendingMembers, teams);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class Collaboration {\n");
    sb.append("    members: ").append(toIndentedString(members)).append("\n");
    sb.append("    owner: ").append(toIndentedString(owner)).append("\n");
    sb.append("    ownerName: ").append(toIndentedString(ownerName)).append("\n");
    sb.append("    owners: ").append(toIndentedString(owners)).append("\n");
    sb.append("    pendingMembers: ").append(toIndentedString(pendingMembers)).append("\n");
    sb.append("    teams: ").append(toIndentedString(teams)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("members");
    openapiFields.add("owner");
    openapiFields.add("ownerName");
    openapiFields.add("owners");
    openapiFields.add("pendingMembers");
    openapiFields.add("teams");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to Collaboration
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!Collaboration.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in Collaboration is not found in the empty JSON string", Collaboration.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!Collaboration.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `Collaboration` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if (jsonObj.get("members") != null && !jsonObj.get("members").isJsonNull()) {
        JsonArray jsonArraymembers = jsonObj.getAsJsonArray("members");
        if (jsonArraymembers != null) {
          // ensure the json data is an array
          if (!jsonObj.get("members").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `members` to be an array in the JSON string but got `%s`", jsonObj.get("members").toString()));
          }

          // validate the optional field `members` (array)
          for (int i = 0; i < jsonArraymembers.size(); i++) {
            CollaborationMembership.validateJsonElement(jsonArraymembers.get(i));
          };
        }
      }
      if ((jsonObj.get("owner") != null && !jsonObj.get("owner").isJsonNull()) && !jsonObj.get("owner").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `owner` to be a primitive type in the JSON string but got `%s`", jsonObj.get("owner").toString()));
      }
      if ((jsonObj.get("ownerName") != null && !jsonObj.get("ownerName").isJsonNull()) && !jsonObj.get("ownerName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `ownerName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("ownerName").toString()));
      }
      if (jsonObj.get("owners") != null && !jsonObj.get("owners").isJsonNull()) {
        JsonArray jsonArrayowners = jsonObj.getAsJsonArray("owners");
        if (jsonArrayowners != null) {
          // ensure the json data is an array
          if (!jsonObj.get("owners").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `owners` to be an array in the JSON string but got `%s`", jsonObj.get("owners").toString()));
          }

          // validate the optional field `owners` (array)
          for (int i = 0; i < jsonArrayowners.size(); i++) {
            OrganizationOwner.validateJsonElement(jsonArrayowners.get(i));
          };
        }
      }
      if (jsonObj.get("pendingMembers") != null && !jsonObj.get("pendingMembers").isJsonNull()) {
        JsonArray jsonArraypendingMembers = jsonObj.getAsJsonArray("pendingMembers");
        if (jsonArraypendingMembers != null) {
          // ensure the json data is an array
          if (!jsonObj.get("pendingMembers").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `pendingMembers` to be an array in the JSON string but got `%s`", jsonObj.get("pendingMembers").toString()));
          }

          // validate the optional field `pendingMembers` (array)
          for (int i = 0; i < jsonArraypendingMembers.size(); i++) {
            CollaborationMembership.validateJsonElement(jsonArraypendingMembers.get(i));
          };
        }
      }
      if (jsonObj.get("teams") != null && !jsonObj.get("teams").isJsonNull()) {
        JsonArray jsonArrayteams = jsonObj.getAsJsonArray("teams");
        if (jsonArrayteams != null) {
          // ensure the json data is an array
          if (!jsonObj.get("teams").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `teams` to be an array in the JSON string but got `%s`", jsonObj.get("teams").toString()));
          }

          // validate the optional field `teams` (array)
          for (int i = 0; i < jsonArrayteams.size(); i++) {
            CollaborationTeamMembership.validateJsonElement(jsonArrayteams.get(i));
          };
        }
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!Collaboration.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'Collaboration' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<Collaboration> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(Collaboration.class));

       return (TypeAdapter<T>) new TypeAdapter<Collaboration>() {
           @Override
           public void write(JsonWriter out, Collaboration value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public Collaboration read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of Collaboration given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of Collaboration
   * @throws IOException if the JSON string is invalid with respect to Collaboration
   */
  public static Collaboration fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, Collaboration.class);
  }

  /**
   * Convert an instance of Collaboration to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

