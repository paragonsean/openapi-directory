/*
 * SwaggerHub Registry API
 * # Overview Use SwaggerHub Registry API to access, manage, and update the following resources in SwaggerHub, bypassing the web interface:   * APIs   * Domains   * Integrations   * Projects   * Templates   SwaggerHub also provides the [User Management API](https://app.swaggerhub.com/apis-docs/swagger-hub/user-management-api/) to get information about organizations and manage organization members.  # Base URL Use the following base URL for SwaggerHub SaaS:          http(s)://api.swaggerhub.com  **Note:** This documentation is for SwaggerHub SaaS. On-Premise customers should use the bundled API definition, which can be found at the URLs provided below.  Version 1.29.0 or later:      http(s)://SERVER/v1/openapi.yaml - YAML version     http(s)://SERVER/v1/openapi.json - JSON version  Earlier versions:      http(s)://SERVER/v1/swagger.yaml - YAML version     http(s)://SERVER/v1/swagger.json - JSON version  # Authentication Operations that update data or access private data require authentication using an API key. You can find your personal API key on the [API Keys](https://app.swaggerhub.com/settings/apiKey) page in your account settings. Send this key in the `Authorization` header when making requests to the Registry API:      Authorization: YOUR_API_KEY  To test API calls from this documentation page, click the **Authorize** button below and paste your API key there.  **Important:** Keep the API key secure and do not store it directly in your code. # Tools In addition to calling the Registry API directly, you can use the following tools to interact with the API from the command line or CI/CD pipeline:   * [SwaggerHub CLI](https://www.npmjs.com/package/swaggerhub-cli)   * [Maven plugin](https://github.com/swagger-api/swaggerhub-maven-plugin)  * [Gradle plugin](https://github.com/swagger-api/swaggerhub-gradle-plugin) 
 *
 * The version of the OpenAPI document: 1.0.66
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiCallback;
import org.openapitools.client.ApiClient;
import org.openapitools.client.ApiException;
import org.openapitools.client.ApiResponse;
import org.openapitools.client.Configuration;
import org.openapitools.client.Pair;
import org.openapitools.client.ProgressRequestBody;
import org.openapitools.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import org.openapitools.client.model.ApisJson;
import org.openapitools.client.model.ClosableComment;
import org.openapitools.client.model.CommentsBatch;
import org.openapitools.client.model.ForkVersion;
import org.openapitools.client.model.LifecycleSettings;
import org.openapitools.client.model.TemplateWrapper;
import org.openapitools.client.model.VisibilitySettings;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class TemplatesApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public TemplatesApi() {
        this(Configuration.getDefaultApiClient());
    }

    public TemplatesApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for deleteTemplate
     * @param owner API, domain, or template owner identifier (case-sensitive) (required)
     * @param templateId Template identifier (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Template successfully deleted </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Access denied </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> Template has published versions, and cannot be deleted </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteTemplateCall(String owner, String templateId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/templates/{owner}/{templateId}"
            .replace("{" + "owner" + "}", localVarApiClient.escapeString(owner.toString()))
            .replace("{" + "templateId" + "}", localVarApiClient.escapeString(templateId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "TokenSecured" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call deleteTemplateValidateBeforeCall(String owner, String templateId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'owner' is set
        if (owner == null) {
            throw new ApiException("Missing the required parameter 'owner' when calling deleteTemplate(Async)");
        }

        // verify the required parameter 'templateId' is set
        if (templateId == null) {
            throw new ApiException("Missing the required parameter 'templateId' when calling deleteTemplate(Async)");
        }

        return deleteTemplateCall(owner, templateId, _callback);

    }

    /**
     * Delete a template
     * 
     * @param owner API, domain, or template owner identifier (case-sensitive) (required)
     * @param templateId Template identifier (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Template successfully deleted </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Access denied </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> Template has published versions, and cannot be deleted </td><td>  -  </td></tr>
     </table>
     */
    public void deleteTemplate(String owner, String templateId) throws ApiException {
        deleteTemplateWithHttpInfo(owner, templateId);
    }

    /**
     * Delete a template
     * 
     * @param owner API, domain, or template owner identifier (case-sensitive) (required)
     * @param templateId Template identifier (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Template successfully deleted </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Access denied </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> Template has published versions, and cannot be deleted </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> deleteTemplateWithHttpInfo(String owner, String templateId) throws ApiException {
        okhttp3.Call localVarCall = deleteTemplateValidateBeforeCall(owner, templateId, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Delete a template (asynchronously)
     * 
     * @param owner API, domain, or template owner identifier (case-sensitive) (required)
     * @param templateId Template identifier (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Template successfully deleted </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Access denied </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> Template has published versions, and cannot be deleted </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteTemplateAsync(String owner, String templateId, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = deleteTemplateValidateBeforeCall(owner, templateId, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for deleteTemplateVersion
     * @param owner API, domain, or template owner identifier (case-sensitive) (required)
     * @param templateId Template identifier (required)
     * @param version Version identifier (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Template version successfully deleted </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Access denied </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> Selected template version is either published or the only version, and cannot be deleted </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteTemplateVersionCall(String owner, String templateId, String version, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/templates/{owner}/{templateId}/{version}"
            .replace("{" + "owner" + "}", localVarApiClient.escapeString(owner.toString()))
            .replace("{" + "templateId" + "}", localVarApiClient.escapeString(templateId.toString()))
            .replace("{" + "version" + "}", localVarApiClient.escapeString(version.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "TokenSecured" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call deleteTemplateVersionValidateBeforeCall(String owner, String templateId, String version, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'owner' is set
        if (owner == null) {
            throw new ApiException("Missing the required parameter 'owner' when calling deleteTemplateVersion(Async)");
        }

        // verify the required parameter 'templateId' is set
        if (templateId == null) {
            throw new ApiException("Missing the required parameter 'templateId' when calling deleteTemplateVersion(Async)");
        }

        // verify the required parameter 'version' is set
        if (version == null) {
            throw new ApiException("Missing the required parameter 'version' when calling deleteTemplateVersion(Async)");
        }

        return deleteTemplateVersionCall(owner, templateId, version, _callback);

    }

    /**
     * Delete a particular version of a template
     * 
     * @param owner API, domain, or template owner identifier (case-sensitive) (required)
     * @param templateId Template identifier (required)
     * @param version Version identifier (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Template version successfully deleted </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Access denied </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> Selected template version is either published or the only version, and cannot be deleted </td><td>  -  </td></tr>
     </table>
     */
    public void deleteTemplateVersion(String owner, String templateId, String version) throws ApiException {
        deleteTemplateVersionWithHttpInfo(owner, templateId, version);
    }

    /**
     * Delete a particular version of a template
     * 
     * @param owner API, domain, or template owner identifier (case-sensitive) (required)
     * @param templateId Template identifier (required)
     * @param version Version identifier (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Template version successfully deleted </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Access denied </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> Selected template version is either published or the only version, and cannot be deleted </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> deleteTemplateVersionWithHttpInfo(String owner, String templateId, String version) throws ApiException {
        okhttp3.Call localVarCall = deleteTemplateVersionValidateBeforeCall(owner, templateId, version, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Delete a particular version of a template (asynchronously)
     * 
     * @param owner API, domain, or template owner identifier (case-sensitive) (required)
     * @param templateId Template identifier (required)
     * @param version Version identifier (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Template version successfully deleted </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Access denied </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> Selected template version is either published or the only version, and cannot be deleted </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteTemplateVersionAsync(String owner, String templateId, String version, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = deleteTemplateVersionValidateBeforeCall(owner, templateId, version, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for forkTemplate
     * @param owner API, domain, or template owner identifier (case-sensitive) (required)
     * @param templateId Template identifier (required)
     * @param version Version identifier (required)
     * @param body Fork version information (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Template fork successfully created </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Request body invalid </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Access denied </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> Conflict with existing template </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call forkTemplateCall(String owner, String templateId, String version, ForkVersion body, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = body;

        // create path and map variables
        String localVarPath = "/templates/{owner}/{templateId}/{version}/fork"
            .replace("{" + "owner" + "}", localVarApiClient.escapeString(owner.toString()))
            .replace("{" + "templateId" + "}", localVarApiClient.escapeString(templateId.toString()))
            .replace("{" + "version" + "}", localVarApiClient.escapeString(version.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "TokenSecured" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call forkTemplateValidateBeforeCall(String owner, String templateId, String version, ForkVersion body, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'owner' is set
        if (owner == null) {
            throw new ApiException("Missing the required parameter 'owner' when calling forkTemplate(Async)");
        }

        // verify the required parameter 'templateId' is set
        if (templateId == null) {
            throw new ApiException("Missing the required parameter 'templateId' when calling forkTemplate(Async)");
        }

        // verify the required parameter 'version' is set
        if (version == null) {
            throw new ApiException("Missing the required parameter 'version' when calling forkTemplate(Async)");
        }

        // verify the required parameter 'body' is set
        if (body == null) {
            throw new ApiException("Missing the required parameter 'body' when calling forkTemplate(Async)");
        }

        return forkTemplateCall(owner, templateId, version, body, _callback);

    }

    /**
     * Create a fork for a template
     * 
     * @param owner API, domain, or template owner identifier (case-sensitive) (required)
     * @param templateId Template identifier (required)
     * @param version Version identifier (required)
     * @param body Fork version information (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Template fork successfully created </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Request body invalid </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Access denied </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> Conflict with existing template </td><td>  -  </td></tr>
     </table>
     */
    public void forkTemplate(String owner, String templateId, String version, ForkVersion body) throws ApiException {
        forkTemplateWithHttpInfo(owner, templateId, version, body);
    }

    /**
     * Create a fork for a template
     * 
     * @param owner API, domain, or template owner identifier (case-sensitive) (required)
     * @param templateId Template identifier (required)
     * @param version Version identifier (required)
     * @param body Fork version information (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Template fork successfully created </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Request body invalid </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Access denied </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> Conflict with existing template </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> forkTemplateWithHttpInfo(String owner, String templateId, String version, ForkVersion body) throws ApiException {
        okhttp3.Call localVarCall = forkTemplateValidateBeforeCall(owner, templateId, version, body, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Create a fork for a template (asynchronously)
     * 
     * @param owner API, domain, or template owner identifier (case-sensitive) (required)
     * @param templateId Template identifier (required)
     * @param version Version identifier (required)
     * @param body Fork version information (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Template fork successfully created </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Request body invalid </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Access denied </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> Conflict with existing template </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call forkTemplateAsync(String owner, String templateId, String version, ForkVersion body, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = forkTemplateValidateBeforeCall(owner, templateId, version, body, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for getTemplateComments
     * @param owner API, domain, or template owner identifier (case-sensitive) (required)
     * @param templateId Template identifier (required)
     * @param version Version identifier (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Comments for the template </td><td>  -  </td></tr>
        <tr><td> 204 </td><td> No comments found for the template </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Access token is not set or invalid </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> The comment feature is not available for the organization&#39;s plan, or the authenticating user does not have permission to complete this action </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Template not found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getTemplateCommentsCall(String owner, String templateId, String version, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/templates/{owner}/{templateId}/{version}/comments"
            .replace("{" + "owner" + "}", localVarApiClient.escapeString(owner.toString()))
            .replace("{" + "templateId" + "}", localVarApiClient.escapeString(templateId.toString()))
            .replace("{" + "version" + "}", localVarApiClient.escapeString(version.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "TokenSecured" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getTemplateCommentsValidateBeforeCall(String owner, String templateId, String version, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'owner' is set
        if (owner == null) {
            throw new ApiException("Missing the required parameter 'owner' when calling getTemplateComments(Async)");
        }

        // verify the required parameter 'templateId' is set
        if (templateId == null) {
            throw new ApiException("Missing the required parameter 'templateId' when calling getTemplateComments(Async)");
        }

        // verify the required parameter 'version' is set
        if (version == null) {
            throw new ApiException("Missing the required parameter 'version' when calling getTemplateComments(Async)");
        }

        return getTemplateCommentsCall(owner, templateId, version, _callback);

    }

    /**
     * Return the list of comments for a template
     * 
     * @param owner API, domain, or template owner identifier (case-sensitive) (required)
     * @param templateId Template identifier (required)
     * @param version Version identifier (required)
     * @return List&lt;ClosableComment&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Comments for the template </td><td>  -  </td></tr>
        <tr><td> 204 </td><td> No comments found for the template </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Access token is not set or invalid </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> The comment feature is not available for the organization&#39;s plan, or the authenticating user does not have permission to complete this action </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Template not found </td><td>  -  </td></tr>
     </table>
     */
    public List<ClosableComment> getTemplateComments(String owner, String templateId, String version) throws ApiException {
        ApiResponse<List<ClosableComment>> localVarResp = getTemplateCommentsWithHttpInfo(owner, templateId, version);
        return localVarResp.getData();
    }

    /**
     * Return the list of comments for a template
     * 
     * @param owner API, domain, or template owner identifier (case-sensitive) (required)
     * @param templateId Template identifier (required)
     * @param version Version identifier (required)
     * @return ApiResponse&lt;List&lt;ClosableComment&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Comments for the template </td><td>  -  </td></tr>
        <tr><td> 204 </td><td> No comments found for the template </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Access token is not set or invalid </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> The comment feature is not available for the organization&#39;s plan, or the authenticating user does not have permission to complete this action </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Template not found </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<ClosableComment>> getTemplateCommentsWithHttpInfo(String owner, String templateId, String version) throws ApiException {
        okhttp3.Call localVarCall = getTemplateCommentsValidateBeforeCall(owner, templateId, version, null);
        Type localVarReturnType = new TypeToken<List<ClosableComment>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Return the list of comments for a template (asynchronously)
     * 
     * @param owner API, domain, or template owner identifier (case-sensitive) (required)
     * @param templateId Template identifier (required)
     * @param version Version identifier (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Comments for the template </td><td>  -  </td></tr>
        <tr><td> 204 </td><td> No comments found for the template </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Access token is not set or invalid </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> The comment feature is not available for the organization&#39;s plan, or the authenticating user does not have permission to complete this action </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Template not found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getTemplateCommentsAsync(String owner, String templateId, String version, final ApiCallback<List<ClosableComment>> _callback) throws ApiException {

        okhttp3.Call localVarCall = getTemplateCommentsValidateBeforeCall(owner, templateId, version, _callback);
        Type localVarReturnType = new TypeToken<List<ClosableComment>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getTemplateDefinition
     * @param owner API, domain, or template owner identifier (case-sensitive) (required)
     * @param templateId Template identifier (required)
     * @param version Version identifier (required)
     * @param flatten If set to &#x60;true&#x60;, it creates models from inline schemas in OpenAPI definition. AsyncAPI definitions cannot be flattened. (optional, default to false)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The template in requested format (YAML or JSON) </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Template not found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getTemplateDefinitionCall(String owner, String templateId, String version, Boolean flatten, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/templates/{owner}/{templateId}/{version}"
            .replace("{" + "owner" + "}", localVarApiClient.escapeString(owner.toString()))
            .replace("{" + "templateId" + "}", localVarApiClient.escapeString(templateId.toString()))
            .replace("{" + "version" + "}", localVarApiClient.escapeString(version.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (flatten != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("flatten", flatten));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "TokenSecured" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getTemplateDefinitionValidateBeforeCall(String owner, String templateId, String version, Boolean flatten, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'owner' is set
        if (owner == null) {
            throw new ApiException("Missing the required parameter 'owner' when calling getTemplateDefinition(Async)");
        }

        // verify the required parameter 'templateId' is set
        if (templateId == null) {
            throw new ApiException("Missing the required parameter 'templateId' when calling getTemplateDefinition(Async)");
        }

        // verify the required parameter 'version' is set
        if (version == null) {
            throw new ApiException("Missing the required parameter 'version' when calling getTemplateDefinition(Async)");
        }

        return getTemplateDefinitionCall(owner, templateId, version, flatten, _callback);

    }

    /**
     * Retrieve a template definition
     * 
     * @param owner API, domain, or template owner identifier (case-sensitive) (required)
     * @param templateId Template identifier (required)
     * @param version Version identifier (required)
     * @param flatten If set to &#x60;true&#x60;, it creates models from inline schemas in OpenAPI definition. AsyncAPI definitions cannot be flattened. (optional, default to false)
     * @return Object
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The template in requested format (YAML or JSON) </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Template not found </td><td>  -  </td></tr>
     </table>
     */
    public Object getTemplateDefinition(String owner, String templateId, String version, Boolean flatten) throws ApiException {
        ApiResponse<Object> localVarResp = getTemplateDefinitionWithHttpInfo(owner, templateId, version, flatten);
        return localVarResp.getData();
    }

    /**
     * Retrieve a template definition
     * 
     * @param owner API, domain, or template owner identifier (case-sensitive) (required)
     * @param templateId Template identifier (required)
     * @param version Version identifier (required)
     * @param flatten If set to &#x60;true&#x60;, it creates models from inline schemas in OpenAPI definition. AsyncAPI definitions cannot be flattened. (optional, default to false)
     * @return ApiResponse&lt;Object&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The template in requested format (YAML or JSON) </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Template not found </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Object> getTemplateDefinitionWithHttpInfo(String owner, String templateId, String version, Boolean flatten) throws ApiException {
        okhttp3.Call localVarCall = getTemplateDefinitionValidateBeforeCall(owner, templateId, version, flatten, null);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Retrieve a template definition (asynchronously)
     * 
     * @param owner API, domain, or template owner identifier (case-sensitive) (required)
     * @param templateId Template identifier (required)
     * @param version Version identifier (required)
     * @param flatten If set to &#x60;true&#x60;, it creates models from inline schemas in OpenAPI definition. AsyncAPI definitions cannot be flattened. (optional, default to false)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The template in requested format (YAML or JSON) </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Template not found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getTemplateDefinitionAsync(String owner, String templateId, String version, Boolean flatten, final ApiCallback<Object> _callback) throws ApiException {

        okhttp3.Call localVarCall = getTemplateDefinitionValidateBeforeCall(owner, templateId, version, flatten, _callback);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getTemplateLifecycleSettings
     * @param owner API, domain, or template owner identifier (case-sensitive) (required)
     * @param templateId Template identifier (required)
     * @param version Version identifier (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Lifecycle settings for the specified template </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Template not found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getTemplateLifecycleSettingsCall(String owner, String templateId, String version, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/templates/{owner}/{templateId}/{version}/settings/lifecycle"
            .replace("{" + "owner" + "}", localVarApiClient.escapeString(owner.toString()))
            .replace("{" + "templateId" + "}", localVarApiClient.escapeString(templateId.toString()))
            .replace("{" + "version" + "}", localVarApiClient.escapeString(version.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "TokenSecured" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getTemplateLifecycleSettingsValidateBeforeCall(String owner, String templateId, String version, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'owner' is set
        if (owner == null) {
            throw new ApiException("Missing the required parameter 'owner' when calling getTemplateLifecycleSettings(Async)");
        }

        // verify the required parameter 'templateId' is set
        if (templateId == null) {
            throw new ApiException("Missing the required parameter 'templateId' when calling getTemplateLifecycleSettings(Async)");
        }

        // verify the required parameter 'version' is set
        if (version == null) {
            throw new ApiException("Missing the required parameter 'version' when calling getTemplateLifecycleSettings(Async)");
        }

        return getTemplateLifecycleSettingsCall(owner, templateId, version, _callback);

    }

    /**
     * Retrieve lifecycle settings for a template
     * 
     * @param owner API, domain, or template owner identifier (case-sensitive) (required)
     * @param templateId Template identifier (required)
     * @param version Version identifier (required)
     * @return LifecycleSettings
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Lifecycle settings for the specified template </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Template not found </td><td>  -  </td></tr>
     </table>
     */
    public LifecycleSettings getTemplateLifecycleSettings(String owner, String templateId, String version) throws ApiException {
        ApiResponse<LifecycleSettings> localVarResp = getTemplateLifecycleSettingsWithHttpInfo(owner, templateId, version);
        return localVarResp.getData();
    }

    /**
     * Retrieve lifecycle settings for a template
     * 
     * @param owner API, domain, or template owner identifier (case-sensitive) (required)
     * @param templateId Template identifier (required)
     * @param version Version identifier (required)
     * @return ApiResponse&lt;LifecycleSettings&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Lifecycle settings for the specified template </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Template not found </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<LifecycleSettings> getTemplateLifecycleSettingsWithHttpInfo(String owner, String templateId, String version) throws ApiException {
        okhttp3.Call localVarCall = getTemplateLifecycleSettingsValidateBeforeCall(owner, templateId, version, null);
        Type localVarReturnType = new TypeToken<LifecycleSettings>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Retrieve lifecycle settings for a template (asynchronously)
     * 
     * @param owner API, domain, or template owner identifier (case-sensitive) (required)
     * @param templateId Template identifier (required)
     * @param version Version identifier (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Lifecycle settings for the specified template </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Template not found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getTemplateLifecycleSettingsAsync(String owner, String templateId, String version, final ApiCallback<LifecycleSettings> _callback) throws ApiException {

        okhttp3.Call localVarCall = getTemplateLifecycleSettingsValidateBeforeCall(owner, templateId, version, _callback);
        Type localVarReturnType = new TypeToken<LifecycleSettings>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getTemplatePrivateSettings
     * @param owner API, domain, or template owner identifier (case-sensitive) (required)
     * @param templateId Template identifier (required)
     * @param version Version identifier (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Visibility settings for the template </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Template not found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getTemplatePrivateSettingsCall(String owner, String templateId, String version, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/templates/{owner}/{templateId}/{version}/settings/private"
            .replace("{" + "owner" + "}", localVarApiClient.escapeString(owner.toString()))
            .replace("{" + "templateId" + "}", localVarApiClient.escapeString(templateId.toString()))
            .replace("{" + "version" + "}", localVarApiClient.escapeString(version.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "TokenSecured" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getTemplatePrivateSettingsValidateBeforeCall(String owner, String templateId, String version, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'owner' is set
        if (owner == null) {
            throw new ApiException("Missing the required parameter 'owner' when calling getTemplatePrivateSettings(Async)");
        }

        // verify the required parameter 'templateId' is set
        if (templateId == null) {
            throw new ApiException("Missing the required parameter 'templateId' when calling getTemplatePrivateSettings(Async)");
        }

        // verify the required parameter 'version' is set
        if (version == null) {
            throw new ApiException("Missing the required parameter 'version' when calling getTemplatePrivateSettings(Async)");
        }

        return getTemplatePrivateSettingsCall(owner, templateId, version, _callback);

    }

    /**
     * Retrieve visibility settings for a template
     * 
     * @param owner API, domain, or template owner identifier (case-sensitive) (required)
     * @param templateId Template identifier (required)
     * @param version Version identifier (required)
     * @return VisibilitySettings
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Visibility settings for the template </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Template not found </td><td>  -  </td></tr>
     </table>
     */
    public VisibilitySettings getTemplatePrivateSettings(String owner, String templateId, String version) throws ApiException {
        ApiResponse<VisibilitySettings> localVarResp = getTemplatePrivateSettingsWithHttpInfo(owner, templateId, version);
        return localVarResp.getData();
    }

    /**
     * Retrieve visibility settings for a template
     * 
     * @param owner API, domain, or template owner identifier (case-sensitive) (required)
     * @param templateId Template identifier (required)
     * @param version Version identifier (required)
     * @return ApiResponse&lt;VisibilitySettings&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Visibility settings for the template </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Template not found </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<VisibilitySettings> getTemplatePrivateSettingsWithHttpInfo(String owner, String templateId, String version) throws ApiException {
        okhttp3.Call localVarCall = getTemplatePrivateSettingsValidateBeforeCall(owner, templateId, version, null);
        Type localVarReturnType = new TypeToken<VisibilitySettings>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Retrieve visibility settings for a template (asynchronously)
     * 
     * @param owner API, domain, or template owner identifier (case-sensitive) (required)
     * @param templateId Template identifier (required)
     * @param version Version identifier (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Visibility settings for the template </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Template not found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getTemplatePrivateSettingsAsync(String owner, String templateId, String version, final ApiCallback<VisibilitySettings> _callback) throws ApiException {

        okhttp3.Call localVarCall = getTemplatePrivateSettingsValidateBeforeCall(owner, templateId, version, _callback);
        Type localVarReturnType = new TypeToken<VisibilitySettings>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getTemplateVersions
     * @param owner API, domain, or template owner identifier (case-sensitive) (required)
     * @param templateId Template identifier (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A list of template versions in APIs.json format </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Template not found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getTemplateVersionsCall(String owner, String templateId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/templates/{owner}/{templateId}"
            .replace("{" + "owner" + "}", localVarApiClient.escapeString(owner.toString()))
            .replace("{" + "templateId" + "}", localVarApiClient.escapeString(templateId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "TokenSecured" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getTemplateVersionsValidateBeforeCall(String owner, String templateId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'owner' is set
        if (owner == null) {
            throw new ApiException("Missing the required parameter 'owner' when calling getTemplateVersions(Async)");
        }

        // verify the required parameter 'templateId' is set
        if (templateId == null) {
            throw new ApiException("Missing the required parameter 'templateId' when calling getTemplateVersions(Async)");
        }

        return getTemplateVersionsCall(owner, templateId, _callback);

    }

    /**
     * Retrieve an APIs.json listing for all template versions for an owner and template
     * 
     * @param owner API, domain, or template owner identifier (case-sensitive) (required)
     * @param templateId Template identifier (required)
     * @return ApisJson
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A list of template versions in APIs.json format </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Template not found </td><td>  -  </td></tr>
     </table>
     */
    public ApisJson getTemplateVersions(String owner, String templateId) throws ApiException {
        ApiResponse<ApisJson> localVarResp = getTemplateVersionsWithHttpInfo(owner, templateId);
        return localVarResp.getData();
    }

    /**
     * Retrieve an APIs.json listing for all template versions for an owner and template
     * 
     * @param owner API, domain, or template owner identifier (case-sensitive) (required)
     * @param templateId Template identifier (required)
     * @return ApiResponse&lt;ApisJson&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A list of template versions in APIs.json format </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Template not found </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ApisJson> getTemplateVersionsWithHttpInfo(String owner, String templateId) throws ApiException {
        okhttp3.Call localVarCall = getTemplateVersionsValidateBeforeCall(owner, templateId, null);
        Type localVarReturnType = new TypeToken<ApisJson>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Retrieve an APIs.json listing for all template versions for an owner and template (asynchronously)
     * 
     * @param owner API, domain, or template owner identifier (case-sensitive) (required)
     * @param templateId Template identifier (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A list of template versions in APIs.json format </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Template not found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getTemplateVersionsAsync(String owner, String templateId, final ApiCallback<ApisJson> _callback) throws ApiException {

        okhttp3.Call localVarCall = getTemplateVersionsValidateBeforeCall(owner, templateId, _callback);
        Type localVarReturnType = new TypeToken<ApisJson>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getTemplates
     * @param owner Owner name (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Template wrapper </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getTemplatesCall(String owner, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/templates";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (owner != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("owner", owner));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "TokenSecured" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getTemplatesValidateBeforeCall(String owner, final ApiCallback _callback) throws ApiException {
        return getTemplatesCall(owner, _callback);

    }

    /**
     * Retrieve a list of templates for an owner
     * 
     * @param owner Owner name (optional)
     * @return TemplateWrapper
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Template wrapper </td><td>  -  </td></tr>
     </table>
     */
    public TemplateWrapper getTemplates(String owner) throws ApiException {
        ApiResponse<TemplateWrapper> localVarResp = getTemplatesWithHttpInfo(owner);
        return localVarResp.getData();
    }

    /**
     * Retrieve a list of templates for an owner
     * 
     * @param owner Owner name (optional)
     * @return ApiResponse&lt;TemplateWrapper&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Template wrapper </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<TemplateWrapper> getTemplatesWithHttpInfo(String owner) throws ApiException {
        okhttp3.Call localVarCall = getTemplatesValidateBeforeCall(owner, null);
        Type localVarReturnType = new TypeToken<TemplateWrapper>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Retrieve a list of templates for an owner (asynchronously)
     * 
     * @param owner Owner name (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Template wrapper </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getTemplatesAsync(String owner, final ApiCallback<TemplateWrapper> _callback) throws ApiException {

        okhttp3.Call localVarCall = getTemplatesValidateBeforeCall(owner, _callback);
        Type localVarReturnType = new TypeToken<TemplateWrapper>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for renameTemplate
     * @param owner API, domain, or template owner identifier (case-sensitive) (required)
     * @param templateId Template identifier (required)
     * @param newName New name (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Template successfully renamed </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid request </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Access denied </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> API, domain, and template with the new name already exist </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call renameTemplateCall(String owner, String templateId, String newName, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/templates/{owner}/{templateId}/rename"
            .replace("{" + "owner" + "}", localVarApiClient.escapeString(owner.toString()))
            .replace("{" + "templateId" + "}", localVarApiClient.escapeString(templateId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (newName != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("newName", newName));
        }

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "TokenSecured" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call renameTemplateValidateBeforeCall(String owner, String templateId, String newName, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'owner' is set
        if (owner == null) {
            throw new ApiException("Missing the required parameter 'owner' when calling renameTemplate(Async)");
        }

        // verify the required parameter 'templateId' is set
        if (templateId == null) {
            throw new ApiException("Missing the required parameter 'templateId' when calling renameTemplate(Async)");
        }

        // verify the required parameter 'newName' is set
        if (newName == null) {
            throw new ApiException("Missing the required parameter 'newName' when calling renameTemplate(Async)");
        }

        return renameTemplateCall(owner, templateId, newName, _callback);

    }

    /**
     * Rename a template
     * 
     * @param owner API, domain, or template owner identifier (case-sensitive) (required)
     * @param templateId Template identifier (required)
     * @param newName New name (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Template successfully renamed </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid request </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Access denied </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> API, domain, and template with the new name already exist </td><td>  -  </td></tr>
     </table>
     */
    public void renameTemplate(String owner, String templateId, String newName) throws ApiException {
        renameTemplateWithHttpInfo(owner, templateId, newName);
    }

    /**
     * Rename a template
     * 
     * @param owner API, domain, or template owner identifier (case-sensitive) (required)
     * @param templateId Template identifier (required)
     * @param newName New name (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Template successfully renamed </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid request </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Access denied </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> API, domain, and template with the new name already exist </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> renameTemplateWithHttpInfo(String owner, String templateId, String newName) throws ApiException {
        okhttp3.Call localVarCall = renameTemplateValidateBeforeCall(owner, templateId, newName, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Rename a template (asynchronously)
     * 
     * @param owner API, domain, or template owner identifier (case-sensitive) (required)
     * @param templateId Template identifier (required)
     * @param newName New name (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Template successfully renamed </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid request </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Access denied </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> API, domain, and template with the new name already exist </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call renameTemplateAsync(String owner, String templateId, String newName, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = renameTemplateValidateBeforeCall(owner, templateId, newName, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for saveTemplateDefinition
     * @param owner API, domain, or template owner identifier (case-sensitive) (required)
     * @param templateId Template identifier (required)
     * @param body The template definition (required)
     * @param isPrivate Defines whether the API or template has to be private (optional, default to false)
     * @param version Template version to create or update. If omitted, the version will be taken from the &#x60;info.version&#x60; field in the definition. (optional)
     * @param force Force update (optional)
     * @param projectName The project to add the API, domain, or template to (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Template successfully saved </td><td>  -  </td></tr>
        <tr><td> 201 </td><td> New template successfully saved </td><td>  -  </td></tr>
        <tr><td> 205 </td><td> Template successfully saved, and should be reloaded </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Template definition invalid </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Access denied </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> Cannot overwrite a template version </td><td>  -  </td></tr>
        <tr><td> 415 </td><td> Invalid content type </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call saveTemplateDefinitionCall(String owner, String templateId, String body, Boolean isPrivate, String version, Boolean force, String projectName, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = body;

        // create path and map variables
        String localVarPath = "/templates/{owner}/{templateId}"
            .replace("{" + "owner" + "}", localVarApiClient.escapeString(owner.toString()))
            .replace("{" + "templateId" + "}", localVarApiClient.escapeString(templateId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (isPrivate != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("isPrivate", isPrivate));
        }

        if (version != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("version", version));
        }

        if (force != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("force", force));
        }

        if (projectName != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("projectName", projectName));
        }

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json",
            "application/yaml"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "TokenSecured" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call saveTemplateDefinitionValidateBeforeCall(String owner, String templateId, String body, Boolean isPrivate, String version, Boolean force, String projectName, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'owner' is set
        if (owner == null) {
            throw new ApiException("Missing the required parameter 'owner' when calling saveTemplateDefinition(Async)");
        }

        // verify the required parameter 'templateId' is set
        if (templateId == null) {
            throw new ApiException("Missing the required parameter 'templateId' when calling saveTemplateDefinition(Async)");
        }

        // verify the required parameter 'body' is set
        if (body == null) {
            throw new ApiException("Missing the required parameter 'body' when calling saveTemplateDefinition(Async)");
        }

        return saveTemplateDefinitionCall(owner, templateId, body, isPrivate, version, force, projectName, _callback);

    }

    /**
     * Create or update a template
     * Saves the provided template definition; the owner must match the token owner. The version will be extracted from the template definitions itself.
     * @param owner API, domain, or template owner identifier (case-sensitive) (required)
     * @param templateId Template identifier (required)
     * @param body The template definition (required)
     * @param isPrivate Defines whether the API or template has to be private (optional, default to false)
     * @param version Template version to create or update. If omitted, the version will be taken from the &#x60;info.version&#x60; field in the definition. (optional)
     * @param force Force update (optional)
     * @param projectName The project to add the API, domain, or template to (optional)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Template successfully saved </td><td>  -  </td></tr>
        <tr><td> 201 </td><td> New template successfully saved </td><td>  -  </td></tr>
        <tr><td> 205 </td><td> Template successfully saved, and should be reloaded </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Template definition invalid </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Access denied </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> Cannot overwrite a template version </td><td>  -  </td></tr>
        <tr><td> 415 </td><td> Invalid content type </td><td>  -  </td></tr>
     </table>
     */
    public void saveTemplateDefinition(String owner, String templateId, String body, Boolean isPrivate, String version, Boolean force, String projectName) throws ApiException {
        saveTemplateDefinitionWithHttpInfo(owner, templateId, body, isPrivate, version, force, projectName);
    }

    /**
     * Create or update a template
     * Saves the provided template definition; the owner must match the token owner. The version will be extracted from the template definitions itself.
     * @param owner API, domain, or template owner identifier (case-sensitive) (required)
     * @param templateId Template identifier (required)
     * @param body The template definition (required)
     * @param isPrivate Defines whether the API or template has to be private (optional, default to false)
     * @param version Template version to create or update. If omitted, the version will be taken from the &#x60;info.version&#x60; field in the definition. (optional)
     * @param force Force update (optional)
     * @param projectName The project to add the API, domain, or template to (optional)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Template successfully saved </td><td>  -  </td></tr>
        <tr><td> 201 </td><td> New template successfully saved </td><td>  -  </td></tr>
        <tr><td> 205 </td><td> Template successfully saved, and should be reloaded </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Template definition invalid </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Access denied </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> Cannot overwrite a template version </td><td>  -  </td></tr>
        <tr><td> 415 </td><td> Invalid content type </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> saveTemplateDefinitionWithHttpInfo(String owner, String templateId, String body, Boolean isPrivate, String version, Boolean force, String projectName) throws ApiException {
        okhttp3.Call localVarCall = saveTemplateDefinitionValidateBeforeCall(owner, templateId, body, isPrivate, version, force, projectName, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Create or update a template (asynchronously)
     * Saves the provided template definition; the owner must match the token owner. The version will be extracted from the template definitions itself.
     * @param owner API, domain, or template owner identifier (case-sensitive) (required)
     * @param templateId Template identifier (required)
     * @param body The template definition (required)
     * @param isPrivate Defines whether the API or template has to be private (optional, default to false)
     * @param version Template version to create or update. If omitted, the version will be taken from the &#x60;info.version&#x60; field in the definition. (optional)
     * @param force Force update (optional)
     * @param projectName The project to add the API, domain, or template to (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Template successfully saved </td><td>  -  </td></tr>
        <tr><td> 201 </td><td> New template successfully saved </td><td>  -  </td></tr>
        <tr><td> 205 </td><td> Template successfully saved, and should be reloaded </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Template definition invalid </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Access denied </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> Cannot overwrite a template version </td><td>  -  </td></tr>
        <tr><td> 415 </td><td> Invalid content type </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call saveTemplateDefinitionAsync(String owner, String templateId, String body, Boolean isPrivate, String version, Boolean force, String projectName, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = saveTemplateDefinitionValidateBeforeCall(owner, templateId, body, isPrivate, version, force, projectName, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for searchApisAndDomains_1
     * @param specType Type of definitions to search: * API - APIs only * DOMAIN - domains only * TEMPLATE - templates only * ANY - APIs, domains, and templates  (optional, default to ANY)
     * @param visibility The visibility of a definition in SwaggerHub: * PUBLIC - can be viewed by anyone * PRIVATE - can only be viewed by you or your organization and those that you are collaborating with or have shared it with * ANY - either PUBLIC or PRIVATE  (optional, default to ANY)
     * @param state Matches against published state of the spec: * UNPUBLISHED - spec is a draft, a work in progress * PUBLISHED - spec is a stable version ready for consuming from client applications * ANY - either PUBLISHED or UNPUBLISHED  (optional, default to ALL)
     * @param owner API or domain owner. Can be username or organization name. Case-sensitive. (optional)
     * @param query Free text query to match (optional)
     * @param page Page to return (optional, default to 0)
     * @param limit Number of results per page (1 .. 100) (optional, default to 10)
     * @param sort Sort criteria of result set: * NAME * UPDATED * CREATED * OWNER * BEST_MATCH - by relevance * TITLE - by &#x60;info.title&#x60;  (optional, default to NAME)
     * @param order Sort order (optional, default to ASC)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A list of APIs, domains, and templates in APIs.json format </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call searchApisAndDomains_1Call(String specType, String visibility, String state, String owner, String query, Integer page, Integer limit, String sort, String order, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/specs";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (specType != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("specType", specType));
        }

        if (visibility != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("visibility", visibility));
        }

        if (state != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("state", state));
        }

        if (owner != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("owner", owner));
        }

        if (query != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("query", query));
        }

        if (page != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("page", page));
        }

        if (limit != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("limit", limit));
        }

        if (sort != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("sort", sort));
        }

        if (order != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("order", order));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "TokenSecured" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call searchApisAndDomains_1ValidateBeforeCall(String specType, String visibility, String state, String owner, String query, Integer page, Integer limit, String sort, String order, final ApiCallback _callback) throws ApiException {
        return searchApisAndDomains_1Call(specType, visibility, state, owner, query, page, limit, sort, order, _callback);

    }

    /**
     * Retrieve a list of currently defined APIs, domains, and templates in APIs.json format
     * 
     * @param specType Type of definitions to search: * API - APIs only * DOMAIN - domains only * TEMPLATE - templates only * ANY - APIs, domains, and templates  (optional, default to ANY)
     * @param visibility The visibility of a definition in SwaggerHub: * PUBLIC - can be viewed by anyone * PRIVATE - can only be viewed by you or your organization and those that you are collaborating with or have shared it with * ANY - either PUBLIC or PRIVATE  (optional, default to ANY)
     * @param state Matches against published state of the spec: * UNPUBLISHED - spec is a draft, a work in progress * PUBLISHED - spec is a stable version ready for consuming from client applications * ANY - either PUBLISHED or UNPUBLISHED  (optional, default to ALL)
     * @param owner API or domain owner. Can be username or organization name. Case-sensitive. (optional)
     * @param query Free text query to match (optional)
     * @param page Page to return (optional, default to 0)
     * @param limit Number of results per page (1 .. 100) (optional, default to 10)
     * @param sort Sort criteria of result set: * NAME * UPDATED * CREATED * OWNER * BEST_MATCH - by relevance * TITLE - by &#x60;info.title&#x60;  (optional, default to NAME)
     * @param order Sort order (optional, default to ASC)
     * @return ApisJson
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A list of APIs, domains, and templates in APIs.json format </td><td>  -  </td></tr>
     </table>
     */
    public ApisJson searchApisAndDomains_1(String specType, String visibility, String state, String owner, String query, Integer page, Integer limit, String sort, String order) throws ApiException {
        ApiResponse<ApisJson> localVarResp = searchApisAndDomains_1WithHttpInfo(specType, visibility, state, owner, query, page, limit, sort, order);
        return localVarResp.getData();
    }

    /**
     * Retrieve a list of currently defined APIs, domains, and templates in APIs.json format
     * 
     * @param specType Type of definitions to search: * API - APIs only * DOMAIN - domains only * TEMPLATE - templates only * ANY - APIs, domains, and templates  (optional, default to ANY)
     * @param visibility The visibility of a definition in SwaggerHub: * PUBLIC - can be viewed by anyone * PRIVATE - can only be viewed by you or your organization and those that you are collaborating with or have shared it with * ANY - either PUBLIC or PRIVATE  (optional, default to ANY)
     * @param state Matches against published state of the spec: * UNPUBLISHED - spec is a draft, a work in progress * PUBLISHED - spec is a stable version ready for consuming from client applications * ANY - either PUBLISHED or UNPUBLISHED  (optional, default to ALL)
     * @param owner API or domain owner. Can be username or organization name. Case-sensitive. (optional)
     * @param query Free text query to match (optional)
     * @param page Page to return (optional, default to 0)
     * @param limit Number of results per page (1 .. 100) (optional, default to 10)
     * @param sort Sort criteria of result set: * NAME * UPDATED * CREATED * OWNER * BEST_MATCH - by relevance * TITLE - by &#x60;info.title&#x60;  (optional, default to NAME)
     * @param order Sort order (optional, default to ASC)
     * @return ApiResponse&lt;ApisJson&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A list of APIs, domains, and templates in APIs.json format </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ApisJson> searchApisAndDomains_1WithHttpInfo(String specType, String visibility, String state, String owner, String query, Integer page, Integer limit, String sort, String order) throws ApiException {
        okhttp3.Call localVarCall = searchApisAndDomains_1ValidateBeforeCall(specType, visibility, state, owner, query, page, limit, sort, order, null);
        Type localVarReturnType = new TypeToken<ApisJson>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Retrieve a list of currently defined APIs, domains, and templates in APIs.json format (asynchronously)
     * 
     * @param specType Type of definitions to search: * API - APIs only * DOMAIN - domains only * TEMPLATE - templates only * ANY - APIs, domains, and templates  (optional, default to ANY)
     * @param visibility The visibility of a definition in SwaggerHub: * PUBLIC - can be viewed by anyone * PRIVATE - can only be viewed by you or your organization and those that you are collaborating with or have shared it with * ANY - either PUBLIC or PRIVATE  (optional, default to ANY)
     * @param state Matches against published state of the spec: * UNPUBLISHED - spec is a draft, a work in progress * PUBLISHED - spec is a stable version ready for consuming from client applications * ANY - either PUBLISHED or UNPUBLISHED  (optional, default to ALL)
     * @param owner API or domain owner. Can be username or organization name. Case-sensitive. (optional)
     * @param query Free text query to match (optional)
     * @param page Page to return (optional, default to 0)
     * @param limit Number of results per page (1 .. 100) (optional, default to 10)
     * @param sort Sort criteria of result set: * NAME * UPDATED * CREATED * OWNER * BEST_MATCH - by relevance * TITLE - by &#x60;info.title&#x60;  (optional, default to NAME)
     * @param order Sort order (optional, default to ASC)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A list of APIs, domains, and templates in APIs.json format </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call searchApisAndDomains_1Async(String specType, String visibility, String state, String owner, String query, Integer page, Integer limit, String sort, String order, final ApiCallback<ApisJson> _callback) throws ApiException {

        okhttp3.Call localVarCall = searchApisAndDomains_1ValidateBeforeCall(specType, visibility, state, owner, query, page, limit, sort, order, _callback);
        Type localVarReturnType = new TypeToken<ApisJson>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for setTemplateLifecycleSettings
     * @param owner API, domain, or template owner identifier (case-sensitive) (required)
     * @param templateId Template identifier (required)
     * @param version Version identifier (required)
     * @param body Fork version information (required)
     * @param force Force update (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Lifecycle settings successfully stored </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Request body invalid </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Access denied </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Template not found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call setTemplateLifecycleSettingsCall(String owner, String templateId, String version, LifecycleSettings body, Boolean force, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = body;

        // create path and map variables
        String localVarPath = "/templates/{owner}/{templateId}/{version}/settings/lifecycle"
            .replace("{" + "owner" + "}", localVarApiClient.escapeString(owner.toString()))
            .replace("{" + "templateId" + "}", localVarApiClient.escapeString(templateId.toString()))
            .replace("{" + "version" + "}", localVarApiClient.escapeString(version.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (force != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("force", force));
        }

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "TokenSecured" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call setTemplateLifecycleSettingsValidateBeforeCall(String owner, String templateId, String version, LifecycleSettings body, Boolean force, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'owner' is set
        if (owner == null) {
            throw new ApiException("Missing the required parameter 'owner' when calling setTemplateLifecycleSettings(Async)");
        }

        // verify the required parameter 'templateId' is set
        if (templateId == null) {
            throw new ApiException("Missing the required parameter 'templateId' when calling setTemplateLifecycleSettings(Async)");
        }

        // verify the required parameter 'version' is set
        if (version == null) {
            throw new ApiException("Missing the required parameter 'version' when calling setTemplateLifecycleSettings(Async)");
        }

        // verify the required parameter 'body' is set
        if (body == null) {
            throw new ApiException("Missing the required parameter 'body' when calling setTemplateLifecycleSettings(Async)");
        }

        return setTemplateLifecycleSettingsCall(owner, templateId, version, body, force, _callback);

    }

    /**
     * Update lifecycle settings for a template
     * 
     * @param owner API, domain, or template owner identifier (case-sensitive) (required)
     * @param templateId Template identifier (required)
     * @param version Version identifier (required)
     * @param body Fork version information (required)
     * @param force Force update (optional)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Lifecycle settings successfully stored </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Request body invalid </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Access denied </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Template not found </td><td>  -  </td></tr>
     </table>
     */
    public void setTemplateLifecycleSettings(String owner, String templateId, String version, LifecycleSettings body, Boolean force) throws ApiException {
        setTemplateLifecycleSettingsWithHttpInfo(owner, templateId, version, body, force);
    }

    /**
     * Update lifecycle settings for a template
     * 
     * @param owner API, domain, or template owner identifier (case-sensitive) (required)
     * @param templateId Template identifier (required)
     * @param version Version identifier (required)
     * @param body Fork version information (required)
     * @param force Force update (optional)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Lifecycle settings successfully stored </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Request body invalid </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Access denied </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Template not found </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> setTemplateLifecycleSettingsWithHttpInfo(String owner, String templateId, String version, LifecycleSettings body, Boolean force) throws ApiException {
        okhttp3.Call localVarCall = setTemplateLifecycleSettingsValidateBeforeCall(owner, templateId, version, body, force, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Update lifecycle settings for a template (asynchronously)
     * 
     * @param owner API, domain, or template owner identifier (case-sensitive) (required)
     * @param templateId Template identifier (required)
     * @param version Version identifier (required)
     * @param body Fork version information (required)
     * @param force Force update (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Lifecycle settings successfully stored </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Request body invalid </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Access denied </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Template not found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call setTemplateLifecycleSettingsAsync(String owner, String templateId, String version, LifecycleSettings body, Boolean force, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = setTemplateLifecycleSettingsValidateBeforeCall(owner, templateId, version, body, force, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for setTemplatePrivateSettings
     * @param owner API, domain, or template owner identifier (case-sensitive) (required)
     * @param templateId Template identifier (required)
     * @param version Version identifier (required)
     * @param body Private settings (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Visibility setting updated </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Request body invalid </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Access denied </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Template not found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call setTemplatePrivateSettingsCall(String owner, String templateId, String version, VisibilitySettings body, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = body;

        // create path and map variables
        String localVarPath = "/templates/{owner}/{templateId}/{version}/settings/private"
            .replace("{" + "owner" + "}", localVarApiClient.escapeString(owner.toString()))
            .replace("{" + "templateId" + "}", localVarApiClient.escapeString(templateId.toString()))
            .replace("{" + "version" + "}", localVarApiClient.escapeString(version.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call setTemplatePrivateSettingsValidateBeforeCall(String owner, String templateId, String version, VisibilitySettings body, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'owner' is set
        if (owner == null) {
            throw new ApiException("Missing the required parameter 'owner' when calling setTemplatePrivateSettings(Async)");
        }

        // verify the required parameter 'templateId' is set
        if (templateId == null) {
            throw new ApiException("Missing the required parameter 'templateId' when calling setTemplatePrivateSettings(Async)");
        }

        // verify the required parameter 'version' is set
        if (version == null) {
            throw new ApiException("Missing the required parameter 'version' when calling setTemplatePrivateSettings(Async)");
        }

        // verify the required parameter 'body' is set
        if (body == null) {
            throw new ApiException("Missing the required parameter 'body' when calling setTemplatePrivateSettings(Async)");
        }

        return setTemplatePrivateSettingsCall(owner, templateId, version, body, _callback);

    }

    /**
     * Update visibility settings for a template
     * 
     * @param owner API, domain, or template owner identifier (case-sensitive) (required)
     * @param templateId Template identifier (required)
     * @param version Version identifier (required)
     * @param body Private settings (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Visibility setting updated </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Request body invalid </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Access denied </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Template not found </td><td>  -  </td></tr>
     </table>
     */
    public void setTemplatePrivateSettings(String owner, String templateId, String version, VisibilitySettings body) throws ApiException {
        setTemplatePrivateSettingsWithHttpInfo(owner, templateId, version, body);
    }

    /**
     * Update visibility settings for a template
     * 
     * @param owner API, domain, or template owner identifier (case-sensitive) (required)
     * @param templateId Template identifier (required)
     * @param version Version identifier (required)
     * @param body Private settings (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Visibility setting updated </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Request body invalid </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Access denied </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Template not found </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> setTemplatePrivateSettingsWithHttpInfo(String owner, String templateId, String version, VisibilitySettings body) throws ApiException {
        okhttp3.Call localVarCall = setTemplatePrivateSettingsValidateBeforeCall(owner, templateId, version, body, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Update visibility settings for a template (asynchronously)
     * 
     * @param owner API, domain, or template owner identifier (case-sensitive) (required)
     * @param templateId Template identifier (required)
     * @param version Version identifier (required)
     * @param body Private settings (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Visibility setting updated </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Request body invalid </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Access denied </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Template not found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call setTemplatePrivateSettingsAsync(String owner, String templateId, String version, VisibilitySettings body, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = setTemplatePrivateSettingsValidateBeforeCall(owner, templateId, version, body, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for updateTemplateComments
     * @param owner API, domain, or template owner identifier (case-sensitive) (required)
     * @param templateId Template identifier (required)
     * @param version Version identifier (required)
     * @param body  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Comments successfully updated </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Request body invalid </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Access token is not set or invalid </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> The comment feature is not available for the organization&#39;s plan, or the authenticating user does not have permission to complete this action </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Template, comment, or reply not found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateTemplateCommentsCall(String owner, String templateId, String version, CommentsBatch body, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = body;

        // create path and map variables
        String localVarPath = "/templates/{owner}/{templateId}/{version}/comments/batch"
            .replace("{" + "owner" + "}", localVarApiClient.escapeString(owner.toString()))
            .replace("{" + "templateId" + "}", localVarApiClient.escapeString(templateId.toString()))
            .replace("{" + "version" + "}", localVarApiClient.escapeString(version.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "TokenSecured" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call updateTemplateCommentsValidateBeforeCall(String owner, String templateId, String version, CommentsBatch body, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'owner' is set
        if (owner == null) {
            throw new ApiException("Missing the required parameter 'owner' when calling updateTemplateComments(Async)");
        }

        // verify the required parameter 'templateId' is set
        if (templateId == null) {
            throw new ApiException("Missing the required parameter 'templateId' when calling updateTemplateComments(Async)");
        }

        // verify the required parameter 'version' is set
        if (version == null) {
            throw new ApiException("Missing the required parameter 'version' when calling updateTemplateComments(Async)");
        }

        // verify the required parameter 'body' is set
        if (body == null) {
            throw new ApiException("Missing the required parameter 'body' when calling updateTemplateComments(Async)");
        }

        return updateTemplateCommentsCall(owner, templateId, version, body, _callback);

    }

    /**
     * Update the list of comments for a template
     * 
     * @param owner API, domain, or template owner identifier (case-sensitive) (required)
     * @param templateId Template identifier (required)
     * @param version Version identifier (required)
     * @param body  (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Comments successfully updated </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Request body invalid </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Access token is not set or invalid </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> The comment feature is not available for the organization&#39;s plan, or the authenticating user does not have permission to complete this action </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Template, comment, or reply not found </td><td>  -  </td></tr>
     </table>
     */
    public void updateTemplateComments(String owner, String templateId, String version, CommentsBatch body) throws ApiException {
        updateTemplateCommentsWithHttpInfo(owner, templateId, version, body);
    }

    /**
     * Update the list of comments for a template
     * 
     * @param owner API, domain, or template owner identifier (case-sensitive) (required)
     * @param templateId Template identifier (required)
     * @param version Version identifier (required)
     * @param body  (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Comments successfully updated </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Request body invalid </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Access token is not set or invalid </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> The comment feature is not available for the organization&#39;s plan, or the authenticating user does not have permission to complete this action </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Template, comment, or reply not found </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> updateTemplateCommentsWithHttpInfo(String owner, String templateId, String version, CommentsBatch body) throws ApiException {
        okhttp3.Call localVarCall = updateTemplateCommentsValidateBeforeCall(owner, templateId, version, body, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Update the list of comments for a template (asynchronously)
     * 
     * @param owner API, domain, or template owner identifier (case-sensitive) (required)
     * @param templateId Template identifier (required)
     * @param version Version identifier (required)
     * @param body  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Comments successfully updated </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Request body invalid </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Access token is not set or invalid </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> The comment feature is not available for the organization&#39;s plan, or the authenticating user does not have permission to complete this action </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Template, comment, or reply not found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateTemplateCommentsAsync(String owner, String templateId, String version, CommentsBatch body, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = updateTemplateCommentsValidateBeforeCall(owner, templateId, version, body, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
}
