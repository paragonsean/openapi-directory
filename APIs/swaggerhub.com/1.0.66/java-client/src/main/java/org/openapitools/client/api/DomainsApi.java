/*
 * SwaggerHub Registry API
 * # Overview Use SwaggerHub Registry API to access, manage, and update the following resources in SwaggerHub, bypassing the web interface:   * APIs   * Domains   * Integrations   * Projects   * Templates   SwaggerHub also provides the [User Management API](https://app.swaggerhub.com/apis-docs/swagger-hub/user-management-api/) to get information about organizations and manage organization members.  # Base URL Use the following base URL for SwaggerHub SaaS:          http(s)://api.swaggerhub.com  **Note:** This documentation is for SwaggerHub SaaS. On-Premise customers should use the bundled API definition, which can be found at the URLs provided below.  Version 1.29.0 or later:      http(s)://SERVER/v1/openapi.yaml - YAML version     http(s)://SERVER/v1/openapi.json - JSON version  Earlier versions:      http(s)://SERVER/v1/swagger.yaml - YAML version     http(s)://SERVER/v1/swagger.json - JSON version  # Authentication Operations that update data or access private data require authentication using an API key. You can find your personal API key on the [API Keys](https://app.swaggerhub.com/settings/apiKey) page in your account settings. Send this key in the `Authorization` header when making requests to the Registry API:      Authorization: YOUR_API_KEY  To test API calls from this documentation page, click the **Authorize** button below and paste your API key there.  **Important:** Keep the API key secure and do not store it directly in your code. # Tools In addition to calling the Registry API directly, you can use the following tools to interact with the API from the command line or CI/CD pipeline:   * [SwaggerHub CLI](https://www.npmjs.com/package/swaggerhub-cli)   * [Maven plugin](https://github.com/swagger-api/swaggerhub-maven-plugin)  * [Gradle plugin](https://github.com/swagger-api/swaggerhub-gradle-plugin) 
 *
 * The version of the OpenAPI document: 1.0.66
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiCallback;
import org.openapitools.client.ApiClient;
import org.openapitools.client.ApiException;
import org.openapitools.client.ApiResponse;
import org.openapitools.client.Configuration;
import org.openapitools.client.Pair;
import org.openapitools.client.ProgressRequestBody;
import org.openapitools.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import org.openapitools.client.model.ApisJson;
import org.openapitools.client.model.ClosableComment;
import org.openapitools.client.model.ClosableCommentPatch;
import org.openapitools.client.model.Comment;
import org.openapitools.client.model.CommentPatch;
import org.openapitools.client.model.CommentsBatch;
import org.openapitools.client.model.DefaultVersion;
import org.openapitools.client.model.ForkVersion;
import org.openapitools.client.model.LifecycleSettings;
import org.openapitools.client.model.NewComment;
import org.openapitools.client.model.NewReply;
import org.openapitools.client.model.NewVersion;
import org.openapitools.client.model.VisibilitySettings;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class DomainsApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public DomainsApi() {
        this(Configuration.getDefaultApiClient());
    }

    public DomainsApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for addDomainCommentReplyV2
     * @param owner Domain owner (organization or user, case-sensitive) (required)
     * @param domain Domain name (case-sensitive) (required)
     * @param version Version identifier (required)
     * @param comment Comment identifier (required)
     * @param body  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Newly created reply </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Request body invalid </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Access token is not set or invalid </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> The comment feature is not available for the organization&#39;s plan, or the authenticating user does not have permission to complete this action </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The specified domain or comment was not found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call addDomainCommentReplyV2Call(String owner, String domain, String version, String comment, NewReply body, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = body;

        // create path and map variables
        String localVarPath = "/domains/{owner}/{domain}/{version}/comments/{comment}/replies"
            .replace("{" + "owner" + "}", localVarApiClient.escapeString(owner.toString()))
            .replace("{" + "domain" + "}", localVarApiClient.escapeString(domain.toString()))
            .replace("{" + "version" + "}", localVarApiClient.escapeString(version.toString()))
            .replace("{" + "comment" + "}", localVarApiClient.escapeString(comment.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "TokenSecured" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call addDomainCommentReplyV2ValidateBeforeCall(String owner, String domain, String version, String comment, NewReply body, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'owner' is set
        if (owner == null) {
            throw new ApiException("Missing the required parameter 'owner' when calling addDomainCommentReplyV2(Async)");
        }

        // verify the required parameter 'domain' is set
        if (domain == null) {
            throw new ApiException("Missing the required parameter 'domain' when calling addDomainCommentReplyV2(Async)");
        }

        // verify the required parameter 'version' is set
        if (version == null) {
            throw new ApiException("Missing the required parameter 'version' when calling addDomainCommentReplyV2(Async)");
        }

        // verify the required parameter 'comment' is set
        if (comment == null) {
            throw new ApiException("Missing the required parameter 'comment' when calling addDomainCommentReplyV2(Async)");
        }

        // verify the required parameter 'body' is set
        if (body == null) {
            throw new ApiException("Missing the required parameter 'body' when calling addDomainCommentReplyV2(Async)");
        }

        return addDomainCommentReplyV2Call(owner, domain, version, comment, body, _callback);

    }

    /**
     * Reply to a comment
     * 
     * @param owner Domain owner (organization or user, case-sensitive) (required)
     * @param domain Domain name (case-sensitive) (required)
     * @param version Version identifier (required)
     * @param comment Comment identifier (required)
     * @param body  (required)
     * @return List&lt;Comment&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Newly created reply </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Request body invalid </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Access token is not set or invalid </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> The comment feature is not available for the organization&#39;s plan, or the authenticating user does not have permission to complete this action </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The specified domain or comment was not found </td><td>  -  </td></tr>
     </table>
     */
    public List<Comment> addDomainCommentReplyV2(String owner, String domain, String version, String comment, NewReply body) throws ApiException {
        ApiResponse<List<Comment>> localVarResp = addDomainCommentReplyV2WithHttpInfo(owner, domain, version, comment, body);
        return localVarResp.getData();
    }

    /**
     * Reply to a comment
     * 
     * @param owner Domain owner (organization or user, case-sensitive) (required)
     * @param domain Domain name (case-sensitive) (required)
     * @param version Version identifier (required)
     * @param comment Comment identifier (required)
     * @param body  (required)
     * @return ApiResponse&lt;List&lt;Comment&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Newly created reply </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Request body invalid </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Access token is not set or invalid </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> The comment feature is not available for the organization&#39;s plan, or the authenticating user does not have permission to complete this action </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The specified domain or comment was not found </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<Comment>> addDomainCommentReplyV2WithHttpInfo(String owner, String domain, String version, String comment, NewReply body) throws ApiException {
        okhttp3.Call localVarCall = addDomainCommentReplyV2ValidateBeforeCall(owner, domain, version, comment, body, null);
        Type localVarReturnType = new TypeToken<List<Comment>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Reply to a comment (asynchronously)
     * 
     * @param owner Domain owner (organization or user, case-sensitive) (required)
     * @param domain Domain name (case-sensitive) (required)
     * @param version Version identifier (required)
     * @param comment Comment identifier (required)
     * @param body  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Newly created reply </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Request body invalid </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Access token is not set or invalid </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> The comment feature is not available for the organization&#39;s plan, or the authenticating user does not have permission to complete this action </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The specified domain or comment was not found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call addDomainCommentReplyV2Async(String owner, String domain, String version, String comment, NewReply body, final ApiCallback<List<Comment>> _callback) throws ApiException {

        okhttp3.Call localVarCall = addDomainCommentReplyV2ValidateBeforeCall(owner, domain, version, comment, body, _callback);
        Type localVarReturnType = new TypeToken<List<Comment>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for addDomainCommentV2
     * @param owner Domain owner (organization or user, case-sensitive) (required)
     * @param domain Domain name (case-sensitive) (required)
     * @param version Version identifier (required)
     * @param body  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Newly created comment for the specified domain </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Request body invalid </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Access token is not set or invalid </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> The comment feature is not available for the organization&#39;s plan, or the authenticating user does not have permission to complete this action </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The specified domain was not found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call addDomainCommentV2Call(String owner, String domain, String version, NewComment body, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = body;

        // create path and map variables
        String localVarPath = "/domains/{owner}/{domain}/{version}/comments"
            .replace("{" + "owner" + "}", localVarApiClient.escapeString(owner.toString()))
            .replace("{" + "domain" + "}", localVarApiClient.escapeString(domain.toString()))
            .replace("{" + "version" + "}", localVarApiClient.escapeString(version.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "TokenSecured" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call addDomainCommentV2ValidateBeforeCall(String owner, String domain, String version, NewComment body, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'owner' is set
        if (owner == null) {
            throw new ApiException("Missing the required parameter 'owner' when calling addDomainCommentV2(Async)");
        }

        // verify the required parameter 'domain' is set
        if (domain == null) {
            throw new ApiException("Missing the required parameter 'domain' when calling addDomainCommentV2(Async)");
        }

        // verify the required parameter 'version' is set
        if (version == null) {
            throw new ApiException("Missing the required parameter 'version' when calling addDomainCommentV2(Async)");
        }

        // verify the required parameter 'body' is set
        if (body == null) {
            throw new ApiException("Missing the required parameter 'body' when calling addDomainCommentV2(Async)");
        }

        return addDomainCommentV2Call(owner, domain, version, body, _callback);

    }

    /**
     * Add a new comment
     * 
     * @param owner Domain owner (organization or user, case-sensitive) (required)
     * @param domain Domain name (case-sensitive) (required)
     * @param version Version identifier (required)
     * @param body  (required)
     * @return ClosableComment
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Newly created comment for the specified domain </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Request body invalid </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Access token is not set or invalid </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> The comment feature is not available for the organization&#39;s plan, or the authenticating user does not have permission to complete this action </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The specified domain was not found </td><td>  -  </td></tr>
     </table>
     */
    public ClosableComment addDomainCommentV2(String owner, String domain, String version, NewComment body) throws ApiException {
        ApiResponse<ClosableComment> localVarResp = addDomainCommentV2WithHttpInfo(owner, domain, version, body);
        return localVarResp.getData();
    }

    /**
     * Add a new comment
     * 
     * @param owner Domain owner (organization or user, case-sensitive) (required)
     * @param domain Domain name (case-sensitive) (required)
     * @param version Version identifier (required)
     * @param body  (required)
     * @return ApiResponse&lt;ClosableComment&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Newly created comment for the specified domain </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Request body invalid </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Access token is not set or invalid </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> The comment feature is not available for the organization&#39;s plan, or the authenticating user does not have permission to complete this action </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The specified domain was not found </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ClosableComment> addDomainCommentV2WithHttpInfo(String owner, String domain, String version, NewComment body) throws ApiException {
        okhttp3.Call localVarCall = addDomainCommentV2ValidateBeforeCall(owner, domain, version, body, null);
        Type localVarReturnType = new TypeToken<ClosableComment>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Add a new comment (asynchronously)
     * 
     * @param owner Domain owner (organization or user, case-sensitive) (required)
     * @param domain Domain name (case-sensitive) (required)
     * @param version Version identifier (required)
     * @param body  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Newly created comment for the specified domain </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Request body invalid </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Access token is not set or invalid </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> The comment feature is not available for the organization&#39;s plan, or the authenticating user does not have permission to complete this action </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The specified domain was not found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call addDomainCommentV2Async(String owner, String domain, String version, NewComment body, final ApiCallback<ClosableComment> _callback) throws ApiException {

        okhttp3.Call localVarCall = addDomainCommentV2ValidateBeforeCall(owner, domain, version, body, _callback);
        Type localVarReturnType = new TypeToken<ClosableComment>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for cloneDomain
     * @param owner Domain owner (organization or user, case-sensitive) (required)
     * @param domain Domain name (case-sensitive) (required)
     * @param version The version to clone (case-sensitive) (required)
     * @param newVersion An object that contains the new version number and other parameters. The version number must be in the format described in the [documentation](https://support.smartbear.com/swaggerhub/docs/apis/versioning.html#format). (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> New domain version was successfully created </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Access denied </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The specified domain or version was not found </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> The domain version you are trying to create already exists </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call cloneDomainCall(String owner, String domain, String version, NewVersion newVersion, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = newVersion;

        // create path and map variables
        String localVarPath = "/domains/{owner}/{domain}/{version}/clone"
            .replace("{" + "owner" + "}", localVarApiClient.escapeString(owner.toString()))
            .replace("{" + "domain" + "}", localVarApiClient.escapeString(domain.toString()))
            .replace("{" + "version" + "}", localVarApiClient.escapeString(version.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "TokenSecured" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call cloneDomainValidateBeforeCall(String owner, String domain, String version, NewVersion newVersion, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'owner' is set
        if (owner == null) {
            throw new ApiException("Missing the required parameter 'owner' when calling cloneDomain(Async)");
        }

        // verify the required parameter 'domain' is set
        if (domain == null) {
            throw new ApiException("Missing the required parameter 'domain' when calling cloneDomain(Async)");
        }

        // verify the required parameter 'version' is set
        if (version == null) {
            throw new ApiException("Missing the required parameter 'version' when calling cloneDomain(Async)");
        }

        // verify the required parameter 'newVersion' is set
        if (newVersion == null) {
            throw new ApiException("Missing the required parameter 'newVersion' when calling cloneDomain(Async)");
        }

        return cloneDomainCall(owner, domain, version, newVersion, _callback);

    }

    /**
     * Create a new domain version
     * Use this operation to clone an existing domain version as a new version.  Note that the new version is not automatically set as the default version.
     * @param owner Domain owner (organization or user, case-sensitive) (required)
     * @param domain Domain name (case-sensitive) (required)
     * @param version The version to clone (case-sensitive) (required)
     * @param newVersion An object that contains the new version number and other parameters. The version number must be in the format described in the [documentation](https://support.smartbear.com/swaggerhub/docs/apis/versioning.html#format). (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> New domain version was successfully created </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Access denied </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The specified domain or version was not found </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> The domain version you are trying to create already exists </td><td>  -  </td></tr>
     </table>
     */
    public void cloneDomain(String owner, String domain, String version, NewVersion newVersion) throws ApiException {
        cloneDomainWithHttpInfo(owner, domain, version, newVersion);
    }

    /**
     * Create a new domain version
     * Use this operation to clone an existing domain version as a new version.  Note that the new version is not automatically set as the default version.
     * @param owner Domain owner (organization or user, case-sensitive) (required)
     * @param domain Domain name (case-sensitive) (required)
     * @param version The version to clone (case-sensitive) (required)
     * @param newVersion An object that contains the new version number and other parameters. The version number must be in the format described in the [documentation](https://support.smartbear.com/swaggerhub/docs/apis/versioning.html#format). (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> New domain version was successfully created </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Access denied </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The specified domain or version was not found </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> The domain version you are trying to create already exists </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> cloneDomainWithHttpInfo(String owner, String domain, String version, NewVersion newVersion) throws ApiException {
        okhttp3.Call localVarCall = cloneDomainValidateBeforeCall(owner, domain, version, newVersion, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Create a new domain version (asynchronously)
     * Use this operation to clone an existing domain version as a new version.  Note that the new version is not automatically set as the default version.
     * @param owner Domain owner (organization or user, case-sensitive) (required)
     * @param domain Domain name (case-sensitive) (required)
     * @param version The version to clone (case-sensitive) (required)
     * @param newVersion An object that contains the new version number and other parameters. The version number must be in the format described in the [documentation](https://support.smartbear.com/swaggerhub/docs/apis/versioning.html#format). (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> New domain version was successfully created </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Access denied </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The specified domain or version was not found </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> The domain version you are trying to create already exists </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call cloneDomainAsync(String owner, String domain, String version, NewVersion newVersion, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = cloneDomainValidateBeforeCall(owner, domain, version, newVersion, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for deleteDomain
     * @param owner Domain owner (organization or user, case-sensitive) (required)
     * @param domain Domain name (case-sensitive) (required)
     * @param force If this domain is referenced from other APIs and domains, this parameter must be &#x60;true&#x60;. Otherwise, the request will be rejected with status code 424. (optional, default to false)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The domain was successfully deleted </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Access denied </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The specified domain not found </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> The domain has published versions and can not be deleted </td><td>  -  </td></tr>
        <tr><td> 424 </td><td> The domain you are trying to delete is referenced from other APIs and domains. To delete it anyway, repeat the request with the &#x60;force&#x3D;true&#x60; query parameter.  The response body contains a list of APIs and domains that reference this domain. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteDomainCall(String owner, String domain, Boolean force, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/domains/{owner}/{domain}"
            .replace("{" + "owner" + "}", localVarApiClient.escapeString(owner.toString()))
            .replace("{" + "domain" + "}", localVarApiClient.escapeString(domain.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (force != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("force", force));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "TokenSecured" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call deleteDomainValidateBeforeCall(String owner, String domain, Boolean force, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'owner' is set
        if (owner == null) {
            throw new ApiException("Missing the required parameter 'owner' when calling deleteDomain(Async)");
        }

        // verify the required parameter 'domain' is set
        if (domain == null) {
            throw new ApiException("Missing the required parameter 'domain' when calling deleteDomain(Async)");
        }

        return deleteDomainCall(owner, domain, force, _callback);

    }

    /**
     * Delete a domain
     * 
     * @param owner Domain owner (organization or user, case-sensitive) (required)
     * @param domain Domain name (case-sensitive) (required)
     * @param force If this domain is referenced from other APIs and domains, this parameter must be &#x60;true&#x60;. Otherwise, the request will be rejected with status code 424. (optional, default to false)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The domain was successfully deleted </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Access denied </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The specified domain not found </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> The domain has published versions and can not be deleted </td><td>  -  </td></tr>
        <tr><td> 424 </td><td> The domain you are trying to delete is referenced from other APIs and domains. To delete it anyway, repeat the request with the &#x60;force&#x3D;true&#x60; query parameter.  The response body contains a list of APIs and domains that reference this domain. </td><td>  -  </td></tr>
     </table>
     */
    public void deleteDomain(String owner, String domain, Boolean force) throws ApiException {
        deleteDomainWithHttpInfo(owner, domain, force);
    }

    /**
     * Delete a domain
     * 
     * @param owner Domain owner (organization or user, case-sensitive) (required)
     * @param domain Domain name (case-sensitive) (required)
     * @param force If this domain is referenced from other APIs and domains, this parameter must be &#x60;true&#x60;. Otherwise, the request will be rejected with status code 424. (optional, default to false)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The domain was successfully deleted </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Access denied </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The specified domain not found </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> The domain has published versions and can not be deleted </td><td>  -  </td></tr>
        <tr><td> 424 </td><td> The domain you are trying to delete is referenced from other APIs and domains. To delete it anyway, repeat the request with the &#x60;force&#x3D;true&#x60; query parameter.  The response body contains a list of APIs and domains that reference this domain. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> deleteDomainWithHttpInfo(String owner, String domain, Boolean force) throws ApiException {
        okhttp3.Call localVarCall = deleteDomainValidateBeforeCall(owner, domain, force, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Delete a domain (asynchronously)
     * 
     * @param owner Domain owner (organization or user, case-sensitive) (required)
     * @param domain Domain name (case-sensitive) (required)
     * @param force If this domain is referenced from other APIs and domains, this parameter must be &#x60;true&#x60;. Otherwise, the request will be rejected with status code 424. (optional, default to false)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The domain was successfully deleted </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Access denied </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The specified domain not found </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> The domain has published versions and can not be deleted </td><td>  -  </td></tr>
        <tr><td> 424 </td><td> The domain you are trying to delete is referenced from other APIs and domains. To delete it anyway, repeat the request with the &#x60;force&#x3D;true&#x60; query parameter.  The response body contains a list of APIs and domains that reference this domain. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteDomainAsync(String owner, String domain, Boolean force, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = deleteDomainValidateBeforeCall(owner, domain, force, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for deleteDomainCommentReplyV2
     * @param owner Domain owner (organization or user, case-sensitive) (required)
     * @param domain Domain name (case-sensitive) (required)
     * @param version Version identifier (required)
     * @param comment Comment identifier (required)
     * @param reply Reply identifier (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Comment reply was deleted </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Access token is not set or invalid </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> The comment feature is not available for the organization&#39;s plan, or the authenticating user does not have permission to complete this action </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The specified domain, comment, or reply was not found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteDomainCommentReplyV2Call(String owner, String domain, String version, String comment, String reply, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/domains/{owner}/{domain}/{version}/comments/{comment}/replies/{reply}"
            .replace("{" + "owner" + "}", localVarApiClient.escapeString(owner.toString()))
            .replace("{" + "domain" + "}", localVarApiClient.escapeString(domain.toString()))
            .replace("{" + "version" + "}", localVarApiClient.escapeString(version.toString()))
            .replace("{" + "comment" + "}", localVarApiClient.escapeString(comment.toString()))
            .replace("{" + "reply" + "}", localVarApiClient.escapeString(reply.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "TokenSecured" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call deleteDomainCommentReplyV2ValidateBeforeCall(String owner, String domain, String version, String comment, String reply, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'owner' is set
        if (owner == null) {
            throw new ApiException("Missing the required parameter 'owner' when calling deleteDomainCommentReplyV2(Async)");
        }

        // verify the required parameter 'domain' is set
        if (domain == null) {
            throw new ApiException("Missing the required parameter 'domain' when calling deleteDomainCommentReplyV2(Async)");
        }

        // verify the required parameter 'version' is set
        if (version == null) {
            throw new ApiException("Missing the required parameter 'version' when calling deleteDomainCommentReplyV2(Async)");
        }

        // verify the required parameter 'comment' is set
        if (comment == null) {
            throw new ApiException("Missing the required parameter 'comment' when calling deleteDomainCommentReplyV2(Async)");
        }

        // verify the required parameter 'reply' is set
        if (reply == null) {
            throw new ApiException("Missing the required parameter 'reply' when calling deleteDomainCommentReplyV2(Async)");
        }

        return deleteDomainCommentReplyV2Call(owner, domain, version, comment, reply, _callback);

    }

    /**
     * Delete a comment reply
     * 
     * @param owner Domain owner (organization or user, case-sensitive) (required)
     * @param domain Domain name (case-sensitive) (required)
     * @param version Version identifier (required)
     * @param comment Comment identifier (required)
     * @param reply Reply identifier (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Comment reply was deleted </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Access token is not set or invalid </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> The comment feature is not available for the organization&#39;s plan, or the authenticating user does not have permission to complete this action </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The specified domain, comment, or reply was not found </td><td>  -  </td></tr>
     </table>
     */
    public void deleteDomainCommentReplyV2(String owner, String domain, String version, String comment, String reply) throws ApiException {
        deleteDomainCommentReplyV2WithHttpInfo(owner, domain, version, comment, reply);
    }

    /**
     * Delete a comment reply
     * 
     * @param owner Domain owner (organization or user, case-sensitive) (required)
     * @param domain Domain name (case-sensitive) (required)
     * @param version Version identifier (required)
     * @param comment Comment identifier (required)
     * @param reply Reply identifier (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Comment reply was deleted </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Access token is not set or invalid </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> The comment feature is not available for the organization&#39;s plan, or the authenticating user does not have permission to complete this action </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The specified domain, comment, or reply was not found </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> deleteDomainCommentReplyV2WithHttpInfo(String owner, String domain, String version, String comment, String reply) throws ApiException {
        okhttp3.Call localVarCall = deleteDomainCommentReplyV2ValidateBeforeCall(owner, domain, version, comment, reply, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Delete a comment reply (asynchronously)
     * 
     * @param owner Domain owner (organization or user, case-sensitive) (required)
     * @param domain Domain name (case-sensitive) (required)
     * @param version Version identifier (required)
     * @param comment Comment identifier (required)
     * @param reply Reply identifier (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Comment reply was deleted </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Access token is not set or invalid </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> The comment feature is not available for the organization&#39;s plan, or the authenticating user does not have permission to complete this action </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The specified domain, comment, or reply was not found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteDomainCommentReplyV2Async(String owner, String domain, String version, String comment, String reply, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = deleteDomainCommentReplyV2ValidateBeforeCall(owner, domain, version, comment, reply, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for deleteDomainCommentV2
     * @param owner Domain owner (organization or user, case-sensitive) (required)
     * @param domain Domain name (case-sensitive) (required)
     * @param version Version identifier (required)
     * @param comment Comment identifier (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Comment was deleted </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Access token is not set or invalid </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> The comment feature is not available for the organization&#39;s plan, or the authenticating user does not have permission to complete this action </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The specified domain or comment was not found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteDomainCommentV2Call(String owner, String domain, String version, String comment, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/domains/{owner}/{domain}/{version}/comments/{comment}"
            .replace("{" + "owner" + "}", localVarApiClient.escapeString(owner.toString()))
            .replace("{" + "domain" + "}", localVarApiClient.escapeString(domain.toString()))
            .replace("{" + "version" + "}", localVarApiClient.escapeString(version.toString()))
            .replace("{" + "comment" + "}", localVarApiClient.escapeString(comment.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "TokenSecured" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call deleteDomainCommentV2ValidateBeforeCall(String owner, String domain, String version, String comment, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'owner' is set
        if (owner == null) {
            throw new ApiException("Missing the required parameter 'owner' when calling deleteDomainCommentV2(Async)");
        }

        // verify the required parameter 'domain' is set
        if (domain == null) {
            throw new ApiException("Missing the required parameter 'domain' when calling deleteDomainCommentV2(Async)");
        }

        // verify the required parameter 'version' is set
        if (version == null) {
            throw new ApiException("Missing the required parameter 'version' when calling deleteDomainCommentV2(Async)");
        }

        // verify the required parameter 'comment' is set
        if (comment == null) {
            throw new ApiException("Missing the required parameter 'comment' when calling deleteDomainCommentV2(Async)");
        }

        return deleteDomainCommentV2Call(owner, domain, version, comment, _callback);

    }

    /**
     * Delete a comment
     * 
     * @param owner Domain owner (organization or user, case-sensitive) (required)
     * @param domain Domain name (case-sensitive) (required)
     * @param version Version identifier (required)
     * @param comment Comment identifier (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Comment was deleted </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Access token is not set or invalid </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> The comment feature is not available for the organization&#39;s plan, or the authenticating user does not have permission to complete this action </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The specified domain or comment was not found </td><td>  -  </td></tr>
     </table>
     */
    public void deleteDomainCommentV2(String owner, String domain, String version, String comment) throws ApiException {
        deleteDomainCommentV2WithHttpInfo(owner, domain, version, comment);
    }

    /**
     * Delete a comment
     * 
     * @param owner Domain owner (organization or user, case-sensitive) (required)
     * @param domain Domain name (case-sensitive) (required)
     * @param version Version identifier (required)
     * @param comment Comment identifier (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Comment was deleted </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Access token is not set or invalid </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> The comment feature is not available for the organization&#39;s plan, or the authenticating user does not have permission to complete this action </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The specified domain or comment was not found </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> deleteDomainCommentV2WithHttpInfo(String owner, String domain, String version, String comment) throws ApiException {
        okhttp3.Call localVarCall = deleteDomainCommentV2ValidateBeforeCall(owner, domain, version, comment, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Delete a comment (asynchronously)
     * 
     * @param owner Domain owner (organization or user, case-sensitive) (required)
     * @param domain Domain name (case-sensitive) (required)
     * @param version Version identifier (required)
     * @param comment Comment identifier (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Comment was deleted </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Access token is not set or invalid </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> The comment feature is not available for the organization&#39;s plan, or the authenticating user does not have permission to complete this action </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The specified domain or comment was not found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteDomainCommentV2Async(String owner, String domain, String version, String comment, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = deleteDomainCommentV2ValidateBeforeCall(owner, domain, version, comment, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for deleteDomainVersion
     * @param owner Domain owner (organization or user, case-sensitive) (required)
     * @param domain Domain name (case-sensitive) (required)
     * @param version Version identifier (required)
     * @param force If this domain version is referenced from other APIs and domains, this parameter must be &#x60;true&#x60;. Otherwise, the request will be rejected with status code 424. (optional, default to false)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The domain version was successfully deleted </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Access denied </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The specified domain or version was not found </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> The domain version is published and can not be deleted or it is the only version of this domain </td><td>  -  </td></tr>
        <tr><td> 424 </td><td> The domain version you are trying to delete is referenced from other APIs and domains. To delete it anyway, repeat the request with the &#x60;force&#x3D;true&#x60; query parameter.  The response body contains a list of APIs and domains that reference this domain version. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteDomainVersionCall(String owner, String domain, String version, Boolean force, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/domains/{owner}/{domain}/{version}"
            .replace("{" + "owner" + "}", localVarApiClient.escapeString(owner.toString()))
            .replace("{" + "domain" + "}", localVarApiClient.escapeString(domain.toString()))
            .replace("{" + "version" + "}", localVarApiClient.escapeString(version.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (force != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("force", force));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "TokenSecured" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call deleteDomainVersionValidateBeforeCall(String owner, String domain, String version, Boolean force, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'owner' is set
        if (owner == null) {
            throw new ApiException("Missing the required parameter 'owner' when calling deleteDomainVersion(Async)");
        }

        // verify the required parameter 'domain' is set
        if (domain == null) {
            throw new ApiException("Missing the required parameter 'domain' when calling deleteDomainVersion(Async)");
        }

        // verify the required parameter 'version' is set
        if (version == null) {
            throw new ApiException("Missing the required parameter 'version' when calling deleteDomainVersion(Async)");
        }

        return deleteDomainVersionCall(owner, domain, version, force, _callback);

    }

    /**
     * Delete a domain version
     * 
     * @param owner Domain owner (organization or user, case-sensitive) (required)
     * @param domain Domain name (case-sensitive) (required)
     * @param version Version identifier (required)
     * @param force If this domain version is referenced from other APIs and domains, this parameter must be &#x60;true&#x60;. Otherwise, the request will be rejected with status code 424. (optional, default to false)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The domain version was successfully deleted </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Access denied </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The specified domain or version was not found </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> The domain version is published and can not be deleted or it is the only version of this domain </td><td>  -  </td></tr>
        <tr><td> 424 </td><td> The domain version you are trying to delete is referenced from other APIs and domains. To delete it anyway, repeat the request with the &#x60;force&#x3D;true&#x60; query parameter.  The response body contains a list of APIs and domains that reference this domain version. </td><td>  -  </td></tr>
     </table>
     */
    public void deleteDomainVersion(String owner, String domain, String version, Boolean force) throws ApiException {
        deleteDomainVersionWithHttpInfo(owner, domain, version, force);
    }

    /**
     * Delete a domain version
     * 
     * @param owner Domain owner (organization or user, case-sensitive) (required)
     * @param domain Domain name (case-sensitive) (required)
     * @param version Version identifier (required)
     * @param force If this domain version is referenced from other APIs and domains, this parameter must be &#x60;true&#x60;. Otherwise, the request will be rejected with status code 424. (optional, default to false)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The domain version was successfully deleted </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Access denied </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The specified domain or version was not found </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> The domain version is published and can not be deleted or it is the only version of this domain </td><td>  -  </td></tr>
        <tr><td> 424 </td><td> The domain version you are trying to delete is referenced from other APIs and domains. To delete it anyway, repeat the request with the &#x60;force&#x3D;true&#x60; query parameter.  The response body contains a list of APIs and domains that reference this domain version. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> deleteDomainVersionWithHttpInfo(String owner, String domain, String version, Boolean force) throws ApiException {
        okhttp3.Call localVarCall = deleteDomainVersionValidateBeforeCall(owner, domain, version, force, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Delete a domain version (asynchronously)
     * 
     * @param owner Domain owner (organization or user, case-sensitive) (required)
     * @param domain Domain name (case-sensitive) (required)
     * @param version Version identifier (required)
     * @param force If this domain version is referenced from other APIs and domains, this parameter must be &#x60;true&#x60;. Otherwise, the request will be rejected with status code 424. (optional, default to false)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The domain version was successfully deleted </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Access denied </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The specified domain or version was not found </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> The domain version is published and can not be deleted or it is the only version of this domain </td><td>  -  </td></tr>
        <tr><td> 424 </td><td> The domain version you are trying to delete is referenced from other APIs and domains. To delete it anyway, repeat the request with the &#x60;force&#x3D;true&#x60; query parameter.  The response body contains a list of APIs and domains that reference this domain version. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteDomainVersionAsync(String owner, String domain, String version, Boolean force, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = deleteDomainVersionValidateBeforeCall(owner, domain, version, force, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for forkDomain
     * @param owner Domain owner (organization or user, case-sensitive) (required)
     * @param domain Domain name (case-sensitive) (required)
     * @param version Version identifier (required)
     * @param forkVersion Fork parameters (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> The domain was successfully forked </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Some parameters are missing or invalid </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Access token is not set or invalid </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Access denied </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The specified owner or domain was not found </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> A domain with the name and version you&#39;re trying to create already exists </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call forkDomainCall(String owner, String domain, String version, ForkVersion forkVersion, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = forkVersion;

        // create path and map variables
        String localVarPath = "/domains/{owner}/{domain}/{version}/fork"
            .replace("{" + "owner" + "}", localVarApiClient.escapeString(owner.toString()))
            .replace("{" + "domain" + "}", localVarApiClient.escapeString(domain.toString()))
            .replace("{" + "version" + "}", localVarApiClient.escapeString(version.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "TokenSecured" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call forkDomainValidateBeforeCall(String owner, String domain, String version, ForkVersion forkVersion, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'owner' is set
        if (owner == null) {
            throw new ApiException("Missing the required parameter 'owner' when calling forkDomain(Async)");
        }

        // verify the required parameter 'domain' is set
        if (domain == null) {
            throw new ApiException("Missing the required parameter 'domain' when calling forkDomain(Async)");
        }

        // verify the required parameter 'version' is set
        if (version == null) {
            throw new ApiException("Missing the required parameter 'version' when calling forkDomain(Async)");
        }

        // verify the required parameter 'forkVersion' is set
        if (forkVersion == null) {
            throw new ApiException("Missing the required parameter 'forkVersion' when calling forkDomain(Async)");
        }

        return forkDomainCall(owner, domain, version, forkVersion, _callback);

    }

    /**
     * Fork a domain
     * Creates a [fork](https://support.smartbear.com/swaggerhub/docs/apis/forking-api.html) of the specified domain definition and version. The fork can be created as a new domain, or as a new version in another existing domain.
     * @param owner Domain owner (organization or user, case-sensitive) (required)
     * @param domain Domain name (case-sensitive) (required)
     * @param version Version identifier (required)
     * @param forkVersion Fork parameters (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> The domain was successfully forked </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Some parameters are missing or invalid </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Access token is not set or invalid </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Access denied </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The specified owner or domain was not found </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> A domain with the name and version you&#39;re trying to create already exists </td><td>  -  </td></tr>
     </table>
     */
    public void forkDomain(String owner, String domain, String version, ForkVersion forkVersion) throws ApiException {
        forkDomainWithHttpInfo(owner, domain, version, forkVersion);
    }

    /**
     * Fork a domain
     * Creates a [fork](https://support.smartbear.com/swaggerhub/docs/apis/forking-api.html) of the specified domain definition and version. The fork can be created as a new domain, or as a new version in another existing domain.
     * @param owner Domain owner (organization or user, case-sensitive) (required)
     * @param domain Domain name (case-sensitive) (required)
     * @param version Version identifier (required)
     * @param forkVersion Fork parameters (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> The domain was successfully forked </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Some parameters are missing or invalid </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Access token is not set or invalid </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Access denied </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The specified owner or domain was not found </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> A domain with the name and version you&#39;re trying to create already exists </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> forkDomainWithHttpInfo(String owner, String domain, String version, ForkVersion forkVersion) throws ApiException {
        okhttp3.Call localVarCall = forkDomainValidateBeforeCall(owner, domain, version, forkVersion, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Fork a domain (asynchronously)
     * Creates a [fork](https://support.smartbear.com/swaggerhub/docs/apis/forking-api.html) of the specified domain definition and version. The fork can be created as a new domain, or as a new version in another existing domain.
     * @param owner Domain owner (organization or user, case-sensitive) (required)
     * @param domain Domain name (case-sensitive) (required)
     * @param version Version identifier (required)
     * @param forkVersion Fork parameters (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> The domain was successfully forked </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Some parameters are missing or invalid </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Access token is not set or invalid </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Access denied </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The specified owner or domain was not found </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> A domain with the name and version you&#39;re trying to create already exists </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call forkDomainAsync(String owner, String domain, String version, ForkVersion forkVersion, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = forkDomainValidateBeforeCall(owner, domain, version, forkVersion, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for getDomainCommentsV2
     * @param owner Domain owner (organization or user, case-sensitive) (required)
     * @param domain Domain name (case-sensitive) (required)
     * @param version Version identifier (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Comments for the specified domain version </td><td>  -  </td></tr>
        <tr><td> 204 </td><td> No comments were found for the specified domain version </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Access token is not set or invalid </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> The comment feature is not available for the organization&#39;s plan, or the authenticating user does not have permission to complete this action </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The specified domain was not found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getDomainCommentsV2Call(String owner, String domain, String version, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/domains/{owner}/{domain}/{version}/comments"
            .replace("{" + "owner" + "}", localVarApiClient.escapeString(owner.toString()))
            .replace("{" + "domain" + "}", localVarApiClient.escapeString(domain.toString()))
            .replace("{" + "version" + "}", localVarApiClient.escapeString(version.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "TokenSecured" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getDomainCommentsV2ValidateBeforeCall(String owner, String domain, String version, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'owner' is set
        if (owner == null) {
            throw new ApiException("Missing the required parameter 'owner' when calling getDomainCommentsV2(Async)");
        }

        // verify the required parameter 'domain' is set
        if (domain == null) {
            throw new ApiException("Missing the required parameter 'domain' when calling getDomainCommentsV2(Async)");
        }

        // verify the required parameter 'version' is set
        if (version == null) {
            throw new ApiException("Missing the required parameter 'version' when calling getDomainCommentsV2(Async)");
        }

        return getDomainCommentsV2Call(owner, domain, version, _callback);

    }

    /**
     * Get comments for the specified domain version
     * 
     * @param owner Domain owner (organization or user, case-sensitive) (required)
     * @param domain Domain name (case-sensitive) (required)
     * @param version Version identifier (required)
     * @return List&lt;ClosableComment&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Comments for the specified domain version </td><td>  -  </td></tr>
        <tr><td> 204 </td><td> No comments were found for the specified domain version </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Access token is not set or invalid </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> The comment feature is not available for the organization&#39;s plan, or the authenticating user does not have permission to complete this action </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The specified domain was not found </td><td>  -  </td></tr>
     </table>
     */
    public List<ClosableComment> getDomainCommentsV2(String owner, String domain, String version) throws ApiException {
        ApiResponse<List<ClosableComment>> localVarResp = getDomainCommentsV2WithHttpInfo(owner, domain, version);
        return localVarResp.getData();
    }

    /**
     * Get comments for the specified domain version
     * 
     * @param owner Domain owner (organization or user, case-sensitive) (required)
     * @param domain Domain name (case-sensitive) (required)
     * @param version Version identifier (required)
     * @return ApiResponse&lt;List&lt;ClosableComment&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Comments for the specified domain version </td><td>  -  </td></tr>
        <tr><td> 204 </td><td> No comments were found for the specified domain version </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Access token is not set or invalid </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> The comment feature is not available for the organization&#39;s plan, or the authenticating user does not have permission to complete this action </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The specified domain was not found </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<ClosableComment>> getDomainCommentsV2WithHttpInfo(String owner, String domain, String version) throws ApiException {
        okhttp3.Call localVarCall = getDomainCommentsV2ValidateBeforeCall(owner, domain, version, null);
        Type localVarReturnType = new TypeToken<List<ClosableComment>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get comments for the specified domain version (asynchronously)
     * 
     * @param owner Domain owner (organization or user, case-sensitive) (required)
     * @param domain Domain name (case-sensitive) (required)
     * @param version Version identifier (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Comments for the specified domain version </td><td>  -  </td></tr>
        <tr><td> 204 </td><td> No comments were found for the specified domain version </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Access token is not set or invalid </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> The comment feature is not available for the organization&#39;s plan, or the authenticating user does not have permission to complete this action </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The specified domain was not found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getDomainCommentsV2Async(String owner, String domain, String version, final ApiCallback<List<ClosableComment>> _callback) throws ApiException {

        okhttp3.Call localVarCall = getDomainCommentsV2ValidateBeforeCall(owner, domain, version, _callback);
        Type localVarReturnType = new TypeToken<List<ClosableComment>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getDomainDefaultVersion
     * @param owner Domain owner (organization or user, case-sensitive) (required)
     * @param domain Domain name (case-sensitive) (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The default version identifier for this domain </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The specified API was not found. If it is private, make sure the request is authenticated. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getDomainDefaultVersionCall(String owner, String domain, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/domains/{owner}/{domain}/settings/default"
            .replace("{" + "owner" + "}", localVarApiClient.escapeString(owner.toString()))
            .replace("{" + "domain" + "}", localVarApiClient.escapeString(domain.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "TokenSecured" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getDomainDefaultVersionValidateBeforeCall(String owner, String domain, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'owner' is set
        if (owner == null) {
            throw new ApiException("Missing the required parameter 'owner' when calling getDomainDefaultVersion(Async)");
        }

        // verify the required parameter 'domain' is set
        if (domain == null) {
            throw new ApiException("Missing the required parameter 'domain' when calling getDomainDefaultVersion(Async)");
        }

        return getDomainDefaultVersionCall(owner, domain, _callback);

    }

    /**
     * Get the default version of a domain
     * This operation returns the version identifier, such as &#x60;1.0.0&#x60;. To get the definition itself, use &#x60;GET /domains/{owner}/{domain}/{version}&#x60;.
     * @param owner Domain owner (organization or user, case-sensitive) (required)
     * @param domain Domain name (case-sensitive) (required)
     * @return DefaultVersion
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The default version identifier for this domain </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The specified API was not found. If it is private, make sure the request is authenticated. </td><td>  -  </td></tr>
     </table>
     */
    public DefaultVersion getDomainDefaultVersion(String owner, String domain) throws ApiException {
        ApiResponse<DefaultVersion> localVarResp = getDomainDefaultVersionWithHttpInfo(owner, domain);
        return localVarResp.getData();
    }

    /**
     * Get the default version of a domain
     * This operation returns the version identifier, such as &#x60;1.0.0&#x60;. To get the definition itself, use &#x60;GET /domains/{owner}/{domain}/{version}&#x60;.
     * @param owner Domain owner (organization or user, case-sensitive) (required)
     * @param domain Domain name (case-sensitive) (required)
     * @return ApiResponse&lt;DefaultVersion&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The default version identifier for this domain </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The specified API was not found. If it is private, make sure the request is authenticated. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<DefaultVersion> getDomainDefaultVersionWithHttpInfo(String owner, String domain) throws ApiException {
        okhttp3.Call localVarCall = getDomainDefaultVersionValidateBeforeCall(owner, domain, null);
        Type localVarReturnType = new TypeToken<DefaultVersion>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get the default version of a domain (asynchronously)
     * This operation returns the version identifier, such as &#x60;1.0.0&#x60;. To get the definition itself, use &#x60;GET /domains/{owner}/{domain}/{version}&#x60;.
     * @param owner Domain owner (organization or user, case-sensitive) (required)
     * @param domain Domain name (case-sensitive) (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The default version identifier for this domain </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The specified API was not found. If it is private, make sure the request is authenticated. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getDomainDefaultVersionAsync(String owner, String domain, final ApiCallback<DefaultVersion> _callback) throws ApiException {

        okhttp3.Call localVarCall = getDomainDefaultVersionValidateBeforeCall(owner, domain, _callback);
        Type localVarReturnType = new TypeToken<DefaultVersion>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getDomainDefinition
     * @param owner Domain owner (organization or user, case-sensitive) (required)
     * @param domain Domain name (case-sensitive) (required)
     * @param version Version identifier (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OpenAPI definition of a domain in the requested format (YAML or JSON) </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The specified domain or version was not found. If it is private, make sure the request is authenticated and the authenticating user has access to this API. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getDomainDefinitionCall(String owner, String domain, String version, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/domains/{owner}/{domain}/{version}"
            .replace("{" + "owner" + "}", localVarApiClient.escapeString(owner.toString()))
            .replace("{" + "domain" + "}", localVarApiClient.escapeString(domain.toString()))
            .replace("{" + "version" + "}", localVarApiClient.escapeString(version.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json",
            "application/yaml"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "TokenSecured" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getDomainDefinitionValidateBeforeCall(String owner, String domain, String version, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'owner' is set
        if (owner == null) {
            throw new ApiException("Missing the required parameter 'owner' when calling getDomainDefinition(Async)");
        }

        // verify the required parameter 'domain' is set
        if (domain == null) {
            throw new ApiException("Missing the required parameter 'domain' when calling getDomainDefinition(Async)");
        }

        // verify the required parameter 'version' is set
        if (version == null) {
            throw new ApiException("Missing the required parameter 'version' when calling getDomainDefinition(Async)");
        }

        return getDomainDefinitionCall(owner, domain, version, _callback);

    }

    /**
     * Get the OpenAPI definition of the specified domain version
     * 
     * @param owner Domain owner (organization or user, case-sensitive) (required)
     * @param domain Domain name (case-sensitive) (required)
     * @param version Version identifier (required)
     * @return Object
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OpenAPI definition of a domain in the requested format (YAML or JSON) </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The specified domain or version was not found. If it is private, make sure the request is authenticated and the authenticating user has access to this API. </td><td>  -  </td></tr>
     </table>
     */
    public Object getDomainDefinition(String owner, String domain, String version) throws ApiException {
        ApiResponse<Object> localVarResp = getDomainDefinitionWithHttpInfo(owner, domain, version);
        return localVarResp.getData();
    }

    /**
     * Get the OpenAPI definition of the specified domain version
     * 
     * @param owner Domain owner (organization or user, case-sensitive) (required)
     * @param domain Domain name (case-sensitive) (required)
     * @param version Version identifier (required)
     * @return ApiResponse&lt;Object&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OpenAPI definition of a domain in the requested format (YAML or JSON) </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The specified domain or version was not found. If it is private, make sure the request is authenticated and the authenticating user has access to this API. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Object> getDomainDefinitionWithHttpInfo(String owner, String domain, String version) throws ApiException {
        okhttp3.Call localVarCall = getDomainDefinitionValidateBeforeCall(owner, domain, version, null);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get the OpenAPI definition of the specified domain version (asynchronously)
     * 
     * @param owner Domain owner (organization or user, case-sensitive) (required)
     * @param domain Domain name (case-sensitive) (required)
     * @param version Version identifier (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OpenAPI definition of a domain in the requested format (YAML or JSON) </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The specified domain or version was not found. If it is private, make sure the request is authenticated and the authenticating user has access to this API. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getDomainDefinitionAsync(String owner, String domain, String version, final ApiCallback<Object> _callback) throws ApiException {

        okhttp3.Call localVarCall = getDomainDefinitionValidateBeforeCall(owner, domain, version, _callback);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getDomainJsonDefinition
     * @param owner Domain owner (organization or user, case-sensitive) (required)
     * @param domain Domain name (case-sensitive) (required)
     * @param version Version identifier (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Domain definition in JSON format </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The specified domain or version was not found. If it is private, make sure the request is authenticated and the authenticating user has access to this API. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getDomainJsonDefinitionCall(String owner, String domain, String version, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/domains/{owner}/{domain}/{version}/domain.json"
            .replace("{" + "owner" + "}", localVarApiClient.escapeString(owner.toString()))
            .replace("{" + "domain" + "}", localVarApiClient.escapeString(domain.toString()))
            .replace("{" + "version" + "}", localVarApiClient.escapeString(version.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "TokenSecured" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getDomainJsonDefinitionValidateBeforeCall(String owner, String domain, String version, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'owner' is set
        if (owner == null) {
            throw new ApiException("Missing the required parameter 'owner' when calling getDomainJsonDefinition(Async)");
        }

        // verify the required parameter 'domain' is set
        if (domain == null) {
            throw new ApiException("Missing the required parameter 'domain' when calling getDomainJsonDefinition(Async)");
        }

        // verify the required parameter 'version' is set
        if (version == null) {
            throw new ApiException("Missing the required parameter 'version' when calling getDomainJsonDefinition(Async)");
        }

        return getDomainJsonDefinitionCall(owner, domain, version, _callback);

    }

    /**
     * Get the OpenAPI definition for the specified domain version in JSON format
     * 
     * @param owner Domain owner (organization or user, case-sensitive) (required)
     * @param domain Domain name (case-sensitive) (required)
     * @param version Version identifier (required)
     * @return Object
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Domain definition in JSON format </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The specified domain or version was not found. If it is private, make sure the request is authenticated and the authenticating user has access to this API. </td><td>  -  </td></tr>
     </table>
     */
    public Object getDomainJsonDefinition(String owner, String domain, String version) throws ApiException {
        ApiResponse<Object> localVarResp = getDomainJsonDefinitionWithHttpInfo(owner, domain, version);
        return localVarResp.getData();
    }

    /**
     * Get the OpenAPI definition for the specified domain version in JSON format
     * 
     * @param owner Domain owner (organization or user, case-sensitive) (required)
     * @param domain Domain name (case-sensitive) (required)
     * @param version Version identifier (required)
     * @return ApiResponse&lt;Object&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Domain definition in JSON format </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The specified domain or version was not found. If it is private, make sure the request is authenticated and the authenticating user has access to this API. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Object> getDomainJsonDefinitionWithHttpInfo(String owner, String domain, String version) throws ApiException {
        okhttp3.Call localVarCall = getDomainJsonDefinitionValidateBeforeCall(owner, domain, version, null);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get the OpenAPI definition for the specified domain version in JSON format (asynchronously)
     * 
     * @param owner Domain owner (organization or user, case-sensitive) (required)
     * @param domain Domain name (case-sensitive) (required)
     * @param version Version identifier (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Domain definition in JSON format </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The specified domain or version was not found. If it is private, make sure the request is authenticated and the authenticating user has access to this API. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getDomainJsonDefinitionAsync(String owner, String domain, String version, final ApiCallback<Object> _callback) throws ApiException {

        okhttp3.Call localVarCall = getDomainJsonDefinitionValidateBeforeCall(owner, domain, version, _callback);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getDomainLifecycleSettings
     * @param owner Domain owner (organization or user, case-sensitive) (required)
     * @param domain Domain name (case-sensitive) (required)
     * @param version Version identifier (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The published status of this domain version </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Access token is not set or invalid </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The specified domain or version was not found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getDomainLifecycleSettingsCall(String owner, String domain, String version, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/domains/{owner}/{domain}/{version}/settings/lifecycle"
            .replace("{" + "owner" + "}", localVarApiClient.escapeString(owner.toString()))
            .replace("{" + "domain" + "}", localVarApiClient.escapeString(domain.toString()))
            .replace("{" + "version" + "}", localVarApiClient.escapeString(version.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "TokenSecured" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getDomainLifecycleSettingsValidateBeforeCall(String owner, String domain, String version, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'owner' is set
        if (owner == null) {
            throw new ApiException("Missing the required parameter 'owner' when calling getDomainLifecycleSettings(Async)");
        }

        // verify the required parameter 'domain' is set
        if (domain == null) {
            throw new ApiException("Missing the required parameter 'domain' when calling getDomainLifecycleSettings(Async)");
        }

        // verify the required parameter 'version' is set
        if (version == null) {
            throw new ApiException("Missing the required parameter 'version' when calling getDomainLifecycleSettings(Async)");
        }

        return getDomainLifecycleSettingsCall(owner, domain, version, _callback);

    }

    /**
     * Get the published status for the specified domain and version
     * 
     * @param owner Domain owner (organization or user, case-sensitive) (required)
     * @param domain Domain name (case-sensitive) (required)
     * @param version Version identifier (required)
     * @return LifecycleSettings
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The published status of this domain version </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Access token is not set or invalid </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The specified domain or version was not found </td><td>  -  </td></tr>
     </table>
     */
    public LifecycleSettings getDomainLifecycleSettings(String owner, String domain, String version) throws ApiException {
        ApiResponse<LifecycleSettings> localVarResp = getDomainLifecycleSettingsWithHttpInfo(owner, domain, version);
        return localVarResp.getData();
    }

    /**
     * Get the published status for the specified domain and version
     * 
     * @param owner Domain owner (organization or user, case-sensitive) (required)
     * @param domain Domain name (case-sensitive) (required)
     * @param version Version identifier (required)
     * @return ApiResponse&lt;LifecycleSettings&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The published status of this domain version </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Access token is not set or invalid </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The specified domain or version was not found </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<LifecycleSettings> getDomainLifecycleSettingsWithHttpInfo(String owner, String domain, String version) throws ApiException {
        okhttp3.Call localVarCall = getDomainLifecycleSettingsValidateBeforeCall(owner, domain, version, null);
        Type localVarReturnType = new TypeToken<LifecycleSettings>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get the published status for the specified domain and version (asynchronously)
     * 
     * @param owner Domain owner (organization or user, case-sensitive) (required)
     * @param domain Domain name (case-sensitive) (required)
     * @param version Version identifier (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The published status of this domain version </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Access token is not set or invalid </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The specified domain or version was not found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getDomainLifecycleSettingsAsync(String owner, String domain, String version, final ApiCallback<LifecycleSettings> _callback) throws ApiException {

        okhttp3.Call localVarCall = getDomainLifecycleSettingsValidateBeforeCall(owner, domain, version, _callback);
        Type localVarReturnType = new TypeToken<LifecycleSettings>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getDomainPrivateSettings
     * @param owner Domain owner (organization or user, case-sensitive) (required)
     * @param domain Domain name (case-sensitive) (required)
     * @param version Version identifier (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The response body indicates whether this domain version is private (&#x60;true&#x60;) or public (&#x60;false&#x60;) </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Access token is not set or invalid </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The specified domain or version was not found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getDomainPrivateSettingsCall(String owner, String domain, String version, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/domains/{owner}/{domain}/{version}/settings/private"
            .replace("{" + "owner" + "}", localVarApiClient.escapeString(owner.toString()))
            .replace("{" + "domain" + "}", localVarApiClient.escapeString(domain.toString()))
            .replace("{" + "version" + "}", localVarApiClient.escapeString(version.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "TokenSecured" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getDomainPrivateSettingsValidateBeforeCall(String owner, String domain, String version, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'owner' is set
        if (owner == null) {
            throw new ApiException("Missing the required parameter 'owner' when calling getDomainPrivateSettings(Async)");
        }

        // verify the required parameter 'domain' is set
        if (domain == null) {
            throw new ApiException("Missing the required parameter 'domain' when calling getDomainPrivateSettings(Async)");
        }

        // verify the required parameter 'version' is set
        if (version == null) {
            throw new ApiException("Missing the required parameter 'version' when calling getDomainPrivateSettings(Async)");
        }

        return getDomainPrivateSettingsCall(owner, domain, version, _callback);

    }

    /**
     * Get the visibility (public or private) of a domain version
     * 
     * @param owner Domain owner (organization or user, case-sensitive) (required)
     * @param domain Domain name (case-sensitive) (required)
     * @param version Version identifier (required)
     * @return VisibilitySettings
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The response body indicates whether this domain version is private (&#x60;true&#x60;) or public (&#x60;false&#x60;) </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Access token is not set or invalid </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The specified domain or version was not found </td><td>  -  </td></tr>
     </table>
     */
    public VisibilitySettings getDomainPrivateSettings(String owner, String domain, String version) throws ApiException {
        ApiResponse<VisibilitySettings> localVarResp = getDomainPrivateSettingsWithHttpInfo(owner, domain, version);
        return localVarResp.getData();
    }

    /**
     * Get the visibility (public or private) of a domain version
     * 
     * @param owner Domain owner (organization or user, case-sensitive) (required)
     * @param domain Domain name (case-sensitive) (required)
     * @param version Version identifier (required)
     * @return ApiResponse&lt;VisibilitySettings&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The response body indicates whether this domain version is private (&#x60;true&#x60;) or public (&#x60;false&#x60;) </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Access token is not set or invalid </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The specified domain or version was not found </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<VisibilitySettings> getDomainPrivateSettingsWithHttpInfo(String owner, String domain, String version) throws ApiException {
        okhttp3.Call localVarCall = getDomainPrivateSettingsValidateBeforeCall(owner, domain, version, null);
        Type localVarReturnType = new TypeToken<VisibilitySettings>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get the visibility (public or private) of a domain version (asynchronously)
     * 
     * @param owner Domain owner (organization or user, case-sensitive) (required)
     * @param domain Domain name (case-sensitive) (required)
     * @param version Version identifier (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The response body indicates whether this domain version is private (&#x60;true&#x60;) or public (&#x60;false&#x60;) </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Access token is not set or invalid </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The specified domain or version was not found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getDomainPrivateSettingsAsync(String owner, String domain, String version, final ApiCallback<VisibilitySettings> _callback) throws ApiException {

        okhttp3.Call localVarCall = getDomainPrivateSettingsValidateBeforeCall(owner, domain, version, _callback);
        Type localVarReturnType = new TypeToken<VisibilitySettings>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getDomainVersions
     * @param owner Domain owner (organization or user, case-sensitive) (required)
     * @param domain Domain name (case-sensitive) (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A list of domain versions in APIs.json format </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The specified domain was not found. If it is private, make sure the request is authenticated and the authenticating user has access to this API. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getDomainVersionsCall(String owner, String domain, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/domains/{owner}/{domain}"
            .replace("{" + "owner" + "}", localVarApiClient.escapeString(owner.toString()))
            .replace("{" + "domain" + "}", localVarApiClient.escapeString(domain.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "TokenSecured" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getDomainVersionsValidateBeforeCall(String owner, String domain, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'owner' is set
        if (owner == null) {
            throw new ApiException("Missing the required parameter 'owner' when calling getDomainVersions(Async)");
        }

        // verify the required parameter 'domain' is set
        if (domain == null) {
            throw new ApiException("Missing the required parameter 'domain' when calling getDomainVersions(Async)");
        }

        return getDomainVersionsCall(owner, domain, _callback);

    }

    /**
     * Get a list of domain versions
     * 
     * @param owner Domain owner (organization or user, case-sensitive) (required)
     * @param domain Domain name (case-sensitive) (required)
     * @return ApisJson
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A list of domain versions in APIs.json format </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The specified domain was not found. If it is private, make sure the request is authenticated and the authenticating user has access to this API. </td><td>  -  </td></tr>
     </table>
     */
    public ApisJson getDomainVersions(String owner, String domain) throws ApiException {
        ApiResponse<ApisJson> localVarResp = getDomainVersionsWithHttpInfo(owner, domain);
        return localVarResp.getData();
    }

    /**
     * Get a list of domain versions
     * 
     * @param owner Domain owner (organization or user, case-sensitive) (required)
     * @param domain Domain name (case-sensitive) (required)
     * @return ApiResponse&lt;ApisJson&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A list of domain versions in APIs.json format </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The specified domain was not found. If it is private, make sure the request is authenticated and the authenticating user has access to this API. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ApisJson> getDomainVersionsWithHttpInfo(String owner, String domain) throws ApiException {
        okhttp3.Call localVarCall = getDomainVersionsValidateBeforeCall(owner, domain, null);
        Type localVarReturnType = new TypeToken<ApisJson>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get a list of domain versions (asynchronously)
     * 
     * @param owner Domain owner (organization or user, case-sensitive) (required)
     * @param domain Domain name (case-sensitive) (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A list of domain versions in APIs.json format </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The specified domain was not found. If it is private, make sure the request is authenticated and the authenticating user has access to this API. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getDomainVersionsAsync(String owner, String domain, final ApiCallback<ApisJson> _callback) throws ApiException {

        okhttp3.Call localVarCall = getDomainVersionsValidateBeforeCall(owner, domain, _callback);
        Type localVarReturnType = new TypeToken<ApisJson>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getDomainYamlDefinition
     * @param owner Domain owner (organization or user, case-sensitive) (required)
     * @param domain Domain name (case-sensitive) (required)
     * @param version Version identifier (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Domain definition in YAML format </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The specified domain or version was not found. If it is private, make sure the request is authenticated and the authenticating user has access to this API. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getDomainYamlDefinitionCall(String owner, String domain, String version, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/domains/{owner}/{domain}/{version}/domain.yaml"
            .replace("{" + "owner" + "}", localVarApiClient.escapeString(owner.toString()))
            .replace("{" + "domain" + "}", localVarApiClient.escapeString(domain.toString()))
            .replace("{" + "version" + "}", localVarApiClient.escapeString(version.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/yaml"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "TokenSecured" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getDomainYamlDefinitionValidateBeforeCall(String owner, String domain, String version, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'owner' is set
        if (owner == null) {
            throw new ApiException("Missing the required parameter 'owner' when calling getDomainYamlDefinition(Async)");
        }

        // verify the required parameter 'domain' is set
        if (domain == null) {
            throw new ApiException("Missing the required parameter 'domain' when calling getDomainYamlDefinition(Async)");
        }

        // verify the required parameter 'version' is set
        if (version == null) {
            throw new ApiException("Missing the required parameter 'version' when calling getDomainYamlDefinition(Async)");
        }

        return getDomainYamlDefinitionCall(owner, domain, version, _callback);

    }

    /**
     * Get the OpenAPI definition for the specified domain version in YAML format
     * 
     * @param owner Domain owner (organization or user, case-sensitive) (required)
     * @param domain Domain name (case-sensitive) (required)
     * @param version Version identifier (required)
     * @return Object
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Domain definition in YAML format </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The specified domain or version was not found. If it is private, make sure the request is authenticated and the authenticating user has access to this API. </td><td>  -  </td></tr>
     </table>
     */
    public Object getDomainYamlDefinition(String owner, String domain, String version) throws ApiException {
        ApiResponse<Object> localVarResp = getDomainYamlDefinitionWithHttpInfo(owner, domain, version);
        return localVarResp.getData();
    }

    /**
     * Get the OpenAPI definition for the specified domain version in YAML format
     * 
     * @param owner Domain owner (organization or user, case-sensitive) (required)
     * @param domain Domain name (case-sensitive) (required)
     * @param version Version identifier (required)
     * @return ApiResponse&lt;Object&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Domain definition in YAML format </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The specified domain or version was not found. If it is private, make sure the request is authenticated and the authenticating user has access to this API. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Object> getDomainYamlDefinitionWithHttpInfo(String owner, String domain, String version) throws ApiException {
        okhttp3.Call localVarCall = getDomainYamlDefinitionValidateBeforeCall(owner, domain, version, null);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get the OpenAPI definition for the specified domain version in YAML format (asynchronously)
     * 
     * @param owner Domain owner (organization or user, case-sensitive) (required)
     * @param domain Domain name (case-sensitive) (required)
     * @param version Version identifier (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Domain definition in YAML format </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The specified domain or version was not found. If it is private, make sure the request is authenticated and the authenticating user has access to this API. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getDomainYamlDefinitionAsync(String owner, String domain, String version, final ApiCallback<Object> _callback) throws ApiException {

        okhttp3.Call localVarCall = getDomainYamlDefinitionValidateBeforeCall(owner, domain, version, _callback);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getOwnerDomains
     * @param owner Domain owner (organization or user, case-sensitive) (required)
     * @param page Page to return (optional, default to 0)
     * @param limit Number of results per page (1 .. 100) (optional, default to 10)
     * @param sort Sort criteria of result set: * NAME * UPDATED * CREATED * OWNER * BEST_MATCH - by relevance * TITLE - by &#x60;info.title&#x60;  (optional, default to NAME)
     * @param order Sort order (optional, default to ASC)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A list of domains in APIs.json format </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getOwnerDomainsCall(String owner, Integer page, Integer limit, String sort, String order, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/domains/{owner}"
            .replace("{" + "owner" + "}", localVarApiClient.escapeString(owner.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (page != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("page", page));
        }

        if (limit != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("limit", limit));
        }

        if (sort != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("sort", sort));
        }

        if (order != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("order", order));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "TokenSecured" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getOwnerDomainsValidateBeforeCall(String owner, Integer page, Integer limit, String sort, String order, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'owner' is set
        if (owner == null) {
            throw new ApiException("Missing the required parameter 'owner' when calling getOwnerDomains(Async)");
        }

        return getOwnerDomainsCall(owner, page, limit, sort, order, _callback);

    }

    /**
     * Get a list of domains of the specified owner
     * 
     * @param owner Domain owner (organization or user, case-sensitive) (required)
     * @param page Page to return (optional, default to 0)
     * @param limit Number of results per page (1 .. 100) (optional, default to 10)
     * @param sort Sort criteria of result set: * NAME * UPDATED * CREATED * OWNER * BEST_MATCH - by relevance * TITLE - by &#x60;info.title&#x60;  (optional, default to NAME)
     * @param order Sort order (optional, default to ASC)
     * @return ApisJson
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A list of domains in APIs.json format </td><td>  -  </td></tr>
     </table>
     */
    public ApisJson getOwnerDomains(String owner, Integer page, Integer limit, String sort, String order) throws ApiException {
        ApiResponse<ApisJson> localVarResp = getOwnerDomainsWithHttpInfo(owner, page, limit, sort, order);
        return localVarResp.getData();
    }

    /**
     * Get a list of domains of the specified owner
     * 
     * @param owner Domain owner (organization or user, case-sensitive) (required)
     * @param page Page to return (optional, default to 0)
     * @param limit Number of results per page (1 .. 100) (optional, default to 10)
     * @param sort Sort criteria of result set: * NAME * UPDATED * CREATED * OWNER * BEST_MATCH - by relevance * TITLE - by &#x60;info.title&#x60;  (optional, default to NAME)
     * @param order Sort order (optional, default to ASC)
     * @return ApiResponse&lt;ApisJson&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A list of domains in APIs.json format </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ApisJson> getOwnerDomainsWithHttpInfo(String owner, Integer page, Integer limit, String sort, String order) throws ApiException {
        okhttp3.Call localVarCall = getOwnerDomainsValidateBeforeCall(owner, page, limit, sort, order, null);
        Type localVarReturnType = new TypeToken<ApisJson>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get a list of domains of the specified owner (asynchronously)
     * 
     * @param owner Domain owner (organization or user, case-sensitive) (required)
     * @param page Page to return (optional, default to 0)
     * @param limit Number of results per page (1 .. 100) (optional, default to 10)
     * @param sort Sort criteria of result set: * NAME * UPDATED * CREATED * OWNER * BEST_MATCH - by relevance * TITLE - by &#x60;info.title&#x60;  (optional, default to NAME)
     * @param order Sort order (optional, default to ASC)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A list of domains in APIs.json format </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getOwnerDomainsAsync(String owner, Integer page, Integer limit, String sort, String order, final ApiCallback<ApisJson> _callback) throws ApiException {

        okhttp3.Call localVarCall = getOwnerDomainsValidateBeforeCall(owner, page, limit, sort, order, _callback);
        Type localVarReturnType = new TypeToken<ApisJson>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for renameDomain
     * @param owner Domain owner (organization or user, case-sensitive) (required)
     * @param domain Domain name (case-sensitive) (required)
     * @param newName New name (required)
     * @param force If this domain is referenced from other APIs and domains, this parameter must be true. Otherwise, the request will be rejected with status code 424. (optional, default to false)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The domain was successfully renamed </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Access token is not set or invalid </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Access denied (insufficient user permissions) </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> An API or domain with the new name already exists, or the new and old names are the same </td><td>  -  </td></tr>
        <tr><td> 424 </td><td> The domain you are trying to rename is referenced from other APIs or domains. Renaming the domain will break the references in those definitions. To rename the domain anyway, repeat the request with the &#x60;force&#x3D;true&#x60; query parameter.  The response body contains a list of APIs and domains that reference this domain. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call renameDomainCall(String owner, String domain, String newName, Boolean force, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/domains/{owner}/{domain}/rename"
            .replace("{" + "owner" + "}", localVarApiClient.escapeString(owner.toString()))
            .replace("{" + "domain" + "}", localVarApiClient.escapeString(domain.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (newName != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("newName", newName));
        }

        if (force != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("force", force));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "TokenSecured" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call renameDomainValidateBeforeCall(String owner, String domain, String newName, Boolean force, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'owner' is set
        if (owner == null) {
            throw new ApiException("Missing the required parameter 'owner' when calling renameDomain(Async)");
        }

        // verify the required parameter 'domain' is set
        if (domain == null) {
            throw new ApiException("Missing the required parameter 'domain' when calling renameDomain(Async)");
        }

        // verify the required parameter 'newName' is set
        if (newName == null) {
            throw new ApiException("Missing the required parameter 'newName' when calling renameDomain(Async)");
        }

        return renameDomainCall(owner, domain, newName, force, _callback);

    }

    /**
     * Rename a domain
     * The new name must follow the [naming rules](https://support.smartbear.com/swaggerhub/docs/apis/creating-api.html).
     * @param owner Domain owner (organization or user, case-sensitive) (required)
     * @param domain Domain name (case-sensitive) (required)
     * @param newName New name (required)
     * @param force If this domain is referenced from other APIs and domains, this parameter must be true. Otherwise, the request will be rejected with status code 424. (optional, default to false)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The domain was successfully renamed </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Access token is not set or invalid </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Access denied (insufficient user permissions) </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> An API or domain with the new name already exists, or the new and old names are the same </td><td>  -  </td></tr>
        <tr><td> 424 </td><td> The domain you are trying to rename is referenced from other APIs or domains. Renaming the domain will break the references in those definitions. To rename the domain anyway, repeat the request with the &#x60;force&#x3D;true&#x60; query parameter.  The response body contains a list of APIs and domains that reference this domain. </td><td>  -  </td></tr>
     </table>
     */
    public void renameDomain(String owner, String domain, String newName, Boolean force) throws ApiException {
        renameDomainWithHttpInfo(owner, domain, newName, force);
    }

    /**
     * Rename a domain
     * The new name must follow the [naming rules](https://support.smartbear.com/swaggerhub/docs/apis/creating-api.html).
     * @param owner Domain owner (organization or user, case-sensitive) (required)
     * @param domain Domain name (case-sensitive) (required)
     * @param newName New name (required)
     * @param force If this domain is referenced from other APIs and domains, this parameter must be true. Otherwise, the request will be rejected with status code 424. (optional, default to false)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The domain was successfully renamed </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Access token is not set or invalid </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Access denied (insufficient user permissions) </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> An API or domain with the new name already exists, or the new and old names are the same </td><td>  -  </td></tr>
        <tr><td> 424 </td><td> The domain you are trying to rename is referenced from other APIs or domains. Renaming the domain will break the references in those definitions. To rename the domain anyway, repeat the request with the &#x60;force&#x3D;true&#x60; query parameter.  The response body contains a list of APIs and domains that reference this domain. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> renameDomainWithHttpInfo(String owner, String domain, String newName, Boolean force) throws ApiException {
        okhttp3.Call localVarCall = renameDomainValidateBeforeCall(owner, domain, newName, force, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Rename a domain (asynchronously)
     * The new name must follow the [naming rules](https://support.smartbear.com/swaggerhub/docs/apis/creating-api.html).
     * @param owner Domain owner (organization or user, case-sensitive) (required)
     * @param domain Domain name (case-sensitive) (required)
     * @param newName New name (required)
     * @param force If this domain is referenced from other APIs and domains, this parameter must be true. Otherwise, the request will be rejected with status code 424. (optional, default to false)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The domain was successfully renamed </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Access token is not set or invalid </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Access denied (insufficient user permissions) </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> An API or domain with the new name already exists, or the new and old names are the same </td><td>  -  </td></tr>
        <tr><td> 424 </td><td> The domain you are trying to rename is referenced from other APIs or domains. Renaming the domain will break the references in those definitions. To rename the domain anyway, repeat the request with the &#x60;force&#x3D;true&#x60; query parameter.  The response body contains a list of APIs and domains that reference this domain. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call renameDomainAsync(String owner, String domain, String newName, Boolean force, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = renameDomainValidateBeforeCall(owner, domain, newName, force, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for saveDomainDefinition
     * @param owner Domain owner (organization or user, case-sensitive) (required)
     * @param domain Domain name (case-sensitive) (required)
     * @param isPrivate Specifies whether the domain has to be private (optional, default to false)
     * @param version Domain version. If omitted, will be taken from the &#x60;info.version&#x60; field in the definition. (optional)
     * @param force Force update (optional)
     * @param definition OpenAPI definition of this domain (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The domain was successfully saved </td><td>  -  </td></tr>
        <tr><td> 201 </td><td> New domain was successfully saved </td><td>  -  </td></tr>
        <tr><td> 205 </td><td> The domain was successfully saved and should be reloaded </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Possible reasons:   * Some parameter values are invalid, or the provided OpenAPI domain definition is invalid.  * The specified &#x60;projectName&#x60; does not exist in the &#x60;owner&#x60; organization.  * Cannot create a new domain because an API with this name already exists in the &#x60;owner&#x60; account. Try a different name. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Maximum number of domains reached </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> Cannot overwrite a published domain version </td><td>  -  </td></tr>
        <tr><td> 415 </td><td> Invalid content type </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call saveDomainDefinitionCall(String owner, String domain, Boolean isPrivate, String version, Boolean force, String definition, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = definition;

        // create path and map variables
        String localVarPath = "/domains/{owner}/{domain}"
            .replace("{" + "owner" + "}", localVarApiClient.escapeString(owner.toString()))
            .replace("{" + "domain" + "}", localVarApiClient.escapeString(domain.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (isPrivate != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("isPrivate", isPrivate));
        }

        if (version != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("version", version));
        }

        if (force != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("force", force));
        }

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json",
            "application/yaml"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "TokenSecured" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call saveDomainDefinitionValidateBeforeCall(String owner, String domain, Boolean isPrivate, String version, Boolean force, String definition, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'owner' is set
        if (owner == null) {
            throw new ApiException("Missing the required parameter 'owner' when calling saveDomainDefinition(Async)");
        }

        // verify the required parameter 'domain' is set
        if (domain == null) {
            throw new ApiException("Missing the required parameter 'domain' when calling saveDomainDefinition(Async)");
        }

        return saveDomainDefinitionCall(owner, domain, isPrivate, version, force, definition, _callback);

    }

    /**
     * Create or update a domain
     * 
     * @param owner Domain owner (organization or user, case-sensitive) (required)
     * @param domain Domain name (case-sensitive) (required)
     * @param isPrivate Specifies whether the domain has to be private (optional, default to false)
     * @param version Domain version. If omitted, will be taken from the &#x60;info.version&#x60; field in the definition. (optional)
     * @param force Force update (optional)
     * @param definition OpenAPI definition of this domain (optional)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The domain was successfully saved </td><td>  -  </td></tr>
        <tr><td> 201 </td><td> New domain was successfully saved </td><td>  -  </td></tr>
        <tr><td> 205 </td><td> The domain was successfully saved and should be reloaded </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Possible reasons:   * Some parameter values are invalid, or the provided OpenAPI domain definition is invalid.  * The specified &#x60;projectName&#x60; does not exist in the &#x60;owner&#x60; organization.  * Cannot create a new domain because an API with this name already exists in the &#x60;owner&#x60; account. Try a different name. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Maximum number of domains reached </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> Cannot overwrite a published domain version </td><td>  -  </td></tr>
        <tr><td> 415 </td><td> Invalid content type </td><td>  -  </td></tr>
     </table>
     */
    public void saveDomainDefinition(String owner, String domain, Boolean isPrivate, String version, Boolean force, String definition) throws ApiException {
        saveDomainDefinitionWithHttpInfo(owner, domain, isPrivate, version, force, definition);
    }

    /**
     * Create or update a domain
     * 
     * @param owner Domain owner (organization or user, case-sensitive) (required)
     * @param domain Domain name (case-sensitive) (required)
     * @param isPrivate Specifies whether the domain has to be private (optional, default to false)
     * @param version Domain version. If omitted, will be taken from the &#x60;info.version&#x60; field in the definition. (optional)
     * @param force Force update (optional)
     * @param definition OpenAPI definition of this domain (optional)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The domain was successfully saved </td><td>  -  </td></tr>
        <tr><td> 201 </td><td> New domain was successfully saved </td><td>  -  </td></tr>
        <tr><td> 205 </td><td> The domain was successfully saved and should be reloaded </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Possible reasons:   * Some parameter values are invalid, or the provided OpenAPI domain definition is invalid.  * The specified &#x60;projectName&#x60; does not exist in the &#x60;owner&#x60; organization.  * Cannot create a new domain because an API with this name already exists in the &#x60;owner&#x60; account. Try a different name. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Maximum number of domains reached </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> Cannot overwrite a published domain version </td><td>  -  </td></tr>
        <tr><td> 415 </td><td> Invalid content type </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> saveDomainDefinitionWithHttpInfo(String owner, String domain, Boolean isPrivate, String version, Boolean force, String definition) throws ApiException {
        okhttp3.Call localVarCall = saveDomainDefinitionValidateBeforeCall(owner, domain, isPrivate, version, force, definition, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Create or update a domain (asynchronously)
     * 
     * @param owner Domain owner (organization or user, case-sensitive) (required)
     * @param domain Domain name (case-sensitive) (required)
     * @param isPrivate Specifies whether the domain has to be private (optional, default to false)
     * @param version Domain version. If omitted, will be taken from the &#x60;info.version&#x60; field in the definition. (optional)
     * @param force Force update (optional)
     * @param definition OpenAPI definition of this domain (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The domain was successfully saved </td><td>  -  </td></tr>
        <tr><td> 201 </td><td> New domain was successfully saved </td><td>  -  </td></tr>
        <tr><td> 205 </td><td> The domain was successfully saved and should be reloaded </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Possible reasons:   * Some parameter values are invalid, or the provided OpenAPI domain definition is invalid.  * The specified &#x60;projectName&#x60; does not exist in the &#x60;owner&#x60; organization.  * Cannot create a new domain because an API with this name already exists in the &#x60;owner&#x60; account. Try a different name. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Maximum number of domains reached </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> Cannot overwrite a published domain version </td><td>  -  </td></tr>
        <tr><td> 415 </td><td> Invalid content type </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call saveDomainDefinitionAsync(String owner, String domain, Boolean isPrivate, String version, Boolean force, String definition, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = saveDomainDefinitionValidateBeforeCall(owner, domain, isPrivate, version, force, definition, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for searchApisAndDomains_0
     * @param specType Type of definitions to search: * API - APIs only * DOMAIN - domains only * TEMPLATE - templates only * ANY - APIs, domains, and templates  (optional, default to ANY)
     * @param visibility The visibility of a definition in SwaggerHub: * PUBLIC - can be viewed by anyone * PRIVATE - can only be viewed by you or your organization and those that you are collaborating with or have shared it with * ANY - either PUBLIC or PRIVATE  (optional, default to ANY)
     * @param state Matches against published state of the spec: * UNPUBLISHED - spec is a draft, a work in progress * PUBLISHED - spec is a stable version ready for consuming from client applications * ANY - either PUBLISHED or UNPUBLISHED  (optional, default to ALL)
     * @param owner API or domain owner. Can be username or organization name. Case-sensitive. (optional)
     * @param query Free text query to match (optional)
     * @param page Page to return (optional, default to 0)
     * @param limit Number of results per page (1 .. 100) (optional, default to 10)
     * @param sort Sort criteria of result set: * NAME * UPDATED * CREATED * OWNER * BEST_MATCH - by relevance * TITLE - by &#x60;info.title&#x60;  (optional, default to NAME)
     * @param order Sort order (optional, default to ASC)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A list of APIs, domains, and templates in APIs.json format </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call searchApisAndDomains_0Call(String specType, String visibility, String state, String owner, String query, Integer page, Integer limit, String sort, String order, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/specs";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (specType != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("specType", specType));
        }

        if (visibility != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("visibility", visibility));
        }

        if (state != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("state", state));
        }

        if (owner != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("owner", owner));
        }

        if (query != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("query", query));
        }

        if (page != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("page", page));
        }

        if (limit != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("limit", limit));
        }

        if (sort != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("sort", sort));
        }

        if (order != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("order", order));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "TokenSecured" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call searchApisAndDomains_0ValidateBeforeCall(String specType, String visibility, String state, String owner, String query, Integer page, Integer limit, String sort, String order, final ApiCallback _callback) throws ApiException {
        return searchApisAndDomains_0Call(specType, visibility, state, owner, query, page, limit, sort, order, _callback);

    }

    /**
     * Retrieve a list of currently defined APIs, domains, and templates in APIs.json format
     * 
     * @param specType Type of definitions to search: * API - APIs only * DOMAIN - domains only * TEMPLATE - templates only * ANY - APIs, domains, and templates  (optional, default to ANY)
     * @param visibility The visibility of a definition in SwaggerHub: * PUBLIC - can be viewed by anyone * PRIVATE - can only be viewed by you or your organization and those that you are collaborating with or have shared it with * ANY - either PUBLIC or PRIVATE  (optional, default to ANY)
     * @param state Matches against published state of the spec: * UNPUBLISHED - spec is a draft, a work in progress * PUBLISHED - spec is a stable version ready for consuming from client applications * ANY - either PUBLISHED or UNPUBLISHED  (optional, default to ALL)
     * @param owner API or domain owner. Can be username or organization name. Case-sensitive. (optional)
     * @param query Free text query to match (optional)
     * @param page Page to return (optional, default to 0)
     * @param limit Number of results per page (1 .. 100) (optional, default to 10)
     * @param sort Sort criteria of result set: * NAME * UPDATED * CREATED * OWNER * BEST_MATCH - by relevance * TITLE - by &#x60;info.title&#x60;  (optional, default to NAME)
     * @param order Sort order (optional, default to ASC)
     * @return ApisJson
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A list of APIs, domains, and templates in APIs.json format </td><td>  -  </td></tr>
     </table>
     */
    public ApisJson searchApisAndDomains_0(String specType, String visibility, String state, String owner, String query, Integer page, Integer limit, String sort, String order) throws ApiException {
        ApiResponse<ApisJson> localVarResp = searchApisAndDomains_0WithHttpInfo(specType, visibility, state, owner, query, page, limit, sort, order);
        return localVarResp.getData();
    }

    /**
     * Retrieve a list of currently defined APIs, domains, and templates in APIs.json format
     * 
     * @param specType Type of definitions to search: * API - APIs only * DOMAIN - domains only * TEMPLATE - templates only * ANY - APIs, domains, and templates  (optional, default to ANY)
     * @param visibility The visibility of a definition in SwaggerHub: * PUBLIC - can be viewed by anyone * PRIVATE - can only be viewed by you or your organization and those that you are collaborating with or have shared it with * ANY - either PUBLIC or PRIVATE  (optional, default to ANY)
     * @param state Matches against published state of the spec: * UNPUBLISHED - spec is a draft, a work in progress * PUBLISHED - spec is a stable version ready for consuming from client applications * ANY - either PUBLISHED or UNPUBLISHED  (optional, default to ALL)
     * @param owner API or domain owner. Can be username or organization name. Case-sensitive. (optional)
     * @param query Free text query to match (optional)
     * @param page Page to return (optional, default to 0)
     * @param limit Number of results per page (1 .. 100) (optional, default to 10)
     * @param sort Sort criteria of result set: * NAME * UPDATED * CREATED * OWNER * BEST_MATCH - by relevance * TITLE - by &#x60;info.title&#x60;  (optional, default to NAME)
     * @param order Sort order (optional, default to ASC)
     * @return ApiResponse&lt;ApisJson&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A list of APIs, domains, and templates in APIs.json format </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ApisJson> searchApisAndDomains_0WithHttpInfo(String specType, String visibility, String state, String owner, String query, Integer page, Integer limit, String sort, String order) throws ApiException {
        okhttp3.Call localVarCall = searchApisAndDomains_0ValidateBeforeCall(specType, visibility, state, owner, query, page, limit, sort, order, null);
        Type localVarReturnType = new TypeToken<ApisJson>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Retrieve a list of currently defined APIs, domains, and templates in APIs.json format (asynchronously)
     * 
     * @param specType Type of definitions to search: * API - APIs only * DOMAIN - domains only * TEMPLATE - templates only * ANY - APIs, domains, and templates  (optional, default to ANY)
     * @param visibility The visibility of a definition in SwaggerHub: * PUBLIC - can be viewed by anyone * PRIVATE - can only be viewed by you or your organization and those that you are collaborating with or have shared it with * ANY - either PUBLIC or PRIVATE  (optional, default to ANY)
     * @param state Matches against published state of the spec: * UNPUBLISHED - spec is a draft, a work in progress * PUBLISHED - spec is a stable version ready for consuming from client applications * ANY - either PUBLISHED or UNPUBLISHED  (optional, default to ALL)
     * @param owner API or domain owner. Can be username or organization name. Case-sensitive. (optional)
     * @param query Free text query to match (optional)
     * @param page Page to return (optional, default to 0)
     * @param limit Number of results per page (1 .. 100) (optional, default to 10)
     * @param sort Sort criteria of result set: * NAME * UPDATED * CREATED * OWNER * BEST_MATCH - by relevance * TITLE - by &#x60;info.title&#x60;  (optional, default to NAME)
     * @param order Sort order (optional, default to ASC)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A list of APIs, domains, and templates in APIs.json format </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call searchApisAndDomains_0Async(String specType, String visibility, String state, String owner, String query, Integer page, Integer limit, String sort, String order, final ApiCallback<ApisJson> _callback) throws ApiException {

        okhttp3.Call localVarCall = searchApisAndDomains_0ValidateBeforeCall(specType, visibility, state, owner, query, page, limit, sort, order, _callback);
        Type localVarReturnType = new TypeToken<ApisJson>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for searchDomains
     * @param query Free text query to match (optional)
     * @param state Matches against published state of the spec: * UNPUBLISHED - spec is a draft, a work in progress * PUBLISHED - spec is a stable version ready for consuming from client applications * ANY - either PUBLISHED or UNPUBLISHED  (optional, default to ALL)
     * @param page Page to return (optional, default to 0)
     * @param limit Number of results per page (1 .. 100) (optional, default to 10)
     * @param sort Sort criteria of result set: * NAME * UPDATED * CREATED * OWNER * BEST_MATCH - by relevance * TITLE - by &#x60;info.title&#x60;  (optional, default to NAME)
     * @param order Sort order (optional, default to ASC)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 303 </td><td> Redirect to &#x60;GET /specs&#x60;, with all query parameters preserved </td><td>  * Location -  <br>  </td></tr>
     </table>
     */
    public okhttp3.Call searchDomainsCall(String query, String state, Integer page, Integer limit, String sort, String order, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/domains";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (query != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("query", query));
        }

        if (state != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("state", state));
        }

        if (page != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("page", page));
        }

        if (limit != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("limit", limit));
        }

        if (sort != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("sort", sort));
        }

        if (order != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("order", order));
        }

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "TokenSecured" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call searchDomainsValidateBeforeCall(String query, String state, Integer page, Integer limit, String sort, String order, final ApiCallback _callback) throws ApiException {
        return searchDomainsCall(query, state, page, limit, sort, order, _callback);

    }

    /**
     * Search domains
     * This is a convenience alias for &#x60;GET /specs?specType&#x3D;DOMAIN&#x60;.
     * @param query Free text query to match (optional)
     * @param state Matches against published state of the spec: * UNPUBLISHED - spec is a draft, a work in progress * PUBLISHED - spec is a stable version ready for consuming from client applications * ANY - either PUBLISHED or UNPUBLISHED  (optional, default to ALL)
     * @param page Page to return (optional, default to 0)
     * @param limit Number of results per page (1 .. 100) (optional, default to 10)
     * @param sort Sort criteria of result set: * NAME * UPDATED * CREATED * OWNER * BEST_MATCH - by relevance * TITLE - by &#x60;info.title&#x60;  (optional, default to NAME)
     * @param order Sort order (optional, default to ASC)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 303 </td><td> Redirect to &#x60;GET /specs&#x60;, with all query parameters preserved </td><td>  * Location -  <br>  </td></tr>
     </table>
     */
    public void searchDomains(String query, String state, Integer page, Integer limit, String sort, String order) throws ApiException {
        searchDomainsWithHttpInfo(query, state, page, limit, sort, order);
    }

    /**
     * Search domains
     * This is a convenience alias for &#x60;GET /specs?specType&#x3D;DOMAIN&#x60;.
     * @param query Free text query to match (optional)
     * @param state Matches against published state of the spec: * UNPUBLISHED - spec is a draft, a work in progress * PUBLISHED - spec is a stable version ready for consuming from client applications * ANY - either PUBLISHED or UNPUBLISHED  (optional, default to ALL)
     * @param page Page to return (optional, default to 0)
     * @param limit Number of results per page (1 .. 100) (optional, default to 10)
     * @param sort Sort criteria of result set: * NAME * UPDATED * CREATED * OWNER * BEST_MATCH - by relevance * TITLE - by &#x60;info.title&#x60;  (optional, default to NAME)
     * @param order Sort order (optional, default to ASC)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 303 </td><td> Redirect to &#x60;GET /specs&#x60;, with all query parameters preserved </td><td>  * Location -  <br>  </td></tr>
     </table>
     */
    public ApiResponse<Void> searchDomainsWithHttpInfo(String query, String state, Integer page, Integer limit, String sort, String order) throws ApiException {
        okhttp3.Call localVarCall = searchDomainsValidateBeforeCall(query, state, page, limit, sort, order, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Search domains (asynchronously)
     * This is a convenience alias for &#x60;GET /specs?specType&#x3D;DOMAIN&#x60;.
     * @param query Free text query to match (optional)
     * @param state Matches against published state of the spec: * UNPUBLISHED - spec is a draft, a work in progress * PUBLISHED - spec is a stable version ready for consuming from client applications * ANY - either PUBLISHED or UNPUBLISHED  (optional, default to ALL)
     * @param page Page to return (optional, default to 0)
     * @param limit Number of results per page (1 .. 100) (optional, default to 10)
     * @param sort Sort criteria of result set: * NAME * UPDATED * CREATED * OWNER * BEST_MATCH - by relevance * TITLE - by &#x60;info.title&#x60;  (optional, default to NAME)
     * @param order Sort order (optional, default to ASC)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 303 </td><td> Redirect to &#x60;GET /specs&#x60;, with all query parameters preserved </td><td>  * Location -  <br>  </td></tr>
     </table>
     */
    public okhttp3.Call searchDomainsAsync(String query, String state, Integer page, Integer limit, String sort, String order, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = searchDomainsValidateBeforeCall(query, state, page, limit, sort, order, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for setDomainCommentStatusV2
     * @param owner Domain owner (organization or user, case-sensitive) (required)
     * @param domain Domain name (case-sensitive) (required)
     * @param version Version identifier (required)
     * @param comment Comment identifier (required)
     * @param status Comment status (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Comment status was updated </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Request body invalid </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Access token is not set or invalid </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> The comment feature is not available for the organization&#39;s plan, or the authenticating user does not have permission to complete this action </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The specified domain or comment was not found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call setDomainCommentStatusV2Call(String owner, String domain, String version, String comment, String status, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/domains/{owner}/{domain}/{version}/comments/{comment}/status/{status}"
            .replace("{" + "owner" + "}", localVarApiClient.escapeString(owner.toString()))
            .replace("{" + "domain" + "}", localVarApiClient.escapeString(domain.toString()))
            .replace("{" + "version" + "}", localVarApiClient.escapeString(version.toString()))
            .replace("{" + "comment" + "}", localVarApiClient.escapeString(comment.toString()))
            .replace("{" + "status" + "}", localVarApiClient.escapeString(status.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "TokenSecured" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call setDomainCommentStatusV2ValidateBeforeCall(String owner, String domain, String version, String comment, String status, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'owner' is set
        if (owner == null) {
            throw new ApiException("Missing the required parameter 'owner' when calling setDomainCommentStatusV2(Async)");
        }

        // verify the required parameter 'domain' is set
        if (domain == null) {
            throw new ApiException("Missing the required parameter 'domain' when calling setDomainCommentStatusV2(Async)");
        }

        // verify the required parameter 'version' is set
        if (version == null) {
            throw new ApiException("Missing the required parameter 'version' when calling setDomainCommentStatusV2(Async)");
        }

        // verify the required parameter 'comment' is set
        if (comment == null) {
            throw new ApiException("Missing the required parameter 'comment' when calling setDomainCommentStatusV2(Async)");
        }

        // verify the required parameter 'status' is set
        if (status == null) {
            throw new ApiException("Missing the required parameter 'status' when calling setDomainCommentStatusV2(Async)");
        }

        return setDomainCommentStatusV2Call(owner, domain, version, comment, status, _callback);

    }

    /**
     * Resolve or reopen a comment
     * 
     * @param owner Domain owner (organization or user, case-sensitive) (required)
     * @param domain Domain name (case-sensitive) (required)
     * @param version Version identifier (required)
     * @param comment Comment identifier (required)
     * @param status Comment status (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Comment status was updated </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Request body invalid </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Access token is not set or invalid </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> The comment feature is not available for the organization&#39;s plan, or the authenticating user does not have permission to complete this action </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The specified domain or comment was not found </td><td>  -  </td></tr>
     </table>
     */
    public void setDomainCommentStatusV2(String owner, String domain, String version, String comment, String status) throws ApiException {
        setDomainCommentStatusV2WithHttpInfo(owner, domain, version, comment, status);
    }

    /**
     * Resolve or reopen a comment
     * 
     * @param owner Domain owner (organization or user, case-sensitive) (required)
     * @param domain Domain name (case-sensitive) (required)
     * @param version Version identifier (required)
     * @param comment Comment identifier (required)
     * @param status Comment status (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Comment status was updated </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Request body invalid </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Access token is not set or invalid </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> The comment feature is not available for the organization&#39;s plan, or the authenticating user does not have permission to complete this action </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The specified domain or comment was not found </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> setDomainCommentStatusV2WithHttpInfo(String owner, String domain, String version, String comment, String status) throws ApiException {
        okhttp3.Call localVarCall = setDomainCommentStatusV2ValidateBeforeCall(owner, domain, version, comment, status, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Resolve or reopen a comment (asynchronously)
     * 
     * @param owner Domain owner (organization or user, case-sensitive) (required)
     * @param domain Domain name (case-sensitive) (required)
     * @param version Version identifier (required)
     * @param comment Comment identifier (required)
     * @param status Comment status (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Comment status was updated </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Request body invalid </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Access token is not set or invalid </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> The comment feature is not available for the organization&#39;s plan, or the authenticating user does not have permission to complete this action </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The specified domain or comment was not found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call setDomainCommentStatusV2Async(String owner, String domain, String version, String comment, String status, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = setDomainCommentStatusV2ValidateBeforeCall(owner, domain, version, comment, status, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for setDomainDefaultVersion
     * @param owner Domain owner (organization or user, case-sensitive) (required)
     * @param domain Domain name (case-sensitive) (required)
     * @param defaultVersion An object that specifies the default version for this domain (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The default version was successfully changed </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Access token is not set or invalid </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Access denied (insufficient user permissions) </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The specified domain or version was not found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call setDomainDefaultVersionCall(String owner, String domain, DefaultVersion defaultVersion, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = defaultVersion;

        // create path and map variables
        String localVarPath = "/domains/{owner}/{domain}/settings/default"
            .replace("{" + "owner" + "}", localVarApiClient.escapeString(owner.toString()))
            .replace("{" + "domain" + "}", localVarApiClient.escapeString(domain.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "TokenSecured" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call setDomainDefaultVersionValidateBeforeCall(String owner, String domain, DefaultVersion defaultVersion, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'owner' is set
        if (owner == null) {
            throw new ApiException("Missing the required parameter 'owner' when calling setDomainDefaultVersion(Async)");
        }

        // verify the required parameter 'domain' is set
        if (domain == null) {
            throw new ApiException("Missing the required parameter 'domain' when calling setDomainDefaultVersion(Async)");
        }

        // verify the required parameter 'defaultVersion' is set
        if (defaultVersion == null) {
            throw new ApiException("Missing the required parameter 'defaultVersion' when calling setDomainDefaultVersion(Async)");
        }

        return setDomainDefaultVersionCall(owner, domain, defaultVersion, _callback);

    }

    /**
     * Set the default version for a domain
     * 
     * @param owner Domain owner (organization or user, case-sensitive) (required)
     * @param domain Domain name (case-sensitive) (required)
     * @param defaultVersion An object that specifies the default version for this domain (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The default version was successfully changed </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Access token is not set or invalid </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Access denied (insufficient user permissions) </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The specified domain or version was not found </td><td>  -  </td></tr>
     </table>
     */
    public void setDomainDefaultVersion(String owner, String domain, DefaultVersion defaultVersion) throws ApiException {
        setDomainDefaultVersionWithHttpInfo(owner, domain, defaultVersion);
    }

    /**
     * Set the default version for a domain
     * 
     * @param owner Domain owner (organization or user, case-sensitive) (required)
     * @param domain Domain name (case-sensitive) (required)
     * @param defaultVersion An object that specifies the default version for this domain (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The default version was successfully changed </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Access token is not set or invalid </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Access denied (insufficient user permissions) </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The specified domain or version was not found </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> setDomainDefaultVersionWithHttpInfo(String owner, String domain, DefaultVersion defaultVersion) throws ApiException {
        okhttp3.Call localVarCall = setDomainDefaultVersionValidateBeforeCall(owner, domain, defaultVersion, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Set the default version for a domain (asynchronously)
     * 
     * @param owner Domain owner (organization or user, case-sensitive) (required)
     * @param domain Domain name (case-sensitive) (required)
     * @param defaultVersion An object that specifies the default version for this domain (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The default version was successfully changed </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Access token is not set or invalid </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Access denied (insufficient user permissions) </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The specified domain or version was not found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call setDomainDefaultVersionAsync(String owner, String domain, DefaultVersion defaultVersion, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = setDomainDefaultVersionValidateBeforeCall(owner, domain, defaultVersion, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for setDomainLifecycleSettings
     * @param owner Domain owner (organization or user, case-sensitive) (required)
     * @param domain Domain name (case-sensitive) (required)
     * @param version Version identifier (required)
     * @param settings An object that specifies the new &#x60;published&#x60; state: &#x60;true&#x60; means published, &#x60;false&#x60; - unpublished (required)
     * @param force To publish a domain that references other _unpublished_ domains, this parameter must be &#x60;true&#x60;. Otherwise, the request will be rejected with status code 424. (optional, default to false)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successfully published or unpublished the domain </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Access token is not set or invalid </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Access denied (insufficient user permissions) </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The specified domain or version was not found </td><td>  -  </td></tr>
        <tr><td> 424 </td><td> The domain version you are trying to publish contains references to other _unpublished_ domains. If those domains change, it may affect your domain. To publish the domain anyway, repeat the request with the &#x60;force&#x3D;true&#x60; query parameter.  The response body contains a list of unpublished domains referenced from this domain. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call setDomainLifecycleSettingsCall(String owner, String domain, String version, LifecycleSettings settings, Boolean force, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = settings;

        // create path and map variables
        String localVarPath = "/domains/{owner}/{domain}/{version}/settings/lifecycle"
            .replace("{" + "owner" + "}", localVarApiClient.escapeString(owner.toString()))
            .replace("{" + "domain" + "}", localVarApiClient.escapeString(domain.toString()))
            .replace("{" + "version" + "}", localVarApiClient.escapeString(version.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (force != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("force", force));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "TokenSecured" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call setDomainLifecycleSettingsValidateBeforeCall(String owner, String domain, String version, LifecycleSettings settings, Boolean force, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'owner' is set
        if (owner == null) {
            throw new ApiException("Missing the required parameter 'owner' when calling setDomainLifecycleSettings(Async)");
        }

        // verify the required parameter 'domain' is set
        if (domain == null) {
            throw new ApiException("Missing the required parameter 'domain' when calling setDomainLifecycleSettings(Async)");
        }

        // verify the required parameter 'version' is set
        if (version == null) {
            throw new ApiException("Missing the required parameter 'version' when calling setDomainLifecycleSettings(Async)");
        }

        // verify the required parameter 'settings' is set
        if (settings == null) {
            throw new ApiException("Missing the required parameter 'settings' when calling setDomainLifecycleSettings(Async)");
        }

        return setDomainLifecycleSettingsCall(owner, domain, version, settings, force, _callback);

    }

    /**
     * Publish or unpublish a domain version
     * 
     * @param owner Domain owner (organization or user, case-sensitive) (required)
     * @param domain Domain name (case-sensitive) (required)
     * @param version Version identifier (required)
     * @param settings An object that specifies the new &#x60;published&#x60; state: &#x60;true&#x60; means published, &#x60;false&#x60; - unpublished (required)
     * @param force To publish a domain that references other _unpublished_ domains, this parameter must be &#x60;true&#x60;. Otherwise, the request will be rejected with status code 424. (optional, default to false)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successfully published or unpublished the domain </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Access token is not set or invalid </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Access denied (insufficient user permissions) </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The specified domain or version was not found </td><td>  -  </td></tr>
        <tr><td> 424 </td><td> The domain version you are trying to publish contains references to other _unpublished_ domains. If those domains change, it may affect your domain. To publish the domain anyway, repeat the request with the &#x60;force&#x3D;true&#x60; query parameter.  The response body contains a list of unpublished domains referenced from this domain. </td><td>  -  </td></tr>
     </table>
     */
    public void setDomainLifecycleSettings(String owner, String domain, String version, LifecycleSettings settings, Boolean force) throws ApiException {
        setDomainLifecycleSettingsWithHttpInfo(owner, domain, version, settings, force);
    }

    /**
     * Publish or unpublish a domain version
     * 
     * @param owner Domain owner (organization or user, case-sensitive) (required)
     * @param domain Domain name (case-sensitive) (required)
     * @param version Version identifier (required)
     * @param settings An object that specifies the new &#x60;published&#x60; state: &#x60;true&#x60; means published, &#x60;false&#x60; - unpublished (required)
     * @param force To publish a domain that references other _unpublished_ domains, this parameter must be &#x60;true&#x60;. Otherwise, the request will be rejected with status code 424. (optional, default to false)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successfully published or unpublished the domain </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Access token is not set or invalid </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Access denied (insufficient user permissions) </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The specified domain or version was not found </td><td>  -  </td></tr>
        <tr><td> 424 </td><td> The domain version you are trying to publish contains references to other _unpublished_ domains. If those domains change, it may affect your domain. To publish the domain anyway, repeat the request with the &#x60;force&#x3D;true&#x60; query parameter.  The response body contains a list of unpublished domains referenced from this domain. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> setDomainLifecycleSettingsWithHttpInfo(String owner, String domain, String version, LifecycleSettings settings, Boolean force) throws ApiException {
        okhttp3.Call localVarCall = setDomainLifecycleSettingsValidateBeforeCall(owner, domain, version, settings, force, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Publish or unpublish a domain version (asynchronously)
     * 
     * @param owner Domain owner (organization or user, case-sensitive) (required)
     * @param domain Domain name (case-sensitive) (required)
     * @param version Version identifier (required)
     * @param settings An object that specifies the new &#x60;published&#x60; state: &#x60;true&#x60; means published, &#x60;false&#x60; - unpublished (required)
     * @param force To publish a domain that references other _unpublished_ domains, this parameter must be &#x60;true&#x60;. Otherwise, the request will be rejected with status code 424. (optional, default to false)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successfully published or unpublished the domain </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Access token is not set or invalid </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Access denied (insufficient user permissions) </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The specified domain or version was not found </td><td>  -  </td></tr>
        <tr><td> 424 </td><td> The domain version you are trying to publish contains references to other _unpublished_ domains. If those domains change, it may affect your domain. To publish the domain anyway, repeat the request with the &#x60;force&#x3D;true&#x60; query parameter.  The response body contains a list of unpublished domains referenced from this domain. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call setDomainLifecycleSettingsAsync(String owner, String domain, String version, LifecycleSettings settings, Boolean force, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = setDomainLifecycleSettingsValidateBeforeCall(owner, domain, version, settings, force, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for setDomainPrivateSettings
     * @param owner Domain owner (organization or user, case-sensitive) (required)
     * @param domain Domain name (case-sensitive) (required)
     * @param version Version identifier (required)
     * @param settings An object that specifies the new visibility level: &#x60;true&#x60; means private, &#x60;false&#x60; - public (required)
     * @param force To change the visibility from _public_ to _private_ in case this domain is referenced from other _public_ definitions, this parameter must be &#x60;true&#x60;. Otherwise, the request will be rejected with status code 424. (optional, default to false)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Domain visibility was updated </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Access token is not set or invalid </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Access denied (insufficient user permissions) </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The specified domain or version was not found </td><td>  -  </td></tr>
        <tr><td> 424 </td><td> The domain version you are trying to make _private_ is referenced from other _public_ definitions. Changing domain visibility may affect those definitions. To proceed anyway, repeat the request with the &#x60;force&#x3D;true&#x60; query parameter.  The response body contains a list of APIs and domains that may be affected by this change. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call setDomainPrivateSettingsCall(String owner, String domain, String version, VisibilitySettings settings, Boolean force, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = settings;

        // create path and map variables
        String localVarPath = "/domains/{owner}/{domain}/{version}/settings/private"
            .replace("{" + "owner" + "}", localVarApiClient.escapeString(owner.toString()))
            .replace("{" + "domain" + "}", localVarApiClient.escapeString(domain.toString()))
            .replace("{" + "version" + "}", localVarApiClient.escapeString(version.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (force != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("force", force));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "TokenSecured" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call setDomainPrivateSettingsValidateBeforeCall(String owner, String domain, String version, VisibilitySettings settings, Boolean force, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'owner' is set
        if (owner == null) {
            throw new ApiException("Missing the required parameter 'owner' when calling setDomainPrivateSettings(Async)");
        }

        // verify the required parameter 'domain' is set
        if (domain == null) {
            throw new ApiException("Missing the required parameter 'domain' when calling setDomainPrivateSettings(Async)");
        }

        // verify the required parameter 'version' is set
        if (version == null) {
            throw new ApiException("Missing the required parameter 'version' when calling setDomainPrivateSettings(Async)");
        }

        // verify the required parameter 'settings' is set
        if (settings == null) {
            throw new ApiException("Missing the required parameter 'settings' when calling setDomainPrivateSettings(Async)");
        }

        return setDomainPrivateSettingsCall(owner, domain, version, settings, force, _callback);

    }

    /**
     * Set the visibility (public or private) of a domain version
     * 
     * @param owner Domain owner (organization or user, case-sensitive) (required)
     * @param domain Domain name (case-sensitive) (required)
     * @param version Version identifier (required)
     * @param settings An object that specifies the new visibility level: &#x60;true&#x60; means private, &#x60;false&#x60; - public (required)
     * @param force To change the visibility from _public_ to _private_ in case this domain is referenced from other _public_ definitions, this parameter must be &#x60;true&#x60;. Otherwise, the request will be rejected with status code 424. (optional, default to false)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Domain visibility was updated </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Access token is not set or invalid </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Access denied (insufficient user permissions) </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The specified domain or version was not found </td><td>  -  </td></tr>
        <tr><td> 424 </td><td> The domain version you are trying to make _private_ is referenced from other _public_ definitions. Changing domain visibility may affect those definitions. To proceed anyway, repeat the request with the &#x60;force&#x3D;true&#x60; query parameter.  The response body contains a list of APIs and domains that may be affected by this change. </td><td>  -  </td></tr>
     </table>
     */
    public void setDomainPrivateSettings(String owner, String domain, String version, VisibilitySettings settings, Boolean force) throws ApiException {
        setDomainPrivateSettingsWithHttpInfo(owner, domain, version, settings, force);
    }

    /**
     * Set the visibility (public or private) of a domain version
     * 
     * @param owner Domain owner (organization or user, case-sensitive) (required)
     * @param domain Domain name (case-sensitive) (required)
     * @param version Version identifier (required)
     * @param settings An object that specifies the new visibility level: &#x60;true&#x60; means private, &#x60;false&#x60; - public (required)
     * @param force To change the visibility from _public_ to _private_ in case this domain is referenced from other _public_ definitions, this parameter must be &#x60;true&#x60;. Otherwise, the request will be rejected with status code 424. (optional, default to false)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Domain visibility was updated </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Access token is not set or invalid </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Access denied (insufficient user permissions) </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The specified domain or version was not found </td><td>  -  </td></tr>
        <tr><td> 424 </td><td> The domain version you are trying to make _private_ is referenced from other _public_ definitions. Changing domain visibility may affect those definitions. To proceed anyway, repeat the request with the &#x60;force&#x3D;true&#x60; query parameter.  The response body contains a list of APIs and domains that may be affected by this change. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> setDomainPrivateSettingsWithHttpInfo(String owner, String domain, String version, VisibilitySettings settings, Boolean force) throws ApiException {
        okhttp3.Call localVarCall = setDomainPrivateSettingsValidateBeforeCall(owner, domain, version, settings, force, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Set the visibility (public or private) of a domain version (asynchronously)
     * 
     * @param owner Domain owner (organization or user, case-sensitive) (required)
     * @param domain Domain name (case-sensitive) (required)
     * @param version Version identifier (required)
     * @param settings An object that specifies the new visibility level: &#x60;true&#x60; means private, &#x60;false&#x60; - public (required)
     * @param force To change the visibility from _public_ to _private_ in case this domain is referenced from other _public_ definitions, this parameter must be &#x60;true&#x60;. Otherwise, the request will be rejected with status code 424. (optional, default to false)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Domain visibility was updated </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Access token is not set or invalid </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Access denied (insufficient user permissions) </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The specified domain or version was not found </td><td>  -  </td></tr>
        <tr><td> 424 </td><td> The domain version you are trying to make _private_ is referenced from other _public_ definitions. Changing domain visibility may affect those definitions. To proceed anyway, repeat the request with the &#x60;force&#x3D;true&#x60; query parameter.  The response body contains a list of APIs and domains that may be affected by this change. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call setDomainPrivateSettingsAsync(String owner, String domain, String version, VisibilitySettings settings, Boolean force, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = setDomainPrivateSettingsValidateBeforeCall(owner, domain, version, settings, force, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for updateDomainCommentReplyV2
     * @param owner Domain owner (organization or user, case-sensitive) (required)
     * @param domain Domain name (case-sensitive) (required)
     * @param version Version identifier (required)
     * @param comment Comment identifier (required)
     * @param reply Reply identifier (required)
     * @param body  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Comment reply was updated </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Request body invalid </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Access token is not set or invalid </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> The comment feature is not available for the organization&#39;s plan, or the authenticating user does not have permission to complete this action </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The specified domain, comment, or reply was not found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateDomainCommentReplyV2Call(String owner, String domain, String version, String comment, String reply, CommentPatch body, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = body;

        // create path and map variables
        String localVarPath = "/domains/{owner}/{domain}/{version}/comments/{comment}/replies/{reply}"
            .replace("{" + "owner" + "}", localVarApiClient.escapeString(owner.toString()))
            .replace("{" + "domain" + "}", localVarApiClient.escapeString(domain.toString()))
            .replace("{" + "version" + "}", localVarApiClient.escapeString(version.toString()))
            .replace("{" + "comment" + "}", localVarApiClient.escapeString(comment.toString()))
            .replace("{" + "reply" + "}", localVarApiClient.escapeString(reply.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "TokenSecured" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PATCH", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call updateDomainCommentReplyV2ValidateBeforeCall(String owner, String domain, String version, String comment, String reply, CommentPatch body, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'owner' is set
        if (owner == null) {
            throw new ApiException("Missing the required parameter 'owner' when calling updateDomainCommentReplyV2(Async)");
        }

        // verify the required parameter 'domain' is set
        if (domain == null) {
            throw new ApiException("Missing the required parameter 'domain' when calling updateDomainCommentReplyV2(Async)");
        }

        // verify the required parameter 'version' is set
        if (version == null) {
            throw new ApiException("Missing the required parameter 'version' when calling updateDomainCommentReplyV2(Async)");
        }

        // verify the required parameter 'comment' is set
        if (comment == null) {
            throw new ApiException("Missing the required parameter 'comment' when calling updateDomainCommentReplyV2(Async)");
        }

        // verify the required parameter 'reply' is set
        if (reply == null) {
            throw new ApiException("Missing the required parameter 'reply' when calling updateDomainCommentReplyV2(Async)");
        }

        return updateDomainCommentReplyV2Call(owner, domain, version, comment, reply, body, _callback);

    }

    /**
     * Update a comment reply
     * 
     * @param owner Domain owner (organization or user, case-sensitive) (required)
     * @param domain Domain name (case-sensitive) (required)
     * @param version Version identifier (required)
     * @param comment Comment identifier (required)
     * @param reply Reply identifier (required)
     * @param body  (optional)
     * @return Comment
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Comment reply was updated </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Request body invalid </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Access token is not set or invalid </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> The comment feature is not available for the organization&#39;s plan, or the authenticating user does not have permission to complete this action </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The specified domain, comment, or reply was not found </td><td>  -  </td></tr>
     </table>
     */
    public Comment updateDomainCommentReplyV2(String owner, String domain, String version, String comment, String reply, CommentPatch body) throws ApiException {
        ApiResponse<Comment> localVarResp = updateDomainCommentReplyV2WithHttpInfo(owner, domain, version, comment, reply, body);
        return localVarResp.getData();
    }

    /**
     * Update a comment reply
     * 
     * @param owner Domain owner (organization or user, case-sensitive) (required)
     * @param domain Domain name (case-sensitive) (required)
     * @param version Version identifier (required)
     * @param comment Comment identifier (required)
     * @param reply Reply identifier (required)
     * @param body  (optional)
     * @return ApiResponse&lt;Comment&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Comment reply was updated </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Request body invalid </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Access token is not set or invalid </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> The comment feature is not available for the organization&#39;s plan, or the authenticating user does not have permission to complete this action </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The specified domain, comment, or reply was not found </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Comment> updateDomainCommentReplyV2WithHttpInfo(String owner, String domain, String version, String comment, String reply, CommentPatch body) throws ApiException {
        okhttp3.Call localVarCall = updateDomainCommentReplyV2ValidateBeforeCall(owner, domain, version, comment, reply, body, null);
        Type localVarReturnType = new TypeToken<Comment>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Update a comment reply (asynchronously)
     * 
     * @param owner Domain owner (organization or user, case-sensitive) (required)
     * @param domain Domain name (case-sensitive) (required)
     * @param version Version identifier (required)
     * @param comment Comment identifier (required)
     * @param reply Reply identifier (required)
     * @param body  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Comment reply was updated </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Request body invalid </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Access token is not set or invalid </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> The comment feature is not available for the organization&#39;s plan, or the authenticating user does not have permission to complete this action </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The specified domain, comment, or reply was not found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateDomainCommentReplyV2Async(String owner, String domain, String version, String comment, String reply, CommentPatch body, final ApiCallback<Comment> _callback) throws ApiException {

        okhttp3.Call localVarCall = updateDomainCommentReplyV2ValidateBeforeCall(owner, domain, version, comment, reply, body, _callback);
        Type localVarReturnType = new TypeToken<Comment>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for updateDomainCommentV2
     * @param owner Domain owner (organization or user, case-sensitive) (required)
     * @param domain Domain name (case-sensitive) (required)
     * @param version Version identifier (required)
     * @param comment Comment identifier (required)
     * @param body  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Comment was updated </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Request body invalid </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Access token is not set or invalid </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> The comment feature is not available for the organization&#39;s plan, or the authenticating user does not have permission to complete this action </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The specified domain or comment was not found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateDomainCommentV2Call(String owner, String domain, String version, String comment, ClosableCommentPatch body, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = body;

        // create path and map variables
        String localVarPath = "/domains/{owner}/{domain}/{version}/comments/{comment}"
            .replace("{" + "owner" + "}", localVarApiClient.escapeString(owner.toString()))
            .replace("{" + "domain" + "}", localVarApiClient.escapeString(domain.toString()))
            .replace("{" + "version" + "}", localVarApiClient.escapeString(version.toString()))
            .replace("{" + "comment" + "}", localVarApiClient.escapeString(comment.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "TokenSecured" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PATCH", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call updateDomainCommentV2ValidateBeforeCall(String owner, String domain, String version, String comment, ClosableCommentPatch body, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'owner' is set
        if (owner == null) {
            throw new ApiException("Missing the required parameter 'owner' when calling updateDomainCommentV2(Async)");
        }

        // verify the required parameter 'domain' is set
        if (domain == null) {
            throw new ApiException("Missing the required parameter 'domain' when calling updateDomainCommentV2(Async)");
        }

        // verify the required parameter 'version' is set
        if (version == null) {
            throw new ApiException("Missing the required parameter 'version' when calling updateDomainCommentV2(Async)");
        }

        // verify the required parameter 'comment' is set
        if (comment == null) {
            throw new ApiException("Missing the required parameter 'comment' when calling updateDomainCommentV2(Async)");
        }

        return updateDomainCommentV2Call(owner, domain, version, comment, body, _callback);

    }

    /**
     * Update a comment
     * 
     * @param owner Domain owner (organization or user, case-sensitive) (required)
     * @param domain Domain name (case-sensitive) (required)
     * @param version Version identifier (required)
     * @param comment Comment identifier (required)
     * @param body  (optional)
     * @return ClosableComment
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Comment was updated </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Request body invalid </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Access token is not set or invalid </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> The comment feature is not available for the organization&#39;s plan, or the authenticating user does not have permission to complete this action </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The specified domain or comment was not found </td><td>  -  </td></tr>
     </table>
     */
    public ClosableComment updateDomainCommentV2(String owner, String domain, String version, String comment, ClosableCommentPatch body) throws ApiException {
        ApiResponse<ClosableComment> localVarResp = updateDomainCommentV2WithHttpInfo(owner, domain, version, comment, body);
        return localVarResp.getData();
    }

    /**
     * Update a comment
     * 
     * @param owner Domain owner (organization or user, case-sensitive) (required)
     * @param domain Domain name (case-sensitive) (required)
     * @param version Version identifier (required)
     * @param comment Comment identifier (required)
     * @param body  (optional)
     * @return ApiResponse&lt;ClosableComment&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Comment was updated </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Request body invalid </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Access token is not set or invalid </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> The comment feature is not available for the organization&#39;s plan, or the authenticating user does not have permission to complete this action </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The specified domain or comment was not found </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ClosableComment> updateDomainCommentV2WithHttpInfo(String owner, String domain, String version, String comment, ClosableCommentPatch body) throws ApiException {
        okhttp3.Call localVarCall = updateDomainCommentV2ValidateBeforeCall(owner, domain, version, comment, body, null);
        Type localVarReturnType = new TypeToken<ClosableComment>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Update a comment (asynchronously)
     * 
     * @param owner Domain owner (organization or user, case-sensitive) (required)
     * @param domain Domain name (case-sensitive) (required)
     * @param version Version identifier (required)
     * @param comment Comment identifier (required)
     * @param body  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Comment was updated </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Request body invalid </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Access token is not set or invalid </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> The comment feature is not available for the organization&#39;s plan, or the authenticating user does not have permission to complete this action </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The specified domain or comment was not found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateDomainCommentV2Async(String owner, String domain, String version, String comment, ClosableCommentPatch body, final ApiCallback<ClosableComment> _callback) throws ApiException {

        okhttp3.Call localVarCall = updateDomainCommentV2ValidateBeforeCall(owner, domain, version, comment, body, _callback);
        Type localVarReturnType = new TypeToken<ClosableComment>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for updateDomainCommentsV2
     * @param owner Domain owner (organization or user, case-sensitive) (required)
     * @param domain Domain name (case-sensitive) (required)
     * @param version Version identifier (required)
     * @param body  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Comments were updated </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Request body invalid </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Access token is not set or invalid </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> The comment feature is not available for the organization&#39;s plan, or the authenticating user does not have permission to complete this action </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The specified domain, comment, or reply was not found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateDomainCommentsV2Call(String owner, String domain, String version, CommentsBatch body, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = body;

        // create path and map variables
        String localVarPath = "/domains/{owner}/{domain}/{version}/comments/batch"
            .replace("{" + "owner" + "}", localVarApiClient.escapeString(owner.toString()))
            .replace("{" + "domain" + "}", localVarApiClient.escapeString(domain.toString()))
            .replace("{" + "version" + "}", localVarApiClient.escapeString(version.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "TokenSecured" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call updateDomainCommentsV2ValidateBeforeCall(String owner, String domain, String version, CommentsBatch body, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'owner' is set
        if (owner == null) {
            throw new ApiException("Missing the required parameter 'owner' when calling updateDomainCommentsV2(Async)");
        }

        // verify the required parameter 'domain' is set
        if (domain == null) {
            throw new ApiException("Missing the required parameter 'domain' when calling updateDomainCommentsV2(Async)");
        }

        // verify the required parameter 'version' is set
        if (version == null) {
            throw new ApiException("Missing the required parameter 'version' when calling updateDomainCommentsV2(Async)");
        }

        // verify the required parameter 'body' is set
        if (body == null) {
            throw new ApiException("Missing the required parameter 'body' when calling updateDomainCommentsV2(Async)");
        }

        return updateDomainCommentsV2Call(owner, domain, version, body, _callback);

    }

    /**
     * Bulk update comments
     * 
     * @param owner Domain owner (organization or user, case-sensitive) (required)
     * @param domain Domain name (case-sensitive) (required)
     * @param version Version identifier (required)
     * @param body  (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Comments were updated </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Request body invalid </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Access token is not set or invalid </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> The comment feature is not available for the organization&#39;s plan, or the authenticating user does not have permission to complete this action </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The specified domain, comment, or reply was not found </td><td>  -  </td></tr>
     </table>
     */
    public void updateDomainCommentsV2(String owner, String domain, String version, CommentsBatch body) throws ApiException {
        updateDomainCommentsV2WithHttpInfo(owner, domain, version, body);
    }

    /**
     * Bulk update comments
     * 
     * @param owner Domain owner (organization or user, case-sensitive) (required)
     * @param domain Domain name (case-sensitive) (required)
     * @param version Version identifier (required)
     * @param body  (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Comments were updated </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Request body invalid </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Access token is not set or invalid </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> The comment feature is not available for the organization&#39;s plan, or the authenticating user does not have permission to complete this action </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The specified domain, comment, or reply was not found </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> updateDomainCommentsV2WithHttpInfo(String owner, String domain, String version, CommentsBatch body) throws ApiException {
        okhttp3.Call localVarCall = updateDomainCommentsV2ValidateBeforeCall(owner, domain, version, body, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Bulk update comments (asynchronously)
     * 
     * @param owner Domain owner (organization or user, case-sensitive) (required)
     * @param domain Domain name (case-sensitive) (required)
     * @param version Version identifier (required)
     * @param body  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Comments were updated </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Request body invalid </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Access token is not set or invalid </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> The comment feature is not available for the organization&#39;s plan, or the authenticating user does not have permission to complete this action </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The specified domain, comment, or reply was not found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateDomainCommentsV2Async(String owner, String domain, String version, CommentsBatch body, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = updateDomainCommentsV2ValidateBeforeCall(owner, domain, version, body, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
}
