/*
 * SwaggerHub Registry API
 * # Overview Use SwaggerHub Registry API to access, manage, and update the following resources in SwaggerHub, bypassing the web interface:   * APIs   * Domains   * Integrations   * Projects   * Templates   SwaggerHub also provides the [User Management API](https://app.swaggerhub.com/apis-docs/swagger-hub/user-management-api/) to get information about organizations and manage organization members.  # Base URL Use the following base URL for SwaggerHub SaaS:          http(s)://api.swaggerhub.com  **Note:** This documentation is for SwaggerHub SaaS. On-Premise customers should use the bundled API definition, which can be found at the URLs provided below.  Version 1.29.0 or later:      http(s)://SERVER/v1/openapi.yaml - YAML version     http(s)://SERVER/v1/openapi.json - JSON version  Earlier versions:      http(s)://SERVER/v1/swagger.yaml - YAML version     http(s)://SERVER/v1/swagger.json - JSON version  # Authentication Operations that update data or access private data require authentication using an API key. You can find your personal API key on the [API Keys](https://app.swaggerhub.com/settings/apiKey) page in your account settings. Send this key in the `Authorization` header when making requests to the Registry API:      Authorization: YOUR_API_KEY  To test API calls from this documentation page, click the **Authorize** button below and paste your API key there.  **Important:** Keep the API key secure and do not store it directly in your code. # Tools In addition to calling the Registry API directly, you can use the following tools to interact with the API from the command line or CI/CD pipeline:   * [SwaggerHub CLI](https://www.npmjs.com/package/swaggerhub-cli)   * [Maven plugin](https://github.com/swagger-api/swaggerhub-maven-plugin)  * [Gradle plugin](https://github.com/swagger-api/swaggerhub-gradle-plugin) 
 *
 * The version of the OpenAPI document: 1.0.66
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiCallback;
import org.openapitools.client.ApiClient;
import org.openapitools.client.ApiException;
import org.openapitools.client.ApiResponse;
import org.openapitools.client.Configuration;
import org.openapitools.client.Pair;
import org.openapitools.client.ProgressRequestBody;
import org.openapitools.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import org.openapitools.client.model.Project;
import org.openapitools.client.model.ProjectMemberList;
import org.openapitools.client.model.ProjectsJson;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class ProjectsApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public ProjectsApi() {
        this(Configuration.getDefaultApiClient());
    }

    public ProjectsApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for addSpecToProjectV2
     * @param owner Organization name (case-sensitive) (required)
     * @param projectId Project name (case-sensitive) (required)
     * @param specType Definition type - &#x60;apis&#x60; or &#x60;domains&#x60;. (required)
     * @param name The name of an API or domain that you want to add to the project. Case-sensitive. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The specified API or domain was successfully added to the project </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Access token is not set or invalid </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> The projects feature is not available for the organization&#39;s plan, or the authenticating user does not have permissions to add definitions to this project  </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The specified organization or project name was not found </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> The project already contains this API or domain </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call addSpecToProjectV2Call(String owner, String projectId, String specType, String name, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/projects/{owner}/{projectId}/{specType}/{name}"
            .replace("{" + "owner" + "}", localVarApiClient.escapeString(owner.toString()))
            .replace("{" + "projectId" + "}", localVarApiClient.escapeString(projectId.toString()))
            .replace("{" + "specType" + "}", localVarApiClient.escapeString(specType.toString()))
            .replace("{" + "name" + "}", localVarApiClient.escapeString(name.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "TokenSecured" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call addSpecToProjectV2ValidateBeforeCall(String owner, String projectId, String specType, String name, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'owner' is set
        if (owner == null) {
            throw new ApiException("Missing the required parameter 'owner' when calling addSpecToProjectV2(Async)");
        }

        // verify the required parameter 'projectId' is set
        if (projectId == null) {
            throw new ApiException("Missing the required parameter 'projectId' when calling addSpecToProjectV2(Async)");
        }

        // verify the required parameter 'specType' is set
        if (specType == null) {
            throw new ApiException("Missing the required parameter 'specType' when calling addSpecToProjectV2(Async)");
        }

        // verify the required parameter 'name' is set
        if (name == null) {
            throw new ApiException("Missing the required parameter 'name' when calling addSpecToProjectV2(Async)");
        }

        return addSpecToProjectV2Call(owner, projectId, specType, name, _callback);

    }

    /**
     * Add an API or domain to a project
     * Use this operation to add a single API or domain to the specified project.  To add multiple APIs or domains at once, use &#x60;PUT /projects/{owner}/{projectId}&#x60;.
     * @param owner Organization name (case-sensitive) (required)
     * @param projectId Project name (case-sensitive) (required)
     * @param specType Definition type - &#x60;apis&#x60; or &#x60;domains&#x60;. (required)
     * @param name The name of an API or domain that you want to add to the project. Case-sensitive. (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The specified API or domain was successfully added to the project </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Access token is not set or invalid </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> The projects feature is not available for the organization&#39;s plan, or the authenticating user does not have permissions to add definitions to this project  </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The specified organization or project name was not found </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> The project already contains this API or domain </td><td>  -  </td></tr>
     </table>
     */
    public void addSpecToProjectV2(String owner, String projectId, String specType, String name) throws ApiException {
        addSpecToProjectV2WithHttpInfo(owner, projectId, specType, name);
    }

    /**
     * Add an API or domain to a project
     * Use this operation to add a single API or domain to the specified project.  To add multiple APIs or domains at once, use &#x60;PUT /projects/{owner}/{projectId}&#x60;.
     * @param owner Organization name (case-sensitive) (required)
     * @param projectId Project name (case-sensitive) (required)
     * @param specType Definition type - &#x60;apis&#x60; or &#x60;domains&#x60;. (required)
     * @param name The name of an API or domain that you want to add to the project. Case-sensitive. (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The specified API or domain was successfully added to the project </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Access token is not set or invalid </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> The projects feature is not available for the organization&#39;s plan, or the authenticating user does not have permissions to add definitions to this project  </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The specified organization or project name was not found </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> The project already contains this API or domain </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> addSpecToProjectV2WithHttpInfo(String owner, String projectId, String specType, String name) throws ApiException {
        okhttp3.Call localVarCall = addSpecToProjectV2ValidateBeforeCall(owner, projectId, specType, name, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Add an API or domain to a project (asynchronously)
     * Use this operation to add a single API or domain to the specified project.  To add multiple APIs or domains at once, use &#x60;PUT /projects/{owner}/{projectId}&#x60;.
     * @param owner Organization name (case-sensitive) (required)
     * @param projectId Project name (case-sensitive) (required)
     * @param specType Definition type - &#x60;apis&#x60; or &#x60;domains&#x60;. (required)
     * @param name The name of an API or domain that you want to add to the project. Case-sensitive. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The specified API or domain was successfully added to the project </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Access token is not set or invalid </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> The projects feature is not available for the organization&#39;s plan, or the authenticating user does not have permissions to add definitions to this project  </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The specified organization or project name was not found </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> The project already contains this API or domain </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call addSpecToProjectV2Async(String owner, String projectId, String specType, String name, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = addSpecToProjectV2ValidateBeforeCall(owner, projectId, specType, name, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for createProject
     * @param owner Organization name (case-sensitive) (required)
     * @param projectRequest The project data. Properties that are not provided are set to empty values.  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> The project has been created successfully </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request. For example, some of the specified &#x60;apis&#x60; or &#x60;domains&#x60; do not exist in the organization.  </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Access token is not set or invalid </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Projects are not available in the organization&#39;s plan </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The specified organization was not found </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> A project with this name already exists in the organization </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call createProjectCall(String owner, Project projectRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = projectRequest;

        // create path and map variables
        String localVarPath = "/projects/{owner}"
            .replace("{" + "owner" + "}", localVarApiClient.escapeString(owner.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "TokenSecured" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call createProjectValidateBeforeCall(String owner, Project projectRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'owner' is set
        if (owner == null) {
            throw new ApiException("Missing the required parameter 'owner' when calling createProject(Async)");
        }

        // verify the required parameter 'projectRequest' is set
        if (projectRequest == null) {
            throw new ApiException("Missing the required parameter 'projectRequest' when calling createProject(Async)");
        }

        return createProjectCall(owner, projectRequest, _callback);

    }

    /**
     * Create a project in an organization
     * 
     * @param owner Organization name (case-sensitive) (required)
     * @param projectRequest The project data. Properties that are not provided are set to empty values.  (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> The project has been created successfully </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request. For example, some of the specified &#x60;apis&#x60; or &#x60;domains&#x60; do not exist in the organization.  </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Access token is not set or invalid </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Projects are not available in the organization&#39;s plan </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The specified organization was not found </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> A project with this name already exists in the organization </td><td>  -  </td></tr>
     </table>
     */
    public void createProject(String owner, Project projectRequest) throws ApiException {
        createProjectWithHttpInfo(owner, projectRequest);
    }

    /**
     * Create a project in an organization
     * 
     * @param owner Organization name (case-sensitive) (required)
     * @param projectRequest The project data. Properties that are not provided are set to empty values.  (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> The project has been created successfully </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request. For example, some of the specified &#x60;apis&#x60; or &#x60;domains&#x60; do not exist in the organization.  </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Access token is not set or invalid </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Projects are not available in the organization&#39;s plan </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The specified organization was not found </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> A project with this name already exists in the organization </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> createProjectWithHttpInfo(String owner, Project projectRequest) throws ApiException {
        okhttp3.Call localVarCall = createProjectValidateBeforeCall(owner, projectRequest, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Create a project in an organization (asynchronously)
     * 
     * @param owner Organization name (case-sensitive) (required)
     * @param projectRequest The project data. Properties that are not provided are set to empty values.  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> The project has been created successfully </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request. For example, some of the specified &#x60;apis&#x60; or &#x60;domains&#x60; do not exist in the organization.  </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Access token is not set or invalid </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Projects are not available in the organization&#39;s plan </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The specified organization was not found </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> A project with this name already exists in the organization </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call createProjectAsync(String owner, Project projectRequest, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = createProjectValidateBeforeCall(owner, projectRequest, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for deleteProjectV2
     * @param owner Organization name (case-sensitive) (required)
     * @param projectId Project name (case-sensitive) (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> The project has been deleted successfully </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Access token is not set or invalid </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Projects are not available in the organization&#39;s plan, or you are not a member of the specified project. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The specified organization or project name was not found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteProjectV2Call(String owner, String projectId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/projects/{owner}/{projectId}"
            .replace("{" + "owner" + "}", localVarApiClient.escapeString(owner.toString()))
            .replace("{" + "projectId" + "}", localVarApiClient.escapeString(projectId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "TokenSecured" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call deleteProjectV2ValidateBeforeCall(String owner, String projectId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'owner' is set
        if (owner == null) {
            throw new ApiException("Missing the required parameter 'owner' when calling deleteProjectV2(Async)");
        }

        // verify the required parameter 'projectId' is set
        if (projectId == null) {
            throw new ApiException("Missing the required parameter 'projectId' when calling deleteProjectV2(Async)");
        }

        return deleteProjectV2Call(owner, projectId, _callback);

    }

    /**
     * Delete a project
     * 
     * @param owner Organization name (case-sensitive) (required)
     * @param projectId Project name (case-sensitive) (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> The project has been deleted successfully </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Access token is not set or invalid </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Projects are not available in the organization&#39;s plan, or you are not a member of the specified project. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The specified organization or project name was not found </td><td>  -  </td></tr>
     </table>
     */
    public void deleteProjectV2(String owner, String projectId) throws ApiException {
        deleteProjectV2WithHttpInfo(owner, projectId);
    }

    /**
     * Delete a project
     * 
     * @param owner Organization name (case-sensitive) (required)
     * @param projectId Project name (case-sensitive) (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> The project has been deleted successfully </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Access token is not set or invalid </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Projects are not available in the organization&#39;s plan, or you are not a member of the specified project. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The specified organization or project name was not found </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> deleteProjectV2WithHttpInfo(String owner, String projectId) throws ApiException {
        okhttp3.Call localVarCall = deleteProjectV2ValidateBeforeCall(owner, projectId, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Delete a project (asynchronously)
     * 
     * @param owner Organization name (case-sensitive) (required)
     * @param projectId Project name (case-sensitive) (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> The project has been deleted successfully </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Access token is not set or invalid </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Projects are not available in the organization&#39;s plan, or you are not a member of the specified project. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The specified organization or project name was not found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteProjectV2Async(String owner, String projectId, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = deleteProjectV2ValidateBeforeCall(owner, projectId, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for getOrgProjectsV2
     * @param owner Organization name (case-sensitive) (required)
     * @param nameOnly Return the project information excluding APIs and domains (optional, default to false)
     * @param page Page to return (optional, default to 0)
     * @param limit Number of results per page (1 .. 100) (optional, default to 10)
     * @param order Sort order (optional, default to ASC)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Project belonging to the specified organization </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Projects are not available in the organization&#39;s plan </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The specified organization was not found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getOrgProjectsV2Call(String owner, Boolean nameOnly, Integer page, Integer limit, String order, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/projects/{owner}"
            .replace("{" + "owner" + "}", localVarApiClient.escapeString(owner.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (nameOnly != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("nameOnly", nameOnly));
        }

        if (page != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("page", page));
        }

        if (limit != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("limit", limit));
        }

        if (order != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("order", order));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "TokenSecured" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getOrgProjectsV2ValidateBeforeCall(String owner, Boolean nameOnly, Integer page, Integer limit, String order, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'owner' is set
        if (owner == null) {
            throw new ApiException("Missing the required parameter 'owner' when calling getOrgProjectsV2(Async)");
        }

        return getOrgProjectsV2Call(owner, nameOnly, page, limit, order, _callback);

    }

    /**
     * Get all projects of an organization
     * 
     * @param owner Organization name (case-sensitive) (required)
     * @param nameOnly Return the project information excluding APIs and domains (optional, default to false)
     * @param page Page to return (optional, default to 0)
     * @param limit Number of results per page (1 .. 100) (optional, default to 10)
     * @param order Sort order (optional, default to ASC)
     * @return ProjectsJson
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Project belonging to the specified organization </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Projects are not available in the organization&#39;s plan </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The specified organization was not found </td><td>  -  </td></tr>
     </table>
     */
    public ProjectsJson getOrgProjectsV2(String owner, Boolean nameOnly, Integer page, Integer limit, String order) throws ApiException {
        ApiResponse<ProjectsJson> localVarResp = getOrgProjectsV2WithHttpInfo(owner, nameOnly, page, limit, order);
        return localVarResp.getData();
    }

    /**
     * Get all projects of an organization
     * 
     * @param owner Organization name (case-sensitive) (required)
     * @param nameOnly Return the project information excluding APIs and domains (optional, default to false)
     * @param page Page to return (optional, default to 0)
     * @param limit Number of results per page (1 .. 100) (optional, default to 10)
     * @param order Sort order (optional, default to ASC)
     * @return ApiResponse&lt;ProjectsJson&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Project belonging to the specified organization </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Projects are not available in the organization&#39;s plan </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The specified organization was not found </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ProjectsJson> getOrgProjectsV2WithHttpInfo(String owner, Boolean nameOnly, Integer page, Integer limit, String order) throws ApiException {
        okhttp3.Call localVarCall = getOrgProjectsV2ValidateBeforeCall(owner, nameOnly, page, limit, order, null);
        Type localVarReturnType = new TypeToken<ProjectsJson>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get all projects of an organization (asynchronously)
     * 
     * @param owner Organization name (case-sensitive) (required)
     * @param nameOnly Return the project information excluding APIs and domains (optional, default to false)
     * @param page Page to return (optional, default to 0)
     * @param limit Number of results per page (1 .. 100) (optional, default to 10)
     * @param order Sort order (optional, default to ASC)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Project belonging to the specified organization </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Projects are not available in the organization&#39;s plan </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The specified organization was not found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getOrgProjectsV2Async(String owner, Boolean nameOnly, Integer page, Integer limit, String order, final ApiCallback<ProjectsJson> _callback) throws ApiException {

        okhttp3.Call localVarCall = getOrgProjectsV2ValidateBeforeCall(owner, nameOnly, page, limit, order, _callback);
        Type localVarReturnType = new TypeToken<ProjectsJson>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getProjectMembersV2
     * @param owner Organization name (case-sensitive) (required)
     * @param projectId Project name (case-sensitive) (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A list of project members (users and teams) </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Access token is not set or invalid </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Projects are not available in the organization&#39;s plan, or you are not a member of the specified project.  </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The specified organization or project name was not found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getProjectMembersV2Call(String owner, String projectId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/projects/{owner}/{projectId}/members"
            .replace("{" + "owner" + "}", localVarApiClient.escapeString(owner.toString()))
            .replace("{" + "projectId" + "}", localVarApiClient.escapeString(projectId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "TokenSecured" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getProjectMembersV2ValidateBeforeCall(String owner, String projectId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'owner' is set
        if (owner == null) {
            throw new ApiException("Missing the required parameter 'owner' when calling getProjectMembersV2(Async)");
        }

        // verify the required parameter 'projectId' is set
        if (projectId == null) {
            throw new ApiException("Missing the required parameter 'projectId' when calling getProjectMembersV2(Async)");
        }

        return getProjectMembersV2Call(owner, projectId, _callback);

    }

    /**
     * Get project members
     * 
     * @param owner Organization name (case-sensitive) (required)
     * @param projectId Project name (case-sensitive) (required)
     * @return ProjectMemberList
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A list of project members (users and teams) </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Access token is not set or invalid </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Projects are not available in the organization&#39;s plan, or you are not a member of the specified project.  </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The specified organization or project name was not found </td><td>  -  </td></tr>
     </table>
     */
    public ProjectMemberList getProjectMembersV2(String owner, String projectId) throws ApiException {
        ApiResponse<ProjectMemberList> localVarResp = getProjectMembersV2WithHttpInfo(owner, projectId);
        return localVarResp.getData();
    }

    /**
     * Get project members
     * 
     * @param owner Organization name (case-sensitive) (required)
     * @param projectId Project name (case-sensitive) (required)
     * @return ApiResponse&lt;ProjectMemberList&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A list of project members (users and teams) </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Access token is not set or invalid </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Projects are not available in the organization&#39;s plan, or you are not a member of the specified project.  </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The specified organization or project name was not found </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ProjectMemberList> getProjectMembersV2WithHttpInfo(String owner, String projectId) throws ApiException {
        okhttp3.Call localVarCall = getProjectMembersV2ValidateBeforeCall(owner, projectId, null);
        Type localVarReturnType = new TypeToken<ProjectMemberList>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get project members (asynchronously)
     * 
     * @param owner Organization name (case-sensitive) (required)
     * @param projectId Project name (case-sensitive) (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A list of project members (users and teams) </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Access token is not set or invalid </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Projects are not available in the organization&#39;s plan, or you are not a member of the specified project.  </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The specified organization or project name was not found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getProjectMembersV2Async(String owner, String projectId, final ApiCallback<ProjectMemberList> _callback) throws ApiException {

        okhttp3.Call localVarCall = getProjectMembersV2ValidateBeforeCall(owner, projectId, _callback);
        Type localVarReturnType = new TypeToken<ProjectMemberList>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getProjectV2
     * @param owner Organization name (case-sensitive) (required)
     * @param projectId Project name (case-sensitive) (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Project information </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Access token is not set or invalid </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Projects are not available in the organization&#39;s plan, or you are not a member of the specified project  </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The specified organization or project name was not found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getProjectV2Call(String owner, String projectId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/projects/{owner}/{projectId}"
            .replace("{" + "owner" + "}", localVarApiClient.escapeString(owner.toString()))
            .replace("{" + "projectId" + "}", localVarApiClient.escapeString(projectId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "TokenSecured" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getProjectV2ValidateBeforeCall(String owner, String projectId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'owner' is set
        if (owner == null) {
            throw new ApiException("Missing the required parameter 'owner' when calling getProjectV2(Async)");
        }

        // verify the required parameter 'projectId' is set
        if (projectId == null) {
            throw new ApiException("Missing the required parameter 'projectId' when calling getProjectV2(Async)");
        }

        return getProjectV2Call(owner, projectId, _callback);

    }

    /**
     * Get project information
     * 
     * @param owner Organization name (case-sensitive) (required)
     * @param projectId Project name (case-sensitive) (required)
     * @return Project
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Project information </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Access token is not set or invalid </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Projects are not available in the organization&#39;s plan, or you are not a member of the specified project  </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The specified organization or project name was not found </td><td>  -  </td></tr>
     </table>
     */
    public Project getProjectV2(String owner, String projectId) throws ApiException {
        ApiResponse<Project> localVarResp = getProjectV2WithHttpInfo(owner, projectId);
        return localVarResp.getData();
    }

    /**
     * Get project information
     * 
     * @param owner Organization name (case-sensitive) (required)
     * @param projectId Project name (case-sensitive) (required)
     * @return ApiResponse&lt;Project&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Project information </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Access token is not set or invalid </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Projects are not available in the organization&#39;s plan, or you are not a member of the specified project  </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The specified organization or project name was not found </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Project> getProjectV2WithHttpInfo(String owner, String projectId) throws ApiException {
        okhttp3.Call localVarCall = getProjectV2ValidateBeforeCall(owner, projectId, null);
        Type localVarReturnType = new TypeToken<Project>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get project information (asynchronously)
     * 
     * @param owner Organization name (case-sensitive) (required)
     * @param projectId Project name (case-sensitive) (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Project information </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Access token is not set or invalid </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Projects are not available in the organization&#39;s plan, or you are not a member of the specified project  </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The specified organization or project name was not found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getProjectV2Async(String owner, String projectId, final ApiCallback<Project> _callback) throws ApiException {

        okhttp3.Call localVarCall = getProjectV2ValidateBeforeCall(owner, projectId, _callback);
        Type localVarReturnType = new TypeToken<Project>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getUserProjects
     * @param nameOnly Return the project information excluding APIs and domains (optional, default to false)
     * @param page Page to return (optional, default to 0)
     * @param limit Number of results per page (1 .. 100) (optional, default to 10)
     * @param sort Sort criteria or result set: * NAME * OWNER  (optional, default to NAME)
     * @param order Sort order (optional, default to ASC)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> All projects accessible to the current user </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Access token is not set or invalid </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getUserProjectsCall(Boolean nameOnly, Integer page, Integer limit, String sort, String order, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/projects";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (nameOnly != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("nameOnly", nameOnly));
        }

        if (page != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("page", page));
        }

        if (limit != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("limit", limit));
        }

        if (sort != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("sort", sort));
        }

        if (order != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("order", order));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "TokenSecured" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getUserProjectsValidateBeforeCall(Boolean nameOnly, Integer page, Integer limit, String sort, String order, final ApiCallback _callback) throws ApiException {
        return getUserProjectsCall(nameOnly, page, limit, sort, order, _callback);

    }

    /**
     * Get all projects that a user has access to
     * Returns all projects that the authenticating user has access to. Organization owners get a list of all projects in owned organizations. Other members get a list of just the projects they are member of.
     * @param nameOnly Return the project information excluding APIs and domains (optional, default to false)
     * @param page Page to return (optional, default to 0)
     * @param limit Number of results per page (1 .. 100) (optional, default to 10)
     * @param sort Sort criteria or result set: * NAME * OWNER  (optional, default to NAME)
     * @param order Sort order (optional, default to ASC)
     * @return ProjectsJson
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> All projects accessible to the current user </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Access token is not set or invalid </td><td>  -  </td></tr>
     </table>
     */
    public ProjectsJson getUserProjects(Boolean nameOnly, Integer page, Integer limit, String sort, String order) throws ApiException {
        ApiResponse<ProjectsJson> localVarResp = getUserProjectsWithHttpInfo(nameOnly, page, limit, sort, order);
        return localVarResp.getData();
    }

    /**
     * Get all projects that a user has access to
     * Returns all projects that the authenticating user has access to. Organization owners get a list of all projects in owned organizations. Other members get a list of just the projects they are member of.
     * @param nameOnly Return the project information excluding APIs and domains (optional, default to false)
     * @param page Page to return (optional, default to 0)
     * @param limit Number of results per page (1 .. 100) (optional, default to 10)
     * @param sort Sort criteria or result set: * NAME * OWNER  (optional, default to NAME)
     * @param order Sort order (optional, default to ASC)
     * @return ApiResponse&lt;ProjectsJson&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> All projects accessible to the current user </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Access token is not set or invalid </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ProjectsJson> getUserProjectsWithHttpInfo(Boolean nameOnly, Integer page, Integer limit, String sort, String order) throws ApiException {
        okhttp3.Call localVarCall = getUserProjectsValidateBeforeCall(nameOnly, page, limit, sort, order, null);
        Type localVarReturnType = new TypeToken<ProjectsJson>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get all projects that a user has access to (asynchronously)
     * Returns all projects that the authenticating user has access to. Organization owners get a list of all projects in owned organizations. Other members get a list of just the projects they are member of.
     * @param nameOnly Return the project information excluding APIs and domains (optional, default to false)
     * @param page Page to return (optional, default to 0)
     * @param limit Number of results per page (1 .. 100) (optional, default to 10)
     * @param sort Sort criteria or result set: * NAME * OWNER  (optional, default to NAME)
     * @param order Sort order (optional, default to ASC)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> All projects accessible to the current user </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Access token is not set or invalid </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getUserProjectsAsync(Boolean nameOnly, Integer page, Integer limit, String sort, String order, final ApiCallback<ProjectsJson> _callback) throws ApiException {

        okhttp3.Call localVarCall = getUserProjectsValidateBeforeCall(nameOnly, page, limit, sort, order, _callback);
        Type localVarReturnType = new TypeToken<ProjectsJson>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for saveProjectV2
     * @param owner Organization name (case-sensitive) (required)
     * @param projectId Project name (case-sensitive) (required)
     * @param projectRequest The project data. Properties that are not provided are set to empty values.  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The project has been updated successfully </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request. For example, some of the specified &#x60;apis&#x60; or &#x60;domains&#x60; do not exist in the organization to which the project belongs.  </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Access token is not set or invalid </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Projects are not available in the organization&#39;s plan, or you are not a member of the specified project  </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The specified organization or project name was not found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call saveProjectV2Call(String owner, String projectId, Project projectRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = projectRequest;

        // create path and map variables
        String localVarPath = "/projects/{owner}/{projectId}"
            .replace("{" + "owner" + "}", localVarApiClient.escapeString(owner.toString()))
            .replace("{" + "projectId" + "}", localVarApiClient.escapeString(projectId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "TokenSecured" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call saveProjectV2ValidateBeforeCall(String owner, String projectId, Project projectRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'owner' is set
        if (owner == null) {
            throw new ApiException("Missing the required parameter 'owner' when calling saveProjectV2(Async)");
        }

        // verify the required parameter 'projectId' is set
        if (projectId == null) {
            throw new ApiException("Missing the required parameter 'projectId' when calling saveProjectV2(Async)");
        }

        // verify the required parameter 'projectRequest' is set
        if (projectRequest == null) {
            throw new ApiException("Missing the required parameter 'projectRequest' when calling saveProjectV2(Async)");
        }

        return saveProjectV2Call(owner, projectId, projectRequest, _callback);

    }

    /**
     * Update a project
     * Use this operation to update an existing project, for example, add or remove APIs, or change the project description.  When updating a project, the &#x60;apis&#x60; and &#x60;domains&#x60; lists _replace_ the existing ones. This means that to add new APIs and domains to a project, you need to send the &#x60;apis&#x60; and &#x60;domains&#x60; lists containing both the existing and new APIs and domains.  To add a single API or domain to a project, you can use &#x60;PUT /projects/{owner}/{projectId}/{specType}/{name}&#x60; instead.
     * @param owner Organization name (case-sensitive) (required)
     * @param projectId Project name (case-sensitive) (required)
     * @param projectRequest The project data. Properties that are not provided are set to empty values.  (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The project has been updated successfully </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request. For example, some of the specified &#x60;apis&#x60; or &#x60;domains&#x60; do not exist in the organization to which the project belongs.  </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Access token is not set or invalid </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Projects are not available in the organization&#39;s plan, or you are not a member of the specified project  </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The specified organization or project name was not found </td><td>  -  </td></tr>
     </table>
     */
    public void saveProjectV2(String owner, String projectId, Project projectRequest) throws ApiException {
        saveProjectV2WithHttpInfo(owner, projectId, projectRequest);
    }

    /**
     * Update a project
     * Use this operation to update an existing project, for example, add or remove APIs, or change the project description.  When updating a project, the &#x60;apis&#x60; and &#x60;domains&#x60; lists _replace_ the existing ones. This means that to add new APIs and domains to a project, you need to send the &#x60;apis&#x60; and &#x60;domains&#x60; lists containing both the existing and new APIs and domains.  To add a single API or domain to a project, you can use &#x60;PUT /projects/{owner}/{projectId}/{specType}/{name}&#x60; instead.
     * @param owner Organization name (case-sensitive) (required)
     * @param projectId Project name (case-sensitive) (required)
     * @param projectRequest The project data. Properties that are not provided are set to empty values.  (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The project has been updated successfully </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request. For example, some of the specified &#x60;apis&#x60; or &#x60;domains&#x60; do not exist in the organization to which the project belongs.  </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Access token is not set or invalid </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Projects are not available in the organization&#39;s plan, or you are not a member of the specified project  </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The specified organization or project name was not found </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> saveProjectV2WithHttpInfo(String owner, String projectId, Project projectRequest) throws ApiException {
        okhttp3.Call localVarCall = saveProjectV2ValidateBeforeCall(owner, projectId, projectRequest, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Update a project (asynchronously)
     * Use this operation to update an existing project, for example, add or remove APIs, or change the project description.  When updating a project, the &#x60;apis&#x60; and &#x60;domains&#x60; lists _replace_ the existing ones. This means that to add new APIs and domains to a project, you need to send the &#x60;apis&#x60; and &#x60;domains&#x60; lists containing both the existing and new APIs and domains.  To add a single API or domain to a project, you can use &#x60;PUT /projects/{owner}/{projectId}/{specType}/{name}&#x60; instead.
     * @param owner Organization name (case-sensitive) (required)
     * @param projectId Project name (case-sensitive) (required)
     * @param projectRequest The project data. Properties that are not provided are set to empty values.  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The project has been updated successfully </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request. For example, some of the specified &#x60;apis&#x60; or &#x60;domains&#x60; do not exist in the organization to which the project belongs.  </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Access token is not set or invalid </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Projects are not available in the organization&#39;s plan, or you are not a member of the specified project  </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The specified organization or project name was not found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call saveProjectV2Async(String owner, String projectId, Project projectRequest, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = saveProjectV2ValidateBeforeCall(owner, projectId, projectRequest, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for updateProjectMembersV2
     * @param owner Organization name (case-sensitive) (required)
     * @param projectId Project name (case-sensitive) (required)
     * @param projectMemberList A list of users and teams to add to the project (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The project members list has been updated successfully </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Projects are not available in the organization&#39;s plan, or you are not a member of the specified project.  </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The specified organization or project name was not found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateProjectMembersV2Call(String owner, String projectId, ProjectMemberList projectMemberList, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = projectMemberList;

        // create path and map variables
        String localVarPath = "/projects/{owner}/{projectId}/members"
            .replace("{" + "owner" + "}", localVarApiClient.escapeString(owner.toString()))
            .replace("{" + "projectId" + "}", localVarApiClient.escapeString(projectId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "TokenSecured" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call updateProjectMembersV2ValidateBeforeCall(String owner, String projectId, ProjectMemberList projectMemberList, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'owner' is set
        if (owner == null) {
            throw new ApiException("Missing the required parameter 'owner' when calling updateProjectMembersV2(Async)");
        }

        // verify the required parameter 'projectId' is set
        if (projectId == null) {
            throw new ApiException("Missing the required parameter 'projectId' when calling updateProjectMembersV2(Async)");
        }

        // verify the required parameter 'projectMemberList' is set
        if (projectMemberList == null) {
            throw new ApiException("Missing the required parameter 'projectMemberList' when calling updateProjectMembersV2(Async)");
        }

        return updateProjectMembersV2Call(owner, projectId, projectMemberList, _callback);

    }

    /**
     * Update a project&#39;s members list
     * When updating a project, the &#x60;members&#x60; list _replaces_ the existing one. This means that to add new members to a project, you need to send the &#x60;members&#x60; list containing both the existing and new members. 
     * @param owner Organization name (case-sensitive) (required)
     * @param projectId Project name (case-sensitive) (required)
     * @param projectMemberList A list of users and teams to add to the project (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The project members list has been updated successfully </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Projects are not available in the organization&#39;s plan, or you are not a member of the specified project.  </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The specified organization or project name was not found </td><td>  -  </td></tr>
     </table>
     */
    public void updateProjectMembersV2(String owner, String projectId, ProjectMemberList projectMemberList) throws ApiException {
        updateProjectMembersV2WithHttpInfo(owner, projectId, projectMemberList);
    }

    /**
     * Update a project&#39;s members list
     * When updating a project, the &#x60;members&#x60; list _replaces_ the existing one. This means that to add new members to a project, you need to send the &#x60;members&#x60; list containing both the existing and new members. 
     * @param owner Organization name (case-sensitive) (required)
     * @param projectId Project name (case-sensitive) (required)
     * @param projectMemberList A list of users and teams to add to the project (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The project members list has been updated successfully </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Projects are not available in the organization&#39;s plan, or you are not a member of the specified project.  </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The specified organization or project name was not found </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> updateProjectMembersV2WithHttpInfo(String owner, String projectId, ProjectMemberList projectMemberList) throws ApiException {
        okhttp3.Call localVarCall = updateProjectMembersV2ValidateBeforeCall(owner, projectId, projectMemberList, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Update a project&#39;s members list (asynchronously)
     * When updating a project, the &#x60;members&#x60; list _replaces_ the existing one. This means that to add new members to a project, you need to send the &#x60;members&#x60; list containing both the existing and new members. 
     * @param owner Organization name (case-sensitive) (required)
     * @param projectId Project name (case-sensitive) (required)
     * @param projectMemberList A list of users and teams to add to the project (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The project members list has been updated successfully </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Projects are not available in the organization&#39;s plan, or you are not a member of the specified project.  </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The specified organization or project name was not found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateProjectMembersV2Async(String owner, String projectId, ProjectMemberList projectMemberList, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = updateProjectMembersV2ValidateBeforeCall(owner, projectId, projectMemberList, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
}
