/**
 * Pandorabots AIaaS
 * AIaaS provides API access to our bot hosting platform and SDKs, allowing developers to easily integrate conversational interfaces into applications.
 *
 * The version of the OpenAPI document: 1.0.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIPandorabotsApiSwagger13Api.h"
#include "OAIServerConfiguration.h"
#include <QJsonArray>
#include <QJsonDocument>

namespace OpenAPI {

OAIPandorabotsApiSwagger13Api::OAIPandorabotsApiSwagger13Api(const int timeOut)
    : _timeOut(timeOut),
      _manager(nullptr),
      _isResponseCompressionEnabled(false),
      _isRequestCompressionEnabled(false) {
    initializeServerConfigs();
}

OAIPandorabotsApiSwagger13Api::~OAIPandorabotsApiSwagger13Api() {
}

void OAIPandorabotsApiSwagger13Api::initializeServerConfigs() {
    //Default server
    QList<OAIServerConfiguration> defaultConf = QList<OAIServerConfiguration>();
    //varying endpoint server
    defaultConf.append(OAIServerConfiguration(
    QUrl("https://aiaas.pandorabots.com/"),
    "No description provided",
    QMap<QString, OAIServerVariable>()));
    _serverConfigs.insert("atalkBot", defaultConf);
    _serverIndices.insert("atalkBot", 0);
    _serverConfigs.insert("compileBot", defaultConf);
    _serverIndices.insert("compileBot", 0);
    _serverConfigs.insert("createBot", defaultConf);
    _serverIndices.insert("createBot", 0);
    _serverConfigs.insert("debugBot", defaultConf);
    _serverIndices.insert("debugBot", 0);
    _serverConfigs.insert("deleteBot", defaultConf);
    _serverIndices.insert("deleteBot", 0);
    _serverConfigs.insert("deleteBotFile1", defaultConf);
    _serverIndices.insert("deleteBotFile1", 0);
    _serverConfigs.insert("deleteBotFile2", defaultConf);
    _serverIndices.insert("deleteBotFile2", 0);
    _serverConfigs.insert("getBotFile1", defaultConf);
    _serverIndices.insert("getBotFile1", 0);
    _serverConfigs.insert("getBotFile2", defaultConf);
    _serverIndices.insert("getBotFile2", 0);
    _serverConfigs.insert("listBotFiles", defaultConf);
    _serverIndices.insert("listBotFiles", 0);
    _serverConfigs.insert("listBots", defaultConf);
    _serverIndices.insert("listBots", 0);
    _serverConfigs.insert("uploadFile1", defaultConf);
    _serverIndices.insert("uploadFile1", 0);
    _serverConfigs.insert("uploadFile2", defaultConf);
    _serverIndices.insert("uploadFile2", 0);
}

/**
* returns 0 on success and -1, -2 or -3 on failure.
* -1 when the variable does not exist and -2 if the value is not defined in the enum and -3 if the operation or server index is not found
*/
int OAIPandorabotsApiSwagger13Api::setDefaultServerValue(int serverIndex, const QString &operation, const QString &variable, const QString &value) {
    auto it = _serverConfigs.find(operation);
    if (it != _serverConfigs.end() && serverIndex < it.value().size()) {
      return _serverConfigs[operation][serverIndex].setDefaultValue(variable,value);
    }
    return -3;
}
void OAIPandorabotsApiSwagger13Api::setServerIndex(const QString &operation, int serverIndex) {
    if (_serverIndices.contains(operation) && serverIndex < _serverConfigs.find(operation).value().size()) {
        _serverIndices[operation] = serverIndex;
    }
}

void OAIPandorabotsApiSwagger13Api::setApiKey(const QString &apiKeyName, const QString &apiKey) {
    _apiKeys.insert(apiKeyName, apiKey);
}

void OAIPandorabotsApiSwagger13Api::setBearerToken(const QString &token) {
    _bearerToken = token;
}

void OAIPandorabotsApiSwagger13Api::setUsername(const QString &username) {
    _username = username;
}

void OAIPandorabotsApiSwagger13Api::setPassword(const QString &password) {
    _password = password;
}


void OAIPandorabotsApiSwagger13Api::setTimeOut(const int timeOut) {
    _timeOut = timeOut;
}

void OAIPandorabotsApiSwagger13Api::setWorkingDirectory(const QString &path) {
    _workingDirectory = path;
}

void OAIPandorabotsApiSwagger13Api::setNetworkAccessManager(QNetworkAccessManager* manager) {
    _manager = manager;
}

/**
    * Appends a new ServerConfiguration to the config map for a specific operation.
    * @param operation The id to the target operation.
    * @param url A string that contains the URL of the server
    * @param description A String that describes the server
    * @param variables A map between a variable name and its value. The value is used for substitution in the server's URL template.
    * returns the index of the new server config on success and -1 if the operation is not found
    */
int OAIPandorabotsApiSwagger13Api::addServerConfiguration(const QString &operation, const QUrl &url, const QString &description, const QMap<QString, OAIServerVariable> &variables) {
    if (_serverConfigs.contains(operation)) {
        _serverConfigs[operation].append(OAIServerConfiguration(
                    url,
                    description,
                    variables));
        return _serverConfigs[operation].size()-1;
    } else {
        return -1;
    }
}

/**
    * Appends a new ServerConfiguration to the config map for a all operations and sets the index to that server.
    * @param url A string that contains the URL of the server
    * @param description A String that describes the server
    * @param variables A map between a variable name and its value. The value is used for substitution in the server's URL template.
    */
void OAIPandorabotsApiSwagger13Api::setNewServerForAllOperations(const QUrl &url, const QString &description, const QMap<QString, OAIServerVariable> &variables) {
    for (auto keyIt = _serverIndices.keyBegin(); keyIt != _serverIndices.keyEnd(); keyIt++) {
        setServerIndex(*keyIt, addServerConfiguration(*keyIt, url, description, variables));
    }
}

/**
    * Appends a new ServerConfiguration to the config map for an operations and sets the index to that server.
    * @param URL A string that contains the URL of the server
    * @param description A String that describes the server
    * @param variables A map between a variable name and its value. The value is used for substitution in the server's URL template.
    */
void OAIPandorabotsApiSwagger13Api::setNewServer(const QString &operation, const QUrl &url, const QString &description, const QMap<QString, OAIServerVariable> &variables) {
    setServerIndex(operation, addServerConfiguration(operation, url, description, variables));
}

void OAIPandorabotsApiSwagger13Api::addHeaders(const QString &key, const QString &value) {
    _defaultHeaders.insert(key, value);
}

void OAIPandorabotsApiSwagger13Api::enableRequestCompression() {
    _isRequestCompressionEnabled = true;
}

void OAIPandorabotsApiSwagger13Api::enableResponseCompression() {
    _isResponseCompressionEnabled = true;
}

void OAIPandorabotsApiSwagger13Api::abortRequests() {
    Q_EMIT abortRequestsSignal();
}

QString OAIPandorabotsApiSwagger13Api::getParamStylePrefix(const QString &style) {
    if (style == "matrix") {
        return ";";
    } else if (style == "label") {
        return ".";
    } else if (style == "form") {
        return "&";
    } else if (style == "simple") {
        return "";
    } else if (style == "spaceDelimited") {
        return "&";
    } else if (style == "pipeDelimited") {
        return "&";
    } else {
        return "none";
    }
}

QString OAIPandorabotsApiSwagger13Api::getParamStyleSuffix(const QString &style) {
    if (style == "matrix") {
        return "=";
    } else if (style == "label") {
        return "";
    } else if (style == "form") {
        return "=";
    } else if (style == "simple") {
        return "";
    } else if (style == "spaceDelimited") {
        return "=";
    } else if (style == "pipeDelimited") {
        return "=";
    } else {
        return "none";
    }
}

QString OAIPandorabotsApiSwagger13Api::getParamStyleDelimiter(const QString &style, const QString &name, bool isExplode) {

    if (style == "matrix") {
        return (isExplode) ? ";" + name + "=" : ",";

    } else if (style == "label") {
        return (isExplode) ? "." : ",";

    } else if (style == "form") {
        return (isExplode) ? "&" + name + "=" : ",";

    } else if (style == "simple") {
        return ",";
    } else if (style == "spaceDelimited") {
        return (isExplode) ? "&" + name + "=" : " ";

    } else if (style == "pipeDelimited") {
        return (isExplode) ? "&" + name + "=" : "|";

    } else if (style == "deepObject") {
        return (isExplode) ? "&" : "none";

    } else {
        return "none";
    }
}

void OAIPandorabotsApiSwagger13Api::atalkBot(const QString &app_id, const QString &botname, const QString &input, const ::OpenAPI::OptionalParam<QString> &client_name, const ::OpenAPI::OptionalParam<QString> &sessionid, const ::OpenAPI::OptionalParam<QString> &recent) {
    QString fullPath = QString(_serverConfigs["atalkBot"][_serverIndices.value("atalkBot")].URL()+"/atalk/{app_id}/{botname}");
    
    if (_apiKeys.contains("user_key")) {
        if (fullPath.indexOf("?") > 0)
            fullPath.append("&");
        else
            fullPath.append("?");
        fullPath.append("user_key=").append(_apiKeys.find("user_key").value());
    }
    
    
    {
        QString app_idPathParam("{");
        app_idPathParam.append("app_id").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "app_id", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"app_id"+pathSuffix : pathPrefix;
        fullPath.replace(app_idPathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(app_id)));
    }
    
    {
        QString botnamePathParam("{");
        botnamePathParam.append("botname").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "botname", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"botname"+pathSuffix : pathPrefix;
        fullPath.replace(botnamePathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(botname)));
    }
    QString queryPrefix, querySuffix, queryDelimiter, queryStyle;
    
    {
        queryStyle = "";
        if (queryStyle == "")
            queryStyle = "form";
        queryPrefix = getParamStylePrefix(queryStyle);
        querySuffix = getParamStyleSuffix(queryStyle);
        queryDelimiter = getParamStyleDelimiter(queryStyle, "input", false);
        if (fullPath.indexOf("?") > 0)
            fullPath.append(queryPrefix);
        else
            fullPath.append("?");

        fullPath.append(QUrl::toPercentEncoding("input")).append(querySuffix).append(QUrl::toPercentEncoding(input));
    }
    if (client_name.hasValue())
    {
        queryStyle = "";
        if (queryStyle == "")
            queryStyle = "form";
        queryPrefix = getParamStylePrefix(queryStyle);
        querySuffix = getParamStyleSuffix(queryStyle);
        queryDelimiter = getParamStyleDelimiter(queryStyle, "client_name", false);
        if (fullPath.indexOf("?") > 0)
            fullPath.append(queryPrefix);
        else
            fullPath.append("?");

        fullPath.append(QUrl::toPercentEncoding("client_name")).append(querySuffix).append(QUrl::toPercentEncoding(client_name.stringValue()));
    }
    if (sessionid.hasValue())
    {
        queryStyle = "";
        if (queryStyle == "")
            queryStyle = "form";
        queryPrefix = getParamStylePrefix(queryStyle);
        querySuffix = getParamStyleSuffix(queryStyle);
        queryDelimiter = getParamStyleDelimiter(queryStyle, "sessionid", false);
        if (fullPath.indexOf("?") > 0)
            fullPath.append(queryPrefix);
        else
            fullPath.append("?");

        fullPath.append(QUrl::toPercentEncoding("sessionid")).append(querySuffix).append(QUrl::toPercentEncoding(sessionid.stringValue()));
    }
    if (recent.hasValue())
    {
        queryStyle = "";
        if (queryStyle == "")
            queryStyle = "form";
        queryPrefix = getParamStylePrefix(queryStyle);
        querySuffix = getParamStyleSuffix(queryStyle);
        queryDelimiter = getParamStyleDelimiter(queryStyle, "recent", false);
        if (fullPath.indexOf("?") > 0)
            fullPath.append(queryPrefix);
        else
            fullPath.append("?");

        fullPath.append(QUrl::toPercentEncoding("recent")).append(querySuffix).append(QUrl::toPercentEncoding(recent.stringValue()));
    }
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "POST");


    for (auto keyValueIt = _defaultHeaders.keyValueBegin(); keyValueIt != _defaultHeaders.keyValueEnd(); keyValueIt++) {
        input.headers.insert(keyValueIt->first, keyValueIt->second);
    }


    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAIPandorabotsApiSwagger13Api::atalkBotCallback);
    connect(this, &OAIPandorabotsApiSwagger13Api::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, this, [this]() {
        if (findChildren<OAIHttpRequestWorker*>().count() == 0) {
            Q_EMIT allPendingRequestsCompleted();
        }
    });

    worker->execute(&input);
}

void OAIPandorabotsApiSwagger13Api::atalkBotCallback(OAIHttpRequestWorker *worker) {
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type != QNetworkReply::NoError) {
        error_str = QString("%1, %2").arg(worker->error_str, QString(worker->response));
    }
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        Q_EMIT atalkBotSignal();
        Q_EMIT atalkBotSignalFull(worker);
    } else {

#if defined(_MSC_VER)
// For MSVC
#pragma warning(push)
#pragma warning(disable : 4996)
#elif defined(__clang__)
// For Clang
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#elif defined(__GNUC__)
// For GCC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

        Q_EMIT atalkBotSignalE(error_type, error_str);
        Q_EMIT atalkBotSignalEFull(worker, error_type, error_str);

#if defined(_MSC_VER)
#pragma warning(pop)
#elif defined(__clang__)
#pragma clang diagnostic pop
#elif defined(__GNUC__)
#pragma GCC diagnostic pop
#endif

        Q_EMIT atalkBotSignalError(error_type, error_str);
        Q_EMIT atalkBotSignalErrorFull(worker, error_type, error_str);
    }
}

void OAIPandorabotsApiSwagger13Api::compileBot(const QString &app_id, const QString &botname) {
    QString fullPath = QString(_serverConfigs["compileBot"][_serverIndices.value("compileBot")].URL()+"/bot/{app_id}/{botname}/verify");
    
    if (_apiKeys.contains("user_key")) {
        if (fullPath.indexOf("?") > 0)
            fullPath.append("&");
        else
            fullPath.append("?");
        fullPath.append("user_key=").append(_apiKeys.find("user_key").value());
    }
    
    
    {
        QString app_idPathParam("{");
        app_idPathParam.append("app_id").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "app_id", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"app_id"+pathSuffix : pathPrefix;
        fullPath.replace(app_idPathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(app_id)));
    }
    
    {
        QString botnamePathParam("{");
        botnamePathParam.append("botname").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "botname", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"botname"+pathSuffix : pathPrefix;
        fullPath.replace(botnamePathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(botname)));
    }
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "GET");


    for (auto keyValueIt = _defaultHeaders.keyValueBegin(); keyValueIt != _defaultHeaders.keyValueEnd(); keyValueIt++) {
        input.headers.insert(keyValueIt->first, keyValueIt->second);
    }


    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAIPandorabotsApiSwagger13Api::compileBotCallback);
    connect(this, &OAIPandorabotsApiSwagger13Api::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, this, [this]() {
        if (findChildren<OAIHttpRequestWorker*>().count() == 0) {
            Q_EMIT allPendingRequestsCompleted();
        }
    });

    worker->execute(&input);
}

void OAIPandorabotsApiSwagger13Api::compileBotCallback(OAIHttpRequestWorker *worker) {
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type != QNetworkReply::NoError) {
        error_str = QString("%1, %2").arg(worker->error_str, QString(worker->response));
    }
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        Q_EMIT compileBotSignal();
        Q_EMIT compileBotSignalFull(worker);
    } else {

#if defined(_MSC_VER)
// For MSVC
#pragma warning(push)
#pragma warning(disable : 4996)
#elif defined(__clang__)
// For Clang
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#elif defined(__GNUC__)
// For GCC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

        Q_EMIT compileBotSignalE(error_type, error_str);
        Q_EMIT compileBotSignalEFull(worker, error_type, error_str);

#if defined(_MSC_VER)
#pragma warning(pop)
#elif defined(__clang__)
#pragma clang diagnostic pop
#elif defined(__GNUC__)
#pragma GCC diagnostic pop
#endif

        Q_EMIT compileBotSignalError(error_type, error_str);
        Q_EMIT compileBotSignalErrorFull(worker, error_type, error_str);
    }
}

void OAIPandorabotsApiSwagger13Api::createBot(const QString &app_id, const QString &botname) {
    QString fullPath = QString(_serverConfigs["createBot"][_serverIndices.value("createBot")].URL()+"/bot/{app_id}/{botname}");
    
    if (_apiKeys.contains("user_key")) {
        if (fullPath.indexOf("?") > 0)
            fullPath.append("&");
        else
            fullPath.append("?");
        fullPath.append("user_key=").append(_apiKeys.find("user_key").value());
    }
    
    
    {
        QString app_idPathParam("{");
        app_idPathParam.append("app_id").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "app_id", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"app_id"+pathSuffix : pathPrefix;
        fullPath.replace(app_idPathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(app_id)));
    }
    
    {
        QString botnamePathParam("{");
        botnamePathParam.append("botname").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "botname", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"botname"+pathSuffix : pathPrefix;
        fullPath.replace(botnamePathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(botname)));
    }
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "PUT");


    for (auto keyValueIt = _defaultHeaders.keyValueBegin(); keyValueIt != _defaultHeaders.keyValueEnd(); keyValueIt++) {
        input.headers.insert(keyValueIt->first, keyValueIt->second);
    }


    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAIPandorabotsApiSwagger13Api::createBotCallback);
    connect(this, &OAIPandorabotsApiSwagger13Api::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, this, [this]() {
        if (findChildren<OAIHttpRequestWorker*>().count() == 0) {
            Q_EMIT allPendingRequestsCompleted();
        }
    });

    worker->execute(&input);
}

void OAIPandorabotsApiSwagger13Api::createBotCallback(OAIHttpRequestWorker *worker) {
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type != QNetworkReply::NoError) {
        error_str = QString("%1, %2").arg(worker->error_str, QString(worker->response));
    }
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        Q_EMIT createBotSignal();
        Q_EMIT createBotSignalFull(worker);
    } else {

#if defined(_MSC_VER)
// For MSVC
#pragma warning(push)
#pragma warning(disable : 4996)
#elif defined(__clang__)
// For Clang
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#elif defined(__GNUC__)
// For GCC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

        Q_EMIT createBotSignalE(error_type, error_str);
        Q_EMIT createBotSignalEFull(worker, error_type, error_str);

#if defined(_MSC_VER)
#pragma warning(pop)
#elif defined(__clang__)
#pragma clang diagnostic pop
#elif defined(__GNUC__)
#pragma GCC diagnostic pop
#endif

        Q_EMIT createBotSignalError(error_type, error_str);
        Q_EMIT createBotSignalErrorFull(worker, error_type, error_str);
    }
}

void OAIPandorabotsApiSwagger13Api::debugBot(const QString &app_id, const QString &botname, const QString &input, const ::OpenAPI::OptionalParam<QString> &client_name, const ::OpenAPI::OptionalParam<QString> &sessionid, const ::OpenAPI::OptionalParam<QString> &that, const ::OpenAPI::OptionalParam<QString> &topic, const ::OpenAPI::OptionalParam<QString> &extra, const ::OpenAPI::OptionalParam<QString> &reset, const ::OpenAPI::OptionalParam<QString> &trace, const ::OpenAPI::OptionalParam<QString> &reload, const ::OpenAPI::OptionalParam<QString> &recent) {
    QString fullPath = QString(_serverConfigs["debugBot"][_serverIndices.value("debugBot")].URL()+"/talk/{app_id}/{botname}");
    
    if (_apiKeys.contains("user_key")) {
        if (fullPath.indexOf("?") > 0)
            fullPath.append("&");
        else
            fullPath.append("?");
        fullPath.append("user_key=").append(_apiKeys.find("user_key").value());
    }
    
    
    {
        QString app_idPathParam("{");
        app_idPathParam.append("app_id").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "app_id", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"app_id"+pathSuffix : pathPrefix;
        fullPath.replace(app_idPathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(app_id)));
    }
    
    {
        QString botnamePathParam("{");
        botnamePathParam.append("botname").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "botname", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"botname"+pathSuffix : pathPrefix;
        fullPath.replace(botnamePathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(botname)));
    }
    QString queryPrefix, querySuffix, queryDelimiter, queryStyle;
    
    {
        queryStyle = "";
        if (queryStyle == "")
            queryStyle = "form";
        queryPrefix = getParamStylePrefix(queryStyle);
        querySuffix = getParamStyleSuffix(queryStyle);
        queryDelimiter = getParamStyleDelimiter(queryStyle, "input", false);
        if (fullPath.indexOf("?") > 0)
            fullPath.append(queryPrefix);
        else
            fullPath.append("?");

        fullPath.append(QUrl::toPercentEncoding("input")).append(querySuffix).append(QUrl::toPercentEncoding(input));
    }
    if (client_name.hasValue())
    {
        queryStyle = "";
        if (queryStyle == "")
            queryStyle = "form";
        queryPrefix = getParamStylePrefix(queryStyle);
        querySuffix = getParamStyleSuffix(queryStyle);
        queryDelimiter = getParamStyleDelimiter(queryStyle, "client_name", false);
        if (fullPath.indexOf("?") > 0)
            fullPath.append(queryPrefix);
        else
            fullPath.append("?");

        fullPath.append(QUrl::toPercentEncoding("client_name")).append(querySuffix).append(QUrl::toPercentEncoding(client_name.stringValue()));
    }
    if (sessionid.hasValue())
    {
        queryStyle = "";
        if (queryStyle == "")
            queryStyle = "form";
        queryPrefix = getParamStylePrefix(queryStyle);
        querySuffix = getParamStyleSuffix(queryStyle);
        queryDelimiter = getParamStyleDelimiter(queryStyle, "sessionid", false);
        if (fullPath.indexOf("?") > 0)
            fullPath.append(queryPrefix);
        else
            fullPath.append("?");

        fullPath.append(QUrl::toPercentEncoding("sessionid")).append(querySuffix).append(QUrl::toPercentEncoding(sessionid.stringValue()));
    }
    if (that.hasValue())
    {
        queryStyle = "";
        if (queryStyle == "")
            queryStyle = "form";
        queryPrefix = getParamStylePrefix(queryStyle);
        querySuffix = getParamStyleSuffix(queryStyle);
        queryDelimiter = getParamStyleDelimiter(queryStyle, "that", false);
        if (fullPath.indexOf("?") > 0)
            fullPath.append(queryPrefix);
        else
            fullPath.append("?");

        fullPath.append(QUrl::toPercentEncoding("that")).append(querySuffix).append(QUrl::toPercentEncoding(that.stringValue()));
    }
    if (topic.hasValue())
    {
        queryStyle = "";
        if (queryStyle == "")
            queryStyle = "form";
        queryPrefix = getParamStylePrefix(queryStyle);
        querySuffix = getParamStyleSuffix(queryStyle);
        queryDelimiter = getParamStyleDelimiter(queryStyle, "topic", false);
        if (fullPath.indexOf("?") > 0)
            fullPath.append(queryPrefix);
        else
            fullPath.append("?");

        fullPath.append(QUrl::toPercentEncoding("topic")).append(querySuffix).append(QUrl::toPercentEncoding(topic.stringValue()));
    }
    if (extra.hasValue())
    {
        queryStyle = "";
        if (queryStyle == "")
            queryStyle = "form";
        queryPrefix = getParamStylePrefix(queryStyle);
        querySuffix = getParamStyleSuffix(queryStyle);
        queryDelimiter = getParamStyleDelimiter(queryStyle, "extra", false);
        if (fullPath.indexOf("?") > 0)
            fullPath.append(queryPrefix);
        else
            fullPath.append("?");

        fullPath.append(QUrl::toPercentEncoding("extra")).append(querySuffix).append(QUrl::toPercentEncoding(extra.stringValue()));
    }
    if (reset.hasValue())
    {
        queryStyle = "";
        if (queryStyle == "")
            queryStyle = "form";
        queryPrefix = getParamStylePrefix(queryStyle);
        querySuffix = getParamStyleSuffix(queryStyle);
        queryDelimiter = getParamStyleDelimiter(queryStyle, "reset", false);
        if (fullPath.indexOf("?") > 0)
            fullPath.append(queryPrefix);
        else
            fullPath.append("?");

        fullPath.append(QUrl::toPercentEncoding("reset")).append(querySuffix).append(QUrl::toPercentEncoding(reset.stringValue()));
    }
    if (trace.hasValue())
    {
        queryStyle = "";
        if (queryStyle == "")
            queryStyle = "form";
        queryPrefix = getParamStylePrefix(queryStyle);
        querySuffix = getParamStyleSuffix(queryStyle);
        queryDelimiter = getParamStyleDelimiter(queryStyle, "trace", false);
        if (fullPath.indexOf("?") > 0)
            fullPath.append(queryPrefix);
        else
            fullPath.append("?");

        fullPath.append(QUrl::toPercentEncoding("trace")).append(querySuffix).append(QUrl::toPercentEncoding(trace.stringValue()));
    }
    if (reload.hasValue())
    {
        queryStyle = "";
        if (queryStyle == "")
            queryStyle = "form";
        queryPrefix = getParamStylePrefix(queryStyle);
        querySuffix = getParamStyleSuffix(queryStyle);
        queryDelimiter = getParamStyleDelimiter(queryStyle, "reload", false);
        if (fullPath.indexOf("?") > 0)
            fullPath.append(queryPrefix);
        else
            fullPath.append("?");

        fullPath.append(QUrl::toPercentEncoding("reload")).append(querySuffix).append(QUrl::toPercentEncoding(reload.stringValue()));
    }
    if (recent.hasValue())
    {
        queryStyle = "";
        if (queryStyle == "")
            queryStyle = "form";
        queryPrefix = getParamStylePrefix(queryStyle);
        querySuffix = getParamStyleSuffix(queryStyle);
        queryDelimiter = getParamStyleDelimiter(queryStyle, "recent", false);
        if (fullPath.indexOf("?") > 0)
            fullPath.append(queryPrefix);
        else
            fullPath.append("?");

        fullPath.append(QUrl::toPercentEncoding("recent")).append(querySuffix).append(QUrl::toPercentEncoding(recent.stringValue()));
    }
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "POST");


    for (auto keyValueIt = _defaultHeaders.keyValueBegin(); keyValueIt != _defaultHeaders.keyValueEnd(); keyValueIt++) {
        input.headers.insert(keyValueIt->first, keyValueIt->second);
    }


    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAIPandorabotsApiSwagger13Api::debugBotCallback);
    connect(this, &OAIPandorabotsApiSwagger13Api::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, this, [this]() {
        if (findChildren<OAIHttpRequestWorker*>().count() == 0) {
            Q_EMIT allPendingRequestsCompleted();
        }
    });

    worker->execute(&input);
}

void OAIPandorabotsApiSwagger13Api::debugBotCallback(OAIHttpRequestWorker *worker) {
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type != QNetworkReply::NoError) {
        error_str = QString("%1, %2").arg(worker->error_str, QString(worker->response));
    }
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        Q_EMIT debugBotSignal();
        Q_EMIT debugBotSignalFull(worker);
    } else {

#if defined(_MSC_VER)
// For MSVC
#pragma warning(push)
#pragma warning(disable : 4996)
#elif defined(__clang__)
// For Clang
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#elif defined(__GNUC__)
// For GCC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

        Q_EMIT debugBotSignalE(error_type, error_str);
        Q_EMIT debugBotSignalEFull(worker, error_type, error_str);

#if defined(_MSC_VER)
#pragma warning(pop)
#elif defined(__clang__)
#pragma clang diagnostic pop
#elif defined(__GNUC__)
#pragma GCC diagnostic pop
#endif

        Q_EMIT debugBotSignalError(error_type, error_str);
        Q_EMIT debugBotSignalErrorFull(worker, error_type, error_str);
    }
}

void OAIPandorabotsApiSwagger13Api::deleteBot(const QString &app_id, const QString &botname) {
    QString fullPath = QString(_serverConfigs["deleteBot"][_serverIndices.value("deleteBot")].URL()+"/bot/{app_id}/{botname}");
    
    if (_apiKeys.contains("user_key")) {
        if (fullPath.indexOf("?") > 0)
            fullPath.append("&");
        else
            fullPath.append("?");
        fullPath.append("user_key=").append(_apiKeys.find("user_key").value());
    }
    
    
    {
        QString app_idPathParam("{");
        app_idPathParam.append("app_id").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "app_id", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"app_id"+pathSuffix : pathPrefix;
        fullPath.replace(app_idPathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(app_id)));
    }
    
    {
        QString botnamePathParam("{");
        botnamePathParam.append("botname").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "botname", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"botname"+pathSuffix : pathPrefix;
        fullPath.replace(botnamePathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(botname)));
    }
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "DELETE");


    for (auto keyValueIt = _defaultHeaders.keyValueBegin(); keyValueIt != _defaultHeaders.keyValueEnd(); keyValueIt++) {
        input.headers.insert(keyValueIt->first, keyValueIt->second);
    }


    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAIPandorabotsApiSwagger13Api::deleteBotCallback);
    connect(this, &OAIPandorabotsApiSwagger13Api::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, this, [this]() {
        if (findChildren<OAIHttpRequestWorker*>().count() == 0) {
            Q_EMIT allPendingRequestsCompleted();
        }
    });

    worker->execute(&input);
}

void OAIPandorabotsApiSwagger13Api::deleteBotCallback(OAIHttpRequestWorker *worker) {
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type != QNetworkReply::NoError) {
        error_str = QString("%1, %2").arg(worker->error_str, QString(worker->response));
    }
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        Q_EMIT deleteBotSignal();
        Q_EMIT deleteBotSignalFull(worker);
    } else {

#if defined(_MSC_VER)
// For MSVC
#pragma warning(push)
#pragma warning(disable : 4996)
#elif defined(__clang__)
// For Clang
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#elif defined(__GNUC__)
// For GCC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

        Q_EMIT deleteBotSignalE(error_type, error_str);
        Q_EMIT deleteBotSignalEFull(worker, error_type, error_str);

#if defined(_MSC_VER)
#pragma warning(pop)
#elif defined(__clang__)
#pragma clang diagnostic pop
#elif defined(__GNUC__)
#pragma GCC diagnostic pop
#endif

        Q_EMIT deleteBotSignalError(error_type, error_str);
        Q_EMIT deleteBotSignalErrorFull(worker, error_type, error_str);
    }
}

void OAIPandorabotsApiSwagger13Api::deleteBotFile1(const QString &app_id, const QString &botname, const QString &file_kind, const QString &filename) {
    QString fullPath = QString(_serverConfigs["deleteBotFile1"][_serverIndices.value("deleteBotFile1")].URL()+"/bot/{app_id}/{botname}/{file-kind}/{filename}");
    
    if (_apiKeys.contains("user_key")) {
        if (fullPath.indexOf("?") > 0)
            fullPath.append("&");
        else
            fullPath.append("?");
        fullPath.append("user_key=").append(_apiKeys.find("user_key").value());
    }
    
    
    {
        QString app_idPathParam("{");
        app_idPathParam.append("app_id").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "app_id", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"app_id"+pathSuffix : pathPrefix;
        fullPath.replace(app_idPathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(app_id)));
    }
    
    {
        QString botnamePathParam("{");
        botnamePathParam.append("botname").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "botname", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"botname"+pathSuffix : pathPrefix;
        fullPath.replace(botnamePathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(botname)));
    }
    
    {
        QString file_kindPathParam("{");
        file_kindPathParam.append("file-kind").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "file-kind", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"file-kind"+pathSuffix : pathPrefix;
        fullPath.replace(file_kindPathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(file_kind)));
    }
    
    {
        QString filenamePathParam("{");
        filenamePathParam.append("filename").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "filename", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"filename"+pathSuffix : pathPrefix;
        fullPath.replace(filenamePathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(filename)));
    }
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "DELETE");


    for (auto keyValueIt = _defaultHeaders.keyValueBegin(); keyValueIt != _defaultHeaders.keyValueEnd(); keyValueIt++) {
        input.headers.insert(keyValueIt->first, keyValueIt->second);
    }


    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAIPandorabotsApiSwagger13Api::deleteBotFile1Callback);
    connect(this, &OAIPandorabotsApiSwagger13Api::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, this, [this]() {
        if (findChildren<OAIHttpRequestWorker*>().count() == 0) {
            Q_EMIT allPendingRequestsCompleted();
        }
    });

    worker->execute(&input);
}

void OAIPandorabotsApiSwagger13Api::deleteBotFile1Callback(OAIHttpRequestWorker *worker) {
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type != QNetworkReply::NoError) {
        error_str = QString("%1, %2").arg(worker->error_str, QString(worker->response));
    }
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        Q_EMIT deleteBotFile1Signal();
        Q_EMIT deleteBotFile1SignalFull(worker);
    } else {

#if defined(_MSC_VER)
// For MSVC
#pragma warning(push)
#pragma warning(disable : 4996)
#elif defined(__clang__)
// For Clang
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#elif defined(__GNUC__)
// For GCC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

        Q_EMIT deleteBotFile1SignalE(error_type, error_str);
        Q_EMIT deleteBotFile1SignalEFull(worker, error_type, error_str);

#if defined(_MSC_VER)
#pragma warning(pop)
#elif defined(__clang__)
#pragma clang diagnostic pop
#elif defined(__GNUC__)
#pragma GCC diagnostic pop
#endif

        Q_EMIT deleteBotFile1SignalError(error_type, error_str);
        Q_EMIT deleteBotFile1SignalErrorFull(worker, error_type, error_str);
    }
}

void OAIPandorabotsApiSwagger13Api::deleteBotFile2(const QString &app_id, const QString &botname, const QString &file_kind) {
    QString fullPath = QString(_serverConfigs["deleteBotFile2"][_serverIndices.value("deleteBotFile2")].URL()+"/bot/{app_id}/{botname}/{file-kind}");
    
    if (_apiKeys.contains("user_key")) {
        if (fullPath.indexOf("?") > 0)
            fullPath.append("&");
        else
            fullPath.append("?");
        fullPath.append("user_key=").append(_apiKeys.find("user_key").value());
    }
    
    
    {
        QString app_idPathParam("{");
        app_idPathParam.append("app_id").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "app_id", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"app_id"+pathSuffix : pathPrefix;
        fullPath.replace(app_idPathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(app_id)));
    }
    
    {
        QString botnamePathParam("{");
        botnamePathParam.append("botname").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "botname", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"botname"+pathSuffix : pathPrefix;
        fullPath.replace(botnamePathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(botname)));
    }
    
    {
        QString file_kindPathParam("{");
        file_kindPathParam.append("file-kind").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "file-kind", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"file-kind"+pathSuffix : pathPrefix;
        fullPath.replace(file_kindPathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(file_kind)));
    }
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "DELETE");


    for (auto keyValueIt = _defaultHeaders.keyValueBegin(); keyValueIt != _defaultHeaders.keyValueEnd(); keyValueIt++) {
        input.headers.insert(keyValueIt->first, keyValueIt->second);
    }


    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAIPandorabotsApiSwagger13Api::deleteBotFile2Callback);
    connect(this, &OAIPandorabotsApiSwagger13Api::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, this, [this]() {
        if (findChildren<OAIHttpRequestWorker*>().count() == 0) {
            Q_EMIT allPendingRequestsCompleted();
        }
    });

    worker->execute(&input);
}

void OAIPandorabotsApiSwagger13Api::deleteBotFile2Callback(OAIHttpRequestWorker *worker) {
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type != QNetworkReply::NoError) {
        error_str = QString("%1, %2").arg(worker->error_str, QString(worker->response));
    }
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        Q_EMIT deleteBotFile2Signal();
        Q_EMIT deleteBotFile2SignalFull(worker);
    } else {

#if defined(_MSC_VER)
// For MSVC
#pragma warning(push)
#pragma warning(disable : 4996)
#elif defined(__clang__)
// For Clang
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#elif defined(__GNUC__)
// For GCC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

        Q_EMIT deleteBotFile2SignalE(error_type, error_str);
        Q_EMIT deleteBotFile2SignalEFull(worker, error_type, error_str);

#if defined(_MSC_VER)
#pragma warning(pop)
#elif defined(__clang__)
#pragma clang diagnostic pop
#elif defined(__GNUC__)
#pragma GCC diagnostic pop
#endif

        Q_EMIT deleteBotFile2SignalError(error_type, error_str);
        Q_EMIT deleteBotFile2SignalErrorFull(worker, error_type, error_str);
    }
}

void OAIPandorabotsApiSwagger13Api::getBotFile1(const QString &app_id, const QString &botname, const QString &file_kind, const QString &filename) {
    QString fullPath = QString(_serverConfigs["getBotFile1"][_serverIndices.value("getBotFile1")].URL()+"/bot/{app_id}/{botname}/{file-kind}/{filename}");
    
    if (_apiKeys.contains("user_key")) {
        if (fullPath.indexOf("?") > 0)
            fullPath.append("&");
        else
            fullPath.append("?");
        fullPath.append("user_key=").append(_apiKeys.find("user_key").value());
    }
    
    
    {
        QString app_idPathParam("{");
        app_idPathParam.append("app_id").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "app_id", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"app_id"+pathSuffix : pathPrefix;
        fullPath.replace(app_idPathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(app_id)));
    }
    
    {
        QString botnamePathParam("{");
        botnamePathParam.append("botname").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "botname", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"botname"+pathSuffix : pathPrefix;
        fullPath.replace(botnamePathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(botname)));
    }
    
    {
        QString file_kindPathParam("{");
        file_kindPathParam.append("file-kind").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "file-kind", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"file-kind"+pathSuffix : pathPrefix;
        fullPath.replace(file_kindPathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(file_kind)));
    }
    
    {
        QString filenamePathParam("{");
        filenamePathParam.append("filename").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "filename", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"filename"+pathSuffix : pathPrefix;
        fullPath.replace(filenamePathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(filename)));
    }
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "GET");


    for (auto keyValueIt = _defaultHeaders.keyValueBegin(); keyValueIt != _defaultHeaders.keyValueEnd(); keyValueIt++) {
        input.headers.insert(keyValueIt->first, keyValueIt->second);
    }


    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAIPandorabotsApiSwagger13Api::getBotFile1Callback);
    connect(this, &OAIPandorabotsApiSwagger13Api::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, this, [this]() {
        if (findChildren<OAIHttpRequestWorker*>().count() == 0) {
            Q_EMIT allPendingRequestsCompleted();
        }
    });

    worker->execute(&input);
}

void OAIPandorabotsApiSwagger13Api::getBotFile1Callback(OAIHttpRequestWorker *worker) {
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type != QNetworkReply::NoError) {
        error_str = QString("%1, %2").arg(worker->error_str, QString(worker->response));
    }
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        Q_EMIT getBotFile1Signal();
        Q_EMIT getBotFile1SignalFull(worker);
    } else {

#if defined(_MSC_VER)
// For MSVC
#pragma warning(push)
#pragma warning(disable : 4996)
#elif defined(__clang__)
// For Clang
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#elif defined(__GNUC__)
// For GCC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

        Q_EMIT getBotFile1SignalE(error_type, error_str);
        Q_EMIT getBotFile1SignalEFull(worker, error_type, error_str);

#if defined(_MSC_VER)
#pragma warning(pop)
#elif defined(__clang__)
#pragma clang diagnostic pop
#elif defined(__GNUC__)
#pragma GCC diagnostic pop
#endif

        Q_EMIT getBotFile1SignalError(error_type, error_str);
        Q_EMIT getBotFile1SignalErrorFull(worker, error_type, error_str);
    }
}

void OAIPandorabotsApiSwagger13Api::getBotFile2(const QString &app_id, const QString &botname, const QString &file_kind) {
    QString fullPath = QString(_serverConfigs["getBotFile2"][_serverIndices.value("getBotFile2")].URL()+"/bot/{app_id}/{botname}/{file-kind}");
    
    if (_apiKeys.contains("user_key")) {
        if (fullPath.indexOf("?") > 0)
            fullPath.append("&");
        else
            fullPath.append("?");
        fullPath.append("user_key=").append(_apiKeys.find("user_key").value());
    }
    
    
    {
        QString app_idPathParam("{");
        app_idPathParam.append("app_id").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "app_id", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"app_id"+pathSuffix : pathPrefix;
        fullPath.replace(app_idPathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(app_id)));
    }
    
    {
        QString botnamePathParam("{");
        botnamePathParam.append("botname").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "botname", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"botname"+pathSuffix : pathPrefix;
        fullPath.replace(botnamePathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(botname)));
    }
    
    {
        QString file_kindPathParam("{");
        file_kindPathParam.append("file-kind").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "file-kind", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"file-kind"+pathSuffix : pathPrefix;
        fullPath.replace(file_kindPathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(file_kind)));
    }
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "GET");


    for (auto keyValueIt = _defaultHeaders.keyValueBegin(); keyValueIt != _defaultHeaders.keyValueEnd(); keyValueIt++) {
        input.headers.insert(keyValueIt->first, keyValueIt->second);
    }


    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAIPandorabotsApiSwagger13Api::getBotFile2Callback);
    connect(this, &OAIPandorabotsApiSwagger13Api::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, this, [this]() {
        if (findChildren<OAIHttpRequestWorker*>().count() == 0) {
            Q_EMIT allPendingRequestsCompleted();
        }
    });

    worker->execute(&input);
}

void OAIPandorabotsApiSwagger13Api::getBotFile2Callback(OAIHttpRequestWorker *worker) {
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type != QNetworkReply::NoError) {
        error_str = QString("%1, %2").arg(worker->error_str, QString(worker->response));
    }
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        Q_EMIT getBotFile2Signal();
        Q_EMIT getBotFile2SignalFull(worker);
    } else {

#if defined(_MSC_VER)
// For MSVC
#pragma warning(push)
#pragma warning(disable : 4996)
#elif defined(__clang__)
// For Clang
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#elif defined(__GNUC__)
// For GCC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

        Q_EMIT getBotFile2SignalE(error_type, error_str);
        Q_EMIT getBotFile2SignalEFull(worker, error_type, error_str);

#if defined(_MSC_VER)
#pragma warning(pop)
#elif defined(__clang__)
#pragma clang diagnostic pop
#elif defined(__GNUC__)
#pragma GCC diagnostic pop
#endif

        Q_EMIT getBotFile2SignalError(error_type, error_str);
        Q_EMIT getBotFile2SignalErrorFull(worker, error_type, error_str);
    }
}

void OAIPandorabotsApiSwagger13Api::listBotFiles(const QString &app_id, const QString &botname, const ::OpenAPI::OptionalParam<QString> &r_return) {
    QString fullPath = QString(_serverConfigs["listBotFiles"][_serverIndices.value("listBotFiles")].URL()+"/bot/{app_id}/{botname}");
    
    if (_apiKeys.contains("user_key")) {
        if (fullPath.indexOf("?") > 0)
            fullPath.append("&");
        else
            fullPath.append("?");
        fullPath.append("user_key=").append(_apiKeys.find("user_key").value());
    }
    
    
    {
        QString app_idPathParam("{");
        app_idPathParam.append("app_id").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "app_id", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"app_id"+pathSuffix : pathPrefix;
        fullPath.replace(app_idPathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(app_id)));
    }
    
    {
        QString botnamePathParam("{");
        botnamePathParam.append("botname").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "botname", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"botname"+pathSuffix : pathPrefix;
        fullPath.replace(botnamePathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(botname)));
    }
    QString queryPrefix, querySuffix, queryDelimiter, queryStyle;
    if (r_return.hasValue())
    {
        queryStyle = "";
        if (queryStyle == "")
            queryStyle = "form";
        queryPrefix = getParamStylePrefix(queryStyle);
        querySuffix = getParamStyleSuffix(queryStyle);
        queryDelimiter = getParamStyleDelimiter(queryStyle, "return", false);
        if (fullPath.indexOf("?") > 0)
            fullPath.append(queryPrefix);
        else
            fullPath.append("?");

        fullPath.append(QUrl::toPercentEncoding("return")).append(querySuffix).append(QUrl::toPercentEncoding(r_return.stringValue()));
    }
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "GET");


    for (auto keyValueIt = _defaultHeaders.keyValueBegin(); keyValueIt != _defaultHeaders.keyValueEnd(); keyValueIt++) {
        input.headers.insert(keyValueIt->first, keyValueIt->second);
    }


    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAIPandorabotsApiSwagger13Api::listBotFilesCallback);
    connect(this, &OAIPandorabotsApiSwagger13Api::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, this, [this]() {
        if (findChildren<OAIHttpRequestWorker*>().count() == 0) {
            Q_EMIT allPendingRequestsCompleted();
        }
    });

    worker->execute(&input);
}

void OAIPandorabotsApiSwagger13Api::listBotFilesCallback(OAIHttpRequestWorker *worker) {
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type != QNetworkReply::NoError) {
        error_str = QString("%1, %2").arg(worker->error_str, QString(worker->response));
    }
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        Q_EMIT listBotFilesSignal();
        Q_EMIT listBotFilesSignalFull(worker);
    } else {

#if defined(_MSC_VER)
// For MSVC
#pragma warning(push)
#pragma warning(disable : 4996)
#elif defined(__clang__)
// For Clang
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#elif defined(__GNUC__)
// For GCC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

        Q_EMIT listBotFilesSignalE(error_type, error_str);
        Q_EMIT listBotFilesSignalEFull(worker, error_type, error_str);

#if defined(_MSC_VER)
#pragma warning(pop)
#elif defined(__clang__)
#pragma clang diagnostic pop
#elif defined(__GNUC__)
#pragma GCC diagnostic pop
#endif

        Q_EMIT listBotFilesSignalError(error_type, error_str);
        Q_EMIT listBotFilesSignalErrorFull(worker, error_type, error_str);
    }
}

void OAIPandorabotsApiSwagger13Api::listBots(const QString &app_id) {
    QString fullPath = QString(_serverConfigs["listBots"][_serverIndices.value("listBots")].URL()+"/bot/{app_id}");
    
    if (_apiKeys.contains("user_key")) {
        if (fullPath.indexOf("?") > 0)
            fullPath.append("&");
        else
            fullPath.append("?");
        fullPath.append("user_key=").append(_apiKeys.find("user_key").value());
    }
    
    
    {
        QString app_idPathParam("{");
        app_idPathParam.append("app_id").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "app_id", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"app_id"+pathSuffix : pathPrefix;
        fullPath.replace(app_idPathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(app_id)));
    }
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "GET");


    for (auto keyValueIt = _defaultHeaders.keyValueBegin(); keyValueIt != _defaultHeaders.keyValueEnd(); keyValueIt++) {
        input.headers.insert(keyValueIt->first, keyValueIt->second);
    }


    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAIPandorabotsApiSwagger13Api::listBotsCallback);
    connect(this, &OAIPandorabotsApiSwagger13Api::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, this, [this]() {
        if (findChildren<OAIHttpRequestWorker*>().count() == 0) {
            Q_EMIT allPendingRequestsCompleted();
        }
    });

    worker->execute(&input);
}

void OAIPandorabotsApiSwagger13Api::listBotsCallback(OAIHttpRequestWorker *worker) {
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type != QNetworkReply::NoError) {
        error_str = QString("%1, %2").arg(worker->error_str, QString(worker->response));
    }
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        Q_EMIT listBotsSignal();
        Q_EMIT listBotsSignalFull(worker);
    } else {

#if defined(_MSC_VER)
// For MSVC
#pragma warning(push)
#pragma warning(disable : 4996)
#elif defined(__clang__)
// For Clang
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#elif defined(__GNUC__)
// For GCC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

        Q_EMIT listBotsSignalE(error_type, error_str);
        Q_EMIT listBotsSignalEFull(worker, error_type, error_str);

#if defined(_MSC_VER)
#pragma warning(pop)
#elif defined(__clang__)
#pragma clang diagnostic pop
#elif defined(__GNUC__)
#pragma GCC diagnostic pop
#endif

        Q_EMIT listBotsSignalError(error_type, error_str);
        Q_EMIT listBotsSignalErrorFull(worker, error_type, error_str);
    }
}

void OAIPandorabotsApiSwagger13Api::uploadFile1(const QString &app_id, const QString &botname, const QString &file_kind, const QString &filename, const QString &content) {
    QString fullPath = QString(_serverConfigs["uploadFile1"][_serverIndices.value("uploadFile1")].URL()+"/bot/{app_id}/{botname}/{file-kind}/{filename}");
    
    if (_apiKeys.contains("user_key")) {
        if (fullPath.indexOf("?") > 0)
            fullPath.append("&");
        else
            fullPath.append("?");
        fullPath.append("user_key=").append(_apiKeys.find("user_key").value());
    }
    
    
    {
        QString app_idPathParam("{");
        app_idPathParam.append("app_id").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "app_id", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"app_id"+pathSuffix : pathPrefix;
        fullPath.replace(app_idPathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(app_id)));
    }
    
    {
        QString botnamePathParam("{");
        botnamePathParam.append("botname").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "botname", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"botname"+pathSuffix : pathPrefix;
        fullPath.replace(botnamePathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(botname)));
    }
    
    {
        QString file_kindPathParam("{");
        file_kindPathParam.append("file-kind").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "file-kind", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"file-kind"+pathSuffix : pathPrefix;
        fullPath.replace(file_kindPathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(file_kind)));
    }
    
    {
        QString filenamePathParam("{");
        filenamePathParam.append("filename").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "filename", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"filename"+pathSuffix : pathPrefix;
        fullPath.replace(filenamePathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(filename)));
    }
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "PUT");

    {

        QByteArray output = content.toUtf8();
        input.request_body.append(output);
    }
    for (auto keyValueIt = _defaultHeaders.keyValueBegin(); keyValueIt != _defaultHeaders.keyValueEnd(); keyValueIt++) {
        input.headers.insert(keyValueIt->first, keyValueIt->second);
    }


    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAIPandorabotsApiSwagger13Api::uploadFile1Callback);
    connect(this, &OAIPandorabotsApiSwagger13Api::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, this, [this]() {
        if (findChildren<OAIHttpRequestWorker*>().count() == 0) {
            Q_EMIT allPendingRequestsCompleted();
        }
    });

    worker->execute(&input);
}

void OAIPandorabotsApiSwagger13Api::uploadFile1Callback(OAIHttpRequestWorker *worker) {
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type != QNetworkReply::NoError) {
        error_str = QString("%1, %2").arg(worker->error_str, QString(worker->response));
    }
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        Q_EMIT uploadFile1Signal();
        Q_EMIT uploadFile1SignalFull(worker);
    } else {

#if defined(_MSC_VER)
// For MSVC
#pragma warning(push)
#pragma warning(disable : 4996)
#elif defined(__clang__)
// For Clang
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#elif defined(__GNUC__)
// For GCC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

        Q_EMIT uploadFile1SignalE(error_type, error_str);
        Q_EMIT uploadFile1SignalEFull(worker, error_type, error_str);

#if defined(_MSC_VER)
#pragma warning(pop)
#elif defined(__clang__)
#pragma clang diagnostic pop
#elif defined(__GNUC__)
#pragma GCC diagnostic pop
#endif

        Q_EMIT uploadFile1SignalError(error_type, error_str);
        Q_EMIT uploadFile1SignalErrorFull(worker, error_type, error_str);
    }
}

void OAIPandorabotsApiSwagger13Api::uploadFile2(const QString &app_id, const QString &botname, const QString &file_kind, const QString &content) {
    QString fullPath = QString(_serverConfigs["uploadFile2"][_serverIndices.value("uploadFile2")].URL()+"/bot/{app_id}/{botname}/{file-kind}");
    
    if (_apiKeys.contains("user_key")) {
        if (fullPath.indexOf("?") > 0)
            fullPath.append("&");
        else
            fullPath.append("?");
        fullPath.append("user_key=").append(_apiKeys.find("user_key").value());
    }
    
    
    {
        QString app_idPathParam("{");
        app_idPathParam.append("app_id").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "app_id", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"app_id"+pathSuffix : pathPrefix;
        fullPath.replace(app_idPathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(app_id)));
    }
    
    {
        QString botnamePathParam("{");
        botnamePathParam.append("botname").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "botname", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"botname"+pathSuffix : pathPrefix;
        fullPath.replace(botnamePathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(botname)));
    }
    
    {
        QString file_kindPathParam("{");
        file_kindPathParam.append("file-kind").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "file-kind", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"file-kind"+pathSuffix : pathPrefix;
        fullPath.replace(file_kindPathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(file_kind)));
    }
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "PUT");

    {

        QByteArray output = content.toUtf8();
        input.request_body.append(output);
    }
    for (auto keyValueIt = _defaultHeaders.keyValueBegin(); keyValueIt != _defaultHeaders.keyValueEnd(); keyValueIt++) {
        input.headers.insert(keyValueIt->first, keyValueIt->second);
    }


    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAIPandorabotsApiSwagger13Api::uploadFile2Callback);
    connect(this, &OAIPandorabotsApiSwagger13Api::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, this, [this]() {
        if (findChildren<OAIHttpRequestWorker*>().count() == 0) {
            Q_EMIT allPendingRequestsCompleted();
        }
    });

    worker->execute(&input);
}

void OAIPandorabotsApiSwagger13Api::uploadFile2Callback(OAIHttpRequestWorker *worker) {
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type != QNetworkReply::NoError) {
        error_str = QString("%1, %2").arg(worker->error_str, QString(worker->response));
    }
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        Q_EMIT uploadFile2Signal();
        Q_EMIT uploadFile2SignalFull(worker);
    } else {

#if defined(_MSC_VER)
// For MSVC
#pragma warning(push)
#pragma warning(disable : 4996)
#elif defined(__clang__)
// For Clang
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#elif defined(__GNUC__)
// For GCC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

        Q_EMIT uploadFile2SignalE(error_type, error_str);
        Q_EMIT uploadFile2SignalEFull(worker, error_type, error_str);

#if defined(_MSC_VER)
#pragma warning(pop)
#elif defined(__clang__)
#pragma clang diagnostic pop
#elif defined(__GNUC__)
#pragma GCC diagnostic pop
#endif

        Q_EMIT uploadFile2SignalError(error_type, error_str);
        Q_EMIT uploadFile2SignalErrorFull(worker, error_type, error_str);
    }
}

void OAIPandorabotsApiSwagger13Api::tokenAvailable(){

    oauthToken token;
    switch (_OauthMethod) {
    case 1: //implicit flow
        token = _implicitFlow.getToken(_latestScope.join(" "));
        if(token.isValid()){
            _latestInput.headers.insert("Authorization", "Bearer " + token.getToken());
            _latestWorker->execute(&_latestInput);
        }else{
            _implicitFlow.removeToken(_latestScope.join(" "));
            qDebug() << "Could not retrieve a valid token";
        }
        break;
    case 2: //authorization flow
        token = _authFlow.getToken(_latestScope.join(" "));
        if(token.isValid()){
            _latestInput.headers.insert("Authorization", "Bearer " + token.getToken());
            _latestWorker->execute(&_latestInput);
        }else{
            _authFlow.removeToken(_latestScope.join(" "));
            qDebug() << "Could not retrieve a valid token";
        }
        break;
    case 3: //client credentials flow
        token = _credentialFlow.getToken(_latestScope.join(" "));
        if(token.isValid()){
            _latestInput.headers.insert("Authorization", "Bearer " + token.getToken());
            _latestWorker->execute(&_latestInput);
        }else{
            _credentialFlow.removeToken(_latestScope.join(" "));
            qDebug() << "Could not retrieve a valid token";
        }
        break;
    case 4: //resource owner password flow
        token = _passwordFlow.getToken(_latestScope.join(" "));
        if(token.isValid()){
            _latestInput.headers.insert("Authorization", "Bearer " + token.getToken());
            _latestWorker->execute(&_latestInput);
        }else{
            _credentialFlow.removeToken(_latestScope.join(" "));
            qDebug() << "Could not retrieve a valid token";
        }
        break;
    default:
        qDebug() << "No Oauth method set!";
        break;
    }
}
} // namespace OpenAPI
