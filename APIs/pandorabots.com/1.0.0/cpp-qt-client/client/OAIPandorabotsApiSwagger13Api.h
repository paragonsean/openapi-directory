/**
 * Pandorabots AIaaS
 * AIaaS provides API access to our bot hosting platform and SDKs, allowing developers to easily integrate conversational interfaces into applications.
 *
 * The version of the OpenAPI document: 1.0.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#ifndef OAI_OAIPandorabotsApiSwagger13Api_H
#define OAI_OAIPandorabotsApiSwagger13Api_H

#include "OAIHelpers.h"
#include "OAIHttpRequest.h"
#include "OAIServerConfiguration.h"
#include "OAIOauth.h"

#include <QString>

#include <QObject>
#include <QByteArray>
#include <QStringList>
#include <QList>
#include <QNetworkAccessManager>

namespace OpenAPI {

class OAIPandorabotsApiSwagger13Api : public QObject {
    Q_OBJECT

public:
    OAIPandorabotsApiSwagger13Api(const int timeOut = 0);
    ~OAIPandorabotsApiSwagger13Api();

    void initializeServerConfigs();
    int setDefaultServerValue(int serverIndex,const QString &operation, const QString &variable,const QString &val);
    void setServerIndex(const QString &operation, int serverIndex);
    void setApiKey(const QString &apiKeyName, const QString &apiKey);
    void setBearerToken(const QString &token);
    void setUsername(const QString &username);
    void setPassword(const QString &password);
    void setTimeOut(const int timeOut);
    void setWorkingDirectory(const QString &path);
    void setNetworkAccessManager(QNetworkAccessManager* manager);
    int addServerConfiguration(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables = QMap<QString, OAIServerVariable>());
    void setNewServerForAllOperations(const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void setNewServer(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void addHeaders(const QString &key, const QString &value);
    void enableRequestCompression();
    void enableResponseCompression();
    void abortRequests();
    QString getParamStylePrefix(const QString &style);
    QString getParamStyleSuffix(const QString &style);
    QString getParamStyleDelimiter(const QString &style, const QString &name, bool isExplode);

    /**
    * @param[in]  app_id QString [required]
    * @param[in]  botname QString [required]
    * @param[in]  input QString [required]
    * @param[in]  client_name QString [optional]
    * @param[in]  sessionid QString [optional]
    * @param[in]  recent QString [optional]
    */
    virtual void atalkBot(const QString &app_id, const QString &botname, const QString &input, const ::OpenAPI::OptionalParam<QString> &client_name = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &sessionid = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &recent = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  app_id QString [required]
    * @param[in]  botname QString [required]
    */
    virtual void compileBot(const QString &app_id, const QString &botname);

    /**
    * @param[in]  app_id QString [required]
    * @param[in]  botname QString [required]
    */
    virtual void createBot(const QString &app_id, const QString &botname);

    /**
    * @param[in]  app_id QString [required]
    * @param[in]  botname QString [required]
    * @param[in]  input QString [required]
    * @param[in]  client_name QString [optional]
    * @param[in]  sessionid QString [optional]
    * @param[in]  that QString [optional]
    * @param[in]  topic QString [optional]
    * @param[in]  extra QString [optional]
    * @param[in]  reset QString [optional]
    * @param[in]  trace QString [optional]
    * @param[in]  reload QString [optional]
    * @param[in]  recent QString [optional]
    */
    virtual void debugBot(const QString &app_id, const QString &botname, const QString &input, const ::OpenAPI::OptionalParam<QString> &client_name = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &sessionid = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &that = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &topic = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &extra = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &reset = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &trace = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &reload = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &recent = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  app_id QString [required]
    * @param[in]  botname QString [required]
    */
    virtual void deleteBot(const QString &app_id, const QString &botname);

    /**
    * @param[in]  app_id QString [required]
    * @param[in]  botname QString [required]
    * @param[in]  file_kind QString [required]
    * @param[in]  filename QString [required]
    */
    virtual void deleteBotFile1(const QString &app_id, const QString &botname, const QString &file_kind, const QString &filename);

    /**
    * @param[in]  app_id QString [required]
    * @param[in]  botname QString [required]
    * @param[in]  file_kind QString [required]
    */
    virtual void deleteBotFile2(const QString &app_id, const QString &botname, const QString &file_kind);

    /**
    * @param[in]  app_id QString [required]
    * @param[in]  botname QString [required]
    * @param[in]  file_kind QString [required]
    * @param[in]  filename QString [required]
    */
    virtual void getBotFile1(const QString &app_id, const QString &botname, const QString &file_kind, const QString &filename);

    /**
    * @param[in]  app_id QString [required]
    * @param[in]  botname QString [required]
    * @param[in]  file_kind QString [required]
    */
    virtual void getBotFile2(const QString &app_id, const QString &botname, const QString &file_kind);

    /**
    * @param[in]  app_id QString [required]
    * @param[in]  botname QString [required]
    * @param[in]  r_return QString [optional]
    */
    virtual void listBotFiles(const QString &app_id, const QString &botname, const ::OpenAPI::OptionalParam<QString> &r_return = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  app_id QString [required]
    */
    virtual void listBots(const QString &app_id);

    /**
    * @param[in]  app_id QString [required]
    * @param[in]  botname QString [required]
    * @param[in]  file_kind QString [required]
    * @param[in]  filename QString [required]
    * @param[in]  content QString [required]
    */
    virtual void uploadFile1(const QString &app_id, const QString &botname, const QString &file_kind, const QString &filename, const QString &content);

    /**
    * @param[in]  app_id QString [required]
    * @param[in]  botname QString [required]
    * @param[in]  file_kind QString [required]
    * @param[in]  content QString [required]
    */
    virtual void uploadFile2(const QString &app_id, const QString &botname, const QString &file_kind, const QString &content);


private:
    QMap<QString,int> _serverIndices;
    QMap<QString,QList<OAIServerConfiguration>> _serverConfigs;
    QMap<QString, QString> _apiKeys;
    QString _bearerToken;
    QString _username;
    QString _password;
    int _timeOut;
    QString _workingDirectory;
    QNetworkAccessManager* _manager;
    QMap<QString, QString> _defaultHeaders;
    bool _isResponseCompressionEnabled;
    bool _isRequestCompressionEnabled;
    OAIHttpRequestInput _latestInput;
    OAIHttpRequestWorker *_latestWorker;
    QStringList _latestScope;
    OauthCode _authFlow;
    OauthImplicit _implicitFlow;
    OauthCredentials _credentialFlow;
    OauthPassword _passwordFlow;
    int _OauthMethod = 0;

    void atalkBotCallback(OAIHttpRequestWorker *worker);
    void compileBotCallback(OAIHttpRequestWorker *worker);
    void createBotCallback(OAIHttpRequestWorker *worker);
    void debugBotCallback(OAIHttpRequestWorker *worker);
    void deleteBotCallback(OAIHttpRequestWorker *worker);
    void deleteBotFile1Callback(OAIHttpRequestWorker *worker);
    void deleteBotFile2Callback(OAIHttpRequestWorker *worker);
    void getBotFile1Callback(OAIHttpRequestWorker *worker);
    void getBotFile2Callback(OAIHttpRequestWorker *worker);
    void listBotFilesCallback(OAIHttpRequestWorker *worker);
    void listBotsCallback(OAIHttpRequestWorker *worker);
    void uploadFile1Callback(OAIHttpRequestWorker *worker);
    void uploadFile2Callback(OAIHttpRequestWorker *worker);

Q_SIGNALS:

    void atalkBotSignal();
    void compileBotSignal();
    void createBotSignal();
    void debugBotSignal();
    void deleteBotSignal();
    void deleteBotFile1Signal();
    void deleteBotFile2Signal();
    void getBotFile1Signal();
    void getBotFile2Signal();
    void listBotFilesSignal();
    void listBotsSignal();
    void uploadFile1Signal();
    void uploadFile2Signal();


    void atalkBotSignalFull(OAIHttpRequestWorker *worker);
    void compileBotSignalFull(OAIHttpRequestWorker *worker);
    void createBotSignalFull(OAIHttpRequestWorker *worker);
    void debugBotSignalFull(OAIHttpRequestWorker *worker);
    void deleteBotSignalFull(OAIHttpRequestWorker *worker);
    void deleteBotFile1SignalFull(OAIHttpRequestWorker *worker);
    void deleteBotFile2SignalFull(OAIHttpRequestWorker *worker);
    void getBotFile1SignalFull(OAIHttpRequestWorker *worker);
    void getBotFile2SignalFull(OAIHttpRequestWorker *worker);
    void listBotFilesSignalFull(OAIHttpRequestWorker *worker);
    void listBotsSignalFull(OAIHttpRequestWorker *worker);
    void uploadFile1SignalFull(OAIHttpRequestWorker *worker);
    void uploadFile2SignalFull(OAIHttpRequestWorker *worker);

    Q_DECL_DEPRECATED_X("Use atalkBotSignalError() instead")
    void atalkBotSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void atalkBotSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use compileBotSignalError() instead")
    void compileBotSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void compileBotSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use createBotSignalError() instead")
    void createBotSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void createBotSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use debugBotSignalError() instead")
    void debugBotSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void debugBotSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use deleteBotSignalError() instead")
    void deleteBotSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void deleteBotSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use deleteBotFile1SignalError() instead")
    void deleteBotFile1SignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void deleteBotFile1SignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use deleteBotFile2SignalError() instead")
    void deleteBotFile2SignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void deleteBotFile2SignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getBotFile1SignalError() instead")
    void getBotFile1SignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void getBotFile1SignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getBotFile2SignalError() instead")
    void getBotFile2SignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void getBotFile2SignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use listBotFilesSignalError() instead")
    void listBotFilesSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void listBotFilesSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use listBotsSignalError() instead")
    void listBotsSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void listBotsSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use uploadFile1SignalError() instead")
    void uploadFile1SignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void uploadFile1SignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use uploadFile2SignalError() instead")
    void uploadFile2SignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void uploadFile2SignalError(QNetworkReply::NetworkError error_type, const QString &error_str);

    Q_DECL_DEPRECATED_X("Use atalkBotSignalErrorFull() instead")
    void atalkBotSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void atalkBotSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use compileBotSignalErrorFull() instead")
    void compileBotSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void compileBotSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use createBotSignalErrorFull() instead")
    void createBotSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void createBotSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use debugBotSignalErrorFull() instead")
    void debugBotSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void debugBotSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use deleteBotSignalErrorFull() instead")
    void deleteBotSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void deleteBotSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use deleteBotFile1SignalErrorFull() instead")
    void deleteBotFile1SignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void deleteBotFile1SignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use deleteBotFile2SignalErrorFull() instead")
    void deleteBotFile2SignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void deleteBotFile2SignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getBotFile1SignalErrorFull() instead")
    void getBotFile1SignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getBotFile1SignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getBotFile2SignalErrorFull() instead")
    void getBotFile2SignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getBotFile2SignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use listBotFilesSignalErrorFull() instead")
    void listBotFilesSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void listBotFilesSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use listBotsSignalErrorFull() instead")
    void listBotsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void listBotsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use uploadFile1SignalErrorFull() instead")
    void uploadFile1SignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void uploadFile1SignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use uploadFile2SignalErrorFull() instead")
    void uploadFile2SignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void uploadFile2SignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);

    void abortRequestsSignal();
    void allPendingRequestsCompleted();

public Q_SLOTS:
    void tokenAvailable();
};

} // namespace OpenAPI
#endif
