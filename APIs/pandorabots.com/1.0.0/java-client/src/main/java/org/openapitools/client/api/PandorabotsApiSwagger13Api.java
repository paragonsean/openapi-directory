/*
 * Pandorabots AIaaS
 * AIaaS provides API access to our bot hosting platform and SDKs, allowing developers to easily integrate conversational interfaces into applications.
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiCallback;
import org.openapitools.client.ApiClient;
import org.openapitools.client.ApiException;
import org.openapitools.client.ApiResponse;
import org.openapitools.client.Configuration;
import org.openapitools.client.Pair;
import org.openapitools.client.ProgressRequestBody;
import org.openapitools.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;



import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class PandorabotsApiSwagger13Api {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public PandorabotsApiSwagger13Api() {
        this(Configuration.getDefaultApiClient());
    }

    public PandorabotsApiSwagger13Api(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for atalkBot
     * @param appId Your Application ID (required)
     * @param botname The name of the bot. Format required is 3-64 characters in length and only numbers or lower-case letters [0-9][a-z] (required)
     * @param input Message to be sent to the bot. This can contain multiple sentences. Currently the limit is 500 characters. (required)
     * @param clientName Leave blank to request Pandorabots to create a client_name which will support persistent predicates. Including a valid client_name in this parameter will work in the same way that Talk to Bot API but with persistent predicates. It is recommended to use this API only to create an end-user client_name, and then use normal Talk to Bot API to continue conversation with the bot. (optional)
     * @param sessionid Session ID generated by Pandorabots. This allows the application to group individual conversations into a collection as needed. If not included in the call, Pandorabots will issue a new session ID. (4-byte integer type) (optional)
     * @param recent If true, the system will not signal an error if the bot is uncompiled, and will instead look for a previous version of the bot that is available. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> No response was specified </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call atalkBotCall(String appId, String botname, String input, String clientName, String sessionid, String recent, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/atalk/{app_id}/{botname}"
            .replace("{" + "app_id" + "}", localVarApiClient.escapeString(appId.toString()))
            .replace("{" + "botname" + "}", localVarApiClient.escapeString(botname.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (input != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("input", input));
        }

        if (clientName != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("client_name", clientName));
        }

        if (sessionid != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("sessionid", sessionid));
        }

        if (recent != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("recent", recent));
        }

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "user_key" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call atalkBotValidateBeforeCall(String appId, String botname, String input, String clientName, String sessionid, String recent, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'appId' is set
        if (appId == null) {
            throw new ApiException("Missing the required parameter 'appId' when calling atalkBot(Async)");
        }

        // verify the required parameter 'botname' is set
        if (botname == null) {
            throw new ApiException("Missing the required parameter 'botname' when calling atalkBot(Async)");
        }

        // verify the required parameter 'input' is set
        if (input == null) {
            throw new ApiException("Missing the required parameter 'input' when calling atalkBot(Async)");
        }

        return atalkBotCall(appId, botname, input, clientName, sessionid, recent, _callback);

    }

    /**
     * Anonymous Talk
     * Start a conversation with the bot using the Anonymous Talk API. This method will allow you to request creation of an end-user client_name that can maintain persistent predicates per end-user talking to your bot. If client_name is NOT sent in the request, then Pandorabots will create a end-user client_name and return it in the response. Similar to the Talk to Bot API, Pandorabots will also return a new session ID if not included in the call. Use the session ID returned to group interactions together. &lt;p&gt;In addition to bot response and session ID, the HTTP response will include a new end-user client_name in the following format:&lt;br&gt;aiaas-XXX-user-nnnn, where XXX is your app_ID and nnnn is numeric starting with 0000 and incrementing after each request.&lt;br/&gt; &lt;/p&gt;&lt;p&gt;Malformed requests such as exceeding size of input or unknown end-user client_name returns 400 error code. Error code 412 is returned if the bot is not compiled or does not exist. Error code 429 is returned if your application has reached maximum plan API call limit.&lt;/p&gt;&lt;p&gt;&lt;pre class&#x3D;&#39;prettyprint&#39;&gt;curl -v  -X POST &#39;https://aiaas.pandorabots.com/atalk/APP_ID/BOTNAME?user_key&#x3D;USER_KEY&amp;input&#x3D;INPUT&#39;&lt;/pre&gt;&lt;/p&gt;
     * @param appId Your Application ID (required)
     * @param botname The name of the bot. Format required is 3-64 characters in length and only numbers or lower-case letters [0-9][a-z] (required)
     * @param input Message to be sent to the bot. This can contain multiple sentences. Currently the limit is 500 characters. (required)
     * @param clientName Leave blank to request Pandorabots to create a client_name which will support persistent predicates. Including a valid client_name in this parameter will work in the same way that Talk to Bot API but with persistent predicates. It is recommended to use this API only to create an end-user client_name, and then use normal Talk to Bot API to continue conversation with the bot. (optional)
     * @param sessionid Session ID generated by Pandorabots. This allows the application to group individual conversations into a collection as needed. If not included in the call, Pandorabots will issue a new session ID. (4-byte integer type) (optional)
     * @param recent If true, the system will not signal an error if the bot is uncompiled, and will instead look for a previous version of the bot that is available. (optional)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> No response was specified </td><td>  -  </td></tr>
     </table>
     */
    public void atalkBot(String appId, String botname, String input, String clientName, String sessionid, String recent) throws ApiException {
        atalkBotWithHttpInfo(appId, botname, input, clientName, sessionid, recent);
    }

    /**
     * Anonymous Talk
     * Start a conversation with the bot using the Anonymous Talk API. This method will allow you to request creation of an end-user client_name that can maintain persistent predicates per end-user talking to your bot. If client_name is NOT sent in the request, then Pandorabots will create a end-user client_name and return it in the response. Similar to the Talk to Bot API, Pandorabots will also return a new session ID if not included in the call. Use the session ID returned to group interactions together. &lt;p&gt;In addition to bot response and session ID, the HTTP response will include a new end-user client_name in the following format:&lt;br&gt;aiaas-XXX-user-nnnn, where XXX is your app_ID and nnnn is numeric starting with 0000 and incrementing after each request.&lt;br/&gt; &lt;/p&gt;&lt;p&gt;Malformed requests such as exceeding size of input or unknown end-user client_name returns 400 error code. Error code 412 is returned if the bot is not compiled or does not exist. Error code 429 is returned if your application has reached maximum plan API call limit.&lt;/p&gt;&lt;p&gt;&lt;pre class&#x3D;&#39;prettyprint&#39;&gt;curl -v  -X POST &#39;https://aiaas.pandorabots.com/atalk/APP_ID/BOTNAME?user_key&#x3D;USER_KEY&amp;input&#x3D;INPUT&#39;&lt;/pre&gt;&lt;/p&gt;
     * @param appId Your Application ID (required)
     * @param botname The name of the bot. Format required is 3-64 characters in length and only numbers or lower-case letters [0-9][a-z] (required)
     * @param input Message to be sent to the bot. This can contain multiple sentences. Currently the limit is 500 characters. (required)
     * @param clientName Leave blank to request Pandorabots to create a client_name which will support persistent predicates. Including a valid client_name in this parameter will work in the same way that Talk to Bot API but with persistent predicates. It is recommended to use this API only to create an end-user client_name, and then use normal Talk to Bot API to continue conversation with the bot. (optional)
     * @param sessionid Session ID generated by Pandorabots. This allows the application to group individual conversations into a collection as needed. If not included in the call, Pandorabots will issue a new session ID. (4-byte integer type) (optional)
     * @param recent If true, the system will not signal an error if the bot is uncompiled, and will instead look for a previous version of the bot that is available. (optional)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> No response was specified </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> atalkBotWithHttpInfo(String appId, String botname, String input, String clientName, String sessionid, String recent) throws ApiException {
        okhttp3.Call localVarCall = atalkBotValidateBeforeCall(appId, botname, input, clientName, sessionid, recent, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Anonymous Talk (asynchronously)
     * Start a conversation with the bot using the Anonymous Talk API. This method will allow you to request creation of an end-user client_name that can maintain persistent predicates per end-user talking to your bot. If client_name is NOT sent in the request, then Pandorabots will create a end-user client_name and return it in the response. Similar to the Talk to Bot API, Pandorabots will also return a new session ID if not included in the call. Use the session ID returned to group interactions together. &lt;p&gt;In addition to bot response and session ID, the HTTP response will include a new end-user client_name in the following format:&lt;br&gt;aiaas-XXX-user-nnnn, where XXX is your app_ID and nnnn is numeric starting with 0000 and incrementing after each request.&lt;br/&gt; &lt;/p&gt;&lt;p&gt;Malformed requests such as exceeding size of input or unknown end-user client_name returns 400 error code. Error code 412 is returned if the bot is not compiled or does not exist. Error code 429 is returned if your application has reached maximum plan API call limit.&lt;/p&gt;&lt;p&gt;&lt;pre class&#x3D;&#39;prettyprint&#39;&gt;curl -v  -X POST &#39;https://aiaas.pandorabots.com/atalk/APP_ID/BOTNAME?user_key&#x3D;USER_KEY&amp;input&#x3D;INPUT&#39;&lt;/pre&gt;&lt;/p&gt;
     * @param appId Your Application ID (required)
     * @param botname The name of the bot. Format required is 3-64 characters in length and only numbers or lower-case letters [0-9][a-z] (required)
     * @param input Message to be sent to the bot. This can contain multiple sentences. Currently the limit is 500 characters. (required)
     * @param clientName Leave blank to request Pandorabots to create a client_name which will support persistent predicates. Including a valid client_name in this parameter will work in the same way that Talk to Bot API but with persistent predicates. It is recommended to use this API only to create an end-user client_name, and then use normal Talk to Bot API to continue conversation with the bot. (optional)
     * @param sessionid Session ID generated by Pandorabots. This allows the application to group individual conversations into a collection as needed. If not included in the call, Pandorabots will issue a new session ID. (4-byte integer type) (optional)
     * @param recent If true, the system will not signal an error if the bot is uncompiled, and will instead look for a previous version of the bot that is available. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> No response was specified </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call atalkBotAsync(String appId, String botname, String input, String clientName, String sessionid, String recent, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = atalkBotValidateBeforeCall(appId, botname, input, clientName, sessionid, recent, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for compileBot
     * @param appId Your Application ID (required)
     * @param botname Your bot&#39;s name (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> No response was specified </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call compileBotCall(String appId, String botname, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/bot/{app_id}/{botname}/verify"
            .replace("{" + "app_id" + "}", localVarApiClient.escapeString(appId.toString()))
            .replace("{" + "botname" + "}", localVarApiClient.escapeString(botname.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "user_key" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call compileBotValidateBeforeCall(String appId, String botname, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'appId' is set
        if (appId == null) {
            throw new ApiException("Missing the required parameter 'appId' when calling compileBot(Async)");
        }

        // verify the required parameter 'botname' is set
        if (botname == null) {
            throw new ApiException("Missing the required parameter 'botname' when calling compileBot(Async)");
        }

        return compileBotCall(appId, botname, _callback);

    }

    /**
     * Compile a bot
     * A bot personality is created by uploading AIML and other file types to Pandorabots. The files must compile correctly in order for the bot to run. By issuing a call to this API, Pandorabots will compile the bot, updating any changes that have been made to the files.&lt;p&gt;Compiling the bot makes its most recent version available for talk. A 400 error means that we were unable to compile your bot (you should check your files for syntax issues) or the botname was not found. &lt;/p&gt;&lt;p&gt;You can see any thrown errors in the results field of the returned JSON object:&lt;/p&gt;&lt;p&gt;&lt;pre class&#x3D;&#39;prettyprint&#39;&gt;curl -v  -X GET &#39;https://aiaas.pandorabots.com/bot/APP_ID/BOTNAME/verify?user_key&#x3D;USER_KEY&#39;&lt;/pre&gt;&lt;/p&gt;
     * @param appId Your Application ID (required)
     * @param botname Your bot&#39;s name (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> No response was specified </td><td>  -  </td></tr>
     </table>
     */
    public void compileBot(String appId, String botname) throws ApiException {
        compileBotWithHttpInfo(appId, botname);
    }

    /**
     * Compile a bot
     * A bot personality is created by uploading AIML and other file types to Pandorabots. The files must compile correctly in order for the bot to run. By issuing a call to this API, Pandorabots will compile the bot, updating any changes that have been made to the files.&lt;p&gt;Compiling the bot makes its most recent version available for talk. A 400 error means that we were unable to compile your bot (you should check your files for syntax issues) or the botname was not found. &lt;/p&gt;&lt;p&gt;You can see any thrown errors in the results field of the returned JSON object:&lt;/p&gt;&lt;p&gt;&lt;pre class&#x3D;&#39;prettyprint&#39;&gt;curl -v  -X GET &#39;https://aiaas.pandorabots.com/bot/APP_ID/BOTNAME/verify?user_key&#x3D;USER_KEY&#39;&lt;/pre&gt;&lt;/p&gt;
     * @param appId Your Application ID (required)
     * @param botname Your bot&#39;s name (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> No response was specified </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> compileBotWithHttpInfo(String appId, String botname) throws ApiException {
        okhttp3.Call localVarCall = compileBotValidateBeforeCall(appId, botname, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Compile a bot (asynchronously)
     * A bot personality is created by uploading AIML and other file types to Pandorabots. The files must compile correctly in order for the bot to run. By issuing a call to this API, Pandorabots will compile the bot, updating any changes that have been made to the files.&lt;p&gt;Compiling the bot makes its most recent version available for talk. A 400 error means that we were unable to compile your bot (you should check your files for syntax issues) or the botname was not found. &lt;/p&gt;&lt;p&gt;You can see any thrown errors in the results field of the returned JSON object:&lt;/p&gt;&lt;p&gt;&lt;pre class&#x3D;&#39;prettyprint&#39;&gt;curl -v  -X GET &#39;https://aiaas.pandorabots.com/bot/APP_ID/BOTNAME/verify?user_key&#x3D;USER_KEY&#39;&lt;/pre&gt;&lt;/p&gt;
     * @param appId Your Application ID (required)
     * @param botname Your bot&#39;s name (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> No response was specified </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call compileBotAsync(String appId, String botname, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = compileBotValidateBeforeCall(appId, botname, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for createBot
     * @param appId Your Application ID (required)
     * @param botname Must be unique from all the other bots you have created under this app_id. Can only be numbers and lowercase letters, and must be between 3 and 64 characters long. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> No response was specified </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call createBotCall(String appId, String botname, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/bot/{app_id}/{botname}"
            .replace("{" + "app_id" + "}", localVarApiClient.escapeString(appId.toString()))
            .replace("{" + "botname" + "}", localVarApiClient.escapeString(botname.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "user_key" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call createBotValidateBeforeCall(String appId, String botname, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'appId' is set
        if (appId == null) {
            throw new ApiException("Missing the required parameter 'appId' when calling createBot(Async)");
        }

        // verify the required parameter 'botname' is set
        if (botname == null) {
            throw new ApiException("Missing the required parameter 'botname' when calling createBot(Async)");
        }

        return createBotCall(appId, botname, _callback);

    }

    /**
     * Create a bot
     * Create a new instance of a bot on the Pandorabots server.&lt;p&gt;If there is already a bot under the same app_id and botname, a 409 error is returned. Invalid botname will return a 400 error.&lt;/p&gt;&lt;p&gt;Creating more bots than your plan allows or using an invalid app_id or user_key (or if applicable referrer filter) returns a 401 error.&lt;/p&gt;&lt;p&gt;&lt;pre class&#x3D;&#39;prettyprint&#39;&gt;curl -v  -X PUT &#39;https://aiaas.pandorabots.com/bot/APP_ID/BOTNAME?user_key&#x3D;USER_KEY&#39;&lt;/pre&gt;&lt;/p&gt;
     * @param appId Your Application ID (required)
     * @param botname Must be unique from all the other bots you have created under this app_id. Can only be numbers and lowercase letters, and must be between 3 and 64 characters long. (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> No response was specified </td><td>  -  </td></tr>
     </table>
     */
    public void createBot(String appId, String botname) throws ApiException {
        createBotWithHttpInfo(appId, botname);
    }

    /**
     * Create a bot
     * Create a new instance of a bot on the Pandorabots server.&lt;p&gt;If there is already a bot under the same app_id and botname, a 409 error is returned. Invalid botname will return a 400 error.&lt;/p&gt;&lt;p&gt;Creating more bots than your plan allows or using an invalid app_id or user_key (or if applicable referrer filter) returns a 401 error.&lt;/p&gt;&lt;p&gt;&lt;pre class&#x3D;&#39;prettyprint&#39;&gt;curl -v  -X PUT &#39;https://aiaas.pandorabots.com/bot/APP_ID/BOTNAME?user_key&#x3D;USER_KEY&#39;&lt;/pre&gt;&lt;/p&gt;
     * @param appId Your Application ID (required)
     * @param botname Must be unique from all the other bots you have created under this app_id. Can only be numbers and lowercase letters, and must be between 3 and 64 characters long. (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> No response was specified </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> createBotWithHttpInfo(String appId, String botname) throws ApiException {
        okhttp3.Call localVarCall = createBotValidateBeforeCall(appId, botname, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Create a bot (asynchronously)
     * Create a new instance of a bot on the Pandorabots server.&lt;p&gt;If there is already a bot under the same app_id and botname, a 409 error is returned. Invalid botname will return a 400 error.&lt;/p&gt;&lt;p&gt;Creating more bots than your plan allows or using an invalid app_id or user_key (or if applicable referrer filter) returns a 401 error.&lt;/p&gt;&lt;p&gt;&lt;pre class&#x3D;&#39;prettyprint&#39;&gt;curl -v  -X PUT &#39;https://aiaas.pandorabots.com/bot/APP_ID/BOTNAME?user_key&#x3D;USER_KEY&#39;&lt;/pre&gt;&lt;/p&gt;
     * @param appId Your Application ID (required)
     * @param botname Must be unique from all the other bots you have created under this app_id. Can only be numbers and lowercase letters, and must be between 3 and 64 characters long. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> No response was specified </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call createBotAsync(String appId, String botname, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = createBotValidateBeforeCall(appId, botname, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for debugBot
     * @param appId Your Application ID (required)
     * @param botname The name of the bot. Format required is 3-64 characters in length and only numbers or lower-case letters [0-9][a-z] (required)
     * @param input Message to be sent to the bot. This can contain multiple sentences. Currently the limit is 500 characters. (required)
     * @param clientName Identifies your application&#39;s end user. You can assign each of your end users a unique client_name. This will allow you to set predicates and other variable information that is specific to an individual. Format required is 3-64 characters in length and only numbers or lower-case letters [0-9][a-z] (optional)
     * @param sessionid Session ID generated by Pandorabots. This allows the application to group individual conversations into a collection. While testing your bot, not including this parameter, Pandorabots will issue a new session ID. (4-byte integer type) (optional)
     * @param that For debugging purposes, you can specify a &#39;that&#39; with the input that supersedes the existing that in bot memory. (optional)
     * @param topic For debugging purposes, you can specify a &#39;topic&#39; with the input that supersedes the existing topic in bot memory. (optional)
     * @param extra Return extra conversation information. If true, input, pattern, that, topic, filename, and template associated with the pattern matched are returned in addition to response and sessionid. (optional)
     * @param reset Reset the bot memory. If true, all predicate values in the bot will be discarded, and the user can talk to the bot as if it is the first time (optional)
     * @param trace Include trace data in the response. If true, the system will generate AIML trace information for the input. Trace data includes pattern matched, filename, input, template for all recursion levels. NOTE: for security reasons, trace does not work with client_name. (optional)
     * @param reload If true, the system will force a reload of the bot into memory. This can be useful if you&#39;ve recently uploaded an AIML file, recompiled your bot and want access to your bot&#39;s latest changes. (optional)
     * @param recent If true, the system will not signal an error if the bot is uncompiled, and will instead look for a previous version of the bot that is available. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> No response was specified </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call debugBotCall(String appId, String botname, String input, String clientName, String sessionid, String that, String topic, String extra, String reset, String trace, String reload, String recent, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/talk/{app_id}/{botname}"
            .replace("{" + "app_id" + "}", localVarApiClient.escapeString(appId.toString()))
            .replace("{" + "botname" + "}", localVarApiClient.escapeString(botname.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (input != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("input", input));
        }

        if (clientName != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("client_name", clientName));
        }

        if (sessionid != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("sessionid", sessionid));
        }

        if (that != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("that", that));
        }

        if (topic != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("topic", topic));
        }

        if (extra != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("extra", extra));
        }

        if (reset != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("reset", reset));
        }

        if (trace != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("trace", trace));
        }

        if (reload != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("reload", reload));
        }

        if (recent != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("recent", recent));
        }

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "user_key" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call debugBotValidateBeforeCall(String appId, String botname, String input, String clientName, String sessionid, String that, String topic, String extra, String reset, String trace, String reload, String recent, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'appId' is set
        if (appId == null) {
            throw new ApiException("Missing the required parameter 'appId' when calling debugBot(Async)");
        }

        // verify the required parameter 'botname' is set
        if (botname == null) {
            throw new ApiException("Missing the required parameter 'botname' when calling debugBot(Async)");
        }

        // verify the required parameter 'input' is set
        if (input == null) {
            throw new ApiException("Missing the required parameter 'input' when calling debugBot(Async)");
        }

        return debugBotCall(appId, botname, input, clientName, sessionid, that, topic, extra, reset, trace, reload, recent, _callback);

    }

    /**
     * Debug a bot conversation
     * Use these tools to test/debug/trace bot categories. &lt;p&gt;Malformed requests such as exceeding size of input or invalid clientname returns 400 error code. Error code 412 is returned if the bot is not compiled or does not exist.&lt;/p&gt;&lt;p&gt;&lt;pre class&#x3D;&#39;prettyprint&#39;&gt;curl -v  -X POST &#39;https://aiaas.pandorabots.com/talk/APP_ID/BOTNAME?user_key&#x3D;USER_KEY&amp;input&#x3D;INPUT&#39;&lt;/pre&gt;&lt;/p&gt;
     * @param appId Your Application ID (required)
     * @param botname The name of the bot. Format required is 3-64 characters in length and only numbers or lower-case letters [0-9][a-z] (required)
     * @param input Message to be sent to the bot. This can contain multiple sentences. Currently the limit is 500 characters. (required)
     * @param clientName Identifies your application&#39;s end user. You can assign each of your end users a unique client_name. This will allow you to set predicates and other variable information that is specific to an individual. Format required is 3-64 characters in length and only numbers or lower-case letters [0-9][a-z] (optional)
     * @param sessionid Session ID generated by Pandorabots. This allows the application to group individual conversations into a collection. While testing your bot, not including this parameter, Pandorabots will issue a new session ID. (4-byte integer type) (optional)
     * @param that For debugging purposes, you can specify a &#39;that&#39; with the input that supersedes the existing that in bot memory. (optional)
     * @param topic For debugging purposes, you can specify a &#39;topic&#39; with the input that supersedes the existing topic in bot memory. (optional)
     * @param extra Return extra conversation information. If true, input, pattern, that, topic, filename, and template associated with the pattern matched are returned in addition to response and sessionid. (optional)
     * @param reset Reset the bot memory. If true, all predicate values in the bot will be discarded, and the user can talk to the bot as if it is the first time (optional)
     * @param trace Include trace data in the response. If true, the system will generate AIML trace information for the input. Trace data includes pattern matched, filename, input, template for all recursion levels. NOTE: for security reasons, trace does not work with client_name. (optional)
     * @param reload If true, the system will force a reload of the bot into memory. This can be useful if you&#39;ve recently uploaded an AIML file, recompiled your bot and want access to your bot&#39;s latest changes. (optional)
     * @param recent If true, the system will not signal an error if the bot is uncompiled, and will instead look for a previous version of the bot that is available. (optional)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> No response was specified </td><td>  -  </td></tr>
     </table>
     */
    public void debugBot(String appId, String botname, String input, String clientName, String sessionid, String that, String topic, String extra, String reset, String trace, String reload, String recent) throws ApiException {
        debugBotWithHttpInfo(appId, botname, input, clientName, sessionid, that, topic, extra, reset, trace, reload, recent);
    }

    /**
     * Debug a bot conversation
     * Use these tools to test/debug/trace bot categories. &lt;p&gt;Malformed requests such as exceeding size of input or invalid clientname returns 400 error code. Error code 412 is returned if the bot is not compiled or does not exist.&lt;/p&gt;&lt;p&gt;&lt;pre class&#x3D;&#39;prettyprint&#39;&gt;curl -v  -X POST &#39;https://aiaas.pandorabots.com/talk/APP_ID/BOTNAME?user_key&#x3D;USER_KEY&amp;input&#x3D;INPUT&#39;&lt;/pre&gt;&lt;/p&gt;
     * @param appId Your Application ID (required)
     * @param botname The name of the bot. Format required is 3-64 characters in length and only numbers or lower-case letters [0-9][a-z] (required)
     * @param input Message to be sent to the bot. This can contain multiple sentences. Currently the limit is 500 characters. (required)
     * @param clientName Identifies your application&#39;s end user. You can assign each of your end users a unique client_name. This will allow you to set predicates and other variable information that is specific to an individual. Format required is 3-64 characters in length and only numbers or lower-case letters [0-9][a-z] (optional)
     * @param sessionid Session ID generated by Pandorabots. This allows the application to group individual conversations into a collection. While testing your bot, not including this parameter, Pandorabots will issue a new session ID. (4-byte integer type) (optional)
     * @param that For debugging purposes, you can specify a &#39;that&#39; with the input that supersedes the existing that in bot memory. (optional)
     * @param topic For debugging purposes, you can specify a &#39;topic&#39; with the input that supersedes the existing topic in bot memory. (optional)
     * @param extra Return extra conversation information. If true, input, pattern, that, topic, filename, and template associated with the pattern matched are returned in addition to response and sessionid. (optional)
     * @param reset Reset the bot memory. If true, all predicate values in the bot will be discarded, and the user can talk to the bot as if it is the first time (optional)
     * @param trace Include trace data in the response. If true, the system will generate AIML trace information for the input. Trace data includes pattern matched, filename, input, template for all recursion levels. NOTE: for security reasons, trace does not work with client_name. (optional)
     * @param reload If true, the system will force a reload of the bot into memory. This can be useful if you&#39;ve recently uploaded an AIML file, recompiled your bot and want access to your bot&#39;s latest changes. (optional)
     * @param recent If true, the system will not signal an error if the bot is uncompiled, and will instead look for a previous version of the bot that is available. (optional)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> No response was specified </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> debugBotWithHttpInfo(String appId, String botname, String input, String clientName, String sessionid, String that, String topic, String extra, String reset, String trace, String reload, String recent) throws ApiException {
        okhttp3.Call localVarCall = debugBotValidateBeforeCall(appId, botname, input, clientName, sessionid, that, topic, extra, reset, trace, reload, recent, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Debug a bot conversation (asynchronously)
     * Use these tools to test/debug/trace bot categories. &lt;p&gt;Malformed requests such as exceeding size of input or invalid clientname returns 400 error code. Error code 412 is returned if the bot is not compiled or does not exist.&lt;/p&gt;&lt;p&gt;&lt;pre class&#x3D;&#39;prettyprint&#39;&gt;curl -v  -X POST &#39;https://aiaas.pandorabots.com/talk/APP_ID/BOTNAME?user_key&#x3D;USER_KEY&amp;input&#x3D;INPUT&#39;&lt;/pre&gt;&lt;/p&gt;
     * @param appId Your Application ID (required)
     * @param botname The name of the bot. Format required is 3-64 characters in length and only numbers or lower-case letters [0-9][a-z] (required)
     * @param input Message to be sent to the bot. This can contain multiple sentences. Currently the limit is 500 characters. (required)
     * @param clientName Identifies your application&#39;s end user. You can assign each of your end users a unique client_name. This will allow you to set predicates and other variable information that is specific to an individual. Format required is 3-64 characters in length and only numbers or lower-case letters [0-9][a-z] (optional)
     * @param sessionid Session ID generated by Pandorabots. This allows the application to group individual conversations into a collection. While testing your bot, not including this parameter, Pandorabots will issue a new session ID. (4-byte integer type) (optional)
     * @param that For debugging purposes, you can specify a &#39;that&#39; with the input that supersedes the existing that in bot memory. (optional)
     * @param topic For debugging purposes, you can specify a &#39;topic&#39; with the input that supersedes the existing topic in bot memory. (optional)
     * @param extra Return extra conversation information. If true, input, pattern, that, topic, filename, and template associated with the pattern matched are returned in addition to response and sessionid. (optional)
     * @param reset Reset the bot memory. If true, all predicate values in the bot will be discarded, and the user can talk to the bot as if it is the first time (optional)
     * @param trace Include trace data in the response. If true, the system will generate AIML trace information for the input. Trace data includes pattern matched, filename, input, template for all recursion levels. NOTE: for security reasons, trace does not work with client_name. (optional)
     * @param reload If true, the system will force a reload of the bot into memory. This can be useful if you&#39;ve recently uploaded an AIML file, recompiled your bot and want access to your bot&#39;s latest changes. (optional)
     * @param recent If true, the system will not signal an error if the bot is uncompiled, and will instead look for a previous version of the bot that is available. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> No response was specified </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call debugBotAsync(String appId, String botname, String input, String clientName, String sessionid, String that, String topic, String extra, String reset, String trace, String reload, String recent, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = debugBotValidateBeforeCall(appId, botname, input, clientName, sessionid, that, topic, extra, reset, trace, reload, recent, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for deleteBot
     * @param appId Your Application ID (required)
     * @param botname Name of the bot to delete. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> No response was specified </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteBotCall(String appId, String botname, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/bot/{app_id}/{botname}"
            .replace("{" + "app_id" + "}", localVarApiClient.escapeString(appId.toString()))
            .replace("{" + "botname" + "}", localVarApiClient.escapeString(botname.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "user_key" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call deleteBotValidateBeforeCall(String appId, String botname, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'appId' is set
        if (appId == null) {
            throw new ApiException("Missing the required parameter 'appId' when calling deleteBot(Async)");
        }

        // verify the required parameter 'botname' is set
        if (botname == null) {
            throw new ApiException("Missing the required parameter 'botname' when calling deleteBot(Async)");
        }

        return deleteBotCall(appId, botname, _callback);

    }

    /**
     * Delete a bot
     * Delete a bot on the Pandorabots server.&lt;p&gt;Deleting a bot that does not exist returns a 412 error. Invalid botname will return a 400 error. Invalid app_id, user_key, or referrer filter will return a 401 error.&lt;/p&gt;&lt;p&gt;&lt;pre class&#x3D;&#39;prettyprint&#39;&gt;curl -v  -X DELETE &#39;https://aiaas.pandorabots.com/bot/APP_ID/BOTNAME?user_key&#x3D;USER_KEY&#39;&lt;/pre&gt;&lt;/p&gt;
     * @param appId Your Application ID (required)
     * @param botname Name of the bot to delete. (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> No response was specified </td><td>  -  </td></tr>
     </table>
     */
    public void deleteBot(String appId, String botname) throws ApiException {
        deleteBotWithHttpInfo(appId, botname);
    }

    /**
     * Delete a bot
     * Delete a bot on the Pandorabots server.&lt;p&gt;Deleting a bot that does not exist returns a 412 error. Invalid botname will return a 400 error. Invalid app_id, user_key, or referrer filter will return a 401 error.&lt;/p&gt;&lt;p&gt;&lt;pre class&#x3D;&#39;prettyprint&#39;&gt;curl -v  -X DELETE &#39;https://aiaas.pandorabots.com/bot/APP_ID/BOTNAME?user_key&#x3D;USER_KEY&#39;&lt;/pre&gt;&lt;/p&gt;
     * @param appId Your Application ID (required)
     * @param botname Name of the bot to delete. (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> No response was specified </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> deleteBotWithHttpInfo(String appId, String botname) throws ApiException {
        okhttp3.Call localVarCall = deleteBotValidateBeforeCall(appId, botname, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Delete a bot (asynchronously)
     * Delete a bot on the Pandorabots server.&lt;p&gt;Deleting a bot that does not exist returns a 412 error. Invalid botname will return a 400 error. Invalid app_id, user_key, or referrer filter will return a 401 error.&lt;/p&gt;&lt;p&gt;&lt;pre class&#x3D;&#39;prettyprint&#39;&gt;curl -v  -X DELETE &#39;https://aiaas.pandorabots.com/bot/APP_ID/BOTNAME?user_key&#x3D;USER_KEY&#39;&lt;/pre&gt;&lt;/p&gt;
     * @param appId Your Application ID (required)
     * @param botname Name of the bot to delete. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> No response was specified </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteBotAsync(String appId, String botname, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = deleteBotValidateBeforeCall(appId, botname, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for deleteBotFile1
     * @param appId Your Application ID (required)
     * @param botname Name of the bot. (required)
     * @param fileKind Specify the type of file being deleted: file (for AIML files), map, substitution, set (required)
     * @param filename Filename to delete. Note: for non-AIML files, do not include the file extension in the path. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> No response was specified </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteBotFile1Call(String appId, String botname, String fileKind, String filename, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/bot/{app_id}/{botname}/{file-kind}/{filename}"
            .replace("{" + "app_id" + "}", localVarApiClient.escapeString(appId.toString()))
            .replace("{" + "botname" + "}", localVarApiClient.escapeString(botname.toString()))
            .replace("{" + "file-kind" + "}", localVarApiClient.escapeString(fileKind.toString()))
            .replace("{" + "filename" + "}", localVarApiClient.escapeString(filename.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "user_key" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call deleteBotFile1ValidateBeforeCall(String appId, String botname, String fileKind, String filename, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'appId' is set
        if (appId == null) {
            throw new ApiException("Missing the required parameter 'appId' when calling deleteBotFile1(Async)");
        }

        // verify the required parameter 'botname' is set
        if (botname == null) {
            throw new ApiException("Missing the required parameter 'botname' when calling deleteBotFile1(Async)");
        }

        // verify the required parameter 'fileKind' is set
        if (fileKind == null) {
            throw new ApiException("Missing the required parameter 'fileKind' when calling deleteBotFile1(Async)");
        }

        // verify the required parameter 'filename' is set
        if (filename == null) {
            throw new ApiException("Missing the required parameter 'filename' when calling deleteBotFile1(Async)");
        }

        return deleteBotFile1Call(appId, botname, fileKind, filename, _callback);

    }

    /**
     * Delete a bot file (AIML, set, map, substitution)
     * Delete an AIML, set, map or substitution bot file&lt;p&gt;For malformed file-kind, a 404 error is returned. For invalid file or botname, a 412 error is returned.&lt;/p&gt;&lt;pre&gt;&lt;p&gt;curl -v -X DELETE &#39;https://aiaas.pandorabots.com/bot/APP_ID/BOTNAME/FILE-KIND/FILENAME?user_key&#x3D;USER_KEY&#39;&lt;/p&gt;&lt;/pre&gt;
     * @param appId Your Application ID (required)
     * @param botname Name of the bot. (required)
     * @param fileKind Specify the type of file being deleted: file (for AIML files), map, substitution, set (required)
     * @param filename Filename to delete. Note: for non-AIML files, do not include the file extension in the path. (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> No response was specified </td><td>  -  </td></tr>
     </table>
     */
    public void deleteBotFile1(String appId, String botname, String fileKind, String filename) throws ApiException {
        deleteBotFile1WithHttpInfo(appId, botname, fileKind, filename);
    }

    /**
     * Delete a bot file (AIML, set, map, substitution)
     * Delete an AIML, set, map or substitution bot file&lt;p&gt;For malformed file-kind, a 404 error is returned. For invalid file or botname, a 412 error is returned.&lt;/p&gt;&lt;pre&gt;&lt;p&gt;curl -v -X DELETE &#39;https://aiaas.pandorabots.com/bot/APP_ID/BOTNAME/FILE-KIND/FILENAME?user_key&#x3D;USER_KEY&#39;&lt;/p&gt;&lt;/pre&gt;
     * @param appId Your Application ID (required)
     * @param botname Name of the bot. (required)
     * @param fileKind Specify the type of file being deleted: file (for AIML files), map, substitution, set (required)
     * @param filename Filename to delete. Note: for non-AIML files, do not include the file extension in the path. (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> No response was specified </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> deleteBotFile1WithHttpInfo(String appId, String botname, String fileKind, String filename) throws ApiException {
        okhttp3.Call localVarCall = deleteBotFile1ValidateBeforeCall(appId, botname, fileKind, filename, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Delete a bot file (AIML, set, map, substitution) (asynchronously)
     * Delete an AIML, set, map or substitution bot file&lt;p&gt;For malformed file-kind, a 404 error is returned. For invalid file or botname, a 412 error is returned.&lt;/p&gt;&lt;pre&gt;&lt;p&gt;curl -v -X DELETE &#39;https://aiaas.pandorabots.com/bot/APP_ID/BOTNAME/FILE-KIND/FILENAME?user_key&#x3D;USER_KEY&#39;&lt;/p&gt;&lt;/pre&gt;
     * @param appId Your Application ID (required)
     * @param botname Name of the bot. (required)
     * @param fileKind Specify the type of file being deleted: file (for AIML files), map, substitution, set (required)
     * @param filename Filename to delete. Note: for non-AIML files, do not include the file extension in the path. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> No response was specified </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteBotFile1Async(String appId, String botname, String fileKind, String filename, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = deleteBotFile1ValidateBeforeCall(appId, botname, fileKind, filename, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for deleteBotFile2
     * @param appId Your Application ID (required)
     * @param botname Name of the bot. (required)
     * @param fileKind Specify the type of file being deleted: pdefaults, properties (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> No response was specified </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteBotFile2Call(String appId, String botname, String fileKind, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/bot/{app_id}/{botname}/{file-kind}"
            .replace("{" + "app_id" + "}", localVarApiClient.escapeString(appId.toString()))
            .replace("{" + "botname" + "}", localVarApiClient.escapeString(botname.toString()))
            .replace("{" + "file-kind" + "}", localVarApiClient.escapeString(fileKind.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "user_key" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call deleteBotFile2ValidateBeforeCall(String appId, String botname, String fileKind, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'appId' is set
        if (appId == null) {
            throw new ApiException("Missing the required parameter 'appId' when calling deleteBotFile2(Async)");
        }

        // verify the required parameter 'botname' is set
        if (botname == null) {
            throw new ApiException("Missing the required parameter 'botname' when calling deleteBotFile2(Async)");
        }

        // verify the required parameter 'fileKind' is set
        if (fileKind == null) {
            throw new ApiException("Missing the required parameter 'fileKind' when calling deleteBotFile2(Async)");
        }

        return deleteBotFile2Call(appId, botname, fileKind, _callback);

    }

    /**
     * Delete a bot file (pdefaults, properties)
     * Delete pdefaults or properties bot file.&lt;p&gt;For malformed file-kind, a 404 error is returned. For invalid botname, a 412 error is returned.&lt;/p&gt;&lt;pre&gt;&lt;p&gt;curl -v -X DELETE &#39;https://aiaas.pandorabots.com/bot/APP_ID/BOTNAME/FILE-KIND?user_key&#x3D;USER_KEY&#39;&lt;/p&gt;&lt;/pre&gt;
     * @param appId Your Application ID (required)
     * @param botname Name of the bot. (required)
     * @param fileKind Specify the type of file being deleted: pdefaults, properties (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> No response was specified </td><td>  -  </td></tr>
     </table>
     */
    public void deleteBotFile2(String appId, String botname, String fileKind) throws ApiException {
        deleteBotFile2WithHttpInfo(appId, botname, fileKind);
    }

    /**
     * Delete a bot file (pdefaults, properties)
     * Delete pdefaults or properties bot file.&lt;p&gt;For malformed file-kind, a 404 error is returned. For invalid botname, a 412 error is returned.&lt;/p&gt;&lt;pre&gt;&lt;p&gt;curl -v -X DELETE &#39;https://aiaas.pandorabots.com/bot/APP_ID/BOTNAME/FILE-KIND?user_key&#x3D;USER_KEY&#39;&lt;/p&gt;&lt;/pre&gt;
     * @param appId Your Application ID (required)
     * @param botname Name of the bot. (required)
     * @param fileKind Specify the type of file being deleted: pdefaults, properties (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> No response was specified </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> deleteBotFile2WithHttpInfo(String appId, String botname, String fileKind) throws ApiException {
        okhttp3.Call localVarCall = deleteBotFile2ValidateBeforeCall(appId, botname, fileKind, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Delete a bot file (pdefaults, properties) (asynchronously)
     * Delete pdefaults or properties bot file.&lt;p&gt;For malformed file-kind, a 404 error is returned. For invalid botname, a 412 error is returned.&lt;/p&gt;&lt;pre&gt;&lt;p&gt;curl -v -X DELETE &#39;https://aiaas.pandorabots.com/bot/APP_ID/BOTNAME/FILE-KIND?user_key&#x3D;USER_KEY&#39;&lt;/p&gt;&lt;/pre&gt;
     * @param appId Your Application ID (required)
     * @param botname Name of the bot. (required)
     * @param fileKind Specify the type of file being deleted: pdefaults, properties (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> No response was specified </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteBotFile2Async(String appId, String botname, String fileKind, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = deleteBotFile2ValidateBeforeCall(appId, botname, fileKind, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for getBotFile1
     * @param appId Your Application ID (required)
     * @param botname Name of the bot. (required)
     * @param fileKind Specify the type of file being retrieved: file (for AIML files), map, substitution, set (required)
     * @param filename Filename to retrieve. Note: for non-AIML files, do not include the file extension in the path. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> No response was specified </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getBotFile1Call(String appId, String botname, String fileKind, String filename, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/bot/{app_id}/{botname}/{file-kind}/{filename}"
            .replace("{" + "app_id" + "}", localVarApiClient.escapeString(appId.toString()))
            .replace("{" + "botname" + "}", localVarApiClient.escapeString(botname.toString()))
            .replace("{" + "file-kind" + "}", localVarApiClient.escapeString(fileKind.toString()))
            .replace("{" + "filename" + "}", localVarApiClient.escapeString(filename.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "user_key" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getBotFile1ValidateBeforeCall(String appId, String botname, String fileKind, String filename, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'appId' is set
        if (appId == null) {
            throw new ApiException("Missing the required parameter 'appId' when calling getBotFile1(Async)");
        }

        // verify the required parameter 'botname' is set
        if (botname == null) {
            throw new ApiException("Missing the required parameter 'botname' when calling getBotFile1(Async)");
        }

        // verify the required parameter 'fileKind' is set
        if (fileKind == null) {
            throw new ApiException("Missing the required parameter 'fileKind' when calling getBotFile1(Async)");
        }

        // verify the required parameter 'filename' is set
        if (filename == null) {
            throw new ApiException("Missing the required parameter 'filename' when calling getBotFile1(Async)");
        }

        return getBotFile1Call(appId, botname, fileKind, filename, _callback);

    }

    /**
     * Retrieve a bot file (AIML, set, map, substitution)
     * Retrieve an AIML, set, map or substitution bot file.&lt;p&gt;For malformed file-kind, a 404 error is returned. For invalid filename or botname, a 400 error is returned. For unknown bot or file, a 412 error is returned.&lt;/p&gt;&lt;pre&gt;&lt;p&gt;curl -v -X GET &#39;https://aiaas.pandorabots.com/bot/APP_ID/BOTNAME/FILE-KIND/FILENAME?user_key&#x3D;USER_KEY&#39;&lt;/p&gt;&lt;/pre&gt;
     * @param appId Your Application ID (required)
     * @param botname Name of the bot. (required)
     * @param fileKind Specify the type of file being retrieved: file (for AIML files), map, substitution, set (required)
     * @param filename Filename to retrieve. Note: for non-AIML files, do not include the file extension in the path. (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> No response was specified </td><td>  -  </td></tr>
     </table>
     */
    public void getBotFile1(String appId, String botname, String fileKind, String filename) throws ApiException {
        getBotFile1WithHttpInfo(appId, botname, fileKind, filename);
    }

    /**
     * Retrieve a bot file (AIML, set, map, substitution)
     * Retrieve an AIML, set, map or substitution bot file.&lt;p&gt;For malformed file-kind, a 404 error is returned. For invalid filename or botname, a 400 error is returned. For unknown bot or file, a 412 error is returned.&lt;/p&gt;&lt;pre&gt;&lt;p&gt;curl -v -X GET &#39;https://aiaas.pandorabots.com/bot/APP_ID/BOTNAME/FILE-KIND/FILENAME?user_key&#x3D;USER_KEY&#39;&lt;/p&gt;&lt;/pre&gt;
     * @param appId Your Application ID (required)
     * @param botname Name of the bot. (required)
     * @param fileKind Specify the type of file being retrieved: file (for AIML files), map, substitution, set (required)
     * @param filename Filename to retrieve. Note: for non-AIML files, do not include the file extension in the path. (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> No response was specified </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> getBotFile1WithHttpInfo(String appId, String botname, String fileKind, String filename) throws ApiException {
        okhttp3.Call localVarCall = getBotFile1ValidateBeforeCall(appId, botname, fileKind, filename, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Retrieve a bot file (AIML, set, map, substitution) (asynchronously)
     * Retrieve an AIML, set, map or substitution bot file.&lt;p&gt;For malformed file-kind, a 404 error is returned. For invalid filename or botname, a 400 error is returned. For unknown bot or file, a 412 error is returned.&lt;/p&gt;&lt;pre&gt;&lt;p&gt;curl -v -X GET &#39;https://aiaas.pandorabots.com/bot/APP_ID/BOTNAME/FILE-KIND/FILENAME?user_key&#x3D;USER_KEY&#39;&lt;/p&gt;&lt;/pre&gt;
     * @param appId Your Application ID (required)
     * @param botname Name of the bot. (required)
     * @param fileKind Specify the type of file being retrieved: file (for AIML files), map, substitution, set (required)
     * @param filename Filename to retrieve. Note: for non-AIML files, do not include the file extension in the path. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> No response was specified </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getBotFile1Async(String appId, String botname, String fileKind, String filename, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = getBotFile1ValidateBeforeCall(appId, botname, fileKind, filename, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for getBotFile2
     * @param appId Your Application ID (required)
     * @param botname Name of the bot. (required)
     * @param fileKind Specify the type of file being retrieved: pdefaults, properties (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> No response was specified </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getBotFile2Call(String appId, String botname, String fileKind, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/bot/{app_id}/{botname}/{file-kind}"
            .replace("{" + "app_id" + "}", localVarApiClient.escapeString(appId.toString()))
            .replace("{" + "botname" + "}", localVarApiClient.escapeString(botname.toString()))
            .replace("{" + "file-kind" + "}", localVarApiClient.escapeString(fileKind.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "user_key" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getBotFile2ValidateBeforeCall(String appId, String botname, String fileKind, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'appId' is set
        if (appId == null) {
            throw new ApiException("Missing the required parameter 'appId' when calling getBotFile2(Async)");
        }

        // verify the required parameter 'botname' is set
        if (botname == null) {
            throw new ApiException("Missing the required parameter 'botname' when calling getBotFile2(Async)");
        }

        // verify the required parameter 'fileKind' is set
        if (fileKind == null) {
            throw new ApiException("Missing the required parameter 'fileKind' when calling getBotFile2(Async)");
        }

        return getBotFile2Call(appId, botname, fileKind, _callback);

    }

    /**
     * Retrieve a bot file (pdefaults, properties)
     * Retrieve pdefaults or properties bot file.&lt;p&gt;For malformed file-kind, a 404 error is returned. For invalid botname, a 400 error is returned. For unknown bot or file, a 412 error is returned.&lt;/p&gt;&lt;pre&gt;&lt;p&gt;curl -v -X GET &#39;https://aiaas.pandorabots.com/bot/APP_ID/BOTNAME/FILE-KIND?user_key&#x3D;USER_KEY&#39;&lt;/p&gt;&lt;/pre&gt;
     * @param appId Your Application ID (required)
     * @param botname Name of the bot. (required)
     * @param fileKind Specify the type of file being retrieved: pdefaults, properties (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> No response was specified </td><td>  -  </td></tr>
     </table>
     */
    public void getBotFile2(String appId, String botname, String fileKind) throws ApiException {
        getBotFile2WithHttpInfo(appId, botname, fileKind);
    }

    /**
     * Retrieve a bot file (pdefaults, properties)
     * Retrieve pdefaults or properties bot file.&lt;p&gt;For malformed file-kind, a 404 error is returned. For invalid botname, a 400 error is returned. For unknown bot or file, a 412 error is returned.&lt;/p&gt;&lt;pre&gt;&lt;p&gt;curl -v -X GET &#39;https://aiaas.pandorabots.com/bot/APP_ID/BOTNAME/FILE-KIND?user_key&#x3D;USER_KEY&#39;&lt;/p&gt;&lt;/pre&gt;
     * @param appId Your Application ID (required)
     * @param botname Name of the bot. (required)
     * @param fileKind Specify the type of file being retrieved: pdefaults, properties (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> No response was specified </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> getBotFile2WithHttpInfo(String appId, String botname, String fileKind) throws ApiException {
        okhttp3.Call localVarCall = getBotFile2ValidateBeforeCall(appId, botname, fileKind, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Retrieve a bot file (pdefaults, properties) (asynchronously)
     * Retrieve pdefaults or properties bot file.&lt;p&gt;For malformed file-kind, a 404 error is returned. For invalid botname, a 400 error is returned. For unknown bot or file, a 412 error is returned.&lt;/p&gt;&lt;pre&gt;&lt;p&gt;curl -v -X GET &#39;https://aiaas.pandorabots.com/bot/APP_ID/BOTNAME/FILE-KIND?user_key&#x3D;USER_KEY&#39;&lt;/p&gt;&lt;/pre&gt;
     * @param appId Your Application ID (required)
     * @param botname Name of the bot. (required)
     * @param fileKind Specify the type of file being retrieved: pdefaults, properties (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> No response was specified </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getBotFile2Async(String appId, String botname, String fileKind, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = getBotFile2ValidateBeforeCall(appId, botname, fileKind, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for listBotFiles
     * @param appId Your Application ID (required)
     * @param botname The name of the bot. (required)
     * @param _return If set to zip, a zip file with all bot files will be returned. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> No response was specified </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call listBotFilesCall(String appId, String botname, String _return, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/bot/{app_id}/{botname}"
            .replace("{" + "app_id" + "}", localVarApiClient.escapeString(appId.toString()))
            .replace("{" + "botname" + "}", localVarApiClient.escapeString(botname.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (_return != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("return", _return));
        }

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "user_key" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call listBotFilesValidateBeforeCall(String appId, String botname, String _return, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'appId' is set
        if (appId == null) {
            throw new ApiException("Missing the required parameter 'appId' when calling listBotFiles(Async)");
        }

        // verify the required parameter 'botname' is set
        if (botname == null) {
            throw new ApiException("Missing the required parameter 'botname' when calling listBotFiles(Async)");
        }

        return listBotFilesCall(appId, botname, _return, _callback);

    }

    /**
     * List of bot files
     * Retrieve a list of a bot&#39;s files. Returns a JSON object with each bot file associated with bot specified.&lt;p&gt;Returns a 404 error code for bot not found. Returns a 401 error code for invalid app_ID, user_key, or referrer filter.&lt;/p&gt;&lt;p&gt;The &lt;code color&#x3D;blue&gt;return&#x3D;zip&lt;/code&gt; option may not behave as expected using Active Docs 1.2&lt;/p&gt;&lt;p&gt;&lt;pre class&#x3D;&#39;prettyprint&#39;&gt;curl -v  -X GET &#39;https://aiaas.pandorabots.com/bot/APP_ID/BOTNAME?user_key&#x3D;USER_KEY&#39;&lt;/pre&gt;&lt;/p&gt;
     * @param appId Your Application ID (required)
     * @param botname The name of the bot. (required)
     * @param _return If set to zip, a zip file with all bot files will be returned. (optional)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> No response was specified </td><td>  -  </td></tr>
     </table>
     */
    public void listBotFiles(String appId, String botname, String _return) throws ApiException {
        listBotFilesWithHttpInfo(appId, botname, _return);
    }

    /**
     * List of bot files
     * Retrieve a list of a bot&#39;s files. Returns a JSON object with each bot file associated with bot specified.&lt;p&gt;Returns a 404 error code for bot not found. Returns a 401 error code for invalid app_ID, user_key, or referrer filter.&lt;/p&gt;&lt;p&gt;The &lt;code color&#x3D;blue&gt;return&#x3D;zip&lt;/code&gt; option may not behave as expected using Active Docs 1.2&lt;/p&gt;&lt;p&gt;&lt;pre class&#x3D;&#39;prettyprint&#39;&gt;curl -v  -X GET &#39;https://aiaas.pandorabots.com/bot/APP_ID/BOTNAME?user_key&#x3D;USER_KEY&#39;&lt;/pre&gt;&lt;/p&gt;
     * @param appId Your Application ID (required)
     * @param botname The name of the bot. (required)
     * @param _return If set to zip, a zip file with all bot files will be returned. (optional)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> No response was specified </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> listBotFilesWithHttpInfo(String appId, String botname, String _return) throws ApiException {
        okhttp3.Call localVarCall = listBotFilesValidateBeforeCall(appId, botname, _return, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * List of bot files (asynchronously)
     * Retrieve a list of a bot&#39;s files. Returns a JSON object with each bot file associated with bot specified.&lt;p&gt;Returns a 404 error code for bot not found. Returns a 401 error code for invalid app_ID, user_key, or referrer filter.&lt;/p&gt;&lt;p&gt;The &lt;code color&#x3D;blue&gt;return&#x3D;zip&lt;/code&gt; option may not behave as expected using Active Docs 1.2&lt;/p&gt;&lt;p&gt;&lt;pre class&#x3D;&#39;prettyprint&#39;&gt;curl -v  -X GET &#39;https://aiaas.pandorabots.com/bot/APP_ID/BOTNAME?user_key&#x3D;USER_KEY&#39;&lt;/pre&gt;&lt;/p&gt;
     * @param appId Your Application ID (required)
     * @param botname The name of the bot. (required)
     * @param _return If set to zip, a zip file with all bot files will be returned. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> No response was specified </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call listBotFilesAsync(String appId, String botname, String _return, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = listBotFilesValidateBeforeCall(appId, botname, _return, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for listBots
     * @param appId Your Application ID (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> No response was specified </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call listBotsCall(String appId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/bot/{app_id}"
            .replace("{" + "app_id" + "}", localVarApiClient.escapeString(appId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "user_key" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call listBotsValidateBeforeCall(String appId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'appId' is set
        if (appId == null) {
            throw new ApiException("Missing the required parameter 'appId' when calling listBots(Async)");
        }

        return listBotsCall(appId, _callback);

    }

    /**
     * List of bots
     * Retrieve a list of your application&#39;s bots. Response returns JSON object with info for each bot.&lt;p&gt;Returns a 401 error code for invalid app_ID or user_key, or if applicable, invalid referrer.&lt;/p&gt;&lt;p&gt;&lt;pre class&#x3D;&#39;prettyprint&#39;&gt;curl -v  -X GET &#39;https://aiaas.pandorabots.com/bot/APP_ID?user_key&#x3D;USER_KEY&#39;&lt;/pre&gt;&lt;/p&gt;
     * @param appId Your Application ID (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> No response was specified </td><td>  -  </td></tr>
     </table>
     */
    public void listBots(String appId) throws ApiException {
        listBotsWithHttpInfo(appId);
    }

    /**
     * List of bots
     * Retrieve a list of your application&#39;s bots. Response returns JSON object with info for each bot.&lt;p&gt;Returns a 401 error code for invalid app_ID or user_key, or if applicable, invalid referrer.&lt;/p&gt;&lt;p&gt;&lt;pre class&#x3D;&#39;prettyprint&#39;&gt;curl -v  -X GET &#39;https://aiaas.pandorabots.com/bot/APP_ID?user_key&#x3D;USER_KEY&#39;&lt;/pre&gt;&lt;/p&gt;
     * @param appId Your Application ID (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> No response was specified </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> listBotsWithHttpInfo(String appId) throws ApiException {
        okhttp3.Call localVarCall = listBotsValidateBeforeCall(appId, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * List of bots (asynchronously)
     * Retrieve a list of your application&#39;s bots. Response returns JSON object with info for each bot.&lt;p&gt;Returns a 401 error code for invalid app_ID or user_key, or if applicable, invalid referrer.&lt;/p&gt;&lt;p&gt;&lt;pre class&#x3D;&#39;prettyprint&#39;&gt;curl -v  -X GET &#39;https://aiaas.pandorabots.com/bot/APP_ID?user_key&#x3D;USER_KEY&#39;&lt;/pre&gt;&lt;/p&gt;
     * @param appId Your Application ID (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> No response was specified </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call listBotsAsync(String appId, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = listBotsValidateBeforeCall(appId, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for uploadFile1
     * @param appId Your Application ID (required)
     * @param botname Your bot&#39;s name (required)
     * @param fileKind Specify the type of file being uploaded: file (for AIML files), map, substitution, set (required)
     * @param filename Filename to upload, must be named with only lowercase letters and numbers. Note: for non-AIML files, do not include the file extension in the path. (required)
     * @param content Type or Paste in file contents. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> No response was specified </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call uploadFile1Call(String appId, String botname, String fileKind, String filename, String content, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = content;

        // create path and map variables
        String localVarPath = "/bot/{app_id}/{botname}/{file-kind}/{filename}"
            .replace("{" + "app_id" + "}", localVarApiClient.escapeString(appId.toString()))
            .replace("{" + "botname" + "}", localVarApiClient.escapeString(botname.toString()))
            .replace("{" + "file-kind" + "}", localVarApiClient.escapeString(fileKind.toString()))
            .replace("{" + "filename" + "}", localVarApiClient.escapeString(filename.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/xml"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "user_key" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call uploadFile1ValidateBeforeCall(String appId, String botname, String fileKind, String filename, String content, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'appId' is set
        if (appId == null) {
            throw new ApiException("Missing the required parameter 'appId' when calling uploadFile1(Async)");
        }

        // verify the required parameter 'botname' is set
        if (botname == null) {
            throw new ApiException("Missing the required parameter 'botname' when calling uploadFile1(Async)");
        }

        // verify the required parameter 'fileKind' is set
        if (fileKind == null) {
            throw new ApiException("Missing the required parameter 'fileKind' when calling uploadFile1(Async)");
        }

        // verify the required parameter 'filename' is set
        if (filename == null) {
            throw new ApiException("Missing the required parameter 'filename' when calling uploadFile1(Async)");
        }

        // verify the required parameter 'content' is set
        if (content == null) {
            throw new ApiException("Missing the required parameter 'content' when calling uploadFile1(Async)");
        }

        return uploadFile1Call(appId, botname, fileKind, filename, content, _callback);

    }

    /**
     * Upload a bot file (AIML, set, substitution, map)
     * Upload bot personality files to your bot. Files must be named with only lowercase letters and numbers with one of the following extensions: &lt;p&gt;&lt;b&gt;AIML: &lt;/b&gt;Extention - .aiml, file-kind - file&lt;/p&gt;&lt;p&gt;&lt;b&gt;Sets: &lt;/b&gt;Extension - .set, file-kind - set&lt;/p&gt;&lt;p&gt;&lt;b&gt;Maps: &lt;/b&gt;Extension - .map, file-kind - map&lt;/p&gt;&lt;p&gt;&lt;b&gt;Substitutions: &lt;/b&gt;Extension - .substitution, file-kind - substitution&lt;/p&gt;&lt;p&gt;The system will overwrite existing files with the file being uploaded.&lt;/p&gt;&lt;p&gt;If the request is malformed because the file name is invalid or malformed JSON for non-AIML files, a 400 error is returned. For malformed file-kind, a 404 error is returned. For invalid file or botname, a 412 error is returned. &lt;/p&gt;&lt;p&gt;If Active Doc spec is not working with this API, please use the following curl command examples:&lt;/p&gt;&lt;pre class&#x3D;&#39;prettyprint&#39;&gt;&lt;p&gt;curl -v -X PUT &#39;https://aiaas.pandorabots.com/bot/APP_ID/BOTNAME/file/foobot.aiml?user_key&#x3D;USER_KEY&#39;&lt;br/&gt;&amp;nbsp;&amp;nbsp;--data-binary @/home/foo/foobot.aiml&lt;/p&gt;&lt;/pre&gt;&lt;br/&gt;&lt;pre class&#x3D;&#39;prettyprint&#39;&gt;&lt;p&gt;curl -v -X PUT &#39;https://aiaas.pandorabots.com/bot/APP_ID/BOTNAME/set/colors?user_key&#x3D;USER_KEY&#39;&lt;br/&gt;&amp;nbsp;&amp;nbsp;--data-binary @/home/foo/colors.set&lt;/p&gt;&lt;/pre&gt;
     * @param appId Your Application ID (required)
     * @param botname Your bot&#39;s name (required)
     * @param fileKind Specify the type of file being uploaded: file (for AIML files), map, substitution, set (required)
     * @param filename Filename to upload, must be named with only lowercase letters and numbers. Note: for non-AIML files, do not include the file extension in the path. (required)
     * @param content Type or Paste in file contents. (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> No response was specified </td><td>  -  </td></tr>
     </table>
     */
    public void uploadFile1(String appId, String botname, String fileKind, String filename, String content) throws ApiException {
        uploadFile1WithHttpInfo(appId, botname, fileKind, filename, content);
    }

    /**
     * Upload a bot file (AIML, set, substitution, map)
     * Upload bot personality files to your bot. Files must be named with only lowercase letters and numbers with one of the following extensions: &lt;p&gt;&lt;b&gt;AIML: &lt;/b&gt;Extention - .aiml, file-kind - file&lt;/p&gt;&lt;p&gt;&lt;b&gt;Sets: &lt;/b&gt;Extension - .set, file-kind - set&lt;/p&gt;&lt;p&gt;&lt;b&gt;Maps: &lt;/b&gt;Extension - .map, file-kind - map&lt;/p&gt;&lt;p&gt;&lt;b&gt;Substitutions: &lt;/b&gt;Extension - .substitution, file-kind - substitution&lt;/p&gt;&lt;p&gt;The system will overwrite existing files with the file being uploaded.&lt;/p&gt;&lt;p&gt;If the request is malformed because the file name is invalid or malformed JSON for non-AIML files, a 400 error is returned. For malformed file-kind, a 404 error is returned. For invalid file or botname, a 412 error is returned. &lt;/p&gt;&lt;p&gt;If Active Doc spec is not working with this API, please use the following curl command examples:&lt;/p&gt;&lt;pre class&#x3D;&#39;prettyprint&#39;&gt;&lt;p&gt;curl -v -X PUT &#39;https://aiaas.pandorabots.com/bot/APP_ID/BOTNAME/file/foobot.aiml?user_key&#x3D;USER_KEY&#39;&lt;br/&gt;&amp;nbsp;&amp;nbsp;--data-binary @/home/foo/foobot.aiml&lt;/p&gt;&lt;/pre&gt;&lt;br/&gt;&lt;pre class&#x3D;&#39;prettyprint&#39;&gt;&lt;p&gt;curl -v -X PUT &#39;https://aiaas.pandorabots.com/bot/APP_ID/BOTNAME/set/colors?user_key&#x3D;USER_KEY&#39;&lt;br/&gt;&amp;nbsp;&amp;nbsp;--data-binary @/home/foo/colors.set&lt;/p&gt;&lt;/pre&gt;
     * @param appId Your Application ID (required)
     * @param botname Your bot&#39;s name (required)
     * @param fileKind Specify the type of file being uploaded: file (for AIML files), map, substitution, set (required)
     * @param filename Filename to upload, must be named with only lowercase letters and numbers. Note: for non-AIML files, do not include the file extension in the path. (required)
     * @param content Type or Paste in file contents. (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> No response was specified </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> uploadFile1WithHttpInfo(String appId, String botname, String fileKind, String filename, String content) throws ApiException {
        okhttp3.Call localVarCall = uploadFile1ValidateBeforeCall(appId, botname, fileKind, filename, content, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Upload a bot file (AIML, set, substitution, map) (asynchronously)
     * Upload bot personality files to your bot. Files must be named with only lowercase letters and numbers with one of the following extensions: &lt;p&gt;&lt;b&gt;AIML: &lt;/b&gt;Extention - .aiml, file-kind - file&lt;/p&gt;&lt;p&gt;&lt;b&gt;Sets: &lt;/b&gt;Extension - .set, file-kind - set&lt;/p&gt;&lt;p&gt;&lt;b&gt;Maps: &lt;/b&gt;Extension - .map, file-kind - map&lt;/p&gt;&lt;p&gt;&lt;b&gt;Substitutions: &lt;/b&gt;Extension - .substitution, file-kind - substitution&lt;/p&gt;&lt;p&gt;The system will overwrite existing files with the file being uploaded.&lt;/p&gt;&lt;p&gt;If the request is malformed because the file name is invalid or malformed JSON for non-AIML files, a 400 error is returned. For malformed file-kind, a 404 error is returned. For invalid file or botname, a 412 error is returned. &lt;/p&gt;&lt;p&gt;If Active Doc spec is not working with this API, please use the following curl command examples:&lt;/p&gt;&lt;pre class&#x3D;&#39;prettyprint&#39;&gt;&lt;p&gt;curl -v -X PUT &#39;https://aiaas.pandorabots.com/bot/APP_ID/BOTNAME/file/foobot.aiml?user_key&#x3D;USER_KEY&#39;&lt;br/&gt;&amp;nbsp;&amp;nbsp;--data-binary @/home/foo/foobot.aiml&lt;/p&gt;&lt;/pre&gt;&lt;br/&gt;&lt;pre class&#x3D;&#39;prettyprint&#39;&gt;&lt;p&gt;curl -v -X PUT &#39;https://aiaas.pandorabots.com/bot/APP_ID/BOTNAME/set/colors?user_key&#x3D;USER_KEY&#39;&lt;br/&gt;&amp;nbsp;&amp;nbsp;--data-binary @/home/foo/colors.set&lt;/p&gt;&lt;/pre&gt;
     * @param appId Your Application ID (required)
     * @param botname Your bot&#39;s name (required)
     * @param fileKind Specify the type of file being uploaded: file (for AIML files), map, substitution, set (required)
     * @param filename Filename to upload, must be named with only lowercase letters and numbers. Note: for non-AIML files, do not include the file extension in the path. (required)
     * @param content Type or Paste in file contents. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> No response was specified </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call uploadFile1Async(String appId, String botname, String fileKind, String filename, String content, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = uploadFile1ValidateBeforeCall(appId, botname, fileKind, filename, content, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for uploadFile2
     * @param appId Your Application ID (required)
     * @param botname Your bot&#39;s name (required)
     * @param fileKind Specify the type of file being uploaded: pdefaults, properties (required)
     * @param content Type or Paste in file contents. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> No response was specified </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call uploadFile2Call(String appId, String botname, String fileKind, String content, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = content;

        // create path and map variables
        String localVarPath = "/bot/{app_id}/{botname}/{file-kind}"
            .replace("{" + "app_id" + "}", localVarApiClient.escapeString(appId.toString()))
            .replace("{" + "botname" + "}", localVarApiClient.escapeString(botname.toString()))
            .replace("{" + "file-kind" + "}", localVarApiClient.escapeString(fileKind.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/xml"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "user_key" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call uploadFile2ValidateBeforeCall(String appId, String botname, String fileKind, String content, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'appId' is set
        if (appId == null) {
            throw new ApiException("Missing the required parameter 'appId' when calling uploadFile2(Async)");
        }

        // verify the required parameter 'botname' is set
        if (botname == null) {
            throw new ApiException("Missing the required parameter 'botname' when calling uploadFile2(Async)");
        }

        // verify the required parameter 'fileKind' is set
        if (fileKind == null) {
            throw new ApiException("Missing the required parameter 'fileKind' when calling uploadFile2(Async)");
        }

        // verify the required parameter 'content' is set
        if (content == null) {
            throw new ApiException("Missing the required parameter 'content' when calling uploadFile2(Async)");
        }

        return uploadFile2Call(appId, botname, fileKind, content, _callback);

    }

    /**
     * Upload a bot file (pdefaults, properties)
     * Upload bot personality files to your bot. Files must be named with only lowercase letters and numbers with one of the following extensions: &lt;p&gt;&lt;b&gt;Properties: &lt;/b&gt;Extension - .properties, file-kind - properties, No filename required in path&lt;/p&gt;&lt;p&gt;&lt;b&gt;Predicate defaults: &lt;/b&gt;Extension - .pdefaults, file-kind - pdefaults, No filename required in path&lt;/p&gt;&lt;p&gt;The system will overwrite existing files with the file being uploaded.&lt;/p&gt;&lt;p&gt;For malformed JSON in non-AIML files, a 400 error is returned. For malformed file-kind, a 404 error is returned. For invalid file or botname, a 412 error is returned. &lt;/p&gt;&lt;p&gt;If Active Doc spec is not working with this API, please use the following curl command examples:&lt;/p&gt;&lt;pre class&#x3D;&#39;prettyprint&#39;&gt;&lt;p&gt;curl -v -X PUT &#39;https://aiaas.pandorabots.com/bot/APP_ID/BOTNAME/properties?user_key&#x3D;USER_KEY&#39;&lt;br/&gt;&amp;nbsp;&amp;nbsp;--data-binary @/home/foo/foobot.properties&lt;/p&gt;&lt;/pre&gt;
     * @param appId Your Application ID (required)
     * @param botname Your bot&#39;s name (required)
     * @param fileKind Specify the type of file being uploaded: pdefaults, properties (required)
     * @param content Type or Paste in file contents. (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> No response was specified </td><td>  -  </td></tr>
     </table>
     */
    public void uploadFile2(String appId, String botname, String fileKind, String content) throws ApiException {
        uploadFile2WithHttpInfo(appId, botname, fileKind, content);
    }

    /**
     * Upload a bot file (pdefaults, properties)
     * Upload bot personality files to your bot. Files must be named with only lowercase letters and numbers with one of the following extensions: &lt;p&gt;&lt;b&gt;Properties: &lt;/b&gt;Extension - .properties, file-kind - properties, No filename required in path&lt;/p&gt;&lt;p&gt;&lt;b&gt;Predicate defaults: &lt;/b&gt;Extension - .pdefaults, file-kind - pdefaults, No filename required in path&lt;/p&gt;&lt;p&gt;The system will overwrite existing files with the file being uploaded.&lt;/p&gt;&lt;p&gt;For malformed JSON in non-AIML files, a 400 error is returned. For malformed file-kind, a 404 error is returned. For invalid file or botname, a 412 error is returned. &lt;/p&gt;&lt;p&gt;If Active Doc spec is not working with this API, please use the following curl command examples:&lt;/p&gt;&lt;pre class&#x3D;&#39;prettyprint&#39;&gt;&lt;p&gt;curl -v -X PUT &#39;https://aiaas.pandorabots.com/bot/APP_ID/BOTNAME/properties?user_key&#x3D;USER_KEY&#39;&lt;br/&gt;&amp;nbsp;&amp;nbsp;--data-binary @/home/foo/foobot.properties&lt;/p&gt;&lt;/pre&gt;
     * @param appId Your Application ID (required)
     * @param botname Your bot&#39;s name (required)
     * @param fileKind Specify the type of file being uploaded: pdefaults, properties (required)
     * @param content Type or Paste in file contents. (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> No response was specified </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> uploadFile2WithHttpInfo(String appId, String botname, String fileKind, String content) throws ApiException {
        okhttp3.Call localVarCall = uploadFile2ValidateBeforeCall(appId, botname, fileKind, content, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Upload a bot file (pdefaults, properties) (asynchronously)
     * Upload bot personality files to your bot. Files must be named with only lowercase letters and numbers with one of the following extensions: &lt;p&gt;&lt;b&gt;Properties: &lt;/b&gt;Extension - .properties, file-kind - properties, No filename required in path&lt;/p&gt;&lt;p&gt;&lt;b&gt;Predicate defaults: &lt;/b&gt;Extension - .pdefaults, file-kind - pdefaults, No filename required in path&lt;/p&gt;&lt;p&gt;The system will overwrite existing files with the file being uploaded.&lt;/p&gt;&lt;p&gt;For malformed JSON in non-AIML files, a 400 error is returned. For malformed file-kind, a 404 error is returned. For invalid file or botname, a 412 error is returned. &lt;/p&gt;&lt;p&gt;If Active Doc spec is not working with this API, please use the following curl command examples:&lt;/p&gt;&lt;pre class&#x3D;&#39;prettyprint&#39;&gt;&lt;p&gt;curl -v -X PUT &#39;https://aiaas.pandorabots.com/bot/APP_ID/BOTNAME/properties?user_key&#x3D;USER_KEY&#39;&lt;br/&gt;&amp;nbsp;&amp;nbsp;--data-binary @/home/foo/foobot.properties&lt;/p&gt;&lt;/pre&gt;
     * @param appId Your Application ID (required)
     * @param botname Your bot&#39;s name (required)
     * @param fileKind Specify the type of file being uploaded: pdefaults, properties (required)
     * @param content Type or Paste in file contents. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> No response was specified </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call uploadFile2Async(String appId, String botname, String fileKind, String content, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = uploadFile2ValidateBeforeCall(appId, botname, fileKind, content, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
}
