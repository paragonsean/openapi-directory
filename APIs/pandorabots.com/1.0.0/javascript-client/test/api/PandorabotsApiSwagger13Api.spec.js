/**
 * Pandorabots AIaaS
 * AIaaS provides API access to our bot hosting platform and SDKs, allowing developers to easily integrate conversational interfaces into applications.
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', process.cwd()+'/src/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require(process.cwd()+'/src/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.PandorabotsAIaaS);
  }
}(this, function(expect, PandorabotsAIaaS) {
  'use strict';

  var instance;

  beforeEach(function() {
    instance = new PandorabotsAIaaS.PandorabotsApiSwagger13Api();
  });

  var getProperty = function(object, getter, property) {
    // Use getter method if present; otherwise, get the property directly.
    if (typeof object[getter] === 'function')
      return object[getter]();
    else
      return object[property];
  }

  var setProperty = function(object, setter, property, value) {
    // Use setter method if present; otherwise, set the property directly.
    if (typeof object[setter] === 'function')
      object[setter](value);
    else
      object[property] = value;
  }

  describe('PandorabotsApiSwagger13Api', function() {
    describe('atalkBot', function() {
      it('should call atalkBot successfully', function(done) {
        //uncomment below and update the code to test atalkBot
        //instance.atalkBot(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('compileBot', function() {
      it('should call compileBot successfully', function(done) {
        //uncomment below and update the code to test compileBot
        //instance.compileBot(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('createBot', function() {
      it('should call createBot successfully', function(done) {
        //uncomment below and update the code to test createBot
        //instance.createBot(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('debugBot', function() {
      it('should call debugBot successfully', function(done) {
        //uncomment below and update the code to test debugBot
        //instance.debugBot(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('deleteBot', function() {
      it('should call deleteBot successfully', function(done) {
        //uncomment below and update the code to test deleteBot
        //instance.deleteBot(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('deleteBotFile1', function() {
      it('should call deleteBotFile1 successfully', function(done) {
        //uncomment below and update the code to test deleteBotFile1
        //instance.deleteBotFile1(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('deleteBotFile2', function() {
      it('should call deleteBotFile2 successfully', function(done) {
        //uncomment below and update the code to test deleteBotFile2
        //instance.deleteBotFile2(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('getBotFile1', function() {
      it('should call getBotFile1 successfully', function(done) {
        //uncomment below and update the code to test getBotFile1
        //instance.getBotFile1(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('getBotFile2', function() {
      it('should call getBotFile2 successfully', function(done) {
        //uncomment below and update the code to test getBotFile2
        //instance.getBotFile2(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('listBotFiles', function() {
      it('should call listBotFiles successfully', function(done) {
        //uncomment below and update the code to test listBotFiles
        //instance.listBotFiles(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('listBots', function() {
      it('should call listBots successfully', function(done) {
        //uncomment below and update the code to test listBots
        //instance.listBots(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('uploadFile1', function() {
      it('should call uploadFile1 successfully', function(done) {
        //uncomment below and update the code to test uploadFile1
        //instance.uploadFile1(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('uploadFile2', function() {
      it('should call uploadFile2 successfully', function(done) {
        //uncomment below and update the code to test uploadFile2
        //instance.uploadFile2(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
  });

}));
