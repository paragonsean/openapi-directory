/**
 * FastAPI
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 0.1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The Config model module.
 * @module model/Config
 * @version 0.1.0
 */
class Config {
    /**
     * Constructs a new <code>Config</code>.
     * @alias module:model/Config
     * @param providers {Object} 
     * @param topics {Array.<Object>} 
     */
    constructor(providers, topics) { 
        
        Config.initialize(this, providers, topics);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, providers, topics) { 
        obj['providers'] = providers;
        obj['topics'] = topics;
    }

    /**
     * Constructs a <code>Config</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/Config} obj Optional instance to populate.
     * @return {module:model/Config} The populated <code>Config</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new Config();

            if (data.hasOwnProperty('providers')) {
                obj['providers'] = ApiClient.convertToType(data['providers'], Object);
            }
            if (data.hasOwnProperty('topics')) {
                obj['topics'] = ApiClient.convertToType(data['topics'], [Object]);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>Config</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>Config</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of Config.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // ensure the json data is an array
        if (!Array.isArray(data['topics'])) {
            throw new Error("Expected the field `topics` to be an array in the JSON data but got " + data['topics']);
        }

        return true;
    }


}

Config.RequiredProperties = ["providers", "topics"];

/**
 * @member {Object} providers
 */
Config.prototype['providers'] = undefined;

/**
 * @member {Array.<Object>} topics
 */
Config.prototype['topics'] = undefined;






export default Config;

