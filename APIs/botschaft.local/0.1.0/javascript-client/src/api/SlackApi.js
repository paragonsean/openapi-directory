/**
 * FastAPI
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 0.1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import HTTPValidationError from '../model/HTTPValidationError';
import SlackMessageRequest from '../model/SlackMessageRequest';

/**
* Slack service.
* @module api/SlackApi
* @version 0.1.0
*/
export default class SlackApi {

    /**
    * Constructs a new SlackApi. 
    * @alias module:api/SlackApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the slackGetSlackGet operation.
     * @callback module:api/SlackApi~slackGetSlackGetCallback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Slack Get
     * @param {String} channel 
     * @param {Object} opts Optional parameters
     * @param {String} [message] 
     * @param {String} [base64Message] 
     * @param {String} [authorization] 
     * @param {module:api/SlackApi~slackGetSlackGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    slackGetSlackGet(channel, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'channel' is set
      if (channel === undefined || channel === null) {
        throw new Error("Missing the required parameter 'channel' when calling slackGetSlackGet");
      }

      let pathParams = {
      };
      let queryParams = {
        'channel': channel,
        'message': opts['message'],
        'base64_message': opts['base64Message']
      };
      let headerParams = {
        'authorization': opts['authorization']
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Object;
      return this.apiClient.callApi(
        '/slack', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the slackPostSlackPost operation.
     * @callback module:api/SlackApi~slackPostSlackPostCallback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Slack Post
     * @param {module:model/SlackMessageRequest} slackMessageRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [authorization] 
     * @param {module:api/SlackApi~slackPostSlackPostCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    slackPostSlackPost(slackMessageRequest, opts, callback) {
      opts = opts || {};
      let postBody = slackMessageRequest;
      // verify the required parameter 'slackMessageRequest' is set
      if (slackMessageRequest === undefined || slackMessageRequest === null) {
        throw new Error("Missing the required parameter 'slackMessageRequest' when calling slackPostSlackPost");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'authorization': opts['authorization']
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Object;
      return this.apiClient.callApi(
        '/slack', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
