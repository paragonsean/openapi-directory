# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class DiscordMessageRequest(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, base64_message: str=None, channel: str=None, message: str=None):
        """DiscordMessageRequest - a model defined in OpenAPI

        :param base64_message: The base64_message of this DiscordMessageRequest.
        :param channel: The channel of this DiscordMessageRequest.
        :param message: The message of this DiscordMessageRequest.
        """
        self.openapi_types = {
            'base64_message': str,
            'channel': str,
            'message': str
        }

        self.attribute_map = {
            'base64_message': 'base64_message',
            'channel': 'channel',
            'message': 'message'
        }

        self._base64_message = base64_message
        self._channel = channel
        self._message = message

    @classmethod
    def from_dict(cls, dikt: dict) -> 'DiscordMessageRequest':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The DiscordMessageRequest of this DiscordMessageRequest.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def base64_message(self):
        """Gets the base64_message of this DiscordMessageRequest.


        :return: The base64_message of this DiscordMessageRequest.
        :rtype: str
        """
        return self._base64_message

    @base64_message.setter
    def base64_message(self, base64_message):
        """Sets the base64_message of this DiscordMessageRequest.


        :param base64_message: The base64_message of this DiscordMessageRequest.
        :type base64_message: str
        """

        self._base64_message = base64_message

    @property
    def channel(self):
        """Gets the channel of this DiscordMessageRequest.


        :return: The channel of this DiscordMessageRequest.
        :rtype: str
        """
        return self._channel

    @channel.setter
    def channel(self, channel):
        """Sets the channel of this DiscordMessageRequest.


        :param channel: The channel of this DiscordMessageRequest.
        :type channel: str
        """
        if channel is None:
            raise ValueError("Invalid value for `channel`, must not be `None`")

        self._channel = channel

    @property
    def message(self):
        """Gets the message of this DiscordMessageRequest.


        :return: The message of this DiscordMessageRequest.
        :rtype: str
        """
        return self._message

    @message.setter
    def message(self, message):
        """Sets the message of this DiscordMessageRequest.


        :param message: The message of this DiscordMessageRequest.
        :type message: str
        """

        self._message = message
