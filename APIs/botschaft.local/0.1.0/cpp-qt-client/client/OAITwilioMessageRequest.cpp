/**
 * FastAPI
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 0.1.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAITwilioMessageRequest.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAITwilioMessageRequest::OAITwilioMessageRequest(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAITwilioMessageRequest::OAITwilioMessageRequest() {
    this->initializeModel();
}

OAITwilioMessageRequest::~OAITwilioMessageRequest() {}

void OAITwilioMessageRequest::initializeModel() {

    m_base64_message_isSet = false;
    m_base64_message_isValid = false;

    m_message_isSet = false;
    m_message_isValid = false;

    m_to_isSet = false;
    m_to_isValid = false;
}

void OAITwilioMessageRequest::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAITwilioMessageRequest::fromJsonObject(QJsonObject json) {

    m_base64_message_isValid = ::OpenAPI::fromJsonValue(m_base64_message, json[QString("base64_message")]);
    m_base64_message_isSet = !json[QString("base64_message")].isNull() && m_base64_message_isValid;

    m_message_isValid = ::OpenAPI::fromJsonValue(m_message, json[QString("message")]);
    m_message_isSet = !json[QString("message")].isNull() && m_message_isValid;

    m_to_isValid = ::OpenAPI::fromJsonValue(m_to, json[QString("to")]);
    m_to_isSet = !json[QString("to")].isNull() && m_to_isValid;
}

QString OAITwilioMessageRequest::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAITwilioMessageRequest::asJsonObject() const {
    QJsonObject obj;
    if (m_base64_message_isSet) {
        obj.insert(QString("base64_message"), ::OpenAPI::toJsonValue(m_base64_message));
    }
    if (m_message_isSet) {
        obj.insert(QString("message"), ::OpenAPI::toJsonValue(m_message));
    }
    if (m_to_isSet) {
        obj.insert(QString("to"), ::OpenAPI::toJsonValue(m_to));
    }
    return obj;
}

QString OAITwilioMessageRequest::getBase64Message() const {
    return m_base64_message;
}
void OAITwilioMessageRequest::setBase64Message(const QString &base64_message) {
    m_base64_message = base64_message;
    m_base64_message_isSet = true;
}

bool OAITwilioMessageRequest::is_base64_message_Set() const{
    return m_base64_message_isSet;
}

bool OAITwilioMessageRequest::is_base64_message_Valid() const{
    return m_base64_message_isValid;
}

QString OAITwilioMessageRequest::getMessage() const {
    return m_message;
}
void OAITwilioMessageRequest::setMessage(const QString &message) {
    m_message = message;
    m_message_isSet = true;
}

bool OAITwilioMessageRequest::is_message_Set() const{
    return m_message_isSet;
}

bool OAITwilioMessageRequest::is_message_Valid() const{
    return m_message_isValid;
}

QString OAITwilioMessageRequest::getTo() const {
    return m_to;
}
void OAITwilioMessageRequest::setTo(const QString &to) {
    m_to = to;
    m_to_isSet = true;
}

bool OAITwilioMessageRequest::is_to_Set() const{
    return m_to_isSet;
}

bool OAITwilioMessageRequest::is_to_Valid() const{
    return m_to_isValid;
}

bool OAITwilioMessageRequest::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_base64_message_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_message_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_to_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAITwilioMessageRequest::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_to_isValid && true;
}

} // namespace OpenAPI
