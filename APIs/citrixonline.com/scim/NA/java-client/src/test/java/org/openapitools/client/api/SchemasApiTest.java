/*
 * SCIM
 * The SCIM API lets you manage users in your organization. You can then automate the provisioning of product licenses for these users, and they can use your company's Single Sign-On solution through an Identity Provider.
 *
 * The version of the OpenAPI document: N/A
 * Contact: developer-support@citrixonline.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiException;
import org.openapitools.client.model.ResourceSchema;
import org.openapitools.client.model.ServiceProviderConfigs;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for SchemasApi
 */
@Disabled
public class SchemasApiTest {

    private final SchemasApi api = new SchemasApi();

    /**
     * Get Service Provider Configurations
     *
     * Queries service provider configurations. The service provider configurations are defined in SCIM Core Schema (http://www.simplecloud.info/specs/draft-scim-core-schema-01.html#anchor6). This call returns a description, a documentationURL, name, and specURL.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getServiceProviderConfigsTest() throws ApiException {
        String authorization = null;
        ServiceProviderConfigs response = api.getServiceProviderConfigs(authorization);
        // TODO: test validations
    }

    /**
     * Get User Schema
     *
     * Queries the user schema. The user schema is defined in SCIM Core Schema (http://www.simplecloud.info/specs/draft-scim-core-schema-01.html#resource-schema).
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getUserSchemaTest() throws ApiException {
        String authorization = null;
        ResourceSchema response = api.getUserSchema(authorization);
        // TODO: test validations
    }

}
