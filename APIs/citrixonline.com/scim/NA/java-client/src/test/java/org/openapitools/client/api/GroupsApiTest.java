/*
 * SCIM
 * The SCIM API lets you manage users in your organization. You can then automate the provisioning of product licenses for these users, and they can use your company's Single Sign-On solution through an Identity Provider.
 *
 * The version of the OpenAPI document: N/A
 * Contact: developer-support@citrixonline.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiException;
import org.openapitools.client.model.Group;
import org.openapitools.client.model.GroupCollection;
import org.openapitools.client.model.GroupDefinition;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for GroupsApi
 */
@Disabled
public class GroupsApiTest {

    private final GroupsApi api = new GroupsApi();

    /**
     * Create Group
     *
     * Creates a new organization group and adds it to the user domain. Member groups and member users must be in the organization. This call requires the role ROLE_ORG_WRITE.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void createGroupTest() throws ApiException {
        String authorization = null;
        GroupDefinition body = null;
        Group response = api.createGroup(authorization, body);
        // TODO: test validations
    }

    /**
     * Delete Group
     *
     * Deletes a group from the organization (but not from the account). The group must be in the organization. This call requires the role ROLE_ORG_WRITE.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void deleteGroupTest() throws ApiException {
        String authorization = null;
        Long groupKey = null;
        api.deleteGroup(authorization, groupKey);
        // TODO: test validations
    }

    /**
     * Get Group
     *
     * Queries group details in the organization domain. This call requires the role ROLE_ORG_READ.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getGroupTest() throws ApiException {
        String authorization = null;
        Long groupKey = null;
        Group response = api.getGroup(authorization, groupKey);
        // TODO: test validations
    }

    /**
     * Get Groups
     *
     * Queries multiple group identities in the organization domain. Filtering, sorting and pagination are available. This call requires the role ROLE_ORG_READ.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getGroupsTest() throws ApiException {
        String authorization = null;
        String filter = null;
        GroupCollection response = api.getGroups(authorization, filter);
        // TODO: test validations
    }

    /**
     * Replace Group
     *
     * Updates an existing group. The request must include the full group definition. To modify one or more values without sending the full definition, see \&quot;Update Group\&quot;. Member groups and member users must be in the organization. This call requires the role ROLE_ORG_WRITE.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void replaceGroupTest() throws ApiException {
        String authorization = null;
        Long groupKey = null;
        GroupDefinition body = null;
        Group response = api.replaceGroup(authorization, groupKey, body);
        // TODO: test validations
    }

    /**
     * Update Group
     *
     * Updates one or more values of an existing group without sending the full definition. Member groups and member users must be in the organization. This call requires the role ROLE_ORG_WRITE.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void updateGroupTest() throws ApiException {
        String authorization = null;
        Long groupKey = null;
        GroupDefinition body = null;
        Group response = api.updateGroup(authorization, groupKey, body);
        // TODO: test validations
    }

}
