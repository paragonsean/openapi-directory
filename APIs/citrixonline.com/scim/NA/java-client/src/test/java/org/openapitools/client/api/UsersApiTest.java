/*
 * SCIM
 * The SCIM API lets you manage users in your organization. You can then automate the provisioning of product licenses for these users, and they can use your company's Single Sign-On solution through an Identity Provider.
 *
 * The version of the OpenAPI document: N/A
 * Contact: developer-support@citrixonline.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiException;
import org.openapitools.client.model.User;
import org.openapitools.client.model.UserCollection;
import org.openapitools.client.model.UserDefinition;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for UsersApi
 */
@Disabled
public class UsersApiTest {

    private final UsersApi api = new UsersApi();

    /**
     * Create User
     *
     * Creates a new organization user and adds them to the user domain. The user email domain must match an existing organization email domain.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void createUsersTest() throws ApiException {
        String authorization = null;
        UserDefinition body = null;
        User response = api.createUsers(authorization, body);
        // TODO: test validations
    }

    /**
     * Delete User
     *
     * Deletes a user from the organization (but not from the account).
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void deleteUserTest() throws ApiException {
        String authorization = null;
        Long userKey = null;
        api.deleteUser(authorization, userKey);
        // TODO: test validations
    }

    /**
     * Get Current User
     *
     * Queries the identity of the current authenticated user.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getMeTest() throws ApiException {
        String authorization = null;
        User response = api.getMe(authorization);
        // TODO: test validations
    }

    /**
     * Get User
     *
     * Queries user identity in the organization domain.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getUserTest() throws ApiException {
        String authorization = null;
        Long userKey = null;
        User response = api.getUser(authorization, userKey);
        // TODO: test validations
    }

    /**
     * Get Users
     *
     * Queries multiple user identities in the organization domain. Filtering is available.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getUsersTest() throws ApiException {
        String authorization = null;
        String filter = null;
        UserCollection response = api.getUsers(authorization, filter);
        // TODO: test validations
    }

    /**
     * Replace Current User
     *
     * Changes the current authenticated user&#39;s displayName, locale, timezone, username and password. The request must include the full user definition (to modify one or more values without sending the full definition, see Update User). The replaced user email domain must be an existing organization email domain. 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void replaceMeTest() throws ApiException {
        String authorization = null;
        UserDefinition body = null;
        User response = api.replaceMe(authorization, body);
        // TODO: test validations
    }

    /**
     * Replace User
     *
     * Changes an existing user&#39;s displayName, locale, timezone, username and password. The request must include the full user definition (to modify one or more values without sending the full definition, see Update User). The replaced user email domain must be an existing organization email domain.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void replaceUserTest() throws ApiException {
        String authorization = null;
        Long userKey = null;
        UserDefinition body = null;
        User response = api.replaceUser(authorization, userKey, body);
        // TODO: test validations
    }

    /**
     * Update Current User
     *
     * Changes a limited set (or all if you choose) of the current authenticated user&#39;s data. The updated user email domain must be an existing organization email domain. 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void updateMeTest() throws ApiException {
        String authorization = null;
        UserDefinition body = null;
        User response = api.updateMe(authorization, body);
        // TODO: test validations
    }

    /**
     * Update User
     *
     * Changes a limited set (or all if you choose) of the user&#39;s data. The updated user email domain must be an existing organization email domain.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void updateUserTest() throws ApiException {
        String authorization = null;
        Long userKey = null;
        UserDefinition body = null;
        User response = api.updateUser(authorization, userKey, body);
        // TODO: test validations
    }

}
