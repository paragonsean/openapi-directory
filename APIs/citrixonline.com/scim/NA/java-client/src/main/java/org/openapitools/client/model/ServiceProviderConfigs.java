/*
 * SCIM
 * The SCIM API lets you manage users in your organization. You can then automate the provisioning of product licenses for these users, and they can use your company's Single Sign-On solution through an Identity Provider.
 *
 * The version of the OpenAPI document: N/A
 * Contact: developer-support@citrixonline.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import org.openapitools.client.model.AuthenticationSchemes;
import org.openapitools.client.model.Bulk;
import org.openapitools.client.model.ChangePassword;
import org.openapitools.client.model.Etag;
import org.openapitools.client.model.Filter;
import org.openapitools.client.model.Patch;
import org.openapitools.client.model.Sort;
import org.openapitools.client.model.XmlDataFormat;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Represents the Service Provider&#39;s configuration
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:56:55.799005-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class ServiceProviderConfigs {
  public static final String SERIALIZED_NAME_AUTHENTICATION_SCHEMES = "authenticationSchemes";
  @SerializedName(SERIALIZED_NAME_AUTHENTICATION_SCHEMES)
  private AuthenticationSchemes authenticationSchemes;

  public static final String SERIALIZED_NAME_BULK = "bulk";
  @SerializedName(SERIALIZED_NAME_BULK)
  private Bulk bulk;

  public static final String SERIALIZED_NAME_CHANGE_PASSWORD = "changePassword";
  @SerializedName(SERIALIZED_NAME_CHANGE_PASSWORD)
  private ChangePassword changePassword;

  public static final String SERIALIZED_NAME_DOCUMENTATION_URL = "documentationUrl";
  @SerializedName(SERIALIZED_NAME_DOCUMENTATION_URL)
  private String documentationUrl;

  public static final String SERIALIZED_NAME_ETAG = "etag";
  @SerializedName(SERIALIZED_NAME_ETAG)
  private Etag etag;

  public static final String SERIALIZED_NAME_FILTER = "filter";
  @SerializedName(SERIALIZED_NAME_FILTER)
  private Filter filter;

  public static final String SERIALIZED_NAME_PATCH = "patch";
  @SerializedName(SERIALIZED_NAME_PATCH)
  private Patch patch;

  public static final String SERIALIZED_NAME_SORT = "sort";
  @SerializedName(SERIALIZED_NAME_SORT)
  private Sort sort;

  public static final String SERIALIZED_NAME_XML_DATA_FORMAT = "xmlDataFormat";
  @SerializedName(SERIALIZED_NAME_XML_DATA_FORMAT)
  private XmlDataFormat xmlDataFormat;

  public ServiceProviderConfigs() {
  }

  public ServiceProviderConfigs authenticationSchemes(AuthenticationSchemes authenticationSchemes) {
    this.authenticationSchemes = authenticationSchemes;
    return this;
  }

  /**
   * Get authenticationSchemes
   * @return authenticationSchemes
   */
  @javax.annotation.Nonnull
  public AuthenticationSchemes getAuthenticationSchemes() {
    return authenticationSchemes;
  }

  public void setAuthenticationSchemes(AuthenticationSchemes authenticationSchemes) {
    this.authenticationSchemes = authenticationSchemes;
  }


  public ServiceProviderConfigs bulk(Bulk bulk) {
    this.bulk = bulk;
    return this;
  }

  /**
   * Get bulk
   * @return bulk
   */
  @javax.annotation.Nonnull
  public Bulk getBulk() {
    return bulk;
  }

  public void setBulk(Bulk bulk) {
    this.bulk = bulk;
  }


  public ServiceProviderConfigs changePassword(ChangePassword changePassword) {
    this.changePassword = changePassword;
    return this;
  }

  /**
   * Get changePassword
   * @return changePassword
   */
  @javax.annotation.Nonnull
  public ChangePassword getChangePassword() {
    return changePassword;
  }

  public void setChangePassword(ChangePassword changePassword) {
    this.changePassword = changePassword;
  }


  public ServiceProviderConfigs documentationUrl(String documentationUrl) {
    this.documentationUrl = documentationUrl;
    return this;
  }

  /**
   * An HTTP addressable URL pointing to the Service Provider&#39;s help documentation
   * @return documentationUrl
   */
  @javax.annotation.Nonnull
  public String getDocumentationUrl() {
    return documentationUrl;
  }

  public void setDocumentationUrl(String documentationUrl) {
    this.documentationUrl = documentationUrl;
  }


  public ServiceProviderConfigs etag(Etag etag) {
    this.etag = etag;
    return this;
  }

  /**
   * Get etag
   * @return etag
   */
  @javax.annotation.Nonnull
  public Etag getEtag() {
    return etag;
  }

  public void setEtag(Etag etag) {
    this.etag = etag;
  }


  public ServiceProviderConfigs filter(Filter filter) {
    this.filter = filter;
    return this;
  }

  /**
   * Get filter
   * @return filter
   */
  @javax.annotation.Nonnull
  public Filter getFilter() {
    return filter;
  }

  public void setFilter(Filter filter) {
    this.filter = filter;
  }


  public ServiceProviderConfigs patch(Patch patch) {
    this.patch = patch;
    return this;
  }

  /**
   * Get patch
   * @return patch
   */
  @javax.annotation.Nonnull
  public Patch getPatch() {
    return patch;
  }

  public void setPatch(Patch patch) {
    this.patch = patch;
  }


  public ServiceProviderConfigs sort(Sort sort) {
    this.sort = sort;
    return this;
  }

  /**
   * Get sort
   * @return sort
   */
  @javax.annotation.Nonnull
  public Sort getSort() {
    return sort;
  }

  public void setSort(Sort sort) {
    this.sort = sort;
  }


  public ServiceProviderConfigs xmlDataFormat(XmlDataFormat xmlDataFormat) {
    this.xmlDataFormat = xmlDataFormat;
    return this;
  }

  /**
   * Get xmlDataFormat
   * @return xmlDataFormat
   */
  @javax.annotation.Nonnull
  public XmlDataFormat getXmlDataFormat() {
    return xmlDataFormat;
  }

  public void setXmlDataFormat(XmlDataFormat xmlDataFormat) {
    this.xmlDataFormat = xmlDataFormat;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ServiceProviderConfigs serviceProviderConfigs = (ServiceProviderConfigs) o;
    return Objects.equals(this.authenticationSchemes, serviceProviderConfigs.authenticationSchemes) &&
        Objects.equals(this.bulk, serviceProviderConfigs.bulk) &&
        Objects.equals(this.changePassword, serviceProviderConfigs.changePassword) &&
        Objects.equals(this.documentationUrl, serviceProviderConfigs.documentationUrl) &&
        Objects.equals(this.etag, serviceProviderConfigs.etag) &&
        Objects.equals(this.filter, serviceProviderConfigs.filter) &&
        Objects.equals(this.patch, serviceProviderConfigs.patch) &&
        Objects.equals(this.sort, serviceProviderConfigs.sort) &&
        Objects.equals(this.xmlDataFormat, serviceProviderConfigs.xmlDataFormat);
  }

  @Override
  public int hashCode() {
    return Objects.hash(authenticationSchemes, bulk, changePassword, documentationUrl, etag, filter, patch, sort, xmlDataFormat);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ServiceProviderConfigs {\n");
    sb.append("    authenticationSchemes: ").append(toIndentedString(authenticationSchemes)).append("\n");
    sb.append("    bulk: ").append(toIndentedString(bulk)).append("\n");
    sb.append("    changePassword: ").append(toIndentedString(changePassword)).append("\n");
    sb.append("    documentationUrl: ").append(toIndentedString(documentationUrl)).append("\n");
    sb.append("    etag: ").append(toIndentedString(etag)).append("\n");
    sb.append("    filter: ").append(toIndentedString(filter)).append("\n");
    sb.append("    patch: ").append(toIndentedString(patch)).append("\n");
    sb.append("    sort: ").append(toIndentedString(sort)).append("\n");
    sb.append("    xmlDataFormat: ").append(toIndentedString(xmlDataFormat)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("authenticationSchemes");
    openapiFields.add("bulk");
    openapiFields.add("changePassword");
    openapiFields.add("documentationUrl");
    openapiFields.add("etag");
    openapiFields.add("filter");
    openapiFields.add("patch");
    openapiFields.add("sort");
    openapiFields.add("xmlDataFormat");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("authenticationSchemes");
    openapiRequiredFields.add("bulk");
    openapiRequiredFields.add("changePassword");
    openapiRequiredFields.add("documentationUrl");
    openapiRequiredFields.add("etag");
    openapiRequiredFields.add("filter");
    openapiRequiredFields.add("patch");
    openapiRequiredFields.add("sort");
    openapiRequiredFields.add("xmlDataFormat");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to ServiceProviderConfigs
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!ServiceProviderConfigs.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in ServiceProviderConfigs is not found in the empty JSON string", ServiceProviderConfigs.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!ServiceProviderConfigs.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `ServiceProviderConfigs` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : ServiceProviderConfigs.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the required field `authenticationSchemes`
      AuthenticationSchemes.validateJsonElement(jsonObj.get("authenticationSchemes"));
      // validate the required field `bulk`
      Bulk.validateJsonElement(jsonObj.get("bulk"));
      // validate the required field `changePassword`
      ChangePassword.validateJsonElement(jsonObj.get("changePassword"));
      if (!jsonObj.get("documentationUrl").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `documentationUrl` to be a primitive type in the JSON string but got `%s`", jsonObj.get("documentationUrl").toString()));
      }
      // validate the required field `etag`
      Etag.validateJsonElement(jsonObj.get("etag"));
      // validate the required field `filter`
      Filter.validateJsonElement(jsonObj.get("filter"));
      // validate the required field `patch`
      Patch.validateJsonElement(jsonObj.get("patch"));
      // validate the required field `sort`
      Sort.validateJsonElement(jsonObj.get("sort"));
      // validate the required field `xmlDataFormat`
      XmlDataFormat.validateJsonElement(jsonObj.get("xmlDataFormat"));
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!ServiceProviderConfigs.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'ServiceProviderConfigs' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<ServiceProviderConfigs> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(ServiceProviderConfigs.class));

       return (TypeAdapter<T>) new TypeAdapter<ServiceProviderConfigs>() {
           @Override
           public void write(JsonWriter out, ServiceProviderConfigs value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public ServiceProviderConfigs read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of ServiceProviderConfigs given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of ServiceProviderConfigs
   * @throws IOException if the JSON string is invalid with respect to ServiceProviderConfigs
   */
  public static ServiceProviderConfigs fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, ServiceProviderConfigs.class);
  }

  /**
   * Convert an instance of ServiceProviderConfigs to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

