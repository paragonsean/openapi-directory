/*
 * SCIM
 * The SCIM API lets you manage users in your organization. You can then automate the provisioning of product licenses for these users, and they can use your company's Single Sign-On solution through an Identity Provider.
 *
 * The version of the OpenAPI document: N/A
 * Contact: developer-support@citrixonline.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.SchemaSubAttribute;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Describes a resource attribute
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:56:55.799005-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class SchemaAttribute {
  public static final String SERIALIZED_NAME_CASE_EXACT = "caseExact";
  @SerializedName(SERIALIZED_NAME_CASE_EXACT)
  private Boolean caseExact;

  public static final String SERIALIZED_NAME_DESCRIPTION = "description";
  @SerializedName(SERIALIZED_NAME_DESCRIPTION)
  private String description;

  public static final String SERIALIZED_NAME_MULTI_VALUED = "multiValued";
  @SerializedName(SERIALIZED_NAME_MULTI_VALUED)
  private Boolean multiValued;

  public static final String SERIALIZED_NAME_NAME = "name";
  @SerializedName(SERIALIZED_NAME_NAME)
  private String name;

  public static final String SERIALIZED_NAME_READ_ONLY = "readOnly";
  @SerializedName(SERIALIZED_NAME_READ_ONLY)
  private Boolean readOnly;

  public static final String SERIALIZED_NAME_REQUIRED = "required";
  @SerializedName(SERIALIZED_NAME_REQUIRED)
  private Boolean required;

  public static final String SERIALIZED_NAME_SCHEMA = "schema";
  @SerializedName(SERIALIZED_NAME_SCHEMA)
  private String schema;

  public static final String SERIALIZED_NAME_SUB_ATTRIBUTES = "subAttributes";
  @SerializedName(SERIALIZED_NAME_SUB_ATTRIBUTES)
  private List<SchemaSubAttribute> subAttributes = new ArrayList<>();

  public static final String SERIALIZED_NAME_TYPE = "type";
  @SerializedName(SERIALIZED_NAME_TYPE)
  private String type;

  public SchemaAttribute() {
  }

  public SchemaAttribute caseExact(Boolean caseExact) {
    this.caseExact = caseExact;
    return this;
  }

  /**
   * Indicates whether the attribute is case sensitive
   * @return caseExact
   */
  @javax.annotation.Nonnull
  public Boolean getCaseExact() {
    return caseExact;
  }

  public void setCaseExact(Boolean caseExact) {
    this.caseExact = caseExact;
  }


  public SchemaAttribute description(String description) {
    this.description = description;
    return this;
  }

  /**
   * The attribute&#39;s description
   * @return description
   */
  @javax.annotation.Nonnull
  public String getDescription() {
    return description;
  }

  public void setDescription(String description) {
    this.description = description;
  }


  public SchemaAttribute multiValued(Boolean multiValued) {
    this.multiValued = multiValued;
    return this;
  }

  /**
   * Indicates whether the attribute can have multiple values
   * @return multiValued
   */
  @javax.annotation.Nonnull
  public Boolean getMultiValued() {
    return multiValued;
  }

  public void setMultiValued(Boolean multiValued) {
    this.multiValued = multiValued;
  }


  public SchemaAttribute name(String name) {
    this.name = name;
    return this;
  }

  /**
   * The attribute&#39;s name
   * @return name
   */
  @javax.annotation.Nonnull
  public String getName() {
    return name;
  }

  public void setName(String name) {
    this.name = name;
  }


  public SchemaAttribute readOnly(Boolean readOnly) {
    this.readOnly = readOnly;
    return this;
  }

  /**
   * Indicates whether the attribute is mutable
   * @return readOnly
   */
  @javax.annotation.Nonnull
  public Boolean getReadOnly() {
    return readOnly;
  }

  public void setReadOnly(Boolean readOnly) {
    this.readOnly = readOnly;
  }


  public SchemaAttribute required(Boolean required) {
    this.required = required;
    return this;
  }

  /**
   * Indicates whether the attribute is required
   * @return required
   */
  @javax.annotation.Nonnull
  public Boolean getRequired() {
    return required;
  }

  public void setRequired(Boolean required) {
    this.required = required;
  }


  public SchemaAttribute schema(String schema) {
    this.schema = schema;
    return this;
  }

  /**
   * The attribute&#39;s associated scheme, e.g. urn:scim:schemas:core:1.0
   * @return schema
   */
  @javax.annotation.Nonnull
  public String getSchema() {
    return schema;
  }

  public void setSchema(String schema) {
    this.schema = schema;
  }


  public SchemaAttribute subAttributes(List<SchemaSubAttribute> subAttributes) {
    this.subAttributes = subAttributes;
    return this;
  }

  public SchemaAttribute addSubAttributesItem(SchemaSubAttribute subAttributesItem) {
    if (this.subAttributes == null) {
      this.subAttributes = new ArrayList<>();
    }
    this.subAttributes.add(subAttributesItem);
    return this;
  }

  /**
   * The attribute&#39;s potential sub-attributes
   * @return subAttributes
   */
  @javax.annotation.Nullable
  public List<SchemaSubAttribute> getSubAttributes() {
    return subAttributes;
  }

  public void setSubAttributes(List<SchemaSubAttribute> subAttributes) {
    this.subAttributes = subAttributes;
  }


  public SchemaAttribute type(String type) {
    this.type = type;
    return this;
  }

  /**
   * The attribute&#39;s data type, e.g. String
   * @return type
   */
  @javax.annotation.Nonnull
  public String getType() {
    return type;
  }

  public void setType(String type) {
    this.type = type;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    SchemaAttribute schemaAttribute = (SchemaAttribute) o;
    return Objects.equals(this.caseExact, schemaAttribute.caseExact) &&
        Objects.equals(this.description, schemaAttribute.description) &&
        Objects.equals(this.multiValued, schemaAttribute.multiValued) &&
        Objects.equals(this.name, schemaAttribute.name) &&
        Objects.equals(this.readOnly, schemaAttribute.readOnly) &&
        Objects.equals(this.required, schemaAttribute.required) &&
        Objects.equals(this.schema, schemaAttribute.schema) &&
        Objects.equals(this.subAttributes, schemaAttribute.subAttributes) &&
        Objects.equals(this.type, schemaAttribute.type);
  }

  @Override
  public int hashCode() {
    return Objects.hash(caseExact, description, multiValued, name, readOnly, required, schema, subAttributes, type);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class SchemaAttribute {\n");
    sb.append("    caseExact: ").append(toIndentedString(caseExact)).append("\n");
    sb.append("    description: ").append(toIndentedString(description)).append("\n");
    sb.append("    multiValued: ").append(toIndentedString(multiValued)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    readOnly: ").append(toIndentedString(readOnly)).append("\n");
    sb.append("    required: ").append(toIndentedString(required)).append("\n");
    sb.append("    schema: ").append(toIndentedString(schema)).append("\n");
    sb.append("    subAttributes: ").append(toIndentedString(subAttributes)).append("\n");
    sb.append("    type: ").append(toIndentedString(type)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("caseExact");
    openapiFields.add("description");
    openapiFields.add("multiValued");
    openapiFields.add("name");
    openapiFields.add("readOnly");
    openapiFields.add("required");
    openapiFields.add("schema");
    openapiFields.add("subAttributes");
    openapiFields.add("type");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("caseExact");
    openapiRequiredFields.add("description");
    openapiRequiredFields.add("multiValued");
    openapiRequiredFields.add("name");
    openapiRequiredFields.add("readOnly");
    openapiRequiredFields.add("required");
    openapiRequiredFields.add("schema");
    openapiRequiredFields.add("type");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to SchemaAttribute
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!SchemaAttribute.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in SchemaAttribute is not found in the empty JSON string", SchemaAttribute.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!SchemaAttribute.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `SchemaAttribute` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : SchemaAttribute.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if (!jsonObj.get("description").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `description` to be a primitive type in the JSON string but got `%s`", jsonObj.get("description").toString()));
      }
      if (!jsonObj.get("name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("name").toString()));
      }
      if (!jsonObj.get("schema").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `schema` to be a primitive type in the JSON string but got `%s`", jsonObj.get("schema").toString()));
      }
      if (jsonObj.get("subAttributes") != null && !jsonObj.get("subAttributes").isJsonNull()) {
        JsonArray jsonArraysubAttributes = jsonObj.getAsJsonArray("subAttributes");
        if (jsonArraysubAttributes != null) {
          // ensure the json data is an array
          if (!jsonObj.get("subAttributes").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `subAttributes` to be an array in the JSON string but got `%s`", jsonObj.get("subAttributes").toString()));
          }

          // validate the optional field `subAttributes` (array)
          for (int i = 0; i < jsonArraysubAttributes.size(); i++) {
            SchemaSubAttribute.validateJsonElement(jsonArraysubAttributes.get(i));
          };
        }
      }
      if (!jsonObj.get("type").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `type` to be a primitive type in the JSON string but got `%s`", jsonObj.get("type").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!SchemaAttribute.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'SchemaAttribute' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<SchemaAttribute> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(SchemaAttribute.class));

       return (TypeAdapter<T>) new TypeAdapter<SchemaAttribute>() {
           @Override
           public void write(JsonWriter out, SchemaAttribute value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public SchemaAttribute read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of SchemaAttribute given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of SchemaAttribute
   * @throws IOException if the JSON string is invalid with respect to SchemaAttribute
   */
  public static SchemaAttribute fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, SchemaAttribute.class);
  }

  /**
   * Convert an instance of SchemaAttribute to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

