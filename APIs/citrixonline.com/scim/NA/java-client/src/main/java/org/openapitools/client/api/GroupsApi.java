/*
 * SCIM
 * The SCIM API lets you manage users in your organization. You can then automate the provisioning of product licenses for these users, and they can use your company's Single Sign-On solution through an Identity Provider.
 *
 * The version of the OpenAPI document: N/A
 * Contact: developer-support@citrixonline.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiCallback;
import org.openapitools.client.ApiClient;
import org.openapitools.client.ApiException;
import org.openapitools.client.ApiResponse;
import org.openapitools.client.Configuration;
import org.openapitools.client.Pair;
import org.openapitools.client.ProgressRequestBody;
import org.openapitools.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import org.openapitools.client.model.Group;
import org.openapitools.client.model.GroupCollection;
import org.openapitools.client.model.GroupDefinition;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class GroupsApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public GroupsApi() {
        this(Configuration.getDefaultApiClient());
    }

    public GroupsApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for createGroup
     * @param authorization Access token prefixed with &#39;Bearer &#39;, e.g. &#39;Bearer 123456abcdef&#39; (required)
     * @param body The details of the group to create (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> The group has been created </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Possible reasons are:&lt;br /&gt;The displayName field is not set&lt;br /&gt;The displayName field is malformed&lt;br /&gt;The displayName field exceeds 128 characters&lt;br /&gt;The members array exceeds 100 elements&lt;br /&gt; </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Client is not sufficiently authorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Invalid token passed </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> The displayName is already in use within the organization </td><td>  -  </td></tr>
        <tr><td> 502 </td><td> An authentication or account gateway error occurred </td><td>  -  </td></tr>
        <tr><td> 504 </td><td> An authentication or account, or gateway timeout occurred. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call createGroupCall(String authorization, GroupDefinition body, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = body;

        // create path and map variables
        String localVarPath = "/Groups";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (authorization != null) {
            localVarHeaderParams.put("Authorization", localVarApiClient.parameterToString(authorization));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call createGroupValidateBeforeCall(String authorization, GroupDefinition body, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'authorization' is set
        if (authorization == null) {
            throw new ApiException("Missing the required parameter 'authorization' when calling createGroup(Async)");
        }

        // verify the required parameter 'body' is set
        if (body == null) {
            throw new ApiException("Missing the required parameter 'body' when calling createGroup(Async)");
        }

        return createGroupCall(authorization, body, _callback);

    }

    /**
     * Create Group
     * Creates a new organization group and adds it to the user domain. Member groups and member users must be in the organization. This call requires the role ROLE_ORG_WRITE.
     * @param authorization Access token prefixed with &#39;Bearer &#39;, e.g. &#39;Bearer 123456abcdef&#39; (required)
     * @param body The details of the group to create (required)
     * @return Group
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> The group has been created </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Possible reasons are:&lt;br /&gt;The displayName field is not set&lt;br /&gt;The displayName field is malformed&lt;br /&gt;The displayName field exceeds 128 characters&lt;br /&gt;The members array exceeds 100 elements&lt;br /&gt; </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Client is not sufficiently authorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Invalid token passed </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> The displayName is already in use within the organization </td><td>  -  </td></tr>
        <tr><td> 502 </td><td> An authentication or account gateway error occurred </td><td>  -  </td></tr>
        <tr><td> 504 </td><td> An authentication or account, or gateway timeout occurred. </td><td>  -  </td></tr>
     </table>
     */
    public Group createGroup(String authorization, GroupDefinition body) throws ApiException {
        ApiResponse<Group> localVarResp = createGroupWithHttpInfo(authorization, body);
        return localVarResp.getData();
    }

    /**
     * Create Group
     * Creates a new organization group and adds it to the user domain. Member groups and member users must be in the organization. This call requires the role ROLE_ORG_WRITE.
     * @param authorization Access token prefixed with &#39;Bearer &#39;, e.g. &#39;Bearer 123456abcdef&#39; (required)
     * @param body The details of the group to create (required)
     * @return ApiResponse&lt;Group&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> The group has been created </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Possible reasons are:&lt;br /&gt;The displayName field is not set&lt;br /&gt;The displayName field is malformed&lt;br /&gt;The displayName field exceeds 128 characters&lt;br /&gt;The members array exceeds 100 elements&lt;br /&gt; </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Client is not sufficiently authorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Invalid token passed </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> The displayName is already in use within the organization </td><td>  -  </td></tr>
        <tr><td> 502 </td><td> An authentication or account gateway error occurred </td><td>  -  </td></tr>
        <tr><td> 504 </td><td> An authentication or account, or gateway timeout occurred. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Group> createGroupWithHttpInfo(String authorization, GroupDefinition body) throws ApiException {
        okhttp3.Call localVarCall = createGroupValidateBeforeCall(authorization, body, null);
        Type localVarReturnType = new TypeToken<Group>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Create Group (asynchronously)
     * Creates a new organization group and adds it to the user domain. Member groups and member users must be in the organization. This call requires the role ROLE_ORG_WRITE.
     * @param authorization Access token prefixed with &#39;Bearer &#39;, e.g. &#39;Bearer 123456abcdef&#39; (required)
     * @param body The details of the group to create (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> The group has been created </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Possible reasons are:&lt;br /&gt;The displayName field is not set&lt;br /&gt;The displayName field is malformed&lt;br /&gt;The displayName field exceeds 128 characters&lt;br /&gt;The members array exceeds 100 elements&lt;br /&gt; </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Client is not sufficiently authorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Invalid token passed </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> The displayName is already in use within the organization </td><td>  -  </td></tr>
        <tr><td> 502 </td><td> An authentication or account gateway error occurred </td><td>  -  </td></tr>
        <tr><td> 504 </td><td> An authentication or account, or gateway timeout occurred. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call createGroupAsync(String authorization, GroupDefinition body, final ApiCallback<Group> _callback) throws ApiException {

        okhttp3.Call localVarCall = createGroupValidateBeforeCall(authorization, body, _callback);
        Type localVarReturnType = new TypeToken<Group>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for deleteGroup
     * @param authorization Access token prefixed with &#39;Bearer &#39;, e.g. &#39;Bearer 123456abcdef&#39; (required)
     * @param groupKey The key of the group to query. The group must be in the organization domain (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The request has succeeded </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Client is not sufficiently authorized or group does not exist in organization </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Invalid token passed </td><td>  -  </td></tr>
        <tr><td> 502 </td><td> Authentication or account gateway error occurred </td><td>  -  </td></tr>
        <tr><td> 504 </td><td> Authentication or account gateway timeout occurred </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteGroupCall(String authorization, Long groupKey, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/Groups/{groupKey}"
            .replace("{" + "groupKey" + "}", localVarApiClient.escapeString(groupKey.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (authorization != null) {
            localVarHeaderParams.put("Authorization", localVarApiClient.parameterToString(authorization));
        }

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call deleteGroupValidateBeforeCall(String authorization, Long groupKey, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'authorization' is set
        if (authorization == null) {
            throw new ApiException("Missing the required parameter 'authorization' when calling deleteGroup(Async)");
        }

        // verify the required parameter 'groupKey' is set
        if (groupKey == null) {
            throw new ApiException("Missing the required parameter 'groupKey' when calling deleteGroup(Async)");
        }

        return deleteGroupCall(authorization, groupKey, _callback);

    }

    /**
     * Delete Group
     * Deletes a group from the organization (but not from the account). The group must be in the organization. This call requires the role ROLE_ORG_WRITE.
     * @param authorization Access token prefixed with &#39;Bearer &#39;, e.g. &#39;Bearer 123456abcdef&#39; (required)
     * @param groupKey The key of the group to query. The group must be in the organization domain (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The request has succeeded </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Client is not sufficiently authorized or group does not exist in organization </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Invalid token passed </td><td>  -  </td></tr>
        <tr><td> 502 </td><td> Authentication or account gateway error occurred </td><td>  -  </td></tr>
        <tr><td> 504 </td><td> Authentication or account gateway timeout occurred </td><td>  -  </td></tr>
     </table>
     */
    public void deleteGroup(String authorization, Long groupKey) throws ApiException {
        deleteGroupWithHttpInfo(authorization, groupKey);
    }

    /**
     * Delete Group
     * Deletes a group from the organization (but not from the account). The group must be in the organization. This call requires the role ROLE_ORG_WRITE.
     * @param authorization Access token prefixed with &#39;Bearer &#39;, e.g. &#39;Bearer 123456abcdef&#39; (required)
     * @param groupKey The key of the group to query. The group must be in the organization domain (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The request has succeeded </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Client is not sufficiently authorized or group does not exist in organization </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Invalid token passed </td><td>  -  </td></tr>
        <tr><td> 502 </td><td> Authentication or account gateway error occurred </td><td>  -  </td></tr>
        <tr><td> 504 </td><td> Authentication or account gateway timeout occurred </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> deleteGroupWithHttpInfo(String authorization, Long groupKey) throws ApiException {
        okhttp3.Call localVarCall = deleteGroupValidateBeforeCall(authorization, groupKey, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Delete Group (asynchronously)
     * Deletes a group from the organization (but not from the account). The group must be in the organization. This call requires the role ROLE_ORG_WRITE.
     * @param authorization Access token prefixed with &#39;Bearer &#39;, e.g. &#39;Bearer 123456abcdef&#39; (required)
     * @param groupKey The key of the group to query. The group must be in the organization domain (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The request has succeeded </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Client is not sufficiently authorized or group does not exist in organization </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Invalid token passed </td><td>  -  </td></tr>
        <tr><td> 502 </td><td> Authentication or account gateway error occurred </td><td>  -  </td></tr>
        <tr><td> 504 </td><td> Authentication or account gateway timeout occurred </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteGroupAsync(String authorization, Long groupKey, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = deleteGroupValidateBeforeCall(authorization, groupKey, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for getGroup
     * @param authorization Access token prefixed with &#39;Bearer &#39;, e.g. &#39;Bearer 123456abcdef&#39; (required)
     * @param groupKey The key of the group to query. The group must be in the organization domain (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The request has succeeded </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Client is not sufficiently authorized or group does not exist in organization </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Invalid token passed </td><td>  -  </td></tr>
        <tr><td> 502 </td><td> Authentication or account gateway error occurred </td><td>  -  </td></tr>
        <tr><td> 504 </td><td> Authentication or account gateway timeout occurred </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getGroupCall(String authorization, Long groupKey, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/Groups/{groupKey}"
            .replace("{" + "groupKey" + "}", localVarApiClient.escapeString(groupKey.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (authorization != null) {
            localVarHeaderParams.put("Authorization", localVarApiClient.parameterToString(authorization));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getGroupValidateBeforeCall(String authorization, Long groupKey, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'authorization' is set
        if (authorization == null) {
            throw new ApiException("Missing the required parameter 'authorization' when calling getGroup(Async)");
        }

        // verify the required parameter 'groupKey' is set
        if (groupKey == null) {
            throw new ApiException("Missing the required parameter 'groupKey' when calling getGroup(Async)");
        }

        return getGroupCall(authorization, groupKey, _callback);

    }

    /**
     * Get Group
     * Queries group details in the organization domain. This call requires the role ROLE_ORG_READ.
     * @param authorization Access token prefixed with &#39;Bearer &#39;, e.g. &#39;Bearer 123456abcdef&#39; (required)
     * @param groupKey The key of the group to query. The group must be in the organization domain (required)
     * @return Group
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The request has succeeded </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Client is not sufficiently authorized or group does not exist in organization </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Invalid token passed </td><td>  -  </td></tr>
        <tr><td> 502 </td><td> Authentication or account gateway error occurred </td><td>  -  </td></tr>
        <tr><td> 504 </td><td> Authentication or account gateway timeout occurred </td><td>  -  </td></tr>
     </table>
     */
    public Group getGroup(String authorization, Long groupKey) throws ApiException {
        ApiResponse<Group> localVarResp = getGroupWithHttpInfo(authorization, groupKey);
        return localVarResp.getData();
    }

    /**
     * Get Group
     * Queries group details in the organization domain. This call requires the role ROLE_ORG_READ.
     * @param authorization Access token prefixed with &#39;Bearer &#39;, e.g. &#39;Bearer 123456abcdef&#39; (required)
     * @param groupKey The key of the group to query. The group must be in the organization domain (required)
     * @return ApiResponse&lt;Group&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The request has succeeded </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Client is not sufficiently authorized or group does not exist in organization </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Invalid token passed </td><td>  -  </td></tr>
        <tr><td> 502 </td><td> Authentication or account gateway error occurred </td><td>  -  </td></tr>
        <tr><td> 504 </td><td> Authentication or account gateway timeout occurred </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Group> getGroupWithHttpInfo(String authorization, Long groupKey) throws ApiException {
        okhttp3.Call localVarCall = getGroupValidateBeforeCall(authorization, groupKey, null);
        Type localVarReturnType = new TypeToken<Group>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get Group (asynchronously)
     * Queries group details in the organization domain. This call requires the role ROLE_ORG_READ.
     * @param authorization Access token prefixed with &#39;Bearer &#39;, e.g. &#39;Bearer 123456abcdef&#39; (required)
     * @param groupKey The key of the group to query. The group must be in the organization domain (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The request has succeeded </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Client is not sufficiently authorized or group does not exist in organization </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Invalid token passed </td><td>  -  </td></tr>
        <tr><td> 502 </td><td> Authentication or account gateway error occurred </td><td>  -  </td></tr>
        <tr><td> 504 </td><td> Authentication or account gateway timeout occurred </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getGroupAsync(String authorization, Long groupKey, final ApiCallback<Group> _callback) throws ApiException {

        okhttp3.Call localVarCall = getGroupValidateBeforeCall(authorization, groupKey, _callback);
        Type localVarReturnType = new TypeToken<Group>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getGroups
     * @param authorization Access token prefixed with &#39;Bearer &#39;, e.g. &#39;Bearer 123456abcdef&#39; (required)
     * @param filter  Without a filter, all groups are returned. The filter parameter must be a properly formed SCIM filter using the operator \&quot;eq\&quot; (equals), \&quot;sw\&quot; (starts with), or \&quot;co\&quot; (contains). The filter works for the displayName attribute. Sorting and pagination are supported. For example, GET /Groups?filter&#x3D;displayName%20eq%20%22Engineering%22&amp;sortBy&#x3D;displayName&amp;sortOrder&#x3D;ascending&amp;count&#x3D;50&amp;startIndex&#x3D;51 (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The request has succeeded </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid filter syntax </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Client is not sufficiently authorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Invalid token passed </td><td>  -  </td></tr>
        <tr><td> 502 </td><td> Authentication or account gateway error occurred </td><td>  -  </td></tr>
        <tr><td> 504 </td><td> Authentication or account gateway timeout occurred </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getGroupsCall(String authorization, String filter, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/Groups";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (filter != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("filter", filter));
        }

        if (authorization != null) {
            localVarHeaderParams.put("Authorization", localVarApiClient.parameterToString(authorization));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getGroupsValidateBeforeCall(String authorization, String filter, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'authorization' is set
        if (authorization == null) {
            throw new ApiException("Missing the required parameter 'authorization' when calling getGroups(Async)");
        }

        return getGroupsCall(authorization, filter, _callback);

    }

    /**
     * Get Groups
     * Queries multiple group identities in the organization domain. Filtering, sorting and pagination are available. This call requires the role ROLE_ORG_READ.
     * @param authorization Access token prefixed with &#39;Bearer &#39;, e.g. &#39;Bearer 123456abcdef&#39; (required)
     * @param filter  Without a filter, all groups are returned. The filter parameter must be a properly formed SCIM filter using the operator \&quot;eq\&quot; (equals), \&quot;sw\&quot; (starts with), or \&quot;co\&quot; (contains). The filter works for the displayName attribute. Sorting and pagination are supported. For example, GET /Groups?filter&#x3D;displayName%20eq%20%22Engineering%22&amp;sortBy&#x3D;displayName&amp;sortOrder&#x3D;ascending&amp;count&#x3D;50&amp;startIndex&#x3D;51 (optional)
     * @return GroupCollection
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The request has succeeded </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid filter syntax </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Client is not sufficiently authorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Invalid token passed </td><td>  -  </td></tr>
        <tr><td> 502 </td><td> Authentication or account gateway error occurred </td><td>  -  </td></tr>
        <tr><td> 504 </td><td> Authentication or account gateway timeout occurred </td><td>  -  </td></tr>
     </table>
     */
    public GroupCollection getGroups(String authorization, String filter) throws ApiException {
        ApiResponse<GroupCollection> localVarResp = getGroupsWithHttpInfo(authorization, filter);
        return localVarResp.getData();
    }

    /**
     * Get Groups
     * Queries multiple group identities in the organization domain. Filtering, sorting and pagination are available. This call requires the role ROLE_ORG_READ.
     * @param authorization Access token prefixed with &#39;Bearer &#39;, e.g. &#39;Bearer 123456abcdef&#39; (required)
     * @param filter  Without a filter, all groups are returned. The filter parameter must be a properly formed SCIM filter using the operator \&quot;eq\&quot; (equals), \&quot;sw\&quot; (starts with), or \&quot;co\&quot; (contains). The filter works for the displayName attribute. Sorting and pagination are supported. For example, GET /Groups?filter&#x3D;displayName%20eq%20%22Engineering%22&amp;sortBy&#x3D;displayName&amp;sortOrder&#x3D;ascending&amp;count&#x3D;50&amp;startIndex&#x3D;51 (optional)
     * @return ApiResponse&lt;GroupCollection&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The request has succeeded </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid filter syntax </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Client is not sufficiently authorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Invalid token passed </td><td>  -  </td></tr>
        <tr><td> 502 </td><td> Authentication or account gateway error occurred </td><td>  -  </td></tr>
        <tr><td> 504 </td><td> Authentication or account gateway timeout occurred </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<GroupCollection> getGroupsWithHttpInfo(String authorization, String filter) throws ApiException {
        okhttp3.Call localVarCall = getGroupsValidateBeforeCall(authorization, filter, null);
        Type localVarReturnType = new TypeToken<GroupCollection>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get Groups (asynchronously)
     * Queries multiple group identities in the organization domain. Filtering, sorting and pagination are available. This call requires the role ROLE_ORG_READ.
     * @param authorization Access token prefixed with &#39;Bearer &#39;, e.g. &#39;Bearer 123456abcdef&#39; (required)
     * @param filter  Without a filter, all groups are returned. The filter parameter must be a properly formed SCIM filter using the operator \&quot;eq\&quot; (equals), \&quot;sw\&quot; (starts with), or \&quot;co\&quot; (contains). The filter works for the displayName attribute. Sorting and pagination are supported. For example, GET /Groups?filter&#x3D;displayName%20eq%20%22Engineering%22&amp;sortBy&#x3D;displayName&amp;sortOrder&#x3D;ascending&amp;count&#x3D;50&amp;startIndex&#x3D;51 (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The request has succeeded </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid filter syntax </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Client is not sufficiently authorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Invalid token passed </td><td>  -  </td></tr>
        <tr><td> 502 </td><td> Authentication or account gateway error occurred </td><td>  -  </td></tr>
        <tr><td> 504 </td><td> Authentication or account gateway timeout occurred </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getGroupsAsync(String authorization, String filter, final ApiCallback<GroupCollection> _callback) throws ApiException {

        okhttp3.Call localVarCall = getGroupsValidateBeforeCall(authorization, filter, _callback);
        Type localVarReturnType = new TypeToken<GroupCollection>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for replaceGroup
     * @param authorization Access token prefixed with &#39;Bearer &#39;, e.g. &#39;Bearer 123456abcdef&#39; (required)
     * @param groupKey The key of the group to query. The group must be in the organization domain (required)
     * @param body The new group definition (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The group has been replaced. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Possible reasons are:&lt;br /&gt;The displayName field is not set&lt;br /&gt;The displayName field is malformed&lt;br /&gt;The displayName field exceeds 128 characters&lt;br /&gt;The members array exceeds 100 elements&lt;br /&gt; </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Client is not sufficiently authorized or group does not exist in organization </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Invalid token passed </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> The displayName is already in use within the organization </td><td>  -  </td></tr>
        <tr><td> 502 </td><td> Authentication or account gateway error occurred </td><td>  -  </td></tr>
        <tr><td> 504 </td><td> Authentication or account gateway timeout occurred </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call replaceGroupCall(String authorization, Long groupKey, GroupDefinition body, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = body;

        // create path and map variables
        String localVarPath = "/Groups/{groupKey}"
            .replace("{" + "groupKey" + "}", localVarApiClient.escapeString(groupKey.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (authorization != null) {
            localVarHeaderParams.put("Authorization", localVarApiClient.parameterToString(authorization));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call replaceGroupValidateBeforeCall(String authorization, Long groupKey, GroupDefinition body, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'authorization' is set
        if (authorization == null) {
            throw new ApiException("Missing the required parameter 'authorization' when calling replaceGroup(Async)");
        }

        // verify the required parameter 'groupKey' is set
        if (groupKey == null) {
            throw new ApiException("Missing the required parameter 'groupKey' when calling replaceGroup(Async)");
        }

        // verify the required parameter 'body' is set
        if (body == null) {
            throw new ApiException("Missing the required parameter 'body' when calling replaceGroup(Async)");
        }

        return replaceGroupCall(authorization, groupKey, body, _callback);

    }

    /**
     * Replace Group
     * Updates an existing group. The request must include the full group definition. To modify one or more values without sending the full definition, see \&quot;Update Group\&quot;. Member groups and member users must be in the organization. This call requires the role ROLE_ORG_WRITE.
     * @param authorization Access token prefixed with &#39;Bearer &#39;, e.g. &#39;Bearer 123456abcdef&#39; (required)
     * @param groupKey The key of the group to query. The group must be in the organization domain (required)
     * @param body The new group definition (required)
     * @return Group
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The group has been replaced. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Possible reasons are:&lt;br /&gt;The displayName field is not set&lt;br /&gt;The displayName field is malformed&lt;br /&gt;The displayName field exceeds 128 characters&lt;br /&gt;The members array exceeds 100 elements&lt;br /&gt; </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Client is not sufficiently authorized or group does not exist in organization </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Invalid token passed </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> The displayName is already in use within the organization </td><td>  -  </td></tr>
        <tr><td> 502 </td><td> Authentication or account gateway error occurred </td><td>  -  </td></tr>
        <tr><td> 504 </td><td> Authentication or account gateway timeout occurred </td><td>  -  </td></tr>
     </table>
     */
    public Group replaceGroup(String authorization, Long groupKey, GroupDefinition body) throws ApiException {
        ApiResponse<Group> localVarResp = replaceGroupWithHttpInfo(authorization, groupKey, body);
        return localVarResp.getData();
    }

    /**
     * Replace Group
     * Updates an existing group. The request must include the full group definition. To modify one or more values without sending the full definition, see \&quot;Update Group\&quot;. Member groups and member users must be in the organization. This call requires the role ROLE_ORG_WRITE.
     * @param authorization Access token prefixed with &#39;Bearer &#39;, e.g. &#39;Bearer 123456abcdef&#39; (required)
     * @param groupKey The key of the group to query. The group must be in the organization domain (required)
     * @param body The new group definition (required)
     * @return ApiResponse&lt;Group&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The group has been replaced. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Possible reasons are:&lt;br /&gt;The displayName field is not set&lt;br /&gt;The displayName field is malformed&lt;br /&gt;The displayName field exceeds 128 characters&lt;br /&gt;The members array exceeds 100 elements&lt;br /&gt; </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Client is not sufficiently authorized or group does not exist in organization </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Invalid token passed </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> The displayName is already in use within the organization </td><td>  -  </td></tr>
        <tr><td> 502 </td><td> Authentication or account gateway error occurred </td><td>  -  </td></tr>
        <tr><td> 504 </td><td> Authentication or account gateway timeout occurred </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Group> replaceGroupWithHttpInfo(String authorization, Long groupKey, GroupDefinition body) throws ApiException {
        okhttp3.Call localVarCall = replaceGroupValidateBeforeCall(authorization, groupKey, body, null);
        Type localVarReturnType = new TypeToken<Group>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Replace Group (asynchronously)
     * Updates an existing group. The request must include the full group definition. To modify one or more values without sending the full definition, see \&quot;Update Group\&quot;. Member groups and member users must be in the organization. This call requires the role ROLE_ORG_WRITE.
     * @param authorization Access token prefixed with &#39;Bearer &#39;, e.g. &#39;Bearer 123456abcdef&#39; (required)
     * @param groupKey The key of the group to query. The group must be in the organization domain (required)
     * @param body The new group definition (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The group has been replaced. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Possible reasons are:&lt;br /&gt;The displayName field is not set&lt;br /&gt;The displayName field is malformed&lt;br /&gt;The displayName field exceeds 128 characters&lt;br /&gt;The members array exceeds 100 elements&lt;br /&gt; </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Client is not sufficiently authorized or group does not exist in organization </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Invalid token passed </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> The displayName is already in use within the organization </td><td>  -  </td></tr>
        <tr><td> 502 </td><td> Authentication or account gateway error occurred </td><td>  -  </td></tr>
        <tr><td> 504 </td><td> Authentication or account gateway timeout occurred </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call replaceGroupAsync(String authorization, Long groupKey, GroupDefinition body, final ApiCallback<Group> _callback) throws ApiException {

        okhttp3.Call localVarCall = replaceGroupValidateBeforeCall(authorization, groupKey, body, _callback);
        Type localVarReturnType = new TypeToken<Group>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for updateGroup
     * @param authorization Access token prefixed with &#39;Bearer &#39;, e.g. &#39;Bearer 123456abcdef&#39; (required)
     * @param groupKey The key of the group to query. The group must be in the organization domain (required)
     * @param body The group data to update. It is allowed to update one or more values of the group definition (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The group has been updated </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Possible reasons are:&lt;br /&gt;The displayName field is not set&lt;br /&gt;The displayName field is malformed&lt;br /&gt;The displayName field exceeds 128 characters&lt;br /&gt;The members array exceeds 100 elements&lt;br /&gt; </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Client is not sufficiently authorized or group does not exist in organization </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Invalid token passed </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> The displayName is already in use within the organization </td><td>  -  </td></tr>
        <tr><td> 502 </td><td> Authentication or account gateway error occurred </td><td>  -  </td></tr>
        <tr><td> 504 </td><td> Authentication or account gateway timeout occurred </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateGroupCall(String authorization, Long groupKey, GroupDefinition body, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = body;

        // create path and map variables
        String localVarPath = "/Groups/{groupKey}"
            .replace("{" + "groupKey" + "}", localVarApiClient.escapeString(groupKey.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (authorization != null) {
            localVarHeaderParams.put("Authorization", localVarApiClient.parameterToString(authorization));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "PATCH", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call updateGroupValidateBeforeCall(String authorization, Long groupKey, GroupDefinition body, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'authorization' is set
        if (authorization == null) {
            throw new ApiException("Missing the required parameter 'authorization' when calling updateGroup(Async)");
        }

        // verify the required parameter 'groupKey' is set
        if (groupKey == null) {
            throw new ApiException("Missing the required parameter 'groupKey' when calling updateGroup(Async)");
        }

        // verify the required parameter 'body' is set
        if (body == null) {
            throw new ApiException("Missing the required parameter 'body' when calling updateGroup(Async)");
        }

        return updateGroupCall(authorization, groupKey, body, _callback);

    }

    /**
     * Update Group
     * Updates one or more values of an existing group without sending the full definition. Member groups and member users must be in the organization. This call requires the role ROLE_ORG_WRITE.
     * @param authorization Access token prefixed with &#39;Bearer &#39;, e.g. &#39;Bearer 123456abcdef&#39; (required)
     * @param groupKey The key of the group to query. The group must be in the organization domain (required)
     * @param body The group data to update. It is allowed to update one or more values of the group definition (required)
     * @return Group
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The group has been updated </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Possible reasons are:&lt;br /&gt;The displayName field is not set&lt;br /&gt;The displayName field is malformed&lt;br /&gt;The displayName field exceeds 128 characters&lt;br /&gt;The members array exceeds 100 elements&lt;br /&gt; </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Client is not sufficiently authorized or group does not exist in organization </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Invalid token passed </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> The displayName is already in use within the organization </td><td>  -  </td></tr>
        <tr><td> 502 </td><td> Authentication or account gateway error occurred </td><td>  -  </td></tr>
        <tr><td> 504 </td><td> Authentication or account gateway timeout occurred </td><td>  -  </td></tr>
     </table>
     */
    public Group updateGroup(String authorization, Long groupKey, GroupDefinition body) throws ApiException {
        ApiResponse<Group> localVarResp = updateGroupWithHttpInfo(authorization, groupKey, body);
        return localVarResp.getData();
    }

    /**
     * Update Group
     * Updates one or more values of an existing group without sending the full definition. Member groups and member users must be in the organization. This call requires the role ROLE_ORG_WRITE.
     * @param authorization Access token prefixed with &#39;Bearer &#39;, e.g. &#39;Bearer 123456abcdef&#39; (required)
     * @param groupKey The key of the group to query. The group must be in the organization domain (required)
     * @param body The group data to update. It is allowed to update one or more values of the group definition (required)
     * @return ApiResponse&lt;Group&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The group has been updated </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Possible reasons are:&lt;br /&gt;The displayName field is not set&lt;br /&gt;The displayName field is malformed&lt;br /&gt;The displayName field exceeds 128 characters&lt;br /&gt;The members array exceeds 100 elements&lt;br /&gt; </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Client is not sufficiently authorized or group does not exist in organization </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Invalid token passed </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> The displayName is already in use within the organization </td><td>  -  </td></tr>
        <tr><td> 502 </td><td> Authentication or account gateway error occurred </td><td>  -  </td></tr>
        <tr><td> 504 </td><td> Authentication or account gateway timeout occurred </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Group> updateGroupWithHttpInfo(String authorization, Long groupKey, GroupDefinition body) throws ApiException {
        okhttp3.Call localVarCall = updateGroupValidateBeforeCall(authorization, groupKey, body, null);
        Type localVarReturnType = new TypeToken<Group>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Update Group (asynchronously)
     * Updates one or more values of an existing group without sending the full definition. Member groups and member users must be in the organization. This call requires the role ROLE_ORG_WRITE.
     * @param authorization Access token prefixed with &#39;Bearer &#39;, e.g. &#39;Bearer 123456abcdef&#39; (required)
     * @param groupKey The key of the group to query. The group must be in the organization domain (required)
     * @param body The group data to update. It is allowed to update one or more values of the group definition (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The group has been updated </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Possible reasons are:&lt;br /&gt;The displayName field is not set&lt;br /&gt;The displayName field is malformed&lt;br /&gt;The displayName field exceeds 128 characters&lt;br /&gt;The members array exceeds 100 elements&lt;br /&gt; </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Client is not sufficiently authorized or group does not exist in organization </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Invalid token passed </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> The displayName is already in use within the organization </td><td>  -  </td></tr>
        <tr><td> 502 </td><td> Authentication or account gateway error occurred </td><td>  -  </td></tr>
        <tr><td> 504 </td><td> Authentication or account gateway timeout occurred </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateGroupAsync(String authorization, Long groupKey, GroupDefinition body, final ApiCallback<Group> _callback) throws ApiException {

        okhttp3.Call localVarCall = updateGroupValidateBeforeCall(authorization, groupKey, body, _callback);
        Type localVarReturnType = new TypeToken<Group>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
