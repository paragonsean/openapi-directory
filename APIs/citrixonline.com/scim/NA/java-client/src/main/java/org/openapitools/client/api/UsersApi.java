/*
 * SCIM
 * The SCIM API lets you manage users in your organization. You can then automate the provisioning of product licenses for these users, and they can use your company's Single Sign-On solution through an Identity Provider.
 *
 * The version of the OpenAPI document: N/A
 * Contact: developer-support@citrixonline.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiCallback;
import org.openapitools.client.ApiClient;
import org.openapitools.client.ApiException;
import org.openapitools.client.ApiResponse;
import org.openapitools.client.Configuration;
import org.openapitools.client.Pair;
import org.openapitools.client.ProgressRequestBody;
import org.openapitools.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import org.openapitools.client.model.User;
import org.openapitools.client.model.UserCollection;
import org.openapitools.client.model.UserDefinition;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class UsersApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public UsersApi() {
        this(Configuration.getDefaultApiClient());
    }

    public UsersApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for createUsers
     * @param authorization Access token prefixed with &#39;Bearer &#39;, e.g. &#39;Bearer 123456abcdef&#39; (required)
     * @param body The details of the user to create (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> The user has been created. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> One of the following requirements is not met:&lt;br /&gt;The userName field is required.&lt;br /&gt;The userName field must be non-empty.&lt;br /&gt;The userName field cannot exceed 128 characters.&lt;br /&gt;The locale field must be composed of 1 or 2 parts.&lt;br /&gt;The locale language sub-field must be ISO-639.&lt;br /&gt;The locale country sub-field must be ISO-3166.&lt;br /&gt;The timezone field must be a valid timezone.&lt;br /&gt;The givenName field must not exceed 60 characters.&lt;br /&gt;The familyName field must not exceed 60 characters. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Client is not sufficiently authorized. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Invalid token passed </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> Username is already in use. </td><td>  -  </td></tr>
        <tr><td> 502 </td><td> Authentication, account, or email verification gateway error occurred. </td><td>  -  </td></tr>
        <tr><td> 504 </td><td> Authentication, account, or email verification gateway timeout occurred. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call createUsersCall(String authorization, UserDefinition body, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = body;

        // create path and map variables
        String localVarPath = "/Users";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (authorization != null) {
            localVarHeaderParams.put("Authorization", localVarApiClient.parameterToString(authorization));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call createUsersValidateBeforeCall(String authorization, UserDefinition body, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'authorization' is set
        if (authorization == null) {
            throw new ApiException("Missing the required parameter 'authorization' when calling createUsers(Async)");
        }

        // verify the required parameter 'body' is set
        if (body == null) {
            throw new ApiException("Missing the required parameter 'body' when calling createUsers(Async)");
        }

        return createUsersCall(authorization, body, _callback);

    }

    /**
     * Create User
     * Creates a new organization user and adds them to the user domain. The user email domain must match an existing organization email domain.
     * @param authorization Access token prefixed with &#39;Bearer &#39;, e.g. &#39;Bearer 123456abcdef&#39; (required)
     * @param body The details of the user to create (required)
     * @return User
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> The user has been created. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> One of the following requirements is not met:&lt;br /&gt;The userName field is required.&lt;br /&gt;The userName field must be non-empty.&lt;br /&gt;The userName field cannot exceed 128 characters.&lt;br /&gt;The locale field must be composed of 1 or 2 parts.&lt;br /&gt;The locale language sub-field must be ISO-639.&lt;br /&gt;The locale country sub-field must be ISO-3166.&lt;br /&gt;The timezone field must be a valid timezone.&lt;br /&gt;The givenName field must not exceed 60 characters.&lt;br /&gt;The familyName field must not exceed 60 characters. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Client is not sufficiently authorized. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Invalid token passed </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> Username is already in use. </td><td>  -  </td></tr>
        <tr><td> 502 </td><td> Authentication, account, or email verification gateway error occurred. </td><td>  -  </td></tr>
        <tr><td> 504 </td><td> Authentication, account, or email verification gateway timeout occurred. </td><td>  -  </td></tr>
     </table>
     */
    public User createUsers(String authorization, UserDefinition body) throws ApiException {
        ApiResponse<User> localVarResp = createUsersWithHttpInfo(authorization, body);
        return localVarResp.getData();
    }

    /**
     * Create User
     * Creates a new organization user and adds them to the user domain. The user email domain must match an existing organization email domain.
     * @param authorization Access token prefixed with &#39;Bearer &#39;, e.g. &#39;Bearer 123456abcdef&#39; (required)
     * @param body The details of the user to create (required)
     * @return ApiResponse&lt;User&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> The user has been created. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> One of the following requirements is not met:&lt;br /&gt;The userName field is required.&lt;br /&gt;The userName field must be non-empty.&lt;br /&gt;The userName field cannot exceed 128 characters.&lt;br /&gt;The locale field must be composed of 1 or 2 parts.&lt;br /&gt;The locale language sub-field must be ISO-639.&lt;br /&gt;The locale country sub-field must be ISO-3166.&lt;br /&gt;The timezone field must be a valid timezone.&lt;br /&gt;The givenName field must not exceed 60 characters.&lt;br /&gt;The familyName field must not exceed 60 characters. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Client is not sufficiently authorized. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Invalid token passed </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> Username is already in use. </td><td>  -  </td></tr>
        <tr><td> 502 </td><td> Authentication, account, or email verification gateway error occurred. </td><td>  -  </td></tr>
        <tr><td> 504 </td><td> Authentication, account, or email verification gateway timeout occurred. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<User> createUsersWithHttpInfo(String authorization, UserDefinition body) throws ApiException {
        okhttp3.Call localVarCall = createUsersValidateBeforeCall(authorization, body, null);
        Type localVarReturnType = new TypeToken<User>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Create User (asynchronously)
     * Creates a new organization user and adds them to the user domain. The user email domain must match an existing organization email domain.
     * @param authorization Access token prefixed with &#39;Bearer &#39;, e.g. &#39;Bearer 123456abcdef&#39; (required)
     * @param body The details of the user to create (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> The user has been created. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> One of the following requirements is not met:&lt;br /&gt;The userName field is required.&lt;br /&gt;The userName field must be non-empty.&lt;br /&gt;The userName field cannot exceed 128 characters.&lt;br /&gt;The locale field must be composed of 1 or 2 parts.&lt;br /&gt;The locale language sub-field must be ISO-639.&lt;br /&gt;The locale country sub-field must be ISO-3166.&lt;br /&gt;The timezone field must be a valid timezone.&lt;br /&gt;The givenName field must not exceed 60 characters.&lt;br /&gt;The familyName field must not exceed 60 characters. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Client is not sufficiently authorized. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Invalid token passed </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> Username is already in use. </td><td>  -  </td></tr>
        <tr><td> 502 </td><td> Authentication, account, or email verification gateway error occurred. </td><td>  -  </td></tr>
        <tr><td> 504 </td><td> Authentication, account, or email verification gateway timeout occurred. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call createUsersAsync(String authorization, UserDefinition body, final ApiCallback<User> _callback) throws ApiException {

        okhttp3.Call localVarCall = createUsersValidateBeforeCall(authorization, body, _callback);
        Type localVarReturnType = new TypeToken<User>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for deleteUser
     * @param authorization Access token prefixed with &#39;Bearer &#39;, e.g. &#39;Bearer 123456abcdef&#39; (required)
     * @param userKey The key of the user to query. The user must be in the organization domain (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The request has succeeded. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Client is not sufficiently authorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Invalid token passed </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> User not found </td><td>  -  </td></tr>
        <tr><td> 502 </td><td> Authentication or account gateway error occurred </td><td>  -  </td></tr>
        <tr><td> 504 </td><td> Authentication or account gateway timeout occurred </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteUserCall(String authorization, Long userKey, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/Users/{userKey}"
            .replace("{" + "userKey" + "}", localVarApiClient.escapeString(userKey.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (authorization != null) {
            localVarHeaderParams.put("Authorization", localVarApiClient.parameterToString(authorization));
        }

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call deleteUserValidateBeforeCall(String authorization, Long userKey, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'authorization' is set
        if (authorization == null) {
            throw new ApiException("Missing the required parameter 'authorization' when calling deleteUser(Async)");
        }

        // verify the required parameter 'userKey' is set
        if (userKey == null) {
            throw new ApiException("Missing the required parameter 'userKey' when calling deleteUser(Async)");
        }

        return deleteUserCall(authorization, userKey, _callback);

    }

    /**
     * Delete User
     * Deletes a user from the organization (but not from the account).
     * @param authorization Access token prefixed with &#39;Bearer &#39;, e.g. &#39;Bearer 123456abcdef&#39; (required)
     * @param userKey The key of the user to query. The user must be in the organization domain (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The request has succeeded. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Client is not sufficiently authorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Invalid token passed </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> User not found </td><td>  -  </td></tr>
        <tr><td> 502 </td><td> Authentication or account gateway error occurred </td><td>  -  </td></tr>
        <tr><td> 504 </td><td> Authentication or account gateway timeout occurred </td><td>  -  </td></tr>
     </table>
     */
    public void deleteUser(String authorization, Long userKey) throws ApiException {
        deleteUserWithHttpInfo(authorization, userKey);
    }

    /**
     * Delete User
     * Deletes a user from the organization (but not from the account).
     * @param authorization Access token prefixed with &#39;Bearer &#39;, e.g. &#39;Bearer 123456abcdef&#39; (required)
     * @param userKey The key of the user to query. The user must be in the organization domain (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The request has succeeded. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Client is not sufficiently authorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Invalid token passed </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> User not found </td><td>  -  </td></tr>
        <tr><td> 502 </td><td> Authentication or account gateway error occurred </td><td>  -  </td></tr>
        <tr><td> 504 </td><td> Authentication or account gateway timeout occurred </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> deleteUserWithHttpInfo(String authorization, Long userKey) throws ApiException {
        okhttp3.Call localVarCall = deleteUserValidateBeforeCall(authorization, userKey, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Delete User (asynchronously)
     * Deletes a user from the organization (but not from the account).
     * @param authorization Access token prefixed with &#39;Bearer &#39;, e.g. &#39;Bearer 123456abcdef&#39; (required)
     * @param userKey The key of the user to query. The user must be in the organization domain (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The request has succeeded. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Client is not sufficiently authorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Invalid token passed </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> User not found </td><td>  -  </td></tr>
        <tr><td> 502 </td><td> Authentication or account gateway error occurred </td><td>  -  </td></tr>
        <tr><td> 504 </td><td> Authentication or account gateway timeout occurred </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteUserAsync(String authorization, Long userKey, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = deleteUserValidateBeforeCall(authorization, userKey, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for getMe
     * @param authorization Access token prefixed with &#39;Bearer &#39;, e.g. &#39;Bearer 123456abcdef&#39; (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The request has succeeded. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Client is not sufficiently authorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Invalid token passed </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> User not found </td><td>  -  </td></tr>
        <tr><td> 502 </td><td> Authentication or account gateway error occurred </td><td>  -  </td></tr>
        <tr><td> 504 </td><td> Authentication or account gateway timeout occurred </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getMeCall(String authorization, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/Users/me";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (authorization != null) {
            localVarHeaderParams.put("Authorization", localVarApiClient.parameterToString(authorization));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getMeValidateBeforeCall(String authorization, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'authorization' is set
        if (authorization == null) {
            throw new ApiException("Missing the required parameter 'authorization' when calling getMe(Async)");
        }

        return getMeCall(authorization, _callback);

    }

    /**
     * Get Current User
     * Queries the identity of the current authenticated user.
     * @param authorization Access token prefixed with &#39;Bearer &#39;, e.g. &#39;Bearer 123456abcdef&#39; (required)
     * @return User
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The request has succeeded. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Client is not sufficiently authorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Invalid token passed </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> User not found </td><td>  -  </td></tr>
        <tr><td> 502 </td><td> Authentication or account gateway error occurred </td><td>  -  </td></tr>
        <tr><td> 504 </td><td> Authentication or account gateway timeout occurred </td><td>  -  </td></tr>
     </table>
     */
    public User getMe(String authorization) throws ApiException {
        ApiResponse<User> localVarResp = getMeWithHttpInfo(authorization);
        return localVarResp.getData();
    }

    /**
     * Get Current User
     * Queries the identity of the current authenticated user.
     * @param authorization Access token prefixed with &#39;Bearer &#39;, e.g. &#39;Bearer 123456abcdef&#39; (required)
     * @return ApiResponse&lt;User&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The request has succeeded. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Client is not sufficiently authorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Invalid token passed </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> User not found </td><td>  -  </td></tr>
        <tr><td> 502 </td><td> Authentication or account gateway error occurred </td><td>  -  </td></tr>
        <tr><td> 504 </td><td> Authentication or account gateway timeout occurred </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<User> getMeWithHttpInfo(String authorization) throws ApiException {
        okhttp3.Call localVarCall = getMeValidateBeforeCall(authorization, null);
        Type localVarReturnType = new TypeToken<User>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get Current User (asynchronously)
     * Queries the identity of the current authenticated user.
     * @param authorization Access token prefixed with &#39;Bearer &#39;, e.g. &#39;Bearer 123456abcdef&#39; (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The request has succeeded. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Client is not sufficiently authorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Invalid token passed </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> User not found </td><td>  -  </td></tr>
        <tr><td> 502 </td><td> Authentication or account gateway error occurred </td><td>  -  </td></tr>
        <tr><td> 504 </td><td> Authentication or account gateway timeout occurred </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getMeAsync(String authorization, final ApiCallback<User> _callback) throws ApiException {

        okhttp3.Call localVarCall = getMeValidateBeforeCall(authorization, _callback);
        Type localVarReturnType = new TypeToken<User>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getUser
     * @param authorization Access token prefixed with &#39;Bearer &#39;, e.g. &#39;Bearer 123456abcdef&#39; (required)
     * @param userKey The key of the user to query. The user must be in the organization domain (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The request has succeeded. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Client is not sufficiently authorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Invalid token passed </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> User not found </td><td>  -  </td></tr>
        <tr><td> 502 </td><td> Authentication or account gateway error occurred </td><td>  -  </td></tr>
        <tr><td> 504 </td><td> Authentication or account gateway timeout occurred </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getUserCall(String authorization, Long userKey, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/Users/{userKey}"
            .replace("{" + "userKey" + "}", localVarApiClient.escapeString(userKey.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (authorization != null) {
            localVarHeaderParams.put("Authorization", localVarApiClient.parameterToString(authorization));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getUserValidateBeforeCall(String authorization, Long userKey, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'authorization' is set
        if (authorization == null) {
            throw new ApiException("Missing the required parameter 'authorization' when calling getUser(Async)");
        }

        // verify the required parameter 'userKey' is set
        if (userKey == null) {
            throw new ApiException("Missing the required parameter 'userKey' when calling getUser(Async)");
        }

        return getUserCall(authorization, userKey, _callback);

    }

    /**
     * Get User
     * Queries user identity in the organization domain.
     * @param authorization Access token prefixed with &#39;Bearer &#39;, e.g. &#39;Bearer 123456abcdef&#39; (required)
     * @param userKey The key of the user to query. The user must be in the organization domain (required)
     * @return User
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The request has succeeded. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Client is not sufficiently authorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Invalid token passed </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> User not found </td><td>  -  </td></tr>
        <tr><td> 502 </td><td> Authentication or account gateway error occurred </td><td>  -  </td></tr>
        <tr><td> 504 </td><td> Authentication or account gateway timeout occurred </td><td>  -  </td></tr>
     </table>
     */
    public User getUser(String authorization, Long userKey) throws ApiException {
        ApiResponse<User> localVarResp = getUserWithHttpInfo(authorization, userKey);
        return localVarResp.getData();
    }

    /**
     * Get User
     * Queries user identity in the organization domain.
     * @param authorization Access token prefixed with &#39;Bearer &#39;, e.g. &#39;Bearer 123456abcdef&#39; (required)
     * @param userKey The key of the user to query. The user must be in the organization domain (required)
     * @return ApiResponse&lt;User&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The request has succeeded. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Client is not sufficiently authorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Invalid token passed </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> User not found </td><td>  -  </td></tr>
        <tr><td> 502 </td><td> Authentication or account gateway error occurred </td><td>  -  </td></tr>
        <tr><td> 504 </td><td> Authentication or account gateway timeout occurred </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<User> getUserWithHttpInfo(String authorization, Long userKey) throws ApiException {
        okhttp3.Call localVarCall = getUserValidateBeforeCall(authorization, userKey, null);
        Type localVarReturnType = new TypeToken<User>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get User (asynchronously)
     * Queries user identity in the organization domain.
     * @param authorization Access token prefixed with &#39;Bearer &#39;, e.g. &#39;Bearer 123456abcdef&#39; (required)
     * @param userKey The key of the user to query. The user must be in the organization domain (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The request has succeeded. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Client is not sufficiently authorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Invalid token passed </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> User not found </td><td>  -  </td></tr>
        <tr><td> 502 </td><td> Authentication or account gateway error occurred </td><td>  -  </td></tr>
        <tr><td> 504 </td><td> Authentication or account gateway timeout occurred </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getUserAsync(String authorization, Long userKey, final ApiCallback<User> _callback) throws ApiException {

        okhttp3.Call localVarCall = getUserValidateBeforeCall(authorization, userKey, _callback);
        Type localVarReturnType = new TypeToken<User>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getUsers
     * @param authorization Access token prefixed with &#39;Bearer &#39;, e.g. &#39;Bearer 123456abcdef&#39; (required)
     * @param filter  Without a filter, all users in a user domain are returned. The filter parameter must be a properly formed SCIM filter using either the operator eq (equals) or the operator sw (starts with). The filter works for userName, displayName, name.givenName, and name.familyName attributes. For example, /Users?filter&#x3D;name.familyName%20eq%20%%22Smith%22 (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The request has succeeded. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid filter syntax </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Client is not sufficiently authorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Invalid token passed </td><td>  -  </td></tr>
        <tr><td> 502 </td><td> Authentication or account gateway error occurred </td><td>  -  </td></tr>
        <tr><td> 504 </td><td> Authentication or account gateway timeout occurred </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getUsersCall(String authorization, String filter, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/Users";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (filter != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("filter", filter));
        }

        if (authorization != null) {
            localVarHeaderParams.put("Authorization", localVarApiClient.parameterToString(authorization));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getUsersValidateBeforeCall(String authorization, String filter, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'authorization' is set
        if (authorization == null) {
            throw new ApiException("Missing the required parameter 'authorization' when calling getUsers(Async)");
        }

        return getUsersCall(authorization, filter, _callback);

    }

    /**
     * Get Users
     * Queries multiple user identities in the organization domain. Filtering is available.
     * @param authorization Access token prefixed with &#39;Bearer &#39;, e.g. &#39;Bearer 123456abcdef&#39; (required)
     * @param filter  Without a filter, all users in a user domain are returned. The filter parameter must be a properly formed SCIM filter using either the operator eq (equals) or the operator sw (starts with). The filter works for userName, displayName, name.givenName, and name.familyName attributes. For example, /Users?filter&#x3D;name.familyName%20eq%20%%22Smith%22 (optional)
     * @return UserCollection
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The request has succeeded. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid filter syntax </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Client is not sufficiently authorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Invalid token passed </td><td>  -  </td></tr>
        <tr><td> 502 </td><td> Authentication or account gateway error occurred </td><td>  -  </td></tr>
        <tr><td> 504 </td><td> Authentication or account gateway timeout occurred </td><td>  -  </td></tr>
     </table>
     */
    public UserCollection getUsers(String authorization, String filter) throws ApiException {
        ApiResponse<UserCollection> localVarResp = getUsersWithHttpInfo(authorization, filter);
        return localVarResp.getData();
    }

    /**
     * Get Users
     * Queries multiple user identities in the organization domain. Filtering is available.
     * @param authorization Access token prefixed with &#39;Bearer &#39;, e.g. &#39;Bearer 123456abcdef&#39; (required)
     * @param filter  Without a filter, all users in a user domain are returned. The filter parameter must be a properly formed SCIM filter using either the operator eq (equals) or the operator sw (starts with). The filter works for userName, displayName, name.givenName, and name.familyName attributes. For example, /Users?filter&#x3D;name.familyName%20eq%20%%22Smith%22 (optional)
     * @return ApiResponse&lt;UserCollection&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The request has succeeded. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid filter syntax </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Client is not sufficiently authorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Invalid token passed </td><td>  -  </td></tr>
        <tr><td> 502 </td><td> Authentication or account gateway error occurred </td><td>  -  </td></tr>
        <tr><td> 504 </td><td> Authentication or account gateway timeout occurred </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<UserCollection> getUsersWithHttpInfo(String authorization, String filter) throws ApiException {
        okhttp3.Call localVarCall = getUsersValidateBeforeCall(authorization, filter, null);
        Type localVarReturnType = new TypeToken<UserCollection>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get Users (asynchronously)
     * Queries multiple user identities in the organization domain. Filtering is available.
     * @param authorization Access token prefixed with &#39;Bearer &#39;, e.g. &#39;Bearer 123456abcdef&#39; (required)
     * @param filter  Without a filter, all users in a user domain are returned. The filter parameter must be a properly formed SCIM filter using either the operator eq (equals) or the operator sw (starts with). The filter works for userName, displayName, name.givenName, and name.familyName attributes. For example, /Users?filter&#x3D;name.familyName%20eq%20%%22Smith%22 (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The request has succeeded. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid filter syntax </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Client is not sufficiently authorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Invalid token passed </td><td>  -  </td></tr>
        <tr><td> 502 </td><td> Authentication or account gateway error occurred </td><td>  -  </td></tr>
        <tr><td> 504 </td><td> Authentication or account gateway timeout occurred </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getUsersAsync(String authorization, String filter, final ApiCallback<UserCollection> _callback) throws ApiException {

        okhttp3.Call localVarCall = getUsersValidateBeforeCall(authorization, filter, _callback);
        Type localVarReturnType = new TypeToken<UserCollection>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for replaceMe
     * @param authorization Access token prefixed with &#39;Bearer &#39;, e.g. &#39;Bearer 123456abcdef&#39; (required)
     * @param body The new user data (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The current user has been replaced. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> One of the following requirements is not met:&lt;br /&gt;The userName field is required.&lt;br /&gt;The userName field must be non-empty.&lt;br /&gt;The userName field cannot exceed 128 characters.&lt;br /&gt;The locale field must be composed of 1 or 2 parts.&lt;br /&gt;The locale language sub-field must be ISO-639.&lt;br /&gt;The locale country sub-field must be ISO-3166.&lt;br /&gt;The timezone field must be a valid timezone.&lt;br /&gt;The givenName field must not exceed 60 characters.&lt;br /&gt;The familyName field must not exceed 60 characters. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Client is not sufficiently authorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Invalid token passed </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> User not found </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> Email address conflict </td><td>  -  </td></tr>
        <tr><td> 502 </td><td> Authentication or account gateway error occurred </td><td>  -  </td></tr>
        <tr><td> 504 </td><td> Authentication or account gateway timeout occurred </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call replaceMeCall(String authorization, UserDefinition body, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = body;

        // create path and map variables
        String localVarPath = "/Users/me";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (authorization != null) {
            localVarHeaderParams.put("Authorization", localVarApiClient.parameterToString(authorization));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call replaceMeValidateBeforeCall(String authorization, UserDefinition body, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'authorization' is set
        if (authorization == null) {
            throw new ApiException("Missing the required parameter 'authorization' when calling replaceMe(Async)");
        }

        // verify the required parameter 'body' is set
        if (body == null) {
            throw new ApiException("Missing the required parameter 'body' when calling replaceMe(Async)");
        }

        return replaceMeCall(authorization, body, _callback);

    }

    /**
     * Replace Current User
     * Changes the current authenticated user&#39;s displayName, locale, timezone, username and password. The request must include the full user definition (to modify one or more values without sending the full definition, see Update User). The replaced user email domain must be an existing organization email domain. 
     * @param authorization Access token prefixed with &#39;Bearer &#39;, e.g. &#39;Bearer 123456abcdef&#39; (required)
     * @param body The new user data (required)
     * @return User
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The current user has been replaced. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> One of the following requirements is not met:&lt;br /&gt;The userName field is required.&lt;br /&gt;The userName field must be non-empty.&lt;br /&gt;The userName field cannot exceed 128 characters.&lt;br /&gt;The locale field must be composed of 1 or 2 parts.&lt;br /&gt;The locale language sub-field must be ISO-639.&lt;br /&gt;The locale country sub-field must be ISO-3166.&lt;br /&gt;The timezone field must be a valid timezone.&lt;br /&gt;The givenName field must not exceed 60 characters.&lt;br /&gt;The familyName field must not exceed 60 characters. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Client is not sufficiently authorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Invalid token passed </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> User not found </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> Email address conflict </td><td>  -  </td></tr>
        <tr><td> 502 </td><td> Authentication or account gateway error occurred </td><td>  -  </td></tr>
        <tr><td> 504 </td><td> Authentication or account gateway timeout occurred </td><td>  -  </td></tr>
     </table>
     */
    public User replaceMe(String authorization, UserDefinition body) throws ApiException {
        ApiResponse<User> localVarResp = replaceMeWithHttpInfo(authorization, body);
        return localVarResp.getData();
    }

    /**
     * Replace Current User
     * Changes the current authenticated user&#39;s displayName, locale, timezone, username and password. The request must include the full user definition (to modify one or more values without sending the full definition, see Update User). The replaced user email domain must be an existing organization email domain. 
     * @param authorization Access token prefixed with &#39;Bearer &#39;, e.g. &#39;Bearer 123456abcdef&#39; (required)
     * @param body The new user data (required)
     * @return ApiResponse&lt;User&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The current user has been replaced. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> One of the following requirements is not met:&lt;br /&gt;The userName field is required.&lt;br /&gt;The userName field must be non-empty.&lt;br /&gt;The userName field cannot exceed 128 characters.&lt;br /&gt;The locale field must be composed of 1 or 2 parts.&lt;br /&gt;The locale language sub-field must be ISO-639.&lt;br /&gt;The locale country sub-field must be ISO-3166.&lt;br /&gt;The timezone field must be a valid timezone.&lt;br /&gt;The givenName field must not exceed 60 characters.&lt;br /&gt;The familyName field must not exceed 60 characters. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Client is not sufficiently authorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Invalid token passed </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> User not found </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> Email address conflict </td><td>  -  </td></tr>
        <tr><td> 502 </td><td> Authentication or account gateway error occurred </td><td>  -  </td></tr>
        <tr><td> 504 </td><td> Authentication or account gateway timeout occurred </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<User> replaceMeWithHttpInfo(String authorization, UserDefinition body) throws ApiException {
        okhttp3.Call localVarCall = replaceMeValidateBeforeCall(authorization, body, null);
        Type localVarReturnType = new TypeToken<User>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Replace Current User (asynchronously)
     * Changes the current authenticated user&#39;s displayName, locale, timezone, username and password. The request must include the full user definition (to modify one or more values without sending the full definition, see Update User). The replaced user email domain must be an existing organization email domain. 
     * @param authorization Access token prefixed with &#39;Bearer &#39;, e.g. &#39;Bearer 123456abcdef&#39; (required)
     * @param body The new user data (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The current user has been replaced. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> One of the following requirements is not met:&lt;br /&gt;The userName field is required.&lt;br /&gt;The userName field must be non-empty.&lt;br /&gt;The userName field cannot exceed 128 characters.&lt;br /&gt;The locale field must be composed of 1 or 2 parts.&lt;br /&gt;The locale language sub-field must be ISO-639.&lt;br /&gt;The locale country sub-field must be ISO-3166.&lt;br /&gt;The timezone field must be a valid timezone.&lt;br /&gt;The givenName field must not exceed 60 characters.&lt;br /&gt;The familyName field must not exceed 60 characters. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Client is not sufficiently authorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Invalid token passed </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> User not found </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> Email address conflict </td><td>  -  </td></tr>
        <tr><td> 502 </td><td> Authentication or account gateway error occurred </td><td>  -  </td></tr>
        <tr><td> 504 </td><td> Authentication or account gateway timeout occurred </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call replaceMeAsync(String authorization, UserDefinition body, final ApiCallback<User> _callback) throws ApiException {

        okhttp3.Call localVarCall = replaceMeValidateBeforeCall(authorization, body, _callback);
        Type localVarReturnType = new TypeToken<User>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for replaceUser
     * @param authorization Access token prefixed with &#39;Bearer &#39;, e.g. &#39;Bearer 123456abcdef&#39; (required)
     * @param userKey The key of the user to query. The user must be in the organization domain (required)
     * @param body The new user data (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The user has been replaced. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> One of the following requirements is not met:&lt;br /&gt;The userName field is required.&lt;br /&gt;The userName field must be non-empty.&lt;br /&gt;The userName field cannot exceed 128 characters.&lt;br /&gt;The locale field must be composed of 1 or 2 parts.&lt;br /&gt;The locale language sub-field must be ISO-639.&lt;br /&gt;The locale country sub-field must be ISO-3166.&lt;br /&gt;The timezone field must be a valid timezone.&lt;br /&gt;The givenName field must not exceed 60 characters.&lt;br /&gt;The familyName field must not exceed 60 characters. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Client is not sufficiently authorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Invalid token passed </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> User not found </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> Email address conflict </td><td>  -  </td></tr>
        <tr><td> 502 </td><td> Authentication or account gateway error occurred </td><td>  -  </td></tr>
        <tr><td> 504 </td><td> Authentication or account gateway timeout occurred </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call replaceUserCall(String authorization, Long userKey, UserDefinition body, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = body;

        // create path and map variables
        String localVarPath = "/Users/{userKey}"
            .replace("{" + "userKey" + "}", localVarApiClient.escapeString(userKey.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (authorization != null) {
            localVarHeaderParams.put("Authorization", localVarApiClient.parameterToString(authorization));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call replaceUserValidateBeforeCall(String authorization, Long userKey, UserDefinition body, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'authorization' is set
        if (authorization == null) {
            throw new ApiException("Missing the required parameter 'authorization' when calling replaceUser(Async)");
        }

        // verify the required parameter 'userKey' is set
        if (userKey == null) {
            throw new ApiException("Missing the required parameter 'userKey' when calling replaceUser(Async)");
        }

        // verify the required parameter 'body' is set
        if (body == null) {
            throw new ApiException("Missing the required parameter 'body' when calling replaceUser(Async)");
        }

        return replaceUserCall(authorization, userKey, body, _callback);

    }

    /**
     * Replace User
     * Changes an existing user&#39;s displayName, locale, timezone, username and password. The request must include the full user definition (to modify one or more values without sending the full definition, see Update User). The replaced user email domain must be an existing organization email domain.
     * @param authorization Access token prefixed with &#39;Bearer &#39;, e.g. &#39;Bearer 123456abcdef&#39; (required)
     * @param userKey The key of the user to query. The user must be in the organization domain (required)
     * @param body The new user data (required)
     * @return User
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The user has been replaced. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> One of the following requirements is not met:&lt;br /&gt;The userName field is required.&lt;br /&gt;The userName field must be non-empty.&lt;br /&gt;The userName field cannot exceed 128 characters.&lt;br /&gt;The locale field must be composed of 1 or 2 parts.&lt;br /&gt;The locale language sub-field must be ISO-639.&lt;br /&gt;The locale country sub-field must be ISO-3166.&lt;br /&gt;The timezone field must be a valid timezone.&lt;br /&gt;The givenName field must not exceed 60 characters.&lt;br /&gt;The familyName field must not exceed 60 characters. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Client is not sufficiently authorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Invalid token passed </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> User not found </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> Email address conflict </td><td>  -  </td></tr>
        <tr><td> 502 </td><td> Authentication or account gateway error occurred </td><td>  -  </td></tr>
        <tr><td> 504 </td><td> Authentication or account gateway timeout occurred </td><td>  -  </td></tr>
     </table>
     */
    public User replaceUser(String authorization, Long userKey, UserDefinition body) throws ApiException {
        ApiResponse<User> localVarResp = replaceUserWithHttpInfo(authorization, userKey, body);
        return localVarResp.getData();
    }

    /**
     * Replace User
     * Changes an existing user&#39;s displayName, locale, timezone, username and password. The request must include the full user definition (to modify one or more values without sending the full definition, see Update User). The replaced user email domain must be an existing organization email domain.
     * @param authorization Access token prefixed with &#39;Bearer &#39;, e.g. &#39;Bearer 123456abcdef&#39; (required)
     * @param userKey The key of the user to query. The user must be in the organization domain (required)
     * @param body The new user data (required)
     * @return ApiResponse&lt;User&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The user has been replaced. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> One of the following requirements is not met:&lt;br /&gt;The userName field is required.&lt;br /&gt;The userName field must be non-empty.&lt;br /&gt;The userName field cannot exceed 128 characters.&lt;br /&gt;The locale field must be composed of 1 or 2 parts.&lt;br /&gt;The locale language sub-field must be ISO-639.&lt;br /&gt;The locale country sub-field must be ISO-3166.&lt;br /&gt;The timezone field must be a valid timezone.&lt;br /&gt;The givenName field must not exceed 60 characters.&lt;br /&gt;The familyName field must not exceed 60 characters. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Client is not sufficiently authorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Invalid token passed </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> User not found </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> Email address conflict </td><td>  -  </td></tr>
        <tr><td> 502 </td><td> Authentication or account gateway error occurred </td><td>  -  </td></tr>
        <tr><td> 504 </td><td> Authentication or account gateway timeout occurred </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<User> replaceUserWithHttpInfo(String authorization, Long userKey, UserDefinition body) throws ApiException {
        okhttp3.Call localVarCall = replaceUserValidateBeforeCall(authorization, userKey, body, null);
        Type localVarReturnType = new TypeToken<User>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Replace User (asynchronously)
     * Changes an existing user&#39;s displayName, locale, timezone, username and password. The request must include the full user definition (to modify one or more values without sending the full definition, see Update User). The replaced user email domain must be an existing organization email domain.
     * @param authorization Access token prefixed with &#39;Bearer &#39;, e.g. &#39;Bearer 123456abcdef&#39; (required)
     * @param userKey The key of the user to query. The user must be in the organization domain (required)
     * @param body The new user data (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The user has been replaced. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> One of the following requirements is not met:&lt;br /&gt;The userName field is required.&lt;br /&gt;The userName field must be non-empty.&lt;br /&gt;The userName field cannot exceed 128 characters.&lt;br /&gt;The locale field must be composed of 1 or 2 parts.&lt;br /&gt;The locale language sub-field must be ISO-639.&lt;br /&gt;The locale country sub-field must be ISO-3166.&lt;br /&gt;The timezone field must be a valid timezone.&lt;br /&gt;The givenName field must not exceed 60 characters.&lt;br /&gt;The familyName field must not exceed 60 characters. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Client is not sufficiently authorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Invalid token passed </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> User not found </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> Email address conflict </td><td>  -  </td></tr>
        <tr><td> 502 </td><td> Authentication or account gateway error occurred </td><td>  -  </td></tr>
        <tr><td> 504 </td><td> Authentication or account gateway timeout occurred </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call replaceUserAsync(String authorization, Long userKey, UserDefinition body, final ApiCallback<User> _callback) throws ApiException {

        okhttp3.Call localVarCall = replaceUserValidateBeforeCall(authorization, userKey, body, _callback);
        Type localVarReturnType = new TypeToken<User>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for updateMe
     * @param authorization Access token prefixed with &#39;Bearer &#39;, e.g. &#39;Bearer 123456abcdef&#39; (required)
     * @param body The new user data (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The current user has been updated. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> One of the following requirements is not met:&lt;br /&gt;The userName field is required.&lt;br /&gt;The userName field must be non-empty.&lt;br /&gt;The userName field cannot exceed 128 characters.&lt;br /&gt;The locale field must be composed of 1 or 2 parts.&lt;br /&gt;The locale language sub-field must be ISO-639.&lt;br /&gt;The locale country sub-field must be ISO-3166.&lt;br /&gt;The timezone field must be a valid timezone.&lt;br /&gt;The givenName field must not exceed 60 characters.&lt;br /&gt;The familyName field must not exceed 60 characters. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Client is not sufficiently authorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Invalid token passed </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> User not found </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> Email address conflict </td><td>  -  </td></tr>
        <tr><td> 502 </td><td> Authentication or account gateway error occurred </td><td>  -  </td></tr>
        <tr><td> 504 </td><td> Authentication or account gateway timeout occurred </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateMeCall(String authorization, UserDefinition body, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = body;

        // create path and map variables
        String localVarPath = "/Users/me";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (authorization != null) {
            localVarHeaderParams.put("Authorization", localVarApiClient.parameterToString(authorization));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "PATCH", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call updateMeValidateBeforeCall(String authorization, UserDefinition body, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'authorization' is set
        if (authorization == null) {
            throw new ApiException("Missing the required parameter 'authorization' when calling updateMe(Async)");
        }

        // verify the required parameter 'body' is set
        if (body == null) {
            throw new ApiException("Missing the required parameter 'body' when calling updateMe(Async)");
        }

        return updateMeCall(authorization, body, _callback);

    }

    /**
     * Update Current User
     * Changes a limited set (or all if you choose) of the current authenticated user&#39;s data. The updated user email domain must be an existing organization email domain. 
     * @param authorization Access token prefixed with &#39;Bearer &#39;, e.g. &#39;Bearer 123456abcdef&#39; (required)
     * @param body The new user data (required)
     * @return User
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The current user has been updated. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> One of the following requirements is not met:&lt;br /&gt;The userName field is required.&lt;br /&gt;The userName field must be non-empty.&lt;br /&gt;The userName field cannot exceed 128 characters.&lt;br /&gt;The locale field must be composed of 1 or 2 parts.&lt;br /&gt;The locale language sub-field must be ISO-639.&lt;br /&gt;The locale country sub-field must be ISO-3166.&lt;br /&gt;The timezone field must be a valid timezone.&lt;br /&gt;The givenName field must not exceed 60 characters.&lt;br /&gt;The familyName field must not exceed 60 characters. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Client is not sufficiently authorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Invalid token passed </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> User not found </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> Email address conflict </td><td>  -  </td></tr>
        <tr><td> 502 </td><td> Authentication or account gateway error occurred </td><td>  -  </td></tr>
        <tr><td> 504 </td><td> Authentication or account gateway timeout occurred </td><td>  -  </td></tr>
     </table>
     */
    public User updateMe(String authorization, UserDefinition body) throws ApiException {
        ApiResponse<User> localVarResp = updateMeWithHttpInfo(authorization, body);
        return localVarResp.getData();
    }

    /**
     * Update Current User
     * Changes a limited set (or all if you choose) of the current authenticated user&#39;s data. The updated user email domain must be an existing organization email domain. 
     * @param authorization Access token prefixed with &#39;Bearer &#39;, e.g. &#39;Bearer 123456abcdef&#39; (required)
     * @param body The new user data (required)
     * @return ApiResponse&lt;User&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The current user has been updated. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> One of the following requirements is not met:&lt;br /&gt;The userName field is required.&lt;br /&gt;The userName field must be non-empty.&lt;br /&gt;The userName field cannot exceed 128 characters.&lt;br /&gt;The locale field must be composed of 1 or 2 parts.&lt;br /&gt;The locale language sub-field must be ISO-639.&lt;br /&gt;The locale country sub-field must be ISO-3166.&lt;br /&gt;The timezone field must be a valid timezone.&lt;br /&gt;The givenName field must not exceed 60 characters.&lt;br /&gt;The familyName field must not exceed 60 characters. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Client is not sufficiently authorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Invalid token passed </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> User not found </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> Email address conflict </td><td>  -  </td></tr>
        <tr><td> 502 </td><td> Authentication or account gateway error occurred </td><td>  -  </td></tr>
        <tr><td> 504 </td><td> Authentication or account gateway timeout occurred </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<User> updateMeWithHttpInfo(String authorization, UserDefinition body) throws ApiException {
        okhttp3.Call localVarCall = updateMeValidateBeforeCall(authorization, body, null);
        Type localVarReturnType = new TypeToken<User>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Update Current User (asynchronously)
     * Changes a limited set (or all if you choose) of the current authenticated user&#39;s data. The updated user email domain must be an existing organization email domain. 
     * @param authorization Access token prefixed with &#39;Bearer &#39;, e.g. &#39;Bearer 123456abcdef&#39; (required)
     * @param body The new user data (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The current user has been updated. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> One of the following requirements is not met:&lt;br /&gt;The userName field is required.&lt;br /&gt;The userName field must be non-empty.&lt;br /&gt;The userName field cannot exceed 128 characters.&lt;br /&gt;The locale field must be composed of 1 or 2 parts.&lt;br /&gt;The locale language sub-field must be ISO-639.&lt;br /&gt;The locale country sub-field must be ISO-3166.&lt;br /&gt;The timezone field must be a valid timezone.&lt;br /&gt;The givenName field must not exceed 60 characters.&lt;br /&gt;The familyName field must not exceed 60 characters. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Client is not sufficiently authorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Invalid token passed </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> User not found </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> Email address conflict </td><td>  -  </td></tr>
        <tr><td> 502 </td><td> Authentication or account gateway error occurred </td><td>  -  </td></tr>
        <tr><td> 504 </td><td> Authentication or account gateway timeout occurred </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateMeAsync(String authorization, UserDefinition body, final ApiCallback<User> _callback) throws ApiException {

        okhttp3.Call localVarCall = updateMeValidateBeforeCall(authorization, body, _callback);
        Type localVarReturnType = new TypeToken<User>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for updateUser
     * @param authorization Access token prefixed with &#39;Bearer &#39;, e.g. &#39;Bearer 123456abcdef&#39; (required)
     * @param userKey The key of the user to query. The user must be in the organization domain (required)
     * @param body The new user data (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The user has been updated. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> One of the following requirements is not met:&lt;br /&gt;The userName field is required.&lt;br /&gt;The userName field must be non-empty.&lt;br /&gt;The userName field cannot exceed 128 characters.&lt;br /&gt;The locale field must be composed of 1 or 2 parts.&lt;br /&gt;The locale language sub-field must be ISO-639.&lt;br /&gt;The locale country sub-field must be ISO-3166.&lt;br /&gt;The timezone field must be a valid timezone.&lt;br /&gt;The givenName field must not exceed 60 characters.&lt;br /&gt;The familyName field must not exceed 60 characters. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Client is not sufficiently authorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Invalid token passed </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> User not found </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> Email address conflict </td><td>  -  </td></tr>
        <tr><td> 502 </td><td> Authentication or account gateway error occurred </td><td>  -  </td></tr>
        <tr><td> 504 </td><td> Authentication or account gateway timeout occurred </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateUserCall(String authorization, Long userKey, UserDefinition body, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = body;

        // create path and map variables
        String localVarPath = "/Users/{userKey}"
            .replace("{" + "userKey" + "}", localVarApiClient.escapeString(userKey.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (authorization != null) {
            localVarHeaderParams.put("Authorization", localVarApiClient.parameterToString(authorization));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "PATCH", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call updateUserValidateBeforeCall(String authorization, Long userKey, UserDefinition body, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'authorization' is set
        if (authorization == null) {
            throw new ApiException("Missing the required parameter 'authorization' when calling updateUser(Async)");
        }

        // verify the required parameter 'userKey' is set
        if (userKey == null) {
            throw new ApiException("Missing the required parameter 'userKey' when calling updateUser(Async)");
        }

        // verify the required parameter 'body' is set
        if (body == null) {
            throw new ApiException("Missing the required parameter 'body' when calling updateUser(Async)");
        }

        return updateUserCall(authorization, userKey, body, _callback);

    }

    /**
     * Update User
     * Changes a limited set (or all if you choose) of the user&#39;s data. The updated user email domain must be an existing organization email domain.
     * @param authorization Access token prefixed with &#39;Bearer &#39;, e.g. &#39;Bearer 123456abcdef&#39; (required)
     * @param userKey The key of the user to query. The user must be in the organization domain (required)
     * @param body The new user data (required)
     * @return User
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The user has been updated. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> One of the following requirements is not met:&lt;br /&gt;The userName field is required.&lt;br /&gt;The userName field must be non-empty.&lt;br /&gt;The userName field cannot exceed 128 characters.&lt;br /&gt;The locale field must be composed of 1 or 2 parts.&lt;br /&gt;The locale language sub-field must be ISO-639.&lt;br /&gt;The locale country sub-field must be ISO-3166.&lt;br /&gt;The timezone field must be a valid timezone.&lt;br /&gt;The givenName field must not exceed 60 characters.&lt;br /&gt;The familyName field must not exceed 60 characters. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Client is not sufficiently authorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Invalid token passed </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> User not found </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> Email address conflict </td><td>  -  </td></tr>
        <tr><td> 502 </td><td> Authentication or account gateway error occurred </td><td>  -  </td></tr>
        <tr><td> 504 </td><td> Authentication or account gateway timeout occurred </td><td>  -  </td></tr>
     </table>
     */
    public User updateUser(String authorization, Long userKey, UserDefinition body) throws ApiException {
        ApiResponse<User> localVarResp = updateUserWithHttpInfo(authorization, userKey, body);
        return localVarResp.getData();
    }

    /**
     * Update User
     * Changes a limited set (or all if you choose) of the user&#39;s data. The updated user email domain must be an existing organization email domain.
     * @param authorization Access token prefixed with &#39;Bearer &#39;, e.g. &#39;Bearer 123456abcdef&#39; (required)
     * @param userKey The key of the user to query. The user must be in the organization domain (required)
     * @param body The new user data (required)
     * @return ApiResponse&lt;User&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The user has been updated. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> One of the following requirements is not met:&lt;br /&gt;The userName field is required.&lt;br /&gt;The userName field must be non-empty.&lt;br /&gt;The userName field cannot exceed 128 characters.&lt;br /&gt;The locale field must be composed of 1 or 2 parts.&lt;br /&gt;The locale language sub-field must be ISO-639.&lt;br /&gt;The locale country sub-field must be ISO-3166.&lt;br /&gt;The timezone field must be a valid timezone.&lt;br /&gt;The givenName field must not exceed 60 characters.&lt;br /&gt;The familyName field must not exceed 60 characters. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Client is not sufficiently authorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Invalid token passed </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> User not found </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> Email address conflict </td><td>  -  </td></tr>
        <tr><td> 502 </td><td> Authentication or account gateway error occurred </td><td>  -  </td></tr>
        <tr><td> 504 </td><td> Authentication or account gateway timeout occurred </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<User> updateUserWithHttpInfo(String authorization, Long userKey, UserDefinition body) throws ApiException {
        okhttp3.Call localVarCall = updateUserValidateBeforeCall(authorization, userKey, body, null);
        Type localVarReturnType = new TypeToken<User>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Update User (asynchronously)
     * Changes a limited set (or all if you choose) of the user&#39;s data. The updated user email domain must be an existing organization email domain.
     * @param authorization Access token prefixed with &#39;Bearer &#39;, e.g. &#39;Bearer 123456abcdef&#39; (required)
     * @param userKey The key of the user to query. The user must be in the organization domain (required)
     * @param body The new user data (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The user has been updated. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> One of the following requirements is not met:&lt;br /&gt;The userName field is required.&lt;br /&gt;The userName field must be non-empty.&lt;br /&gt;The userName field cannot exceed 128 characters.&lt;br /&gt;The locale field must be composed of 1 or 2 parts.&lt;br /&gt;The locale language sub-field must be ISO-639.&lt;br /&gt;The locale country sub-field must be ISO-3166.&lt;br /&gt;The timezone field must be a valid timezone.&lt;br /&gt;The givenName field must not exceed 60 characters.&lt;br /&gt;The familyName field must not exceed 60 characters. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Client is not sufficiently authorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Invalid token passed </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> User not found </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> Email address conflict </td><td>  -  </td></tr>
        <tr><td> 502 </td><td> Authentication or account gateway error occurred </td><td>  -  </td></tr>
        <tr><td> 504 </td><td> Authentication or account gateway timeout occurred </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateUserAsync(String authorization, Long userKey, UserDefinition body, final ApiCallback<User> _callback) throws ApiException {

        okhttp3.Call localVarCall = updateUserValidateBeforeCall(authorization, userKey, body, _callback);
        Type localVarReturnType = new TypeToken<User>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
