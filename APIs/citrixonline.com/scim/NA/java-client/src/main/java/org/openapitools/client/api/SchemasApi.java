/*
 * SCIM
 * The SCIM API lets you manage users in your organization. You can then automate the provisioning of product licenses for these users, and they can use your company's Single Sign-On solution through an Identity Provider.
 *
 * The version of the OpenAPI document: N/A
 * Contact: developer-support@citrixonline.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiCallback;
import org.openapitools.client.ApiClient;
import org.openapitools.client.ApiException;
import org.openapitools.client.ApiResponse;
import org.openapitools.client.Configuration;
import org.openapitools.client.Pair;
import org.openapitools.client.ProgressRequestBody;
import org.openapitools.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import org.openapitools.client.model.ResourceSchema;
import org.openapitools.client.model.ServiceProviderConfigs;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class SchemasApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public SchemasApi() {
        this(Configuration.getDefaultApiClient());
    }

    public SchemasApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for getServiceProviderConfigs
     * @param authorization Access token prefixed with &#39;Bearer &#39;, e.g. &#39;Bearer 123456abcdef&#39; (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The request has succeeded. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Invalid token passed </td><td>  -  </td></tr>
        <tr><td> 502 </td><td> Authentication or account gateway error occurred </td><td>  -  </td></tr>
        <tr><td> 504 </td><td> Authentication or account gateway timeout occurred </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getServiceProviderConfigsCall(String authorization, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/ServiceProviderConfigs";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (authorization != null) {
            localVarHeaderParams.put("Authorization", localVarApiClient.parameterToString(authorization));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getServiceProviderConfigsValidateBeforeCall(String authorization, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'authorization' is set
        if (authorization == null) {
            throw new ApiException("Missing the required parameter 'authorization' when calling getServiceProviderConfigs(Async)");
        }

        return getServiceProviderConfigsCall(authorization, _callback);

    }

    /**
     * Get Service Provider Configurations
     * Queries service provider configurations. The service provider configurations are defined in SCIM Core Schema (http://www.simplecloud.info/specs/draft-scim-core-schema-01.html#anchor6). This call returns a description, a documentationURL, name, and specURL.
     * @param authorization Access token prefixed with &#39;Bearer &#39;, e.g. &#39;Bearer 123456abcdef&#39; (required)
     * @return ServiceProviderConfigs
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The request has succeeded. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Invalid token passed </td><td>  -  </td></tr>
        <tr><td> 502 </td><td> Authentication or account gateway error occurred </td><td>  -  </td></tr>
        <tr><td> 504 </td><td> Authentication or account gateway timeout occurred </td><td>  -  </td></tr>
     </table>
     */
    public ServiceProviderConfigs getServiceProviderConfigs(String authorization) throws ApiException {
        ApiResponse<ServiceProviderConfigs> localVarResp = getServiceProviderConfigsWithHttpInfo(authorization);
        return localVarResp.getData();
    }

    /**
     * Get Service Provider Configurations
     * Queries service provider configurations. The service provider configurations are defined in SCIM Core Schema (http://www.simplecloud.info/specs/draft-scim-core-schema-01.html#anchor6). This call returns a description, a documentationURL, name, and specURL.
     * @param authorization Access token prefixed with &#39;Bearer &#39;, e.g. &#39;Bearer 123456abcdef&#39; (required)
     * @return ApiResponse&lt;ServiceProviderConfigs&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The request has succeeded. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Invalid token passed </td><td>  -  </td></tr>
        <tr><td> 502 </td><td> Authentication or account gateway error occurred </td><td>  -  </td></tr>
        <tr><td> 504 </td><td> Authentication or account gateway timeout occurred </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ServiceProviderConfigs> getServiceProviderConfigsWithHttpInfo(String authorization) throws ApiException {
        okhttp3.Call localVarCall = getServiceProviderConfigsValidateBeforeCall(authorization, null);
        Type localVarReturnType = new TypeToken<ServiceProviderConfigs>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get Service Provider Configurations (asynchronously)
     * Queries service provider configurations. The service provider configurations are defined in SCIM Core Schema (http://www.simplecloud.info/specs/draft-scim-core-schema-01.html#anchor6). This call returns a description, a documentationURL, name, and specURL.
     * @param authorization Access token prefixed with &#39;Bearer &#39;, e.g. &#39;Bearer 123456abcdef&#39; (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The request has succeeded. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Invalid token passed </td><td>  -  </td></tr>
        <tr><td> 502 </td><td> Authentication or account gateway error occurred </td><td>  -  </td></tr>
        <tr><td> 504 </td><td> Authentication or account gateway timeout occurred </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getServiceProviderConfigsAsync(String authorization, final ApiCallback<ServiceProviderConfigs> _callback) throws ApiException {

        okhttp3.Call localVarCall = getServiceProviderConfigsValidateBeforeCall(authorization, _callback);
        Type localVarReturnType = new TypeToken<ServiceProviderConfigs>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getUserSchema
     * @param authorization Access token prefixed with &#39;Bearer &#39;, e.g. &#39;Bearer 123456abcdef&#39; (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The request has succeeded. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Invalid token passed </td><td>  -  </td></tr>
        <tr><td> 502 </td><td> Authentication or account gateway error occurred </td><td>  -  </td></tr>
        <tr><td> 504 </td><td> Authentication or account gateway timeout occurred </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getUserSchemaCall(String authorization, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/Schemas/Users";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (authorization != null) {
            localVarHeaderParams.put("Authorization", localVarApiClient.parameterToString(authorization));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getUserSchemaValidateBeforeCall(String authorization, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'authorization' is set
        if (authorization == null) {
            throw new ApiException("Missing the required parameter 'authorization' when calling getUserSchema(Async)");
        }

        return getUserSchemaCall(authorization, _callback);

    }

    /**
     * Get User Schema
     * Queries the user schema. The user schema is defined in SCIM Core Schema (http://www.simplecloud.info/specs/draft-scim-core-schema-01.html#resource-schema).
     * @param authorization Access token prefixed with &#39;Bearer &#39;, e.g. &#39;Bearer 123456abcdef&#39; (required)
     * @return ResourceSchema
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The request has succeeded. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Invalid token passed </td><td>  -  </td></tr>
        <tr><td> 502 </td><td> Authentication or account gateway error occurred </td><td>  -  </td></tr>
        <tr><td> 504 </td><td> Authentication or account gateway timeout occurred </td><td>  -  </td></tr>
     </table>
     */
    public ResourceSchema getUserSchema(String authorization) throws ApiException {
        ApiResponse<ResourceSchema> localVarResp = getUserSchemaWithHttpInfo(authorization);
        return localVarResp.getData();
    }

    /**
     * Get User Schema
     * Queries the user schema. The user schema is defined in SCIM Core Schema (http://www.simplecloud.info/specs/draft-scim-core-schema-01.html#resource-schema).
     * @param authorization Access token prefixed with &#39;Bearer &#39;, e.g. &#39;Bearer 123456abcdef&#39; (required)
     * @return ApiResponse&lt;ResourceSchema&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The request has succeeded. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Invalid token passed </td><td>  -  </td></tr>
        <tr><td> 502 </td><td> Authentication or account gateway error occurred </td><td>  -  </td></tr>
        <tr><td> 504 </td><td> Authentication or account gateway timeout occurred </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ResourceSchema> getUserSchemaWithHttpInfo(String authorization) throws ApiException {
        okhttp3.Call localVarCall = getUserSchemaValidateBeforeCall(authorization, null);
        Type localVarReturnType = new TypeToken<ResourceSchema>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get User Schema (asynchronously)
     * Queries the user schema. The user schema is defined in SCIM Core Schema (http://www.simplecloud.info/specs/draft-scim-core-schema-01.html#resource-schema).
     * @param authorization Access token prefixed with &#39;Bearer &#39;, e.g. &#39;Bearer 123456abcdef&#39; (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The request has succeeded. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Invalid token passed </td><td>  -  </td></tr>
        <tr><td> 502 </td><td> Authentication or account gateway error occurred </td><td>  -  </td></tr>
        <tr><td> 504 </td><td> Authentication or account gateway timeout occurred </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getUserSchemaAsync(String authorization, final ApiCallback<ResourceSchema> _callback) throws ApiException {

        okhttp3.Call localVarCall = getUserSchemaValidateBeforeCall(authorization, _callback);
        Type localVarReturnType = new TypeToken<ResourceSchema>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
