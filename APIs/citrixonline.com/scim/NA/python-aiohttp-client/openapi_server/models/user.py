# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.user_full_name import UserFullName
from openapi_server.models.user_metadata import UserMetadata
from openapi_server import util


class User(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, display_name: str=None, id: str=None, locale: str=None, meta: UserMetadata=None, name: UserFullName=None, timezone: str=None, user_name: str=None):
        """User - a model defined in OpenAPI

        :param display_name: The display_name of this User.
        :param id: The id of this User.
        :param locale: The locale of this User.
        :param meta: The meta of this User.
        :param name: The name of this User.
        :param timezone: The timezone of this User.
        :param user_name: The user_name of this User.
        """
        self.openapi_types = {
            'display_name': str,
            'id': str,
            'locale': str,
            'meta': UserMetadata,
            'name': UserFullName,
            'timezone': str,
            'user_name': str
        }

        self.attribute_map = {
            'display_name': 'displayName',
            'id': 'id',
            'locale': 'locale',
            'meta': 'meta',
            'name': 'name',
            'timezone': 'timezone',
            'user_name': 'userName'
        }

        self._display_name = display_name
        self._id = id
        self._locale = locale
        self._meta = meta
        self._name = name
        self._timezone = timezone
        self._user_name = user_name

    @classmethod
    def from_dict(cls, dikt: dict) -> 'User':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The User of this User.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def display_name(self):
        """Gets the display_name of this User.

        The user's display name

        :return: The display_name of this User.
        :rtype: str
        """
        return self._display_name

    @display_name.setter
    def display_name(self, display_name):
        """Sets the display_name of this User.

        The user's display name

        :param display_name: The display_name of this User.
        :type display_name: str
        """
        if display_name is None:
            raise ValueError("Invalid value for `display_name`, must not be `None`")

        self._display_name = display_name

    @property
    def id(self):
        """Gets the id of this User.

        The user's unique key

        :return: The id of this User.
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this User.

        The user's unique key

        :param id: The id of this User.
        :type id: str
        """
        if id is None:
            raise ValueError("Invalid value for `id`, must not be `None`")

        self._id = id

    @property
    def locale(self):
        """Gets the locale of this User.

        The user's language settings

        :return: The locale of this User.
        :rtype: str
        """
        return self._locale

    @locale.setter
    def locale(self, locale):
        """Sets the locale of this User.

        The user's language settings

        :param locale: The locale of this User.
        :type locale: str
        """
        if locale is None:
            raise ValueError("Invalid value for `locale`, must not be `None`")

        self._locale = locale

    @property
    def meta(self):
        """Gets the meta of this User.


        :return: The meta of this User.
        :rtype: UserMetadata
        """
        return self._meta

    @meta.setter
    def meta(self, meta):
        """Sets the meta of this User.


        :param meta: The meta of this User.
        :type meta: UserMetadata
        """
        if meta is None:
            raise ValueError("Invalid value for `meta`, must not be `None`")

        self._meta = meta

    @property
    def name(self):
        """Gets the name of this User.


        :return: The name of this User.
        :rtype: UserFullName
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this User.


        :param name: The name of this User.
        :type name: UserFullName
        """
        if name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")

        self._name = name

    @property
    def timezone(self):
        """Gets the timezone of this User.

        The user's time zone

        :return: The timezone of this User.
        :rtype: str
        """
        return self._timezone

    @timezone.setter
    def timezone(self, timezone):
        """Sets the timezone of this User.

        The user's time zone

        :param timezone: The timezone of this User.
        :type timezone: str
        """
        if timezone is None:
            raise ValueError("Invalid value for `timezone`, must not be `None`")

        self._timezone = timezone

    @property
    def user_name(self):
        """Gets the user_name of this User.

        The user's username, usually their email address

        :return: The user_name of this User.
        :rtype: str
        """
        return self._user_name

    @user_name.setter
    def user_name(self, user_name):
        """Sets the user_name of this User.

        The user's username, usually their email address

        :param user_name: The user_name of this User.
        :type user_name: str
        """
        if user_name is None:
            raise ValueError("Invalid value for `user_name`, must not be `None`")

        self._user_name = user_name
