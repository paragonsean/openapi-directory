# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class UserMetadata(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, created: datetime=None, location: str=None):
        """UserMetadata - a model defined in OpenAPI

        :param created: The created of this UserMetadata.
        :param location: The location of this UserMetadata.
        """
        self.openapi_types = {
            'created': datetime,
            'location': str
        }

        self.attribute_map = {
            'created': 'created',
            'location': 'location'
        }

        self._created = created
        self._location = location

    @classmethod
    def from_dict(cls, dikt: dict) -> 'UserMetadata':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The UserMetadata of this UserMetadata.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def created(self):
        """Gets the created of this UserMetadata.

        The date and time the user was created

        :return: The created of this UserMetadata.
        :rtype: datetime
        """
        return self._created

    @created.setter
    def created(self, created):
        """Sets the created of this UserMetadata.

        The date and time the user was created

        :param created: The created of this UserMetadata.
        :type created: datetime
        """
        if created is None:
            raise ValueError("Invalid value for `created`, must not be `None`")

        self._created = created

    @property
    def location(self):
        """Gets the location of this UserMetadata.

        The URL where the user can be accessed

        :return: The location of this UserMetadata.
        :rtype: str
        """
        return self._location

    @location.setter
    def location(self, location):
        """Sets the location of this UserMetadata.

        The URL where the user can be accessed

        :param location: The location of this UserMetadata.
        :type location: str
        """
        if location is None:
            raise ValueError("Invalid value for `location`, must not be `None`")

        self._location = location
