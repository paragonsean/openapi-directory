# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.user import User
from openapi_server import util


class UserCollection(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, resources: List[User]=None, total_results: int=None):
        """UserCollection - a model defined in OpenAPI

        :param resources: The resources of this UserCollection.
        :param total_results: The total_results of this UserCollection.
        """
        self.openapi_types = {
            'resources': List[User],
            'total_results': int
        }

        self.attribute_map = {
            'resources': 'resources',
            'total_results': 'totalResults'
        }

        self._resources = resources
        self._total_results = total_results

    @classmethod
    def from_dict(cls, dikt: dict) -> 'UserCollection':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The UserCollection of this UserCollection.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def resources(self):
        """Gets the resources of this UserCollection.

        The list of users

        :return: The resources of this UserCollection.
        :rtype: List[User]
        """
        return self._resources

    @resources.setter
    def resources(self, resources):
        """Sets the resources of this UserCollection.

        The list of users

        :param resources: The resources of this UserCollection.
        :type resources: List[User]
        """
        if resources is None:
            raise ValueError("Invalid value for `resources`, must not be `None`")

        self._resources = resources

    @property
    def total_results(self):
        """Gets the total_results of this UserCollection.

        The number of users in the collection

        :return: The total_results of this UserCollection.
        :rtype: int
        """
        return self._total_results

    @total_results.setter
    def total_results(self, total_results):
        """Sets the total_results of this UserCollection.

        The number of users in the collection

        :param total_results: The total_results of this UserCollection.
        :type total_results: int
        """
        if total_results is None:
            raise ValueError("Invalid value for `total_results`, must not be `None`")

        self._total_results = total_results
