# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.schema_attribute import SchemaAttribute
from openapi_server import util


class ResourceSchema(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, attributes: List[SchemaAttribute]=None, description: str=None, endpoint: str=None, id: str=None, name: str=None, _schema: str=None):
        """ResourceSchema - a model defined in OpenAPI

        :param attributes: The attributes of this ResourceSchema.
        :param description: The description of this ResourceSchema.
        :param endpoint: The endpoint of this ResourceSchema.
        :param id: The id of this ResourceSchema.
        :param name: The name of this ResourceSchema.
        :param _schema: The _schema of this ResourceSchema.
        """
        self.openapi_types = {
            'attributes': List[SchemaAttribute],
            'description': str,
            'endpoint': str,
            'id': str,
            'name': str,
            '_schema': str
        }

        self.attribute_map = {
            'attributes': 'attributes',
            'description': 'description',
            'endpoint': 'endpoint',
            'id': 'id',
            'name': 'name',
            '_schema': 'schema'
        }

        self._attributes = attributes
        self._description = description
        self._endpoint = endpoint
        self._id = id
        self._name = name
        self.__schema = _schema

    @classmethod
    def from_dict(cls, dikt: dict) -> 'ResourceSchema':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The ResourceSchema of this ResourceSchema.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def attributes(self):
        """Gets the attributes of this ResourceSchema.

        The resource's attributes

        :return: The attributes of this ResourceSchema.
        :rtype: List[SchemaAttribute]
        """
        return self._attributes

    @attributes.setter
    def attributes(self, attributes):
        """Sets the attributes of this ResourceSchema.

        The resource's attributes

        :param attributes: The attributes of this ResourceSchema.
        :type attributes: List[SchemaAttribute]
        """
        if attributes is None:
            raise ValueError("Invalid value for `attributes`, must not be `None`")

        self._attributes = attributes

    @property
    def description(self):
        """Gets the description of this ResourceSchema.

        The resource's description

        :return: The description of this ResourceSchema.
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this ResourceSchema.

        The resource's description

        :param description: The description of this ResourceSchema.
        :type description: str
        """
        if description is None:
            raise ValueError("Invalid value for `description`, must not be `None`")

        self._description = description

    @property
    def endpoint(self):
        """Gets the endpoint of this ResourceSchema.

        The resource's HTTP addressable endpoint relative to the base URL, e.g. /Users.

        :return: The endpoint of this ResourceSchema.
        :rtype: str
        """
        return self._endpoint

    @endpoint.setter
    def endpoint(self, endpoint):
        """Sets the endpoint of this ResourceSchema.

        The resource's HTTP addressable endpoint relative to the base URL, e.g. /Users.

        :param endpoint: The endpoint of this ResourceSchema.
        :type endpoint: str
        """
        if endpoint is None:
            raise ValueError("Invalid value for `endpoint`, must not be `None`")

        self._endpoint = endpoint

    @property
    def id(self):
        """Gets the id of this ResourceSchema.

        The resource's id, e.g. urn:scim:schemas:core:1.0:User

        :return: The id of this ResourceSchema.
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this ResourceSchema.

        The resource's id, e.g. urn:scim:schemas:core:1.0:User

        :param id: The id of this ResourceSchema.
        :type id: str
        """
        if id is None:
            raise ValueError("Invalid value for `id`, must not be `None`")

        self._id = id

    @property
    def name(self):
        """Gets the name of this ResourceSchema.

        The resource's name, e.g. \"User\"

        :return: The name of this ResourceSchema.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this ResourceSchema.

        The resource's name, e.g. \"User\"

        :param name: The name of this ResourceSchema.
        :type name: str
        """
        if name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")

        self._name = name

    @property
    def _schema(self):
        """Gets the _schema of this ResourceSchema.

        The resource's associated schema, e.g. urn:scim:schemas:core:1.0

        :return: The _schema of this ResourceSchema.
        :rtype: str
        """
        return self.__schema

    @_schema.setter
    def _schema(self, _schema):
        """Sets the _schema of this ResourceSchema.

        The resource's associated schema, e.g. urn:scim:schemas:core:1.0

        :param _schema: The _schema of this ResourceSchema.
        :type _schema: str
        """
        if _schema is None:
            raise ValueError("Invalid value for `_schema`, must not be `None`")

        self.__schema = _schema
