# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.authentication_schemes import AuthenticationSchemes
from openapi_server.models.bulk import Bulk
from openapi_server.models.change_password import ChangePassword
from openapi_server.models.etag import Etag
from openapi_server.models.filter import Filter
from openapi_server.models.patch import Patch
from openapi_server.models.sort import Sort
from openapi_server.models.xml_data_format import XmlDataFormat
from openapi_server import util


class ServiceProviderConfigs(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, authentication_schemes: AuthenticationSchemes=None, bulk: Bulk=None, change_password: ChangePassword=None, documentation_url: str=None, etag: Etag=None, filter: Filter=None, patch: Patch=None, sort: Sort=None, xml_data_format: XmlDataFormat=None):
        """ServiceProviderConfigs - a model defined in OpenAPI

        :param authentication_schemes: The authentication_schemes of this ServiceProviderConfigs.
        :param bulk: The bulk of this ServiceProviderConfigs.
        :param change_password: The change_password of this ServiceProviderConfigs.
        :param documentation_url: The documentation_url of this ServiceProviderConfigs.
        :param etag: The etag of this ServiceProviderConfigs.
        :param filter: The filter of this ServiceProviderConfigs.
        :param patch: The patch of this ServiceProviderConfigs.
        :param sort: The sort of this ServiceProviderConfigs.
        :param xml_data_format: The xml_data_format of this ServiceProviderConfigs.
        """
        self.openapi_types = {
            'authentication_schemes': AuthenticationSchemes,
            'bulk': Bulk,
            'change_password': ChangePassword,
            'documentation_url': str,
            'etag': Etag,
            'filter': Filter,
            'patch': Patch,
            'sort': Sort,
            'xml_data_format': XmlDataFormat
        }

        self.attribute_map = {
            'authentication_schemes': 'authenticationSchemes',
            'bulk': 'bulk',
            'change_password': 'changePassword',
            'documentation_url': 'documentationUrl',
            'etag': 'etag',
            'filter': 'filter',
            'patch': 'patch',
            'sort': 'sort',
            'xml_data_format': 'xmlDataFormat'
        }

        self._authentication_schemes = authentication_schemes
        self._bulk = bulk
        self._change_password = change_password
        self._documentation_url = documentation_url
        self._etag = etag
        self._filter = filter
        self._patch = patch
        self._sort = sort
        self._xml_data_format = xml_data_format

    @classmethod
    def from_dict(cls, dikt: dict) -> 'ServiceProviderConfigs':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The ServiceProviderConfigs of this ServiceProviderConfigs.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def authentication_schemes(self):
        """Gets the authentication_schemes of this ServiceProviderConfigs.


        :return: The authentication_schemes of this ServiceProviderConfigs.
        :rtype: AuthenticationSchemes
        """
        return self._authentication_schemes

    @authentication_schemes.setter
    def authentication_schemes(self, authentication_schemes):
        """Sets the authentication_schemes of this ServiceProviderConfigs.


        :param authentication_schemes: The authentication_schemes of this ServiceProviderConfigs.
        :type authentication_schemes: AuthenticationSchemes
        """
        if authentication_schemes is None:
            raise ValueError("Invalid value for `authentication_schemes`, must not be `None`")

        self._authentication_schemes = authentication_schemes

    @property
    def bulk(self):
        """Gets the bulk of this ServiceProviderConfigs.


        :return: The bulk of this ServiceProviderConfigs.
        :rtype: Bulk
        """
        return self._bulk

    @bulk.setter
    def bulk(self, bulk):
        """Sets the bulk of this ServiceProviderConfigs.


        :param bulk: The bulk of this ServiceProviderConfigs.
        :type bulk: Bulk
        """
        if bulk is None:
            raise ValueError("Invalid value for `bulk`, must not be `None`")

        self._bulk = bulk

    @property
    def change_password(self):
        """Gets the change_password of this ServiceProviderConfigs.


        :return: The change_password of this ServiceProviderConfigs.
        :rtype: ChangePassword
        """
        return self._change_password

    @change_password.setter
    def change_password(self, change_password):
        """Sets the change_password of this ServiceProviderConfigs.


        :param change_password: The change_password of this ServiceProviderConfigs.
        :type change_password: ChangePassword
        """
        if change_password is None:
            raise ValueError("Invalid value for `change_password`, must not be `None`")

        self._change_password = change_password

    @property
    def documentation_url(self):
        """Gets the documentation_url of this ServiceProviderConfigs.

        An HTTP addressable URL pointing to the Service Provider's help documentation

        :return: The documentation_url of this ServiceProviderConfigs.
        :rtype: str
        """
        return self._documentation_url

    @documentation_url.setter
    def documentation_url(self, documentation_url):
        """Sets the documentation_url of this ServiceProviderConfigs.

        An HTTP addressable URL pointing to the Service Provider's help documentation

        :param documentation_url: The documentation_url of this ServiceProviderConfigs.
        :type documentation_url: str
        """
        if documentation_url is None:
            raise ValueError("Invalid value for `documentation_url`, must not be `None`")

        self._documentation_url = documentation_url

    @property
    def etag(self):
        """Gets the etag of this ServiceProviderConfigs.


        :return: The etag of this ServiceProviderConfigs.
        :rtype: Etag
        """
        return self._etag

    @etag.setter
    def etag(self, etag):
        """Sets the etag of this ServiceProviderConfigs.


        :param etag: The etag of this ServiceProviderConfigs.
        :type etag: Etag
        """
        if etag is None:
            raise ValueError("Invalid value for `etag`, must not be `None`")

        self._etag = etag

    @property
    def filter(self):
        """Gets the filter of this ServiceProviderConfigs.


        :return: The filter of this ServiceProviderConfigs.
        :rtype: Filter
        """
        return self._filter

    @filter.setter
    def filter(self, filter):
        """Sets the filter of this ServiceProviderConfigs.


        :param filter: The filter of this ServiceProviderConfigs.
        :type filter: Filter
        """
        if filter is None:
            raise ValueError("Invalid value for `filter`, must not be `None`")

        self._filter = filter

    @property
    def patch(self):
        """Gets the patch of this ServiceProviderConfigs.


        :return: The patch of this ServiceProviderConfigs.
        :rtype: Patch
        """
        return self._patch

    @patch.setter
    def patch(self, patch):
        """Sets the patch of this ServiceProviderConfigs.


        :param patch: The patch of this ServiceProviderConfigs.
        :type patch: Patch
        """
        if patch is None:
            raise ValueError("Invalid value for `patch`, must not be `None`")

        self._patch = patch

    @property
    def sort(self):
        """Gets the sort of this ServiceProviderConfigs.


        :return: The sort of this ServiceProviderConfigs.
        :rtype: Sort
        """
        return self._sort

    @sort.setter
    def sort(self, sort):
        """Sets the sort of this ServiceProviderConfigs.


        :param sort: The sort of this ServiceProviderConfigs.
        :type sort: Sort
        """
        if sort is None:
            raise ValueError("Invalid value for `sort`, must not be `None`")

        self._sort = sort

    @property
    def xml_data_format(self):
        """Gets the xml_data_format of this ServiceProviderConfigs.


        :return: The xml_data_format of this ServiceProviderConfigs.
        :rtype: XmlDataFormat
        """
        return self._xml_data_format

    @xml_data_format.setter
    def xml_data_format(self, xml_data_format):
        """Sets the xml_data_format of this ServiceProviderConfigs.


        :param xml_data_format: The xml_data_format of this ServiceProviderConfigs.
        :type xml_data_format: XmlDataFormat
        """
        if xml_data_format is None:
            raise ValueError("Invalid value for `xml_data_format`, must not be `None`")

        self._xml_data_format = xml_data_format
