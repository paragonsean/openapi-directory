# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.group_metadata import GroupMetadata
from openapi_server.models.member import Member
from openapi_server import util


class Group(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, display_name: str=None, id: str=None, members: List[Member]=None, meta: GroupMetadata=None):
        """Group - a model defined in OpenAPI

        :param display_name: The display_name of this Group.
        :param id: The id of this Group.
        :param members: The members of this Group.
        :param meta: The meta of this Group.
        """
        self.openapi_types = {
            'display_name': str,
            'id': str,
            'members': List[Member],
            'meta': GroupMetadata
        }

        self.attribute_map = {
            'display_name': 'displayName',
            'id': 'id',
            'members': 'members',
            'meta': 'meta'
        }

        self._display_name = display_name
        self._id = id
        self._members = members
        self._meta = meta

    @classmethod
    def from_dict(cls, dikt: dict) -> 'Group':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Group of this Group.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def display_name(self):
        """Gets the display_name of this Group.

        The group's display name

        :return: The display_name of this Group.
        :rtype: str
        """
        return self._display_name

    @display_name.setter
    def display_name(self, display_name):
        """Sets the display_name of this Group.

        The group's display name

        :param display_name: The display_name of this Group.
        :type display_name: str
        """
        if display_name is None:
            raise ValueError("Invalid value for `display_name`, must not be `None`")

        self._display_name = display_name

    @property
    def id(self):
        """Gets the id of this Group.

        The group's unique key

        :return: The id of this Group.
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this Group.

        The group's unique key

        :param id: The id of this Group.
        :type id: str
        """
        if id is None:
            raise ValueError("Invalid value for `id`, must not be `None`")

        self._id = id

    @property
    def members(self):
        """Gets the members of this Group.

        An array of members

        :return: The members of this Group.
        :rtype: List[Member]
        """
        return self._members

    @members.setter
    def members(self, members):
        """Sets the members of this Group.

        An array of members

        :param members: The members of this Group.
        :type members: List[Member]
        """

        self._members = members

    @property
    def meta(self):
        """Gets the meta of this Group.


        :return: The meta of this Group.
        :rtype: GroupMetadata
        """
        return self._meta

    @meta.setter
    def meta(self, meta):
        """Sets the meta of this Group.


        :param meta: The meta of this Group.
        :type meta: GroupMetadata
        """
        if meta is None:
            raise ValueError("Invalid value for `meta`, must not be `None`")

        self._meta = meta
