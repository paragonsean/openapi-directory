# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class Sort(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, supported: bool=None):
        """Sort - a model defined in OpenAPI

        :param supported: The supported of this Sort.
        """
        self.openapi_types = {
            'supported': bool
        }

        self.attribute_map = {
            'supported': 'supported'
        }

        self._supported = supported

    @classmethod
    def from_dict(cls, dikt: dict) -> 'Sort':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Sort of this Sort.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def supported(self):
        """Gets the supported of this Sort.

        Specifies whether the operation is supported

        :return: The supported of this Sort.
        :rtype: bool
        """
        return self._supported

    @supported.setter
    def supported(self, supported):
        """Sets the supported of this Sort.

        Specifies whether the operation is supported

        :param supported: The supported of this Sort.
        :type supported: bool
        """
        if supported is None:
            raise ValueError("Invalid value for `supported`, must not be `None`")

        self._supported = supported
