# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.schema_sub_attribute import SchemaSubAttribute
from openapi_server import util


class SchemaAttribute(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, case_exact: bool=None, description: str=None, multi_valued: bool=None, name: str=None, read_only: bool=None, required: bool=None, _schema: str=None, sub_attributes: List[SchemaSubAttribute]=None, type: str=None):
        """SchemaAttribute - a model defined in OpenAPI

        :param case_exact: The case_exact of this SchemaAttribute.
        :param description: The description of this SchemaAttribute.
        :param multi_valued: The multi_valued of this SchemaAttribute.
        :param name: The name of this SchemaAttribute.
        :param read_only: The read_only of this SchemaAttribute.
        :param required: The required of this SchemaAttribute.
        :param _schema: The _schema of this SchemaAttribute.
        :param sub_attributes: The sub_attributes of this SchemaAttribute.
        :param type: The type of this SchemaAttribute.
        """
        self.openapi_types = {
            'case_exact': bool,
            'description': str,
            'multi_valued': bool,
            'name': str,
            'read_only': bool,
            'required': bool,
            '_schema': str,
            'sub_attributes': List[SchemaSubAttribute],
            'type': str
        }

        self.attribute_map = {
            'case_exact': 'caseExact',
            'description': 'description',
            'multi_valued': 'multiValued',
            'name': 'name',
            'read_only': 'readOnly',
            'required': 'required',
            '_schema': 'schema',
            'sub_attributes': 'subAttributes',
            'type': 'type'
        }

        self._case_exact = case_exact
        self._description = description
        self._multi_valued = multi_valued
        self._name = name
        self._read_only = read_only
        self._required = required
        self.__schema = _schema
        self._sub_attributes = sub_attributes
        self._type = type

    @classmethod
    def from_dict(cls, dikt: dict) -> 'SchemaAttribute':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The SchemaAttribute of this SchemaAttribute.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def case_exact(self):
        """Gets the case_exact of this SchemaAttribute.

        Indicates whether the attribute is case sensitive

        :return: The case_exact of this SchemaAttribute.
        :rtype: bool
        """
        return self._case_exact

    @case_exact.setter
    def case_exact(self, case_exact):
        """Sets the case_exact of this SchemaAttribute.

        Indicates whether the attribute is case sensitive

        :param case_exact: The case_exact of this SchemaAttribute.
        :type case_exact: bool
        """
        if case_exact is None:
            raise ValueError("Invalid value for `case_exact`, must not be `None`")

        self._case_exact = case_exact

    @property
    def description(self):
        """Gets the description of this SchemaAttribute.

        The attribute's description

        :return: The description of this SchemaAttribute.
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this SchemaAttribute.

        The attribute's description

        :param description: The description of this SchemaAttribute.
        :type description: str
        """
        if description is None:
            raise ValueError("Invalid value for `description`, must not be `None`")

        self._description = description

    @property
    def multi_valued(self):
        """Gets the multi_valued of this SchemaAttribute.

        Indicates whether the attribute can have multiple values

        :return: The multi_valued of this SchemaAttribute.
        :rtype: bool
        """
        return self._multi_valued

    @multi_valued.setter
    def multi_valued(self, multi_valued):
        """Sets the multi_valued of this SchemaAttribute.

        Indicates whether the attribute can have multiple values

        :param multi_valued: The multi_valued of this SchemaAttribute.
        :type multi_valued: bool
        """
        if multi_valued is None:
            raise ValueError("Invalid value for `multi_valued`, must not be `None`")

        self._multi_valued = multi_valued

    @property
    def name(self):
        """Gets the name of this SchemaAttribute.

        The attribute's name

        :return: The name of this SchemaAttribute.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this SchemaAttribute.

        The attribute's name

        :param name: The name of this SchemaAttribute.
        :type name: str
        """
        if name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")

        self._name = name

    @property
    def read_only(self):
        """Gets the read_only of this SchemaAttribute.

        Indicates whether the attribute is mutable

        :return: The read_only of this SchemaAttribute.
        :rtype: bool
        """
        return self._read_only

    @read_only.setter
    def read_only(self, read_only):
        """Sets the read_only of this SchemaAttribute.

        Indicates whether the attribute is mutable

        :param read_only: The read_only of this SchemaAttribute.
        :type read_only: bool
        """
        if read_only is None:
            raise ValueError("Invalid value for `read_only`, must not be `None`")

        self._read_only = read_only

    @property
    def required(self):
        """Gets the required of this SchemaAttribute.

        Indicates whether the attribute is required

        :return: The required of this SchemaAttribute.
        :rtype: bool
        """
        return self._required

    @required.setter
    def required(self, required):
        """Sets the required of this SchemaAttribute.

        Indicates whether the attribute is required

        :param required: The required of this SchemaAttribute.
        :type required: bool
        """
        if required is None:
            raise ValueError("Invalid value for `required`, must not be `None`")

        self._required = required

    @property
    def _schema(self):
        """Gets the _schema of this SchemaAttribute.

        The attribute's associated scheme, e.g. urn:scim:schemas:core:1.0

        :return: The _schema of this SchemaAttribute.
        :rtype: str
        """
        return self.__schema

    @_schema.setter
    def _schema(self, _schema):
        """Sets the _schema of this SchemaAttribute.

        The attribute's associated scheme, e.g. urn:scim:schemas:core:1.0

        :param _schema: The _schema of this SchemaAttribute.
        :type _schema: str
        """
        if _schema is None:
            raise ValueError("Invalid value for `_schema`, must not be `None`")

        self.__schema = _schema

    @property
    def sub_attributes(self):
        """Gets the sub_attributes of this SchemaAttribute.

        The attribute's potential sub-attributes

        :return: The sub_attributes of this SchemaAttribute.
        :rtype: List[SchemaSubAttribute]
        """
        return self._sub_attributes

    @sub_attributes.setter
    def sub_attributes(self, sub_attributes):
        """Sets the sub_attributes of this SchemaAttribute.

        The attribute's potential sub-attributes

        :param sub_attributes: The sub_attributes of this SchemaAttribute.
        :type sub_attributes: List[SchemaSubAttribute]
        """

        self._sub_attributes = sub_attributes

    @property
    def type(self):
        """Gets the type of this SchemaAttribute.

        The attribute's data type, e.g. String

        :return: The type of this SchemaAttribute.
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this SchemaAttribute.

        The attribute's data type, e.g. String

        :param type: The type of this SchemaAttribute.
        :type type: str
        """
        if type is None:
            raise ValueError("Invalid value for `type`, must not be `None`")

        self._type = type
