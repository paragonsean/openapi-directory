openapi: 3.0.1
info:
  contact:
    email: developer-support@citrixonline.com
    name: Developer Support
    url: https://developer.citrixonline.com
  description: "The SCIM API lets you manage users in your organization. You can then\
    \ automate the provisioning of product licenses for these users, and they can\
    \ use your company's Single Sign-On solution through an Identity Provider."
  termsOfService: https://developer.citrixonline.com/terms-use
  title: SCIM
  version: N/A
  x-logo:
    backgroundColor: '#5F6166'
    url: https://twitter.com/citrix/profile_image?size=original
  x-origin:
  - format: swagger
    url: https://developer.citrixonline.com/sites/default/files/citrix/citrix-apis/scim.json
    version: "2.0"
  x-providerName: citrixonline.com
  x-serviceName: scim
externalDocs:
  url: https://developer.citrixonline.com/
servers:
- url: https://api.citrixonline.com/identity/v1
tags:
- description: Operations on users belonging to an organization
  name: Users
- description: Operations on groups belonging to an organization
  name: Groups
- description: Operations on schemas
  name: Schemas
paths:
  /Groups:
    get:
      description: "Queries multiple group identities in the organization domain.\
        \ Filtering, sorting and pagination are available. This call requires the\
        \ role ROLE_ORG_READ."
      operationId: get_groups
      parameters:
      - description: "Access token prefixed with 'Bearer ', e.g. 'Bearer 123456abcdef'"
        in: header
        name: Authorization
        required: true
        schema:
          type: string
      - description: " Without a filter, all groups are returned. The filter parameter\
          \ must be a properly formed SCIM filter using the operator \"eq\" (equals),\
          \ \"sw\" (starts with), or \"co\" (contains). The filter works for the displayName\
          \ attribute. Sorting and pagination are supported. For example, GET /Groups?filter=displayName%20eq%20%22Engineering%22&sortBy=displayName&sortOrder=ascending&count=50&startIndex=51"
        in: query
        name: filter
        schema:
          type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GroupCollection'
          description: The request has succeeded
        "400":
          content: {}
          description: Invalid filter syntax
        "401":
          content: {}
          description: Client is not sufficiently authorized
        "403":
          content: {}
          description: Invalid token passed
        "502":
          content: {}
          description: Authentication or account gateway error occurred
        "504":
          content: {}
          description: Authentication or account gateway timeout occurred
      summary: Get Groups
      tags:
      - Groups
      x-openapi-router-controller: openapi_server.controllers.groups_controller
    post:
      description: Creates a new organization group and adds it to the user domain.
        Member groups and member users must be in the organization. This call requires
        the role ROLE_ORG_WRITE.
      operationId: create_group
      parameters:
      - description: "Access token prefixed with 'Bearer ', e.g. 'Bearer 123456abcdef'"
        in: header
        name: authorization
        required: true
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/GroupDefinition'
        description: The details of the group to create
        required: true
        x-body-name: body
      responses:
        "201":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Group'
          description: The group has been created
        "400":
          content: {}
          description: Possible reasons are:<br />The displayName field is not set<br
            />The displayName field is malformed<br />The displayName field exceeds
            128 characters<br />The members array exceeds 100 elements<br />
        "401":
          content: {}
          description: Client is not sufficiently authorized
        "403":
          content: {}
          description: Invalid token passed
        "409":
          content: {}
          description: The displayName is already in use within the organization
        "502":
          content: {}
          description: An authentication or account gateway error occurred
        "504":
          content: {}
          description: "An authentication or account, or gateway timeout occurred."
      summary: Create Group
      tags:
      - Groups
      x-codegen-request-body-name: body
      x-openapi-router-controller: openapi_server.controllers.groups_controller
  /Groups/{groupKey}:
    delete:
      description: Deletes a group from the organization (but not from the account).
        The group must be in the organization. This call requires the role ROLE_ORG_WRITE.
      operationId: delete_group
      parameters:
      - description: "Access token prefixed with 'Bearer ', e.g. 'Bearer 123456abcdef'"
        in: header
        name: authorization
        required: true
        schema:
          type: string
      - description: The key of the group to query. The group must be in the organization
          domain
        in: path
        name: group_key
        required: true
        schema:
          format: int64
          type: integer
      responses:
        "200":
          content: {}
          description: The request has succeeded
        "401":
          content: {}
          description: Client is not sufficiently authorized or group does not exist
            in organization
        "403":
          content: {}
          description: Invalid token passed
        "502":
          content: {}
          description: Authentication or account gateway error occurred
        "504":
          content: {}
          description: Authentication or account gateway timeout occurred
      summary: Delete Group
      tags:
      - Groups
      x-openapi-router-controller: openapi_server.controllers.groups_controller
    get:
      description: Queries group details in the organization domain. This call requires
        the role ROLE_ORG_READ.
      operationId: get_group
      parameters:
      - description: "Access token prefixed with 'Bearer ', e.g. 'Bearer 123456abcdef'"
        in: header
        name: authorization
        required: true
        schema:
          type: string
      - description: The key of the group to query. The group must be in the organization
          domain
        in: path
        name: groupKey
        required: true
        schema:
          format: int64
          type: integer
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Group'
          description: The request has succeeded
        "401":
          content: {}
          description: Client is not sufficiently authorized or group does not exist
            in organization
        "403":
          content: {}
          description: Invalid token passed
        "502":
          content: {}
          description: Authentication or account gateway error occurred
        "504":
          content: {}
          description: Authentication or account gateway timeout occurred
      summary: Get Group
      tags:
      - Groups
      x-openapi-router-controller: openapi_server.controllers.groups_controller
    patch:
      description: Updates one or more values of an existing group without sending
        the full definition. Member groups and member users must be in the organization.
        This call requires the role ROLE_ORG_WRITE.
      operationId: update_group
      parameters:
      - description: "Access token prefixed with 'Bearer ', e.g. 'Bearer 123456abcdef'"
        in: header
        name: authorization
        required: true
        schema:
          type: string
      - description: The key of the group to query. The group must be in the organization
          domain
        in: path
        name: group_key
        required: true
        schema:
          format: int64
          type: integer
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/GroupDefinition'
        description: The group data to update. It is allowed to update one or more
          values of the group definition
        required: true
        x-body-name: body
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Group'
          description: The group has been updated
        "400":
          content: {}
          description: Possible reasons are:<br />The displayName field is not set<br
            />The displayName field is malformed<br />The displayName field exceeds
            128 characters<br />The members array exceeds 100 elements<br />
        "401":
          content: {}
          description: Client is not sufficiently authorized or group does not exist
            in organization
        "403":
          content: {}
          description: Invalid token passed
        "409":
          content: {}
          description: The displayName is already in use within the organization
        "502":
          content: {}
          description: Authentication or account gateway error occurred
        "504":
          content: {}
          description: Authentication or account gateway timeout occurred
      summary: Update Group
      tags:
      - Groups
      x-codegen-request-body-name: body
      x-openapi-router-controller: openapi_server.controllers.groups_controller
    put:
      description: "Updates an existing group. The request must include the full group\
        \ definition. To modify one or more values without sending the full definition,\
        \ see \"Update Group\". Member groups and member users must be in the organization.\
        \ This call requires the role ROLE_ORG_WRITE."
      operationId: replace_group
      parameters:
      - description: "Access token prefixed with 'Bearer ', e.g. 'Bearer 123456abcdef'"
        in: header
        name: authorization
        required: true
        schema:
          type: string
      - description: The key of the group to query. The group must be in the organization
          domain
        in: path
        name: group_key
        required: true
        schema:
          format: int64
          type: integer
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/GroupDefinition'
        description: The new group definition
        required: true
        x-body-name: body
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Group'
          description: The group has been replaced.
        "400":
          content: {}
          description: Possible reasons are:<br />The displayName field is not set<br
            />The displayName field is malformed<br />The displayName field exceeds
            128 characters<br />The members array exceeds 100 elements<br />
        "401":
          content: {}
          description: Client is not sufficiently authorized or group does not exist
            in organization
        "403":
          content: {}
          description: Invalid token passed
        "409":
          content: {}
          description: The displayName is already in use within the organization
        "502":
          content: {}
          description: Authentication or account gateway error occurred
        "504":
          content: {}
          description: Authentication or account gateway timeout occurred
      summary: Replace Group
      tags:
      - Groups
      x-codegen-request-body-name: body
      x-openapi-router-controller: openapi_server.controllers.groups_controller
  /Schemas/Users:
    get:
      description: Queries the user schema. The user schema is defined in SCIM Core
        Schema (http://www.simplecloud.info/specs/draft-scim-core-schema-01.html#resource-schema).
      operationId: get_user_schema
      parameters:
      - description: "Access token prefixed with 'Bearer ', e.g. 'Bearer 123456abcdef'"
        in: header
        name: authorization
        required: true
        schema:
          type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourceSchema'
          description: The request has succeeded.
        "403":
          content: {}
          description: Invalid token passed
        "502":
          content: {}
          description: Authentication or account gateway error occurred
        "504":
          content: {}
          description: Authentication or account gateway timeout occurred
      summary: Get User Schema
      tags:
      - Schemas
      x-openapi-router-controller: openapi_server.controllers.schemas_controller
  /ServiceProviderConfigs:
    get:
      description: "Queries service provider configurations. The service provider\
        \ configurations are defined in SCIM Core Schema (http://www.simplecloud.info/specs/draft-scim-core-schema-01.html#anchor6).\
        \ This call returns a description, a documentationURL, name, and specURL."
      operationId: get_service_provider_configs
      parameters:
      - description: "Access token prefixed with 'Bearer ', e.g. 'Bearer 123456abcdef'"
        in: header
        name: authorization
        required: true
        schema:
          type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServiceProviderConfigs'
          description: The request has succeeded.
        "403":
          content: {}
          description: Invalid token passed
        "502":
          content: {}
          description: Authentication or account gateway error occurred
        "504":
          content: {}
          description: Authentication or account gateway timeout occurred
      summary: Get Service Provider Configurations
      tags:
      - Schemas
      x-openapi-router-controller: openapi_server.controllers.schemas_controller
  /Users:
    get:
      description: Queries multiple user identities in the organization domain. Filtering
        is available.
      operationId: get_users
      parameters:
      - description: "Access token prefixed with 'Bearer ', e.g. 'Bearer 123456abcdef'"
        in: header
        name: authorization
        required: true
        schema:
          type: string
      - description: " Without a filter, all users in a user domain are returned.\
          \ The filter parameter must be a properly formed SCIM filter using either\
          \ the operator eq (equals) or the operator sw (starts with). The filter\
          \ works for userName, displayName, name.givenName, and name.familyName attributes.\
          \ For example, /Users?filter=name.familyName%20eq%20%%22Smith%22"
        in: query
        name: filter
        schema:
          type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserCollection'
          description: The request has succeeded.
        "400":
          content: {}
          description: Invalid filter syntax
        "401":
          content: {}
          description: Client is not sufficiently authorized
        "403":
          content: {}
          description: Invalid token passed
        "502":
          content: {}
          description: Authentication or account gateway error occurred
        "504":
          content: {}
          description: Authentication or account gateway timeout occurred
      summary: Get Users
      tags:
      - Users
      x-openapi-router-controller: openapi_server.controllers.users_controller
    post:
      description: Creates a new organization user and adds them to the user domain.
        The user email domain must match an existing organization email domain.
      operationId: create_users
      parameters:
      - description: "Access token prefixed with 'Bearer ', e.g. 'Bearer 123456abcdef'"
        in: header
        name: authorization
        required: true
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserDefinition'
        description: The details of the user to create
        required: true
        x-body-name: body
      responses:
        "201":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
          description: The user has been created.
        "400":
          content: {}
          description: One of the following requirements is not met:<br />The userName
            field is required.<br />The userName field must be non-empty.<br />The
            userName field cannot exceed 128 characters.<br />The locale field must
            be composed of 1 or 2 parts.<br />The locale language sub-field must be
            ISO-639.<br />The locale country sub-field must be ISO-3166.<br />The
            timezone field must be a valid timezone.<br />The givenName field must
            not exceed 60 characters.<br />The familyName field must not exceed 60
            characters.
        "401":
          content: {}
          description: Client is not sufficiently authorized.
        "403":
          content: {}
          description: Invalid token passed
        "409":
          content: {}
          description: Username is already in use.
        "502":
          content: {}
          description: "Authentication, account, or email verification gateway error\
            \ occurred."
        "504":
          content: {}
          description: "Authentication, account, or email verification gateway timeout\
            \ occurred."
      summary: Create User
      tags:
      - Users
      x-codegen-request-body-name: body
      x-openapi-router-controller: openapi_server.controllers.users_controller
  /Users/me:
    get:
      description: Queries the identity of the current authenticated user.
      operationId: get_me
      parameters:
      - description: "Access token prefixed with 'Bearer ', e.g. 'Bearer 123456abcdef'"
        in: header
        name: authorization
        required: true
        schema:
          type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
          description: The request has succeeded.
        "401":
          content: {}
          description: Client is not sufficiently authorized
        "403":
          content: {}
          description: Invalid token passed
        "404":
          content: {}
          description: User not found
        "502":
          content: {}
          description: Authentication or account gateway error occurred
        "504":
          content: {}
          description: Authentication or account gateway timeout occurred
      summary: Get Current User
      tags:
      - Users
      x-openapi-router-controller: openapi_server.controllers.users_controller
    patch:
      description: 'Changes a limited set (or all if you choose) of the current authenticated
        user''s data. The updated user email domain must be an existing organization
        email domain. '
      operationId: update_me
      parameters:
      - description: "Access token prefixed with 'Bearer ', e.g. 'Bearer 123456abcdef'"
        in: header
        name: authorization
        required: true
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserDefinition'
        description: The new user data
        required: true
        x-body-name: body
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
          description: The current user has been updated.
        "400":
          content: {}
          description: One of the following requirements is not met:<br />The userName
            field is required.<br />The userName field must be non-empty.<br />The
            userName field cannot exceed 128 characters.<br />The locale field must
            be composed of 1 or 2 parts.<br />The locale language sub-field must be
            ISO-639.<br />The locale country sub-field must be ISO-3166.<br />The
            timezone field must be a valid timezone.<br />The givenName field must
            not exceed 60 characters.<br />The familyName field must not exceed 60
            characters.
        "401":
          content: {}
          description: Client is not sufficiently authorized
        "403":
          content: {}
          description: Invalid token passed
        "404":
          content: {}
          description: User not found
        "409":
          content: {}
          description: Email address conflict
        "502":
          content: {}
          description: Authentication or account gateway error occurred
        "504":
          content: {}
          description: Authentication or account gateway timeout occurred
      summary: Update Current User
      tags:
      - Users
      x-codegen-request-body-name: body
      x-openapi-router-controller: openapi_server.controllers.users_controller
    put:
      description: "Changes the current authenticated user's displayName, locale,\
        \ timezone, username and password. The request must include the full user\
        \ definition (to modify one or more values without sending the full definition,\
        \ see Update User). The replaced user email domain must be an existing organization\
        \ email domain. "
      operationId: replace_me
      parameters:
      - description: "Access token prefixed with 'Bearer ', e.g. 'Bearer 123456abcdef'"
        in: header
        name: authorization
        required: true
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserDefinition'
        description: The new user data
        required: true
        x-body-name: body
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
          description: The current user has been replaced.
        "400":
          content: {}
          description: One of the following requirements is not met:<br />The userName
            field is required.<br />The userName field must be non-empty.<br />The
            userName field cannot exceed 128 characters.<br />The locale field must
            be composed of 1 or 2 parts.<br />The locale language sub-field must be
            ISO-639.<br />The locale country sub-field must be ISO-3166.<br />The
            timezone field must be a valid timezone.<br />The givenName field must
            not exceed 60 characters.<br />The familyName field must not exceed 60
            characters.
        "401":
          content: {}
          description: Client is not sufficiently authorized
        "403":
          content: {}
          description: Invalid token passed
        "404":
          content: {}
          description: User not found
        "409":
          content: {}
          description: Email address conflict
        "502":
          content: {}
          description: Authentication or account gateway error occurred
        "504":
          content: {}
          description: Authentication or account gateway timeout occurred
      summary: Replace Current User
      tags:
      - Users
      x-codegen-request-body-name: body
      x-openapi-router-controller: openapi_server.controllers.users_controller
  /Users/{userKey}:
    delete:
      description: Deletes a user from the organization (but not from the account).
      operationId: delete_user
      parameters:
      - description: "Access token prefixed with 'Bearer ', e.g. 'Bearer 123456abcdef'"
        in: header
        name: authorization
        required: true
        schema:
          type: string
      - description: The key of the user to query. The user must be in the organization
          domain
        in: path
        name: user_key
        required: true
        schema:
          format: int64
          type: integer
      responses:
        "200":
          content: {}
          description: The request has succeeded.
        "401":
          content: {}
          description: Client is not sufficiently authorized
        "403":
          content: {}
          description: Invalid token passed
        "404":
          content: {}
          description: User not found
        "502":
          content: {}
          description: Authentication or account gateway error occurred
        "504":
          content: {}
          description: Authentication or account gateway timeout occurred
      summary: Delete User
      tags:
      - Users
      x-openapi-router-controller: openapi_server.controllers.users_controller
    get:
      description: Queries user identity in the organization domain.
      operationId: get_user
      parameters:
      - description: "Access token prefixed with 'Bearer ', e.g. 'Bearer 123456abcdef'"
        in: header
        name: authorization
        required: true
        schema:
          type: string
      - description: The key of the user to query. The user must be in the organization
          domain
        in: path
        name: userKey
        required: true
        schema:
          format: int64
          type: integer
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
          description: The request has succeeded.
        "401":
          content: {}
          description: Client is not sufficiently authorized
        "403":
          content: {}
          description: Invalid token passed
        "404":
          content: {}
          description: User not found
        "502":
          content: {}
          description: Authentication or account gateway error occurred
        "504":
          content: {}
          description: Authentication or account gateway timeout occurred
      summary: Get User
      tags:
      - Users
      x-openapi-router-controller: openapi_server.controllers.users_controller
    patch:
      description: Changes a limited set (or all if you choose) of the user's data.
        The updated user email domain must be an existing organization email domain.
      operationId: update_user
      parameters:
      - description: "Access token prefixed with 'Bearer ', e.g. 'Bearer 123456abcdef'"
        in: header
        name: authorization
        required: true
        schema:
          type: string
      - description: The key of the user to query. The user must be in the organization
          domain
        in: path
        name: user_key
        required: true
        schema:
          format: int64
          type: integer
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserDefinition'
        description: The new user data
        required: true
        x-body-name: body
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
          description: The user has been updated.
        "400":
          content: {}
          description: One of the following requirements is not met:<br />The userName
            field is required.<br />The userName field must be non-empty.<br />The
            userName field cannot exceed 128 characters.<br />The locale field must
            be composed of 1 or 2 parts.<br />The locale language sub-field must be
            ISO-639.<br />The locale country sub-field must be ISO-3166.<br />The
            timezone field must be a valid timezone.<br />The givenName field must
            not exceed 60 characters.<br />The familyName field must not exceed 60
            characters.
        "401":
          content: {}
          description: Client is not sufficiently authorized
        "403":
          content: {}
          description: Invalid token passed
        "404":
          content: {}
          description: User not found
        "409":
          content: {}
          description: Email address conflict
        "502":
          content: {}
          description: Authentication or account gateway error occurred
        "504":
          content: {}
          description: Authentication or account gateway timeout occurred
      summary: Update User
      tags:
      - Users
      x-codegen-request-body-name: body
      x-openapi-router-controller: openapi_server.controllers.users_controller
    put:
      description: "Changes an existing user's displayName, locale, timezone, username\
        \ and password. The request must include the full user definition (to modify\
        \ one or more values without sending the full definition, see Update User).\
        \ The replaced user email domain must be an existing organization email domain."
      operationId: replace_user
      parameters:
      - description: "Access token prefixed with 'Bearer ', e.g. 'Bearer 123456abcdef'"
        in: header
        name: authorization
        required: true
        schema:
          type: string
      - description: The key of the user to query. The user must be in the organization
          domain
        in: path
        name: user_key
        required: true
        schema:
          format: int64
          type: integer
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserDefinition'
        description: The new user data
        required: true
        x-body-name: body
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
          description: The user has been replaced.
        "400":
          content: {}
          description: One of the following requirements is not met:<br />The userName
            field is required.<br />The userName field must be non-empty.<br />The
            userName field cannot exceed 128 characters.<br />The locale field must
            be composed of 1 or 2 parts.<br />The locale language sub-field must be
            ISO-639.<br />The locale country sub-field must be ISO-3166.<br />The
            timezone field must be a valid timezone.<br />The givenName field must
            not exceed 60 characters.<br />The familyName field must not exceed 60
            characters.
        "401":
          content: {}
          description: Client is not sufficiently authorized
        "403":
          content: {}
          description: Invalid token passed
        "404":
          content: {}
          description: User not found
        "409":
          content: {}
          description: Email address conflict
        "502":
          content: {}
          description: Authentication or account gateway error occurred
        "504":
          content: {}
          description: Authentication or account gateway timeout occurred
      summary: Replace User
      tags:
      - Users
      x-codegen-request-body-name: body
      x-openapi-router-controller: openapi_server.controllers.users_controller
components:
  parameters:
    Authorization:
      description: "Access token prefixed with 'Bearer ', e.g. 'Bearer 123456abcdef'"
      in: header
      name: Authorization
      required: true
      schema:
        type: string
    groupKey:
      description: The key of the group to query. The group must be in the organization
        domain
      in: path
      name: groupKey
      required: true
      schema:
        format: int64
        type: integer
    userKey:
      description: The key of the user to query. The user must be in the organization
        domain
      in: path
      name: userKey
      required: true
      schema:
        format: int64
        type: integer
  schemas:
    AuthenticationSchemes:
      description: Specifies supported Authentication Scheme properties
      example:
        documentationUrl: documentationUrl
        name: name
        description: description
        specUrl: specUrl
      properties:
        description:
          description: The description of the Authentication Scheme
          title: description
          type: string
        documentationUrl:
          description: A HTTP addressable URL pointing to the Authentication Scheme's
            usage documentation
          title: documentationUrl
          type: string
        name:
          description: "The common authentication scheme name, e.g. HTTP Basic"
          title: name
          type: string
        specUrl:
          description: A HTTP addressable URL pointing to the Authentication Scheme's
            specification
          title: specUrl
          type: string
      required:
      - description
      - documentationUrl
      - name
      - specUrl
      title: AuthenticationSchemes
      type: object
    Bulk:
      description: Specifies BULK configuration options
      example:
        supported: true
      properties:
        supported:
          description: Specifies whether the operation is supported
          title: supported
          type: boolean
      required:
      - supported
      title: Bulk
      type: object
    ChangePassword:
      description: Specifies Change Password configuration options
      example:
        supported: true
      properties:
        supported:
          description: Specifies whether the operation is supported
          title: supported
          type: boolean
      required:
      - supported
      title: ChangePassword
      type: object
    Etag:
      description: Specifies Etag configuration options
      example:
        supported: true
      properties:
        supported:
          description: Specifies whether the operation is supported
          title: supported
          type: boolean
      required:
      - supported
      title: Etag
      type: object
    Filter:
      description: Specifies FILTER options
      example:
        supported: true
      properties:
        supported:
          description: Specifies whether the operation is supported
          title: supported
          type: boolean
      required:
      - supported
      title: Filter
      type: object
    Group:
      description: Describes a group belonging to an organization
      example:
        displayName: displayName
        meta:
          created: 2000-01-23T04:56:07.000+00:00
          location: location
        members:
        - type: group
          value: value
        - type: group
          value: value
        id: id
      properties:
        displayName:
          description: The group's display name
          title: displayName
          type: string
        id:
          description: The group's unique key
          title: id
          type: string
        members:
          description: An array of members
          items:
            $ref: '#/components/schemas/Member'
          title: members
          type: array
        meta:
          $ref: '#/components/schemas/GroupMetadata'
      required:
      - displayName
      - id
      - meta
      title: Group
      type: object
    GroupCollection:
      description: Class describing a collection of groups
      example:
        totalResults: 0
        resources:
        - displayName: displayName
          meta:
            created: 2000-01-23T04:56:07.000+00:00
            location: location
          members:
          - type: group
            value: value
          - type: group
            value: value
          id: id
        - displayName: displayName
          meta:
            created: 2000-01-23T04:56:07.000+00:00
            location: location
          members:
          - type: group
            value: value
          - type: group
            value: value
          id: id
      properties:
        resources:
          description: An array of groups
          items:
            $ref: '#/components/schemas/Group'
          title: resources
          type: array
        totalResults:
          description: The number of groups in the collection
          format: int64
          title: totalResults
          type: integer
      required:
      - resources
      - totalResults
      title: GroupCollection
      type: object
    GroupDefinition:
      description: Describes the group to create
      example:
        displayName: displayName
        members:
        - type: group
          value: value
        - type: group
          value: value
      properties:
        displayName:
          description: The group's display name
          title: displayName
          type: string
        members:
          description: An array of members
          items:
            $ref: '#/components/schemas/Member'
          title: members
          type: array
      required:
      - displayName
      title: GroupDefinition
      type: object
    GroupMetadata:
      description: Group metadata
      example:
        created: 2000-01-23T04:56:07.000+00:00
        location: location
      properties:
        created:
          description: The date and time the group was created
          format: date-time
          title: created
          type: string
        location:
          description: The URL where the group can be accessed
          title: location
          type: string
      required:
      - created
      - location
      title: GroupMetadata
      type: object
    Member:
      description: A member of a group. This can be a group or an user
      example:
        type: group
        value: value
      properties:
        type:
          description: The type of member
          enum:
          - group
          - user
          title: type
          type: string
        value:
          description: Depending on the member type this is a groupKey or an userKey
          title: value
          type: string
      required:
      - type
      - value
      title: Member
      type: object
    Patch:
      description: Specifies PATCH configuration options
      example:
        supported: true
      properties:
        supported:
          description: Specifies whether the operation is supported
          title: supported
          type: boolean
      required:
      - supported
      title: Patch
      type: object
    ResourceSchema:
      description: Describes the attributes and metadata constituting a resource such
        as a user.
      example:
        schema: schema
        endpoint: endpoint
        name: name
        description: description
        attributes:
        - schema: schema
          name: name
          description: description
          readOnly: true
          caseExact: true
          multiValued: true
          type: type
          required: true
          subAttributes:
          - name: name
            description: description
            readOnly: true
            caseExact: true
            type: type
            required: true
          - name: name
            description: description
            readOnly: true
            caseExact: true
            type: type
            required: true
        - schema: schema
          name: name
          description: description
          readOnly: true
          caseExact: true
          multiValued: true
          type: type
          required: true
          subAttributes:
          - name: name
            description: description
            readOnly: true
            caseExact: true
            type: type
            required: true
          - name: name
            description: description
            readOnly: true
            caseExact: true
            type: type
            required: true
        id: id
      properties:
        attributes:
          description: The resource's attributes
          items:
            $ref: '#/components/schemas/SchemaAttribute'
          title: attributes
          type: array
        description:
          description: The resource's description
          title: description
          type: string
        endpoint:
          description: "The resource's HTTP addressable endpoint relative to the base\
            \ URL, e.g. /Users."
          title: endpoint
          type: string
        id:
          description: "The resource's id, e.g. urn:scim:schemas:core:1.0:User"
          title: id
          type: string
        name:
          description: "The resource's name, e.g. \"User\""
          title: name
          type: string
        schema:
          description: "The resource's associated schema, e.g. urn:scim:schemas:core:1.0"
          title: schema
          type: string
      required:
      - attributes
      - description
      - endpoint
      - id
      - name
      - schema
      title: ResourceSchema
      type: object
    SchemaAttribute:
      description: Describes a resource attribute
      example:
        schema: schema
        name: name
        description: description
        readOnly: true
        caseExact: true
        multiValued: true
        type: type
        required: true
        subAttributes:
        - name: name
          description: description
          readOnly: true
          caseExact: true
          type: type
          required: true
        - name: name
          description: description
          readOnly: true
          caseExact: true
          type: type
          required: true
      properties:
        caseExact:
          description: Indicates whether the attribute is case sensitive
          title: caseExact
          type: boolean
        description:
          description: The attribute's description
          title: description
          type: string
        multiValued:
          description: Indicates whether the attribute can have multiple values
          title: multiValued
          type: boolean
        name:
          description: The attribute's name
          title: name
          type: string
        readOnly:
          description: Indicates whether the attribute is mutable
          title: readOnly
          type: boolean
        required:
          description: Indicates whether the attribute is required
          title: required
          type: boolean
        schema:
          description: "The attribute's associated scheme, e.g. urn:scim:schemas:core:1.0"
          title: schema
          type: string
        subAttributes:
          description: The attribute's potential sub-attributes
          items:
            $ref: '#/components/schemas/SchemaSubAttribute'
          title: subAttributes
          type: array
        type:
          description: "The attribute's data type, e.g. String"
          title: type
          type: string
      required:
      - caseExact
      - description
      - multiValued
      - name
      - readOnly
      - required
      - schema
      - type
      title: SchemaAttribute
      type: object
    SchemaSubAttribute:
      description: Describes the sub-attribute of a resource attribute
      example:
        name: name
        description: description
        readOnly: true
        caseExact: true
        type: type
        required: true
      properties:
        caseExact:
          description: Indicates whether the attribute is case sensitive
          title: caseExact
          type: boolean
        description:
          description: The attribute's description
          title: description
          type: string
        name:
          description: The attribute's name
          title: name
          type: string
        readOnly:
          description: Indicates whether the attribute is mutable
          title: readOnly
          type: boolean
        required:
          description: Indicates whether the attribute is required
          title: required
          type: boolean
        type:
          description: "The attribute's data type, e.g. String"
          title: type
          type: string
      required:
      - caseExact
      - description
      - name
      - readOnly
      - required
      - type
      title: SchemaSubAttribute
      type: object
    ServiceProviderConfigs:
      description: Represents the Service Provider's configuration
      example:
        filter:
          supported: true
        patch:
          supported: true
        documentationUrl: documentationUrl
        authenticationSchemes:
          documentationUrl: documentationUrl
          name: name
          description: description
          specUrl: specUrl
        etag:
          supported: true
        sort:
          supported: true
        xmlDataFormat:
          supported: true
        bulk:
          supported: true
        changePassword:
          supported: true
      properties:
        authenticationSchemes:
          $ref: '#/components/schemas/AuthenticationSchemes'
        bulk:
          $ref: '#/components/schemas/Bulk'
        changePassword:
          $ref: '#/components/schemas/ChangePassword'
        documentationUrl:
          description: An HTTP addressable URL pointing to the Service Provider's
            help documentation
          title: documentationUrl
          type: string
        etag:
          $ref: '#/components/schemas/Etag'
        filter:
          $ref: '#/components/schemas/Filter'
        patch:
          $ref: '#/components/schemas/Patch'
        sort:
          $ref: '#/components/schemas/Sort'
        xmlDataFormat:
          $ref: '#/components/schemas/XmlDataFormat'
      required:
      - authenticationSchemes
      - bulk
      - changePassword
      - documentationUrl
      - etag
      - filter
      - patch
      - sort
      - xmlDataFormat
      title: ServiceProviderConfigs
      type: object
    Sort:
      description: Specifies Sort configuration options
      example:
        supported: true
      properties:
        supported:
          description: Specifies whether the operation is supported
          title: supported
          type: boolean
      required:
      - supported
      title: Sort
      type: object
    User:
      description: Describes a user belonging to an organization
      example:
        displayName: displayName
        meta:
          created: 2000-01-23T04:56:07.000+00:00
          location: location
        timezone: timezone
        name:
          familyName: familyName
          givenName: givenName
        id: id
        locale: locale
        userName: userName
      properties:
        displayName:
          description: The user's display name
          title: displayName
          type: string
        id:
          description: The user's unique key
          title: id
          type: string
        locale:
          description: The user's language settings
          title: locale
          type: string
        meta:
          $ref: '#/components/schemas/UserMetadata'
        name:
          $ref: '#/components/schemas/UserFullName'
        timezone:
          description: The user's time zone
          title: timezone
          type: string
        userName:
          description: "The user's username, usually their email address"
          title: userName
          type: string
      required:
      - displayName
      - id
      - locale
      - meta
      - name
      - timezone
      - userName
      title: User
      type: object
    UserCollection:
      description: Class describing a collection of users
      example:
        totalResults: 0
        resources:
        - displayName: displayName
          meta:
            created: 2000-01-23T04:56:07.000+00:00
            location: location
          timezone: timezone
          name:
            familyName: familyName
            givenName: givenName
          id: id
          locale: locale
          userName: userName
        - displayName: displayName
          meta:
            created: 2000-01-23T04:56:07.000+00:00
            location: location
          timezone: timezone
          name:
            familyName: familyName
            givenName: givenName
          id: id
          locale: locale
          userName: userName
      properties:
        resources:
          description: The list of users
          items:
            $ref: '#/components/schemas/User'
          title: resources
          type: array
        totalResults:
          description: The number of users in the collection
          format: int64
          title: totalResults
          type: integer
      required:
      - resources
      - totalResults
      title: UserCollection
      type: object
    UserDefinition:
      description: Describes a new user
      example:
        password: password
        displayName: displayName
        timezone: timezone
        name:
          familyName: familyName
          givenName: givenName
        locale: locale
        userName: userName
      properties:
        displayName:
          description: The user's display name
          title: displayName
          type: string
        locale:
          description: The user's language settings
          title: locale
          type: string
        name:
          $ref: '#/components/schemas/UserFullName'
        password:
          description: The user's password
          title: password
          type: string
        timezone:
          description: The user's time zone
          title: timezone
          type: string
        userName:
          description: "The user's username, usually their email address"
          title: userName
          type: string
      title: UserDefinition
      type: object
    UserFullName:
      description: The full name of the user
      example:
        familyName: familyName
        givenName: givenName
      properties:
        familyName:
          description: The user's surname
          title: familyName
          type: string
        givenName:
          description: The user's first name
          title: givenName
          type: string
      required:
      - familyName
      - givenName
      title: UserFullName
      type: object
    UserMetadata:
      description: User metadata
      example:
        created: 2000-01-23T04:56:07.000+00:00
        location: location
      properties:
        created:
          description: The date and time the user was created
          format: date-time
          title: created
          type: string
        location:
          description: The URL where the user can be accessed
          title: location
          type: string
      required:
      - created
      - location
      title: UserMetadata
      type: object
    XmlDataFormat:
      description: Specifies whether the XML data format is supported
      example:
        supported: true
      properties:
        supported:
          description: Specifies whether the operation is supported
          title: supported
          type: boolean
      required:
      - supported
      title: XmlDataFormat
      type: object
x-original-swagger-version: "2.0"
