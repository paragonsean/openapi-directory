/**
 * SCIM
 * The SCIM API lets you manage users in your organization. You can then automate the provisioning of product licenses for these users, and they can use your company's Single Sign-On solution through an Identity Provider.
 *
 * The version of the OpenAPI document: N/A
 * Contact: developer-support@citrixonline.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The UserFullName model module.
 * @module model/UserFullName
 * @version N/A
 */
class UserFullName {
    /**
     * Constructs a new <code>UserFullName</code>.
     * The full name of the user
     * @alias module:model/UserFullName
     * @param familyName {String} The user's surname
     * @param givenName {String} The user's first name
     */
    constructor(familyName, givenName) { 
        
        UserFullName.initialize(this, familyName, givenName);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, familyName, givenName) { 
        obj['familyName'] = familyName;
        obj['givenName'] = givenName;
    }

    /**
     * Constructs a <code>UserFullName</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/UserFullName} obj Optional instance to populate.
     * @return {module:model/UserFullName} The populated <code>UserFullName</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new UserFullName();

            if (data.hasOwnProperty('familyName')) {
                obj['familyName'] = ApiClient.convertToType(data['familyName'], 'String');
            }
            if (data.hasOwnProperty('givenName')) {
                obj['givenName'] = ApiClient.convertToType(data['givenName'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>UserFullName</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>UserFullName</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of UserFullName.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // ensure the json data is a string
        if (data['familyName'] && !(typeof data['familyName'] === 'string' || data['familyName'] instanceof String)) {
            throw new Error("Expected the field `familyName` to be a primitive type in the JSON string but got " + data['familyName']);
        }
        // ensure the json data is a string
        if (data['givenName'] && !(typeof data['givenName'] === 'string' || data['givenName'] instanceof String)) {
            throw new Error("Expected the field `givenName` to be a primitive type in the JSON string but got " + data['givenName']);
        }

        return true;
    }


}

UserFullName.RequiredProperties = ["familyName", "givenName"];

/**
 * The user's surname
 * @member {String} familyName
 */
UserFullName.prototype['familyName'] = undefined;

/**
 * The user's first name
 * @member {String} givenName
 */
UserFullName.prototype['givenName'] = undefined;






export default UserFullName;

