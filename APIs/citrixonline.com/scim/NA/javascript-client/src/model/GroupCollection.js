/**
 * SCIM
 * The SCIM API lets you manage users in your organization. You can then automate the provisioning of product licenses for these users, and they can use your company's Single Sign-On solution through an Identity Provider.
 *
 * The version of the OpenAPI document: N/A
 * Contact: developer-support@citrixonline.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import Group from './Group';

/**
 * The GroupCollection model module.
 * @module model/GroupCollection
 * @version N/A
 */
class GroupCollection {
    /**
     * Constructs a new <code>GroupCollection</code>.
     * Class describing a collection of groups
     * @alias module:model/GroupCollection
     * @param resources {Array.<module:model/Group>} An array of groups
     * @param totalResults {Number} The number of groups in the collection
     */
    constructor(resources, totalResults) { 
        
        GroupCollection.initialize(this, resources, totalResults);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, resources, totalResults) { 
        obj['resources'] = resources;
        obj['totalResults'] = totalResults;
    }

    /**
     * Constructs a <code>GroupCollection</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/GroupCollection} obj Optional instance to populate.
     * @return {module:model/GroupCollection} The populated <code>GroupCollection</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new GroupCollection();

            if (data.hasOwnProperty('resources')) {
                obj['resources'] = ApiClient.convertToType(data['resources'], [Group]);
            }
            if (data.hasOwnProperty('totalResults')) {
                obj['totalResults'] = ApiClient.convertToType(data['totalResults'], 'Number');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>GroupCollection</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>GroupCollection</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of GroupCollection.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        if (data['resources']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['resources'])) {
                throw new Error("Expected the field `resources` to be an array in the JSON data but got " + data['resources']);
            }
            // validate the optional field `resources` (array)
            for (const item of data['resources']) {
                Group.validateJSON(item);
            };
        }

        return true;
    }


}

GroupCollection.RequiredProperties = ["resources", "totalResults"];

/**
 * An array of groups
 * @member {Array.<module:model/Group>} resources
 */
GroupCollection.prototype['resources'] = undefined;

/**
 * The number of groups in the collection
 * @member {Number} totalResults
 */
GroupCollection.prototype['totalResults'] = undefined;






export default GroupCollection;

