/**
 * SCIM
 * The SCIM API lets you manage users in your organization. You can then automate the provisioning of product licenses for these users, and they can use your company's Single Sign-On solution through an Identity Provider.
 *
 * The version of the OpenAPI document: N/A
 * Contact: developer-support@citrixonline.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import AuthenticationSchemes from './AuthenticationSchemes';
import Bulk from './Bulk';
import ChangePassword from './ChangePassword';
import Etag from './Etag';
import Filter from './Filter';
import Patch from './Patch';
import Sort from './Sort';
import XmlDataFormat from './XmlDataFormat';

/**
 * The ServiceProviderConfigs model module.
 * @module model/ServiceProviderConfigs
 * @version N/A
 */
class ServiceProviderConfigs {
    /**
     * Constructs a new <code>ServiceProviderConfigs</code>.
     * Represents the Service Provider&#39;s configuration
     * @alias module:model/ServiceProviderConfigs
     * @param authenticationSchemes {module:model/AuthenticationSchemes} 
     * @param bulk {module:model/Bulk} 
     * @param changePassword {module:model/ChangePassword} 
     * @param documentationUrl {String} An HTTP addressable URL pointing to the Service Provider's help documentation
     * @param etag {module:model/Etag} 
     * @param filter {module:model/Filter} 
     * @param patch {module:model/Patch} 
     * @param sort {module:model/Sort} 
     * @param xmlDataFormat {module:model/XmlDataFormat} 
     */
    constructor(authenticationSchemes, bulk, changePassword, documentationUrl, etag, filter, patch, sort, xmlDataFormat) { 
        
        ServiceProviderConfigs.initialize(this, authenticationSchemes, bulk, changePassword, documentationUrl, etag, filter, patch, sort, xmlDataFormat);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, authenticationSchemes, bulk, changePassword, documentationUrl, etag, filter, patch, sort, xmlDataFormat) { 
        obj['authenticationSchemes'] = authenticationSchemes;
        obj['bulk'] = bulk;
        obj['changePassword'] = changePassword;
        obj['documentationUrl'] = documentationUrl;
        obj['etag'] = etag;
        obj['filter'] = filter;
        obj['patch'] = patch;
        obj['sort'] = sort;
        obj['xmlDataFormat'] = xmlDataFormat;
    }

    /**
     * Constructs a <code>ServiceProviderConfigs</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/ServiceProviderConfigs} obj Optional instance to populate.
     * @return {module:model/ServiceProviderConfigs} The populated <code>ServiceProviderConfigs</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new ServiceProviderConfigs();

            if (data.hasOwnProperty('authenticationSchemes')) {
                obj['authenticationSchemes'] = AuthenticationSchemes.constructFromObject(data['authenticationSchemes']);
            }
            if (data.hasOwnProperty('bulk')) {
                obj['bulk'] = Bulk.constructFromObject(data['bulk']);
            }
            if (data.hasOwnProperty('changePassword')) {
                obj['changePassword'] = ChangePassword.constructFromObject(data['changePassword']);
            }
            if (data.hasOwnProperty('documentationUrl')) {
                obj['documentationUrl'] = ApiClient.convertToType(data['documentationUrl'], 'String');
            }
            if (data.hasOwnProperty('etag')) {
                obj['etag'] = Etag.constructFromObject(data['etag']);
            }
            if (data.hasOwnProperty('filter')) {
                obj['filter'] = Filter.constructFromObject(data['filter']);
            }
            if (data.hasOwnProperty('patch')) {
                obj['patch'] = Patch.constructFromObject(data['patch']);
            }
            if (data.hasOwnProperty('sort')) {
                obj['sort'] = Sort.constructFromObject(data['sort']);
            }
            if (data.hasOwnProperty('xmlDataFormat')) {
                obj['xmlDataFormat'] = XmlDataFormat.constructFromObject(data['xmlDataFormat']);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>ServiceProviderConfigs</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>ServiceProviderConfigs</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of ServiceProviderConfigs.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // validate the optional field `authenticationSchemes`
        if (data['authenticationSchemes']) { // data not null
          AuthenticationSchemes.validateJSON(data['authenticationSchemes']);
        }
        // validate the optional field `bulk`
        if (data['bulk']) { // data not null
          Bulk.validateJSON(data['bulk']);
        }
        // validate the optional field `changePassword`
        if (data['changePassword']) { // data not null
          ChangePassword.validateJSON(data['changePassword']);
        }
        // ensure the json data is a string
        if (data['documentationUrl'] && !(typeof data['documentationUrl'] === 'string' || data['documentationUrl'] instanceof String)) {
            throw new Error("Expected the field `documentationUrl` to be a primitive type in the JSON string but got " + data['documentationUrl']);
        }
        // validate the optional field `etag`
        if (data['etag']) { // data not null
          Etag.validateJSON(data['etag']);
        }
        // validate the optional field `filter`
        if (data['filter']) { // data not null
          Filter.validateJSON(data['filter']);
        }
        // validate the optional field `patch`
        if (data['patch']) { // data not null
          Patch.validateJSON(data['patch']);
        }
        // validate the optional field `sort`
        if (data['sort']) { // data not null
          Sort.validateJSON(data['sort']);
        }
        // validate the optional field `xmlDataFormat`
        if (data['xmlDataFormat']) { // data not null
          XmlDataFormat.validateJSON(data['xmlDataFormat']);
        }

        return true;
    }


}

ServiceProviderConfigs.RequiredProperties = ["authenticationSchemes", "bulk", "changePassword", "documentationUrl", "etag", "filter", "patch", "sort", "xmlDataFormat"];

/**
 * @member {module:model/AuthenticationSchemes} authenticationSchemes
 */
ServiceProviderConfigs.prototype['authenticationSchemes'] = undefined;

/**
 * @member {module:model/Bulk} bulk
 */
ServiceProviderConfigs.prototype['bulk'] = undefined;

/**
 * @member {module:model/ChangePassword} changePassword
 */
ServiceProviderConfigs.prototype['changePassword'] = undefined;

/**
 * An HTTP addressable URL pointing to the Service Provider's help documentation
 * @member {String} documentationUrl
 */
ServiceProviderConfigs.prototype['documentationUrl'] = undefined;

/**
 * @member {module:model/Etag} etag
 */
ServiceProviderConfigs.prototype['etag'] = undefined;

/**
 * @member {module:model/Filter} filter
 */
ServiceProviderConfigs.prototype['filter'] = undefined;

/**
 * @member {module:model/Patch} patch
 */
ServiceProviderConfigs.prototype['patch'] = undefined;

/**
 * @member {module:model/Sort} sort
 */
ServiceProviderConfigs.prototype['sort'] = undefined;

/**
 * @member {module:model/XmlDataFormat} xmlDataFormat
 */
ServiceProviderConfigs.prototype['xmlDataFormat'] = undefined;






export default ServiceProviderConfigs;

