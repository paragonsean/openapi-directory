/**
 * SCIM
 * The SCIM API lets you manage users in your organization. You can then automate the provisioning of product licenses for these users, and they can use your company's Single Sign-On solution through an Identity Provider.
 *
 * The version of the OpenAPI document: N/A
 * Contact: developer-support@citrixonline.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import SchemaSubAttribute from './SchemaSubAttribute';

/**
 * The SchemaAttribute model module.
 * @module model/SchemaAttribute
 * @version N/A
 */
class SchemaAttribute {
    /**
     * Constructs a new <code>SchemaAttribute</code>.
     * Describes a resource attribute
     * @alias module:model/SchemaAttribute
     * @param caseExact {Boolean} Indicates whether the attribute is case sensitive
     * @param description {String} The attribute's description
     * @param multiValued {Boolean} Indicates whether the attribute can have multiple values
     * @param name {String} The attribute's name
     * @param readOnly {Boolean} Indicates whether the attribute is mutable
     * @param required {Boolean} Indicates whether the attribute is required
     * @param schema {String} The attribute's associated scheme, e.g. urn:scim:schemas:core:1.0
     * @param type {String} The attribute's data type, e.g. String
     */
    constructor(caseExact, description, multiValued, name, readOnly, required, schema, type) { 
        
        SchemaAttribute.initialize(this, caseExact, description, multiValued, name, readOnly, required, schema, type);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, caseExact, description, multiValued, name, readOnly, required, schema, type) { 
        obj['caseExact'] = caseExact;
        obj['description'] = description;
        obj['multiValued'] = multiValued;
        obj['name'] = name;
        obj['readOnly'] = readOnly;
        obj['required'] = required;
        obj['schema'] = schema;
        obj['type'] = type;
    }

    /**
     * Constructs a <code>SchemaAttribute</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/SchemaAttribute} obj Optional instance to populate.
     * @return {module:model/SchemaAttribute} The populated <code>SchemaAttribute</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new SchemaAttribute();

            if (data.hasOwnProperty('caseExact')) {
                obj['caseExact'] = ApiClient.convertToType(data['caseExact'], 'Boolean');
            }
            if (data.hasOwnProperty('description')) {
                obj['description'] = ApiClient.convertToType(data['description'], 'String');
            }
            if (data.hasOwnProperty('multiValued')) {
                obj['multiValued'] = ApiClient.convertToType(data['multiValued'], 'Boolean');
            }
            if (data.hasOwnProperty('name')) {
                obj['name'] = ApiClient.convertToType(data['name'], 'String');
            }
            if (data.hasOwnProperty('readOnly')) {
                obj['readOnly'] = ApiClient.convertToType(data['readOnly'], 'Boolean');
            }
            if (data.hasOwnProperty('required')) {
                obj['required'] = ApiClient.convertToType(data['required'], 'Boolean');
            }
            if (data.hasOwnProperty('schema')) {
                obj['schema'] = ApiClient.convertToType(data['schema'], 'String');
            }
            if (data.hasOwnProperty('subAttributes')) {
                obj['subAttributes'] = ApiClient.convertToType(data['subAttributes'], [SchemaSubAttribute]);
            }
            if (data.hasOwnProperty('type')) {
                obj['type'] = ApiClient.convertToType(data['type'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>SchemaAttribute</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>SchemaAttribute</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of SchemaAttribute.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // ensure the json data is a string
        if (data['description'] && !(typeof data['description'] === 'string' || data['description'] instanceof String)) {
            throw new Error("Expected the field `description` to be a primitive type in the JSON string but got " + data['description']);
        }
        // ensure the json data is a string
        if (data['name'] && !(typeof data['name'] === 'string' || data['name'] instanceof String)) {
            throw new Error("Expected the field `name` to be a primitive type in the JSON string but got " + data['name']);
        }
        // ensure the json data is a string
        if (data['schema'] && !(typeof data['schema'] === 'string' || data['schema'] instanceof String)) {
            throw new Error("Expected the field `schema` to be a primitive type in the JSON string but got " + data['schema']);
        }
        if (data['subAttributes']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['subAttributes'])) {
                throw new Error("Expected the field `subAttributes` to be an array in the JSON data but got " + data['subAttributes']);
            }
            // validate the optional field `subAttributes` (array)
            for (const item of data['subAttributes']) {
                SchemaSubAttribute.validateJSON(item);
            };
        }
        // ensure the json data is a string
        if (data['type'] && !(typeof data['type'] === 'string' || data['type'] instanceof String)) {
            throw new Error("Expected the field `type` to be a primitive type in the JSON string but got " + data['type']);
        }

        return true;
    }


}

SchemaAttribute.RequiredProperties = ["caseExact", "description", "multiValued", "name", "readOnly", "required", "schema", "type"];

/**
 * Indicates whether the attribute is case sensitive
 * @member {Boolean} caseExact
 */
SchemaAttribute.prototype['caseExact'] = undefined;

/**
 * The attribute's description
 * @member {String} description
 */
SchemaAttribute.prototype['description'] = undefined;

/**
 * Indicates whether the attribute can have multiple values
 * @member {Boolean} multiValued
 */
SchemaAttribute.prototype['multiValued'] = undefined;

/**
 * The attribute's name
 * @member {String} name
 */
SchemaAttribute.prototype['name'] = undefined;

/**
 * Indicates whether the attribute is mutable
 * @member {Boolean} readOnly
 */
SchemaAttribute.prototype['readOnly'] = undefined;

/**
 * Indicates whether the attribute is required
 * @member {Boolean} required
 */
SchemaAttribute.prototype['required'] = undefined;

/**
 * The attribute's associated scheme, e.g. urn:scim:schemas:core:1.0
 * @member {String} schema
 */
SchemaAttribute.prototype['schema'] = undefined;

/**
 * The attribute's potential sub-attributes
 * @member {Array.<module:model/SchemaSubAttribute>} subAttributes
 */
SchemaAttribute.prototype['subAttributes'] = undefined;

/**
 * The attribute's data type, e.g. String
 * @member {String} type
 */
SchemaAttribute.prototype['type'] = undefined;






export default SchemaAttribute;

