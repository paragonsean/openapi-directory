/**
 * SCIM
 * The SCIM API lets you manage users in your organization. You can then automate the provisioning of product licenses for these users, and they can use your company's Single Sign-On solution through an Identity Provider.
 *
 * The version of the OpenAPI document: N/A
 * Contact: developer-support@citrixonline.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import UserFullName from './UserFullName';
import UserMetadata from './UserMetadata';

/**
 * The User model module.
 * @module model/User
 * @version N/A
 */
class User {
    /**
     * Constructs a new <code>User</code>.
     * Describes a user belonging to an organization
     * @alias module:model/User
     * @param displayName {String} The user's display name
     * @param id {String} The user's unique key
     * @param locale {String} The user's language settings
     * @param meta {module:model/UserMetadata} 
     * @param name {module:model/UserFullName} 
     * @param timezone {String} The user's time zone
     * @param userName {String} The user's username, usually their email address
     */
    constructor(displayName, id, locale, meta, name, timezone, userName) { 
        
        User.initialize(this, displayName, id, locale, meta, name, timezone, userName);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, displayName, id, locale, meta, name, timezone, userName) { 
        obj['displayName'] = displayName;
        obj['id'] = id;
        obj['locale'] = locale;
        obj['meta'] = meta;
        obj['name'] = name;
        obj['timezone'] = timezone;
        obj['userName'] = userName;
    }

    /**
     * Constructs a <code>User</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/User} obj Optional instance to populate.
     * @return {module:model/User} The populated <code>User</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new User();

            if (data.hasOwnProperty('displayName')) {
                obj['displayName'] = ApiClient.convertToType(data['displayName'], 'String');
            }
            if (data.hasOwnProperty('id')) {
                obj['id'] = ApiClient.convertToType(data['id'], 'String');
            }
            if (data.hasOwnProperty('locale')) {
                obj['locale'] = ApiClient.convertToType(data['locale'], 'String');
            }
            if (data.hasOwnProperty('meta')) {
                obj['meta'] = UserMetadata.constructFromObject(data['meta']);
            }
            if (data.hasOwnProperty('name')) {
                obj['name'] = UserFullName.constructFromObject(data['name']);
            }
            if (data.hasOwnProperty('timezone')) {
                obj['timezone'] = ApiClient.convertToType(data['timezone'], 'String');
            }
            if (data.hasOwnProperty('userName')) {
                obj['userName'] = ApiClient.convertToType(data['userName'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>User</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>User</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of User.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // ensure the json data is a string
        if (data['displayName'] && !(typeof data['displayName'] === 'string' || data['displayName'] instanceof String)) {
            throw new Error("Expected the field `displayName` to be a primitive type in the JSON string but got " + data['displayName']);
        }
        // ensure the json data is a string
        if (data['id'] && !(typeof data['id'] === 'string' || data['id'] instanceof String)) {
            throw new Error("Expected the field `id` to be a primitive type in the JSON string but got " + data['id']);
        }
        // ensure the json data is a string
        if (data['locale'] && !(typeof data['locale'] === 'string' || data['locale'] instanceof String)) {
            throw new Error("Expected the field `locale` to be a primitive type in the JSON string but got " + data['locale']);
        }
        // validate the optional field `meta`
        if (data['meta']) { // data not null
          UserMetadata.validateJSON(data['meta']);
        }
        // validate the optional field `name`
        if (data['name']) { // data not null
          UserFullName.validateJSON(data['name']);
        }
        // ensure the json data is a string
        if (data['timezone'] && !(typeof data['timezone'] === 'string' || data['timezone'] instanceof String)) {
            throw new Error("Expected the field `timezone` to be a primitive type in the JSON string but got " + data['timezone']);
        }
        // ensure the json data is a string
        if (data['userName'] && !(typeof data['userName'] === 'string' || data['userName'] instanceof String)) {
            throw new Error("Expected the field `userName` to be a primitive type in the JSON string but got " + data['userName']);
        }

        return true;
    }


}

User.RequiredProperties = ["displayName", "id", "locale", "meta", "name", "timezone", "userName"];

/**
 * The user's display name
 * @member {String} displayName
 */
User.prototype['displayName'] = undefined;

/**
 * The user's unique key
 * @member {String} id
 */
User.prototype['id'] = undefined;

/**
 * The user's language settings
 * @member {String} locale
 */
User.prototype['locale'] = undefined;

/**
 * @member {module:model/UserMetadata} meta
 */
User.prototype['meta'] = undefined;

/**
 * @member {module:model/UserFullName} name
 */
User.prototype['name'] = undefined;

/**
 * The user's time zone
 * @member {String} timezone
 */
User.prototype['timezone'] = undefined;

/**
 * The user's username, usually their email address
 * @member {String} userName
 */
User.prototype['userName'] = undefined;






export default User;

