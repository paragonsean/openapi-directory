/**
 * SCIM
 * The SCIM API lets you manage users in your organization. You can then automate the provisioning of product licenses for these users, and they can use your company's Single Sign-On solution through an Identity Provider.
 *
 * The version of the OpenAPI document: N/A
 * Contact: developer-support@citrixonline.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import SchemaAttribute from './SchemaAttribute';

/**
 * The ResourceSchema model module.
 * @module model/ResourceSchema
 * @version N/A
 */
class ResourceSchema {
    /**
     * Constructs a new <code>ResourceSchema</code>.
     * Describes the attributes and metadata constituting a resource such as a user.
     * @alias module:model/ResourceSchema
     * @param attributes {Array.<module:model/SchemaAttribute>} The resource's attributes
     * @param description {String} The resource's description
     * @param endpoint {String} The resource's HTTP addressable endpoint relative to the base URL, e.g. /Users.
     * @param id {String} The resource's id, e.g. urn:scim:schemas:core:1.0:User
     * @param name {String} The resource's name, e.g. \"User\"
     * @param schema {String} The resource's associated schema, e.g. urn:scim:schemas:core:1.0
     */
    constructor(attributes, description, endpoint, id, name, schema) { 
        
        ResourceSchema.initialize(this, attributes, description, endpoint, id, name, schema);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, attributes, description, endpoint, id, name, schema) { 
        obj['attributes'] = attributes;
        obj['description'] = description;
        obj['endpoint'] = endpoint;
        obj['id'] = id;
        obj['name'] = name;
        obj['schema'] = schema;
    }

    /**
     * Constructs a <code>ResourceSchema</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/ResourceSchema} obj Optional instance to populate.
     * @return {module:model/ResourceSchema} The populated <code>ResourceSchema</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new ResourceSchema();

            if (data.hasOwnProperty('attributes')) {
                obj['attributes'] = ApiClient.convertToType(data['attributes'], [SchemaAttribute]);
            }
            if (data.hasOwnProperty('description')) {
                obj['description'] = ApiClient.convertToType(data['description'], 'String');
            }
            if (data.hasOwnProperty('endpoint')) {
                obj['endpoint'] = ApiClient.convertToType(data['endpoint'], 'String');
            }
            if (data.hasOwnProperty('id')) {
                obj['id'] = ApiClient.convertToType(data['id'], 'String');
            }
            if (data.hasOwnProperty('name')) {
                obj['name'] = ApiClient.convertToType(data['name'], 'String');
            }
            if (data.hasOwnProperty('schema')) {
                obj['schema'] = ApiClient.convertToType(data['schema'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>ResourceSchema</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>ResourceSchema</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of ResourceSchema.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        if (data['attributes']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['attributes'])) {
                throw new Error("Expected the field `attributes` to be an array in the JSON data but got " + data['attributes']);
            }
            // validate the optional field `attributes` (array)
            for (const item of data['attributes']) {
                SchemaAttribute.validateJSON(item);
            };
        }
        // ensure the json data is a string
        if (data['description'] && !(typeof data['description'] === 'string' || data['description'] instanceof String)) {
            throw new Error("Expected the field `description` to be a primitive type in the JSON string but got " + data['description']);
        }
        // ensure the json data is a string
        if (data['endpoint'] && !(typeof data['endpoint'] === 'string' || data['endpoint'] instanceof String)) {
            throw new Error("Expected the field `endpoint` to be a primitive type in the JSON string but got " + data['endpoint']);
        }
        // ensure the json data is a string
        if (data['id'] && !(typeof data['id'] === 'string' || data['id'] instanceof String)) {
            throw new Error("Expected the field `id` to be a primitive type in the JSON string but got " + data['id']);
        }
        // ensure the json data is a string
        if (data['name'] && !(typeof data['name'] === 'string' || data['name'] instanceof String)) {
            throw new Error("Expected the field `name` to be a primitive type in the JSON string but got " + data['name']);
        }
        // ensure the json data is a string
        if (data['schema'] && !(typeof data['schema'] === 'string' || data['schema'] instanceof String)) {
            throw new Error("Expected the field `schema` to be a primitive type in the JSON string but got " + data['schema']);
        }

        return true;
    }


}

ResourceSchema.RequiredProperties = ["attributes", "description", "endpoint", "id", "name", "schema"];

/**
 * The resource's attributes
 * @member {Array.<module:model/SchemaAttribute>} attributes
 */
ResourceSchema.prototype['attributes'] = undefined;

/**
 * The resource's description
 * @member {String} description
 */
ResourceSchema.prototype['description'] = undefined;

/**
 * The resource's HTTP addressable endpoint relative to the base URL, e.g. /Users.
 * @member {String} endpoint
 */
ResourceSchema.prototype['endpoint'] = undefined;

/**
 * The resource's id, e.g. urn:scim:schemas:core:1.0:User
 * @member {String} id
 */
ResourceSchema.prototype['id'] = undefined;

/**
 * The resource's name, e.g. \"User\"
 * @member {String} name
 */
ResourceSchema.prototype['name'] = undefined;

/**
 * The resource's associated schema, e.g. urn:scim:schemas:core:1.0
 * @member {String} schema
 */
ResourceSchema.prototype['schema'] = undefined;






export default ResourceSchema;

