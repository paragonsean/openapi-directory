/**
 * SCIM
 * The SCIM API lets you manage users in your organization. You can then automate the provisioning of product licenses for these users, and they can use your company's Single Sign-On solution through an Identity Provider.
 *
 * The version of the OpenAPI document: N/A
 * Contact: developer-support@citrixonline.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import ResourceSchema from '../model/ResourceSchema';
import ServiceProviderConfigs from '../model/ServiceProviderConfigs';

/**
* Schemas service.
* @module api/SchemasApi
* @version N/A
*/
export default class SchemasApi {

    /**
    * Constructs a new SchemasApi. 
    * @alias module:api/SchemasApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the getServiceProviderConfigs operation.
     * @callback module:api/SchemasApi~getServiceProviderConfigsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ServiceProviderConfigs} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get Service Provider Configurations
     * Queries service provider configurations. The service provider configurations are defined in SCIM Core Schema (http://www.simplecloud.info/specs/draft-scim-core-schema-01.html#anchor6). This call returns a description, a documentationURL, name, and specURL.
     * @param {String} authorization Access token prefixed with 'Bearer ', e.g. 'Bearer 123456abcdef'
     * @param {module:api/SchemasApi~getServiceProviderConfigsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ServiceProviderConfigs}
     */
    getServiceProviderConfigs(authorization, callback) {
      let postBody = null;
      // verify the required parameter 'authorization' is set
      if (authorization === undefined || authorization === null) {
        throw new Error("Missing the required parameter 'authorization' when calling getServiceProviderConfigs");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'Authorization': authorization
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ServiceProviderConfigs;
      return this.apiClient.callApi(
        '/ServiceProviderConfigs', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getUserSchema operation.
     * @callback module:api/SchemasApi~getUserSchemaCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ResourceSchema} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get User Schema
     * Queries the user schema. The user schema is defined in SCIM Core Schema (http://www.simplecloud.info/specs/draft-scim-core-schema-01.html#resource-schema).
     * @param {String} authorization Access token prefixed with 'Bearer ', e.g. 'Bearer 123456abcdef'
     * @param {module:api/SchemasApi~getUserSchemaCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ResourceSchema}
     */
    getUserSchema(authorization, callback) {
      let postBody = null;
      // verify the required parameter 'authorization' is set
      if (authorization === undefined || authorization === null) {
        throw new Error("Missing the required parameter 'authorization' when calling getUserSchema");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'Authorization': authorization
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ResourceSchema;
      return this.apiClient.callApi(
        '/Schemas/Users', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
