/**
 * SCIM
 * The SCIM API lets you manage users in your organization. You can then automate the provisioning of product licenses for these users, and they can use your company's Single Sign-On solution through an Identity Provider.
 *
 * The version of the OpenAPI document: N/A
 * Contact: developer-support@citrixonline.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from './ApiClient';
import AuthenticationSchemes from './model/AuthenticationSchemes';
import Bulk from './model/Bulk';
import ChangePassword from './model/ChangePassword';
import Etag from './model/Etag';
import Filter from './model/Filter';
import Group from './model/Group';
import GroupCollection from './model/GroupCollection';
import GroupDefinition from './model/GroupDefinition';
import GroupMetadata from './model/GroupMetadata';
import Member from './model/Member';
import Patch from './model/Patch';
import ResourceSchema from './model/ResourceSchema';
import SchemaAttribute from './model/SchemaAttribute';
import SchemaSubAttribute from './model/SchemaSubAttribute';
import ServiceProviderConfigs from './model/ServiceProviderConfigs';
import Sort from './model/Sort';
import User from './model/User';
import UserCollection from './model/UserCollection';
import UserDefinition from './model/UserDefinition';
import UserFullName from './model/UserFullName';
import UserMetadata from './model/UserMetadata';
import XmlDataFormat from './model/XmlDataFormat';
import GroupsApi from './api/GroupsApi';
import SchemasApi from './api/SchemasApi';
import UsersApi from './api/UsersApi';


/**
* The SCIM API lets you manage users in your organization. You can then automate the provisioning of product licenses for these users, and they can use your company&#39;s Single Sign-On solution through an Identity Provider..<br>
* The <code>index</code> module provides access to constructors for all the classes which comprise the public API.
* <p>
* An AMD (recommended!) or CommonJS application will generally do something equivalent to the following:
* <pre>
* var Scim = require('index'); // See note below*.
* var xxxSvc = new Scim.XxxApi(); // Allocate the API class we're going to use.
* var yyyModel = new Scim.Yyy(); // Construct a model instance.
* yyyModel.someProperty = 'someValue';
* ...
* var zzz = xxxSvc.doSomething(yyyModel); // Invoke the service.
* ...
* </pre>
* <em>*NOTE: For a top-level AMD script, use require(['index'], function(){...})
* and put the application logic within the callback function.</em>
* </p>
* <p>
* A non-AMD browser application (discouraged) might do something like this:
* <pre>
* var xxxSvc = new Scim.XxxApi(); // Allocate the API class we're going to use.
* var yyy = new Scim.Yyy(); // Construct a model instance.
* yyyModel.someProperty = 'someValue';
* ...
* var zzz = xxxSvc.doSomething(yyyModel); // Invoke the service.
* ...
* </pre>
* </p>
* @module index
* @version N/A
*/
export {
    /**
     * The ApiClient constructor.
     * @property {module:ApiClient}
     */
    ApiClient,

    /**
     * The AuthenticationSchemes model constructor.
     * @property {module:model/AuthenticationSchemes}
     */
    AuthenticationSchemes,

    /**
     * The Bulk model constructor.
     * @property {module:model/Bulk}
     */
    Bulk,

    /**
     * The ChangePassword model constructor.
     * @property {module:model/ChangePassword}
     */
    ChangePassword,

    /**
     * The Etag model constructor.
     * @property {module:model/Etag}
     */
    Etag,

    /**
     * The Filter model constructor.
     * @property {module:model/Filter}
     */
    Filter,

    /**
     * The Group model constructor.
     * @property {module:model/Group}
     */
    Group,

    /**
     * The GroupCollection model constructor.
     * @property {module:model/GroupCollection}
     */
    GroupCollection,

    /**
     * The GroupDefinition model constructor.
     * @property {module:model/GroupDefinition}
     */
    GroupDefinition,

    /**
     * The GroupMetadata model constructor.
     * @property {module:model/GroupMetadata}
     */
    GroupMetadata,

    /**
     * The Member model constructor.
     * @property {module:model/Member}
     */
    Member,

    /**
     * The Patch model constructor.
     * @property {module:model/Patch}
     */
    Patch,

    /**
     * The ResourceSchema model constructor.
     * @property {module:model/ResourceSchema}
     */
    ResourceSchema,

    /**
     * The SchemaAttribute model constructor.
     * @property {module:model/SchemaAttribute}
     */
    SchemaAttribute,

    /**
     * The SchemaSubAttribute model constructor.
     * @property {module:model/SchemaSubAttribute}
     */
    SchemaSubAttribute,

    /**
     * The ServiceProviderConfigs model constructor.
     * @property {module:model/ServiceProviderConfigs}
     */
    ServiceProviderConfigs,

    /**
     * The Sort model constructor.
     * @property {module:model/Sort}
     */
    Sort,

    /**
     * The User model constructor.
     * @property {module:model/User}
     */
    User,

    /**
     * The UserCollection model constructor.
     * @property {module:model/UserCollection}
     */
    UserCollection,

    /**
     * The UserDefinition model constructor.
     * @property {module:model/UserDefinition}
     */
    UserDefinition,

    /**
     * The UserFullName model constructor.
     * @property {module:model/UserFullName}
     */
    UserFullName,

    /**
     * The UserMetadata model constructor.
     * @property {module:model/UserMetadata}
     */
    UserMetadata,

    /**
     * The XmlDataFormat model constructor.
     * @property {module:model/XmlDataFormat}
     */
    XmlDataFormat,

    /**
    * The GroupsApi service constructor.
    * @property {module:api/GroupsApi}
    */
    GroupsApi,

    /**
    * The SchemasApi service constructor.
    * @property {module:api/SchemasApi}
    */
    SchemasApi,

    /**
    * The UsersApi service constructor.
    * @property {module:api/UsersApi}
    */
    UsersApi
};
