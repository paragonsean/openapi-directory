/**
 * SCIM
 * The SCIM API lets you manage users in your organization. You can then automate the provisioning of product licenses for these users, and they can use your company's Single Sign-On solution through an Identity Provider.
 *
 * The version of the OpenAPI document: N/A
 * Contact: developer-support@citrixonline.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIAuthenticationSchemes.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIAuthenticationSchemes::OAIAuthenticationSchemes(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIAuthenticationSchemes::OAIAuthenticationSchemes() {
    this->initializeModel();
}

OAIAuthenticationSchemes::~OAIAuthenticationSchemes() {}

void OAIAuthenticationSchemes::initializeModel() {

    m_description_isSet = false;
    m_description_isValid = false;

    m_documentation_url_isSet = false;
    m_documentation_url_isValid = false;

    m_name_isSet = false;
    m_name_isValid = false;

    m_spec_url_isSet = false;
    m_spec_url_isValid = false;
}

void OAIAuthenticationSchemes::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIAuthenticationSchemes::fromJsonObject(QJsonObject json) {

    m_description_isValid = ::OpenAPI::fromJsonValue(m_description, json[QString("description")]);
    m_description_isSet = !json[QString("description")].isNull() && m_description_isValid;

    m_documentation_url_isValid = ::OpenAPI::fromJsonValue(m_documentation_url, json[QString("documentationUrl")]);
    m_documentation_url_isSet = !json[QString("documentationUrl")].isNull() && m_documentation_url_isValid;

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("name")]);
    m_name_isSet = !json[QString("name")].isNull() && m_name_isValid;

    m_spec_url_isValid = ::OpenAPI::fromJsonValue(m_spec_url, json[QString("specUrl")]);
    m_spec_url_isSet = !json[QString("specUrl")].isNull() && m_spec_url_isValid;
}

QString OAIAuthenticationSchemes::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIAuthenticationSchemes::asJsonObject() const {
    QJsonObject obj;
    if (m_description_isSet) {
        obj.insert(QString("description"), ::OpenAPI::toJsonValue(m_description));
    }
    if (m_documentation_url_isSet) {
        obj.insert(QString("documentationUrl"), ::OpenAPI::toJsonValue(m_documentation_url));
    }
    if (m_name_isSet) {
        obj.insert(QString("name"), ::OpenAPI::toJsonValue(m_name));
    }
    if (m_spec_url_isSet) {
        obj.insert(QString("specUrl"), ::OpenAPI::toJsonValue(m_spec_url));
    }
    return obj;
}

QString OAIAuthenticationSchemes::getDescription() const {
    return m_description;
}
void OAIAuthenticationSchemes::setDescription(const QString &description) {
    m_description = description;
    m_description_isSet = true;
}

bool OAIAuthenticationSchemes::is_description_Set() const{
    return m_description_isSet;
}

bool OAIAuthenticationSchemes::is_description_Valid() const{
    return m_description_isValid;
}

QString OAIAuthenticationSchemes::getDocumentationUrl() const {
    return m_documentation_url;
}
void OAIAuthenticationSchemes::setDocumentationUrl(const QString &documentation_url) {
    m_documentation_url = documentation_url;
    m_documentation_url_isSet = true;
}

bool OAIAuthenticationSchemes::is_documentation_url_Set() const{
    return m_documentation_url_isSet;
}

bool OAIAuthenticationSchemes::is_documentation_url_Valid() const{
    return m_documentation_url_isValid;
}

QString OAIAuthenticationSchemes::getName() const {
    return m_name;
}
void OAIAuthenticationSchemes::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAIAuthenticationSchemes::is_name_Set() const{
    return m_name_isSet;
}

bool OAIAuthenticationSchemes::is_name_Valid() const{
    return m_name_isValid;
}

QString OAIAuthenticationSchemes::getSpecUrl() const {
    return m_spec_url;
}
void OAIAuthenticationSchemes::setSpecUrl(const QString &spec_url) {
    m_spec_url = spec_url;
    m_spec_url_isSet = true;
}

bool OAIAuthenticationSchemes::is_spec_url_Set() const{
    return m_spec_url_isSet;
}

bool OAIAuthenticationSchemes::is_spec_url_Valid() const{
    return m_spec_url_isValid;
}

bool OAIAuthenticationSchemes::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_description_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_documentation_url_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_spec_url_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIAuthenticationSchemes::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_description_isValid && m_documentation_url_isValid && m_name_isValid && m_spec_url_isValid && true;
}

} // namespace OpenAPI
