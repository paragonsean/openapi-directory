/**
 * SCIM
 * The SCIM API lets you manage users in your organization. You can then automate the provisioning of product licenses for these users, and they can use your company's Single Sign-On solution through an Identity Provider.
 *
 * The version of the OpenAPI document: N/A
 * Contact: developer-support@citrixonline.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIUserDefinition.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIUserDefinition::OAIUserDefinition(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIUserDefinition::OAIUserDefinition() {
    this->initializeModel();
}

OAIUserDefinition::~OAIUserDefinition() {}

void OAIUserDefinition::initializeModel() {

    m_display_name_isSet = false;
    m_display_name_isValid = false;

    m_locale_isSet = false;
    m_locale_isValid = false;

    m_name_isSet = false;
    m_name_isValid = false;

    m_password_isSet = false;
    m_password_isValid = false;

    m_timezone_isSet = false;
    m_timezone_isValid = false;

    m_user_name_isSet = false;
    m_user_name_isValid = false;
}

void OAIUserDefinition::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIUserDefinition::fromJsonObject(QJsonObject json) {

    m_display_name_isValid = ::OpenAPI::fromJsonValue(m_display_name, json[QString("displayName")]);
    m_display_name_isSet = !json[QString("displayName")].isNull() && m_display_name_isValid;

    m_locale_isValid = ::OpenAPI::fromJsonValue(m_locale, json[QString("locale")]);
    m_locale_isSet = !json[QString("locale")].isNull() && m_locale_isValid;

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("name")]);
    m_name_isSet = !json[QString("name")].isNull() && m_name_isValid;

    m_password_isValid = ::OpenAPI::fromJsonValue(m_password, json[QString("password")]);
    m_password_isSet = !json[QString("password")].isNull() && m_password_isValid;

    m_timezone_isValid = ::OpenAPI::fromJsonValue(m_timezone, json[QString("timezone")]);
    m_timezone_isSet = !json[QString("timezone")].isNull() && m_timezone_isValid;

    m_user_name_isValid = ::OpenAPI::fromJsonValue(m_user_name, json[QString("userName")]);
    m_user_name_isSet = !json[QString("userName")].isNull() && m_user_name_isValid;
}

QString OAIUserDefinition::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIUserDefinition::asJsonObject() const {
    QJsonObject obj;
    if (m_display_name_isSet) {
        obj.insert(QString("displayName"), ::OpenAPI::toJsonValue(m_display_name));
    }
    if (m_locale_isSet) {
        obj.insert(QString("locale"), ::OpenAPI::toJsonValue(m_locale));
    }
    if (m_name.isSet()) {
        obj.insert(QString("name"), ::OpenAPI::toJsonValue(m_name));
    }
    if (m_password_isSet) {
        obj.insert(QString("password"), ::OpenAPI::toJsonValue(m_password));
    }
    if (m_timezone_isSet) {
        obj.insert(QString("timezone"), ::OpenAPI::toJsonValue(m_timezone));
    }
    if (m_user_name_isSet) {
        obj.insert(QString("userName"), ::OpenAPI::toJsonValue(m_user_name));
    }
    return obj;
}

QString OAIUserDefinition::getDisplayName() const {
    return m_display_name;
}
void OAIUserDefinition::setDisplayName(const QString &display_name) {
    m_display_name = display_name;
    m_display_name_isSet = true;
}

bool OAIUserDefinition::is_display_name_Set() const{
    return m_display_name_isSet;
}

bool OAIUserDefinition::is_display_name_Valid() const{
    return m_display_name_isValid;
}

QString OAIUserDefinition::getLocale() const {
    return m_locale;
}
void OAIUserDefinition::setLocale(const QString &locale) {
    m_locale = locale;
    m_locale_isSet = true;
}

bool OAIUserDefinition::is_locale_Set() const{
    return m_locale_isSet;
}

bool OAIUserDefinition::is_locale_Valid() const{
    return m_locale_isValid;
}

OAIUserFullName OAIUserDefinition::getName() const {
    return m_name;
}
void OAIUserDefinition::setName(const OAIUserFullName &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAIUserDefinition::is_name_Set() const{
    return m_name_isSet;
}

bool OAIUserDefinition::is_name_Valid() const{
    return m_name_isValid;
}

QString OAIUserDefinition::getPassword() const {
    return m_password;
}
void OAIUserDefinition::setPassword(const QString &password) {
    m_password = password;
    m_password_isSet = true;
}

bool OAIUserDefinition::is_password_Set() const{
    return m_password_isSet;
}

bool OAIUserDefinition::is_password_Valid() const{
    return m_password_isValid;
}

QString OAIUserDefinition::getTimezone() const {
    return m_timezone;
}
void OAIUserDefinition::setTimezone(const QString &timezone) {
    m_timezone = timezone;
    m_timezone_isSet = true;
}

bool OAIUserDefinition::is_timezone_Set() const{
    return m_timezone_isSet;
}

bool OAIUserDefinition::is_timezone_Valid() const{
    return m_timezone_isValid;
}

QString OAIUserDefinition::getUserName() const {
    return m_user_name;
}
void OAIUserDefinition::setUserName(const QString &user_name) {
    m_user_name = user_name;
    m_user_name_isSet = true;
}

bool OAIUserDefinition::is_user_name_Set() const{
    return m_user_name_isSet;
}

bool OAIUserDefinition::is_user_name_Valid() const{
    return m_user_name_isValid;
}

bool OAIUserDefinition::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_display_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_locale_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_name.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_password_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_timezone_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_user_name_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIUserDefinition::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
