/**
 * SCIM
 * The SCIM API lets you manage users in your organization. You can then automate the provisioning of product licenses for these users, and they can use your company's Single Sign-On solution through an Identity Provider.
 *
 * The version of the OpenAPI document: N/A
 * Contact: developer-support@citrixonline.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAISchemaSubAttribute.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAISchemaSubAttribute::OAISchemaSubAttribute(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAISchemaSubAttribute::OAISchemaSubAttribute() {
    this->initializeModel();
}

OAISchemaSubAttribute::~OAISchemaSubAttribute() {}

void OAISchemaSubAttribute::initializeModel() {

    m_case_exact_isSet = false;
    m_case_exact_isValid = false;

    m_description_isSet = false;
    m_description_isValid = false;

    m_name_isSet = false;
    m_name_isValid = false;

    m_read_only_isSet = false;
    m_read_only_isValid = false;

    m_required_isSet = false;
    m_required_isValid = false;

    m_type_isSet = false;
    m_type_isValid = false;
}

void OAISchemaSubAttribute::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAISchemaSubAttribute::fromJsonObject(QJsonObject json) {

    m_case_exact_isValid = ::OpenAPI::fromJsonValue(m_case_exact, json[QString("caseExact")]);
    m_case_exact_isSet = !json[QString("caseExact")].isNull() && m_case_exact_isValid;

    m_description_isValid = ::OpenAPI::fromJsonValue(m_description, json[QString("description")]);
    m_description_isSet = !json[QString("description")].isNull() && m_description_isValid;

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("name")]);
    m_name_isSet = !json[QString("name")].isNull() && m_name_isValid;

    m_read_only_isValid = ::OpenAPI::fromJsonValue(m_read_only, json[QString("readOnly")]);
    m_read_only_isSet = !json[QString("readOnly")].isNull() && m_read_only_isValid;

    m_required_isValid = ::OpenAPI::fromJsonValue(m_required, json[QString("required")]);
    m_required_isSet = !json[QString("required")].isNull() && m_required_isValid;

    m_type_isValid = ::OpenAPI::fromJsonValue(m_type, json[QString("type")]);
    m_type_isSet = !json[QString("type")].isNull() && m_type_isValid;
}

QString OAISchemaSubAttribute::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAISchemaSubAttribute::asJsonObject() const {
    QJsonObject obj;
    if (m_case_exact_isSet) {
        obj.insert(QString("caseExact"), ::OpenAPI::toJsonValue(m_case_exact));
    }
    if (m_description_isSet) {
        obj.insert(QString("description"), ::OpenAPI::toJsonValue(m_description));
    }
    if (m_name_isSet) {
        obj.insert(QString("name"), ::OpenAPI::toJsonValue(m_name));
    }
    if (m_read_only_isSet) {
        obj.insert(QString("readOnly"), ::OpenAPI::toJsonValue(m_read_only));
    }
    if (m_required_isSet) {
        obj.insert(QString("required"), ::OpenAPI::toJsonValue(m_required));
    }
    if (m_type_isSet) {
        obj.insert(QString("type"), ::OpenAPI::toJsonValue(m_type));
    }
    return obj;
}

bool OAISchemaSubAttribute::isCaseExact() const {
    return m_case_exact;
}
void OAISchemaSubAttribute::setCaseExact(const bool &case_exact) {
    m_case_exact = case_exact;
    m_case_exact_isSet = true;
}

bool OAISchemaSubAttribute::is_case_exact_Set() const{
    return m_case_exact_isSet;
}

bool OAISchemaSubAttribute::is_case_exact_Valid() const{
    return m_case_exact_isValid;
}

QString OAISchemaSubAttribute::getDescription() const {
    return m_description;
}
void OAISchemaSubAttribute::setDescription(const QString &description) {
    m_description = description;
    m_description_isSet = true;
}

bool OAISchemaSubAttribute::is_description_Set() const{
    return m_description_isSet;
}

bool OAISchemaSubAttribute::is_description_Valid() const{
    return m_description_isValid;
}

QString OAISchemaSubAttribute::getName() const {
    return m_name;
}
void OAISchemaSubAttribute::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAISchemaSubAttribute::is_name_Set() const{
    return m_name_isSet;
}

bool OAISchemaSubAttribute::is_name_Valid() const{
    return m_name_isValid;
}

bool OAISchemaSubAttribute::isReadOnly() const {
    return m_read_only;
}
void OAISchemaSubAttribute::setReadOnly(const bool &read_only) {
    m_read_only = read_only;
    m_read_only_isSet = true;
}

bool OAISchemaSubAttribute::is_read_only_Set() const{
    return m_read_only_isSet;
}

bool OAISchemaSubAttribute::is_read_only_Valid() const{
    return m_read_only_isValid;
}

bool OAISchemaSubAttribute::isRequired() const {
    return m_required;
}
void OAISchemaSubAttribute::setRequired(const bool &required) {
    m_required = required;
    m_required_isSet = true;
}

bool OAISchemaSubAttribute::is_required_Set() const{
    return m_required_isSet;
}

bool OAISchemaSubAttribute::is_required_Valid() const{
    return m_required_isValid;
}

QString OAISchemaSubAttribute::getType() const {
    return m_type;
}
void OAISchemaSubAttribute::setType(const QString &type) {
    m_type = type;
    m_type_isSet = true;
}

bool OAISchemaSubAttribute::is_type_Set() const{
    return m_type_isSet;
}

bool OAISchemaSubAttribute::is_type_Valid() const{
    return m_type_isValid;
}

bool OAISchemaSubAttribute::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_case_exact_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_description_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_read_only_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_required_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_type_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAISchemaSubAttribute::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_case_exact_isValid && m_description_isValid && m_name_isValid && m_read_only_isValid && m_required_isValid && m_type_isValid && true;
}

} // namespace OpenAPI
