/**
 * SCIM
 * The SCIM API lets you manage users in your organization. You can then automate the provisioning of product licenses for these users, and they can use your company's Single Sign-On solution through an Identity Provider.
 *
 * The version of the OpenAPI document: N/A
 * Contact: developer-support@citrixonline.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIServiceProviderConfigs.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIServiceProviderConfigs::OAIServiceProviderConfigs(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIServiceProviderConfigs::OAIServiceProviderConfigs() {
    this->initializeModel();
}

OAIServiceProviderConfigs::~OAIServiceProviderConfigs() {}

void OAIServiceProviderConfigs::initializeModel() {

    m_authentication_schemes_isSet = false;
    m_authentication_schemes_isValid = false;

    m_bulk_isSet = false;
    m_bulk_isValid = false;

    m_change_password_isSet = false;
    m_change_password_isValid = false;

    m_documentation_url_isSet = false;
    m_documentation_url_isValid = false;

    m_etag_isSet = false;
    m_etag_isValid = false;

    m_filter_isSet = false;
    m_filter_isValid = false;

    m_patch_isSet = false;
    m_patch_isValid = false;

    m_sort_isSet = false;
    m_sort_isValid = false;

    m_xml_data_format_isSet = false;
    m_xml_data_format_isValid = false;
}

void OAIServiceProviderConfigs::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIServiceProviderConfigs::fromJsonObject(QJsonObject json) {

    m_authentication_schemes_isValid = ::OpenAPI::fromJsonValue(m_authentication_schemes, json[QString("authenticationSchemes")]);
    m_authentication_schemes_isSet = !json[QString("authenticationSchemes")].isNull() && m_authentication_schemes_isValid;

    m_bulk_isValid = ::OpenAPI::fromJsonValue(m_bulk, json[QString("bulk")]);
    m_bulk_isSet = !json[QString("bulk")].isNull() && m_bulk_isValid;

    m_change_password_isValid = ::OpenAPI::fromJsonValue(m_change_password, json[QString("changePassword")]);
    m_change_password_isSet = !json[QString("changePassword")].isNull() && m_change_password_isValid;

    m_documentation_url_isValid = ::OpenAPI::fromJsonValue(m_documentation_url, json[QString("documentationUrl")]);
    m_documentation_url_isSet = !json[QString("documentationUrl")].isNull() && m_documentation_url_isValid;

    m_etag_isValid = ::OpenAPI::fromJsonValue(m_etag, json[QString("etag")]);
    m_etag_isSet = !json[QString("etag")].isNull() && m_etag_isValid;

    m_filter_isValid = ::OpenAPI::fromJsonValue(m_filter, json[QString("filter")]);
    m_filter_isSet = !json[QString("filter")].isNull() && m_filter_isValid;

    m_patch_isValid = ::OpenAPI::fromJsonValue(m_patch, json[QString("patch")]);
    m_patch_isSet = !json[QString("patch")].isNull() && m_patch_isValid;

    m_sort_isValid = ::OpenAPI::fromJsonValue(m_sort, json[QString("sort")]);
    m_sort_isSet = !json[QString("sort")].isNull() && m_sort_isValid;

    m_xml_data_format_isValid = ::OpenAPI::fromJsonValue(m_xml_data_format, json[QString("xmlDataFormat")]);
    m_xml_data_format_isSet = !json[QString("xmlDataFormat")].isNull() && m_xml_data_format_isValid;
}

QString OAIServiceProviderConfigs::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIServiceProviderConfigs::asJsonObject() const {
    QJsonObject obj;
    if (m_authentication_schemes.isSet()) {
        obj.insert(QString("authenticationSchemes"), ::OpenAPI::toJsonValue(m_authentication_schemes));
    }
    if (m_bulk.isSet()) {
        obj.insert(QString("bulk"), ::OpenAPI::toJsonValue(m_bulk));
    }
    if (m_change_password.isSet()) {
        obj.insert(QString("changePassword"), ::OpenAPI::toJsonValue(m_change_password));
    }
    if (m_documentation_url_isSet) {
        obj.insert(QString("documentationUrl"), ::OpenAPI::toJsonValue(m_documentation_url));
    }
    if (m_etag.isSet()) {
        obj.insert(QString("etag"), ::OpenAPI::toJsonValue(m_etag));
    }
    if (m_filter.isSet()) {
        obj.insert(QString("filter"), ::OpenAPI::toJsonValue(m_filter));
    }
    if (m_patch.isSet()) {
        obj.insert(QString("patch"), ::OpenAPI::toJsonValue(m_patch));
    }
    if (m_sort.isSet()) {
        obj.insert(QString("sort"), ::OpenAPI::toJsonValue(m_sort));
    }
    if (m_xml_data_format.isSet()) {
        obj.insert(QString("xmlDataFormat"), ::OpenAPI::toJsonValue(m_xml_data_format));
    }
    return obj;
}

OAIAuthenticationSchemes OAIServiceProviderConfigs::getAuthenticationSchemes() const {
    return m_authentication_schemes;
}
void OAIServiceProviderConfigs::setAuthenticationSchemes(const OAIAuthenticationSchemes &authentication_schemes) {
    m_authentication_schemes = authentication_schemes;
    m_authentication_schemes_isSet = true;
}

bool OAIServiceProviderConfigs::is_authentication_schemes_Set() const{
    return m_authentication_schemes_isSet;
}

bool OAIServiceProviderConfigs::is_authentication_schemes_Valid() const{
    return m_authentication_schemes_isValid;
}

OAIBulk OAIServiceProviderConfigs::getBulk() const {
    return m_bulk;
}
void OAIServiceProviderConfigs::setBulk(const OAIBulk &bulk) {
    m_bulk = bulk;
    m_bulk_isSet = true;
}

bool OAIServiceProviderConfigs::is_bulk_Set() const{
    return m_bulk_isSet;
}

bool OAIServiceProviderConfigs::is_bulk_Valid() const{
    return m_bulk_isValid;
}

OAIChangePassword OAIServiceProviderConfigs::getChangePassword() const {
    return m_change_password;
}
void OAIServiceProviderConfigs::setChangePassword(const OAIChangePassword &change_password) {
    m_change_password = change_password;
    m_change_password_isSet = true;
}

bool OAIServiceProviderConfigs::is_change_password_Set() const{
    return m_change_password_isSet;
}

bool OAIServiceProviderConfigs::is_change_password_Valid() const{
    return m_change_password_isValid;
}

QString OAIServiceProviderConfigs::getDocumentationUrl() const {
    return m_documentation_url;
}
void OAIServiceProviderConfigs::setDocumentationUrl(const QString &documentation_url) {
    m_documentation_url = documentation_url;
    m_documentation_url_isSet = true;
}

bool OAIServiceProviderConfigs::is_documentation_url_Set() const{
    return m_documentation_url_isSet;
}

bool OAIServiceProviderConfigs::is_documentation_url_Valid() const{
    return m_documentation_url_isValid;
}

OAIEtag OAIServiceProviderConfigs::getEtag() const {
    return m_etag;
}
void OAIServiceProviderConfigs::setEtag(const OAIEtag &etag) {
    m_etag = etag;
    m_etag_isSet = true;
}

bool OAIServiceProviderConfigs::is_etag_Set() const{
    return m_etag_isSet;
}

bool OAIServiceProviderConfigs::is_etag_Valid() const{
    return m_etag_isValid;
}

OAIFilter OAIServiceProviderConfigs::getFilter() const {
    return m_filter;
}
void OAIServiceProviderConfigs::setFilter(const OAIFilter &filter) {
    m_filter = filter;
    m_filter_isSet = true;
}

bool OAIServiceProviderConfigs::is_filter_Set() const{
    return m_filter_isSet;
}

bool OAIServiceProviderConfigs::is_filter_Valid() const{
    return m_filter_isValid;
}

OAIPatch OAIServiceProviderConfigs::getPatch() const {
    return m_patch;
}
void OAIServiceProviderConfigs::setPatch(const OAIPatch &patch) {
    m_patch = patch;
    m_patch_isSet = true;
}

bool OAIServiceProviderConfigs::is_patch_Set() const{
    return m_patch_isSet;
}

bool OAIServiceProviderConfigs::is_patch_Valid() const{
    return m_patch_isValid;
}

OAISort OAIServiceProviderConfigs::getSort() const {
    return m_sort;
}
void OAIServiceProviderConfigs::setSort(const OAISort &sort) {
    m_sort = sort;
    m_sort_isSet = true;
}

bool OAIServiceProviderConfigs::is_sort_Set() const{
    return m_sort_isSet;
}

bool OAIServiceProviderConfigs::is_sort_Valid() const{
    return m_sort_isValid;
}

OAIXmlDataFormat OAIServiceProviderConfigs::getXmlDataFormat() const {
    return m_xml_data_format;
}
void OAIServiceProviderConfigs::setXmlDataFormat(const OAIXmlDataFormat &xml_data_format) {
    m_xml_data_format = xml_data_format;
    m_xml_data_format_isSet = true;
}

bool OAIServiceProviderConfigs::is_xml_data_format_Set() const{
    return m_xml_data_format_isSet;
}

bool OAIServiceProviderConfigs::is_xml_data_format_Valid() const{
    return m_xml_data_format_isValid;
}

bool OAIServiceProviderConfigs::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_authentication_schemes.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_bulk.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_change_password.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_documentation_url_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_etag.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_filter.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_patch.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_sort.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_xml_data_format.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIServiceProviderConfigs::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_authentication_schemes_isValid && m_bulk_isValid && m_change_password_isValid && m_documentation_url_isValid && m_etag_isValid && m_filter_isValid && m_patch_isValid && m_sort_isValid && m_xml_data_format_isValid && true;
}

} // namespace OpenAPI
