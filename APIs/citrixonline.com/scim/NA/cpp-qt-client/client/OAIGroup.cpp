/**
 * SCIM
 * The SCIM API lets you manage users in your organization. You can then automate the provisioning of product licenses for these users, and they can use your company's Single Sign-On solution through an Identity Provider.
 *
 * The version of the OpenAPI document: N/A
 * Contact: developer-support@citrixonline.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIGroup.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIGroup::OAIGroup(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIGroup::OAIGroup() {
    this->initializeModel();
}

OAIGroup::~OAIGroup() {}

void OAIGroup::initializeModel() {

    m_display_name_isSet = false;
    m_display_name_isValid = false;

    m_id_isSet = false;
    m_id_isValid = false;

    m_members_isSet = false;
    m_members_isValid = false;

    m_meta_isSet = false;
    m_meta_isValid = false;
}

void OAIGroup::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIGroup::fromJsonObject(QJsonObject json) {

    m_display_name_isValid = ::OpenAPI::fromJsonValue(m_display_name, json[QString("displayName")]);
    m_display_name_isSet = !json[QString("displayName")].isNull() && m_display_name_isValid;

    m_id_isValid = ::OpenAPI::fromJsonValue(m_id, json[QString("id")]);
    m_id_isSet = !json[QString("id")].isNull() && m_id_isValid;

    m_members_isValid = ::OpenAPI::fromJsonValue(m_members, json[QString("members")]);
    m_members_isSet = !json[QString("members")].isNull() && m_members_isValid;

    m_meta_isValid = ::OpenAPI::fromJsonValue(m_meta, json[QString("meta")]);
    m_meta_isSet = !json[QString("meta")].isNull() && m_meta_isValid;
}

QString OAIGroup::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIGroup::asJsonObject() const {
    QJsonObject obj;
    if (m_display_name_isSet) {
        obj.insert(QString("displayName"), ::OpenAPI::toJsonValue(m_display_name));
    }
    if (m_id_isSet) {
        obj.insert(QString("id"), ::OpenAPI::toJsonValue(m_id));
    }
    if (m_members.size() > 0) {
        obj.insert(QString("members"), ::OpenAPI::toJsonValue(m_members));
    }
    if (m_meta.isSet()) {
        obj.insert(QString("meta"), ::OpenAPI::toJsonValue(m_meta));
    }
    return obj;
}

QString OAIGroup::getDisplayName() const {
    return m_display_name;
}
void OAIGroup::setDisplayName(const QString &display_name) {
    m_display_name = display_name;
    m_display_name_isSet = true;
}

bool OAIGroup::is_display_name_Set() const{
    return m_display_name_isSet;
}

bool OAIGroup::is_display_name_Valid() const{
    return m_display_name_isValid;
}

QString OAIGroup::getId() const {
    return m_id;
}
void OAIGroup::setId(const QString &id) {
    m_id = id;
    m_id_isSet = true;
}

bool OAIGroup::is_id_Set() const{
    return m_id_isSet;
}

bool OAIGroup::is_id_Valid() const{
    return m_id_isValid;
}

QList<OAIMember> OAIGroup::getMembers() const {
    return m_members;
}
void OAIGroup::setMembers(const QList<OAIMember> &members) {
    m_members = members;
    m_members_isSet = true;
}

bool OAIGroup::is_members_Set() const{
    return m_members_isSet;
}

bool OAIGroup::is_members_Valid() const{
    return m_members_isValid;
}

OAIGroupMetadata OAIGroup::getMeta() const {
    return m_meta;
}
void OAIGroup::setMeta(const OAIGroupMetadata &meta) {
    m_meta = meta;
    m_meta_isSet = true;
}

bool OAIGroup::is_meta_Set() const{
    return m_meta_isSet;
}

bool OAIGroup::is_meta_Valid() const{
    return m_meta_isValid;
}

bool OAIGroup::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_display_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_members.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_meta.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIGroup::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_display_name_isValid && m_id_isValid && m_meta_isValid && true;
}

} // namespace OpenAPI
