/**
 * SCIM
 * The SCIM API lets you manage users in your organization. You can then automate the provisioning of product licenses for these users, and they can use your company's Single Sign-On solution through an Identity Provider.
 *
 * The version of the OpenAPI document: N/A
 * Contact: developer-support@citrixonline.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAIServiceProviderConfigs.h
 *
 * Represents the Service Provider&#39;s configuration
 */

#ifndef OAIServiceProviderConfigs_H
#define OAIServiceProviderConfigs_H

#include <QJsonObject>

#include "OAIAuthenticationSchemes.h"
#include "OAIBulk.h"
#include "OAIChangePassword.h"
#include "OAIEtag.h"
#include "OAIFilter.h"
#include "OAIPatch.h"
#include "OAISort.h"
#include "OAIXmlDataFormat.h"
#include <QString>

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {
class OAIAuthenticationSchemes;
class OAIBulk;
class OAIChangePassword;
class OAIEtag;
class OAIFilter;
class OAIPatch;
class OAISort;
class OAIXmlDataFormat;

class OAIServiceProviderConfigs : public OAIObject {
public:
    OAIServiceProviderConfigs();
    OAIServiceProviderConfigs(QString json);
    ~OAIServiceProviderConfigs() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    OAIAuthenticationSchemes getAuthenticationSchemes() const;
    void setAuthenticationSchemes(const OAIAuthenticationSchemes &authentication_schemes);
    bool is_authentication_schemes_Set() const;
    bool is_authentication_schemes_Valid() const;

    OAIBulk getBulk() const;
    void setBulk(const OAIBulk &bulk);
    bool is_bulk_Set() const;
    bool is_bulk_Valid() const;

    OAIChangePassword getChangePassword() const;
    void setChangePassword(const OAIChangePassword &change_password);
    bool is_change_password_Set() const;
    bool is_change_password_Valid() const;

    QString getDocumentationUrl() const;
    void setDocumentationUrl(const QString &documentation_url);
    bool is_documentation_url_Set() const;
    bool is_documentation_url_Valid() const;

    OAIEtag getEtag() const;
    void setEtag(const OAIEtag &etag);
    bool is_etag_Set() const;
    bool is_etag_Valid() const;

    OAIFilter getFilter() const;
    void setFilter(const OAIFilter &filter);
    bool is_filter_Set() const;
    bool is_filter_Valid() const;

    OAIPatch getPatch() const;
    void setPatch(const OAIPatch &patch);
    bool is_patch_Set() const;
    bool is_patch_Valid() const;

    OAISort getSort() const;
    void setSort(const OAISort &sort);
    bool is_sort_Set() const;
    bool is_sort_Valid() const;

    OAIXmlDataFormat getXmlDataFormat() const;
    void setXmlDataFormat(const OAIXmlDataFormat &xml_data_format);
    bool is_xml_data_format_Set() const;
    bool is_xml_data_format_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    OAIAuthenticationSchemes m_authentication_schemes;
    bool m_authentication_schemes_isSet;
    bool m_authentication_schemes_isValid;

    OAIBulk m_bulk;
    bool m_bulk_isSet;
    bool m_bulk_isValid;

    OAIChangePassword m_change_password;
    bool m_change_password_isSet;
    bool m_change_password_isValid;

    QString m_documentation_url;
    bool m_documentation_url_isSet;
    bool m_documentation_url_isValid;

    OAIEtag m_etag;
    bool m_etag_isSet;
    bool m_etag_isValid;

    OAIFilter m_filter;
    bool m_filter_isSet;
    bool m_filter_isValid;

    OAIPatch m_patch;
    bool m_patch_isSet;
    bool m_patch_isValid;

    OAISort m_sort;
    bool m_sort_isSet;
    bool m_sort_isValid;

    OAIXmlDataFormat m_xml_data_format;
    bool m_xml_data_format_isSet;
    bool m_xml_data_format_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAIServiceProviderConfigs)

#endif // OAIServiceProviderConfigs_H
