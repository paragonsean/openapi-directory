/**
 * SCIM
 * The SCIM API lets you manage users in your organization. You can then automate the provisioning of product licenses for these users, and they can use your company's Single Sign-On solution through an Identity Provider.
 *
 * The version of the OpenAPI document: N/A
 * Contact: developer-support@citrixonline.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#ifndef OAI_OAIUsersApi_H
#define OAI_OAIUsersApi_H

#include "OAIHelpers.h"
#include "OAIHttpRequest.h"
#include "OAIServerConfiguration.h"
#include "OAIOauth.h"

#include "OAIUser.h"
#include "OAIUserCollection.h"
#include "OAIUserDefinition.h"
#include <QString>

#include <QObject>
#include <QByteArray>
#include <QStringList>
#include <QList>
#include <QNetworkAccessManager>

namespace OpenAPI {

class OAIUsersApi : public QObject {
    Q_OBJECT

public:
    OAIUsersApi(const int timeOut = 0);
    ~OAIUsersApi();

    void initializeServerConfigs();
    int setDefaultServerValue(int serverIndex,const QString &operation, const QString &variable,const QString &val);
    void setServerIndex(const QString &operation, int serverIndex);
    void setApiKey(const QString &apiKeyName, const QString &apiKey);
    void setBearerToken(const QString &token);
    void setUsername(const QString &username);
    void setPassword(const QString &password);
    void setTimeOut(const int timeOut);
    void setWorkingDirectory(const QString &path);
    void setNetworkAccessManager(QNetworkAccessManager* manager);
    int addServerConfiguration(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables = QMap<QString, OAIServerVariable>());
    void setNewServerForAllOperations(const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void setNewServer(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void addHeaders(const QString &key, const QString &value);
    void enableRequestCompression();
    void enableResponseCompression();
    void abortRequests();
    QString getParamStylePrefix(const QString &style);
    QString getParamStyleSuffix(const QString &style);
    QString getParamStyleDelimiter(const QString &style, const QString &name, bool isExplode);

    /**
    * @param[in]  authorization QString [required]
    * @param[in]  body OAIUserDefinition [required]
    */
    virtual void createUsers(const QString &authorization, const OAIUserDefinition &body);

    /**
    * @param[in]  authorization QString [required]
    * @param[in]  user_key qint64 [required]
    */
    virtual void deleteUser(const QString &authorization, const qint64 &user_key);

    /**
    * @param[in]  authorization QString [required]
    */
    virtual void getMe(const QString &authorization);

    /**
    * @param[in]  authorization QString [required]
    * @param[in]  user_key qint64 [required]
    */
    virtual void getUser(const QString &authorization, const qint64 &user_key);

    /**
    * @param[in]  authorization QString [required]
    * @param[in]  filter QString [optional]
    */
    virtual void getUsers(const QString &authorization, const ::OpenAPI::OptionalParam<QString> &filter = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  authorization QString [required]
    * @param[in]  body OAIUserDefinition [required]
    */
    virtual void replaceMe(const QString &authorization, const OAIUserDefinition &body);

    /**
    * @param[in]  authorization QString [required]
    * @param[in]  user_key qint64 [required]
    * @param[in]  body OAIUserDefinition [required]
    */
    virtual void replaceUser(const QString &authorization, const qint64 &user_key, const OAIUserDefinition &body);

    /**
    * @param[in]  authorization QString [required]
    * @param[in]  body OAIUserDefinition [required]
    */
    virtual void updateMe(const QString &authorization, const OAIUserDefinition &body);

    /**
    * @param[in]  authorization QString [required]
    * @param[in]  user_key qint64 [required]
    * @param[in]  body OAIUserDefinition [required]
    */
    virtual void updateUser(const QString &authorization, const qint64 &user_key, const OAIUserDefinition &body);


private:
    QMap<QString,int> _serverIndices;
    QMap<QString,QList<OAIServerConfiguration>> _serverConfigs;
    QMap<QString, QString> _apiKeys;
    QString _bearerToken;
    QString _username;
    QString _password;
    int _timeOut;
    QString _workingDirectory;
    QNetworkAccessManager* _manager;
    QMap<QString, QString> _defaultHeaders;
    bool _isResponseCompressionEnabled;
    bool _isRequestCompressionEnabled;
    OAIHttpRequestInput _latestInput;
    OAIHttpRequestWorker *_latestWorker;
    QStringList _latestScope;
    OauthCode _authFlow;
    OauthImplicit _implicitFlow;
    OauthCredentials _credentialFlow;
    OauthPassword _passwordFlow;
    int _OauthMethod = 0;

    void createUsersCallback(OAIHttpRequestWorker *worker);
    void deleteUserCallback(OAIHttpRequestWorker *worker);
    void getMeCallback(OAIHttpRequestWorker *worker);
    void getUserCallback(OAIHttpRequestWorker *worker);
    void getUsersCallback(OAIHttpRequestWorker *worker);
    void replaceMeCallback(OAIHttpRequestWorker *worker);
    void replaceUserCallback(OAIHttpRequestWorker *worker);
    void updateMeCallback(OAIHttpRequestWorker *worker);
    void updateUserCallback(OAIHttpRequestWorker *worker);

Q_SIGNALS:

    void createUsersSignal(OAIUser summary);
    void deleteUserSignal();
    void getMeSignal(OAIUser summary);
    void getUserSignal(OAIUser summary);
    void getUsersSignal(OAIUserCollection summary);
    void replaceMeSignal(OAIUser summary);
    void replaceUserSignal(OAIUser summary);
    void updateMeSignal(OAIUser summary);
    void updateUserSignal(OAIUser summary);


    void createUsersSignalFull(OAIHttpRequestWorker *worker, OAIUser summary);
    void deleteUserSignalFull(OAIHttpRequestWorker *worker);
    void getMeSignalFull(OAIHttpRequestWorker *worker, OAIUser summary);
    void getUserSignalFull(OAIHttpRequestWorker *worker, OAIUser summary);
    void getUsersSignalFull(OAIHttpRequestWorker *worker, OAIUserCollection summary);
    void replaceMeSignalFull(OAIHttpRequestWorker *worker, OAIUser summary);
    void replaceUserSignalFull(OAIHttpRequestWorker *worker, OAIUser summary);
    void updateMeSignalFull(OAIHttpRequestWorker *worker, OAIUser summary);
    void updateUserSignalFull(OAIHttpRequestWorker *worker, OAIUser summary);

    Q_DECL_DEPRECATED_X("Use createUsersSignalError() instead")
    void createUsersSignalE(OAIUser summary, QNetworkReply::NetworkError error_type, QString error_str);
    void createUsersSignalError(OAIUser summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use deleteUserSignalError() instead")
    void deleteUserSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void deleteUserSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getMeSignalError() instead")
    void getMeSignalE(OAIUser summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getMeSignalError(OAIUser summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getUserSignalError() instead")
    void getUserSignalE(OAIUser summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getUserSignalError(OAIUser summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getUsersSignalError() instead")
    void getUsersSignalE(OAIUserCollection summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getUsersSignalError(OAIUserCollection summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use replaceMeSignalError() instead")
    void replaceMeSignalE(OAIUser summary, QNetworkReply::NetworkError error_type, QString error_str);
    void replaceMeSignalError(OAIUser summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use replaceUserSignalError() instead")
    void replaceUserSignalE(OAIUser summary, QNetworkReply::NetworkError error_type, QString error_str);
    void replaceUserSignalError(OAIUser summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use updateMeSignalError() instead")
    void updateMeSignalE(OAIUser summary, QNetworkReply::NetworkError error_type, QString error_str);
    void updateMeSignalError(OAIUser summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use updateUserSignalError() instead")
    void updateUserSignalE(OAIUser summary, QNetworkReply::NetworkError error_type, QString error_str);
    void updateUserSignalError(OAIUser summary, QNetworkReply::NetworkError error_type, const QString &error_str);

    Q_DECL_DEPRECATED_X("Use createUsersSignalErrorFull() instead")
    void createUsersSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void createUsersSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use deleteUserSignalErrorFull() instead")
    void deleteUserSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void deleteUserSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getMeSignalErrorFull() instead")
    void getMeSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getMeSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getUserSignalErrorFull() instead")
    void getUserSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getUserSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getUsersSignalErrorFull() instead")
    void getUsersSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getUsersSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use replaceMeSignalErrorFull() instead")
    void replaceMeSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void replaceMeSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use replaceUserSignalErrorFull() instead")
    void replaceUserSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void replaceUserSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use updateMeSignalErrorFull() instead")
    void updateMeSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void updateMeSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use updateUserSignalErrorFull() instead")
    void updateUserSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void updateUserSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);

    void abortRequestsSignal();
    void allPendingRequestsCompleted();

public Q_SLOTS:
    void tokenAvailable();
};

} // namespace OpenAPI
#endif
