/**
 * GoToMeeting
 * <br>The GoToMeeting API provides seamless integration of GoToMeeting provisioning and meeting management into your existing infrastructure or third party applications.<br><br>For customers, the ability to add, suspend or delete an organizer in your GoToMeeting Corporate account from within your primary management systems simplifies and streamlines the entire process of account management. The ability to monitor meeting schedules, history and active meeting status allows managers to leverage GoToMeeting activities through your primary applications.<br><br>For third parties, the ability to create, update or delete a meeting from within your application makes real-time collaboration possible for your customers. The ability to update meeting schedules, view history and scheduled meetings, and view attendees from past meetings allows you to enhance your users' experience and the value of your applications.
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: developer-support@citrixonline.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import AttendeeByGroup from '../model/AttendeeByGroup';
import Group from '../model/Group';
import HistoricalMeetingByGroup from '../model/HistoricalMeetingByGroup';
import HistoryMeetingByGroup from '../model/HistoryMeetingByGroup';
import OrganizerByGroup from '../model/OrganizerByGroup';
import OrganizerReq from '../model/OrganizerReq';
import OrganizerShort from '../model/OrganizerShort';
import UpcomingMeetingByGroup from '../model/UpcomingMeetingByGroup';

/**
* Groups service.
* @module api/GroupsApi
* @version 1.0.0
*/
export default class GroupsApi {

    /**
    * Constructs a new GroupsApi. 
    * @alias module:api/GroupsApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the groupsGet operation.
     * @callback module:api/GroupsApi~groupsGetCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/Group>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get groups
     * List all groups for an account. This API call is only available to users with the admin role.
     * @param {String} authorization Access token
     * @param {module:api/GroupsApi~groupsGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/Group>}
     */
    groupsGet(authorization, callback) {
      let postBody = null;
      // verify the required parameter 'authorization' is set
      if (authorization === undefined || authorization === null) {
        throw new Error("Missing the required parameter 'authorization' when calling groupsGet");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'Authorization': authorization
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [Group];
      return this.apiClient.callApi(
        '/groups', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the groupsGroupKeyAttendeesGet operation.
     * @callback module:api/GroupsApi~groupsGroupKeyAttendeesGetCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/AttendeeByGroup>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get attendees by group
     * Returns all attendees for all meetings within specified date range held by organizers within the specified group. This API call is only available to users with the admin role. This API call can be used only for groups with maximum 50 organizers.
     * @param {String} authorization Access token
     * @param {Number} groupKey The key of the group
     * @param {Object} opts Optional parameters
     * @param {Date} [startDate] Start of date range, in ISO8601 UTC format, e.g. 2015-07-01T22:00:00Z
     * @param {Date} [endDate] End of date range, in ISO8601 UTC format, e.g. 2015-07-01T23:00:00Z
     * @param {module:api/GroupsApi~groupsGroupKeyAttendeesGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/AttendeeByGroup>}
     */
    groupsGroupKeyAttendeesGet(authorization, groupKey, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'authorization' is set
      if (authorization === undefined || authorization === null) {
        throw new Error("Missing the required parameter 'authorization' when calling groupsGroupKeyAttendeesGet");
      }
      // verify the required parameter 'groupKey' is set
      if (groupKey === undefined || groupKey === null) {
        throw new Error("Missing the required parameter 'groupKey' when calling groupsGroupKeyAttendeesGet");
      }

      let pathParams = {
        'groupKey': groupKey
      };
      let queryParams = {
        'startDate': opts['startDate'],
        'endDate': opts['endDate']
      };
      let headerParams = {
        'Authorization': authorization
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [AttendeeByGroup];
      return this.apiClient.callApi(
        '/groups/{groupKey}/attendees', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the groupsGroupKeyHistoricalMeetingsGet operation.
     * @callback module:api/GroupsApi~groupsGroupKeyHistoricalMeetingsGetCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/HistoricalMeetingByGroup>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get historical meetings by group
     * Get historical meetings for the specified group that started within the specified date/time range. This API call is only available to users with the admin role. This API call is restricted to groups with a maximum of 50 organizers. Remark: Meetings which are still ongoing at the time of the request are NOT contained in the result array.
     * @param {String} authorization Access token
     * @param {Number} groupKey The key of the group
     * @param {Date} startDate Required start of date range, in ISO8601 UTC format, e.g. 2015-07-01T22:00:00Z
     * @param {Date} endDate Required end of date range, in ISO8601 UTC format, e.g. 2015-07-01T23:00:00Z
     * @param {module:api/GroupsApi~groupsGroupKeyHistoricalMeetingsGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/HistoricalMeetingByGroup>}
     */
    groupsGroupKeyHistoricalMeetingsGet(authorization, groupKey, startDate, endDate, callback) {
      let postBody = null;
      // verify the required parameter 'authorization' is set
      if (authorization === undefined || authorization === null) {
        throw new Error("Missing the required parameter 'authorization' when calling groupsGroupKeyHistoricalMeetingsGet");
      }
      // verify the required parameter 'groupKey' is set
      if (groupKey === undefined || groupKey === null) {
        throw new Error("Missing the required parameter 'groupKey' when calling groupsGroupKeyHistoricalMeetingsGet");
      }
      // verify the required parameter 'startDate' is set
      if (startDate === undefined || startDate === null) {
        throw new Error("Missing the required parameter 'startDate' when calling groupsGroupKeyHistoricalMeetingsGet");
      }
      // verify the required parameter 'endDate' is set
      if (endDate === undefined || endDate === null) {
        throw new Error("Missing the required parameter 'endDate' when calling groupsGroupKeyHistoricalMeetingsGet");
      }

      let pathParams = {
        'groupKey': groupKey
      };
      let queryParams = {
        'startDate': startDate,
        'endDate': endDate
      };
      let headerParams = {
        'Authorization': authorization
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [HistoricalMeetingByGroup];
      return this.apiClient.callApi(
        '/groups/{groupKey}/historicalMeetings', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the groupsGroupKeyMeetingsGet operation.
     * @callback module:api/GroupsApi~groupsGroupKeyMeetingsGetCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/HistoryMeetingByGroup>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * DEPRECATED: Get historical meetings by group
     * DEPRECATED: Please use the new API calls 'Get historical meetings by group' and 'Get upcoming meetings by group'. Get meetings for a specified group. Additional filters can be used to view only meetings within a specified date range. This API call is only available to users with the admin role.
     * @param {String} authorization Access token
     * @param {Number} groupKey The key of the group
     * @param {Boolean} history When 'true', returns all past meetings within date range
     * @param {Date} startDate If history=true, required start of date range, in ISO8601 UTC format, e.g. 2015-07-01T22:00:00Z
     * @param {Date} endDate If history=true, required end of date range, in ISO8601 UTC format, e.g. 2015-07-01T23:00:00Z
     * @param {module:api/GroupsApi~groupsGroupKeyMeetingsGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/HistoryMeetingByGroup>}
     */
    groupsGroupKeyMeetingsGet(authorization, groupKey, history, startDate, endDate, callback) {
      let postBody = null;
      // verify the required parameter 'authorization' is set
      if (authorization === undefined || authorization === null) {
        throw new Error("Missing the required parameter 'authorization' when calling groupsGroupKeyMeetingsGet");
      }
      // verify the required parameter 'groupKey' is set
      if (groupKey === undefined || groupKey === null) {
        throw new Error("Missing the required parameter 'groupKey' when calling groupsGroupKeyMeetingsGet");
      }
      // verify the required parameter 'history' is set
      if (history === undefined || history === null) {
        throw new Error("Missing the required parameter 'history' when calling groupsGroupKeyMeetingsGet");
      }
      // verify the required parameter 'startDate' is set
      if (startDate === undefined || startDate === null) {
        throw new Error("Missing the required parameter 'startDate' when calling groupsGroupKeyMeetingsGet");
      }
      // verify the required parameter 'endDate' is set
      if (endDate === undefined || endDate === null) {
        throw new Error("Missing the required parameter 'endDate' when calling groupsGroupKeyMeetingsGet");
      }

      let pathParams = {
        'groupKey': groupKey
      };
      let queryParams = {
        'history': history,
        'startDate': startDate,
        'endDate': endDate
      };
      let headerParams = {
        'Authorization': authorization
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [HistoryMeetingByGroup];
      return this.apiClient.callApi(
        '/groups/{groupKey}/meetings', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the groupsGroupKeyOrganizersGet operation.
     * @callback module:api/GroupsApi~groupsGroupKeyOrganizersGetCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/OrganizerByGroup>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get organizers by group
     * Returns all the organizers within a specific group. This API call is only available to users with the admin role.
     * @param {String} authorization Access token
     * @param {Number} groupKey The key of the group
     * @param {module:api/GroupsApi~groupsGroupKeyOrganizersGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/OrganizerByGroup>}
     */
    groupsGroupKeyOrganizersGet(authorization, groupKey, callback) {
      let postBody = null;
      // verify the required parameter 'authorization' is set
      if (authorization === undefined || authorization === null) {
        throw new Error("Missing the required parameter 'authorization' when calling groupsGroupKeyOrganizersGet");
      }
      // verify the required parameter 'groupKey' is set
      if (groupKey === undefined || groupKey === null) {
        throw new Error("Missing the required parameter 'groupKey' when calling groupsGroupKeyOrganizersGet");
      }

      let pathParams = {
        'groupKey': groupKey
      };
      let queryParams = {
      };
      let headerParams = {
        'Authorization': authorization
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [OrganizerByGroup];
      return this.apiClient.callApi(
        '/groups/{groupKey}/organizers', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the groupsGroupKeyOrganizersPost operation.
     * @callback module:api/GroupsApi~groupsGroupKeyOrganizersPostCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/OrganizerShort>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Create organizer in group
     * Creates a new organizer and sends an email to the email address defined in request. This API call is only available to users with the admin role. You may also pass 'G2W' or 'G2T' or 'OPENVOICE' as productType variables, creating organizers for those products. A G2W or G2T organizer will also have access to G2M.
     * @param {String} authorization Access token
     * @param {Number} groupKey The key of the group
     * @param {module:model/OrganizerReq} body The details of the organizer to be created
     * @param {module:api/GroupsApi~groupsGroupKeyOrganizersPostCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/OrganizerShort>}
     */
    groupsGroupKeyOrganizersPost(authorization, groupKey, body, callback) {
      let postBody = body;
      // verify the required parameter 'authorization' is set
      if (authorization === undefined || authorization === null) {
        throw new Error("Missing the required parameter 'authorization' when calling groupsGroupKeyOrganizersPost");
      }
      // verify the required parameter 'groupKey' is set
      if (groupKey === undefined || groupKey === null) {
        throw new Error("Missing the required parameter 'groupKey' when calling groupsGroupKeyOrganizersPost");
      }
      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling groupsGroupKeyOrganizersPost");
      }

      let pathParams = {
        'groupKey': groupKey
      };
      let queryParams = {
      };
      let headerParams = {
        'Authorization': authorization
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = [OrganizerShort];
      return this.apiClient.callApi(
        '/groups/{groupKey}/organizers', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the groupsGroupKeyUpcomingMeetingsGet operation.
     * @callback module:api/GroupsApi~groupsGroupKeyUpcomingMeetingsGetCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/UpcomingMeetingByGroup>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get upcoming meetings by group
     * Get upcoming meetings for a specified group. This API call is only available to users with the admin role. This API call can be used only for groups with maximum 50 organizers.
     * @param {String} authorization Access token
     * @param {Number} groupKey The key of the group
     * @param {module:api/GroupsApi~groupsGroupKeyUpcomingMeetingsGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/UpcomingMeetingByGroup>}
     */
    groupsGroupKeyUpcomingMeetingsGet(authorization, groupKey, callback) {
      let postBody = null;
      // verify the required parameter 'authorization' is set
      if (authorization === undefined || authorization === null) {
        throw new Error("Missing the required parameter 'authorization' when calling groupsGroupKeyUpcomingMeetingsGet");
      }
      // verify the required parameter 'groupKey' is set
      if (groupKey === undefined || groupKey === null) {
        throw new Error("Missing the required parameter 'groupKey' when calling groupsGroupKeyUpcomingMeetingsGet");
      }

      let pathParams = {
        'groupKey': groupKey
      };
      let queryParams = {
      };
      let headerParams = {
        'Authorization': authorization
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [UpcomingMeetingByGroup];
      return this.apiClient.callApi(
        '/groups/{groupKey}/upcomingMeetings', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
