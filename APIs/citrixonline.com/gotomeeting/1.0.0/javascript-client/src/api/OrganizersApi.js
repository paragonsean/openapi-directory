/**
 * GoToMeeting
 * <br>The GoToMeeting API provides seamless integration of GoToMeeting provisioning and meeting management into your existing infrastructure or third party applications.<br><br>For customers, the ability to add, suspend or delete an organizer in your GoToMeeting Corporate account from within your primary management systems simplifies and streamlines the entire process of account management. The ability to monitor meeting schedules, history and active meeting status allows managers to leverage GoToMeeting activities through your primary applications.<br><br>For third parties, the ability to create, update or delete a meeting from within your application makes real-time collaboration possible for your customers. The ability to update meeting schedules, view history and scheduled meetings, and view attendees from past meetings allows you to enhance your users' experience and the value of your applications.
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: developer-support@citrixonline.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import AttendeeByOrganizer from '../model/AttendeeByOrganizer';
import HistoricalMeeting from '../model/HistoricalMeeting';
import MeetingByOrganizer from '../model/MeetingByOrganizer';
import Organizer from '../model/Organizer';
import OrganizerReq from '../model/OrganizerReq';
import OrganizerShort from '../model/OrganizerShort';
import OrganizerStatus from '../model/OrganizerStatus';
import UpcomingMeeting from '../model/UpcomingMeeting';

/**
* Organizers service.
* @module api/OrganizersApi
* @version 1.0.0
*/
export default class OrganizersApi {

    /**
    * Constructs a new OrganizersApi. 
    * @alias module:api/OrganizersApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the organizersDelete operation.
     * @callback module:api/OrganizersApi~organizersDeleteCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete organizer by email
     * Deletes the individual organizer specified by the email address. This API call is only available to users with the admin role.
     * @param {String} authorization Access token
     * @param {String} email The email address of the organizer
     * @param {module:api/OrganizersApi~organizersDeleteCallback} callback The callback function, accepting three arguments: error, data, response
     */
    organizersDelete(authorization, email, callback) {
      let postBody = null;
      // verify the required parameter 'authorization' is set
      if (authorization === undefined || authorization === null) {
        throw new Error("Missing the required parameter 'authorization' when calling organizersDelete");
      }
      // verify the required parameter 'email' is set
      if (email === undefined || email === null) {
        throw new Error("Missing the required parameter 'email' when calling organizersDelete");
      }

      let pathParams = {
      };
      let queryParams = {
        'email': email
      };
      let headerParams = {
        'Authorization': authorization
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/organizers', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the organizersGet operation.
     * @callback module:api/OrganizersApi~organizersGetCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/Organizer>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get organizer by email / Get all organizers
     * Gets the individual organizer specified by the organizer's email address. If an email address is not specified, all organizers are returned. This API call is only available to users with the admin role.
     * @param {String} authorization Access token
     * @param {Object} opts Optional parameters
     * @param {String} [email] The email address of the organizer
     * @param {module:api/OrganizersApi~organizersGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/Organizer>}
     */
    organizersGet(authorization, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'authorization' is set
      if (authorization === undefined || authorization === null) {
        throw new Error("Missing the required parameter 'authorization' when calling organizersGet");
      }

      let pathParams = {
      };
      let queryParams = {
        'email': opts['email']
      };
      let headerParams = {
        'Authorization': authorization
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [Organizer];
      return this.apiClient.callApi(
        '/organizers', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the organizersOrganizerKeyAttendeesGet operation.
     * @callback module:api/OrganizersApi~organizersOrganizerKeyAttendeesGetCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/AttendeeByOrganizer>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get attendees by organizer
     * Lists all attendees for all meetings within a specified date range for a specified organizer. This API call is only available to users with the admin role.
     * @param {String} authorization Access token
     * @param {Number} organizerKey The key of the organizer
     * @param {Date} startDate A required start of date range in ISO8601 UTC format, e.g. 2015-07-01T22:00:00Z
     * @param {Date} endDate A required end of date range in ISO8601 UTC format, e.g. 2015-07-01T23:00:00Z
     * @param {module:api/OrganizersApi~organizersOrganizerKeyAttendeesGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/AttendeeByOrganizer>}
     */
    organizersOrganizerKeyAttendeesGet(authorization, organizerKey, startDate, endDate, callback) {
      let postBody = null;
      // verify the required parameter 'authorization' is set
      if (authorization === undefined || authorization === null) {
        throw new Error("Missing the required parameter 'authorization' when calling organizersOrganizerKeyAttendeesGet");
      }
      // verify the required parameter 'organizerKey' is set
      if (organizerKey === undefined || organizerKey === null) {
        throw new Error("Missing the required parameter 'organizerKey' when calling organizersOrganizerKeyAttendeesGet");
      }
      // verify the required parameter 'startDate' is set
      if (startDate === undefined || startDate === null) {
        throw new Error("Missing the required parameter 'startDate' when calling organizersOrganizerKeyAttendeesGet");
      }
      // verify the required parameter 'endDate' is set
      if (endDate === undefined || endDate === null) {
        throw new Error("Missing the required parameter 'endDate' when calling organizersOrganizerKeyAttendeesGet");
      }

      let pathParams = {
        'organizerKey': organizerKey
      };
      let queryParams = {
        'startDate': startDate,
        'endDate': endDate
      };
      let headerParams = {
        'Authorization': authorization
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [AttendeeByOrganizer];
      return this.apiClient.callApi(
        '/organizers/{organizerKey}/attendees', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the organizersOrganizerKeyDelete operation.
     * @callback module:api/OrganizersApi~organizersOrganizerKeyDeleteCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete organizer
     * Deletes the individual organizer specified by the organizer key. This API call is only available to users with the admin role.
     * @param {String} authorization Access token
     * @param {Number} organizerKey The key of the organizer
     * @param {module:api/OrganizersApi~organizersOrganizerKeyDeleteCallback} callback The callback function, accepting three arguments: error, data, response
     */
    organizersOrganizerKeyDelete(authorization, organizerKey, callback) {
      let postBody = null;
      // verify the required parameter 'authorization' is set
      if (authorization === undefined || authorization === null) {
        throw new Error("Missing the required parameter 'authorization' when calling organizersOrganizerKeyDelete");
      }
      // verify the required parameter 'organizerKey' is set
      if (organizerKey === undefined || organizerKey === null) {
        throw new Error("Missing the required parameter 'organizerKey' when calling organizersOrganizerKeyDelete");
      }

      let pathParams = {
        'organizerKey': organizerKey
      };
      let queryParams = {
      };
      let headerParams = {
        'Authorization': authorization
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/organizers/{organizerKey}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the organizersOrganizerKeyGet operation.
     * @callback module:api/OrganizersApi~organizersOrganizerKeyGetCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/Organizer>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get organizer
     * Returns the individual organizer specified by the key. This API call is only available to users with the admin role. Non-admin users can only make this call for their own organizerKey.
     * @param {String} authorization Access token
     * @param {Number} organizerKey The key of the organizer
     * @param {module:api/OrganizersApi~organizersOrganizerKeyGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/Organizer>}
     */
    organizersOrganizerKeyGet(authorization, organizerKey, callback) {
      let postBody = null;
      // verify the required parameter 'authorization' is set
      if (authorization === undefined || authorization === null) {
        throw new Error("Missing the required parameter 'authorization' when calling organizersOrganizerKeyGet");
      }
      // verify the required parameter 'organizerKey' is set
      if (organizerKey === undefined || organizerKey === null) {
        throw new Error("Missing the required parameter 'organizerKey' when calling organizersOrganizerKeyGet");
      }

      let pathParams = {
        'organizerKey': organizerKey
      };
      let queryParams = {
      };
      let headerParams = {
        'Authorization': authorization
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [Organizer];
      return this.apiClient.callApi(
        '/organizers/{organizerKey}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the organizersOrganizerKeyHistoricalMeetingsGet operation.
     * @callback module:api/OrganizersApi~organizersOrganizerKeyHistoricalMeetingsGetCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/HistoricalMeeting>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get historical meetings by organizer
     * Get historical meetings for the specified organizer that started within the specified date/time range. Remark: Meetings which are still ongoing at the time of the request are NOT contained in the result array.
     * @param {String} authorization Access token
     * @param {Number} organizerKey The key of the organizer
     * @param {Date} startDate Required start of date range, in ISO8601 UTC format, e.g. 2015-07-01T22:00:00Z
     * @param {Date} endDate Required end of date range, in ISO8601 UTC format, e.g. 2015-07-01T23:00:00Z
     * @param {module:api/OrganizersApi~organizersOrganizerKeyHistoricalMeetingsGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/HistoricalMeeting>}
     */
    organizersOrganizerKeyHistoricalMeetingsGet(authorization, organizerKey, startDate, endDate, callback) {
      let postBody = null;
      // verify the required parameter 'authorization' is set
      if (authorization === undefined || authorization === null) {
        throw new Error("Missing the required parameter 'authorization' when calling organizersOrganizerKeyHistoricalMeetingsGet");
      }
      // verify the required parameter 'organizerKey' is set
      if (organizerKey === undefined || organizerKey === null) {
        throw new Error("Missing the required parameter 'organizerKey' when calling organizersOrganizerKeyHistoricalMeetingsGet");
      }
      // verify the required parameter 'startDate' is set
      if (startDate === undefined || startDate === null) {
        throw new Error("Missing the required parameter 'startDate' when calling organizersOrganizerKeyHistoricalMeetingsGet");
      }
      // verify the required parameter 'endDate' is set
      if (endDate === undefined || endDate === null) {
        throw new Error("Missing the required parameter 'endDate' when calling organizersOrganizerKeyHistoricalMeetingsGet");
      }

      let pathParams = {
        'organizerKey': organizerKey
      };
      let queryParams = {
        'startDate': startDate,
        'endDate': endDate
      };
      let headerParams = {
        'Authorization': authorization
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [HistoricalMeeting];
      return this.apiClient.callApi(
        '/organizers/{organizerKey}/historicalMeetings', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the organizersOrganizerKeyMeetingsGet operation.
     * @callback module:api/OrganizersApi~organizersOrganizerKeyMeetingsGetCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/MeetingByOrganizer>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * DEPRECATED: Get meetings by organizer
     * DEPRECATED: Please use the new API calls 'Get historical meetings by organizer' and 'Get upcoming meetings by organizer'. Gets future (scheduled) or past (history) meetings for a specified organizer. Include 'history=true' and the past start and end dates in the URL to retrieve past meetings. Enter 'scheduled=true' (without dates) to get scheduled meetings.
     * @param {String} authorization Access token
     * @param {Number} organizerKey The key of the organizer
     * @param {Object} opts Optional parameters
     * @param {Boolean} [scheduled] When 'true', returns all future meetings. Date range not supported.
     * @param {Boolean} [history] When 'true', returns all past meetings within date range
     * @param {Date} [startDate] If history is 'true', required start of date range, in ISO8601 UTC format, e.g. 2015-07-01T22:00:00Z
     * @param {Date} [endDate] If history is 'true', required end of date range, in ISO8601 UTC format, e.g. 2015-07-01T23:00:00Z
     * @param {module:api/OrganizersApi~organizersOrganizerKeyMeetingsGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/MeetingByOrganizer>}
     */
    organizersOrganizerKeyMeetingsGet(authorization, organizerKey, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'authorization' is set
      if (authorization === undefined || authorization === null) {
        throw new Error("Missing the required parameter 'authorization' when calling organizersOrganizerKeyMeetingsGet");
      }
      // verify the required parameter 'organizerKey' is set
      if (organizerKey === undefined || organizerKey === null) {
        throw new Error("Missing the required parameter 'organizerKey' when calling organizersOrganizerKeyMeetingsGet");
      }

      let pathParams = {
        'organizerKey': organizerKey
      };
      let queryParams = {
        'scheduled': opts['scheduled'],
        'history': opts['history'],
        'startDate': opts['startDate'],
        'endDate': opts['endDate']
      };
      let headerParams = {
        'Authorization': authorization
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [MeetingByOrganizer];
      return this.apiClient.callApi(
        '/organizers/{organizerKey}/meetings', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the organizersOrganizerKeyPut operation.
     * @callback module:api/OrganizersApi~organizersOrganizerKeyPutCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update organizer
     * Updates the products of the specified organizer. To add a product (G2M, G2W, G2T, OPENVOICE) for the organizer, the call must be sent once for each product you want to add. To remove all products for the organizer, set status to 'suspended'. The call is limited to users with the admin role.
     * @param {String} authorization Access token
     * @param {Number} organizerKey The key of the organizer
     * @param {module:model/OrganizerStatus} body The organizer's status
     * @param {module:api/OrganizersApi~organizersOrganizerKeyPutCallback} callback The callback function, accepting three arguments: error, data, response
     */
    organizersOrganizerKeyPut(authorization, organizerKey, body, callback) {
      let postBody = body;
      // verify the required parameter 'authorization' is set
      if (authorization === undefined || authorization === null) {
        throw new Error("Missing the required parameter 'authorization' when calling organizersOrganizerKeyPut");
      }
      // verify the required parameter 'organizerKey' is set
      if (organizerKey === undefined || organizerKey === null) {
        throw new Error("Missing the required parameter 'organizerKey' when calling organizersOrganizerKeyPut");
      }
      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling organizersOrganizerKeyPut");
      }

      let pathParams = {
        'organizerKey': organizerKey
      };
      let queryParams = {
      };
      let headerParams = {
        'Authorization': authorization
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/organizers/{organizerKey}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the organizersOrganizerKeyUpcomingMeetingsGet operation.
     * @callback module:api/OrganizersApi~organizersOrganizerKeyUpcomingMeetingsGetCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/UpcomingMeeting>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get upcoming meetings by organizer
     * Get upcoming meetings for a specified organizer. This API call is only available to users with the admin role.
     * @param {String} authorization Access token
     * @param {Number} organizerKey The key of the organizer
     * @param {module:api/OrganizersApi~organizersOrganizerKeyUpcomingMeetingsGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/UpcomingMeeting>}
     */
    organizersOrganizerKeyUpcomingMeetingsGet(authorization, organizerKey, callback) {
      let postBody = null;
      // verify the required parameter 'authorization' is set
      if (authorization === undefined || authorization === null) {
        throw new Error("Missing the required parameter 'authorization' when calling organizersOrganizerKeyUpcomingMeetingsGet");
      }
      // verify the required parameter 'organizerKey' is set
      if (organizerKey === undefined || organizerKey === null) {
        throw new Error("Missing the required parameter 'organizerKey' when calling organizersOrganizerKeyUpcomingMeetingsGet");
      }

      let pathParams = {
        'organizerKey': organizerKey
      };
      let queryParams = {
      };
      let headerParams = {
        'Authorization': authorization
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [UpcomingMeeting];
      return this.apiClient.callApi(
        '/organizers/{organizerKey}/upcomingMeetings', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the organizersPost operation.
     * @callback module:api/OrganizersApi~organizersPostCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/OrganizerShort>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Create organizer
     * Creates a new organizer and sends an email to the email address defined in the request. This API call is only available to users with the admin role. You may also pass 'G2W' or 'G2T' or 'OPENVOICE' as productType variables, creating organizers for those products. A G2W or G2T organizer will also have access to G2M.
     * @param {String} authorization Access token
     * @param {module:model/OrganizerReq} body The details of the organizer to be created
     * @param {module:api/OrganizersApi~organizersPostCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/OrganizerShort>}
     */
    organizersPost(authorization, body, callback) {
      let postBody = body;
      // verify the required parameter 'authorization' is set
      if (authorization === undefined || authorization === null) {
        throw new Error("Missing the required parameter 'authorization' when calling organizersPost");
      }
      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling organizersPost");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'Authorization': authorization
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = [OrganizerShort];
      return this.apiClient.callApi(
        '/organizers', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
