/**
 * GoToMeeting
 * <br>The GoToMeeting API provides seamless integration of GoToMeeting provisioning and meeting management into your existing infrastructure or third party applications.<br><br>For customers, the ability to add, suspend or delete an organizer in your GoToMeeting Corporate account from within your primary management systems simplifies and streamlines the entire process of account management. The ability to monitor meeting schedules, history and active meeting status allows managers to leverage GoToMeeting activities through your primary applications.<br><br>For third parties, the ability to create, update or delete a meeting from within your application makes real-time collaboration possible for your customers. The ability to update meeting schedules, view history and scheduled meetings, and view attendees from past meetings allows you to enhance your users' experience and the value of your applications.
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: developer-support@citrixonline.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import AttendeeByMeeting from '../model/AttendeeByMeeting';
import HistoricalMeeting from '../model/HistoricalMeeting';
import MeetingById from '../model/MeetingById';
import MeetingCreated from '../model/MeetingCreated';
import MeetingHistory from '../model/MeetingHistory';
import MeetingReqCreate from '../model/MeetingReqCreate';
import MeetingReqUpdate from '../model/MeetingReqUpdate';
import StartUrl from '../model/StartUrl';
import UpcomingMeeting from '../model/UpcomingMeeting';

/**
* Meetings service.
* @module api/MeetingsApi
* @version 1.0.0
*/
export default class MeetingsApi {

    /**
    * Constructs a new MeetingsApi. 
    * @alias module:api/MeetingsApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the historicalMeetingsGet operation.
     * @callback module:api/MeetingsApi~historicalMeetingsGetCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/HistoricalMeeting>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get historical meetings
     * Get historical meetings for the currently authenticated organizer that started within the specified date/time range. Remark: Meetings which are still ongoing at the time of the request are NOT contained in the result array.
     * @param {String} authorization Access token
     * @param {Date} startDate Required start of date range, in ISO8601 UTC format, e.g. 2015-07-01T22:00:00Z
     * @param {Date} endDate Required end of date range, in ISO8601 UTC format, e.g. 2015-07-01T23:00:00Z
     * @param {module:api/MeetingsApi~historicalMeetingsGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/HistoricalMeeting>}
     */
    historicalMeetingsGet(authorization, startDate, endDate, callback) {
      let postBody = null;
      // verify the required parameter 'authorization' is set
      if (authorization === undefined || authorization === null) {
        throw new Error("Missing the required parameter 'authorization' when calling historicalMeetingsGet");
      }
      // verify the required parameter 'startDate' is set
      if (startDate === undefined || startDate === null) {
        throw new Error("Missing the required parameter 'startDate' when calling historicalMeetingsGet");
      }
      // verify the required parameter 'endDate' is set
      if (endDate === undefined || endDate === null) {
        throw new Error("Missing the required parameter 'endDate' when calling historicalMeetingsGet");
      }

      let pathParams = {
      };
      let queryParams = {
        'startDate': startDate,
        'endDate': endDate
      };
      let headerParams = {
        'Authorization': authorization
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [HistoricalMeeting];
      return this.apiClient.callApi(
        '/historicalMeetings', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the meetingsGet operation.
     * @callback module:api/MeetingsApi~meetingsGetCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/MeetingHistory>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * DEPRECATED: Get historical meetings
     * DEPRECATED: Please use the new API calls 'Get historical meetings' and 'Get upcoming meetings'.  Gets historical meetings for the current authenticated organizer. Requires date range for filtering results to only meetings within specified dates. History searches will contain the parameter 'meetingInstanceKey' which is used in conjunction with the call 'Get Attendees by Meeting' to get attendee information for a past meeting.
     * @param {String} authorization Access token
     * @param {Object} opts Optional parameters
     * @param {Boolean} [history] When 'true', returns all past meetings within date range
     * @param {Date} [startDate] If history=true, required start of date range, in ISO8601 UTC format, e.g. 2015-07-01T22:00:00Z
     * @param {Date} [endDate] If history=true, required end of date range, in ISO8601 UTC format, e.g. 2015-07-01T23:00:00Z
     * @param {module:api/MeetingsApi~meetingsGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/MeetingHistory>}
     */
    meetingsGet(authorization, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'authorization' is set
      if (authorization === undefined || authorization === null) {
        throw new Error("Missing the required parameter 'authorization' when calling meetingsGet");
      }

      let pathParams = {
      };
      let queryParams = {
        'history': opts['history'],
        'startDate': opts['startDate'],
        'endDate': opts['endDate']
      };
      let headerParams = {
        'Authorization': authorization
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [MeetingHistory];
      return this.apiClient.callApi(
        '/meetings', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the meetingsMeetingIdAttendeesGet operation.
     * @callback module:api/MeetingsApi~meetingsMeetingIdAttendeesGetCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/AttendeeByMeeting>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get attendees by meeting
     * List all attendees for specified meetingId of historical meeting. The historical meetings can be fetched using 'Get historical meetings', 'Get historical meetings by organizer', and 'Get historical meetings by group'. For users with the admin role this call returns attendees for any meeting. For any other user the call will return attendees for meetings on which the user is a valid organizer.
     * @param {String} authorization Access token
     * @param {Number} meetingId The meeting ID
     * @param {module:api/MeetingsApi~meetingsMeetingIdAttendeesGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/AttendeeByMeeting>}
     */
    meetingsMeetingIdAttendeesGet(authorization, meetingId, callback) {
      let postBody = null;
      // verify the required parameter 'authorization' is set
      if (authorization === undefined || authorization === null) {
        throw new Error("Missing the required parameter 'authorization' when calling meetingsMeetingIdAttendeesGet");
      }
      // verify the required parameter 'meetingId' is set
      if (meetingId === undefined || meetingId === null) {
        throw new Error("Missing the required parameter 'meetingId' when calling meetingsMeetingIdAttendeesGet");
      }

      let pathParams = {
        'meetingId': meetingId
      };
      let queryParams = {
      };
      let headerParams = {
        'Authorization': authorization
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [AttendeeByMeeting];
      return this.apiClient.callApi(
        '/meetings/{meetingId}/attendees', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the meetingsMeetingIdDelete operation.
     * @callback module:api/MeetingsApi~meetingsMeetingIdDeleteCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete meeting
     * Deletes the meeting identified by the meetingId.
     * @param {String} authorization Access token
     * @param {Number} meetingId The meeting ID
     * @param {module:api/MeetingsApi~meetingsMeetingIdDeleteCallback} callback The callback function, accepting three arguments: error, data, response
     */
    meetingsMeetingIdDelete(authorization, meetingId, callback) {
      let postBody = null;
      // verify the required parameter 'authorization' is set
      if (authorization === undefined || authorization === null) {
        throw new Error("Missing the required parameter 'authorization' when calling meetingsMeetingIdDelete");
      }
      // verify the required parameter 'meetingId' is set
      if (meetingId === undefined || meetingId === null) {
        throw new Error("Missing the required parameter 'meetingId' when calling meetingsMeetingIdDelete");
      }

      let pathParams = {
        'meetingId': meetingId
      };
      let queryParams = {
      };
      let headerParams = {
        'Authorization': authorization
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/meetings/{meetingId}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the meetingsMeetingIdGet operation.
     * @callback module:api/MeetingsApi~meetingsMeetingIdGetCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/MeetingById>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get meeting
     * Returns the meeting details for the specified meeting.
     * @param {String} authorization Access token
     * @param {Number} meetingId The meeting ID
     * @param {module:api/MeetingsApi~meetingsMeetingIdGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/MeetingById>}
     */
    meetingsMeetingIdGet(authorization, meetingId, callback) {
      let postBody = null;
      // verify the required parameter 'authorization' is set
      if (authorization === undefined || authorization === null) {
        throw new Error("Missing the required parameter 'authorization' when calling meetingsMeetingIdGet");
      }
      // verify the required parameter 'meetingId' is set
      if (meetingId === undefined || meetingId === null) {
        throw new Error("Missing the required parameter 'meetingId' when calling meetingsMeetingIdGet");
      }

      let pathParams = {
        'meetingId': meetingId
      };
      let queryParams = {
      };
      let headerParams = {
        'Authorization': authorization
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [MeetingById];
      return this.apiClient.callApi(
        '/meetings/{meetingId}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the meetingsMeetingIdPut operation.
     * @callback module:api/MeetingsApi~meetingsMeetingIdPutCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update meeting
     * Updates an existing meeting specified by meetingId.
     * @param {String} authorization Access token
     * @param {Number} meetingId The meeting ID
     * @param {module:model/MeetingReqUpdate} body The meeting details
     * @param {module:api/MeetingsApi~meetingsMeetingIdPutCallback} callback The callback function, accepting three arguments: error, data, response
     */
    meetingsMeetingIdPut(authorization, meetingId, body, callback) {
      let postBody = body;
      // verify the required parameter 'authorization' is set
      if (authorization === undefined || authorization === null) {
        throw new Error("Missing the required parameter 'authorization' when calling meetingsMeetingIdPut");
      }
      // verify the required parameter 'meetingId' is set
      if (meetingId === undefined || meetingId === null) {
        throw new Error("Missing the required parameter 'meetingId' when calling meetingsMeetingIdPut");
      }
      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling meetingsMeetingIdPut");
      }

      let pathParams = {
        'meetingId': meetingId
      };
      let queryParams = {
      };
      let headerParams = {
        'Authorization': authorization
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/meetings/{meetingId}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the meetingsMeetingIdStartGet operation.
     * @callback module:api/MeetingsApi~meetingsMeetingIdStartGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/StartUrl} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Start meeting
     * Returns a host URL that can be used to start a meeting. When this URL is opened in a web browser, the GoToMeeting client will be downloaded and launched and the meeting will start. The end user is not required to login to a client.
     * @param {String} authorization Access token
     * @param {Number} meetingId The meeting ID
     * @param {module:api/MeetingsApi~meetingsMeetingIdStartGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/StartUrl}
     */
    meetingsMeetingIdStartGet(authorization, meetingId, callback) {
      let postBody = null;
      // verify the required parameter 'authorization' is set
      if (authorization === undefined || authorization === null) {
        throw new Error("Missing the required parameter 'authorization' when calling meetingsMeetingIdStartGet");
      }
      // verify the required parameter 'meetingId' is set
      if (meetingId === undefined || meetingId === null) {
        throw new Error("Missing the required parameter 'meetingId' when calling meetingsMeetingIdStartGet");
      }

      let pathParams = {
        'meetingId': meetingId
      };
      let queryParams = {
      };
      let headerParams = {
        'Authorization': authorization
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = StartUrl;
      return this.apiClient.callApi(
        '/meetings/{meetingId}/start', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the meetingsPost operation.
     * @callback module:api/MeetingsApi~meetingsPostCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/MeetingCreated>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Create meeting
     * Create a new meeting based on the parameters specified.
     * @param {String} authorization Access token
     * @param {module:model/MeetingReqCreate} body The meeting details
     * @param {module:api/MeetingsApi~meetingsPostCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/MeetingCreated>}
     */
    meetingsPost(authorization, body, callback) {
      let postBody = body;
      // verify the required parameter 'authorization' is set
      if (authorization === undefined || authorization === null) {
        throw new Error("Missing the required parameter 'authorization' when calling meetingsPost");
      }
      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling meetingsPost");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'Authorization': authorization
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = [MeetingCreated];
      return this.apiClient.callApi(
        '/meetings', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the upcomingMeetingsGet operation.
     * @callback module:api/MeetingsApi~upcomingMeetingsGetCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/UpcomingMeeting>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get upcoming meetings
     * Gets upcoming meetings for the current authenticated organizer.
     * @param {String} authorization Access token
     * @param {module:api/MeetingsApi~upcomingMeetingsGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/UpcomingMeeting>}
     */
    upcomingMeetingsGet(authorization, callback) {
      let postBody = null;
      // verify the required parameter 'authorization' is set
      if (authorization === undefined || authorization === null) {
        throw new Error("Missing the required parameter 'authorization' when calling upcomingMeetingsGet");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'Authorization': authorization
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [UpcomingMeeting];
      return this.apiClient.callApi(
        '/upcomingMeetings', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
