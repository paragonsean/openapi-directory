/**
 * GoToMeeting
 * <br>The GoToMeeting API provides seamless integration of GoToMeeting provisioning and meeting management into your existing infrastructure or third party applications.<br><br>For customers, the ability to add, suspend or delete an organizer in your GoToMeeting Corporate account from within your primary management systems simplifies and streamlines the entire process of account management. The ability to monitor meeting schedules, history and active meeting status allows managers to leverage GoToMeeting activities through your primary applications.<br><br>For third parties, the ability to create, update or delete a meeting from within your application makes real-time collaboration possible for your customers. The ability to update meeting schedules, view history and scheduled meetings, and view attendees from past meetings allows you to enhance your users' experience and the value of your applications.
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: developer-support@citrixonline.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import MeetingStatus from './MeetingStatus';
import MeetingType from './MeetingType';

/**
 * The UpcomingMeetingByGroup model module.
 * @module model/UpcomingMeetingByGroup
 * @version 1.0.0
 */
class UpcomingMeetingByGroup {
    /**
     * Constructs a new <code>UpcomingMeetingByGroup</code>.
     * Describes an upcoming meeting of a group.
     * @alias module:model/UpcomingMeetingByGroup
     * @param accountKey {String} The key of the company account
     * @param email {String} The meeting organizer's email address
     * @param endTime {Date} The time the meeting instance ended
     * @param firstName {String} The meeting organizer's first name
     * @param groupName {String} The name of the group the meeting belongs to
     * @param lastName {String} The surname of the meeting organizer
     * @param locale {String} The current language setting of the organizer in the web portal
     * @param meetingId {String} The meeting ID
     * @param meetingType {module:model/MeetingType} 
     * @param organizerKey {String} The key of the meeting organizer
     * @param passwordRequired {Boolean} Indicates whether a password is required to join the meeting or not
     * @param startTime {Date} The time the meeting instance will start
     * @param subject {String} The subject of the meeting
     */
    constructor(accountKey, email, endTime, firstName, groupName, lastName, locale, meetingId, meetingType, organizerKey, passwordRequired, startTime, subject) { 
        
        UpcomingMeetingByGroup.initialize(this, accountKey, email, endTime, firstName, groupName, lastName, locale, meetingId, meetingType, organizerKey, passwordRequired, startTime, subject);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, accountKey, email, endTime, firstName, groupName, lastName, locale, meetingId, meetingType, organizerKey, passwordRequired, startTime, subject) { 
        obj['accountKey'] = accountKey;
        obj['email'] = email;
        obj['endTime'] = endTime;
        obj['firstName'] = firstName;
        obj['groupName'] = groupName;
        obj['lastName'] = lastName;
        obj['locale'] = locale;
        obj['meetingId'] = meetingId;
        obj['meetingType'] = meetingType;
        obj['organizerKey'] = organizerKey;
        obj['passwordRequired'] = passwordRequired;
        obj['startTime'] = startTime;
        obj['subject'] = subject;
    }

    /**
     * Constructs a <code>UpcomingMeetingByGroup</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/UpcomingMeetingByGroup} obj Optional instance to populate.
     * @return {module:model/UpcomingMeetingByGroup} The populated <code>UpcomingMeetingByGroup</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new UpcomingMeetingByGroup();

            if (data.hasOwnProperty('accountKey')) {
                obj['accountKey'] = ApiClient.convertToType(data['accountKey'], 'String');
            }
            if (data.hasOwnProperty('email')) {
                obj['email'] = ApiClient.convertToType(data['email'], 'String');
            }
            if (data.hasOwnProperty('endTime')) {
                obj['endTime'] = ApiClient.convertToType(data['endTime'], 'Date');
            }
            if (data.hasOwnProperty('firstName')) {
                obj['firstName'] = ApiClient.convertToType(data['firstName'], 'String');
            }
            if (data.hasOwnProperty('groupName')) {
                obj['groupName'] = ApiClient.convertToType(data['groupName'], 'String');
            }
            if (data.hasOwnProperty('lastName')) {
                obj['lastName'] = ApiClient.convertToType(data['lastName'], 'String');
            }
            if (data.hasOwnProperty('locale')) {
                obj['locale'] = ApiClient.convertToType(data['locale'], 'String');
            }
            if (data.hasOwnProperty('meetingId')) {
                obj['meetingId'] = ApiClient.convertToType(data['meetingId'], 'String');
            }
            if (data.hasOwnProperty('meetingType')) {
                obj['meetingType'] = MeetingType.constructFromObject(data['meetingType']);
            }
            if (data.hasOwnProperty('organizerKey')) {
                obj['organizerKey'] = ApiClient.convertToType(data['organizerKey'], 'String');
            }
            if (data.hasOwnProperty('passwordRequired')) {
                obj['passwordRequired'] = ApiClient.convertToType(data['passwordRequired'], 'Boolean');
            }
            if (data.hasOwnProperty('startTime')) {
                obj['startTime'] = ApiClient.convertToType(data['startTime'], 'Date');
            }
            if (data.hasOwnProperty('status')) {
                obj['status'] = MeetingStatus.constructFromObject(data['status']);
            }
            if (data.hasOwnProperty('subject')) {
                obj['subject'] = ApiClient.convertToType(data['subject'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>UpcomingMeetingByGroup</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>UpcomingMeetingByGroup</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of UpcomingMeetingByGroup.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // ensure the json data is a string
        if (data['accountKey'] && !(typeof data['accountKey'] === 'string' || data['accountKey'] instanceof String)) {
            throw new Error("Expected the field `accountKey` to be a primitive type in the JSON string but got " + data['accountKey']);
        }
        // ensure the json data is a string
        if (data['email'] && !(typeof data['email'] === 'string' || data['email'] instanceof String)) {
            throw new Error("Expected the field `email` to be a primitive type in the JSON string but got " + data['email']);
        }
        // ensure the json data is a string
        if (data['firstName'] && !(typeof data['firstName'] === 'string' || data['firstName'] instanceof String)) {
            throw new Error("Expected the field `firstName` to be a primitive type in the JSON string but got " + data['firstName']);
        }
        // ensure the json data is a string
        if (data['groupName'] && !(typeof data['groupName'] === 'string' || data['groupName'] instanceof String)) {
            throw new Error("Expected the field `groupName` to be a primitive type in the JSON string but got " + data['groupName']);
        }
        // ensure the json data is a string
        if (data['lastName'] && !(typeof data['lastName'] === 'string' || data['lastName'] instanceof String)) {
            throw new Error("Expected the field `lastName` to be a primitive type in the JSON string but got " + data['lastName']);
        }
        // ensure the json data is a string
        if (data['locale'] && !(typeof data['locale'] === 'string' || data['locale'] instanceof String)) {
            throw new Error("Expected the field `locale` to be a primitive type in the JSON string but got " + data['locale']);
        }
        // ensure the json data is a string
        if (data['meetingId'] && !(typeof data['meetingId'] === 'string' || data['meetingId'] instanceof String)) {
            throw new Error("Expected the field `meetingId` to be a primitive type in the JSON string but got " + data['meetingId']);
        }
        // ensure the json data is a string
        if (data['organizerKey'] && !(typeof data['organizerKey'] === 'string' || data['organizerKey'] instanceof String)) {
            throw new Error("Expected the field `organizerKey` to be a primitive type in the JSON string but got " + data['organizerKey']);
        }
        // ensure the json data is a string
        if (data['subject'] && !(typeof data['subject'] === 'string' || data['subject'] instanceof String)) {
            throw new Error("Expected the field `subject` to be a primitive type in the JSON string but got " + data['subject']);
        }

        return true;
    }


}

UpcomingMeetingByGroup.RequiredProperties = ["accountKey", "email", "endTime", "firstName", "groupName", "lastName", "locale", "meetingId", "meetingType", "organizerKey", "passwordRequired", "startTime", "subject"];

/**
 * The key of the company account
 * @member {String} accountKey
 */
UpcomingMeetingByGroup.prototype['accountKey'] = undefined;

/**
 * The meeting organizer's email address
 * @member {String} email
 */
UpcomingMeetingByGroup.prototype['email'] = undefined;

/**
 * The time the meeting instance ended
 * @member {Date} endTime
 */
UpcomingMeetingByGroup.prototype['endTime'] = undefined;

/**
 * The meeting organizer's first name
 * @member {String} firstName
 */
UpcomingMeetingByGroup.prototype['firstName'] = undefined;

/**
 * The name of the group the meeting belongs to
 * @member {String} groupName
 */
UpcomingMeetingByGroup.prototype['groupName'] = undefined;

/**
 * The surname of the meeting organizer
 * @member {String} lastName
 */
UpcomingMeetingByGroup.prototype['lastName'] = undefined;

/**
 * The current language setting of the organizer in the web portal
 * @member {String} locale
 */
UpcomingMeetingByGroup.prototype['locale'] = undefined;

/**
 * The meeting ID
 * @member {String} meetingId
 */
UpcomingMeetingByGroup.prototype['meetingId'] = undefined;

/**
 * @member {module:model/MeetingType} meetingType
 */
UpcomingMeetingByGroup.prototype['meetingType'] = undefined;

/**
 * The key of the meeting organizer
 * @member {String} organizerKey
 */
UpcomingMeetingByGroup.prototype['organizerKey'] = undefined;

/**
 * Indicates whether a password is required to join the meeting or not
 * @member {Boolean} passwordRequired
 */
UpcomingMeetingByGroup.prototype['passwordRequired'] = undefined;

/**
 * The time the meeting instance will start
 * @member {Date} startTime
 */
UpcomingMeetingByGroup.prototype['startTime'] = undefined;

/**
 * @member {module:model/MeetingStatus} status
 */
UpcomingMeetingByGroup.prototype['status'] = undefined;

/**
 * The subject of the meeting
 * @member {String} subject
 */
UpcomingMeetingByGroup.prototype['subject'] = undefined;






export default UpcomingMeetingByGroup;

