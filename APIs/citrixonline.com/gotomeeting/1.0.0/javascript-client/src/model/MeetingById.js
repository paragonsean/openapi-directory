/**
 * GoToMeeting
 * <br>The GoToMeeting API provides seamless integration of GoToMeeting provisioning and meeting management into your existing infrastructure or third party applications.<br><br>For customers, the ability to add, suspend or delete an organizer in your GoToMeeting Corporate account from within your primary management systems simplifies and streamlines the entire process of account management. The ability to monitor meeting schedules, history and active meeting status allows managers to leverage GoToMeeting activities through your primary applications.<br><br>For third parties, the ability to create, update or delete a meeting from within your application makes real-time collaboration possible for your customers. The ability to update meeting schedules, view history and scheduled meetings, and view attendees from past meetings allows you to enhance your users' experience and the value of your applications.
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: developer-support@citrixonline.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import MeetingStatus from './MeetingStatus';
import MeetingType from './MeetingType';

/**
 * The MeetingById model module.
 * @module model/MeetingById
 * @version 1.0.0
 */
class MeetingById {
    /**
     * Constructs a new <code>MeetingById</code>.
     * Describes a given meeting.
     * @alias module:model/MeetingById
     * @param conferenceCallInfo {String} Audio options of the meeting
     * @param createTime {Date} DEPRECATED. Returns an empty string ''
     * @param duration {Number} The duration of the meeting in minutes
     * @param endTime {Date} The ending time of the meeting
     * @param maxParticipants {Number} The maximum number of participants allowed at the meeting
     * @param meetingId {Number} The meeting ID
     * @param meetingKey {Number} The meeting ID. Field retained for backwards compatibility reasons
     * @param meetingType {module:model/MeetingType} 
     * @param passwordRequired {Boolean} Indicates whether a password is required to join the meeting
     * @param startTime {Date} The meeting starting time
     * @param status {module:model/MeetingStatus} 
     * @param subject {String} The subject of the meeting
     * @param uniqueMeetingId {Number} The meeting ID. Field retained for backwards compatibility reasons
     */
    constructor(conferenceCallInfo, createTime, duration, endTime, maxParticipants, meetingId, meetingKey, meetingType, passwordRequired, startTime, status, subject, uniqueMeetingId) { 
        
        MeetingById.initialize(this, conferenceCallInfo, createTime, duration, endTime, maxParticipants, meetingId, meetingKey, meetingType, passwordRequired, startTime, status, subject, uniqueMeetingId);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, conferenceCallInfo, createTime, duration, endTime, maxParticipants, meetingId, meetingKey, meetingType, passwordRequired, startTime, status, subject, uniqueMeetingId) { 
        obj['conferenceCallInfo'] = conferenceCallInfo;
        obj['createTime'] = createTime;
        obj['duration'] = duration;
        obj['endTime'] = endTime;
        obj['maxParticipants'] = maxParticipants;
        obj['meetingId'] = meetingId;
        obj['meetingKey'] = meetingKey;
        obj['meetingType'] = meetingType;
        obj['passwordRequired'] = passwordRequired;
        obj['startTime'] = startTime;
        obj['status'] = status;
        obj['subject'] = subject;
        obj['uniqueMeetingId'] = uniqueMeetingId;
    }

    /**
     * Constructs a <code>MeetingById</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/MeetingById} obj Optional instance to populate.
     * @return {module:model/MeetingById} The populated <code>MeetingById</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new MeetingById();

            if (data.hasOwnProperty('conferenceCallInfo')) {
                obj['conferenceCallInfo'] = ApiClient.convertToType(data['conferenceCallInfo'], 'String');
            }
            if (data.hasOwnProperty('createTime')) {
                obj['createTime'] = ApiClient.convertToType(data['createTime'], 'Date');
            }
            if (data.hasOwnProperty('duration')) {
                obj['duration'] = ApiClient.convertToType(data['duration'], 'Number');
            }
            if (data.hasOwnProperty('endTime')) {
                obj['endTime'] = ApiClient.convertToType(data['endTime'], 'Date');
            }
            if (data.hasOwnProperty('maxParticipants')) {
                obj['maxParticipants'] = ApiClient.convertToType(data['maxParticipants'], 'Number');
            }
            if (data.hasOwnProperty('meetingId')) {
                obj['meetingId'] = ApiClient.convertToType(data['meetingId'], 'Number');
            }
            if (data.hasOwnProperty('meetingKey')) {
                obj['meetingKey'] = ApiClient.convertToType(data['meetingKey'], 'Number');
            }
            if (data.hasOwnProperty('meetingType')) {
                obj['meetingType'] = MeetingType.constructFromObject(data['meetingType']);
            }
            if (data.hasOwnProperty('passwordRequired')) {
                obj['passwordRequired'] = ApiClient.convertToType(data['passwordRequired'], 'Boolean');
            }
            if (data.hasOwnProperty('startTime')) {
                obj['startTime'] = ApiClient.convertToType(data['startTime'], 'Date');
            }
            if (data.hasOwnProperty('status')) {
                obj['status'] = MeetingStatus.constructFromObject(data['status']);
            }
            if (data.hasOwnProperty('subject')) {
                obj['subject'] = ApiClient.convertToType(data['subject'], 'String');
            }
            if (data.hasOwnProperty('uniqueMeetingId')) {
                obj['uniqueMeetingId'] = ApiClient.convertToType(data['uniqueMeetingId'], 'Number');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>MeetingById</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>MeetingById</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of MeetingById.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // ensure the json data is a string
        if (data['conferenceCallInfo'] && !(typeof data['conferenceCallInfo'] === 'string' || data['conferenceCallInfo'] instanceof String)) {
            throw new Error("Expected the field `conferenceCallInfo` to be a primitive type in the JSON string but got " + data['conferenceCallInfo']);
        }
        // ensure the json data is a string
        if (data['subject'] && !(typeof data['subject'] === 'string' || data['subject'] instanceof String)) {
            throw new Error("Expected the field `subject` to be a primitive type in the JSON string but got " + data['subject']);
        }

        return true;
    }


}

MeetingById.RequiredProperties = ["conferenceCallInfo", "createTime", "duration", "endTime", "maxParticipants", "meetingId", "meetingKey", "meetingType", "passwordRequired", "startTime", "status", "subject", "uniqueMeetingId"];

/**
 * Audio options of the meeting
 * @member {String} conferenceCallInfo
 */
MeetingById.prototype['conferenceCallInfo'] = undefined;

/**
 * DEPRECATED. Returns an empty string ''
 * @member {Date} createTime
 */
MeetingById.prototype['createTime'] = undefined;

/**
 * The duration of the meeting in minutes
 * @member {Number} duration
 */
MeetingById.prototype['duration'] = undefined;

/**
 * The ending time of the meeting
 * @member {Date} endTime
 */
MeetingById.prototype['endTime'] = undefined;

/**
 * The maximum number of participants allowed at the meeting
 * @member {Number} maxParticipants
 */
MeetingById.prototype['maxParticipants'] = undefined;

/**
 * The meeting ID
 * @member {Number} meetingId
 */
MeetingById.prototype['meetingId'] = undefined;

/**
 * The meeting ID. Field retained for backwards compatibility reasons
 * @member {Number} meetingKey
 */
MeetingById.prototype['meetingKey'] = undefined;

/**
 * @member {module:model/MeetingType} meetingType
 */
MeetingById.prototype['meetingType'] = undefined;

/**
 * Indicates whether a password is required to join the meeting
 * @member {Boolean} passwordRequired
 */
MeetingById.prototype['passwordRequired'] = undefined;

/**
 * The meeting starting time
 * @member {Date} startTime
 */
MeetingById.prototype['startTime'] = undefined;

/**
 * @member {module:model/MeetingStatus} status
 */
MeetingById.prototype['status'] = undefined;

/**
 * The subject of the meeting
 * @member {String} subject
 */
MeetingById.prototype['subject'] = undefined;

/**
 * The meeting ID. Field retained for backwards compatibility reasons
 * @member {Number} uniqueMeetingId
 */
MeetingById.prototype['uniqueMeetingId'] = undefined;






export default MeetingById;

