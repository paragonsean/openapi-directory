/**
 * GoToMeeting
 * <br>The GoToMeeting API provides seamless integration of GoToMeeting provisioning and meeting management into your existing infrastructure or third party applications.<br><br>For customers, the ability to add, suspend or delete an organizer in your GoToMeeting Corporate account from within your primary management systems simplifies and streamlines the entire process of account management. The ability to monitor meeting schedules, history and active meeting status allows managers to leverage GoToMeeting activities through your primary applications.<br><br>For third parties, the ability to create, update or delete a meeting from within your application makes real-time collaboration possible for your customers. The ability to update meeting schedules, view history and scheduled meetings, and view attendees from past meetings allows you to enhance your users' experience and the value of your applications.
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: developer-support@citrixonline.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import Product from './Product';
import Status from './Status';

/**
 * The OrganizerByGroup model module.
 * @module model/OrganizerByGroup
 * @version 1.0.0
 */
class OrganizerByGroup {
    /**
     * Constructs a new <code>OrganizerByGroup</code>.
     * Describes an organizer within a specified group.
     * @alias module:model/OrganizerByGroup
     * @param email {String} The organizer's email address
     * @param firstName {String} The organizer's first name
     * @param groupId {Number} The key of the group
     * @param groupName {String} The name of the group
     * @param lastName {String} The organizer's surname
     * @param maxNumAttendeesAllowed {Number} The maximum number of attendees allowed at sessions held by this organizer
     * @param organizerKey {Number} The key of the organizer
     * @param products {Array.<module:model/Product>} The products the organizer has access to, can be 'G2M', 'G2W', 'G2T' or 'OPENVOICE'
     * @param status {module:model/Status} 
     */
    constructor(email, firstName, groupId, groupName, lastName, maxNumAttendeesAllowed, organizerKey, products, status) { 
        
        OrganizerByGroup.initialize(this, email, firstName, groupId, groupName, lastName, maxNumAttendeesAllowed, organizerKey, products, status);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, email, firstName, groupId, groupName, lastName, maxNumAttendeesAllowed, organizerKey, products, status) { 
        obj['email'] = email;
        obj['firstName'] = firstName;
        obj['groupId'] = groupId;
        obj['groupName'] = groupName;
        obj['lastName'] = lastName;
        obj['maxNumAttendeesAllowed'] = maxNumAttendeesAllowed;
        obj['organizerKey'] = organizerKey;
        obj['products'] = products;
        obj['status'] = status;
    }

    /**
     * Constructs a <code>OrganizerByGroup</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/OrganizerByGroup} obj Optional instance to populate.
     * @return {module:model/OrganizerByGroup} The populated <code>OrganizerByGroup</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new OrganizerByGroup();

            if (data.hasOwnProperty('email')) {
                obj['email'] = ApiClient.convertToType(data['email'], 'String');
            }
            if (data.hasOwnProperty('firstName')) {
                obj['firstName'] = ApiClient.convertToType(data['firstName'], 'String');
            }
            if (data.hasOwnProperty('groupId')) {
                obj['groupId'] = ApiClient.convertToType(data['groupId'], 'Number');
            }
            if (data.hasOwnProperty('groupName')) {
                obj['groupName'] = ApiClient.convertToType(data['groupName'], 'String');
            }
            if (data.hasOwnProperty('lastName')) {
                obj['lastName'] = ApiClient.convertToType(data['lastName'], 'String');
            }
            if (data.hasOwnProperty('maxNumAttendeesAllowed')) {
                obj['maxNumAttendeesAllowed'] = ApiClient.convertToType(data['maxNumAttendeesAllowed'], 'Number');
            }
            if (data.hasOwnProperty('organizerKey')) {
                obj['organizerKey'] = ApiClient.convertToType(data['organizerKey'], 'Number');
            }
            if (data.hasOwnProperty('products')) {
                obj['products'] = ApiClient.convertToType(data['products'], [Product]);
            }
            if (data.hasOwnProperty('status')) {
                obj['status'] = Status.constructFromObject(data['status']);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>OrganizerByGroup</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>OrganizerByGroup</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of OrganizerByGroup.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // ensure the json data is a string
        if (data['email'] && !(typeof data['email'] === 'string' || data['email'] instanceof String)) {
            throw new Error("Expected the field `email` to be a primitive type in the JSON string but got " + data['email']);
        }
        // ensure the json data is a string
        if (data['firstName'] && !(typeof data['firstName'] === 'string' || data['firstName'] instanceof String)) {
            throw new Error("Expected the field `firstName` to be a primitive type in the JSON string but got " + data['firstName']);
        }
        // ensure the json data is a string
        if (data['groupName'] && !(typeof data['groupName'] === 'string' || data['groupName'] instanceof String)) {
            throw new Error("Expected the field `groupName` to be a primitive type in the JSON string but got " + data['groupName']);
        }
        // ensure the json data is a string
        if (data['lastName'] && !(typeof data['lastName'] === 'string' || data['lastName'] instanceof String)) {
            throw new Error("Expected the field `lastName` to be a primitive type in the JSON string but got " + data['lastName']);
        }
        // ensure the json data is an array
        if (!Array.isArray(data['products'])) {
            throw new Error("Expected the field `products` to be an array in the JSON data but got " + data['products']);
        }

        return true;
    }


}

OrganizerByGroup.RequiredProperties = ["email", "firstName", "groupId", "groupName", "lastName", "maxNumAttendeesAllowed", "organizerKey", "products", "status"];

/**
 * The organizer's email address
 * @member {String} email
 */
OrganizerByGroup.prototype['email'] = undefined;

/**
 * The organizer's first name
 * @member {String} firstName
 */
OrganizerByGroup.prototype['firstName'] = undefined;

/**
 * The key of the group
 * @member {Number} groupId
 */
OrganizerByGroup.prototype['groupId'] = undefined;

/**
 * The name of the group
 * @member {String} groupName
 */
OrganizerByGroup.prototype['groupName'] = undefined;

/**
 * The organizer's surname
 * @member {String} lastName
 */
OrganizerByGroup.prototype['lastName'] = undefined;

/**
 * The maximum number of attendees allowed at sessions held by this organizer
 * @member {Number} maxNumAttendeesAllowed
 */
OrganizerByGroup.prototype['maxNumAttendeesAllowed'] = undefined;

/**
 * The key of the organizer
 * @member {Number} organizerKey
 */
OrganizerByGroup.prototype['organizerKey'] = undefined;

/**
 * The products the organizer has access to, can be 'G2M', 'G2W', 'G2T' or 'OPENVOICE'
 * @member {Array.<module:model/Product>} products
 */
OrganizerByGroup.prototype['products'] = undefined;

/**
 * @member {module:model/Status} status
 */
OrganizerByGroup.prototype['status'] = undefined;






export default OrganizerByGroup;

