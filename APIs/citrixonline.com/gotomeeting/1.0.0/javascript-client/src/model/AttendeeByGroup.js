/**
 * GoToMeeting
 * <br>The GoToMeeting API provides seamless integration of GoToMeeting provisioning and meeting management into your existing infrastructure or third party applications.<br><br>For customers, the ability to add, suspend or delete an organizer in your GoToMeeting Corporate account from within your primary management systems simplifies and streamlines the entire process of account management. The ability to monitor meeting schedules, history and active meeting status allows managers to leverage GoToMeeting activities through your primary applications.<br><br>For third parties, the ability to create, update or delete a meeting from within your application makes real-time collaboration possible for your customers. The ability to update meeting schedules, view history and scheduled meetings, and view attendees from past meetings allows you to enhance your users' experience and the value of your applications.
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: developer-support@citrixonline.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import MeetingType from './MeetingType';

/**
 * The AttendeeByGroup model module.
 * @module model/AttendeeByGroup
 * @version 1.0.0
 */
class AttendeeByGroup {
    /**
     * Constructs a new <code>AttendeeByGroup</code>.
     * Describes an attendee of a meeting instance held by an organizer within a specified group.
     * @alias module:model/AttendeeByGroup
     * @param attendeeEmail {String} The attendee's email address
     * @param attendeeName {String} The full name of the attendee
     * @param conferenceCallInfo {String} Audio options for the attended meeting
     * @param duration {Number} The duration of attendance in minutes
     * @param email {String} The email address of the meeting organizer
     * @param endTime {Date} The time the meeting instance ended
     * @param firstName {String} The first name of the organizer of the attended meeting
     * @param groupName {String} The name of the group
     * @param joinTime {Date} The time the attendee joined the meeting instance
     * @param lastName {String} The surname of the meeting organizer
     * @param leaveTime {Date} The time the attendee left the meeting instance
     * @param meetingId {String} The meeting ID
     * @param meetingInstanceKey {Number} The key of the attended meeting instance
     * @param meetingType {module:model/MeetingType} 
     * @param numAttendees {Number} The number of attendees at the attended meeting instance
     * @param organizerKey {String} The key of the meeting organizer
     * @param organizerkey {Number} The key of the meeting organizer. Field retained for backwards compatibility reasons
     * @param startTime {Date} The time the meeting instance started
     * @param subject {String} The subject of the attended meeting
     */
    constructor(attendeeEmail, attendeeName, conferenceCallInfo, duration, email, endTime, firstName, groupName, joinTime, lastName, leaveTime, meetingId, meetingInstanceKey, meetingType, numAttendees, organizerKey, organizerkey, startTime, subject) { 
        
        AttendeeByGroup.initialize(this, attendeeEmail, attendeeName, conferenceCallInfo, duration, email, endTime, firstName, groupName, joinTime, lastName, leaveTime, meetingId, meetingInstanceKey, meetingType, numAttendees, organizerKey, organizerkey, startTime, subject);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, attendeeEmail, attendeeName, conferenceCallInfo, duration, email, endTime, firstName, groupName, joinTime, lastName, leaveTime, meetingId, meetingInstanceKey, meetingType, numAttendees, organizerKey, organizerkey, startTime, subject) { 
        obj['attendeeEmail'] = attendeeEmail;
        obj['attendeeName'] = attendeeName;
        obj['conferenceCallInfo'] = conferenceCallInfo;
        obj['duration'] = duration;
        obj['email'] = email;
        obj['endTime'] = endTime;
        obj['firstName'] = firstName;
        obj['groupName'] = groupName;
        obj['joinTime'] = joinTime;
        obj['lastName'] = lastName;
        obj['leaveTime'] = leaveTime;
        obj['meetingId'] = meetingId;
        obj['meetingInstanceKey'] = meetingInstanceKey;
        obj['meetingType'] = meetingType;
        obj['numAttendees'] = numAttendees;
        obj['organizerKey'] = organizerKey;
        obj['organizerkey'] = organizerkey;
        obj['startTime'] = startTime;
        obj['subject'] = subject;
    }

    /**
     * Constructs a <code>AttendeeByGroup</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/AttendeeByGroup} obj Optional instance to populate.
     * @return {module:model/AttendeeByGroup} The populated <code>AttendeeByGroup</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new AttendeeByGroup();

            if (data.hasOwnProperty('attendeeEmail')) {
                obj['attendeeEmail'] = ApiClient.convertToType(data['attendeeEmail'], 'String');
            }
            if (data.hasOwnProperty('attendeeName')) {
                obj['attendeeName'] = ApiClient.convertToType(data['attendeeName'], 'String');
            }
            if (data.hasOwnProperty('conferenceCallInfo')) {
                obj['conferenceCallInfo'] = ApiClient.convertToType(data['conferenceCallInfo'], 'String');
            }
            if (data.hasOwnProperty('duration')) {
                obj['duration'] = ApiClient.convertToType(data['duration'], 'Number');
            }
            if (data.hasOwnProperty('email')) {
                obj['email'] = ApiClient.convertToType(data['email'], 'String');
            }
            if (data.hasOwnProperty('endTime')) {
                obj['endTime'] = ApiClient.convertToType(data['endTime'], 'Date');
            }
            if (data.hasOwnProperty('firstName')) {
                obj['firstName'] = ApiClient.convertToType(data['firstName'], 'String');
            }
            if (data.hasOwnProperty('groupName')) {
                obj['groupName'] = ApiClient.convertToType(data['groupName'], 'String');
            }
            if (data.hasOwnProperty('joinTime')) {
                obj['joinTime'] = ApiClient.convertToType(data['joinTime'], 'Date');
            }
            if (data.hasOwnProperty('lastName')) {
                obj['lastName'] = ApiClient.convertToType(data['lastName'], 'String');
            }
            if (data.hasOwnProperty('leaveTime')) {
                obj['leaveTime'] = ApiClient.convertToType(data['leaveTime'], 'Date');
            }
            if (data.hasOwnProperty('meetingId')) {
                obj['meetingId'] = ApiClient.convertToType(data['meetingId'], 'String');
            }
            if (data.hasOwnProperty('meetingInstanceKey')) {
                obj['meetingInstanceKey'] = ApiClient.convertToType(data['meetingInstanceKey'], 'Number');
            }
            if (data.hasOwnProperty('meetingType')) {
                obj['meetingType'] = MeetingType.constructFromObject(data['meetingType']);
            }
            if (data.hasOwnProperty('numAttendees')) {
                obj['numAttendees'] = ApiClient.convertToType(data['numAttendees'], 'Number');
            }
            if (data.hasOwnProperty('organizerKey')) {
                obj['organizerKey'] = ApiClient.convertToType(data['organizerKey'], 'String');
            }
            if (data.hasOwnProperty('organizerkey')) {
                obj['organizerkey'] = ApiClient.convertToType(data['organizerkey'], 'Number');
            }
            if (data.hasOwnProperty('startTime')) {
                obj['startTime'] = ApiClient.convertToType(data['startTime'], 'Date');
            }
            if (data.hasOwnProperty('subject')) {
                obj['subject'] = ApiClient.convertToType(data['subject'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>AttendeeByGroup</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>AttendeeByGroup</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of AttendeeByGroup.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // ensure the json data is a string
        if (data['attendeeEmail'] && !(typeof data['attendeeEmail'] === 'string' || data['attendeeEmail'] instanceof String)) {
            throw new Error("Expected the field `attendeeEmail` to be a primitive type in the JSON string but got " + data['attendeeEmail']);
        }
        // ensure the json data is a string
        if (data['attendeeName'] && !(typeof data['attendeeName'] === 'string' || data['attendeeName'] instanceof String)) {
            throw new Error("Expected the field `attendeeName` to be a primitive type in the JSON string but got " + data['attendeeName']);
        }
        // ensure the json data is a string
        if (data['conferenceCallInfo'] && !(typeof data['conferenceCallInfo'] === 'string' || data['conferenceCallInfo'] instanceof String)) {
            throw new Error("Expected the field `conferenceCallInfo` to be a primitive type in the JSON string but got " + data['conferenceCallInfo']);
        }
        // ensure the json data is a string
        if (data['email'] && !(typeof data['email'] === 'string' || data['email'] instanceof String)) {
            throw new Error("Expected the field `email` to be a primitive type in the JSON string but got " + data['email']);
        }
        // ensure the json data is a string
        if (data['firstName'] && !(typeof data['firstName'] === 'string' || data['firstName'] instanceof String)) {
            throw new Error("Expected the field `firstName` to be a primitive type in the JSON string but got " + data['firstName']);
        }
        // ensure the json data is a string
        if (data['groupName'] && !(typeof data['groupName'] === 'string' || data['groupName'] instanceof String)) {
            throw new Error("Expected the field `groupName` to be a primitive type in the JSON string but got " + data['groupName']);
        }
        // ensure the json data is a string
        if (data['lastName'] && !(typeof data['lastName'] === 'string' || data['lastName'] instanceof String)) {
            throw new Error("Expected the field `lastName` to be a primitive type in the JSON string but got " + data['lastName']);
        }
        // ensure the json data is a string
        if (data['meetingId'] && !(typeof data['meetingId'] === 'string' || data['meetingId'] instanceof String)) {
            throw new Error("Expected the field `meetingId` to be a primitive type in the JSON string but got " + data['meetingId']);
        }
        // ensure the json data is a string
        if (data['organizerKey'] && !(typeof data['organizerKey'] === 'string' || data['organizerKey'] instanceof String)) {
            throw new Error("Expected the field `organizerKey` to be a primitive type in the JSON string but got " + data['organizerKey']);
        }
        // ensure the json data is a string
        if (data['subject'] && !(typeof data['subject'] === 'string' || data['subject'] instanceof String)) {
            throw new Error("Expected the field `subject` to be a primitive type in the JSON string but got " + data['subject']);
        }

        return true;
    }


}

AttendeeByGroup.RequiredProperties = ["attendeeEmail", "attendeeName", "conferenceCallInfo", "duration", "email", "endTime", "firstName", "groupName", "joinTime", "lastName", "leaveTime", "meetingId", "meetingInstanceKey", "meetingType", "numAttendees", "organizerKey", "organizerkey", "startTime", "subject"];

/**
 * The attendee's email address
 * @member {String} attendeeEmail
 */
AttendeeByGroup.prototype['attendeeEmail'] = undefined;

/**
 * The full name of the attendee
 * @member {String} attendeeName
 */
AttendeeByGroup.prototype['attendeeName'] = undefined;

/**
 * Audio options for the attended meeting
 * @member {String} conferenceCallInfo
 */
AttendeeByGroup.prototype['conferenceCallInfo'] = undefined;

/**
 * The duration of attendance in minutes
 * @member {Number} duration
 */
AttendeeByGroup.prototype['duration'] = undefined;

/**
 * The email address of the meeting organizer
 * @member {String} email
 */
AttendeeByGroup.prototype['email'] = undefined;

/**
 * The time the meeting instance ended
 * @member {Date} endTime
 */
AttendeeByGroup.prototype['endTime'] = undefined;

/**
 * The first name of the organizer of the attended meeting
 * @member {String} firstName
 */
AttendeeByGroup.prototype['firstName'] = undefined;

/**
 * The name of the group
 * @member {String} groupName
 */
AttendeeByGroup.prototype['groupName'] = undefined;

/**
 * The time the attendee joined the meeting instance
 * @member {Date} joinTime
 */
AttendeeByGroup.prototype['joinTime'] = undefined;

/**
 * The surname of the meeting organizer
 * @member {String} lastName
 */
AttendeeByGroup.prototype['lastName'] = undefined;

/**
 * The time the attendee left the meeting instance
 * @member {Date} leaveTime
 */
AttendeeByGroup.prototype['leaveTime'] = undefined;

/**
 * The meeting ID
 * @member {String} meetingId
 */
AttendeeByGroup.prototype['meetingId'] = undefined;

/**
 * The key of the attended meeting instance
 * @member {Number} meetingInstanceKey
 */
AttendeeByGroup.prototype['meetingInstanceKey'] = undefined;

/**
 * @member {module:model/MeetingType} meetingType
 */
AttendeeByGroup.prototype['meetingType'] = undefined;

/**
 * The number of attendees at the attended meeting instance
 * @member {Number} numAttendees
 */
AttendeeByGroup.prototype['numAttendees'] = undefined;

/**
 * The key of the meeting organizer
 * @member {String} organizerKey
 */
AttendeeByGroup.prototype['organizerKey'] = undefined;

/**
 * The key of the meeting organizer. Field retained for backwards compatibility reasons
 * @member {Number} organizerkey
 */
AttendeeByGroup.prototype['organizerkey'] = undefined;

/**
 * The time the meeting instance started
 * @member {Date} startTime
 */
AttendeeByGroup.prototype['startTime'] = undefined;

/**
 * The subject of the attended meeting
 * @member {String} subject
 */
AttendeeByGroup.prototype['subject'] = undefined;






export default AttendeeByGroup;

