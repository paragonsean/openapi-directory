/**
 * GoToMeeting
 * <br>The GoToMeeting API provides seamless integration of GoToMeeting provisioning and meeting management into your existing infrastructure or third party applications.<br><br>For customers, the ability to add, suspend or delete an organizer in your GoToMeeting Corporate account from within your primary management systems simplifies and streamlines the entire process of account management. The ability to monitor meeting schedules, history and active meeting status allows managers to leverage GoToMeeting activities through your primary applications.<br><br>For third parties, the ability to create, update or delete a meeting from within your application makes real-time collaboration possible for your customers. The ability to update meeting schedules, view history and scheduled meetings, and view attendees from past meetings allows you to enhance your users' experience and the value of your applications.
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: developer-support@citrixonline.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import MeetingType from './MeetingType';

/**
 * The MeetingHistory model module.
 * @module model/MeetingHistory
 * @version 1.0.0
 */
class MeetingHistory {
    /**
     * Constructs a new <code>MeetingHistory</code>.
     * Describes a unique past meeting instance.
     * @alias module:model/MeetingHistory
     * @param conferenceCallInfo {String} Audio options for the meeting
     * @param date {Date} The time the meeting instance started. Field retained for backwards compatibility reasons
     * @param duration {Number} The duration of the meeting session in minutes
     * @param email {String} The meeting organizer's email address
     * @param endTime {Date} The time the meeting instance ended
     * @param firstName {String} The meeting organizer's first name
     * @param groupName {String} DEPRECATED. An empty string '' is returned
     * @param lastName {String} The surname of the meeting organizer
     * @param meetingId {Number} The meeting ID
     * @param meetingInstanceKey {Number} The key of the unique meeting instance
     * @param meetingKey {Number} The meeting ID. Field retained for backwards compatibility reasons
     * @param meetingType {module:model/MeetingType} 
     * @param newMeetingId {String} Formatted meeting ID
     * @param newOrganizerKey {String} The key of the meeting organizer. Field introduced for compatibility reasons
     * @param numAttendees {Number} The number of attendees at the meeting instance
     * @param organizerKey {String} The key of the meeting organizer
     * @param organizerkey {String} The key of the meeting organizer. Field retained for backwards compatibility reasons
     * @param passwordRequired {Boolean} DEPRECATED. An empty string '' is returned
     * @param sessionId {Number} The ID of the meeting session
     * @param startTime {Date} The time the meeting instance started
     * @param status {String} DEPRECATED. An empty string '' is returned
     * @param subject {String} The subject of the meeting
     * @param uniqueMeetingId {Number} The meeting ID. Field retained for backwards compatibility reasons
     */
    constructor(conferenceCallInfo, date, duration, email, endTime, firstName, groupName, lastName, meetingId, meetingInstanceKey, meetingKey, meetingType, newMeetingId, newOrganizerKey, numAttendees, organizerKey, organizerkey, passwordRequired, sessionId, startTime, status, subject, uniqueMeetingId) { 
        
        MeetingHistory.initialize(this, conferenceCallInfo, date, duration, email, endTime, firstName, groupName, lastName, meetingId, meetingInstanceKey, meetingKey, meetingType, newMeetingId, newOrganizerKey, numAttendees, organizerKey, organizerkey, passwordRequired, sessionId, startTime, status, subject, uniqueMeetingId);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, conferenceCallInfo, date, duration, email, endTime, firstName, groupName, lastName, meetingId, meetingInstanceKey, meetingKey, meetingType, newMeetingId, newOrganizerKey, numAttendees, organizerKey, organizerkey, passwordRequired, sessionId, startTime, status, subject, uniqueMeetingId) { 
        obj['conferenceCallInfo'] = conferenceCallInfo;
        obj['date'] = date;
        obj['duration'] = duration;
        obj['email'] = email;
        obj['endTime'] = endTime;
        obj['firstName'] = firstName;
        obj['groupName'] = groupName;
        obj['lastName'] = lastName;
        obj['meetingId'] = meetingId;
        obj['meetingInstanceKey'] = meetingInstanceKey;
        obj['meetingKey'] = meetingKey;
        obj['meetingType'] = meetingType;
        obj['newMeetingId'] = newMeetingId;
        obj['newOrganizerKey'] = newOrganizerKey;
        obj['numAttendees'] = numAttendees;
        obj['organizerKey'] = organizerKey;
        obj['organizerkey'] = organizerkey;
        obj['passwordRequired'] = passwordRequired;
        obj['sessionId'] = sessionId;
        obj['startTime'] = startTime;
        obj['status'] = status;
        obj['subject'] = subject;
        obj['uniqueMeetingId'] = uniqueMeetingId;
    }

    /**
     * Constructs a <code>MeetingHistory</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/MeetingHistory} obj Optional instance to populate.
     * @return {module:model/MeetingHistory} The populated <code>MeetingHistory</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new MeetingHistory();

            if (data.hasOwnProperty('conferenceCallInfo')) {
                obj['conferenceCallInfo'] = ApiClient.convertToType(data['conferenceCallInfo'], 'String');
            }
            if (data.hasOwnProperty('date')) {
                obj['date'] = ApiClient.convertToType(data['date'], 'Date');
            }
            if (data.hasOwnProperty('duration')) {
                obj['duration'] = ApiClient.convertToType(data['duration'], 'Number');
            }
            if (data.hasOwnProperty('email')) {
                obj['email'] = ApiClient.convertToType(data['email'], 'String');
            }
            if (data.hasOwnProperty('endTime')) {
                obj['endTime'] = ApiClient.convertToType(data['endTime'], 'Date');
            }
            if (data.hasOwnProperty('firstName')) {
                obj['firstName'] = ApiClient.convertToType(data['firstName'], 'String');
            }
            if (data.hasOwnProperty('groupName')) {
                obj['groupName'] = ApiClient.convertToType(data['groupName'], 'String');
            }
            if (data.hasOwnProperty('lastName')) {
                obj['lastName'] = ApiClient.convertToType(data['lastName'], 'String');
            }
            if (data.hasOwnProperty('meetingId')) {
                obj['meetingId'] = ApiClient.convertToType(data['meetingId'], 'Number');
            }
            if (data.hasOwnProperty('meetingInstanceKey')) {
                obj['meetingInstanceKey'] = ApiClient.convertToType(data['meetingInstanceKey'], 'Number');
            }
            if (data.hasOwnProperty('meetingKey')) {
                obj['meetingKey'] = ApiClient.convertToType(data['meetingKey'], 'Number');
            }
            if (data.hasOwnProperty('meetingType')) {
                obj['meetingType'] = MeetingType.constructFromObject(data['meetingType']);
            }
            if (data.hasOwnProperty('newMeetingId')) {
                obj['newMeetingId'] = ApiClient.convertToType(data['newMeetingId'], 'String');
            }
            if (data.hasOwnProperty('newOrganizerKey')) {
                obj['newOrganizerKey'] = ApiClient.convertToType(data['newOrganizerKey'], 'String');
            }
            if (data.hasOwnProperty('numAttendees')) {
                obj['numAttendees'] = ApiClient.convertToType(data['numAttendees'], 'Number');
            }
            if (data.hasOwnProperty('organizerKey')) {
                obj['organizerKey'] = ApiClient.convertToType(data['organizerKey'], 'String');
            }
            if (data.hasOwnProperty('organizerkey')) {
                obj['organizerkey'] = ApiClient.convertToType(data['organizerkey'], 'String');
            }
            if (data.hasOwnProperty('passwordRequired')) {
                obj['passwordRequired'] = ApiClient.convertToType(data['passwordRequired'], 'Boolean');
            }
            if (data.hasOwnProperty('sessionId')) {
                obj['sessionId'] = ApiClient.convertToType(data['sessionId'], 'Number');
            }
            if (data.hasOwnProperty('startTime')) {
                obj['startTime'] = ApiClient.convertToType(data['startTime'], 'Date');
            }
            if (data.hasOwnProperty('status')) {
                obj['status'] = ApiClient.convertToType(data['status'], 'String');
            }
            if (data.hasOwnProperty('subject')) {
                obj['subject'] = ApiClient.convertToType(data['subject'], 'String');
            }
            if (data.hasOwnProperty('uniqueMeetingId')) {
                obj['uniqueMeetingId'] = ApiClient.convertToType(data['uniqueMeetingId'], 'Number');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>MeetingHistory</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>MeetingHistory</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of MeetingHistory.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // ensure the json data is a string
        if (data['conferenceCallInfo'] && !(typeof data['conferenceCallInfo'] === 'string' || data['conferenceCallInfo'] instanceof String)) {
            throw new Error("Expected the field `conferenceCallInfo` to be a primitive type in the JSON string but got " + data['conferenceCallInfo']);
        }
        // ensure the json data is a string
        if (data['email'] && !(typeof data['email'] === 'string' || data['email'] instanceof String)) {
            throw new Error("Expected the field `email` to be a primitive type in the JSON string but got " + data['email']);
        }
        // ensure the json data is a string
        if (data['firstName'] && !(typeof data['firstName'] === 'string' || data['firstName'] instanceof String)) {
            throw new Error("Expected the field `firstName` to be a primitive type in the JSON string but got " + data['firstName']);
        }
        // ensure the json data is a string
        if (data['groupName'] && !(typeof data['groupName'] === 'string' || data['groupName'] instanceof String)) {
            throw new Error("Expected the field `groupName` to be a primitive type in the JSON string but got " + data['groupName']);
        }
        // ensure the json data is a string
        if (data['lastName'] && !(typeof data['lastName'] === 'string' || data['lastName'] instanceof String)) {
            throw new Error("Expected the field `lastName` to be a primitive type in the JSON string but got " + data['lastName']);
        }
        // ensure the json data is a string
        if (data['newMeetingId'] && !(typeof data['newMeetingId'] === 'string' || data['newMeetingId'] instanceof String)) {
            throw new Error("Expected the field `newMeetingId` to be a primitive type in the JSON string but got " + data['newMeetingId']);
        }
        // ensure the json data is a string
        if (data['newOrganizerKey'] && !(typeof data['newOrganizerKey'] === 'string' || data['newOrganizerKey'] instanceof String)) {
            throw new Error("Expected the field `newOrganizerKey` to be a primitive type in the JSON string but got " + data['newOrganizerKey']);
        }
        // ensure the json data is a string
        if (data['organizerKey'] && !(typeof data['organizerKey'] === 'string' || data['organizerKey'] instanceof String)) {
            throw new Error("Expected the field `organizerKey` to be a primitive type in the JSON string but got " + data['organizerKey']);
        }
        // ensure the json data is a string
        if (data['organizerkey'] && !(typeof data['organizerkey'] === 'string' || data['organizerkey'] instanceof String)) {
            throw new Error("Expected the field `organizerkey` to be a primitive type in the JSON string but got " + data['organizerkey']);
        }
        // ensure the json data is a string
        if (data['status'] && !(typeof data['status'] === 'string' || data['status'] instanceof String)) {
            throw new Error("Expected the field `status` to be a primitive type in the JSON string but got " + data['status']);
        }
        // ensure the json data is a string
        if (data['subject'] && !(typeof data['subject'] === 'string' || data['subject'] instanceof String)) {
            throw new Error("Expected the field `subject` to be a primitive type in the JSON string but got " + data['subject']);
        }

        return true;
    }


}

MeetingHistory.RequiredProperties = ["conferenceCallInfo", "date", "duration", "email", "endTime", "firstName", "groupName", "lastName", "meetingId", "meetingInstanceKey", "meetingKey", "meetingType", "newMeetingId", "newOrganizerKey", "numAttendees", "organizerKey", "organizerkey", "passwordRequired", "sessionId", "startTime", "status", "subject", "uniqueMeetingId"];

/**
 * Audio options for the meeting
 * @member {String} conferenceCallInfo
 */
MeetingHistory.prototype['conferenceCallInfo'] = undefined;

/**
 * The time the meeting instance started. Field retained for backwards compatibility reasons
 * @member {Date} date
 */
MeetingHistory.prototype['date'] = undefined;

/**
 * The duration of the meeting session in minutes
 * @member {Number} duration
 */
MeetingHistory.prototype['duration'] = undefined;

/**
 * The meeting organizer's email address
 * @member {String} email
 */
MeetingHistory.prototype['email'] = undefined;

/**
 * The time the meeting instance ended
 * @member {Date} endTime
 */
MeetingHistory.prototype['endTime'] = undefined;

/**
 * The meeting organizer's first name
 * @member {String} firstName
 */
MeetingHistory.prototype['firstName'] = undefined;

/**
 * DEPRECATED. An empty string '' is returned
 * @member {String} groupName
 */
MeetingHistory.prototype['groupName'] = undefined;

/**
 * The surname of the meeting organizer
 * @member {String} lastName
 */
MeetingHistory.prototype['lastName'] = undefined;

/**
 * The meeting ID
 * @member {Number} meetingId
 */
MeetingHistory.prototype['meetingId'] = undefined;

/**
 * The key of the unique meeting instance
 * @member {Number} meetingInstanceKey
 */
MeetingHistory.prototype['meetingInstanceKey'] = undefined;

/**
 * The meeting ID. Field retained for backwards compatibility reasons
 * @member {Number} meetingKey
 */
MeetingHistory.prototype['meetingKey'] = undefined;

/**
 * @member {module:model/MeetingType} meetingType
 */
MeetingHistory.prototype['meetingType'] = undefined;

/**
 * Formatted meeting ID
 * @member {String} newMeetingId
 */
MeetingHistory.prototype['newMeetingId'] = undefined;

/**
 * The key of the meeting organizer. Field introduced for compatibility reasons
 * @member {String} newOrganizerKey
 */
MeetingHistory.prototype['newOrganizerKey'] = undefined;

/**
 * The number of attendees at the meeting instance
 * @member {Number} numAttendees
 */
MeetingHistory.prototype['numAttendees'] = undefined;

/**
 * The key of the meeting organizer
 * @member {String} organizerKey
 */
MeetingHistory.prototype['organizerKey'] = undefined;

/**
 * The key of the meeting organizer. Field retained for backwards compatibility reasons
 * @member {String} organizerkey
 */
MeetingHistory.prototype['organizerkey'] = undefined;

/**
 * DEPRECATED. An empty string '' is returned
 * @member {Boolean} passwordRequired
 */
MeetingHistory.prototype['passwordRequired'] = undefined;

/**
 * The ID of the meeting session
 * @member {Number} sessionId
 */
MeetingHistory.prototype['sessionId'] = undefined;

/**
 * The time the meeting instance started
 * @member {Date} startTime
 */
MeetingHistory.prototype['startTime'] = undefined;

/**
 * DEPRECATED. An empty string '' is returned
 * @member {String} status
 */
MeetingHistory.prototype['status'] = undefined;

/**
 * The subject of the meeting
 * @member {String} subject
 */
MeetingHistory.prototype['subject'] = undefined;

/**
 * The meeting ID. Field retained for backwards compatibility reasons
 * @member {Number} uniqueMeetingId
 */
MeetingHistory.prototype['uniqueMeetingId'] = undefined;






export default MeetingHistory;

