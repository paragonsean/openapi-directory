/**
 * GoToMeeting
 * <br>The GoToMeeting API provides seamless integration of GoToMeeting provisioning and meeting management into your existing infrastructure or third party applications.<br><br>For customers, the ability to add, suspend or delete an organizer in your GoToMeeting Corporate account from within your primary management systems simplifies and streamlines the entire process of account management. The ability to monitor meeting schedules, history and active meeting status allows managers to leverage GoToMeeting activities through your primary applications.<br><br>For third parties, the ability to create, update or delete a meeting from within your application makes real-time collaboration possible for your customers. The ability to update meeting schedules, view history and scheduled meetings, and view attendees from past meetings allows you to enhance your users' experience and the value of your applications.
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: developer-support@citrixonline.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', process.cwd()+'/src/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require(process.cwd()+'/src/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.GoToMeeting);
  }
}(this, function(expect, GoToMeeting) {
  'use strict';

  var instance;

  beforeEach(function() {
    instance = new GoToMeeting.MeetingsApi();
  });

  var getProperty = function(object, getter, property) {
    // Use getter method if present; otherwise, get the property directly.
    if (typeof object[getter] === 'function')
      return object[getter]();
    else
      return object[property];
  }

  var setProperty = function(object, setter, property, value) {
    // Use setter method if present; otherwise, set the property directly.
    if (typeof object[setter] === 'function')
      object[setter](value);
    else
      object[property] = value;
  }

  describe('MeetingsApi', function() {
    describe('historicalMeetingsGet', function() {
      it('should call historicalMeetingsGet successfully', function(done) {
        //uncomment below and update the code to test historicalMeetingsGet
        //instance.historicalMeetingsGet(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('meetingsGet', function() {
      it('should call meetingsGet successfully', function(done) {
        //uncomment below and update the code to test meetingsGet
        //instance.meetingsGet(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('meetingsMeetingIdAttendeesGet', function() {
      it('should call meetingsMeetingIdAttendeesGet successfully', function(done) {
        //uncomment below and update the code to test meetingsMeetingIdAttendeesGet
        //instance.meetingsMeetingIdAttendeesGet(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('meetingsMeetingIdDelete', function() {
      it('should call meetingsMeetingIdDelete successfully', function(done) {
        //uncomment below and update the code to test meetingsMeetingIdDelete
        //instance.meetingsMeetingIdDelete(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('meetingsMeetingIdGet', function() {
      it('should call meetingsMeetingIdGet successfully', function(done) {
        //uncomment below and update the code to test meetingsMeetingIdGet
        //instance.meetingsMeetingIdGet(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('meetingsMeetingIdPut', function() {
      it('should call meetingsMeetingIdPut successfully', function(done) {
        //uncomment below and update the code to test meetingsMeetingIdPut
        //instance.meetingsMeetingIdPut(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('meetingsMeetingIdStartGet', function() {
      it('should call meetingsMeetingIdStartGet successfully', function(done) {
        //uncomment below and update the code to test meetingsMeetingIdStartGet
        //instance.meetingsMeetingIdStartGet(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('meetingsPost', function() {
      it('should call meetingsPost successfully', function(done) {
        //uncomment below and update the code to test meetingsPost
        //instance.meetingsPost(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('upcomingMeetingsGet', function() {
      it('should call upcomingMeetingsGet successfully', function(done) {
        //uncomment below and update the code to test upcomingMeetingsGet
        //instance.upcomingMeetingsGet(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
  });

}));
