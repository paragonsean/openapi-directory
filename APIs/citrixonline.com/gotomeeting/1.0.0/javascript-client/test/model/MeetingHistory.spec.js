/**
 * GoToMeeting
 * <br>The GoToMeeting API provides seamless integration of GoToMeeting provisioning and meeting management into your existing infrastructure or third party applications.<br><br>For customers, the ability to add, suspend or delete an organizer in your GoToMeeting Corporate account from within your primary management systems simplifies and streamlines the entire process of account management. The ability to monitor meeting schedules, history and active meeting status allows managers to leverage GoToMeeting activities through your primary applications.<br><br>For third parties, the ability to create, update or delete a meeting from within your application makes real-time collaboration possible for your customers. The ability to update meeting schedules, view history and scheduled meetings, and view attendees from past meetings allows you to enhance your users' experience and the value of your applications.
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: developer-support@citrixonline.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', process.cwd()+'/src/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require(process.cwd()+'/src/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.GoToMeeting);
  }
}(this, function(expect, GoToMeeting) {
  'use strict';

  var instance;

  beforeEach(function() {
    instance = new GoToMeeting.MeetingHistory();
  });

  var getProperty = function(object, getter, property) {
    // Use getter method if present; otherwise, get the property directly.
    if (typeof object[getter] === 'function')
      return object[getter]();
    else
      return object[property];
  }

  var setProperty = function(object, setter, property, value) {
    // Use setter method if present; otherwise, set the property directly.
    if (typeof object[setter] === 'function')
      object[setter](value);
    else
      object[property] = value;
  }

  describe('MeetingHistory', function() {
    it('should create an instance of MeetingHistory', function() {
      // uncomment below and update the code to test MeetingHistory
      //var instance = new GoToMeeting.MeetingHistory();
      //expect(instance).to.be.a(GoToMeeting.MeetingHistory);
    });

    it('should have the property conferenceCallInfo (base name: "conferenceCallInfo")', function() {
      // uncomment below and update the code to test the property conferenceCallInfo
      //var instance = new GoToMeeting.MeetingHistory();
      //expect(instance).to.be();
    });

    it('should have the property date (base name: "date")', function() {
      // uncomment below and update the code to test the property date
      //var instance = new GoToMeeting.MeetingHistory();
      //expect(instance).to.be();
    });

    it('should have the property duration (base name: "duration")', function() {
      // uncomment below and update the code to test the property duration
      //var instance = new GoToMeeting.MeetingHistory();
      //expect(instance).to.be();
    });

    it('should have the property email (base name: "email")', function() {
      // uncomment below and update the code to test the property email
      //var instance = new GoToMeeting.MeetingHistory();
      //expect(instance).to.be();
    });

    it('should have the property endTime (base name: "endTime")', function() {
      // uncomment below and update the code to test the property endTime
      //var instance = new GoToMeeting.MeetingHistory();
      //expect(instance).to.be();
    });

    it('should have the property firstName (base name: "firstName")', function() {
      // uncomment below and update the code to test the property firstName
      //var instance = new GoToMeeting.MeetingHistory();
      //expect(instance).to.be();
    });

    it('should have the property groupName (base name: "groupName")', function() {
      // uncomment below and update the code to test the property groupName
      //var instance = new GoToMeeting.MeetingHistory();
      //expect(instance).to.be();
    });

    it('should have the property lastName (base name: "lastName")', function() {
      // uncomment below and update the code to test the property lastName
      //var instance = new GoToMeeting.MeetingHistory();
      //expect(instance).to.be();
    });

    it('should have the property meetingId (base name: "meetingId")', function() {
      // uncomment below and update the code to test the property meetingId
      //var instance = new GoToMeeting.MeetingHistory();
      //expect(instance).to.be();
    });

    it('should have the property meetingInstanceKey (base name: "meetingInstanceKey")', function() {
      // uncomment below and update the code to test the property meetingInstanceKey
      //var instance = new GoToMeeting.MeetingHistory();
      //expect(instance).to.be();
    });

    it('should have the property meetingKey (base name: "meetingKey")', function() {
      // uncomment below and update the code to test the property meetingKey
      //var instance = new GoToMeeting.MeetingHistory();
      //expect(instance).to.be();
    });

    it('should have the property meetingType (base name: "meetingType")', function() {
      // uncomment below and update the code to test the property meetingType
      //var instance = new GoToMeeting.MeetingHistory();
      //expect(instance).to.be();
    });

    it('should have the property newMeetingId (base name: "newMeetingId")', function() {
      // uncomment below and update the code to test the property newMeetingId
      //var instance = new GoToMeeting.MeetingHistory();
      //expect(instance).to.be();
    });

    it('should have the property newOrganizerKey (base name: "newOrganizerKey")', function() {
      // uncomment below and update the code to test the property newOrganizerKey
      //var instance = new GoToMeeting.MeetingHistory();
      //expect(instance).to.be();
    });

    it('should have the property numAttendees (base name: "numAttendees")', function() {
      // uncomment below and update the code to test the property numAttendees
      //var instance = new GoToMeeting.MeetingHistory();
      //expect(instance).to.be();
    });

    it('should have the property organizerKey (base name: "organizerKey")', function() {
      // uncomment below and update the code to test the property organizerKey
      //var instance = new GoToMeeting.MeetingHistory();
      //expect(instance).to.be();
    });

    it('should have the property organizerkey (base name: "organizerkey")', function() {
      // uncomment below and update the code to test the property organizerkey
      //var instance = new GoToMeeting.MeetingHistory();
      //expect(instance).to.be();
    });

    it('should have the property passwordRequired (base name: "passwordRequired")', function() {
      // uncomment below and update the code to test the property passwordRequired
      //var instance = new GoToMeeting.MeetingHistory();
      //expect(instance).to.be();
    });

    it('should have the property sessionId (base name: "sessionId")', function() {
      // uncomment below and update the code to test the property sessionId
      //var instance = new GoToMeeting.MeetingHistory();
      //expect(instance).to.be();
    });

    it('should have the property startTime (base name: "startTime")', function() {
      // uncomment below and update the code to test the property startTime
      //var instance = new GoToMeeting.MeetingHistory();
      //expect(instance).to.be();
    });

    it('should have the property status (base name: "status")', function() {
      // uncomment below and update the code to test the property status
      //var instance = new GoToMeeting.MeetingHistory();
      //expect(instance).to.be();
    });

    it('should have the property subject (base name: "subject")', function() {
      // uncomment below and update the code to test the property subject
      //var instance = new GoToMeeting.MeetingHistory();
      //expect(instance).to.be();
    });

    it('should have the property uniqueMeetingId (base name: "uniqueMeetingId")', function() {
      // uncomment below and update the code to test the property uniqueMeetingId
      //var instance = new GoToMeeting.MeetingHistory();
      //expect(instance).to.be();
    });

  });

}));
