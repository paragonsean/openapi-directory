/*
 * GoToMeeting
 * <br>The GoToMeeting API provides seamless integration of GoToMeeting provisioning and meeting management into your existing infrastructure or third party applications.<br><br>For customers, the ability to add, suspend or delete an organizer in your GoToMeeting Corporate account from within your primary management systems simplifies and streamlines the entire process of account management. The ability to monitor meeting schedules, history and active meeting status allows managers to leverage GoToMeeting activities through your primary applications.<br><br>For third parties, the ability to create, update or delete a meeting from within your application makes real-time collaboration possible for your customers. The ability to update meeting schedules, view history and scheduled meetings, and view attendees from past meetings allows you to enhance your users' experience and the value of your applications.
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: developer-support@citrixonline.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiException;
import org.openapitools.client.model.AttendeeByMeeting;
import org.openapitools.client.model.HistoricalMeeting;
import org.openapitools.client.model.MeetingById;
import org.openapitools.client.model.MeetingCreated;
import org.openapitools.client.model.MeetingHistory;
import org.openapitools.client.model.MeetingReqCreate;
import org.openapitools.client.model.MeetingReqUpdate;
import java.time.OffsetDateTime;
import org.openapitools.client.model.StartUrl;
import org.openapitools.client.model.UpcomingMeeting;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for MeetingsApi
 */
@Disabled
public class MeetingsApiTest {

    private final MeetingsApi api = new MeetingsApi();

    /**
     * Get historical meetings
     *
     * Get historical meetings for the currently authenticated organizer that started within the specified date/time range. Remark: Meetings which are still ongoing at the time of the request are NOT contained in the result array.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void historicalMeetingsGetTest() throws ApiException {
        String authorization = null;
        OffsetDateTime startDate = null;
        OffsetDateTime endDate = null;
        List<HistoricalMeeting> response = api.historicalMeetingsGet(authorization, startDate, endDate);
        // TODO: test validations
    }

    /**
     * DEPRECATED: Get historical meetings
     *
     * DEPRECATED: Please use the new API calls &#39;Get historical meetings&#39; and &#39;Get upcoming meetings&#39;.  Gets historical meetings for the current authenticated organizer. Requires date range for filtering results to only meetings within specified dates. History searches will contain the parameter &#39;meetingInstanceKey&#39; which is used in conjunction with the call &#39;Get Attendees by Meeting&#39; to get attendee information for a past meeting.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void meetingsGetTest() throws ApiException {
        String authorization = null;
        Boolean history = null;
        OffsetDateTime startDate = null;
        OffsetDateTime endDate = null;
        List<MeetingHistory> response = api.meetingsGet(authorization, history, startDate, endDate);
        // TODO: test validations
    }

    /**
     * Get attendees by meeting
     *
     * List all attendees for specified meetingId of historical meeting. The historical meetings can be fetched using &#39;Get historical meetings&#39;, &#39;Get historical meetings by organizer&#39;, and &#39;Get historical meetings by group&#39;. For users with the admin role this call returns attendees for any meeting. For any other user the call will return attendees for meetings on which the user is a valid organizer.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void meetingsMeetingIdAttendeesGetTest() throws ApiException {
        String authorization = null;
        Long meetingId = null;
        List<AttendeeByMeeting> response = api.meetingsMeetingIdAttendeesGet(authorization, meetingId);
        // TODO: test validations
    }

    /**
     * Delete meeting
     *
     * Deletes the meeting identified by the meetingId.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void meetingsMeetingIdDeleteTest() throws ApiException {
        String authorization = null;
        Long meetingId = null;
        api.meetingsMeetingIdDelete(authorization, meetingId);
        // TODO: test validations
    }

    /**
     * Get meeting
     *
     * Returns the meeting details for the specified meeting.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void meetingsMeetingIdGetTest() throws ApiException {
        String authorization = null;
        Long meetingId = null;
        List<MeetingById> response = api.meetingsMeetingIdGet(authorization, meetingId);
        // TODO: test validations
    }

    /**
     * Update meeting
     *
     * Updates an existing meeting specified by meetingId.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void meetingsMeetingIdPutTest() throws ApiException {
        String authorization = null;
        Long meetingId = null;
        MeetingReqUpdate body = null;
        api.meetingsMeetingIdPut(authorization, meetingId, body);
        // TODO: test validations
    }

    /**
     * Start meeting
     *
     * Returns a host URL that can be used to start a meeting. When this URL is opened in a web browser, the GoToMeeting client will be downloaded and launched and the meeting will start. The end user is not required to login to a client.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void meetingsMeetingIdStartGetTest() throws ApiException {
        String authorization = null;
        Long meetingId = null;
        StartUrl response = api.meetingsMeetingIdStartGet(authorization, meetingId);
        // TODO: test validations
    }

    /**
     * Create meeting
     *
     * Create a new meeting based on the parameters specified.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void meetingsPostTest() throws ApiException {
        String authorization = null;
        MeetingReqCreate body = null;
        List<MeetingCreated> response = api.meetingsPost(authorization, body);
        // TODO: test validations
    }

    /**
     * Get upcoming meetings
     *
     * Gets upcoming meetings for the current authenticated organizer.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void upcomingMeetingsGetTest() throws ApiException {
        String authorization = null;
        List<UpcomingMeeting> response = api.upcomingMeetingsGet(authorization);
        // TODO: test validations
    }

}
