/*
 * GoToMeeting
 * <br>The GoToMeeting API provides seamless integration of GoToMeeting provisioning and meeting management into your existing infrastructure or third party applications.<br><br>For customers, the ability to add, suspend or delete an organizer in your GoToMeeting Corporate account from within your primary management systems simplifies and streamlines the entire process of account management. The ability to monitor meeting schedules, history and active meeting status allows managers to leverage GoToMeeting activities through your primary applications.<br><br>For third parties, the ability to create, update or delete a meeting from within your application makes real-time collaboration possible for your customers. The ability to update meeting schedules, view history and scheduled meetings, and view attendees from past meetings allows you to enhance your users' experience and the value of your applications.
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: developer-support@citrixonline.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.Product;
import org.openapitools.client.model.Status;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Describes an organizer.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:56:58.282128-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class Organizer {
  public static final String SERIALIZED_NAME_EMAIL = "email";
  @SerializedName(SERIALIZED_NAME_EMAIL)
  private String email;

  public static final String SERIALIZED_NAME_FIRST_NAME = "firstName";
  @SerializedName(SERIALIZED_NAME_FIRST_NAME)
  private String firstName;

  public static final String SERIALIZED_NAME_GROUP_ID = "groupId";
  @SerializedName(SERIALIZED_NAME_GROUP_ID)
  private Long groupId;

  public static final String SERIALIZED_NAME_GROUP_NAME = "groupName";
  @SerializedName(SERIALIZED_NAME_GROUP_NAME)
  private String groupName;

  public static final String SERIALIZED_NAME_LAST_NAME = "lastName";
  @SerializedName(SERIALIZED_NAME_LAST_NAME)
  private String lastName;

  public static final String SERIALIZED_NAME_MAX_NUM_ATTENDEES_ALLOWED = "maxNumAttendeesAllowed";
  @SerializedName(SERIALIZED_NAME_MAX_NUM_ATTENDEES_ALLOWED)
  private Integer maxNumAttendeesAllowed;

  public static final String SERIALIZED_NAME_ORGANIZER_KEY = "organizerKey";
  @SerializedName(SERIALIZED_NAME_ORGANIZER_KEY)
  private Long organizerKey;

  public static final String SERIALIZED_NAME_PRODUCTS = "products";
  @SerializedName(SERIALIZED_NAME_PRODUCTS)
  private List<Product> products = new ArrayList<>();

  public static final String SERIALIZED_NAME_STATUS = "status";
  @SerializedName(SERIALIZED_NAME_STATUS)
  private Status status;

  public Organizer() {
  }

  public Organizer email(String email) {
    this.email = email;
    return this;
  }

  /**
   * The organizer&#39;s email address
   * @return email
   */
  @javax.annotation.Nonnull
  public String getEmail() {
    return email;
  }

  public void setEmail(String email) {
    this.email = email;
  }


  public Organizer firstName(String firstName) {
    this.firstName = firstName;
    return this;
  }

  /**
   * The organizer&#39;s first name
   * @return firstName
   */
  @javax.annotation.Nonnull
  public String getFirstName() {
    return firstName;
  }

  public void setFirstName(String firstName) {
    this.firstName = firstName;
  }


  public Organizer groupId(Long groupId) {
    this.groupId = groupId;
    return this;
  }

  /**
   * The key of the group this organizer is assigned to
   * @return groupId
   */
  @javax.annotation.Nonnull
  public Long getGroupId() {
    return groupId;
  }

  public void setGroupId(Long groupId) {
    this.groupId = groupId;
  }


  public Organizer groupName(String groupName) {
    this.groupName = groupName;
    return this;
  }

  /**
   * The name of the group this organizer is assigned to
   * @return groupName
   */
  @javax.annotation.Nonnull
  public String getGroupName() {
    return groupName;
  }

  public void setGroupName(String groupName) {
    this.groupName = groupName;
  }


  public Organizer lastName(String lastName) {
    this.lastName = lastName;
    return this;
  }

  /**
   * The organizer&#39;s surname
   * @return lastName
   */
  @javax.annotation.Nonnull
  public String getLastName() {
    return lastName;
  }

  public void setLastName(String lastName) {
    this.lastName = lastName;
  }


  public Organizer maxNumAttendeesAllowed(Integer maxNumAttendeesAllowed) {
    this.maxNumAttendeesAllowed = maxNumAttendeesAllowed;
    return this;
  }

  /**
   * The maximum number of attendees allowed at sessions hosted by this organizer.
   * @return maxNumAttendeesAllowed
   */
  @javax.annotation.Nonnull
  public Integer getMaxNumAttendeesAllowed() {
    return maxNumAttendeesAllowed;
  }

  public void setMaxNumAttendeesAllowed(Integer maxNumAttendeesAllowed) {
    this.maxNumAttendeesAllowed = maxNumAttendeesAllowed;
  }


  public Organizer organizerKey(Long organizerKey) {
    this.organizerKey = organizerKey;
    return this;
  }

  /**
   * The key of the organizer
   * @return organizerKey
   */
  @javax.annotation.Nonnull
  public Long getOrganizerKey() {
    return organizerKey;
  }

  public void setOrganizerKey(Long organizerKey) {
    this.organizerKey = organizerKey;
  }


  public Organizer products(List<Product> products) {
    this.products = products;
    return this;
  }

  public Organizer addProductsItem(Product productsItem) {
    if (this.products == null) {
      this.products = new ArrayList<>();
    }
    this.products.add(productsItem);
    return this;
  }

  /**
   * The products the organizer has access to, can be &#39;G2M&#39;, &#39;G2W&#39;, &#39;G2T&#39; or &#39;OPENVOICE&#39;
   * @return products
   */
  @javax.annotation.Nonnull
  public List<Product> getProducts() {
    return products;
  }

  public void setProducts(List<Product> products) {
    this.products = products;
  }


  public Organizer status(Status status) {
    this.status = status;
    return this;
  }

  /**
   * Get status
   * @return status
   */
  @javax.annotation.Nonnull
  public Status getStatus() {
    return status;
  }

  public void setStatus(Status status) {
    this.status = status;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    Organizer organizer = (Organizer) o;
    return Objects.equals(this.email, organizer.email) &&
        Objects.equals(this.firstName, organizer.firstName) &&
        Objects.equals(this.groupId, organizer.groupId) &&
        Objects.equals(this.groupName, organizer.groupName) &&
        Objects.equals(this.lastName, organizer.lastName) &&
        Objects.equals(this.maxNumAttendeesAllowed, organizer.maxNumAttendeesAllowed) &&
        Objects.equals(this.organizerKey, organizer.organizerKey) &&
        Objects.equals(this.products, organizer.products) &&
        Objects.equals(this.status, organizer.status);
  }

  @Override
  public int hashCode() {
    return Objects.hash(email, firstName, groupId, groupName, lastName, maxNumAttendeesAllowed, organizerKey, products, status);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class Organizer {\n");
    sb.append("    email: ").append(toIndentedString(email)).append("\n");
    sb.append("    firstName: ").append(toIndentedString(firstName)).append("\n");
    sb.append("    groupId: ").append(toIndentedString(groupId)).append("\n");
    sb.append("    groupName: ").append(toIndentedString(groupName)).append("\n");
    sb.append("    lastName: ").append(toIndentedString(lastName)).append("\n");
    sb.append("    maxNumAttendeesAllowed: ").append(toIndentedString(maxNumAttendeesAllowed)).append("\n");
    sb.append("    organizerKey: ").append(toIndentedString(organizerKey)).append("\n");
    sb.append("    products: ").append(toIndentedString(products)).append("\n");
    sb.append("    status: ").append(toIndentedString(status)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("email");
    openapiFields.add("firstName");
    openapiFields.add("groupId");
    openapiFields.add("groupName");
    openapiFields.add("lastName");
    openapiFields.add("maxNumAttendeesAllowed");
    openapiFields.add("organizerKey");
    openapiFields.add("products");
    openapiFields.add("status");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("email");
    openapiRequiredFields.add("firstName");
    openapiRequiredFields.add("groupId");
    openapiRequiredFields.add("groupName");
    openapiRequiredFields.add("lastName");
    openapiRequiredFields.add("maxNumAttendeesAllowed");
    openapiRequiredFields.add("organizerKey");
    openapiRequiredFields.add("products");
    openapiRequiredFields.add("status");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to Organizer
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!Organizer.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in Organizer is not found in the empty JSON string", Organizer.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!Organizer.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `Organizer` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : Organizer.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if (!jsonObj.get("email").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `email` to be a primitive type in the JSON string but got `%s`", jsonObj.get("email").toString()));
      }
      if (!jsonObj.get("firstName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `firstName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("firstName").toString()));
      }
      if (!jsonObj.get("groupName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `groupName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("groupName").toString()));
      }
      if (!jsonObj.get("lastName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `lastName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("lastName").toString()));
      }
      // ensure the required json array is present
      if (jsonObj.get("products") == null) {
        throw new IllegalArgumentException("Expected the field `linkedContent` to be an array in the JSON string but got `null`");
      } else if (!jsonObj.get("products").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `products` to be an array in the JSON string but got `%s`", jsonObj.get("products").toString()));
      }
      // validate the required field `status`
      Status.validateJsonElement(jsonObj.get("status"));
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!Organizer.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'Organizer' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<Organizer> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(Organizer.class));

       return (TypeAdapter<T>) new TypeAdapter<Organizer>() {
           @Override
           public void write(JsonWriter out, Organizer value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public Organizer read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of Organizer given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of Organizer
   * @throws IOException if the JSON string is invalid with respect to Organizer
   */
  public static Organizer fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, Organizer.class);
  }

  /**
   * Convert an instance of Organizer to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

