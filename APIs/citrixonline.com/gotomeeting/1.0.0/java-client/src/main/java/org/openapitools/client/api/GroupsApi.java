/*
 * GoToMeeting
 * <br>The GoToMeeting API provides seamless integration of GoToMeeting provisioning and meeting management into your existing infrastructure or third party applications.<br><br>For customers, the ability to add, suspend or delete an organizer in your GoToMeeting Corporate account from within your primary management systems simplifies and streamlines the entire process of account management. The ability to monitor meeting schedules, history and active meeting status allows managers to leverage GoToMeeting activities through your primary applications.<br><br>For third parties, the ability to create, update or delete a meeting from within your application makes real-time collaboration possible for your customers. The ability to update meeting schedules, view history and scheduled meetings, and view attendees from past meetings allows you to enhance your users' experience and the value of your applications.
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: developer-support@citrixonline.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiCallback;
import org.openapitools.client.ApiClient;
import org.openapitools.client.ApiException;
import org.openapitools.client.ApiResponse;
import org.openapitools.client.Configuration;
import org.openapitools.client.Pair;
import org.openapitools.client.ProgressRequestBody;
import org.openapitools.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import org.openapitools.client.model.AttendeeByGroup;
import org.openapitools.client.model.Group;
import org.openapitools.client.model.HistoricalMeetingByGroup;
import org.openapitools.client.model.HistoryMeetingByGroup;
import java.time.OffsetDateTime;
import org.openapitools.client.model.OrganizerByGroup;
import org.openapitools.client.model.OrganizerReq;
import org.openapitools.client.model.OrganizerShort;
import org.openapitools.client.model.UpcomingMeetingByGroup;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class GroupsApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public GroupsApi() {
        this(Configuration.getDefaultApiClient());
    }

    public GroupsApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for groupsGet
     * @param authorization Access token (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call groupsGetCall(String authorization, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/groups";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (authorization != null) {
            localVarHeaderParams.put("Authorization", localVarApiClient.parameterToString(authorization));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call groupsGetValidateBeforeCall(String authorization, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'authorization' is set
        if (authorization == null) {
            throw new ApiException("Missing the required parameter 'authorization' when calling groupsGet(Async)");
        }

        return groupsGetCall(authorization, _callback);

    }

    /**
     * Get groups
     * List all groups for an account. This API call is only available to users with the admin role.
     * @param authorization Access token (required)
     * @return List&lt;Group&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
     </table>
     */
    public List<Group> groupsGet(String authorization) throws ApiException {
        ApiResponse<List<Group>> localVarResp = groupsGetWithHttpInfo(authorization);
        return localVarResp.getData();
    }

    /**
     * Get groups
     * List all groups for an account. This API call is only available to users with the admin role.
     * @param authorization Access token (required)
     * @return ApiResponse&lt;List&lt;Group&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<Group>> groupsGetWithHttpInfo(String authorization) throws ApiException {
        okhttp3.Call localVarCall = groupsGetValidateBeforeCall(authorization, null);
        Type localVarReturnType = new TypeToken<List<Group>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get groups (asynchronously)
     * List all groups for an account. This API call is only available to users with the admin role.
     * @param authorization Access token (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call groupsGetAsync(String authorization, final ApiCallback<List<Group>> _callback) throws ApiException {

        okhttp3.Call localVarCall = groupsGetValidateBeforeCall(authorization, _callback);
        Type localVarReturnType = new TypeToken<List<Group>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for groupsGroupKeyAttendeesGet
     * @param authorization Access token (required)
     * @param groupKey The key of the group (required)
     * @param startDate Start of date range, in ISO8601 UTC format, e.g. 2015-07-01T22:00:00Z (optional)
     * @param endDate End of date range, in ISO8601 UTC format, e.g. 2015-07-01T23:00:00Z (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call groupsGroupKeyAttendeesGetCall(String authorization, Long groupKey, OffsetDateTime startDate, OffsetDateTime endDate, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/groups/{groupKey}/attendees"
            .replace("{" + "groupKey" + "}", localVarApiClient.escapeString(groupKey.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (startDate != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("startDate", startDate));
        }

        if (endDate != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("endDate", endDate));
        }

        if (authorization != null) {
            localVarHeaderParams.put("Authorization", localVarApiClient.parameterToString(authorization));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call groupsGroupKeyAttendeesGetValidateBeforeCall(String authorization, Long groupKey, OffsetDateTime startDate, OffsetDateTime endDate, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'authorization' is set
        if (authorization == null) {
            throw new ApiException("Missing the required parameter 'authorization' when calling groupsGroupKeyAttendeesGet(Async)");
        }

        // verify the required parameter 'groupKey' is set
        if (groupKey == null) {
            throw new ApiException("Missing the required parameter 'groupKey' when calling groupsGroupKeyAttendeesGet(Async)");
        }

        return groupsGroupKeyAttendeesGetCall(authorization, groupKey, startDate, endDate, _callback);

    }

    /**
     * Get attendees by group
     * Returns all attendees for all meetings within specified date range held by organizers within the specified group. This API call is only available to users with the admin role. This API call can be used only for groups with maximum 50 organizers.
     * @param authorization Access token (required)
     * @param groupKey The key of the group (required)
     * @param startDate Start of date range, in ISO8601 UTC format, e.g. 2015-07-01T22:00:00Z (optional)
     * @param endDate End of date range, in ISO8601 UTC format, e.g. 2015-07-01T23:00:00Z (optional)
     * @return List&lt;AttendeeByGroup&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
     </table>
     */
    public List<AttendeeByGroup> groupsGroupKeyAttendeesGet(String authorization, Long groupKey, OffsetDateTime startDate, OffsetDateTime endDate) throws ApiException {
        ApiResponse<List<AttendeeByGroup>> localVarResp = groupsGroupKeyAttendeesGetWithHttpInfo(authorization, groupKey, startDate, endDate);
        return localVarResp.getData();
    }

    /**
     * Get attendees by group
     * Returns all attendees for all meetings within specified date range held by organizers within the specified group. This API call is only available to users with the admin role. This API call can be used only for groups with maximum 50 organizers.
     * @param authorization Access token (required)
     * @param groupKey The key of the group (required)
     * @param startDate Start of date range, in ISO8601 UTC format, e.g. 2015-07-01T22:00:00Z (optional)
     * @param endDate End of date range, in ISO8601 UTC format, e.g. 2015-07-01T23:00:00Z (optional)
     * @return ApiResponse&lt;List&lt;AttendeeByGroup&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<AttendeeByGroup>> groupsGroupKeyAttendeesGetWithHttpInfo(String authorization, Long groupKey, OffsetDateTime startDate, OffsetDateTime endDate) throws ApiException {
        okhttp3.Call localVarCall = groupsGroupKeyAttendeesGetValidateBeforeCall(authorization, groupKey, startDate, endDate, null);
        Type localVarReturnType = new TypeToken<List<AttendeeByGroup>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get attendees by group (asynchronously)
     * Returns all attendees for all meetings within specified date range held by organizers within the specified group. This API call is only available to users with the admin role. This API call can be used only for groups with maximum 50 organizers.
     * @param authorization Access token (required)
     * @param groupKey The key of the group (required)
     * @param startDate Start of date range, in ISO8601 UTC format, e.g. 2015-07-01T22:00:00Z (optional)
     * @param endDate End of date range, in ISO8601 UTC format, e.g. 2015-07-01T23:00:00Z (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call groupsGroupKeyAttendeesGetAsync(String authorization, Long groupKey, OffsetDateTime startDate, OffsetDateTime endDate, final ApiCallback<List<AttendeeByGroup>> _callback) throws ApiException {

        okhttp3.Call localVarCall = groupsGroupKeyAttendeesGetValidateBeforeCall(authorization, groupKey, startDate, endDate, _callback);
        Type localVarReturnType = new TypeToken<List<AttendeeByGroup>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for groupsGroupKeyHistoricalMeetingsGet
     * @param authorization Access token (required)
     * @param groupKey The key of the group (required)
     * @param startDate Required start of date range, in ISO8601 UTC format, e.g. 2015-07-01T22:00:00Z (required)
     * @param endDate Required end of date range, in ISO8601 UTC format, e.g. 2015-07-01T23:00:00Z (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call groupsGroupKeyHistoricalMeetingsGetCall(String authorization, Long groupKey, OffsetDateTime startDate, OffsetDateTime endDate, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/groups/{groupKey}/historicalMeetings"
            .replace("{" + "groupKey" + "}", localVarApiClient.escapeString(groupKey.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (startDate != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("startDate", startDate));
        }

        if (endDate != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("endDate", endDate));
        }

        if (authorization != null) {
            localVarHeaderParams.put("Authorization", localVarApiClient.parameterToString(authorization));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call groupsGroupKeyHistoricalMeetingsGetValidateBeforeCall(String authorization, Long groupKey, OffsetDateTime startDate, OffsetDateTime endDate, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'authorization' is set
        if (authorization == null) {
            throw new ApiException("Missing the required parameter 'authorization' when calling groupsGroupKeyHistoricalMeetingsGet(Async)");
        }

        // verify the required parameter 'groupKey' is set
        if (groupKey == null) {
            throw new ApiException("Missing the required parameter 'groupKey' when calling groupsGroupKeyHistoricalMeetingsGet(Async)");
        }

        // verify the required parameter 'startDate' is set
        if (startDate == null) {
            throw new ApiException("Missing the required parameter 'startDate' when calling groupsGroupKeyHistoricalMeetingsGet(Async)");
        }

        // verify the required parameter 'endDate' is set
        if (endDate == null) {
            throw new ApiException("Missing the required parameter 'endDate' when calling groupsGroupKeyHistoricalMeetingsGet(Async)");
        }

        return groupsGroupKeyHistoricalMeetingsGetCall(authorization, groupKey, startDate, endDate, _callback);

    }

    /**
     * Get historical meetings by group
     * Get historical meetings for the specified group that started within the specified date/time range. This API call is only available to users with the admin role. This API call is restricted to groups with a maximum of 50 organizers. Remark: Meetings which are still ongoing at the time of the request are NOT contained in the result array.
     * @param authorization Access token (required)
     * @param groupKey The key of the group (required)
     * @param startDate Required start of date range, in ISO8601 UTC format, e.g. 2015-07-01T22:00:00Z (required)
     * @param endDate Required end of date range, in ISO8601 UTC format, e.g. 2015-07-01T23:00:00Z (required)
     * @return List&lt;HistoricalMeetingByGroup&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error </td><td>  -  </td></tr>
     </table>
     */
    public List<HistoricalMeetingByGroup> groupsGroupKeyHistoricalMeetingsGet(String authorization, Long groupKey, OffsetDateTime startDate, OffsetDateTime endDate) throws ApiException {
        ApiResponse<List<HistoricalMeetingByGroup>> localVarResp = groupsGroupKeyHistoricalMeetingsGetWithHttpInfo(authorization, groupKey, startDate, endDate);
        return localVarResp.getData();
    }

    /**
     * Get historical meetings by group
     * Get historical meetings for the specified group that started within the specified date/time range. This API call is only available to users with the admin role. This API call is restricted to groups with a maximum of 50 organizers. Remark: Meetings which are still ongoing at the time of the request are NOT contained in the result array.
     * @param authorization Access token (required)
     * @param groupKey The key of the group (required)
     * @param startDate Required start of date range, in ISO8601 UTC format, e.g. 2015-07-01T22:00:00Z (required)
     * @param endDate Required end of date range, in ISO8601 UTC format, e.g. 2015-07-01T23:00:00Z (required)
     * @return ApiResponse&lt;List&lt;HistoricalMeetingByGroup&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<HistoricalMeetingByGroup>> groupsGroupKeyHistoricalMeetingsGetWithHttpInfo(String authorization, Long groupKey, OffsetDateTime startDate, OffsetDateTime endDate) throws ApiException {
        okhttp3.Call localVarCall = groupsGroupKeyHistoricalMeetingsGetValidateBeforeCall(authorization, groupKey, startDate, endDate, null);
        Type localVarReturnType = new TypeToken<List<HistoricalMeetingByGroup>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get historical meetings by group (asynchronously)
     * Get historical meetings for the specified group that started within the specified date/time range. This API call is only available to users with the admin role. This API call is restricted to groups with a maximum of 50 organizers. Remark: Meetings which are still ongoing at the time of the request are NOT contained in the result array.
     * @param authorization Access token (required)
     * @param groupKey The key of the group (required)
     * @param startDate Required start of date range, in ISO8601 UTC format, e.g. 2015-07-01T22:00:00Z (required)
     * @param endDate Required end of date range, in ISO8601 UTC format, e.g. 2015-07-01T23:00:00Z (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call groupsGroupKeyHistoricalMeetingsGetAsync(String authorization, Long groupKey, OffsetDateTime startDate, OffsetDateTime endDate, final ApiCallback<List<HistoricalMeetingByGroup>> _callback) throws ApiException {

        okhttp3.Call localVarCall = groupsGroupKeyHistoricalMeetingsGetValidateBeforeCall(authorization, groupKey, startDate, endDate, _callback);
        Type localVarReturnType = new TypeToken<List<HistoricalMeetingByGroup>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for groupsGroupKeyMeetingsGet
     * @param authorization Access token (required)
     * @param groupKey The key of the group (required)
     * @param history When &#39;true&#39;, returns all past meetings within date range (required)
     * @param startDate If history&#x3D;true, required start of date range, in ISO8601 UTC format, e.g. 2015-07-01T22:00:00Z (required)
     * @param endDate If history&#x3D;true, required end of date range, in ISO8601 UTC format, e.g. 2015-07-01T23:00:00Z (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
     </table>
     * @deprecated
     */
    @Deprecated
    public okhttp3.Call groupsGroupKeyMeetingsGetCall(String authorization, Long groupKey, Boolean history, OffsetDateTime startDate, OffsetDateTime endDate, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/groups/{groupKey}/meetings"
            .replace("{" + "groupKey" + "}", localVarApiClient.escapeString(groupKey.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (history != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("history", history));
        }

        if (startDate != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("startDate", startDate));
        }

        if (endDate != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("endDate", endDate));
        }

        if (authorization != null) {
            localVarHeaderParams.put("Authorization", localVarApiClient.parameterToString(authorization));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @Deprecated
    @SuppressWarnings("rawtypes")
    private okhttp3.Call groupsGroupKeyMeetingsGetValidateBeforeCall(String authorization, Long groupKey, Boolean history, OffsetDateTime startDate, OffsetDateTime endDate, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'authorization' is set
        if (authorization == null) {
            throw new ApiException("Missing the required parameter 'authorization' when calling groupsGroupKeyMeetingsGet(Async)");
        }

        // verify the required parameter 'groupKey' is set
        if (groupKey == null) {
            throw new ApiException("Missing the required parameter 'groupKey' when calling groupsGroupKeyMeetingsGet(Async)");
        }

        // verify the required parameter 'history' is set
        if (history == null) {
            throw new ApiException("Missing the required parameter 'history' when calling groupsGroupKeyMeetingsGet(Async)");
        }

        // verify the required parameter 'startDate' is set
        if (startDate == null) {
            throw new ApiException("Missing the required parameter 'startDate' when calling groupsGroupKeyMeetingsGet(Async)");
        }

        // verify the required parameter 'endDate' is set
        if (endDate == null) {
            throw new ApiException("Missing the required parameter 'endDate' when calling groupsGroupKeyMeetingsGet(Async)");
        }

        return groupsGroupKeyMeetingsGetCall(authorization, groupKey, history, startDate, endDate, _callback);

    }

    /**
     * DEPRECATED: Get historical meetings by group
     * DEPRECATED: Please use the new API calls &#39;Get historical meetings by group&#39; and &#39;Get upcoming meetings by group&#39;. Get meetings for a specified group. Additional filters can be used to view only meetings within a specified date range. This API call is only available to users with the admin role.
     * @param authorization Access token (required)
     * @param groupKey The key of the group (required)
     * @param history When &#39;true&#39;, returns all past meetings within date range (required)
     * @param startDate If history&#x3D;true, required start of date range, in ISO8601 UTC format, e.g. 2015-07-01T22:00:00Z (required)
     * @param endDate If history&#x3D;true, required end of date range, in ISO8601 UTC format, e.g. 2015-07-01T23:00:00Z (required)
     * @return List&lt;HistoryMeetingByGroup&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
     </table>
     * @deprecated
     */
    @Deprecated
    public List<HistoryMeetingByGroup> groupsGroupKeyMeetingsGet(String authorization, Long groupKey, Boolean history, OffsetDateTime startDate, OffsetDateTime endDate) throws ApiException {
        ApiResponse<List<HistoryMeetingByGroup>> localVarResp = groupsGroupKeyMeetingsGetWithHttpInfo(authorization, groupKey, history, startDate, endDate);
        return localVarResp.getData();
    }

    /**
     * DEPRECATED: Get historical meetings by group
     * DEPRECATED: Please use the new API calls &#39;Get historical meetings by group&#39; and &#39;Get upcoming meetings by group&#39;. Get meetings for a specified group. Additional filters can be used to view only meetings within a specified date range. This API call is only available to users with the admin role.
     * @param authorization Access token (required)
     * @param groupKey The key of the group (required)
     * @param history When &#39;true&#39;, returns all past meetings within date range (required)
     * @param startDate If history&#x3D;true, required start of date range, in ISO8601 UTC format, e.g. 2015-07-01T22:00:00Z (required)
     * @param endDate If history&#x3D;true, required end of date range, in ISO8601 UTC format, e.g. 2015-07-01T23:00:00Z (required)
     * @return ApiResponse&lt;List&lt;HistoryMeetingByGroup&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
     </table>
     * @deprecated
     */
    @Deprecated
    public ApiResponse<List<HistoryMeetingByGroup>> groupsGroupKeyMeetingsGetWithHttpInfo(String authorization, Long groupKey, Boolean history, OffsetDateTime startDate, OffsetDateTime endDate) throws ApiException {
        okhttp3.Call localVarCall = groupsGroupKeyMeetingsGetValidateBeforeCall(authorization, groupKey, history, startDate, endDate, null);
        Type localVarReturnType = new TypeToken<List<HistoryMeetingByGroup>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * DEPRECATED: Get historical meetings by group (asynchronously)
     * DEPRECATED: Please use the new API calls &#39;Get historical meetings by group&#39; and &#39;Get upcoming meetings by group&#39;. Get meetings for a specified group. Additional filters can be used to view only meetings within a specified date range. This API call is only available to users with the admin role.
     * @param authorization Access token (required)
     * @param groupKey The key of the group (required)
     * @param history When &#39;true&#39;, returns all past meetings within date range (required)
     * @param startDate If history&#x3D;true, required start of date range, in ISO8601 UTC format, e.g. 2015-07-01T22:00:00Z (required)
     * @param endDate If history&#x3D;true, required end of date range, in ISO8601 UTC format, e.g. 2015-07-01T23:00:00Z (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
     </table>
     * @deprecated
     */
    @Deprecated
    public okhttp3.Call groupsGroupKeyMeetingsGetAsync(String authorization, Long groupKey, Boolean history, OffsetDateTime startDate, OffsetDateTime endDate, final ApiCallback<List<HistoryMeetingByGroup>> _callback) throws ApiException {

        okhttp3.Call localVarCall = groupsGroupKeyMeetingsGetValidateBeforeCall(authorization, groupKey, history, startDate, endDate, _callback);
        Type localVarReturnType = new TypeToken<List<HistoryMeetingByGroup>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for groupsGroupKeyOrganizersGet
     * @param authorization Access token (required)
     * @param groupKey The key of the group (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call groupsGroupKeyOrganizersGetCall(String authorization, Long groupKey, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/groups/{groupKey}/organizers"
            .replace("{" + "groupKey" + "}", localVarApiClient.escapeString(groupKey.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (authorization != null) {
            localVarHeaderParams.put("Authorization", localVarApiClient.parameterToString(authorization));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call groupsGroupKeyOrganizersGetValidateBeforeCall(String authorization, Long groupKey, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'authorization' is set
        if (authorization == null) {
            throw new ApiException("Missing the required parameter 'authorization' when calling groupsGroupKeyOrganizersGet(Async)");
        }

        // verify the required parameter 'groupKey' is set
        if (groupKey == null) {
            throw new ApiException("Missing the required parameter 'groupKey' when calling groupsGroupKeyOrganizersGet(Async)");
        }

        return groupsGroupKeyOrganizersGetCall(authorization, groupKey, _callback);

    }

    /**
     * Get organizers by group
     * Returns all the organizers within a specific group. This API call is only available to users with the admin role.
     * @param authorization Access token (required)
     * @param groupKey The key of the group (required)
     * @return List&lt;OrganizerByGroup&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
     </table>
     */
    public List<OrganizerByGroup> groupsGroupKeyOrganizersGet(String authorization, Long groupKey) throws ApiException {
        ApiResponse<List<OrganizerByGroup>> localVarResp = groupsGroupKeyOrganizersGetWithHttpInfo(authorization, groupKey);
        return localVarResp.getData();
    }

    /**
     * Get organizers by group
     * Returns all the organizers within a specific group. This API call is only available to users with the admin role.
     * @param authorization Access token (required)
     * @param groupKey The key of the group (required)
     * @return ApiResponse&lt;List&lt;OrganizerByGroup&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<OrganizerByGroup>> groupsGroupKeyOrganizersGetWithHttpInfo(String authorization, Long groupKey) throws ApiException {
        okhttp3.Call localVarCall = groupsGroupKeyOrganizersGetValidateBeforeCall(authorization, groupKey, null);
        Type localVarReturnType = new TypeToken<List<OrganizerByGroup>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get organizers by group (asynchronously)
     * Returns all the organizers within a specific group. This API call is only available to users with the admin role.
     * @param authorization Access token (required)
     * @param groupKey The key of the group (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call groupsGroupKeyOrganizersGetAsync(String authorization, Long groupKey, final ApiCallback<List<OrganizerByGroup>> _callback) throws ApiException {

        okhttp3.Call localVarCall = groupsGroupKeyOrganizersGetValidateBeforeCall(authorization, groupKey, _callback);
        Type localVarReturnType = new TypeToken<List<OrganizerByGroup>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for groupsGroupKeyOrganizersPost
     * @param authorization Access token (required)
     * @param groupKey The key of the group (required)
     * @param body The details of the organizer to be created (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Created </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Server Error </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> Conflict </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call groupsGroupKeyOrganizersPostCall(String authorization, Long groupKey, OrganizerReq body, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = body;

        // create path and map variables
        String localVarPath = "/groups/{groupKey}/organizers"
            .replace("{" + "groupKey" + "}", localVarApiClient.escapeString(groupKey.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (authorization != null) {
            localVarHeaderParams.put("Authorization", localVarApiClient.parameterToString(authorization));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call groupsGroupKeyOrganizersPostValidateBeforeCall(String authorization, Long groupKey, OrganizerReq body, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'authorization' is set
        if (authorization == null) {
            throw new ApiException("Missing the required parameter 'authorization' when calling groupsGroupKeyOrganizersPost(Async)");
        }

        // verify the required parameter 'groupKey' is set
        if (groupKey == null) {
            throw new ApiException("Missing the required parameter 'groupKey' when calling groupsGroupKeyOrganizersPost(Async)");
        }

        // verify the required parameter 'body' is set
        if (body == null) {
            throw new ApiException("Missing the required parameter 'body' when calling groupsGroupKeyOrganizersPost(Async)");
        }

        return groupsGroupKeyOrganizersPostCall(authorization, groupKey, body, _callback);

    }

    /**
     * Create organizer in group
     * Creates a new organizer and sends an email to the email address defined in request. This API call is only available to users with the admin role. You may also pass &#39;G2W&#39; or &#39;G2T&#39; or &#39;OPENVOICE&#39; as productType variables, creating organizers for those products. A G2W or G2T organizer will also have access to G2M.
     * @param authorization Access token (required)
     * @param groupKey The key of the group (required)
     * @param body The details of the organizer to be created (required)
     * @return List&lt;OrganizerShort&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Created </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Server Error </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> Conflict </td><td>  -  </td></tr>
     </table>
     */
    public List<OrganizerShort> groupsGroupKeyOrganizersPost(String authorization, Long groupKey, OrganizerReq body) throws ApiException {
        ApiResponse<List<OrganizerShort>> localVarResp = groupsGroupKeyOrganizersPostWithHttpInfo(authorization, groupKey, body);
        return localVarResp.getData();
    }

    /**
     * Create organizer in group
     * Creates a new organizer and sends an email to the email address defined in request. This API call is only available to users with the admin role. You may also pass &#39;G2W&#39; or &#39;G2T&#39; or &#39;OPENVOICE&#39; as productType variables, creating organizers for those products. A G2W or G2T organizer will also have access to G2M.
     * @param authorization Access token (required)
     * @param groupKey The key of the group (required)
     * @param body The details of the organizer to be created (required)
     * @return ApiResponse&lt;List&lt;OrganizerShort&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Created </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Server Error </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> Conflict </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<OrganizerShort>> groupsGroupKeyOrganizersPostWithHttpInfo(String authorization, Long groupKey, OrganizerReq body) throws ApiException {
        okhttp3.Call localVarCall = groupsGroupKeyOrganizersPostValidateBeforeCall(authorization, groupKey, body, null);
        Type localVarReturnType = new TypeToken<List<OrganizerShort>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Create organizer in group (asynchronously)
     * Creates a new organizer and sends an email to the email address defined in request. This API call is only available to users with the admin role. You may also pass &#39;G2W&#39; or &#39;G2T&#39; or &#39;OPENVOICE&#39; as productType variables, creating organizers for those products. A G2W or G2T organizer will also have access to G2M.
     * @param authorization Access token (required)
     * @param groupKey The key of the group (required)
     * @param body The details of the organizer to be created (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Created </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Server Error </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> Conflict </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call groupsGroupKeyOrganizersPostAsync(String authorization, Long groupKey, OrganizerReq body, final ApiCallback<List<OrganizerShort>> _callback) throws ApiException {

        okhttp3.Call localVarCall = groupsGroupKeyOrganizersPostValidateBeforeCall(authorization, groupKey, body, _callback);
        Type localVarReturnType = new TypeToken<List<OrganizerShort>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for groupsGroupKeyUpcomingMeetingsGet
     * @param authorization Access token (required)
     * @param groupKey The key of the group (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call groupsGroupKeyUpcomingMeetingsGetCall(String authorization, Long groupKey, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/groups/{groupKey}/upcomingMeetings"
            .replace("{" + "groupKey" + "}", localVarApiClient.escapeString(groupKey.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (authorization != null) {
            localVarHeaderParams.put("Authorization", localVarApiClient.parameterToString(authorization));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call groupsGroupKeyUpcomingMeetingsGetValidateBeforeCall(String authorization, Long groupKey, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'authorization' is set
        if (authorization == null) {
            throw new ApiException("Missing the required parameter 'authorization' when calling groupsGroupKeyUpcomingMeetingsGet(Async)");
        }

        // verify the required parameter 'groupKey' is set
        if (groupKey == null) {
            throw new ApiException("Missing the required parameter 'groupKey' when calling groupsGroupKeyUpcomingMeetingsGet(Async)");
        }

        return groupsGroupKeyUpcomingMeetingsGetCall(authorization, groupKey, _callback);

    }

    /**
     * Get upcoming meetings by group
     * Get upcoming meetings for a specified group. This API call is only available to users with the admin role. This API call can be used only for groups with maximum 50 organizers.
     * @param authorization Access token (required)
     * @param groupKey The key of the group (required)
     * @return List&lt;UpcomingMeetingByGroup&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error </td><td>  -  </td></tr>
     </table>
     */
    public List<UpcomingMeetingByGroup> groupsGroupKeyUpcomingMeetingsGet(String authorization, Long groupKey) throws ApiException {
        ApiResponse<List<UpcomingMeetingByGroup>> localVarResp = groupsGroupKeyUpcomingMeetingsGetWithHttpInfo(authorization, groupKey);
        return localVarResp.getData();
    }

    /**
     * Get upcoming meetings by group
     * Get upcoming meetings for a specified group. This API call is only available to users with the admin role. This API call can be used only for groups with maximum 50 organizers.
     * @param authorization Access token (required)
     * @param groupKey The key of the group (required)
     * @return ApiResponse&lt;List&lt;UpcomingMeetingByGroup&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<UpcomingMeetingByGroup>> groupsGroupKeyUpcomingMeetingsGetWithHttpInfo(String authorization, Long groupKey) throws ApiException {
        okhttp3.Call localVarCall = groupsGroupKeyUpcomingMeetingsGetValidateBeforeCall(authorization, groupKey, null);
        Type localVarReturnType = new TypeToken<List<UpcomingMeetingByGroup>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get upcoming meetings by group (asynchronously)
     * Get upcoming meetings for a specified group. This API call is only available to users with the admin role. This API call can be used only for groups with maximum 50 organizers.
     * @param authorization Access token (required)
     * @param groupKey The key of the group (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call groupsGroupKeyUpcomingMeetingsGetAsync(String authorization, Long groupKey, final ApiCallback<List<UpcomingMeetingByGroup>> _callback) throws ApiException {

        okhttp3.Call localVarCall = groupsGroupKeyUpcomingMeetingsGetValidateBeforeCall(authorization, groupKey, _callback);
        Type localVarReturnType = new TypeToken<List<UpcomingMeetingByGroup>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
