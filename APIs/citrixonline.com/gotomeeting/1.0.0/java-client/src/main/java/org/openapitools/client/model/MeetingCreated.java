/*
 * GoToMeeting
 * <br>The GoToMeeting API provides seamless integration of GoToMeeting provisioning and meeting management into your existing infrastructure or third party applications.<br><br>For customers, the ability to add, suspend or delete an organizer in your GoToMeeting Corporate account from within your primary management systems simplifies and streamlines the entire process of account management. The ability to monitor meeting schedules, history and active meeting status allows managers to leverage GoToMeeting activities through your primary applications.<br><br>For third parties, the ability to create, update or delete a meeting from within your application makes real-time collaboration possible for your customers. The ability to update meeting schedules, view history and scheduled meetings, and view attendees from past meetings allows you to enhance your users' experience and the value of your applications.
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: developer-support@citrixonline.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Describes a newly created meeting.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:56:58.282128-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class MeetingCreated {
  public static final String SERIALIZED_NAME_CONFERENCE_CALL_INFO = "conferenceCallInfo";
  @SerializedName(SERIALIZED_NAME_CONFERENCE_CALL_INFO)
  private String conferenceCallInfo;

  public static final String SERIALIZED_NAME_JOIN_U_R_L = "joinURL";
  @SerializedName(SERIALIZED_NAME_JOIN_U_R_L)
  private String joinURL;

  public static final String SERIALIZED_NAME_MAX_PARTICIPANTS = "maxParticipants";
  @SerializedName(SERIALIZED_NAME_MAX_PARTICIPANTS)
  private Integer maxParticipants;

  public static final String SERIALIZED_NAME_MEETINGID = "meetingid";
  @SerializedName(SERIALIZED_NAME_MEETINGID)
  private Long meetingid;

  public static final String SERIALIZED_NAME_UNIQUE_MEETING_ID = "uniqueMeetingId";
  @SerializedName(SERIALIZED_NAME_UNIQUE_MEETING_ID)
  private Long uniqueMeetingId;

  public MeetingCreated() {
  }

  public MeetingCreated conferenceCallInfo(String conferenceCallInfo) {
    this.conferenceCallInfo = conferenceCallInfo;
    return this;
  }

  /**
   * Audio options for the meeting
   * @return conferenceCallInfo
   */
  @javax.annotation.Nonnull
  public String getConferenceCallInfo() {
    return conferenceCallInfo;
  }

  public void setConferenceCallInfo(String conferenceCallInfo) {
    this.conferenceCallInfo = conferenceCallInfo;
  }


  public MeetingCreated joinURL(String joinURL) {
    this.joinURL = joinURL;
    return this;
  }

  /**
   * The URL the meeting participants will use to join the meeting
   * @return joinURL
   */
  @javax.annotation.Nonnull
  public String getJoinURL() {
    return joinURL;
  }

  public void setJoinURL(String joinURL) {
    this.joinURL = joinURL;
  }


  public MeetingCreated maxParticipants(Integer maxParticipants) {
    this.maxParticipants = maxParticipants;
    return this;
  }

  /**
   * The maximum number of participants allowed in the meeting
   * @return maxParticipants
   */
  @javax.annotation.Nonnull
  public Integer getMaxParticipants() {
    return maxParticipants;
  }

  public void setMaxParticipants(Integer maxParticipants) {
    this.maxParticipants = maxParticipants;
  }


  public MeetingCreated meetingid(Long meetingid) {
    this.meetingid = meetingid;
    return this;
  }

  /**
   * The meeting ID
   * @return meetingid
   */
  @javax.annotation.Nonnull
  public Long getMeetingid() {
    return meetingid;
  }

  public void setMeetingid(Long meetingid) {
    this.meetingid = meetingid;
  }


  public MeetingCreated uniqueMeetingId(Long uniqueMeetingId) {
    this.uniqueMeetingId = uniqueMeetingId;
    return this;
  }

  /**
   * The meeting ID. Field retained for backwards compatibility reasons
   * @return uniqueMeetingId
   */
  @javax.annotation.Nonnull
  public Long getUniqueMeetingId() {
    return uniqueMeetingId;
  }

  public void setUniqueMeetingId(Long uniqueMeetingId) {
    this.uniqueMeetingId = uniqueMeetingId;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    MeetingCreated meetingCreated = (MeetingCreated) o;
    return Objects.equals(this.conferenceCallInfo, meetingCreated.conferenceCallInfo) &&
        Objects.equals(this.joinURL, meetingCreated.joinURL) &&
        Objects.equals(this.maxParticipants, meetingCreated.maxParticipants) &&
        Objects.equals(this.meetingid, meetingCreated.meetingid) &&
        Objects.equals(this.uniqueMeetingId, meetingCreated.uniqueMeetingId);
  }

  @Override
  public int hashCode() {
    return Objects.hash(conferenceCallInfo, joinURL, maxParticipants, meetingid, uniqueMeetingId);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class MeetingCreated {\n");
    sb.append("    conferenceCallInfo: ").append(toIndentedString(conferenceCallInfo)).append("\n");
    sb.append("    joinURL: ").append(toIndentedString(joinURL)).append("\n");
    sb.append("    maxParticipants: ").append(toIndentedString(maxParticipants)).append("\n");
    sb.append("    meetingid: ").append(toIndentedString(meetingid)).append("\n");
    sb.append("    uniqueMeetingId: ").append(toIndentedString(uniqueMeetingId)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("conferenceCallInfo");
    openapiFields.add("joinURL");
    openapiFields.add("maxParticipants");
    openapiFields.add("meetingid");
    openapiFields.add("uniqueMeetingId");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("conferenceCallInfo");
    openapiRequiredFields.add("joinURL");
    openapiRequiredFields.add("maxParticipants");
    openapiRequiredFields.add("meetingid");
    openapiRequiredFields.add("uniqueMeetingId");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to MeetingCreated
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!MeetingCreated.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in MeetingCreated is not found in the empty JSON string", MeetingCreated.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!MeetingCreated.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `MeetingCreated` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : MeetingCreated.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if (!jsonObj.get("conferenceCallInfo").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `conferenceCallInfo` to be a primitive type in the JSON string but got `%s`", jsonObj.get("conferenceCallInfo").toString()));
      }
      if (!jsonObj.get("joinURL").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `joinURL` to be a primitive type in the JSON string but got `%s`", jsonObj.get("joinURL").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!MeetingCreated.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'MeetingCreated' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<MeetingCreated> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(MeetingCreated.class));

       return (TypeAdapter<T>) new TypeAdapter<MeetingCreated>() {
           @Override
           public void write(JsonWriter out, MeetingCreated value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public MeetingCreated read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of MeetingCreated given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of MeetingCreated
   * @throws IOException if the JSON string is invalid with respect to MeetingCreated
   */
  public static MeetingCreated fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, MeetingCreated.class);
  }

  /**
   * Convert an instance of MeetingCreated to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

