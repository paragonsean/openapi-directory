/*
 * GoToMeeting
 * <br>The GoToMeeting API provides seamless integration of GoToMeeting provisioning and meeting management into your existing infrastructure or third party applications.<br><br>For customers, the ability to add, suspend or delete an organizer in your GoToMeeting Corporate account from within your primary management systems simplifies and streamlines the entire process of account management. The ability to monitor meeting schedules, history and active meeting status allows managers to leverage GoToMeeting activities through your primary applications.<br><br>For third parties, the ability to create, update or delete a meeting from within your application makes real-time collaboration possible for your customers. The ability to update meeting schedules, view history and scheduled meetings, and view attendees from past meetings allows you to enhance your users' experience and the value of your applications.
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: developer-support@citrixonline.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.time.OffsetDateTime;
import java.util.Arrays;
import org.openapitools.client.model.MeetingType;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Describes a historical meeting within specified dates for a specified group.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:56:58.282128-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class HistoricalMeetingByGroup {
  public static final String SERIALIZED_NAME_ACCOUNT_KEY = "accountKey";
  @SerializedName(SERIALIZED_NAME_ACCOUNT_KEY)
  private String accountKey;

  public static final String SERIALIZED_NAME_DURATION = "duration";
  @SerializedName(SERIALIZED_NAME_DURATION)
  private String duration;

  public static final String SERIALIZED_NAME_EMAIL = "email";
  @SerializedName(SERIALIZED_NAME_EMAIL)
  private String email;

  public static final String SERIALIZED_NAME_END_TIME = "endTime";
  @SerializedName(SERIALIZED_NAME_END_TIME)
  private OffsetDateTime endTime;

  public static final String SERIALIZED_NAME_FIRST_NAME = "firstName";
  @SerializedName(SERIALIZED_NAME_FIRST_NAME)
  private String firstName;

  public static final String SERIALIZED_NAME_GROUP_NAME = "groupName";
  @SerializedName(SERIALIZED_NAME_GROUP_NAME)
  private String groupName;

  public static final String SERIALIZED_NAME_LAST_NAME = "lastName";
  @SerializedName(SERIALIZED_NAME_LAST_NAME)
  private String lastName;

  public static final String SERIALIZED_NAME_LOCALE = "locale";
  @SerializedName(SERIALIZED_NAME_LOCALE)
  private String locale;

  public static final String SERIALIZED_NAME_MEETING_ID = "meetingId";
  @SerializedName(SERIALIZED_NAME_MEETING_ID)
  private String meetingId;

  public static final String SERIALIZED_NAME_MEETING_TYPE = "meetingType";
  @SerializedName(SERIALIZED_NAME_MEETING_TYPE)
  private MeetingType meetingType;

  public static final String SERIALIZED_NAME_NUM_ATTENDEES = "numAttendees";
  @SerializedName(SERIALIZED_NAME_NUM_ATTENDEES)
  private String numAttendees;

  public static final String SERIALIZED_NAME_ORGANIZER_KEY = "organizerKey";
  @SerializedName(SERIALIZED_NAME_ORGANIZER_KEY)
  private String organizerKey;

  public static final String SERIALIZED_NAME_START_TIME = "startTime";
  @SerializedName(SERIALIZED_NAME_START_TIME)
  private OffsetDateTime startTime;

  public static final String SERIALIZED_NAME_SUBJECT = "subject";
  @SerializedName(SERIALIZED_NAME_SUBJECT)
  private String subject;

  public HistoricalMeetingByGroup() {
  }

  public HistoricalMeetingByGroup accountKey(String accountKey) {
    this.accountKey = accountKey;
    return this;
  }

  /**
   * The key of the company account
   * @return accountKey
   */
  @javax.annotation.Nonnull
  public String getAccountKey() {
    return accountKey;
  }

  public void setAccountKey(String accountKey) {
    this.accountKey = accountKey;
  }


  public HistoricalMeetingByGroup duration(String duration) {
    this.duration = duration;
    return this;
  }

  /**
   * The duration of the meeting session in minutes
   * @return duration
   */
  @javax.annotation.Nonnull
  public String getDuration() {
    return duration;
  }

  public void setDuration(String duration) {
    this.duration = duration;
  }


  public HistoricalMeetingByGroup email(String email) {
    this.email = email;
    return this;
  }

  /**
   * The meeting organizer&#39;s email address
   * @return email
   */
  @javax.annotation.Nonnull
  public String getEmail() {
    return email;
  }

  public void setEmail(String email) {
    this.email = email;
  }


  public HistoricalMeetingByGroup endTime(OffsetDateTime endTime) {
    this.endTime = endTime;
    return this;
  }

  /**
   * The time the meeting instance ended
   * @return endTime
   */
  @javax.annotation.Nonnull
  public OffsetDateTime getEndTime() {
    return endTime;
  }

  public void setEndTime(OffsetDateTime endTime) {
    this.endTime = endTime;
  }


  public HistoricalMeetingByGroup firstName(String firstName) {
    this.firstName = firstName;
    return this;
  }

  /**
   * The meeting organizer&#39;s first name
   * @return firstName
   */
  @javax.annotation.Nonnull
  public String getFirstName() {
    return firstName;
  }

  public void setFirstName(String firstName) {
    this.firstName = firstName;
  }


  public HistoricalMeetingByGroup groupName(String groupName) {
    this.groupName = groupName;
    return this;
  }

  /**
   * The name of the group
   * @return groupName
   */
  @javax.annotation.Nonnull
  public String getGroupName() {
    return groupName;
  }

  public void setGroupName(String groupName) {
    this.groupName = groupName;
  }


  public HistoricalMeetingByGroup lastName(String lastName) {
    this.lastName = lastName;
    return this;
  }

  /**
   * The surname of the meeting organizer
   * @return lastName
   */
  @javax.annotation.Nonnull
  public String getLastName() {
    return lastName;
  }

  public void setLastName(String lastName) {
    this.lastName = lastName;
  }


  public HistoricalMeetingByGroup locale(String locale) {
    this.locale = locale;
    return this;
  }

  /**
   * The current language setting of the organizer in the web portal
   * @return locale
   */
  @javax.annotation.Nonnull
  public String getLocale() {
    return locale;
  }

  public void setLocale(String locale) {
    this.locale = locale;
  }


  public HistoricalMeetingByGroup meetingId(String meetingId) {
    this.meetingId = meetingId;
    return this;
  }

  /**
   * The meeting ID
   * @return meetingId
   */
  @javax.annotation.Nonnull
  public String getMeetingId() {
    return meetingId;
  }

  public void setMeetingId(String meetingId) {
    this.meetingId = meetingId;
  }


  public HistoricalMeetingByGroup meetingType(MeetingType meetingType) {
    this.meetingType = meetingType;
    return this;
  }

  /**
   * Get meetingType
   * @return meetingType
   */
  @javax.annotation.Nonnull
  public MeetingType getMeetingType() {
    return meetingType;
  }

  public void setMeetingType(MeetingType meetingType) {
    this.meetingType = meetingType;
  }


  public HistoricalMeetingByGroup numAttendees(String numAttendees) {
    this.numAttendees = numAttendees;
    return this;
  }

  /**
   * The number of attendees at the meeting instance
   * @return numAttendees
   */
  @javax.annotation.Nonnull
  public String getNumAttendees() {
    return numAttendees;
  }

  public void setNumAttendees(String numAttendees) {
    this.numAttendees = numAttendees;
  }


  public HistoricalMeetingByGroup organizerKey(String organizerKey) {
    this.organizerKey = organizerKey;
    return this;
  }

  /**
   * The key of the meeting organizer
   * @return organizerKey
   */
  @javax.annotation.Nonnull
  public String getOrganizerKey() {
    return organizerKey;
  }

  public void setOrganizerKey(String organizerKey) {
    this.organizerKey = organizerKey;
  }


  public HistoricalMeetingByGroup startTime(OffsetDateTime startTime) {
    this.startTime = startTime;
    return this;
  }

  /**
   * The time the meeting instance started
   * @return startTime
   */
  @javax.annotation.Nonnull
  public OffsetDateTime getStartTime() {
    return startTime;
  }

  public void setStartTime(OffsetDateTime startTime) {
    this.startTime = startTime;
  }


  public HistoricalMeetingByGroup subject(String subject) {
    this.subject = subject;
    return this;
  }

  /**
   * The subject of the meeting
   * @return subject
   */
  @javax.annotation.Nonnull
  public String getSubject() {
    return subject;
  }

  public void setSubject(String subject) {
    this.subject = subject;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    HistoricalMeetingByGroup historicalMeetingByGroup = (HistoricalMeetingByGroup) o;
    return Objects.equals(this.accountKey, historicalMeetingByGroup.accountKey) &&
        Objects.equals(this.duration, historicalMeetingByGroup.duration) &&
        Objects.equals(this.email, historicalMeetingByGroup.email) &&
        Objects.equals(this.endTime, historicalMeetingByGroup.endTime) &&
        Objects.equals(this.firstName, historicalMeetingByGroup.firstName) &&
        Objects.equals(this.groupName, historicalMeetingByGroup.groupName) &&
        Objects.equals(this.lastName, historicalMeetingByGroup.lastName) &&
        Objects.equals(this.locale, historicalMeetingByGroup.locale) &&
        Objects.equals(this.meetingId, historicalMeetingByGroup.meetingId) &&
        Objects.equals(this.meetingType, historicalMeetingByGroup.meetingType) &&
        Objects.equals(this.numAttendees, historicalMeetingByGroup.numAttendees) &&
        Objects.equals(this.organizerKey, historicalMeetingByGroup.organizerKey) &&
        Objects.equals(this.startTime, historicalMeetingByGroup.startTime) &&
        Objects.equals(this.subject, historicalMeetingByGroup.subject);
  }

  @Override
  public int hashCode() {
    return Objects.hash(accountKey, duration, email, endTime, firstName, groupName, lastName, locale, meetingId, meetingType, numAttendees, organizerKey, startTime, subject);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class HistoricalMeetingByGroup {\n");
    sb.append("    accountKey: ").append(toIndentedString(accountKey)).append("\n");
    sb.append("    duration: ").append(toIndentedString(duration)).append("\n");
    sb.append("    email: ").append(toIndentedString(email)).append("\n");
    sb.append("    endTime: ").append(toIndentedString(endTime)).append("\n");
    sb.append("    firstName: ").append(toIndentedString(firstName)).append("\n");
    sb.append("    groupName: ").append(toIndentedString(groupName)).append("\n");
    sb.append("    lastName: ").append(toIndentedString(lastName)).append("\n");
    sb.append("    locale: ").append(toIndentedString(locale)).append("\n");
    sb.append("    meetingId: ").append(toIndentedString(meetingId)).append("\n");
    sb.append("    meetingType: ").append(toIndentedString(meetingType)).append("\n");
    sb.append("    numAttendees: ").append(toIndentedString(numAttendees)).append("\n");
    sb.append("    organizerKey: ").append(toIndentedString(organizerKey)).append("\n");
    sb.append("    startTime: ").append(toIndentedString(startTime)).append("\n");
    sb.append("    subject: ").append(toIndentedString(subject)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("accountKey");
    openapiFields.add("duration");
    openapiFields.add("email");
    openapiFields.add("endTime");
    openapiFields.add("firstName");
    openapiFields.add("groupName");
    openapiFields.add("lastName");
    openapiFields.add("locale");
    openapiFields.add("meetingId");
    openapiFields.add("meetingType");
    openapiFields.add("numAttendees");
    openapiFields.add("organizerKey");
    openapiFields.add("startTime");
    openapiFields.add("subject");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("accountKey");
    openapiRequiredFields.add("duration");
    openapiRequiredFields.add("email");
    openapiRequiredFields.add("endTime");
    openapiRequiredFields.add("firstName");
    openapiRequiredFields.add("groupName");
    openapiRequiredFields.add("lastName");
    openapiRequiredFields.add("locale");
    openapiRequiredFields.add("meetingId");
    openapiRequiredFields.add("meetingType");
    openapiRequiredFields.add("numAttendees");
    openapiRequiredFields.add("organizerKey");
    openapiRequiredFields.add("startTime");
    openapiRequiredFields.add("subject");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to HistoricalMeetingByGroup
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!HistoricalMeetingByGroup.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in HistoricalMeetingByGroup is not found in the empty JSON string", HistoricalMeetingByGroup.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!HistoricalMeetingByGroup.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `HistoricalMeetingByGroup` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : HistoricalMeetingByGroup.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if (!jsonObj.get("accountKey").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `accountKey` to be a primitive type in the JSON string but got `%s`", jsonObj.get("accountKey").toString()));
      }
      if (!jsonObj.get("duration").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `duration` to be a primitive type in the JSON string but got `%s`", jsonObj.get("duration").toString()));
      }
      if (!jsonObj.get("email").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `email` to be a primitive type in the JSON string but got `%s`", jsonObj.get("email").toString()));
      }
      if (!jsonObj.get("firstName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `firstName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("firstName").toString()));
      }
      if (!jsonObj.get("groupName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `groupName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("groupName").toString()));
      }
      if (!jsonObj.get("lastName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `lastName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("lastName").toString()));
      }
      if (!jsonObj.get("locale").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `locale` to be a primitive type in the JSON string but got `%s`", jsonObj.get("locale").toString()));
      }
      if (!jsonObj.get("meetingId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `meetingId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("meetingId").toString()));
      }
      // validate the required field `meetingType`
      MeetingType.validateJsonElement(jsonObj.get("meetingType"));
      if (!jsonObj.get("numAttendees").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `numAttendees` to be a primitive type in the JSON string but got `%s`", jsonObj.get("numAttendees").toString()));
      }
      if (!jsonObj.get("organizerKey").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `organizerKey` to be a primitive type in the JSON string but got `%s`", jsonObj.get("organizerKey").toString()));
      }
      if (!jsonObj.get("subject").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `subject` to be a primitive type in the JSON string but got `%s`", jsonObj.get("subject").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!HistoricalMeetingByGroup.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'HistoricalMeetingByGroup' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<HistoricalMeetingByGroup> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(HistoricalMeetingByGroup.class));

       return (TypeAdapter<T>) new TypeAdapter<HistoricalMeetingByGroup>() {
           @Override
           public void write(JsonWriter out, HistoricalMeetingByGroup value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public HistoricalMeetingByGroup read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of HistoricalMeetingByGroup given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of HistoricalMeetingByGroup
   * @throws IOException if the JSON string is invalid with respect to HistoricalMeetingByGroup
   */
  public static HistoricalMeetingByGroup fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, HistoricalMeetingByGroup.class);
  }

  /**
   * Convert an instance of HistoricalMeetingByGroup to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

