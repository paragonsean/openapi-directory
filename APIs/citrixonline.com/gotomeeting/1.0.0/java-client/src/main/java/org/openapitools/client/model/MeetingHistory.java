/*
 * GoToMeeting
 * <br>The GoToMeeting API provides seamless integration of GoToMeeting provisioning and meeting management into your existing infrastructure or third party applications.<br><br>For customers, the ability to add, suspend or delete an organizer in your GoToMeeting Corporate account from within your primary management systems simplifies and streamlines the entire process of account management. The ability to monitor meeting schedules, history and active meeting status allows managers to leverage GoToMeeting activities through your primary applications.<br><br>For third parties, the ability to create, update or delete a meeting from within your application makes real-time collaboration possible for your customers. The ability to update meeting schedules, view history and scheduled meetings, and view attendees from past meetings allows you to enhance your users' experience and the value of your applications.
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: developer-support@citrixonline.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.time.OffsetDateTime;
import java.util.Arrays;
import org.openapitools.client.model.MeetingType;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Describes a unique past meeting instance.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:56:58.282128-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class MeetingHistory {
  public static final String SERIALIZED_NAME_CONFERENCE_CALL_INFO = "conferenceCallInfo";
  @SerializedName(SERIALIZED_NAME_CONFERENCE_CALL_INFO)
  private String conferenceCallInfo;

  public static final String SERIALIZED_NAME_DATE = "date";
  @SerializedName(SERIALIZED_NAME_DATE)
  private OffsetDateTime date;

  public static final String SERIALIZED_NAME_DURATION = "duration";
  @SerializedName(SERIALIZED_NAME_DURATION)
  private Integer duration;

  public static final String SERIALIZED_NAME_EMAIL = "email";
  @SerializedName(SERIALIZED_NAME_EMAIL)
  private String email;

  public static final String SERIALIZED_NAME_END_TIME = "endTime";
  @SerializedName(SERIALIZED_NAME_END_TIME)
  private OffsetDateTime endTime;

  public static final String SERIALIZED_NAME_FIRST_NAME = "firstName";
  @SerializedName(SERIALIZED_NAME_FIRST_NAME)
  private String firstName;

  public static final String SERIALIZED_NAME_GROUP_NAME = "groupName";
  @SerializedName(SERIALIZED_NAME_GROUP_NAME)
  private String groupName;

  public static final String SERIALIZED_NAME_LAST_NAME = "lastName";
  @SerializedName(SERIALIZED_NAME_LAST_NAME)
  private String lastName;

  public static final String SERIALIZED_NAME_MEETING_ID = "meetingId";
  @SerializedName(SERIALIZED_NAME_MEETING_ID)
  private Long meetingId;

  public static final String SERIALIZED_NAME_MEETING_INSTANCE_KEY = "meetingInstanceKey";
  @SerializedName(SERIALIZED_NAME_MEETING_INSTANCE_KEY)
  private Long meetingInstanceKey;

  public static final String SERIALIZED_NAME_MEETING_KEY = "meetingKey";
  @SerializedName(SERIALIZED_NAME_MEETING_KEY)
  private Long meetingKey;

  public static final String SERIALIZED_NAME_MEETING_TYPE = "meetingType";
  @SerializedName(SERIALIZED_NAME_MEETING_TYPE)
  private MeetingType meetingType;

  public static final String SERIALIZED_NAME_NEW_MEETING_ID = "newMeetingId";
  @SerializedName(SERIALIZED_NAME_NEW_MEETING_ID)
  private String newMeetingId;

  public static final String SERIALIZED_NAME_NEW_ORGANIZER_KEY = "newOrganizerKey";
  @SerializedName(SERIALIZED_NAME_NEW_ORGANIZER_KEY)
  private String newOrganizerKey;

  public static final String SERIALIZED_NAME_NUM_ATTENDEES = "numAttendees";
  @SerializedName(SERIALIZED_NAME_NUM_ATTENDEES)
  private Integer numAttendees;

  public static final String SERIALIZED_NAME_ORGANIZER_KEY = "organizerKey";
  @SerializedName(SERIALIZED_NAME_ORGANIZER_KEY)
  private String organizerKey;

  public static final String SERIALIZED_NAME_ORGANIZERKEY = "organizerkey";
  @SerializedName(SERIALIZED_NAME_ORGANIZERKEY)
  private String organizerkey;

  public static final String SERIALIZED_NAME_PASSWORD_REQUIRED = "passwordRequired";
  @SerializedName(SERIALIZED_NAME_PASSWORD_REQUIRED)
  private Boolean passwordRequired;

  public static final String SERIALIZED_NAME_SESSION_ID = "sessionId";
  @SerializedName(SERIALIZED_NAME_SESSION_ID)
  private Long sessionId;

  public static final String SERIALIZED_NAME_START_TIME = "startTime";
  @SerializedName(SERIALIZED_NAME_START_TIME)
  private OffsetDateTime startTime;

  public static final String SERIALIZED_NAME_STATUS = "status";
  @SerializedName(SERIALIZED_NAME_STATUS)
  private String status;

  public static final String SERIALIZED_NAME_SUBJECT = "subject";
  @SerializedName(SERIALIZED_NAME_SUBJECT)
  private String subject;

  public static final String SERIALIZED_NAME_UNIQUE_MEETING_ID = "uniqueMeetingId";
  @SerializedName(SERIALIZED_NAME_UNIQUE_MEETING_ID)
  private Long uniqueMeetingId;

  public MeetingHistory() {
  }

  public MeetingHistory conferenceCallInfo(String conferenceCallInfo) {
    this.conferenceCallInfo = conferenceCallInfo;
    return this;
  }

  /**
   * Audio options for the meeting
   * @return conferenceCallInfo
   */
  @javax.annotation.Nonnull
  public String getConferenceCallInfo() {
    return conferenceCallInfo;
  }

  public void setConferenceCallInfo(String conferenceCallInfo) {
    this.conferenceCallInfo = conferenceCallInfo;
  }


  public MeetingHistory date(OffsetDateTime date) {
    this.date = date;
    return this;
  }

  /**
   * The time the meeting instance started. Field retained for backwards compatibility reasons
   * @return date
   */
  @javax.annotation.Nonnull
  public OffsetDateTime getDate() {
    return date;
  }

  public void setDate(OffsetDateTime date) {
    this.date = date;
  }


  public MeetingHistory duration(Integer duration) {
    this.duration = duration;
    return this;
  }

  /**
   * The duration of the meeting session in minutes
   * @return duration
   */
  @javax.annotation.Nonnull
  public Integer getDuration() {
    return duration;
  }

  public void setDuration(Integer duration) {
    this.duration = duration;
  }


  public MeetingHistory email(String email) {
    this.email = email;
    return this;
  }

  /**
   * The meeting organizer&#39;s email address
   * @return email
   */
  @javax.annotation.Nonnull
  public String getEmail() {
    return email;
  }

  public void setEmail(String email) {
    this.email = email;
  }


  public MeetingHistory endTime(OffsetDateTime endTime) {
    this.endTime = endTime;
    return this;
  }

  /**
   * The time the meeting instance ended
   * @return endTime
   */
  @javax.annotation.Nonnull
  public OffsetDateTime getEndTime() {
    return endTime;
  }

  public void setEndTime(OffsetDateTime endTime) {
    this.endTime = endTime;
  }


  public MeetingHistory firstName(String firstName) {
    this.firstName = firstName;
    return this;
  }

  /**
   * The meeting organizer&#39;s first name
   * @return firstName
   */
  @javax.annotation.Nonnull
  public String getFirstName() {
    return firstName;
  }

  public void setFirstName(String firstName) {
    this.firstName = firstName;
  }


  public MeetingHistory groupName(String groupName) {
    this.groupName = groupName;
    return this;
  }

  /**
   * DEPRECATED. An empty string &#39;&#39; is returned
   * @return groupName
   */
  @javax.annotation.Nonnull
  public String getGroupName() {
    return groupName;
  }

  public void setGroupName(String groupName) {
    this.groupName = groupName;
  }


  public MeetingHistory lastName(String lastName) {
    this.lastName = lastName;
    return this;
  }

  /**
   * The surname of the meeting organizer
   * @return lastName
   */
  @javax.annotation.Nonnull
  public String getLastName() {
    return lastName;
  }

  public void setLastName(String lastName) {
    this.lastName = lastName;
  }


  public MeetingHistory meetingId(Long meetingId) {
    this.meetingId = meetingId;
    return this;
  }

  /**
   * The meeting ID
   * @return meetingId
   */
  @javax.annotation.Nonnull
  public Long getMeetingId() {
    return meetingId;
  }

  public void setMeetingId(Long meetingId) {
    this.meetingId = meetingId;
  }


  public MeetingHistory meetingInstanceKey(Long meetingInstanceKey) {
    this.meetingInstanceKey = meetingInstanceKey;
    return this;
  }

  /**
   * The key of the unique meeting instance
   * @return meetingInstanceKey
   */
  @javax.annotation.Nonnull
  public Long getMeetingInstanceKey() {
    return meetingInstanceKey;
  }

  public void setMeetingInstanceKey(Long meetingInstanceKey) {
    this.meetingInstanceKey = meetingInstanceKey;
  }


  public MeetingHistory meetingKey(Long meetingKey) {
    this.meetingKey = meetingKey;
    return this;
  }

  /**
   * The meeting ID. Field retained for backwards compatibility reasons
   * @return meetingKey
   */
  @javax.annotation.Nonnull
  public Long getMeetingKey() {
    return meetingKey;
  }

  public void setMeetingKey(Long meetingKey) {
    this.meetingKey = meetingKey;
  }


  public MeetingHistory meetingType(MeetingType meetingType) {
    this.meetingType = meetingType;
    return this;
  }

  /**
   * Get meetingType
   * @return meetingType
   */
  @javax.annotation.Nonnull
  public MeetingType getMeetingType() {
    return meetingType;
  }

  public void setMeetingType(MeetingType meetingType) {
    this.meetingType = meetingType;
  }


  public MeetingHistory newMeetingId(String newMeetingId) {
    this.newMeetingId = newMeetingId;
    return this;
  }

  /**
   * Formatted meeting ID
   * @return newMeetingId
   */
  @javax.annotation.Nonnull
  public String getNewMeetingId() {
    return newMeetingId;
  }

  public void setNewMeetingId(String newMeetingId) {
    this.newMeetingId = newMeetingId;
  }


  public MeetingHistory newOrganizerKey(String newOrganizerKey) {
    this.newOrganizerKey = newOrganizerKey;
    return this;
  }

  /**
   * The key of the meeting organizer. Field introduced for compatibility reasons
   * @return newOrganizerKey
   */
  @javax.annotation.Nonnull
  public String getNewOrganizerKey() {
    return newOrganizerKey;
  }

  public void setNewOrganizerKey(String newOrganizerKey) {
    this.newOrganizerKey = newOrganizerKey;
  }


  public MeetingHistory numAttendees(Integer numAttendees) {
    this.numAttendees = numAttendees;
    return this;
  }

  /**
   * The number of attendees at the meeting instance
   * @return numAttendees
   */
  @javax.annotation.Nonnull
  public Integer getNumAttendees() {
    return numAttendees;
  }

  public void setNumAttendees(Integer numAttendees) {
    this.numAttendees = numAttendees;
  }


  public MeetingHistory organizerKey(String organizerKey) {
    this.organizerKey = organizerKey;
    return this;
  }

  /**
   * The key of the meeting organizer
   * @return organizerKey
   */
  @javax.annotation.Nonnull
  public String getOrganizerKey() {
    return organizerKey;
  }

  public void setOrganizerKey(String organizerKey) {
    this.organizerKey = organizerKey;
  }


  public MeetingHistory organizerkey(String organizerkey) {
    this.organizerkey = organizerkey;
    return this;
  }

  /**
   * The key of the meeting organizer. Field retained for backwards compatibility reasons
   * @return organizerkey
   */
  @javax.annotation.Nonnull
  public String getOrganizerkey() {
    return organizerkey;
  }

  public void setOrganizerkey(String organizerkey) {
    this.organizerkey = organizerkey;
  }


  public MeetingHistory passwordRequired(Boolean passwordRequired) {
    this.passwordRequired = passwordRequired;
    return this;
  }

  /**
   * DEPRECATED. An empty string &#39;&#39; is returned
   * @return passwordRequired
   */
  @javax.annotation.Nonnull
  public Boolean getPasswordRequired() {
    return passwordRequired;
  }

  public void setPasswordRequired(Boolean passwordRequired) {
    this.passwordRequired = passwordRequired;
  }


  public MeetingHistory sessionId(Long sessionId) {
    this.sessionId = sessionId;
    return this;
  }

  /**
   * The ID of the meeting session
   * @return sessionId
   */
  @javax.annotation.Nonnull
  public Long getSessionId() {
    return sessionId;
  }

  public void setSessionId(Long sessionId) {
    this.sessionId = sessionId;
  }


  public MeetingHistory startTime(OffsetDateTime startTime) {
    this.startTime = startTime;
    return this;
  }

  /**
   * The time the meeting instance started
   * @return startTime
   */
  @javax.annotation.Nonnull
  public OffsetDateTime getStartTime() {
    return startTime;
  }

  public void setStartTime(OffsetDateTime startTime) {
    this.startTime = startTime;
  }


  public MeetingHistory status(String status) {
    this.status = status;
    return this;
  }

  /**
   * DEPRECATED. An empty string &#39;&#39; is returned
   * @return status
   */
  @javax.annotation.Nonnull
  public String getStatus() {
    return status;
  }

  public void setStatus(String status) {
    this.status = status;
  }


  public MeetingHistory subject(String subject) {
    this.subject = subject;
    return this;
  }

  /**
   * The subject of the meeting
   * @return subject
   */
  @javax.annotation.Nonnull
  public String getSubject() {
    return subject;
  }

  public void setSubject(String subject) {
    this.subject = subject;
  }


  public MeetingHistory uniqueMeetingId(Long uniqueMeetingId) {
    this.uniqueMeetingId = uniqueMeetingId;
    return this;
  }

  /**
   * The meeting ID. Field retained for backwards compatibility reasons
   * @return uniqueMeetingId
   */
  @javax.annotation.Nonnull
  public Long getUniqueMeetingId() {
    return uniqueMeetingId;
  }

  public void setUniqueMeetingId(Long uniqueMeetingId) {
    this.uniqueMeetingId = uniqueMeetingId;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    MeetingHistory meetingHistory = (MeetingHistory) o;
    return Objects.equals(this.conferenceCallInfo, meetingHistory.conferenceCallInfo) &&
        Objects.equals(this.date, meetingHistory.date) &&
        Objects.equals(this.duration, meetingHistory.duration) &&
        Objects.equals(this.email, meetingHistory.email) &&
        Objects.equals(this.endTime, meetingHistory.endTime) &&
        Objects.equals(this.firstName, meetingHistory.firstName) &&
        Objects.equals(this.groupName, meetingHistory.groupName) &&
        Objects.equals(this.lastName, meetingHistory.lastName) &&
        Objects.equals(this.meetingId, meetingHistory.meetingId) &&
        Objects.equals(this.meetingInstanceKey, meetingHistory.meetingInstanceKey) &&
        Objects.equals(this.meetingKey, meetingHistory.meetingKey) &&
        Objects.equals(this.meetingType, meetingHistory.meetingType) &&
        Objects.equals(this.newMeetingId, meetingHistory.newMeetingId) &&
        Objects.equals(this.newOrganizerKey, meetingHistory.newOrganizerKey) &&
        Objects.equals(this.numAttendees, meetingHistory.numAttendees) &&
        Objects.equals(this.organizerKey, meetingHistory.organizerKey) &&
        Objects.equals(this.organizerkey, meetingHistory.organizerkey) &&
        Objects.equals(this.passwordRequired, meetingHistory.passwordRequired) &&
        Objects.equals(this.sessionId, meetingHistory.sessionId) &&
        Objects.equals(this.startTime, meetingHistory.startTime) &&
        Objects.equals(this.status, meetingHistory.status) &&
        Objects.equals(this.subject, meetingHistory.subject) &&
        Objects.equals(this.uniqueMeetingId, meetingHistory.uniqueMeetingId);
  }

  @Override
  public int hashCode() {
    return Objects.hash(conferenceCallInfo, date, duration, email, endTime, firstName, groupName, lastName, meetingId, meetingInstanceKey, meetingKey, meetingType, newMeetingId, newOrganizerKey, numAttendees, organizerKey, organizerkey, passwordRequired, sessionId, startTime, status, subject, uniqueMeetingId);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class MeetingHistory {\n");
    sb.append("    conferenceCallInfo: ").append(toIndentedString(conferenceCallInfo)).append("\n");
    sb.append("    date: ").append(toIndentedString(date)).append("\n");
    sb.append("    duration: ").append(toIndentedString(duration)).append("\n");
    sb.append("    email: ").append(toIndentedString(email)).append("\n");
    sb.append("    endTime: ").append(toIndentedString(endTime)).append("\n");
    sb.append("    firstName: ").append(toIndentedString(firstName)).append("\n");
    sb.append("    groupName: ").append(toIndentedString(groupName)).append("\n");
    sb.append("    lastName: ").append(toIndentedString(lastName)).append("\n");
    sb.append("    meetingId: ").append(toIndentedString(meetingId)).append("\n");
    sb.append("    meetingInstanceKey: ").append(toIndentedString(meetingInstanceKey)).append("\n");
    sb.append("    meetingKey: ").append(toIndentedString(meetingKey)).append("\n");
    sb.append("    meetingType: ").append(toIndentedString(meetingType)).append("\n");
    sb.append("    newMeetingId: ").append(toIndentedString(newMeetingId)).append("\n");
    sb.append("    newOrganizerKey: ").append(toIndentedString(newOrganizerKey)).append("\n");
    sb.append("    numAttendees: ").append(toIndentedString(numAttendees)).append("\n");
    sb.append("    organizerKey: ").append(toIndentedString(organizerKey)).append("\n");
    sb.append("    organizerkey: ").append(toIndentedString(organizerkey)).append("\n");
    sb.append("    passwordRequired: ").append(toIndentedString(passwordRequired)).append("\n");
    sb.append("    sessionId: ").append(toIndentedString(sessionId)).append("\n");
    sb.append("    startTime: ").append(toIndentedString(startTime)).append("\n");
    sb.append("    status: ").append(toIndentedString(status)).append("\n");
    sb.append("    subject: ").append(toIndentedString(subject)).append("\n");
    sb.append("    uniqueMeetingId: ").append(toIndentedString(uniqueMeetingId)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("conferenceCallInfo");
    openapiFields.add("date");
    openapiFields.add("duration");
    openapiFields.add("email");
    openapiFields.add("endTime");
    openapiFields.add("firstName");
    openapiFields.add("groupName");
    openapiFields.add("lastName");
    openapiFields.add("meetingId");
    openapiFields.add("meetingInstanceKey");
    openapiFields.add("meetingKey");
    openapiFields.add("meetingType");
    openapiFields.add("newMeetingId");
    openapiFields.add("newOrganizerKey");
    openapiFields.add("numAttendees");
    openapiFields.add("organizerKey");
    openapiFields.add("organizerkey");
    openapiFields.add("passwordRequired");
    openapiFields.add("sessionId");
    openapiFields.add("startTime");
    openapiFields.add("status");
    openapiFields.add("subject");
    openapiFields.add("uniqueMeetingId");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("conferenceCallInfo");
    openapiRequiredFields.add("date");
    openapiRequiredFields.add("duration");
    openapiRequiredFields.add("email");
    openapiRequiredFields.add("endTime");
    openapiRequiredFields.add("firstName");
    openapiRequiredFields.add("groupName");
    openapiRequiredFields.add("lastName");
    openapiRequiredFields.add("meetingId");
    openapiRequiredFields.add("meetingInstanceKey");
    openapiRequiredFields.add("meetingKey");
    openapiRequiredFields.add("meetingType");
    openapiRequiredFields.add("newMeetingId");
    openapiRequiredFields.add("newOrganizerKey");
    openapiRequiredFields.add("numAttendees");
    openapiRequiredFields.add("organizerKey");
    openapiRequiredFields.add("organizerkey");
    openapiRequiredFields.add("passwordRequired");
    openapiRequiredFields.add("sessionId");
    openapiRequiredFields.add("startTime");
    openapiRequiredFields.add("status");
    openapiRequiredFields.add("subject");
    openapiRequiredFields.add("uniqueMeetingId");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to MeetingHistory
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!MeetingHistory.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in MeetingHistory is not found in the empty JSON string", MeetingHistory.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!MeetingHistory.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `MeetingHistory` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : MeetingHistory.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if (!jsonObj.get("conferenceCallInfo").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `conferenceCallInfo` to be a primitive type in the JSON string but got `%s`", jsonObj.get("conferenceCallInfo").toString()));
      }
      if (!jsonObj.get("email").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `email` to be a primitive type in the JSON string but got `%s`", jsonObj.get("email").toString()));
      }
      if (!jsonObj.get("firstName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `firstName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("firstName").toString()));
      }
      if (!jsonObj.get("groupName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `groupName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("groupName").toString()));
      }
      if (!jsonObj.get("lastName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `lastName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("lastName").toString()));
      }
      // validate the required field `meetingType`
      MeetingType.validateJsonElement(jsonObj.get("meetingType"));
      if (!jsonObj.get("newMeetingId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `newMeetingId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("newMeetingId").toString()));
      }
      if (!jsonObj.get("newOrganizerKey").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `newOrganizerKey` to be a primitive type in the JSON string but got `%s`", jsonObj.get("newOrganizerKey").toString()));
      }
      if (!jsonObj.get("organizerKey").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `organizerKey` to be a primitive type in the JSON string but got `%s`", jsonObj.get("organizerKey").toString()));
      }
      if (!jsonObj.get("organizerkey").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `organizerkey` to be a primitive type in the JSON string but got `%s`", jsonObj.get("organizerkey").toString()));
      }
      if (!jsonObj.get("status").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `status` to be a primitive type in the JSON string but got `%s`", jsonObj.get("status").toString()));
      }
      if (!jsonObj.get("subject").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `subject` to be a primitive type in the JSON string but got `%s`", jsonObj.get("subject").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!MeetingHistory.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'MeetingHistory' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<MeetingHistory> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(MeetingHistory.class));

       return (TypeAdapter<T>) new TypeAdapter<MeetingHistory>() {
           @Override
           public void write(JsonWriter out, MeetingHistory value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public MeetingHistory read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of MeetingHistory given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of MeetingHistory
   * @throws IOException if the JSON string is invalid with respect to MeetingHistory
   */
  public static MeetingHistory fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, MeetingHistory.class);
  }

  /**
   * Convert an instance of MeetingHistory to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

