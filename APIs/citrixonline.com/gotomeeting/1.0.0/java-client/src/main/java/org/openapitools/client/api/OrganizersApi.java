/*
 * GoToMeeting
 * <br>The GoToMeeting API provides seamless integration of GoToMeeting provisioning and meeting management into your existing infrastructure or third party applications.<br><br>For customers, the ability to add, suspend or delete an organizer in your GoToMeeting Corporate account from within your primary management systems simplifies and streamlines the entire process of account management. The ability to monitor meeting schedules, history and active meeting status allows managers to leverage GoToMeeting activities through your primary applications.<br><br>For third parties, the ability to create, update or delete a meeting from within your application makes real-time collaboration possible for your customers. The ability to update meeting schedules, view history and scheduled meetings, and view attendees from past meetings allows you to enhance your users' experience and the value of your applications.
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: developer-support@citrixonline.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiCallback;
import org.openapitools.client.ApiClient;
import org.openapitools.client.ApiException;
import org.openapitools.client.ApiResponse;
import org.openapitools.client.Configuration;
import org.openapitools.client.Pair;
import org.openapitools.client.ProgressRequestBody;
import org.openapitools.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import org.openapitools.client.model.AttendeeByOrganizer;
import org.openapitools.client.model.HistoricalMeeting;
import org.openapitools.client.model.MeetingByOrganizer;
import java.time.OffsetDateTime;
import org.openapitools.client.model.Organizer;
import org.openapitools.client.model.OrganizerReq;
import org.openapitools.client.model.OrganizerShort;
import org.openapitools.client.model.OrganizerStatus;
import org.openapitools.client.model.UpcomingMeeting;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class OrganizersApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public OrganizersApi() {
        this(Configuration.getDefaultApiClient());
    }

    public OrganizersApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for organizersDelete
     * @param authorization Access token (required)
     * @param email The email address of the organizer (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> No Content </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call organizersDeleteCall(String authorization, String email, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/organizers";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (email != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("email", email));
        }

        if (authorization != null) {
            localVarHeaderParams.put("Authorization", localVarApiClient.parameterToString(authorization));
        }

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call organizersDeleteValidateBeforeCall(String authorization, String email, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'authorization' is set
        if (authorization == null) {
            throw new ApiException("Missing the required parameter 'authorization' when calling organizersDelete(Async)");
        }

        // verify the required parameter 'email' is set
        if (email == null) {
            throw new ApiException("Missing the required parameter 'email' when calling organizersDelete(Async)");
        }

        return organizersDeleteCall(authorization, email, _callback);

    }

    /**
     * Delete organizer by email
     * Deletes the individual organizer specified by the email address. This API call is only available to users with the admin role.
     * @param authorization Access token (required)
     * @param email The email address of the organizer (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> No Content </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
     </table>
     */
    public void organizersDelete(String authorization, String email) throws ApiException {
        organizersDeleteWithHttpInfo(authorization, email);
    }

    /**
     * Delete organizer by email
     * Deletes the individual organizer specified by the email address. This API call is only available to users with the admin role.
     * @param authorization Access token (required)
     * @param email The email address of the organizer (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> No Content </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> organizersDeleteWithHttpInfo(String authorization, String email) throws ApiException {
        okhttp3.Call localVarCall = organizersDeleteValidateBeforeCall(authorization, email, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Delete organizer by email (asynchronously)
     * Deletes the individual organizer specified by the email address. This API call is only available to users with the admin role.
     * @param authorization Access token (required)
     * @param email The email address of the organizer (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> No Content </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call organizersDeleteAsync(String authorization, String email, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = organizersDeleteValidateBeforeCall(authorization, email, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for organizersGet
     * @param authorization Access token (required)
     * @param email The email address of the organizer (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call organizersGetCall(String authorization, String email, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/organizers";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (email != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("email", email));
        }

        if (authorization != null) {
            localVarHeaderParams.put("Authorization", localVarApiClient.parameterToString(authorization));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call organizersGetValidateBeforeCall(String authorization, String email, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'authorization' is set
        if (authorization == null) {
            throw new ApiException("Missing the required parameter 'authorization' when calling organizersGet(Async)");
        }

        return organizersGetCall(authorization, email, _callback);

    }

    /**
     * Get organizer by email / Get all organizers
     * Gets the individual organizer specified by the organizer&#39;s email address. If an email address is not specified, all organizers are returned. This API call is only available to users with the admin role.
     * @param authorization Access token (required)
     * @param email The email address of the organizer (optional)
     * @return List&lt;Organizer&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found </td><td>  -  </td></tr>
     </table>
     */
    public List<Organizer> organizersGet(String authorization, String email) throws ApiException {
        ApiResponse<List<Organizer>> localVarResp = organizersGetWithHttpInfo(authorization, email);
        return localVarResp.getData();
    }

    /**
     * Get organizer by email / Get all organizers
     * Gets the individual organizer specified by the organizer&#39;s email address. If an email address is not specified, all organizers are returned. This API call is only available to users with the admin role.
     * @param authorization Access token (required)
     * @param email The email address of the organizer (optional)
     * @return ApiResponse&lt;List&lt;Organizer&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<Organizer>> organizersGetWithHttpInfo(String authorization, String email) throws ApiException {
        okhttp3.Call localVarCall = organizersGetValidateBeforeCall(authorization, email, null);
        Type localVarReturnType = new TypeToken<List<Organizer>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get organizer by email / Get all organizers (asynchronously)
     * Gets the individual organizer specified by the organizer&#39;s email address. If an email address is not specified, all organizers are returned. This API call is only available to users with the admin role.
     * @param authorization Access token (required)
     * @param email The email address of the organizer (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call organizersGetAsync(String authorization, String email, final ApiCallback<List<Organizer>> _callback) throws ApiException {

        okhttp3.Call localVarCall = organizersGetValidateBeforeCall(authorization, email, _callback);
        Type localVarReturnType = new TypeToken<List<Organizer>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for organizersOrganizerKeyAttendeesGet
     * @param authorization Access token (required)
     * @param organizerKey The key of the organizer (required)
     * @param startDate A required start of date range in ISO8601 UTC format, e.g. 2015-07-01T22:00:00Z (required)
     * @param endDate A required end of date range in ISO8601 UTC format, e.g. 2015-07-01T23:00:00Z (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call organizersOrganizerKeyAttendeesGetCall(String authorization, Long organizerKey, OffsetDateTime startDate, OffsetDateTime endDate, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/organizers/{organizerKey}/attendees"
            .replace("{" + "organizerKey" + "}", localVarApiClient.escapeString(organizerKey.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (startDate != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("startDate", startDate));
        }

        if (endDate != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("endDate", endDate));
        }

        if (authorization != null) {
            localVarHeaderParams.put("Authorization", localVarApiClient.parameterToString(authorization));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call organizersOrganizerKeyAttendeesGetValidateBeforeCall(String authorization, Long organizerKey, OffsetDateTime startDate, OffsetDateTime endDate, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'authorization' is set
        if (authorization == null) {
            throw new ApiException("Missing the required parameter 'authorization' when calling organizersOrganizerKeyAttendeesGet(Async)");
        }

        // verify the required parameter 'organizerKey' is set
        if (organizerKey == null) {
            throw new ApiException("Missing the required parameter 'organizerKey' when calling organizersOrganizerKeyAttendeesGet(Async)");
        }

        // verify the required parameter 'startDate' is set
        if (startDate == null) {
            throw new ApiException("Missing the required parameter 'startDate' when calling organizersOrganizerKeyAttendeesGet(Async)");
        }

        // verify the required parameter 'endDate' is set
        if (endDate == null) {
            throw new ApiException("Missing the required parameter 'endDate' when calling organizersOrganizerKeyAttendeesGet(Async)");
        }

        return organizersOrganizerKeyAttendeesGetCall(authorization, organizerKey, startDate, endDate, _callback);

    }

    /**
     * Get attendees by organizer
     * Lists all attendees for all meetings within a specified date range for a specified organizer. This API call is only available to users with the admin role.
     * @param authorization Access token (required)
     * @param organizerKey The key of the organizer (required)
     * @param startDate A required start of date range in ISO8601 UTC format, e.g. 2015-07-01T22:00:00Z (required)
     * @param endDate A required end of date range in ISO8601 UTC format, e.g. 2015-07-01T23:00:00Z (required)
     * @return List&lt;AttendeeByOrganizer&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found </td><td>  -  </td></tr>
     </table>
     */
    public List<AttendeeByOrganizer> organizersOrganizerKeyAttendeesGet(String authorization, Long organizerKey, OffsetDateTime startDate, OffsetDateTime endDate) throws ApiException {
        ApiResponse<List<AttendeeByOrganizer>> localVarResp = organizersOrganizerKeyAttendeesGetWithHttpInfo(authorization, organizerKey, startDate, endDate);
        return localVarResp.getData();
    }

    /**
     * Get attendees by organizer
     * Lists all attendees for all meetings within a specified date range for a specified organizer. This API call is only available to users with the admin role.
     * @param authorization Access token (required)
     * @param organizerKey The key of the organizer (required)
     * @param startDate A required start of date range in ISO8601 UTC format, e.g. 2015-07-01T22:00:00Z (required)
     * @param endDate A required end of date range in ISO8601 UTC format, e.g. 2015-07-01T23:00:00Z (required)
     * @return ApiResponse&lt;List&lt;AttendeeByOrganizer&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<AttendeeByOrganizer>> organizersOrganizerKeyAttendeesGetWithHttpInfo(String authorization, Long organizerKey, OffsetDateTime startDate, OffsetDateTime endDate) throws ApiException {
        okhttp3.Call localVarCall = organizersOrganizerKeyAttendeesGetValidateBeforeCall(authorization, organizerKey, startDate, endDate, null);
        Type localVarReturnType = new TypeToken<List<AttendeeByOrganizer>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get attendees by organizer (asynchronously)
     * Lists all attendees for all meetings within a specified date range for a specified organizer. This API call is only available to users with the admin role.
     * @param authorization Access token (required)
     * @param organizerKey The key of the organizer (required)
     * @param startDate A required start of date range in ISO8601 UTC format, e.g. 2015-07-01T22:00:00Z (required)
     * @param endDate A required end of date range in ISO8601 UTC format, e.g. 2015-07-01T23:00:00Z (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call organizersOrganizerKeyAttendeesGetAsync(String authorization, Long organizerKey, OffsetDateTime startDate, OffsetDateTime endDate, final ApiCallback<List<AttendeeByOrganizer>> _callback) throws ApiException {

        okhttp3.Call localVarCall = organizersOrganizerKeyAttendeesGetValidateBeforeCall(authorization, organizerKey, startDate, endDate, _callback);
        Type localVarReturnType = new TypeToken<List<AttendeeByOrganizer>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for organizersOrganizerKeyDelete
     * @param authorization Access token (required)
     * @param organizerKey The key of the organizer (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> No Content </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call organizersOrganizerKeyDeleteCall(String authorization, Long organizerKey, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/organizers/{organizerKey}"
            .replace("{" + "organizerKey" + "}", localVarApiClient.escapeString(organizerKey.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (authorization != null) {
            localVarHeaderParams.put("Authorization", localVarApiClient.parameterToString(authorization));
        }

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call organizersOrganizerKeyDeleteValidateBeforeCall(String authorization, Long organizerKey, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'authorization' is set
        if (authorization == null) {
            throw new ApiException("Missing the required parameter 'authorization' when calling organizersOrganizerKeyDelete(Async)");
        }

        // verify the required parameter 'organizerKey' is set
        if (organizerKey == null) {
            throw new ApiException("Missing the required parameter 'organizerKey' when calling organizersOrganizerKeyDelete(Async)");
        }

        return organizersOrganizerKeyDeleteCall(authorization, organizerKey, _callback);

    }

    /**
     * Delete organizer
     * Deletes the individual organizer specified by the organizer key. This API call is only available to users with the admin role.
     * @param authorization Access token (required)
     * @param organizerKey The key of the organizer (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> No Content </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found </td><td>  -  </td></tr>
     </table>
     */
    public void organizersOrganizerKeyDelete(String authorization, Long organizerKey) throws ApiException {
        organizersOrganizerKeyDeleteWithHttpInfo(authorization, organizerKey);
    }

    /**
     * Delete organizer
     * Deletes the individual organizer specified by the organizer key. This API call is only available to users with the admin role.
     * @param authorization Access token (required)
     * @param organizerKey The key of the organizer (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> No Content </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> organizersOrganizerKeyDeleteWithHttpInfo(String authorization, Long organizerKey) throws ApiException {
        okhttp3.Call localVarCall = organizersOrganizerKeyDeleteValidateBeforeCall(authorization, organizerKey, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Delete organizer (asynchronously)
     * Deletes the individual organizer specified by the organizer key. This API call is only available to users with the admin role.
     * @param authorization Access token (required)
     * @param organizerKey The key of the organizer (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> No Content </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call organizersOrganizerKeyDeleteAsync(String authorization, Long organizerKey, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = organizersOrganizerKeyDeleteValidateBeforeCall(authorization, organizerKey, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for organizersOrganizerKeyGet
     * @param authorization Access token (required)
     * @param organizerKey The key of the organizer (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call organizersOrganizerKeyGetCall(String authorization, Long organizerKey, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/organizers/{organizerKey}"
            .replace("{" + "organizerKey" + "}", localVarApiClient.escapeString(organizerKey.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (authorization != null) {
            localVarHeaderParams.put("Authorization", localVarApiClient.parameterToString(authorization));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call organizersOrganizerKeyGetValidateBeforeCall(String authorization, Long organizerKey, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'authorization' is set
        if (authorization == null) {
            throw new ApiException("Missing the required parameter 'authorization' when calling organizersOrganizerKeyGet(Async)");
        }

        // verify the required parameter 'organizerKey' is set
        if (organizerKey == null) {
            throw new ApiException("Missing the required parameter 'organizerKey' when calling organizersOrganizerKeyGet(Async)");
        }

        return organizersOrganizerKeyGetCall(authorization, organizerKey, _callback);

    }

    /**
     * Get organizer
     * Returns the individual organizer specified by the key. This API call is only available to users with the admin role. Non-admin users can only make this call for their own organizerKey.
     * @param authorization Access token (required)
     * @param organizerKey The key of the organizer (required)
     * @return List&lt;Organizer&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found </td><td>  -  </td></tr>
     </table>
     */
    public List<Organizer> organizersOrganizerKeyGet(String authorization, Long organizerKey) throws ApiException {
        ApiResponse<List<Organizer>> localVarResp = organizersOrganizerKeyGetWithHttpInfo(authorization, organizerKey);
        return localVarResp.getData();
    }

    /**
     * Get organizer
     * Returns the individual organizer specified by the key. This API call is only available to users with the admin role. Non-admin users can only make this call for their own organizerKey.
     * @param authorization Access token (required)
     * @param organizerKey The key of the organizer (required)
     * @return ApiResponse&lt;List&lt;Organizer&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<Organizer>> organizersOrganizerKeyGetWithHttpInfo(String authorization, Long organizerKey) throws ApiException {
        okhttp3.Call localVarCall = organizersOrganizerKeyGetValidateBeforeCall(authorization, organizerKey, null);
        Type localVarReturnType = new TypeToken<List<Organizer>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get organizer (asynchronously)
     * Returns the individual organizer specified by the key. This API call is only available to users with the admin role. Non-admin users can only make this call for their own organizerKey.
     * @param authorization Access token (required)
     * @param organizerKey The key of the organizer (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call organizersOrganizerKeyGetAsync(String authorization, Long organizerKey, final ApiCallback<List<Organizer>> _callback) throws ApiException {

        okhttp3.Call localVarCall = organizersOrganizerKeyGetValidateBeforeCall(authorization, organizerKey, _callback);
        Type localVarReturnType = new TypeToken<List<Organizer>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for organizersOrganizerKeyHistoricalMeetingsGet
     * @param authorization Access token (required)
     * @param organizerKey The key of the organizer (required)
     * @param startDate Required start of date range, in ISO8601 UTC format, e.g. 2015-07-01T22:00:00Z (required)
     * @param endDate Required end of date range, in ISO8601 UTC format, e.g. 2015-07-01T23:00:00Z (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call organizersOrganizerKeyHistoricalMeetingsGetCall(String authorization, Long organizerKey, OffsetDateTime startDate, OffsetDateTime endDate, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/organizers/{organizerKey}/historicalMeetings"
            .replace("{" + "organizerKey" + "}", localVarApiClient.escapeString(organizerKey.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (startDate != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("startDate", startDate));
        }

        if (endDate != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("endDate", endDate));
        }

        if (authorization != null) {
            localVarHeaderParams.put("Authorization", localVarApiClient.parameterToString(authorization));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call organizersOrganizerKeyHistoricalMeetingsGetValidateBeforeCall(String authorization, Long organizerKey, OffsetDateTime startDate, OffsetDateTime endDate, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'authorization' is set
        if (authorization == null) {
            throw new ApiException("Missing the required parameter 'authorization' when calling organizersOrganizerKeyHistoricalMeetingsGet(Async)");
        }

        // verify the required parameter 'organizerKey' is set
        if (organizerKey == null) {
            throw new ApiException("Missing the required parameter 'organizerKey' when calling organizersOrganizerKeyHistoricalMeetingsGet(Async)");
        }

        // verify the required parameter 'startDate' is set
        if (startDate == null) {
            throw new ApiException("Missing the required parameter 'startDate' when calling organizersOrganizerKeyHistoricalMeetingsGet(Async)");
        }

        // verify the required parameter 'endDate' is set
        if (endDate == null) {
            throw new ApiException("Missing the required parameter 'endDate' when calling organizersOrganizerKeyHistoricalMeetingsGet(Async)");
        }

        return organizersOrganizerKeyHistoricalMeetingsGetCall(authorization, organizerKey, startDate, endDate, _callback);

    }

    /**
     * Get historical meetings by organizer
     * Get historical meetings for the specified organizer that started within the specified date/time range. Remark: Meetings which are still ongoing at the time of the request are NOT contained in the result array.
     * @param authorization Access token (required)
     * @param organizerKey The key of the organizer (required)
     * @param startDate Required start of date range, in ISO8601 UTC format, e.g. 2015-07-01T22:00:00Z (required)
     * @param endDate Required end of date range, in ISO8601 UTC format, e.g. 2015-07-01T23:00:00Z (required)
     * @return List&lt;HistoricalMeeting&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found </td><td>  -  </td></tr>
     </table>
     */
    public List<HistoricalMeeting> organizersOrganizerKeyHistoricalMeetingsGet(String authorization, Long organizerKey, OffsetDateTime startDate, OffsetDateTime endDate) throws ApiException {
        ApiResponse<List<HistoricalMeeting>> localVarResp = organizersOrganizerKeyHistoricalMeetingsGetWithHttpInfo(authorization, organizerKey, startDate, endDate);
        return localVarResp.getData();
    }

    /**
     * Get historical meetings by organizer
     * Get historical meetings for the specified organizer that started within the specified date/time range. Remark: Meetings which are still ongoing at the time of the request are NOT contained in the result array.
     * @param authorization Access token (required)
     * @param organizerKey The key of the organizer (required)
     * @param startDate Required start of date range, in ISO8601 UTC format, e.g. 2015-07-01T22:00:00Z (required)
     * @param endDate Required end of date range, in ISO8601 UTC format, e.g. 2015-07-01T23:00:00Z (required)
     * @return ApiResponse&lt;List&lt;HistoricalMeeting&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<HistoricalMeeting>> organizersOrganizerKeyHistoricalMeetingsGetWithHttpInfo(String authorization, Long organizerKey, OffsetDateTime startDate, OffsetDateTime endDate) throws ApiException {
        okhttp3.Call localVarCall = organizersOrganizerKeyHistoricalMeetingsGetValidateBeforeCall(authorization, organizerKey, startDate, endDate, null);
        Type localVarReturnType = new TypeToken<List<HistoricalMeeting>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get historical meetings by organizer (asynchronously)
     * Get historical meetings for the specified organizer that started within the specified date/time range. Remark: Meetings which are still ongoing at the time of the request are NOT contained in the result array.
     * @param authorization Access token (required)
     * @param organizerKey The key of the organizer (required)
     * @param startDate Required start of date range, in ISO8601 UTC format, e.g. 2015-07-01T22:00:00Z (required)
     * @param endDate Required end of date range, in ISO8601 UTC format, e.g. 2015-07-01T23:00:00Z (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call organizersOrganizerKeyHistoricalMeetingsGetAsync(String authorization, Long organizerKey, OffsetDateTime startDate, OffsetDateTime endDate, final ApiCallback<List<HistoricalMeeting>> _callback) throws ApiException {

        okhttp3.Call localVarCall = organizersOrganizerKeyHistoricalMeetingsGetValidateBeforeCall(authorization, organizerKey, startDate, endDate, _callback);
        Type localVarReturnType = new TypeToken<List<HistoricalMeeting>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for organizersOrganizerKeyMeetingsGet
     * @param authorization Access token (required)
     * @param organizerKey The key of the organizer (required)
     * @param scheduled When &#39;true&#39;, returns all future meetings. Date range not supported. (optional)
     * @param history When &#39;true&#39;, returns all past meetings within date range (optional)
     * @param startDate If history is &#39;true&#39;, required start of date range, in ISO8601 UTC format, e.g. 2015-07-01T22:00:00Z (optional)
     * @param endDate If history is &#39;true&#39;, required end of date range, in ISO8601 UTC format, e.g. 2015-07-01T23:00:00Z (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found </td><td>  -  </td></tr>
     </table>
     * @deprecated
     */
    @Deprecated
    public okhttp3.Call organizersOrganizerKeyMeetingsGetCall(String authorization, Long organizerKey, Boolean scheduled, Boolean history, OffsetDateTime startDate, OffsetDateTime endDate, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/organizers/{organizerKey}/meetings"
            .replace("{" + "organizerKey" + "}", localVarApiClient.escapeString(organizerKey.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (scheduled != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("scheduled", scheduled));
        }

        if (history != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("history", history));
        }

        if (startDate != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("startDate", startDate));
        }

        if (endDate != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("endDate", endDate));
        }

        if (authorization != null) {
            localVarHeaderParams.put("Authorization", localVarApiClient.parameterToString(authorization));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @Deprecated
    @SuppressWarnings("rawtypes")
    private okhttp3.Call organizersOrganizerKeyMeetingsGetValidateBeforeCall(String authorization, Long organizerKey, Boolean scheduled, Boolean history, OffsetDateTime startDate, OffsetDateTime endDate, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'authorization' is set
        if (authorization == null) {
            throw new ApiException("Missing the required parameter 'authorization' when calling organizersOrganizerKeyMeetingsGet(Async)");
        }

        // verify the required parameter 'organizerKey' is set
        if (organizerKey == null) {
            throw new ApiException("Missing the required parameter 'organizerKey' when calling organizersOrganizerKeyMeetingsGet(Async)");
        }

        return organizersOrganizerKeyMeetingsGetCall(authorization, organizerKey, scheduled, history, startDate, endDate, _callback);

    }

    /**
     * DEPRECATED: Get meetings by organizer
     * DEPRECATED: Please use the new API calls &#39;Get historical meetings by organizer&#39; and &#39;Get upcoming meetings by organizer&#39;. Gets future (scheduled) or past (history) meetings for a specified organizer. Include &#39;history&#x3D;true&#39; and the past start and end dates in the URL to retrieve past meetings. Enter &#39;scheduled&#x3D;true&#39; (without dates) to get scheduled meetings.
     * @param authorization Access token (required)
     * @param organizerKey The key of the organizer (required)
     * @param scheduled When &#39;true&#39;, returns all future meetings. Date range not supported. (optional)
     * @param history When &#39;true&#39;, returns all past meetings within date range (optional)
     * @param startDate If history is &#39;true&#39;, required start of date range, in ISO8601 UTC format, e.g. 2015-07-01T22:00:00Z (optional)
     * @param endDate If history is &#39;true&#39;, required end of date range, in ISO8601 UTC format, e.g. 2015-07-01T23:00:00Z (optional)
     * @return List&lt;MeetingByOrganizer&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found </td><td>  -  </td></tr>
     </table>
     * @deprecated
     */
    @Deprecated
    public List<MeetingByOrganizer> organizersOrganizerKeyMeetingsGet(String authorization, Long organizerKey, Boolean scheduled, Boolean history, OffsetDateTime startDate, OffsetDateTime endDate) throws ApiException {
        ApiResponse<List<MeetingByOrganizer>> localVarResp = organizersOrganizerKeyMeetingsGetWithHttpInfo(authorization, organizerKey, scheduled, history, startDate, endDate);
        return localVarResp.getData();
    }

    /**
     * DEPRECATED: Get meetings by organizer
     * DEPRECATED: Please use the new API calls &#39;Get historical meetings by organizer&#39; and &#39;Get upcoming meetings by organizer&#39;. Gets future (scheduled) or past (history) meetings for a specified organizer. Include &#39;history&#x3D;true&#39; and the past start and end dates in the URL to retrieve past meetings. Enter &#39;scheduled&#x3D;true&#39; (without dates) to get scheduled meetings.
     * @param authorization Access token (required)
     * @param organizerKey The key of the organizer (required)
     * @param scheduled When &#39;true&#39;, returns all future meetings. Date range not supported. (optional)
     * @param history When &#39;true&#39;, returns all past meetings within date range (optional)
     * @param startDate If history is &#39;true&#39;, required start of date range, in ISO8601 UTC format, e.g. 2015-07-01T22:00:00Z (optional)
     * @param endDate If history is &#39;true&#39;, required end of date range, in ISO8601 UTC format, e.g. 2015-07-01T23:00:00Z (optional)
     * @return ApiResponse&lt;List&lt;MeetingByOrganizer&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found </td><td>  -  </td></tr>
     </table>
     * @deprecated
     */
    @Deprecated
    public ApiResponse<List<MeetingByOrganizer>> organizersOrganizerKeyMeetingsGetWithHttpInfo(String authorization, Long organizerKey, Boolean scheduled, Boolean history, OffsetDateTime startDate, OffsetDateTime endDate) throws ApiException {
        okhttp3.Call localVarCall = organizersOrganizerKeyMeetingsGetValidateBeforeCall(authorization, organizerKey, scheduled, history, startDate, endDate, null);
        Type localVarReturnType = new TypeToken<List<MeetingByOrganizer>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * DEPRECATED: Get meetings by organizer (asynchronously)
     * DEPRECATED: Please use the new API calls &#39;Get historical meetings by organizer&#39; and &#39;Get upcoming meetings by organizer&#39;. Gets future (scheduled) or past (history) meetings for a specified organizer. Include &#39;history&#x3D;true&#39; and the past start and end dates in the URL to retrieve past meetings. Enter &#39;scheduled&#x3D;true&#39; (without dates) to get scheduled meetings.
     * @param authorization Access token (required)
     * @param organizerKey The key of the organizer (required)
     * @param scheduled When &#39;true&#39;, returns all future meetings. Date range not supported. (optional)
     * @param history When &#39;true&#39;, returns all past meetings within date range (optional)
     * @param startDate If history is &#39;true&#39;, required start of date range, in ISO8601 UTC format, e.g. 2015-07-01T22:00:00Z (optional)
     * @param endDate If history is &#39;true&#39;, required end of date range, in ISO8601 UTC format, e.g. 2015-07-01T23:00:00Z (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found </td><td>  -  </td></tr>
     </table>
     * @deprecated
     */
    @Deprecated
    public okhttp3.Call organizersOrganizerKeyMeetingsGetAsync(String authorization, Long organizerKey, Boolean scheduled, Boolean history, OffsetDateTime startDate, OffsetDateTime endDate, final ApiCallback<List<MeetingByOrganizer>> _callback) throws ApiException {

        okhttp3.Call localVarCall = organizersOrganizerKeyMeetingsGetValidateBeforeCall(authorization, organizerKey, scheduled, history, startDate, endDate, _callback);
        Type localVarReturnType = new TypeToken<List<MeetingByOrganizer>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for organizersOrganizerKeyPut
     * @param authorization Access token (required)
     * @param organizerKey The key of the organizer (required)
     * @param body The organizer&#39;s status (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> No Content </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call organizersOrganizerKeyPutCall(String authorization, Long organizerKey, OrganizerStatus body, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = body;

        // create path and map variables
        String localVarPath = "/organizers/{organizerKey}"
            .replace("{" + "organizerKey" + "}", localVarApiClient.escapeString(organizerKey.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (authorization != null) {
            localVarHeaderParams.put("Authorization", localVarApiClient.parameterToString(authorization));
        }

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call organizersOrganizerKeyPutValidateBeforeCall(String authorization, Long organizerKey, OrganizerStatus body, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'authorization' is set
        if (authorization == null) {
            throw new ApiException("Missing the required parameter 'authorization' when calling organizersOrganizerKeyPut(Async)");
        }

        // verify the required parameter 'organizerKey' is set
        if (organizerKey == null) {
            throw new ApiException("Missing the required parameter 'organizerKey' when calling organizersOrganizerKeyPut(Async)");
        }

        // verify the required parameter 'body' is set
        if (body == null) {
            throw new ApiException("Missing the required parameter 'body' when calling organizersOrganizerKeyPut(Async)");
        }

        return organizersOrganizerKeyPutCall(authorization, organizerKey, body, _callback);

    }

    /**
     * Update organizer
     * Updates the products of the specified organizer. To add a product (G2M, G2W, G2T, OPENVOICE) for the organizer, the call must be sent once for each product you want to add. To remove all products for the organizer, set status to &#39;suspended&#39;. The call is limited to users with the admin role.
     * @param authorization Access token (required)
     * @param organizerKey The key of the organizer (required)
     * @param body The organizer&#39;s status (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> No Content </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found </td><td>  -  </td></tr>
     </table>
     */
    public void organizersOrganizerKeyPut(String authorization, Long organizerKey, OrganizerStatus body) throws ApiException {
        organizersOrganizerKeyPutWithHttpInfo(authorization, organizerKey, body);
    }

    /**
     * Update organizer
     * Updates the products of the specified organizer. To add a product (G2M, G2W, G2T, OPENVOICE) for the organizer, the call must be sent once for each product you want to add. To remove all products for the organizer, set status to &#39;suspended&#39;. The call is limited to users with the admin role.
     * @param authorization Access token (required)
     * @param organizerKey The key of the organizer (required)
     * @param body The organizer&#39;s status (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> No Content </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> organizersOrganizerKeyPutWithHttpInfo(String authorization, Long organizerKey, OrganizerStatus body) throws ApiException {
        okhttp3.Call localVarCall = organizersOrganizerKeyPutValidateBeforeCall(authorization, organizerKey, body, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Update organizer (asynchronously)
     * Updates the products of the specified organizer. To add a product (G2M, G2W, G2T, OPENVOICE) for the organizer, the call must be sent once for each product you want to add. To remove all products for the organizer, set status to &#39;suspended&#39;. The call is limited to users with the admin role.
     * @param authorization Access token (required)
     * @param organizerKey The key of the organizer (required)
     * @param body The organizer&#39;s status (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> No Content </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call organizersOrganizerKeyPutAsync(String authorization, Long organizerKey, OrganizerStatus body, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = organizersOrganizerKeyPutValidateBeforeCall(authorization, organizerKey, body, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for organizersOrganizerKeyUpcomingMeetingsGet
     * @param authorization Access token (required)
     * @param organizerKey The key of the organizer (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call organizersOrganizerKeyUpcomingMeetingsGetCall(String authorization, Long organizerKey, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/organizers/{organizerKey}/upcomingMeetings"
            .replace("{" + "organizerKey" + "}", localVarApiClient.escapeString(organizerKey.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (authorization != null) {
            localVarHeaderParams.put("Authorization", localVarApiClient.parameterToString(authorization));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call organizersOrganizerKeyUpcomingMeetingsGetValidateBeforeCall(String authorization, Long organizerKey, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'authorization' is set
        if (authorization == null) {
            throw new ApiException("Missing the required parameter 'authorization' when calling organizersOrganizerKeyUpcomingMeetingsGet(Async)");
        }

        // verify the required parameter 'organizerKey' is set
        if (organizerKey == null) {
            throw new ApiException("Missing the required parameter 'organizerKey' when calling organizersOrganizerKeyUpcomingMeetingsGet(Async)");
        }

        return organizersOrganizerKeyUpcomingMeetingsGetCall(authorization, organizerKey, _callback);

    }

    /**
     * Get upcoming meetings by organizer
     * Get upcoming meetings for a specified organizer. This API call is only available to users with the admin role.
     * @param authorization Access token (required)
     * @param organizerKey The key of the organizer (required)
     * @return List&lt;UpcomingMeeting&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found </td><td>  -  </td></tr>
     </table>
     */
    public List<UpcomingMeeting> organizersOrganizerKeyUpcomingMeetingsGet(String authorization, Long organizerKey) throws ApiException {
        ApiResponse<List<UpcomingMeeting>> localVarResp = organizersOrganizerKeyUpcomingMeetingsGetWithHttpInfo(authorization, organizerKey);
        return localVarResp.getData();
    }

    /**
     * Get upcoming meetings by organizer
     * Get upcoming meetings for a specified organizer. This API call is only available to users with the admin role.
     * @param authorization Access token (required)
     * @param organizerKey The key of the organizer (required)
     * @return ApiResponse&lt;List&lt;UpcomingMeeting&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<UpcomingMeeting>> organizersOrganizerKeyUpcomingMeetingsGetWithHttpInfo(String authorization, Long organizerKey) throws ApiException {
        okhttp3.Call localVarCall = organizersOrganizerKeyUpcomingMeetingsGetValidateBeforeCall(authorization, organizerKey, null);
        Type localVarReturnType = new TypeToken<List<UpcomingMeeting>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get upcoming meetings by organizer (asynchronously)
     * Get upcoming meetings for a specified organizer. This API call is only available to users with the admin role.
     * @param authorization Access token (required)
     * @param organizerKey The key of the organizer (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call organizersOrganizerKeyUpcomingMeetingsGetAsync(String authorization, Long organizerKey, final ApiCallback<List<UpcomingMeeting>> _callback) throws ApiException {

        okhttp3.Call localVarCall = organizersOrganizerKeyUpcomingMeetingsGetValidateBeforeCall(authorization, organizerKey, _callback);
        Type localVarReturnType = new TypeToken<List<UpcomingMeeting>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for organizersPost
     * @param authorization Access token (required)
     * @param body The details of the organizer to be created (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Created </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Server Error </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> Conflict </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call organizersPostCall(String authorization, OrganizerReq body, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = body;

        // create path and map variables
        String localVarPath = "/organizers";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (authorization != null) {
            localVarHeaderParams.put("Authorization", localVarApiClient.parameterToString(authorization));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call organizersPostValidateBeforeCall(String authorization, OrganizerReq body, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'authorization' is set
        if (authorization == null) {
            throw new ApiException("Missing the required parameter 'authorization' when calling organizersPost(Async)");
        }

        // verify the required parameter 'body' is set
        if (body == null) {
            throw new ApiException("Missing the required parameter 'body' when calling organizersPost(Async)");
        }

        return organizersPostCall(authorization, body, _callback);

    }

    /**
     * Create organizer
     * Creates a new organizer and sends an email to the email address defined in the request. This API call is only available to users with the admin role. You may also pass &#39;G2W&#39; or &#39;G2T&#39; or &#39;OPENVOICE&#39; as productType variables, creating organizers for those products. A G2W or G2T organizer will also have access to G2M.
     * @param authorization Access token (required)
     * @param body The details of the organizer to be created (required)
     * @return List&lt;OrganizerShort&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Created </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Server Error </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> Conflict </td><td>  -  </td></tr>
     </table>
     */
    public List<OrganizerShort> organizersPost(String authorization, OrganizerReq body) throws ApiException {
        ApiResponse<List<OrganizerShort>> localVarResp = organizersPostWithHttpInfo(authorization, body);
        return localVarResp.getData();
    }

    /**
     * Create organizer
     * Creates a new organizer and sends an email to the email address defined in the request. This API call is only available to users with the admin role. You may also pass &#39;G2W&#39; or &#39;G2T&#39; or &#39;OPENVOICE&#39; as productType variables, creating organizers for those products. A G2W or G2T organizer will also have access to G2M.
     * @param authorization Access token (required)
     * @param body The details of the organizer to be created (required)
     * @return ApiResponse&lt;List&lt;OrganizerShort&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Created </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Server Error </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> Conflict </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<OrganizerShort>> organizersPostWithHttpInfo(String authorization, OrganizerReq body) throws ApiException {
        okhttp3.Call localVarCall = organizersPostValidateBeforeCall(authorization, body, null);
        Type localVarReturnType = new TypeToken<List<OrganizerShort>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Create organizer (asynchronously)
     * Creates a new organizer and sends an email to the email address defined in the request. This API call is only available to users with the admin role. You may also pass &#39;G2W&#39; or &#39;G2T&#39; or &#39;OPENVOICE&#39; as productType variables, creating organizers for those products. A G2W or G2T organizer will also have access to G2M.
     * @param authorization Access token (required)
     * @param body The details of the organizer to be created (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Created </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Server Error </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> Conflict </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call organizersPostAsync(String authorization, OrganizerReq body, final ApiCallback<List<OrganizerShort>> _callback) throws ApiException {

        okhttp3.Call localVarCall = organizersPostValidateBeforeCall(authorization, body, _callback);
        Type localVarReturnType = new TypeToken<List<OrganizerShort>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
