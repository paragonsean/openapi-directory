/*
 * GoToMeeting
 * <br>The GoToMeeting API provides seamless integration of GoToMeeting provisioning and meeting management into your existing infrastructure or third party applications.<br><br>For customers, the ability to add, suspend or delete an organizer in your GoToMeeting Corporate account from within your primary management systems simplifies and streamlines the entire process of account management. The ability to monitor meeting schedules, history and active meeting status allows managers to leverage GoToMeeting activities through your primary applications.<br><br>For third parties, the ability to create, update or delete a meeting from within your application makes real-time collaboration possible for your customers. The ability to update meeting schedules, view history and scheduled meetings, and view attendees from past meetings allows you to enhance your users' experience and the value of your applications.
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: developer-support@citrixonline.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.time.OffsetDateTime;
import java.util.Arrays;
import org.openapitools.client.model.MeetingStatus;
import org.openapitools.client.model.MeetingType;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Describes a meeting scheduled by a specified organizer
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:56:58.282128-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class MeetingByOrganizer {
  public static final String SERIALIZED_NAME_CONFERENCE_CALL_INFO = "conferenceCallInfo";
  @SerializedName(SERIALIZED_NAME_CONFERENCE_CALL_INFO)
  private String conferenceCallInfo;

  public static final String SERIALIZED_NAME_CREATE_TIME = "createTime";
  @SerializedName(SERIALIZED_NAME_CREATE_TIME)
  private OffsetDateTime createTime;

  public static final String SERIALIZED_NAME_END_TIME = "endTime";
  @SerializedName(SERIALIZED_NAME_END_TIME)
  private OffsetDateTime endTime;

  public static final String SERIALIZED_NAME_MAX_PARTICIPANTS = "maxParticipants";
  @SerializedName(SERIALIZED_NAME_MAX_PARTICIPANTS)
  private Integer maxParticipants;

  public static final String SERIALIZED_NAME_MEETING_TYPE = "meetingType";
  @SerializedName(SERIALIZED_NAME_MEETING_TYPE)
  private MeetingType meetingType;

  public static final String SERIALIZED_NAME_MEETINGID = "meetingid";
  @SerializedName(SERIALIZED_NAME_MEETINGID)
  private Long meetingid;

  public static final String SERIALIZED_NAME_PASSWORD_REQUIRED = "passwordRequired";
  @SerializedName(SERIALIZED_NAME_PASSWORD_REQUIRED)
  private Boolean passwordRequired;

  public static final String SERIALIZED_NAME_START_TIME = "startTime";
  @SerializedName(SERIALIZED_NAME_START_TIME)
  private OffsetDateTime startTime;

  public static final String SERIALIZED_NAME_STATUS = "status";
  @SerializedName(SERIALIZED_NAME_STATUS)
  private MeetingStatus status;

  public static final String SERIALIZED_NAME_SUBJECT = "subject";
  @SerializedName(SERIALIZED_NAME_SUBJECT)
  private String subject;

  public static final String SERIALIZED_NAME_UNIQUE_MEETING_ID = "uniqueMeetingId";
  @SerializedName(SERIALIZED_NAME_UNIQUE_MEETING_ID)
  private Long uniqueMeetingId;

  public MeetingByOrganizer() {
  }

  public MeetingByOrganizer conferenceCallInfo(String conferenceCallInfo) {
    this.conferenceCallInfo = conferenceCallInfo;
    return this;
  }

  /**
   * Audio options for the meeting
   * @return conferenceCallInfo
   */
  @javax.annotation.Nonnull
  public String getConferenceCallInfo() {
    return conferenceCallInfo;
  }

  public void setConferenceCallInfo(String conferenceCallInfo) {
    this.conferenceCallInfo = conferenceCallInfo;
  }


  public MeetingByOrganizer createTime(OffsetDateTime createTime) {
    this.createTime = createTime;
    return this;
  }

  /**
   * DEPRECATED. Returns an empty string &#39;&#39;
   * @return createTime
   */
  @javax.annotation.Nonnull
  public OffsetDateTime getCreateTime() {
    return createTime;
  }

  public void setCreateTime(OffsetDateTime createTime) {
    this.createTime = createTime;
  }


  public MeetingByOrganizer endTime(OffsetDateTime endTime) {
    this.endTime = endTime;
    return this;
  }

  /**
   * The ending time of the meeting
   * @return endTime
   */
  @javax.annotation.Nonnull
  public OffsetDateTime getEndTime() {
    return endTime;
  }

  public void setEndTime(OffsetDateTime endTime) {
    this.endTime = endTime;
  }


  public MeetingByOrganizer maxParticipants(Integer maxParticipants) {
    this.maxParticipants = maxParticipants;
    return this;
  }

  /**
   * The maximum number of participants allowed at the meeting
   * @return maxParticipants
   */
  @javax.annotation.Nonnull
  public Integer getMaxParticipants() {
    return maxParticipants;
  }

  public void setMaxParticipants(Integer maxParticipants) {
    this.maxParticipants = maxParticipants;
  }


  public MeetingByOrganizer meetingType(MeetingType meetingType) {
    this.meetingType = meetingType;
    return this;
  }

  /**
   * Get meetingType
   * @return meetingType
   */
  @javax.annotation.Nonnull
  public MeetingType getMeetingType() {
    return meetingType;
  }

  public void setMeetingType(MeetingType meetingType) {
    this.meetingType = meetingType;
  }


  public MeetingByOrganizer meetingid(Long meetingid) {
    this.meetingid = meetingid;
    return this;
  }

  /**
   * The meeting ID
   * @return meetingid
   */
  @javax.annotation.Nonnull
  public Long getMeetingid() {
    return meetingid;
  }

  public void setMeetingid(Long meetingid) {
    this.meetingid = meetingid;
  }


  public MeetingByOrganizer passwordRequired(Boolean passwordRequired) {
    this.passwordRequired = passwordRequired;
    return this;
  }

  /**
   * Indicates whether a password is required to join the meeting
   * @return passwordRequired
   */
  @javax.annotation.Nonnull
  public Boolean getPasswordRequired() {
    return passwordRequired;
  }

  public void setPasswordRequired(Boolean passwordRequired) {
    this.passwordRequired = passwordRequired;
  }


  public MeetingByOrganizer startTime(OffsetDateTime startTime) {
    this.startTime = startTime;
    return this;
  }

  /**
   * The starting time of the meeting
   * @return startTime
   */
  @javax.annotation.Nonnull
  public OffsetDateTime getStartTime() {
    return startTime;
  }

  public void setStartTime(OffsetDateTime startTime) {
    this.startTime = startTime;
  }


  public MeetingByOrganizer status(MeetingStatus status) {
    this.status = status;
    return this;
  }

  /**
   * Get status
   * @return status
   */
  @javax.annotation.Nonnull
  public MeetingStatus getStatus() {
    return status;
  }

  public void setStatus(MeetingStatus status) {
    this.status = status;
  }


  public MeetingByOrganizer subject(String subject) {
    this.subject = subject;
    return this;
  }

  /**
   * The subject of the meeting
   * @return subject
   */
  @javax.annotation.Nonnull
  public String getSubject() {
    return subject;
  }

  public void setSubject(String subject) {
    this.subject = subject;
  }


  public MeetingByOrganizer uniqueMeetingId(Long uniqueMeetingId) {
    this.uniqueMeetingId = uniqueMeetingId;
    return this;
  }

  /**
   * A unique ID for the meeting
   * @return uniqueMeetingId
   */
  @javax.annotation.Nonnull
  public Long getUniqueMeetingId() {
    return uniqueMeetingId;
  }

  public void setUniqueMeetingId(Long uniqueMeetingId) {
    this.uniqueMeetingId = uniqueMeetingId;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    MeetingByOrganizer meetingByOrganizer = (MeetingByOrganizer) o;
    return Objects.equals(this.conferenceCallInfo, meetingByOrganizer.conferenceCallInfo) &&
        Objects.equals(this.createTime, meetingByOrganizer.createTime) &&
        Objects.equals(this.endTime, meetingByOrganizer.endTime) &&
        Objects.equals(this.maxParticipants, meetingByOrganizer.maxParticipants) &&
        Objects.equals(this.meetingType, meetingByOrganizer.meetingType) &&
        Objects.equals(this.meetingid, meetingByOrganizer.meetingid) &&
        Objects.equals(this.passwordRequired, meetingByOrganizer.passwordRequired) &&
        Objects.equals(this.startTime, meetingByOrganizer.startTime) &&
        Objects.equals(this.status, meetingByOrganizer.status) &&
        Objects.equals(this.subject, meetingByOrganizer.subject) &&
        Objects.equals(this.uniqueMeetingId, meetingByOrganizer.uniqueMeetingId);
  }

  @Override
  public int hashCode() {
    return Objects.hash(conferenceCallInfo, createTime, endTime, maxParticipants, meetingType, meetingid, passwordRequired, startTime, status, subject, uniqueMeetingId);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class MeetingByOrganizer {\n");
    sb.append("    conferenceCallInfo: ").append(toIndentedString(conferenceCallInfo)).append("\n");
    sb.append("    createTime: ").append(toIndentedString(createTime)).append("\n");
    sb.append("    endTime: ").append(toIndentedString(endTime)).append("\n");
    sb.append("    maxParticipants: ").append(toIndentedString(maxParticipants)).append("\n");
    sb.append("    meetingType: ").append(toIndentedString(meetingType)).append("\n");
    sb.append("    meetingid: ").append(toIndentedString(meetingid)).append("\n");
    sb.append("    passwordRequired: ").append(toIndentedString(passwordRequired)).append("\n");
    sb.append("    startTime: ").append(toIndentedString(startTime)).append("\n");
    sb.append("    status: ").append(toIndentedString(status)).append("\n");
    sb.append("    subject: ").append(toIndentedString(subject)).append("\n");
    sb.append("    uniqueMeetingId: ").append(toIndentedString(uniqueMeetingId)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("conferenceCallInfo");
    openapiFields.add("createTime");
    openapiFields.add("endTime");
    openapiFields.add("maxParticipants");
    openapiFields.add("meetingType");
    openapiFields.add("meetingid");
    openapiFields.add("passwordRequired");
    openapiFields.add("startTime");
    openapiFields.add("status");
    openapiFields.add("subject");
    openapiFields.add("uniqueMeetingId");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("conferenceCallInfo");
    openapiRequiredFields.add("createTime");
    openapiRequiredFields.add("endTime");
    openapiRequiredFields.add("maxParticipants");
    openapiRequiredFields.add("meetingType");
    openapiRequiredFields.add("meetingid");
    openapiRequiredFields.add("passwordRequired");
    openapiRequiredFields.add("startTime");
    openapiRequiredFields.add("status");
    openapiRequiredFields.add("subject");
    openapiRequiredFields.add("uniqueMeetingId");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to MeetingByOrganizer
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!MeetingByOrganizer.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in MeetingByOrganizer is not found in the empty JSON string", MeetingByOrganizer.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!MeetingByOrganizer.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `MeetingByOrganizer` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : MeetingByOrganizer.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if (!jsonObj.get("conferenceCallInfo").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `conferenceCallInfo` to be a primitive type in the JSON string but got `%s`", jsonObj.get("conferenceCallInfo").toString()));
      }
      // validate the required field `meetingType`
      MeetingType.validateJsonElement(jsonObj.get("meetingType"));
      // validate the required field `status`
      MeetingStatus.validateJsonElement(jsonObj.get("status"));
      if (!jsonObj.get("subject").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `subject` to be a primitive type in the JSON string but got `%s`", jsonObj.get("subject").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!MeetingByOrganizer.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'MeetingByOrganizer' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<MeetingByOrganizer> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(MeetingByOrganizer.class));

       return (TypeAdapter<T>) new TypeAdapter<MeetingByOrganizer>() {
           @Override
           public void write(JsonWriter out, MeetingByOrganizer value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public MeetingByOrganizer read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of MeetingByOrganizer given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of MeetingByOrganizer
   * @throws IOException if the JSON string is invalid with respect to MeetingByOrganizer
   */
  public static MeetingByOrganizer fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, MeetingByOrganizer.class);
  }

  /**
   * Convert an instance of MeetingByOrganizer to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

