/**
 * GoToMeeting
 * <br>The GoToMeeting API provides seamless integration of GoToMeeting provisioning and meeting management into your existing infrastructure or third party applications.<br><br>For customers, the ability to add, suspend or delete an organizer in your GoToMeeting Corporate account from within your primary management systems simplifies and streamlines the entire process of account management. The ability to monitor meeting schedules, history and active meeting status allows managers to leverage GoToMeeting activities through your primary applications.<br><br>For third parties, the ability to create, update or delete a meeting from within your application makes real-time collaboration possible for your customers. The ability to update meeting schedules, view history and scheduled meetings, and view attendees from past meetings allows you to enhance your users' experience and the value of your applications.
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: developer-support@citrixonline.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAIUpcomingMeeting.h
 *
 * Describes an upcoming meeting.
 */

#ifndef OAIUpcomingMeeting_H
#define OAIUpcomingMeeting_H

#include <QJsonObject>

#include "OAIMeetingStatus.h"
#include "OAIMeetingType.h"
#include <QDateTime>
#include <QString>

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {

class OAIUpcomingMeeting : public OAIObject {
public:
    OAIUpcomingMeeting();
    OAIUpcomingMeeting(QString json);
    ~OAIUpcomingMeeting() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    QString getAccountKey() const;
    void setAccountKey(const QString &account_key);
    bool is_account_key_Set() const;
    bool is_account_key_Valid() const;

    QString getConferenceCallInfo() const;
    void setConferenceCallInfo(const QString &conference_call_info);
    bool is_conference_call_info_Set() const;
    bool is_conference_call_info_Valid() const;

    QString getEmail() const;
    void setEmail(const QString &email);
    bool is_email_Set() const;
    bool is_email_Valid() const;

    QDateTime getEndTime() const;
    void setEndTime(const QDateTime &end_time);
    bool is_end_time_Set() const;
    bool is_end_time_Valid() const;

    QString getFirstName() const;
    void setFirstName(const QString &first_name);
    bool is_first_name_Set() const;
    bool is_first_name_Valid() const;

    QString getLastName() const;
    void setLastName(const QString &last_name);
    bool is_last_name_Set() const;
    bool is_last_name_Valid() const;

    QString getLocale() const;
    void setLocale(const QString &locale);
    bool is_locale_Set() const;
    bool is_locale_Valid() const;

    QString getMeetingId() const;
    void setMeetingId(const QString &meeting_id);
    bool is_meeting_id_Set() const;
    bool is_meeting_id_Valid() const;

    OAIMeetingType getMeetingType() const;
    void setMeetingType(const OAIMeetingType &meeting_type);
    bool is_meeting_type_Set() const;
    bool is_meeting_type_Valid() const;

    QString getOrganizerKey() const;
    void setOrganizerKey(const QString &organizer_key);
    bool is_organizer_key_Set() const;
    bool is_organizer_key_Valid() const;

    bool isPasswordRequired() const;
    void setPasswordRequired(const bool &password_required);
    bool is_password_required_Set() const;
    bool is_password_required_Valid() const;

    QDateTime getStartTime() const;
    void setStartTime(const QDateTime &start_time);
    bool is_start_time_Set() const;
    bool is_start_time_Valid() const;

    OAIMeetingStatus getStatus() const;
    void setStatus(const OAIMeetingStatus &status);
    bool is_status_Set() const;
    bool is_status_Valid() const;

    QString getSubject() const;
    void setSubject(const QString &subject);
    bool is_subject_Set() const;
    bool is_subject_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    QString m_account_key;
    bool m_account_key_isSet;
    bool m_account_key_isValid;

    QString m_conference_call_info;
    bool m_conference_call_info_isSet;
    bool m_conference_call_info_isValid;

    QString m_email;
    bool m_email_isSet;
    bool m_email_isValid;

    QDateTime m_end_time;
    bool m_end_time_isSet;
    bool m_end_time_isValid;

    QString m_first_name;
    bool m_first_name_isSet;
    bool m_first_name_isValid;

    QString m_last_name;
    bool m_last_name_isSet;
    bool m_last_name_isValid;

    QString m_locale;
    bool m_locale_isSet;
    bool m_locale_isValid;

    QString m_meeting_id;
    bool m_meeting_id_isSet;
    bool m_meeting_id_isValid;

    OAIMeetingType m_meeting_type;
    bool m_meeting_type_isSet;
    bool m_meeting_type_isValid;

    QString m_organizer_key;
    bool m_organizer_key_isSet;
    bool m_organizer_key_isValid;

    bool m_password_required;
    bool m_password_required_isSet;
    bool m_password_required_isValid;

    QDateTime m_start_time;
    bool m_start_time_isSet;
    bool m_start_time_isValid;

    OAIMeetingStatus m_status;
    bool m_status_isSet;
    bool m_status_isValid;

    QString m_subject;
    bool m_subject_isSet;
    bool m_subject_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAIUpcomingMeeting)

#endif // OAIUpcomingMeeting_H
