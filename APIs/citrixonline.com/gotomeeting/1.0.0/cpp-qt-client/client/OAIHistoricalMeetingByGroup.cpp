/**
 * GoToMeeting
 * <br>The GoToMeeting API provides seamless integration of GoToMeeting provisioning and meeting management into your existing infrastructure or third party applications.<br><br>For customers, the ability to add, suspend or delete an organizer in your GoToMeeting Corporate account from within your primary management systems simplifies and streamlines the entire process of account management. The ability to monitor meeting schedules, history and active meeting status allows managers to leverage GoToMeeting activities through your primary applications.<br><br>For third parties, the ability to create, update or delete a meeting from within your application makes real-time collaboration possible for your customers. The ability to update meeting schedules, view history and scheduled meetings, and view attendees from past meetings allows you to enhance your users' experience and the value of your applications.
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: developer-support@citrixonline.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIHistoricalMeetingByGroup.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIHistoricalMeetingByGroup::OAIHistoricalMeetingByGroup(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIHistoricalMeetingByGroup::OAIHistoricalMeetingByGroup() {
    this->initializeModel();
}

OAIHistoricalMeetingByGroup::~OAIHistoricalMeetingByGroup() {}

void OAIHistoricalMeetingByGroup::initializeModel() {

    m_account_key_isSet = false;
    m_account_key_isValid = false;

    m_duration_isSet = false;
    m_duration_isValid = false;

    m_email_isSet = false;
    m_email_isValid = false;

    m_end_time_isSet = false;
    m_end_time_isValid = false;

    m_first_name_isSet = false;
    m_first_name_isValid = false;

    m_group_name_isSet = false;
    m_group_name_isValid = false;

    m_last_name_isSet = false;
    m_last_name_isValid = false;

    m_locale_isSet = false;
    m_locale_isValid = false;

    m_meeting_id_isSet = false;
    m_meeting_id_isValid = false;

    m_meeting_type_isSet = false;
    m_meeting_type_isValid = false;

    m_num_attendees_isSet = false;
    m_num_attendees_isValid = false;

    m_organizer_key_isSet = false;
    m_organizer_key_isValid = false;

    m_start_time_isSet = false;
    m_start_time_isValid = false;

    m_subject_isSet = false;
    m_subject_isValid = false;
}

void OAIHistoricalMeetingByGroup::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIHistoricalMeetingByGroup::fromJsonObject(QJsonObject json) {

    m_account_key_isValid = ::OpenAPI::fromJsonValue(m_account_key, json[QString("accountKey")]);
    m_account_key_isSet = !json[QString("accountKey")].isNull() && m_account_key_isValid;

    m_duration_isValid = ::OpenAPI::fromJsonValue(m_duration, json[QString("duration")]);
    m_duration_isSet = !json[QString("duration")].isNull() && m_duration_isValid;

    m_email_isValid = ::OpenAPI::fromJsonValue(m_email, json[QString("email")]);
    m_email_isSet = !json[QString("email")].isNull() && m_email_isValid;

    m_end_time_isValid = ::OpenAPI::fromJsonValue(m_end_time, json[QString("endTime")]);
    m_end_time_isSet = !json[QString("endTime")].isNull() && m_end_time_isValid;

    m_first_name_isValid = ::OpenAPI::fromJsonValue(m_first_name, json[QString("firstName")]);
    m_first_name_isSet = !json[QString("firstName")].isNull() && m_first_name_isValid;

    m_group_name_isValid = ::OpenAPI::fromJsonValue(m_group_name, json[QString("groupName")]);
    m_group_name_isSet = !json[QString("groupName")].isNull() && m_group_name_isValid;

    m_last_name_isValid = ::OpenAPI::fromJsonValue(m_last_name, json[QString("lastName")]);
    m_last_name_isSet = !json[QString("lastName")].isNull() && m_last_name_isValid;

    m_locale_isValid = ::OpenAPI::fromJsonValue(m_locale, json[QString("locale")]);
    m_locale_isSet = !json[QString("locale")].isNull() && m_locale_isValid;

    m_meeting_id_isValid = ::OpenAPI::fromJsonValue(m_meeting_id, json[QString("meetingId")]);
    m_meeting_id_isSet = !json[QString("meetingId")].isNull() && m_meeting_id_isValid;

    m_meeting_type_isValid = ::OpenAPI::fromJsonValue(m_meeting_type, json[QString("meetingType")]);
    m_meeting_type_isSet = !json[QString("meetingType")].isNull() && m_meeting_type_isValid;

    m_num_attendees_isValid = ::OpenAPI::fromJsonValue(m_num_attendees, json[QString("numAttendees")]);
    m_num_attendees_isSet = !json[QString("numAttendees")].isNull() && m_num_attendees_isValid;

    m_organizer_key_isValid = ::OpenAPI::fromJsonValue(m_organizer_key, json[QString("organizerKey")]);
    m_organizer_key_isSet = !json[QString("organizerKey")].isNull() && m_organizer_key_isValid;

    m_start_time_isValid = ::OpenAPI::fromJsonValue(m_start_time, json[QString("startTime")]);
    m_start_time_isSet = !json[QString("startTime")].isNull() && m_start_time_isValid;

    m_subject_isValid = ::OpenAPI::fromJsonValue(m_subject, json[QString("subject")]);
    m_subject_isSet = !json[QString("subject")].isNull() && m_subject_isValid;
}

QString OAIHistoricalMeetingByGroup::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIHistoricalMeetingByGroup::asJsonObject() const {
    QJsonObject obj;
    if (m_account_key_isSet) {
        obj.insert(QString("accountKey"), ::OpenAPI::toJsonValue(m_account_key));
    }
    if (m_duration_isSet) {
        obj.insert(QString("duration"), ::OpenAPI::toJsonValue(m_duration));
    }
    if (m_email_isSet) {
        obj.insert(QString("email"), ::OpenAPI::toJsonValue(m_email));
    }
    if (m_end_time_isSet) {
        obj.insert(QString("endTime"), ::OpenAPI::toJsonValue(m_end_time));
    }
    if (m_first_name_isSet) {
        obj.insert(QString("firstName"), ::OpenAPI::toJsonValue(m_first_name));
    }
    if (m_group_name_isSet) {
        obj.insert(QString("groupName"), ::OpenAPI::toJsonValue(m_group_name));
    }
    if (m_last_name_isSet) {
        obj.insert(QString("lastName"), ::OpenAPI::toJsonValue(m_last_name));
    }
    if (m_locale_isSet) {
        obj.insert(QString("locale"), ::OpenAPI::toJsonValue(m_locale));
    }
    if (m_meeting_id_isSet) {
        obj.insert(QString("meetingId"), ::OpenAPI::toJsonValue(m_meeting_id));
    }
    if (m_meeting_type.isSet()) {
        obj.insert(QString("meetingType"), ::OpenAPI::toJsonValue(m_meeting_type));
    }
    if (m_num_attendees_isSet) {
        obj.insert(QString("numAttendees"), ::OpenAPI::toJsonValue(m_num_attendees));
    }
    if (m_organizer_key_isSet) {
        obj.insert(QString("organizerKey"), ::OpenAPI::toJsonValue(m_organizer_key));
    }
    if (m_start_time_isSet) {
        obj.insert(QString("startTime"), ::OpenAPI::toJsonValue(m_start_time));
    }
    if (m_subject_isSet) {
        obj.insert(QString("subject"), ::OpenAPI::toJsonValue(m_subject));
    }
    return obj;
}

QString OAIHistoricalMeetingByGroup::getAccountKey() const {
    return m_account_key;
}
void OAIHistoricalMeetingByGroup::setAccountKey(const QString &account_key) {
    m_account_key = account_key;
    m_account_key_isSet = true;
}

bool OAIHistoricalMeetingByGroup::is_account_key_Set() const{
    return m_account_key_isSet;
}

bool OAIHistoricalMeetingByGroup::is_account_key_Valid() const{
    return m_account_key_isValid;
}

QString OAIHistoricalMeetingByGroup::getDuration() const {
    return m_duration;
}
void OAIHistoricalMeetingByGroup::setDuration(const QString &duration) {
    m_duration = duration;
    m_duration_isSet = true;
}

bool OAIHistoricalMeetingByGroup::is_duration_Set() const{
    return m_duration_isSet;
}

bool OAIHistoricalMeetingByGroup::is_duration_Valid() const{
    return m_duration_isValid;
}

QString OAIHistoricalMeetingByGroup::getEmail() const {
    return m_email;
}
void OAIHistoricalMeetingByGroup::setEmail(const QString &email) {
    m_email = email;
    m_email_isSet = true;
}

bool OAIHistoricalMeetingByGroup::is_email_Set() const{
    return m_email_isSet;
}

bool OAIHistoricalMeetingByGroup::is_email_Valid() const{
    return m_email_isValid;
}

QDateTime OAIHistoricalMeetingByGroup::getEndTime() const {
    return m_end_time;
}
void OAIHistoricalMeetingByGroup::setEndTime(const QDateTime &end_time) {
    m_end_time = end_time;
    m_end_time_isSet = true;
}

bool OAIHistoricalMeetingByGroup::is_end_time_Set() const{
    return m_end_time_isSet;
}

bool OAIHistoricalMeetingByGroup::is_end_time_Valid() const{
    return m_end_time_isValid;
}

QString OAIHistoricalMeetingByGroup::getFirstName() const {
    return m_first_name;
}
void OAIHistoricalMeetingByGroup::setFirstName(const QString &first_name) {
    m_first_name = first_name;
    m_first_name_isSet = true;
}

bool OAIHistoricalMeetingByGroup::is_first_name_Set() const{
    return m_first_name_isSet;
}

bool OAIHistoricalMeetingByGroup::is_first_name_Valid() const{
    return m_first_name_isValid;
}

QString OAIHistoricalMeetingByGroup::getGroupName() const {
    return m_group_name;
}
void OAIHistoricalMeetingByGroup::setGroupName(const QString &group_name) {
    m_group_name = group_name;
    m_group_name_isSet = true;
}

bool OAIHistoricalMeetingByGroup::is_group_name_Set() const{
    return m_group_name_isSet;
}

bool OAIHistoricalMeetingByGroup::is_group_name_Valid() const{
    return m_group_name_isValid;
}

QString OAIHistoricalMeetingByGroup::getLastName() const {
    return m_last_name;
}
void OAIHistoricalMeetingByGroup::setLastName(const QString &last_name) {
    m_last_name = last_name;
    m_last_name_isSet = true;
}

bool OAIHistoricalMeetingByGroup::is_last_name_Set() const{
    return m_last_name_isSet;
}

bool OAIHistoricalMeetingByGroup::is_last_name_Valid() const{
    return m_last_name_isValid;
}

QString OAIHistoricalMeetingByGroup::getLocale() const {
    return m_locale;
}
void OAIHistoricalMeetingByGroup::setLocale(const QString &locale) {
    m_locale = locale;
    m_locale_isSet = true;
}

bool OAIHistoricalMeetingByGroup::is_locale_Set() const{
    return m_locale_isSet;
}

bool OAIHistoricalMeetingByGroup::is_locale_Valid() const{
    return m_locale_isValid;
}

QString OAIHistoricalMeetingByGroup::getMeetingId() const {
    return m_meeting_id;
}
void OAIHistoricalMeetingByGroup::setMeetingId(const QString &meeting_id) {
    m_meeting_id = meeting_id;
    m_meeting_id_isSet = true;
}

bool OAIHistoricalMeetingByGroup::is_meeting_id_Set() const{
    return m_meeting_id_isSet;
}

bool OAIHistoricalMeetingByGroup::is_meeting_id_Valid() const{
    return m_meeting_id_isValid;
}

OAIMeetingType OAIHistoricalMeetingByGroup::getMeetingType() const {
    return m_meeting_type;
}
void OAIHistoricalMeetingByGroup::setMeetingType(const OAIMeetingType &meeting_type) {
    m_meeting_type = meeting_type;
    m_meeting_type_isSet = true;
}

bool OAIHistoricalMeetingByGroup::is_meeting_type_Set() const{
    return m_meeting_type_isSet;
}

bool OAIHistoricalMeetingByGroup::is_meeting_type_Valid() const{
    return m_meeting_type_isValid;
}

QString OAIHistoricalMeetingByGroup::getNumAttendees() const {
    return m_num_attendees;
}
void OAIHistoricalMeetingByGroup::setNumAttendees(const QString &num_attendees) {
    m_num_attendees = num_attendees;
    m_num_attendees_isSet = true;
}

bool OAIHistoricalMeetingByGroup::is_num_attendees_Set() const{
    return m_num_attendees_isSet;
}

bool OAIHistoricalMeetingByGroup::is_num_attendees_Valid() const{
    return m_num_attendees_isValid;
}

QString OAIHistoricalMeetingByGroup::getOrganizerKey() const {
    return m_organizer_key;
}
void OAIHistoricalMeetingByGroup::setOrganizerKey(const QString &organizer_key) {
    m_organizer_key = organizer_key;
    m_organizer_key_isSet = true;
}

bool OAIHistoricalMeetingByGroup::is_organizer_key_Set() const{
    return m_organizer_key_isSet;
}

bool OAIHistoricalMeetingByGroup::is_organizer_key_Valid() const{
    return m_organizer_key_isValid;
}

QDateTime OAIHistoricalMeetingByGroup::getStartTime() const {
    return m_start_time;
}
void OAIHistoricalMeetingByGroup::setStartTime(const QDateTime &start_time) {
    m_start_time = start_time;
    m_start_time_isSet = true;
}

bool OAIHistoricalMeetingByGroup::is_start_time_Set() const{
    return m_start_time_isSet;
}

bool OAIHistoricalMeetingByGroup::is_start_time_Valid() const{
    return m_start_time_isValid;
}

QString OAIHistoricalMeetingByGroup::getSubject() const {
    return m_subject;
}
void OAIHistoricalMeetingByGroup::setSubject(const QString &subject) {
    m_subject = subject;
    m_subject_isSet = true;
}

bool OAIHistoricalMeetingByGroup::is_subject_Set() const{
    return m_subject_isSet;
}

bool OAIHistoricalMeetingByGroup::is_subject_Valid() const{
    return m_subject_isValid;
}

bool OAIHistoricalMeetingByGroup::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_account_key_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_duration_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_email_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_end_time_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_first_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_group_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_last_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_locale_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_meeting_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_meeting_type.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_num_attendees_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_organizer_key_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_start_time_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_subject_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIHistoricalMeetingByGroup::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_account_key_isValid && m_duration_isValid && m_email_isValid && m_end_time_isValid && m_first_name_isValid && m_group_name_isValid && m_last_name_isValid && m_locale_isValid && m_meeting_id_isValid && m_meeting_type_isValid && m_num_attendees_isValid && m_organizer_key_isValid && m_start_time_isValid && m_subject_isValid && true;
}

} // namespace OpenAPI
