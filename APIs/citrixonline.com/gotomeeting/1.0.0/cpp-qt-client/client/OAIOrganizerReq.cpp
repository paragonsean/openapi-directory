/**
 * GoToMeeting
 * <br>The GoToMeeting API provides seamless integration of GoToMeeting provisioning and meeting management into your existing infrastructure or third party applications.<br><br>For customers, the ability to add, suspend or delete an organizer in your GoToMeeting Corporate account from within your primary management systems simplifies and streamlines the entire process of account management. The ability to monitor meeting schedules, history and active meeting status allows managers to leverage GoToMeeting activities through your primary applications.<br><br>For third parties, the ability to create, update or delete a meeting from within your application makes real-time collaboration possible for your customers. The ability to update meeting schedules, view history and scheduled meetings, and view attendees from past meetings allows you to enhance your users' experience and the value of your applications.
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: developer-support@citrixonline.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIOrganizerReq.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIOrganizerReq::OAIOrganizerReq(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIOrganizerReq::OAIOrganizerReq() {
    this->initializeModel();
}

OAIOrganizerReq::~OAIOrganizerReq() {}

void OAIOrganizerReq::initializeModel() {

    m_first_name_isSet = false;
    m_first_name_isValid = false;

    m_last_name_isSet = false;
    m_last_name_isValid = false;

    m_organizer_email_isSet = false;
    m_organizer_email_isValid = false;

    m_product_type_isSet = false;
    m_product_type_isValid = false;
}

void OAIOrganizerReq::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIOrganizerReq::fromJsonObject(QJsonObject json) {

    m_first_name_isValid = ::OpenAPI::fromJsonValue(m_first_name, json[QString("firstName")]);
    m_first_name_isSet = !json[QString("firstName")].isNull() && m_first_name_isValid;

    m_last_name_isValid = ::OpenAPI::fromJsonValue(m_last_name, json[QString("lastName")]);
    m_last_name_isSet = !json[QString("lastName")].isNull() && m_last_name_isValid;

    m_organizer_email_isValid = ::OpenAPI::fromJsonValue(m_organizer_email, json[QString("organizerEmail")]);
    m_organizer_email_isSet = !json[QString("organizerEmail")].isNull() && m_organizer_email_isValid;

    m_product_type_isValid = ::OpenAPI::fromJsonValue(m_product_type, json[QString("productType")]);
    m_product_type_isSet = !json[QString("productType")].isNull() && m_product_type_isValid;
}

QString OAIOrganizerReq::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIOrganizerReq::asJsonObject() const {
    QJsonObject obj;
    if (m_first_name_isSet) {
        obj.insert(QString("firstName"), ::OpenAPI::toJsonValue(m_first_name));
    }
    if (m_last_name_isSet) {
        obj.insert(QString("lastName"), ::OpenAPI::toJsonValue(m_last_name));
    }
    if (m_organizer_email_isSet) {
        obj.insert(QString("organizerEmail"), ::OpenAPI::toJsonValue(m_organizer_email));
    }
    if (m_product_type.isSet()) {
        obj.insert(QString("productType"), ::OpenAPI::toJsonValue(m_product_type));
    }
    return obj;
}

QString OAIOrganizerReq::getFirstName() const {
    return m_first_name;
}
void OAIOrganizerReq::setFirstName(const QString &first_name) {
    m_first_name = first_name;
    m_first_name_isSet = true;
}

bool OAIOrganizerReq::is_first_name_Set() const{
    return m_first_name_isSet;
}

bool OAIOrganizerReq::is_first_name_Valid() const{
    return m_first_name_isValid;
}

QString OAIOrganizerReq::getLastName() const {
    return m_last_name;
}
void OAIOrganizerReq::setLastName(const QString &last_name) {
    m_last_name = last_name;
    m_last_name_isSet = true;
}

bool OAIOrganizerReq::is_last_name_Set() const{
    return m_last_name_isSet;
}

bool OAIOrganizerReq::is_last_name_Valid() const{
    return m_last_name_isValid;
}

QString OAIOrganizerReq::getOrganizerEmail() const {
    return m_organizer_email;
}
void OAIOrganizerReq::setOrganizerEmail(const QString &organizer_email) {
    m_organizer_email = organizer_email;
    m_organizer_email_isSet = true;
}

bool OAIOrganizerReq::is_organizer_email_Set() const{
    return m_organizer_email_isSet;
}

bool OAIOrganizerReq::is_organizer_email_Valid() const{
    return m_organizer_email_isValid;
}

OAIProduct OAIOrganizerReq::getProductType() const {
    return m_product_type;
}
void OAIOrganizerReq::setProductType(const OAIProduct &product_type) {
    m_product_type = product_type;
    m_product_type_isSet = true;
}

bool OAIOrganizerReq::is_product_type_Set() const{
    return m_product_type_isSet;
}

bool OAIOrganizerReq::is_product_type_Valid() const{
    return m_product_type_isValid;
}

bool OAIOrganizerReq::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_first_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_last_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_organizer_email_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_product_type.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIOrganizerReq::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_first_name_isValid && m_last_name_isValid && m_organizer_email_isValid && m_product_type_isValid && true;
}

} // namespace OpenAPI
