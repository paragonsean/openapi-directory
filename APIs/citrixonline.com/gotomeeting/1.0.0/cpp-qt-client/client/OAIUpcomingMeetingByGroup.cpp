/**
 * GoToMeeting
 * <br>The GoToMeeting API provides seamless integration of GoToMeeting provisioning and meeting management into your existing infrastructure or third party applications.<br><br>For customers, the ability to add, suspend or delete an organizer in your GoToMeeting Corporate account from within your primary management systems simplifies and streamlines the entire process of account management. The ability to monitor meeting schedules, history and active meeting status allows managers to leverage GoToMeeting activities through your primary applications.<br><br>For third parties, the ability to create, update or delete a meeting from within your application makes real-time collaboration possible for your customers. The ability to update meeting schedules, view history and scheduled meetings, and view attendees from past meetings allows you to enhance your users' experience and the value of your applications.
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: developer-support@citrixonline.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIUpcomingMeetingByGroup.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIUpcomingMeetingByGroup::OAIUpcomingMeetingByGroup(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIUpcomingMeetingByGroup::OAIUpcomingMeetingByGroup() {
    this->initializeModel();
}

OAIUpcomingMeetingByGroup::~OAIUpcomingMeetingByGroup() {}

void OAIUpcomingMeetingByGroup::initializeModel() {

    m_account_key_isSet = false;
    m_account_key_isValid = false;

    m_email_isSet = false;
    m_email_isValid = false;

    m_end_time_isSet = false;
    m_end_time_isValid = false;

    m_first_name_isSet = false;
    m_first_name_isValid = false;

    m_group_name_isSet = false;
    m_group_name_isValid = false;

    m_last_name_isSet = false;
    m_last_name_isValid = false;

    m_locale_isSet = false;
    m_locale_isValid = false;

    m_meeting_id_isSet = false;
    m_meeting_id_isValid = false;

    m_meeting_type_isSet = false;
    m_meeting_type_isValid = false;

    m_organizer_key_isSet = false;
    m_organizer_key_isValid = false;

    m_password_required_isSet = false;
    m_password_required_isValid = false;

    m_start_time_isSet = false;
    m_start_time_isValid = false;

    m_status_isSet = false;
    m_status_isValid = false;

    m_subject_isSet = false;
    m_subject_isValid = false;
}

void OAIUpcomingMeetingByGroup::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIUpcomingMeetingByGroup::fromJsonObject(QJsonObject json) {

    m_account_key_isValid = ::OpenAPI::fromJsonValue(m_account_key, json[QString("accountKey")]);
    m_account_key_isSet = !json[QString("accountKey")].isNull() && m_account_key_isValid;

    m_email_isValid = ::OpenAPI::fromJsonValue(m_email, json[QString("email")]);
    m_email_isSet = !json[QString("email")].isNull() && m_email_isValid;

    m_end_time_isValid = ::OpenAPI::fromJsonValue(m_end_time, json[QString("endTime")]);
    m_end_time_isSet = !json[QString("endTime")].isNull() && m_end_time_isValid;

    m_first_name_isValid = ::OpenAPI::fromJsonValue(m_first_name, json[QString("firstName")]);
    m_first_name_isSet = !json[QString("firstName")].isNull() && m_first_name_isValid;

    m_group_name_isValid = ::OpenAPI::fromJsonValue(m_group_name, json[QString("groupName")]);
    m_group_name_isSet = !json[QString("groupName")].isNull() && m_group_name_isValid;

    m_last_name_isValid = ::OpenAPI::fromJsonValue(m_last_name, json[QString("lastName")]);
    m_last_name_isSet = !json[QString("lastName")].isNull() && m_last_name_isValid;

    m_locale_isValid = ::OpenAPI::fromJsonValue(m_locale, json[QString("locale")]);
    m_locale_isSet = !json[QString("locale")].isNull() && m_locale_isValid;

    m_meeting_id_isValid = ::OpenAPI::fromJsonValue(m_meeting_id, json[QString("meetingId")]);
    m_meeting_id_isSet = !json[QString("meetingId")].isNull() && m_meeting_id_isValid;

    m_meeting_type_isValid = ::OpenAPI::fromJsonValue(m_meeting_type, json[QString("meetingType")]);
    m_meeting_type_isSet = !json[QString("meetingType")].isNull() && m_meeting_type_isValid;

    m_organizer_key_isValid = ::OpenAPI::fromJsonValue(m_organizer_key, json[QString("organizerKey")]);
    m_organizer_key_isSet = !json[QString("organizerKey")].isNull() && m_organizer_key_isValid;

    m_password_required_isValid = ::OpenAPI::fromJsonValue(m_password_required, json[QString("passwordRequired")]);
    m_password_required_isSet = !json[QString("passwordRequired")].isNull() && m_password_required_isValid;

    m_start_time_isValid = ::OpenAPI::fromJsonValue(m_start_time, json[QString("startTime")]);
    m_start_time_isSet = !json[QString("startTime")].isNull() && m_start_time_isValid;

    m_status_isValid = ::OpenAPI::fromJsonValue(m_status, json[QString("status")]);
    m_status_isSet = !json[QString("status")].isNull() && m_status_isValid;

    m_subject_isValid = ::OpenAPI::fromJsonValue(m_subject, json[QString("subject")]);
    m_subject_isSet = !json[QString("subject")].isNull() && m_subject_isValid;
}

QString OAIUpcomingMeetingByGroup::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIUpcomingMeetingByGroup::asJsonObject() const {
    QJsonObject obj;
    if (m_account_key_isSet) {
        obj.insert(QString("accountKey"), ::OpenAPI::toJsonValue(m_account_key));
    }
    if (m_email_isSet) {
        obj.insert(QString("email"), ::OpenAPI::toJsonValue(m_email));
    }
    if (m_end_time_isSet) {
        obj.insert(QString("endTime"), ::OpenAPI::toJsonValue(m_end_time));
    }
    if (m_first_name_isSet) {
        obj.insert(QString("firstName"), ::OpenAPI::toJsonValue(m_first_name));
    }
    if (m_group_name_isSet) {
        obj.insert(QString("groupName"), ::OpenAPI::toJsonValue(m_group_name));
    }
    if (m_last_name_isSet) {
        obj.insert(QString("lastName"), ::OpenAPI::toJsonValue(m_last_name));
    }
    if (m_locale_isSet) {
        obj.insert(QString("locale"), ::OpenAPI::toJsonValue(m_locale));
    }
    if (m_meeting_id_isSet) {
        obj.insert(QString("meetingId"), ::OpenAPI::toJsonValue(m_meeting_id));
    }
    if (m_meeting_type.isSet()) {
        obj.insert(QString("meetingType"), ::OpenAPI::toJsonValue(m_meeting_type));
    }
    if (m_organizer_key_isSet) {
        obj.insert(QString("organizerKey"), ::OpenAPI::toJsonValue(m_organizer_key));
    }
    if (m_password_required_isSet) {
        obj.insert(QString("passwordRequired"), ::OpenAPI::toJsonValue(m_password_required));
    }
    if (m_start_time_isSet) {
        obj.insert(QString("startTime"), ::OpenAPI::toJsonValue(m_start_time));
    }
    if (m_status.isSet()) {
        obj.insert(QString("status"), ::OpenAPI::toJsonValue(m_status));
    }
    if (m_subject_isSet) {
        obj.insert(QString("subject"), ::OpenAPI::toJsonValue(m_subject));
    }
    return obj;
}

QString OAIUpcomingMeetingByGroup::getAccountKey() const {
    return m_account_key;
}
void OAIUpcomingMeetingByGroup::setAccountKey(const QString &account_key) {
    m_account_key = account_key;
    m_account_key_isSet = true;
}

bool OAIUpcomingMeetingByGroup::is_account_key_Set() const{
    return m_account_key_isSet;
}

bool OAIUpcomingMeetingByGroup::is_account_key_Valid() const{
    return m_account_key_isValid;
}

QString OAIUpcomingMeetingByGroup::getEmail() const {
    return m_email;
}
void OAIUpcomingMeetingByGroup::setEmail(const QString &email) {
    m_email = email;
    m_email_isSet = true;
}

bool OAIUpcomingMeetingByGroup::is_email_Set() const{
    return m_email_isSet;
}

bool OAIUpcomingMeetingByGroup::is_email_Valid() const{
    return m_email_isValid;
}

QDateTime OAIUpcomingMeetingByGroup::getEndTime() const {
    return m_end_time;
}
void OAIUpcomingMeetingByGroup::setEndTime(const QDateTime &end_time) {
    m_end_time = end_time;
    m_end_time_isSet = true;
}

bool OAIUpcomingMeetingByGroup::is_end_time_Set() const{
    return m_end_time_isSet;
}

bool OAIUpcomingMeetingByGroup::is_end_time_Valid() const{
    return m_end_time_isValid;
}

QString OAIUpcomingMeetingByGroup::getFirstName() const {
    return m_first_name;
}
void OAIUpcomingMeetingByGroup::setFirstName(const QString &first_name) {
    m_first_name = first_name;
    m_first_name_isSet = true;
}

bool OAIUpcomingMeetingByGroup::is_first_name_Set() const{
    return m_first_name_isSet;
}

bool OAIUpcomingMeetingByGroup::is_first_name_Valid() const{
    return m_first_name_isValid;
}

QString OAIUpcomingMeetingByGroup::getGroupName() const {
    return m_group_name;
}
void OAIUpcomingMeetingByGroup::setGroupName(const QString &group_name) {
    m_group_name = group_name;
    m_group_name_isSet = true;
}

bool OAIUpcomingMeetingByGroup::is_group_name_Set() const{
    return m_group_name_isSet;
}

bool OAIUpcomingMeetingByGroup::is_group_name_Valid() const{
    return m_group_name_isValid;
}

QString OAIUpcomingMeetingByGroup::getLastName() const {
    return m_last_name;
}
void OAIUpcomingMeetingByGroup::setLastName(const QString &last_name) {
    m_last_name = last_name;
    m_last_name_isSet = true;
}

bool OAIUpcomingMeetingByGroup::is_last_name_Set() const{
    return m_last_name_isSet;
}

bool OAIUpcomingMeetingByGroup::is_last_name_Valid() const{
    return m_last_name_isValid;
}

QString OAIUpcomingMeetingByGroup::getLocale() const {
    return m_locale;
}
void OAIUpcomingMeetingByGroup::setLocale(const QString &locale) {
    m_locale = locale;
    m_locale_isSet = true;
}

bool OAIUpcomingMeetingByGroup::is_locale_Set() const{
    return m_locale_isSet;
}

bool OAIUpcomingMeetingByGroup::is_locale_Valid() const{
    return m_locale_isValid;
}

QString OAIUpcomingMeetingByGroup::getMeetingId() const {
    return m_meeting_id;
}
void OAIUpcomingMeetingByGroup::setMeetingId(const QString &meeting_id) {
    m_meeting_id = meeting_id;
    m_meeting_id_isSet = true;
}

bool OAIUpcomingMeetingByGroup::is_meeting_id_Set() const{
    return m_meeting_id_isSet;
}

bool OAIUpcomingMeetingByGroup::is_meeting_id_Valid() const{
    return m_meeting_id_isValid;
}

OAIMeetingType OAIUpcomingMeetingByGroup::getMeetingType() const {
    return m_meeting_type;
}
void OAIUpcomingMeetingByGroup::setMeetingType(const OAIMeetingType &meeting_type) {
    m_meeting_type = meeting_type;
    m_meeting_type_isSet = true;
}

bool OAIUpcomingMeetingByGroup::is_meeting_type_Set() const{
    return m_meeting_type_isSet;
}

bool OAIUpcomingMeetingByGroup::is_meeting_type_Valid() const{
    return m_meeting_type_isValid;
}

QString OAIUpcomingMeetingByGroup::getOrganizerKey() const {
    return m_organizer_key;
}
void OAIUpcomingMeetingByGroup::setOrganizerKey(const QString &organizer_key) {
    m_organizer_key = organizer_key;
    m_organizer_key_isSet = true;
}

bool OAIUpcomingMeetingByGroup::is_organizer_key_Set() const{
    return m_organizer_key_isSet;
}

bool OAIUpcomingMeetingByGroup::is_organizer_key_Valid() const{
    return m_organizer_key_isValid;
}

bool OAIUpcomingMeetingByGroup::isPasswordRequired() const {
    return m_password_required;
}
void OAIUpcomingMeetingByGroup::setPasswordRequired(const bool &password_required) {
    m_password_required = password_required;
    m_password_required_isSet = true;
}

bool OAIUpcomingMeetingByGroup::is_password_required_Set() const{
    return m_password_required_isSet;
}

bool OAIUpcomingMeetingByGroup::is_password_required_Valid() const{
    return m_password_required_isValid;
}

QDateTime OAIUpcomingMeetingByGroup::getStartTime() const {
    return m_start_time;
}
void OAIUpcomingMeetingByGroup::setStartTime(const QDateTime &start_time) {
    m_start_time = start_time;
    m_start_time_isSet = true;
}

bool OAIUpcomingMeetingByGroup::is_start_time_Set() const{
    return m_start_time_isSet;
}

bool OAIUpcomingMeetingByGroup::is_start_time_Valid() const{
    return m_start_time_isValid;
}

OAIMeetingStatus OAIUpcomingMeetingByGroup::getStatus() const {
    return m_status;
}
void OAIUpcomingMeetingByGroup::setStatus(const OAIMeetingStatus &status) {
    m_status = status;
    m_status_isSet = true;
}

bool OAIUpcomingMeetingByGroup::is_status_Set() const{
    return m_status_isSet;
}

bool OAIUpcomingMeetingByGroup::is_status_Valid() const{
    return m_status_isValid;
}

QString OAIUpcomingMeetingByGroup::getSubject() const {
    return m_subject;
}
void OAIUpcomingMeetingByGroup::setSubject(const QString &subject) {
    m_subject = subject;
    m_subject_isSet = true;
}

bool OAIUpcomingMeetingByGroup::is_subject_Set() const{
    return m_subject_isSet;
}

bool OAIUpcomingMeetingByGroup::is_subject_Valid() const{
    return m_subject_isValid;
}

bool OAIUpcomingMeetingByGroup::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_account_key_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_email_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_end_time_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_first_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_group_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_last_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_locale_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_meeting_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_meeting_type.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_organizer_key_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_password_required_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_start_time_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_status.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_subject_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIUpcomingMeetingByGroup::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_account_key_isValid && m_email_isValid && m_end_time_isValid && m_first_name_isValid && m_group_name_isValid && m_last_name_isValid && m_locale_isValid && m_meeting_id_isValid && m_meeting_type_isValid && m_organizer_key_isValid && m_password_required_isValid && m_start_time_isValid && m_subject_isValid && true;
}

} // namespace OpenAPI
