/**
 * GoToMeeting
 * <br>The GoToMeeting API provides seamless integration of GoToMeeting provisioning and meeting management into your existing infrastructure or third party applications.<br><br>For customers, the ability to add, suspend or delete an organizer in your GoToMeeting Corporate account from within your primary management systems simplifies and streamlines the entire process of account management. The ability to monitor meeting schedules, history and active meeting status allows managers to leverage GoToMeeting activities through your primary applications.<br><br>For third parties, the ability to create, update or delete a meeting from within your application makes real-time collaboration possible for your customers. The ability to update meeting schedules, view history and scheduled meetings, and view attendees from past meetings allows you to enhance your users' experience and the value of your applications.
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: developer-support@citrixonline.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIOrganizerByGroup.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIOrganizerByGroup::OAIOrganizerByGroup(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIOrganizerByGroup::OAIOrganizerByGroup() {
    this->initializeModel();
}

OAIOrganizerByGroup::~OAIOrganizerByGroup() {}

void OAIOrganizerByGroup::initializeModel() {

    m_email_isSet = false;
    m_email_isValid = false;

    m_first_name_isSet = false;
    m_first_name_isValid = false;

    m_group_id_isSet = false;
    m_group_id_isValid = false;

    m_group_name_isSet = false;
    m_group_name_isValid = false;

    m_last_name_isSet = false;
    m_last_name_isValid = false;

    m_max_num_attendees_allowed_isSet = false;
    m_max_num_attendees_allowed_isValid = false;

    m_organizer_key_isSet = false;
    m_organizer_key_isValid = false;

    m_products_isSet = false;
    m_products_isValid = false;

    m_status_isSet = false;
    m_status_isValid = false;
}

void OAIOrganizerByGroup::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIOrganizerByGroup::fromJsonObject(QJsonObject json) {

    m_email_isValid = ::OpenAPI::fromJsonValue(m_email, json[QString("email")]);
    m_email_isSet = !json[QString("email")].isNull() && m_email_isValid;

    m_first_name_isValid = ::OpenAPI::fromJsonValue(m_first_name, json[QString("firstName")]);
    m_first_name_isSet = !json[QString("firstName")].isNull() && m_first_name_isValid;

    m_group_id_isValid = ::OpenAPI::fromJsonValue(m_group_id, json[QString("groupId")]);
    m_group_id_isSet = !json[QString("groupId")].isNull() && m_group_id_isValid;

    m_group_name_isValid = ::OpenAPI::fromJsonValue(m_group_name, json[QString("groupName")]);
    m_group_name_isSet = !json[QString("groupName")].isNull() && m_group_name_isValid;

    m_last_name_isValid = ::OpenAPI::fromJsonValue(m_last_name, json[QString("lastName")]);
    m_last_name_isSet = !json[QString("lastName")].isNull() && m_last_name_isValid;

    m_max_num_attendees_allowed_isValid = ::OpenAPI::fromJsonValue(m_max_num_attendees_allowed, json[QString("maxNumAttendeesAllowed")]);
    m_max_num_attendees_allowed_isSet = !json[QString("maxNumAttendeesAllowed")].isNull() && m_max_num_attendees_allowed_isValid;

    m_organizer_key_isValid = ::OpenAPI::fromJsonValue(m_organizer_key, json[QString("organizerKey")]);
    m_organizer_key_isSet = !json[QString("organizerKey")].isNull() && m_organizer_key_isValid;

    m_products_isValid = ::OpenAPI::fromJsonValue(m_products, json[QString("products")]);
    m_products_isSet = !json[QString("products")].isNull() && m_products_isValid;

    m_status_isValid = ::OpenAPI::fromJsonValue(m_status, json[QString("status")]);
    m_status_isSet = !json[QString("status")].isNull() && m_status_isValid;
}

QString OAIOrganizerByGroup::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIOrganizerByGroup::asJsonObject() const {
    QJsonObject obj;
    if (m_email_isSet) {
        obj.insert(QString("email"), ::OpenAPI::toJsonValue(m_email));
    }
    if (m_first_name_isSet) {
        obj.insert(QString("firstName"), ::OpenAPI::toJsonValue(m_first_name));
    }
    if (m_group_id_isSet) {
        obj.insert(QString("groupId"), ::OpenAPI::toJsonValue(m_group_id));
    }
    if (m_group_name_isSet) {
        obj.insert(QString("groupName"), ::OpenAPI::toJsonValue(m_group_name));
    }
    if (m_last_name_isSet) {
        obj.insert(QString("lastName"), ::OpenAPI::toJsonValue(m_last_name));
    }
    if (m_max_num_attendees_allowed_isSet) {
        obj.insert(QString("maxNumAttendeesAllowed"), ::OpenAPI::toJsonValue(m_max_num_attendees_allowed));
    }
    if (m_organizer_key_isSet) {
        obj.insert(QString("organizerKey"), ::OpenAPI::toJsonValue(m_organizer_key));
    }
    if (m_products.size() > 0) {
        obj.insert(QString("products"), ::OpenAPI::toJsonValue(m_products));
    }
    if (m_status.isSet()) {
        obj.insert(QString("status"), ::OpenAPI::toJsonValue(m_status));
    }
    return obj;
}

QString OAIOrganizerByGroup::getEmail() const {
    return m_email;
}
void OAIOrganizerByGroup::setEmail(const QString &email) {
    m_email = email;
    m_email_isSet = true;
}

bool OAIOrganizerByGroup::is_email_Set() const{
    return m_email_isSet;
}

bool OAIOrganizerByGroup::is_email_Valid() const{
    return m_email_isValid;
}

QString OAIOrganizerByGroup::getFirstName() const {
    return m_first_name;
}
void OAIOrganizerByGroup::setFirstName(const QString &first_name) {
    m_first_name = first_name;
    m_first_name_isSet = true;
}

bool OAIOrganizerByGroup::is_first_name_Set() const{
    return m_first_name_isSet;
}

bool OAIOrganizerByGroup::is_first_name_Valid() const{
    return m_first_name_isValid;
}

qint64 OAIOrganizerByGroup::getGroupId() const {
    return m_group_id;
}
void OAIOrganizerByGroup::setGroupId(const qint64 &group_id) {
    m_group_id = group_id;
    m_group_id_isSet = true;
}

bool OAIOrganizerByGroup::is_group_id_Set() const{
    return m_group_id_isSet;
}

bool OAIOrganizerByGroup::is_group_id_Valid() const{
    return m_group_id_isValid;
}

QString OAIOrganizerByGroup::getGroupName() const {
    return m_group_name;
}
void OAIOrganizerByGroup::setGroupName(const QString &group_name) {
    m_group_name = group_name;
    m_group_name_isSet = true;
}

bool OAIOrganizerByGroup::is_group_name_Set() const{
    return m_group_name_isSet;
}

bool OAIOrganizerByGroup::is_group_name_Valid() const{
    return m_group_name_isValid;
}

QString OAIOrganizerByGroup::getLastName() const {
    return m_last_name;
}
void OAIOrganizerByGroup::setLastName(const QString &last_name) {
    m_last_name = last_name;
    m_last_name_isSet = true;
}

bool OAIOrganizerByGroup::is_last_name_Set() const{
    return m_last_name_isSet;
}

bool OAIOrganizerByGroup::is_last_name_Valid() const{
    return m_last_name_isValid;
}

qint32 OAIOrganizerByGroup::getMaxNumAttendeesAllowed() const {
    return m_max_num_attendees_allowed;
}
void OAIOrganizerByGroup::setMaxNumAttendeesAllowed(const qint32 &max_num_attendees_allowed) {
    m_max_num_attendees_allowed = max_num_attendees_allowed;
    m_max_num_attendees_allowed_isSet = true;
}

bool OAIOrganizerByGroup::is_max_num_attendees_allowed_Set() const{
    return m_max_num_attendees_allowed_isSet;
}

bool OAIOrganizerByGroup::is_max_num_attendees_allowed_Valid() const{
    return m_max_num_attendees_allowed_isValid;
}

qint64 OAIOrganizerByGroup::getOrganizerKey() const {
    return m_organizer_key;
}
void OAIOrganizerByGroup::setOrganizerKey(const qint64 &organizer_key) {
    m_organizer_key = organizer_key;
    m_organizer_key_isSet = true;
}

bool OAIOrganizerByGroup::is_organizer_key_Set() const{
    return m_organizer_key_isSet;
}

bool OAIOrganizerByGroup::is_organizer_key_Valid() const{
    return m_organizer_key_isValid;
}

QList<OAIProduct> OAIOrganizerByGroup::getProducts() const {
    return m_products;
}
void OAIOrganizerByGroup::setProducts(const QList<OAIProduct> &products) {
    m_products = products;
    m_products_isSet = true;
}

bool OAIOrganizerByGroup::is_products_Set() const{
    return m_products_isSet;
}

bool OAIOrganizerByGroup::is_products_Valid() const{
    return m_products_isValid;
}

OAIStatus OAIOrganizerByGroup::getStatus() const {
    return m_status;
}
void OAIOrganizerByGroup::setStatus(const OAIStatus &status) {
    m_status = status;
    m_status_isSet = true;
}

bool OAIOrganizerByGroup::is_status_Set() const{
    return m_status_isSet;
}

bool OAIOrganizerByGroup::is_status_Valid() const{
    return m_status_isValid;
}

bool OAIOrganizerByGroup::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_email_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_first_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_group_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_group_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_last_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_max_num_attendees_allowed_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_organizer_key_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_products.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_status.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIOrganizerByGroup::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_email_isValid && m_first_name_isValid && m_group_id_isValid && m_group_name_isValid && m_last_name_isValid && m_max_num_attendees_allowed_isValid && m_organizer_key_isValid && m_products_isValid && m_status_isValid && true;
}

} // namespace OpenAPI
