/**
 * GoToMeeting
 * <br>The GoToMeeting API provides seamless integration of GoToMeeting provisioning and meeting management into your existing infrastructure or third party applications.<br><br>For customers, the ability to add, suspend or delete an organizer in your GoToMeeting Corporate account from within your primary management systems simplifies and streamlines the entire process of account management. The ability to monitor meeting schedules, history and active meeting status allows managers to leverage GoToMeeting activities through your primary applications.<br><br>For third parties, the ability to create, update or delete a meeting from within your application makes real-time collaboration possible for your customers. The ability to update meeting schedules, view history and scheduled meetings, and view attendees from past meetings allows you to enhance your users' experience and the value of your applications.
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: developer-support@citrixonline.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAIMeetingByOrganizer.h
 *
 * Describes a meeting scheduled by a specified organizer
 */

#ifndef OAIMeetingByOrganizer_H
#define OAIMeetingByOrganizer_H

#include <QJsonObject>

#include "OAIMeetingStatus.h"
#include "OAIMeetingType.h"
#include <QDateTime>
#include <QString>

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {

class OAIMeetingByOrganizer : public OAIObject {
public:
    OAIMeetingByOrganizer();
    OAIMeetingByOrganizer(QString json);
    ~OAIMeetingByOrganizer() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    QString getConferenceCallInfo() const;
    void setConferenceCallInfo(const QString &conference_call_info);
    bool is_conference_call_info_Set() const;
    bool is_conference_call_info_Valid() const;

    QDateTime getCreateTime() const;
    void setCreateTime(const QDateTime &create_time);
    bool is_create_time_Set() const;
    bool is_create_time_Valid() const;

    QDateTime getEndTime() const;
    void setEndTime(const QDateTime &end_time);
    bool is_end_time_Set() const;
    bool is_end_time_Valid() const;

    qint32 getMaxParticipants() const;
    void setMaxParticipants(const qint32 &max_participants);
    bool is_max_participants_Set() const;
    bool is_max_participants_Valid() const;

    OAIMeetingType getMeetingType() const;
    void setMeetingType(const OAIMeetingType &meeting_type);
    bool is_meeting_type_Set() const;
    bool is_meeting_type_Valid() const;

    qint64 getMeetingid() const;
    void setMeetingid(const qint64 &meetingid);
    bool is_meetingid_Set() const;
    bool is_meetingid_Valid() const;

    bool isPasswordRequired() const;
    void setPasswordRequired(const bool &password_required);
    bool is_password_required_Set() const;
    bool is_password_required_Valid() const;

    QDateTime getStartTime() const;
    void setStartTime(const QDateTime &start_time);
    bool is_start_time_Set() const;
    bool is_start_time_Valid() const;

    OAIMeetingStatus getStatus() const;
    void setStatus(const OAIMeetingStatus &status);
    bool is_status_Set() const;
    bool is_status_Valid() const;

    QString getSubject() const;
    void setSubject(const QString &subject);
    bool is_subject_Set() const;
    bool is_subject_Valid() const;

    qint64 getUniqueMeetingId() const;
    void setUniqueMeetingId(const qint64 &unique_meeting_id);
    bool is_unique_meeting_id_Set() const;
    bool is_unique_meeting_id_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    QString m_conference_call_info;
    bool m_conference_call_info_isSet;
    bool m_conference_call_info_isValid;

    QDateTime m_create_time;
    bool m_create_time_isSet;
    bool m_create_time_isValid;

    QDateTime m_end_time;
    bool m_end_time_isSet;
    bool m_end_time_isValid;

    qint32 m_max_participants;
    bool m_max_participants_isSet;
    bool m_max_participants_isValid;

    OAIMeetingType m_meeting_type;
    bool m_meeting_type_isSet;
    bool m_meeting_type_isValid;

    qint64 m_meetingid;
    bool m_meetingid_isSet;
    bool m_meetingid_isValid;

    bool m_password_required;
    bool m_password_required_isSet;
    bool m_password_required_isValid;

    QDateTime m_start_time;
    bool m_start_time_isSet;
    bool m_start_time_isValid;

    OAIMeetingStatus m_status;
    bool m_status_isSet;
    bool m_status_isValid;

    QString m_subject;
    bool m_subject_isSet;
    bool m_subject_isValid;

    qint64 m_unique_meeting_id;
    bool m_unique_meeting_id_isSet;
    bool m_unique_meeting_id_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAIMeetingByOrganizer)

#endif // OAIMeetingByOrganizer_H
