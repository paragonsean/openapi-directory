/**
 * GoToMeeting
 * <br>The GoToMeeting API provides seamless integration of GoToMeeting provisioning and meeting management into your existing infrastructure or third party applications.<br><br>For customers, the ability to add, suspend or delete an organizer in your GoToMeeting Corporate account from within your primary management systems simplifies and streamlines the entire process of account management. The ability to monitor meeting schedules, history and active meeting status allows managers to leverage GoToMeeting activities through your primary applications.<br><br>For third parties, the ability to create, update or delete a meeting from within your application makes real-time collaboration possible for your customers. The ability to update meeting schedules, view history and scheduled meetings, and view attendees from past meetings allows you to enhance your users' experience and the value of your applications.
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: developer-support@citrixonline.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIMeetingHistory.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIMeetingHistory::OAIMeetingHistory(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIMeetingHistory::OAIMeetingHistory() {
    this->initializeModel();
}

OAIMeetingHistory::~OAIMeetingHistory() {}

void OAIMeetingHistory::initializeModel() {

    m_conference_call_info_isSet = false;
    m_conference_call_info_isValid = false;

    m_date_isSet = false;
    m_date_isValid = false;

    m_duration_isSet = false;
    m_duration_isValid = false;

    m_email_isSet = false;
    m_email_isValid = false;

    m_end_time_isSet = false;
    m_end_time_isValid = false;

    m_first_name_isSet = false;
    m_first_name_isValid = false;

    m_group_name_isSet = false;
    m_group_name_isValid = false;

    m_last_name_isSet = false;
    m_last_name_isValid = false;

    m_meeting_id_isSet = false;
    m_meeting_id_isValid = false;

    m_meeting_instance_key_isSet = false;
    m_meeting_instance_key_isValid = false;

    m_meeting_key_isSet = false;
    m_meeting_key_isValid = false;

    m_meeting_type_isSet = false;
    m_meeting_type_isValid = false;

    m_new_meeting_id_isSet = false;
    m_new_meeting_id_isValid = false;

    m_new_organizer_key_isSet = false;
    m_new_organizer_key_isValid = false;

    m_num_attendees_isSet = false;
    m_num_attendees_isValid = false;

    m_organizer_key_isSet = false;
    m_organizer_key_isValid = false;

    m_organizerkey_isSet = false;
    m_organizerkey_isValid = false;

    m_password_required_isSet = false;
    m_password_required_isValid = false;

    m_session_id_isSet = false;
    m_session_id_isValid = false;

    m_start_time_isSet = false;
    m_start_time_isValid = false;

    m_status_isSet = false;
    m_status_isValid = false;

    m_subject_isSet = false;
    m_subject_isValid = false;

    m_unique_meeting_id_isSet = false;
    m_unique_meeting_id_isValid = false;
}

void OAIMeetingHistory::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIMeetingHistory::fromJsonObject(QJsonObject json) {

    m_conference_call_info_isValid = ::OpenAPI::fromJsonValue(m_conference_call_info, json[QString("conferenceCallInfo")]);
    m_conference_call_info_isSet = !json[QString("conferenceCallInfo")].isNull() && m_conference_call_info_isValid;

    m_date_isValid = ::OpenAPI::fromJsonValue(m_date, json[QString("date")]);
    m_date_isSet = !json[QString("date")].isNull() && m_date_isValid;

    m_duration_isValid = ::OpenAPI::fromJsonValue(m_duration, json[QString("duration")]);
    m_duration_isSet = !json[QString("duration")].isNull() && m_duration_isValid;

    m_email_isValid = ::OpenAPI::fromJsonValue(m_email, json[QString("email")]);
    m_email_isSet = !json[QString("email")].isNull() && m_email_isValid;

    m_end_time_isValid = ::OpenAPI::fromJsonValue(m_end_time, json[QString("endTime")]);
    m_end_time_isSet = !json[QString("endTime")].isNull() && m_end_time_isValid;

    m_first_name_isValid = ::OpenAPI::fromJsonValue(m_first_name, json[QString("firstName")]);
    m_first_name_isSet = !json[QString("firstName")].isNull() && m_first_name_isValid;

    m_group_name_isValid = ::OpenAPI::fromJsonValue(m_group_name, json[QString("groupName")]);
    m_group_name_isSet = !json[QString("groupName")].isNull() && m_group_name_isValid;

    m_last_name_isValid = ::OpenAPI::fromJsonValue(m_last_name, json[QString("lastName")]);
    m_last_name_isSet = !json[QString("lastName")].isNull() && m_last_name_isValid;

    m_meeting_id_isValid = ::OpenAPI::fromJsonValue(m_meeting_id, json[QString("meetingId")]);
    m_meeting_id_isSet = !json[QString("meetingId")].isNull() && m_meeting_id_isValid;

    m_meeting_instance_key_isValid = ::OpenAPI::fromJsonValue(m_meeting_instance_key, json[QString("meetingInstanceKey")]);
    m_meeting_instance_key_isSet = !json[QString("meetingInstanceKey")].isNull() && m_meeting_instance_key_isValid;

    m_meeting_key_isValid = ::OpenAPI::fromJsonValue(m_meeting_key, json[QString("meetingKey")]);
    m_meeting_key_isSet = !json[QString("meetingKey")].isNull() && m_meeting_key_isValid;

    m_meeting_type_isValid = ::OpenAPI::fromJsonValue(m_meeting_type, json[QString("meetingType")]);
    m_meeting_type_isSet = !json[QString("meetingType")].isNull() && m_meeting_type_isValid;

    m_new_meeting_id_isValid = ::OpenAPI::fromJsonValue(m_new_meeting_id, json[QString("newMeetingId")]);
    m_new_meeting_id_isSet = !json[QString("newMeetingId")].isNull() && m_new_meeting_id_isValid;

    m_new_organizer_key_isValid = ::OpenAPI::fromJsonValue(m_new_organizer_key, json[QString("newOrganizerKey")]);
    m_new_organizer_key_isSet = !json[QString("newOrganizerKey")].isNull() && m_new_organizer_key_isValid;

    m_num_attendees_isValid = ::OpenAPI::fromJsonValue(m_num_attendees, json[QString("numAttendees")]);
    m_num_attendees_isSet = !json[QString("numAttendees")].isNull() && m_num_attendees_isValid;

    m_organizer_key_isValid = ::OpenAPI::fromJsonValue(m_organizer_key, json[QString("organizerKey")]);
    m_organizer_key_isSet = !json[QString("organizerKey")].isNull() && m_organizer_key_isValid;

    m_organizerkey_isValid = ::OpenAPI::fromJsonValue(m_organizerkey, json[QString("organizerkey")]);
    m_organizerkey_isSet = !json[QString("organizerkey")].isNull() && m_organizerkey_isValid;

    m_password_required_isValid = ::OpenAPI::fromJsonValue(m_password_required, json[QString("passwordRequired")]);
    m_password_required_isSet = !json[QString("passwordRequired")].isNull() && m_password_required_isValid;

    m_session_id_isValid = ::OpenAPI::fromJsonValue(m_session_id, json[QString("sessionId")]);
    m_session_id_isSet = !json[QString("sessionId")].isNull() && m_session_id_isValid;

    m_start_time_isValid = ::OpenAPI::fromJsonValue(m_start_time, json[QString("startTime")]);
    m_start_time_isSet = !json[QString("startTime")].isNull() && m_start_time_isValid;

    m_status_isValid = ::OpenAPI::fromJsonValue(m_status, json[QString("status")]);
    m_status_isSet = !json[QString("status")].isNull() && m_status_isValid;

    m_subject_isValid = ::OpenAPI::fromJsonValue(m_subject, json[QString("subject")]);
    m_subject_isSet = !json[QString("subject")].isNull() && m_subject_isValid;

    m_unique_meeting_id_isValid = ::OpenAPI::fromJsonValue(m_unique_meeting_id, json[QString("uniqueMeetingId")]);
    m_unique_meeting_id_isSet = !json[QString("uniqueMeetingId")].isNull() && m_unique_meeting_id_isValid;
}

QString OAIMeetingHistory::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIMeetingHistory::asJsonObject() const {
    QJsonObject obj;
    if (m_conference_call_info_isSet) {
        obj.insert(QString("conferenceCallInfo"), ::OpenAPI::toJsonValue(m_conference_call_info));
    }
    if (m_date_isSet) {
        obj.insert(QString("date"), ::OpenAPI::toJsonValue(m_date));
    }
    if (m_duration_isSet) {
        obj.insert(QString("duration"), ::OpenAPI::toJsonValue(m_duration));
    }
    if (m_email_isSet) {
        obj.insert(QString("email"), ::OpenAPI::toJsonValue(m_email));
    }
    if (m_end_time_isSet) {
        obj.insert(QString("endTime"), ::OpenAPI::toJsonValue(m_end_time));
    }
    if (m_first_name_isSet) {
        obj.insert(QString("firstName"), ::OpenAPI::toJsonValue(m_first_name));
    }
    if (m_group_name_isSet) {
        obj.insert(QString("groupName"), ::OpenAPI::toJsonValue(m_group_name));
    }
    if (m_last_name_isSet) {
        obj.insert(QString("lastName"), ::OpenAPI::toJsonValue(m_last_name));
    }
    if (m_meeting_id_isSet) {
        obj.insert(QString("meetingId"), ::OpenAPI::toJsonValue(m_meeting_id));
    }
    if (m_meeting_instance_key_isSet) {
        obj.insert(QString("meetingInstanceKey"), ::OpenAPI::toJsonValue(m_meeting_instance_key));
    }
    if (m_meeting_key_isSet) {
        obj.insert(QString("meetingKey"), ::OpenAPI::toJsonValue(m_meeting_key));
    }
    if (m_meeting_type.isSet()) {
        obj.insert(QString("meetingType"), ::OpenAPI::toJsonValue(m_meeting_type));
    }
    if (m_new_meeting_id_isSet) {
        obj.insert(QString("newMeetingId"), ::OpenAPI::toJsonValue(m_new_meeting_id));
    }
    if (m_new_organizer_key_isSet) {
        obj.insert(QString("newOrganizerKey"), ::OpenAPI::toJsonValue(m_new_organizer_key));
    }
    if (m_num_attendees_isSet) {
        obj.insert(QString("numAttendees"), ::OpenAPI::toJsonValue(m_num_attendees));
    }
    if (m_organizer_key_isSet) {
        obj.insert(QString("organizerKey"), ::OpenAPI::toJsonValue(m_organizer_key));
    }
    if (m_organizerkey_isSet) {
        obj.insert(QString("organizerkey"), ::OpenAPI::toJsonValue(m_organizerkey));
    }
    if (m_password_required_isSet) {
        obj.insert(QString("passwordRequired"), ::OpenAPI::toJsonValue(m_password_required));
    }
    if (m_session_id_isSet) {
        obj.insert(QString("sessionId"), ::OpenAPI::toJsonValue(m_session_id));
    }
    if (m_start_time_isSet) {
        obj.insert(QString("startTime"), ::OpenAPI::toJsonValue(m_start_time));
    }
    if (m_status_isSet) {
        obj.insert(QString("status"), ::OpenAPI::toJsonValue(m_status));
    }
    if (m_subject_isSet) {
        obj.insert(QString("subject"), ::OpenAPI::toJsonValue(m_subject));
    }
    if (m_unique_meeting_id_isSet) {
        obj.insert(QString("uniqueMeetingId"), ::OpenAPI::toJsonValue(m_unique_meeting_id));
    }
    return obj;
}

QString OAIMeetingHistory::getConferenceCallInfo() const {
    return m_conference_call_info;
}
void OAIMeetingHistory::setConferenceCallInfo(const QString &conference_call_info) {
    m_conference_call_info = conference_call_info;
    m_conference_call_info_isSet = true;
}

bool OAIMeetingHistory::is_conference_call_info_Set() const{
    return m_conference_call_info_isSet;
}

bool OAIMeetingHistory::is_conference_call_info_Valid() const{
    return m_conference_call_info_isValid;
}

QDateTime OAIMeetingHistory::getDate() const {
    return m_date;
}
void OAIMeetingHistory::setDate(const QDateTime &date) {
    m_date = date;
    m_date_isSet = true;
}

bool OAIMeetingHistory::is_date_Set() const{
    return m_date_isSet;
}

bool OAIMeetingHistory::is_date_Valid() const{
    return m_date_isValid;
}

qint32 OAIMeetingHistory::getDuration() const {
    return m_duration;
}
void OAIMeetingHistory::setDuration(const qint32 &duration) {
    m_duration = duration;
    m_duration_isSet = true;
}

bool OAIMeetingHistory::is_duration_Set() const{
    return m_duration_isSet;
}

bool OAIMeetingHistory::is_duration_Valid() const{
    return m_duration_isValid;
}

QString OAIMeetingHistory::getEmail() const {
    return m_email;
}
void OAIMeetingHistory::setEmail(const QString &email) {
    m_email = email;
    m_email_isSet = true;
}

bool OAIMeetingHistory::is_email_Set() const{
    return m_email_isSet;
}

bool OAIMeetingHistory::is_email_Valid() const{
    return m_email_isValid;
}

QDateTime OAIMeetingHistory::getEndTime() const {
    return m_end_time;
}
void OAIMeetingHistory::setEndTime(const QDateTime &end_time) {
    m_end_time = end_time;
    m_end_time_isSet = true;
}

bool OAIMeetingHistory::is_end_time_Set() const{
    return m_end_time_isSet;
}

bool OAIMeetingHistory::is_end_time_Valid() const{
    return m_end_time_isValid;
}

QString OAIMeetingHistory::getFirstName() const {
    return m_first_name;
}
void OAIMeetingHistory::setFirstName(const QString &first_name) {
    m_first_name = first_name;
    m_first_name_isSet = true;
}

bool OAIMeetingHistory::is_first_name_Set() const{
    return m_first_name_isSet;
}

bool OAIMeetingHistory::is_first_name_Valid() const{
    return m_first_name_isValid;
}

QString OAIMeetingHistory::getGroupName() const {
    return m_group_name;
}
void OAIMeetingHistory::setGroupName(const QString &group_name) {
    m_group_name = group_name;
    m_group_name_isSet = true;
}

bool OAIMeetingHistory::is_group_name_Set() const{
    return m_group_name_isSet;
}

bool OAIMeetingHistory::is_group_name_Valid() const{
    return m_group_name_isValid;
}

QString OAIMeetingHistory::getLastName() const {
    return m_last_name;
}
void OAIMeetingHistory::setLastName(const QString &last_name) {
    m_last_name = last_name;
    m_last_name_isSet = true;
}

bool OAIMeetingHistory::is_last_name_Set() const{
    return m_last_name_isSet;
}

bool OAIMeetingHistory::is_last_name_Valid() const{
    return m_last_name_isValid;
}

qint64 OAIMeetingHistory::getMeetingId() const {
    return m_meeting_id;
}
void OAIMeetingHistory::setMeetingId(const qint64 &meeting_id) {
    m_meeting_id = meeting_id;
    m_meeting_id_isSet = true;
}

bool OAIMeetingHistory::is_meeting_id_Set() const{
    return m_meeting_id_isSet;
}

bool OAIMeetingHistory::is_meeting_id_Valid() const{
    return m_meeting_id_isValid;
}

qint64 OAIMeetingHistory::getMeetingInstanceKey() const {
    return m_meeting_instance_key;
}
void OAIMeetingHistory::setMeetingInstanceKey(const qint64 &meeting_instance_key) {
    m_meeting_instance_key = meeting_instance_key;
    m_meeting_instance_key_isSet = true;
}

bool OAIMeetingHistory::is_meeting_instance_key_Set() const{
    return m_meeting_instance_key_isSet;
}

bool OAIMeetingHistory::is_meeting_instance_key_Valid() const{
    return m_meeting_instance_key_isValid;
}

qint64 OAIMeetingHistory::getMeetingKey() const {
    return m_meeting_key;
}
void OAIMeetingHistory::setMeetingKey(const qint64 &meeting_key) {
    m_meeting_key = meeting_key;
    m_meeting_key_isSet = true;
}

bool OAIMeetingHistory::is_meeting_key_Set() const{
    return m_meeting_key_isSet;
}

bool OAIMeetingHistory::is_meeting_key_Valid() const{
    return m_meeting_key_isValid;
}

OAIMeetingType OAIMeetingHistory::getMeetingType() const {
    return m_meeting_type;
}
void OAIMeetingHistory::setMeetingType(const OAIMeetingType &meeting_type) {
    m_meeting_type = meeting_type;
    m_meeting_type_isSet = true;
}

bool OAIMeetingHistory::is_meeting_type_Set() const{
    return m_meeting_type_isSet;
}

bool OAIMeetingHistory::is_meeting_type_Valid() const{
    return m_meeting_type_isValid;
}

QString OAIMeetingHistory::getNewMeetingId() const {
    return m_new_meeting_id;
}
void OAIMeetingHistory::setNewMeetingId(const QString &new_meeting_id) {
    m_new_meeting_id = new_meeting_id;
    m_new_meeting_id_isSet = true;
}

bool OAIMeetingHistory::is_new_meeting_id_Set() const{
    return m_new_meeting_id_isSet;
}

bool OAIMeetingHistory::is_new_meeting_id_Valid() const{
    return m_new_meeting_id_isValid;
}

QString OAIMeetingHistory::getNewOrganizerKey() const {
    return m_new_organizer_key;
}
void OAIMeetingHistory::setNewOrganizerKey(const QString &new_organizer_key) {
    m_new_organizer_key = new_organizer_key;
    m_new_organizer_key_isSet = true;
}

bool OAIMeetingHistory::is_new_organizer_key_Set() const{
    return m_new_organizer_key_isSet;
}

bool OAIMeetingHistory::is_new_organizer_key_Valid() const{
    return m_new_organizer_key_isValid;
}

qint32 OAIMeetingHistory::getNumAttendees() const {
    return m_num_attendees;
}
void OAIMeetingHistory::setNumAttendees(const qint32 &num_attendees) {
    m_num_attendees = num_attendees;
    m_num_attendees_isSet = true;
}

bool OAIMeetingHistory::is_num_attendees_Set() const{
    return m_num_attendees_isSet;
}

bool OAIMeetingHistory::is_num_attendees_Valid() const{
    return m_num_attendees_isValid;
}

QString OAIMeetingHistory::getOrganizerKey() const {
    return m_organizer_key;
}
void OAIMeetingHistory::setOrganizerKey(const QString &organizer_key) {
    m_organizer_key = organizer_key;
    m_organizer_key_isSet = true;
}

bool OAIMeetingHistory::is_organizer_key_Set() const{
    return m_organizer_key_isSet;
}

bool OAIMeetingHistory::is_organizer_key_Valid() const{
    return m_organizer_key_isValid;
}

QString OAIMeetingHistory::getOrganizerkey() const {
    return m_organizerkey;
}
void OAIMeetingHistory::setOrganizerkey(const QString &organizerkey) {
    m_organizerkey = organizerkey;
    m_organizerkey_isSet = true;
}

bool OAIMeetingHistory::is_organizerkey_Set() const{
    return m_organizerkey_isSet;
}

bool OAIMeetingHistory::is_organizerkey_Valid() const{
    return m_organizerkey_isValid;
}

bool OAIMeetingHistory::isPasswordRequired() const {
    return m_password_required;
}
void OAIMeetingHistory::setPasswordRequired(const bool &password_required) {
    m_password_required = password_required;
    m_password_required_isSet = true;
}

bool OAIMeetingHistory::is_password_required_Set() const{
    return m_password_required_isSet;
}

bool OAIMeetingHistory::is_password_required_Valid() const{
    return m_password_required_isValid;
}

qint64 OAIMeetingHistory::getSessionId() const {
    return m_session_id;
}
void OAIMeetingHistory::setSessionId(const qint64 &session_id) {
    m_session_id = session_id;
    m_session_id_isSet = true;
}

bool OAIMeetingHistory::is_session_id_Set() const{
    return m_session_id_isSet;
}

bool OAIMeetingHistory::is_session_id_Valid() const{
    return m_session_id_isValid;
}

QDateTime OAIMeetingHistory::getStartTime() const {
    return m_start_time;
}
void OAIMeetingHistory::setStartTime(const QDateTime &start_time) {
    m_start_time = start_time;
    m_start_time_isSet = true;
}

bool OAIMeetingHistory::is_start_time_Set() const{
    return m_start_time_isSet;
}

bool OAIMeetingHistory::is_start_time_Valid() const{
    return m_start_time_isValid;
}

QString OAIMeetingHistory::getStatus() const {
    return m_status;
}
void OAIMeetingHistory::setStatus(const QString &status) {
    m_status = status;
    m_status_isSet = true;
}

bool OAIMeetingHistory::is_status_Set() const{
    return m_status_isSet;
}

bool OAIMeetingHistory::is_status_Valid() const{
    return m_status_isValid;
}

QString OAIMeetingHistory::getSubject() const {
    return m_subject;
}
void OAIMeetingHistory::setSubject(const QString &subject) {
    m_subject = subject;
    m_subject_isSet = true;
}

bool OAIMeetingHistory::is_subject_Set() const{
    return m_subject_isSet;
}

bool OAIMeetingHistory::is_subject_Valid() const{
    return m_subject_isValid;
}

qint64 OAIMeetingHistory::getUniqueMeetingId() const {
    return m_unique_meeting_id;
}
void OAIMeetingHistory::setUniqueMeetingId(const qint64 &unique_meeting_id) {
    m_unique_meeting_id = unique_meeting_id;
    m_unique_meeting_id_isSet = true;
}

bool OAIMeetingHistory::is_unique_meeting_id_Set() const{
    return m_unique_meeting_id_isSet;
}

bool OAIMeetingHistory::is_unique_meeting_id_Valid() const{
    return m_unique_meeting_id_isValid;
}

bool OAIMeetingHistory::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_conference_call_info_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_date_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_duration_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_email_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_end_time_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_first_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_group_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_last_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_meeting_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_meeting_instance_key_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_meeting_key_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_meeting_type.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_new_meeting_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_new_organizer_key_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_num_attendees_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_organizer_key_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_organizerkey_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_password_required_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_session_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_start_time_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_status_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_subject_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_unique_meeting_id_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIMeetingHistory::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_conference_call_info_isValid && m_date_isValid && m_duration_isValid && m_email_isValid && m_end_time_isValid && m_first_name_isValid && m_group_name_isValid && m_last_name_isValid && m_meeting_id_isValid && m_meeting_instance_key_isValid && m_meeting_key_isValid && m_meeting_type_isValid && m_new_meeting_id_isValid && m_new_organizer_key_isValid && m_num_attendees_isValid && m_organizer_key_isValid && m_organizerkey_isValid && m_password_required_isValid && m_session_id_isValid && m_start_time_isValid && m_status_isValid && m_subject_isValid && m_unique_meeting_id_isValid && true;
}

} // namespace OpenAPI
