/**
 * GoToMeeting
 * <br>The GoToMeeting API provides seamless integration of GoToMeeting provisioning and meeting management into your existing infrastructure or third party applications.<br><br>For customers, the ability to add, suspend or delete an organizer in your GoToMeeting Corporate account from within your primary management systems simplifies and streamlines the entire process of account management. The ability to monitor meeting schedules, history and active meeting status allows managers to leverage GoToMeeting activities through your primary applications.<br><br>For third parties, the ability to create, update or delete a meeting from within your application makes real-time collaboration possible for your customers. The ability to update meeting schedules, view history and scheduled meetings, and view attendees from past meetings allows you to enhance your users' experience and the value of your applications.
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: developer-support@citrixonline.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIAttendeeByGroup.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIAttendeeByGroup::OAIAttendeeByGroup(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIAttendeeByGroup::OAIAttendeeByGroup() {
    this->initializeModel();
}

OAIAttendeeByGroup::~OAIAttendeeByGroup() {}

void OAIAttendeeByGroup::initializeModel() {

    m_attendee_email_isSet = false;
    m_attendee_email_isValid = false;

    m_attendee_name_isSet = false;
    m_attendee_name_isValid = false;

    m_conference_call_info_isSet = false;
    m_conference_call_info_isValid = false;

    m_duration_isSet = false;
    m_duration_isValid = false;

    m_email_isSet = false;
    m_email_isValid = false;

    m_end_time_isSet = false;
    m_end_time_isValid = false;

    m_first_name_isSet = false;
    m_first_name_isValid = false;

    m_group_name_isSet = false;
    m_group_name_isValid = false;

    m_join_time_isSet = false;
    m_join_time_isValid = false;

    m_last_name_isSet = false;
    m_last_name_isValid = false;

    m_leave_time_isSet = false;
    m_leave_time_isValid = false;

    m_meeting_id_isSet = false;
    m_meeting_id_isValid = false;

    m_meeting_instance_key_isSet = false;
    m_meeting_instance_key_isValid = false;

    m_meeting_type_isSet = false;
    m_meeting_type_isValid = false;

    m_num_attendees_isSet = false;
    m_num_attendees_isValid = false;

    m_organizer_key_isSet = false;
    m_organizer_key_isValid = false;

    m_organizerkey_isSet = false;
    m_organizerkey_isValid = false;

    m_start_time_isSet = false;
    m_start_time_isValid = false;

    m_subject_isSet = false;
    m_subject_isValid = false;
}

void OAIAttendeeByGroup::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIAttendeeByGroup::fromJsonObject(QJsonObject json) {

    m_attendee_email_isValid = ::OpenAPI::fromJsonValue(m_attendee_email, json[QString("attendeeEmail")]);
    m_attendee_email_isSet = !json[QString("attendeeEmail")].isNull() && m_attendee_email_isValid;

    m_attendee_name_isValid = ::OpenAPI::fromJsonValue(m_attendee_name, json[QString("attendeeName")]);
    m_attendee_name_isSet = !json[QString("attendeeName")].isNull() && m_attendee_name_isValid;

    m_conference_call_info_isValid = ::OpenAPI::fromJsonValue(m_conference_call_info, json[QString("conferenceCallInfo")]);
    m_conference_call_info_isSet = !json[QString("conferenceCallInfo")].isNull() && m_conference_call_info_isValid;

    m_duration_isValid = ::OpenAPI::fromJsonValue(m_duration, json[QString("duration")]);
    m_duration_isSet = !json[QString("duration")].isNull() && m_duration_isValid;

    m_email_isValid = ::OpenAPI::fromJsonValue(m_email, json[QString("email")]);
    m_email_isSet = !json[QString("email")].isNull() && m_email_isValid;

    m_end_time_isValid = ::OpenAPI::fromJsonValue(m_end_time, json[QString("endTime")]);
    m_end_time_isSet = !json[QString("endTime")].isNull() && m_end_time_isValid;

    m_first_name_isValid = ::OpenAPI::fromJsonValue(m_first_name, json[QString("firstName")]);
    m_first_name_isSet = !json[QString("firstName")].isNull() && m_first_name_isValid;

    m_group_name_isValid = ::OpenAPI::fromJsonValue(m_group_name, json[QString("groupName")]);
    m_group_name_isSet = !json[QString("groupName")].isNull() && m_group_name_isValid;

    m_join_time_isValid = ::OpenAPI::fromJsonValue(m_join_time, json[QString("joinTime")]);
    m_join_time_isSet = !json[QString("joinTime")].isNull() && m_join_time_isValid;

    m_last_name_isValid = ::OpenAPI::fromJsonValue(m_last_name, json[QString("lastName")]);
    m_last_name_isSet = !json[QString("lastName")].isNull() && m_last_name_isValid;

    m_leave_time_isValid = ::OpenAPI::fromJsonValue(m_leave_time, json[QString("leaveTime")]);
    m_leave_time_isSet = !json[QString("leaveTime")].isNull() && m_leave_time_isValid;

    m_meeting_id_isValid = ::OpenAPI::fromJsonValue(m_meeting_id, json[QString("meetingId")]);
    m_meeting_id_isSet = !json[QString("meetingId")].isNull() && m_meeting_id_isValid;

    m_meeting_instance_key_isValid = ::OpenAPI::fromJsonValue(m_meeting_instance_key, json[QString("meetingInstanceKey")]);
    m_meeting_instance_key_isSet = !json[QString("meetingInstanceKey")].isNull() && m_meeting_instance_key_isValid;

    m_meeting_type_isValid = ::OpenAPI::fromJsonValue(m_meeting_type, json[QString("meetingType")]);
    m_meeting_type_isSet = !json[QString("meetingType")].isNull() && m_meeting_type_isValid;

    m_num_attendees_isValid = ::OpenAPI::fromJsonValue(m_num_attendees, json[QString("numAttendees")]);
    m_num_attendees_isSet = !json[QString("numAttendees")].isNull() && m_num_attendees_isValid;

    m_organizer_key_isValid = ::OpenAPI::fromJsonValue(m_organizer_key, json[QString("organizerKey")]);
    m_organizer_key_isSet = !json[QString("organizerKey")].isNull() && m_organizer_key_isValid;

    m_organizerkey_isValid = ::OpenAPI::fromJsonValue(m_organizerkey, json[QString("organizerkey")]);
    m_organizerkey_isSet = !json[QString("organizerkey")].isNull() && m_organizerkey_isValid;

    m_start_time_isValid = ::OpenAPI::fromJsonValue(m_start_time, json[QString("startTime")]);
    m_start_time_isSet = !json[QString("startTime")].isNull() && m_start_time_isValid;

    m_subject_isValid = ::OpenAPI::fromJsonValue(m_subject, json[QString("subject")]);
    m_subject_isSet = !json[QString("subject")].isNull() && m_subject_isValid;
}

QString OAIAttendeeByGroup::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIAttendeeByGroup::asJsonObject() const {
    QJsonObject obj;
    if (m_attendee_email_isSet) {
        obj.insert(QString("attendeeEmail"), ::OpenAPI::toJsonValue(m_attendee_email));
    }
    if (m_attendee_name_isSet) {
        obj.insert(QString("attendeeName"), ::OpenAPI::toJsonValue(m_attendee_name));
    }
    if (m_conference_call_info_isSet) {
        obj.insert(QString("conferenceCallInfo"), ::OpenAPI::toJsonValue(m_conference_call_info));
    }
    if (m_duration_isSet) {
        obj.insert(QString("duration"), ::OpenAPI::toJsonValue(m_duration));
    }
    if (m_email_isSet) {
        obj.insert(QString("email"), ::OpenAPI::toJsonValue(m_email));
    }
    if (m_end_time_isSet) {
        obj.insert(QString("endTime"), ::OpenAPI::toJsonValue(m_end_time));
    }
    if (m_first_name_isSet) {
        obj.insert(QString("firstName"), ::OpenAPI::toJsonValue(m_first_name));
    }
    if (m_group_name_isSet) {
        obj.insert(QString("groupName"), ::OpenAPI::toJsonValue(m_group_name));
    }
    if (m_join_time_isSet) {
        obj.insert(QString("joinTime"), ::OpenAPI::toJsonValue(m_join_time));
    }
    if (m_last_name_isSet) {
        obj.insert(QString("lastName"), ::OpenAPI::toJsonValue(m_last_name));
    }
    if (m_leave_time_isSet) {
        obj.insert(QString("leaveTime"), ::OpenAPI::toJsonValue(m_leave_time));
    }
    if (m_meeting_id_isSet) {
        obj.insert(QString("meetingId"), ::OpenAPI::toJsonValue(m_meeting_id));
    }
    if (m_meeting_instance_key_isSet) {
        obj.insert(QString("meetingInstanceKey"), ::OpenAPI::toJsonValue(m_meeting_instance_key));
    }
    if (m_meeting_type.isSet()) {
        obj.insert(QString("meetingType"), ::OpenAPI::toJsonValue(m_meeting_type));
    }
    if (m_num_attendees_isSet) {
        obj.insert(QString("numAttendees"), ::OpenAPI::toJsonValue(m_num_attendees));
    }
    if (m_organizer_key_isSet) {
        obj.insert(QString("organizerKey"), ::OpenAPI::toJsonValue(m_organizer_key));
    }
    if (m_organizerkey_isSet) {
        obj.insert(QString("organizerkey"), ::OpenAPI::toJsonValue(m_organizerkey));
    }
    if (m_start_time_isSet) {
        obj.insert(QString("startTime"), ::OpenAPI::toJsonValue(m_start_time));
    }
    if (m_subject_isSet) {
        obj.insert(QString("subject"), ::OpenAPI::toJsonValue(m_subject));
    }
    return obj;
}

QString OAIAttendeeByGroup::getAttendeeEmail() const {
    return m_attendee_email;
}
void OAIAttendeeByGroup::setAttendeeEmail(const QString &attendee_email) {
    m_attendee_email = attendee_email;
    m_attendee_email_isSet = true;
}

bool OAIAttendeeByGroup::is_attendee_email_Set() const{
    return m_attendee_email_isSet;
}

bool OAIAttendeeByGroup::is_attendee_email_Valid() const{
    return m_attendee_email_isValid;
}

QString OAIAttendeeByGroup::getAttendeeName() const {
    return m_attendee_name;
}
void OAIAttendeeByGroup::setAttendeeName(const QString &attendee_name) {
    m_attendee_name = attendee_name;
    m_attendee_name_isSet = true;
}

bool OAIAttendeeByGroup::is_attendee_name_Set() const{
    return m_attendee_name_isSet;
}

bool OAIAttendeeByGroup::is_attendee_name_Valid() const{
    return m_attendee_name_isValid;
}

QString OAIAttendeeByGroup::getConferenceCallInfo() const {
    return m_conference_call_info;
}
void OAIAttendeeByGroup::setConferenceCallInfo(const QString &conference_call_info) {
    m_conference_call_info = conference_call_info;
    m_conference_call_info_isSet = true;
}

bool OAIAttendeeByGroup::is_conference_call_info_Set() const{
    return m_conference_call_info_isSet;
}

bool OAIAttendeeByGroup::is_conference_call_info_Valid() const{
    return m_conference_call_info_isValid;
}

qint32 OAIAttendeeByGroup::getDuration() const {
    return m_duration;
}
void OAIAttendeeByGroup::setDuration(const qint32 &duration) {
    m_duration = duration;
    m_duration_isSet = true;
}

bool OAIAttendeeByGroup::is_duration_Set() const{
    return m_duration_isSet;
}

bool OAIAttendeeByGroup::is_duration_Valid() const{
    return m_duration_isValid;
}

QString OAIAttendeeByGroup::getEmail() const {
    return m_email;
}
void OAIAttendeeByGroup::setEmail(const QString &email) {
    m_email = email;
    m_email_isSet = true;
}

bool OAIAttendeeByGroup::is_email_Set() const{
    return m_email_isSet;
}

bool OAIAttendeeByGroup::is_email_Valid() const{
    return m_email_isValid;
}

QDateTime OAIAttendeeByGroup::getEndTime() const {
    return m_end_time;
}
void OAIAttendeeByGroup::setEndTime(const QDateTime &end_time) {
    m_end_time = end_time;
    m_end_time_isSet = true;
}

bool OAIAttendeeByGroup::is_end_time_Set() const{
    return m_end_time_isSet;
}

bool OAIAttendeeByGroup::is_end_time_Valid() const{
    return m_end_time_isValid;
}

QString OAIAttendeeByGroup::getFirstName() const {
    return m_first_name;
}
void OAIAttendeeByGroup::setFirstName(const QString &first_name) {
    m_first_name = first_name;
    m_first_name_isSet = true;
}

bool OAIAttendeeByGroup::is_first_name_Set() const{
    return m_first_name_isSet;
}

bool OAIAttendeeByGroup::is_first_name_Valid() const{
    return m_first_name_isValid;
}

QString OAIAttendeeByGroup::getGroupName() const {
    return m_group_name;
}
void OAIAttendeeByGroup::setGroupName(const QString &group_name) {
    m_group_name = group_name;
    m_group_name_isSet = true;
}

bool OAIAttendeeByGroup::is_group_name_Set() const{
    return m_group_name_isSet;
}

bool OAIAttendeeByGroup::is_group_name_Valid() const{
    return m_group_name_isValid;
}

QDateTime OAIAttendeeByGroup::getJoinTime() const {
    return m_join_time;
}
void OAIAttendeeByGroup::setJoinTime(const QDateTime &join_time) {
    m_join_time = join_time;
    m_join_time_isSet = true;
}

bool OAIAttendeeByGroup::is_join_time_Set() const{
    return m_join_time_isSet;
}

bool OAIAttendeeByGroup::is_join_time_Valid() const{
    return m_join_time_isValid;
}

QString OAIAttendeeByGroup::getLastName() const {
    return m_last_name;
}
void OAIAttendeeByGroup::setLastName(const QString &last_name) {
    m_last_name = last_name;
    m_last_name_isSet = true;
}

bool OAIAttendeeByGroup::is_last_name_Set() const{
    return m_last_name_isSet;
}

bool OAIAttendeeByGroup::is_last_name_Valid() const{
    return m_last_name_isValid;
}

QDateTime OAIAttendeeByGroup::getLeaveTime() const {
    return m_leave_time;
}
void OAIAttendeeByGroup::setLeaveTime(const QDateTime &leave_time) {
    m_leave_time = leave_time;
    m_leave_time_isSet = true;
}

bool OAIAttendeeByGroup::is_leave_time_Set() const{
    return m_leave_time_isSet;
}

bool OAIAttendeeByGroup::is_leave_time_Valid() const{
    return m_leave_time_isValid;
}

QString OAIAttendeeByGroup::getMeetingId() const {
    return m_meeting_id;
}
void OAIAttendeeByGroup::setMeetingId(const QString &meeting_id) {
    m_meeting_id = meeting_id;
    m_meeting_id_isSet = true;
}

bool OAIAttendeeByGroup::is_meeting_id_Set() const{
    return m_meeting_id_isSet;
}

bool OAIAttendeeByGroup::is_meeting_id_Valid() const{
    return m_meeting_id_isValid;
}

qint64 OAIAttendeeByGroup::getMeetingInstanceKey() const {
    return m_meeting_instance_key;
}
void OAIAttendeeByGroup::setMeetingInstanceKey(const qint64 &meeting_instance_key) {
    m_meeting_instance_key = meeting_instance_key;
    m_meeting_instance_key_isSet = true;
}

bool OAIAttendeeByGroup::is_meeting_instance_key_Set() const{
    return m_meeting_instance_key_isSet;
}

bool OAIAttendeeByGroup::is_meeting_instance_key_Valid() const{
    return m_meeting_instance_key_isValid;
}

OAIMeetingType OAIAttendeeByGroup::getMeetingType() const {
    return m_meeting_type;
}
void OAIAttendeeByGroup::setMeetingType(const OAIMeetingType &meeting_type) {
    m_meeting_type = meeting_type;
    m_meeting_type_isSet = true;
}

bool OAIAttendeeByGroup::is_meeting_type_Set() const{
    return m_meeting_type_isSet;
}

bool OAIAttendeeByGroup::is_meeting_type_Valid() const{
    return m_meeting_type_isValid;
}

qint32 OAIAttendeeByGroup::getNumAttendees() const {
    return m_num_attendees;
}
void OAIAttendeeByGroup::setNumAttendees(const qint32 &num_attendees) {
    m_num_attendees = num_attendees;
    m_num_attendees_isSet = true;
}

bool OAIAttendeeByGroup::is_num_attendees_Set() const{
    return m_num_attendees_isSet;
}

bool OAIAttendeeByGroup::is_num_attendees_Valid() const{
    return m_num_attendees_isValid;
}

QString OAIAttendeeByGroup::getOrganizerKey() const {
    return m_organizer_key;
}
void OAIAttendeeByGroup::setOrganizerKey(const QString &organizer_key) {
    m_organizer_key = organizer_key;
    m_organizer_key_isSet = true;
}

bool OAIAttendeeByGroup::is_organizer_key_Set() const{
    return m_organizer_key_isSet;
}

bool OAIAttendeeByGroup::is_organizer_key_Valid() const{
    return m_organizer_key_isValid;
}

qint64 OAIAttendeeByGroup::getOrganizerkey() const {
    return m_organizerkey;
}
void OAIAttendeeByGroup::setOrganizerkey(const qint64 &organizerkey) {
    m_organizerkey = organizerkey;
    m_organizerkey_isSet = true;
}

bool OAIAttendeeByGroup::is_organizerkey_Set() const{
    return m_organizerkey_isSet;
}

bool OAIAttendeeByGroup::is_organizerkey_Valid() const{
    return m_organizerkey_isValid;
}

QDateTime OAIAttendeeByGroup::getStartTime() const {
    return m_start_time;
}
void OAIAttendeeByGroup::setStartTime(const QDateTime &start_time) {
    m_start_time = start_time;
    m_start_time_isSet = true;
}

bool OAIAttendeeByGroup::is_start_time_Set() const{
    return m_start_time_isSet;
}

bool OAIAttendeeByGroup::is_start_time_Valid() const{
    return m_start_time_isValid;
}

QString OAIAttendeeByGroup::getSubject() const {
    return m_subject;
}
void OAIAttendeeByGroup::setSubject(const QString &subject) {
    m_subject = subject;
    m_subject_isSet = true;
}

bool OAIAttendeeByGroup::is_subject_Set() const{
    return m_subject_isSet;
}

bool OAIAttendeeByGroup::is_subject_Valid() const{
    return m_subject_isValid;
}

bool OAIAttendeeByGroup::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_attendee_email_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_attendee_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_conference_call_info_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_duration_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_email_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_end_time_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_first_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_group_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_join_time_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_last_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_leave_time_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_meeting_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_meeting_instance_key_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_meeting_type.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_num_attendees_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_organizer_key_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_organizerkey_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_start_time_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_subject_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIAttendeeByGroup::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_attendee_email_isValid && m_attendee_name_isValid && m_conference_call_info_isValid && m_duration_isValid && m_email_isValid && m_end_time_isValid && m_first_name_isValid && m_group_name_isValid && m_join_time_isValid && m_last_name_isValid && m_leave_time_isValid && m_meeting_id_isValid && m_meeting_instance_key_isValid && m_meeting_type_isValid && m_num_attendees_isValid && m_organizer_key_isValid && m_organizerkey_isValid && m_start_time_isValid && m_subject_isValid && true;
}

} // namespace OpenAPI
