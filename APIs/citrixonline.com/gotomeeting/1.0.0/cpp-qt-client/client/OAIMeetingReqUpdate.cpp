/**
 * GoToMeeting
 * <br>The GoToMeeting API provides seamless integration of GoToMeeting provisioning and meeting management into your existing infrastructure or third party applications.<br><br>For customers, the ability to add, suspend or delete an organizer in your GoToMeeting Corporate account from within your primary management systems simplifies and streamlines the entire process of account management. The ability to monitor meeting schedules, history and active meeting status allows managers to leverage GoToMeeting activities through your primary applications.<br><br>For third parties, the ability to create, update or delete a meeting from within your application makes real-time collaboration possible for your customers. The ability to update meeting schedules, view history and scheduled meetings, and view attendees from past meetings allows you to enhance your users' experience and the value of your applications.
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: developer-support@citrixonline.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIMeetingReqUpdate.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIMeetingReqUpdate::OAIMeetingReqUpdate(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIMeetingReqUpdate::OAIMeetingReqUpdate() {
    this->initializeModel();
}

OAIMeetingReqUpdate::~OAIMeetingReqUpdate() {}

void OAIMeetingReqUpdate::initializeModel() {

    m_conferencecallinfo_isSet = false;
    m_conferencecallinfo_isValid = false;

    m_endtime_isSet = false;
    m_endtime_isValid = false;

    m_meetingtype_isSet = false;
    m_meetingtype_isValid = false;

    m_passwordrequired_isSet = false;
    m_passwordrequired_isValid = false;

    m_starttime_isSet = false;
    m_starttime_isValid = false;

    m_subject_isSet = false;
    m_subject_isValid = false;

    m_timezonekey_isSet = false;
    m_timezonekey_isValid = false;
}

void OAIMeetingReqUpdate::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIMeetingReqUpdate::fromJsonObject(QJsonObject json) {

    m_conferencecallinfo_isValid = ::OpenAPI::fromJsonValue(m_conferencecallinfo, json[QString("conferencecallinfo")]);
    m_conferencecallinfo_isSet = !json[QString("conferencecallinfo")].isNull() && m_conferencecallinfo_isValid;

    m_endtime_isValid = ::OpenAPI::fromJsonValue(m_endtime, json[QString("endtime")]);
    m_endtime_isSet = !json[QString("endtime")].isNull() && m_endtime_isValid;

    m_meetingtype_isValid = ::OpenAPI::fromJsonValue(m_meetingtype, json[QString("meetingtype")]);
    m_meetingtype_isSet = !json[QString("meetingtype")].isNull() && m_meetingtype_isValid;

    m_passwordrequired_isValid = ::OpenAPI::fromJsonValue(m_passwordrequired, json[QString("passwordrequired")]);
    m_passwordrequired_isSet = !json[QString("passwordrequired")].isNull() && m_passwordrequired_isValid;

    m_starttime_isValid = ::OpenAPI::fromJsonValue(m_starttime, json[QString("starttime")]);
    m_starttime_isSet = !json[QString("starttime")].isNull() && m_starttime_isValid;

    m_subject_isValid = ::OpenAPI::fromJsonValue(m_subject, json[QString("subject")]);
    m_subject_isSet = !json[QString("subject")].isNull() && m_subject_isValid;

    m_timezonekey_isValid = ::OpenAPI::fromJsonValue(m_timezonekey, json[QString("timezonekey")]);
    m_timezonekey_isSet = !json[QString("timezonekey")].isNull() && m_timezonekey_isValid;
}

QString OAIMeetingReqUpdate::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIMeetingReqUpdate::asJsonObject() const {
    QJsonObject obj;
    if (m_conferencecallinfo_isSet) {
        obj.insert(QString("conferencecallinfo"), ::OpenAPI::toJsonValue(m_conferencecallinfo));
    }
    if (m_endtime_isSet) {
        obj.insert(QString("endtime"), ::OpenAPI::toJsonValue(m_endtime));
    }
    if (m_meetingtype.isSet()) {
        obj.insert(QString("meetingtype"), ::OpenAPI::toJsonValue(m_meetingtype));
    }
    if (m_passwordrequired_isSet) {
        obj.insert(QString("passwordrequired"), ::OpenAPI::toJsonValue(m_passwordrequired));
    }
    if (m_starttime_isSet) {
        obj.insert(QString("starttime"), ::OpenAPI::toJsonValue(m_starttime));
    }
    if (m_subject_isSet) {
        obj.insert(QString("subject"), ::OpenAPI::toJsonValue(m_subject));
    }
    if (m_timezonekey_isSet) {
        obj.insert(QString("timezonekey"), ::OpenAPI::toJsonValue(m_timezonekey));
    }
    return obj;
}

QString OAIMeetingReqUpdate::getConferencecallinfo() const {
    return m_conferencecallinfo;
}
void OAIMeetingReqUpdate::setConferencecallinfo(const QString &conferencecallinfo) {
    m_conferencecallinfo = conferencecallinfo;
    m_conferencecallinfo_isSet = true;
}

bool OAIMeetingReqUpdate::is_conferencecallinfo_Set() const{
    return m_conferencecallinfo_isSet;
}

bool OAIMeetingReqUpdate::is_conferencecallinfo_Valid() const{
    return m_conferencecallinfo_isValid;
}

QDateTime OAIMeetingReqUpdate::getEndtime() const {
    return m_endtime;
}
void OAIMeetingReqUpdate::setEndtime(const QDateTime &endtime) {
    m_endtime = endtime;
    m_endtime_isSet = true;
}

bool OAIMeetingReqUpdate::is_endtime_Set() const{
    return m_endtime_isSet;
}

bool OAIMeetingReqUpdate::is_endtime_Valid() const{
    return m_endtime_isValid;
}

OAIMeetingType OAIMeetingReqUpdate::getMeetingtype() const {
    return m_meetingtype;
}
void OAIMeetingReqUpdate::setMeetingtype(const OAIMeetingType &meetingtype) {
    m_meetingtype = meetingtype;
    m_meetingtype_isSet = true;
}

bool OAIMeetingReqUpdate::is_meetingtype_Set() const{
    return m_meetingtype_isSet;
}

bool OAIMeetingReqUpdate::is_meetingtype_Valid() const{
    return m_meetingtype_isValid;
}

bool OAIMeetingReqUpdate::isPasswordrequired() const {
    return m_passwordrequired;
}
void OAIMeetingReqUpdate::setPasswordrequired(const bool &passwordrequired) {
    m_passwordrequired = passwordrequired;
    m_passwordrequired_isSet = true;
}

bool OAIMeetingReqUpdate::is_passwordrequired_Set() const{
    return m_passwordrequired_isSet;
}

bool OAIMeetingReqUpdate::is_passwordrequired_Valid() const{
    return m_passwordrequired_isValid;
}

QDateTime OAIMeetingReqUpdate::getStarttime() const {
    return m_starttime;
}
void OAIMeetingReqUpdate::setStarttime(const QDateTime &starttime) {
    m_starttime = starttime;
    m_starttime_isSet = true;
}

bool OAIMeetingReqUpdate::is_starttime_Set() const{
    return m_starttime_isSet;
}

bool OAIMeetingReqUpdate::is_starttime_Valid() const{
    return m_starttime_isValid;
}

QString OAIMeetingReqUpdate::getSubject() const {
    return m_subject;
}
void OAIMeetingReqUpdate::setSubject(const QString &subject) {
    m_subject = subject;
    m_subject_isSet = true;
}

bool OAIMeetingReqUpdate::is_subject_Set() const{
    return m_subject_isSet;
}

bool OAIMeetingReqUpdate::is_subject_Valid() const{
    return m_subject_isValid;
}

QString OAIMeetingReqUpdate::getTimezonekey() const {
    return m_timezonekey;
}
void OAIMeetingReqUpdate::setTimezonekey(const QString &timezonekey) {
    m_timezonekey = timezonekey;
    m_timezonekey_isSet = true;
}

bool OAIMeetingReqUpdate::is_timezonekey_Set() const{
    return m_timezonekey_isSet;
}

bool OAIMeetingReqUpdate::is_timezonekey_Valid() const{
    return m_timezonekey_isValid;
}

bool OAIMeetingReqUpdate::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_conferencecallinfo_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_endtime_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_meetingtype.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_passwordrequired_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_starttime_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_subject_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_timezonekey_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIMeetingReqUpdate::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_conferencecallinfo_isValid && m_endtime_isValid && m_meetingtype_isValid && m_passwordrequired_isValid && m_starttime_isValid && m_subject_isValid && m_timezonekey_isValid && true;
}

} // namespace OpenAPI
