/**
 * GoToMeeting
 * <br>The GoToMeeting API provides seamless integration of GoToMeeting provisioning and meeting management into your existing infrastructure or third party applications.<br><br>For customers, the ability to add, suspend or delete an organizer in your GoToMeeting Corporate account from within your primary management systems simplifies and streamlines the entire process of account management. The ability to monitor meeting schedules, history and active meeting status allows managers to leverage GoToMeeting activities through your primary applications.<br><br>For third parties, the ability to create, update or delete a meeting from within your application makes real-time collaboration possible for your customers. The ability to update meeting schedules, view history and scheduled meetings, and view attendees from past meetings allows you to enhance your users' experience and the value of your applications.
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: developer-support@citrixonline.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIMeetingCreated.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIMeetingCreated::OAIMeetingCreated(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIMeetingCreated::OAIMeetingCreated() {
    this->initializeModel();
}

OAIMeetingCreated::~OAIMeetingCreated() {}

void OAIMeetingCreated::initializeModel() {

    m_conference_call_info_isSet = false;
    m_conference_call_info_isValid = false;

    m_join_url_isSet = false;
    m_join_url_isValid = false;

    m_max_participants_isSet = false;
    m_max_participants_isValid = false;

    m_meetingid_isSet = false;
    m_meetingid_isValid = false;

    m_unique_meeting_id_isSet = false;
    m_unique_meeting_id_isValid = false;
}

void OAIMeetingCreated::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIMeetingCreated::fromJsonObject(QJsonObject json) {

    m_conference_call_info_isValid = ::OpenAPI::fromJsonValue(m_conference_call_info, json[QString("conferenceCallInfo")]);
    m_conference_call_info_isSet = !json[QString("conferenceCallInfo")].isNull() && m_conference_call_info_isValid;

    m_join_url_isValid = ::OpenAPI::fromJsonValue(m_join_url, json[QString("joinURL")]);
    m_join_url_isSet = !json[QString("joinURL")].isNull() && m_join_url_isValid;

    m_max_participants_isValid = ::OpenAPI::fromJsonValue(m_max_participants, json[QString("maxParticipants")]);
    m_max_participants_isSet = !json[QString("maxParticipants")].isNull() && m_max_participants_isValid;

    m_meetingid_isValid = ::OpenAPI::fromJsonValue(m_meetingid, json[QString("meetingid")]);
    m_meetingid_isSet = !json[QString("meetingid")].isNull() && m_meetingid_isValid;

    m_unique_meeting_id_isValid = ::OpenAPI::fromJsonValue(m_unique_meeting_id, json[QString("uniqueMeetingId")]);
    m_unique_meeting_id_isSet = !json[QString("uniqueMeetingId")].isNull() && m_unique_meeting_id_isValid;
}

QString OAIMeetingCreated::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIMeetingCreated::asJsonObject() const {
    QJsonObject obj;
    if (m_conference_call_info_isSet) {
        obj.insert(QString("conferenceCallInfo"), ::OpenAPI::toJsonValue(m_conference_call_info));
    }
    if (m_join_url_isSet) {
        obj.insert(QString("joinURL"), ::OpenAPI::toJsonValue(m_join_url));
    }
    if (m_max_participants_isSet) {
        obj.insert(QString("maxParticipants"), ::OpenAPI::toJsonValue(m_max_participants));
    }
    if (m_meetingid_isSet) {
        obj.insert(QString("meetingid"), ::OpenAPI::toJsonValue(m_meetingid));
    }
    if (m_unique_meeting_id_isSet) {
        obj.insert(QString("uniqueMeetingId"), ::OpenAPI::toJsonValue(m_unique_meeting_id));
    }
    return obj;
}

QString OAIMeetingCreated::getConferenceCallInfo() const {
    return m_conference_call_info;
}
void OAIMeetingCreated::setConferenceCallInfo(const QString &conference_call_info) {
    m_conference_call_info = conference_call_info;
    m_conference_call_info_isSet = true;
}

bool OAIMeetingCreated::is_conference_call_info_Set() const{
    return m_conference_call_info_isSet;
}

bool OAIMeetingCreated::is_conference_call_info_Valid() const{
    return m_conference_call_info_isValid;
}

QString OAIMeetingCreated::getJoinUrl() const {
    return m_join_url;
}
void OAIMeetingCreated::setJoinUrl(const QString &join_url) {
    m_join_url = join_url;
    m_join_url_isSet = true;
}

bool OAIMeetingCreated::is_join_url_Set() const{
    return m_join_url_isSet;
}

bool OAIMeetingCreated::is_join_url_Valid() const{
    return m_join_url_isValid;
}

qint32 OAIMeetingCreated::getMaxParticipants() const {
    return m_max_participants;
}
void OAIMeetingCreated::setMaxParticipants(const qint32 &max_participants) {
    m_max_participants = max_participants;
    m_max_participants_isSet = true;
}

bool OAIMeetingCreated::is_max_participants_Set() const{
    return m_max_participants_isSet;
}

bool OAIMeetingCreated::is_max_participants_Valid() const{
    return m_max_participants_isValid;
}

qint64 OAIMeetingCreated::getMeetingid() const {
    return m_meetingid;
}
void OAIMeetingCreated::setMeetingid(const qint64 &meetingid) {
    m_meetingid = meetingid;
    m_meetingid_isSet = true;
}

bool OAIMeetingCreated::is_meetingid_Set() const{
    return m_meetingid_isSet;
}

bool OAIMeetingCreated::is_meetingid_Valid() const{
    return m_meetingid_isValid;
}

qint64 OAIMeetingCreated::getUniqueMeetingId() const {
    return m_unique_meeting_id;
}
void OAIMeetingCreated::setUniqueMeetingId(const qint64 &unique_meeting_id) {
    m_unique_meeting_id = unique_meeting_id;
    m_unique_meeting_id_isSet = true;
}

bool OAIMeetingCreated::is_unique_meeting_id_Set() const{
    return m_unique_meeting_id_isSet;
}

bool OAIMeetingCreated::is_unique_meeting_id_Valid() const{
    return m_unique_meeting_id_isValid;
}

bool OAIMeetingCreated::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_conference_call_info_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_join_url_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_max_participants_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_meetingid_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_unique_meeting_id_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIMeetingCreated::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_conference_call_info_isValid && m_join_url_isValid && m_max_participants_isValid && m_meetingid_isValid && m_unique_meeting_id_isValid && true;
}

} // namespace OpenAPI
