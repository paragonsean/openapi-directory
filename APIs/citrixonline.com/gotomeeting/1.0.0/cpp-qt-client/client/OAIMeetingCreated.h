/**
 * GoToMeeting
 * <br>The GoToMeeting API provides seamless integration of GoToMeeting provisioning and meeting management into your existing infrastructure or third party applications.<br><br>For customers, the ability to add, suspend or delete an organizer in your GoToMeeting Corporate account from within your primary management systems simplifies and streamlines the entire process of account management. The ability to monitor meeting schedules, history and active meeting status allows managers to leverage GoToMeeting activities through your primary applications.<br><br>For third parties, the ability to create, update or delete a meeting from within your application makes real-time collaboration possible for your customers. The ability to update meeting schedules, view history and scheduled meetings, and view attendees from past meetings allows you to enhance your users' experience and the value of your applications.
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: developer-support@citrixonline.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAIMeetingCreated.h
 *
 * Describes a newly created meeting.
 */

#ifndef OAIMeetingCreated_H
#define OAIMeetingCreated_H

#include <QJsonObject>

#include <QString>

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {

class OAIMeetingCreated : public OAIObject {
public:
    OAIMeetingCreated();
    OAIMeetingCreated(QString json);
    ~OAIMeetingCreated() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    QString getConferenceCallInfo() const;
    void setConferenceCallInfo(const QString &conference_call_info);
    bool is_conference_call_info_Set() const;
    bool is_conference_call_info_Valid() const;

    QString getJoinUrl() const;
    void setJoinUrl(const QString &join_url);
    bool is_join_url_Set() const;
    bool is_join_url_Valid() const;

    qint32 getMaxParticipants() const;
    void setMaxParticipants(const qint32 &max_participants);
    bool is_max_participants_Set() const;
    bool is_max_participants_Valid() const;

    qint64 getMeetingid() const;
    void setMeetingid(const qint64 &meetingid);
    bool is_meetingid_Set() const;
    bool is_meetingid_Valid() const;

    qint64 getUniqueMeetingId() const;
    void setUniqueMeetingId(const qint64 &unique_meeting_id);
    bool is_unique_meeting_id_Set() const;
    bool is_unique_meeting_id_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    QString m_conference_call_info;
    bool m_conference_call_info_isSet;
    bool m_conference_call_info_isValid;

    QString m_join_url;
    bool m_join_url_isSet;
    bool m_join_url_isValid;

    qint32 m_max_participants;
    bool m_max_participants_isSet;
    bool m_max_participants_isValid;

    qint64 m_meetingid;
    bool m_meetingid_isSet;
    bool m_meetingid_isValid;

    qint64 m_unique_meeting_id;
    bool m_unique_meeting_id_isSet;
    bool m_unique_meeting_id_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAIMeetingCreated)

#endif // OAIMeetingCreated_H
