/**
 * GoToMeeting
 * <br>The GoToMeeting API provides seamless integration of GoToMeeting provisioning and meeting management into your existing infrastructure or third party applications.<br><br>For customers, the ability to add, suspend or delete an organizer in your GoToMeeting Corporate account from within your primary management systems simplifies and streamlines the entire process of account management. The ability to monitor meeting schedules, history and active meeting status allows managers to leverage GoToMeeting activities through your primary applications.<br><br>For third parties, the ability to create, update or delete a meeting from within your application makes real-time collaboration possible for your customers. The ability to update meeting schedules, view history and scheduled meetings, and view attendees from past meetings allows you to enhance your users' experience and the value of your applications.
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: developer-support@citrixonline.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIGroup.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIGroup::OAIGroup(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIGroup::OAIGroup() {
    this->initializeModel();
}

OAIGroup::~OAIGroup() {}

void OAIGroup::initializeModel() {

    m_group_name_isSet = false;
    m_group_name_isValid = false;

    m_groupkey_isSet = false;
    m_groupkey_isValid = false;

    m_num_organizers_isSet = false;
    m_num_organizers_isValid = false;

    m_parent_key_isSet = false;
    m_parent_key_isValid = false;

    m_status_isSet = false;
    m_status_isValid = false;
}

void OAIGroup::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIGroup::fromJsonObject(QJsonObject json) {

    m_group_name_isValid = ::OpenAPI::fromJsonValue(m_group_name, json[QString("groupName")]);
    m_group_name_isSet = !json[QString("groupName")].isNull() && m_group_name_isValid;

    m_groupkey_isValid = ::OpenAPI::fromJsonValue(m_groupkey, json[QString("groupkey")]);
    m_groupkey_isSet = !json[QString("groupkey")].isNull() && m_groupkey_isValid;

    m_num_organizers_isValid = ::OpenAPI::fromJsonValue(m_num_organizers, json[QString("numOrganizers")]);
    m_num_organizers_isSet = !json[QString("numOrganizers")].isNull() && m_num_organizers_isValid;

    m_parent_key_isValid = ::OpenAPI::fromJsonValue(m_parent_key, json[QString("parentKey")]);
    m_parent_key_isSet = !json[QString("parentKey")].isNull() && m_parent_key_isValid;

    m_status_isValid = ::OpenAPI::fromJsonValue(m_status, json[QString("status")]);
    m_status_isSet = !json[QString("status")].isNull() && m_status_isValid;
}

QString OAIGroup::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIGroup::asJsonObject() const {
    QJsonObject obj;
    if (m_group_name_isSet) {
        obj.insert(QString("groupName"), ::OpenAPI::toJsonValue(m_group_name));
    }
    if (m_groupkey_isSet) {
        obj.insert(QString("groupkey"), ::OpenAPI::toJsonValue(m_groupkey));
    }
    if (m_num_organizers_isSet) {
        obj.insert(QString("numOrganizers"), ::OpenAPI::toJsonValue(m_num_organizers));
    }
    if (m_parent_key_isSet) {
        obj.insert(QString("parentKey"), ::OpenAPI::toJsonValue(m_parent_key));
    }
    if (m_status.isSet()) {
        obj.insert(QString("status"), ::OpenAPI::toJsonValue(m_status));
    }
    return obj;
}

QString OAIGroup::getGroupName() const {
    return m_group_name;
}
void OAIGroup::setGroupName(const QString &group_name) {
    m_group_name = group_name;
    m_group_name_isSet = true;
}

bool OAIGroup::is_group_name_Set() const{
    return m_group_name_isSet;
}

bool OAIGroup::is_group_name_Valid() const{
    return m_group_name_isValid;
}

qint64 OAIGroup::getGroupkey() const {
    return m_groupkey;
}
void OAIGroup::setGroupkey(const qint64 &groupkey) {
    m_groupkey = groupkey;
    m_groupkey_isSet = true;
}

bool OAIGroup::is_groupkey_Set() const{
    return m_groupkey_isSet;
}

bool OAIGroup::is_groupkey_Valid() const{
    return m_groupkey_isValid;
}

qint32 OAIGroup::getNumOrganizers() const {
    return m_num_organizers;
}
void OAIGroup::setNumOrganizers(const qint32 &num_organizers) {
    m_num_organizers = num_organizers;
    m_num_organizers_isSet = true;
}

bool OAIGroup::is_num_organizers_Set() const{
    return m_num_organizers_isSet;
}

bool OAIGroup::is_num_organizers_Valid() const{
    return m_num_organizers_isValid;
}

qint64 OAIGroup::getParentKey() const {
    return m_parent_key;
}
void OAIGroup::setParentKey(const qint64 &parent_key) {
    m_parent_key = parent_key;
    m_parent_key_isSet = true;
}

bool OAIGroup::is_parent_key_Set() const{
    return m_parent_key_isSet;
}

bool OAIGroup::is_parent_key_Valid() const{
    return m_parent_key_isValid;
}

OAIStatus OAIGroup::getStatus() const {
    return m_status;
}
void OAIGroup::setStatus(const OAIStatus &status) {
    m_status = status;
    m_status_isSet = true;
}

bool OAIGroup::is_status_Set() const{
    return m_status_isSet;
}

bool OAIGroup::is_status_Valid() const{
    return m_status_isValid;
}

bool OAIGroup::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_group_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_groupkey_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_num_organizers_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_parent_key_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_status.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIGroup::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_group_name_isValid && m_groupkey_isValid && m_num_organizers_isValid && m_parent_key_isValid && m_status_isValid && true;
}

} // namespace OpenAPI
