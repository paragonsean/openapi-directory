/**
 * GoToMeeting
 * <br>The GoToMeeting API provides seamless integration of GoToMeeting provisioning and meeting management into your existing infrastructure or third party applications.<br><br>For customers, the ability to add, suspend or delete an organizer in your GoToMeeting Corporate account from within your primary management systems simplifies and streamlines the entire process of account management. The ability to monitor meeting schedules, history and active meeting status allows managers to leverage GoToMeeting activities through your primary applications.<br><br>For third parties, the ability to create, update or delete a meeting from within your application makes real-time collaboration possible for your customers. The ability to update meeting schedules, view history and scheduled meetings, and view attendees from past meetings allows you to enhance your users' experience and the value of your applications.
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: developer-support@citrixonline.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#ifndef OAI_OAIMeetingsApi_H
#define OAI_OAIMeetingsApi_H

#include "OAIHelpers.h"
#include "OAIHttpRequest.h"
#include "OAIServerConfiguration.h"
#include "OAIOauth.h"

#include "OAIAttendeeByMeeting.h"
#include "OAIHistoricalMeeting.h"
#include "OAIMeetingById.h"
#include "OAIMeetingCreated.h"
#include "OAIMeetingHistory.h"
#include "OAIMeetingReqCreate.h"
#include "OAIMeetingReqUpdate.h"
#include "OAIStartUrl.h"
#include "OAIUpcomingMeeting.h"
#include <QString>

#include <QObject>
#include <QByteArray>
#include <QStringList>
#include <QList>
#include <QNetworkAccessManager>

namespace OpenAPI {

class OAIMeetingsApi : public QObject {
    Q_OBJECT

public:
    OAIMeetingsApi(const int timeOut = 0);
    ~OAIMeetingsApi();

    void initializeServerConfigs();
    int setDefaultServerValue(int serverIndex,const QString &operation, const QString &variable,const QString &val);
    void setServerIndex(const QString &operation, int serverIndex);
    void setApiKey(const QString &apiKeyName, const QString &apiKey);
    void setBearerToken(const QString &token);
    void setUsername(const QString &username);
    void setPassword(const QString &password);
    void setTimeOut(const int timeOut);
    void setWorkingDirectory(const QString &path);
    void setNetworkAccessManager(QNetworkAccessManager* manager);
    int addServerConfiguration(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables = QMap<QString, OAIServerVariable>());
    void setNewServerForAllOperations(const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void setNewServer(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void addHeaders(const QString &key, const QString &value);
    void enableRequestCompression();
    void enableResponseCompression();
    void abortRequests();
    QString getParamStylePrefix(const QString &style);
    QString getParamStyleSuffix(const QString &style);
    QString getParamStyleDelimiter(const QString &style, const QString &name, bool isExplode);

    /**
    * @param[in]  authorization QString [required]
    * @param[in]  start_date QDateTime [required]
    * @param[in]  end_date QDateTime [required]
    */
    virtual void historicalMeetingsGet(const QString &authorization, const QDateTime &start_date, const QDateTime &end_date);

    /**
    * @param[in]  authorization QString [required]
    * @param[in]  history bool [optional]
    * @param[in]  start_date QDateTime [optional]
    * @param[in]  end_date QDateTime [optional]
    */
    Q_DECL_DEPRECATED virtual void meetingsGet(const QString &authorization, const ::OpenAPI::OptionalParam<bool> &history = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QDateTime> &start_date = ::OpenAPI::OptionalParam<QDateTime>(), const ::OpenAPI::OptionalParam<QDateTime> &end_date = ::OpenAPI::OptionalParam<QDateTime>());

    /**
    * @param[in]  authorization QString [required]
    * @param[in]  meeting_id qint64 [required]
    */
    virtual void meetingsMeetingIdAttendeesGet(const QString &authorization, const qint64 &meeting_id);

    /**
    * @param[in]  authorization QString [required]
    * @param[in]  meeting_id qint64 [required]
    */
    virtual void meetingsMeetingIdDelete(const QString &authorization, const qint64 &meeting_id);

    /**
    * @param[in]  authorization QString [required]
    * @param[in]  meeting_id qint64 [required]
    */
    virtual void meetingsMeetingIdGet(const QString &authorization, const qint64 &meeting_id);

    /**
    * @param[in]  authorization QString [required]
    * @param[in]  meeting_id qint64 [required]
    * @param[in]  body OAIMeetingReqUpdate [required]
    */
    virtual void meetingsMeetingIdPut(const QString &authorization, const qint64 &meeting_id, const OAIMeetingReqUpdate &body);

    /**
    * @param[in]  authorization QString [required]
    * @param[in]  meeting_id qint64 [required]
    */
    virtual void meetingsMeetingIdStartGet(const QString &authorization, const qint64 &meeting_id);

    /**
    * @param[in]  authorization QString [required]
    * @param[in]  body OAIMeetingReqCreate [required]
    */
    virtual void meetingsPost(const QString &authorization, const OAIMeetingReqCreate &body);

    /**
    * @param[in]  authorization QString [required]
    */
    virtual void upcomingMeetingsGet(const QString &authorization);


private:
    QMap<QString,int> _serverIndices;
    QMap<QString,QList<OAIServerConfiguration>> _serverConfigs;
    QMap<QString, QString> _apiKeys;
    QString _bearerToken;
    QString _username;
    QString _password;
    int _timeOut;
    QString _workingDirectory;
    QNetworkAccessManager* _manager;
    QMap<QString, QString> _defaultHeaders;
    bool _isResponseCompressionEnabled;
    bool _isRequestCompressionEnabled;
    OAIHttpRequestInput _latestInput;
    OAIHttpRequestWorker *_latestWorker;
    QStringList _latestScope;
    OauthCode _authFlow;
    OauthImplicit _implicitFlow;
    OauthCredentials _credentialFlow;
    OauthPassword _passwordFlow;
    int _OauthMethod = 0;

    void historicalMeetingsGetCallback(OAIHttpRequestWorker *worker);
    void meetingsGetCallback(OAIHttpRequestWorker *worker);
    void meetingsMeetingIdAttendeesGetCallback(OAIHttpRequestWorker *worker);
    void meetingsMeetingIdDeleteCallback(OAIHttpRequestWorker *worker);
    void meetingsMeetingIdGetCallback(OAIHttpRequestWorker *worker);
    void meetingsMeetingIdPutCallback(OAIHttpRequestWorker *worker);
    void meetingsMeetingIdStartGetCallback(OAIHttpRequestWorker *worker);
    void meetingsPostCallback(OAIHttpRequestWorker *worker);
    void upcomingMeetingsGetCallback(OAIHttpRequestWorker *worker);

Q_SIGNALS:

    void historicalMeetingsGetSignal(QList<OAIHistoricalMeeting> summary);
    void meetingsGetSignal(QList<OAIMeetingHistory> summary);
    void meetingsMeetingIdAttendeesGetSignal(QList<OAIAttendeeByMeeting> summary);
    void meetingsMeetingIdDeleteSignal();
    void meetingsMeetingIdGetSignal(QList<OAIMeetingById> summary);
    void meetingsMeetingIdPutSignal();
    void meetingsMeetingIdStartGetSignal(OAIStartUrl summary);
    void meetingsPostSignal(QList<OAIMeetingCreated> summary);
    void upcomingMeetingsGetSignal(QList<OAIUpcomingMeeting> summary);


    void historicalMeetingsGetSignalFull(OAIHttpRequestWorker *worker, QList<OAIHistoricalMeeting> summary);
    void meetingsGetSignalFull(OAIHttpRequestWorker *worker, QList<OAIMeetingHistory> summary);
    void meetingsMeetingIdAttendeesGetSignalFull(OAIHttpRequestWorker *worker, QList<OAIAttendeeByMeeting> summary);
    void meetingsMeetingIdDeleteSignalFull(OAIHttpRequestWorker *worker);
    void meetingsMeetingIdGetSignalFull(OAIHttpRequestWorker *worker, QList<OAIMeetingById> summary);
    void meetingsMeetingIdPutSignalFull(OAIHttpRequestWorker *worker);
    void meetingsMeetingIdStartGetSignalFull(OAIHttpRequestWorker *worker, OAIStartUrl summary);
    void meetingsPostSignalFull(OAIHttpRequestWorker *worker, QList<OAIMeetingCreated> summary);
    void upcomingMeetingsGetSignalFull(OAIHttpRequestWorker *worker, QList<OAIUpcomingMeeting> summary);

    Q_DECL_DEPRECATED_X("Use historicalMeetingsGetSignalError() instead")
    void historicalMeetingsGetSignalE(QList<OAIHistoricalMeeting> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void historicalMeetingsGetSignalError(QList<OAIHistoricalMeeting> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use meetingsGetSignalError() instead")
    void meetingsGetSignalE(QList<OAIMeetingHistory> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void meetingsGetSignalError(QList<OAIMeetingHistory> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use meetingsMeetingIdAttendeesGetSignalError() instead")
    void meetingsMeetingIdAttendeesGetSignalE(QList<OAIAttendeeByMeeting> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void meetingsMeetingIdAttendeesGetSignalError(QList<OAIAttendeeByMeeting> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use meetingsMeetingIdDeleteSignalError() instead")
    void meetingsMeetingIdDeleteSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void meetingsMeetingIdDeleteSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use meetingsMeetingIdGetSignalError() instead")
    void meetingsMeetingIdGetSignalE(QList<OAIMeetingById> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void meetingsMeetingIdGetSignalError(QList<OAIMeetingById> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use meetingsMeetingIdPutSignalError() instead")
    void meetingsMeetingIdPutSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void meetingsMeetingIdPutSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use meetingsMeetingIdStartGetSignalError() instead")
    void meetingsMeetingIdStartGetSignalE(OAIStartUrl summary, QNetworkReply::NetworkError error_type, QString error_str);
    void meetingsMeetingIdStartGetSignalError(OAIStartUrl summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use meetingsPostSignalError() instead")
    void meetingsPostSignalE(QList<OAIMeetingCreated> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void meetingsPostSignalError(QList<OAIMeetingCreated> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use upcomingMeetingsGetSignalError() instead")
    void upcomingMeetingsGetSignalE(QList<OAIUpcomingMeeting> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void upcomingMeetingsGetSignalError(QList<OAIUpcomingMeeting> summary, QNetworkReply::NetworkError error_type, const QString &error_str);

    Q_DECL_DEPRECATED_X("Use historicalMeetingsGetSignalErrorFull() instead")
    void historicalMeetingsGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void historicalMeetingsGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use meetingsGetSignalErrorFull() instead")
    void meetingsGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void meetingsGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use meetingsMeetingIdAttendeesGetSignalErrorFull() instead")
    void meetingsMeetingIdAttendeesGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void meetingsMeetingIdAttendeesGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use meetingsMeetingIdDeleteSignalErrorFull() instead")
    void meetingsMeetingIdDeleteSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void meetingsMeetingIdDeleteSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use meetingsMeetingIdGetSignalErrorFull() instead")
    void meetingsMeetingIdGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void meetingsMeetingIdGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use meetingsMeetingIdPutSignalErrorFull() instead")
    void meetingsMeetingIdPutSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void meetingsMeetingIdPutSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use meetingsMeetingIdStartGetSignalErrorFull() instead")
    void meetingsMeetingIdStartGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void meetingsMeetingIdStartGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use meetingsPostSignalErrorFull() instead")
    void meetingsPostSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void meetingsPostSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use upcomingMeetingsGetSignalErrorFull() instead")
    void upcomingMeetingsGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void upcomingMeetingsGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);

    void abortRequestsSignal();
    void allPendingRequestsCompleted();

public Q_SLOTS:
    void tokenAvailable();
};

} // namespace OpenAPI
#endif
