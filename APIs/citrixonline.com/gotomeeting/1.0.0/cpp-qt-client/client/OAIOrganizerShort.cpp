/**
 * GoToMeeting
 * <br>The GoToMeeting API provides seamless integration of GoToMeeting provisioning and meeting management into your existing infrastructure or third party applications.<br><br>For customers, the ability to add, suspend or delete an organizer in your GoToMeeting Corporate account from within your primary management systems simplifies and streamlines the entire process of account management. The ability to monitor meeting schedules, history and active meeting status allows managers to leverage GoToMeeting activities through your primary applications.<br><br>For third parties, the ability to create, update or delete a meeting from within your application makes real-time collaboration possible for your customers. The ability to update meeting schedules, view history and scheduled meetings, and view attendees from past meetings allows you to enhance your users' experience and the value of your applications.
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: developer-support@citrixonline.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIOrganizerShort.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIOrganizerShort::OAIOrganizerShort(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIOrganizerShort::OAIOrganizerShort() {
    this->initializeModel();
}

OAIOrganizerShort::~OAIOrganizerShort() {}

void OAIOrganizerShort::initializeModel() {

    m_email_isSet = false;
    m_email_isValid = false;

    m_key_isSet = false;
    m_key_isValid = false;
}

void OAIOrganizerShort::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIOrganizerShort::fromJsonObject(QJsonObject json) {

    m_email_isValid = ::OpenAPI::fromJsonValue(m_email, json[QString("email")]);
    m_email_isSet = !json[QString("email")].isNull() && m_email_isValid;

    m_key_isValid = ::OpenAPI::fromJsonValue(m_key, json[QString("key")]);
    m_key_isSet = !json[QString("key")].isNull() && m_key_isValid;
}

QString OAIOrganizerShort::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIOrganizerShort::asJsonObject() const {
    QJsonObject obj;
    if (m_email_isSet) {
        obj.insert(QString("email"), ::OpenAPI::toJsonValue(m_email));
    }
    if (m_key_isSet) {
        obj.insert(QString("key"), ::OpenAPI::toJsonValue(m_key));
    }
    return obj;
}

QString OAIOrganizerShort::getEmail() const {
    return m_email;
}
void OAIOrganizerShort::setEmail(const QString &email) {
    m_email = email;
    m_email_isSet = true;
}

bool OAIOrganizerShort::is_email_Set() const{
    return m_email_isSet;
}

bool OAIOrganizerShort::is_email_Valid() const{
    return m_email_isValid;
}

qint64 OAIOrganizerShort::getKey() const {
    return m_key;
}
void OAIOrganizerShort::setKey(const qint64 &key) {
    m_key = key;
    m_key_isSet = true;
}

bool OAIOrganizerShort::is_key_Set() const{
    return m_key_isSet;
}

bool OAIOrganizerShort::is_key_Valid() const{
    return m_key_isValid;
}

bool OAIOrganizerShort::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_email_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_key_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIOrganizerShort::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_email_isValid && m_key_isValid && true;
}

} // namespace OpenAPI
