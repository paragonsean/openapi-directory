/**
 * GoToMeeting
 * <br>The GoToMeeting API provides seamless integration of GoToMeeting provisioning and meeting management into your existing infrastructure or third party applications.<br><br>For customers, the ability to add, suspend or delete an organizer in your GoToMeeting Corporate account from within your primary management systems simplifies and streamlines the entire process of account management. The ability to monitor meeting schedules, history and active meeting status allows managers to leverage GoToMeeting activities through your primary applications.<br><br>For third parties, the ability to create, update or delete a meeting from within your application makes real-time collaboration possible for your customers. The ability to update meeting schedules, view history and scheduled meetings, and view attendees from past meetings allows you to enhance your users' experience and the value of your applications.
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: developer-support@citrixonline.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#ifndef OAI_OAIGroupsApi_H
#define OAI_OAIGroupsApi_H

#include "OAIHelpers.h"
#include "OAIHttpRequest.h"
#include "OAIServerConfiguration.h"
#include "OAIOauth.h"

#include "OAIAttendeeByGroup.h"
#include "OAIGroup.h"
#include "OAIHistoricalMeetingByGroup.h"
#include "OAIHistoryMeetingByGroup.h"
#include "OAIOrganizerByGroup.h"
#include "OAIOrganizerReq.h"
#include "OAIOrganizerShort.h"
#include "OAIUpcomingMeetingByGroup.h"
#include <QString>

#include <QObject>
#include <QByteArray>
#include <QStringList>
#include <QList>
#include <QNetworkAccessManager>

namespace OpenAPI {

class OAIGroupsApi : public QObject {
    Q_OBJECT

public:
    OAIGroupsApi(const int timeOut = 0);
    ~OAIGroupsApi();

    void initializeServerConfigs();
    int setDefaultServerValue(int serverIndex,const QString &operation, const QString &variable,const QString &val);
    void setServerIndex(const QString &operation, int serverIndex);
    void setApiKey(const QString &apiKeyName, const QString &apiKey);
    void setBearerToken(const QString &token);
    void setUsername(const QString &username);
    void setPassword(const QString &password);
    void setTimeOut(const int timeOut);
    void setWorkingDirectory(const QString &path);
    void setNetworkAccessManager(QNetworkAccessManager* manager);
    int addServerConfiguration(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables = QMap<QString, OAIServerVariable>());
    void setNewServerForAllOperations(const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void setNewServer(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void addHeaders(const QString &key, const QString &value);
    void enableRequestCompression();
    void enableResponseCompression();
    void abortRequests();
    QString getParamStylePrefix(const QString &style);
    QString getParamStyleSuffix(const QString &style);
    QString getParamStyleDelimiter(const QString &style, const QString &name, bool isExplode);

    /**
    * @param[in]  authorization QString [required]
    */
    virtual void groupsGet(const QString &authorization);

    /**
    * @param[in]  authorization QString [required]
    * @param[in]  group_key qint64 [required]
    * @param[in]  start_date QDateTime [optional]
    * @param[in]  end_date QDateTime [optional]
    */
    virtual void groupsGroupKeyAttendeesGet(const QString &authorization, const qint64 &group_key, const ::OpenAPI::OptionalParam<QDateTime> &start_date = ::OpenAPI::OptionalParam<QDateTime>(), const ::OpenAPI::OptionalParam<QDateTime> &end_date = ::OpenAPI::OptionalParam<QDateTime>());

    /**
    * @param[in]  authorization QString [required]
    * @param[in]  group_key qint64 [required]
    * @param[in]  start_date QDateTime [required]
    * @param[in]  end_date QDateTime [required]
    */
    virtual void groupsGroupKeyHistoricalMeetingsGet(const QString &authorization, const qint64 &group_key, const QDateTime &start_date, const QDateTime &end_date);

    /**
    * @param[in]  authorization QString [required]
    * @param[in]  group_key qint64 [required]
    * @param[in]  history bool [required]
    * @param[in]  start_date QDateTime [required]
    * @param[in]  end_date QDateTime [required]
    */
    Q_DECL_DEPRECATED virtual void groupsGroupKeyMeetingsGet(const QString &authorization, const qint64 &group_key, const bool &history, const QDateTime &start_date, const QDateTime &end_date);

    /**
    * @param[in]  authorization QString [required]
    * @param[in]  group_key qint64 [required]
    */
    virtual void groupsGroupKeyOrganizersGet(const QString &authorization, const qint64 &group_key);

    /**
    * @param[in]  authorization QString [required]
    * @param[in]  group_key qint64 [required]
    * @param[in]  body OAIOrganizerReq [required]
    */
    virtual void groupsGroupKeyOrganizersPost(const QString &authorization, const qint64 &group_key, const OAIOrganizerReq &body);

    /**
    * @param[in]  authorization QString [required]
    * @param[in]  group_key qint64 [required]
    */
    virtual void groupsGroupKeyUpcomingMeetingsGet(const QString &authorization, const qint64 &group_key);


private:
    QMap<QString,int> _serverIndices;
    QMap<QString,QList<OAIServerConfiguration>> _serverConfigs;
    QMap<QString, QString> _apiKeys;
    QString _bearerToken;
    QString _username;
    QString _password;
    int _timeOut;
    QString _workingDirectory;
    QNetworkAccessManager* _manager;
    QMap<QString, QString> _defaultHeaders;
    bool _isResponseCompressionEnabled;
    bool _isRequestCompressionEnabled;
    OAIHttpRequestInput _latestInput;
    OAIHttpRequestWorker *_latestWorker;
    QStringList _latestScope;
    OauthCode _authFlow;
    OauthImplicit _implicitFlow;
    OauthCredentials _credentialFlow;
    OauthPassword _passwordFlow;
    int _OauthMethod = 0;

    void groupsGetCallback(OAIHttpRequestWorker *worker);
    void groupsGroupKeyAttendeesGetCallback(OAIHttpRequestWorker *worker);
    void groupsGroupKeyHistoricalMeetingsGetCallback(OAIHttpRequestWorker *worker);
    void groupsGroupKeyMeetingsGetCallback(OAIHttpRequestWorker *worker);
    void groupsGroupKeyOrganizersGetCallback(OAIHttpRequestWorker *worker);
    void groupsGroupKeyOrganizersPostCallback(OAIHttpRequestWorker *worker);
    void groupsGroupKeyUpcomingMeetingsGetCallback(OAIHttpRequestWorker *worker);

Q_SIGNALS:

    void groupsGetSignal(QList<OAIGroup> summary);
    void groupsGroupKeyAttendeesGetSignal(QList<OAIAttendeeByGroup> summary);
    void groupsGroupKeyHistoricalMeetingsGetSignal(QList<OAIHistoricalMeetingByGroup> summary);
    void groupsGroupKeyMeetingsGetSignal(QList<OAIHistoryMeetingByGroup> summary);
    void groupsGroupKeyOrganizersGetSignal(QList<OAIOrganizerByGroup> summary);
    void groupsGroupKeyOrganizersPostSignal(QList<OAIOrganizerShort> summary);
    void groupsGroupKeyUpcomingMeetingsGetSignal(QList<OAIUpcomingMeetingByGroup> summary);


    void groupsGetSignalFull(OAIHttpRequestWorker *worker, QList<OAIGroup> summary);
    void groupsGroupKeyAttendeesGetSignalFull(OAIHttpRequestWorker *worker, QList<OAIAttendeeByGroup> summary);
    void groupsGroupKeyHistoricalMeetingsGetSignalFull(OAIHttpRequestWorker *worker, QList<OAIHistoricalMeetingByGroup> summary);
    void groupsGroupKeyMeetingsGetSignalFull(OAIHttpRequestWorker *worker, QList<OAIHistoryMeetingByGroup> summary);
    void groupsGroupKeyOrganizersGetSignalFull(OAIHttpRequestWorker *worker, QList<OAIOrganizerByGroup> summary);
    void groupsGroupKeyOrganizersPostSignalFull(OAIHttpRequestWorker *worker, QList<OAIOrganizerShort> summary);
    void groupsGroupKeyUpcomingMeetingsGetSignalFull(OAIHttpRequestWorker *worker, QList<OAIUpcomingMeetingByGroup> summary);

    Q_DECL_DEPRECATED_X("Use groupsGetSignalError() instead")
    void groupsGetSignalE(QList<OAIGroup> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void groupsGetSignalError(QList<OAIGroup> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use groupsGroupKeyAttendeesGetSignalError() instead")
    void groupsGroupKeyAttendeesGetSignalE(QList<OAIAttendeeByGroup> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void groupsGroupKeyAttendeesGetSignalError(QList<OAIAttendeeByGroup> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use groupsGroupKeyHistoricalMeetingsGetSignalError() instead")
    void groupsGroupKeyHistoricalMeetingsGetSignalE(QList<OAIHistoricalMeetingByGroup> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void groupsGroupKeyHistoricalMeetingsGetSignalError(QList<OAIHistoricalMeetingByGroup> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use groupsGroupKeyMeetingsGetSignalError() instead")
    void groupsGroupKeyMeetingsGetSignalE(QList<OAIHistoryMeetingByGroup> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void groupsGroupKeyMeetingsGetSignalError(QList<OAIHistoryMeetingByGroup> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use groupsGroupKeyOrganizersGetSignalError() instead")
    void groupsGroupKeyOrganizersGetSignalE(QList<OAIOrganizerByGroup> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void groupsGroupKeyOrganizersGetSignalError(QList<OAIOrganizerByGroup> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use groupsGroupKeyOrganizersPostSignalError() instead")
    void groupsGroupKeyOrganizersPostSignalE(QList<OAIOrganizerShort> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void groupsGroupKeyOrganizersPostSignalError(QList<OAIOrganizerShort> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use groupsGroupKeyUpcomingMeetingsGetSignalError() instead")
    void groupsGroupKeyUpcomingMeetingsGetSignalE(QList<OAIUpcomingMeetingByGroup> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void groupsGroupKeyUpcomingMeetingsGetSignalError(QList<OAIUpcomingMeetingByGroup> summary, QNetworkReply::NetworkError error_type, const QString &error_str);

    Q_DECL_DEPRECATED_X("Use groupsGetSignalErrorFull() instead")
    void groupsGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void groupsGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use groupsGroupKeyAttendeesGetSignalErrorFull() instead")
    void groupsGroupKeyAttendeesGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void groupsGroupKeyAttendeesGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use groupsGroupKeyHistoricalMeetingsGetSignalErrorFull() instead")
    void groupsGroupKeyHistoricalMeetingsGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void groupsGroupKeyHistoricalMeetingsGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use groupsGroupKeyMeetingsGetSignalErrorFull() instead")
    void groupsGroupKeyMeetingsGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void groupsGroupKeyMeetingsGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use groupsGroupKeyOrganizersGetSignalErrorFull() instead")
    void groupsGroupKeyOrganizersGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void groupsGroupKeyOrganizersGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use groupsGroupKeyOrganizersPostSignalErrorFull() instead")
    void groupsGroupKeyOrganizersPostSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void groupsGroupKeyOrganizersPostSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use groupsGroupKeyUpcomingMeetingsGetSignalErrorFull() instead")
    void groupsGroupKeyUpcomingMeetingsGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void groupsGroupKeyUpcomingMeetingsGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);

    void abortRequestsSignal();
    void allPendingRequestsCompleted();

public Q_SLOTS:
    void tokenAvailable();
};

} // namespace OpenAPI
#endif
