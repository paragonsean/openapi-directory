/**
 * GoToMeeting
 * <br>The GoToMeeting API provides seamless integration of GoToMeeting provisioning and meeting management into your existing infrastructure or third party applications.<br><br>For customers, the ability to add, suspend or delete an organizer in your GoToMeeting Corporate account from within your primary management systems simplifies and streamlines the entire process of account management. The ability to monitor meeting schedules, history and active meeting status allows managers to leverage GoToMeeting activities through your primary applications.<br><br>For third parties, the ability to create, update or delete a meeting from within your application makes real-time collaboration possible for your customers. The ability to update meeting schedules, view history and scheduled meetings, and view attendees from past meetings allows you to enhance your users' experience and the value of your applications.
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: developer-support@citrixonline.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAIMeetingReqCreate.h
 *
 * Describes the information required to create a meeting.
 */

#ifndef OAIMeetingReqCreate_H
#define OAIMeetingReqCreate_H

#include <QJsonObject>

#include "OAIMeetingType.h"
#include <QDateTime>
#include <QString>

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {

class OAIMeetingReqCreate : public OAIObject {
public:
    OAIMeetingReqCreate();
    OAIMeetingReqCreate(QString json);
    ~OAIMeetingReqCreate() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    QString getConferencecallinfo() const;
    void setConferencecallinfo(const QString &conferencecallinfo);
    bool is_conferencecallinfo_Set() const;
    bool is_conferencecallinfo_Valid() const;

    QDateTime getEndtime() const;
    void setEndtime(const QDateTime &endtime);
    bool is_endtime_Set() const;
    bool is_endtime_Valid() const;

    OAIMeetingType getMeetingtype() const;
    void setMeetingtype(const OAIMeetingType &meetingtype);
    bool is_meetingtype_Set() const;
    bool is_meetingtype_Valid() const;

    bool isPasswordrequired() const;
    void setPasswordrequired(const bool &passwordrequired);
    bool is_passwordrequired_Set() const;
    bool is_passwordrequired_Valid() const;

    QDateTime getStarttime() const;
    void setStarttime(const QDateTime &starttime);
    bool is_starttime_Set() const;
    bool is_starttime_Valid() const;

    QString getSubject() const;
    void setSubject(const QString &subject);
    bool is_subject_Set() const;
    bool is_subject_Valid() const;

    QString getTimezonekey() const;
    void setTimezonekey(const QString &timezonekey);
    bool is_timezonekey_Set() const;
    bool is_timezonekey_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    QString m_conferencecallinfo;
    bool m_conferencecallinfo_isSet;
    bool m_conferencecallinfo_isValid;

    QDateTime m_endtime;
    bool m_endtime_isSet;
    bool m_endtime_isValid;

    OAIMeetingType m_meetingtype;
    bool m_meetingtype_isSet;
    bool m_meetingtype_isValid;

    bool m_passwordrequired;
    bool m_passwordrequired_isSet;
    bool m_passwordrequired_isValid;

    QDateTime m_starttime;
    bool m_starttime_isSet;
    bool m_starttime_isValid;

    QString m_subject;
    bool m_subject_isSet;
    bool m_subject_isValid;

    QString m_timezonekey;
    bool m_timezonekey_isSet;
    bool m_timezonekey_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAIMeetingReqCreate)

#endif // OAIMeetingReqCreate_H
