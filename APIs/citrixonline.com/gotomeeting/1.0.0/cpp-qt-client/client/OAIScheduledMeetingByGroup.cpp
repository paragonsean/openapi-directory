/**
 * GoToMeeting
 * <br>The GoToMeeting API provides seamless integration of GoToMeeting provisioning and meeting management into your existing infrastructure or third party applications.<br><br>For customers, the ability to add, suspend or delete an organizer in your GoToMeeting Corporate account from within your primary management systems simplifies and streamlines the entire process of account management. The ability to monitor meeting schedules, history and active meeting status allows managers to leverage GoToMeeting activities through your primary applications.<br><br>For third parties, the ability to create, update or delete a meeting from within your application makes real-time collaboration possible for your customers. The ability to update meeting schedules, view history and scheduled meetings, and view attendees from past meetings allows you to enhance your users' experience and the value of your applications.
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: developer-support@citrixonline.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIScheduledMeetingByGroup.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIScheduledMeetingByGroup::OAIScheduledMeetingByGroup(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIScheduledMeetingByGroup::OAIScheduledMeetingByGroup() {
    this->initializeModel();
}

OAIScheduledMeetingByGroup::~OAIScheduledMeetingByGroup() {}

void OAIScheduledMeetingByGroup::initializeModel() {

    m_attendees_isSet = false;
    m_attendees_isValid = false;

    m_conference_call_info_isSet = false;
    m_conference_call_info_isValid = false;

    m_email_isSet = false;
    m_email_isValid = false;

    m_first_name_isSet = false;
    m_first_name_isValid = false;

    m_group_name_isSet = false;
    m_group_name_isValid = false;

    m_last_name_isSet = false;
    m_last_name_isValid = false;

    m_meeting_id_isSet = false;
    m_meeting_id_isValid = false;

    m_meeting_type_isSet = false;
    m_meeting_type_isValid = false;

    m_organizer_key_isSet = false;
    m_organizer_key_isValid = false;

    m_organizerkey_isSet = false;
    m_organizerkey_isValid = false;

    m_password_required_isSet = false;
    m_password_required_isValid = false;

    m_subject_isSet = false;
    m_subject_isValid = false;
}

void OAIScheduledMeetingByGroup::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIScheduledMeetingByGroup::fromJsonObject(QJsonObject json) {

    m_attendees_isValid = ::OpenAPI::fromJsonValue(m_attendees, json[QString("attendees")]);
    m_attendees_isSet = !json[QString("attendees")].isNull() && m_attendees_isValid;

    m_conference_call_info_isValid = ::OpenAPI::fromJsonValue(m_conference_call_info, json[QString("conferenceCallInfo")]);
    m_conference_call_info_isSet = !json[QString("conferenceCallInfo")].isNull() && m_conference_call_info_isValid;

    m_email_isValid = ::OpenAPI::fromJsonValue(m_email, json[QString("email")]);
    m_email_isSet = !json[QString("email")].isNull() && m_email_isValid;

    m_first_name_isValid = ::OpenAPI::fromJsonValue(m_first_name, json[QString("firstName")]);
    m_first_name_isSet = !json[QString("firstName")].isNull() && m_first_name_isValid;

    m_group_name_isValid = ::OpenAPI::fromJsonValue(m_group_name, json[QString("groupName")]);
    m_group_name_isSet = !json[QString("groupName")].isNull() && m_group_name_isValid;

    m_last_name_isValid = ::OpenAPI::fromJsonValue(m_last_name, json[QString("lastName")]);
    m_last_name_isSet = !json[QString("lastName")].isNull() && m_last_name_isValid;

    m_meeting_id_isValid = ::OpenAPI::fromJsonValue(m_meeting_id, json[QString("meetingId")]);
    m_meeting_id_isSet = !json[QString("meetingId")].isNull() && m_meeting_id_isValid;

    m_meeting_type_isValid = ::OpenAPI::fromJsonValue(m_meeting_type, json[QString("meetingType")]);
    m_meeting_type_isSet = !json[QString("meetingType")].isNull() && m_meeting_type_isValid;

    m_organizer_key_isValid = ::OpenAPI::fromJsonValue(m_organizer_key, json[QString("organizerKey")]);
    m_organizer_key_isSet = !json[QString("organizerKey")].isNull() && m_organizer_key_isValid;

    m_organizerkey_isValid = ::OpenAPI::fromJsonValue(m_organizerkey, json[QString("organizerkey")]);
    m_organizerkey_isSet = !json[QString("organizerkey")].isNull() && m_organizerkey_isValid;

    m_password_required_isValid = ::OpenAPI::fromJsonValue(m_password_required, json[QString("passwordRequired")]);
    m_password_required_isSet = !json[QString("passwordRequired")].isNull() && m_password_required_isValid;

    m_subject_isValid = ::OpenAPI::fromJsonValue(m_subject, json[QString("subject")]);
    m_subject_isSet = !json[QString("subject")].isNull() && m_subject_isValid;
}

QString OAIScheduledMeetingByGroup::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIScheduledMeetingByGroup::asJsonObject() const {
    QJsonObject obj;
    if (m_attendees_isSet) {
        obj.insert(QString("attendees"), ::OpenAPI::toJsonValue(m_attendees));
    }
    if (m_conference_call_info_isSet) {
        obj.insert(QString("conferenceCallInfo"), ::OpenAPI::toJsonValue(m_conference_call_info));
    }
    if (m_email_isSet) {
        obj.insert(QString("email"), ::OpenAPI::toJsonValue(m_email));
    }
    if (m_first_name_isSet) {
        obj.insert(QString("firstName"), ::OpenAPI::toJsonValue(m_first_name));
    }
    if (m_group_name_isSet) {
        obj.insert(QString("groupName"), ::OpenAPI::toJsonValue(m_group_name));
    }
    if (m_last_name_isSet) {
        obj.insert(QString("lastName"), ::OpenAPI::toJsonValue(m_last_name));
    }
    if (m_meeting_id_isSet) {
        obj.insert(QString("meetingId"), ::OpenAPI::toJsonValue(m_meeting_id));
    }
    if (m_meeting_type.isSet()) {
        obj.insert(QString("meetingType"), ::OpenAPI::toJsonValue(m_meeting_type));
    }
    if (m_organizer_key_isSet) {
        obj.insert(QString("organizerKey"), ::OpenAPI::toJsonValue(m_organizer_key));
    }
    if (m_organizerkey_isSet) {
        obj.insert(QString("organizerkey"), ::OpenAPI::toJsonValue(m_organizerkey));
    }
    if (m_password_required_isSet) {
        obj.insert(QString("passwordRequired"), ::OpenAPI::toJsonValue(m_password_required));
    }
    if (m_subject_isSet) {
        obj.insert(QString("subject"), ::OpenAPI::toJsonValue(m_subject));
    }
    return obj;
}

QString OAIScheduledMeetingByGroup::getAttendees() const {
    return m_attendees;
}
void OAIScheduledMeetingByGroup::setAttendees(const QString &attendees) {
    m_attendees = attendees;
    m_attendees_isSet = true;
}

bool OAIScheduledMeetingByGroup::is_attendees_Set() const{
    return m_attendees_isSet;
}

bool OAIScheduledMeetingByGroup::is_attendees_Valid() const{
    return m_attendees_isValid;
}

QString OAIScheduledMeetingByGroup::getConferenceCallInfo() const {
    return m_conference_call_info;
}
void OAIScheduledMeetingByGroup::setConferenceCallInfo(const QString &conference_call_info) {
    m_conference_call_info = conference_call_info;
    m_conference_call_info_isSet = true;
}

bool OAIScheduledMeetingByGroup::is_conference_call_info_Set() const{
    return m_conference_call_info_isSet;
}

bool OAIScheduledMeetingByGroup::is_conference_call_info_Valid() const{
    return m_conference_call_info_isValid;
}

QString OAIScheduledMeetingByGroup::getEmail() const {
    return m_email;
}
void OAIScheduledMeetingByGroup::setEmail(const QString &email) {
    m_email = email;
    m_email_isSet = true;
}

bool OAIScheduledMeetingByGroup::is_email_Set() const{
    return m_email_isSet;
}

bool OAIScheduledMeetingByGroup::is_email_Valid() const{
    return m_email_isValid;
}

QString OAIScheduledMeetingByGroup::getFirstName() const {
    return m_first_name;
}
void OAIScheduledMeetingByGroup::setFirstName(const QString &first_name) {
    m_first_name = first_name;
    m_first_name_isSet = true;
}

bool OAIScheduledMeetingByGroup::is_first_name_Set() const{
    return m_first_name_isSet;
}

bool OAIScheduledMeetingByGroup::is_first_name_Valid() const{
    return m_first_name_isValid;
}

QString OAIScheduledMeetingByGroup::getGroupName() const {
    return m_group_name;
}
void OAIScheduledMeetingByGroup::setGroupName(const QString &group_name) {
    m_group_name = group_name;
    m_group_name_isSet = true;
}

bool OAIScheduledMeetingByGroup::is_group_name_Set() const{
    return m_group_name_isSet;
}

bool OAIScheduledMeetingByGroup::is_group_name_Valid() const{
    return m_group_name_isValid;
}

QString OAIScheduledMeetingByGroup::getLastName() const {
    return m_last_name;
}
void OAIScheduledMeetingByGroup::setLastName(const QString &last_name) {
    m_last_name = last_name;
    m_last_name_isSet = true;
}

bool OAIScheduledMeetingByGroup::is_last_name_Set() const{
    return m_last_name_isSet;
}

bool OAIScheduledMeetingByGroup::is_last_name_Valid() const{
    return m_last_name_isValid;
}

QString OAIScheduledMeetingByGroup::getMeetingId() const {
    return m_meeting_id;
}
void OAIScheduledMeetingByGroup::setMeetingId(const QString &meeting_id) {
    m_meeting_id = meeting_id;
    m_meeting_id_isSet = true;
}

bool OAIScheduledMeetingByGroup::is_meeting_id_Set() const{
    return m_meeting_id_isSet;
}

bool OAIScheduledMeetingByGroup::is_meeting_id_Valid() const{
    return m_meeting_id_isValid;
}

OAIMeetingType OAIScheduledMeetingByGroup::getMeetingType() const {
    return m_meeting_type;
}
void OAIScheduledMeetingByGroup::setMeetingType(const OAIMeetingType &meeting_type) {
    m_meeting_type = meeting_type;
    m_meeting_type_isSet = true;
}

bool OAIScheduledMeetingByGroup::is_meeting_type_Set() const{
    return m_meeting_type_isSet;
}

bool OAIScheduledMeetingByGroup::is_meeting_type_Valid() const{
    return m_meeting_type_isValid;
}

QString OAIScheduledMeetingByGroup::getOrganizerKey() const {
    return m_organizer_key;
}
void OAIScheduledMeetingByGroup::setOrganizerKey(const QString &organizer_key) {
    m_organizer_key = organizer_key;
    m_organizer_key_isSet = true;
}

bool OAIScheduledMeetingByGroup::is_organizer_key_Set() const{
    return m_organizer_key_isSet;
}

bool OAIScheduledMeetingByGroup::is_organizer_key_Valid() const{
    return m_organizer_key_isValid;
}

qint64 OAIScheduledMeetingByGroup::getOrganizerkey() const {
    return m_organizerkey;
}
void OAIScheduledMeetingByGroup::setOrganizerkey(const qint64 &organizerkey) {
    m_organizerkey = organizerkey;
    m_organizerkey_isSet = true;
}

bool OAIScheduledMeetingByGroup::is_organizerkey_Set() const{
    return m_organizerkey_isSet;
}

bool OAIScheduledMeetingByGroup::is_organizerkey_Valid() const{
    return m_organizerkey_isValid;
}

bool OAIScheduledMeetingByGroup::isPasswordRequired() const {
    return m_password_required;
}
void OAIScheduledMeetingByGroup::setPasswordRequired(const bool &password_required) {
    m_password_required = password_required;
    m_password_required_isSet = true;
}

bool OAIScheduledMeetingByGroup::is_password_required_Set() const{
    return m_password_required_isSet;
}

bool OAIScheduledMeetingByGroup::is_password_required_Valid() const{
    return m_password_required_isValid;
}

QString OAIScheduledMeetingByGroup::getSubject() const {
    return m_subject;
}
void OAIScheduledMeetingByGroup::setSubject(const QString &subject) {
    m_subject = subject;
    m_subject_isSet = true;
}

bool OAIScheduledMeetingByGroup::is_subject_Set() const{
    return m_subject_isSet;
}

bool OAIScheduledMeetingByGroup::is_subject_Valid() const{
    return m_subject_isValid;
}

bool OAIScheduledMeetingByGroup::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_attendees_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_conference_call_info_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_email_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_first_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_group_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_last_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_meeting_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_meeting_type.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_organizer_key_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_organizerkey_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_password_required_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_subject_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIScheduledMeetingByGroup::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_attendees_isValid && m_conference_call_info_isValid && m_email_isValid && m_first_name_isValid && m_group_name_isValid && m_last_name_isValid && m_meeting_id_isValid && m_meeting_type_isValid && m_organizer_key_isValid && m_organizerkey_isValid && m_password_required_isValid && m_subject_isValid && true;
}

} // namespace OpenAPI
