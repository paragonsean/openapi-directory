/**
 * GoToMeeting
 * <br>The GoToMeeting API provides seamless integration of GoToMeeting provisioning and meeting management into your existing infrastructure or third party applications.<br><br>For customers, the ability to add, suspend or delete an organizer in your GoToMeeting Corporate account from within your primary management systems simplifies and streamlines the entire process of account management. The ability to monitor meeting schedules, history and active meeting status allows managers to leverage GoToMeeting activities through your primary applications.<br><br>For third parties, the ability to create, update or delete a meeting from within your application makes real-time collaboration possible for your customers. The ability to update meeting schedules, view history and scheduled meetings, and view attendees from past meetings allows you to enhance your users' experience and the value of your applications.
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: developer-support@citrixonline.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIStartUrl.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIStartUrl::OAIStartUrl(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIStartUrl::OAIStartUrl() {
    this->initializeModel();
}

OAIStartUrl::~OAIStartUrl() {}

void OAIStartUrl::initializeModel() {

    m_host_url_isSet = false;
    m_host_url_isValid = false;
}

void OAIStartUrl::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIStartUrl::fromJsonObject(QJsonObject json) {

    m_host_url_isValid = ::OpenAPI::fromJsonValue(m_host_url, json[QString("hostURL")]);
    m_host_url_isSet = !json[QString("hostURL")].isNull() && m_host_url_isValid;
}

QString OAIStartUrl::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIStartUrl::asJsonObject() const {
    QJsonObject obj;
    if (m_host_url_isSet) {
        obj.insert(QString("hostURL"), ::OpenAPI::toJsonValue(m_host_url));
    }
    return obj;
}

QString OAIStartUrl::getHostUrl() const {
    return m_host_url;
}
void OAIStartUrl::setHostUrl(const QString &host_url) {
    m_host_url = host_url;
    m_host_url_isSet = true;
}

bool OAIStartUrl::is_host_url_Set() const{
    return m_host_url_isSet;
}

bool OAIStartUrl::is_host_url_Valid() const{
    return m_host_url_isValid;
}

bool OAIStartUrl::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_host_url_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIStartUrl::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_host_url_isValid && true;
}

} // namespace OpenAPI
