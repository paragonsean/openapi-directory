/**
 * GoToMeeting
 * <br>The GoToMeeting API provides seamless integration of GoToMeeting provisioning and meeting management into your existing infrastructure or third party applications.<br><br>For customers, the ability to add, suspend or delete an organizer in your GoToMeeting Corporate account from within your primary management systems simplifies and streamlines the entire process of account management. The ability to monitor meeting schedules, history and active meeting status allows managers to leverage GoToMeeting activities through your primary applications.<br><br>For third parties, the ability to create, update or delete a meeting from within your application makes real-time collaboration possible for your customers. The ability to update meeting schedules, view history and scheduled meetings, and view attendees from past meetings allows you to enhance your users' experience and the value of your applications.
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: developer-support@citrixonline.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIMeetingByOrganizer.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIMeetingByOrganizer::OAIMeetingByOrganizer(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIMeetingByOrganizer::OAIMeetingByOrganizer() {
    this->initializeModel();
}

OAIMeetingByOrganizer::~OAIMeetingByOrganizer() {}

void OAIMeetingByOrganizer::initializeModel() {

    m_conference_call_info_isSet = false;
    m_conference_call_info_isValid = false;

    m_create_time_isSet = false;
    m_create_time_isValid = false;

    m_end_time_isSet = false;
    m_end_time_isValid = false;

    m_max_participants_isSet = false;
    m_max_participants_isValid = false;

    m_meeting_type_isSet = false;
    m_meeting_type_isValid = false;

    m_meetingid_isSet = false;
    m_meetingid_isValid = false;

    m_password_required_isSet = false;
    m_password_required_isValid = false;

    m_start_time_isSet = false;
    m_start_time_isValid = false;

    m_status_isSet = false;
    m_status_isValid = false;

    m_subject_isSet = false;
    m_subject_isValid = false;

    m_unique_meeting_id_isSet = false;
    m_unique_meeting_id_isValid = false;
}

void OAIMeetingByOrganizer::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIMeetingByOrganizer::fromJsonObject(QJsonObject json) {

    m_conference_call_info_isValid = ::OpenAPI::fromJsonValue(m_conference_call_info, json[QString("conferenceCallInfo")]);
    m_conference_call_info_isSet = !json[QString("conferenceCallInfo")].isNull() && m_conference_call_info_isValid;

    m_create_time_isValid = ::OpenAPI::fromJsonValue(m_create_time, json[QString("createTime")]);
    m_create_time_isSet = !json[QString("createTime")].isNull() && m_create_time_isValid;

    m_end_time_isValid = ::OpenAPI::fromJsonValue(m_end_time, json[QString("endTime")]);
    m_end_time_isSet = !json[QString("endTime")].isNull() && m_end_time_isValid;

    m_max_participants_isValid = ::OpenAPI::fromJsonValue(m_max_participants, json[QString("maxParticipants")]);
    m_max_participants_isSet = !json[QString("maxParticipants")].isNull() && m_max_participants_isValid;

    m_meeting_type_isValid = ::OpenAPI::fromJsonValue(m_meeting_type, json[QString("meetingType")]);
    m_meeting_type_isSet = !json[QString("meetingType")].isNull() && m_meeting_type_isValid;

    m_meetingid_isValid = ::OpenAPI::fromJsonValue(m_meetingid, json[QString("meetingid")]);
    m_meetingid_isSet = !json[QString("meetingid")].isNull() && m_meetingid_isValid;

    m_password_required_isValid = ::OpenAPI::fromJsonValue(m_password_required, json[QString("passwordRequired")]);
    m_password_required_isSet = !json[QString("passwordRequired")].isNull() && m_password_required_isValid;

    m_start_time_isValid = ::OpenAPI::fromJsonValue(m_start_time, json[QString("startTime")]);
    m_start_time_isSet = !json[QString("startTime")].isNull() && m_start_time_isValid;

    m_status_isValid = ::OpenAPI::fromJsonValue(m_status, json[QString("status")]);
    m_status_isSet = !json[QString("status")].isNull() && m_status_isValid;

    m_subject_isValid = ::OpenAPI::fromJsonValue(m_subject, json[QString("subject")]);
    m_subject_isSet = !json[QString("subject")].isNull() && m_subject_isValid;

    m_unique_meeting_id_isValid = ::OpenAPI::fromJsonValue(m_unique_meeting_id, json[QString("uniqueMeetingId")]);
    m_unique_meeting_id_isSet = !json[QString("uniqueMeetingId")].isNull() && m_unique_meeting_id_isValid;
}

QString OAIMeetingByOrganizer::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIMeetingByOrganizer::asJsonObject() const {
    QJsonObject obj;
    if (m_conference_call_info_isSet) {
        obj.insert(QString("conferenceCallInfo"), ::OpenAPI::toJsonValue(m_conference_call_info));
    }
    if (m_create_time_isSet) {
        obj.insert(QString("createTime"), ::OpenAPI::toJsonValue(m_create_time));
    }
    if (m_end_time_isSet) {
        obj.insert(QString("endTime"), ::OpenAPI::toJsonValue(m_end_time));
    }
    if (m_max_participants_isSet) {
        obj.insert(QString("maxParticipants"), ::OpenAPI::toJsonValue(m_max_participants));
    }
    if (m_meeting_type.isSet()) {
        obj.insert(QString("meetingType"), ::OpenAPI::toJsonValue(m_meeting_type));
    }
    if (m_meetingid_isSet) {
        obj.insert(QString("meetingid"), ::OpenAPI::toJsonValue(m_meetingid));
    }
    if (m_password_required_isSet) {
        obj.insert(QString("passwordRequired"), ::OpenAPI::toJsonValue(m_password_required));
    }
    if (m_start_time_isSet) {
        obj.insert(QString("startTime"), ::OpenAPI::toJsonValue(m_start_time));
    }
    if (m_status.isSet()) {
        obj.insert(QString("status"), ::OpenAPI::toJsonValue(m_status));
    }
    if (m_subject_isSet) {
        obj.insert(QString("subject"), ::OpenAPI::toJsonValue(m_subject));
    }
    if (m_unique_meeting_id_isSet) {
        obj.insert(QString("uniqueMeetingId"), ::OpenAPI::toJsonValue(m_unique_meeting_id));
    }
    return obj;
}

QString OAIMeetingByOrganizer::getConferenceCallInfo() const {
    return m_conference_call_info;
}
void OAIMeetingByOrganizer::setConferenceCallInfo(const QString &conference_call_info) {
    m_conference_call_info = conference_call_info;
    m_conference_call_info_isSet = true;
}

bool OAIMeetingByOrganizer::is_conference_call_info_Set() const{
    return m_conference_call_info_isSet;
}

bool OAIMeetingByOrganizer::is_conference_call_info_Valid() const{
    return m_conference_call_info_isValid;
}

QDateTime OAIMeetingByOrganizer::getCreateTime() const {
    return m_create_time;
}
void OAIMeetingByOrganizer::setCreateTime(const QDateTime &create_time) {
    m_create_time = create_time;
    m_create_time_isSet = true;
}

bool OAIMeetingByOrganizer::is_create_time_Set() const{
    return m_create_time_isSet;
}

bool OAIMeetingByOrganizer::is_create_time_Valid() const{
    return m_create_time_isValid;
}

QDateTime OAIMeetingByOrganizer::getEndTime() const {
    return m_end_time;
}
void OAIMeetingByOrganizer::setEndTime(const QDateTime &end_time) {
    m_end_time = end_time;
    m_end_time_isSet = true;
}

bool OAIMeetingByOrganizer::is_end_time_Set() const{
    return m_end_time_isSet;
}

bool OAIMeetingByOrganizer::is_end_time_Valid() const{
    return m_end_time_isValid;
}

qint32 OAIMeetingByOrganizer::getMaxParticipants() const {
    return m_max_participants;
}
void OAIMeetingByOrganizer::setMaxParticipants(const qint32 &max_participants) {
    m_max_participants = max_participants;
    m_max_participants_isSet = true;
}

bool OAIMeetingByOrganizer::is_max_participants_Set() const{
    return m_max_participants_isSet;
}

bool OAIMeetingByOrganizer::is_max_participants_Valid() const{
    return m_max_participants_isValid;
}

OAIMeetingType OAIMeetingByOrganizer::getMeetingType() const {
    return m_meeting_type;
}
void OAIMeetingByOrganizer::setMeetingType(const OAIMeetingType &meeting_type) {
    m_meeting_type = meeting_type;
    m_meeting_type_isSet = true;
}

bool OAIMeetingByOrganizer::is_meeting_type_Set() const{
    return m_meeting_type_isSet;
}

bool OAIMeetingByOrganizer::is_meeting_type_Valid() const{
    return m_meeting_type_isValid;
}

qint64 OAIMeetingByOrganizer::getMeetingid() const {
    return m_meetingid;
}
void OAIMeetingByOrganizer::setMeetingid(const qint64 &meetingid) {
    m_meetingid = meetingid;
    m_meetingid_isSet = true;
}

bool OAIMeetingByOrganizer::is_meetingid_Set() const{
    return m_meetingid_isSet;
}

bool OAIMeetingByOrganizer::is_meetingid_Valid() const{
    return m_meetingid_isValid;
}

bool OAIMeetingByOrganizer::isPasswordRequired() const {
    return m_password_required;
}
void OAIMeetingByOrganizer::setPasswordRequired(const bool &password_required) {
    m_password_required = password_required;
    m_password_required_isSet = true;
}

bool OAIMeetingByOrganizer::is_password_required_Set() const{
    return m_password_required_isSet;
}

bool OAIMeetingByOrganizer::is_password_required_Valid() const{
    return m_password_required_isValid;
}

QDateTime OAIMeetingByOrganizer::getStartTime() const {
    return m_start_time;
}
void OAIMeetingByOrganizer::setStartTime(const QDateTime &start_time) {
    m_start_time = start_time;
    m_start_time_isSet = true;
}

bool OAIMeetingByOrganizer::is_start_time_Set() const{
    return m_start_time_isSet;
}

bool OAIMeetingByOrganizer::is_start_time_Valid() const{
    return m_start_time_isValid;
}

OAIMeetingStatus OAIMeetingByOrganizer::getStatus() const {
    return m_status;
}
void OAIMeetingByOrganizer::setStatus(const OAIMeetingStatus &status) {
    m_status = status;
    m_status_isSet = true;
}

bool OAIMeetingByOrganizer::is_status_Set() const{
    return m_status_isSet;
}

bool OAIMeetingByOrganizer::is_status_Valid() const{
    return m_status_isValid;
}

QString OAIMeetingByOrganizer::getSubject() const {
    return m_subject;
}
void OAIMeetingByOrganizer::setSubject(const QString &subject) {
    m_subject = subject;
    m_subject_isSet = true;
}

bool OAIMeetingByOrganizer::is_subject_Set() const{
    return m_subject_isSet;
}

bool OAIMeetingByOrganizer::is_subject_Valid() const{
    return m_subject_isValid;
}

qint64 OAIMeetingByOrganizer::getUniqueMeetingId() const {
    return m_unique_meeting_id;
}
void OAIMeetingByOrganizer::setUniqueMeetingId(const qint64 &unique_meeting_id) {
    m_unique_meeting_id = unique_meeting_id;
    m_unique_meeting_id_isSet = true;
}

bool OAIMeetingByOrganizer::is_unique_meeting_id_Set() const{
    return m_unique_meeting_id_isSet;
}

bool OAIMeetingByOrganizer::is_unique_meeting_id_Valid() const{
    return m_unique_meeting_id_isValid;
}

bool OAIMeetingByOrganizer::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_conference_call_info_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_create_time_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_end_time_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_max_participants_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_meeting_type.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_meetingid_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_password_required_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_start_time_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_status.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_subject_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_unique_meeting_id_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIMeetingByOrganizer::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_conference_call_info_isValid && m_create_time_isValid && m_end_time_isValid && m_max_participants_isValid && m_meeting_type_isValid && m_meetingid_isValid && m_password_required_isValid && m_start_time_isValid && m_status_isValid && m_subject_isValid && m_unique_meeting_id_isValid && true;
}

} // namespace OpenAPI
