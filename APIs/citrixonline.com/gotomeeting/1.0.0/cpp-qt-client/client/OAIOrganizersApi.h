/**
 * GoToMeeting
 * <br>The GoToMeeting API provides seamless integration of GoToMeeting provisioning and meeting management into your existing infrastructure or third party applications.<br><br>For customers, the ability to add, suspend or delete an organizer in your GoToMeeting Corporate account from within your primary management systems simplifies and streamlines the entire process of account management. The ability to monitor meeting schedules, history and active meeting status allows managers to leverage GoToMeeting activities through your primary applications.<br><br>For third parties, the ability to create, update or delete a meeting from within your application makes real-time collaboration possible for your customers. The ability to update meeting schedules, view history and scheduled meetings, and view attendees from past meetings allows you to enhance your users' experience and the value of your applications.
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: developer-support@citrixonline.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#ifndef OAI_OAIOrganizersApi_H
#define OAI_OAIOrganizersApi_H

#include "OAIHelpers.h"
#include "OAIHttpRequest.h"
#include "OAIServerConfiguration.h"
#include "OAIOauth.h"

#include "OAIAttendeeByOrganizer.h"
#include "OAIHistoricalMeeting.h"
#include "OAIMeetingByOrganizer.h"
#include "OAIOrganizer.h"
#include "OAIOrganizerReq.h"
#include "OAIOrganizerShort.h"
#include "OAIOrganizerStatus.h"
#include "OAIUpcomingMeeting.h"
#include <QString>

#include <QObject>
#include <QByteArray>
#include <QStringList>
#include <QList>
#include <QNetworkAccessManager>

namespace OpenAPI {

class OAIOrganizersApi : public QObject {
    Q_OBJECT

public:
    OAIOrganizersApi(const int timeOut = 0);
    ~OAIOrganizersApi();

    void initializeServerConfigs();
    int setDefaultServerValue(int serverIndex,const QString &operation, const QString &variable,const QString &val);
    void setServerIndex(const QString &operation, int serverIndex);
    void setApiKey(const QString &apiKeyName, const QString &apiKey);
    void setBearerToken(const QString &token);
    void setUsername(const QString &username);
    void setPassword(const QString &password);
    void setTimeOut(const int timeOut);
    void setWorkingDirectory(const QString &path);
    void setNetworkAccessManager(QNetworkAccessManager* manager);
    int addServerConfiguration(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables = QMap<QString, OAIServerVariable>());
    void setNewServerForAllOperations(const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void setNewServer(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void addHeaders(const QString &key, const QString &value);
    void enableRequestCompression();
    void enableResponseCompression();
    void abortRequests();
    QString getParamStylePrefix(const QString &style);
    QString getParamStyleSuffix(const QString &style);
    QString getParamStyleDelimiter(const QString &style, const QString &name, bool isExplode);

    /**
    * @param[in]  authorization QString [required]
    * @param[in]  email QString [required]
    */
    virtual void organizersDelete(const QString &authorization, const QString &email);

    /**
    * @param[in]  authorization QString [required]
    * @param[in]  email QString [optional]
    */
    virtual void organizersGet(const QString &authorization, const ::OpenAPI::OptionalParam<QString> &email = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  authorization QString [required]
    * @param[in]  organizer_key qint64 [required]
    * @param[in]  start_date QDateTime [required]
    * @param[in]  end_date QDateTime [required]
    */
    virtual void organizersOrganizerKeyAttendeesGet(const QString &authorization, const qint64 &organizer_key, const QDateTime &start_date, const QDateTime &end_date);

    /**
    * @param[in]  authorization QString [required]
    * @param[in]  organizer_key qint64 [required]
    */
    virtual void organizersOrganizerKeyDelete(const QString &authorization, const qint64 &organizer_key);

    /**
    * @param[in]  authorization QString [required]
    * @param[in]  organizer_key qint64 [required]
    */
    virtual void organizersOrganizerKeyGet(const QString &authorization, const qint64 &organizer_key);

    /**
    * @param[in]  authorization QString [required]
    * @param[in]  organizer_key qint64 [required]
    * @param[in]  start_date QDateTime [required]
    * @param[in]  end_date QDateTime [required]
    */
    virtual void organizersOrganizerKeyHistoricalMeetingsGet(const QString &authorization, const qint64 &organizer_key, const QDateTime &start_date, const QDateTime &end_date);

    /**
    * @param[in]  authorization QString [required]
    * @param[in]  organizer_key qint64 [required]
    * @param[in]  scheduled bool [optional]
    * @param[in]  history bool [optional]
    * @param[in]  start_date QDateTime [optional]
    * @param[in]  end_date QDateTime [optional]
    */
    Q_DECL_DEPRECATED virtual void organizersOrganizerKeyMeetingsGet(const QString &authorization, const qint64 &organizer_key, const ::OpenAPI::OptionalParam<bool> &scheduled = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<bool> &history = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QDateTime> &start_date = ::OpenAPI::OptionalParam<QDateTime>(), const ::OpenAPI::OptionalParam<QDateTime> &end_date = ::OpenAPI::OptionalParam<QDateTime>());

    /**
    * @param[in]  authorization QString [required]
    * @param[in]  organizer_key qint64 [required]
    * @param[in]  body OAIOrganizerStatus [required]
    */
    virtual void organizersOrganizerKeyPut(const QString &authorization, const qint64 &organizer_key, const OAIOrganizerStatus &body);

    /**
    * @param[in]  authorization QString [required]
    * @param[in]  organizer_key qint64 [required]
    */
    virtual void organizersOrganizerKeyUpcomingMeetingsGet(const QString &authorization, const qint64 &organizer_key);

    /**
    * @param[in]  authorization QString [required]
    * @param[in]  body OAIOrganizerReq [required]
    */
    virtual void organizersPost(const QString &authorization, const OAIOrganizerReq &body);


private:
    QMap<QString,int> _serverIndices;
    QMap<QString,QList<OAIServerConfiguration>> _serverConfigs;
    QMap<QString, QString> _apiKeys;
    QString _bearerToken;
    QString _username;
    QString _password;
    int _timeOut;
    QString _workingDirectory;
    QNetworkAccessManager* _manager;
    QMap<QString, QString> _defaultHeaders;
    bool _isResponseCompressionEnabled;
    bool _isRequestCompressionEnabled;
    OAIHttpRequestInput _latestInput;
    OAIHttpRequestWorker *_latestWorker;
    QStringList _latestScope;
    OauthCode _authFlow;
    OauthImplicit _implicitFlow;
    OauthCredentials _credentialFlow;
    OauthPassword _passwordFlow;
    int _OauthMethod = 0;

    void organizersDeleteCallback(OAIHttpRequestWorker *worker);
    void organizersGetCallback(OAIHttpRequestWorker *worker);
    void organizersOrganizerKeyAttendeesGetCallback(OAIHttpRequestWorker *worker);
    void organizersOrganizerKeyDeleteCallback(OAIHttpRequestWorker *worker);
    void organizersOrganizerKeyGetCallback(OAIHttpRequestWorker *worker);
    void organizersOrganizerKeyHistoricalMeetingsGetCallback(OAIHttpRequestWorker *worker);
    void organizersOrganizerKeyMeetingsGetCallback(OAIHttpRequestWorker *worker);
    void organizersOrganizerKeyPutCallback(OAIHttpRequestWorker *worker);
    void organizersOrganizerKeyUpcomingMeetingsGetCallback(OAIHttpRequestWorker *worker);
    void organizersPostCallback(OAIHttpRequestWorker *worker);

Q_SIGNALS:

    void organizersDeleteSignal();
    void organizersGetSignal(QList<OAIOrganizer> summary);
    void organizersOrganizerKeyAttendeesGetSignal(QList<OAIAttendeeByOrganizer> summary);
    void organizersOrganizerKeyDeleteSignal();
    void organizersOrganizerKeyGetSignal(QList<OAIOrganizer> summary);
    void organizersOrganizerKeyHistoricalMeetingsGetSignal(QList<OAIHistoricalMeeting> summary);
    void organizersOrganizerKeyMeetingsGetSignal(QList<OAIMeetingByOrganizer> summary);
    void organizersOrganizerKeyPutSignal();
    void organizersOrganizerKeyUpcomingMeetingsGetSignal(QList<OAIUpcomingMeeting> summary);
    void organizersPostSignal(QList<OAIOrganizerShort> summary);


    void organizersDeleteSignalFull(OAIHttpRequestWorker *worker);
    void organizersGetSignalFull(OAIHttpRequestWorker *worker, QList<OAIOrganizer> summary);
    void organizersOrganizerKeyAttendeesGetSignalFull(OAIHttpRequestWorker *worker, QList<OAIAttendeeByOrganizer> summary);
    void organizersOrganizerKeyDeleteSignalFull(OAIHttpRequestWorker *worker);
    void organizersOrganizerKeyGetSignalFull(OAIHttpRequestWorker *worker, QList<OAIOrganizer> summary);
    void organizersOrganizerKeyHistoricalMeetingsGetSignalFull(OAIHttpRequestWorker *worker, QList<OAIHistoricalMeeting> summary);
    void organizersOrganizerKeyMeetingsGetSignalFull(OAIHttpRequestWorker *worker, QList<OAIMeetingByOrganizer> summary);
    void organizersOrganizerKeyPutSignalFull(OAIHttpRequestWorker *worker);
    void organizersOrganizerKeyUpcomingMeetingsGetSignalFull(OAIHttpRequestWorker *worker, QList<OAIUpcomingMeeting> summary);
    void organizersPostSignalFull(OAIHttpRequestWorker *worker, QList<OAIOrganizerShort> summary);

    Q_DECL_DEPRECATED_X("Use organizersDeleteSignalError() instead")
    void organizersDeleteSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void organizersDeleteSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use organizersGetSignalError() instead")
    void organizersGetSignalE(QList<OAIOrganizer> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void organizersGetSignalError(QList<OAIOrganizer> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use organizersOrganizerKeyAttendeesGetSignalError() instead")
    void organizersOrganizerKeyAttendeesGetSignalE(QList<OAIAttendeeByOrganizer> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void organizersOrganizerKeyAttendeesGetSignalError(QList<OAIAttendeeByOrganizer> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use organizersOrganizerKeyDeleteSignalError() instead")
    void organizersOrganizerKeyDeleteSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void organizersOrganizerKeyDeleteSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use organizersOrganizerKeyGetSignalError() instead")
    void organizersOrganizerKeyGetSignalE(QList<OAIOrganizer> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void organizersOrganizerKeyGetSignalError(QList<OAIOrganizer> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use organizersOrganizerKeyHistoricalMeetingsGetSignalError() instead")
    void organizersOrganizerKeyHistoricalMeetingsGetSignalE(QList<OAIHistoricalMeeting> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void organizersOrganizerKeyHistoricalMeetingsGetSignalError(QList<OAIHistoricalMeeting> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use organizersOrganizerKeyMeetingsGetSignalError() instead")
    void organizersOrganizerKeyMeetingsGetSignalE(QList<OAIMeetingByOrganizer> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void organizersOrganizerKeyMeetingsGetSignalError(QList<OAIMeetingByOrganizer> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use organizersOrganizerKeyPutSignalError() instead")
    void organizersOrganizerKeyPutSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void organizersOrganizerKeyPutSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use organizersOrganizerKeyUpcomingMeetingsGetSignalError() instead")
    void organizersOrganizerKeyUpcomingMeetingsGetSignalE(QList<OAIUpcomingMeeting> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void organizersOrganizerKeyUpcomingMeetingsGetSignalError(QList<OAIUpcomingMeeting> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use organizersPostSignalError() instead")
    void organizersPostSignalE(QList<OAIOrganizerShort> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void organizersPostSignalError(QList<OAIOrganizerShort> summary, QNetworkReply::NetworkError error_type, const QString &error_str);

    Q_DECL_DEPRECATED_X("Use organizersDeleteSignalErrorFull() instead")
    void organizersDeleteSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void organizersDeleteSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use organizersGetSignalErrorFull() instead")
    void organizersGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void organizersGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use organizersOrganizerKeyAttendeesGetSignalErrorFull() instead")
    void organizersOrganizerKeyAttendeesGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void organizersOrganizerKeyAttendeesGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use organizersOrganizerKeyDeleteSignalErrorFull() instead")
    void organizersOrganizerKeyDeleteSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void organizersOrganizerKeyDeleteSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use organizersOrganizerKeyGetSignalErrorFull() instead")
    void organizersOrganizerKeyGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void organizersOrganizerKeyGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use organizersOrganizerKeyHistoricalMeetingsGetSignalErrorFull() instead")
    void organizersOrganizerKeyHistoricalMeetingsGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void organizersOrganizerKeyHistoricalMeetingsGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use organizersOrganizerKeyMeetingsGetSignalErrorFull() instead")
    void organizersOrganizerKeyMeetingsGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void organizersOrganizerKeyMeetingsGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use organizersOrganizerKeyPutSignalErrorFull() instead")
    void organizersOrganizerKeyPutSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void organizersOrganizerKeyPutSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use organizersOrganizerKeyUpcomingMeetingsGetSignalErrorFull() instead")
    void organizersOrganizerKeyUpcomingMeetingsGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void organizersOrganizerKeyUpcomingMeetingsGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use organizersPostSignalErrorFull() instead")
    void organizersPostSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void organizersPostSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);

    void abortRequestsSignal();
    void allPendingRequestsCompleted();

public Q_SLOTS:
    void tokenAvailable();
};

} // namespace OpenAPI
#endif
