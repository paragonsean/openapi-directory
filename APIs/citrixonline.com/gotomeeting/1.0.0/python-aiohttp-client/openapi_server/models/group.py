# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.status import Status
from openapi_server import util


class Group(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, group_name: str=None, groupkey: int=None, num_organizers: int=None, parent_key: int=None, status: Status=None):
        """Group - a model defined in OpenAPI

        :param group_name: The group_name of this Group.
        :param groupkey: The groupkey of this Group.
        :param num_organizers: The num_organizers of this Group.
        :param parent_key: The parent_key of this Group.
        :param status: The status of this Group.
        """
        self.openapi_types = {
            'group_name': str,
            'groupkey': int,
            'num_organizers': int,
            'parent_key': int,
            'status': Status
        }

        self.attribute_map = {
            'group_name': 'groupName',
            'groupkey': 'groupkey',
            'num_organizers': 'numOrganizers',
            'parent_key': 'parentKey',
            'status': 'status'
        }

        self._group_name = group_name
        self._groupkey = groupkey
        self._num_organizers = num_organizers
        self._parent_key = parent_key
        self._status = status

    @classmethod
    def from_dict(cls, dikt: dict) -> 'Group':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Group of this Group.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def group_name(self):
        """Gets the group_name of this Group.

        The name of this group

        :return: The group_name of this Group.
        :rtype: str
        """
        return self._group_name

    @group_name.setter
    def group_name(self, group_name):
        """Sets the group_name of this Group.

        The name of this group

        :param group_name: The group_name of this Group.
        :type group_name: str
        """
        if group_name is None:
            raise ValueError("Invalid value for `group_name`, must not be `None`")

        self._group_name = group_name

    @property
    def groupkey(self):
        """Gets the groupkey of this Group.

        The key of this group

        :return: The groupkey of this Group.
        :rtype: int
        """
        return self._groupkey

    @groupkey.setter
    def groupkey(self, groupkey):
        """Sets the groupkey of this Group.

        The key of this group

        :param groupkey: The groupkey of this Group.
        :type groupkey: int
        """
        if groupkey is None:
            raise ValueError("Invalid value for `groupkey`, must not be `None`")

        self._groupkey = groupkey

    @property
    def num_organizers(self):
        """Gets the num_organizers of this Group.

        The number of organizers assigned to this group

        :return: The num_organizers of this Group.
        :rtype: int
        """
        return self._num_organizers

    @num_organizers.setter
    def num_organizers(self, num_organizers):
        """Sets the num_organizers of this Group.

        The number of organizers assigned to this group

        :param num_organizers: The num_organizers of this Group.
        :type num_organizers: int
        """
        if num_organizers is None:
            raise ValueError("Invalid value for `num_organizers`, must not be `None`")

        self._num_organizers = num_organizers

    @property
    def parent_key(self):
        """Gets the parent_key of this Group.

        The key of the parent group this group belongs to. Identical with the groupkey if this group is not a subgroup

        :return: The parent_key of this Group.
        :rtype: int
        """
        return self._parent_key

    @parent_key.setter
    def parent_key(self, parent_key):
        """Sets the parent_key of this Group.

        The key of the parent group this group belongs to. Identical with the groupkey if this group is not a subgroup

        :param parent_key: The parent_key of this Group.
        :type parent_key: int
        """
        if parent_key is None:
            raise ValueError("Invalid value for `parent_key`, must not be `None`")

        self._parent_key = parent_key

    @property
    def status(self):
        """Gets the status of this Group.


        :return: The status of this Group.
        :rtype: Status
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this Group.


        :param status: The status of this Group.
        :type status: Status
        """
        if status is None:
            raise ValueError("Invalid value for `status`, must not be `None`")

        self._status = status
