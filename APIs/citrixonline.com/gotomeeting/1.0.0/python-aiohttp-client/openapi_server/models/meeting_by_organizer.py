# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.meeting_status import MeetingStatus
from openapi_server.models.meeting_type import MeetingType
from openapi_server import util


class MeetingByOrganizer(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, conference_call_info: str=None, create_time: datetime=None, end_time: datetime=None, max_participants: int=None, meeting_type: MeetingType=None, meetingid: int=None, password_required: bool=None, start_time: datetime=None, status: MeetingStatus=None, subject: str=None, unique_meeting_id: int=None):
        """MeetingByOrganizer - a model defined in OpenAPI

        :param conference_call_info: The conference_call_info of this MeetingByOrganizer.
        :param create_time: The create_time of this MeetingByOrganizer.
        :param end_time: The end_time of this MeetingByOrganizer.
        :param max_participants: The max_participants of this MeetingByOrganizer.
        :param meeting_type: The meeting_type of this MeetingByOrganizer.
        :param meetingid: The meetingid of this MeetingByOrganizer.
        :param password_required: The password_required of this MeetingByOrganizer.
        :param start_time: The start_time of this MeetingByOrganizer.
        :param status: The status of this MeetingByOrganizer.
        :param subject: The subject of this MeetingByOrganizer.
        :param unique_meeting_id: The unique_meeting_id of this MeetingByOrganizer.
        """
        self.openapi_types = {
            'conference_call_info': str,
            'create_time': datetime,
            'end_time': datetime,
            'max_participants': int,
            'meeting_type': MeetingType,
            'meetingid': int,
            'password_required': bool,
            'start_time': datetime,
            'status': MeetingStatus,
            'subject': str,
            'unique_meeting_id': int
        }

        self.attribute_map = {
            'conference_call_info': 'conferenceCallInfo',
            'create_time': 'createTime',
            'end_time': 'endTime',
            'max_participants': 'maxParticipants',
            'meeting_type': 'meetingType',
            'meetingid': 'meetingid',
            'password_required': 'passwordRequired',
            'start_time': 'startTime',
            'status': 'status',
            'subject': 'subject',
            'unique_meeting_id': 'uniqueMeetingId'
        }

        self._conference_call_info = conference_call_info
        self._create_time = create_time
        self._end_time = end_time
        self._max_participants = max_participants
        self._meeting_type = meeting_type
        self._meetingid = meetingid
        self._password_required = password_required
        self._start_time = start_time
        self._status = status
        self._subject = subject
        self._unique_meeting_id = unique_meeting_id

    @classmethod
    def from_dict(cls, dikt: dict) -> 'MeetingByOrganizer':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The MeetingByOrganizer of this MeetingByOrganizer.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def conference_call_info(self):
        """Gets the conference_call_info of this MeetingByOrganizer.

        Audio options for the meeting

        :return: The conference_call_info of this MeetingByOrganizer.
        :rtype: str
        """
        return self._conference_call_info

    @conference_call_info.setter
    def conference_call_info(self, conference_call_info):
        """Sets the conference_call_info of this MeetingByOrganizer.

        Audio options for the meeting

        :param conference_call_info: The conference_call_info of this MeetingByOrganizer.
        :type conference_call_info: str
        """
        if conference_call_info is None:
            raise ValueError("Invalid value for `conference_call_info`, must not be `None`")

        self._conference_call_info = conference_call_info

    @property
    def create_time(self):
        """Gets the create_time of this MeetingByOrganizer.

        DEPRECATED. Returns an empty string ''

        :return: The create_time of this MeetingByOrganizer.
        :rtype: datetime
        """
        return self._create_time

    @create_time.setter
    def create_time(self, create_time):
        """Sets the create_time of this MeetingByOrganizer.

        DEPRECATED. Returns an empty string ''

        :param create_time: The create_time of this MeetingByOrganizer.
        :type create_time: datetime
        """
        if create_time is None:
            raise ValueError("Invalid value for `create_time`, must not be `None`")

        self._create_time = create_time

    @property
    def end_time(self):
        """Gets the end_time of this MeetingByOrganizer.

        The ending time of the meeting

        :return: The end_time of this MeetingByOrganizer.
        :rtype: datetime
        """
        return self._end_time

    @end_time.setter
    def end_time(self, end_time):
        """Sets the end_time of this MeetingByOrganizer.

        The ending time of the meeting

        :param end_time: The end_time of this MeetingByOrganizer.
        :type end_time: datetime
        """
        if end_time is None:
            raise ValueError("Invalid value for `end_time`, must not be `None`")

        self._end_time = end_time

    @property
    def max_participants(self):
        """Gets the max_participants of this MeetingByOrganizer.

        The maximum number of participants allowed at the meeting

        :return: The max_participants of this MeetingByOrganizer.
        :rtype: int
        """
        return self._max_participants

    @max_participants.setter
    def max_participants(self, max_participants):
        """Sets the max_participants of this MeetingByOrganizer.

        The maximum number of participants allowed at the meeting

        :param max_participants: The max_participants of this MeetingByOrganizer.
        :type max_participants: int
        """
        if max_participants is None:
            raise ValueError("Invalid value for `max_participants`, must not be `None`")

        self._max_participants = max_participants

    @property
    def meeting_type(self):
        """Gets the meeting_type of this MeetingByOrganizer.


        :return: The meeting_type of this MeetingByOrganizer.
        :rtype: MeetingType
        """
        return self._meeting_type

    @meeting_type.setter
    def meeting_type(self, meeting_type):
        """Sets the meeting_type of this MeetingByOrganizer.


        :param meeting_type: The meeting_type of this MeetingByOrganizer.
        :type meeting_type: MeetingType
        """
        if meeting_type is None:
            raise ValueError("Invalid value for `meeting_type`, must not be `None`")

        self._meeting_type = meeting_type

    @property
    def meetingid(self):
        """Gets the meetingid of this MeetingByOrganizer.

        The meeting ID

        :return: The meetingid of this MeetingByOrganizer.
        :rtype: int
        """
        return self._meetingid

    @meetingid.setter
    def meetingid(self, meetingid):
        """Sets the meetingid of this MeetingByOrganizer.

        The meeting ID

        :param meetingid: The meetingid of this MeetingByOrganizer.
        :type meetingid: int
        """
        if meetingid is None:
            raise ValueError("Invalid value for `meetingid`, must not be `None`")

        self._meetingid = meetingid

    @property
    def password_required(self):
        """Gets the password_required of this MeetingByOrganizer.

        Indicates whether a password is required to join the meeting

        :return: The password_required of this MeetingByOrganizer.
        :rtype: bool
        """
        return self._password_required

    @password_required.setter
    def password_required(self, password_required):
        """Sets the password_required of this MeetingByOrganizer.

        Indicates whether a password is required to join the meeting

        :param password_required: The password_required of this MeetingByOrganizer.
        :type password_required: bool
        """
        if password_required is None:
            raise ValueError("Invalid value for `password_required`, must not be `None`")

        self._password_required = password_required

    @property
    def start_time(self):
        """Gets the start_time of this MeetingByOrganizer.

        The starting time of the meeting

        :return: The start_time of this MeetingByOrganizer.
        :rtype: datetime
        """
        return self._start_time

    @start_time.setter
    def start_time(self, start_time):
        """Sets the start_time of this MeetingByOrganizer.

        The starting time of the meeting

        :param start_time: The start_time of this MeetingByOrganizer.
        :type start_time: datetime
        """
        if start_time is None:
            raise ValueError("Invalid value for `start_time`, must not be `None`")

        self._start_time = start_time

    @property
    def status(self):
        """Gets the status of this MeetingByOrganizer.


        :return: The status of this MeetingByOrganizer.
        :rtype: MeetingStatus
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this MeetingByOrganizer.


        :param status: The status of this MeetingByOrganizer.
        :type status: MeetingStatus
        """
        if status is None:
            raise ValueError("Invalid value for `status`, must not be `None`")

        self._status = status

    @property
    def subject(self):
        """Gets the subject of this MeetingByOrganizer.

        The subject of the meeting

        :return: The subject of this MeetingByOrganizer.
        :rtype: str
        """
        return self._subject

    @subject.setter
    def subject(self, subject):
        """Sets the subject of this MeetingByOrganizer.

        The subject of the meeting

        :param subject: The subject of this MeetingByOrganizer.
        :type subject: str
        """
        if subject is None:
            raise ValueError("Invalid value for `subject`, must not be `None`")

        self._subject = subject

    @property
    def unique_meeting_id(self):
        """Gets the unique_meeting_id of this MeetingByOrganizer.

        A unique ID for the meeting

        :return: The unique_meeting_id of this MeetingByOrganizer.
        :rtype: int
        """
        return self._unique_meeting_id

    @unique_meeting_id.setter
    def unique_meeting_id(self, unique_meeting_id):
        """Sets the unique_meeting_id of this MeetingByOrganizer.

        A unique ID for the meeting

        :param unique_meeting_id: The unique_meeting_id of this MeetingByOrganizer.
        :type unique_meeting_id: int
        """
        if unique_meeting_id is None:
            raise ValueError("Invalid value for `unique_meeting_id`, must not be `None`")

        self._unique_meeting_id = unique_meeting_id
