# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.product import Product
from openapi_server import util


class OrganizerReq(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, first_name: str=None, last_name: str=None, organizer_email: str=None, product_type: Product=None):
        """OrganizerReq - a model defined in OpenAPI

        :param first_name: The first_name of this OrganizerReq.
        :param last_name: The last_name of this OrganizerReq.
        :param organizer_email: The organizer_email of this OrganizerReq.
        :param product_type: The product_type of this OrganizerReq.
        """
        self.openapi_types = {
            'first_name': str,
            'last_name': str,
            'organizer_email': str,
            'product_type': Product
        }

        self.attribute_map = {
            'first_name': 'firstName',
            'last_name': 'lastName',
            'organizer_email': 'organizerEmail',
            'product_type': 'productType'
        }

        self._first_name = first_name
        self._last_name = last_name
        self._organizer_email = organizer_email
        self._product_type = product_type

    @classmethod
    def from_dict(cls, dikt: dict) -> 'OrganizerReq':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The OrganizerReq of this OrganizerReq.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def first_name(self):
        """Gets the first_name of this OrganizerReq.

        The first name of the organizer

        :return: The first_name of this OrganizerReq.
        :rtype: str
        """
        return self._first_name

    @first_name.setter
    def first_name(self, first_name):
        """Sets the first_name of this OrganizerReq.

        The first name of the organizer

        :param first_name: The first_name of this OrganizerReq.
        :type first_name: str
        """
        if first_name is None:
            raise ValueError("Invalid value for `first_name`, must not be `None`")

        self._first_name = first_name

    @property
    def last_name(self):
        """Gets the last_name of this OrganizerReq.

        The surname of the organizer

        :return: The last_name of this OrganizerReq.
        :rtype: str
        """
        return self._last_name

    @last_name.setter
    def last_name(self, last_name):
        """Sets the last_name of this OrganizerReq.

        The surname of the organizer

        :param last_name: The last_name of this OrganizerReq.
        :type last_name: str
        """
        if last_name is None:
            raise ValueError("Invalid value for `last_name`, must not be `None`")

        self._last_name = last_name

    @property
    def organizer_email(self):
        """Gets the organizer_email of this OrganizerReq.

        The email address of the organizer

        :return: The organizer_email of this OrganizerReq.
        :rtype: str
        """
        return self._organizer_email

    @organizer_email.setter
    def organizer_email(self, organizer_email):
        """Sets the organizer_email of this OrganizerReq.

        The email address of the organizer

        :param organizer_email: The organizer_email of this OrganizerReq.
        :type organizer_email: str
        """
        if organizer_email is None:
            raise ValueError("Invalid value for `organizer_email`, must not be `None`")

        self._organizer_email = organizer_email

    @property
    def product_type(self):
        """Gets the product_type of this OrganizerReq.


        :return: The product_type of this OrganizerReq.
        :rtype: Product
        """
        return self._product_type

    @product_type.setter
    def product_type(self, product_type):
        """Sets the product_type of this OrganizerReq.


        :param product_type: The product_type of this OrganizerReq.
        :type product_type: Product
        """
        if product_type is None:
            raise ValueError("Invalid value for `product_type`, must not be `None`")

        self._product_type = product_type
