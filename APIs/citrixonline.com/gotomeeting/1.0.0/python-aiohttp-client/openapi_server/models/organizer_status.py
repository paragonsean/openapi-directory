# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.product import Product
from openapi_server import util


class OrganizerStatus(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, product_type: Product=None, status: str=None):
        """OrganizerStatus - a model defined in OpenAPI

        :param product_type: The product_type of this OrganizerStatus.
        :param status: The status of this OrganizerStatus.
        """
        self.openapi_types = {
            'product_type': Product,
            'status': str
        }

        self.attribute_map = {
            'product_type': 'productType',
            'status': 'status'
        }

        self._product_type = product_type
        self._status = status

    @classmethod
    def from_dict(cls, dikt: dict) -> 'OrganizerStatus':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The OrganizerStatus of this OrganizerStatus.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def product_type(self):
        """Gets the product_type of this OrganizerStatus.


        :return: The product_type of this OrganizerStatus.
        :rtype: Product
        """
        return self._product_type

    @product_type.setter
    def product_type(self, product_type):
        """Sets the product_type of this OrganizerStatus.


        :param product_type: The product_type of this OrganizerStatus.
        :type product_type: Product
        """

        self._product_type = product_type

    @property
    def status(self):
        """Gets the status of this OrganizerStatus.

        The status of the organizer can be set to. Use 'suspended' to remove all products. The formerly used status 'active' is now DEPRECATED for this call. To activate the organizer please assign a product. In this case do not pass this parameter

        :return: The status of this OrganizerStatus.
        :rtype: str
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this OrganizerStatus.

        The status of the organizer can be set to. Use 'suspended' to remove all products. The formerly used status 'active' is now DEPRECATED for this call. To activate the organizer please assign a product. In this case do not pass this parameter

        :param status: The status of this OrganizerStatus.
        :type status: str
        """
        allowed_values = ["suspended"]  # noqa: E501
        if status not in allowed_values:
            raise ValueError(
                "Invalid value for `status` ({0}), must be one of {1}"
                .format(status, allowed_values)
            )

        self._status = status
