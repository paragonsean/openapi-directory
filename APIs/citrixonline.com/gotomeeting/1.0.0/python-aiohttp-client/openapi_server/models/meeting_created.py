# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class MeetingCreated(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, conference_call_info: str=None, join_url: str=None, max_participants: int=None, meetingid: int=None, unique_meeting_id: int=None):
        """MeetingCreated - a model defined in OpenAPI

        :param conference_call_info: The conference_call_info of this MeetingCreated.
        :param join_url: The join_url of this MeetingCreated.
        :param max_participants: The max_participants of this MeetingCreated.
        :param meetingid: The meetingid of this MeetingCreated.
        :param unique_meeting_id: The unique_meeting_id of this MeetingCreated.
        """
        self.openapi_types = {
            'conference_call_info': str,
            'join_url': str,
            'max_participants': int,
            'meetingid': int,
            'unique_meeting_id': int
        }

        self.attribute_map = {
            'conference_call_info': 'conferenceCallInfo',
            'join_url': 'joinURL',
            'max_participants': 'maxParticipants',
            'meetingid': 'meetingid',
            'unique_meeting_id': 'uniqueMeetingId'
        }

        self._conference_call_info = conference_call_info
        self._join_url = join_url
        self._max_participants = max_participants
        self._meetingid = meetingid
        self._unique_meeting_id = unique_meeting_id

    @classmethod
    def from_dict(cls, dikt: dict) -> 'MeetingCreated':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The MeetingCreated of this MeetingCreated.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def conference_call_info(self):
        """Gets the conference_call_info of this MeetingCreated.

        Audio options for the meeting

        :return: The conference_call_info of this MeetingCreated.
        :rtype: str
        """
        return self._conference_call_info

    @conference_call_info.setter
    def conference_call_info(self, conference_call_info):
        """Sets the conference_call_info of this MeetingCreated.

        Audio options for the meeting

        :param conference_call_info: The conference_call_info of this MeetingCreated.
        :type conference_call_info: str
        """
        if conference_call_info is None:
            raise ValueError("Invalid value for `conference_call_info`, must not be `None`")

        self._conference_call_info = conference_call_info

    @property
    def join_url(self):
        """Gets the join_url of this MeetingCreated.

        The URL the meeting participants will use to join the meeting

        :return: The join_url of this MeetingCreated.
        :rtype: str
        """
        return self._join_url

    @join_url.setter
    def join_url(self, join_url):
        """Sets the join_url of this MeetingCreated.

        The URL the meeting participants will use to join the meeting

        :param join_url: The join_url of this MeetingCreated.
        :type join_url: str
        """
        if join_url is None:
            raise ValueError("Invalid value for `join_url`, must not be `None`")

        self._join_url = join_url

    @property
    def max_participants(self):
        """Gets the max_participants of this MeetingCreated.

        The maximum number of participants allowed in the meeting

        :return: The max_participants of this MeetingCreated.
        :rtype: int
        """
        return self._max_participants

    @max_participants.setter
    def max_participants(self, max_participants):
        """Sets the max_participants of this MeetingCreated.

        The maximum number of participants allowed in the meeting

        :param max_participants: The max_participants of this MeetingCreated.
        :type max_participants: int
        """
        if max_participants is None:
            raise ValueError("Invalid value for `max_participants`, must not be `None`")

        self._max_participants = max_participants

    @property
    def meetingid(self):
        """Gets the meetingid of this MeetingCreated.

        The meeting ID

        :return: The meetingid of this MeetingCreated.
        :rtype: int
        """
        return self._meetingid

    @meetingid.setter
    def meetingid(self, meetingid):
        """Sets the meetingid of this MeetingCreated.

        The meeting ID

        :param meetingid: The meetingid of this MeetingCreated.
        :type meetingid: int
        """
        if meetingid is None:
            raise ValueError("Invalid value for `meetingid`, must not be `None`")

        self._meetingid = meetingid

    @property
    def unique_meeting_id(self):
        """Gets the unique_meeting_id of this MeetingCreated.

        The meeting ID. Field retained for backwards compatibility reasons

        :return: The unique_meeting_id of this MeetingCreated.
        :rtype: int
        """
        return self._unique_meeting_id

    @unique_meeting_id.setter
    def unique_meeting_id(self, unique_meeting_id):
        """Sets the unique_meeting_id of this MeetingCreated.

        The meeting ID. Field retained for backwards compatibility reasons

        :param unique_meeting_id: The unique_meeting_id of this MeetingCreated.
        :type unique_meeting_id: int
        """
        if unique_meeting_id is None:
            raise ValueError("Invalid value for `unique_meeting_id`, must not be `None`")

        self._unique_meeting_id = unique_meeting_id
