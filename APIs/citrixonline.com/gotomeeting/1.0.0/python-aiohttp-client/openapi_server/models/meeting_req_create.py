# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.meeting_type import MeetingType
from openapi_server import util


class MeetingReqCreate(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, conferencecallinfo: str=None, endtime: datetime=None, meetingtype: MeetingType=None, passwordrequired: bool=None, starttime: datetime=None, subject: str=None, timezonekey: str=None):
        """MeetingReqCreate - a model defined in OpenAPI

        :param conferencecallinfo: The conferencecallinfo of this MeetingReqCreate.
        :param endtime: The endtime of this MeetingReqCreate.
        :param meetingtype: The meetingtype of this MeetingReqCreate.
        :param passwordrequired: The passwordrequired of this MeetingReqCreate.
        :param starttime: The starttime of this MeetingReqCreate.
        :param subject: The subject of this MeetingReqCreate.
        :param timezonekey: The timezonekey of this MeetingReqCreate.
        """
        self.openapi_types = {
            'conferencecallinfo': str,
            'endtime': datetime,
            'meetingtype': MeetingType,
            'passwordrequired': bool,
            'starttime': datetime,
            'subject': str,
            'timezonekey': str
        }

        self.attribute_map = {
            'conferencecallinfo': 'conferencecallinfo',
            'endtime': 'endtime',
            'meetingtype': 'meetingtype',
            'passwordrequired': 'passwordrequired',
            'starttime': 'starttime',
            'subject': 'subject',
            'timezonekey': 'timezonekey'
        }

        self._conferencecallinfo = conferencecallinfo
        self._endtime = endtime
        self._meetingtype = meetingtype
        self._passwordrequired = passwordrequired
        self._starttime = starttime
        self._subject = subject
        self._timezonekey = timezonekey

    @classmethod
    def from_dict(cls, dikt: dict) -> 'MeetingReqCreate':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The MeetingReqCreate of this MeetingReqCreate.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def conferencecallinfo(self):
        """Gets the conferencecallinfo of this MeetingReqCreate.

        A required string. Can be one of the following options: <br>PSTN (PSTN only), <br>Free (PSTN and VoIP), <br>Hybrid, (PSTN and VoIP), <br>Private (you provide numbers and access code), or <br>VoIP (VoIP only). <br>You may also enter plain text for numbers and access codes with a limit of 255 characters

        :return: The conferencecallinfo of this MeetingReqCreate.
        :rtype: str
        """
        return self._conferencecallinfo

    @conferencecallinfo.setter
    def conferencecallinfo(self, conferencecallinfo):
        """Sets the conferencecallinfo of this MeetingReqCreate.

        A required string. Can be one of the following options: <br>PSTN (PSTN only), <br>Free (PSTN and VoIP), <br>Hybrid, (PSTN and VoIP), <br>Private (you provide numbers and access code), or <br>VoIP (VoIP only). <br>You may also enter plain text for numbers and access codes with a limit of 255 characters

        :param conferencecallinfo: The conferencecallinfo of this MeetingReqCreate.
        :type conferencecallinfo: str
        """
        if conferencecallinfo is None:
            raise ValueError("Invalid value for `conferencecallinfo`, must not be `None`")

        self._conferencecallinfo = conferencecallinfo

    @property
    def endtime(self):
        """Gets the endtime of this MeetingReqCreate.

        The ending time of the meeting. Required ISO8601 UTC string, e.g. 2015-07-01T23:00:00Z

        :return: The endtime of this MeetingReqCreate.
        :rtype: datetime
        """
        return self._endtime

    @endtime.setter
    def endtime(self, endtime):
        """Sets the endtime of this MeetingReqCreate.

        The ending time of the meeting. Required ISO8601 UTC string, e.g. 2015-07-01T23:00:00Z

        :param endtime: The endtime of this MeetingReqCreate.
        :type endtime: datetime
        """
        if endtime is None:
            raise ValueError("Invalid value for `endtime`, must not be `None`")

        self._endtime = endtime

    @property
    def meetingtype(self):
        """Gets the meetingtype of this MeetingReqCreate.


        :return: The meetingtype of this MeetingReqCreate.
        :rtype: MeetingType
        """
        return self._meetingtype

    @meetingtype.setter
    def meetingtype(self, meetingtype):
        """Sets the meetingtype of this MeetingReqCreate.


        :param meetingtype: The meetingtype of this MeetingReqCreate.
        :type meetingtype: MeetingType
        """
        if meetingtype is None:
            raise ValueError("Invalid value for `meetingtype`, must not be `None`")

        self._meetingtype = meetingtype

    @property
    def passwordrequired(self):
        """Gets the passwordrequired of this MeetingReqCreate.

        Indicates whether a password is required to join the meeting. Required parameter

        :return: The passwordrequired of this MeetingReqCreate.
        :rtype: bool
        """
        return self._passwordrequired

    @passwordrequired.setter
    def passwordrequired(self, passwordrequired):
        """Sets the passwordrequired of this MeetingReqCreate.

        Indicates whether a password is required to join the meeting. Required parameter

        :param passwordrequired: The passwordrequired of this MeetingReqCreate.
        :type passwordrequired: bool
        """
        if passwordrequired is None:
            raise ValueError("Invalid value for `passwordrequired`, must not be `None`")

        self._passwordrequired = passwordrequired

    @property
    def starttime(self):
        """Gets the starttime of this MeetingReqCreate.

        The starting time of the meeting. Required ISO8601 UTC string, e.g. 2015-07-01T22:00:00Z

        :return: The starttime of this MeetingReqCreate.
        :rtype: datetime
        """
        return self._starttime

    @starttime.setter
    def starttime(self, starttime):
        """Sets the starttime of this MeetingReqCreate.

        The starting time of the meeting. Required ISO8601 UTC string, e.g. 2015-07-01T22:00:00Z

        :param starttime: The starttime of this MeetingReqCreate.
        :type starttime: datetime
        """
        if starttime is None:
            raise ValueError("Invalid value for `starttime`, must not be `None`")

        self._starttime = starttime

    @property
    def subject(self):
        """Gets the subject of this MeetingReqCreate.

        The subject of the meeting. 100 characters maximum. The characters '&gt;' and '&lt;' have to be replaced with the corresponding html character code (&amp;gt; for &#39;&gt;&#39; and &amp;lt; for &#39;&lt;&#39;)

        :return: The subject of this MeetingReqCreate.
        :rtype: str
        """
        return self._subject

    @subject.setter
    def subject(self, subject):
        """Sets the subject of this MeetingReqCreate.

        The subject of the meeting. 100 characters maximum. The characters '&gt;' and '&lt;' have to be replaced with the corresponding html character code (&amp;gt; for &#39;&gt;&#39; and &amp;lt; for &#39;&lt;&#39;)

        :param subject: The subject of this MeetingReqCreate.
        :type subject: str
        """
        if subject is None:
            raise ValueError("Invalid value for `subject`, must not be `None`")

        self._subject = subject

    @property
    def timezonekey(self):
        """Gets the timezonekey of this MeetingReqCreate.

        DEPRECATED. Must be provided and set to empty string ''

        :return: The timezonekey of this MeetingReqCreate.
        :rtype: str
        """
        return self._timezonekey

    @timezonekey.setter
    def timezonekey(self, timezonekey):
        """Sets the timezonekey of this MeetingReqCreate.

        DEPRECATED. Must be provided and set to empty string ''

        :param timezonekey: The timezonekey of this MeetingReqCreate.
        :type timezonekey: str
        """
        if timezonekey is None:
            raise ValueError("Invalid value for `timezonekey`, must not be `None`")

        self._timezonekey = timezonekey
