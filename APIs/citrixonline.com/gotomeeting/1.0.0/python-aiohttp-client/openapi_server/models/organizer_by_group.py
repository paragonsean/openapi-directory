# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.product import Product
from openapi_server.models.status import Status
from openapi_server import util


class OrganizerByGroup(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, email: str=None, first_name: str=None, group_id: int=None, group_name: str=None, last_name: str=None, max_num_attendees_allowed: int=None, organizer_key: int=None, products: List[Product]=None, status: Status=None):
        """OrganizerByGroup - a model defined in OpenAPI

        :param email: The email of this OrganizerByGroup.
        :param first_name: The first_name of this OrganizerByGroup.
        :param group_id: The group_id of this OrganizerByGroup.
        :param group_name: The group_name of this OrganizerByGroup.
        :param last_name: The last_name of this OrganizerByGroup.
        :param max_num_attendees_allowed: The max_num_attendees_allowed of this OrganizerByGroup.
        :param organizer_key: The organizer_key of this OrganizerByGroup.
        :param products: The products of this OrganizerByGroup.
        :param status: The status of this OrganizerByGroup.
        """
        self.openapi_types = {
            'email': str,
            'first_name': str,
            'group_id': int,
            'group_name': str,
            'last_name': str,
            'max_num_attendees_allowed': int,
            'organizer_key': int,
            'products': List[Product],
            'status': Status
        }

        self.attribute_map = {
            'email': 'email',
            'first_name': 'firstName',
            'group_id': 'groupId',
            'group_name': 'groupName',
            'last_name': 'lastName',
            'max_num_attendees_allowed': 'maxNumAttendeesAllowed',
            'organizer_key': 'organizerKey',
            'products': 'products',
            'status': 'status'
        }

        self._email = email
        self._first_name = first_name
        self._group_id = group_id
        self._group_name = group_name
        self._last_name = last_name
        self._max_num_attendees_allowed = max_num_attendees_allowed
        self._organizer_key = organizer_key
        self._products = products
        self._status = status

    @classmethod
    def from_dict(cls, dikt: dict) -> 'OrganizerByGroup':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The OrganizerByGroup of this OrganizerByGroup.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def email(self):
        """Gets the email of this OrganizerByGroup.

        The organizer's email address

        :return: The email of this OrganizerByGroup.
        :rtype: str
        """
        return self._email

    @email.setter
    def email(self, email):
        """Sets the email of this OrganizerByGroup.

        The organizer's email address

        :param email: The email of this OrganizerByGroup.
        :type email: str
        """
        if email is None:
            raise ValueError("Invalid value for `email`, must not be `None`")

        self._email = email

    @property
    def first_name(self):
        """Gets the first_name of this OrganizerByGroup.

        The organizer's first name

        :return: The first_name of this OrganizerByGroup.
        :rtype: str
        """
        return self._first_name

    @first_name.setter
    def first_name(self, first_name):
        """Sets the first_name of this OrganizerByGroup.

        The organizer's first name

        :param first_name: The first_name of this OrganizerByGroup.
        :type first_name: str
        """
        if first_name is None:
            raise ValueError("Invalid value for `first_name`, must not be `None`")

        self._first_name = first_name

    @property
    def group_id(self):
        """Gets the group_id of this OrganizerByGroup.

        The key of the group

        :return: The group_id of this OrganizerByGroup.
        :rtype: int
        """
        return self._group_id

    @group_id.setter
    def group_id(self, group_id):
        """Sets the group_id of this OrganizerByGroup.

        The key of the group

        :param group_id: The group_id of this OrganizerByGroup.
        :type group_id: int
        """
        if group_id is None:
            raise ValueError("Invalid value for `group_id`, must not be `None`")

        self._group_id = group_id

    @property
    def group_name(self):
        """Gets the group_name of this OrganizerByGroup.

        The name of the group

        :return: The group_name of this OrganizerByGroup.
        :rtype: str
        """
        return self._group_name

    @group_name.setter
    def group_name(self, group_name):
        """Sets the group_name of this OrganizerByGroup.

        The name of the group

        :param group_name: The group_name of this OrganizerByGroup.
        :type group_name: str
        """
        if group_name is None:
            raise ValueError("Invalid value for `group_name`, must not be `None`")

        self._group_name = group_name

    @property
    def last_name(self):
        """Gets the last_name of this OrganizerByGroup.

        The organizer's surname

        :return: The last_name of this OrganizerByGroup.
        :rtype: str
        """
        return self._last_name

    @last_name.setter
    def last_name(self, last_name):
        """Sets the last_name of this OrganizerByGroup.

        The organizer's surname

        :param last_name: The last_name of this OrganizerByGroup.
        :type last_name: str
        """
        if last_name is None:
            raise ValueError("Invalid value for `last_name`, must not be `None`")

        self._last_name = last_name

    @property
    def max_num_attendees_allowed(self):
        """Gets the max_num_attendees_allowed of this OrganizerByGroup.

        The maximum number of attendees allowed at sessions held by this organizer

        :return: The max_num_attendees_allowed of this OrganizerByGroup.
        :rtype: int
        """
        return self._max_num_attendees_allowed

    @max_num_attendees_allowed.setter
    def max_num_attendees_allowed(self, max_num_attendees_allowed):
        """Sets the max_num_attendees_allowed of this OrganizerByGroup.

        The maximum number of attendees allowed at sessions held by this organizer

        :param max_num_attendees_allowed: The max_num_attendees_allowed of this OrganizerByGroup.
        :type max_num_attendees_allowed: int
        """
        if max_num_attendees_allowed is None:
            raise ValueError("Invalid value for `max_num_attendees_allowed`, must not be `None`")

        self._max_num_attendees_allowed = max_num_attendees_allowed

    @property
    def organizer_key(self):
        """Gets the organizer_key of this OrganizerByGroup.

        The key of the organizer

        :return: The organizer_key of this OrganizerByGroup.
        :rtype: int
        """
        return self._organizer_key

    @organizer_key.setter
    def organizer_key(self, organizer_key):
        """Sets the organizer_key of this OrganizerByGroup.

        The key of the organizer

        :param organizer_key: The organizer_key of this OrganizerByGroup.
        :type organizer_key: int
        """
        if organizer_key is None:
            raise ValueError("Invalid value for `organizer_key`, must not be `None`")

        self._organizer_key = organizer_key

    @property
    def products(self):
        """Gets the products of this OrganizerByGroup.

        The products the organizer has access to, can be 'G2M', 'G2W', 'G2T' or 'OPENVOICE'

        :return: The products of this OrganizerByGroup.
        :rtype: List[Product]
        """
        return self._products

    @products.setter
    def products(self, products):
        """Sets the products of this OrganizerByGroup.

        The products the organizer has access to, can be 'G2M', 'G2W', 'G2T' or 'OPENVOICE'

        :param products: The products of this OrganizerByGroup.
        :type products: List[Product]
        """
        if products is None:
            raise ValueError("Invalid value for `products`, must not be `None`")

        self._products = products

    @property
    def status(self):
        """Gets the status of this OrganizerByGroup.


        :return: The status of this OrganizerByGroup.
        :rtype: Status
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this OrganizerByGroup.


        :param status: The status of this OrganizerByGroup.
        :type status: Status
        """
        if status is None:
            raise ValueError("Invalid value for `status`, must not be `None`")

        self._status = status
