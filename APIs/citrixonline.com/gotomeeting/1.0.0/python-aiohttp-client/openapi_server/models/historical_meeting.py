# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.meeting_type import MeetingType
from openapi_server import util


class HistoricalMeeting(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, account_key: str=None, conference_call_info: str=None, duration: str=None, email: str=None, end_time: datetime=None, first_name: str=None, last_name: str=None, locale: str=None, meeting_id: str=None, meeting_type: MeetingType=None, num_attendees: str=None, organizer_key: str=None, session_id: str=None, start_time: datetime=None, subject: str=None):
        """HistoricalMeeting - a model defined in OpenAPI

        :param account_key: The account_key of this HistoricalMeeting.
        :param conference_call_info: The conference_call_info of this HistoricalMeeting.
        :param duration: The duration of this HistoricalMeeting.
        :param email: The email of this HistoricalMeeting.
        :param end_time: The end_time of this HistoricalMeeting.
        :param first_name: The first_name of this HistoricalMeeting.
        :param last_name: The last_name of this HistoricalMeeting.
        :param locale: The locale of this HistoricalMeeting.
        :param meeting_id: The meeting_id of this HistoricalMeeting.
        :param meeting_type: The meeting_type of this HistoricalMeeting.
        :param num_attendees: The num_attendees of this HistoricalMeeting.
        :param organizer_key: The organizer_key of this HistoricalMeeting.
        :param session_id: The session_id of this HistoricalMeeting.
        :param start_time: The start_time of this HistoricalMeeting.
        :param subject: The subject of this HistoricalMeeting.
        """
        self.openapi_types = {
            'account_key': str,
            'conference_call_info': str,
            'duration': str,
            'email': str,
            'end_time': datetime,
            'first_name': str,
            'last_name': str,
            'locale': str,
            'meeting_id': str,
            'meeting_type': MeetingType,
            'num_attendees': str,
            'organizer_key': str,
            'session_id': str,
            'start_time': datetime,
            'subject': str
        }

        self.attribute_map = {
            'account_key': 'accountKey',
            'conference_call_info': 'conferenceCallInfo',
            'duration': 'duration',
            'email': 'email',
            'end_time': 'endTime',
            'first_name': 'firstName',
            'last_name': 'lastName',
            'locale': 'locale',
            'meeting_id': 'meetingId',
            'meeting_type': 'meetingType',
            'num_attendees': 'numAttendees',
            'organizer_key': 'organizerKey',
            'session_id': 'sessionId',
            'start_time': 'startTime',
            'subject': 'subject'
        }

        self._account_key = account_key
        self._conference_call_info = conference_call_info
        self._duration = duration
        self._email = email
        self._end_time = end_time
        self._first_name = first_name
        self._last_name = last_name
        self._locale = locale
        self._meeting_id = meeting_id
        self._meeting_type = meeting_type
        self._num_attendees = num_attendees
        self._organizer_key = organizer_key
        self._session_id = session_id
        self._start_time = start_time
        self._subject = subject

    @classmethod
    def from_dict(cls, dikt: dict) -> 'HistoricalMeeting':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The HistoricalMeeting of this HistoricalMeeting.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def account_key(self):
        """Gets the account_key of this HistoricalMeeting.

        The key of the company account

        :return: The account_key of this HistoricalMeeting.
        :rtype: str
        """
        return self._account_key

    @account_key.setter
    def account_key(self, account_key):
        """Sets the account_key of this HistoricalMeeting.

        The key of the company account

        :param account_key: The account_key of this HistoricalMeeting.
        :type account_key: str
        """
        if account_key is None:
            raise ValueError("Invalid value for `account_key`, must not be `None`")

        self._account_key = account_key

    @property
    def conference_call_info(self):
        """Gets the conference_call_info of this HistoricalMeeting.

        Audio options for the meeting

        :return: The conference_call_info of this HistoricalMeeting.
        :rtype: str
        """
        return self._conference_call_info

    @conference_call_info.setter
    def conference_call_info(self, conference_call_info):
        """Sets the conference_call_info of this HistoricalMeeting.

        Audio options for the meeting

        :param conference_call_info: The conference_call_info of this HistoricalMeeting.
        :type conference_call_info: str
        """
        if conference_call_info is None:
            raise ValueError("Invalid value for `conference_call_info`, must not be `None`")

        self._conference_call_info = conference_call_info

    @property
    def duration(self):
        """Gets the duration of this HistoricalMeeting.

        The duration of the meeting session in minutes

        :return: The duration of this HistoricalMeeting.
        :rtype: str
        """
        return self._duration

    @duration.setter
    def duration(self, duration):
        """Sets the duration of this HistoricalMeeting.

        The duration of the meeting session in minutes

        :param duration: The duration of this HistoricalMeeting.
        :type duration: str
        """
        if duration is None:
            raise ValueError("Invalid value for `duration`, must not be `None`")

        self._duration = duration

    @property
    def email(self):
        """Gets the email of this HistoricalMeeting.

        The meeting organizer's email address

        :return: The email of this HistoricalMeeting.
        :rtype: str
        """
        return self._email

    @email.setter
    def email(self, email):
        """Sets the email of this HistoricalMeeting.

        The meeting organizer's email address

        :param email: The email of this HistoricalMeeting.
        :type email: str
        """
        if email is None:
            raise ValueError("Invalid value for `email`, must not be `None`")

        self._email = email

    @property
    def end_time(self):
        """Gets the end_time of this HistoricalMeeting.

        The time the meeting instance ended

        :return: The end_time of this HistoricalMeeting.
        :rtype: datetime
        """
        return self._end_time

    @end_time.setter
    def end_time(self, end_time):
        """Sets the end_time of this HistoricalMeeting.

        The time the meeting instance ended

        :param end_time: The end_time of this HistoricalMeeting.
        :type end_time: datetime
        """
        if end_time is None:
            raise ValueError("Invalid value for `end_time`, must not be `None`")

        self._end_time = end_time

    @property
    def first_name(self):
        """Gets the first_name of this HistoricalMeeting.

        The meeting organizer's first name

        :return: The first_name of this HistoricalMeeting.
        :rtype: str
        """
        return self._first_name

    @first_name.setter
    def first_name(self, first_name):
        """Sets the first_name of this HistoricalMeeting.

        The meeting organizer's first name

        :param first_name: The first_name of this HistoricalMeeting.
        :type first_name: str
        """
        if first_name is None:
            raise ValueError("Invalid value for `first_name`, must not be `None`")

        self._first_name = first_name

    @property
    def last_name(self):
        """Gets the last_name of this HistoricalMeeting.

        The surname of the meeting organizer

        :return: The last_name of this HistoricalMeeting.
        :rtype: str
        """
        return self._last_name

    @last_name.setter
    def last_name(self, last_name):
        """Sets the last_name of this HistoricalMeeting.

        The surname of the meeting organizer

        :param last_name: The last_name of this HistoricalMeeting.
        :type last_name: str
        """
        if last_name is None:
            raise ValueError("Invalid value for `last_name`, must not be `None`")

        self._last_name = last_name

    @property
    def locale(self):
        """Gets the locale of this HistoricalMeeting.

        The current language setting of the organizer in the web portal

        :return: The locale of this HistoricalMeeting.
        :rtype: str
        """
        return self._locale

    @locale.setter
    def locale(self, locale):
        """Sets the locale of this HistoricalMeeting.

        The current language setting of the organizer in the web portal

        :param locale: The locale of this HistoricalMeeting.
        :type locale: str
        """
        if locale is None:
            raise ValueError("Invalid value for `locale`, must not be `None`")

        self._locale = locale

    @property
    def meeting_id(self):
        """Gets the meeting_id of this HistoricalMeeting.

        The meeting ID

        :return: The meeting_id of this HistoricalMeeting.
        :rtype: str
        """
        return self._meeting_id

    @meeting_id.setter
    def meeting_id(self, meeting_id):
        """Sets the meeting_id of this HistoricalMeeting.

        The meeting ID

        :param meeting_id: The meeting_id of this HistoricalMeeting.
        :type meeting_id: str
        """
        if meeting_id is None:
            raise ValueError("Invalid value for `meeting_id`, must not be `None`")

        self._meeting_id = meeting_id

    @property
    def meeting_type(self):
        """Gets the meeting_type of this HistoricalMeeting.


        :return: The meeting_type of this HistoricalMeeting.
        :rtype: MeetingType
        """
        return self._meeting_type

    @meeting_type.setter
    def meeting_type(self, meeting_type):
        """Sets the meeting_type of this HistoricalMeeting.


        :param meeting_type: The meeting_type of this HistoricalMeeting.
        :type meeting_type: MeetingType
        """
        if meeting_type is None:
            raise ValueError("Invalid value for `meeting_type`, must not be `None`")

        self._meeting_type = meeting_type

    @property
    def num_attendees(self):
        """Gets the num_attendees of this HistoricalMeeting.

        The number of attendees at the meeting instance

        :return: The num_attendees of this HistoricalMeeting.
        :rtype: str
        """
        return self._num_attendees

    @num_attendees.setter
    def num_attendees(self, num_attendees):
        """Sets the num_attendees of this HistoricalMeeting.

        The number of attendees at the meeting instance

        :param num_attendees: The num_attendees of this HistoricalMeeting.
        :type num_attendees: str
        """
        if num_attendees is None:
            raise ValueError("Invalid value for `num_attendees`, must not be `None`")

        self._num_attendees = num_attendees

    @property
    def organizer_key(self):
        """Gets the organizer_key of this HistoricalMeeting.

        The key of the meeting organizer

        :return: The organizer_key of this HistoricalMeeting.
        :rtype: str
        """
        return self._organizer_key

    @organizer_key.setter
    def organizer_key(self, organizer_key):
        """Sets the organizer_key of this HistoricalMeeting.

        The key of the meeting organizer

        :param organizer_key: The organizer_key of this HistoricalMeeting.
        :type organizer_key: str
        """
        if organizer_key is None:
            raise ValueError("Invalid value for `organizer_key`, must not be `None`")

        self._organizer_key = organizer_key

    @property
    def session_id(self):
        """Gets the session_id of this HistoricalMeeting.

        The ID of the meeting session

        :return: The session_id of this HistoricalMeeting.
        :rtype: str
        """
        return self._session_id

    @session_id.setter
    def session_id(self, session_id):
        """Sets the session_id of this HistoricalMeeting.

        The ID of the meeting session

        :param session_id: The session_id of this HistoricalMeeting.
        :type session_id: str
        """
        if session_id is None:
            raise ValueError("Invalid value for `session_id`, must not be `None`")

        self._session_id = session_id

    @property
    def start_time(self):
        """Gets the start_time of this HistoricalMeeting.

        The time the meeting instance started

        :return: The start_time of this HistoricalMeeting.
        :rtype: datetime
        """
        return self._start_time

    @start_time.setter
    def start_time(self, start_time):
        """Sets the start_time of this HistoricalMeeting.

        The time the meeting instance started

        :param start_time: The start_time of this HistoricalMeeting.
        :type start_time: datetime
        """
        if start_time is None:
            raise ValueError("Invalid value for `start_time`, must not be `None`")

        self._start_time = start_time

    @property
    def subject(self):
        """Gets the subject of this HistoricalMeeting.

        The subject of the meeting

        :return: The subject of this HistoricalMeeting.
        :rtype: str
        """
        return self._subject

    @subject.setter
    def subject(self, subject):
        """Sets the subject of this HistoricalMeeting.

        The subject of the meeting

        :param subject: The subject of this HistoricalMeeting.
        :type subject: str
        """
        if subject is None:
            raise ValueError("Invalid value for `subject`, must not be `None`")

        self._subject = subject
