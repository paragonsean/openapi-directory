# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.meeting_type import MeetingType
from openapi_server import util


class ScheduledMeetingByGroup(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, attendees: str=None, conference_call_info: str=None, email: str=None, first_name: str=None, group_name: str=None, last_name: str=None, meeting_id: str=None, meeting_type: MeetingType=None, organizer_key: str=None, organizerkey: int=None, password_required: bool=None, subject: str=None):
        """ScheduledMeetingByGroup - a model defined in OpenAPI

        :param attendees: The attendees of this ScheduledMeetingByGroup.
        :param conference_call_info: The conference_call_info of this ScheduledMeetingByGroup.
        :param email: The email of this ScheduledMeetingByGroup.
        :param first_name: The first_name of this ScheduledMeetingByGroup.
        :param group_name: The group_name of this ScheduledMeetingByGroup.
        :param last_name: The last_name of this ScheduledMeetingByGroup.
        :param meeting_id: The meeting_id of this ScheduledMeetingByGroup.
        :param meeting_type: The meeting_type of this ScheduledMeetingByGroup.
        :param organizer_key: The organizer_key of this ScheduledMeetingByGroup.
        :param organizerkey: The organizerkey of this ScheduledMeetingByGroup.
        :param password_required: The password_required of this ScheduledMeetingByGroup.
        :param subject: The subject of this ScheduledMeetingByGroup.
        """
        self.openapi_types = {
            'attendees': str,
            'conference_call_info': str,
            'email': str,
            'first_name': str,
            'group_name': str,
            'last_name': str,
            'meeting_id': str,
            'meeting_type': MeetingType,
            'organizer_key': str,
            'organizerkey': int,
            'password_required': bool,
            'subject': str
        }

        self.attribute_map = {
            'attendees': 'attendees',
            'conference_call_info': 'conferenceCallInfo',
            'email': 'email',
            'first_name': 'firstName',
            'group_name': 'groupName',
            'last_name': 'lastName',
            'meeting_id': 'meetingId',
            'meeting_type': 'meetingType',
            'organizer_key': 'organizerKey',
            'organizerkey': 'organizerkey',
            'password_required': 'passwordRequired',
            'subject': 'subject'
        }

        self._attendees = attendees
        self._conference_call_info = conference_call_info
        self._email = email
        self._first_name = first_name
        self._group_name = group_name
        self._last_name = last_name
        self._meeting_id = meeting_id
        self._meeting_type = meeting_type
        self._organizer_key = organizer_key
        self._organizerkey = organizerkey
        self._password_required = password_required
        self._subject = subject

    @classmethod
    def from_dict(cls, dikt: dict) -> 'ScheduledMeetingByGroup':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The ScheduledMeetingByGroup of this ScheduledMeetingByGroup.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def attendees(self):
        """Gets the attendees of this ScheduledMeetingByGroup.

        Not in use.

        :return: The attendees of this ScheduledMeetingByGroup.
        :rtype: str
        """
        return self._attendees

    @attendees.setter
    def attendees(self, attendees):
        """Sets the attendees of this ScheduledMeetingByGroup.

        Not in use.

        :param attendees: The attendees of this ScheduledMeetingByGroup.
        :type attendees: str
        """
        if attendees is None:
            raise ValueError("Invalid value for `attendees`, must not be `None`")

        self._attendees = attendees

    @property
    def conference_call_info(self):
        """Gets the conference_call_info of this ScheduledMeetingByGroup.

        Audio options for the meeting.

        :return: The conference_call_info of this ScheduledMeetingByGroup.
        :rtype: str
        """
        return self._conference_call_info

    @conference_call_info.setter
    def conference_call_info(self, conference_call_info):
        """Sets the conference_call_info of this ScheduledMeetingByGroup.

        Audio options for the meeting.

        :param conference_call_info: The conference_call_info of this ScheduledMeetingByGroup.
        :type conference_call_info: str
        """
        if conference_call_info is None:
            raise ValueError("Invalid value for `conference_call_info`, must not be `None`")

        self._conference_call_info = conference_call_info

    @property
    def email(self):
        """Gets the email of this ScheduledMeetingByGroup.

        The email address of the meeting organizer.

        :return: The email of this ScheduledMeetingByGroup.
        :rtype: str
        """
        return self._email

    @email.setter
    def email(self, email):
        """Sets the email of this ScheduledMeetingByGroup.

        The email address of the meeting organizer.

        :param email: The email of this ScheduledMeetingByGroup.
        :type email: str
        """
        if email is None:
            raise ValueError("Invalid value for `email`, must not be `None`")

        self._email = email

    @property
    def first_name(self):
        """Gets the first_name of this ScheduledMeetingByGroup.

        The first name of the meeting organizer.

        :return: The first_name of this ScheduledMeetingByGroup.
        :rtype: str
        """
        return self._first_name

    @first_name.setter
    def first_name(self, first_name):
        """Sets the first_name of this ScheduledMeetingByGroup.

        The first name of the meeting organizer.

        :param first_name: The first_name of this ScheduledMeetingByGroup.
        :type first_name: str
        """
        if first_name is None:
            raise ValueError("Invalid value for `first_name`, must not be `None`")

        self._first_name = first_name

    @property
    def group_name(self):
        """Gets the group_name of this ScheduledMeetingByGroup.

        The name of the group.

        :return: The group_name of this ScheduledMeetingByGroup.
        :rtype: str
        """
        return self._group_name

    @group_name.setter
    def group_name(self, group_name):
        """Sets the group_name of this ScheduledMeetingByGroup.

        The name of the group.

        :param group_name: The group_name of this ScheduledMeetingByGroup.
        :type group_name: str
        """
        if group_name is None:
            raise ValueError("Invalid value for `group_name`, must not be `None`")

        self._group_name = group_name

    @property
    def last_name(self):
        """Gets the last_name of this ScheduledMeetingByGroup.

        The surname of the meeting organizer.

        :return: The last_name of this ScheduledMeetingByGroup.
        :rtype: str
        """
        return self._last_name

    @last_name.setter
    def last_name(self, last_name):
        """Sets the last_name of this ScheduledMeetingByGroup.

        The surname of the meeting organizer.

        :param last_name: The last_name of this ScheduledMeetingByGroup.
        :type last_name: str
        """
        if last_name is None:
            raise ValueError("Invalid value for `last_name`, must not be `None`")

        self._last_name = last_name

    @property
    def meeting_id(self):
        """Gets the meeting_id of this ScheduledMeetingByGroup.

        The meeting ID.

        :return: The meeting_id of this ScheduledMeetingByGroup.
        :rtype: str
        """
        return self._meeting_id

    @meeting_id.setter
    def meeting_id(self, meeting_id):
        """Sets the meeting_id of this ScheduledMeetingByGroup.

        The meeting ID.

        :param meeting_id: The meeting_id of this ScheduledMeetingByGroup.
        :type meeting_id: str
        """
        if meeting_id is None:
            raise ValueError("Invalid value for `meeting_id`, must not be `None`")

        self._meeting_id = meeting_id

    @property
    def meeting_type(self):
        """Gets the meeting_type of this ScheduledMeetingByGroup.


        :return: The meeting_type of this ScheduledMeetingByGroup.
        :rtype: MeetingType
        """
        return self._meeting_type

    @meeting_type.setter
    def meeting_type(self, meeting_type):
        """Sets the meeting_type of this ScheduledMeetingByGroup.


        :param meeting_type: The meeting_type of this ScheduledMeetingByGroup.
        :type meeting_type: MeetingType
        """
        if meeting_type is None:
            raise ValueError("Invalid value for `meeting_type`, must not be `None`")

        self._meeting_type = meeting_type

    @property
    def organizer_key(self):
        """Gets the organizer_key of this ScheduledMeetingByGroup.

        The key of the meeting organizer.

        :return: The organizer_key of this ScheduledMeetingByGroup.
        :rtype: str
        """
        return self._organizer_key

    @organizer_key.setter
    def organizer_key(self, organizer_key):
        """Sets the organizer_key of this ScheduledMeetingByGroup.

        The key of the meeting organizer.

        :param organizer_key: The organizer_key of this ScheduledMeetingByGroup.
        :type organizer_key: str
        """
        if organizer_key is None:
            raise ValueError("Invalid value for `organizer_key`, must not be `None`")

        self._organizer_key = organizer_key

    @property
    def organizerkey(self):
        """Gets the organizerkey of this ScheduledMeetingByGroup.

        The key of the meeting organizer. Field retained for backwards compatibility reasons.

        :return: The organizerkey of this ScheduledMeetingByGroup.
        :rtype: int
        """
        return self._organizerkey

    @organizerkey.setter
    def organizerkey(self, organizerkey):
        """Sets the organizerkey of this ScheduledMeetingByGroup.

        The key of the meeting organizer. Field retained for backwards compatibility reasons.

        :param organizerkey: The organizerkey of this ScheduledMeetingByGroup.
        :type organizerkey: int
        """
        if organizerkey is None:
            raise ValueError("Invalid value for `organizerkey`, must not be `None`")

        self._organizerkey = organizerkey

    @property
    def password_required(self):
        """Gets the password_required of this ScheduledMeetingByGroup.

        Indicates whether a password is required to join the meeting.

        :return: The password_required of this ScheduledMeetingByGroup.
        :rtype: bool
        """
        return self._password_required

    @password_required.setter
    def password_required(self, password_required):
        """Sets the password_required of this ScheduledMeetingByGroup.

        Indicates whether a password is required to join the meeting.

        :param password_required: The password_required of this ScheduledMeetingByGroup.
        :type password_required: bool
        """
        if password_required is None:
            raise ValueError("Invalid value for `password_required`, must not be `None`")

        self._password_required = password_required

    @property
    def subject(self):
        """Gets the subject of this ScheduledMeetingByGroup.

        The subject of the meeting.

        :return: The subject of this ScheduledMeetingByGroup.
        :rtype: str
        """
        return self._subject

    @subject.setter
    def subject(self, subject):
        """Sets the subject of this ScheduledMeetingByGroup.

        The subject of the meeting.

        :param subject: The subject of this ScheduledMeetingByGroup.
        :type subject: str
        """
        if subject is None:
            raise ValueError("Invalid value for `subject`, must not be `None`")

        self._subject = subject
