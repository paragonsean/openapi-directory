/**
 * api.datumbox.com
 * Datumbox offers a Machine Learning platform composed of 14 classifiers and Natural Language processing functions. Functions include sentiment analysis, topic classification, readability assessment, language detection, and much more.
 *
 * The version of the OpenAPI document: 1.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#ifndef OAI_OAIDocumentClassificationApi_H
#define OAI_OAIDocumentClassificationApi_H

#include "OAIHelpers.h"
#include "OAIHttpRequest.h"
#include "OAIServerConfiguration.h"
#include "OAIOauth.h"

#include <QString>

#include <QObject>
#include <QByteArray>
#include <QStringList>
#include <QList>
#include <QNetworkAccessManager>

namespace OpenAPI {

class OAIDocumentClassificationApi : public QObject {
    Q_OBJECT

public:
    OAIDocumentClassificationApi(const int timeOut = 0);
    ~OAIDocumentClassificationApi();

    void initializeServerConfigs();
    int setDefaultServerValue(int serverIndex,const QString &operation, const QString &variable,const QString &val);
    void setServerIndex(const QString &operation, int serverIndex);
    void setApiKey(const QString &apiKeyName, const QString &apiKey);
    void setBearerToken(const QString &token);
    void setUsername(const QString &username);
    void setPassword(const QString &password);
    void setTimeOut(const int timeOut);
    void setWorkingDirectory(const QString &path);
    void setNetworkAccessManager(QNetworkAccessManager* manager);
    int addServerConfiguration(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables = QMap<QString, OAIServerVariable>());
    void setNewServerForAllOperations(const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void setNewServer(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void addHeaders(const QString &key, const QString &value);
    void enableRequestCompression();
    void enableResponseCompression();
    void abortRequests();
    QString getParamStylePrefix(const QString &style);
    QString getParamStyleSuffix(const QString &style);
    QString getParamStyleDelimiter(const QString &style, const QString &name, bool isExplode);

    /**
    * @param[in]  api_key QString [required]
    * @param[in]  text QString [optional]
    */
    virtual void adultContentDetection(const QString &api_key, const ::OpenAPI::OptionalParam<QString> &text = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  api_key QString [required]
    * @param[in]  text QString [optional]
    */
    virtual void commercialDetection(const QString &api_key, const ::OpenAPI::OptionalParam<QString> &text = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  api_key QString [required]
    * @param[in]  text QString [optional]
    */
    virtual void educationalDetection(const QString &api_key, const ::OpenAPI::OptionalParam<QString> &text = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  api_key QString [required]
    * @param[in]  text QString [optional]
    */
    virtual void genderDetection(const QString &api_key, const ::OpenAPI::OptionalParam<QString> &text = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  api_key QString [required]
    * @param[in]  text QString [optional]
    */
    virtual void languageDetection(const QString &api_key, const ::OpenAPI::OptionalParam<QString> &text = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  api_key QString [required]
    * @param[in]  text QString [optional]
    */
    virtual void readabilityAssessment(const QString &api_key, const ::OpenAPI::OptionalParam<QString> &text = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  api_key QString [required]
    * @param[in]  text QString [optional]
    */
    virtual void sentimentAnalysis(const QString &api_key, const ::OpenAPI::OptionalParam<QString> &text = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  api_key QString [required]
    * @param[in]  text QString [optional]
    */
    virtual void spamDetection(const QString &api_key, const ::OpenAPI::OptionalParam<QString> &text = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  api_key QString [required]
    * @param[in]  text QString [optional]
    */
    virtual void subjectivityAnalysis(const QString &api_key, const ::OpenAPI::OptionalParam<QString> &text = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  api_key QString [required]
    * @param[in]  text QString [optional]
    */
    virtual void topicClassification(const QString &api_key, const ::OpenAPI::OptionalParam<QString> &text = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  api_key QString [required]
    * @param[in]  text QString [optional]
    */
    virtual void twitterSentimentAnalysis(const QString &api_key, const ::OpenAPI::OptionalParam<QString> &text = ::OpenAPI::OptionalParam<QString>());


private:
    QMap<QString,int> _serverIndices;
    QMap<QString,QList<OAIServerConfiguration>> _serverConfigs;
    QMap<QString, QString> _apiKeys;
    QString _bearerToken;
    QString _username;
    QString _password;
    int _timeOut;
    QString _workingDirectory;
    QNetworkAccessManager* _manager;
    QMap<QString, QString> _defaultHeaders;
    bool _isResponseCompressionEnabled;
    bool _isRequestCompressionEnabled;
    OAIHttpRequestInput _latestInput;
    OAIHttpRequestWorker *_latestWorker;
    QStringList _latestScope;
    OauthCode _authFlow;
    OauthImplicit _implicitFlow;
    OauthCredentials _credentialFlow;
    OauthPassword _passwordFlow;
    int _OauthMethod = 0;

    void adultContentDetectionCallback(OAIHttpRequestWorker *worker);
    void commercialDetectionCallback(OAIHttpRequestWorker *worker);
    void educationalDetectionCallback(OAIHttpRequestWorker *worker);
    void genderDetectionCallback(OAIHttpRequestWorker *worker);
    void languageDetectionCallback(OAIHttpRequestWorker *worker);
    void readabilityAssessmentCallback(OAIHttpRequestWorker *worker);
    void sentimentAnalysisCallback(OAIHttpRequestWorker *worker);
    void spamDetectionCallback(OAIHttpRequestWorker *worker);
    void subjectivityAnalysisCallback(OAIHttpRequestWorker *worker);
    void topicClassificationCallback(OAIHttpRequestWorker *worker);
    void twitterSentimentAnalysisCallback(OAIHttpRequestWorker *worker);

Q_SIGNALS:

    void adultContentDetectionSignal();
    void commercialDetectionSignal();
    void educationalDetectionSignal();
    void genderDetectionSignal();
    void languageDetectionSignal();
    void readabilityAssessmentSignal();
    void sentimentAnalysisSignal();
    void spamDetectionSignal();
    void subjectivityAnalysisSignal();
    void topicClassificationSignal();
    void twitterSentimentAnalysisSignal();


    void adultContentDetectionSignalFull(OAIHttpRequestWorker *worker);
    void commercialDetectionSignalFull(OAIHttpRequestWorker *worker);
    void educationalDetectionSignalFull(OAIHttpRequestWorker *worker);
    void genderDetectionSignalFull(OAIHttpRequestWorker *worker);
    void languageDetectionSignalFull(OAIHttpRequestWorker *worker);
    void readabilityAssessmentSignalFull(OAIHttpRequestWorker *worker);
    void sentimentAnalysisSignalFull(OAIHttpRequestWorker *worker);
    void spamDetectionSignalFull(OAIHttpRequestWorker *worker);
    void subjectivityAnalysisSignalFull(OAIHttpRequestWorker *worker);
    void topicClassificationSignalFull(OAIHttpRequestWorker *worker);
    void twitterSentimentAnalysisSignalFull(OAIHttpRequestWorker *worker);

    Q_DECL_DEPRECATED_X("Use adultContentDetectionSignalError() instead")
    void adultContentDetectionSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void adultContentDetectionSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use commercialDetectionSignalError() instead")
    void commercialDetectionSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void commercialDetectionSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use educationalDetectionSignalError() instead")
    void educationalDetectionSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void educationalDetectionSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use genderDetectionSignalError() instead")
    void genderDetectionSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void genderDetectionSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use languageDetectionSignalError() instead")
    void languageDetectionSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void languageDetectionSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use readabilityAssessmentSignalError() instead")
    void readabilityAssessmentSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void readabilityAssessmentSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use sentimentAnalysisSignalError() instead")
    void sentimentAnalysisSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void sentimentAnalysisSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use spamDetectionSignalError() instead")
    void spamDetectionSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void spamDetectionSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use subjectivityAnalysisSignalError() instead")
    void subjectivityAnalysisSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void subjectivityAnalysisSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use topicClassificationSignalError() instead")
    void topicClassificationSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void topicClassificationSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use twitterSentimentAnalysisSignalError() instead")
    void twitterSentimentAnalysisSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void twitterSentimentAnalysisSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);

    Q_DECL_DEPRECATED_X("Use adultContentDetectionSignalErrorFull() instead")
    void adultContentDetectionSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void adultContentDetectionSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use commercialDetectionSignalErrorFull() instead")
    void commercialDetectionSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void commercialDetectionSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use educationalDetectionSignalErrorFull() instead")
    void educationalDetectionSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void educationalDetectionSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use genderDetectionSignalErrorFull() instead")
    void genderDetectionSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void genderDetectionSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use languageDetectionSignalErrorFull() instead")
    void languageDetectionSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void languageDetectionSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use readabilityAssessmentSignalErrorFull() instead")
    void readabilityAssessmentSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void readabilityAssessmentSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use sentimentAnalysisSignalErrorFull() instead")
    void sentimentAnalysisSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void sentimentAnalysisSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use spamDetectionSignalErrorFull() instead")
    void spamDetectionSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void spamDetectionSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use subjectivityAnalysisSignalErrorFull() instead")
    void subjectivityAnalysisSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void subjectivityAnalysisSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use topicClassificationSignalErrorFull() instead")
    void topicClassificationSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void topicClassificationSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use twitterSentimentAnalysisSignalErrorFull() instead")
    void twitterSentimentAnalysisSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void twitterSentimentAnalysisSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);

    void abortRequestsSignal();
    void allPendingRequestsCompleted();

public Q_SLOTS:
    void tokenAvailable();
};

} // namespace OpenAPI
#endif
