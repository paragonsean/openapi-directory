/*
 * api.datumbox.com
 * Datumbox offers a Machine Learning platform composed of 14 classifiers and Natural Language processing functions. Functions include sentiment analysis, topic classification, readability assessment, language detection, and much more.
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiException;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for DocumentClassificationApi
 */
@Disabled
public class DocumentClassificationApiTest {

    private final DocumentClassificationApi api = new DocumentClassificationApi();

    /**
     * Classifies the Document as adult or noadult
     *
     * The Adult Content Detection function classifies the documents as adult or noadult based on their context. It can be used to detect whether a document contains content unsuitable for minors.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void adultContentDetectionTest() throws ApiException {
        String apiKey = null;
        String text = null;
        api.adultContentDetection(apiKey, text);
        // TODO: test validations
    }

    /**
     * Classifies the Document as commercial or nocommercial
     *
     * The Commercial Detection function labels the documents as commercial or non-commercial based on their keywords and expressions. It can be used to detect whether a website is commercial or not.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void commercialDetectionTest() throws ApiException {
        String apiKey = null;
        String text = null;
        api.commercialDetection(apiKey, text);
        // TODO: test validations
    }

    /**
     * Classifies the Document as educational or noeducational
     *
     * The Educational Detection function classifies the documents as educational or non-educational based on their context. It can be used to detect whether a website is educational or not.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void educationalDetectionTest() throws ApiException {
        String apiKey = null;
        String text = null;
        api.educationalDetection(apiKey, text);
        // TODO: test validations
    }

    /**
     * Gender Detection Service
     *
     * The Gender Detection function identifies if a particular document is written-by or targets-to a man or a woman based on the context, the words and the idioms found in the text.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void genderDetectionTest() throws ApiException {
        String apiKey = null;
        String text = null;
        api.genderDetection(apiKey, text);
        // TODO: test validations
    }

    /**
     * Identifies the Language of the Document
     *
     * The Language Detection function identifies the natural language of the given document based on its words and context. This classifier is able to detect 96 different languages.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void languageDetectionTest() throws ApiException {
        String apiKey = null;
        String text = null;
        api.languageDetection(apiKey, text);
        // TODO: test validations
    }

    /**
     * Evaluates the Readability of the Document
     *
     * The Readability Assessment function determines the degree of readability of a document based on its terms and idioms. The texts are classified as basic, intermediate and advanced depending their difficulty.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void readabilityAssessmentTest() throws ApiException {
        String apiKey = null;
        String text = null;
        api.readabilityAssessment(apiKey, text);
        // TODO: test validations
    }

    /**
     * Identifies the Sentiment of the Document
     *
     * The Sentiment Analysis function classifies documents as positive, negative or neutral (lack of sentiment) depending on whether they express a positive, negative or neutral opinion.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void sentimentAnalysisTest() throws ApiException {
        String apiKey = null;
        String text = null;
        api.sentimentAnalysis(apiKey, text);
        // TODO: test validations
    }

    /**
     * Classifies the Document as spam or nospam
     *
     * The Spam Detection function labels documents as spam or nospam by taking into account their context. It can be used to filter out spam emails and comments.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void spamDetectionTest() throws ApiException {
        String apiKey = null;
        String text = null;
        api.spamDetection(apiKey, text);
        // TODO: test validations
    }

    /**
     * Classifies Document as Subjective or Objective
     *
     * The Subjectivity Analysis function categorizes documents as subjective or objective based on their writing style. Texts that express personal opinions are labeled as subjective and the others as objective.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void subjectivityAnalysisTest() throws ApiException {
        String apiKey = null;
        String text = null;
        api.subjectivityAnalysis(apiKey, text);
        // TODO: test validations
    }

    /**
     * Identifies the Topic of the Document
     *
     * The Topic Classification function assigns documents in 12 thematic categories based on their keywords, idioms and jargon. It can be used to identify the topic of the texts.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void topicClassificationTest() throws ApiException {
        String apiKey = null;
        String text = null;
        api.topicClassification(apiKey, text);
        // TODO: test validations
    }

    /**
     * Identifies the Sentiment of Twitter Messages
     *
     * The Twitter Sentiment Analysis function allows you to perform Sentiment Analysis on Twitter. It classifies the tweets as positive, negative or neutral depending on their context.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void twitterSentimentAnalysisTest() throws ApiException {
        String apiKey = null;
        String text = null;
        api.twitterSentimentAnalysis(apiKey, text);
        // TODO: test validations
    }

}
