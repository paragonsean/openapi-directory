/**
 * api.datumbox.com
 * Datumbox offers a Machine Learning platform composed of 14 classifiers and Natural Language processing functions. Functions include sentiment analysis, topic classification, readability assessment, language detection, and much more.
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";

/**
* DocumentClassification service.
* @module api/DocumentClassificationApi
* @version 1.0
*/
export default class DocumentClassificationApi {

    /**
    * Constructs a new DocumentClassificationApi. 
    * @alias module:api/DocumentClassificationApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the adultContentDetection operation.
     * @callback module:api/DocumentClassificationApi~adultContentDetectionCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Classifies the Document as adult or noadult
     * The Adult Content Detection function classifies the documents as adult or noadult based on their context. It can be used to detect whether a document contains content unsuitable for minors.
     * @param {String} apiKey Your API Key
     * @param {Object} opts Optional parameters
     * @param {String} [text] The text that you want to analyze. It should not contain HTML tags.
     * @param {module:api/DocumentClassificationApi~adultContentDetectionCallback} callback The callback function, accepting three arguments: error, data, response
     */
    adultContentDetection(apiKey, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'apiKey' is set
      if (apiKey === undefined || apiKey === null) {
        throw new Error("Missing the required parameter 'apiKey' when calling adultContentDetection");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
        'api_key': apiKey,
        'text': opts['text']
      };

      let authNames = [];
      let contentTypes = ['application/x-www-form-urlencoded'];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/1.0/AdultContentDetection.json', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the commercialDetection operation.
     * @callback module:api/DocumentClassificationApi~commercialDetectionCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Classifies the Document as commercial or nocommercial
     * The Commercial Detection function labels the documents as commercial or non-commercial based on their keywords and expressions. It can be used to detect whether a website is commercial or not.
     * @param {String} apiKey Your API Key
     * @param {Object} opts Optional parameters
     * @param {String} [text] The text that you want to analyze. It should not contain HTML tags.
     * @param {module:api/DocumentClassificationApi~commercialDetectionCallback} callback The callback function, accepting three arguments: error, data, response
     */
    commercialDetection(apiKey, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'apiKey' is set
      if (apiKey === undefined || apiKey === null) {
        throw new Error("Missing the required parameter 'apiKey' when calling commercialDetection");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
        'api_key': apiKey,
        'text': opts['text']
      };

      let authNames = [];
      let contentTypes = ['application/x-www-form-urlencoded'];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/1.0/CommercialDetection.json', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the educationalDetection operation.
     * @callback module:api/DocumentClassificationApi~educationalDetectionCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Classifies the Document as educational or noeducational
     * The Educational Detection function classifies the documents as educational or non-educational based on their context. It can be used to detect whether a website is educational or not.
     * @param {String} apiKey Your API Key
     * @param {Object} opts Optional parameters
     * @param {String} [text] The text that you want to analyze. It should not contain HTML tags.
     * @param {module:api/DocumentClassificationApi~educationalDetectionCallback} callback The callback function, accepting three arguments: error, data, response
     */
    educationalDetection(apiKey, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'apiKey' is set
      if (apiKey === undefined || apiKey === null) {
        throw new Error("Missing the required parameter 'apiKey' when calling educationalDetection");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
        'api_key': apiKey,
        'text': opts['text']
      };

      let authNames = [];
      let contentTypes = ['application/x-www-form-urlencoded'];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/1.0/EducationalDetection.json', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the genderDetection operation.
     * @callback module:api/DocumentClassificationApi~genderDetectionCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Gender Detection Service
     * The Gender Detection function identifies if a particular document is written-by or targets-to a man or a woman based on the context, the words and the idioms found in the text.
     * @param {String} apiKey Your API Key
     * @param {Object} opts Optional parameters
     * @param {String} [text] The text that you want to analyze. It should not contain HTML tags.
     * @param {module:api/DocumentClassificationApi~genderDetectionCallback} callback The callback function, accepting three arguments: error, data, response
     */
    genderDetection(apiKey, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'apiKey' is set
      if (apiKey === undefined || apiKey === null) {
        throw new Error("Missing the required parameter 'apiKey' when calling genderDetection");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
        'api_key': apiKey,
        'text': opts['text']
      };

      let authNames = [];
      let contentTypes = ['application/x-www-form-urlencoded'];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/1.0/GenderDetection.json', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the languageDetection operation.
     * @callback module:api/DocumentClassificationApi~languageDetectionCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Identifies the Language of the Document
     * The Language Detection function identifies the natural language of the given document based on its words and context. This classifier is able to detect 96 different languages.
     * @param {String} apiKey Your API Key
     * @param {Object} opts Optional parameters
     * @param {String} [text] The text that you want to analyze. It should not contain HTML tags.
     * @param {module:api/DocumentClassificationApi~languageDetectionCallback} callback The callback function, accepting three arguments: error, data, response
     */
    languageDetection(apiKey, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'apiKey' is set
      if (apiKey === undefined || apiKey === null) {
        throw new Error("Missing the required parameter 'apiKey' when calling languageDetection");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
        'api_key': apiKey,
        'text': opts['text']
      };

      let authNames = [];
      let contentTypes = ['application/x-www-form-urlencoded'];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/1.0/LanguageDetection.json', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the readabilityAssessment operation.
     * @callback module:api/DocumentClassificationApi~readabilityAssessmentCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Evaluates the Readability of the Document
     * The Readability Assessment function determines the degree of readability of a document based on its terms and idioms. The texts are classified as basic, intermediate and advanced depending their difficulty.
     * @param {String} apiKey Your API Key
     * @param {Object} opts Optional parameters
     * @param {String} [text] The text that you want to analyze. It should not contain HTML tags.
     * @param {module:api/DocumentClassificationApi~readabilityAssessmentCallback} callback The callback function, accepting three arguments: error, data, response
     */
    readabilityAssessment(apiKey, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'apiKey' is set
      if (apiKey === undefined || apiKey === null) {
        throw new Error("Missing the required parameter 'apiKey' when calling readabilityAssessment");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
        'api_key': apiKey,
        'text': opts['text']
      };

      let authNames = [];
      let contentTypes = ['application/x-www-form-urlencoded'];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/1.0/ReadabilityAssessment.json', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the sentimentAnalysis operation.
     * @callback module:api/DocumentClassificationApi~sentimentAnalysisCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Identifies the Sentiment of the Document
     * The Sentiment Analysis function classifies documents as positive, negative or neutral (lack of sentiment) depending on whether they express a positive, negative or neutral opinion.
     * @param {String} apiKey Your API Key
     * @param {Object} opts Optional parameters
     * @param {String} [text] The text that you want to analyze. It should not contain HTML tags.
     * @param {module:api/DocumentClassificationApi~sentimentAnalysisCallback} callback The callback function, accepting three arguments: error, data, response
     */
    sentimentAnalysis(apiKey, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'apiKey' is set
      if (apiKey === undefined || apiKey === null) {
        throw new Error("Missing the required parameter 'apiKey' when calling sentimentAnalysis");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
        'api_key': apiKey,
        'text': opts['text']
      };

      let authNames = [];
      let contentTypes = ['application/x-www-form-urlencoded'];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/1.0/SentimentAnalysis.json', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the spamDetection operation.
     * @callback module:api/DocumentClassificationApi~spamDetectionCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Classifies the Document as spam or nospam
     * The Spam Detection function labels documents as spam or nospam by taking into account their context. It can be used to filter out spam emails and comments.
     * @param {String} apiKey Your API Key
     * @param {Object} opts Optional parameters
     * @param {String} [text] The text that you want to analyze. It should not contain HTML tags.
     * @param {module:api/DocumentClassificationApi~spamDetectionCallback} callback The callback function, accepting three arguments: error, data, response
     */
    spamDetection(apiKey, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'apiKey' is set
      if (apiKey === undefined || apiKey === null) {
        throw new Error("Missing the required parameter 'apiKey' when calling spamDetection");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
        'api_key': apiKey,
        'text': opts['text']
      };

      let authNames = [];
      let contentTypes = ['application/x-www-form-urlencoded'];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/1.0/SpamDetection.json', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the subjectivityAnalysis operation.
     * @callback module:api/DocumentClassificationApi~subjectivityAnalysisCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Classifies Document as Subjective or Objective
     * The Subjectivity Analysis function categorizes documents as subjective or objective based on their writing style. Texts that express personal opinions are labeled as subjective and the others as objective.
     * @param {String} apiKey Your API Key
     * @param {Object} opts Optional parameters
     * @param {String} [text] The text that you want to analyze. It should not contain HTML tags.
     * @param {module:api/DocumentClassificationApi~subjectivityAnalysisCallback} callback The callback function, accepting three arguments: error, data, response
     */
    subjectivityAnalysis(apiKey, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'apiKey' is set
      if (apiKey === undefined || apiKey === null) {
        throw new Error("Missing the required parameter 'apiKey' when calling subjectivityAnalysis");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
        'api_key': apiKey,
        'text': opts['text']
      };

      let authNames = [];
      let contentTypes = ['application/x-www-form-urlencoded'];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/1.0/SubjectivityAnalysis.json', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the topicClassification operation.
     * @callback module:api/DocumentClassificationApi~topicClassificationCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Identifies the Topic of the Document
     * The Topic Classification function assigns documents in 12 thematic categories based on their keywords, idioms and jargon. It can be used to identify the topic of the texts.
     * @param {String} apiKey Your API Key
     * @param {Object} opts Optional parameters
     * @param {String} [text] The text that you want to analyze. It should not contain HTML tags.
     * @param {module:api/DocumentClassificationApi~topicClassificationCallback} callback The callback function, accepting three arguments: error, data, response
     */
    topicClassification(apiKey, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'apiKey' is set
      if (apiKey === undefined || apiKey === null) {
        throw new Error("Missing the required parameter 'apiKey' when calling topicClassification");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
        'api_key': apiKey,
        'text': opts['text']
      };

      let authNames = [];
      let contentTypes = ['application/x-www-form-urlencoded'];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/1.0/TopicClassification.json', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the twitterSentimentAnalysis operation.
     * @callback module:api/DocumentClassificationApi~twitterSentimentAnalysisCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Identifies the Sentiment of Twitter Messages
     * The Twitter Sentiment Analysis function allows you to perform Sentiment Analysis on Twitter. It classifies the tweets as positive, negative or neutral depending on their context.
     * @param {String} apiKey Your API Key
     * @param {Object} opts Optional parameters
     * @param {String} [text] The text of the tweet that we evaluate.
     * @param {module:api/DocumentClassificationApi~twitterSentimentAnalysisCallback} callback The callback function, accepting three arguments: error, data, response
     */
    twitterSentimentAnalysis(apiKey, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'apiKey' is set
      if (apiKey === undefined || apiKey === null) {
        throw new Error("Missing the required parameter 'apiKey' when calling twitterSentimentAnalysis");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
        'api_key': apiKey,
        'text': opts['text']
      };

      let authNames = [];
      let contentTypes = ['application/x-www-form-urlencoded'];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/1.0/TwitterSentimentAnalysis.json', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
