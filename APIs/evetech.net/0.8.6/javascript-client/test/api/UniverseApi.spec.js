/**
 * EVE Swagger Interface
 * An OpenAPI for EVE Online
 *
 * The version of the OpenAPI document: 0.8.6
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', process.cwd()+'/src/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require(process.cwd()+'/src/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.EveSwaggerInterface);
  }
}(this, function(expect, EveSwaggerInterface) {
  'use strict';

  var instance;

  beforeEach(function() {
    instance = new EveSwaggerInterface.UniverseApi();
  });

  var getProperty = function(object, getter, property) {
    // Use getter method if present; otherwise, get the property directly.
    if (typeof object[getter] === 'function')
      return object[getter]();
    else
      return object[property];
  }

  var setProperty = function(object, setter, property, value) {
    // Use setter method if present; otherwise, set the property directly.
    if (typeof object[setter] === 'function')
      object[setter](value);
    else
      object[property] = value;
  }

  describe('UniverseApi', function() {
    describe('getUniverseAncestries', function() {
      it('should call getUniverseAncestries successfully', function(done) {
        //uncomment below and update the code to test getUniverseAncestries
        //instance.getUniverseAncestries(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('getUniverseAsteroidBeltsAsteroidBeltId', function() {
      it('should call getUniverseAsteroidBeltsAsteroidBeltId successfully', function(done) {
        //uncomment below and update the code to test getUniverseAsteroidBeltsAsteroidBeltId
        //instance.getUniverseAsteroidBeltsAsteroidBeltId(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('getUniverseBloodlines', function() {
      it('should call getUniverseBloodlines successfully', function(done) {
        //uncomment below and update the code to test getUniverseBloodlines
        //instance.getUniverseBloodlines(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('getUniverseCategories', function() {
      it('should call getUniverseCategories successfully', function(done) {
        //uncomment below and update the code to test getUniverseCategories
        //instance.getUniverseCategories(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('getUniverseCategoriesCategoryId', function() {
      it('should call getUniverseCategoriesCategoryId successfully', function(done) {
        //uncomment below and update the code to test getUniverseCategoriesCategoryId
        //instance.getUniverseCategoriesCategoryId(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('getUniverseConstellations', function() {
      it('should call getUniverseConstellations successfully', function(done) {
        //uncomment below and update the code to test getUniverseConstellations
        //instance.getUniverseConstellations(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('getUniverseConstellationsConstellationId', function() {
      it('should call getUniverseConstellationsConstellationId successfully', function(done) {
        //uncomment below and update the code to test getUniverseConstellationsConstellationId
        //instance.getUniverseConstellationsConstellationId(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('getUniverseFactions', function() {
      it('should call getUniverseFactions successfully', function(done) {
        //uncomment below and update the code to test getUniverseFactions
        //instance.getUniverseFactions(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('getUniverseGraphics', function() {
      it('should call getUniverseGraphics successfully', function(done) {
        //uncomment below and update the code to test getUniverseGraphics
        //instance.getUniverseGraphics(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('getUniverseGraphicsGraphicId', function() {
      it('should call getUniverseGraphicsGraphicId successfully', function(done) {
        //uncomment below and update the code to test getUniverseGraphicsGraphicId
        //instance.getUniverseGraphicsGraphicId(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('getUniverseGroups', function() {
      it('should call getUniverseGroups successfully', function(done) {
        //uncomment below and update the code to test getUniverseGroups
        //instance.getUniverseGroups(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('getUniverseGroupsGroupId', function() {
      it('should call getUniverseGroupsGroupId successfully', function(done) {
        //uncomment below and update the code to test getUniverseGroupsGroupId
        //instance.getUniverseGroupsGroupId(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('getUniverseMoonsMoonId', function() {
      it('should call getUniverseMoonsMoonId successfully', function(done) {
        //uncomment below and update the code to test getUniverseMoonsMoonId
        //instance.getUniverseMoonsMoonId(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('getUniversePlanetsPlanetId', function() {
      it('should call getUniversePlanetsPlanetId successfully', function(done) {
        //uncomment below and update the code to test getUniversePlanetsPlanetId
        //instance.getUniversePlanetsPlanetId(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('getUniverseRaces', function() {
      it('should call getUniverseRaces successfully', function(done) {
        //uncomment below and update the code to test getUniverseRaces
        //instance.getUniverseRaces(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('getUniverseRegions', function() {
      it('should call getUniverseRegions successfully', function(done) {
        //uncomment below and update the code to test getUniverseRegions
        //instance.getUniverseRegions(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('getUniverseRegionsRegionId', function() {
      it('should call getUniverseRegionsRegionId successfully', function(done) {
        //uncomment below and update the code to test getUniverseRegionsRegionId
        //instance.getUniverseRegionsRegionId(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('getUniverseStargatesStargateId', function() {
      it('should call getUniverseStargatesStargateId successfully', function(done) {
        //uncomment below and update the code to test getUniverseStargatesStargateId
        //instance.getUniverseStargatesStargateId(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('getUniverseStarsStarId', function() {
      it('should call getUniverseStarsStarId successfully', function(done) {
        //uncomment below and update the code to test getUniverseStarsStarId
        //instance.getUniverseStarsStarId(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('getUniverseStationsStationId', function() {
      it('should call getUniverseStationsStationId successfully', function(done) {
        //uncomment below and update the code to test getUniverseStationsStationId
        //instance.getUniverseStationsStationId(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('getUniverseStructures', function() {
      it('should call getUniverseStructures successfully', function(done) {
        //uncomment below and update the code to test getUniverseStructures
        //instance.getUniverseStructures(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('getUniverseStructuresStructureId', function() {
      it('should call getUniverseStructuresStructureId successfully', function(done) {
        //uncomment below and update the code to test getUniverseStructuresStructureId
        //instance.getUniverseStructuresStructureId(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('getUniverseSystemJumps', function() {
      it('should call getUniverseSystemJumps successfully', function(done) {
        //uncomment below and update the code to test getUniverseSystemJumps
        //instance.getUniverseSystemJumps(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('getUniverseSystemKills', function() {
      it('should call getUniverseSystemKills successfully', function(done) {
        //uncomment below and update the code to test getUniverseSystemKills
        //instance.getUniverseSystemKills(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('getUniverseSystems', function() {
      it('should call getUniverseSystems successfully', function(done) {
        //uncomment below and update the code to test getUniverseSystems
        //instance.getUniverseSystems(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('getUniverseSystemsSystemId', function() {
      it('should call getUniverseSystemsSystemId successfully', function(done) {
        //uncomment below and update the code to test getUniverseSystemsSystemId
        //instance.getUniverseSystemsSystemId(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('getUniverseTypes', function() {
      it('should call getUniverseTypes successfully', function(done) {
        //uncomment below and update the code to test getUniverseTypes
        //instance.getUniverseTypes(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('getUniverseTypesTypeId', function() {
      it('should call getUniverseTypesTypeId successfully', function(done) {
        //uncomment below and update the code to test getUniverseTypesTypeId
        //instance.getUniverseTypesTypeId(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('postUniverseIds', function() {
      it('should call postUniverseIds successfully', function(done) {
        //uncomment below and update the code to test postUniverseIds
        //instance.postUniverseIds(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('postUniverseNames', function() {
      it('should call postUniverseNames successfully', function(done) {
        //uncomment below and update the code to test postUniverseNames
        //instance.postUniverseNames(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
  });

}));
