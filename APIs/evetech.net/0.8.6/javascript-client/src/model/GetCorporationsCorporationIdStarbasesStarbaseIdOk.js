/**
 * EVE Swagger Interface
 * An OpenAPI for EVE Online
 *
 * The version of the OpenAPI document: 0.8.6
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import GetCorporationsCorporationIdStarbasesStarbaseIdFuel from './GetCorporationsCorporationIdStarbasesStarbaseIdFuel';

/**
 * The GetCorporationsCorporationIdStarbasesStarbaseIdOk model module.
 * @module model/GetCorporationsCorporationIdStarbasesStarbaseIdOk
 * @version 0.8.6
 */
class GetCorporationsCorporationIdStarbasesStarbaseIdOk {
    /**
     * Constructs a new <code>GetCorporationsCorporationIdStarbasesStarbaseIdOk</code>.
     * 200 ok object
     * @alias module:model/GetCorporationsCorporationIdStarbasesStarbaseIdOk
     * @param allowAllianceMembers {Boolean} allow_alliance_members boolean
     * @param allowCorporationMembers {Boolean} allow_corporation_members boolean
     * @param anchor {module:model/GetCorporationsCorporationIdStarbasesStarbaseIdOk.AnchorEnum} Who can anchor starbase (POS) and its structures
     * @param attackIfAtWar {Boolean} attack_if_at_war boolean
     * @param attackIfOtherSecurityStatusDropping {Boolean} attack_if_other_security_status_dropping boolean
     * @param fuelBayTake {module:model/GetCorporationsCorporationIdStarbasesStarbaseIdOk.FuelBayTakeEnum} Who can take fuel blocks out of the starbase (POS)'s fuel bay
     * @param fuelBayView {module:model/GetCorporationsCorporationIdStarbasesStarbaseIdOk.FuelBayViewEnum} Who can view the starbase (POS)'s fule bay. Characters either need to have required role or belong to the starbase (POS) owner's corporation or alliance, as described by the enum, all other access settings follows the same scheme
     * @param offline {module:model/GetCorporationsCorporationIdStarbasesStarbaseIdOk.OfflineEnum} Who can offline starbase (POS) and its structures
     * @param online {module:model/GetCorporationsCorporationIdStarbasesStarbaseIdOk.OnlineEnum} Who can online starbase (POS) and its structures
     * @param unanchor {module:model/GetCorporationsCorporationIdStarbasesStarbaseIdOk.UnanchorEnum} Who can unanchor starbase (POS) and its structures
     * @param useAllianceStandings {Boolean} True if the starbase (POS) is using alliance standings, otherwise using corporation's
     */
    constructor(allowAllianceMembers, allowCorporationMembers, anchor, attackIfAtWar, attackIfOtherSecurityStatusDropping, fuelBayTake, fuelBayView, offline, online, unanchor, useAllianceStandings) { 
        
        GetCorporationsCorporationIdStarbasesStarbaseIdOk.initialize(this, allowAllianceMembers, allowCorporationMembers, anchor, attackIfAtWar, attackIfOtherSecurityStatusDropping, fuelBayTake, fuelBayView, offline, online, unanchor, useAllianceStandings);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, allowAllianceMembers, allowCorporationMembers, anchor, attackIfAtWar, attackIfOtherSecurityStatusDropping, fuelBayTake, fuelBayView, offline, online, unanchor, useAllianceStandings) { 
        obj['allow_alliance_members'] = allowAllianceMembers;
        obj['allow_corporation_members'] = allowCorporationMembers;
        obj['anchor'] = anchor;
        obj['attack_if_at_war'] = attackIfAtWar;
        obj['attack_if_other_security_status_dropping'] = attackIfOtherSecurityStatusDropping;
        obj['fuel_bay_take'] = fuelBayTake;
        obj['fuel_bay_view'] = fuelBayView;
        obj['offline'] = offline;
        obj['online'] = online;
        obj['unanchor'] = unanchor;
        obj['use_alliance_standings'] = useAllianceStandings;
    }

    /**
     * Constructs a <code>GetCorporationsCorporationIdStarbasesStarbaseIdOk</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/GetCorporationsCorporationIdStarbasesStarbaseIdOk} obj Optional instance to populate.
     * @return {module:model/GetCorporationsCorporationIdStarbasesStarbaseIdOk} The populated <code>GetCorporationsCorporationIdStarbasesStarbaseIdOk</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new GetCorporationsCorporationIdStarbasesStarbaseIdOk();

            if (data.hasOwnProperty('allow_alliance_members')) {
                obj['allow_alliance_members'] = ApiClient.convertToType(data['allow_alliance_members'], 'Boolean');
            }
            if (data.hasOwnProperty('allow_corporation_members')) {
                obj['allow_corporation_members'] = ApiClient.convertToType(data['allow_corporation_members'], 'Boolean');
            }
            if (data.hasOwnProperty('anchor')) {
                obj['anchor'] = ApiClient.convertToType(data['anchor'], 'String');
            }
            if (data.hasOwnProperty('attack_if_at_war')) {
                obj['attack_if_at_war'] = ApiClient.convertToType(data['attack_if_at_war'], 'Boolean');
            }
            if (data.hasOwnProperty('attack_if_other_security_status_dropping')) {
                obj['attack_if_other_security_status_dropping'] = ApiClient.convertToType(data['attack_if_other_security_status_dropping'], 'Boolean');
            }
            if (data.hasOwnProperty('attack_security_status_threshold')) {
                obj['attack_security_status_threshold'] = ApiClient.convertToType(data['attack_security_status_threshold'], 'Number');
            }
            if (data.hasOwnProperty('attack_standing_threshold')) {
                obj['attack_standing_threshold'] = ApiClient.convertToType(data['attack_standing_threshold'], 'Number');
            }
            if (data.hasOwnProperty('fuel_bay_take')) {
                obj['fuel_bay_take'] = ApiClient.convertToType(data['fuel_bay_take'], 'String');
            }
            if (data.hasOwnProperty('fuel_bay_view')) {
                obj['fuel_bay_view'] = ApiClient.convertToType(data['fuel_bay_view'], 'String');
            }
            if (data.hasOwnProperty('fuels')) {
                obj['fuels'] = ApiClient.convertToType(data['fuels'], [GetCorporationsCorporationIdStarbasesStarbaseIdFuel]);
            }
            if (data.hasOwnProperty('offline')) {
                obj['offline'] = ApiClient.convertToType(data['offline'], 'String');
            }
            if (data.hasOwnProperty('online')) {
                obj['online'] = ApiClient.convertToType(data['online'], 'String');
            }
            if (data.hasOwnProperty('unanchor')) {
                obj['unanchor'] = ApiClient.convertToType(data['unanchor'], 'String');
            }
            if (data.hasOwnProperty('use_alliance_standings')) {
                obj['use_alliance_standings'] = ApiClient.convertToType(data['use_alliance_standings'], 'Boolean');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>GetCorporationsCorporationIdStarbasesStarbaseIdOk</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>GetCorporationsCorporationIdStarbasesStarbaseIdOk</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of GetCorporationsCorporationIdStarbasesStarbaseIdOk.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // ensure the json data is a string
        if (data['anchor'] && !(typeof data['anchor'] === 'string' || data['anchor'] instanceof String)) {
            throw new Error("Expected the field `anchor` to be a primitive type in the JSON string but got " + data['anchor']);
        }
        // ensure the json data is a string
        if (data['fuel_bay_take'] && !(typeof data['fuel_bay_take'] === 'string' || data['fuel_bay_take'] instanceof String)) {
            throw new Error("Expected the field `fuel_bay_take` to be a primitive type in the JSON string but got " + data['fuel_bay_take']);
        }
        // ensure the json data is a string
        if (data['fuel_bay_view'] && !(typeof data['fuel_bay_view'] === 'string' || data['fuel_bay_view'] instanceof String)) {
            throw new Error("Expected the field `fuel_bay_view` to be a primitive type in the JSON string but got " + data['fuel_bay_view']);
        }
        if (data['fuels']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['fuels'])) {
                throw new Error("Expected the field `fuels` to be an array in the JSON data but got " + data['fuels']);
            }
            // validate the optional field `fuels` (array)
            for (const item of data['fuels']) {
                GetCorporationsCorporationIdStarbasesStarbaseIdFuel.validateJSON(item);
            };
        }
        // ensure the json data is a string
        if (data['offline'] && !(typeof data['offline'] === 'string' || data['offline'] instanceof String)) {
            throw new Error("Expected the field `offline` to be a primitive type in the JSON string but got " + data['offline']);
        }
        // ensure the json data is a string
        if (data['online'] && !(typeof data['online'] === 'string' || data['online'] instanceof String)) {
            throw new Error("Expected the field `online` to be a primitive type in the JSON string but got " + data['online']);
        }
        // ensure the json data is a string
        if (data['unanchor'] && !(typeof data['unanchor'] === 'string' || data['unanchor'] instanceof String)) {
            throw new Error("Expected the field `unanchor` to be a primitive type in the JSON string but got " + data['unanchor']);
        }

        return true;
    }


}

GetCorporationsCorporationIdStarbasesStarbaseIdOk.RequiredProperties = ["allow_alliance_members", "allow_corporation_members", "anchor", "attack_if_at_war", "attack_if_other_security_status_dropping", "fuel_bay_take", "fuel_bay_view", "offline", "online", "unanchor", "use_alliance_standings"];

/**
 * allow_alliance_members boolean
 * @member {Boolean} allow_alliance_members
 */
GetCorporationsCorporationIdStarbasesStarbaseIdOk.prototype['allow_alliance_members'] = undefined;

/**
 * allow_corporation_members boolean
 * @member {Boolean} allow_corporation_members
 */
GetCorporationsCorporationIdStarbasesStarbaseIdOk.prototype['allow_corporation_members'] = undefined;

/**
 * Who can anchor starbase (POS) and its structures
 * @member {module:model/GetCorporationsCorporationIdStarbasesStarbaseIdOk.AnchorEnum} anchor
 */
GetCorporationsCorporationIdStarbasesStarbaseIdOk.prototype['anchor'] = undefined;

/**
 * attack_if_at_war boolean
 * @member {Boolean} attack_if_at_war
 */
GetCorporationsCorporationIdStarbasesStarbaseIdOk.prototype['attack_if_at_war'] = undefined;

/**
 * attack_if_other_security_status_dropping boolean
 * @member {Boolean} attack_if_other_security_status_dropping
 */
GetCorporationsCorporationIdStarbasesStarbaseIdOk.prototype['attack_if_other_security_status_dropping'] = undefined;

/**
 * Starbase (POS) will attack if target's security standing is lower than this value
 * @member {Number} attack_security_status_threshold
 */
GetCorporationsCorporationIdStarbasesStarbaseIdOk.prototype['attack_security_status_threshold'] = undefined;

/**
 * Starbase (POS) will attack if target's standing is lower than this value
 * @member {Number} attack_standing_threshold
 */
GetCorporationsCorporationIdStarbasesStarbaseIdOk.prototype['attack_standing_threshold'] = undefined;

/**
 * Who can take fuel blocks out of the starbase (POS)'s fuel bay
 * @member {module:model/GetCorporationsCorporationIdStarbasesStarbaseIdOk.FuelBayTakeEnum} fuel_bay_take
 */
GetCorporationsCorporationIdStarbasesStarbaseIdOk.prototype['fuel_bay_take'] = undefined;

/**
 * Who can view the starbase (POS)'s fule bay. Characters either need to have required role or belong to the starbase (POS) owner's corporation or alliance, as described by the enum, all other access settings follows the same scheme
 * @member {module:model/GetCorporationsCorporationIdStarbasesStarbaseIdOk.FuelBayViewEnum} fuel_bay_view
 */
GetCorporationsCorporationIdStarbasesStarbaseIdOk.prototype['fuel_bay_view'] = undefined;

/**
 * Fuel blocks and other things that will be consumed when operating a starbase (POS)
 * @member {Array.<module:model/GetCorporationsCorporationIdStarbasesStarbaseIdFuel>} fuels
 */
GetCorporationsCorporationIdStarbasesStarbaseIdOk.prototype['fuels'] = undefined;

/**
 * Who can offline starbase (POS) and its structures
 * @member {module:model/GetCorporationsCorporationIdStarbasesStarbaseIdOk.OfflineEnum} offline
 */
GetCorporationsCorporationIdStarbasesStarbaseIdOk.prototype['offline'] = undefined;

/**
 * Who can online starbase (POS) and its structures
 * @member {module:model/GetCorporationsCorporationIdStarbasesStarbaseIdOk.OnlineEnum} online
 */
GetCorporationsCorporationIdStarbasesStarbaseIdOk.prototype['online'] = undefined;

/**
 * Who can unanchor starbase (POS) and its structures
 * @member {module:model/GetCorporationsCorporationIdStarbasesStarbaseIdOk.UnanchorEnum} unanchor
 */
GetCorporationsCorporationIdStarbasesStarbaseIdOk.prototype['unanchor'] = undefined;

/**
 * True if the starbase (POS) is using alliance standings, otherwise using corporation's
 * @member {Boolean} use_alliance_standings
 */
GetCorporationsCorporationIdStarbasesStarbaseIdOk.prototype['use_alliance_standings'] = undefined;





/**
 * Allowed values for the <code>anchor</code> property.
 * @enum {String}
 * @readonly
 */
GetCorporationsCorporationIdStarbasesStarbaseIdOk['AnchorEnum'] = {

    /**
     * value: "alliance_member"
     * @const
     */
    "alliance_member": "alliance_member",

    /**
     * value: "config_starbase_equipment_role"
     * @const
     */
    "config_starbase_equipment_role": "config_starbase_equipment_role",

    /**
     * value: "corporation_member"
     * @const
     */
    "corporation_member": "corporation_member",

    /**
     * value: "starbase_fuel_technician_role"
     * @const
     */
    "starbase_fuel_technician_role": "starbase_fuel_technician_role"
};


/**
 * Allowed values for the <code>fuel_bay_take</code> property.
 * @enum {String}
 * @readonly
 */
GetCorporationsCorporationIdStarbasesStarbaseIdOk['FuelBayTakeEnum'] = {

    /**
     * value: "alliance_member"
     * @const
     */
    "alliance_member": "alliance_member",

    /**
     * value: "config_starbase_equipment_role"
     * @const
     */
    "config_starbase_equipment_role": "config_starbase_equipment_role",

    /**
     * value: "corporation_member"
     * @const
     */
    "corporation_member": "corporation_member",

    /**
     * value: "starbase_fuel_technician_role"
     * @const
     */
    "starbase_fuel_technician_role": "starbase_fuel_technician_role"
};


/**
 * Allowed values for the <code>fuel_bay_view</code> property.
 * @enum {String}
 * @readonly
 */
GetCorporationsCorporationIdStarbasesStarbaseIdOk['FuelBayViewEnum'] = {

    /**
     * value: "alliance_member"
     * @const
     */
    "alliance_member": "alliance_member",

    /**
     * value: "config_starbase_equipment_role"
     * @const
     */
    "config_starbase_equipment_role": "config_starbase_equipment_role",

    /**
     * value: "corporation_member"
     * @const
     */
    "corporation_member": "corporation_member",

    /**
     * value: "starbase_fuel_technician_role"
     * @const
     */
    "starbase_fuel_technician_role": "starbase_fuel_technician_role"
};


/**
 * Allowed values for the <code>offline</code> property.
 * @enum {String}
 * @readonly
 */
GetCorporationsCorporationIdStarbasesStarbaseIdOk['OfflineEnum'] = {

    /**
     * value: "alliance_member"
     * @const
     */
    "alliance_member": "alliance_member",

    /**
     * value: "config_starbase_equipment_role"
     * @const
     */
    "config_starbase_equipment_role": "config_starbase_equipment_role",

    /**
     * value: "corporation_member"
     * @const
     */
    "corporation_member": "corporation_member",

    /**
     * value: "starbase_fuel_technician_role"
     * @const
     */
    "starbase_fuel_technician_role": "starbase_fuel_technician_role"
};


/**
 * Allowed values for the <code>online</code> property.
 * @enum {String}
 * @readonly
 */
GetCorporationsCorporationIdStarbasesStarbaseIdOk['OnlineEnum'] = {

    /**
     * value: "alliance_member"
     * @const
     */
    "alliance_member": "alliance_member",

    /**
     * value: "config_starbase_equipment_role"
     * @const
     */
    "config_starbase_equipment_role": "config_starbase_equipment_role",

    /**
     * value: "corporation_member"
     * @const
     */
    "corporation_member": "corporation_member",

    /**
     * value: "starbase_fuel_technician_role"
     * @const
     */
    "starbase_fuel_technician_role": "starbase_fuel_technician_role"
};


/**
 * Allowed values for the <code>unanchor</code> property.
 * @enum {String}
 * @readonly
 */
GetCorporationsCorporationIdStarbasesStarbaseIdOk['UnanchorEnum'] = {

    /**
     * value: "alliance_member"
     * @const
     */
    "alliance_member": "alliance_member",

    /**
     * value: "config_starbase_equipment_role"
     * @const
     */
    "config_starbase_equipment_role": "config_starbase_equipment_role",

    /**
     * value: "corporation_member"
     * @const
     */
    "corporation_member": "corporation_member",

    /**
     * value: "starbase_fuel_technician_role"
     * @const
     */
    "starbase_fuel_technician_role": "starbase_fuel_technician_role"
};



export default GetCorporationsCorporationIdStarbasesStarbaseIdOk;

