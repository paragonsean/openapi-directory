/**
 * EVE Swagger Interface
 * An OpenAPI for EVE Online
 *
 * The version of the OpenAPI document: 0.8.6
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The GetIncursions200Ok model module.
 * @module model/GetIncursions200Ok
 * @version 0.8.6
 */
class GetIncursions200Ok {
    /**
     * Constructs a new <code>GetIncursions200Ok</code>.
     * 200 ok object
     * @alias module:model/GetIncursions200Ok
     * @param constellationId {Number} The constellation id in which this incursion takes place
     * @param factionId {Number} The attacking faction's id
     * @param hasBoss {Boolean} Whether the final encounter has boss or not
     * @param infestedSolarSystems {Array.<Number>} A list of infested solar system ids that are a part of this incursion
     * @param influence {Number} Influence of this incursion as a float from 0 to 1
     * @param stagingSolarSystemId {Number} Staging solar system for this incursion
     * @param state {module:model/GetIncursions200Ok.StateEnum} The state of this incursion
     * @param type {String} The type of this incursion
     */
    constructor(constellationId, factionId, hasBoss, infestedSolarSystems, influence, stagingSolarSystemId, state, type) { 
        
        GetIncursions200Ok.initialize(this, constellationId, factionId, hasBoss, infestedSolarSystems, influence, stagingSolarSystemId, state, type);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, constellationId, factionId, hasBoss, infestedSolarSystems, influence, stagingSolarSystemId, state, type) { 
        obj['constellation_id'] = constellationId;
        obj['faction_id'] = factionId;
        obj['has_boss'] = hasBoss;
        obj['infested_solar_systems'] = infestedSolarSystems;
        obj['influence'] = influence;
        obj['staging_solar_system_id'] = stagingSolarSystemId;
        obj['state'] = state;
        obj['type'] = type;
    }

    /**
     * Constructs a <code>GetIncursions200Ok</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/GetIncursions200Ok} obj Optional instance to populate.
     * @return {module:model/GetIncursions200Ok} The populated <code>GetIncursions200Ok</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new GetIncursions200Ok();

            if (data.hasOwnProperty('constellation_id')) {
                obj['constellation_id'] = ApiClient.convertToType(data['constellation_id'], 'Number');
            }
            if (data.hasOwnProperty('faction_id')) {
                obj['faction_id'] = ApiClient.convertToType(data['faction_id'], 'Number');
            }
            if (data.hasOwnProperty('has_boss')) {
                obj['has_boss'] = ApiClient.convertToType(data['has_boss'], 'Boolean');
            }
            if (data.hasOwnProperty('infested_solar_systems')) {
                obj['infested_solar_systems'] = ApiClient.convertToType(data['infested_solar_systems'], ['Number']);
            }
            if (data.hasOwnProperty('influence')) {
                obj['influence'] = ApiClient.convertToType(data['influence'], 'Number');
            }
            if (data.hasOwnProperty('staging_solar_system_id')) {
                obj['staging_solar_system_id'] = ApiClient.convertToType(data['staging_solar_system_id'], 'Number');
            }
            if (data.hasOwnProperty('state')) {
                obj['state'] = ApiClient.convertToType(data['state'], 'String');
            }
            if (data.hasOwnProperty('type')) {
                obj['type'] = ApiClient.convertToType(data['type'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>GetIncursions200Ok</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>GetIncursions200Ok</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of GetIncursions200Ok.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // ensure the json data is an array
        if (!Array.isArray(data['infested_solar_systems'])) {
            throw new Error("Expected the field `infested_solar_systems` to be an array in the JSON data but got " + data['infested_solar_systems']);
        }
        // ensure the json data is a string
        if (data['state'] && !(typeof data['state'] === 'string' || data['state'] instanceof String)) {
            throw new Error("Expected the field `state` to be a primitive type in the JSON string but got " + data['state']);
        }
        // ensure the json data is a string
        if (data['type'] && !(typeof data['type'] === 'string' || data['type'] instanceof String)) {
            throw new Error("Expected the field `type` to be a primitive type in the JSON string but got " + data['type']);
        }

        return true;
    }


}

GetIncursions200Ok.RequiredProperties = ["constellation_id", "faction_id", "has_boss", "infested_solar_systems", "influence", "staging_solar_system_id", "state", "type"];

/**
 * The constellation id in which this incursion takes place
 * @member {Number} constellation_id
 */
GetIncursions200Ok.prototype['constellation_id'] = undefined;

/**
 * The attacking faction's id
 * @member {Number} faction_id
 */
GetIncursions200Ok.prototype['faction_id'] = undefined;

/**
 * Whether the final encounter has boss or not
 * @member {Boolean} has_boss
 */
GetIncursions200Ok.prototype['has_boss'] = undefined;

/**
 * A list of infested solar system ids that are a part of this incursion
 * @member {Array.<Number>} infested_solar_systems
 */
GetIncursions200Ok.prototype['infested_solar_systems'] = undefined;

/**
 * Influence of this incursion as a float from 0 to 1
 * @member {Number} influence
 */
GetIncursions200Ok.prototype['influence'] = undefined;

/**
 * Staging solar system for this incursion
 * @member {Number} staging_solar_system_id
 */
GetIncursions200Ok.prototype['staging_solar_system_id'] = undefined;

/**
 * The state of this incursion
 * @member {module:model/GetIncursions200Ok.StateEnum} state
 */
GetIncursions200Ok.prototype['state'] = undefined;

/**
 * The type of this incursion
 * @member {String} type
 */
GetIncursions200Ok.prototype['type'] = undefined;





/**
 * Allowed values for the <code>state</code> property.
 * @enum {String}
 * @readonly
 */
GetIncursions200Ok['StateEnum'] = {

    /**
     * value: "withdrawing"
     * @const
     */
    "withdrawing": "withdrawing",

    /**
     * value: "mobilizing"
     * @const
     */
    "mobilizing": "mobilizing",

    /**
     * value: "established"
     * @const
     */
    "established": "established"
};



export default GetIncursions200Ok;

