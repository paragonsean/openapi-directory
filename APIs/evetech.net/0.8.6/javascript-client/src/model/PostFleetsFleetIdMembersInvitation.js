/**
 * EVE Swagger Interface
 * An OpenAPI for EVE Online
 *
 * The version of the OpenAPI document: 0.8.6
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The PostFleetsFleetIdMembersInvitation model module.
 * @module model/PostFleetsFleetIdMembersInvitation
 * @version 0.8.6
 */
class PostFleetsFleetIdMembersInvitation {
    /**
     * Constructs a new <code>PostFleetsFleetIdMembersInvitation</code>.
     * invitation object
     * @alias module:model/PostFleetsFleetIdMembersInvitation
     * @param characterId {Number} The character you want to invite
     * @param role {module:model/PostFleetsFleetIdMembersInvitation.RoleEnum} If a character is invited with the `fleet_commander` role, neither `wing_id` or `squad_id` should be specified. If a character is invited with the `wing_commander` role, only `wing_id` should be specified. If a character is invited with the `squad_commander` role, both `wing_id` and `squad_id` should be specified. If a character is invited with the `squad_member` role, `wing_id` and `squad_id` should either both be specified or not specified at all. If they aren’t specified, the invited character will join any squad with available positions.
     */
    constructor(characterId, role) { 
        
        PostFleetsFleetIdMembersInvitation.initialize(this, characterId, role);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, characterId, role) { 
        obj['character_id'] = characterId;
        obj['role'] = role;
    }

    /**
     * Constructs a <code>PostFleetsFleetIdMembersInvitation</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/PostFleetsFleetIdMembersInvitation} obj Optional instance to populate.
     * @return {module:model/PostFleetsFleetIdMembersInvitation} The populated <code>PostFleetsFleetIdMembersInvitation</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new PostFleetsFleetIdMembersInvitation();

            if (data.hasOwnProperty('character_id')) {
                obj['character_id'] = ApiClient.convertToType(data['character_id'], 'Number');
            }
            if (data.hasOwnProperty('role')) {
                obj['role'] = ApiClient.convertToType(data['role'], 'String');
            }
            if (data.hasOwnProperty('squad_id')) {
                obj['squad_id'] = ApiClient.convertToType(data['squad_id'], 'Number');
            }
            if (data.hasOwnProperty('wing_id')) {
                obj['wing_id'] = ApiClient.convertToType(data['wing_id'], 'Number');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>PostFleetsFleetIdMembersInvitation</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>PostFleetsFleetIdMembersInvitation</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of PostFleetsFleetIdMembersInvitation.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // ensure the json data is a string
        if (data['role'] && !(typeof data['role'] === 'string' || data['role'] instanceof String)) {
            throw new Error("Expected the field `role` to be a primitive type in the JSON string but got " + data['role']);
        }

        return true;
    }


}

PostFleetsFleetIdMembersInvitation.RequiredProperties = ["character_id", "role"];

/**
 * The character you want to invite
 * @member {Number} character_id
 */
PostFleetsFleetIdMembersInvitation.prototype['character_id'] = undefined;

/**
 * If a character is invited with the `fleet_commander` role, neither `wing_id` or `squad_id` should be specified. If a character is invited with the `wing_commander` role, only `wing_id` should be specified. If a character is invited with the `squad_commander` role, both `wing_id` and `squad_id` should be specified. If a character is invited with the `squad_member` role, `wing_id` and `squad_id` should either both be specified or not specified at all. If they aren’t specified, the invited character will join any squad with available positions.
 * @member {module:model/PostFleetsFleetIdMembersInvitation.RoleEnum} role
 */
PostFleetsFleetIdMembersInvitation.prototype['role'] = undefined;

/**
 * squad_id integer
 * @member {Number} squad_id
 */
PostFleetsFleetIdMembersInvitation.prototype['squad_id'] = undefined;

/**
 * wing_id integer
 * @member {Number} wing_id
 */
PostFleetsFleetIdMembersInvitation.prototype['wing_id'] = undefined;





/**
 * Allowed values for the <code>role</code> property.
 * @enum {String}
 * @readonly
 */
PostFleetsFleetIdMembersInvitation['RoleEnum'] = {

    /**
     * value: "fleet_commander"
     * @const
     */
    "fleet_commander": "fleet_commander",

    /**
     * value: "wing_commander"
     * @const
     */
    "wing_commander": "wing_commander",

    /**
     * value: "squad_commander"
     * @const
     */
    "squad_commander": "squad_commander",

    /**
     * value: "squad_member"
     * @const
     */
    "squad_member": "squad_member"
};



export default PostFleetsFleetIdMembersInvitation;

