/**
 * EVE Swagger Interface
 * An OpenAPI for EVE Online
 *
 * The version of the OpenAPI document: 0.8.6
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The GetCorporationsCorporationIdContracts200Ok model module.
 * @module model/GetCorporationsCorporationIdContracts200Ok
 * @version 0.8.6
 */
class GetCorporationsCorporationIdContracts200Ok {
    /**
     * Constructs a new <code>GetCorporationsCorporationIdContracts200Ok</code>.
     * 200 ok object
     * @alias module:model/GetCorporationsCorporationIdContracts200Ok
     * @param acceptorId {Number} Who will accept the contract
     * @param assigneeId {Number} ID to whom the contract is assigned, can be corporation or character ID
     * @param availability {module:model/GetCorporationsCorporationIdContracts200Ok.AvailabilityEnum} To whom the contract is available
     * @param contractId {Number} contract_id integer
     * @param dateExpired {Date} Expiration date of the contract
     * @param dateIssued {Date} Ð¡reation date of the contract
     * @param forCorporation {Boolean} true if the contract was issued on behalf of the issuer's corporation
     * @param issuerCorporationId {Number} Character's corporation ID for the issuer
     * @param issuerId {Number} Character ID for the issuer
     * @param status {module:model/GetCorporationsCorporationIdContracts200Ok.StatusEnum} Status of the the contract
     * @param type {module:model/GetCorporationsCorporationIdContracts200Ok.TypeEnum} Type of the contract
     */
    constructor(acceptorId, assigneeId, availability, contractId, dateExpired, dateIssued, forCorporation, issuerCorporationId, issuerId, status, type) { 
        
        GetCorporationsCorporationIdContracts200Ok.initialize(this, acceptorId, assigneeId, availability, contractId, dateExpired, dateIssued, forCorporation, issuerCorporationId, issuerId, status, type);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, acceptorId, assigneeId, availability, contractId, dateExpired, dateIssued, forCorporation, issuerCorporationId, issuerId, status, type) { 
        obj['acceptor_id'] = acceptorId;
        obj['assignee_id'] = assigneeId;
        obj['availability'] = availability;
        obj['contract_id'] = contractId;
        obj['date_expired'] = dateExpired;
        obj['date_issued'] = dateIssued;
        obj['for_corporation'] = forCorporation;
        obj['issuer_corporation_id'] = issuerCorporationId;
        obj['issuer_id'] = issuerId;
        obj['status'] = status;
        obj['type'] = type;
    }

    /**
     * Constructs a <code>GetCorporationsCorporationIdContracts200Ok</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/GetCorporationsCorporationIdContracts200Ok} obj Optional instance to populate.
     * @return {module:model/GetCorporationsCorporationIdContracts200Ok} The populated <code>GetCorporationsCorporationIdContracts200Ok</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new GetCorporationsCorporationIdContracts200Ok();

            if (data.hasOwnProperty('acceptor_id')) {
                obj['acceptor_id'] = ApiClient.convertToType(data['acceptor_id'], 'Number');
            }
            if (data.hasOwnProperty('assignee_id')) {
                obj['assignee_id'] = ApiClient.convertToType(data['assignee_id'], 'Number');
            }
            if (data.hasOwnProperty('availability')) {
                obj['availability'] = ApiClient.convertToType(data['availability'], 'String');
            }
            if (data.hasOwnProperty('buyout')) {
                obj['buyout'] = ApiClient.convertToType(data['buyout'], 'Number');
            }
            if (data.hasOwnProperty('collateral')) {
                obj['collateral'] = ApiClient.convertToType(data['collateral'], 'Number');
            }
            if (data.hasOwnProperty('contract_id')) {
                obj['contract_id'] = ApiClient.convertToType(data['contract_id'], 'Number');
            }
            if (data.hasOwnProperty('date_accepted')) {
                obj['date_accepted'] = ApiClient.convertToType(data['date_accepted'], 'Date');
            }
            if (data.hasOwnProperty('date_completed')) {
                obj['date_completed'] = ApiClient.convertToType(data['date_completed'], 'Date');
            }
            if (data.hasOwnProperty('date_expired')) {
                obj['date_expired'] = ApiClient.convertToType(data['date_expired'], 'Date');
            }
            if (data.hasOwnProperty('date_issued')) {
                obj['date_issued'] = ApiClient.convertToType(data['date_issued'], 'Date');
            }
            if (data.hasOwnProperty('days_to_complete')) {
                obj['days_to_complete'] = ApiClient.convertToType(data['days_to_complete'], 'Number');
            }
            if (data.hasOwnProperty('end_location_id')) {
                obj['end_location_id'] = ApiClient.convertToType(data['end_location_id'], 'Number');
            }
            if (data.hasOwnProperty('for_corporation')) {
                obj['for_corporation'] = ApiClient.convertToType(data['for_corporation'], 'Boolean');
            }
            if (data.hasOwnProperty('issuer_corporation_id')) {
                obj['issuer_corporation_id'] = ApiClient.convertToType(data['issuer_corporation_id'], 'Number');
            }
            if (data.hasOwnProperty('issuer_id')) {
                obj['issuer_id'] = ApiClient.convertToType(data['issuer_id'], 'Number');
            }
            if (data.hasOwnProperty('price')) {
                obj['price'] = ApiClient.convertToType(data['price'], 'Number');
            }
            if (data.hasOwnProperty('reward')) {
                obj['reward'] = ApiClient.convertToType(data['reward'], 'Number');
            }
            if (data.hasOwnProperty('start_location_id')) {
                obj['start_location_id'] = ApiClient.convertToType(data['start_location_id'], 'Number');
            }
            if (data.hasOwnProperty('status')) {
                obj['status'] = ApiClient.convertToType(data['status'], 'String');
            }
            if (data.hasOwnProperty('title')) {
                obj['title'] = ApiClient.convertToType(data['title'], 'String');
            }
            if (data.hasOwnProperty('type')) {
                obj['type'] = ApiClient.convertToType(data['type'], 'String');
            }
            if (data.hasOwnProperty('volume')) {
                obj['volume'] = ApiClient.convertToType(data['volume'], 'Number');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>GetCorporationsCorporationIdContracts200Ok</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>GetCorporationsCorporationIdContracts200Ok</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of GetCorporationsCorporationIdContracts200Ok.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // ensure the json data is a string
        if (data['availability'] && !(typeof data['availability'] === 'string' || data['availability'] instanceof String)) {
            throw new Error("Expected the field `availability` to be a primitive type in the JSON string but got " + data['availability']);
        }
        // ensure the json data is a string
        if (data['status'] && !(typeof data['status'] === 'string' || data['status'] instanceof String)) {
            throw new Error("Expected the field `status` to be a primitive type in the JSON string but got " + data['status']);
        }
        // ensure the json data is a string
        if (data['title'] && !(typeof data['title'] === 'string' || data['title'] instanceof String)) {
            throw new Error("Expected the field `title` to be a primitive type in the JSON string but got " + data['title']);
        }
        // ensure the json data is a string
        if (data['type'] && !(typeof data['type'] === 'string' || data['type'] instanceof String)) {
            throw new Error("Expected the field `type` to be a primitive type in the JSON string but got " + data['type']);
        }

        return true;
    }


}

GetCorporationsCorporationIdContracts200Ok.RequiredProperties = ["acceptor_id", "assignee_id", "availability", "contract_id", "date_expired", "date_issued", "for_corporation", "issuer_corporation_id", "issuer_id", "status", "type"];

/**
 * Who will accept the contract
 * @member {Number} acceptor_id
 */
GetCorporationsCorporationIdContracts200Ok.prototype['acceptor_id'] = undefined;

/**
 * ID to whom the contract is assigned, can be corporation or character ID
 * @member {Number} assignee_id
 */
GetCorporationsCorporationIdContracts200Ok.prototype['assignee_id'] = undefined;

/**
 * To whom the contract is available
 * @member {module:model/GetCorporationsCorporationIdContracts200Ok.AvailabilityEnum} availability
 */
GetCorporationsCorporationIdContracts200Ok.prototype['availability'] = undefined;

/**
 * Buyout price (for Auctions only)
 * @member {Number} buyout
 */
GetCorporationsCorporationIdContracts200Ok.prototype['buyout'] = undefined;

/**
 * Collateral price (for Couriers only)
 * @member {Number} collateral
 */
GetCorporationsCorporationIdContracts200Ok.prototype['collateral'] = undefined;

/**
 * contract_id integer
 * @member {Number} contract_id
 */
GetCorporationsCorporationIdContracts200Ok.prototype['contract_id'] = undefined;

/**
 * Date of confirmation of contract
 * @member {Date} date_accepted
 */
GetCorporationsCorporationIdContracts200Ok.prototype['date_accepted'] = undefined;

/**
 * Date of completed of contract
 * @member {Date} date_completed
 */
GetCorporationsCorporationIdContracts200Ok.prototype['date_completed'] = undefined;

/**
 * Expiration date of the contract
 * @member {Date} date_expired
 */
GetCorporationsCorporationIdContracts200Ok.prototype['date_expired'] = undefined;

/**
 * Ð¡reation date of the contract
 * @member {Date} date_issued
 */
GetCorporationsCorporationIdContracts200Ok.prototype['date_issued'] = undefined;

/**
 * Number of days to perform the contract
 * @member {Number} days_to_complete
 */
GetCorporationsCorporationIdContracts200Ok.prototype['days_to_complete'] = undefined;

/**
 * End location ID (for Couriers contract)
 * @member {Number} end_location_id
 */
GetCorporationsCorporationIdContracts200Ok.prototype['end_location_id'] = undefined;

/**
 * true if the contract was issued on behalf of the issuer's corporation
 * @member {Boolean} for_corporation
 */
GetCorporationsCorporationIdContracts200Ok.prototype['for_corporation'] = undefined;

/**
 * Character's corporation ID for the issuer
 * @member {Number} issuer_corporation_id
 */
GetCorporationsCorporationIdContracts200Ok.prototype['issuer_corporation_id'] = undefined;

/**
 * Character ID for the issuer
 * @member {Number} issuer_id
 */
GetCorporationsCorporationIdContracts200Ok.prototype['issuer_id'] = undefined;

/**
 * Price of contract (for ItemsExchange and Auctions)
 * @member {Number} price
 */
GetCorporationsCorporationIdContracts200Ok.prototype['price'] = undefined;

/**
 * Remuneration for contract (for Couriers only)
 * @member {Number} reward
 */
GetCorporationsCorporationIdContracts200Ok.prototype['reward'] = undefined;

/**
 * Start location ID (for Couriers contract)
 * @member {Number} start_location_id
 */
GetCorporationsCorporationIdContracts200Ok.prototype['start_location_id'] = undefined;

/**
 * Status of the the contract
 * @member {module:model/GetCorporationsCorporationIdContracts200Ok.StatusEnum} status
 */
GetCorporationsCorporationIdContracts200Ok.prototype['status'] = undefined;

/**
 * Title of the contract
 * @member {String} title
 */
GetCorporationsCorporationIdContracts200Ok.prototype['title'] = undefined;

/**
 * Type of the contract
 * @member {module:model/GetCorporationsCorporationIdContracts200Ok.TypeEnum} type
 */
GetCorporationsCorporationIdContracts200Ok.prototype['type'] = undefined;

/**
 * Volume of items in the contract
 * @member {Number} volume
 */
GetCorporationsCorporationIdContracts200Ok.prototype['volume'] = undefined;





/**
 * Allowed values for the <code>availability</code> property.
 * @enum {String}
 * @readonly
 */
GetCorporationsCorporationIdContracts200Ok['AvailabilityEnum'] = {

    /**
     * value: "public"
     * @const
     */
    "public": "public",

    /**
     * value: "personal"
     * @const
     */
    "personal": "personal",

    /**
     * value: "corporation"
     * @const
     */
    "corporation": "corporation",

    /**
     * value: "alliance"
     * @const
     */
    "alliance": "alliance"
};


/**
 * Allowed values for the <code>status</code> property.
 * @enum {String}
 * @readonly
 */
GetCorporationsCorporationIdContracts200Ok['StatusEnum'] = {

    /**
     * value: "outstanding"
     * @const
     */
    "outstanding": "outstanding",

    /**
     * value: "in_progress"
     * @const
     */
    "in_progress": "in_progress",

    /**
     * value: "finished_issuer"
     * @const
     */
    "finished_issuer": "finished_issuer",

    /**
     * value: "finished_contractor"
     * @const
     */
    "finished_contractor": "finished_contractor",

    /**
     * value: "finished"
     * @const
     */
    "finished": "finished",

    /**
     * value: "cancelled"
     * @const
     */
    "cancelled": "cancelled",

    /**
     * value: "rejected"
     * @const
     */
    "rejected": "rejected",

    /**
     * value: "failed"
     * @const
     */
    "failed": "failed",

    /**
     * value: "deleted"
     * @const
     */
    "deleted": "deleted",

    /**
     * value: "reversed"
     * @const
     */
    "reversed": "reversed"
};


/**
 * Allowed values for the <code>type</code> property.
 * @enum {String}
 * @readonly
 */
GetCorporationsCorporationIdContracts200Ok['TypeEnum'] = {

    /**
     * value: "unknown"
     * @const
     */
    "unknown": "unknown",

    /**
     * value: "item_exchange"
     * @const
     */
    "item_exchange": "item_exchange",

    /**
     * value: "auction"
     * @const
     */
    "auction": "auction",

    /**
     * value: "courier"
     * @const
     */
    "courier": "courier",

    /**
     * value: "loan"
     * @const
     */
    "loan": "loan"
};



export default GetCorporationsCorporationIdContracts200Ok;

