/**
 * EVE Swagger Interface
 * An OpenAPI for EVE Online
 *
 * The version of the OpenAPI document: 0.8.6
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import GetUniverseTypesTypeIdDogmaAttribute from './GetUniverseTypesTypeIdDogmaAttribute';
import GetUniverseTypesTypeIdDogmaEffect from './GetUniverseTypesTypeIdDogmaEffect';

/**
 * The GetUniverseTypesTypeIdOk model module.
 * @module model/GetUniverseTypesTypeIdOk
 * @version 0.8.6
 */
class GetUniverseTypesTypeIdOk {
    /**
     * Constructs a new <code>GetUniverseTypesTypeIdOk</code>.
     * 200 ok object
     * @alias module:model/GetUniverseTypesTypeIdOk
     * @param description {String} description string
     * @param groupId {Number} group_id integer
     * @param name {String} name string
     * @param published {Boolean} published boolean
     * @param typeId {Number} type_id integer
     */
    constructor(description, groupId, name, published, typeId) { 
        
        GetUniverseTypesTypeIdOk.initialize(this, description, groupId, name, published, typeId);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, description, groupId, name, published, typeId) { 
        obj['description'] = description;
        obj['group_id'] = groupId;
        obj['name'] = name;
        obj['published'] = published;
        obj['type_id'] = typeId;
    }

    /**
     * Constructs a <code>GetUniverseTypesTypeIdOk</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/GetUniverseTypesTypeIdOk} obj Optional instance to populate.
     * @return {module:model/GetUniverseTypesTypeIdOk} The populated <code>GetUniverseTypesTypeIdOk</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new GetUniverseTypesTypeIdOk();

            if (data.hasOwnProperty('capacity')) {
                obj['capacity'] = ApiClient.convertToType(data['capacity'], 'Number');
            }
            if (data.hasOwnProperty('description')) {
                obj['description'] = ApiClient.convertToType(data['description'], 'String');
            }
            if (data.hasOwnProperty('dogma_attributes')) {
                obj['dogma_attributes'] = ApiClient.convertToType(data['dogma_attributes'], [GetUniverseTypesTypeIdDogmaAttribute]);
            }
            if (data.hasOwnProperty('dogma_effects')) {
                obj['dogma_effects'] = ApiClient.convertToType(data['dogma_effects'], [GetUniverseTypesTypeIdDogmaEffect]);
            }
            if (data.hasOwnProperty('graphic_id')) {
                obj['graphic_id'] = ApiClient.convertToType(data['graphic_id'], 'Number');
            }
            if (data.hasOwnProperty('group_id')) {
                obj['group_id'] = ApiClient.convertToType(data['group_id'], 'Number');
            }
            if (data.hasOwnProperty('icon_id')) {
                obj['icon_id'] = ApiClient.convertToType(data['icon_id'], 'Number');
            }
            if (data.hasOwnProperty('market_group_id')) {
                obj['market_group_id'] = ApiClient.convertToType(data['market_group_id'], 'Number');
            }
            if (data.hasOwnProperty('mass')) {
                obj['mass'] = ApiClient.convertToType(data['mass'], 'Number');
            }
            if (data.hasOwnProperty('name')) {
                obj['name'] = ApiClient.convertToType(data['name'], 'String');
            }
            if (data.hasOwnProperty('packaged_volume')) {
                obj['packaged_volume'] = ApiClient.convertToType(data['packaged_volume'], 'Number');
            }
            if (data.hasOwnProperty('portion_size')) {
                obj['portion_size'] = ApiClient.convertToType(data['portion_size'], 'Number');
            }
            if (data.hasOwnProperty('published')) {
                obj['published'] = ApiClient.convertToType(data['published'], 'Boolean');
            }
            if (data.hasOwnProperty('radius')) {
                obj['radius'] = ApiClient.convertToType(data['radius'], 'Number');
            }
            if (data.hasOwnProperty('type_id')) {
                obj['type_id'] = ApiClient.convertToType(data['type_id'], 'Number');
            }
            if (data.hasOwnProperty('volume')) {
                obj['volume'] = ApiClient.convertToType(data['volume'], 'Number');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>GetUniverseTypesTypeIdOk</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>GetUniverseTypesTypeIdOk</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of GetUniverseTypesTypeIdOk.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // ensure the json data is a string
        if (data['description'] && !(typeof data['description'] === 'string' || data['description'] instanceof String)) {
            throw new Error("Expected the field `description` to be a primitive type in the JSON string but got " + data['description']);
        }
        if (data['dogma_attributes']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['dogma_attributes'])) {
                throw new Error("Expected the field `dogma_attributes` to be an array in the JSON data but got " + data['dogma_attributes']);
            }
            // validate the optional field `dogma_attributes` (array)
            for (const item of data['dogma_attributes']) {
                GetUniverseTypesTypeIdDogmaAttribute.validateJSON(item);
            };
        }
        if (data['dogma_effects']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['dogma_effects'])) {
                throw new Error("Expected the field `dogma_effects` to be an array in the JSON data but got " + data['dogma_effects']);
            }
            // validate the optional field `dogma_effects` (array)
            for (const item of data['dogma_effects']) {
                GetUniverseTypesTypeIdDogmaEffect.validateJSON(item);
            };
        }
        // ensure the json data is a string
        if (data['name'] && !(typeof data['name'] === 'string' || data['name'] instanceof String)) {
            throw new Error("Expected the field `name` to be a primitive type in the JSON string but got " + data['name']);
        }

        return true;
    }


}

GetUniverseTypesTypeIdOk.RequiredProperties = ["description", "group_id", "name", "published", "type_id"];

/**
 * capacity number
 * @member {Number} capacity
 */
GetUniverseTypesTypeIdOk.prototype['capacity'] = undefined;

/**
 * description string
 * @member {String} description
 */
GetUniverseTypesTypeIdOk.prototype['description'] = undefined;

/**
 * dogma_attributes array
 * @member {Array.<module:model/GetUniverseTypesTypeIdDogmaAttribute>} dogma_attributes
 */
GetUniverseTypesTypeIdOk.prototype['dogma_attributes'] = undefined;

/**
 * dogma_effects array
 * @member {Array.<module:model/GetUniverseTypesTypeIdDogmaEffect>} dogma_effects
 */
GetUniverseTypesTypeIdOk.prototype['dogma_effects'] = undefined;

/**
 * graphic_id integer
 * @member {Number} graphic_id
 */
GetUniverseTypesTypeIdOk.prototype['graphic_id'] = undefined;

/**
 * group_id integer
 * @member {Number} group_id
 */
GetUniverseTypesTypeIdOk.prototype['group_id'] = undefined;

/**
 * icon_id integer
 * @member {Number} icon_id
 */
GetUniverseTypesTypeIdOk.prototype['icon_id'] = undefined;

/**
 * This only exists for types that can be put on the market
 * @member {Number} market_group_id
 */
GetUniverseTypesTypeIdOk.prototype['market_group_id'] = undefined;

/**
 * mass number
 * @member {Number} mass
 */
GetUniverseTypesTypeIdOk.prototype['mass'] = undefined;

/**
 * name string
 * @member {String} name
 */
GetUniverseTypesTypeIdOk.prototype['name'] = undefined;

/**
 * packaged_volume number
 * @member {Number} packaged_volume
 */
GetUniverseTypesTypeIdOk.prototype['packaged_volume'] = undefined;

/**
 * portion_size integer
 * @member {Number} portion_size
 */
GetUniverseTypesTypeIdOk.prototype['portion_size'] = undefined;

/**
 * published boolean
 * @member {Boolean} published
 */
GetUniverseTypesTypeIdOk.prototype['published'] = undefined;

/**
 * radius number
 * @member {Number} radius
 */
GetUniverseTypesTypeIdOk.prototype['radius'] = undefined;

/**
 * type_id integer
 * @member {Number} type_id
 */
GetUniverseTypesTypeIdOk.prototype['type_id'] = undefined;

/**
 * volume number
 * @member {Number} volume
 */
GetUniverseTypesTypeIdOk.prototype['volume'] = undefined;






export default GetUniverseTypesTypeIdOk;

