/**
 * EVE Swagger Interface
 * An OpenAPI for EVE Online
 *
 * The version of the OpenAPI document: 0.8.6
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import PostUniverseIdsAgent from './PostUniverseIdsAgent';
import PostUniverseIdsAlliance from './PostUniverseIdsAlliance';
import PostUniverseIdsCharacter from './PostUniverseIdsCharacter';
import PostUniverseIdsConstellation from './PostUniverseIdsConstellation';
import PostUniverseIdsCorporation from './PostUniverseIdsCorporation';
import PostUniverseIdsFaction from './PostUniverseIdsFaction';
import PostUniverseIdsInventoryType from './PostUniverseIdsInventoryType';
import PostUniverseIdsRegion from './PostUniverseIdsRegion';
import PostUniverseIdsStation from './PostUniverseIdsStation';
import PostUniverseIdsSystem from './PostUniverseIdsSystem';

/**
 * The PostUniverseIdsOk model module.
 * @module model/PostUniverseIdsOk
 * @version 0.8.6
 */
class PostUniverseIdsOk {
    /**
     * Constructs a new <code>PostUniverseIdsOk</code>.
     * 200 ok object
     * @alias module:model/PostUniverseIdsOk
     */
    constructor() { 
        
        PostUniverseIdsOk.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>PostUniverseIdsOk</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/PostUniverseIdsOk} obj Optional instance to populate.
     * @return {module:model/PostUniverseIdsOk} The populated <code>PostUniverseIdsOk</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new PostUniverseIdsOk();

            if (data.hasOwnProperty('agents')) {
                obj['agents'] = ApiClient.convertToType(data['agents'], [PostUniverseIdsAgent]);
            }
            if (data.hasOwnProperty('alliances')) {
                obj['alliances'] = ApiClient.convertToType(data['alliances'], [PostUniverseIdsAlliance]);
            }
            if (data.hasOwnProperty('characters')) {
                obj['characters'] = ApiClient.convertToType(data['characters'], [PostUniverseIdsCharacter]);
            }
            if (data.hasOwnProperty('constellations')) {
                obj['constellations'] = ApiClient.convertToType(data['constellations'], [PostUniverseIdsConstellation]);
            }
            if (data.hasOwnProperty('corporations')) {
                obj['corporations'] = ApiClient.convertToType(data['corporations'], [PostUniverseIdsCorporation]);
            }
            if (data.hasOwnProperty('factions')) {
                obj['factions'] = ApiClient.convertToType(data['factions'], [PostUniverseIdsFaction]);
            }
            if (data.hasOwnProperty('inventory_types')) {
                obj['inventory_types'] = ApiClient.convertToType(data['inventory_types'], [PostUniverseIdsInventoryType]);
            }
            if (data.hasOwnProperty('regions')) {
                obj['regions'] = ApiClient.convertToType(data['regions'], [PostUniverseIdsRegion]);
            }
            if (data.hasOwnProperty('stations')) {
                obj['stations'] = ApiClient.convertToType(data['stations'], [PostUniverseIdsStation]);
            }
            if (data.hasOwnProperty('systems')) {
                obj['systems'] = ApiClient.convertToType(data['systems'], [PostUniverseIdsSystem]);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>PostUniverseIdsOk</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>PostUniverseIdsOk</code>.
     */
    static validateJSON(data) {
        if (data['agents']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['agents'])) {
                throw new Error("Expected the field `agents` to be an array in the JSON data but got " + data['agents']);
            }
            // validate the optional field `agents` (array)
            for (const item of data['agents']) {
                PostUniverseIdsAgent.validateJSON(item);
            };
        }
        if (data['alliances']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['alliances'])) {
                throw new Error("Expected the field `alliances` to be an array in the JSON data but got " + data['alliances']);
            }
            // validate the optional field `alliances` (array)
            for (const item of data['alliances']) {
                PostUniverseIdsAlliance.validateJSON(item);
            };
        }
        if (data['characters']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['characters'])) {
                throw new Error("Expected the field `characters` to be an array in the JSON data but got " + data['characters']);
            }
            // validate the optional field `characters` (array)
            for (const item of data['characters']) {
                PostUniverseIdsCharacter.validateJSON(item);
            };
        }
        if (data['constellations']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['constellations'])) {
                throw new Error("Expected the field `constellations` to be an array in the JSON data but got " + data['constellations']);
            }
            // validate the optional field `constellations` (array)
            for (const item of data['constellations']) {
                PostUniverseIdsConstellation.validateJSON(item);
            };
        }
        if (data['corporations']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['corporations'])) {
                throw new Error("Expected the field `corporations` to be an array in the JSON data but got " + data['corporations']);
            }
            // validate the optional field `corporations` (array)
            for (const item of data['corporations']) {
                PostUniverseIdsCorporation.validateJSON(item);
            };
        }
        if (data['factions']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['factions'])) {
                throw new Error("Expected the field `factions` to be an array in the JSON data but got " + data['factions']);
            }
            // validate the optional field `factions` (array)
            for (const item of data['factions']) {
                PostUniverseIdsFaction.validateJSON(item);
            };
        }
        if (data['inventory_types']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['inventory_types'])) {
                throw new Error("Expected the field `inventory_types` to be an array in the JSON data but got " + data['inventory_types']);
            }
            // validate the optional field `inventory_types` (array)
            for (const item of data['inventory_types']) {
                PostUniverseIdsInventoryType.validateJSON(item);
            };
        }
        if (data['regions']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['regions'])) {
                throw new Error("Expected the field `regions` to be an array in the JSON data but got " + data['regions']);
            }
            // validate the optional field `regions` (array)
            for (const item of data['regions']) {
                PostUniverseIdsRegion.validateJSON(item);
            };
        }
        if (data['stations']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['stations'])) {
                throw new Error("Expected the field `stations` to be an array in the JSON data but got " + data['stations']);
            }
            // validate the optional field `stations` (array)
            for (const item of data['stations']) {
                PostUniverseIdsStation.validateJSON(item);
            };
        }
        if (data['systems']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['systems'])) {
                throw new Error("Expected the field `systems` to be an array in the JSON data but got " + data['systems']);
            }
            // validate the optional field `systems` (array)
            for (const item of data['systems']) {
                PostUniverseIdsSystem.validateJSON(item);
            };
        }

        return true;
    }


}



/**
 * agents array
 * @member {Array.<module:model/PostUniverseIdsAgent>} agents
 */
PostUniverseIdsOk.prototype['agents'] = undefined;

/**
 * alliances array
 * @member {Array.<module:model/PostUniverseIdsAlliance>} alliances
 */
PostUniverseIdsOk.prototype['alliances'] = undefined;

/**
 * characters array
 * @member {Array.<module:model/PostUniverseIdsCharacter>} characters
 */
PostUniverseIdsOk.prototype['characters'] = undefined;

/**
 * constellations array
 * @member {Array.<module:model/PostUniverseIdsConstellation>} constellations
 */
PostUniverseIdsOk.prototype['constellations'] = undefined;

/**
 * corporations array
 * @member {Array.<module:model/PostUniverseIdsCorporation>} corporations
 */
PostUniverseIdsOk.prototype['corporations'] = undefined;

/**
 * factions array
 * @member {Array.<module:model/PostUniverseIdsFaction>} factions
 */
PostUniverseIdsOk.prototype['factions'] = undefined;

/**
 * inventory_types array
 * @member {Array.<module:model/PostUniverseIdsInventoryType>} inventory_types
 */
PostUniverseIdsOk.prototype['inventory_types'] = undefined;

/**
 * regions array
 * @member {Array.<module:model/PostUniverseIdsRegion>} regions
 */
PostUniverseIdsOk.prototype['regions'] = undefined;

/**
 * stations array
 * @member {Array.<module:model/PostUniverseIdsStation>} stations
 */
PostUniverseIdsOk.prototype['stations'] = undefined;

/**
 * systems array
 * @member {Array.<module:model/PostUniverseIdsSystem>} systems
 */
PostUniverseIdsOk.prototype['systems'] = undefined;






export default PostUniverseIdsOk;

