/**
 * EVE Swagger Interface
 * An OpenAPI for EVE Online
 *
 * The version of the OpenAPI document: 0.8.6
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import BadRequest from '../model/BadRequest';
import DeleteCharactersCharacterIdMailLabelsLabelIdUnprocessableEntity from '../model/DeleteCharactersCharacterIdMailLabelsLabelIdUnprocessableEntity';
import ErrorLimited from '../model/ErrorLimited';
import Forbidden from '../model/Forbidden';
import GatewayTimeout from '../model/GatewayTimeout';
import GetCharactersCharacterIdMail200Ok from '../model/GetCharactersCharacterIdMail200Ok';
import GetCharactersCharacterIdMailLabelsOk from '../model/GetCharactersCharacterIdMailLabelsOk';
import GetCharactersCharacterIdMailLists200Ok from '../model/GetCharactersCharacterIdMailLists200Ok';
import GetCharactersCharacterIdMailMailIdNotFound from '../model/GetCharactersCharacterIdMailMailIdNotFound';
import GetCharactersCharacterIdMailMailIdOk from '../model/GetCharactersCharacterIdMailMailIdOk';
import InternalServerError from '../model/InternalServerError';
import PostCharactersCharacterIdMailError520 from '../model/PostCharactersCharacterIdMailError520';
import PostCharactersCharacterIdMailLabelsLabel from '../model/PostCharactersCharacterIdMailLabelsLabel';
import PostCharactersCharacterIdMailMail from '../model/PostCharactersCharacterIdMailMail';
import PutCharactersCharacterIdMailMailIdContents from '../model/PutCharactersCharacterIdMailMailIdContents';
import ServiceUnavailable from '../model/ServiceUnavailable';
import Unauthorized from '../model/Unauthorized';

/**
* Mail service.
* @module api/MailApi
* @version 0.8.6
*/
export default class MailApi {

    /**
    * Constructs a new MailApi. 
    * @alias module:api/MailApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the deleteCharactersCharacterIdMailLabelsLabelId operation.
     * @callback module:api/MailApi~deleteCharactersCharacterIdMailLabelsLabelIdCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete a mail label
     * Delete a mail label  --- Alternate route: `/dev/characters/{character_id}/mail/labels/{label_id}/`  Alternate route: `/legacy/characters/{character_id}/mail/labels/{label_id}/`  Alternate route: `/v1/characters/{character_id}/mail/labels/{label_id}/` 
     * @param {Number} characterId An EVE character ID
     * @param {Number} labelId An EVE label id
     * @param {Object} opts Optional parameters
     * @param {module:model/String} [datasource = 'tranquility')] The server name you would like data from
     * @param {String} [token] Access token to use if unable to set a header
     * @param {module:api/MailApi~deleteCharactersCharacterIdMailLabelsLabelIdCallback} callback The callback function, accepting three arguments: error, data, response
     */
    deleteCharactersCharacterIdMailLabelsLabelId(characterId, labelId, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'characterId' is set
      if (characterId === undefined || characterId === null) {
        throw new Error("Missing the required parameter 'characterId' when calling deleteCharactersCharacterIdMailLabelsLabelId");
      }
      // verify the required parameter 'labelId' is set
      if (labelId === undefined || labelId === null) {
        throw new Error("Missing the required parameter 'labelId' when calling deleteCharactersCharacterIdMailLabelsLabelId");
      }

      let pathParams = {
        'character_id': characterId,
        'label_id': labelId
      };
      let queryParams = {
        'datasource': opts['datasource'],
        'token': opts['token']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['evesso'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/characters/{character_id}/mail/labels/{label_id}/', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteCharactersCharacterIdMailMailId operation.
     * @callback module:api/MailApi~deleteCharactersCharacterIdMailMailIdCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete a mail
     * Delete a mail  --- Alternate route: `/dev/characters/{character_id}/mail/{mail_id}/`  Alternate route: `/legacy/characters/{character_id}/mail/{mail_id}/`  Alternate route: `/v1/characters/{character_id}/mail/{mail_id}/` 
     * @param {Number} characterId An EVE character ID
     * @param {Number} mailId An EVE mail ID
     * @param {Object} opts Optional parameters
     * @param {module:model/String} [datasource = 'tranquility')] The server name you would like data from
     * @param {String} [token] Access token to use if unable to set a header
     * @param {module:api/MailApi~deleteCharactersCharacterIdMailMailIdCallback} callback The callback function, accepting three arguments: error, data, response
     */
    deleteCharactersCharacterIdMailMailId(characterId, mailId, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'characterId' is set
      if (characterId === undefined || characterId === null) {
        throw new Error("Missing the required parameter 'characterId' when calling deleteCharactersCharacterIdMailMailId");
      }
      // verify the required parameter 'mailId' is set
      if (mailId === undefined || mailId === null) {
        throw new Error("Missing the required parameter 'mailId' when calling deleteCharactersCharacterIdMailMailId");
      }

      let pathParams = {
        'character_id': characterId,
        'mail_id': mailId
      };
      let queryParams = {
        'datasource': opts['datasource'],
        'token': opts['token']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['evesso'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/characters/{character_id}/mail/{mail_id}/', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getCharactersCharacterIdMail operation.
     * @callback module:api/MailApi~getCharactersCharacterIdMailCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/GetCharactersCharacterIdMail200Ok>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Return mail headers
     * Return the 50 most recent mail headers belonging to the character that match the query criteria. Queries can be filtered by label, and last_mail_id can be used to paginate backwards  --- Alternate route: `/dev/characters/{character_id}/mail/`  Alternate route: `/legacy/characters/{character_id}/mail/`  Alternate route: `/v1/characters/{character_id}/mail/`  --- This route is cached for up to 30 seconds
     * @param {Number} characterId An EVE character ID
     * @param {Object} opts Optional parameters
     * @param {module:model/String} [datasource = 'tranquility')] The server name you would like data from
     * @param {String} [ifNoneMatch] ETag from a previous request. A 304 will be returned if this matches the current ETag
     * @param {Array.<Number>} [labels] Fetch only mails that match one or more of the given labels
     * @param {Number} [lastMailId] List only mail with an ID lower than the given ID, if present
     * @param {String} [token] Access token to use if unable to set a header
     * @param {module:api/MailApi~getCharactersCharacterIdMailCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/GetCharactersCharacterIdMail200Ok>}
     */
    getCharactersCharacterIdMail(characterId, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'characterId' is set
      if (characterId === undefined || characterId === null) {
        throw new Error("Missing the required parameter 'characterId' when calling getCharactersCharacterIdMail");
      }

      let pathParams = {
        'character_id': characterId
      };
      let queryParams = {
        'datasource': opts['datasource'],
        'labels': this.apiClient.buildCollectionParam(opts['labels'], 'csv'),
        'last_mail_id': opts['lastMailId'],
        'token': opts['token']
      };
      let headerParams = {
        'If-None-Match': opts['ifNoneMatch']
      };
      let formParams = {
      };

      let authNames = ['evesso'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [GetCharactersCharacterIdMail200Ok];
      return this.apiClient.callApi(
        '/characters/{character_id}/mail/', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getCharactersCharacterIdMailLabels operation.
     * @callback module:api/MailApi~getCharactersCharacterIdMailLabelsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/GetCharactersCharacterIdMailLabelsOk} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get mail labels and unread counts
     * Return a list of the users mail labels, unread counts for each label and a total unread count.  --- Alternate route: `/dev/characters/{character_id}/mail/labels/`  Alternate route: `/v3/characters/{character_id}/mail/labels/`  --- This route is cached for up to 30 seconds
     * @param {Number} characterId An EVE character ID
     * @param {Object} opts Optional parameters
     * @param {module:model/String} [datasource = 'tranquility')] The server name you would like data from
     * @param {String} [ifNoneMatch] ETag from a previous request. A 304 will be returned if this matches the current ETag
     * @param {String} [token] Access token to use if unable to set a header
     * @param {module:api/MailApi~getCharactersCharacterIdMailLabelsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/GetCharactersCharacterIdMailLabelsOk}
     */
    getCharactersCharacterIdMailLabels(characterId, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'characterId' is set
      if (characterId === undefined || characterId === null) {
        throw new Error("Missing the required parameter 'characterId' when calling getCharactersCharacterIdMailLabels");
      }

      let pathParams = {
        'character_id': characterId
      };
      let queryParams = {
        'datasource': opts['datasource'],
        'token': opts['token']
      };
      let headerParams = {
        'If-None-Match': opts['ifNoneMatch']
      };
      let formParams = {
      };

      let authNames = ['evesso'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = GetCharactersCharacterIdMailLabelsOk;
      return this.apiClient.callApi(
        '/characters/{character_id}/mail/labels/', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getCharactersCharacterIdMailLists operation.
     * @callback module:api/MailApi~getCharactersCharacterIdMailListsCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/GetCharactersCharacterIdMailLists200Ok>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Return mailing list subscriptions
     * Return all mailing lists that the character is subscribed to  --- Alternate route: `/dev/characters/{character_id}/mail/lists/`  Alternate route: `/legacy/characters/{character_id}/mail/lists/`  Alternate route: `/v1/characters/{character_id}/mail/lists/`  --- This route is cached for up to 120 seconds
     * @param {Number} characterId An EVE character ID
     * @param {Object} opts Optional parameters
     * @param {module:model/String} [datasource = 'tranquility')] The server name you would like data from
     * @param {String} [ifNoneMatch] ETag from a previous request. A 304 will be returned if this matches the current ETag
     * @param {String} [token] Access token to use if unable to set a header
     * @param {module:api/MailApi~getCharactersCharacterIdMailListsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/GetCharactersCharacterIdMailLists200Ok>}
     */
    getCharactersCharacterIdMailLists(characterId, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'characterId' is set
      if (characterId === undefined || characterId === null) {
        throw new Error("Missing the required parameter 'characterId' when calling getCharactersCharacterIdMailLists");
      }

      let pathParams = {
        'character_id': characterId
      };
      let queryParams = {
        'datasource': opts['datasource'],
        'token': opts['token']
      };
      let headerParams = {
        'If-None-Match': opts['ifNoneMatch']
      };
      let formParams = {
      };

      let authNames = ['evesso'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [GetCharactersCharacterIdMailLists200Ok];
      return this.apiClient.callApi(
        '/characters/{character_id}/mail/lists/', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getCharactersCharacterIdMailMailId operation.
     * @callback module:api/MailApi~getCharactersCharacterIdMailMailIdCallback
     * @param {String} error Error message, if any.
     * @param {module:model/GetCharactersCharacterIdMailMailIdOk} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Return a mail
     * Return the contents of an EVE mail  --- Alternate route: `/dev/characters/{character_id}/mail/{mail_id}/`  Alternate route: `/legacy/characters/{character_id}/mail/{mail_id}/`  Alternate route: `/v1/characters/{character_id}/mail/{mail_id}/`  --- This route is cached for up to 30 seconds
     * @param {Number} characterId An EVE character ID
     * @param {Number} mailId An EVE mail ID
     * @param {Object} opts Optional parameters
     * @param {module:model/String} [datasource = 'tranquility')] The server name you would like data from
     * @param {String} [ifNoneMatch] ETag from a previous request. A 304 will be returned if this matches the current ETag
     * @param {String} [token] Access token to use if unable to set a header
     * @param {module:api/MailApi~getCharactersCharacterIdMailMailIdCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/GetCharactersCharacterIdMailMailIdOk}
     */
    getCharactersCharacterIdMailMailId(characterId, mailId, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'characterId' is set
      if (characterId === undefined || characterId === null) {
        throw new Error("Missing the required parameter 'characterId' when calling getCharactersCharacterIdMailMailId");
      }
      // verify the required parameter 'mailId' is set
      if (mailId === undefined || mailId === null) {
        throw new Error("Missing the required parameter 'mailId' when calling getCharactersCharacterIdMailMailId");
      }

      let pathParams = {
        'character_id': characterId,
        'mail_id': mailId
      };
      let queryParams = {
        'datasource': opts['datasource'],
        'token': opts['token']
      };
      let headerParams = {
        'If-None-Match': opts['ifNoneMatch']
      };
      let formParams = {
      };

      let authNames = ['evesso'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = GetCharactersCharacterIdMailMailIdOk;
      return this.apiClient.callApi(
        '/characters/{character_id}/mail/{mail_id}/', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the postCharactersCharacterIdMail operation.
     * @callback module:api/MailApi~postCharactersCharacterIdMailCallback
     * @param {String} error Error message, if any.
     * @param {Number} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Send a new mail
     * Create and send a new mail  --- Alternate route: `/dev/characters/{character_id}/mail/`  Alternate route: `/legacy/characters/{character_id}/mail/`  Alternate route: `/v1/characters/{character_id}/mail/` 
     * @param {Number} characterId An EVE character ID
     * @param {module:model/PostCharactersCharacterIdMailMail} mail The mail to send
     * @param {Object} opts Optional parameters
     * @param {module:model/String} [datasource = 'tranquility')] The server name you would like data from
     * @param {String} [token] Access token to use if unable to set a header
     * @param {module:api/MailApi~postCharactersCharacterIdMailCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Number}
     */
    postCharactersCharacterIdMail(characterId, mail, opts, callback) {
      opts = opts || {};
      let postBody = mail;
      // verify the required parameter 'characterId' is set
      if (characterId === undefined || characterId === null) {
        throw new Error("Missing the required parameter 'characterId' when calling postCharactersCharacterIdMail");
      }
      // verify the required parameter 'mail' is set
      if (mail === undefined || mail === null) {
        throw new Error("Missing the required parameter 'mail' when calling postCharactersCharacterIdMail");
      }

      let pathParams = {
        'character_id': characterId
      };
      let queryParams = {
        'datasource': opts['datasource'],
        'token': opts['token']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['evesso'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = 'Number';
      return this.apiClient.callApi(
        '/characters/{character_id}/mail/', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the postCharactersCharacterIdMailLabels operation.
     * @callback module:api/MailApi~postCharactersCharacterIdMailLabelsCallback
     * @param {String} error Error message, if any.
     * @param {Number} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Create a mail label
     * Create a mail label  --- Alternate route: `/dev/characters/{character_id}/mail/labels/`  Alternate route: `/legacy/characters/{character_id}/mail/labels/`  Alternate route: `/v2/characters/{character_id}/mail/labels/` 
     * @param {Number} characterId An EVE character ID
     * @param {module:model/PostCharactersCharacterIdMailLabelsLabel} label Label to create
     * @param {Object} opts Optional parameters
     * @param {module:model/String} [datasource = 'tranquility')] The server name you would like data from
     * @param {String} [token] Access token to use if unable to set a header
     * @param {module:api/MailApi~postCharactersCharacterIdMailLabelsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Number}
     */
    postCharactersCharacterIdMailLabels(characterId, label, opts, callback) {
      opts = opts || {};
      let postBody = label;
      // verify the required parameter 'characterId' is set
      if (characterId === undefined || characterId === null) {
        throw new Error("Missing the required parameter 'characterId' when calling postCharactersCharacterIdMailLabels");
      }
      // verify the required parameter 'label' is set
      if (label === undefined || label === null) {
        throw new Error("Missing the required parameter 'label' when calling postCharactersCharacterIdMailLabels");
      }

      let pathParams = {
        'character_id': characterId
      };
      let queryParams = {
        'datasource': opts['datasource'],
        'token': opts['token']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['evesso'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = 'Number';
      return this.apiClient.callApi(
        '/characters/{character_id}/mail/labels/', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the putCharactersCharacterIdMailMailId operation.
     * @callback module:api/MailApi~putCharactersCharacterIdMailMailIdCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update metadata about a mail
     * Update metadata about a mail  --- Alternate route: `/dev/characters/{character_id}/mail/{mail_id}/`  Alternate route: `/legacy/characters/{character_id}/mail/{mail_id}/`  Alternate route: `/v1/characters/{character_id}/mail/{mail_id}/` 
     * @param {Number} characterId An EVE character ID
     * @param {Number} mailId An EVE mail ID
     * @param {module:model/PutCharactersCharacterIdMailMailIdContents} contents Data used to update the mail
     * @param {Object} opts Optional parameters
     * @param {module:model/String} [datasource = 'tranquility')] The server name you would like data from
     * @param {String} [token] Access token to use if unable to set a header
     * @param {module:api/MailApi~putCharactersCharacterIdMailMailIdCallback} callback The callback function, accepting three arguments: error, data, response
     */
    putCharactersCharacterIdMailMailId(characterId, mailId, contents, opts, callback) {
      opts = opts || {};
      let postBody = contents;
      // verify the required parameter 'characterId' is set
      if (characterId === undefined || characterId === null) {
        throw new Error("Missing the required parameter 'characterId' when calling putCharactersCharacterIdMailMailId");
      }
      // verify the required parameter 'mailId' is set
      if (mailId === undefined || mailId === null) {
        throw new Error("Missing the required parameter 'mailId' when calling putCharactersCharacterIdMailMailId");
      }
      // verify the required parameter 'contents' is set
      if (contents === undefined || contents === null) {
        throw new Error("Missing the required parameter 'contents' when calling putCharactersCharacterIdMailMailId");
      }

      let pathParams = {
        'character_id': characterId,
        'mail_id': mailId
      };
      let queryParams = {
        'datasource': opts['datasource'],
        'token': opts['token']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['evesso'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/characters/{character_id}/mail/{mail_id}/', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
