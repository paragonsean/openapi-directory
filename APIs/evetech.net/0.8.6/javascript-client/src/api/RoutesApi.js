/**
 * EVE Swagger Interface
 * An OpenAPI for EVE Online
 *
 * The version of the OpenAPI document: 0.8.6
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import BadRequest from '../model/BadRequest';
import ErrorLimited from '../model/ErrorLimited';
import GatewayTimeout from '../model/GatewayTimeout';
import GetRouteOriginDestinationNotFound from '../model/GetRouteOriginDestinationNotFound';
import InternalServerError from '../model/InternalServerError';
import ServiceUnavailable from '../model/ServiceUnavailable';

/**
* Routes service.
* @module api/RoutesApi
* @version 0.8.6
*/
export default class RoutesApi {

    /**
    * Constructs a new RoutesApi. 
    * @alias module:api/RoutesApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the getRouteOriginDestination operation.
     * @callback module:api/RoutesApi~getRouteOriginDestinationCallback
     * @param {String} error Error message, if any.
     * @param {Array.<Number>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get route
     * Get the systems between origin and destination  --- Alternate route: `/dev/route/{origin}/{destination}/`  Alternate route: `/legacy/route/{origin}/{destination}/`  Alternate route: `/v1/route/{origin}/{destination}/`  --- This route is cached for up to 86400 seconds
     * @param {Number} destination destination solar system ID
     * @param {Number} origin origin solar system ID
     * @param {Object} opts Optional parameters
     * @param {Array.<Number>} [avoid] avoid solar system ID(s)
     * @param {Array.<module:model/[Number]>} [connections] connected solar system pairs
     * @param {module:model/String} [datasource = 'tranquility')] The server name you would like data from
     * @param {module:model/String} [flag = 'shortest')] route security preference
     * @param {String} [ifNoneMatch] ETag from a previous request. A 304 will be returned if this matches the current ETag
     * @param {module:api/RoutesApi~getRouteOriginDestinationCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<Number>}
     */
    getRouteOriginDestination(destination, origin, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'destination' is set
      if (destination === undefined || destination === null) {
        throw new Error("Missing the required parameter 'destination' when calling getRouteOriginDestination");
      }
      // verify the required parameter 'origin' is set
      if (origin === undefined || origin === null) {
        throw new Error("Missing the required parameter 'origin' when calling getRouteOriginDestination");
      }

      let pathParams = {
        'destination': destination,
        'origin': origin
      };
      let queryParams = {
        'avoid': this.apiClient.buildCollectionParam(opts['avoid'], 'csv'),
        'connections': this.apiClient.buildCollectionParam(opts['connections'], 'csv'),
        'datasource': opts['datasource'],
        'flag': opts['flag']
      };
      let headerParams = {
        'If-None-Match': opts['ifNoneMatch']
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ['Number'];
      return this.apiClient.callApi(
        '/route/{origin}/{destination}/', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
