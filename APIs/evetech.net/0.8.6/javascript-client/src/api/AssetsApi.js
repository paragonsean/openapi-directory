/**
 * EVE Swagger Interface
 * An OpenAPI for EVE Online
 *
 * The version of the OpenAPI document: 0.8.6
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import BadRequest from '../model/BadRequest';
import ErrorLimited from '../model/ErrorLimited';
import Forbidden from '../model/Forbidden';
import GatewayTimeout from '../model/GatewayTimeout';
import GetCharactersCharacterIdAssets200Ok from '../model/GetCharactersCharacterIdAssets200Ok';
import GetCorporationsCorporationIdAssets200Ok from '../model/GetCorporationsCorporationIdAssets200Ok';
import InternalServerError from '../model/InternalServerError';
import PostCharactersCharacterIdAssetsLocations200Ok from '../model/PostCharactersCharacterIdAssetsLocations200Ok';
import PostCharactersCharacterIdAssetsNames200Ok from '../model/PostCharactersCharacterIdAssetsNames200Ok';
import PostCorporationsCorporationIdAssetsLocations200Ok from '../model/PostCorporationsCorporationIdAssetsLocations200Ok';
import PostCorporationsCorporationIdAssetsLocationsNotFound from '../model/PostCorporationsCorporationIdAssetsLocationsNotFound';
import PostCorporationsCorporationIdAssetsNames200Ok from '../model/PostCorporationsCorporationIdAssetsNames200Ok';
import PostCorporationsCorporationIdAssetsNamesNotFound from '../model/PostCorporationsCorporationIdAssetsNamesNotFound';
import ServiceUnavailable from '../model/ServiceUnavailable';
import Unauthorized from '../model/Unauthorized';

/**
* Assets service.
* @module api/AssetsApi
* @version 0.8.6
*/
export default class AssetsApi {

    /**
    * Constructs a new AssetsApi. 
    * @alias module:api/AssetsApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the getCharactersCharacterIdAssets operation.
     * @callback module:api/AssetsApi~getCharactersCharacterIdAssetsCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/GetCharactersCharacterIdAssets200Ok>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get character assets
     * Return a list of the characters assets  --- Alternate route: `/dev/characters/{character_id}/assets/`  Alternate route: `/v3/characters/{character_id}/assets/`  --- This route is cached for up to 3600 seconds
     * @param {Number} characterId An EVE character ID
     * @param {Object} opts Optional parameters
     * @param {module:model/String} [datasource = 'tranquility')] The server name you would like data from
     * @param {String} [ifNoneMatch] ETag from a previous request. A 304 will be returned if this matches the current ETag
     * @param {Number} [page = 1)] Which page of results to return
     * @param {String} [token] Access token to use if unable to set a header
     * @param {module:api/AssetsApi~getCharactersCharacterIdAssetsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/GetCharactersCharacterIdAssets200Ok>}
     */
    getCharactersCharacterIdAssets(characterId, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'characterId' is set
      if (characterId === undefined || characterId === null) {
        throw new Error("Missing the required parameter 'characterId' when calling getCharactersCharacterIdAssets");
      }

      let pathParams = {
        'character_id': characterId
      };
      let queryParams = {
        'datasource': opts['datasource'],
        'page': opts['page'],
        'token': opts['token']
      };
      let headerParams = {
        'If-None-Match': opts['ifNoneMatch']
      };
      let formParams = {
      };

      let authNames = ['evesso'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [GetCharactersCharacterIdAssets200Ok];
      return this.apiClient.callApi(
        '/characters/{character_id}/assets/', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getCorporationsCorporationIdAssets operation.
     * @callback module:api/AssetsApi~getCorporationsCorporationIdAssetsCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/GetCorporationsCorporationIdAssets200Ok>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get corporation assets
     * Return a list of the corporation assets  --- Alternate route: `/dev/corporations/{corporation_id}/assets/`  Alternate route: `/v3/corporations/{corporation_id}/assets/`  --- This route is cached for up to 3600 seconds  --- Requires one of the following EVE corporation role(s): Director 
     * @param {Number} corporationId An EVE corporation ID
     * @param {Object} opts Optional parameters
     * @param {module:model/String} [datasource = 'tranquility')] The server name you would like data from
     * @param {String} [ifNoneMatch] ETag from a previous request. A 304 will be returned if this matches the current ETag
     * @param {Number} [page = 1)] Which page of results to return
     * @param {String} [token] Access token to use if unable to set a header
     * @param {module:api/AssetsApi~getCorporationsCorporationIdAssetsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/GetCorporationsCorporationIdAssets200Ok>}
     */
    getCorporationsCorporationIdAssets(corporationId, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'corporationId' is set
      if (corporationId === undefined || corporationId === null) {
        throw new Error("Missing the required parameter 'corporationId' when calling getCorporationsCorporationIdAssets");
      }

      let pathParams = {
        'corporation_id': corporationId
      };
      let queryParams = {
        'datasource': opts['datasource'],
        'page': opts['page'],
        'token': opts['token']
      };
      let headerParams = {
        'If-None-Match': opts['ifNoneMatch']
      };
      let formParams = {
      };

      let authNames = ['evesso'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [GetCorporationsCorporationIdAssets200Ok];
      return this.apiClient.callApi(
        '/corporations/{corporation_id}/assets/', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the postCharactersCharacterIdAssetsLocations operation.
     * @callback module:api/AssetsApi~postCharactersCharacterIdAssetsLocationsCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/PostCharactersCharacterIdAssetsLocations200Ok>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get character asset locations
     * Return locations for a set of item ids, which you can get from character assets endpoint. Coordinates for items in hangars or stations are set to (0,0,0)  --- Alternate route: `/dev/characters/{character_id}/assets/locations/`  Alternate route: `/v2/characters/{character_id}/assets/locations/` 
     * @param {Number} characterId An EVE character ID
     * @param {Array.<Number>} itemIds A list of item ids
     * @param {Object} opts Optional parameters
     * @param {module:model/String} [datasource = 'tranquility')] The server name you would like data from
     * @param {String} [token] Access token to use if unable to set a header
     * @param {module:api/AssetsApi~postCharactersCharacterIdAssetsLocationsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/PostCharactersCharacterIdAssetsLocations200Ok>}
     */
    postCharactersCharacterIdAssetsLocations(characterId, itemIds, opts, callback) {
      opts = opts || {};
      let postBody = itemIds;
      // verify the required parameter 'characterId' is set
      if (characterId === undefined || characterId === null) {
        throw new Error("Missing the required parameter 'characterId' when calling postCharactersCharacterIdAssetsLocations");
      }
      // verify the required parameter 'itemIds' is set
      if (itemIds === undefined || itemIds === null) {
        throw new Error("Missing the required parameter 'itemIds' when calling postCharactersCharacterIdAssetsLocations");
      }

      let pathParams = {
        'character_id': characterId
      };
      let queryParams = {
        'datasource': opts['datasource'],
        'token': opts['token']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['evesso'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = [PostCharactersCharacterIdAssetsLocations200Ok];
      return this.apiClient.callApi(
        '/characters/{character_id}/assets/locations/', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the postCharactersCharacterIdAssetsNames operation.
     * @callback module:api/AssetsApi~postCharactersCharacterIdAssetsNamesCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/PostCharactersCharacterIdAssetsNames200Ok>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get character asset names
     * Return names for a set of item ids, which you can get from character assets endpoint. Typically used for items that can customize names, like containers or ships.  --- Alternate route: `/dev/characters/{character_id}/assets/names/`  Alternate route: `/legacy/characters/{character_id}/assets/names/`  Alternate route: `/v1/characters/{character_id}/assets/names/` 
     * @param {Number} characterId An EVE character ID
     * @param {Array.<Number>} itemIds A list of item ids
     * @param {Object} opts Optional parameters
     * @param {module:model/String} [datasource = 'tranquility')] The server name you would like data from
     * @param {String} [token] Access token to use if unable to set a header
     * @param {module:api/AssetsApi~postCharactersCharacterIdAssetsNamesCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/PostCharactersCharacterIdAssetsNames200Ok>}
     */
    postCharactersCharacterIdAssetsNames(characterId, itemIds, opts, callback) {
      opts = opts || {};
      let postBody = itemIds;
      // verify the required parameter 'characterId' is set
      if (characterId === undefined || characterId === null) {
        throw new Error("Missing the required parameter 'characterId' when calling postCharactersCharacterIdAssetsNames");
      }
      // verify the required parameter 'itemIds' is set
      if (itemIds === undefined || itemIds === null) {
        throw new Error("Missing the required parameter 'itemIds' when calling postCharactersCharacterIdAssetsNames");
      }

      let pathParams = {
        'character_id': characterId
      };
      let queryParams = {
        'datasource': opts['datasource'],
        'token': opts['token']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['evesso'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = [PostCharactersCharacterIdAssetsNames200Ok];
      return this.apiClient.callApi(
        '/characters/{character_id}/assets/names/', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the postCorporationsCorporationIdAssetsLocations operation.
     * @callback module:api/AssetsApi~postCorporationsCorporationIdAssetsLocationsCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/PostCorporationsCorporationIdAssetsLocations200Ok>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get corporation asset locations
     * Return locations for a set of item ids, which you can get from corporation assets endpoint. Coordinates for items in hangars or stations are set to (0,0,0)  --- Alternate route: `/dev/corporations/{corporation_id}/assets/locations/`  Alternate route: `/v2/corporations/{corporation_id}/assets/locations/`   --- Requires one of the following EVE corporation role(s): Director 
     * @param {Number} corporationId An EVE corporation ID
     * @param {Array.<Number>} itemIds A list of item ids
     * @param {Object} opts Optional parameters
     * @param {module:model/String} [datasource = 'tranquility')] The server name you would like data from
     * @param {String} [token] Access token to use if unable to set a header
     * @param {module:api/AssetsApi~postCorporationsCorporationIdAssetsLocationsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/PostCorporationsCorporationIdAssetsLocations200Ok>}
     */
    postCorporationsCorporationIdAssetsLocations(corporationId, itemIds, opts, callback) {
      opts = opts || {};
      let postBody = itemIds;
      // verify the required parameter 'corporationId' is set
      if (corporationId === undefined || corporationId === null) {
        throw new Error("Missing the required parameter 'corporationId' when calling postCorporationsCorporationIdAssetsLocations");
      }
      // verify the required parameter 'itemIds' is set
      if (itemIds === undefined || itemIds === null) {
        throw new Error("Missing the required parameter 'itemIds' when calling postCorporationsCorporationIdAssetsLocations");
      }

      let pathParams = {
        'corporation_id': corporationId
      };
      let queryParams = {
        'datasource': opts['datasource'],
        'token': opts['token']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['evesso'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = [PostCorporationsCorporationIdAssetsLocations200Ok];
      return this.apiClient.callApi(
        '/corporations/{corporation_id}/assets/locations/', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the postCorporationsCorporationIdAssetsNames operation.
     * @callback module:api/AssetsApi~postCorporationsCorporationIdAssetsNamesCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/PostCorporationsCorporationIdAssetsNames200Ok>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get corporation asset names
     * Return names for a set of item ids, which you can get from corporation assets endpoint. Only valid for items that can customize names, like containers or ships  --- Alternate route: `/dev/corporations/{corporation_id}/assets/names/`  Alternate route: `/legacy/corporations/{corporation_id}/assets/names/`  Alternate route: `/v1/corporations/{corporation_id}/assets/names/`   --- Requires one of the following EVE corporation role(s): Director 
     * @param {Number} corporationId An EVE corporation ID
     * @param {Array.<Number>} itemIds A list of item ids
     * @param {Object} opts Optional parameters
     * @param {module:model/String} [datasource = 'tranquility')] The server name you would like data from
     * @param {String} [token] Access token to use if unable to set a header
     * @param {module:api/AssetsApi~postCorporationsCorporationIdAssetsNamesCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/PostCorporationsCorporationIdAssetsNames200Ok>}
     */
    postCorporationsCorporationIdAssetsNames(corporationId, itemIds, opts, callback) {
      opts = opts || {};
      let postBody = itemIds;
      // verify the required parameter 'corporationId' is set
      if (corporationId === undefined || corporationId === null) {
        throw new Error("Missing the required parameter 'corporationId' when calling postCorporationsCorporationIdAssetsNames");
      }
      // verify the required parameter 'itemIds' is set
      if (itemIds === undefined || itemIds === null) {
        throw new Error("Missing the required parameter 'itemIds' when calling postCorporationsCorporationIdAssetsNames");
      }

      let pathParams = {
        'corporation_id': corporationId
      };
      let queryParams = {
        'datasource': opts['datasource'],
        'token': opts['token']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['evesso'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = [PostCorporationsCorporationIdAssetsNames200Ok];
      return this.apiClient.callApi(
        '/corporations/{corporation_id}/assets/names/', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
