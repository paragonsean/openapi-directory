/**
 * EVE Swagger Interface
 * An OpenAPI for EVE Online
 *
 * The version of the OpenAPI document: 0.8.6
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import BadRequest from '../model/BadRequest';
import ErrorLimited from '../model/ErrorLimited';
import GatewayTimeout from '../model/GatewayTimeout';
import GetDogmaAttributesAttributeIdNotFound from '../model/GetDogmaAttributesAttributeIdNotFound';
import GetDogmaAttributesAttributeIdOk from '../model/GetDogmaAttributesAttributeIdOk';
import GetDogmaDynamicItemsTypeIdItemIdNotFound from '../model/GetDogmaDynamicItemsTypeIdItemIdNotFound';
import GetDogmaDynamicItemsTypeIdItemIdOk from '../model/GetDogmaDynamicItemsTypeIdItemIdOk';
import GetDogmaEffectsEffectIdNotFound from '../model/GetDogmaEffectsEffectIdNotFound';
import GetDogmaEffectsEffectIdOk from '../model/GetDogmaEffectsEffectIdOk';
import InternalServerError from '../model/InternalServerError';
import ServiceUnavailable from '../model/ServiceUnavailable';

/**
* Dogma service.
* @module api/DogmaApi
* @version 0.8.6
*/
export default class DogmaApi {

    /**
    * Constructs a new DogmaApi. 
    * @alias module:api/DogmaApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the getDogmaAttributes operation.
     * @callback module:api/DogmaApi~getDogmaAttributesCallback
     * @param {String} error Error message, if any.
     * @param {Array.<Number>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get attributes
     * Get a list of dogma attribute ids  --- Alternate route: `/dev/dogma/attributes/`  Alternate route: `/legacy/dogma/attributes/`  Alternate route: `/v1/dogma/attributes/`  --- This route expires daily at 11:05
     * @param {Object} opts Optional parameters
     * @param {module:model/String} [datasource = 'tranquility')] The server name you would like data from
     * @param {String} [ifNoneMatch] ETag from a previous request. A 304 will be returned if this matches the current ETag
     * @param {module:api/DogmaApi~getDogmaAttributesCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<Number>}
     */
    getDogmaAttributes(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'datasource': opts['datasource']
      };
      let headerParams = {
        'If-None-Match': opts['ifNoneMatch']
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ['Number'];
      return this.apiClient.callApi(
        '/dogma/attributes/', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getDogmaAttributesAttributeId operation.
     * @callback module:api/DogmaApi~getDogmaAttributesAttributeIdCallback
     * @param {String} error Error message, if any.
     * @param {module:model/GetDogmaAttributesAttributeIdOk} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get attribute information
     * Get information on a dogma attribute  --- Alternate route: `/dev/dogma/attributes/{attribute_id}/`  Alternate route: `/legacy/dogma/attributes/{attribute_id}/`  Alternate route: `/v1/dogma/attributes/{attribute_id}/`  --- This route expires daily at 11:05
     * @param {Number} attributeId A dogma attribute ID
     * @param {Object} opts Optional parameters
     * @param {module:model/String} [datasource = 'tranquility')] The server name you would like data from
     * @param {String} [ifNoneMatch] ETag from a previous request. A 304 will be returned if this matches the current ETag
     * @param {module:api/DogmaApi~getDogmaAttributesAttributeIdCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/GetDogmaAttributesAttributeIdOk}
     */
    getDogmaAttributesAttributeId(attributeId, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'attributeId' is set
      if (attributeId === undefined || attributeId === null) {
        throw new Error("Missing the required parameter 'attributeId' when calling getDogmaAttributesAttributeId");
      }

      let pathParams = {
        'attribute_id': attributeId
      };
      let queryParams = {
        'datasource': opts['datasource']
      };
      let headerParams = {
        'If-None-Match': opts['ifNoneMatch']
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = GetDogmaAttributesAttributeIdOk;
      return this.apiClient.callApi(
        '/dogma/attributes/{attribute_id}/', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getDogmaDynamicItemsTypeIdItemId operation.
     * @callback module:api/DogmaApi~getDogmaDynamicItemsTypeIdItemIdCallback
     * @param {String} error Error message, if any.
     * @param {module:model/GetDogmaDynamicItemsTypeIdItemIdOk} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get dynamic item information
     * Returns info about a dynamic item resulting from mutation with a mutaplasmid.  --- Alternate route: `/dev/dogma/dynamic/items/{type_id}/{item_id}/`  Alternate route: `/legacy/dogma/dynamic/items/{type_id}/{item_id}/`  Alternate route: `/v1/dogma/dynamic/items/{type_id}/{item_id}/`  --- This route expires daily at 11:05
     * @param {Number} itemId item_id integer
     * @param {Number} typeId type_id integer
     * @param {Object} opts Optional parameters
     * @param {module:model/String} [datasource = 'tranquility')] The server name you would like data from
     * @param {String} [ifNoneMatch] ETag from a previous request. A 304 will be returned if this matches the current ETag
     * @param {module:api/DogmaApi~getDogmaDynamicItemsTypeIdItemIdCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/GetDogmaDynamicItemsTypeIdItemIdOk}
     */
    getDogmaDynamicItemsTypeIdItemId(itemId, typeId, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'itemId' is set
      if (itemId === undefined || itemId === null) {
        throw new Error("Missing the required parameter 'itemId' when calling getDogmaDynamicItemsTypeIdItemId");
      }
      // verify the required parameter 'typeId' is set
      if (typeId === undefined || typeId === null) {
        throw new Error("Missing the required parameter 'typeId' when calling getDogmaDynamicItemsTypeIdItemId");
      }

      let pathParams = {
        'item_id': itemId,
        'type_id': typeId
      };
      let queryParams = {
        'datasource': opts['datasource']
      };
      let headerParams = {
        'If-None-Match': opts['ifNoneMatch']
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = GetDogmaDynamicItemsTypeIdItemIdOk;
      return this.apiClient.callApi(
        '/dogma/dynamic/items/{type_id}/{item_id}/', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getDogmaEffects operation.
     * @callback module:api/DogmaApi~getDogmaEffectsCallback
     * @param {String} error Error message, if any.
     * @param {Array.<Number>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get effects
     * Get a list of dogma effect ids  --- Alternate route: `/dev/dogma/effects/`  Alternate route: `/legacy/dogma/effects/`  Alternate route: `/v1/dogma/effects/`  --- This route expires daily at 11:05
     * @param {Object} opts Optional parameters
     * @param {module:model/String} [datasource = 'tranquility')] The server name you would like data from
     * @param {String} [ifNoneMatch] ETag from a previous request. A 304 will be returned if this matches the current ETag
     * @param {module:api/DogmaApi~getDogmaEffectsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<Number>}
     */
    getDogmaEffects(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'datasource': opts['datasource']
      };
      let headerParams = {
        'If-None-Match': opts['ifNoneMatch']
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ['Number'];
      return this.apiClient.callApi(
        '/dogma/effects/', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getDogmaEffectsEffectId operation.
     * @callback module:api/DogmaApi~getDogmaEffectsEffectIdCallback
     * @param {String} error Error message, if any.
     * @param {module:model/GetDogmaEffectsEffectIdOk} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get effect information
     * Get information on a dogma effect  --- Alternate route: `/dev/dogma/effects/{effect_id}/`  Alternate route: `/v2/dogma/effects/{effect_id}/`  --- This route expires daily at 11:05
     * @param {Number} effectId A dogma effect ID
     * @param {Object} opts Optional parameters
     * @param {module:model/String} [datasource = 'tranquility')] The server name you would like data from
     * @param {String} [ifNoneMatch] ETag from a previous request. A 304 will be returned if this matches the current ETag
     * @param {module:api/DogmaApi~getDogmaEffectsEffectIdCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/GetDogmaEffectsEffectIdOk}
     */
    getDogmaEffectsEffectId(effectId, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'effectId' is set
      if (effectId === undefined || effectId === null) {
        throw new Error("Missing the required parameter 'effectId' when calling getDogmaEffectsEffectId");
      }

      let pathParams = {
        'effect_id': effectId
      };
      let queryParams = {
        'datasource': opts['datasource']
      };
      let headerParams = {
        'If-None-Match': opts['ifNoneMatch']
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = GetDogmaEffectsEffectIdOk;
      return this.apiClient.callApi(
        '/dogma/effects/{effect_id}/', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
