/**
 * EVE Swagger Interface
 * An OpenAPI for EVE Online
 *
 * The version of the OpenAPI document: 0.8.6
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import BadRequest from '../model/BadRequest';
import ErrorLimited from '../model/ErrorLimited';
import Forbidden from '../model/Forbidden';
import GatewayTimeout from '../model/GatewayTimeout';
import GetCharactersCharacterIdFittings200Ok from '../model/GetCharactersCharacterIdFittings200Ok';
import InternalServerError from '../model/InternalServerError';
import PostCharactersCharacterIdFittingsCreated from '../model/PostCharactersCharacterIdFittingsCreated';
import PostCharactersCharacterIdFittingsFitting from '../model/PostCharactersCharacterIdFittingsFitting';
import ServiceUnavailable from '../model/ServiceUnavailable';
import Unauthorized from '../model/Unauthorized';

/**
* Fittings service.
* @module api/FittingsApi
* @version 0.8.6
*/
export default class FittingsApi {

    /**
    * Constructs a new FittingsApi. 
    * @alias module:api/FittingsApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the deleteCharactersCharacterIdFittingsFittingId operation.
     * @callback module:api/FittingsApi~deleteCharactersCharacterIdFittingsFittingIdCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete fitting
     * Delete a fitting from a character  --- Alternate route: `/dev/characters/{character_id}/fittings/{fitting_id}/`  Alternate route: `/legacy/characters/{character_id}/fittings/{fitting_id}/`  Alternate route: `/v1/characters/{character_id}/fittings/{fitting_id}/` 
     * @param {Number} characterId An EVE character ID
     * @param {Number} fittingId ID for a fitting of this character
     * @param {Object} opts Optional parameters
     * @param {module:model/String} [datasource = 'tranquility')] The server name you would like data from
     * @param {String} [token] Access token to use if unable to set a header
     * @param {module:api/FittingsApi~deleteCharactersCharacterIdFittingsFittingIdCallback} callback The callback function, accepting three arguments: error, data, response
     */
    deleteCharactersCharacterIdFittingsFittingId(characterId, fittingId, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'characterId' is set
      if (characterId === undefined || characterId === null) {
        throw new Error("Missing the required parameter 'characterId' when calling deleteCharactersCharacterIdFittingsFittingId");
      }
      // verify the required parameter 'fittingId' is set
      if (fittingId === undefined || fittingId === null) {
        throw new Error("Missing the required parameter 'fittingId' when calling deleteCharactersCharacterIdFittingsFittingId");
      }

      let pathParams = {
        'character_id': characterId,
        'fitting_id': fittingId
      };
      let queryParams = {
        'datasource': opts['datasource'],
        'token': opts['token']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['evesso'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/characters/{character_id}/fittings/{fitting_id}/', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getCharactersCharacterIdFittings operation.
     * @callback module:api/FittingsApi~getCharactersCharacterIdFittingsCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/GetCharactersCharacterIdFittings200Ok>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get fittings
     * Return fittings of a character  --- Alternate route: `/dev/characters/{character_id}/fittings/`  Alternate route: `/legacy/characters/{character_id}/fittings/`  Alternate route: `/v1/characters/{character_id}/fittings/`  --- This route is cached for up to 300 seconds
     * @param {Number} characterId An EVE character ID
     * @param {Object} opts Optional parameters
     * @param {module:model/String} [datasource = 'tranquility')] The server name you would like data from
     * @param {String} [ifNoneMatch] ETag from a previous request. A 304 will be returned if this matches the current ETag
     * @param {String} [token] Access token to use if unable to set a header
     * @param {module:api/FittingsApi~getCharactersCharacterIdFittingsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/GetCharactersCharacterIdFittings200Ok>}
     */
    getCharactersCharacterIdFittings(characterId, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'characterId' is set
      if (characterId === undefined || characterId === null) {
        throw new Error("Missing the required parameter 'characterId' when calling getCharactersCharacterIdFittings");
      }

      let pathParams = {
        'character_id': characterId
      };
      let queryParams = {
        'datasource': opts['datasource'],
        'token': opts['token']
      };
      let headerParams = {
        'If-None-Match': opts['ifNoneMatch']
      };
      let formParams = {
      };

      let authNames = ['evesso'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [GetCharactersCharacterIdFittings200Ok];
      return this.apiClient.callApi(
        '/characters/{character_id}/fittings/', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the postCharactersCharacterIdFittings operation.
     * @callback module:api/FittingsApi~postCharactersCharacterIdFittingsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/PostCharactersCharacterIdFittingsCreated} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Create fitting
     * Save a new fitting for a character  --- Alternate route: `/dev/characters/{character_id}/fittings/`  Alternate route: `/legacy/characters/{character_id}/fittings/`  Alternate route: `/v1/characters/{character_id}/fittings/` 
     * @param {Number} characterId An EVE character ID
     * @param {module:model/PostCharactersCharacterIdFittingsFitting} fitting Details about the new fitting
     * @param {Object} opts Optional parameters
     * @param {module:model/String} [datasource = 'tranquility')] The server name you would like data from
     * @param {String} [token] Access token to use if unable to set a header
     * @param {module:api/FittingsApi~postCharactersCharacterIdFittingsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/PostCharactersCharacterIdFittingsCreated}
     */
    postCharactersCharacterIdFittings(characterId, fitting, opts, callback) {
      opts = opts || {};
      let postBody = fitting;
      // verify the required parameter 'characterId' is set
      if (characterId === undefined || characterId === null) {
        throw new Error("Missing the required parameter 'characterId' when calling postCharactersCharacterIdFittings");
      }
      // verify the required parameter 'fitting' is set
      if (fitting === undefined || fitting === null) {
        throw new Error("Missing the required parameter 'fitting' when calling postCharactersCharacterIdFittings");
      }

      let pathParams = {
        'character_id': characterId
      };
      let queryParams = {
        'datasource': opts['datasource'],
        'token': opts['token']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['evesso'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = PostCharactersCharacterIdFittingsCreated;
      return this.apiClient.callApi(
        '/characters/{character_id}/fittings/', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
