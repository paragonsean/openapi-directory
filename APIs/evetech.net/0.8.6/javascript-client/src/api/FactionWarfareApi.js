/**
 * EVE Swagger Interface
 * An OpenAPI for EVE Online
 *
 * The version of the OpenAPI document: 0.8.6
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import BadRequest from '../model/BadRequest';
import ErrorLimited from '../model/ErrorLimited';
import Forbidden from '../model/Forbidden';
import GatewayTimeout from '../model/GatewayTimeout';
import GetCharactersCharacterIdFwStatsOk from '../model/GetCharactersCharacterIdFwStatsOk';
import GetCorporationsCorporationIdFwStatsOk from '../model/GetCorporationsCorporationIdFwStatsOk';
import GetFwLeaderboardsCharactersOk from '../model/GetFwLeaderboardsCharactersOk';
import GetFwLeaderboardsCorporationsOk from '../model/GetFwLeaderboardsCorporationsOk';
import GetFwLeaderboardsOk from '../model/GetFwLeaderboardsOk';
import GetFwStats200Ok from '../model/GetFwStats200Ok';
import GetFwSystems200Ok from '../model/GetFwSystems200Ok';
import GetFwWars200Ok from '../model/GetFwWars200Ok';
import InternalServerError from '../model/InternalServerError';
import ServiceUnavailable from '../model/ServiceUnavailable';
import Unauthorized from '../model/Unauthorized';

/**
* FactionWarfare service.
* @module api/FactionWarfareApi
* @version 0.8.6
*/
export default class FactionWarfareApi {

    /**
    * Constructs a new FactionWarfareApi. 
    * @alias module:api/FactionWarfareApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the getCharactersCharacterIdFwStats operation.
     * @callback module:api/FactionWarfareApi~getCharactersCharacterIdFwStatsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/GetCharactersCharacterIdFwStatsOk} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Overview of a character involved in faction warfare
     * Statistical overview of a character involved in faction warfare  --- Alternate route: `/dev/characters/{character_id}/fw/stats/`  Alternate route: `/legacy/characters/{character_id}/fw/stats/`  Alternate route: `/v1/characters/{character_id}/fw/stats/`  --- This route expires daily at 11:05
     * @param {Number} characterId An EVE character ID
     * @param {Object} opts Optional parameters
     * @param {module:model/String} [datasource = 'tranquility')] The server name you would like data from
     * @param {String} [ifNoneMatch] ETag from a previous request. A 304 will be returned if this matches the current ETag
     * @param {String} [token] Access token to use if unable to set a header
     * @param {module:api/FactionWarfareApi~getCharactersCharacterIdFwStatsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/GetCharactersCharacterIdFwStatsOk}
     */
    getCharactersCharacterIdFwStats(characterId, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'characterId' is set
      if (characterId === undefined || characterId === null) {
        throw new Error("Missing the required parameter 'characterId' when calling getCharactersCharacterIdFwStats");
      }

      let pathParams = {
        'character_id': characterId
      };
      let queryParams = {
        'datasource': opts['datasource'],
        'token': opts['token']
      };
      let headerParams = {
        'If-None-Match': opts['ifNoneMatch']
      };
      let formParams = {
      };

      let authNames = ['evesso'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = GetCharactersCharacterIdFwStatsOk;
      return this.apiClient.callApi(
        '/characters/{character_id}/fw/stats/', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getCorporationsCorporationIdFwStats operation.
     * @callback module:api/FactionWarfareApi~getCorporationsCorporationIdFwStatsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/GetCorporationsCorporationIdFwStatsOk} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Overview of a corporation involved in faction warfare
     * Statistics about a corporation involved in faction warfare  --- Alternate route: `/dev/corporations/{corporation_id}/fw/stats/`  Alternate route: `/legacy/corporations/{corporation_id}/fw/stats/`  Alternate route: `/v1/corporations/{corporation_id}/fw/stats/`  --- This route expires daily at 11:05
     * @param {Number} corporationId An EVE corporation ID
     * @param {Object} opts Optional parameters
     * @param {module:model/String} [datasource = 'tranquility')] The server name you would like data from
     * @param {String} [ifNoneMatch] ETag from a previous request. A 304 will be returned if this matches the current ETag
     * @param {String} [token] Access token to use if unable to set a header
     * @param {module:api/FactionWarfareApi~getCorporationsCorporationIdFwStatsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/GetCorporationsCorporationIdFwStatsOk}
     */
    getCorporationsCorporationIdFwStats(corporationId, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'corporationId' is set
      if (corporationId === undefined || corporationId === null) {
        throw new Error("Missing the required parameter 'corporationId' when calling getCorporationsCorporationIdFwStats");
      }

      let pathParams = {
        'corporation_id': corporationId
      };
      let queryParams = {
        'datasource': opts['datasource'],
        'token': opts['token']
      };
      let headerParams = {
        'If-None-Match': opts['ifNoneMatch']
      };
      let formParams = {
      };

      let authNames = ['evesso'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = GetCorporationsCorporationIdFwStatsOk;
      return this.apiClient.callApi(
        '/corporations/{corporation_id}/fw/stats/', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getFwLeaderboards operation.
     * @callback module:api/FactionWarfareApi~getFwLeaderboardsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/GetFwLeaderboardsOk} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * List of the top factions in faction warfare
     * Top 4 leaderboard of factions for kills and victory points separated by total, last week and yesterday  --- Alternate route: `/dev/fw/leaderboards/`  Alternate route: `/legacy/fw/leaderboards/`  Alternate route: `/v1/fw/leaderboards/`  --- This route expires daily at 11:05
     * @param {Object} opts Optional parameters
     * @param {module:model/String} [datasource = 'tranquility')] The server name you would like data from
     * @param {String} [ifNoneMatch] ETag from a previous request. A 304 will be returned if this matches the current ETag
     * @param {module:api/FactionWarfareApi~getFwLeaderboardsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/GetFwLeaderboardsOk}
     */
    getFwLeaderboards(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'datasource': opts['datasource']
      };
      let headerParams = {
        'If-None-Match': opts['ifNoneMatch']
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = GetFwLeaderboardsOk;
      return this.apiClient.callApi(
        '/fw/leaderboards/', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getFwLeaderboardsCharacters operation.
     * @callback module:api/FactionWarfareApi~getFwLeaderboardsCharactersCallback
     * @param {String} error Error message, if any.
     * @param {module:model/GetFwLeaderboardsCharactersOk} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * List of the top pilots in faction warfare
     * Top 100 leaderboard of pilots for kills and victory points separated by total, last week and yesterday  --- Alternate route: `/dev/fw/leaderboards/characters/`  Alternate route: `/legacy/fw/leaderboards/characters/`  Alternate route: `/v1/fw/leaderboards/characters/`  --- This route expires daily at 11:05
     * @param {Object} opts Optional parameters
     * @param {module:model/String} [datasource = 'tranquility')] The server name you would like data from
     * @param {String} [ifNoneMatch] ETag from a previous request. A 304 will be returned if this matches the current ETag
     * @param {module:api/FactionWarfareApi~getFwLeaderboardsCharactersCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/GetFwLeaderboardsCharactersOk}
     */
    getFwLeaderboardsCharacters(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'datasource': opts['datasource']
      };
      let headerParams = {
        'If-None-Match': opts['ifNoneMatch']
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = GetFwLeaderboardsCharactersOk;
      return this.apiClient.callApi(
        '/fw/leaderboards/characters/', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getFwLeaderboardsCorporations operation.
     * @callback module:api/FactionWarfareApi~getFwLeaderboardsCorporationsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/GetFwLeaderboardsCorporationsOk} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * List of the top corporations in faction warfare
     * Top 10 leaderboard of corporations for kills and victory points separated by total, last week and yesterday  --- Alternate route: `/dev/fw/leaderboards/corporations/`  Alternate route: `/legacy/fw/leaderboards/corporations/`  Alternate route: `/v1/fw/leaderboards/corporations/`  --- This route expires daily at 11:05
     * @param {Object} opts Optional parameters
     * @param {module:model/String} [datasource = 'tranquility')] The server name you would like data from
     * @param {String} [ifNoneMatch] ETag from a previous request. A 304 will be returned if this matches the current ETag
     * @param {module:api/FactionWarfareApi~getFwLeaderboardsCorporationsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/GetFwLeaderboardsCorporationsOk}
     */
    getFwLeaderboardsCorporations(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'datasource': opts['datasource']
      };
      let headerParams = {
        'If-None-Match': opts['ifNoneMatch']
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = GetFwLeaderboardsCorporationsOk;
      return this.apiClient.callApi(
        '/fw/leaderboards/corporations/', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getFwStats operation.
     * @callback module:api/FactionWarfareApi~getFwStatsCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/GetFwStats200Ok>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * An overview of statistics about factions involved in faction warfare
     * Statistical overviews of factions involved in faction warfare  --- Alternate route: `/dev/fw/stats/`  Alternate route: `/legacy/fw/stats/`  Alternate route: `/v1/fw/stats/`  --- This route expires daily at 11:05
     * @param {Object} opts Optional parameters
     * @param {module:model/String} [datasource = 'tranquility')] The server name you would like data from
     * @param {String} [ifNoneMatch] ETag from a previous request. A 304 will be returned if this matches the current ETag
     * @param {module:api/FactionWarfareApi~getFwStatsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/GetFwStats200Ok>}
     */
    getFwStats(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'datasource': opts['datasource']
      };
      let headerParams = {
        'If-None-Match': opts['ifNoneMatch']
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [GetFwStats200Ok];
      return this.apiClient.callApi(
        '/fw/stats/', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getFwSystems operation.
     * @callback module:api/FactionWarfareApi~getFwSystemsCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/GetFwSystems200Ok>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Ownership of faction warfare systems
     * An overview of the current ownership of faction warfare solar systems  --- Alternate route: `/dev/fw/systems/`  Alternate route: `/v2/fw/systems/`  --- This route is cached for up to 1800 seconds
     * @param {Object} opts Optional parameters
     * @param {module:model/String} [datasource = 'tranquility')] The server name you would like data from
     * @param {String} [ifNoneMatch] ETag from a previous request. A 304 will be returned if this matches the current ETag
     * @param {module:api/FactionWarfareApi~getFwSystemsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/GetFwSystems200Ok>}
     */
    getFwSystems(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'datasource': opts['datasource']
      };
      let headerParams = {
        'If-None-Match': opts['ifNoneMatch']
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [GetFwSystems200Ok];
      return this.apiClient.callApi(
        '/fw/systems/', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getFwWars operation.
     * @callback module:api/FactionWarfareApi~getFwWarsCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/GetFwWars200Ok>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Data about which NPC factions are at war
     * Data about which NPC factions are at war  --- Alternate route: `/dev/fw/wars/`  Alternate route: `/legacy/fw/wars/`  Alternate route: `/v1/fw/wars/`  --- This route expires daily at 11:05
     * @param {Object} opts Optional parameters
     * @param {module:model/String} [datasource = 'tranquility')] The server name you would like data from
     * @param {String} [ifNoneMatch] ETag from a previous request. A 304 will be returned if this matches the current ETag
     * @param {module:api/FactionWarfareApi~getFwWarsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/GetFwWars200Ok>}
     */
    getFwWars(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'datasource': opts['datasource']
      };
      let headerParams = {
        'If-None-Match': opts['ifNoneMatch']
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [GetFwWars200Ok];
      return this.apiClient.callApi(
        '/fw/wars/', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
