/**
 * EVE Swagger Interface
 * An OpenAPI for EVE Online
 *
 * The version of the OpenAPI document: 0.8.6
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import BadRequest from '../model/BadRequest';
import ErrorLimited from '../model/ErrorLimited';
import Forbidden from '../model/Forbidden';
import GatewayTimeout from '../model/GatewayTimeout';
import GetCharactersCharacterIdCalendar200Ok from '../model/GetCharactersCharacterIdCalendar200Ok';
import GetCharactersCharacterIdCalendarEventIdAttendees200Ok from '../model/GetCharactersCharacterIdCalendarEventIdAttendees200Ok';
import GetCharactersCharacterIdCalendarEventIdAttendeesNotFound from '../model/GetCharactersCharacterIdCalendarEventIdAttendeesNotFound';
import GetCharactersCharacterIdCalendarEventIdNotFound from '../model/GetCharactersCharacterIdCalendarEventIdNotFound';
import GetCharactersCharacterIdCalendarEventIdOk from '../model/GetCharactersCharacterIdCalendarEventIdOk';
import InternalServerError from '../model/InternalServerError';
import PutCharactersCharacterIdCalendarEventIdResponse from '../model/PutCharactersCharacterIdCalendarEventIdResponse';
import ServiceUnavailable from '../model/ServiceUnavailable';
import Unauthorized from '../model/Unauthorized';

/**
* Calendar service.
* @module api/CalendarApi
* @version 0.8.6
*/
export default class CalendarApi {

    /**
    * Constructs a new CalendarApi. 
    * @alias module:api/CalendarApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the getCharactersCharacterIdCalendar operation.
     * @callback module:api/CalendarApi~getCharactersCharacterIdCalendarCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/GetCharactersCharacterIdCalendar200Ok>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * List calendar event summaries
     * Get 50 event summaries from the calendar. If no from_event ID is given, the resource will return the next 50 chronological event summaries from now. If a from_event ID is specified, it will return the next 50 chronological event summaries from after that event  --- Alternate route: `/dev/characters/{character_id}/calendar/`  Alternate route: `/legacy/characters/{character_id}/calendar/`  Alternate route: `/v1/characters/{character_id}/calendar/`  --- This route is cached for up to 5 seconds
     * @param {Number} characterId An EVE character ID
     * @param {Object} opts Optional parameters
     * @param {module:model/String} [datasource = 'tranquility')] The server name you would like data from
     * @param {Number} [fromEvent] The event ID to retrieve events from
     * @param {String} [ifNoneMatch] ETag from a previous request. A 304 will be returned if this matches the current ETag
     * @param {String} [token] Access token to use if unable to set a header
     * @param {module:api/CalendarApi~getCharactersCharacterIdCalendarCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/GetCharactersCharacterIdCalendar200Ok>}
     */
    getCharactersCharacterIdCalendar(characterId, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'characterId' is set
      if (characterId === undefined || characterId === null) {
        throw new Error("Missing the required parameter 'characterId' when calling getCharactersCharacterIdCalendar");
      }

      let pathParams = {
        'character_id': characterId
      };
      let queryParams = {
        'datasource': opts['datasource'],
        'from_event': opts['fromEvent'],
        'token': opts['token']
      };
      let headerParams = {
        'If-None-Match': opts['ifNoneMatch']
      };
      let formParams = {
      };

      let authNames = ['evesso'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [GetCharactersCharacterIdCalendar200Ok];
      return this.apiClient.callApi(
        '/characters/{character_id}/calendar/', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getCharactersCharacterIdCalendarEventId operation.
     * @callback module:api/CalendarApi~getCharactersCharacterIdCalendarEventIdCallback
     * @param {String} error Error message, if any.
     * @param {module:model/GetCharactersCharacterIdCalendarEventIdOk} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get an event
     * Get all the information for a specific event  --- Alternate route: `/dev/characters/{character_id}/calendar/{event_id}/`  Alternate route: `/v3/characters/{character_id}/calendar/{event_id}/`  --- This route is cached for up to 5 seconds
     * @param {Number} characterId An EVE character ID
     * @param {Number} eventId The id of the event requested
     * @param {Object} opts Optional parameters
     * @param {module:model/String} [datasource = 'tranquility')] The server name you would like data from
     * @param {String} [ifNoneMatch] ETag from a previous request. A 304 will be returned if this matches the current ETag
     * @param {String} [token] Access token to use if unable to set a header
     * @param {module:api/CalendarApi~getCharactersCharacterIdCalendarEventIdCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/GetCharactersCharacterIdCalendarEventIdOk}
     */
    getCharactersCharacterIdCalendarEventId(characterId, eventId, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'characterId' is set
      if (characterId === undefined || characterId === null) {
        throw new Error("Missing the required parameter 'characterId' when calling getCharactersCharacterIdCalendarEventId");
      }
      // verify the required parameter 'eventId' is set
      if (eventId === undefined || eventId === null) {
        throw new Error("Missing the required parameter 'eventId' when calling getCharactersCharacterIdCalendarEventId");
      }

      let pathParams = {
        'character_id': characterId,
        'event_id': eventId
      };
      let queryParams = {
        'datasource': opts['datasource'],
        'token': opts['token']
      };
      let headerParams = {
        'If-None-Match': opts['ifNoneMatch']
      };
      let formParams = {
      };

      let authNames = ['evesso'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = GetCharactersCharacterIdCalendarEventIdOk;
      return this.apiClient.callApi(
        '/characters/{character_id}/calendar/{event_id}/', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getCharactersCharacterIdCalendarEventIdAttendees operation.
     * @callback module:api/CalendarApi~getCharactersCharacterIdCalendarEventIdAttendeesCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/GetCharactersCharacterIdCalendarEventIdAttendees200Ok>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get attendees
     * Get all invited attendees for a given event  --- Alternate route: `/dev/characters/{character_id}/calendar/{event_id}/attendees/`  Alternate route: `/legacy/characters/{character_id}/calendar/{event_id}/attendees/`  Alternate route: `/v1/characters/{character_id}/calendar/{event_id}/attendees/`  --- This route is cached for up to 600 seconds
     * @param {Number} characterId An EVE character ID
     * @param {Number} eventId The id of the event requested
     * @param {Object} opts Optional parameters
     * @param {module:model/String} [datasource = 'tranquility')] The server name you would like data from
     * @param {String} [ifNoneMatch] ETag from a previous request. A 304 will be returned if this matches the current ETag
     * @param {String} [token] Access token to use if unable to set a header
     * @param {module:api/CalendarApi~getCharactersCharacterIdCalendarEventIdAttendeesCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/GetCharactersCharacterIdCalendarEventIdAttendees200Ok>}
     */
    getCharactersCharacterIdCalendarEventIdAttendees(characterId, eventId, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'characterId' is set
      if (characterId === undefined || characterId === null) {
        throw new Error("Missing the required parameter 'characterId' when calling getCharactersCharacterIdCalendarEventIdAttendees");
      }
      // verify the required parameter 'eventId' is set
      if (eventId === undefined || eventId === null) {
        throw new Error("Missing the required parameter 'eventId' when calling getCharactersCharacterIdCalendarEventIdAttendees");
      }

      let pathParams = {
        'character_id': characterId,
        'event_id': eventId
      };
      let queryParams = {
        'datasource': opts['datasource'],
        'token': opts['token']
      };
      let headerParams = {
        'If-None-Match': opts['ifNoneMatch']
      };
      let formParams = {
      };

      let authNames = ['evesso'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [GetCharactersCharacterIdCalendarEventIdAttendees200Ok];
      return this.apiClient.callApi(
        '/characters/{character_id}/calendar/{event_id}/attendees/', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the putCharactersCharacterIdCalendarEventId operation.
     * @callback module:api/CalendarApi~putCharactersCharacterIdCalendarEventIdCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Respond to an event
     * Set your response status to an event  --- Alternate route: `/dev/characters/{character_id}/calendar/{event_id}/`  Alternate route: `/v3/characters/{character_id}/calendar/{event_id}/` 
     * @param {Number} characterId An EVE character ID
     * @param {Number} eventId The ID of the event requested
     * @param {module:model/PutCharactersCharacterIdCalendarEventIdResponse} response The response value to set, overriding current value
     * @param {Object} opts Optional parameters
     * @param {module:model/String} [datasource = 'tranquility')] The server name you would like data from
     * @param {String} [token] Access token to use if unable to set a header
     * @param {module:api/CalendarApi~putCharactersCharacterIdCalendarEventIdCallback} callback The callback function, accepting three arguments: error, data, response
     */
    putCharactersCharacterIdCalendarEventId(characterId, eventId, response, opts, callback) {
      opts = opts || {};
      let postBody = response;
      // verify the required parameter 'characterId' is set
      if (characterId === undefined || characterId === null) {
        throw new Error("Missing the required parameter 'characterId' when calling putCharactersCharacterIdCalendarEventId");
      }
      // verify the required parameter 'eventId' is set
      if (eventId === undefined || eventId === null) {
        throw new Error("Missing the required parameter 'eventId' when calling putCharactersCharacterIdCalendarEventId");
      }
      // verify the required parameter 'response' is set
      if (response === undefined || response === null) {
        throw new Error("Missing the required parameter 'response' when calling putCharactersCharacterIdCalendarEventId");
      }

      let pathParams = {
        'character_id': characterId,
        'event_id': eventId
      };
      let queryParams = {
        'datasource': opts['datasource'],
        'token': opts['token']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['evesso'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/characters/{character_id}/calendar/{event_id}/', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
