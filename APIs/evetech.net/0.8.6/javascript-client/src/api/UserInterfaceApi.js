/**
 * EVE Swagger Interface
 * An OpenAPI for EVE Online
 *
 * The version of the OpenAPI document: 0.8.6
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import BadRequest from '../model/BadRequest';
import ErrorLimited from '../model/ErrorLimited';
import Forbidden from '../model/Forbidden';
import GatewayTimeout from '../model/GatewayTimeout';
import InternalServerError from '../model/InternalServerError';
import PostUiOpenwindowNewmailNewMail from '../model/PostUiOpenwindowNewmailNewMail';
import PostUiOpenwindowNewmailUnprocessableEntity from '../model/PostUiOpenwindowNewmailUnprocessableEntity';
import ServiceUnavailable from '../model/ServiceUnavailable';
import Unauthorized from '../model/Unauthorized';

/**
* UserInterface service.
* @module api/UserInterfaceApi
* @version 0.8.6
*/
export default class UserInterfaceApi {

    /**
    * Constructs a new UserInterfaceApi. 
    * @alias module:api/UserInterfaceApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the postUiAutopilotWaypoint operation.
     * @callback module:api/UserInterfaceApi~postUiAutopilotWaypointCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Set Autopilot Waypoint
     * Set a solar system as autopilot waypoint  --- Alternate route: `/dev/ui/autopilot/waypoint/`  Alternate route: `/v2/ui/autopilot/waypoint/` 
     * @param {Boolean} addToBeginning Whether this solar system should be added to the beginning of all waypoints
     * @param {Boolean} clearOtherWaypoints Whether clean other waypoints beforing adding this one
     * @param {Number} destinationId The destination to travel to, can be solar system, station or structure's id
     * @param {Object} opts Optional parameters
     * @param {module:model/String} [datasource = 'tranquility')] The server name you would like data from
     * @param {String} [token] Access token to use if unable to set a header
     * @param {module:api/UserInterfaceApi~postUiAutopilotWaypointCallback} callback The callback function, accepting three arguments: error, data, response
     */
    postUiAutopilotWaypoint(addToBeginning, clearOtherWaypoints, destinationId, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'addToBeginning' is set
      if (addToBeginning === undefined || addToBeginning === null) {
        throw new Error("Missing the required parameter 'addToBeginning' when calling postUiAutopilotWaypoint");
      }
      // verify the required parameter 'clearOtherWaypoints' is set
      if (clearOtherWaypoints === undefined || clearOtherWaypoints === null) {
        throw new Error("Missing the required parameter 'clearOtherWaypoints' when calling postUiAutopilotWaypoint");
      }
      // verify the required parameter 'destinationId' is set
      if (destinationId === undefined || destinationId === null) {
        throw new Error("Missing the required parameter 'destinationId' when calling postUiAutopilotWaypoint");
      }

      let pathParams = {
      };
      let queryParams = {
        'add_to_beginning': addToBeginning,
        'clear_other_waypoints': clearOtherWaypoints,
        'datasource': opts['datasource'],
        'destination_id': destinationId,
        'token': opts['token']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['evesso'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/ui/autopilot/waypoint/', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the postUiOpenwindowContract operation.
     * @callback module:api/UserInterfaceApi~postUiOpenwindowContractCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Open Contract Window
     * Open the contract window inside the client  --- Alternate route: `/dev/ui/openwindow/contract/`  Alternate route: `/legacy/ui/openwindow/contract/`  Alternate route: `/v1/ui/openwindow/contract/` 
     * @param {Number} contractId The contract to open
     * @param {Object} opts Optional parameters
     * @param {module:model/String} [datasource = 'tranquility')] The server name you would like data from
     * @param {String} [token] Access token to use if unable to set a header
     * @param {module:api/UserInterfaceApi~postUiOpenwindowContractCallback} callback The callback function, accepting three arguments: error, data, response
     */
    postUiOpenwindowContract(contractId, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'contractId' is set
      if (contractId === undefined || contractId === null) {
        throw new Error("Missing the required parameter 'contractId' when calling postUiOpenwindowContract");
      }

      let pathParams = {
      };
      let queryParams = {
        'contract_id': contractId,
        'datasource': opts['datasource'],
        'token': opts['token']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['evesso'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/ui/openwindow/contract/', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the postUiOpenwindowInformation operation.
     * @callback module:api/UserInterfaceApi~postUiOpenwindowInformationCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Open Information Window
     * Open the information window for a character, corporation or alliance inside the client  --- Alternate route: `/dev/ui/openwindow/information/`  Alternate route: `/legacy/ui/openwindow/information/`  Alternate route: `/v1/ui/openwindow/information/` 
     * @param {Number} targetId The target to open
     * @param {Object} opts Optional parameters
     * @param {module:model/String} [datasource = 'tranquility')] The server name you would like data from
     * @param {String} [token] Access token to use if unable to set a header
     * @param {module:api/UserInterfaceApi~postUiOpenwindowInformationCallback} callback The callback function, accepting three arguments: error, data, response
     */
    postUiOpenwindowInformation(targetId, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'targetId' is set
      if (targetId === undefined || targetId === null) {
        throw new Error("Missing the required parameter 'targetId' when calling postUiOpenwindowInformation");
      }

      let pathParams = {
      };
      let queryParams = {
        'datasource': opts['datasource'],
        'target_id': targetId,
        'token': opts['token']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['evesso'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/ui/openwindow/information/', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the postUiOpenwindowMarketdetails operation.
     * @callback module:api/UserInterfaceApi~postUiOpenwindowMarketdetailsCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Open Market Details
     * Open the market details window for a specific typeID inside the client  --- Alternate route: `/dev/ui/openwindow/marketdetails/`  Alternate route: `/legacy/ui/openwindow/marketdetails/`  Alternate route: `/v1/ui/openwindow/marketdetails/` 
     * @param {Number} typeId The item type to open in market window
     * @param {Object} opts Optional parameters
     * @param {module:model/String} [datasource = 'tranquility')] The server name you would like data from
     * @param {String} [token] Access token to use if unable to set a header
     * @param {module:api/UserInterfaceApi~postUiOpenwindowMarketdetailsCallback} callback The callback function, accepting three arguments: error, data, response
     */
    postUiOpenwindowMarketdetails(typeId, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'typeId' is set
      if (typeId === undefined || typeId === null) {
        throw new Error("Missing the required parameter 'typeId' when calling postUiOpenwindowMarketdetails");
      }

      let pathParams = {
      };
      let queryParams = {
        'datasource': opts['datasource'],
        'token': opts['token'],
        'type_id': typeId
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['evesso'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/ui/openwindow/marketdetails/', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the postUiOpenwindowNewmail operation.
     * @callback module:api/UserInterfaceApi~postUiOpenwindowNewmailCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Open New Mail Window
     * Open the New Mail window, according to settings from the request if applicable  --- Alternate route: `/dev/ui/openwindow/newmail/`  Alternate route: `/legacy/ui/openwindow/newmail/`  Alternate route: `/v1/ui/openwindow/newmail/` 
     * @param {module:model/PostUiOpenwindowNewmailNewMail} newMail The details of mail to create
     * @param {Object} opts Optional parameters
     * @param {module:model/String} [datasource = 'tranquility')] The server name you would like data from
     * @param {String} [token] Access token to use if unable to set a header
     * @param {module:api/UserInterfaceApi~postUiOpenwindowNewmailCallback} callback The callback function, accepting three arguments: error, data, response
     */
    postUiOpenwindowNewmail(newMail, opts, callback) {
      opts = opts || {};
      let postBody = newMail;
      // verify the required parameter 'newMail' is set
      if (newMail === undefined || newMail === null) {
        throw new Error("Missing the required parameter 'newMail' when calling postUiOpenwindowNewmail");
      }

      let pathParams = {
      };
      let queryParams = {
        'datasource': opts['datasource'],
        'token': opts['token']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['evesso'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/ui/openwindow/newmail/', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
