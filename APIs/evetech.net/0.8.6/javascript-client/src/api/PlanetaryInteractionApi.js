/**
 * EVE Swagger Interface
 * An OpenAPI for EVE Online
 *
 * The version of the OpenAPI document: 0.8.6
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import BadRequest from '../model/BadRequest';
import ErrorLimited from '../model/ErrorLimited';
import Forbidden from '../model/Forbidden';
import GatewayTimeout from '../model/GatewayTimeout';
import GetCharactersCharacterIdPlanets200Ok from '../model/GetCharactersCharacterIdPlanets200Ok';
import GetCharactersCharacterIdPlanetsPlanetIdNotFound from '../model/GetCharactersCharacterIdPlanetsPlanetIdNotFound';
import GetCharactersCharacterIdPlanetsPlanetIdOk from '../model/GetCharactersCharacterIdPlanetsPlanetIdOk';
import GetCorporationsCorporationIdCustomsOffices200Ok from '../model/GetCorporationsCorporationIdCustomsOffices200Ok';
import GetUniverseSchematicsSchematicIdNotFound from '../model/GetUniverseSchematicsSchematicIdNotFound';
import GetUniverseSchematicsSchematicIdOk from '../model/GetUniverseSchematicsSchematicIdOk';
import InternalServerError from '../model/InternalServerError';
import ServiceUnavailable from '../model/ServiceUnavailable';
import Unauthorized from '../model/Unauthorized';

/**
* PlanetaryInteraction service.
* @module api/PlanetaryInteractionApi
* @version 0.8.6
*/
export default class PlanetaryInteractionApi {

    /**
    * Constructs a new PlanetaryInteractionApi. 
    * @alias module:api/PlanetaryInteractionApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the getCharactersCharacterIdPlanets operation.
     * @callback module:api/PlanetaryInteractionApi~getCharactersCharacterIdPlanetsCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/GetCharactersCharacterIdPlanets200Ok>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get colonies
     * Returns a list of all planetary colonies owned by a character.  --- Alternate route: `/dev/characters/{character_id}/planets/`  Alternate route: `/legacy/characters/{character_id}/planets/`  Alternate route: `/v1/characters/{character_id}/planets/`  --- This route is cached for up to 600 seconds
     * @param {Number} characterId An EVE character ID
     * @param {Object} opts Optional parameters
     * @param {module:model/String} [datasource = 'tranquility')] The server name you would like data from
     * @param {String} [ifNoneMatch] ETag from a previous request. A 304 will be returned if this matches the current ETag
     * @param {String} [token] Access token to use if unable to set a header
     * @param {module:api/PlanetaryInteractionApi~getCharactersCharacterIdPlanetsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/GetCharactersCharacterIdPlanets200Ok>}
     */
    getCharactersCharacterIdPlanets(characterId, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'characterId' is set
      if (characterId === undefined || characterId === null) {
        throw new Error("Missing the required parameter 'characterId' when calling getCharactersCharacterIdPlanets");
      }

      let pathParams = {
        'character_id': characterId
      };
      let queryParams = {
        'datasource': opts['datasource'],
        'token': opts['token']
      };
      let headerParams = {
        'If-None-Match': opts['ifNoneMatch']
      };
      let formParams = {
      };

      let authNames = ['evesso'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [GetCharactersCharacterIdPlanets200Ok];
      return this.apiClient.callApi(
        '/characters/{character_id}/planets/', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getCharactersCharacterIdPlanetsPlanetId operation.
     * @callback module:api/PlanetaryInteractionApi~getCharactersCharacterIdPlanetsPlanetIdCallback
     * @param {String} error Error message, if any.
     * @param {module:model/GetCharactersCharacterIdPlanetsPlanetIdOk} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get colony layout
     * Returns full details on the layout of a single planetary colony, including links, pins and routes. Note: Planetary information is only recalculated when the colony is viewed through the client. Information will not update until this criteria is met.  --- Alternate route: `/dev/characters/{character_id}/planets/{planet_id}/`  Alternate route: `/v3/characters/{character_id}/planets/{planet_id}/`  --- This route is cached for up to 600 seconds
     * @param {Number} characterId An EVE character ID
     * @param {Number} planetId Planet id of the target planet
     * @param {Object} opts Optional parameters
     * @param {module:model/String} [datasource = 'tranquility')] The server name you would like data from
     * @param {String} [ifNoneMatch] ETag from a previous request. A 304 will be returned if this matches the current ETag
     * @param {String} [token] Access token to use if unable to set a header
     * @param {module:api/PlanetaryInteractionApi~getCharactersCharacterIdPlanetsPlanetIdCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/GetCharactersCharacterIdPlanetsPlanetIdOk}
     */
    getCharactersCharacterIdPlanetsPlanetId(characterId, planetId, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'characterId' is set
      if (characterId === undefined || characterId === null) {
        throw new Error("Missing the required parameter 'characterId' when calling getCharactersCharacterIdPlanetsPlanetId");
      }
      // verify the required parameter 'planetId' is set
      if (planetId === undefined || planetId === null) {
        throw new Error("Missing the required parameter 'planetId' when calling getCharactersCharacterIdPlanetsPlanetId");
      }

      let pathParams = {
        'character_id': characterId,
        'planet_id': planetId
      };
      let queryParams = {
        'datasource': opts['datasource'],
        'token': opts['token']
      };
      let headerParams = {
        'If-None-Match': opts['ifNoneMatch']
      };
      let formParams = {
      };

      let authNames = ['evesso'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = GetCharactersCharacterIdPlanetsPlanetIdOk;
      return this.apiClient.callApi(
        '/characters/{character_id}/planets/{planet_id}/', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getCorporationsCorporationIdCustomsOffices operation.
     * @callback module:api/PlanetaryInteractionApi~getCorporationsCorporationIdCustomsOfficesCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/GetCorporationsCorporationIdCustomsOffices200Ok>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * List corporation customs offices
     * List customs offices owned by a corporation  --- Alternate route: `/dev/corporations/{corporation_id}/customs_offices/`  Alternate route: `/legacy/corporations/{corporation_id}/customs_offices/`  Alternate route: `/v1/corporations/{corporation_id}/customs_offices/`  --- This route is cached for up to 3600 seconds  --- Requires one of the following EVE corporation role(s): Director 
     * @param {Number} corporationId An EVE corporation ID
     * @param {Object} opts Optional parameters
     * @param {module:model/String} [datasource = 'tranquility')] The server name you would like data from
     * @param {String} [ifNoneMatch] ETag from a previous request. A 304 will be returned if this matches the current ETag
     * @param {Number} [page = 1)] Which page of results to return
     * @param {String} [token] Access token to use if unable to set a header
     * @param {module:api/PlanetaryInteractionApi~getCorporationsCorporationIdCustomsOfficesCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/GetCorporationsCorporationIdCustomsOffices200Ok>}
     */
    getCorporationsCorporationIdCustomsOffices(corporationId, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'corporationId' is set
      if (corporationId === undefined || corporationId === null) {
        throw new Error("Missing the required parameter 'corporationId' when calling getCorporationsCorporationIdCustomsOffices");
      }

      let pathParams = {
        'corporation_id': corporationId
      };
      let queryParams = {
        'datasource': opts['datasource'],
        'page': opts['page'],
        'token': opts['token']
      };
      let headerParams = {
        'If-None-Match': opts['ifNoneMatch']
      };
      let formParams = {
      };

      let authNames = ['evesso'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [GetCorporationsCorporationIdCustomsOffices200Ok];
      return this.apiClient.callApi(
        '/corporations/{corporation_id}/customs_offices/', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getUniverseSchematicsSchematicId operation.
     * @callback module:api/PlanetaryInteractionApi~getUniverseSchematicsSchematicIdCallback
     * @param {String} error Error message, if any.
     * @param {module:model/GetUniverseSchematicsSchematicIdOk} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get schematic information
     * Get information on a planetary factory schematic  --- Alternate route: `/dev/universe/schematics/{schematic_id}/`  Alternate route: `/legacy/universe/schematics/{schematic_id}/`  Alternate route: `/v1/universe/schematics/{schematic_id}/`  --- This route is cached for up to 3600 seconds
     * @param {Number} schematicId A PI schematic ID
     * @param {Object} opts Optional parameters
     * @param {module:model/String} [datasource = 'tranquility')] The server name you would like data from
     * @param {String} [ifNoneMatch] ETag from a previous request. A 304 will be returned if this matches the current ETag
     * @param {module:api/PlanetaryInteractionApi~getUniverseSchematicsSchematicIdCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/GetUniverseSchematicsSchematicIdOk}
     */
    getUniverseSchematicsSchematicId(schematicId, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'schematicId' is set
      if (schematicId === undefined || schematicId === null) {
        throw new Error("Missing the required parameter 'schematicId' when calling getUniverseSchematicsSchematicId");
      }

      let pathParams = {
        'schematic_id': schematicId
      };
      let queryParams = {
        'datasource': opts['datasource']
      };
      let headerParams = {
        'If-None-Match': opts['ifNoneMatch']
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = GetUniverseSchematicsSchematicIdOk;
      return this.apiClient.callApi(
        '/universe/schematics/{schematic_id}/', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
