/**
 * EVE Swagger Interface
 * An OpenAPI for EVE Online
 *
 * The version of the OpenAPI document: 0.8.6
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import BadRequest from '../model/BadRequest';
import ErrorLimited from '../model/ErrorLimited';
import Forbidden from '../model/Forbidden';
import GatewayTimeout from '../model/GatewayTimeout';
import GetCharactersCharacterIdSearchOk from '../model/GetCharactersCharacterIdSearchOk';
import GetSearchOk from '../model/GetSearchOk';
import InternalServerError from '../model/InternalServerError';
import ServiceUnavailable from '../model/ServiceUnavailable';
import Unauthorized from '../model/Unauthorized';

/**
* Search service.
* @module api/SearchApi
* @version 0.8.6
*/
export default class SearchApi {

    /**
    * Constructs a new SearchApi. 
    * @alias module:api/SearchApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the getCharactersCharacterIdSearch operation.
     * @callback module:api/SearchApi~getCharactersCharacterIdSearchCallback
     * @param {String} error Error message, if any.
     * @param {module:model/GetCharactersCharacterIdSearchOk} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Search on a string
     * Search for entities that match a given sub-string.  --- Alternate route: `/dev/characters/{character_id}/search/`  Alternate route: `/v3/characters/{character_id}/search/`  --- This route is cached for up to 3600 seconds
     * @param {Array.<module:model/String>} categories Type of entities to search for
     * @param {Number} characterId An EVE character ID
     * @param {String} search The string to search on
     * @param {Object} opts Optional parameters
     * @param {module:model/String} [acceptLanguage = 'en-us')] Language to use in the response
     * @param {module:model/String} [datasource = 'tranquility')] The server name you would like data from
     * @param {String} [ifNoneMatch] ETag from a previous request. A 304 will be returned if this matches the current ETag
     * @param {module:model/String} [language = 'en-us')] Language to use in the response, takes precedence over Accept-Language
     * @param {Boolean} [strict = false)] Whether the search should be a strict match
     * @param {String} [token] Access token to use if unable to set a header
     * @param {module:api/SearchApi~getCharactersCharacterIdSearchCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/GetCharactersCharacterIdSearchOk}
     */
    getCharactersCharacterIdSearch(categories, characterId, search, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'categories' is set
      if (categories === undefined || categories === null) {
        throw new Error("Missing the required parameter 'categories' when calling getCharactersCharacterIdSearch");
      }
      // verify the required parameter 'characterId' is set
      if (characterId === undefined || characterId === null) {
        throw new Error("Missing the required parameter 'characterId' when calling getCharactersCharacterIdSearch");
      }
      // verify the required parameter 'search' is set
      if (search === undefined || search === null) {
        throw new Error("Missing the required parameter 'search' when calling getCharactersCharacterIdSearch");
      }

      let pathParams = {
        'character_id': characterId
      };
      let queryParams = {
        'categories': this.apiClient.buildCollectionParam(categories, 'csv'),
        'datasource': opts['datasource'],
        'language': opts['language'],
        'search': search,
        'strict': opts['strict'],
        'token': opts['token']
      };
      let headerParams = {
        'Accept-Language': opts['acceptLanguage'],
        'If-None-Match': opts['ifNoneMatch']
      };
      let formParams = {
      };

      let authNames = ['evesso'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = GetCharactersCharacterIdSearchOk;
      return this.apiClient.callApi(
        '/characters/{character_id}/search/', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getSearch operation.
     * @callback module:api/SearchApi~getSearchCallback
     * @param {String} error Error message, if any.
     * @param {module:model/GetSearchOk} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Search on a string
     * Search for entities that match a given sub-string.  --- Alternate route: `/dev/search/`  Alternate route: `/v2/search/`  --- This route is cached for up to 3600 seconds
     * @param {Array.<module:model/String>} categories Type of entities to search for
     * @param {String} search The string to search on
     * @param {Object} opts Optional parameters
     * @param {module:model/String} [acceptLanguage = 'en-us')] Language to use in the response
     * @param {module:model/String} [datasource = 'tranquility')] The server name you would like data from
     * @param {String} [ifNoneMatch] ETag from a previous request. A 304 will be returned if this matches the current ETag
     * @param {module:model/String} [language = 'en-us')] Language to use in the response, takes precedence over Accept-Language
     * @param {Boolean} [strict = false)] Whether the search should be a strict match
     * @param {module:api/SearchApi~getSearchCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/GetSearchOk}
     */
    getSearch(categories, search, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'categories' is set
      if (categories === undefined || categories === null) {
        throw new Error("Missing the required parameter 'categories' when calling getSearch");
      }
      // verify the required parameter 'search' is set
      if (search === undefined || search === null) {
        throw new Error("Missing the required parameter 'search' when calling getSearch");
      }

      let pathParams = {
      };
      let queryParams = {
        'categories': this.apiClient.buildCollectionParam(categories, 'csv'),
        'datasource': opts['datasource'],
        'language': opts['language'],
        'search': search,
        'strict': opts['strict']
      };
      let headerParams = {
        'Accept-Language': opts['acceptLanguage'],
        'If-None-Match': opts['ifNoneMatch']
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = GetSearchOk;
      return this.apiClient.callApi(
        '/search/', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
