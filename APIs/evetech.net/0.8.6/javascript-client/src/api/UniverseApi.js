/**
 * EVE Swagger Interface
 * An OpenAPI for EVE Online
 *
 * The version of the OpenAPI document: 0.8.6
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import BadRequest from '../model/BadRequest';
import ErrorLimited from '../model/ErrorLimited';
import Forbidden from '../model/Forbidden';
import GatewayTimeout from '../model/GatewayTimeout';
import GetUniverseAncestries200Ok from '../model/GetUniverseAncestries200Ok';
import GetUniverseAsteroidBeltsAsteroidBeltIdNotFound from '../model/GetUniverseAsteroidBeltsAsteroidBeltIdNotFound';
import GetUniverseAsteroidBeltsAsteroidBeltIdOk from '../model/GetUniverseAsteroidBeltsAsteroidBeltIdOk';
import GetUniverseBloodlines200Ok from '../model/GetUniverseBloodlines200Ok';
import GetUniverseCategoriesCategoryIdNotFound from '../model/GetUniverseCategoriesCategoryIdNotFound';
import GetUniverseCategoriesCategoryIdOk from '../model/GetUniverseCategoriesCategoryIdOk';
import GetUniverseConstellationsConstellationIdNotFound from '../model/GetUniverseConstellationsConstellationIdNotFound';
import GetUniverseConstellationsConstellationIdOk from '../model/GetUniverseConstellationsConstellationIdOk';
import GetUniverseFactions200Ok from '../model/GetUniverseFactions200Ok';
import GetUniverseGraphicsGraphicIdNotFound from '../model/GetUniverseGraphicsGraphicIdNotFound';
import GetUniverseGraphicsGraphicIdOk from '../model/GetUniverseGraphicsGraphicIdOk';
import GetUniverseGroupsGroupIdNotFound from '../model/GetUniverseGroupsGroupIdNotFound';
import GetUniverseGroupsGroupIdOk from '../model/GetUniverseGroupsGroupIdOk';
import GetUniverseMoonsMoonIdNotFound from '../model/GetUniverseMoonsMoonIdNotFound';
import GetUniverseMoonsMoonIdOk from '../model/GetUniverseMoonsMoonIdOk';
import GetUniversePlanetsPlanetIdNotFound from '../model/GetUniversePlanetsPlanetIdNotFound';
import GetUniversePlanetsPlanetIdOk from '../model/GetUniversePlanetsPlanetIdOk';
import GetUniverseRaces200Ok from '../model/GetUniverseRaces200Ok';
import GetUniverseRegionsRegionIdNotFound from '../model/GetUniverseRegionsRegionIdNotFound';
import GetUniverseRegionsRegionIdOk from '../model/GetUniverseRegionsRegionIdOk';
import GetUniverseStargatesStargateIdNotFound from '../model/GetUniverseStargatesStargateIdNotFound';
import GetUniverseStargatesStargateIdOk from '../model/GetUniverseStargatesStargateIdOk';
import GetUniverseStarsStarIdOk from '../model/GetUniverseStarsStarIdOk';
import GetUniverseStationsStationIdNotFound from '../model/GetUniverseStationsStationIdNotFound';
import GetUniverseStationsStationIdOk from '../model/GetUniverseStationsStationIdOk';
import GetUniverseStructuresStructureIdNotFound from '../model/GetUniverseStructuresStructureIdNotFound';
import GetUniverseStructuresStructureIdOk from '../model/GetUniverseStructuresStructureIdOk';
import GetUniverseSystemJumps200Ok from '../model/GetUniverseSystemJumps200Ok';
import GetUniverseSystemKills200Ok from '../model/GetUniverseSystemKills200Ok';
import GetUniverseSystemsSystemIdNotFound from '../model/GetUniverseSystemsSystemIdNotFound';
import GetUniverseSystemsSystemIdOk from '../model/GetUniverseSystemsSystemIdOk';
import GetUniverseTypesTypeIdNotFound from '../model/GetUniverseTypesTypeIdNotFound';
import GetUniverseTypesTypeIdOk from '../model/GetUniverseTypesTypeIdOk';
import InternalServerError from '../model/InternalServerError';
import PostUniverseIdsOk from '../model/PostUniverseIdsOk';
import PostUniverseNames200Ok from '../model/PostUniverseNames200Ok';
import PostUniverseNamesNotFound from '../model/PostUniverseNamesNotFound';
import ServiceUnavailable from '../model/ServiceUnavailable';
import Unauthorized from '../model/Unauthorized';

/**
* Universe service.
* @module api/UniverseApi
* @version 0.8.6
*/
export default class UniverseApi {

    /**
    * Constructs a new UniverseApi. 
    * @alias module:api/UniverseApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the getUniverseAncestries operation.
     * @callback module:api/UniverseApi~getUniverseAncestriesCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/GetUniverseAncestries200Ok>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get ancestries
     * Get all character ancestries  --- Alternate route: `/dev/universe/ancestries/`  Alternate route: `/legacy/universe/ancestries/`  Alternate route: `/v1/universe/ancestries/`  --- This route expires daily at 11:05
     * @param {Object} opts Optional parameters
     * @param {module:model/String} [acceptLanguage = 'en-us')] Language to use in the response
     * @param {module:model/String} [datasource = 'tranquility')] The server name you would like data from
     * @param {String} [ifNoneMatch] ETag from a previous request. A 304 will be returned if this matches the current ETag
     * @param {module:model/String} [language = 'en-us')] Language to use in the response, takes precedence over Accept-Language
     * @param {module:api/UniverseApi~getUniverseAncestriesCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/GetUniverseAncestries200Ok>}
     */
    getUniverseAncestries(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'datasource': opts['datasource'],
        'language': opts['language']
      };
      let headerParams = {
        'Accept-Language': opts['acceptLanguage'],
        'If-None-Match': opts['ifNoneMatch']
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [GetUniverseAncestries200Ok];
      return this.apiClient.callApi(
        '/universe/ancestries/', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getUniverseAsteroidBeltsAsteroidBeltId operation.
     * @callback module:api/UniverseApi~getUniverseAsteroidBeltsAsteroidBeltIdCallback
     * @param {String} error Error message, if any.
     * @param {module:model/GetUniverseAsteroidBeltsAsteroidBeltIdOk} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get asteroid belt information
     * Get information on an asteroid belt  --- Alternate route: `/dev/universe/asteroid_belts/{asteroid_belt_id}/`  Alternate route: `/legacy/universe/asteroid_belts/{asteroid_belt_id}/`  Alternate route: `/v1/universe/asteroid_belts/{asteroid_belt_id}/`  --- This route expires daily at 11:05
     * @param {Number} asteroidBeltId asteroid_belt_id integer
     * @param {Object} opts Optional parameters
     * @param {module:model/String} [datasource = 'tranquility')] The server name you would like data from
     * @param {String} [ifNoneMatch] ETag from a previous request. A 304 will be returned if this matches the current ETag
     * @param {module:api/UniverseApi~getUniverseAsteroidBeltsAsteroidBeltIdCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/GetUniverseAsteroidBeltsAsteroidBeltIdOk}
     */
    getUniverseAsteroidBeltsAsteroidBeltId(asteroidBeltId, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'asteroidBeltId' is set
      if (asteroidBeltId === undefined || asteroidBeltId === null) {
        throw new Error("Missing the required parameter 'asteroidBeltId' when calling getUniverseAsteroidBeltsAsteroidBeltId");
      }

      let pathParams = {
        'asteroid_belt_id': asteroidBeltId
      };
      let queryParams = {
        'datasource': opts['datasource']
      };
      let headerParams = {
        'If-None-Match': opts['ifNoneMatch']
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = GetUniverseAsteroidBeltsAsteroidBeltIdOk;
      return this.apiClient.callApi(
        '/universe/asteroid_belts/{asteroid_belt_id}/', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getUniverseBloodlines operation.
     * @callback module:api/UniverseApi~getUniverseBloodlinesCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/GetUniverseBloodlines200Ok>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get bloodlines
     * Get a list of bloodlines  --- Alternate route: `/dev/universe/bloodlines/`  Alternate route: `/legacy/universe/bloodlines/`  Alternate route: `/v1/universe/bloodlines/`  --- This route expires daily at 11:05
     * @param {Object} opts Optional parameters
     * @param {module:model/String} [acceptLanguage = 'en-us')] Language to use in the response
     * @param {module:model/String} [datasource = 'tranquility')] The server name you would like data from
     * @param {String} [ifNoneMatch] ETag from a previous request. A 304 will be returned if this matches the current ETag
     * @param {module:model/String} [language = 'en-us')] Language to use in the response, takes precedence over Accept-Language
     * @param {module:api/UniverseApi~getUniverseBloodlinesCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/GetUniverseBloodlines200Ok>}
     */
    getUniverseBloodlines(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'datasource': opts['datasource'],
        'language': opts['language']
      };
      let headerParams = {
        'Accept-Language': opts['acceptLanguage'],
        'If-None-Match': opts['ifNoneMatch']
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [GetUniverseBloodlines200Ok];
      return this.apiClient.callApi(
        '/universe/bloodlines/', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getUniverseCategories operation.
     * @callback module:api/UniverseApi~getUniverseCategoriesCallback
     * @param {String} error Error message, if any.
     * @param {Array.<Number>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get item categories
     * Get a list of item categories  --- Alternate route: `/dev/universe/categories/`  Alternate route: `/legacy/universe/categories/`  Alternate route: `/v1/universe/categories/`  --- This route expires daily at 11:05
     * @param {Object} opts Optional parameters
     * @param {module:model/String} [datasource = 'tranquility')] The server name you would like data from
     * @param {String} [ifNoneMatch] ETag from a previous request. A 304 will be returned if this matches the current ETag
     * @param {module:api/UniverseApi~getUniverseCategoriesCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<Number>}
     */
    getUniverseCategories(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'datasource': opts['datasource']
      };
      let headerParams = {
        'If-None-Match': opts['ifNoneMatch']
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ['Number'];
      return this.apiClient.callApi(
        '/universe/categories/', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getUniverseCategoriesCategoryId operation.
     * @callback module:api/UniverseApi~getUniverseCategoriesCategoryIdCallback
     * @param {String} error Error message, if any.
     * @param {module:model/GetUniverseCategoriesCategoryIdOk} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get item category information
     * Get information of an item category  --- Alternate route: `/dev/universe/categories/{category_id}/`  Alternate route: `/legacy/universe/categories/{category_id}/`  Alternate route: `/v1/universe/categories/{category_id}/`  --- This route expires daily at 11:05
     * @param {Number} categoryId An Eve item category ID
     * @param {Object} opts Optional parameters
     * @param {module:model/String} [acceptLanguage = 'en-us')] Language to use in the response
     * @param {module:model/String} [datasource = 'tranquility')] The server name you would like data from
     * @param {String} [ifNoneMatch] ETag from a previous request. A 304 will be returned if this matches the current ETag
     * @param {module:model/String} [language = 'en-us')] Language to use in the response, takes precedence over Accept-Language
     * @param {module:api/UniverseApi~getUniverseCategoriesCategoryIdCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/GetUniverseCategoriesCategoryIdOk}
     */
    getUniverseCategoriesCategoryId(categoryId, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'categoryId' is set
      if (categoryId === undefined || categoryId === null) {
        throw new Error("Missing the required parameter 'categoryId' when calling getUniverseCategoriesCategoryId");
      }

      let pathParams = {
        'category_id': categoryId
      };
      let queryParams = {
        'datasource': opts['datasource'],
        'language': opts['language']
      };
      let headerParams = {
        'Accept-Language': opts['acceptLanguage'],
        'If-None-Match': opts['ifNoneMatch']
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = GetUniverseCategoriesCategoryIdOk;
      return this.apiClient.callApi(
        '/universe/categories/{category_id}/', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getUniverseConstellations operation.
     * @callback module:api/UniverseApi~getUniverseConstellationsCallback
     * @param {String} error Error message, if any.
     * @param {Array.<Number>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get constellations
     * Get a list of constellations  --- Alternate route: `/dev/universe/constellations/`  Alternate route: `/legacy/universe/constellations/`  Alternate route: `/v1/universe/constellations/`  --- This route expires daily at 11:05
     * @param {Object} opts Optional parameters
     * @param {module:model/String} [datasource = 'tranquility')] The server name you would like data from
     * @param {String} [ifNoneMatch] ETag from a previous request. A 304 will be returned if this matches the current ETag
     * @param {module:api/UniverseApi~getUniverseConstellationsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<Number>}
     */
    getUniverseConstellations(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'datasource': opts['datasource']
      };
      let headerParams = {
        'If-None-Match': opts['ifNoneMatch']
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ['Number'];
      return this.apiClient.callApi(
        '/universe/constellations/', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getUniverseConstellationsConstellationId operation.
     * @callback module:api/UniverseApi~getUniverseConstellationsConstellationIdCallback
     * @param {String} error Error message, if any.
     * @param {module:model/GetUniverseConstellationsConstellationIdOk} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get constellation information
     * Get information on a constellation  --- Alternate route: `/dev/universe/constellations/{constellation_id}/`  Alternate route: `/legacy/universe/constellations/{constellation_id}/`  Alternate route: `/v1/universe/constellations/{constellation_id}/`  --- This route expires daily at 11:05
     * @param {Number} constellationId constellation_id integer
     * @param {Object} opts Optional parameters
     * @param {module:model/String} [acceptLanguage = 'en-us')] Language to use in the response
     * @param {module:model/String} [datasource = 'tranquility')] The server name you would like data from
     * @param {String} [ifNoneMatch] ETag from a previous request. A 304 will be returned if this matches the current ETag
     * @param {module:model/String} [language = 'en-us')] Language to use in the response, takes precedence over Accept-Language
     * @param {module:api/UniverseApi~getUniverseConstellationsConstellationIdCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/GetUniverseConstellationsConstellationIdOk}
     */
    getUniverseConstellationsConstellationId(constellationId, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'constellationId' is set
      if (constellationId === undefined || constellationId === null) {
        throw new Error("Missing the required parameter 'constellationId' when calling getUniverseConstellationsConstellationId");
      }

      let pathParams = {
        'constellation_id': constellationId
      };
      let queryParams = {
        'datasource': opts['datasource'],
        'language': opts['language']
      };
      let headerParams = {
        'Accept-Language': opts['acceptLanguage'],
        'If-None-Match': opts['ifNoneMatch']
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = GetUniverseConstellationsConstellationIdOk;
      return this.apiClient.callApi(
        '/universe/constellations/{constellation_id}/', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getUniverseFactions operation.
     * @callback module:api/UniverseApi~getUniverseFactionsCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/GetUniverseFactions200Ok>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get factions
     * Get a list of factions  --- Alternate route: `/dev/universe/factions/`  Alternate route: `/v2/universe/factions/`  --- This route expires daily at 11:05
     * @param {Object} opts Optional parameters
     * @param {module:model/String} [acceptLanguage = 'en-us')] Language to use in the response
     * @param {module:model/String} [datasource = 'tranquility')] The server name you would like data from
     * @param {String} [ifNoneMatch] ETag from a previous request. A 304 will be returned if this matches the current ETag
     * @param {module:model/String} [language = 'en-us')] Language to use in the response, takes precedence over Accept-Language
     * @param {module:api/UniverseApi~getUniverseFactionsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/GetUniverseFactions200Ok>}
     */
    getUniverseFactions(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'datasource': opts['datasource'],
        'language': opts['language']
      };
      let headerParams = {
        'Accept-Language': opts['acceptLanguage'],
        'If-None-Match': opts['ifNoneMatch']
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [GetUniverseFactions200Ok];
      return this.apiClient.callApi(
        '/universe/factions/', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getUniverseGraphics operation.
     * @callback module:api/UniverseApi~getUniverseGraphicsCallback
     * @param {String} error Error message, if any.
     * @param {Array.<Number>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get graphics
     * Get a list of graphics  --- Alternate route: `/dev/universe/graphics/`  Alternate route: `/legacy/universe/graphics/`  Alternate route: `/v1/universe/graphics/`  --- This route expires daily at 11:05
     * @param {Object} opts Optional parameters
     * @param {module:model/String} [datasource = 'tranquility')] The server name you would like data from
     * @param {String} [ifNoneMatch] ETag from a previous request. A 304 will be returned if this matches the current ETag
     * @param {module:api/UniverseApi~getUniverseGraphicsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<Number>}
     */
    getUniverseGraphics(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'datasource': opts['datasource']
      };
      let headerParams = {
        'If-None-Match': opts['ifNoneMatch']
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ['Number'];
      return this.apiClient.callApi(
        '/universe/graphics/', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getUniverseGraphicsGraphicId operation.
     * @callback module:api/UniverseApi~getUniverseGraphicsGraphicIdCallback
     * @param {String} error Error message, if any.
     * @param {module:model/GetUniverseGraphicsGraphicIdOk} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get graphic information
     * Get information on a graphic  --- Alternate route: `/dev/universe/graphics/{graphic_id}/`  Alternate route: `/legacy/universe/graphics/{graphic_id}/`  Alternate route: `/v1/universe/graphics/{graphic_id}/`  --- This route expires daily at 11:05
     * @param {Number} graphicId graphic_id integer
     * @param {Object} opts Optional parameters
     * @param {module:model/String} [datasource = 'tranquility')] The server name you would like data from
     * @param {String} [ifNoneMatch] ETag from a previous request. A 304 will be returned if this matches the current ETag
     * @param {module:api/UniverseApi~getUniverseGraphicsGraphicIdCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/GetUniverseGraphicsGraphicIdOk}
     */
    getUniverseGraphicsGraphicId(graphicId, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'graphicId' is set
      if (graphicId === undefined || graphicId === null) {
        throw new Error("Missing the required parameter 'graphicId' when calling getUniverseGraphicsGraphicId");
      }

      let pathParams = {
        'graphic_id': graphicId
      };
      let queryParams = {
        'datasource': opts['datasource']
      };
      let headerParams = {
        'If-None-Match': opts['ifNoneMatch']
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = GetUniverseGraphicsGraphicIdOk;
      return this.apiClient.callApi(
        '/universe/graphics/{graphic_id}/', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getUniverseGroups operation.
     * @callback module:api/UniverseApi~getUniverseGroupsCallback
     * @param {String} error Error message, if any.
     * @param {Array.<Number>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get item groups
     * Get a list of item groups  --- Alternate route: `/dev/universe/groups/`  Alternate route: `/legacy/universe/groups/`  Alternate route: `/v1/universe/groups/`  --- This route expires daily at 11:05
     * @param {Object} opts Optional parameters
     * @param {module:model/String} [datasource = 'tranquility')] The server name you would like data from
     * @param {String} [ifNoneMatch] ETag from a previous request. A 304 will be returned if this matches the current ETag
     * @param {Number} [page = 1)] Which page of results to return
     * @param {module:api/UniverseApi~getUniverseGroupsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<Number>}
     */
    getUniverseGroups(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'datasource': opts['datasource'],
        'page': opts['page']
      };
      let headerParams = {
        'If-None-Match': opts['ifNoneMatch']
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ['Number'];
      return this.apiClient.callApi(
        '/universe/groups/', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getUniverseGroupsGroupId operation.
     * @callback module:api/UniverseApi~getUniverseGroupsGroupIdCallback
     * @param {String} error Error message, if any.
     * @param {module:model/GetUniverseGroupsGroupIdOk} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get item group information
     * Get information on an item group  --- Alternate route: `/dev/universe/groups/{group_id}/`  Alternate route: `/legacy/universe/groups/{group_id}/`  Alternate route: `/v1/universe/groups/{group_id}/`  --- This route expires daily at 11:05
     * @param {Number} groupId An Eve item group ID
     * @param {Object} opts Optional parameters
     * @param {module:model/String} [acceptLanguage = 'en-us')] Language to use in the response
     * @param {module:model/String} [datasource = 'tranquility')] The server name you would like data from
     * @param {String} [ifNoneMatch] ETag from a previous request. A 304 will be returned if this matches the current ETag
     * @param {module:model/String} [language = 'en-us')] Language to use in the response, takes precedence over Accept-Language
     * @param {module:api/UniverseApi~getUniverseGroupsGroupIdCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/GetUniverseGroupsGroupIdOk}
     */
    getUniverseGroupsGroupId(groupId, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'groupId' is set
      if (groupId === undefined || groupId === null) {
        throw new Error("Missing the required parameter 'groupId' when calling getUniverseGroupsGroupId");
      }

      let pathParams = {
        'group_id': groupId
      };
      let queryParams = {
        'datasource': opts['datasource'],
        'language': opts['language']
      };
      let headerParams = {
        'Accept-Language': opts['acceptLanguage'],
        'If-None-Match': opts['ifNoneMatch']
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = GetUniverseGroupsGroupIdOk;
      return this.apiClient.callApi(
        '/universe/groups/{group_id}/', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getUniverseMoonsMoonId operation.
     * @callback module:api/UniverseApi~getUniverseMoonsMoonIdCallback
     * @param {String} error Error message, if any.
     * @param {module:model/GetUniverseMoonsMoonIdOk} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get moon information
     * Get information on a moon  --- Alternate route: `/dev/universe/moons/{moon_id}/`  Alternate route: `/legacy/universe/moons/{moon_id}/`  Alternate route: `/v1/universe/moons/{moon_id}/`  --- This route expires daily at 11:05
     * @param {Number} moonId moon_id integer
     * @param {Object} opts Optional parameters
     * @param {module:model/String} [datasource = 'tranquility')] The server name you would like data from
     * @param {String} [ifNoneMatch] ETag from a previous request. A 304 will be returned if this matches the current ETag
     * @param {module:api/UniverseApi~getUniverseMoonsMoonIdCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/GetUniverseMoonsMoonIdOk}
     */
    getUniverseMoonsMoonId(moonId, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'moonId' is set
      if (moonId === undefined || moonId === null) {
        throw new Error("Missing the required parameter 'moonId' when calling getUniverseMoonsMoonId");
      }

      let pathParams = {
        'moon_id': moonId
      };
      let queryParams = {
        'datasource': opts['datasource']
      };
      let headerParams = {
        'If-None-Match': opts['ifNoneMatch']
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = GetUniverseMoonsMoonIdOk;
      return this.apiClient.callApi(
        '/universe/moons/{moon_id}/', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getUniversePlanetsPlanetId operation.
     * @callback module:api/UniverseApi~getUniversePlanetsPlanetIdCallback
     * @param {String} error Error message, if any.
     * @param {module:model/GetUniversePlanetsPlanetIdOk} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get planet information
     * Get information on a planet  --- Alternate route: `/dev/universe/planets/{planet_id}/`  Alternate route: `/legacy/universe/planets/{planet_id}/`  Alternate route: `/v1/universe/planets/{planet_id}/`  --- This route expires daily at 11:05
     * @param {Number} planetId planet_id integer
     * @param {Object} opts Optional parameters
     * @param {module:model/String} [datasource = 'tranquility')] The server name you would like data from
     * @param {String} [ifNoneMatch] ETag from a previous request. A 304 will be returned if this matches the current ETag
     * @param {module:api/UniverseApi~getUniversePlanetsPlanetIdCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/GetUniversePlanetsPlanetIdOk}
     */
    getUniversePlanetsPlanetId(planetId, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'planetId' is set
      if (planetId === undefined || planetId === null) {
        throw new Error("Missing the required parameter 'planetId' when calling getUniversePlanetsPlanetId");
      }

      let pathParams = {
        'planet_id': planetId
      };
      let queryParams = {
        'datasource': opts['datasource']
      };
      let headerParams = {
        'If-None-Match': opts['ifNoneMatch']
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = GetUniversePlanetsPlanetIdOk;
      return this.apiClient.callApi(
        '/universe/planets/{planet_id}/', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getUniverseRaces operation.
     * @callback module:api/UniverseApi~getUniverseRacesCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/GetUniverseRaces200Ok>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get character races
     * Get a list of character races  --- Alternate route: `/dev/universe/races/`  Alternate route: `/legacy/universe/races/`  Alternate route: `/v1/universe/races/`  --- This route expires daily at 11:05
     * @param {Object} opts Optional parameters
     * @param {module:model/String} [acceptLanguage = 'en-us')] Language to use in the response
     * @param {module:model/String} [datasource = 'tranquility')] The server name you would like data from
     * @param {String} [ifNoneMatch] ETag from a previous request. A 304 will be returned if this matches the current ETag
     * @param {module:model/String} [language = 'en-us')] Language to use in the response, takes precedence over Accept-Language
     * @param {module:api/UniverseApi~getUniverseRacesCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/GetUniverseRaces200Ok>}
     */
    getUniverseRaces(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'datasource': opts['datasource'],
        'language': opts['language']
      };
      let headerParams = {
        'Accept-Language': opts['acceptLanguage'],
        'If-None-Match': opts['ifNoneMatch']
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [GetUniverseRaces200Ok];
      return this.apiClient.callApi(
        '/universe/races/', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getUniverseRegions operation.
     * @callback module:api/UniverseApi~getUniverseRegionsCallback
     * @param {String} error Error message, if any.
     * @param {Array.<Number>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get regions
     * Get a list of regions  --- Alternate route: `/dev/universe/regions/`  Alternate route: `/legacy/universe/regions/`  Alternate route: `/v1/universe/regions/`  --- This route expires daily at 11:05
     * @param {Object} opts Optional parameters
     * @param {module:model/String} [datasource = 'tranquility')] The server name you would like data from
     * @param {String} [ifNoneMatch] ETag from a previous request. A 304 will be returned if this matches the current ETag
     * @param {module:api/UniverseApi~getUniverseRegionsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<Number>}
     */
    getUniverseRegions(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'datasource': opts['datasource']
      };
      let headerParams = {
        'If-None-Match': opts['ifNoneMatch']
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ['Number'];
      return this.apiClient.callApi(
        '/universe/regions/', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getUniverseRegionsRegionId operation.
     * @callback module:api/UniverseApi~getUniverseRegionsRegionIdCallback
     * @param {String} error Error message, if any.
     * @param {module:model/GetUniverseRegionsRegionIdOk} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get region information
     * Get information on a region  --- Alternate route: `/dev/universe/regions/{region_id}/`  Alternate route: `/legacy/universe/regions/{region_id}/`  Alternate route: `/v1/universe/regions/{region_id}/`  --- This route expires daily at 11:05
     * @param {Number} regionId region_id integer
     * @param {Object} opts Optional parameters
     * @param {module:model/String} [acceptLanguage = 'en-us')] Language to use in the response
     * @param {module:model/String} [datasource = 'tranquility')] The server name you would like data from
     * @param {String} [ifNoneMatch] ETag from a previous request. A 304 will be returned if this matches the current ETag
     * @param {module:model/String} [language = 'en-us')] Language to use in the response, takes precedence over Accept-Language
     * @param {module:api/UniverseApi~getUniverseRegionsRegionIdCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/GetUniverseRegionsRegionIdOk}
     */
    getUniverseRegionsRegionId(regionId, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'regionId' is set
      if (regionId === undefined || regionId === null) {
        throw new Error("Missing the required parameter 'regionId' when calling getUniverseRegionsRegionId");
      }

      let pathParams = {
        'region_id': regionId
      };
      let queryParams = {
        'datasource': opts['datasource'],
        'language': opts['language']
      };
      let headerParams = {
        'Accept-Language': opts['acceptLanguage'],
        'If-None-Match': opts['ifNoneMatch']
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = GetUniverseRegionsRegionIdOk;
      return this.apiClient.callApi(
        '/universe/regions/{region_id}/', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getUniverseStargatesStargateId operation.
     * @callback module:api/UniverseApi~getUniverseStargatesStargateIdCallback
     * @param {String} error Error message, if any.
     * @param {module:model/GetUniverseStargatesStargateIdOk} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get stargate information
     * Get information on a stargate  --- Alternate route: `/dev/universe/stargates/{stargate_id}/`  Alternate route: `/legacy/universe/stargates/{stargate_id}/`  Alternate route: `/v1/universe/stargates/{stargate_id}/`  --- This route expires daily at 11:05
     * @param {Number} stargateId stargate_id integer
     * @param {Object} opts Optional parameters
     * @param {module:model/String} [datasource = 'tranquility')] The server name you would like data from
     * @param {String} [ifNoneMatch] ETag from a previous request. A 304 will be returned if this matches the current ETag
     * @param {module:api/UniverseApi~getUniverseStargatesStargateIdCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/GetUniverseStargatesStargateIdOk}
     */
    getUniverseStargatesStargateId(stargateId, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'stargateId' is set
      if (stargateId === undefined || stargateId === null) {
        throw new Error("Missing the required parameter 'stargateId' when calling getUniverseStargatesStargateId");
      }

      let pathParams = {
        'stargate_id': stargateId
      };
      let queryParams = {
        'datasource': opts['datasource']
      };
      let headerParams = {
        'If-None-Match': opts['ifNoneMatch']
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = GetUniverseStargatesStargateIdOk;
      return this.apiClient.callApi(
        '/universe/stargates/{stargate_id}/', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getUniverseStarsStarId operation.
     * @callback module:api/UniverseApi~getUniverseStarsStarIdCallback
     * @param {String} error Error message, if any.
     * @param {module:model/GetUniverseStarsStarIdOk} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get star information
     * Get information on a star  --- Alternate route: `/dev/universe/stars/{star_id}/`  Alternate route: `/legacy/universe/stars/{star_id}/`  Alternate route: `/v1/universe/stars/{star_id}/`  --- This route expires daily at 11:05
     * @param {Number} starId star_id integer
     * @param {Object} opts Optional parameters
     * @param {module:model/String} [datasource = 'tranquility')] The server name you would like data from
     * @param {String} [ifNoneMatch] ETag from a previous request. A 304 will be returned if this matches the current ETag
     * @param {module:api/UniverseApi~getUniverseStarsStarIdCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/GetUniverseStarsStarIdOk}
     */
    getUniverseStarsStarId(starId, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'starId' is set
      if (starId === undefined || starId === null) {
        throw new Error("Missing the required parameter 'starId' when calling getUniverseStarsStarId");
      }

      let pathParams = {
        'star_id': starId
      };
      let queryParams = {
        'datasource': opts['datasource']
      };
      let headerParams = {
        'If-None-Match': opts['ifNoneMatch']
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = GetUniverseStarsStarIdOk;
      return this.apiClient.callApi(
        '/universe/stars/{star_id}/', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getUniverseStationsStationId operation.
     * @callback module:api/UniverseApi~getUniverseStationsStationIdCallback
     * @param {String} error Error message, if any.
     * @param {module:model/GetUniverseStationsStationIdOk} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get station information
     * Get information on a station  --- Alternate route: `/dev/universe/stations/{station_id}/`  Alternate route: `/v2/universe/stations/{station_id}/`  --- This route expires daily at 11:05
     * @param {Number} stationId station_id integer
     * @param {Object} opts Optional parameters
     * @param {module:model/String} [datasource = 'tranquility')] The server name you would like data from
     * @param {String} [ifNoneMatch] ETag from a previous request. A 304 will be returned if this matches the current ETag
     * @param {module:api/UniverseApi~getUniverseStationsStationIdCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/GetUniverseStationsStationIdOk}
     */
    getUniverseStationsStationId(stationId, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'stationId' is set
      if (stationId === undefined || stationId === null) {
        throw new Error("Missing the required parameter 'stationId' when calling getUniverseStationsStationId");
      }

      let pathParams = {
        'station_id': stationId
      };
      let queryParams = {
        'datasource': opts['datasource']
      };
      let headerParams = {
        'If-None-Match': opts['ifNoneMatch']
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = GetUniverseStationsStationIdOk;
      return this.apiClient.callApi(
        '/universe/stations/{station_id}/', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getUniverseStructures operation.
     * @callback module:api/UniverseApi~getUniverseStructuresCallback
     * @param {String} error Error message, if any.
     * @param {Array.<Number>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * List all public structures
     * List all public structures  --- Alternate route: `/dev/universe/structures/`  Alternate route: `/legacy/universe/structures/`  Alternate route: `/v1/universe/structures/`  --- This route is cached for up to 3600 seconds
     * @param {Object} opts Optional parameters
     * @param {module:model/String} [datasource = 'tranquility')] The server name you would like data from
     * @param {module:model/String} [filter] Only list public structures that have this service online
     * @param {String} [ifNoneMatch] ETag from a previous request. A 304 will be returned if this matches the current ETag
     * @param {module:api/UniverseApi~getUniverseStructuresCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<Number>}
     */
    getUniverseStructures(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'datasource': opts['datasource'],
        'filter': opts['filter']
      };
      let headerParams = {
        'If-None-Match': opts['ifNoneMatch']
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ['Number'];
      return this.apiClient.callApi(
        '/universe/structures/', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getUniverseStructuresStructureId operation.
     * @callback module:api/UniverseApi~getUniverseStructuresStructureIdCallback
     * @param {String} error Error message, if any.
     * @param {module:model/GetUniverseStructuresStructureIdOk} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get structure information
     * Returns information on requested structure if you are on the ACL. Otherwise, returns \"Forbidden\" for all inputs.  --- Alternate route: `/dev/universe/structures/{structure_id}/`  Alternate route: `/v2/universe/structures/{structure_id}/`  --- This route is cached for up to 3600 seconds
     * @param {Number} structureId An Eve structure ID
     * @param {Object} opts Optional parameters
     * @param {module:model/String} [datasource = 'tranquility')] The server name you would like data from
     * @param {String} [ifNoneMatch] ETag from a previous request. A 304 will be returned if this matches the current ETag
     * @param {String} [token] Access token to use if unable to set a header
     * @param {module:api/UniverseApi~getUniverseStructuresStructureIdCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/GetUniverseStructuresStructureIdOk}
     */
    getUniverseStructuresStructureId(structureId, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'structureId' is set
      if (structureId === undefined || structureId === null) {
        throw new Error("Missing the required parameter 'structureId' when calling getUniverseStructuresStructureId");
      }

      let pathParams = {
        'structure_id': structureId
      };
      let queryParams = {
        'datasource': opts['datasource'],
        'token': opts['token']
      };
      let headerParams = {
        'If-None-Match': opts['ifNoneMatch']
      };
      let formParams = {
      };

      let authNames = ['evesso'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = GetUniverseStructuresStructureIdOk;
      return this.apiClient.callApi(
        '/universe/structures/{structure_id}/', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getUniverseSystemJumps operation.
     * @callback module:api/UniverseApi~getUniverseSystemJumpsCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/GetUniverseSystemJumps200Ok>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get system jumps
     * Get the number of jumps in solar systems within the last hour ending at the timestamp of the Last-Modified header, excluding wormhole space. Only systems with jumps will be listed  --- Alternate route: `/dev/universe/system_jumps/`  Alternate route: `/legacy/universe/system_jumps/`  Alternate route: `/v1/universe/system_jumps/`  --- This route is cached for up to 3600 seconds
     * @param {Object} opts Optional parameters
     * @param {module:model/String} [datasource = 'tranquility')] The server name you would like data from
     * @param {String} [ifNoneMatch] ETag from a previous request. A 304 will be returned if this matches the current ETag
     * @param {module:api/UniverseApi~getUniverseSystemJumpsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/GetUniverseSystemJumps200Ok>}
     */
    getUniverseSystemJumps(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'datasource': opts['datasource']
      };
      let headerParams = {
        'If-None-Match': opts['ifNoneMatch']
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [GetUniverseSystemJumps200Ok];
      return this.apiClient.callApi(
        '/universe/system_jumps/', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getUniverseSystemKills operation.
     * @callback module:api/UniverseApi~getUniverseSystemKillsCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/GetUniverseSystemKills200Ok>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get system kills
     * Get the number of ship, pod and NPC kills per solar system within the last hour ending at the timestamp of the Last-Modified header, excluding wormhole space. Only systems with kills will be listed  --- Alternate route: `/dev/universe/system_kills/`  Alternate route: `/v2/universe/system_kills/`  --- This route is cached for up to 3600 seconds
     * @param {Object} opts Optional parameters
     * @param {module:model/String} [datasource = 'tranquility')] The server name you would like data from
     * @param {String} [ifNoneMatch] ETag from a previous request. A 304 will be returned if this matches the current ETag
     * @param {module:api/UniverseApi~getUniverseSystemKillsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/GetUniverseSystemKills200Ok>}
     */
    getUniverseSystemKills(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'datasource': opts['datasource']
      };
      let headerParams = {
        'If-None-Match': opts['ifNoneMatch']
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [GetUniverseSystemKills200Ok];
      return this.apiClient.callApi(
        '/universe/system_kills/', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getUniverseSystems operation.
     * @callback module:api/UniverseApi~getUniverseSystemsCallback
     * @param {String} error Error message, if any.
     * @param {Array.<Number>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get solar systems
     * Get a list of solar systems  --- Alternate route: `/dev/universe/systems/`  Alternate route: `/legacy/universe/systems/`  Alternate route: `/v1/universe/systems/`  --- This route expires daily at 11:05
     * @param {Object} opts Optional parameters
     * @param {module:model/String} [datasource = 'tranquility')] The server name you would like data from
     * @param {String} [ifNoneMatch] ETag from a previous request. A 304 will be returned if this matches the current ETag
     * @param {module:api/UniverseApi~getUniverseSystemsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<Number>}
     */
    getUniverseSystems(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'datasource': opts['datasource']
      };
      let headerParams = {
        'If-None-Match': opts['ifNoneMatch']
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ['Number'];
      return this.apiClient.callApi(
        '/universe/systems/', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getUniverseSystemsSystemId operation.
     * @callback module:api/UniverseApi~getUniverseSystemsSystemIdCallback
     * @param {String} error Error message, if any.
     * @param {module:model/GetUniverseSystemsSystemIdOk} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get solar system information
     * Get information on a solar system.  --- Alternate route: `/dev/universe/systems/{system_id}/`  Alternate route: `/v4/universe/systems/{system_id}/`  --- This route expires daily at 11:05
     * @param {Number} systemId system_id integer
     * @param {Object} opts Optional parameters
     * @param {module:model/String} [acceptLanguage = 'en-us')] Language to use in the response
     * @param {module:model/String} [datasource = 'tranquility')] The server name you would like data from
     * @param {String} [ifNoneMatch] ETag from a previous request. A 304 will be returned if this matches the current ETag
     * @param {module:model/String} [language = 'en-us')] Language to use in the response, takes precedence over Accept-Language
     * @param {module:api/UniverseApi~getUniverseSystemsSystemIdCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/GetUniverseSystemsSystemIdOk}
     */
    getUniverseSystemsSystemId(systemId, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'systemId' is set
      if (systemId === undefined || systemId === null) {
        throw new Error("Missing the required parameter 'systemId' when calling getUniverseSystemsSystemId");
      }

      let pathParams = {
        'system_id': systemId
      };
      let queryParams = {
        'datasource': opts['datasource'],
        'language': opts['language']
      };
      let headerParams = {
        'Accept-Language': opts['acceptLanguage'],
        'If-None-Match': opts['ifNoneMatch']
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = GetUniverseSystemsSystemIdOk;
      return this.apiClient.callApi(
        '/universe/systems/{system_id}/', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getUniverseTypes operation.
     * @callback module:api/UniverseApi~getUniverseTypesCallback
     * @param {String} error Error message, if any.
     * @param {Array.<Number>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get types
     * Get a list of type ids  --- Alternate route: `/dev/universe/types/`  Alternate route: `/legacy/universe/types/`  Alternate route: `/v1/universe/types/`  --- This route expires daily at 11:05
     * @param {Object} opts Optional parameters
     * @param {module:model/String} [datasource = 'tranquility')] The server name you would like data from
     * @param {String} [ifNoneMatch] ETag from a previous request. A 304 will be returned if this matches the current ETag
     * @param {Number} [page = 1)] Which page of results to return
     * @param {module:api/UniverseApi~getUniverseTypesCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<Number>}
     */
    getUniverseTypes(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'datasource': opts['datasource'],
        'page': opts['page']
      };
      let headerParams = {
        'If-None-Match': opts['ifNoneMatch']
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ['Number'];
      return this.apiClient.callApi(
        '/universe/types/', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getUniverseTypesTypeId operation.
     * @callback module:api/UniverseApi~getUniverseTypesTypeIdCallback
     * @param {String} error Error message, if any.
     * @param {module:model/GetUniverseTypesTypeIdOk} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get type information
     * Get information on a type  --- Alternate route: `/dev/universe/types/{type_id}/`  Alternate route: `/v3/universe/types/{type_id}/`  --- This route expires daily at 11:05
     * @param {Number} typeId An Eve item type ID
     * @param {Object} opts Optional parameters
     * @param {module:model/String} [acceptLanguage = 'en-us')] Language to use in the response
     * @param {module:model/String} [datasource = 'tranquility')] The server name you would like data from
     * @param {String} [ifNoneMatch] ETag from a previous request. A 304 will be returned if this matches the current ETag
     * @param {module:model/String} [language = 'en-us')] Language to use in the response, takes precedence over Accept-Language
     * @param {module:api/UniverseApi~getUniverseTypesTypeIdCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/GetUniverseTypesTypeIdOk}
     */
    getUniverseTypesTypeId(typeId, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'typeId' is set
      if (typeId === undefined || typeId === null) {
        throw new Error("Missing the required parameter 'typeId' when calling getUniverseTypesTypeId");
      }

      let pathParams = {
        'type_id': typeId
      };
      let queryParams = {
        'datasource': opts['datasource'],
        'language': opts['language']
      };
      let headerParams = {
        'Accept-Language': opts['acceptLanguage'],
        'If-None-Match': opts['ifNoneMatch']
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = GetUniverseTypesTypeIdOk;
      return this.apiClient.callApi(
        '/universe/types/{type_id}/', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the postUniverseIds operation.
     * @callback module:api/UniverseApi~postUniverseIdsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/PostUniverseIdsOk} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Bulk names to IDs
     * Resolve a set of names to IDs in the following categories: agents, alliances, characters, constellations, corporations factions, inventory_types, regions, stations, and systems. Only exact matches will be returned. All names searched for are cached for 12 hours  --- Alternate route: `/dev/universe/ids/`  Alternate route: `/legacy/universe/ids/`  Alternate route: `/v1/universe/ids/` 
     * @param {Array.<String>} names The names to resolve
     * @param {Object} opts Optional parameters
     * @param {module:model/String} [acceptLanguage = 'en-us')] Language to use in the response
     * @param {module:model/String} [datasource = 'tranquility')] The server name you would like data from
     * @param {module:model/String} [language = 'en-us')] Language to use in the response, takes precedence over Accept-Language
     * @param {module:api/UniverseApi~postUniverseIdsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/PostUniverseIdsOk}
     */
    postUniverseIds(names, opts, callback) {
      opts = opts || {};
      let postBody = names;
      // verify the required parameter 'names' is set
      if (names === undefined || names === null) {
        throw new Error("Missing the required parameter 'names' when calling postUniverseIds");
      }

      let pathParams = {
      };
      let queryParams = {
        'datasource': opts['datasource'],
        'language': opts['language']
      };
      let headerParams = {
        'Accept-Language': opts['acceptLanguage']
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = PostUniverseIdsOk;
      return this.apiClient.callApi(
        '/universe/ids/', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the postUniverseNames operation.
     * @callback module:api/UniverseApi~postUniverseNamesCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/PostUniverseNames200Ok>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get names and categories for a set of ID's
     * Resolve a set of IDs to names and categories. Supported ID's for resolving are: Characters, Corporations, Alliances, Stations, Solar Systems, Constellations, Regions, Types  --- Alternate route: `/dev/universe/names/`  Alternate route: `/v2/universe/names/` 
     * @param {Array.<Number>} ids The ids to resolve
     * @param {Object} opts Optional parameters
     * @param {module:model/String} [datasource = 'tranquility')] The server name you would like data from
     * @param {module:api/UniverseApi~postUniverseNamesCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/PostUniverseNames200Ok>}
     */
    postUniverseNames(ids, opts, callback) {
      opts = opts || {};
      let postBody = ids;
      // verify the required parameter 'ids' is set
      if (ids === undefined || ids === null) {
        throw new Error("Missing the required parameter 'ids' when calling postUniverseNames");
      }

      let pathParams = {
      };
      let queryParams = {
        'datasource': opts['datasource']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = [PostUniverseNames200Ok];
      return this.apiClient.callApi(
        '/universe/names/', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
