/**
 * EVE Swagger Interface
 * An OpenAPI for EVE Online
 *
 * The version of the OpenAPI document: 0.8.6
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import BadRequest from '../model/BadRequest';
import ErrorLimited from '../model/ErrorLimited';
import Forbidden from '../model/Forbidden';
import GatewayTimeout from '../model/GatewayTimeout';
import GetCharactersCharacterIdContracts200Ok from '../model/GetCharactersCharacterIdContracts200Ok';
import GetCharactersCharacterIdContractsContractIdBids200Ok from '../model/GetCharactersCharacterIdContractsContractIdBids200Ok';
import GetCharactersCharacterIdContractsContractIdBidsNotFound from '../model/GetCharactersCharacterIdContractsContractIdBidsNotFound';
import GetCharactersCharacterIdContractsContractIdItems200Ok from '../model/GetCharactersCharacterIdContractsContractIdItems200Ok';
import GetCharactersCharacterIdContractsContractIdItemsNotFound from '../model/GetCharactersCharacterIdContractsContractIdItemsNotFound';
import GetContractsPublicBidsContractId200Ok from '../model/GetContractsPublicBidsContractId200Ok';
import GetContractsPublicBidsContractIdForbidden from '../model/GetContractsPublicBidsContractIdForbidden';
import GetContractsPublicBidsContractIdNotFound from '../model/GetContractsPublicBidsContractIdNotFound';
import GetContractsPublicItemsContractId200Ok from '../model/GetContractsPublicItemsContractId200Ok';
import GetContractsPublicItemsContractIdForbidden from '../model/GetContractsPublicItemsContractIdForbidden';
import GetContractsPublicItemsContractIdNotFound from '../model/GetContractsPublicItemsContractIdNotFound';
import GetContractsPublicRegionId200Ok from '../model/GetContractsPublicRegionId200Ok';
import GetContractsPublicRegionIdNotFound from '../model/GetContractsPublicRegionIdNotFound';
import GetCorporationsCorporationIdContracts200Ok from '../model/GetCorporationsCorporationIdContracts200Ok';
import GetCorporationsCorporationIdContractsContractIdBids200Ok from '../model/GetCorporationsCorporationIdContractsContractIdBids200Ok';
import GetCorporationsCorporationIdContractsContractIdBidsNotFound from '../model/GetCorporationsCorporationIdContractsContractIdBidsNotFound';
import GetCorporationsCorporationIdContractsContractIdItems200Ok from '../model/GetCorporationsCorporationIdContractsContractIdItems200Ok';
import GetCorporationsCorporationIdContractsContractIdItemsError520 from '../model/GetCorporationsCorporationIdContractsContractIdItemsError520';
import GetCorporationsCorporationIdContractsContractIdItemsNotFound from '../model/GetCorporationsCorporationIdContractsContractIdItemsNotFound';
import InternalServerError from '../model/InternalServerError';
import ServiceUnavailable from '../model/ServiceUnavailable';
import Unauthorized from '../model/Unauthorized';

/**
* Contracts service.
* @module api/ContractsApi
* @version 0.8.6
*/
export default class ContractsApi {

    /**
    * Constructs a new ContractsApi. 
    * @alias module:api/ContractsApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the getCharactersCharacterIdContracts operation.
     * @callback module:api/ContractsApi~getCharactersCharacterIdContractsCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/GetCharactersCharacterIdContracts200Ok>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get contracts
     * Returns contracts available to a character, only if the character is issuer, acceptor or assignee. Only returns contracts no older than 30 days, or if the status is \"in_progress\".  --- Alternate route: `/dev/characters/{character_id}/contracts/`  Alternate route: `/legacy/characters/{character_id}/contracts/`  Alternate route: `/v1/characters/{character_id}/contracts/`  --- This route is cached for up to 300 seconds
     * @param {Number} characterId An EVE character ID
     * @param {Object} opts Optional parameters
     * @param {module:model/String} [datasource = 'tranquility')] The server name you would like data from
     * @param {String} [ifNoneMatch] ETag from a previous request. A 304 will be returned if this matches the current ETag
     * @param {Number} [page = 1)] Which page of results to return
     * @param {String} [token] Access token to use if unable to set a header
     * @param {module:api/ContractsApi~getCharactersCharacterIdContractsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/GetCharactersCharacterIdContracts200Ok>}
     */
    getCharactersCharacterIdContracts(characterId, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'characterId' is set
      if (characterId === undefined || characterId === null) {
        throw new Error("Missing the required parameter 'characterId' when calling getCharactersCharacterIdContracts");
      }

      let pathParams = {
        'character_id': characterId
      };
      let queryParams = {
        'datasource': opts['datasource'],
        'page': opts['page'],
        'token': opts['token']
      };
      let headerParams = {
        'If-None-Match': opts['ifNoneMatch']
      };
      let formParams = {
      };

      let authNames = ['evesso'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [GetCharactersCharacterIdContracts200Ok];
      return this.apiClient.callApi(
        '/characters/{character_id}/contracts/', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getCharactersCharacterIdContractsContractIdBids operation.
     * @callback module:api/ContractsApi~getCharactersCharacterIdContractsContractIdBidsCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/GetCharactersCharacterIdContractsContractIdBids200Ok>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get contract bids
     * Lists bids on a particular auction contract  --- Alternate route: `/dev/characters/{character_id}/contracts/{contract_id}/bids/`  Alternate route: `/legacy/characters/{character_id}/contracts/{contract_id}/bids/`  Alternate route: `/v1/characters/{character_id}/contracts/{contract_id}/bids/`  --- This route is cached for up to 300 seconds
     * @param {Number} characterId An EVE character ID
     * @param {Number} contractId ID of a contract
     * @param {Object} opts Optional parameters
     * @param {module:model/String} [datasource = 'tranquility')] The server name you would like data from
     * @param {String} [ifNoneMatch] ETag from a previous request. A 304 will be returned if this matches the current ETag
     * @param {String} [token] Access token to use if unable to set a header
     * @param {module:api/ContractsApi~getCharactersCharacterIdContractsContractIdBidsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/GetCharactersCharacterIdContractsContractIdBids200Ok>}
     */
    getCharactersCharacterIdContractsContractIdBids(characterId, contractId, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'characterId' is set
      if (characterId === undefined || characterId === null) {
        throw new Error("Missing the required parameter 'characterId' when calling getCharactersCharacterIdContractsContractIdBids");
      }
      // verify the required parameter 'contractId' is set
      if (contractId === undefined || contractId === null) {
        throw new Error("Missing the required parameter 'contractId' when calling getCharactersCharacterIdContractsContractIdBids");
      }

      let pathParams = {
        'character_id': characterId,
        'contract_id': contractId
      };
      let queryParams = {
        'datasource': opts['datasource'],
        'token': opts['token']
      };
      let headerParams = {
        'If-None-Match': opts['ifNoneMatch']
      };
      let formParams = {
      };

      let authNames = ['evesso'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [GetCharactersCharacterIdContractsContractIdBids200Ok];
      return this.apiClient.callApi(
        '/characters/{character_id}/contracts/{contract_id}/bids/', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getCharactersCharacterIdContractsContractIdItems operation.
     * @callback module:api/ContractsApi~getCharactersCharacterIdContractsContractIdItemsCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/GetCharactersCharacterIdContractsContractIdItems200Ok>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get contract items
     * Lists items of a particular contract  --- Alternate route: `/dev/characters/{character_id}/contracts/{contract_id}/items/`  Alternate route: `/legacy/characters/{character_id}/contracts/{contract_id}/items/`  Alternate route: `/v1/characters/{character_id}/contracts/{contract_id}/items/`  --- This route is cached for up to 3600 seconds
     * @param {Number} characterId An EVE character ID
     * @param {Number} contractId ID of a contract
     * @param {Object} opts Optional parameters
     * @param {module:model/String} [datasource = 'tranquility')] The server name you would like data from
     * @param {String} [ifNoneMatch] ETag from a previous request. A 304 will be returned if this matches the current ETag
     * @param {String} [token] Access token to use if unable to set a header
     * @param {module:api/ContractsApi~getCharactersCharacterIdContractsContractIdItemsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/GetCharactersCharacterIdContractsContractIdItems200Ok>}
     */
    getCharactersCharacterIdContractsContractIdItems(characterId, contractId, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'characterId' is set
      if (characterId === undefined || characterId === null) {
        throw new Error("Missing the required parameter 'characterId' when calling getCharactersCharacterIdContractsContractIdItems");
      }
      // verify the required parameter 'contractId' is set
      if (contractId === undefined || contractId === null) {
        throw new Error("Missing the required parameter 'contractId' when calling getCharactersCharacterIdContractsContractIdItems");
      }

      let pathParams = {
        'character_id': characterId,
        'contract_id': contractId
      };
      let queryParams = {
        'datasource': opts['datasource'],
        'token': opts['token']
      };
      let headerParams = {
        'If-None-Match': opts['ifNoneMatch']
      };
      let formParams = {
      };

      let authNames = ['evesso'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [GetCharactersCharacterIdContractsContractIdItems200Ok];
      return this.apiClient.callApi(
        '/characters/{character_id}/contracts/{contract_id}/items/', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getContractsPublicBidsContractId operation.
     * @callback module:api/ContractsApi~getContractsPublicBidsContractIdCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/GetContractsPublicBidsContractId200Ok>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get public contract bids
     * Lists bids on a public auction contract  --- Alternate route: `/dev/contracts/public/bids/{contract_id}/`  Alternate route: `/legacy/contracts/public/bids/{contract_id}/`  Alternate route: `/v1/contracts/public/bids/{contract_id}/`  --- This route is cached for up to 300 seconds
     * @param {Number} contractId ID of a contract
     * @param {Object} opts Optional parameters
     * @param {module:model/String} [datasource = 'tranquility')] The server name you would like data from
     * @param {String} [ifNoneMatch] ETag from a previous request. A 304 will be returned if this matches the current ETag
     * @param {Number} [page = 1)] Which page of results to return
     * @param {module:api/ContractsApi~getContractsPublicBidsContractIdCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/GetContractsPublicBidsContractId200Ok>}
     */
    getContractsPublicBidsContractId(contractId, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'contractId' is set
      if (contractId === undefined || contractId === null) {
        throw new Error("Missing the required parameter 'contractId' when calling getContractsPublicBidsContractId");
      }

      let pathParams = {
        'contract_id': contractId
      };
      let queryParams = {
        'datasource': opts['datasource'],
        'page': opts['page']
      };
      let headerParams = {
        'If-None-Match': opts['ifNoneMatch']
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [GetContractsPublicBidsContractId200Ok];
      return this.apiClient.callApi(
        '/contracts/public/bids/{contract_id}/', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getContractsPublicItemsContractId operation.
     * @callback module:api/ContractsApi~getContractsPublicItemsContractIdCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/GetContractsPublicItemsContractId200Ok>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get public contract items
     * Lists items of a public contract  --- Alternate route: `/dev/contracts/public/items/{contract_id}/`  Alternate route: `/legacy/contracts/public/items/{contract_id}/`  Alternate route: `/v1/contracts/public/items/{contract_id}/`  --- This route is cached for up to 3600 seconds
     * @param {Number} contractId ID of a contract
     * @param {Object} opts Optional parameters
     * @param {module:model/String} [datasource = 'tranquility')] The server name you would like data from
     * @param {String} [ifNoneMatch] ETag from a previous request. A 304 will be returned if this matches the current ETag
     * @param {Number} [page = 1)] Which page of results to return
     * @param {module:api/ContractsApi~getContractsPublicItemsContractIdCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/GetContractsPublicItemsContractId200Ok>}
     */
    getContractsPublicItemsContractId(contractId, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'contractId' is set
      if (contractId === undefined || contractId === null) {
        throw new Error("Missing the required parameter 'contractId' when calling getContractsPublicItemsContractId");
      }

      let pathParams = {
        'contract_id': contractId
      };
      let queryParams = {
        'datasource': opts['datasource'],
        'page': opts['page']
      };
      let headerParams = {
        'If-None-Match': opts['ifNoneMatch']
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [GetContractsPublicItemsContractId200Ok];
      return this.apiClient.callApi(
        '/contracts/public/items/{contract_id}/', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getContractsPublicRegionId operation.
     * @callback module:api/ContractsApi~getContractsPublicRegionIdCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/GetContractsPublicRegionId200Ok>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get public contracts
     * Returns a paginated list of all public contracts in the given region  --- Alternate route: `/dev/contracts/public/{region_id}/`  Alternate route: `/legacy/contracts/public/{region_id}/`  Alternate route: `/v1/contracts/public/{region_id}/`  --- This route is cached for up to 1800 seconds
     * @param {Number} regionId An EVE region id
     * @param {Object} opts Optional parameters
     * @param {module:model/String} [datasource = 'tranquility')] The server name you would like data from
     * @param {String} [ifNoneMatch] ETag from a previous request. A 304 will be returned if this matches the current ETag
     * @param {Number} [page = 1)] Which page of results to return
     * @param {module:api/ContractsApi~getContractsPublicRegionIdCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/GetContractsPublicRegionId200Ok>}
     */
    getContractsPublicRegionId(regionId, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'regionId' is set
      if (regionId === undefined || regionId === null) {
        throw new Error("Missing the required parameter 'regionId' when calling getContractsPublicRegionId");
      }

      let pathParams = {
        'region_id': regionId
      };
      let queryParams = {
        'datasource': opts['datasource'],
        'page': opts['page']
      };
      let headerParams = {
        'If-None-Match': opts['ifNoneMatch']
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [GetContractsPublicRegionId200Ok];
      return this.apiClient.callApi(
        '/contracts/public/{region_id}/', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getCorporationsCorporationIdContracts operation.
     * @callback module:api/ContractsApi~getCorporationsCorporationIdContractsCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/GetCorporationsCorporationIdContracts200Ok>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get corporation contracts
     * Returns contracts available to a corporation, only if the corporation is issuer, acceptor or assignee. Only returns contracts no older than 30 days, or if the status is \"in_progress\".  --- Alternate route: `/dev/corporations/{corporation_id}/contracts/`  Alternate route: `/legacy/corporations/{corporation_id}/contracts/`  Alternate route: `/v1/corporations/{corporation_id}/contracts/`  --- This route is cached for up to 300 seconds
     * @param {Number} corporationId An EVE corporation ID
     * @param {Object} opts Optional parameters
     * @param {module:model/String} [datasource = 'tranquility')] The server name you would like data from
     * @param {String} [ifNoneMatch] ETag from a previous request. A 304 will be returned if this matches the current ETag
     * @param {Number} [page = 1)] Which page of results to return
     * @param {String} [token] Access token to use if unable to set a header
     * @param {module:api/ContractsApi~getCorporationsCorporationIdContractsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/GetCorporationsCorporationIdContracts200Ok>}
     */
    getCorporationsCorporationIdContracts(corporationId, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'corporationId' is set
      if (corporationId === undefined || corporationId === null) {
        throw new Error("Missing the required parameter 'corporationId' when calling getCorporationsCorporationIdContracts");
      }

      let pathParams = {
        'corporation_id': corporationId
      };
      let queryParams = {
        'datasource': opts['datasource'],
        'page': opts['page'],
        'token': opts['token']
      };
      let headerParams = {
        'If-None-Match': opts['ifNoneMatch']
      };
      let formParams = {
      };

      let authNames = ['evesso'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [GetCorporationsCorporationIdContracts200Ok];
      return this.apiClient.callApi(
        '/corporations/{corporation_id}/contracts/', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getCorporationsCorporationIdContractsContractIdBids operation.
     * @callback module:api/ContractsApi~getCorporationsCorporationIdContractsContractIdBidsCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/GetCorporationsCorporationIdContractsContractIdBids200Ok>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get corporation contract bids
     * Lists bids on a particular auction contract  --- Alternate route: `/dev/corporations/{corporation_id}/contracts/{contract_id}/bids/`  Alternate route: `/legacy/corporations/{corporation_id}/contracts/{contract_id}/bids/`  Alternate route: `/v1/corporations/{corporation_id}/contracts/{contract_id}/bids/`  --- This route is cached for up to 3600 seconds
     * @param {Number} contractId ID of a contract
     * @param {Number} corporationId An EVE corporation ID
     * @param {Object} opts Optional parameters
     * @param {module:model/String} [datasource = 'tranquility')] The server name you would like data from
     * @param {String} [ifNoneMatch] ETag from a previous request. A 304 will be returned if this matches the current ETag
     * @param {Number} [page = 1)] Which page of results to return
     * @param {String} [token] Access token to use if unable to set a header
     * @param {module:api/ContractsApi~getCorporationsCorporationIdContractsContractIdBidsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/GetCorporationsCorporationIdContractsContractIdBids200Ok>}
     */
    getCorporationsCorporationIdContractsContractIdBids(contractId, corporationId, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'contractId' is set
      if (contractId === undefined || contractId === null) {
        throw new Error("Missing the required parameter 'contractId' when calling getCorporationsCorporationIdContractsContractIdBids");
      }
      // verify the required parameter 'corporationId' is set
      if (corporationId === undefined || corporationId === null) {
        throw new Error("Missing the required parameter 'corporationId' when calling getCorporationsCorporationIdContractsContractIdBids");
      }

      let pathParams = {
        'contract_id': contractId,
        'corporation_id': corporationId
      };
      let queryParams = {
        'datasource': opts['datasource'],
        'page': opts['page'],
        'token': opts['token']
      };
      let headerParams = {
        'If-None-Match': opts['ifNoneMatch']
      };
      let formParams = {
      };

      let authNames = ['evesso'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [GetCorporationsCorporationIdContractsContractIdBids200Ok];
      return this.apiClient.callApi(
        '/corporations/{corporation_id}/contracts/{contract_id}/bids/', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getCorporationsCorporationIdContractsContractIdItems operation.
     * @callback module:api/ContractsApi~getCorporationsCorporationIdContractsContractIdItemsCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/GetCorporationsCorporationIdContractsContractIdItems200Ok>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get corporation contract items
     * Lists items of a particular contract  --- Alternate route: `/dev/corporations/{corporation_id}/contracts/{contract_id}/items/`  Alternate route: `/legacy/corporations/{corporation_id}/contracts/{contract_id}/items/`  Alternate route: `/v1/corporations/{corporation_id}/contracts/{contract_id}/items/`  --- This route is cached for up to 3600 seconds
     * @param {Number} contractId ID of a contract
     * @param {Number} corporationId An EVE corporation ID
     * @param {Object} opts Optional parameters
     * @param {module:model/String} [datasource = 'tranquility')] The server name you would like data from
     * @param {String} [ifNoneMatch] ETag from a previous request. A 304 will be returned if this matches the current ETag
     * @param {String} [token] Access token to use if unable to set a header
     * @param {module:api/ContractsApi~getCorporationsCorporationIdContractsContractIdItemsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/GetCorporationsCorporationIdContractsContractIdItems200Ok>}
     */
    getCorporationsCorporationIdContractsContractIdItems(contractId, corporationId, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'contractId' is set
      if (contractId === undefined || contractId === null) {
        throw new Error("Missing the required parameter 'contractId' when calling getCorporationsCorporationIdContractsContractIdItems");
      }
      // verify the required parameter 'corporationId' is set
      if (corporationId === undefined || corporationId === null) {
        throw new Error("Missing the required parameter 'corporationId' when calling getCorporationsCorporationIdContractsContractIdItems");
      }

      let pathParams = {
        'contract_id': contractId,
        'corporation_id': corporationId
      };
      let queryParams = {
        'datasource': opts['datasource'],
        'token': opts['token']
      };
      let headerParams = {
        'If-None-Match': opts['ifNoneMatch']
      };
      let formParams = {
      };

      let authNames = ['evesso'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [GetCorporationsCorporationIdContractsContractIdItems200Ok];
      return this.apiClient.callApi(
        '/corporations/{corporation_id}/contracts/{contract_id}/items/', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
