/**
 * EVE Swagger Interface
 * An OpenAPI for EVE Online
 *
 * The version of the OpenAPI document: 0.8.6
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import BadRequest from '../model/BadRequest';
import ErrorLimited from '../model/ErrorLimited';
import Forbidden from '../model/Forbidden';
import GatewayTimeout from '../model/GatewayTimeout';
import GetAlliancesAllianceIdContacts200Ok from '../model/GetAlliancesAllianceIdContacts200Ok';
import GetAlliancesAllianceIdContactsLabels200Ok from '../model/GetAlliancesAllianceIdContactsLabels200Ok';
import GetCharactersCharacterIdContacts200Ok from '../model/GetCharactersCharacterIdContacts200Ok';
import GetCharactersCharacterIdContactsLabels200Ok from '../model/GetCharactersCharacterIdContactsLabels200Ok';
import GetCorporationsCorporationIdContacts200Ok from '../model/GetCorporationsCorporationIdContacts200Ok';
import GetCorporationsCorporationIdContactsLabels200Ok from '../model/GetCorporationsCorporationIdContactsLabels200Ok';
import InternalServerError from '../model/InternalServerError';
import PostCharactersCharacterIdContactsError520 from '../model/PostCharactersCharacterIdContactsError520';
import ServiceUnavailable from '../model/ServiceUnavailable';
import Unauthorized from '../model/Unauthorized';

/**
* Contacts service.
* @module api/ContactsApi
* @version 0.8.6
*/
export default class ContactsApi {

    /**
    * Constructs a new ContactsApi. 
    * @alias module:api/ContactsApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the deleteCharactersCharacterIdContacts operation.
     * @callback module:api/ContactsApi~deleteCharactersCharacterIdContactsCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete contacts
     * Bulk delete contacts  --- Alternate route: `/dev/characters/{character_id}/contacts/`  Alternate route: `/v2/characters/{character_id}/contacts/` 
     * @param {Number} characterId An EVE character ID
     * @param {Array.<Number>} contactIds A list of contacts to delete
     * @param {Object} opts Optional parameters
     * @param {module:model/String} [datasource = 'tranquility')] The server name you would like data from
     * @param {String} [token] Access token to use if unable to set a header
     * @param {module:api/ContactsApi~deleteCharactersCharacterIdContactsCallback} callback The callback function, accepting three arguments: error, data, response
     */
    deleteCharactersCharacterIdContacts(characterId, contactIds, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'characterId' is set
      if (characterId === undefined || characterId === null) {
        throw new Error("Missing the required parameter 'characterId' when calling deleteCharactersCharacterIdContacts");
      }
      // verify the required parameter 'contactIds' is set
      if (contactIds === undefined || contactIds === null) {
        throw new Error("Missing the required parameter 'contactIds' when calling deleteCharactersCharacterIdContacts");
      }

      let pathParams = {
        'character_id': characterId
      };
      let queryParams = {
        'contact_ids': this.apiClient.buildCollectionParam(contactIds, 'csv'),
        'datasource': opts['datasource'],
        'token': opts['token']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['evesso'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/characters/{character_id}/contacts/', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getAlliancesAllianceIdContacts operation.
     * @callback module:api/ContactsApi~getAlliancesAllianceIdContactsCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/GetAlliancesAllianceIdContacts200Ok>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get alliance contacts
     * Return contacts of an alliance  --- Alternate route: `/dev/alliances/{alliance_id}/contacts/`  Alternate route: `/v2/alliances/{alliance_id}/contacts/`  --- This route is cached for up to 300 seconds
     * @param {Number} allianceId An EVE alliance ID
     * @param {Object} opts Optional parameters
     * @param {module:model/String} [datasource = 'tranquility')] The server name you would like data from
     * @param {String} [ifNoneMatch] ETag from a previous request. A 304 will be returned if this matches the current ETag
     * @param {Number} [page = 1)] Which page of results to return
     * @param {String} [token] Access token to use if unable to set a header
     * @param {module:api/ContactsApi~getAlliancesAllianceIdContactsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/GetAlliancesAllianceIdContacts200Ok>}
     */
    getAlliancesAllianceIdContacts(allianceId, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'allianceId' is set
      if (allianceId === undefined || allianceId === null) {
        throw new Error("Missing the required parameter 'allianceId' when calling getAlliancesAllianceIdContacts");
      }

      let pathParams = {
        'alliance_id': allianceId
      };
      let queryParams = {
        'datasource': opts['datasource'],
        'page': opts['page'],
        'token': opts['token']
      };
      let headerParams = {
        'If-None-Match': opts['ifNoneMatch']
      };
      let formParams = {
      };

      let authNames = ['evesso'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [GetAlliancesAllianceIdContacts200Ok];
      return this.apiClient.callApi(
        '/alliances/{alliance_id}/contacts/', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getAlliancesAllianceIdContactsLabels operation.
     * @callback module:api/ContactsApi~getAlliancesAllianceIdContactsLabelsCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/GetAlliancesAllianceIdContactsLabels200Ok>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get alliance contact labels
     * Return custom labels for an alliance's contacts  --- Alternate route: `/dev/alliances/{alliance_id}/contacts/labels/`  Alternate route: `/legacy/alliances/{alliance_id}/contacts/labels/`  Alternate route: `/v1/alliances/{alliance_id}/contacts/labels/`  --- This route is cached for up to 300 seconds
     * @param {Number} allianceId An EVE alliance ID
     * @param {Object} opts Optional parameters
     * @param {module:model/String} [datasource = 'tranquility')] The server name you would like data from
     * @param {String} [ifNoneMatch] ETag from a previous request. A 304 will be returned if this matches the current ETag
     * @param {String} [token] Access token to use if unable to set a header
     * @param {module:api/ContactsApi~getAlliancesAllianceIdContactsLabelsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/GetAlliancesAllianceIdContactsLabels200Ok>}
     */
    getAlliancesAllianceIdContactsLabels(allianceId, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'allianceId' is set
      if (allianceId === undefined || allianceId === null) {
        throw new Error("Missing the required parameter 'allianceId' when calling getAlliancesAllianceIdContactsLabels");
      }

      let pathParams = {
        'alliance_id': allianceId
      };
      let queryParams = {
        'datasource': opts['datasource'],
        'token': opts['token']
      };
      let headerParams = {
        'If-None-Match': opts['ifNoneMatch']
      };
      let formParams = {
      };

      let authNames = ['evesso'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [GetAlliancesAllianceIdContactsLabels200Ok];
      return this.apiClient.callApi(
        '/alliances/{alliance_id}/contacts/labels/', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getCharactersCharacterIdContacts operation.
     * @callback module:api/ContactsApi~getCharactersCharacterIdContactsCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/GetCharactersCharacterIdContacts200Ok>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get contacts
     * Return contacts of a character  --- Alternate route: `/dev/characters/{character_id}/contacts/`  Alternate route: `/v2/characters/{character_id}/contacts/`  --- This route is cached for up to 300 seconds
     * @param {Number} characterId An EVE character ID
     * @param {Object} opts Optional parameters
     * @param {module:model/String} [datasource = 'tranquility')] The server name you would like data from
     * @param {String} [ifNoneMatch] ETag from a previous request. A 304 will be returned if this matches the current ETag
     * @param {Number} [page = 1)] Which page of results to return
     * @param {String} [token] Access token to use if unable to set a header
     * @param {module:api/ContactsApi~getCharactersCharacterIdContactsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/GetCharactersCharacterIdContacts200Ok>}
     */
    getCharactersCharacterIdContacts(characterId, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'characterId' is set
      if (characterId === undefined || characterId === null) {
        throw new Error("Missing the required parameter 'characterId' when calling getCharactersCharacterIdContacts");
      }

      let pathParams = {
        'character_id': characterId
      };
      let queryParams = {
        'datasource': opts['datasource'],
        'page': opts['page'],
        'token': opts['token']
      };
      let headerParams = {
        'If-None-Match': opts['ifNoneMatch']
      };
      let formParams = {
      };

      let authNames = ['evesso'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [GetCharactersCharacterIdContacts200Ok];
      return this.apiClient.callApi(
        '/characters/{character_id}/contacts/', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getCharactersCharacterIdContactsLabels operation.
     * @callback module:api/ContactsApi~getCharactersCharacterIdContactsLabelsCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/GetCharactersCharacterIdContactsLabels200Ok>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get contact labels
     * Return custom labels for a character's contacts  --- Alternate route: `/dev/characters/{character_id}/contacts/labels/`  Alternate route: `/legacy/characters/{character_id}/contacts/labels/`  Alternate route: `/v1/characters/{character_id}/contacts/labels/`  --- This route is cached for up to 300 seconds
     * @param {Number} characterId An EVE character ID
     * @param {Object} opts Optional parameters
     * @param {module:model/String} [datasource = 'tranquility')] The server name you would like data from
     * @param {String} [ifNoneMatch] ETag from a previous request. A 304 will be returned if this matches the current ETag
     * @param {String} [token] Access token to use if unable to set a header
     * @param {module:api/ContactsApi~getCharactersCharacterIdContactsLabelsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/GetCharactersCharacterIdContactsLabels200Ok>}
     */
    getCharactersCharacterIdContactsLabels(characterId, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'characterId' is set
      if (characterId === undefined || characterId === null) {
        throw new Error("Missing the required parameter 'characterId' when calling getCharactersCharacterIdContactsLabels");
      }

      let pathParams = {
        'character_id': characterId
      };
      let queryParams = {
        'datasource': opts['datasource'],
        'token': opts['token']
      };
      let headerParams = {
        'If-None-Match': opts['ifNoneMatch']
      };
      let formParams = {
      };

      let authNames = ['evesso'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [GetCharactersCharacterIdContactsLabels200Ok];
      return this.apiClient.callApi(
        '/characters/{character_id}/contacts/labels/', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getCorporationsCorporationIdContacts operation.
     * @callback module:api/ContactsApi~getCorporationsCorporationIdContactsCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/GetCorporationsCorporationIdContacts200Ok>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get corporation contacts
     * Return contacts of a corporation  --- Alternate route: `/dev/corporations/{corporation_id}/contacts/`  Alternate route: `/v2/corporations/{corporation_id}/contacts/`  --- This route is cached for up to 300 seconds
     * @param {Number} corporationId An EVE corporation ID
     * @param {Object} opts Optional parameters
     * @param {module:model/String} [datasource = 'tranquility')] The server name you would like data from
     * @param {String} [ifNoneMatch] ETag from a previous request. A 304 will be returned if this matches the current ETag
     * @param {Number} [page = 1)] Which page of results to return
     * @param {String} [token] Access token to use if unable to set a header
     * @param {module:api/ContactsApi~getCorporationsCorporationIdContactsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/GetCorporationsCorporationIdContacts200Ok>}
     */
    getCorporationsCorporationIdContacts(corporationId, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'corporationId' is set
      if (corporationId === undefined || corporationId === null) {
        throw new Error("Missing the required parameter 'corporationId' when calling getCorporationsCorporationIdContacts");
      }

      let pathParams = {
        'corporation_id': corporationId
      };
      let queryParams = {
        'datasource': opts['datasource'],
        'page': opts['page'],
        'token': opts['token']
      };
      let headerParams = {
        'If-None-Match': opts['ifNoneMatch']
      };
      let formParams = {
      };

      let authNames = ['evesso'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [GetCorporationsCorporationIdContacts200Ok];
      return this.apiClient.callApi(
        '/corporations/{corporation_id}/contacts/', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getCorporationsCorporationIdContactsLabels operation.
     * @callback module:api/ContactsApi~getCorporationsCorporationIdContactsLabelsCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/GetCorporationsCorporationIdContactsLabels200Ok>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get corporation contact labels
     * Return custom labels for a corporation's contacts  --- Alternate route: `/dev/corporations/{corporation_id}/contacts/labels/`  Alternate route: `/legacy/corporations/{corporation_id}/contacts/labels/`  Alternate route: `/v1/corporations/{corporation_id}/contacts/labels/`  --- This route is cached for up to 300 seconds
     * @param {Number} corporationId An EVE corporation ID
     * @param {Object} opts Optional parameters
     * @param {module:model/String} [datasource = 'tranquility')] The server name you would like data from
     * @param {String} [ifNoneMatch] ETag from a previous request. A 304 will be returned if this matches the current ETag
     * @param {String} [token] Access token to use if unable to set a header
     * @param {module:api/ContactsApi~getCorporationsCorporationIdContactsLabelsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/GetCorporationsCorporationIdContactsLabels200Ok>}
     */
    getCorporationsCorporationIdContactsLabels(corporationId, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'corporationId' is set
      if (corporationId === undefined || corporationId === null) {
        throw new Error("Missing the required parameter 'corporationId' when calling getCorporationsCorporationIdContactsLabels");
      }

      let pathParams = {
        'corporation_id': corporationId
      };
      let queryParams = {
        'datasource': opts['datasource'],
        'token': opts['token']
      };
      let headerParams = {
        'If-None-Match': opts['ifNoneMatch']
      };
      let formParams = {
      };

      let authNames = ['evesso'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [GetCorporationsCorporationIdContactsLabels200Ok];
      return this.apiClient.callApi(
        '/corporations/{corporation_id}/contacts/labels/', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the postCharactersCharacterIdContacts operation.
     * @callback module:api/ContactsApi~postCharactersCharacterIdContactsCallback
     * @param {String} error Error message, if any.
     * @param {Array.<Number>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Add contacts
     * Bulk add contacts with same settings  --- Alternate route: `/dev/characters/{character_id}/contacts/`  Alternate route: `/v2/characters/{character_id}/contacts/` 
     * @param {Number} characterId An EVE character ID
     * @param {Number} standing Standing for the contact
     * @param {Array.<Number>} contactIds A list of contacts
     * @param {Object} opts Optional parameters
     * @param {module:model/String} [datasource = 'tranquility')] The server name you would like data from
     * @param {Array.<Number>} [labelIds] Add custom labels to the new contact
     * @param {String} [token] Access token to use if unable to set a header
     * @param {Boolean} [watched = false)] Whether the contact should be watched, note this is only effective on characters
     * @param {module:api/ContactsApi~postCharactersCharacterIdContactsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<Number>}
     */
    postCharactersCharacterIdContacts(characterId, standing, contactIds, opts, callback) {
      opts = opts || {};
      let postBody = contactIds;
      // verify the required parameter 'characterId' is set
      if (characterId === undefined || characterId === null) {
        throw new Error("Missing the required parameter 'characterId' when calling postCharactersCharacterIdContacts");
      }
      // verify the required parameter 'standing' is set
      if (standing === undefined || standing === null) {
        throw new Error("Missing the required parameter 'standing' when calling postCharactersCharacterIdContacts");
      }
      // verify the required parameter 'contactIds' is set
      if (contactIds === undefined || contactIds === null) {
        throw new Error("Missing the required parameter 'contactIds' when calling postCharactersCharacterIdContacts");
      }

      let pathParams = {
        'character_id': characterId
      };
      let queryParams = {
        'datasource': opts['datasource'],
        'label_ids': this.apiClient.buildCollectionParam(opts['labelIds'], 'csv'),
        'standing': standing,
        'token': opts['token'],
        'watched': opts['watched']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['evesso'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = ['Number'];
      return this.apiClient.callApi(
        '/characters/{character_id}/contacts/', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the putCharactersCharacterIdContacts operation.
     * @callback module:api/ContactsApi~putCharactersCharacterIdContactsCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Edit contacts
     * Bulk edit contacts with same settings  --- Alternate route: `/dev/characters/{character_id}/contacts/`  Alternate route: `/v2/characters/{character_id}/contacts/` 
     * @param {Number} characterId An EVE character ID
     * @param {Number} standing Standing for the contact
     * @param {Array.<Number>} contactIds A list of contacts
     * @param {Object} opts Optional parameters
     * @param {module:model/String} [datasource = 'tranquility')] The server name you would like data from
     * @param {Array.<Number>} [labelIds] Add custom labels to the contact
     * @param {String} [token] Access token to use if unable to set a header
     * @param {Boolean} [watched = false)] Whether the contact should be watched, note this is only effective on characters
     * @param {module:api/ContactsApi~putCharactersCharacterIdContactsCallback} callback The callback function, accepting three arguments: error, data, response
     */
    putCharactersCharacterIdContacts(characterId, standing, contactIds, opts, callback) {
      opts = opts || {};
      let postBody = contactIds;
      // verify the required parameter 'characterId' is set
      if (characterId === undefined || characterId === null) {
        throw new Error("Missing the required parameter 'characterId' when calling putCharactersCharacterIdContacts");
      }
      // verify the required parameter 'standing' is set
      if (standing === undefined || standing === null) {
        throw new Error("Missing the required parameter 'standing' when calling putCharactersCharacterIdContacts");
      }
      // verify the required parameter 'contactIds' is set
      if (contactIds === undefined || contactIds === null) {
        throw new Error("Missing the required parameter 'contactIds' when calling putCharactersCharacterIdContacts");
      }

      let pathParams = {
        'character_id': characterId
      };
      let queryParams = {
        'datasource': opts['datasource'],
        'label_ids': this.apiClient.buildCollectionParam(opts['labelIds'], 'csv'),
        'standing': standing,
        'token': opts['token'],
        'watched': opts['watched']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['evesso'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/characters/{character_id}/contacts/', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
