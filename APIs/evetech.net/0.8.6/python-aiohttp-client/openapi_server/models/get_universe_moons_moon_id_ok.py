# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.get_universe_moons_moon_id_position import GetUniverseMoonsMoonIdPosition
from openapi_server import util


class GetUniverseMoonsMoonIdOk(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, moon_id: int=None, name: str=None, position: GetUniverseMoonsMoonIdPosition=None, system_id: int=None):
        """GetUniverseMoonsMoonIdOk - a model defined in OpenAPI

        :param moon_id: The moon_id of this GetUniverseMoonsMoonIdOk.
        :param name: The name of this GetUniverseMoonsMoonIdOk.
        :param position: The position of this GetUniverseMoonsMoonIdOk.
        :param system_id: The system_id of this GetUniverseMoonsMoonIdOk.
        """
        self.openapi_types = {
            'moon_id': int,
            'name': str,
            'position': GetUniverseMoonsMoonIdPosition,
            'system_id': int
        }

        self.attribute_map = {
            'moon_id': 'moon_id',
            'name': 'name',
            'position': 'position',
            'system_id': 'system_id'
        }

        self._moon_id = moon_id
        self._name = name
        self._position = position
        self._system_id = system_id

    @classmethod
    def from_dict(cls, dikt: dict) -> 'GetUniverseMoonsMoonIdOk':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The get_universe_moons_moon_id_ok of this GetUniverseMoonsMoonIdOk.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def moon_id(self):
        """Gets the moon_id of this GetUniverseMoonsMoonIdOk.

        moon_id integer

        :return: The moon_id of this GetUniverseMoonsMoonIdOk.
        :rtype: int
        """
        return self._moon_id

    @moon_id.setter
    def moon_id(self, moon_id):
        """Sets the moon_id of this GetUniverseMoonsMoonIdOk.

        moon_id integer

        :param moon_id: The moon_id of this GetUniverseMoonsMoonIdOk.
        :type moon_id: int
        """
        if moon_id is None:
            raise ValueError("Invalid value for `moon_id`, must not be `None`")

        self._moon_id = moon_id

    @property
    def name(self):
        """Gets the name of this GetUniverseMoonsMoonIdOk.

        name string

        :return: The name of this GetUniverseMoonsMoonIdOk.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this GetUniverseMoonsMoonIdOk.

        name string

        :param name: The name of this GetUniverseMoonsMoonIdOk.
        :type name: str
        """
        if name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")

        self._name = name

    @property
    def position(self):
        """Gets the position of this GetUniverseMoonsMoonIdOk.


        :return: The position of this GetUniverseMoonsMoonIdOk.
        :rtype: GetUniverseMoonsMoonIdPosition
        """
        return self._position

    @position.setter
    def position(self, position):
        """Sets the position of this GetUniverseMoonsMoonIdOk.


        :param position: The position of this GetUniverseMoonsMoonIdOk.
        :type position: GetUniverseMoonsMoonIdPosition
        """
        if position is None:
            raise ValueError("Invalid value for `position`, must not be `None`")

        self._position = position

    @property
    def system_id(self):
        """Gets the system_id of this GetUniverseMoonsMoonIdOk.

        The solar system this moon is in

        :return: The system_id of this GetUniverseMoonsMoonIdOk.
        :rtype: int
        """
        return self._system_id

    @system_id.setter
    def system_id(self, system_id):
        """Sets the system_id of this GetUniverseMoonsMoonIdOk.

        The solar system this moon is in

        :param system_id: The system_id of this GetUniverseMoonsMoonIdOk.
        :type system_id: int
        """
        if system_id is None:
            raise ValueError("Invalid value for `system_id`, must not be `None`")

        self._system_id = system_id
