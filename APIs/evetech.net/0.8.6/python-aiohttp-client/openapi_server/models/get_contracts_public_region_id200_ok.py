# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class GetContractsPublicRegionId200Ok(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, buyout: float=None, collateral: float=None, contract_id: int=None, date_expired: datetime=None, date_issued: datetime=None, days_to_complete: int=None, end_location_id: int=None, for_corporation: bool=None, issuer_corporation_id: int=None, issuer_id: int=None, price: float=None, reward: float=None, start_location_id: int=None, title: str=None, type: str=None, volume: float=None):
        """GetContractsPublicRegionId200Ok - a model defined in OpenAPI

        :param buyout: The buyout of this GetContractsPublicRegionId200Ok.
        :param collateral: The collateral of this GetContractsPublicRegionId200Ok.
        :param contract_id: The contract_id of this GetContractsPublicRegionId200Ok.
        :param date_expired: The date_expired of this GetContractsPublicRegionId200Ok.
        :param date_issued: The date_issued of this GetContractsPublicRegionId200Ok.
        :param days_to_complete: The days_to_complete of this GetContractsPublicRegionId200Ok.
        :param end_location_id: The end_location_id of this GetContractsPublicRegionId200Ok.
        :param for_corporation: The for_corporation of this GetContractsPublicRegionId200Ok.
        :param issuer_corporation_id: The issuer_corporation_id of this GetContractsPublicRegionId200Ok.
        :param issuer_id: The issuer_id of this GetContractsPublicRegionId200Ok.
        :param price: The price of this GetContractsPublicRegionId200Ok.
        :param reward: The reward of this GetContractsPublicRegionId200Ok.
        :param start_location_id: The start_location_id of this GetContractsPublicRegionId200Ok.
        :param title: The title of this GetContractsPublicRegionId200Ok.
        :param type: The type of this GetContractsPublicRegionId200Ok.
        :param volume: The volume of this GetContractsPublicRegionId200Ok.
        """
        self.openapi_types = {
            'buyout': float,
            'collateral': float,
            'contract_id': int,
            'date_expired': datetime,
            'date_issued': datetime,
            'days_to_complete': int,
            'end_location_id': int,
            'for_corporation': bool,
            'issuer_corporation_id': int,
            'issuer_id': int,
            'price': float,
            'reward': float,
            'start_location_id': int,
            'title': str,
            'type': str,
            'volume': float
        }

        self.attribute_map = {
            'buyout': 'buyout',
            'collateral': 'collateral',
            'contract_id': 'contract_id',
            'date_expired': 'date_expired',
            'date_issued': 'date_issued',
            'days_to_complete': 'days_to_complete',
            'end_location_id': 'end_location_id',
            'for_corporation': 'for_corporation',
            'issuer_corporation_id': 'issuer_corporation_id',
            'issuer_id': 'issuer_id',
            'price': 'price',
            'reward': 'reward',
            'start_location_id': 'start_location_id',
            'title': 'title',
            'type': 'type',
            'volume': 'volume'
        }

        self._buyout = buyout
        self._collateral = collateral
        self._contract_id = contract_id
        self._date_expired = date_expired
        self._date_issued = date_issued
        self._days_to_complete = days_to_complete
        self._end_location_id = end_location_id
        self._for_corporation = for_corporation
        self._issuer_corporation_id = issuer_corporation_id
        self._issuer_id = issuer_id
        self._price = price
        self._reward = reward
        self._start_location_id = start_location_id
        self._title = title
        self._type = type
        self._volume = volume

    @classmethod
    def from_dict(cls, dikt: dict) -> 'GetContractsPublicRegionId200Ok':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The get_contracts_public_region_id_200_ok of this GetContractsPublicRegionId200Ok.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def buyout(self):
        """Gets the buyout of this GetContractsPublicRegionId200Ok.

        Buyout price (for Auctions only)

        :return: The buyout of this GetContractsPublicRegionId200Ok.
        :rtype: float
        """
        return self._buyout

    @buyout.setter
    def buyout(self, buyout):
        """Sets the buyout of this GetContractsPublicRegionId200Ok.

        Buyout price (for Auctions only)

        :param buyout: The buyout of this GetContractsPublicRegionId200Ok.
        :type buyout: float
        """

        self._buyout = buyout

    @property
    def collateral(self):
        """Gets the collateral of this GetContractsPublicRegionId200Ok.

        Collateral price (for Couriers only)

        :return: The collateral of this GetContractsPublicRegionId200Ok.
        :rtype: float
        """
        return self._collateral

    @collateral.setter
    def collateral(self, collateral):
        """Sets the collateral of this GetContractsPublicRegionId200Ok.

        Collateral price (for Couriers only)

        :param collateral: The collateral of this GetContractsPublicRegionId200Ok.
        :type collateral: float
        """

        self._collateral = collateral

    @property
    def contract_id(self):
        """Gets the contract_id of this GetContractsPublicRegionId200Ok.

        contract_id integer

        :return: The contract_id of this GetContractsPublicRegionId200Ok.
        :rtype: int
        """
        return self._contract_id

    @contract_id.setter
    def contract_id(self, contract_id):
        """Sets the contract_id of this GetContractsPublicRegionId200Ok.

        contract_id integer

        :param contract_id: The contract_id of this GetContractsPublicRegionId200Ok.
        :type contract_id: int
        """
        if contract_id is None:
            raise ValueError("Invalid value for `contract_id`, must not be `None`")

        self._contract_id = contract_id

    @property
    def date_expired(self):
        """Gets the date_expired of this GetContractsPublicRegionId200Ok.

        Expiration date of the contract

        :return: The date_expired of this GetContractsPublicRegionId200Ok.
        :rtype: datetime
        """
        return self._date_expired

    @date_expired.setter
    def date_expired(self, date_expired):
        """Sets the date_expired of this GetContractsPublicRegionId200Ok.

        Expiration date of the contract

        :param date_expired: The date_expired of this GetContractsPublicRegionId200Ok.
        :type date_expired: datetime
        """
        if date_expired is None:
            raise ValueError("Invalid value for `date_expired`, must not be `None`")

        self._date_expired = date_expired

    @property
    def date_issued(self):
        """Gets the date_issued of this GetContractsPublicRegionId200Ok.

        Сreation date of the contract

        :return: The date_issued of this GetContractsPublicRegionId200Ok.
        :rtype: datetime
        """
        return self._date_issued

    @date_issued.setter
    def date_issued(self, date_issued):
        """Sets the date_issued of this GetContractsPublicRegionId200Ok.

        Сreation date of the contract

        :param date_issued: The date_issued of this GetContractsPublicRegionId200Ok.
        :type date_issued: datetime
        """
        if date_issued is None:
            raise ValueError("Invalid value for `date_issued`, must not be `None`")

        self._date_issued = date_issued

    @property
    def days_to_complete(self):
        """Gets the days_to_complete of this GetContractsPublicRegionId200Ok.

        Number of days to perform the contract

        :return: The days_to_complete of this GetContractsPublicRegionId200Ok.
        :rtype: int
        """
        return self._days_to_complete

    @days_to_complete.setter
    def days_to_complete(self, days_to_complete):
        """Sets the days_to_complete of this GetContractsPublicRegionId200Ok.

        Number of days to perform the contract

        :param days_to_complete: The days_to_complete of this GetContractsPublicRegionId200Ok.
        :type days_to_complete: int
        """

        self._days_to_complete = days_to_complete

    @property
    def end_location_id(self):
        """Gets the end_location_id of this GetContractsPublicRegionId200Ok.

        End location ID (for Couriers contract)

        :return: The end_location_id of this GetContractsPublicRegionId200Ok.
        :rtype: int
        """
        return self._end_location_id

    @end_location_id.setter
    def end_location_id(self, end_location_id):
        """Sets the end_location_id of this GetContractsPublicRegionId200Ok.

        End location ID (for Couriers contract)

        :param end_location_id: The end_location_id of this GetContractsPublicRegionId200Ok.
        :type end_location_id: int
        """

        self._end_location_id = end_location_id

    @property
    def for_corporation(self):
        """Gets the for_corporation of this GetContractsPublicRegionId200Ok.

        true if the contract was issued on behalf of the issuer's corporation

        :return: The for_corporation of this GetContractsPublicRegionId200Ok.
        :rtype: bool
        """
        return self._for_corporation

    @for_corporation.setter
    def for_corporation(self, for_corporation):
        """Sets the for_corporation of this GetContractsPublicRegionId200Ok.

        true if the contract was issued on behalf of the issuer's corporation

        :param for_corporation: The for_corporation of this GetContractsPublicRegionId200Ok.
        :type for_corporation: bool
        """

        self._for_corporation = for_corporation

    @property
    def issuer_corporation_id(self):
        """Gets the issuer_corporation_id of this GetContractsPublicRegionId200Ok.

        Character's corporation ID for the issuer

        :return: The issuer_corporation_id of this GetContractsPublicRegionId200Ok.
        :rtype: int
        """
        return self._issuer_corporation_id

    @issuer_corporation_id.setter
    def issuer_corporation_id(self, issuer_corporation_id):
        """Sets the issuer_corporation_id of this GetContractsPublicRegionId200Ok.

        Character's corporation ID for the issuer

        :param issuer_corporation_id: The issuer_corporation_id of this GetContractsPublicRegionId200Ok.
        :type issuer_corporation_id: int
        """
        if issuer_corporation_id is None:
            raise ValueError("Invalid value for `issuer_corporation_id`, must not be `None`")

        self._issuer_corporation_id = issuer_corporation_id

    @property
    def issuer_id(self):
        """Gets the issuer_id of this GetContractsPublicRegionId200Ok.

        Character ID for the issuer

        :return: The issuer_id of this GetContractsPublicRegionId200Ok.
        :rtype: int
        """
        return self._issuer_id

    @issuer_id.setter
    def issuer_id(self, issuer_id):
        """Sets the issuer_id of this GetContractsPublicRegionId200Ok.

        Character ID for the issuer

        :param issuer_id: The issuer_id of this GetContractsPublicRegionId200Ok.
        :type issuer_id: int
        """
        if issuer_id is None:
            raise ValueError("Invalid value for `issuer_id`, must not be `None`")

        self._issuer_id = issuer_id

    @property
    def price(self):
        """Gets the price of this GetContractsPublicRegionId200Ok.

        Price of contract (for ItemsExchange and Auctions)

        :return: The price of this GetContractsPublicRegionId200Ok.
        :rtype: float
        """
        return self._price

    @price.setter
    def price(self, price):
        """Sets the price of this GetContractsPublicRegionId200Ok.

        Price of contract (for ItemsExchange and Auctions)

        :param price: The price of this GetContractsPublicRegionId200Ok.
        :type price: float
        """

        self._price = price

    @property
    def reward(self):
        """Gets the reward of this GetContractsPublicRegionId200Ok.

        Remuneration for contract (for Couriers only)

        :return: The reward of this GetContractsPublicRegionId200Ok.
        :rtype: float
        """
        return self._reward

    @reward.setter
    def reward(self, reward):
        """Sets the reward of this GetContractsPublicRegionId200Ok.

        Remuneration for contract (for Couriers only)

        :param reward: The reward of this GetContractsPublicRegionId200Ok.
        :type reward: float
        """

        self._reward = reward

    @property
    def start_location_id(self):
        """Gets the start_location_id of this GetContractsPublicRegionId200Ok.

        Start location ID (for Couriers contract)

        :return: The start_location_id of this GetContractsPublicRegionId200Ok.
        :rtype: int
        """
        return self._start_location_id

    @start_location_id.setter
    def start_location_id(self, start_location_id):
        """Sets the start_location_id of this GetContractsPublicRegionId200Ok.

        Start location ID (for Couriers contract)

        :param start_location_id: The start_location_id of this GetContractsPublicRegionId200Ok.
        :type start_location_id: int
        """

        self._start_location_id = start_location_id

    @property
    def title(self):
        """Gets the title of this GetContractsPublicRegionId200Ok.

        Title of the contract

        :return: The title of this GetContractsPublicRegionId200Ok.
        :rtype: str
        """
        return self._title

    @title.setter
    def title(self, title):
        """Sets the title of this GetContractsPublicRegionId200Ok.

        Title of the contract

        :param title: The title of this GetContractsPublicRegionId200Ok.
        :type title: str
        """

        self._title = title

    @property
    def type(self):
        """Gets the type of this GetContractsPublicRegionId200Ok.

        Type of the contract

        :return: The type of this GetContractsPublicRegionId200Ok.
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this GetContractsPublicRegionId200Ok.

        Type of the contract

        :param type: The type of this GetContractsPublicRegionId200Ok.
        :type type: str
        """
        allowed_values = ["unknown", "item_exchange", "auction", "courier", "loan"]  # noqa: E501
        if type not in allowed_values:
            raise ValueError(
                "Invalid value for `type` ({0}), must be one of {1}"
                .format(type, allowed_values)
            )

        self._type = type

    @property
    def volume(self):
        """Gets the volume of this GetContractsPublicRegionId200Ok.

        Volume of items in the contract

        :return: The volume of this GetContractsPublicRegionId200Ok.
        :rtype: float
        """
        return self._volume

    @volume.setter
    def volume(self, volume):
        """Sets the volume of this GetContractsPublicRegionId200Ok.

        Volume of items in the contract

        :param volume: The volume of this GetContractsPublicRegionId200Ok.
        :type volume: float
        """

        self._volume = volume
