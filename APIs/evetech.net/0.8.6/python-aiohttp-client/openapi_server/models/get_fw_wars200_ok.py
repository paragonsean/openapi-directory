# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class GetFwWars200Ok(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, against_id: int=None, faction_id: int=None):
        """GetFwWars200Ok - a model defined in OpenAPI

        :param against_id: The against_id of this GetFwWars200Ok.
        :param faction_id: The faction_id of this GetFwWars200Ok.
        """
        self.openapi_types = {
            'against_id': int,
            'faction_id': int
        }

        self.attribute_map = {
            'against_id': 'against_id',
            'faction_id': 'faction_id'
        }

        self._against_id = against_id
        self._faction_id = faction_id

    @classmethod
    def from_dict(cls, dikt: dict) -> 'GetFwWars200Ok':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The get_fw_wars_200_ok of this GetFwWars200Ok.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def against_id(self):
        """Gets the against_id of this GetFwWars200Ok.

        The faction ID of the enemy faction.

        :return: The against_id of this GetFwWars200Ok.
        :rtype: int
        """
        return self._against_id

    @against_id.setter
    def against_id(self, against_id):
        """Sets the against_id of this GetFwWars200Ok.

        The faction ID of the enemy faction.

        :param against_id: The against_id of this GetFwWars200Ok.
        :type against_id: int
        """
        if against_id is None:
            raise ValueError("Invalid value for `against_id`, must not be `None`")

        self._against_id = against_id

    @property
    def faction_id(self):
        """Gets the faction_id of this GetFwWars200Ok.

        faction_id integer

        :return: The faction_id of this GetFwWars200Ok.
        :rtype: int
        """
        return self._faction_id

    @faction_id.setter
    def faction_id(self, faction_id):
        """Sets the faction_id of this GetFwWars200Ok.

        faction_id integer

        :param faction_id: The faction_id of this GetFwWars200Ok.
        :type faction_id: int
        """
        if faction_id is None:
            raise ValueError("Invalid value for `faction_id`, must not be `None`")

        self._faction_id = faction_id
