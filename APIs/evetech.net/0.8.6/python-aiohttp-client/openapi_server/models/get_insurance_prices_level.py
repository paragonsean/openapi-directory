# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class GetInsurancePricesLevel(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, cost: float=None, name: str=None, payout: float=None):
        """GetInsurancePricesLevel - a model defined in OpenAPI

        :param cost: The cost of this GetInsurancePricesLevel.
        :param name: The name of this GetInsurancePricesLevel.
        :param payout: The payout of this GetInsurancePricesLevel.
        """
        self.openapi_types = {
            'cost': float,
            'name': str,
            'payout': float
        }

        self.attribute_map = {
            'cost': 'cost',
            'name': 'name',
            'payout': 'payout'
        }

        self._cost = cost
        self._name = name
        self._payout = payout

    @classmethod
    def from_dict(cls, dikt: dict) -> 'GetInsurancePricesLevel':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The get_insurance_prices_level of this GetInsurancePricesLevel.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def cost(self):
        """Gets the cost of this GetInsurancePricesLevel.

        cost number

        :return: The cost of this GetInsurancePricesLevel.
        :rtype: float
        """
        return self._cost

    @cost.setter
    def cost(self, cost):
        """Sets the cost of this GetInsurancePricesLevel.

        cost number

        :param cost: The cost of this GetInsurancePricesLevel.
        :type cost: float
        """
        if cost is None:
            raise ValueError("Invalid value for `cost`, must not be `None`")

        self._cost = cost

    @property
    def name(self):
        """Gets the name of this GetInsurancePricesLevel.

        Localized insurance level

        :return: The name of this GetInsurancePricesLevel.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this GetInsurancePricesLevel.

        Localized insurance level

        :param name: The name of this GetInsurancePricesLevel.
        :type name: str
        """
        if name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")

        self._name = name

    @property
    def payout(self):
        """Gets the payout of this GetInsurancePricesLevel.

        payout number

        :return: The payout of this GetInsurancePricesLevel.
        :rtype: float
        """
        return self._payout

    @payout.setter
    def payout(self, payout):
        """Sets the payout of this GetInsurancePricesLevel.

        payout number

        :param payout: The payout of this GetInsurancePricesLevel.
        :type payout: float
        """
        if payout is None:
            raise ValueError("Invalid value for `payout`, must not be `None`")

        self._payout = payout
