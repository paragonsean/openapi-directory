# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class GetUniverseGroupsGroupIdOk(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, category_id: int=None, group_id: int=None, name: str=None, published: bool=None, types: List[int]=None):
        """GetUniverseGroupsGroupIdOk - a model defined in OpenAPI

        :param category_id: The category_id of this GetUniverseGroupsGroupIdOk.
        :param group_id: The group_id of this GetUniverseGroupsGroupIdOk.
        :param name: The name of this GetUniverseGroupsGroupIdOk.
        :param published: The published of this GetUniverseGroupsGroupIdOk.
        :param types: The types of this GetUniverseGroupsGroupIdOk.
        """
        self.openapi_types = {
            'category_id': int,
            'group_id': int,
            'name': str,
            'published': bool,
            'types': List[int]
        }

        self.attribute_map = {
            'category_id': 'category_id',
            'group_id': 'group_id',
            'name': 'name',
            'published': 'published',
            'types': 'types'
        }

        self._category_id = category_id
        self._group_id = group_id
        self._name = name
        self._published = published
        self._types = types

    @classmethod
    def from_dict(cls, dikt: dict) -> 'GetUniverseGroupsGroupIdOk':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The get_universe_groups_group_id_ok of this GetUniverseGroupsGroupIdOk.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def category_id(self):
        """Gets the category_id of this GetUniverseGroupsGroupIdOk.

        category_id integer

        :return: The category_id of this GetUniverseGroupsGroupIdOk.
        :rtype: int
        """
        return self._category_id

    @category_id.setter
    def category_id(self, category_id):
        """Sets the category_id of this GetUniverseGroupsGroupIdOk.

        category_id integer

        :param category_id: The category_id of this GetUniverseGroupsGroupIdOk.
        :type category_id: int
        """
        if category_id is None:
            raise ValueError("Invalid value for `category_id`, must not be `None`")

        self._category_id = category_id

    @property
    def group_id(self):
        """Gets the group_id of this GetUniverseGroupsGroupIdOk.

        group_id integer

        :return: The group_id of this GetUniverseGroupsGroupIdOk.
        :rtype: int
        """
        return self._group_id

    @group_id.setter
    def group_id(self, group_id):
        """Sets the group_id of this GetUniverseGroupsGroupIdOk.

        group_id integer

        :param group_id: The group_id of this GetUniverseGroupsGroupIdOk.
        :type group_id: int
        """
        if group_id is None:
            raise ValueError("Invalid value for `group_id`, must not be `None`")

        self._group_id = group_id

    @property
    def name(self):
        """Gets the name of this GetUniverseGroupsGroupIdOk.

        name string

        :return: The name of this GetUniverseGroupsGroupIdOk.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this GetUniverseGroupsGroupIdOk.

        name string

        :param name: The name of this GetUniverseGroupsGroupIdOk.
        :type name: str
        """
        if name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")

        self._name = name

    @property
    def published(self):
        """Gets the published of this GetUniverseGroupsGroupIdOk.

        published boolean

        :return: The published of this GetUniverseGroupsGroupIdOk.
        :rtype: bool
        """
        return self._published

    @published.setter
    def published(self, published):
        """Sets the published of this GetUniverseGroupsGroupIdOk.

        published boolean

        :param published: The published of this GetUniverseGroupsGroupIdOk.
        :type published: bool
        """
        if published is None:
            raise ValueError("Invalid value for `published`, must not be `None`")

        self._published = published

    @property
    def types(self):
        """Gets the types of this GetUniverseGroupsGroupIdOk.

        types array

        :return: The types of this GetUniverseGroupsGroupIdOk.
        :rtype: List[int]
        """
        return self._types

    @types.setter
    def types(self, types):
        """Sets the types of this GetUniverseGroupsGroupIdOk.

        types array

        :param types: The types of this GetUniverseGroupsGroupIdOk.
        :type types: List[int]
        """
        if types is None:
            raise ValueError("Invalid value for `types`, must not be `None`")
        if types is not None and len(types) > 10000:
            raise ValueError("Invalid value for `types`, number of items must be less than or equal to `10000`")

        self._types = types
