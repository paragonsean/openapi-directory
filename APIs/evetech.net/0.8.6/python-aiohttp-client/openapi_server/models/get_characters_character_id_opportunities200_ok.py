# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class GetCharactersCharacterIdOpportunities200Ok(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, completed_at: datetime=None, task_id: int=None):
        """GetCharactersCharacterIdOpportunities200Ok - a model defined in OpenAPI

        :param completed_at: The completed_at of this GetCharactersCharacterIdOpportunities200Ok.
        :param task_id: The task_id of this GetCharactersCharacterIdOpportunities200Ok.
        """
        self.openapi_types = {
            'completed_at': datetime,
            'task_id': int
        }

        self.attribute_map = {
            'completed_at': 'completed_at',
            'task_id': 'task_id'
        }

        self._completed_at = completed_at
        self._task_id = task_id

    @classmethod
    def from_dict(cls, dikt: dict) -> 'GetCharactersCharacterIdOpportunities200Ok':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The get_characters_character_id_opportunities_200_ok of this GetCharactersCharacterIdOpportunities200Ok.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def completed_at(self):
        """Gets the completed_at of this GetCharactersCharacterIdOpportunities200Ok.

        completed_at string

        :return: The completed_at of this GetCharactersCharacterIdOpportunities200Ok.
        :rtype: datetime
        """
        return self._completed_at

    @completed_at.setter
    def completed_at(self, completed_at):
        """Sets the completed_at of this GetCharactersCharacterIdOpportunities200Ok.

        completed_at string

        :param completed_at: The completed_at of this GetCharactersCharacterIdOpportunities200Ok.
        :type completed_at: datetime
        """
        if completed_at is None:
            raise ValueError("Invalid value for `completed_at`, must not be `None`")

        self._completed_at = completed_at

    @property
    def task_id(self):
        """Gets the task_id of this GetCharactersCharacterIdOpportunities200Ok.

        task_id integer

        :return: The task_id of this GetCharactersCharacterIdOpportunities200Ok.
        :rtype: int
        """
        return self._task_id

    @task_id.setter
    def task_id(self, task_id):
        """Sets the task_id of this GetCharactersCharacterIdOpportunities200Ok.

        task_id integer

        :param task_id: The task_id of this GetCharactersCharacterIdOpportunities200Ok.
        :type task_id: int
        """
        if task_id is None:
            raise ValueError("Invalid value for `task_id`, must not be `None`")

        self._task_id = task_id
