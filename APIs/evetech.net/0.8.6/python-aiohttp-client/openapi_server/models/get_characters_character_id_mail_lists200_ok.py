# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class GetCharactersCharacterIdMailLists200Ok(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, mailing_list_id: int=None, name: str=None):
        """GetCharactersCharacterIdMailLists200Ok - a model defined in OpenAPI

        :param mailing_list_id: The mailing_list_id of this GetCharactersCharacterIdMailLists200Ok.
        :param name: The name of this GetCharactersCharacterIdMailLists200Ok.
        """
        self.openapi_types = {
            'mailing_list_id': int,
            'name': str
        }

        self.attribute_map = {
            'mailing_list_id': 'mailing_list_id',
            'name': 'name'
        }

        self._mailing_list_id = mailing_list_id
        self._name = name

    @classmethod
    def from_dict(cls, dikt: dict) -> 'GetCharactersCharacterIdMailLists200Ok':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The get_characters_character_id_mail_lists_200_ok of this GetCharactersCharacterIdMailLists200Ok.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def mailing_list_id(self):
        """Gets the mailing_list_id of this GetCharactersCharacterIdMailLists200Ok.

        Mailing list ID

        :return: The mailing_list_id of this GetCharactersCharacterIdMailLists200Ok.
        :rtype: int
        """
        return self._mailing_list_id

    @mailing_list_id.setter
    def mailing_list_id(self, mailing_list_id):
        """Sets the mailing_list_id of this GetCharactersCharacterIdMailLists200Ok.

        Mailing list ID

        :param mailing_list_id: The mailing_list_id of this GetCharactersCharacterIdMailLists200Ok.
        :type mailing_list_id: int
        """
        if mailing_list_id is None:
            raise ValueError("Invalid value for `mailing_list_id`, must not be `None`")

        self._mailing_list_id = mailing_list_id

    @property
    def name(self):
        """Gets the name of this GetCharactersCharacterIdMailLists200Ok.

        name string

        :return: The name of this GetCharactersCharacterIdMailLists200Ok.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this GetCharactersCharacterIdMailLists200Ok.

        name string

        :param name: The name of this GetCharactersCharacterIdMailLists200Ok.
        :type name: str
        """
        if name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")

        self._name = name
