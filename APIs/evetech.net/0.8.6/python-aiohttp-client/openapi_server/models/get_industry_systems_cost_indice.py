# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class GetIndustrySystemsCostIndice(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, activity: str=None, cost_index: float=None):
        """GetIndustrySystemsCostIndice - a model defined in OpenAPI

        :param activity: The activity of this GetIndustrySystemsCostIndice.
        :param cost_index: The cost_index of this GetIndustrySystemsCostIndice.
        """
        self.openapi_types = {
            'activity': str,
            'cost_index': float
        }

        self.attribute_map = {
            'activity': 'activity',
            'cost_index': 'cost_index'
        }

        self._activity = activity
        self._cost_index = cost_index

    @classmethod
    def from_dict(cls, dikt: dict) -> 'GetIndustrySystemsCostIndice':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The get_industry_systems_cost_indice of this GetIndustrySystemsCostIndice.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def activity(self):
        """Gets the activity of this GetIndustrySystemsCostIndice.

        activity string

        :return: The activity of this GetIndustrySystemsCostIndice.
        :rtype: str
        """
        return self._activity

    @activity.setter
    def activity(self, activity):
        """Sets the activity of this GetIndustrySystemsCostIndice.

        activity string

        :param activity: The activity of this GetIndustrySystemsCostIndice.
        :type activity: str
        """
        allowed_values = ["copying", "duplicating", "invention", "manufacturing", "none", "reaction", "researching_material_efficiency", "researching_technology", "researching_time_efficiency", "reverse_engineering"]  # noqa: E501
        if activity not in allowed_values:
            raise ValueError(
                "Invalid value for `activity` ({0}), must be one of {1}"
                .format(activity, allowed_values)
            )

        self._activity = activity

    @property
    def cost_index(self):
        """Gets the cost_index of this GetIndustrySystemsCostIndice.

        cost_index number

        :return: The cost_index of this GetIndustrySystemsCostIndice.
        :rtype: float
        """
        return self._cost_index

    @cost_index.setter
    def cost_index(self, cost_index):
        """Sets the cost_index of this GetIndustrySystemsCostIndice.

        cost_index number

        :param cost_index: The cost_index of this GetIndustrySystemsCostIndice.
        :type cost_index: float
        """
        if cost_index is None:
            raise ValueError("Invalid value for `cost_index`, must not be `None`")

        self._cost_index = cost_index
