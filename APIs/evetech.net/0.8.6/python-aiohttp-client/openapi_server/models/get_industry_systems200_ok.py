# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.get_industry_systems_cost_indice import GetIndustrySystemsCostIndice
from openapi_server import util


class GetIndustrySystems200Ok(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, cost_indices: List[GetIndustrySystemsCostIndice]=None, solar_system_id: int=None):
        """GetIndustrySystems200Ok - a model defined in OpenAPI

        :param cost_indices: The cost_indices of this GetIndustrySystems200Ok.
        :param solar_system_id: The solar_system_id of this GetIndustrySystems200Ok.
        """
        self.openapi_types = {
            'cost_indices': List[GetIndustrySystemsCostIndice],
            'solar_system_id': int
        }

        self.attribute_map = {
            'cost_indices': 'cost_indices',
            'solar_system_id': 'solar_system_id'
        }

        self._cost_indices = cost_indices
        self._solar_system_id = solar_system_id

    @classmethod
    def from_dict(cls, dikt: dict) -> 'GetIndustrySystems200Ok':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The get_industry_systems_200_ok of this GetIndustrySystems200Ok.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def cost_indices(self):
        """Gets the cost_indices of this GetIndustrySystems200Ok.

        cost_indices array

        :return: The cost_indices of this GetIndustrySystems200Ok.
        :rtype: List[GetIndustrySystemsCostIndice]
        """
        return self._cost_indices

    @cost_indices.setter
    def cost_indices(self, cost_indices):
        """Sets the cost_indices of this GetIndustrySystems200Ok.

        cost_indices array

        :param cost_indices: The cost_indices of this GetIndustrySystems200Ok.
        :type cost_indices: List[GetIndustrySystemsCostIndice]
        """
        if cost_indices is None:
            raise ValueError("Invalid value for `cost_indices`, must not be `None`")
        if cost_indices is not None and len(cost_indices) > 10:
            raise ValueError("Invalid value for `cost_indices`, number of items must be less than or equal to `10`")

        self._cost_indices = cost_indices

    @property
    def solar_system_id(self):
        """Gets the solar_system_id of this GetIndustrySystems200Ok.

        solar_system_id integer

        :return: The solar_system_id of this GetIndustrySystems200Ok.
        :rtype: int
        """
        return self._solar_system_id

    @solar_system_id.setter
    def solar_system_id(self, solar_system_id):
        """Sets the solar_system_id of this GetIndustrySystems200Ok.

        solar_system_id integer

        :param solar_system_id: The solar_system_id of this GetIndustrySystems200Ok.
        :type solar_system_id: int
        """
        if solar_system_id is None:
            raise ValueError("Invalid value for `solar_system_id`, must not be `None`")

        self._solar_system_id = solar_system_id
