# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class GetUniverseSystemKills200Ok(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, npc_kills: int=None, pod_kills: int=None, ship_kills: int=None, system_id: int=None):
        """GetUniverseSystemKills200Ok - a model defined in OpenAPI

        :param npc_kills: The npc_kills of this GetUniverseSystemKills200Ok.
        :param pod_kills: The pod_kills of this GetUniverseSystemKills200Ok.
        :param ship_kills: The ship_kills of this GetUniverseSystemKills200Ok.
        :param system_id: The system_id of this GetUniverseSystemKills200Ok.
        """
        self.openapi_types = {
            'npc_kills': int,
            'pod_kills': int,
            'ship_kills': int,
            'system_id': int
        }

        self.attribute_map = {
            'npc_kills': 'npc_kills',
            'pod_kills': 'pod_kills',
            'ship_kills': 'ship_kills',
            'system_id': 'system_id'
        }

        self._npc_kills = npc_kills
        self._pod_kills = pod_kills
        self._ship_kills = ship_kills
        self._system_id = system_id

    @classmethod
    def from_dict(cls, dikt: dict) -> 'GetUniverseSystemKills200Ok':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The get_universe_system_kills_200_ok of this GetUniverseSystemKills200Ok.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def npc_kills(self):
        """Gets the npc_kills of this GetUniverseSystemKills200Ok.

        Number of NPC ships killed in this system

        :return: The npc_kills of this GetUniverseSystemKills200Ok.
        :rtype: int
        """
        return self._npc_kills

    @npc_kills.setter
    def npc_kills(self, npc_kills):
        """Sets the npc_kills of this GetUniverseSystemKills200Ok.

        Number of NPC ships killed in this system

        :param npc_kills: The npc_kills of this GetUniverseSystemKills200Ok.
        :type npc_kills: int
        """
        if npc_kills is None:
            raise ValueError("Invalid value for `npc_kills`, must not be `None`")

        self._npc_kills = npc_kills

    @property
    def pod_kills(self):
        """Gets the pod_kills of this GetUniverseSystemKills200Ok.

        Number of pods killed in this system

        :return: The pod_kills of this GetUniverseSystemKills200Ok.
        :rtype: int
        """
        return self._pod_kills

    @pod_kills.setter
    def pod_kills(self, pod_kills):
        """Sets the pod_kills of this GetUniverseSystemKills200Ok.

        Number of pods killed in this system

        :param pod_kills: The pod_kills of this GetUniverseSystemKills200Ok.
        :type pod_kills: int
        """
        if pod_kills is None:
            raise ValueError("Invalid value for `pod_kills`, must not be `None`")

        self._pod_kills = pod_kills

    @property
    def ship_kills(self):
        """Gets the ship_kills of this GetUniverseSystemKills200Ok.

        Number of player ships killed in this system

        :return: The ship_kills of this GetUniverseSystemKills200Ok.
        :rtype: int
        """
        return self._ship_kills

    @ship_kills.setter
    def ship_kills(self, ship_kills):
        """Sets the ship_kills of this GetUniverseSystemKills200Ok.

        Number of player ships killed in this system

        :param ship_kills: The ship_kills of this GetUniverseSystemKills200Ok.
        :type ship_kills: int
        """
        if ship_kills is None:
            raise ValueError("Invalid value for `ship_kills`, must not be `None`")

        self._ship_kills = ship_kills

    @property
    def system_id(self):
        """Gets the system_id of this GetUniverseSystemKills200Ok.

        system_id integer

        :return: The system_id of this GetUniverseSystemKills200Ok.
        :rtype: int
        """
        return self._system_id

    @system_id.setter
    def system_id(self, system_id):
        """Sets the system_id of this GetUniverseSystemKills200Ok.

        system_id integer

        :param system_id: The system_id of this GetUniverseSystemKills200Ok.
        :type system_id: int
        """
        if system_id is None:
            raise ValueError("Invalid value for `system_id`, must not be `None`")

        self._system_id = system_id
