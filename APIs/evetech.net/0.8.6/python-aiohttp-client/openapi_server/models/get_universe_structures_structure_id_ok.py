# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.get_universe_structures_structure_id_position import GetUniverseStructuresStructureIdPosition
from openapi_server import util


class GetUniverseStructuresStructureIdOk(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, name: str=None, owner_id: int=None, position: GetUniverseStructuresStructureIdPosition=None, solar_system_id: int=None, type_id: int=None):
        """GetUniverseStructuresStructureIdOk - a model defined in OpenAPI

        :param name: The name of this GetUniverseStructuresStructureIdOk.
        :param owner_id: The owner_id of this GetUniverseStructuresStructureIdOk.
        :param position: The position of this GetUniverseStructuresStructureIdOk.
        :param solar_system_id: The solar_system_id of this GetUniverseStructuresStructureIdOk.
        :param type_id: The type_id of this GetUniverseStructuresStructureIdOk.
        """
        self.openapi_types = {
            'name': str,
            'owner_id': int,
            'position': GetUniverseStructuresStructureIdPosition,
            'solar_system_id': int,
            'type_id': int
        }

        self.attribute_map = {
            'name': 'name',
            'owner_id': 'owner_id',
            'position': 'position',
            'solar_system_id': 'solar_system_id',
            'type_id': 'type_id'
        }

        self._name = name
        self._owner_id = owner_id
        self._position = position
        self._solar_system_id = solar_system_id
        self._type_id = type_id

    @classmethod
    def from_dict(cls, dikt: dict) -> 'GetUniverseStructuresStructureIdOk':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The get_universe_structures_structure_id_ok of this GetUniverseStructuresStructureIdOk.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def name(self):
        """Gets the name of this GetUniverseStructuresStructureIdOk.

        The full name of the structure

        :return: The name of this GetUniverseStructuresStructureIdOk.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this GetUniverseStructuresStructureIdOk.

        The full name of the structure

        :param name: The name of this GetUniverseStructuresStructureIdOk.
        :type name: str
        """
        if name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")

        self._name = name

    @property
    def owner_id(self):
        """Gets the owner_id of this GetUniverseStructuresStructureIdOk.

        The ID of the corporation who owns this particular structure

        :return: The owner_id of this GetUniverseStructuresStructureIdOk.
        :rtype: int
        """
        return self._owner_id

    @owner_id.setter
    def owner_id(self, owner_id):
        """Sets the owner_id of this GetUniverseStructuresStructureIdOk.

        The ID of the corporation who owns this particular structure

        :param owner_id: The owner_id of this GetUniverseStructuresStructureIdOk.
        :type owner_id: int
        """
        if owner_id is None:
            raise ValueError("Invalid value for `owner_id`, must not be `None`")

        self._owner_id = owner_id

    @property
    def position(self):
        """Gets the position of this GetUniverseStructuresStructureIdOk.


        :return: The position of this GetUniverseStructuresStructureIdOk.
        :rtype: GetUniverseStructuresStructureIdPosition
        """
        return self._position

    @position.setter
    def position(self, position):
        """Sets the position of this GetUniverseStructuresStructureIdOk.


        :param position: The position of this GetUniverseStructuresStructureIdOk.
        :type position: GetUniverseStructuresStructureIdPosition
        """

        self._position = position

    @property
    def solar_system_id(self):
        """Gets the solar_system_id of this GetUniverseStructuresStructureIdOk.

        solar_system_id integer

        :return: The solar_system_id of this GetUniverseStructuresStructureIdOk.
        :rtype: int
        """
        return self._solar_system_id

    @solar_system_id.setter
    def solar_system_id(self, solar_system_id):
        """Sets the solar_system_id of this GetUniverseStructuresStructureIdOk.

        solar_system_id integer

        :param solar_system_id: The solar_system_id of this GetUniverseStructuresStructureIdOk.
        :type solar_system_id: int
        """
        if solar_system_id is None:
            raise ValueError("Invalid value for `solar_system_id`, must not be `None`")

        self._solar_system_id = solar_system_id

    @property
    def type_id(self):
        """Gets the type_id of this GetUniverseStructuresStructureIdOk.

        type_id integer

        :return: The type_id of this GetUniverseStructuresStructureIdOk.
        :rtype: int
        """
        return self._type_id

    @type_id.setter
    def type_id(self, type_id):
        """Sets the type_id of this GetUniverseStructuresStructureIdOk.

        type_id integer

        :param type_id: The type_id of this GetUniverseStructuresStructureIdOk.
        :type type_id: int
        """

        self._type_id = type_id
