# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class GetStatusOk(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, players: int=None, server_version: str=None, start_time: datetime=None, vip: bool=None):
        """GetStatusOk - a model defined in OpenAPI

        :param players: The players of this GetStatusOk.
        :param server_version: The server_version of this GetStatusOk.
        :param start_time: The start_time of this GetStatusOk.
        :param vip: The vip of this GetStatusOk.
        """
        self.openapi_types = {
            'players': int,
            'server_version': str,
            'start_time': datetime,
            'vip': bool
        }

        self.attribute_map = {
            'players': 'players',
            'server_version': 'server_version',
            'start_time': 'start_time',
            'vip': 'vip'
        }

        self._players = players
        self._server_version = server_version
        self._start_time = start_time
        self._vip = vip

    @classmethod
    def from_dict(cls, dikt: dict) -> 'GetStatusOk':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The get_status_ok of this GetStatusOk.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def players(self):
        """Gets the players of this GetStatusOk.

        Current online player count

        :return: The players of this GetStatusOk.
        :rtype: int
        """
        return self._players

    @players.setter
    def players(self, players):
        """Sets the players of this GetStatusOk.

        Current online player count

        :param players: The players of this GetStatusOk.
        :type players: int
        """
        if players is None:
            raise ValueError("Invalid value for `players`, must not be `None`")

        self._players = players

    @property
    def server_version(self):
        """Gets the server_version of this GetStatusOk.

        Running version as string

        :return: The server_version of this GetStatusOk.
        :rtype: str
        """
        return self._server_version

    @server_version.setter
    def server_version(self, server_version):
        """Sets the server_version of this GetStatusOk.

        Running version as string

        :param server_version: The server_version of this GetStatusOk.
        :type server_version: str
        """
        if server_version is None:
            raise ValueError("Invalid value for `server_version`, must not be `None`")

        self._server_version = server_version

    @property
    def start_time(self):
        """Gets the start_time of this GetStatusOk.

        Server start timestamp

        :return: The start_time of this GetStatusOk.
        :rtype: datetime
        """
        return self._start_time

    @start_time.setter
    def start_time(self, start_time):
        """Sets the start_time of this GetStatusOk.

        Server start timestamp

        :param start_time: The start_time of this GetStatusOk.
        :type start_time: datetime
        """
        if start_time is None:
            raise ValueError("Invalid value for `start_time`, must not be `None`")

        self._start_time = start_time

    @property
    def vip(self):
        """Gets the vip of this GetStatusOk.

        If the server is in VIP mode

        :return: The vip of this GetStatusOk.
        :rtype: bool
        """
        return self._vip

    @vip.setter
    def vip(self, vip):
        """Sets the vip of this GetStatusOk.

        If the server is in VIP mode

        :param vip: The vip of this GetStatusOk.
        :type vip: bool
        """

        self._vip = vip
