# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class GetCorporationCorporationIdMiningExtractions200Ok(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, chunk_arrival_time: datetime=None, extraction_start_time: datetime=None, moon_id: int=None, natural_decay_time: datetime=None, structure_id: int=None):
        """GetCorporationCorporationIdMiningExtractions200Ok - a model defined in OpenAPI

        :param chunk_arrival_time: The chunk_arrival_time of this GetCorporationCorporationIdMiningExtractions200Ok.
        :param extraction_start_time: The extraction_start_time of this GetCorporationCorporationIdMiningExtractions200Ok.
        :param moon_id: The moon_id of this GetCorporationCorporationIdMiningExtractions200Ok.
        :param natural_decay_time: The natural_decay_time of this GetCorporationCorporationIdMiningExtractions200Ok.
        :param structure_id: The structure_id of this GetCorporationCorporationIdMiningExtractions200Ok.
        """
        self.openapi_types = {
            'chunk_arrival_time': datetime,
            'extraction_start_time': datetime,
            'moon_id': int,
            'natural_decay_time': datetime,
            'structure_id': int
        }

        self.attribute_map = {
            'chunk_arrival_time': 'chunk_arrival_time',
            'extraction_start_time': 'extraction_start_time',
            'moon_id': 'moon_id',
            'natural_decay_time': 'natural_decay_time',
            'structure_id': 'structure_id'
        }

        self._chunk_arrival_time = chunk_arrival_time
        self._extraction_start_time = extraction_start_time
        self._moon_id = moon_id
        self._natural_decay_time = natural_decay_time
        self._structure_id = structure_id

    @classmethod
    def from_dict(cls, dikt: dict) -> 'GetCorporationCorporationIdMiningExtractions200Ok':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The get_corporation_corporation_id_mining_extractions_200_ok of this GetCorporationCorporationIdMiningExtractions200Ok.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def chunk_arrival_time(self):
        """Gets the chunk_arrival_time of this GetCorporationCorporationIdMiningExtractions200Ok.

        The time at which the chunk being extracted will arrive and can be fractured by the moon mining drill. 

        :return: The chunk_arrival_time of this GetCorporationCorporationIdMiningExtractions200Ok.
        :rtype: datetime
        """
        return self._chunk_arrival_time

    @chunk_arrival_time.setter
    def chunk_arrival_time(self, chunk_arrival_time):
        """Sets the chunk_arrival_time of this GetCorporationCorporationIdMiningExtractions200Ok.

        The time at which the chunk being extracted will arrive and can be fractured by the moon mining drill. 

        :param chunk_arrival_time: The chunk_arrival_time of this GetCorporationCorporationIdMiningExtractions200Ok.
        :type chunk_arrival_time: datetime
        """
        if chunk_arrival_time is None:
            raise ValueError("Invalid value for `chunk_arrival_time`, must not be `None`")

        self._chunk_arrival_time = chunk_arrival_time

    @property
    def extraction_start_time(self):
        """Gets the extraction_start_time of this GetCorporationCorporationIdMiningExtractions200Ok.

        The time at which the current extraction was initiated. 

        :return: The extraction_start_time of this GetCorporationCorporationIdMiningExtractions200Ok.
        :rtype: datetime
        """
        return self._extraction_start_time

    @extraction_start_time.setter
    def extraction_start_time(self, extraction_start_time):
        """Sets the extraction_start_time of this GetCorporationCorporationIdMiningExtractions200Ok.

        The time at which the current extraction was initiated. 

        :param extraction_start_time: The extraction_start_time of this GetCorporationCorporationIdMiningExtractions200Ok.
        :type extraction_start_time: datetime
        """
        if extraction_start_time is None:
            raise ValueError("Invalid value for `extraction_start_time`, must not be `None`")

        self._extraction_start_time = extraction_start_time

    @property
    def moon_id(self):
        """Gets the moon_id of this GetCorporationCorporationIdMiningExtractions200Ok.

        moon_id integer

        :return: The moon_id of this GetCorporationCorporationIdMiningExtractions200Ok.
        :rtype: int
        """
        return self._moon_id

    @moon_id.setter
    def moon_id(self, moon_id):
        """Sets the moon_id of this GetCorporationCorporationIdMiningExtractions200Ok.

        moon_id integer

        :param moon_id: The moon_id of this GetCorporationCorporationIdMiningExtractions200Ok.
        :type moon_id: int
        """
        if moon_id is None:
            raise ValueError("Invalid value for `moon_id`, must not be `None`")

        self._moon_id = moon_id

    @property
    def natural_decay_time(self):
        """Gets the natural_decay_time of this GetCorporationCorporationIdMiningExtractions200Ok.

        The time at which the chunk being extracted will naturally fracture if it is not first fractured by the moon mining drill. 

        :return: The natural_decay_time of this GetCorporationCorporationIdMiningExtractions200Ok.
        :rtype: datetime
        """
        return self._natural_decay_time

    @natural_decay_time.setter
    def natural_decay_time(self, natural_decay_time):
        """Sets the natural_decay_time of this GetCorporationCorporationIdMiningExtractions200Ok.

        The time at which the chunk being extracted will naturally fracture if it is not first fractured by the moon mining drill. 

        :param natural_decay_time: The natural_decay_time of this GetCorporationCorporationIdMiningExtractions200Ok.
        :type natural_decay_time: datetime
        """
        if natural_decay_time is None:
            raise ValueError("Invalid value for `natural_decay_time`, must not be `None`")

        self._natural_decay_time = natural_decay_time

    @property
    def structure_id(self):
        """Gets the structure_id of this GetCorporationCorporationIdMiningExtractions200Ok.

        structure_id integer

        :return: The structure_id of this GetCorporationCorporationIdMiningExtractions200Ok.
        :rtype: int
        """
        return self._structure_id

    @structure_id.setter
    def structure_id(self, structure_id):
        """Sets the structure_id of this GetCorporationCorporationIdMiningExtractions200Ok.

        structure_id integer

        :param structure_id: The structure_id of this GetCorporationCorporationIdMiningExtractions200Ok.
        :type structure_id: int
        """
        if structure_id is None:
            raise ValueError("Invalid value for `structure_id`, must not be `None`")

        self._structure_id = structure_id
