# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.get_universe_types_type_id_dogma_attribute import GetUniverseTypesTypeIdDogmaAttribute
from openapi_server.models.get_universe_types_type_id_dogma_effect import GetUniverseTypesTypeIdDogmaEffect
from openapi_server import util


class GetUniverseTypesTypeIdOk(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, capacity: float=None, description: str=None, dogma_attributes: List[GetUniverseTypesTypeIdDogmaAttribute]=None, dogma_effects: List[GetUniverseTypesTypeIdDogmaEffect]=None, graphic_id: int=None, group_id: int=None, icon_id: int=None, market_group_id: int=None, mass: float=None, name: str=None, packaged_volume: float=None, portion_size: int=None, published: bool=None, radius: float=None, type_id: int=None, volume: float=None):
        """GetUniverseTypesTypeIdOk - a model defined in OpenAPI

        :param capacity: The capacity of this GetUniverseTypesTypeIdOk.
        :param description: The description of this GetUniverseTypesTypeIdOk.
        :param dogma_attributes: The dogma_attributes of this GetUniverseTypesTypeIdOk.
        :param dogma_effects: The dogma_effects of this GetUniverseTypesTypeIdOk.
        :param graphic_id: The graphic_id of this GetUniverseTypesTypeIdOk.
        :param group_id: The group_id of this GetUniverseTypesTypeIdOk.
        :param icon_id: The icon_id of this GetUniverseTypesTypeIdOk.
        :param market_group_id: The market_group_id of this GetUniverseTypesTypeIdOk.
        :param mass: The mass of this GetUniverseTypesTypeIdOk.
        :param name: The name of this GetUniverseTypesTypeIdOk.
        :param packaged_volume: The packaged_volume of this GetUniverseTypesTypeIdOk.
        :param portion_size: The portion_size of this GetUniverseTypesTypeIdOk.
        :param published: The published of this GetUniverseTypesTypeIdOk.
        :param radius: The radius of this GetUniverseTypesTypeIdOk.
        :param type_id: The type_id of this GetUniverseTypesTypeIdOk.
        :param volume: The volume of this GetUniverseTypesTypeIdOk.
        """
        self.openapi_types = {
            'capacity': float,
            'description': str,
            'dogma_attributes': List[GetUniverseTypesTypeIdDogmaAttribute],
            'dogma_effects': List[GetUniverseTypesTypeIdDogmaEffect],
            'graphic_id': int,
            'group_id': int,
            'icon_id': int,
            'market_group_id': int,
            'mass': float,
            'name': str,
            'packaged_volume': float,
            'portion_size': int,
            'published': bool,
            'radius': float,
            'type_id': int,
            'volume': float
        }

        self.attribute_map = {
            'capacity': 'capacity',
            'description': 'description',
            'dogma_attributes': 'dogma_attributes',
            'dogma_effects': 'dogma_effects',
            'graphic_id': 'graphic_id',
            'group_id': 'group_id',
            'icon_id': 'icon_id',
            'market_group_id': 'market_group_id',
            'mass': 'mass',
            'name': 'name',
            'packaged_volume': 'packaged_volume',
            'portion_size': 'portion_size',
            'published': 'published',
            'radius': 'radius',
            'type_id': 'type_id',
            'volume': 'volume'
        }

        self._capacity = capacity
        self._description = description
        self._dogma_attributes = dogma_attributes
        self._dogma_effects = dogma_effects
        self._graphic_id = graphic_id
        self._group_id = group_id
        self._icon_id = icon_id
        self._market_group_id = market_group_id
        self._mass = mass
        self._name = name
        self._packaged_volume = packaged_volume
        self._portion_size = portion_size
        self._published = published
        self._radius = radius
        self._type_id = type_id
        self._volume = volume

    @classmethod
    def from_dict(cls, dikt: dict) -> 'GetUniverseTypesTypeIdOk':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The get_universe_types_type_id_ok of this GetUniverseTypesTypeIdOk.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def capacity(self):
        """Gets the capacity of this GetUniverseTypesTypeIdOk.

        capacity number

        :return: The capacity of this GetUniverseTypesTypeIdOk.
        :rtype: float
        """
        return self._capacity

    @capacity.setter
    def capacity(self, capacity):
        """Sets the capacity of this GetUniverseTypesTypeIdOk.

        capacity number

        :param capacity: The capacity of this GetUniverseTypesTypeIdOk.
        :type capacity: float
        """

        self._capacity = capacity

    @property
    def description(self):
        """Gets the description of this GetUniverseTypesTypeIdOk.

        description string

        :return: The description of this GetUniverseTypesTypeIdOk.
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this GetUniverseTypesTypeIdOk.

        description string

        :param description: The description of this GetUniverseTypesTypeIdOk.
        :type description: str
        """
        if description is None:
            raise ValueError("Invalid value for `description`, must not be `None`")

        self._description = description

    @property
    def dogma_attributes(self):
        """Gets the dogma_attributes of this GetUniverseTypesTypeIdOk.

        dogma_attributes array

        :return: The dogma_attributes of this GetUniverseTypesTypeIdOk.
        :rtype: List[GetUniverseTypesTypeIdDogmaAttribute]
        """
        return self._dogma_attributes

    @dogma_attributes.setter
    def dogma_attributes(self, dogma_attributes):
        """Sets the dogma_attributes of this GetUniverseTypesTypeIdOk.

        dogma_attributes array

        :param dogma_attributes: The dogma_attributes of this GetUniverseTypesTypeIdOk.
        :type dogma_attributes: List[GetUniverseTypesTypeIdDogmaAttribute]
        """
        if dogma_attributes is not None and len(dogma_attributes) > 1000:
            raise ValueError("Invalid value for `dogma_attributes`, number of items must be less than or equal to `1000`")

        self._dogma_attributes = dogma_attributes

    @property
    def dogma_effects(self):
        """Gets the dogma_effects of this GetUniverseTypesTypeIdOk.

        dogma_effects array

        :return: The dogma_effects of this GetUniverseTypesTypeIdOk.
        :rtype: List[GetUniverseTypesTypeIdDogmaEffect]
        """
        return self._dogma_effects

    @dogma_effects.setter
    def dogma_effects(self, dogma_effects):
        """Sets the dogma_effects of this GetUniverseTypesTypeIdOk.

        dogma_effects array

        :param dogma_effects: The dogma_effects of this GetUniverseTypesTypeIdOk.
        :type dogma_effects: List[GetUniverseTypesTypeIdDogmaEffect]
        """
        if dogma_effects is not None and len(dogma_effects) > 1000:
            raise ValueError("Invalid value for `dogma_effects`, number of items must be less than or equal to `1000`")

        self._dogma_effects = dogma_effects

    @property
    def graphic_id(self):
        """Gets the graphic_id of this GetUniverseTypesTypeIdOk.

        graphic_id integer

        :return: The graphic_id of this GetUniverseTypesTypeIdOk.
        :rtype: int
        """
        return self._graphic_id

    @graphic_id.setter
    def graphic_id(self, graphic_id):
        """Sets the graphic_id of this GetUniverseTypesTypeIdOk.

        graphic_id integer

        :param graphic_id: The graphic_id of this GetUniverseTypesTypeIdOk.
        :type graphic_id: int
        """

        self._graphic_id = graphic_id

    @property
    def group_id(self):
        """Gets the group_id of this GetUniverseTypesTypeIdOk.

        group_id integer

        :return: The group_id of this GetUniverseTypesTypeIdOk.
        :rtype: int
        """
        return self._group_id

    @group_id.setter
    def group_id(self, group_id):
        """Sets the group_id of this GetUniverseTypesTypeIdOk.

        group_id integer

        :param group_id: The group_id of this GetUniverseTypesTypeIdOk.
        :type group_id: int
        """
        if group_id is None:
            raise ValueError("Invalid value for `group_id`, must not be `None`")

        self._group_id = group_id

    @property
    def icon_id(self):
        """Gets the icon_id of this GetUniverseTypesTypeIdOk.

        icon_id integer

        :return: The icon_id of this GetUniverseTypesTypeIdOk.
        :rtype: int
        """
        return self._icon_id

    @icon_id.setter
    def icon_id(self, icon_id):
        """Sets the icon_id of this GetUniverseTypesTypeIdOk.

        icon_id integer

        :param icon_id: The icon_id of this GetUniverseTypesTypeIdOk.
        :type icon_id: int
        """

        self._icon_id = icon_id

    @property
    def market_group_id(self):
        """Gets the market_group_id of this GetUniverseTypesTypeIdOk.

        This only exists for types that can be put on the market

        :return: The market_group_id of this GetUniverseTypesTypeIdOk.
        :rtype: int
        """
        return self._market_group_id

    @market_group_id.setter
    def market_group_id(self, market_group_id):
        """Sets the market_group_id of this GetUniverseTypesTypeIdOk.

        This only exists for types that can be put on the market

        :param market_group_id: The market_group_id of this GetUniverseTypesTypeIdOk.
        :type market_group_id: int
        """

        self._market_group_id = market_group_id

    @property
    def mass(self):
        """Gets the mass of this GetUniverseTypesTypeIdOk.

        mass number

        :return: The mass of this GetUniverseTypesTypeIdOk.
        :rtype: float
        """
        return self._mass

    @mass.setter
    def mass(self, mass):
        """Sets the mass of this GetUniverseTypesTypeIdOk.

        mass number

        :param mass: The mass of this GetUniverseTypesTypeIdOk.
        :type mass: float
        """

        self._mass = mass

    @property
    def name(self):
        """Gets the name of this GetUniverseTypesTypeIdOk.

        name string

        :return: The name of this GetUniverseTypesTypeIdOk.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this GetUniverseTypesTypeIdOk.

        name string

        :param name: The name of this GetUniverseTypesTypeIdOk.
        :type name: str
        """
        if name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")

        self._name = name

    @property
    def packaged_volume(self):
        """Gets the packaged_volume of this GetUniverseTypesTypeIdOk.

        packaged_volume number

        :return: The packaged_volume of this GetUniverseTypesTypeIdOk.
        :rtype: float
        """
        return self._packaged_volume

    @packaged_volume.setter
    def packaged_volume(self, packaged_volume):
        """Sets the packaged_volume of this GetUniverseTypesTypeIdOk.

        packaged_volume number

        :param packaged_volume: The packaged_volume of this GetUniverseTypesTypeIdOk.
        :type packaged_volume: float
        """

        self._packaged_volume = packaged_volume

    @property
    def portion_size(self):
        """Gets the portion_size of this GetUniverseTypesTypeIdOk.

        portion_size integer

        :return: The portion_size of this GetUniverseTypesTypeIdOk.
        :rtype: int
        """
        return self._portion_size

    @portion_size.setter
    def portion_size(self, portion_size):
        """Sets the portion_size of this GetUniverseTypesTypeIdOk.

        portion_size integer

        :param portion_size: The portion_size of this GetUniverseTypesTypeIdOk.
        :type portion_size: int
        """

        self._portion_size = portion_size

    @property
    def published(self):
        """Gets the published of this GetUniverseTypesTypeIdOk.

        published boolean

        :return: The published of this GetUniverseTypesTypeIdOk.
        :rtype: bool
        """
        return self._published

    @published.setter
    def published(self, published):
        """Sets the published of this GetUniverseTypesTypeIdOk.

        published boolean

        :param published: The published of this GetUniverseTypesTypeIdOk.
        :type published: bool
        """
        if published is None:
            raise ValueError("Invalid value for `published`, must not be `None`")

        self._published = published

    @property
    def radius(self):
        """Gets the radius of this GetUniverseTypesTypeIdOk.

        radius number

        :return: The radius of this GetUniverseTypesTypeIdOk.
        :rtype: float
        """
        return self._radius

    @radius.setter
    def radius(self, radius):
        """Sets the radius of this GetUniverseTypesTypeIdOk.

        radius number

        :param radius: The radius of this GetUniverseTypesTypeIdOk.
        :type radius: float
        """

        self._radius = radius

    @property
    def type_id(self):
        """Gets the type_id of this GetUniverseTypesTypeIdOk.

        type_id integer

        :return: The type_id of this GetUniverseTypesTypeIdOk.
        :rtype: int
        """
        return self._type_id

    @type_id.setter
    def type_id(self, type_id):
        """Sets the type_id of this GetUniverseTypesTypeIdOk.

        type_id integer

        :param type_id: The type_id of this GetUniverseTypesTypeIdOk.
        :type type_id: int
        """
        if type_id is None:
            raise ValueError("Invalid value for `type_id`, must not be `None`")

        self._type_id = type_id

    @property
    def volume(self):
        """Gets the volume of this GetUniverseTypesTypeIdOk.

        volume number

        :return: The volume of this GetUniverseTypesTypeIdOk.
        :rtype: float
        """
        return self._volume

    @volume.setter
    def volume(self, volume):
        """Sets the volume of this GetUniverseTypesTypeIdOk.

        volume number

        :param volume: The volume of this GetUniverseTypesTypeIdOk.
        :type volume: float
        """

        self._volume = volume
