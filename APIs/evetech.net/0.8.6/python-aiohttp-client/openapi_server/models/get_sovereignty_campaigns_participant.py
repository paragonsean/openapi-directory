# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class GetSovereigntyCampaignsParticipant(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, alliance_id: int=None, score: float=None):
        """GetSovereigntyCampaignsParticipant - a model defined in OpenAPI

        :param alliance_id: The alliance_id of this GetSovereigntyCampaignsParticipant.
        :param score: The score of this GetSovereigntyCampaignsParticipant.
        """
        self.openapi_types = {
            'alliance_id': int,
            'score': float
        }

        self.attribute_map = {
            'alliance_id': 'alliance_id',
            'score': 'score'
        }

        self._alliance_id = alliance_id
        self._score = score

    @classmethod
    def from_dict(cls, dikt: dict) -> 'GetSovereigntyCampaignsParticipant':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The get_sovereignty_campaigns_participant of this GetSovereigntyCampaignsParticipant.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def alliance_id(self):
        """Gets the alliance_id of this GetSovereigntyCampaignsParticipant.

        alliance_id integer

        :return: The alliance_id of this GetSovereigntyCampaignsParticipant.
        :rtype: int
        """
        return self._alliance_id

    @alliance_id.setter
    def alliance_id(self, alliance_id):
        """Sets the alliance_id of this GetSovereigntyCampaignsParticipant.

        alliance_id integer

        :param alliance_id: The alliance_id of this GetSovereigntyCampaignsParticipant.
        :type alliance_id: int
        """
        if alliance_id is None:
            raise ValueError("Invalid value for `alliance_id`, must not be `None`")

        self._alliance_id = alliance_id

    @property
    def score(self):
        """Gets the score of this GetSovereigntyCampaignsParticipant.

        score number

        :return: The score of this GetSovereigntyCampaignsParticipant.
        :rtype: float
        """
        return self._score

    @score.setter
    def score(self, score):
        """Sets the score of this GetSovereigntyCampaignsParticipant.

        score number

        :param score: The score of this GetSovereigntyCampaignsParticipant.
        :type score: float
        """
        if score is None:
            raise ValueError("Invalid value for `score`, must not be `None`")

        self._score = score
