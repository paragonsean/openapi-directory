# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class GetCorporationCorporationIdMiningObservers200Ok(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, last_updated: date=None, observer_id: int=None, observer_type: str=None):
        """GetCorporationCorporationIdMiningObservers200Ok - a model defined in OpenAPI

        :param last_updated: The last_updated of this GetCorporationCorporationIdMiningObservers200Ok.
        :param observer_id: The observer_id of this GetCorporationCorporationIdMiningObservers200Ok.
        :param observer_type: The observer_type of this GetCorporationCorporationIdMiningObservers200Ok.
        """
        self.openapi_types = {
            'last_updated': date,
            'observer_id': int,
            'observer_type': str
        }

        self.attribute_map = {
            'last_updated': 'last_updated',
            'observer_id': 'observer_id',
            'observer_type': 'observer_type'
        }

        self._last_updated = last_updated
        self._observer_id = observer_id
        self._observer_type = observer_type

    @classmethod
    def from_dict(cls, dikt: dict) -> 'GetCorporationCorporationIdMiningObservers200Ok':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The get_corporation_corporation_id_mining_observers_200_ok of this GetCorporationCorporationIdMiningObservers200Ok.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def last_updated(self):
        """Gets the last_updated of this GetCorporationCorporationIdMiningObservers200Ok.

        last_updated string

        :return: The last_updated of this GetCorporationCorporationIdMiningObservers200Ok.
        :rtype: date
        """
        return self._last_updated

    @last_updated.setter
    def last_updated(self, last_updated):
        """Sets the last_updated of this GetCorporationCorporationIdMiningObservers200Ok.

        last_updated string

        :param last_updated: The last_updated of this GetCorporationCorporationIdMiningObservers200Ok.
        :type last_updated: date
        """
        if last_updated is None:
            raise ValueError("Invalid value for `last_updated`, must not be `None`")

        self._last_updated = last_updated

    @property
    def observer_id(self):
        """Gets the observer_id of this GetCorporationCorporationIdMiningObservers200Ok.

        The entity that was observing the asteroid field when it was mined. 

        :return: The observer_id of this GetCorporationCorporationIdMiningObservers200Ok.
        :rtype: int
        """
        return self._observer_id

    @observer_id.setter
    def observer_id(self, observer_id):
        """Sets the observer_id of this GetCorporationCorporationIdMiningObservers200Ok.

        The entity that was observing the asteroid field when it was mined. 

        :param observer_id: The observer_id of this GetCorporationCorporationIdMiningObservers200Ok.
        :type observer_id: int
        """
        if observer_id is None:
            raise ValueError("Invalid value for `observer_id`, must not be `None`")

        self._observer_id = observer_id

    @property
    def observer_type(self):
        """Gets the observer_type of this GetCorporationCorporationIdMiningObservers200Ok.

        The category of the observing entity

        :return: The observer_type of this GetCorporationCorporationIdMiningObservers200Ok.
        :rtype: str
        """
        return self._observer_type

    @observer_type.setter
    def observer_type(self, observer_type):
        """Sets the observer_type of this GetCorporationCorporationIdMiningObservers200Ok.

        The category of the observing entity

        :param observer_type: The observer_type of this GetCorporationCorporationIdMiningObservers200Ok.
        :type observer_type: str
        """
        allowed_values = ["structure"]  # noqa: E501
        if observer_type not in allowed_values:
            raise ValueError(
                "Invalid value for `observer_type` ({0}), must be one of {1}"
                .format(observer_type, allowed_values)
            )

        self._observer_type = observer_type
