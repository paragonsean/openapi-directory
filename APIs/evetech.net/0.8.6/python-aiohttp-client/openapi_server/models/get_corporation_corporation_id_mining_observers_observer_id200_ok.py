# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class GetCorporationCorporationIdMiningObserversObserverId200Ok(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, character_id: int=None, last_updated: date=None, quantity: int=None, recorded_corporation_id: int=None, type_id: int=None):
        """GetCorporationCorporationIdMiningObserversObserverId200Ok - a model defined in OpenAPI

        :param character_id: The character_id of this GetCorporationCorporationIdMiningObserversObserverId200Ok.
        :param last_updated: The last_updated of this GetCorporationCorporationIdMiningObserversObserverId200Ok.
        :param quantity: The quantity of this GetCorporationCorporationIdMiningObserversObserverId200Ok.
        :param recorded_corporation_id: The recorded_corporation_id of this GetCorporationCorporationIdMiningObserversObserverId200Ok.
        :param type_id: The type_id of this GetCorporationCorporationIdMiningObserversObserverId200Ok.
        """
        self.openapi_types = {
            'character_id': int,
            'last_updated': date,
            'quantity': int,
            'recorded_corporation_id': int,
            'type_id': int
        }

        self.attribute_map = {
            'character_id': 'character_id',
            'last_updated': 'last_updated',
            'quantity': 'quantity',
            'recorded_corporation_id': 'recorded_corporation_id',
            'type_id': 'type_id'
        }

        self._character_id = character_id
        self._last_updated = last_updated
        self._quantity = quantity
        self._recorded_corporation_id = recorded_corporation_id
        self._type_id = type_id

    @classmethod
    def from_dict(cls, dikt: dict) -> 'GetCorporationCorporationIdMiningObserversObserverId200Ok':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The get_corporation_corporation_id_mining_observers_observer_id_200_ok of this GetCorporationCorporationIdMiningObserversObserverId200Ok.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def character_id(self):
        """Gets the character_id of this GetCorporationCorporationIdMiningObserversObserverId200Ok.

        The character that did the mining 

        :return: The character_id of this GetCorporationCorporationIdMiningObserversObserverId200Ok.
        :rtype: int
        """
        return self._character_id

    @character_id.setter
    def character_id(self, character_id):
        """Sets the character_id of this GetCorporationCorporationIdMiningObserversObserverId200Ok.

        The character that did the mining 

        :param character_id: The character_id of this GetCorporationCorporationIdMiningObserversObserverId200Ok.
        :type character_id: int
        """
        if character_id is None:
            raise ValueError("Invalid value for `character_id`, must not be `None`")

        self._character_id = character_id

    @property
    def last_updated(self):
        """Gets the last_updated of this GetCorporationCorporationIdMiningObserversObserverId200Ok.

        last_updated string

        :return: The last_updated of this GetCorporationCorporationIdMiningObserversObserverId200Ok.
        :rtype: date
        """
        return self._last_updated

    @last_updated.setter
    def last_updated(self, last_updated):
        """Sets the last_updated of this GetCorporationCorporationIdMiningObserversObserverId200Ok.

        last_updated string

        :param last_updated: The last_updated of this GetCorporationCorporationIdMiningObserversObserverId200Ok.
        :type last_updated: date
        """
        if last_updated is None:
            raise ValueError("Invalid value for `last_updated`, must not be `None`")

        self._last_updated = last_updated

    @property
    def quantity(self):
        """Gets the quantity of this GetCorporationCorporationIdMiningObserversObserverId200Ok.

        quantity integer

        :return: The quantity of this GetCorporationCorporationIdMiningObserversObserverId200Ok.
        :rtype: int
        """
        return self._quantity

    @quantity.setter
    def quantity(self, quantity):
        """Sets the quantity of this GetCorporationCorporationIdMiningObserversObserverId200Ok.

        quantity integer

        :param quantity: The quantity of this GetCorporationCorporationIdMiningObserversObserverId200Ok.
        :type quantity: int
        """
        if quantity is None:
            raise ValueError("Invalid value for `quantity`, must not be `None`")

        self._quantity = quantity

    @property
    def recorded_corporation_id(self):
        """Gets the recorded_corporation_id of this GetCorporationCorporationIdMiningObserversObserverId200Ok.

        The corporation id of the character at the time data was recorded. 

        :return: The recorded_corporation_id of this GetCorporationCorporationIdMiningObserversObserverId200Ok.
        :rtype: int
        """
        return self._recorded_corporation_id

    @recorded_corporation_id.setter
    def recorded_corporation_id(self, recorded_corporation_id):
        """Sets the recorded_corporation_id of this GetCorporationCorporationIdMiningObserversObserverId200Ok.

        The corporation id of the character at the time data was recorded. 

        :param recorded_corporation_id: The recorded_corporation_id of this GetCorporationCorporationIdMiningObserversObserverId200Ok.
        :type recorded_corporation_id: int
        """
        if recorded_corporation_id is None:
            raise ValueError("Invalid value for `recorded_corporation_id`, must not be `None`")

        self._recorded_corporation_id = recorded_corporation_id

    @property
    def type_id(self):
        """Gets the type_id of this GetCorporationCorporationIdMiningObserversObserverId200Ok.

        type_id integer

        :return: The type_id of this GetCorporationCorporationIdMiningObserversObserverId200Ok.
        :rtype: int
        """
        return self._type_id

    @type_id.setter
    def type_id(self, type_id):
        """Sets the type_id of this GetCorporationCorporationIdMiningObserversObserverId200Ok.

        type_id integer

        :param type_id: The type_id of this GetCorporationCorporationIdMiningObserversObserverId200Ok.
        :type type_id: int
        """
        if type_id is None:
            raise ValueError("Invalid value for `type_id`, must not be `None`")

        self._type_id = type_id
