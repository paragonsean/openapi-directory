# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.get_corporations_corporation_id_divisions_hangar_hangar import GetCorporationsCorporationIdDivisionsHangarHangar
from openapi_server.models.get_corporations_corporation_id_divisions_wallet_wallet import GetCorporationsCorporationIdDivisionsWalletWallet
from openapi_server import util


class GetCorporationsCorporationIdDivisionsOk(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, hangar: List[GetCorporationsCorporationIdDivisionsHangarHangar]=None, wallet: List[GetCorporationsCorporationIdDivisionsWalletWallet]=None):
        """GetCorporationsCorporationIdDivisionsOk - a model defined in OpenAPI

        :param hangar: The hangar of this GetCorporationsCorporationIdDivisionsOk.
        :param wallet: The wallet of this GetCorporationsCorporationIdDivisionsOk.
        """
        self.openapi_types = {
            'hangar': List[GetCorporationsCorporationIdDivisionsHangarHangar],
            'wallet': List[GetCorporationsCorporationIdDivisionsWalletWallet]
        }

        self.attribute_map = {
            'hangar': 'hangar',
            'wallet': 'wallet'
        }

        self._hangar = hangar
        self._wallet = wallet

    @classmethod
    def from_dict(cls, dikt: dict) -> 'GetCorporationsCorporationIdDivisionsOk':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The get_corporations_corporation_id_divisions_ok of this GetCorporationsCorporationIdDivisionsOk.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def hangar(self):
        """Gets the hangar of this GetCorporationsCorporationIdDivisionsOk.

        hangar array

        :return: The hangar of this GetCorporationsCorporationIdDivisionsOk.
        :rtype: List[GetCorporationsCorporationIdDivisionsHangarHangar]
        """
        return self._hangar

    @hangar.setter
    def hangar(self, hangar):
        """Sets the hangar of this GetCorporationsCorporationIdDivisionsOk.

        hangar array

        :param hangar: The hangar of this GetCorporationsCorporationIdDivisionsOk.
        :type hangar: List[GetCorporationsCorporationIdDivisionsHangarHangar]
        """
        if hangar is not None and len(hangar) > 7:
            raise ValueError("Invalid value for `hangar`, number of items must be less than or equal to `7`")

        self._hangar = hangar

    @property
    def wallet(self):
        """Gets the wallet of this GetCorporationsCorporationIdDivisionsOk.

        wallet array

        :return: The wallet of this GetCorporationsCorporationIdDivisionsOk.
        :rtype: List[GetCorporationsCorporationIdDivisionsWalletWallet]
        """
        return self._wallet

    @wallet.setter
    def wallet(self, wallet):
        """Sets the wallet of this GetCorporationsCorporationIdDivisionsOk.

        wallet array

        :param wallet: The wallet of this GetCorporationsCorporationIdDivisionsOk.
        :type wallet: List[GetCorporationsCorporationIdDivisionsWalletWallet]
        """
        if wallet is not None and len(wallet) > 7:
            raise ValueError("Invalid value for `wallet`, number of items must be less than or equal to `7`")

        self._wallet = wallet
