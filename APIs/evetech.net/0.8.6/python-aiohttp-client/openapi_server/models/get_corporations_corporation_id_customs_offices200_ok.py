# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class GetCorporationsCorporationIdCustomsOffices200Ok(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, alliance_tax_rate: float=None, allow_access_with_standings: bool=None, allow_alliance_access: bool=None, bad_standing_tax_rate: float=None, corporation_tax_rate: float=None, excellent_standing_tax_rate: float=None, good_standing_tax_rate: float=None, neutral_standing_tax_rate: float=None, office_id: int=None, reinforce_exit_end: int=None, reinforce_exit_start: int=None, standing_level: str=None, system_id: int=None, terrible_standing_tax_rate: float=None):
        """GetCorporationsCorporationIdCustomsOffices200Ok - a model defined in OpenAPI

        :param alliance_tax_rate: The alliance_tax_rate of this GetCorporationsCorporationIdCustomsOffices200Ok.
        :param allow_access_with_standings: The allow_access_with_standings of this GetCorporationsCorporationIdCustomsOffices200Ok.
        :param allow_alliance_access: The allow_alliance_access of this GetCorporationsCorporationIdCustomsOffices200Ok.
        :param bad_standing_tax_rate: The bad_standing_tax_rate of this GetCorporationsCorporationIdCustomsOffices200Ok.
        :param corporation_tax_rate: The corporation_tax_rate of this GetCorporationsCorporationIdCustomsOffices200Ok.
        :param excellent_standing_tax_rate: The excellent_standing_tax_rate of this GetCorporationsCorporationIdCustomsOffices200Ok.
        :param good_standing_tax_rate: The good_standing_tax_rate of this GetCorporationsCorporationIdCustomsOffices200Ok.
        :param neutral_standing_tax_rate: The neutral_standing_tax_rate of this GetCorporationsCorporationIdCustomsOffices200Ok.
        :param office_id: The office_id of this GetCorporationsCorporationIdCustomsOffices200Ok.
        :param reinforce_exit_end: The reinforce_exit_end of this GetCorporationsCorporationIdCustomsOffices200Ok.
        :param reinforce_exit_start: The reinforce_exit_start of this GetCorporationsCorporationIdCustomsOffices200Ok.
        :param standing_level: The standing_level of this GetCorporationsCorporationIdCustomsOffices200Ok.
        :param system_id: The system_id of this GetCorporationsCorporationIdCustomsOffices200Ok.
        :param terrible_standing_tax_rate: The terrible_standing_tax_rate of this GetCorporationsCorporationIdCustomsOffices200Ok.
        """
        self.openapi_types = {
            'alliance_tax_rate': float,
            'allow_access_with_standings': bool,
            'allow_alliance_access': bool,
            'bad_standing_tax_rate': float,
            'corporation_tax_rate': float,
            'excellent_standing_tax_rate': float,
            'good_standing_tax_rate': float,
            'neutral_standing_tax_rate': float,
            'office_id': int,
            'reinforce_exit_end': int,
            'reinforce_exit_start': int,
            'standing_level': str,
            'system_id': int,
            'terrible_standing_tax_rate': float
        }

        self.attribute_map = {
            'alliance_tax_rate': 'alliance_tax_rate',
            'allow_access_with_standings': 'allow_access_with_standings',
            'allow_alliance_access': 'allow_alliance_access',
            'bad_standing_tax_rate': 'bad_standing_tax_rate',
            'corporation_tax_rate': 'corporation_tax_rate',
            'excellent_standing_tax_rate': 'excellent_standing_tax_rate',
            'good_standing_tax_rate': 'good_standing_tax_rate',
            'neutral_standing_tax_rate': 'neutral_standing_tax_rate',
            'office_id': 'office_id',
            'reinforce_exit_end': 'reinforce_exit_end',
            'reinforce_exit_start': 'reinforce_exit_start',
            'standing_level': 'standing_level',
            'system_id': 'system_id',
            'terrible_standing_tax_rate': 'terrible_standing_tax_rate'
        }

        self._alliance_tax_rate = alliance_tax_rate
        self._allow_access_with_standings = allow_access_with_standings
        self._allow_alliance_access = allow_alliance_access
        self._bad_standing_tax_rate = bad_standing_tax_rate
        self._corporation_tax_rate = corporation_tax_rate
        self._excellent_standing_tax_rate = excellent_standing_tax_rate
        self._good_standing_tax_rate = good_standing_tax_rate
        self._neutral_standing_tax_rate = neutral_standing_tax_rate
        self._office_id = office_id
        self._reinforce_exit_end = reinforce_exit_end
        self._reinforce_exit_start = reinforce_exit_start
        self._standing_level = standing_level
        self._system_id = system_id
        self._terrible_standing_tax_rate = terrible_standing_tax_rate

    @classmethod
    def from_dict(cls, dikt: dict) -> 'GetCorporationsCorporationIdCustomsOffices200Ok':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The get_corporations_corporation_id_customs_offices_200_ok of this GetCorporationsCorporationIdCustomsOffices200Ok.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def alliance_tax_rate(self):
        """Gets the alliance_tax_rate of this GetCorporationsCorporationIdCustomsOffices200Ok.

        Only present if alliance access is allowed

        :return: The alliance_tax_rate of this GetCorporationsCorporationIdCustomsOffices200Ok.
        :rtype: float
        """
        return self._alliance_tax_rate

    @alliance_tax_rate.setter
    def alliance_tax_rate(self, alliance_tax_rate):
        """Sets the alliance_tax_rate of this GetCorporationsCorporationIdCustomsOffices200Ok.

        Only present if alliance access is allowed

        :param alliance_tax_rate: The alliance_tax_rate of this GetCorporationsCorporationIdCustomsOffices200Ok.
        :type alliance_tax_rate: float
        """

        self._alliance_tax_rate = alliance_tax_rate

    @property
    def allow_access_with_standings(self):
        """Gets the allow_access_with_standings of this GetCorporationsCorporationIdCustomsOffices200Ok.

        standing_level and any standing related tax rate only present when this is true

        :return: The allow_access_with_standings of this GetCorporationsCorporationIdCustomsOffices200Ok.
        :rtype: bool
        """
        return self._allow_access_with_standings

    @allow_access_with_standings.setter
    def allow_access_with_standings(self, allow_access_with_standings):
        """Sets the allow_access_with_standings of this GetCorporationsCorporationIdCustomsOffices200Ok.

        standing_level and any standing related tax rate only present when this is true

        :param allow_access_with_standings: The allow_access_with_standings of this GetCorporationsCorporationIdCustomsOffices200Ok.
        :type allow_access_with_standings: bool
        """
        if allow_access_with_standings is None:
            raise ValueError("Invalid value for `allow_access_with_standings`, must not be `None`")

        self._allow_access_with_standings = allow_access_with_standings

    @property
    def allow_alliance_access(self):
        """Gets the allow_alliance_access of this GetCorporationsCorporationIdCustomsOffices200Ok.

        allow_alliance_access boolean

        :return: The allow_alliance_access of this GetCorporationsCorporationIdCustomsOffices200Ok.
        :rtype: bool
        """
        return self._allow_alliance_access

    @allow_alliance_access.setter
    def allow_alliance_access(self, allow_alliance_access):
        """Sets the allow_alliance_access of this GetCorporationsCorporationIdCustomsOffices200Ok.

        allow_alliance_access boolean

        :param allow_alliance_access: The allow_alliance_access of this GetCorporationsCorporationIdCustomsOffices200Ok.
        :type allow_alliance_access: bool
        """
        if allow_alliance_access is None:
            raise ValueError("Invalid value for `allow_alliance_access`, must not be `None`")

        self._allow_alliance_access = allow_alliance_access

    @property
    def bad_standing_tax_rate(self):
        """Gets the bad_standing_tax_rate of this GetCorporationsCorporationIdCustomsOffices200Ok.

        bad_standing_tax_rate number

        :return: The bad_standing_tax_rate of this GetCorporationsCorporationIdCustomsOffices200Ok.
        :rtype: float
        """
        return self._bad_standing_tax_rate

    @bad_standing_tax_rate.setter
    def bad_standing_tax_rate(self, bad_standing_tax_rate):
        """Sets the bad_standing_tax_rate of this GetCorporationsCorporationIdCustomsOffices200Ok.

        bad_standing_tax_rate number

        :param bad_standing_tax_rate: The bad_standing_tax_rate of this GetCorporationsCorporationIdCustomsOffices200Ok.
        :type bad_standing_tax_rate: float
        """

        self._bad_standing_tax_rate = bad_standing_tax_rate

    @property
    def corporation_tax_rate(self):
        """Gets the corporation_tax_rate of this GetCorporationsCorporationIdCustomsOffices200Ok.

        corporation_tax_rate number

        :return: The corporation_tax_rate of this GetCorporationsCorporationIdCustomsOffices200Ok.
        :rtype: float
        """
        return self._corporation_tax_rate

    @corporation_tax_rate.setter
    def corporation_tax_rate(self, corporation_tax_rate):
        """Sets the corporation_tax_rate of this GetCorporationsCorporationIdCustomsOffices200Ok.

        corporation_tax_rate number

        :param corporation_tax_rate: The corporation_tax_rate of this GetCorporationsCorporationIdCustomsOffices200Ok.
        :type corporation_tax_rate: float
        """

        self._corporation_tax_rate = corporation_tax_rate

    @property
    def excellent_standing_tax_rate(self):
        """Gets the excellent_standing_tax_rate of this GetCorporationsCorporationIdCustomsOffices200Ok.

        Tax rate for entities with excellent level of standing, only present if this level is allowed, same for all other standing related tax rates

        :return: The excellent_standing_tax_rate of this GetCorporationsCorporationIdCustomsOffices200Ok.
        :rtype: float
        """
        return self._excellent_standing_tax_rate

    @excellent_standing_tax_rate.setter
    def excellent_standing_tax_rate(self, excellent_standing_tax_rate):
        """Sets the excellent_standing_tax_rate of this GetCorporationsCorporationIdCustomsOffices200Ok.

        Tax rate for entities with excellent level of standing, only present if this level is allowed, same for all other standing related tax rates

        :param excellent_standing_tax_rate: The excellent_standing_tax_rate of this GetCorporationsCorporationIdCustomsOffices200Ok.
        :type excellent_standing_tax_rate: float
        """

        self._excellent_standing_tax_rate = excellent_standing_tax_rate

    @property
    def good_standing_tax_rate(self):
        """Gets the good_standing_tax_rate of this GetCorporationsCorporationIdCustomsOffices200Ok.

        good_standing_tax_rate number

        :return: The good_standing_tax_rate of this GetCorporationsCorporationIdCustomsOffices200Ok.
        :rtype: float
        """
        return self._good_standing_tax_rate

    @good_standing_tax_rate.setter
    def good_standing_tax_rate(self, good_standing_tax_rate):
        """Sets the good_standing_tax_rate of this GetCorporationsCorporationIdCustomsOffices200Ok.

        good_standing_tax_rate number

        :param good_standing_tax_rate: The good_standing_tax_rate of this GetCorporationsCorporationIdCustomsOffices200Ok.
        :type good_standing_tax_rate: float
        """

        self._good_standing_tax_rate = good_standing_tax_rate

    @property
    def neutral_standing_tax_rate(self):
        """Gets the neutral_standing_tax_rate of this GetCorporationsCorporationIdCustomsOffices200Ok.

        neutral_standing_tax_rate number

        :return: The neutral_standing_tax_rate of this GetCorporationsCorporationIdCustomsOffices200Ok.
        :rtype: float
        """
        return self._neutral_standing_tax_rate

    @neutral_standing_tax_rate.setter
    def neutral_standing_tax_rate(self, neutral_standing_tax_rate):
        """Sets the neutral_standing_tax_rate of this GetCorporationsCorporationIdCustomsOffices200Ok.

        neutral_standing_tax_rate number

        :param neutral_standing_tax_rate: The neutral_standing_tax_rate of this GetCorporationsCorporationIdCustomsOffices200Ok.
        :type neutral_standing_tax_rate: float
        """

        self._neutral_standing_tax_rate = neutral_standing_tax_rate

    @property
    def office_id(self):
        """Gets the office_id of this GetCorporationsCorporationIdCustomsOffices200Ok.

        unique ID of this customs office

        :return: The office_id of this GetCorporationsCorporationIdCustomsOffices200Ok.
        :rtype: int
        """
        return self._office_id

    @office_id.setter
    def office_id(self, office_id):
        """Sets the office_id of this GetCorporationsCorporationIdCustomsOffices200Ok.

        unique ID of this customs office

        :param office_id: The office_id of this GetCorporationsCorporationIdCustomsOffices200Ok.
        :type office_id: int
        """
        if office_id is None:
            raise ValueError("Invalid value for `office_id`, must not be `None`")

        self._office_id = office_id

    @property
    def reinforce_exit_end(self):
        """Gets the reinforce_exit_end of this GetCorporationsCorporationIdCustomsOffices200Ok.

        reinforce_exit_end integer

        :return: The reinforce_exit_end of this GetCorporationsCorporationIdCustomsOffices200Ok.
        :rtype: int
        """
        return self._reinforce_exit_end

    @reinforce_exit_end.setter
    def reinforce_exit_end(self, reinforce_exit_end):
        """Sets the reinforce_exit_end of this GetCorporationsCorporationIdCustomsOffices200Ok.

        reinforce_exit_end integer

        :param reinforce_exit_end: The reinforce_exit_end of this GetCorporationsCorporationIdCustomsOffices200Ok.
        :type reinforce_exit_end: int
        """
        if reinforce_exit_end is None:
            raise ValueError("Invalid value for `reinforce_exit_end`, must not be `None`")
        if reinforce_exit_end is not None and reinforce_exit_end > 23:
            raise ValueError("Invalid value for `reinforce_exit_end`, must be a value less than or equal to `23`")
        if reinforce_exit_end is not None and reinforce_exit_end < 0:
            raise ValueError("Invalid value for `reinforce_exit_end`, must be a value greater than or equal to `0`")

        self._reinforce_exit_end = reinforce_exit_end

    @property
    def reinforce_exit_start(self):
        """Gets the reinforce_exit_start of this GetCorporationsCorporationIdCustomsOffices200Ok.

        Together with reinforce_exit_end, marks a 2-hour period where this customs office could exit reinforcement mode during the day after initial attack

        :return: The reinforce_exit_start of this GetCorporationsCorporationIdCustomsOffices200Ok.
        :rtype: int
        """
        return self._reinforce_exit_start

    @reinforce_exit_start.setter
    def reinforce_exit_start(self, reinforce_exit_start):
        """Sets the reinforce_exit_start of this GetCorporationsCorporationIdCustomsOffices200Ok.

        Together with reinforce_exit_end, marks a 2-hour period where this customs office could exit reinforcement mode during the day after initial attack

        :param reinforce_exit_start: The reinforce_exit_start of this GetCorporationsCorporationIdCustomsOffices200Ok.
        :type reinforce_exit_start: int
        """
        if reinforce_exit_start is None:
            raise ValueError("Invalid value for `reinforce_exit_start`, must not be `None`")
        if reinforce_exit_start is not None and reinforce_exit_start > 23:
            raise ValueError("Invalid value for `reinforce_exit_start`, must be a value less than or equal to `23`")
        if reinforce_exit_start is not None and reinforce_exit_start < 0:
            raise ValueError("Invalid value for `reinforce_exit_start`, must be a value greater than or equal to `0`")

        self._reinforce_exit_start = reinforce_exit_start

    @property
    def standing_level(self):
        """Gets the standing_level of this GetCorporationsCorporationIdCustomsOffices200Ok.

        Access is allowed only for entities with this level of standing or better

        :return: The standing_level of this GetCorporationsCorporationIdCustomsOffices200Ok.
        :rtype: str
        """
        return self._standing_level

    @standing_level.setter
    def standing_level(self, standing_level):
        """Sets the standing_level of this GetCorporationsCorporationIdCustomsOffices200Ok.

        Access is allowed only for entities with this level of standing or better

        :param standing_level: The standing_level of this GetCorporationsCorporationIdCustomsOffices200Ok.
        :type standing_level: str
        """
        allowed_values = ["bad", "excellent", "good", "neutral", "terrible"]  # noqa: E501
        if standing_level not in allowed_values:
            raise ValueError(
                "Invalid value for `standing_level` ({0}), must be one of {1}"
                .format(standing_level, allowed_values)
            )

        self._standing_level = standing_level

    @property
    def system_id(self):
        """Gets the system_id of this GetCorporationsCorporationIdCustomsOffices200Ok.

        ID of the solar system this customs office is located in

        :return: The system_id of this GetCorporationsCorporationIdCustomsOffices200Ok.
        :rtype: int
        """
        return self._system_id

    @system_id.setter
    def system_id(self, system_id):
        """Sets the system_id of this GetCorporationsCorporationIdCustomsOffices200Ok.

        ID of the solar system this customs office is located in

        :param system_id: The system_id of this GetCorporationsCorporationIdCustomsOffices200Ok.
        :type system_id: int
        """
        if system_id is None:
            raise ValueError("Invalid value for `system_id`, must not be `None`")

        self._system_id = system_id

    @property
    def terrible_standing_tax_rate(self):
        """Gets the terrible_standing_tax_rate of this GetCorporationsCorporationIdCustomsOffices200Ok.

        terrible_standing_tax_rate number

        :return: The terrible_standing_tax_rate of this GetCorporationsCorporationIdCustomsOffices200Ok.
        :rtype: float
        """
        return self._terrible_standing_tax_rate

    @terrible_standing_tax_rate.setter
    def terrible_standing_tax_rate(self, terrible_standing_tax_rate):
        """Sets the terrible_standing_tax_rate of this GetCorporationsCorporationIdCustomsOffices200Ok.

        terrible_standing_tax_rate number

        :param terrible_standing_tax_rate: The terrible_standing_tax_rate of this GetCorporationsCorporationIdCustomsOffices200Ok.
        :type terrible_standing_tax_rate: float
        """

        self._terrible_standing_tax_rate = terrible_standing_tax_rate
