# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class GetCharactersCharacterIdNotificationsContacts200Ok(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, message: str=None, notification_id: int=None, send_date: datetime=None, sender_character_id: int=None, standing_level: float=None):
        """GetCharactersCharacterIdNotificationsContacts200Ok - a model defined in OpenAPI

        :param message: The message of this GetCharactersCharacterIdNotificationsContacts200Ok.
        :param notification_id: The notification_id of this GetCharactersCharacterIdNotificationsContacts200Ok.
        :param send_date: The send_date of this GetCharactersCharacterIdNotificationsContacts200Ok.
        :param sender_character_id: The sender_character_id of this GetCharactersCharacterIdNotificationsContacts200Ok.
        :param standing_level: The standing_level of this GetCharactersCharacterIdNotificationsContacts200Ok.
        """
        self.openapi_types = {
            'message': str,
            'notification_id': int,
            'send_date': datetime,
            'sender_character_id': int,
            'standing_level': float
        }

        self.attribute_map = {
            'message': 'message',
            'notification_id': 'notification_id',
            'send_date': 'send_date',
            'sender_character_id': 'sender_character_id',
            'standing_level': 'standing_level'
        }

        self._message = message
        self._notification_id = notification_id
        self._send_date = send_date
        self._sender_character_id = sender_character_id
        self._standing_level = standing_level

    @classmethod
    def from_dict(cls, dikt: dict) -> 'GetCharactersCharacterIdNotificationsContacts200Ok':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The get_characters_character_id_notifications_contacts_200_ok of this GetCharactersCharacterIdNotificationsContacts200Ok.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def message(self):
        """Gets the message of this GetCharactersCharacterIdNotificationsContacts200Ok.

        message string

        :return: The message of this GetCharactersCharacterIdNotificationsContacts200Ok.
        :rtype: str
        """
        return self._message

    @message.setter
    def message(self, message):
        """Sets the message of this GetCharactersCharacterIdNotificationsContacts200Ok.

        message string

        :param message: The message of this GetCharactersCharacterIdNotificationsContacts200Ok.
        :type message: str
        """
        if message is None:
            raise ValueError("Invalid value for `message`, must not be `None`")

        self._message = message

    @property
    def notification_id(self):
        """Gets the notification_id of this GetCharactersCharacterIdNotificationsContacts200Ok.

        notification_id integer

        :return: The notification_id of this GetCharactersCharacterIdNotificationsContacts200Ok.
        :rtype: int
        """
        return self._notification_id

    @notification_id.setter
    def notification_id(self, notification_id):
        """Sets the notification_id of this GetCharactersCharacterIdNotificationsContacts200Ok.

        notification_id integer

        :param notification_id: The notification_id of this GetCharactersCharacterIdNotificationsContacts200Ok.
        :type notification_id: int
        """
        if notification_id is None:
            raise ValueError("Invalid value for `notification_id`, must not be `None`")

        self._notification_id = notification_id

    @property
    def send_date(self):
        """Gets the send_date of this GetCharactersCharacterIdNotificationsContacts200Ok.

        send_date string

        :return: The send_date of this GetCharactersCharacterIdNotificationsContacts200Ok.
        :rtype: datetime
        """
        return self._send_date

    @send_date.setter
    def send_date(self, send_date):
        """Sets the send_date of this GetCharactersCharacterIdNotificationsContacts200Ok.

        send_date string

        :param send_date: The send_date of this GetCharactersCharacterIdNotificationsContacts200Ok.
        :type send_date: datetime
        """
        if send_date is None:
            raise ValueError("Invalid value for `send_date`, must not be `None`")

        self._send_date = send_date

    @property
    def sender_character_id(self):
        """Gets the sender_character_id of this GetCharactersCharacterIdNotificationsContacts200Ok.

        sender_character_id integer

        :return: The sender_character_id of this GetCharactersCharacterIdNotificationsContacts200Ok.
        :rtype: int
        """
        return self._sender_character_id

    @sender_character_id.setter
    def sender_character_id(self, sender_character_id):
        """Sets the sender_character_id of this GetCharactersCharacterIdNotificationsContacts200Ok.

        sender_character_id integer

        :param sender_character_id: The sender_character_id of this GetCharactersCharacterIdNotificationsContacts200Ok.
        :type sender_character_id: int
        """
        if sender_character_id is None:
            raise ValueError("Invalid value for `sender_character_id`, must not be `None`")

        self._sender_character_id = sender_character_id

    @property
    def standing_level(self):
        """Gets the standing_level of this GetCharactersCharacterIdNotificationsContacts200Ok.

        A number representing the standing level the receiver has been added at by the sender. The standing levels are as follows: -10 -> Terrible | -5 -> Bad |  0 -> Neutral |  5 -> Good |  10 -> Excellent

        :return: The standing_level of this GetCharactersCharacterIdNotificationsContacts200Ok.
        :rtype: float
        """
        return self._standing_level

    @standing_level.setter
    def standing_level(self, standing_level):
        """Sets the standing_level of this GetCharactersCharacterIdNotificationsContacts200Ok.

        A number representing the standing level the receiver has been added at by the sender. The standing levels are as follows: -10 -> Terrible | -5 -> Bad |  0 -> Neutral |  5 -> Good |  10 -> Excellent

        :param standing_level: The standing_level of this GetCharactersCharacterIdNotificationsContacts200Ok.
        :type standing_level: float
        """
        if standing_level is None:
            raise ValueError("Invalid value for `standing_level`, must not be `None`")

        self._standing_level = standing_level
