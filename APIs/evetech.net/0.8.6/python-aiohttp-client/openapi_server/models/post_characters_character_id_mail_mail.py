# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.post_characters_character_id_mail_recipient import PostCharactersCharacterIdMailRecipient
from openapi_server import util


class PostCharactersCharacterIdMailMail(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, approved_cost: int=0, body: str=None, recipients: List[PostCharactersCharacterIdMailRecipient]=None, subject: str=None):
        """PostCharactersCharacterIdMailMail - a model defined in OpenAPI

        :param approved_cost: The approved_cost of this PostCharactersCharacterIdMailMail.
        :param body: The body of this PostCharactersCharacterIdMailMail.
        :param recipients: The recipients of this PostCharactersCharacterIdMailMail.
        :param subject: The subject of this PostCharactersCharacterIdMailMail.
        """
        self.openapi_types = {
            'approved_cost': int,
            'body': str,
            'recipients': List[PostCharactersCharacterIdMailRecipient],
            'subject': str
        }

        self.attribute_map = {
            'approved_cost': 'approved_cost',
            'body': 'body',
            'recipients': 'recipients',
            'subject': 'subject'
        }

        self._approved_cost = approved_cost
        self._body = body
        self._recipients = recipients
        self._subject = subject

    @classmethod
    def from_dict(cls, dikt: dict) -> 'PostCharactersCharacterIdMailMail':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The post_characters_character_id_mail_mail of this PostCharactersCharacterIdMailMail.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def approved_cost(self):
        """Gets the approved_cost of this PostCharactersCharacterIdMailMail.

        approved_cost integer

        :return: The approved_cost of this PostCharactersCharacterIdMailMail.
        :rtype: int
        """
        return self._approved_cost

    @approved_cost.setter
    def approved_cost(self, approved_cost):
        """Sets the approved_cost of this PostCharactersCharacterIdMailMail.

        approved_cost integer

        :param approved_cost: The approved_cost of this PostCharactersCharacterIdMailMail.
        :type approved_cost: int
        """

        self._approved_cost = approved_cost

    @property
    def body(self):
        """Gets the body of this PostCharactersCharacterIdMailMail.

        body string

        :return: The body of this PostCharactersCharacterIdMailMail.
        :rtype: str
        """
        return self._body

    @body.setter
    def body(self, body):
        """Sets the body of this PostCharactersCharacterIdMailMail.

        body string

        :param body: The body of this PostCharactersCharacterIdMailMail.
        :type body: str
        """
        if body is None:
            raise ValueError("Invalid value for `body`, must not be `None`")
        if body is not None and len(body) > 10000:
            raise ValueError("Invalid value for `body`, length must be less than or equal to `10000`")

        self._body = body

    @property
    def recipients(self):
        """Gets the recipients of this PostCharactersCharacterIdMailMail.

        recipients array

        :return: The recipients of this PostCharactersCharacterIdMailMail.
        :rtype: List[PostCharactersCharacterIdMailRecipient]
        """
        return self._recipients

    @recipients.setter
    def recipients(self, recipients):
        """Sets the recipients of this PostCharactersCharacterIdMailMail.

        recipients array

        :param recipients: The recipients of this PostCharactersCharacterIdMailMail.
        :type recipients: List[PostCharactersCharacterIdMailRecipient]
        """
        if recipients is None:
            raise ValueError("Invalid value for `recipients`, must not be `None`")
        if recipients is not None and len(recipients) > 50:
            raise ValueError("Invalid value for `recipients`, number of items must be less than or equal to `50`")
        if recipients is not None and len(recipients) < 1:
            raise ValueError("Invalid value for `recipients`, number of items must be greater than or equal to `1`")

        self._recipients = recipients

    @property
    def subject(self):
        """Gets the subject of this PostCharactersCharacterIdMailMail.

        subject string

        :return: The subject of this PostCharactersCharacterIdMailMail.
        :rtype: str
        """
        return self._subject

    @subject.setter
    def subject(self, subject):
        """Sets the subject of this PostCharactersCharacterIdMailMail.

        subject string

        :param subject: The subject of this PostCharactersCharacterIdMailMail.
        :type subject: str
        """
        if subject is None:
            raise ValueError("Invalid value for `subject`, must not be `None`")
        if subject is not None and len(subject) > 1000:
            raise ValueError("Invalid value for `subject`, length must be less than or equal to `1000`")

        self._subject = subject
