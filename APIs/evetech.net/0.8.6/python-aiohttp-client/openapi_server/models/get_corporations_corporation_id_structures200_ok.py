# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.get_corporations_corporation_id_structures_service import GetCorporationsCorporationIdStructuresService
from openapi_server import util


class GetCorporationsCorporationIdStructures200Ok(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, corporation_id: int=None, fuel_expires: datetime=None, next_reinforce_apply: datetime=None, next_reinforce_hour: int=None, next_reinforce_weekday: int=None, profile_id: int=None, reinforce_hour: int=None, reinforce_weekday: int=None, services: List[GetCorporationsCorporationIdStructuresService]=None, state: str=None, state_timer_end: datetime=None, state_timer_start: datetime=None, structure_id: int=None, system_id: int=None, type_id: int=None, unanchors_at: datetime=None):
        """GetCorporationsCorporationIdStructures200Ok - a model defined in OpenAPI

        :param corporation_id: The corporation_id of this GetCorporationsCorporationIdStructures200Ok.
        :param fuel_expires: The fuel_expires of this GetCorporationsCorporationIdStructures200Ok.
        :param next_reinforce_apply: The next_reinforce_apply of this GetCorporationsCorporationIdStructures200Ok.
        :param next_reinforce_hour: The next_reinforce_hour of this GetCorporationsCorporationIdStructures200Ok.
        :param next_reinforce_weekday: The next_reinforce_weekday of this GetCorporationsCorporationIdStructures200Ok.
        :param profile_id: The profile_id of this GetCorporationsCorporationIdStructures200Ok.
        :param reinforce_hour: The reinforce_hour of this GetCorporationsCorporationIdStructures200Ok.
        :param reinforce_weekday: The reinforce_weekday of this GetCorporationsCorporationIdStructures200Ok.
        :param services: The services of this GetCorporationsCorporationIdStructures200Ok.
        :param state: The state of this GetCorporationsCorporationIdStructures200Ok.
        :param state_timer_end: The state_timer_end of this GetCorporationsCorporationIdStructures200Ok.
        :param state_timer_start: The state_timer_start of this GetCorporationsCorporationIdStructures200Ok.
        :param structure_id: The structure_id of this GetCorporationsCorporationIdStructures200Ok.
        :param system_id: The system_id of this GetCorporationsCorporationIdStructures200Ok.
        :param type_id: The type_id of this GetCorporationsCorporationIdStructures200Ok.
        :param unanchors_at: The unanchors_at of this GetCorporationsCorporationIdStructures200Ok.
        """
        self.openapi_types = {
            'corporation_id': int,
            'fuel_expires': datetime,
            'next_reinforce_apply': datetime,
            'next_reinforce_hour': int,
            'next_reinforce_weekday': int,
            'profile_id': int,
            'reinforce_hour': int,
            'reinforce_weekday': int,
            'services': List[GetCorporationsCorporationIdStructuresService],
            'state': str,
            'state_timer_end': datetime,
            'state_timer_start': datetime,
            'structure_id': int,
            'system_id': int,
            'type_id': int,
            'unanchors_at': datetime
        }

        self.attribute_map = {
            'corporation_id': 'corporation_id',
            'fuel_expires': 'fuel_expires',
            'next_reinforce_apply': 'next_reinforce_apply',
            'next_reinforce_hour': 'next_reinforce_hour',
            'next_reinforce_weekday': 'next_reinforce_weekday',
            'profile_id': 'profile_id',
            'reinforce_hour': 'reinforce_hour',
            'reinforce_weekday': 'reinforce_weekday',
            'services': 'services',
            'state': 'state',
            'state_timer_end': 'state_timer_end',
            'state_timer_start': 'state_timer_start',
            'structure_id': 'structure_id',
            'system_id': 'system_id',
            'type_id': 'type_id',
            'unanchors_at': 'unanchors_at'
        }

        self._corporation_id = corporation_id
        self._fuel_expires = fuel_expires
        self._next_reinforce_apply = next_reinforce_apply
        self._next_reinforce_hour = next_reinforce_hour
        self._next_reinforce_weekday = next_reinforce_weekday
        self._profile_id = profile_id
        self._reinforce_hour = reinforce_hour
        self._reinforce_weekday = reinforce_weekday
        self._services = services
        self._state = state
        self._state_timer_end = state_timer_end
        self._state_timer_start = state_timer_start
        self._structure_id = structure_id
        self._system_id = system_id
        self._type_id = type_id
        self._unanchors_at = unanchors_at

    @classmethod
    def from_dict(cls, dikt: dict) -> 'GetCorporationsCorporationIdStructures200Ok':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The get_corporations_corporation_id_structures_200_ok of this GetCorporationsCorporationIdStructures200Ok.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def corporation_id(self):
        """Gets the corporation_id of this GetCorporationsCorporationIdStructures200Ok.

        ID of the corporation that owns the structure

        :return: The corporation_id of this GetCorporationsCorporationIdStructures200Ok.
        :rtype: int
        """
        return self._corporation_id

    @corporation_id.setter
    def corporation_id(self, corporation_id):
        """Sets the corporation_id of this GetCorporationsCorporationIdStructures200Ok.

        ID of the corporation that owns the structure

        :param corporation_id: The corporation_id of this GetCorporationsCorporationIdStructures200Ok.
        :type corporation_id: int
        """
        if corporation_id is None:
            raise ValueError("Invalid value for `corporation_id`, must not be `None`")

        self._corporation_id = corporation_id

    @property
    def fuel_expires(self):
        """Gets the fuel_expires of this GetCorporationsCorporationIdStructures200Ok.

        Date on which the structure will run out of fuel

        :return: The fuel_expires of this GetCorporationsCorporationIdStructures200Ok.
        :rtype: datetime
        """
        return self._fuel_expires

    @fuel_expires.setter
    def fuel_expires(self, fuel_expires):
        """Sets the fuel_expires of this GetCorporationsCorporationIdStructures200Ok.

        Date on which the structure will run out of fuel

        :param fuel_expires: The fuel_expires of this GetCorporationsCorporationIdStructures200Ok.
        :type fuel_expires: datetime
        """

        self._fuel_expires = fuel_expires

    @property
    def next_reinforce_apply(self):
        """Gets the next_reinforce_apply of this GetCorporationsCorporationIdStructures200Ok.

        The date and time when the structure's newly requested reinforcement times (e.g. next_reinforce_hour and next_reinforce_day) will take effect

        :return: The next_reinforce_apply of this GetCorporationsCorporationIdStructures200Ok.
        :rtype: datetime
        """
        return self._next_reinforce_apply

    @next_reinforce_apply.setter
    def next_reinforce_apply(self, next_reinforce_apply):
        """Sets the next_reinforce_apply of this GetCorporationsCorporationIdStructures200Ok.

        The date and time when the structure's newly requested reinforcement times (e.g. next_reinforce_hour and next_reinforce_day) will take effect

        :param next_reinforce_apply: The next_reinforce_apply of this GetCorporationsCorporationIdStructures200Ok.
        :type next_reinforce_apply: datetime
        """

        self._next_reinforce_apply = next_reinforce_apply

    @property
    def next_reinforce_hour(self):
        """Gets the next_reinforce_hour of this GetCorporationsCorporationIdStructures200Ok.

        The requested change to reinforce_hour that will take effect at the time shown by next_reinforce_apply

        :return: The next_reinforce_hour of this GetCorporationsCorporationIdStructures200Ok.
        :rtype: int
        """
        return self._next_reinforce_hour

    @next_reinforce_hour.setter
    def next_reinforce_hour(self, next_reinforce_hour):
        """Sets the next_reinforce_hour of this GetCorporationsCorporationIdStructures200Ok.

        The requested change to reinforce_hour that will take effect at the time shown by next_reinforce_apply

        :param next_reinforce_hour: The next_reinforce_hour of this GetCorporationsCorporationIdStructures200Ok.
        :type next_reinforce_hour: int
        """
        if next_reinforce_hour is not None and next_reinforce_hour > 23:
            raise ValueError("Invalid value for `next_reinforce_hour`, must be a value less than or equal to `23`")
        if next_reinforce_hour is not None and next_reinforce_hour < 0:
            raise ValueError("Invalid value for `next_reinforce_hour`, must be a value greater than or equal to `0`")

        self._next_reinforce_hour = next_reinforce_hour

    @property
    def next_reinforce_weekday(self):
        """Gets the next_reinforce_weekday of this GetCorporationsCorporationIdStructures200Ok.

        The requested change to reinforce_weekday that will take effect at the time shown by next_reinforce_apply

        :return: The next_reinforce_weekday of this GetCorporationsCorporationIdStructures200Ok.
        :rtype: int
        """
        return self._next_reinforce_weekday

    @next_reinforce_weekday.setter
    def next_reinforce_weekday(self, next_reinforce_weekday):
        """Sets the next_reinforce_weekday of this GetCorporationsCorporationIdStructures200Ok.

        The requested change to reinforce_weekday that will take effect at the time shown by next_reinforce_apply

        :param next_reinforce_weekday: The next_reinforce_weekday of this GetCorporationsCorporationIdStructures200Ok.
        :type next_reinforce_weekday: int
        """
        if next_reinforce_weekday is not None and next_reinforce_weekday > 6:
            raise ValueError("Invalid value for `next_reinforce_weekday`, must be a value less than or equal to `6`")
        if next_reinforce_weekday is not None and next_reinforce_weekday < 0:
            raise ValueError("Invalid value for `next_reinforce_weekday`, must be a value greater than or equal to `0`")

        self._next_reinforce_weekday = next_reinforce_weekday

    @property
    def profile_id(self):
        """Gets the profile_id of this GetCorporationsCorporationIdStructures200Ok.

        The id of the ACL profile for this citadel

        :return: The profile_id of this GetCorporationsCorporationIdStructures200Ok.
        :rtype: int
        """
        return self._profile_id

    @profile_id.setter
    def profile_id(self, profile_id):
        """Sets the profile_id of this GetCorporationsCorporationIdStructures200Ok.

        The id of the ACL profile for this citadel

        :param profile_id: The profile_id of this GetCorporationsCorporationIdStructures200Ok.
        :type profile_id: int
        """
        if profile_id is None:
            raise ValueError("Invalid value for `profile_id`, must not be `None`")

        self._profile_id = profile_id

    @property
    def reinforce_hour(self):
        """Gets the reinforce_hour of this GetCorporationsCorporationIdStructures200Ok.

        The hour of day that determines the four hour window when the structure will randomly exit its reinforcement periods and become vulnerable to attack against its armor and/or hull. The structure will become vulnerable at a random time that is +/- 2 hours centered on the value of this property

        :return: The reinforce_hour of this GetCorporationsCorporationIdStructures200Ok.
        :rtype: int
        """
        return self._reinforce_hour

    @reinforce_hour.setter
    def reinforce_hour(self, reinforce_hour):
        """Sets the reinforce_hour of this GetCorporationsCorporationIdStructures200Ok.

        The hour of day that determines the four hour window when the structure will randomly exit its reinforcement periods and become vulnerable to attack against its armor and/or hull. The structure will become vulnerable at a random time that is +/- 2 hours centered on the value of this property

        :param reinforce_hour: The reinforce_hour of this GetCorporationsCorporationIdStructures200Ok.
        :type reinforce_hour: int
        """
        if reinforce_hour is None:
            raise ValueError("Invalid value for `reinforce_hour`, must not be `None`")
        if reinforce_hour is not None and reinforce_hour > 23:
            raise ValueError("Invalid value for `reinforce_hour`, must be a value less than or equal to `23`")
        if reinforce_hour is not None and reinforce_hour < 0:
            raise ValueError("Invalid value for `reinforce_hour`, must be a value greater than or equal to `0`")

        self._reinforce_hour = reinforce_hour

    @property
    def reinforce_weekday(self):
        """Gets the reinforce_weekday of this GetCorporationsCorporationIdStructures200Ok.

        The day of the week when the structure exits its final reinforcement period and becomes vulnerable to attack against its hull. Monday is 0 and Sunday is 6

        :return: The reinforce_weekday of this GetCorporationsCorporationIdStructures200Ok.
        :rtype: int
        """
        return self._reinforce_weekday

    @reinforce_weekday.setter
    def reinforce_weekday(self, reinforce_weekday):
        """Sets the reinforce_weekday of this GetCorporationsCorporationIdStructures200Ok.

        The day of the week when the structure exits its final reinforcement period and becomes vulnerable to attack against its hull. Monday is 0 and Sunday is 6

        :param reinforce_weekday: The reinforce_weekday of this GetCorporationsCorporationIdStructures200Ok.
        :type reinforce_weekday: int
        """
        if reinforce_weekday is None:
            raise ValueError("Invalid value for `reinforce_weekday`, must not be `None`")
        if reinforce_weekday is not None and reinforce_weekday > 6:
            raise ValueError("Invalid value for `reinforce_weekday`, must be a value less than or equal to `6`")
        if reinforce_weekday is not None and reinforce_weekday < 0:
            raise ValueError("Invalid value for `reinforce_weekday`, must be a value greater than or equal to `0`")

        self._reinforce_weekday = reinforce_weekday

    @property
    def services(self):
        """Gets the services of this GetCorporationsCorporationIdStructures200Ok.

        Contains a list of service upgrades, and their state

        :return: The services of this GetCorporationsCorporationIdStructures200Ok.
        :rtype: List[GetCorporationsCorporationIdStructuresService]
        """
        return self._services

    @services.setter
    def services(self, services):
        """Sets the services of this GetCorporationsCorporationIdStructures200Ok.

        Contains a list of service upgrades, and their state

        :param services: The services of this GetCorporationsCorporationIdStructures200Ok.
        :type services: List[GetCorporationsCorporationIdStructuresService]
        """
        if services is not None and len(services) > 10:
            raise ValueError("Invalid value for `services`, number of items must be less than or equal to `10`")

        self._services = services

    @property
    def state(self):
        """Gets the state of this GetCorporationsCorporationIdStructures200Ok.

        state string

        :return: The state of this GetCorporationsCorporationIdStructures200Ok.
        :rtype: str
        """
        return self._state

    @state.setter
    def state(self, state):
        """Sets the state of this GetCorporationsCorporationIdStructures200Ok.

        state string

        :param state: The state of this GetCorporationsCorporationIdStructures200Ok.
        :type state: str
        """
        allowed_values = ["anchor_vulnerable", "anchoring", "armor_reinforce", "armor_vulnerable", "fitting_invulnerable", "hull_reinforce", "hull_vulnerable", "online_deprecated", "onlining_vulnerable", "shield_vulnerable", "unanchored", "unknown"]  # noqa: E501
        if state not in allowed_values:
            raise ValueError(
                "Invalid value for `state` ({0}), must be one of {1}"
                .format(state, allowed_values)
            )

        self._state = state

    @property
    def state_timer_end(self):
        """Gets the state_timer_end of this GetCorporationsCorporationIdStructures200Ok.

        Date at which the structure will move to it's next state

        :return: The state_timer_end of this GetCorporationsCorporationIdStructures200Ok.
        :rtype: datetime
        """
        return self._state_timer_end

    @state_timer_end.setter
    def state_timer_end(self, state_timer_end):
        """Sets the state_timer_end of this GetCorporationsCorporationIdStructures200Ok.

        Date at which the structure will move to it's next state

        :param state_timer_end: The state_timer_end of this GetCorporationsCorporationIdStructures200Ok.
        :type state_timer_end: datetime
        """

        self._state_timer_end = state_timer_end

    @property
    def state_timer_start(self):
        """Gets the state_timer_start of this GetCorporationsCorporationIdStructures200Ok.

        Date at which the structure entered it's current state

        :return: The state_timer_start of this GetCorporationsCorporationIdStructures200Ok.
        :rtype: datetime
        """
        return self._state_timer_start

    @state_timer_start.setter
    def state_timer_start(self, state_timer_start):
        """Sets the state_timer_start of this GetCorporationsCorporationIdStructures200Ok.

        Date at which the structure entered it's current state

        :param state_timer_start: The state_timer_start of this GetCorporationsCorporationIdStructures200Ok.
        :type state_timer_start: datetime
        """

        self._state_timer_start = state_timer_start

    @property
    def structure_id(self):
        """Gets the structure_id of this GetCorporationsCorporationIdStructures200Ok.

        The Item ID of the structure

        :return: The structure_id of this GetCorporationsCorporationIdStructures200Ok.
        :rtype: int
        """
        return self._structure_id

    @structure_id.setter
    def structure_id(self, structure_id):
        """Sets the structure_id of this GetCorporationsCorporationIdStructures200Ok.

        The Item ID of the structure

        :param structure_id: The structure_id of this GetCorporationsCorporationIdStructures200Ok.
        :type structure_id: int
        """
        if structure_id is None:
            raise ValueError("Invalid value for `structure_id`, must not be `None`")

        self._structure_id = structure_id

    @property
    def system_id(self):
        """Gets the system_id of this GetCorporationsCorporationIdStructures200Ok.

        The solar system the structure is in

        :return: The system_id of this GetCorporationsCorporationIdStructures200Ok.
        :rtype: int
        """
        return self._system_id

    @system_id.setter
    def system_id(self, system_id):
        """Sets the system_id of this GetCorporationsCorporationIdStructures200Ok.

        The solar system the structure is in

        :param system_id: The system_id of this GetCorporationsCorporationIdStructures200Ok.
        :type system_id: int
        """
        if system_id is None:
            raise ValueError("Invalid value for `system_id`, must not be `None`")

        self._system_id = system_id

    @property
    def type_id(self):
        """Gets the type_id of this GetCorporationsCorporationIdStructures200Ok.

        The type id of the structure

        :return: The type_id of this GetCorporationsCorporationIdStructures200Ok.
        :rtype: int
        """
        return self._type_id

    @type_id.setter
    def type_id(self, type_id):
        """Sets the type_id of this GetCorporationsCorporationIdStructures200Ok.

        The type id of the structure

        :param type_id: The type_id of this GetCorporationsCorporationIdStructures200Ok.
        :type type_id: int
        """
        if type_id is None:
            raise ValueError("Invalid value for `type_id`, must not be `None`")

        self._type_id = type_id

    @property
    def unanchors_at(self):
        """Gets the unanchors_at of this GetCorporationsCorporationIdStructures200Ok.

        Date at which the structure will unanchor

        :return: The unanchors_at of this GetCorporationsCorporationIdStructures200Ok.
        :rtype: datetime
        """
        return self._unanchors_at

    @unanchors_at.setter
    def unanchors_at(self, unanchors_at):
        """Sets the unanchors_at of this GetCorporationsCorporationIdStructures200Ok.

        Date at which the structure will unanchor

        :param unanchors_at: The unanchors_at of this GetCorporationsCorporationIdStructures200Ok.
        :type unanchors_at: datetime
        """

        self._unanchors_at = unanchors_at
