# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class GetCharactersCharacterIdStandings200Ok(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, from_id: int=None, from_type: str=None, standing: float=None):
        """GetCharactersCharacterIdStandings200Ok - a model defined in OpenAPI

        :param from_id: The from_id of this GetCharactersCharacterIdStandings200Ok.
        :param from_type: The from_type of this GetCharactersCharacterIdStandings200Ok.
        :param standing: The standing of this GetCharactersCharacterIdStandings200Ok.
        """
        self.openapi_types = {
            'from_id': int,
            'from_type': str,
            'standing': float
        }

        self.attribute_map = {
            'from_id': 'from_id',
            'from_type': 'from_type',
            'standing': 'standing'
        }

        self._from_id = from_id
        self._from_type = from_type
        self._standing = standing

    @classmethod
    def from_dict(cls, dikt: dict) -> 'GetCharactersCharacterIdStandings200Ok':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The get_characters_character_id_standings_200_ok of this GetCharactersCharacterIdStandings200Ok.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def from_id(self):
        """Gets the from_id of this GetCharactersCharacterIdStandings200Ok.

        from_id integer

        :return: The from_id of this GetCharactersCharacterIdStandings200Ok.
        :rtype: int
        """
        return self._from_id

    @from_id.setter
    def from_id(self, from_id):
        """Sets the from_id of this GetCharactersCharacterIdStandings200Ok.

        from_id integer

        :param from_id: The from_id of this GetCharactersCharacterIdStandings200Ok.
        :type from_id: int
        """
        if from_id is None:
            raise ValueError("Invalid value for `from_id`, must not be `None`")

        self._from_id = from_id

    @property
    def from_type(self):
        """Gets the from_type of this GetCharactersCharacterIdStandings200Ok.

        from_type string

        :return: The from_type of this GetCharactersCharacterIdStandings200Ok.
        :rtype: str
        """
        return self._from_type

    @from_type.setter
    def from_type(self, from_type):
        """Sets the from_type of this GetCharactersCharacterIdStandings200Ok.

        from_type string

        :param from_type: The from_type of this GetCharactersCharacterIdStandings200Ok.
        :type from_type: str
        """
        allowed_values = ["agent", "npc_corp", "faction"]  # noqa: E501
        if from_type not in allowed_values:
            raise ValueError(
                "Invalid value for `from_type` ({0}), must be one of {1}"
                .format(from_type, allowed_values)
            )

        self._from_type = from_type

    @property
    def standing(self):
        """Gets the standing of this GetCharactersCharacterIdStandings200Ok.

        standing number

        :return: The standing of this GetCharactersCharacterIdStandings200Ok.
        :rtype: float
        """
        return self._standing

    @standing.setter
    def standing(self, standing):
        """Sets the standing of this GetCharactersCharacterIdStandings200Ok.

        standing number

        :param standing: The standing of this GetCharactersCharacterIdStandings200Ok.
        :type standing: float
        """
        if standing is None:
            raise ValueError("Invalid value for `standing`, must not be `None`")

        self._standing = standing
