# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class GetCorporationsCorporationIdTitles200Ok(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, grantable_roles: List[str]=None, grantable_roles_at_base: List[str]=None, grantable_roles_at_hq: List[str]=None, grantable_roles_at_other: List[str]=None, name: str=None, roles: List[str]=None, roles_at_base: List[str]=None, roles_at_hq: List[str]=None, roles_at_other: List[str]=None, title_id: int=None):
        """GetCorporationsCorporationIdTitles200Ok - a model defined in OpenAPI

        :param grantable_roles: The grantable_roles of this GetCorporationsCorporationIdTitles200Ok.
        :param grantable_roles_at_base: The grantable_roles_at_base of this GetCorporationsCorporationIdTitles200Ok.
        :param grantable_roles_at_hq: The grantable_roles_at_hq of this GetCorporationsCorporationIdTitles200Ok.
        :param grantable_roles_at_other: The grantable_roles_at_other of this GetCorporationsCorporationIdTitles200Ok.
        :param name: The name of this GetCorporationsCorporationIdTitles200Ok.
        :param roles: The roles of this GetCorporationsCorporationIdTitles200Ok.
        :param roles_at_base: The roles_at_base of this GetCorporationsCorporationIdTitles200Ok.
        :param roles_at_hq: The roles_at_hq of this GetCorporationsCorporationIdTitles200Ok.
        :param roles_at_other: The roles_at_other of this GetCorporationsCorporationIdTitles200Ok.
        :param title_id: The title_id of this GetCorporationsCorporationIdTitles200Ok.
        """
        self.openapi_types = {
            'grantable_roles': List[str],
            'grantable_roles_at_base': List[str],
            'grantable_roles_at_hq': List[str],
            'grantable_roles_at_other': List[str],
            'name': str,
            'roles': List[str],
            'roles_at_base': List[str],
            'roles_at_hq': List[str],
            'roles_at_other': List[str],
            'title_id': int
        }

        self.attribute_map = {
            'grantable_roles': 'grantable_roles',
            'grantable_roles_at_base': 'grantable_roles_at_base',
            'grantable_roles_at_hq': 'grantable_roles_at_hq',
            'grantable_roles_at_other': 'grantable_roles_at_other',
            'name': 'name',
            'roles': 'roles',
            'roles_at_base': 'roles_at_base',
            'roles_at_hq': 'roles_at_hq',
            'roles_at_other': 'roles_at_other',
            'title_id': 'title_id'
        }

        self._grantable_roles = grantable_roles
        self._grantable_roles_at_base = grantable_roles_at_base
        self._grantable_roles_at_hq = grantable_roles_at_hq
        self._grantable_roles_at_other = grantable_roles_at_other
        self._name = name
        self._roles = roles
        self._roles_at_base = roles_at_base
        self._roles_at_hq = roles_at_hq
        self._roles_at_other = roles_at_other
        self._title_id = title_id

    @classmethod
    def from_dict(cls, dikt: dict) -> 'GetCorporationsCorporationIdTitles200Ok':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The get_corporations_corporation_id_titles_200_ok of this GetCorporationsCorporationIdTitles200Ok.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def grantable_roles(self):
        """Gets the grantable_roles of this GetCorporationsCorporationIdTitles200Ok.

        grantable_roles array

        :return: The grantable_roles of this GetCorporationsCorporationIdTitles200Ok.
        :rtype: List[str]
        """
        return self._grantable_roles

    @grantable_roles.setter
    def grantable_roles(self, grantable_roles):
        """Sets the grantable_roles of this GetCorporationsCorporationIdTitles200Ok.

        grantable_roles array

        :param grantable_roles: The grantable_roles of this GetCorporationsCorporationIdTitles200Ok.
        :type grantable_roles: List[str]
        """
        allowed_values = ["Account_Take_1", "Account_Take_2", "Account_Take_3", "Account_Take_4", "Account_Take_5", "Account_Take_6", "Account_Take_7", "Accountant", "Auditor", "Communications_Officer", "Config_Equipment", "Config_Starbase_Equipment", "Container_Take_1", "Container_Take_2", "Container_Take_3", "Container_Take_4", "Container_Take_5", "Container_Take_6", "Container_Take_7", "Contract_Manager", "Diplomat", "Director", "Factory_Manager", "Fitting_Manager", "Hangar_Query_1", "Hangar_Query_2", "Hangar_Query_3", "Hangar_Query_4", "Hangar_Query_5", "Hangar_Query_6", "Hangar_Query_7", "Hangar_Take_1", "Hangar_Take_2", "Hangar_Take_3", "Hangar_Take_4", "Hangar_Take_5", "Hangar_Take_6", "Hangar_Take_7", "Junior_Accountant", "Personnel_Manager", "Rent_Factory_Facility", "Rent_Office", "Rent_Research_Facility", "Security_Officer", "Starbase_Defense_Operator", "Starbase_Fuel_Technician", "Station_Manager", "Terrestrial_Combat_Officer", "Terrestrial_Logistics_Officer", "Trader"]  # noqa: E501
        if not set(grantable_roles).issubset(set(allowed_values)):
            raise ValueError(
                "Invalid values for `grantable_roles` [{0}], must be a subset of [{1}]"
                .format(", ".join(map(str, set(grantable_roles) - set(allowed_values))),
                        ", ".join(map(str, allowed_values)))
            )

        self._grantable_roles = grantable_roles

    @property
    def grantable_roles_at_base(self):
        """Gets the grantable_roles_at_base of this GetCorporationsCorporationIdTitles200Ok.

        grantable_roles_at_base array

        :return: The grantable_roles_at_base of this GetCorporationsCorporationIdTitles200Ok.
        :rtype: List[str]
        """
        return self._grantable_roles_at_base

    @grantable_roles_at_base.setter
    def grantable_roles_at_base(self, grantable_roles_at_base):
        """Sets the grantable_roles_at_base of this GetCorporationsCorporationIdTitles200Ok.

        grantable_roles_at_base array

        :param grantable_roles_at_base: The grantable_roles_at_base of this GetCorporationsCorporationIdTitles200Ok.
        :type grantable_roles_at_base: List[str]
        """
        allowed_values = ["Account_Take_1", "Account_Take_2", "Account_Take_3", "Account_Take_4", "Account_Take_5", "Account_Take_6", "Account_Take_7", "Accountant", "Auditor", "Communications_Officer", "Config_Equipment", "Config_Starbase_Equipment", "Container_Take_1", "Container_Take_2", "Container_Take_3", "Container_Take_4", "Container_Take_5", "Container_Take_6", "Container_Take_7", "Contract_Manager", "Diplomat", "Director", "Factory_Manager", "Fitting_Manager", "Hangar_Query_1", "Hangar_Query_2", "Hangar_Query_3", "Hangar_Query_4", "Hangar_Query_5", "Hangar_Query_6", "Hangar_Query_7", "Hangar_Take_1", "Hangar_Take_2", "Hangar_Take_3", "Hangar_Take_4", "Hangar_Take_5", "Hangar_Take_6", "Hangar_Take_7", "Junior_Accountant", "Personnel_Manager", "Rent_Factory_Facility", "Rent_Office", "Rent_Research_Facility", "Security_Officer", "Starbase_Defense_Operator", "Starbase_Fuel_Technician", "Station_Manager", "Terrestrial_Combat_Officer", "Terrestrial_Logistics_Officer", "Trader"]  # noqa: E501
        if not set(grantable_roles_at_base).issubset(set(allowed_values)):
            raise ValueError(
                "Invalid values for `grantable_roles_at_base` [{0}], must be a subset of [{1}]"
                .format(", ".join(map(str, set(grantable_roles_at_base) - set(allowed_values))),
                        ", ".join(map(str, allowed_values)))
            )

        self._grantable_roles_at_base = grantable_roles_at_base

    @property
    def grantable_roles_at_hq(self):
        """Gets the grantable_roles_at_hq of this GetCorporationsCorporationIdTitles200Ok.

        grantable_roles_at_hq array

        :return: The grantable_roles_at_hq of this GetCorporationsCorporationIdTitles200Ok.
        :rtype: List[str]
        """
        return self._grantable_roles_at_hq

    @grantable_roles_at_hq.setter
    def grantable_roles_at_hq(self, grantable_roles_at_hq):
        """Sets the grantable_roles_at_hq of this GetCorporationsCorporationIdTitles200Ok.

        grantable_roles_at_hq array

        :param grantable_roles_at_hq: The grantable_roles_at_hq of this GetCorporationsCorporationIdTitles200Ok.
        :type grantable_roles_at_hq: List[str]
        """
        allowed_values = ["Account_Take_1", "Account_Take_2", "Account_Take_3", "Account_Take_4", "Account_Take_5", "Account_Take_6", "Account_Take_7", "Accountant", "Auditor", "Communications_Officer", "Config_Equipment", "Config_Starbase_Equipment", "Container_Take_1", "Container_Take_2", "Container_Take_3", "Container_Take_4", "Container_Take_5", "Container_Take_6", "Container_Take_7", "Contract_Manager", "Diplomat", "Director", "Factory_Manager", "Fitting_Manager", "Hangar_Query_1", "Hangar_Query_2", "Hangar_Query_3", "Hangar_Query_4", "Hangar_Query_5", "Hangar_Query_6", "Hangar_Query_7", "Hangar_Take_1", "Hangar_Take_2", "Hangar_Take_3", "Hangar_Take_4", "Hangar_Take_5", "Hangar_Take_6", "Hangar_Take_7", "Junior_Accountant", "Personnel_Manager", "Rent_Factory_Facility", "Rent_Office", "Rent_Research_Facility", "Security_Officer", "Starbase_Defense_Operator", "Starbase_Fuel_Technician", "Station_Manager", "Terrestrial_Combat_Officer", "Terrestrial_Logistics_Officer", "Trader"]  # noqa: E501
        if not set(grantable_roles_at_hq).issubset(set(allowed_values)):
            raise ValueError(
                "Invalid values for `grantable_roles_at_hq` [{0}], must be a subset of [{1}]"
                .format(", ".join(map(str, set(grantable_roles_at_hq) - set(allowed_values))),
                        ", ".join(map(str, allowed_values)))
            )

        self._grantable_roles_at_hq = grantable_roles_at_hq

    @property
    def grantable_roles_at_other(self):
        """Gets the grantable_roles_at_other of this GetCorporationsCorporationIdTitles200Ok.

        grantable_roles_at_other array

        :return: The grantable_roles_at_other of this GetCorporationsCorporationIdTitles200Ok.
        :rtype: List[str]
        """
        return self._grantable_roles_at_other

    @grantable_roles_at_other.setter
    def grantable_roles_at_other(self, grantable_roles_at_other):
        """Sets the grantable_roles_at_other of this GetCorporationsCorporationIdTitles200Ok.

        grantable_roles_at_other array

        :param grantable_roles_at_other: The grantable_roles_at_other of this GetCorporationsCorporationIdTitles200Ok.
        :type grantable_roles_at_other: List[str]
        """
        allowed_values = ["Account_Take_1", "Account_Take_2", "Account_Take_3", "Account_Take_4", "Account_Take_5", "Account_Take_6", "Account_Take_7", "Accountant", "Auditor", "Communications_Officer", "Config_Equipment", "Config_Starbase_Equipment", "Container_Take_1", "Container_Take_2", "Container_Take_3", "Container_Take_4", "Container_Take_5", "Container_Take_6", "Container_Take_7", "Contract_Manager", "Diplomat", "Director", "Factory_Manager", "Fitting_Manager", "Hangar_Query_1", "Hangar_Query_2", "Hangar_Query_3", "Hangar_Query_4", "Hangar_Query_5", "Hangar_Query_6", "Hangar_Query_7", "Hangar_Take_1", "Hangar_Take_2", "Hangar_Take_3", "Hangar_Take_4", "Hangar_Take_5", "Hangar_Take_6", "Hangar_Take_7", "Junior_Accountant", "Personnel_Manager", "Rent_Factory_Facility", "Rent_Office", "Rent_Research_Facility", "Security_Officer", "Starbase_Defense_Operator", "Starbase_Fuel_Technician", "Station_Manager", "Terrestrial_Combat_Officer", "Terrestrial_Logistics_Officer", "Trader"]  # noqa: E501
        if not set(grantable_roles_at_other).issubset(set(allowed_values)):
            raise ValueError(
                "Invalid values for `grantable_roles_at_other` [{0}], must be a subset of [{1}]"
                .format(", ".join(map(str, set(grantable_roles_at_other) - set(allowed_values))),
                        ", ".join(map(str, allowed_values)))
            )

        self._grantable_roles_at_other = grantable_roles_at_other

    @property
    def name(self):
        """Gets the name of this GetCorporationsCorporationIdTitles200Ok.

        name string

        :return: The name of this GetCorporationsCorporationIdTitles200Ok.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this GetCorporationsCorporationIdTitles200Ok.

        name string

        :param name: The name of this GetCorporationsCorporationIdTitles200Ok.
        :type name: str
        """

        self._name = name

    @property
    def roles(self):
        """Gets the roles of this GetCorporationsCorporationIdTitles200Ok.

        roles array

        :return: The roles of this GetCorporationsCorporationIdTitles200Ok.
        :rtype: List[str]
        """
        return self._roles

    @roles.setter
    def roles(self, roles):
        """Sets the roles of this GetCorporationsCorporationIdTitles200Ok.

        roles array

        :param roles: The roles of this GetCorporationsCorporationIdTitles200Ok.
        :type roles: List[str]
        """
        allowed_values = ["Account_Take_1", "Account_Take_2", "Account_Take_3", "Account_Take_4", "Account_Take_5", "Account_Take_6", "Account_Take_7", "Accountant", "Auditor", "Communications_Officer", "Config_Equipment", "Config_Starbase_Equipment", "Container_Take_1", "Container_Take_2", "Container_Take_3", "Container_Take_4", "Container_Take_5", "Container_Take_6", "Container_Take_7", "Contract_Manager", "Diplomat", "Director", "Factory_Manager", "Fitting_Manager", "Hangar_Query_1", "Hangar_Query_2", "Hangar_Query_3", "Hangar_Query_4", "Hangar_Query_5", "Hangar_Query_6", "Hangar_Query_7", "Hangar_Take_1", "Hangar_Take_2", "Hangar_Take_3", "Hangar_Take_4", "Hangar_Take_5", "Hangar_Take_6", "Hangar_Take_7", "Junior_Accountant", "Personnel_Manager", "Rent_Factory_Facility", "Rent_Office", "Rent_Research_Facility", "Security_Officer", "Starbase_Defense_Operator", "Starbase_Fuel_Technician", "Station_Manager", "Terrestrial_Combat_Officer", "Terrestrial_Logistics_Officer", "Trader"]  # noqa: E501
        if not set(roles).issubset(set(allowed_values)):
            raise ValueError(
                "Invalid values for `roles` [{0}], must be a subset of [{1}]"
                .format(", ".join(map(str, set(roles) - set(allowed_values))),
                        ", ".join(map(str, allowed_values)))
            )

        self._roles = roles

    @property
    def roles_at_base(self):
        """Gets the roles_at_base of this GetCorporationsCorporationIdTitles200Ok.

        roles_at_base array

        :return: The roles_at_base of this GetCorporationsCorporationIdTitles200Ok.
        :rtype: List[str]
        """
        return self._roles_at_base

    @roles_at_base.setter
    def roles_at_base(self, roles_at_base):
        """Sets the roles_at_base of this GetCorporationsCorporationIdTitles200Ok.

        roles_at_base array

        :param roles_at_base: The roles_at_base of this GetCorporationsCorporationIdTitles200Ok.
        :type roles_at_base: List[str]
        """
        allowed_values = ["Account_Take_1", "Account_Take_2", "Account_Take_3", "Account_Take_4", "Account_Take_5", "Account_Take_6", "Account_Take_7", "Accountant", "Auditor", "Communications_Officer", "Config_Equipment", "Config_Starbase_Equipment", "Container_Take_1", "Container_Take_2", "Container_Take_3", "Container_Take_4", "Container_Take_5", "Container_Take_6", "Container_Take_7", "Contract_Manager", "Diplomat", "Director", "Factory_Manager", "Fitting_Manager", "Hangar_Query_1", "Hangar_Query_2", "Hangar_Query_3", "Hangar_Query_4", "Hangar_Query_5", "Hangar_Query_6", "Hangar_Query_7", "Hangar_Take_1", "Hangar_Take_2", "Hangar_Take_3", "Hangar_Take_4", "Hangar_Take_5", "Hangar_Take_6", "Hangar_Take_7", "Junior_Accountant", "Personnel_Manager", "Rent_Factory_Facility", "Rent_Office", "Rent_Research_Facility", "Security_Officer", "Starbase_Defense_Operator", "Starbase_Fuel_Technician", "Station_Manager", "Terrestrial_Combat_Officer", "Terrestrial_Logistics_Officer", "Trader"]  # noqa: E501
        if not set(roles_at_base).issubset(set(allowed_values)):
            raise ValueError(
                "Invalid values for `roles_at_base` [{0}], must be a subset of [{1}]"
                .format(", ".join(map(str, set(roles_at_base) - set(allowed_values))),
                        ", ".join(map(str, allowed_values)))
            )

        self._roles_at_base = roles_at_base

    @property
    def roles_at_hq(self):
        """Gets the roles_at_hq of this GetCorporationsCorporationIdTitles200Ok.

        roles_at_hq array

        :return: The roles_at_hq of this GetCorporationsCorporationIdTitles200Ok.
        :rtype: List[str]
        """
        return self._roles_at_hq

    @roles_at_hq.setter
    def roles_at_hq(self, roles_at_hq):
        """Sets the roles_at_hq of this GetCorporationsCorporationIdTitles200Ok.

        roles_at_hq array

        :param roles_at_hq: The roles_at_hq of this GetCorporationsCorporationIdTitles200Ok.
        :type roles_at_hq: List[str]
        """
        allowed_values = ["Account_Take_1", "Account_Take_2", "Account_Take_3", "Account_Take_4", "Account_Take_5", "Account_Take_6", "Account_Take_7", "Accountant", "Auditor", "Communications_Officer", "Config_Equipment", "Config_Starbase_Equipment", "Container_Take_1", "Container_Take_2", "Container_Take_3", "Container_Take_4", "Container_Take_5", "Container_Take_6", "Container_Take_7", "Contract_Manager", "Diplomat", "Director", "Factory_Manager", "Fitting_Manager", "Hangar_Query_1", "Hangar_Query_2", "Hangar_Query_3", "Hangar_Query_4", "Hangar_Query_5", "Hangar_Query_6", "Hangar_Query_7", "Hangar_Take_1", "Hangar_Take_2", "Hangar_Take_3", "Hangar_Take_4", "Hangar_Take_5", "Hangar_Take_6", "Hangar_Take_7", "Junior_Accountant", "Personnel_Manager", "Rent_Factory_Facility", "Rent_Office", "Rent_Research_Facility", "Security_Officer", "Starbase_Defense_Operator", "Starbase_Fuel_Technician", "Station_Manager", "Terrestrial_Combat_Officer", "Terrestrial_Logistics_Officer", "Trader"]  # noqa: E501
        if not set(roles_at_hq).issubset(set(allowed_values)):
            raise ValueError(
                "Invalid values for `roles_at_hq` [{0}], must be a subset of [{1}]"
                .format(", ".join(map(str, set(roles_at_hq) - set(allowed_values))),
                        ", ".join(map(str, allowed_values)))
            )

        self._roles_at_hq = roles_at_hq

    @property
    def roles_at_other(self):
        """Gets the roles_at_other of this GetCorporationsCorporationIdTitles200Ok.

        roles_at_other array

        :return: The roles_at_other of this GetCorporationsCorporationIdTitles200Ok.
        :rtype: List[str]
        """
        return self._roles_at_other

    @roles_at_other.setter
    def roles_at_other(self, roles_at_other):
        """Sets the roles_at_other of this GetCorporationsCorporationIdTitles200Ok.

        roles_at_other array

        :param roles_at_other: The roles_at_other of this GetCorporationsCorporationIdTitles200Ok.
        :type roles_at_other: List[str]
        """
        allowed_values = ["Account_Take_1", "Account_Take_2", "Account_Take_3", "Account_Take_4", "Account_Take_5", "Account_Take_6", "Account_Take_7", "Accountant", "Auditor", "Communications_Officer", "Config_Equipment", "Config_Starbase_Equipment", "Container_Take_1", "Container_Take_2", "Container_Take_3", "Container_Take_4", "Container_Take_5", "Container_Take_6", "Container_Take_7", "Contract_Manager", "Diplomat", "Director", "Factory_Manager", "Fitting_Manager", "Hangar_Query_1", "Hangar_Query_2", "Hangar_Query_3", "Hangar_Query_4", "Hangar_Query_5", "Hangar_Query_6", "Hangar_Query_7", "Hangar_Take_1", "Hangar_Take_2", "Hangar_Take_3", "Hangar_Take_4", "Hangar_Take_5", "Hangar_Take_6", "Hangar_Take_7", "Junior_Accountant", "Personnel_Manager", "Rent_Factory_Facility", "Rent_Office", "Rent_Research_Facility", "Security_Officer", "Starbase_Defense_Operator", "Starbase_Fuel_Technician", "Station_Manager", "Terrestrial_Combat_Officer", "Terrestrial_Logistics_Officer", "Trader"]  # noqa: E501
        if not set(roles_at_other).issubset(set(allowed_values)):
            raise ValueError(
                "Invalid values for `roles_at_other` [{0}], must be a subset of [{1}]"
                .format(", ".join(map(str, set(roles_at_other) - set(allowed_values))),
                        ", ".join(map(str, allowed_values)))
            )

        self._roles_at_other = roles_at_other

    @property
    def title_id(self):
        """Gets the title_id of this GetCorporationsCorporationIdTitles200Ok.

        title_id integer

        :return: The title_id of this GetCorporationsCorporationIdTitles200Ok.
        :rtype: int
        """
        return self._title_id

    @title_id.setter
    def title_id(self, title_id):
        """Sets the title_id of this GetCorporationsCorporationIdTitles200Ok.

        title_id integer

        :param title_id: The title_id of this GetCorporationsCorporationIdTitles200Ok.
        :type title_id: int
        """

        self._title_id = title_id
