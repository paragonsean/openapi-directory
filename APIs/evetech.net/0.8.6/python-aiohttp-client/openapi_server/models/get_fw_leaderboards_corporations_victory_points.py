# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.get_fw_leaderboards_corporations_active_total_active_total1 import GetFwLeaderboardsCorporationsActiveTotalActiveTotal1
from openapi_server.models.get_fw_leaderboards_corporations_last_week_last_week1 import GetFwLeaderboardsCorporationsLastWeekLastWeek1
from openapi_server.models.get_fw_leaderboards_corporations_yesterday_yesterday1 import GetFwLeaderboardsCorporationsYesterdayYesterday1
from openapi_server import util


class GetFwLeaderboardsCorporationsVictoryPoints(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, active_total: List[GetFwLeaderboardsCorporationsActiveTotalActiveTotal1]=None, last_week: List[GetFwLeaderboardsCorporationsLastWeekLastWeek1]=None, yesterday: List[GetFwLeaderboardsCorporationsYesterdayYesterday1]=None):
        """GetFwLeaderboardsCorporationsVictoryPoints - a model defined in OpenAPI

        :param active_total: The active_total of this GetFwLeaderboardsCorporationsVictoryPoints.
        :param last_week: The last_week of this GetFwLeaderboardsCorporationsVictoryPoints.
        :param yesterday: The yesterday of this GetFwLeaderboardsCorporationsVictoryPoints.
        """
        self.openapi_types = {
            'active_total': List[GetFwLeaderboardsCorporationsActiveTotalActiveTotal1],
            'last_week': List[GetFwLeaderboardsCorporationsLastWeekLastWeek1],
            'yesterday': List[GetFwLeaderboardsCorporationsYesterdayYesterday1]
        }

        self.attribute_map = {
            'active_total': 'active_total',
            'last_week': 'last_week',
            'yesterday': 'yesterday'
        }

        self._active_total = active_total
        self._last_week = last_week
        self._yesterday = yesterday

    @classmethod
    def from_dict(cls, dikt: dict) -> 'GetFwLeaderboardsCorporationsVictoryPoints':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The get_fw_leaderboards_corporations_victory_points of this GetFwLeaderboardsCorporationsVictoryPoints.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def active_total(self):
        """Gets the active_total of this GetFwLeaderboardsCorporationsVictoryPoints.

        Top 10 ranking of corporations active in faction warfare by total victory points. A corporation is considered \"active\" if they have participated in faction warfare in the past 14 days

        :return: The active_total of this GetFwLeaderboardsCorporationsVictoryPoints.
        :rtype: List[GetFwLeaderboardsCorporationsActiveTotalActiveTotal1]
        """
        return self._active_total

    @active_total.setter
    def active_total(self, active_total):
        """Sets the active_total of this GetFwLeaderboardsCorporationsVictoryPoints.

        Top 10 ranking of corporations active in faction warfare by total victory points. A corporation is considered \"active\" if they have participated in faction warfare in the past 14 days

        :param active_total: The active_total of this GetFwLeaderboardsCorporationsVictoryPoints.
        :type active_total: List[GetFwLeaderboardsCorporationsActiveTotalActiveTotal1]
        """
        if active_total is None:
            raise ValueError("Invalid value for `active_total`, must not be `None`")
        if active_total is not None and len(active_total) > 10:
            raise ValueError("Invalid value for `active_total`, number of items must be less than or equal to `10`")

        self._active_total = active_total

    @property
    def last_week(self):
        """Gets the last_week of this GetFwLeaderboardsCorporationsVictoryPoints.

        Top 10 ranking of corporations by victory points in the past week

        :return: The last_week of this GetFwLeaderboardsCorporationsVictoryPoints.
        :rtype: List[GetFwLeaderboardsCorporationsLastWeekLastWeek1]
        """
        return self._last_week

    @last_week.setter
    def last_week(self, last_week):
        """Sets the last_week of this GetFwLeaderboardsCorporationsVictoryPoints.

        Top 10 ranking of corporations by victory points in the past week

        :param last_week: The last_week of this GetFwLeaderboardsCorporationsVictoryPoints.
        :type last_week: List[GetFwLeaderboardsCorporationsLastWeekLastWeek1]
        """
        if last_week is None:
            raise ValueError("Invalid value for `last_week`, must not be `None`")
        if last_week is not None and len(last_week) > 10:
            raise ValueError("Invalid value for `last_week`, number of items must be less than or equal to `10`")

        self._last_week = last_week

    @property
    def yesterday(self):
        """Gets the yesterday of this GetFwLeaderboardsCorporationsVictoryPoints.

        Top 10 ranking of corporations by victory points in the past day

        :return: The yesterday of this GetFwLeaderboardsCorporationsVictoryPoints.
        :rtype: List[GetFwLeaderboardsCorporationsYesterdayYesterday1]
        """
        return self._yesterday

    @yesterday.setter
    def yesterday(self, yesterday):
        """Sets the yesterday of this GetFwLeaderboardsCorporationsVictoryPoints.

        Top 10 ranking of corporations by victory points in the past day

        :param yesterday: The yesterday of this GetFwLeaderboardsCorporationsVictoryPoints.
        :type yesterday: List[GetFwLeaderboardsCorporationsYesterdayYesterday1]
        """
        if yesterday is None:
            raise ValueError("Invalid value for `yesterday`, must not be `None`")
        if yesterday is not None and len(yesterday) > 10:
            raise ValueError("Invalid value for `yesterday`, number of items must be less than or equal to `10`")

        self._yesterday = yesterday
