# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.get_killmails_killmail_id_killmail_hash_items_item import GetKillmailsKillmailIdKillmailHashItemsItem
from openapi_server import util


class GetKillmailsKillmailIdKillmailHashItem(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, flag: int=None, item_type_id: int=None, items: List[GetKillmailsKillmailIdKillmailHashItemsItem]=None, quantity_destroyed: int=None, quantity_dropped: int=None, singleton: int=None):
        """GetKillmailsKillmailIdKillmailHashItem - a model defined in OpenAPI

        :param flag: The flag of this GetKillmailsKillmailIdKillmailHashItem.
        :param item_type_id: The item_type_id of this GetKillmailsKillmailIdKillmailHashItem.
        :param items: The items of this GetKillmailsKillmailIdKillmailHashItem.
        :param quantity_destroyed: The quantity_destroyed of this GetKillmailsKillmailIdKillmailHashItem.
        :param quantity_dropped: The quantity_dropped of this GetKillmailsKillmailIdKillmailHashItem.
        :param singleton: The singleton of this GetKillmailsKillmailIdKillmailHashItem.
        """
        self.openapi_types = {
            'flag': int,
            'item_type_id': int,
            'items': List[GetKillmailsKillmailIdKillmailHashItemsItem],
            'quantity_destroyed': int,
            'quantity_dropped': int,
            'singleton': int
        }

        self.attribute_map = {
            'flag': 'flag',
            'item_type_id': 'item_type_id',
            'items': 'items',
            'quantity_destroyed': 'quantity_destroyed',
            'quantity_dropped': 'quantity_dropped',
            'singleton': 'singleton'
        }

        self._flag = flag
        self._item_type_id = item_type_id
        self._items = items
        self._quantity_destroyed = quantity_destroyed
        self._quantity_dropped = quantity_dropped
        self._singleton = singleton

    @classmethod
    def from_dict(cls, dikt: dict) -> 'GetKillmailsKillmailIdKillmailHashItem':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The get_killmails_killmail_id_killmail_hash_item of this GetKillmailsKillmailIdKillmailHashItem.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def flag(self):
        """Gets the flag of this GetKillmailsKillmailIdKillmailHashItem.

        Flag for the location of the item 

        :return: The flag of this GetKillmailsKillmailIdKillmailHashItem.
        :rtype: int
        """
        return self._flag

    @flag.setter
    def flag(self, flag):
        """Sets the flag of this GetKillmailsKillmailIdKillmailHashItem.

        Flag for the location of the item 

        :param flag: The flag of this GetKillmailsKillmailIdKillmailHashItem.
        :type flag: int
        """
        if flag is None:
            raise ValueError("Invalid value for `flag`, must not be `None`")

        self._flag = flag

    @property
    def item_type_id(self):
        """Gets the item_type_id of this GetKillmailsKillmailIdKillmailHashItem.

        item_type_id integer

        :return: The item_type_id of this GetKillmailsKillmailIdKillmailHashItem.
        :rtype: int
        """
        return self._item_type_id

    @item_type_id.setter
    def item_type_id(self, item_type_id):
        """Sets the item_type_id of this GetKillmailsKillmailIdKillmailHashItem.

        item_type_id integer

        :param item_type_id: The item_type_id of this GetKillmailsKillmailIdKillmailHashItem.
        :type item_type_id: int
        """
        if item_type_id is None:
            raise ValueError("Invalid value for `item_type_id`, must not be `None`")

        self._item_type_id = item_type_id

    @property
    def items(self):
        """Gets the items of this GetKillmailsKillmailIdKillmailHashItem.

        items array

        :return: The items of this GetKillmailsKillmailIdKillmailHashItem.
        :rtype: List[GetKillmailsKillmailIdKillmailHashItemsItem]
        """
        return self._items

    @items.setter
    def items(self, items):
        """Sets the items of this GetKillmailsKillmailIdKillmailHashItem.

        items array

        :param items: The items of this GetKillmailsKillmailIdKillmailHashItem.
        :type items: List[GetKillmailsKillmailIdKillmailHashItemsItem]
        """
        if items is not None and len(items) > 10000:
            raise ValueError("Invalid value for `items`, number of items must be less than or equal to `10000`")

        self._items = items

    @property
    def quantity_destroyed(self):
        """Gets the quantity_destroyed of this GetKillmailsKillmailIdKillmailHashItem.

        How many of the item were destroyed if any 

        :return: The quantity_destroyed of this GetKillmailsKillmailIdKillmailHashItem.
        :rtype: int
        """
        return self._quantity_destroyed

    @quantity_destroyed.setter
    def quantity_destroyed(self, quantity_destroyed):
        """Sets the quantity_destroyed of this GetKillmailsKillmailIdKillmailHashItem.

        How many of the item were destroyed if any 

        :param quantity_destroyed: The quantity_destroyed of this GetKillmailsKillmailIdKillmailHashItem.
        :type quantity_destroyed: int
        """

        self._quantity_destroyed = quantity_destroyed

    @property
    def quantity_dropped(self):
        """Gets the quantity_dropped of this GetKillmailsKillmailIdKillmailHashItem.

        How many of the item were dropped if any 

        :return: The quantity_dropped of this GetKillmailsKillmailIdKillmailHashItem.
        :rtype: int
        """
        return self._quantity_dropped

    @quantity_dropped.setter
    def quantity_dropped(self, quantity_dropped):
        """Sets the quantity_dropped of this GetKillmailsKillmailIdKillmailHashItem.

        How many of the item were dropped if any 

        :param quantity_dropped: The quantity_dropped of this GetKillmailsKillmailIdKillmailHashItem.
        :type quantity_dropped: int
        """

        self._quantity_dropped = quantity_dropped

    @property
    def singleton(self):
        """Gets the singleton of this GetKillmailsKillmailIdKillmailHashItem.

        singleton integer

        :return: The singleton of this GetKillmailsKillmailIdKillmailHashItem.
        :rtype: int
        """
        return self._singleton

    @singleton.setter
    def singleton(self, singleton):
        """Sets the singleton of this GetKillmailsKillmailIdKillmailHashItem.

        singleton integer

        :param singleton: The singleton of this GetKillmailsKillmailIdKillmailHashItem.
        :type singleton: int
        """
        if singleton is None:
            raise ValueError("Invalid value for `singleton`, must not be `None`")

        self._singleton = singleton
