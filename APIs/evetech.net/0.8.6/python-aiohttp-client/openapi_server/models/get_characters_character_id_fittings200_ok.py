# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.get_characters_character_id_fittings_item import GetCharactersCharacterIdFittingsItem
from openapi_server import util


class GetCharactersCharacterIdFittings200Ok(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, description: str=None, fitting_id: int=None, items: List[GetCharactersCharacterIdFittingsItem]=None, name: str=None, ship_type_id: int=None):
        """GetCharactersCharacterIdFittings200Ok - a model defined in OpenAPI

        :param description: The description of this GetCharactersCharacterIdFittings200Ok.
        :param fitting_id: The fitting_id of this GetCharactersCharacterIdFittings200Ok.
        :param items: The items of this GetCharactersCharacterIdFittings200Ok.
        :param name: The name of this GetCharactersCharacterIdFittings200Ok.
        :param ship_type_id: The ship_type_id of this GetCharactersCharacterIdFittings200Ok.
        """
        self.openapi_types = {
            'description': str,
            'fitting_id': int,
            'items': List[GetCharactersCharacterIdFittingsItem],
            'name': str,
            'ship_type_id': int
        }

        self.attribute_map = {
            'description': 'description',
            'fitting_id': 'fitting_id',
            'items': 'items',
            'name': 'name',
            'ship_type_id': 'ship_type_id'
        }

        self._description = description
        self._fitting_id = fitting_id
        self._items = items
        self._name = name
        self._ship_type_id = ship_type_id

    @classmethod
    def from_dict(cls, dikt: dict) -> 'GetCharactersCharacterIdFittings200Ok':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The get_characters_character_id_fittings_200_ok of this GetCharactersCharacterIdFittings200Ok.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def description(self):
        """Gets the description of this GetCharactersCharacterIdFittings200Ok.

        description string

        :return: The description of this GetCharactersCharacterIdFittings200Ok.
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this GetCharactersCharacterIdFittings200Ok.

        description string

        :param description: The description of this GetCharactersCharacterIdFittings200Ok.
        :type description: str
        """
        if description is None:
            raise ValueError("Invalid value for `description`, must not be `None`")

        self._description = description

    @property
    def fitting_id(self):
        """Gets the fitting_id of this GetCharactersCharacterIdFittings200Ok.

        fitting_id integer

        :return: The fitting_id of this GetCharactersCharacterIdFittings200Ok.
        :rtype: int
        """
        return self._fitting_id

    @fitting_id.setter
    def fitting_id(self, fitting_id):
        """Sets the fitting_id of this GetCharactersCharacterIdFittings200Ok.

        fitting_id integer

        :param fitting_id: The fitting_id of this GetCharactersCharacterIdFittings200Ok.
        :type fitting_id: int
        """
        if fitting_id is None:
            raise ValueError("Invalid value for `fitting_id`, must not be `None`")

        self._fitting_id = fitting_id

    @property
    def items(self):
        """Gets the items of this GetCharactersCharacterIdFittings200Ok.

        items array

        :return: The items of this GetCharactersCharacterIdFittings200Ok.
        :rtype: List[GetCharactersCharacterIdFittingsItem]
        """
        return self._items

    @items.setter
    def items(self, items):
        """Sets the items of this GetCharactersCharacterIdFittings200Ok.

        items array

        :param items: The items of this GetCharactersCharacterIdFittings200Ok.
        :type items: List[GetCharactersCharacterIdFittingsItem]
        """
        if items is None:
            raise ValueError("Invalid value for `items`, must not be `None`")
        if items is not None and len(items) > 255:
            raise ValueError("Invalid value for `items`, number of items must be less than or equal to `255`")

        self._items = items

    @property
    def name(self):
        """Gets the name of this GetCharactersCharacterIdFittings200Ok.

        name string

        :return: The name of this GetCharactersCharacterIdFittings200Ok.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this GetCharactersCharacterIdFittings200Ok.

        name string

        :param name: The name of this GetCharactersCharacterIdFittings200Ok.
        :type name: str
        """
        if name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")

        self._name = name

    @property
    def ship_type_id(self):
        """Gets the ship_type_id of this GetCharactersCharacterIdFittings200Ok.

        ship_type_id integer

        :return: The ship_type_id of this GetCharactersCharacterIdFittings200Ok.
        :rtype: int
        """
        return self._ship_type_id

    @ship_type_id.setter
    def ship_type_id(self, ship_type_id):
        """Sets the ship_type_id of this GetCharactersCharacterIdFittings200Ok.

        ship_type_id integer

        :param ship_type_id: The ship_type_id of this GetCharactersCharacterIdFittings200Ok.
        :type ship_type_id: int
        """
        if ship_type_id is None:
            raise ValueError("Invalid value for `ship_type_id`, must not be `None`")

        self._ship_type_id = ship_type_id
