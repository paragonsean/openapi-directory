# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class PostUniverseNames200Ok(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, category: str=None, id: int=None, name: str=None):
        """PostUniverseNames200Ok - a model defined in OpenAPI

        :param category: The category of this PostUniverseNames200Ok.
        :param id: The id of this PostUniverseNames200Ok.
        :param name: The name of this PostUniverseNames200Ok.
        """
        self.openapi_types = {
            'category': str,
            'id': int,
            'name': str
        }

        self.attribute_map = {
            'category': 'category',
            'id': 'id',
            'name': 'name'
        }

        self._category = category
        self._id = id
        self._name = name

    @classmethod
    def from_dict(cls, dikt: dict) -> 'PostUniverseNames200Ok':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The post_universe_names_200_ok of this PostUniverseNames200Ok.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def category(self):
        """Gets the category of this PostUniverseNames200Ok.

        category string

        :return: The category of this PostUniverseNames200Ok.
        :rtype: str
        """
        return self._category

    @category.setter
    def category(self, category):
        """Sets the category of this PostUniverseNames200Ok.

        category string

        :param category: The category of this PostUniverseNames200Ok.
        :type category: str
        """
        allowed_values = ["alliance", "character", "constellation", "corporation", "inventory_type", "region", "solar_system", "station"]  # noqa: E501
        if category not in allowed_values:
            raise ValueError(
                "Invalid value for `category` ({0}), must be one of {1}"
                .format(category, allowed_values)
            )

        self._category = category

    @property
    def id(self):
        """Gets the id of this PostUniverseNames200Ok.

        id integer

        :return: The id of this PostUniverseNames200Ok.
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this PostUniverseNames200Ok.

        id integer

        :param id: The id of this PostUniverseNames200Ok.
        :type id: int
        """
        if id is None:
            raise ValueError("Invalid value for `id`, must not be `None`")

        self._id = id

    @property
    def name(self):
        """Gets the name of this PostUniverseNames200Ok.

        name string

        :return: The name of this PostUniverseNames200Ok.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this PostUniverseNames200Ok.

        name string

        :param name: The name of this PostUniverseNames200Ok.
        :type name: str
        """
        if name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")

        self._name = name
