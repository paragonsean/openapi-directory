# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class GetFleetsFleetIdOk(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, is_free_move: bool=None, is_registered: bool=None, is_voice_enabled: bool=None, motd: str=None):
        """GetFleetsFleetIdOk - a model defined in OpenAPI

        :param is_free_move: The is_free_move of this GetFleetsFleetIdOk.
        :param is_registered: The is_registered of this GetFleetsFleetIdOk.
        :param is_voice_enabled: The is_voice_enabled of this GetFleetsFleetIdOk.
        :param motd: The motd of this GetFleetsFleetIdOk.
        """
        self.openapi_types = {
            'is_free_move': bool,
            'is_registered': bool,
            'is_voice_enabled': bool,
            'motd': str
        }

        self.attribute_map = {
            'is_free_move': 'is_free_move',
            'is_registered': 'is_registered',
            'is_voice_enabled': 'is_voice_enabled',
            'motd': 'motd'
        }

        self._is_free_move = is_free_move
        self._is_registered = is_registered
        self._is_voice_enabled = is_voice_enabled
        self._motd = motd

    @classmethod
    def from_dict(cls, dikt: dict) -> 'GetFleetsFleetIdOk':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The get_fleets_fleet_id_ok of this GetFleetsFleetIdOk.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def is_free_move(self):
        """Gets the is_free_move of this GetFleetsFleetIdOk.

        Is free-move enabled

        :return: The is_free_move of this GetFleetsFleetIdOk.
        :rtype: bool
        """
        return self._is_free_move

    @is_free_move.setter
    def is_free_move(self, is_free_move):
        """Sets the is_free_move of this GetFleetsFleetIdOk.

        Is free-move enabled

        :param is_free_move: The is_free_move of this GetFleetsFleetIdOk.
        :type is_free_move: bool
        """
        if is_free_move is None:
            raise ValueError("Invalid value for `is_free_move`, must not be `None`")

        self._is_free_move = is_free_move

    @property
    def is_registered(self):
        """Gets the is_registered of this GetFleetsFleetIdOk.

        Does the fleet have an active fleet advertisement

        :return: The is_registered of this GetFleetsFleetIdOk.
        :rtype: bool
        """
        return self._is_registered

    @is_registered.setter
    def is_registered(self, is_registered):
        """Sets the is_registered of this GetFleetsFleetIdOk.

        Does the fleet have an active fleet advertisement

        :param is_registered: The is_registered of this GetFleetsFleetIdOk.
        :type is_registered: bool
        """
        if is_registered is None:
            raise ValueError("Invalid value for `is_registered`, must not be `None`")

        self._is_registered = is_registered

    @property
    def is_voice_enabled(self):
        """Gets the is_voice_enabled of this GetFleetsFleetIdOk.

        Is EVE Voice enabled

        :return: The is_voice_enabled of this GetFleetsFleetIdOk.
        :rtype: bool
        """
        return self._is_voice_enabled

    @is_voice_enabled.setter
    def is_voice_enabled(self, is_voice_enabled):
        """Sets the is_voice_enabled of this GetFleetsFleetIdOk.

        Is EVE Voice enabled

        :param is_voice_enabled: The is_voice_enabled of this GetFleetsFleetIdOk.
        :type is_voice_enabled: bool
        """
        if is_voice_enabled is None:
            raise ValueError("Invalid value for `is_voice_enabled`, must not be `None`")

        self._is_voice_enabled = is_voice_enabled

    @property
    def motd(self):
        """Gets the motd of this GetFleetsFleetIdOk.

        Fleet MOTD in CCP flavoured HTML

        :return: The motd of this GetFleetsFleetIdOk.
        :rtype: str
        """
        return self._motd

    @motd.setter
    def motd(self, motd):
        """Sets the motd of this GetFleetsFleetIdOk.

        Fleet MOTD in CCP flavoured HTML

        :param motd: The motd of this GetFleetsFleetIdOk.
        :type motd: str
        """
        if motd is None:
            raise ValueError("Invalid value for `motd`, must not be `None`")

        self._motd = motd
