# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class GetContractsPublicItemsContractId200Ok(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, is_blueprint_copy: bool=None, is_included: bool=None, item_id: int=None, material_efficiency: int=None, quantity: int=None, record_id: int=None, runs: int=None, time_efficiency: int=None, type_id: int=None):
        """GetContractsPublicItemsContractId200Ok - a model defined in OpenAPI

        :param is_blueprint_copy: The is_blueprint_copy of this GetContractsPublicItemsContractId200Ok.
        :param is_included: The is_included of this GetContractsPublicItemsContractId200Ok.
        :param item_id: The item_id of this GetContractsPublicItemsContractId200Ok.
        :param material_efficiency: The material_efficiency of this GetContractsPublicItemsContractId200Ok.
        :param quantity: The quantity of this GetContractsPublicItemsContractId200Ok.
        :param record_id: The record_id of this GetContractsPublicItemsContractId200Ok.
        :param runs: The runs of this GetContractsPublicItemsContractId200Ok.
        :param time_efficiency: The time_efficiency of this GetContractsPublicItemsContractId200Ok.
        :param type_id: The type_id of this GetContractsPublicItemsContractId200Ok.
        """
        self.openapi_types = {
            'is_blueprint_copy': bool,
            'is_included': bool,
            'item_id': int,
            'material_efficiency': int,
            'quantity': int,
            'record_id': int,
            'runs': int,
            'time_efficiency': int,
            'type_id': int
        }

        self.attribute_map = {
            'is_blueprint_copy': 'is_blueprint_copy',
            'is_included': 'is_included',
            'item_id': 'item_id',
            'material_efficiency': 'material_efficiency',
            'quantity': 'quantity',
            'record_id': 'record_id',
            'runs': 'runs',
            'time_efficiency': 'time_efficiency',
            'type_id': 'type_id'
        }

        self._is_blueprint_copy = is_blueprint_copy
        self._is_included = is_included
        self._item_id = item_id
        self._material_efficiency = material_efficiency
        self._quantity = quantity
        self._record_id = record_id
        self._runs = runs
        self._time_efficiency = time_efficiency
        self._type_id = type_id

    @classmethod
    def from_dict(cls, dikt: dict) -> 'GetContractsPublicItemsContractId200Ok':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The get_contracts_public_items_contract_id_200_ok of this GetContractsPublicItemsContractId200Ok.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def is_blueprint_copy(self):
        """Gets the is_blueprint_copy of this GetContractsPublicItemsContractId200Ok.

        is_blueprint_copy boolean

        :return: The is_blueprint_copy of this GetContractsPublicItemsContractId200Ok.
        :rtype: bool
        """
        return self._is_blueprint_copy

    @is_blueprint_copy.setter
    def is_blueprint_copy(self, is_blueprint_copy):
        """Sets the is_blueprint_copy of this GetContractsPublicItemsContractId200Ok.

        is_blueprint_copy boolean

        :param is_blueprint_copy: The is_blueprint_copy of this GetContractsPublicItemsContractId200Ok.
        :type is_blueprint_copy: bool
        """

        self._is_blueprint_copy = is_blueprint_copy

    @property
    def is_included(self):
        """Gets the is_included of this GetContractsPublicItemsContractId200Ok.

        true if the contract issuer has submitted this item with the contract, false if the isser is asking for this item in the contract

        :return: The is_included of this GetContractsPublicItemsContractId200Ok.
        :rtype: bool
        """
        return self._is_included

    @is_included.setter
    def is_included(self, is_included):
        """Sets the is_included of this GetContractsPublicItemsContractId200Ok.

        true if the contract issuer has submitted this item with the contract, false if the isser is asking for this item in the contract

        :param is_included: The is_included of this GetContractsPublicItemsContractId200Ok.
        :type is_included: bool
        """
        if is_included is None:
            raise ValueError("Invalid value for `is_included`, must not be `None`")

        self._is_included = is_included

    @property
    def item_id(self):
        """Gets the item_id of this GetContractsPublicItemsContractId200Ok.

        Unique ID for the item being sold. Not present if item is being requested by contract rather than sold with contract

        :return: The item_id of this GetContractsPublicItemsContractId200Ok.
        :rtype: int
        """
        return self._item_id

    @item_id.setter
    def item_id(self, item_id):
        """Sets the item_id of this GetContractsPublicItemsContractId200Ok.

        Unique ID for the item being sold. Not present if item is being requested by contract rather than sold with contract

        :param item_id: The item_id of this GetContractsPublicItemsContractId200Ok.
        :type item_id: int
        """

        self._item_id = item_id

    @property
    def material_efficiency(self):
        """Gets the material_efficiency of this GetContractsPublicItemsContractId200Ok.

        Material Efficiency Level of the blueprint

        :return: The material_efficiency of this GetContractsPublicItemsContractId200Ok.
        :rtype: int
        """
        return self._material_efficiency

    @material_efficiency.setter
    def material_efficiency(self, material_efficiency):
        """Sets the material_efficiency of this GetContractsPublicItemsContractId200Ok.

        Material Efficiency Level of the blueprint

        :param material_efficiency: The material_efficiency of this GetContractsPublicItemsContractId200Ok.
        :type material_efficiency: int
        """
        if material_efficiency is not None and material_efficiency > 25:
            raise ValueError("Invalid value for `material_efficiency`, must be a value less than or equal to `25`")
        if material_efficiency is not None and material_efficiency < 0:
            raise ValueError("Invalid value for `material_efficiency`, must be a value greater than or equal to `0`")

        self._material_efficiency = material_efficiency

    @property
    def quantity(self):
        """Gets the quantity of this GetContractsPublicItemsContractId200Ok.

        Number of items in the stack

        :return: The quantity of this GetContractsPublicItemsContractId200Ok.
        :rtype: int
        """
        return self._quantity

    @quantity.setter
    def quantity(self, quantity):
        """Sets the quantity of this GetContractsPublicItemsContractId200Ok.

        Number of items in the stack

        :param quantity: The quantity of this GetContractsPublicItemsContractId200Ok.
        :type quantity: int
        """
        if quantity is None:
            raise ValueError("Invalid value for `quantity`, must not be `None`")

        self._quantity = quantity

    @property
    def record_id(self):
        """Gets the record_id of this GetContractsPublicItemsContractId200Ok.

        Unique ID for the item, used by the contract system

        :return: The record_id of this GetContractsPublicItemsContractId200Ok.
        :rtype: int
        """
        return self._record_id

    @record_id.setter
    def record_id(self, record_id):
        """Sets the record_id of this GetContractsPublicItemsContractId200Ok.

        Unique ID for the item, used by the contract system

        :param record_id: The record_id of this GetContractsPublicItemsContractId200Ok.
        :type record_id: int
        """
        if record_id is None:
            raise ValueError("Invalid value for `record_id`, must not be `None`")

        self._record_id = record_id

    @property
    def runs(self):
        """Gets the runs of this GetContractsPublicItemsContractId200Ok.

        Number of runs remaining if the blueprint is a copy, -1 if it is an original

        :return: The runs of this GetContractsPublicItemsContractId200Ok.
        :rtype: int
        """
        return self._runs

    @runs.setter
    def runs(self, runs):
        """Sets the runs of this GetContractsPublicItemsContractId200Ok.

        Number of runs remaining if the blueprint is a copy, -1 if it is an original

        :param runs: The runs of this GetContractsPublicItemsContractId200Ok.
        :type runs: int
        """
        if runs is not None and runs < -1:
            raise ValueError("Invalid value for `runs`, must be a value greater than or equal to `-1`")

        self._runs = runs

    @property
    def time_efficiency(self):
        """Gets the time_efficiency of this GetContractsPublicItemsContractId200Ok.

        Time Efficiency Level of the blueprint

        :return: The time_efficiency of this GetContractsPublicItemsContractId200Ok.
        :rtype: int
        """
        return self._time_efficiency

    @time_efficiency.setter
    def time_efficiency(self, time_efficiency):
        """Sets the time_efficiency of this GetContractsPublicItemsContractId200Ok.

        Time Efficiency Level of the blueprint

        :param time_efficiency: The time_efficiency of this GetContractsPublicItemsContractId200Ok.
        :type time_efficiency: int
        """
        if time_efficiency is not None and time_efficiency > 20:
            raise ValueError("Invalid value for `time_efficiency`, must be a value less than or equal to `20`")
        if time_efficiency is not None and time_efficiency < 0:
            raise ValueError("Invalid value for `time_efficiency`, must be a value greater than or equal to `0`")

        self._time_efficiency = time_efficiency

    @property
    def type_id(self):
        """Gets the type_id of this GetContractsPublicItemsContractId200Ok.

        Type ID for item

        :return: The type_id of this GetContractsPublicItemsContractId200Ok.
        :rtype: int
        """
        return self._type_id

    @type_id.setter
    def type_id(self, type_id):
        """Sets the type_id of this GetContractsPublicItemsContractId200Ok.

        Type ID for item

        :param type_id: The type_id of this GetContractsPublicItemsContractId200Ok.
        :type type_id: int
        """
        if type_id is None:
            raise ValueError("Invalid value for `type_id`, must not be `None`")

        self._type_id = type_id
