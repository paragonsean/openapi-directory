# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class GetCorporationsCorporationIdWalletsDivisionJournal200Ok(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, amount: float=None, balance: float=None, context_id: int=None, context_id_type: str=None, _date: datetime=None, description: str=None, first_party_id: int=None, id: int=None, reason: str=None, ref_type: str=None, second_party_id: int=None, tax: float=None, tax_receiver_id: int=None):
        """GetCorporationsCorporationIdWalletsDivisionJournal200Ok - a model defined in OpenAPI

        :param amount: The amount of this GetCorporationsCorporationIdWalletsDivisionJournal200Ok.
        :param balance: The balance of this GetCorporationsCorporationIdWalletsDivisionJournal200Ok.
        :param context_id: The context_id of this GetCorporationsCorporationIdWalletsDivisionJournal200Ok.
        :param context_id_type: The context_id_type of this GetCorporationsCorporationIdWalletsDivisionJournal200Ok.
        :param _date: The _date of this GetCorporationsCorporationIdWalletsDivisionJournal200Ok.
        :param description: The description of this GetCorporationsCorporationIdWalletsDivisionJournal200Ok.
        :param first_party_id: The first_party_id of this GetCorporationsCorporationIdWalletsDivisionJournal200Ok.
        :param id: The id of this GetCorporationsCorporationIdWalletsDivisionJournal200Ok.
        :param reason: The reason of this GetCorporationsCorporationIdWalletsDivisionJournal200Ok.
        :param ref_type: The ref_type of this GetCorporationsCorporationIdWalletsDivisionJournal200Ok.
        :param second_party_id: The second_party_id of this GetCorporationsCorporationIdWalletsDivisionJournal200Ok.
        :param tax: The tax of this GetCorporationsCorporationIdWalletsDivisionJournal200Ok.
        :param tax_receiver_id: The tax_receiver_id of this GetCorporationsCorporationIdWalletsDivisionJournal200Ok.
        """
        self.openapi_types = {
            'amount': float,
            'balance': float,
            'context_id': int,
            'context_id_type': str,
            '_date': datetime,
            'description': str,
            'first_party_id': int,
            'id': int,
            'reason': str,
            'ref_type': str,
            'second_party_id': int,
            'tax': float,
            'tax_receiver_id': int
        }

        self.attribute_map = {
            'amount': 'amount',
            'balance': 'balance',
            'context_id': 'context_id',
            'context_id_type': 'context_id_type',
            '_date': 'date',
            'description': 'description',
            'first_party_id': 'first_party_id',
            'id': 'id',
            'reason': 'reason',
            'ref_type': 'ref_type',
            'second_party_id': 'second_party_id',
            'tax': 'tax',
            'tax_receiver_id': 'tax_receiver_id'
        }

        self._amount = amount
        self._balance = balance
        self._context_id = context_id
        self._context_id_type = context_id_type
        self.__date = _date
        self._description = description
        self._first_party_id = first_party_id
        self._id = id
        self._reason = reason
        self._ref_type = ref_type
        self._second_party_id = second_party_id
        self._tax = tax
        self._tax_receiver_id = tax_receiver_id

    @classmethod
    def from_dict(cls, dikt: dict) -> 'GetCorporationsCorporationIdWalletsDivisionJournal200Ok':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The get_corporations_corporation_id_wallets_division_journal_200_ok of this GetCorporationsCorporationIdWalletsDivisionJournal200Ok.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def amount(self):
        """Gets the amount of this GetCorporationsCorporationIdWalletsDivisionJournal200Ok.

        The amount of ISK given or taken from the wallet as a result of the given transaction. Positive when ISK is deposited into the wallet and negative when ISK is withdrawn

        :return: The amount of this GetCorporationsCorporationIdWalletsDivisionJournal200Ok.
        :rtype: float
        """
        return self._amount

    @amount.setter
    def amount(self, amount):
        """Sets the amount of this GetCorporationsCorporationIdWalletsDivisionJournal200Ok.

        The amount of ISK given or taken from the wallet as a result of the given transaction. Positive when ISK is deposited into the wallet and negative when ISK is withdrawn

        :param amount: The amount of this GetCorporationsCorporationIdWalletsDivisionJournal200Ok.
        :type amount: float
        """

        self._amount = amount

    @property
    def balance(self):
        """Gets the balance of this GetCorporationsCorporationIdWalletsDivisionJournal200Ok.

        Wallet balance after transaction occurred

        :return: The balance of this GetCorporationsCorporationIdWalletsDivisionJournal200Ok.
        :rtype: float
        """
        return self._balance

    @balance.setter
    def balance(self, balance):
        """Sets the balance of this GetCorporationsCorporationIdWalletsDivisionJournal200Ok.

        Wallet balance after transaction occurred

        :param balance: The balance of this GetCorporationsCorporationIdWalletsDivisionJournal200Ok.
        :type balance: float
        """

        self._balance = balance

    @property
    def context_id(self):
        """Gets the context_id of this GetCorporationsCorporationIdWalletsDivisionJournal200Ok.

        An ID that gives extra context to the particular transaction. Because of legacy reasons the context is completely different per ref_type and means different things. It is also possible to not have a context_id

        :return: The context_id of this GetCorporationsCorporationIdWalletsDivisionJournal200Ok.
        :rtype: int
        """
        return self._context_id

    @context_id.setter
    def context_id(self, context_id):
        """Sets the context_id of this GetCorporationsCorporationIdWalletsDivisionJournal200Ok.

        An ID that gives extra context to the particular transaction. Because of legacy reasons the context is completely different per ref_type and means different things. It is also possible to not have a context_id

        :param context_id: The context_id of this GetCorporationsCorporationIdWalletsDivisionJournal200Ok.
        :type context_id: int
        """

        self._context_id = context_id

    @property
    def context_id_type(self):
        """Gets the context_id_type of this GetCorporationsCorporationIdWalletsDivisionJournal200Ok.

        The type of the given context_id if present

        :return: The context_id_type of this GetCorporationsCorporationIdWalletsDivisionJournal200Ok.
        :rtype: str
        """
        return self._context_id_type

    @context_id_type.setter
    def context_id_type(self, context_id_type):
        """Sets the context_id_type of this GetCorporationsCorporationIdWalletsDivisionJournal200Ok.

        The type of the given context_id if present

        :param context_id_type: The context_id_type of this GetCorporationsCorporationIdWalletsDivisionJournal200Ok.
        :type context_id_type: str
        """
        allowed_values = ["structure_id", "station_id", "market_transaction_id", "character_id", "corporation_id", "alliance_id", "eve_system", "industry_job_id", "contract_id", "planet_id", "system_id", "type_id"]  # noqa: E501
        if context_id_type not in allowed_values:
            raise ValueError(
                "Invalid value for `context_id_type` ({0}), must be one of {1}"
                .format(context_id_type, allowed_values)
            )

        self._context_id_type = context_id_type

    @property
    def _date(self):
        """Gets the _date of this GetCorporationsCorporationIdWalletsDivisionJournal200Ok.

        Date and time of transaction

        :return: The _date of this GetCorporationsCorporationIdWalletsDivisionJournal200Ok.
        :rtype: datetime
        """
        return self.__date

    @_date.setter
    def _date(self, _date):
        """Sets the _date of this GetCorporationsCorporationIdWalletsDivisionJournal200Ok.

        Date and time of transaction

        :param _date: The _date of this GetCorporationsCorporationIdWalletsDivisionJournal200Ok.
        :type _date: datetime
        """
        if _date is None:
            raise ValueError("Invalid value for `_date`, must not be `None`")

        self.__date = _date

    @property
    def description(self):
        """Gets the description of this GetCorporationsCorporationIdWalletsDivisionJournal200Ok.

        The reason for the transaction, mirrors what is seen in the client

        :return: The description of this GetCorporationsCorporationIdWalletsDivisionJournal200Ok.
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this GetCorporationsCorporationIdWalletsDivisionJournal200Ok.

        The reason for the transaction, mirrors what is seen in the client

        :param description: The description of this GetCorporationsCorporationIdWalletsDivisionJournal200Ok.
        :type description: str
        """
        if description is None:
            raise ValueError("Invalid value for `description`, must not be `None`")

        self._description = description

    @property
    def first_party_id(self):
        """Gets the first_party_id of this GetCorporationsCorporationIdWalletsDivisionJournal200Ok.

        The id of the first party involved in the transaction. This attribute has no consistency and is different or non existant for particular ref_types. The description attribute will help make sense of what this attribute means. For more info about the given ID it can be dropped into the /universe/names/ ESI route to determine its type and name

        :return: The first_party_id of this GetCorporationsCorporationIdWalletsDivisionJournal200Ok.
        :rtype: int
        """
        return self._first_party_id

    @first_party_id.setter
    def first_party_id(self, first_party_id):
        """Sets the first_party_id of this GetCorporationsCorporationIdWalletsDivisionJournal200Ok.

        The id of the first party involved in the transaction. This attribute has no consistency and is different or non existant for particular ref_types. The description attribute will help make sense of what this attribute means. For more info about the given ID it can be dropped into the /universe/names/ ESI route to determine its type and name

        :param first_party_id: The first_party_id of this GetCorporationsCorporationIdWalletsDivisionJournal200Ok.
        :type first_party_id: int
        """

        self._first_party_id = first_party_id

    @property
    def id(self):
        """Gets the id of this GetCorporationsCorporationIdWalletsDivisionJournal200Ok.

        Unique journal reference ID

        :return: The id of this GetCorporationsCorporationIdWalletsDivisionJournal200Ok.
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this GetCorporationsCorporationIdWalletsDivisionJournal200Ok.

        Unique journal reference ID

        :param id: The id of this GetCorporationsCorporationIdWalletsDivisionJournal200Ok.
        :type id: int
        """
        if id is None:
            raise ValueError("Invalid value for `id`, must not be `None`")

        self._id = id

    @property
    def reason(self):
        """Gets the reason of this GetCorporationsCorporationIdWalletsDivisionJournal200Ok.

        The user stated reason for the transaction. Only applies to some ref_types

        :return: The reason of this GetCorporationsCorporationIdWalletsDivisionJournal200Ok.
        :rtype: str
        """
        return self._reason

    @reason.setter
    def reason(self, reason):
        """Sets the reason of this GetCorporationsCorporationIdWalletsDivisionJournal200Ok.

        The user stated reason for the transaction. Only applies to some ref_types

        :param reason: The reason of this GetCorporationsCorporationIdWalletsDivisionJournal200Ok.
        :type reason: str
        """

        self._reason = reason

    @property
    def ref_type(self):
        """Gets the ref_type of this GetCorporationsCorporationIdWalletsDivisionJournal200Ok.

        \"The transaction type for the given. transaction. Different transaction types will populate different attributes. Note: If you have an existing XML API application that is using ref_types, you will need to know which string ESI ref_type maps to which integer. You can look at the following file to see string->int mappings: https://github.com/ccpgames/eve-glue/blob/master/eve_glue/wallet_journal_ref.py\"

        :return: The ref_type of this GetCorporationsCorporationIdWalletsDivisionJournal200Ok.
        :rtype: str
        """
        return self._ref_type

    @ref_type.setter
    def ref_type(self, ref_type):
        """Sets the ref_type of this GetCorporationsCorporationIdWalletsDivisionJournal200Ok.

        \"The transaction type for the given. transaction. Different transaction types will populate different attributes. Note: If you have an existing XML API application that is using ref_types, you will need to know which string ESI ref_type maps to which integer. You can look at the following file to see string->int mappings: https://github.com/ccpgames/eve-glue/blob/master/eve_glue/wallet_journal_ref.py\"

        :param ref_type: The ref_type of this GetCorporationsCorporationIdWalletsDivisionJournal200Ok.
        :type ref_type: str
        """
        allowed_values = ["acceleration_gate_fee", "advertisement_listing_fee", "agent_donation", "agent_location_services", "agent_miscellaneous", "agent_mission_collateral_paid", "agent_mission_collateral_refunded", "agent_mission_reward", "agent_mission_reward_corporation_tax", "agent_mission_time_bonus_reward", "agent_mission_time_bonus_reward_corporation_tax", "agent_security_services", "agent_services_rendered", "agents_preward", "alliance_maintainance_fee", "alliance_registration_fee", "asset_safety_recovery_tax", "bounty", "bounty_prize", "bounty_prize_corporation_tax", "bounty_prizes", "bounty_reimbursement", "bounty_surcharge", "brokers_fee", "clone_activation", "clone_transfer", "contraband_fine", "contract_auction_bid", "contract_auction_bid_corp", "contract_auction_bid_refund", "contract_auction_sold", "contract_brokers_fee", "contract_brokers_fee_corp", "contract_collateral", "contract_collateral_deposited_corp", "contract_collateral_payout", "contract_collateral_refund", "contract_deposit", "contract_deposit_corp", "contract_deposit_refund", "contract_deposit_sales_tax", "contract_price", "contract_price_payment_corp", "contract_reversal", "contract_reward", "contract_reward_deposited", "contract_reward_deposited_corp", "contract_reward_refund", "contract_sales_tax", "copying", "corporate_reward_payout", "corporate_reward_tax", "corporation_account_withdrawal", "corporation_bulk_payment", "corporation_dividend_payment", "corporation_liquidation", "corporation_logo_change_cost", "corporation_payment", "corporation_registration_fee", "courier_mission_escrow", "cspa", "cspaofflinerefund", "datacore_fee", "dna_modification_fee", "docking_fee", "duel_wager_escrow", "duel_wager_payment", "duel_wager_refund", "factory_slot_rental_fee", "gm_cash_transfer", "industry_job_tax", "infrastructure_hub_maintenance", "inheritance", "insurance", "jump_clone_activation_fee", "jump_clone_installation_fee", "kill_right_fee", "lp_store", "manufacturing", "market_escrow", "market_fine_paid", "market_transaction", "medal_creation", "medal_issued", "mission_completion", "mission_cost", "mission_expiration", "mission_reward", "office_rental_fee", "operation_bonus", "opportunity_reward", "planetary_construction", "planetary_export_tax", "planetary_import_tax", "player_donation", "player_trading", "project_discovery_reward", "project_discovery_tax", "reaction", "release_of_impounded_property", "repair_bill", "reprocessing_tax", "researching_material_productivity", "researching_technology", "researching_time_productivity", "resource_wars_reward", "reverse_engineering", "security_processing_fee", "shares", "sovereignity_bill", "store_purchase", "store_purchase_refund", "transaction_tax", "upkeep_adjustment_fee", "war_ally_contract", "war_fee", "war_fee_surrender"]  # noqa: E501
        if ref_type not in allowed_values:
            raise ValueError(
                "Invalid value for `ref_type` ({0}), must be one of {1}"
                .format(ref_type, allowed_values)
            )

        self._ref_type = ref_type

    @property
    def second_party_id(self):
        """Gets the second_party_id of this GetCorporationsCorporationIdWalletsDivisionJournal200Ok.

        The id of the second party involved in the transaction. This attribute has no consistency and is different or non existant for particular ref_types. The description attribute will help make sense of what this attribute means. For more info about the given ID it can be dropped into the /universe/names/ ESI route to determine its type and name

        :return: The second_party_id of this GetCorporationsCorporationIdWalletsDivisionJournal200Ok.
        :rtype: int
        """
        return self._second_party_id

    @second_party_id.setter
    def second_party_id(self, second_party_id):
        """Sets the second_party_id of this GetCorporationsCorporationIdWalletsDivisionJournal200Ok.

        The id of the second party involved in the transaction. This attribute has no consistency and is different or non existant for particular ref_types. The description attribute will help make sense of what this attribute means. For more info about the given ID it can be dropped into the /universe/names/ ESI route to determine its type and name

        :param second_party_id: The second_party_id of this GetCorporationsCorporationIdWalletsDivisionJournal200Ok.
        :type second_party_id: int
        """

        self._second_party_id = second_party_id

    @property
    def tax(self):
        """Gets the tax of this GetCorporationsCorporationIdWalletsDivisionJournal200Ok.

        Tax amount received. Only applies to tax related transactions

        :return: The tax of this GetCorporationsCorporationIdWalletsDivisionJournal200Ok.
        :rtype: float
        """
        return self._tax

    @tax.setter
    def tax(self, tax):
        """Sets the tax of this GetCorporationsCorporationIdWalletsDivisionJournal200Ok.

        Tax amount received. Only applies to tax related transactions

        :param tax: The tax of this GetCorporationsCorporationIdWalletsDivisionJournal200Ok.
        :type tax: float
        """

        self._tax = tax

    @property
    def tax_receiver_id(self):
        """Gets the tax_receiver_id of this GetCorporationsCorporationIdWalletsDivisionJournal200Ok.

        The corporation ID receiving any tax paid. Only applies to tax related transactions

        :return: The tax_receiver_id of this GetCorporationsCorporationIdWalletsDivisionJournal200Ok.
        :rtype: int
        """
        return self._tax_receiver_id

    @tax_receiver_id.setter
    def tax_receiver_id(self, tax_receiver_id):
        """Sets the tax_receiver_id of this GetCorporationsCorporationIdWalletsDivisionJournal200Ok.

        The corporation ID receiving any tax paid. Only applies to tax related transactions

        :param tax_receiver_id: The tax_receiver_id of this GetCorporationsCorporationIdWalletsDivisionJournal200Ok.
        :type tax_receiver_id: int
        """

        self._tax_receiver_id = tax_receiver_id
