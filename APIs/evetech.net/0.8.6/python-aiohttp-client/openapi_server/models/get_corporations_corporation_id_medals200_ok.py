# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class GetCorporationsCorporationIdMedals200Ok(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, created_at: datetime=None, creator_id: int=None, description: str=None, medal_id: int=None, title: str=None):
        """GetCorporationsCorporationIdMedals200Ok - a model defined in OpenAPI

        :param created_at: The created_at of this GetCorporationsCorporationIdMedals200Ok.
        :param creator_id: The creator_id of this GetCorporationsCorporationIdMedals200Ok.
        :param description: The description of this GetCorporationsCorporationIdMedals200Ok.
        :param medal_id: The medal_id of this GetCorporationsCorporationIdMedals200Ok.
        :param title: The title of this GetCorporationsCorporationIdMedals200Ok.
        """
        self.openapi_types = {
            'created_at': datetime,
            'creator_id': int,
            'description': str,
            'medal_id': int,
            'title': str
        }

        self.attribute_map = {
            'created_at': 'created_at',
            'creator_id': 'creator_id',
            'description': 'description',
            'medal_id': 'medal_id',
            'title': 'title'
        }

        self._created_at = created_at
        self._creator_id = creator_id
        self._description = description
        self._medal_id = medal_id
        self._title = title

    @classmethod
    def from_dict(cls, dikt: dict) -> 'GetCorporationsCorporationIdMedals200Ok':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The get_corporations_corporation_id_medals_200_ok of this GetCorporationsCorporationIdMedals200Ok.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def created_at(self):
        """Gets the created_at of this GetCorporationsCorporationIdMedals200Ok.

        created_at string

        :return: The created_at of this GetCorporationsCorporationIdMedals200Ok.
        :rtype: datetime
        """
        return self._created_at

    @created_at.setter
    def created_at(self, created_at):
        """Sets the created_at of this GetCorporationsCorporationIdMedals200Ok.

        created_at string

        :param created_at: The created_at of this GetCorporationsCorporationIdMedals200Ok.
        :type created_at: datetime
        """
        if created_at is None:
            raise ValueError("Invalid value for `created_at`, must not be `None`")

        self._created_at = created_at

    @property
    def creator_id(self):
        """Gets the creator_id of this GetCorporationsCorporationIdMedals200Ok.

        ID of the character who created this medal

        :return: The creator_id of this GetCorporationsCorporationIdMedals200Ok.
        :rtype: int
        """
        return self._creator_id

    @creator_id.setter
    def creator_id(self, creator_id):
        """Sets the creator_id of this GetCorporationsCorporationIdMedals200Ok.

        ID of the character who created this medal

        :param creator_id: The creator_id of this GetCorporationsCorporationIdMedals200Ok.
        :type creator_id: int
        """
        if creator_id is None:
            raise ValueError("Invalid value for `creator_id`, must not be `None`")

        self._creator_id = creator_id

    @property
    def description(self):
        """Gets the description of this GetCorporationsCorporationIdMedals200Ok.

        description string

        :return: The description of this GetCorporationsCorporationIdMedals200Ok.
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this GetCorporationsCorporationIdMedals200Ok.

        description string

        :param description: The description of this GetCorporationsCorporationIdMedals200Ok.
        :type description: str
        """
        if description is None:
            raise ValueError("Invalid value for `description`, must not be `None`")
        if description is not None and len(description) > 1000:
            raise ValueError("Invalid value for `description`, length must be less than or equal to `1000`")

        self._description = description

    @property
    def medal_id(self):
        """Gets the medal_id of this GetCorporationsCorporationIdMedals200Ok.

        medal_id integer

        :return: The medal_id of this GetCorporationsCorporationIdMedals200Ok.
        :rtype: int
        """
        return self._medal_id

    @medal_id.setter
    def medal_id(self, medal_id):
        """Sets the medal_id of this GetCorporationsCorporationIdMedals200Ok.

        medal_id integer

        :param medal_id: The medal_id of this GetCorporationsCorporationIdMedals200Ok.
        :type medal_id: int
        """
        if medal_id is None:
            raise ValueError("Invalid value for `medal_id`, must not be `None`")

        self._medal_id = medal_id

    @property
    def title(self):
        """Gets the title of this GetCorporationsCorporationIdMedals200Ok.

        title string

        :return: The title of this GetCorporationsCorporationIdMedals200Ok.
        :rtype: str
        """
        return self._title

    @title.setter
    def title(self, title):
        """Sets the title of this GetCorporationsCorporationIdMedals200Ok.

        title string

        :param title: The title of this GetCorporationsCorporationIdMedals200Ok.
        :type title: str
        """
        if title is None:
            raise ValueError("Invalid value for `title`, must not be `None`")
        if title is not None and len(title) > 100:
            raise ValueError("Invalid value for `title`, length must be less than or equal to `100`")

        self._title = title
