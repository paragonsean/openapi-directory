# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.get_corporations_corporation_id_bookmarks_coordinates import GetCorporationsCorporationIdBookmarksCoordinates
from openapi_server.models.get_corporations_corporation_id_bookmarks_item import GetCorporationsCorporationIdBookmarksItem
from openapi_server import util


class GetCorporationsCorporationIdBookmarks200Ok(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, bookmark_id: int=None, coordinates: GetCorporationsCorporationIdBookmarksCoordinates=None, created: datetime=None, creator_id: int=None, folder_id: int=None, item: GetCorporationsCorporationIdBookmarksItem=None, label: str=None, location_id: int=None, notes: str=None):
        """GetCorporationsCorporationIdBookmarks200Ok - a model defined in OpenAPI

        :param bookmark_id: The bookmark_id of this GetCorporationsCorporationIdBookmarks200Ok.
        :param coordinates: The coordinates of this GetCorporationsCorporationIdBookmarks200Ok.
        :param created: The created of this GetCorporationsCorporationIdBookmarks200Ok.
        :param creator_id: The creator_id of this GetCorporationsCorporationIdBookmarks200Ok.
        :param folder_id: The folder_id of this GetCorporationsCorporationIdBookmarks200Ok.
        :param item: The item of this GetCorporationsCorporationIdBookmarks200Ok.
        :param label: The label of this GetCorporationsCorporationIdBookmarks200Ok.
        :param location_id: The location_id of this GetCorporationsCorporationIdBookmarks200Ok.
        :param notes: The notes of this GetCorporationsCorporationIdBookmarks200Ok.
        """
        self.openapi_types = {
            'bookmark_id': int,
            'coordinates': GetCorporationsCorporationIdBookmarksCoordinates,
            'created': datetime,
            'creator_id': int,
            'folder_id': int,
            'item': GetCorporationsCorporationIdBookmarksItem,
            'label': str,
            'location_id': int,
            'notes': str
        }

        self.attribute_map = {
            'bookmark_id': 'bookmark_id',
            'coordinates': 'coordinates',
            'created': 'created',
            'creator_id': 'creator_id',
            'folder_id': 'folder_id',
            'item': 'item',
            'label': 'label',
            'location_id': 'location_id',
            'notes': 'notes'
        }

        self._bookmark_id = bookmark_id
        self._coordinates = coordinates
        self._created = created
        self._creator_id = creator_id
        self._folder_id = folder_id
        self._item = item
        self._label = label
        self._location_id = location_id
        self._notes = notes

    @classmethod
    def from_dict(cls, dikt: dict) -> 'GetCorporationsCorporationIdBookmarks200Ok':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The get_corporations_corporation_id_bookmarks_200_ok of this GetCorporationsCorporationIdBookmarks200Ok.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def bookmark_id(self):
        """Gets the bookmark_id of this GetCorporationsCorporationIdBookmarks200Ok.

        bookmark_id integer

        :return: The bookmark_id of this GetCorporationsCorporationIdBookmarks200Ok.
        :rtype: int
        """
        return self._bookmark_id

    @bookmark_id.setter
    def bookmark_id(self, bookmark_id):
        """Sets the bookmark_id of this GetCorporationsCorporationIdBookmarks200Ok.

        bookmark_id integer

        :param bookmark_id: The bookmark_id of this GetCorporationsCorporationIdBookmarks200Ok.
        :type bookmark_id: int
        """
        if bookmark_id is None:
            raise ValueError("Invalid value for `bookmark_id`, must not be `None`")

        self._bookmark_id = bookmark_id

    @property
    def coordinates(self):
        """Gets the coordinates of this GetCorporationsCorporationIdBookmarks200Ok.


        :return: The coordinates of this GetCorporationsCorporationIdBookmarks200Ok.
        :rtype: GetCorporationsCorporationIdBookmarksCoordinates
        """
        return self._coordinates

    @coordinates.setter
    def coordinates(self, coordinates):
        """Sets the coordinates of this GetCorporationsCorporationIdBookmarks200Ok.


        :param coordinates: The coordinates of this GetCorporationsCorporationIdBookmarks200Ok.
        :type coordinates: GetCorporationsCorporationIdBookmarksCoordinates
        """

        self._coordinates = coordinates

    @property
    def created(self):
        """Gets the created of this GetCorporationsCorporationIdBookmarks200Ok.

        created string

        :return: The created of this GetCorporationsCorporationIdBookmarks200Ok.
        :rtype: datetime
        """
        return self._created

    @created.setter
    def created(self, created):
        """Sets the created of this GetCorporationsCorporationIdBookmarks200Ok.

        created string

        :param created: The created of this GetCorporationsCorporationIdBookmarks200Ok.
        :type created: datetime
        """
        if created is None:
            raise ValueError("Invalid value for `created`, must not be `None`")

        self._created = created

    @property
    def creator_id(self):
        """Gets the creator_id of this GetCorporationsCorporationIdBookmarks200Ok.

        creator_id integer

        :return: The creator_id of this GetCorporationsCorporationIdBookmarks200Ok.
        :rtype: int
        """
        return self._creator_id

    @creator_id.setter
    def creator_id(self, creator_id):
        """Sets the creator_id of this GetCorporationsCorporationIdBookmarks200Ok.

        creator_id integer

        :param creator_id: The creator_id of this GetCorporationsCorporationIdBookmarks200Ok.
        :type creator_id: int
        """
        if creator_id is None:
            raise ValueError("Invalid value for `creator_id`, must not be `None`")

        self._creator_id = creator_id

    @property
    def folder_id(self):
        """Gets the folder_id of this GetCorporationsCorporationIdBookmarks200Ok.

        folder_id integer

        :return: The folder_id of this GetCorporationsCorporationIdBookmarks200Ok.
        :rtype: int
        """
        return self._folder_id

    @folder_id.setter
    def folder_id(self, folder_id):
        """Sets the folder_id of this GetCorporationsCorporationIdBookmarks200Ok.

        folder_id integer

        :param folder_id: The folder_id of this GetCorporationsCorporationIdBookmarks200Ok.
        :type folder_id: int
        """

        self._folder_id = folder_id

    @property
    def item(self):
        """Gets the item of this GetCorporationsCorporationIdBookmarks200Ok.


        :return: The item of this GetCorporationsCorporationIdBookmarks200Ok.
        :rtype: GetCorporationsCorporationIdBookmarksItem
        """
        return self._item

    @item.setter
    def item(self, item):
        """Sets the item of this GetCorporationsCorporationIdBookmarks200Ok.


        :param item: The item of this GetCorporationsCorporationIdBookmarks200Ok.
        :type item: GetCorporationsCorporationIdBookmarksItem
        """

        self._item = item

    @property
    def label(self):
        """Gets the label of this GetCorporationsCorporationIdBookmarks200Ok.

        label string

        :return: The label of this GetCorporationsCorporationIdBookmarks200Ok.
        :rtype: str
        """
        return self._label

    @label.setter
    def label(self, label):
        """Sets the label of this GetCorporationsCorporationIdBookmarks200Ok.

        label string

        :param label: The label of this GetCorporationsCorporationIdBookmarks200Ok.
        :type label: str
        """
        if label is None:
            raise ValueError("Invalid value for `label`, must not be `None`")

        self._label = label

    @property
    def location_id(self):
        """Gets the location_id of this GetCorporationsCorporationIdBookmarks200Ok.

        location_id integer

        :return: The location_id of this GetCorporationsCorporationIdBookmarks200Ok.
        :rtype: int
        """
        return self._location_id

    @location_id.setter
    def location_id(self, location_id):
        """Sets the location_id of this GetCorporationsCorporationIdBookmarks200Ok.

        location_id integer

        :param location_id: The location_id of this GetCorporationsCorporationIdBookmarks200Ok.
        :type location_id: int
        """
        if location_id is None:
            raise ValueError("Invalid value for `location_id`, must not be `None`")

        self._location_id = location_id

    @property
    def notes(self):
        """Gets the notes of this GetCorporationsCorporationIdBookmarks200Ok.

        notes string

        :return: The notes of this GetCorporationsCorporationIdBookmarks200Ok.
        :rtype: str
        """
        return self._notes

    @notes.setter
    def notes(self, notes):
        """Sets the notes of this GetCorporationsCorporationIdBookmarks200Ok.

        notes string

        :param notes: The notes of this GetCorporationsCorporationIdBookmarks200Ok.
        :type notes: str
        """
        if notes is None:
            raise ValueError("Invalid value for `notes`, must not be `None`")

        self._notes = notes
