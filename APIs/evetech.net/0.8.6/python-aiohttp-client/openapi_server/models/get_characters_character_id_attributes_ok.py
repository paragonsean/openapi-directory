# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class GetCharactersCharacterIdAttributesOk(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, accrued_remap_cooldown_date: datetime=None, bonus_remaps: int=None, charisma: int=None, intelligence: int=None, last_remap_date: datetime=None, memory: int=None, perception: int=None, willpower: int=None):
        """GetCharactersCharacterIdAttributesOk - a model defined in OpenAPI

        :param accrued_remap_cooldown_date: The accrued_remap_cooldown_date of this GetCharactersCharacterIdAttributesOk.
        :param bonus_remaps: The bonus_remaps of this GetCharactersCharacterIdAttributesOk.
        :param charisma: The charisma of this GetCharactersCharacterIdAttributesOk.
        :param intelligence: The intelligence of this GetCharactersCharacterIdAttributesOk.
        :param last_remap_date: The last_remap_date of this GetCharactersCharacterIdAttributesOk.
        :param memory: The memory of this GetCharactersCharacterIdAttributesOk.
        :param perception: The perception of this GetCharactersCharacterIdAttributesOk.
        :param willpower: The willpower of this GetCharactersCharacterIdAttributesOk.
        """
        self.openapi_types = {
            'accrued_remap_cooldown_date': datetime,
            'bonus_remaps': int,
            'charisma': int,
            'intelligence': int,
            'last_remap_date': datetime,
            'memory': int,
            'perception': int,
            'willpower': int
        }

        self.attribute_map = {
            'accrued_remap_cooldown_date': 'accrued_remap_cooldown_date',
            'bonus_remaps': 'bonus_remaps',
            'charisma': 'charisma',
            'intelligence': 'intelligence',
            'last_remap_date': 'last_remap_date',
            'memory': 'memory',
            'perception': 'perception',
            'willpower': 'willpower'
        }

        self._accrued_remap_cooldown_date = accrued_remap_cooldown_date
        self._bonus_remaps = bonus_remaps
        self._charisma = charisma
        self._intelligence = intelligence
        self._last_remap_date = last_remap_date
        self._memory = memory
        self._perception = perception
        self._willpower = willpower

    @classmethod
    def from_dict(cls, dikt: dict) -> 'GetCharactersCharacterIdAttributesOk':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The get_characters_character_id_attributes_ok of this GetCharactersCharacterIdAttributesOk.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def accrued_remap_cooldown_date(self):
        """Gets the accrued_remap_cooldown_date of this GetCharactersCharacterIdAttributesOk.

        Neural remapping cooldown after a character uses remap accrued over time

        :return: The accrued_remap_cooldown_date of this GetCharactersCharacterIdAttributesOk.
        :rtype: datetime
        """
        return self._accrued_remap_cooldown_date

    @accrued_remap_cooldown_date.setter
    def accrued_remap_cooldown_date(self, accrued_remap_cooldown_date):
        """Sets the accrued_remap_cooldown_date of this GetCharactersCharacterIdAttributesOk.

        Neural remapping cooldown after a character uses remap accrued over time

        :param accrued_remap_cooldown_date: The accrued_remap_cooldown_date of this GetCharactersCharacterIdAttributesOk.
        :type accrued_remap_cooldown_date: datetime
        """

        self._accrued_remap_cooldown_date = accrued_remap_cooldown_date

    @property
    def bonus_remaps(self):
        """Gets the bonus_remaps of this GetCharactersCharacterIdAttributesOk.

        Number of available bonus character neural remaps

        :return: The bonus_remaps of this GetCharactersCharacterIdAttributesOk.
        :rtype: int
        """
        return self._bonus_remaps

    @bonus_remaps.setter
    def bonus_remaps(self, bonus_remaps):
        """Sets the bonus_remaps of this GetCharactersCharacterIdAttributesOk.

        Number of available bonus character neural remaps

        :param bonus_remaps: The bonus_remaps of this GetCharactersCharacterIdAttributesOk.
        :type bonus_remaps: int
        """

        self._bonus_remaps = bonus_remaps

    @property
    def charisma(self):
        """Gets the charisma of this GetCharactersCharacterIdAttributesOk.

        charisma integer

        :return: The charisma of this GetCharactersCharacterIdAttributesOk.
        :rtype: int
        """
        return self._charisma

    @charisma.setter
    def charisma(self, charisma):
        """Sets the charisma of this GetCharactersCharacterIdAttributesOk.

        charisma integer

        :param charisma: The charisma of this GetCharactersCharacterIdAttributesOk.
        :type charisma: int
        """
        if charisma is None:
            raise ValueError("Invalid value for `charisma`, must not be `None`")

        self._charisma = charisma

    @property
    def intelligence(self):
        """Gets the intelligence of this GetCharactersCharacterIdAttributesOk.

        intelligence integer

        :return: The intelligence of this GetCharactersCharacterIdAttributesOk.
        :rtype: int
        """
        return self._intelligence

    @intelligence.setter
    def intelligence(self, intelligence):
        """Sets the intelligence of this GetCharactersCharacterIdAttributesOk.

        intelligence integer

        :param intelligence: The intelligence of this GetCharactersCharacterIdAttributesOk.
        :type intelligence: int
        """
        if intelligence is None:
            raise ValueError("Invalid value for `intelligence`, must not be `None`")

        self._intelligence = intelligence

    @property
    def last_remap_date(self):
        """Gets the last_remap_date of this GetCharactersCharacterIdAttributesOk.

        Datetime of last neural remap, including usage of bonus remaps

        :return: The last_remap_date of this GetCharactersCharacterIdAttributesOk.
        :rtype: datetime
        """
        return self._last_remap_date

    @last_remap_date.setter
    def last_remap_date(self, last_remap_date):
        """Sets the last_remap_date of this GetCharactersCharacterIdAttributesOk.

        Datetime of last neural remap, including usage of bonus remaps

        :param last_remap_date: The last_remap_date of this GetCharactersCharacterIdAttributesOk.
        :type last_remap_date: datetime
        """

        self._last_remap_date = last_remap_date

    @property
    def memory(self):
        """Gets the memory of this GetCharactersCharacterIdAttributesOk.

        memory integer

        :return: The memory of this GetCharactersCharacterIdAttributesOk.
        :rtype: int
        """
        return self._memory

    @memory.setter
    def memory(self, memory):
        """Sets the memory of this GetCharactersCharacterIdAttributesOk.

        memory integer

        :param memory: The memory of this GetCharactersCharacterIdAttributesOk.
        :type memory: int
        """
        if memory is None:
            raise ValueError("Invalid value for `memory`, must not be `None`")

        self._memory = memory

    @property
    def perception(self):
        """Gets the perception of this GetCharactersCharacterIdAttributesOk.

        perception integer

        :return: The perception of this GetCharactersCharacterIdAttributesOk.
        :rtype: int
        """
        return self._perception

    @perception.setter
    def perception(self, perception):
        """Sets the perception of this GetCharactersCharacterIdAttributesOk.

        perception integer

        :param perception: The perception of this GetCharactersCharacterIdAttributesOk.
        :type perception: int
        """
        if perception is None:
            raise ValueError("Invalid value for `perception`, must not be `None`")

        self._perception = perception

    @property
    def willpower(self):
        """Gets the willpower of this GetCharactersCharacterIdAttributesOk.

        willpower integer

        :return: The willpower of this GetCharactersCharacterIdAttributesOk.
        :rtype: int
        """
        return self._willpower

    @willpower.setter
    def willpower(self, willpower):
        """Sets the willpower of this GetCharactersCharacterIdAttributesOk.

        willpower integer

        :param willpower: The willpower of this GetCharactersCharacterIdAttributesOk.
        :type willpower: int
        """
        if willpower is None:
            raise ValueError("Invalid value for `willpower`, must not be `None`")

        self._willpower = willpower
