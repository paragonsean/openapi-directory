# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class GetMarketsRegionIdHistory200Ok(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, average: float=None, _date: date=None, highest: float=None, lowest: float=None, order_count: int=None, volume: int=None):
        """GetMarketsRegionIdHistory200Ok - a model defined in OpenAPI

        :param average: The average of this GetMarketsRegionIdHistory200Ok.
        :param _date: The _date of this GetMarketsRegionIdHistory200Ok.
        :param highest: The highest of this GetMarketsRegionIdHistory200Ok.
        :param lowest: The lowest of this GetMarketsRegionIdHistory200Ok.
        :param order_count: The order_count of this GetMarketsRegionIdHistory200Ok.
        :param volume: The volume of this GetMarketsRegionIdHistory200Ok.
        """
        self.openapi_types = {
            'average': float,
            '_date': date,
            'highest': float,
            'lowest': float,
            'order_count': int,
            'volume': int
        }

        self.attribute_map = {
            'average': 'average',
            '_date': 'date',
            'highest': 'highest',
            'lowest': 'lowest',
            'order_count': 'order_count',
            'volume': 'volume'
        }

        self._average = average
        self.__date = _date
        self._highest = highest
        self._lowest = lowest
        self._order_count = order_count
        self._volume = volume

    @classmethod
    def from_dict(cls, dikt: dict) -> 'GetMarketsRegionIdHistory200Ok':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The get_markets_region_id_history_200_ok of this GetMarketsRegionIdHistory200Ok.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def average(self):
        """Gets the average of this GetMarketsRegionIdHistory200Ok.

        average number

        :return: The average of this GetMarketsRegionIdHistory200Ok.
        :rtype: float
        """
        return self._average

    @average.setter
    def average(self, average):
        """Sets the average of this GetMarketsRegionIdHistory200Ok.

        average number

        :param average: The average of this GetMarketsRegionIdHistory200Ok.
        :type average: float
        """
        if average is None:
            raise ValueError("Invalid value for `average`, must not be `None`")

        self._average = average

    @property
    def _date(self):
        """Gets the _date of this GetMarketsRegionIdHistory200Ok.

        The date of this historical statistic entry

        :return: The _date of this GetMarketsRegionIdHistory200Ok.
        :rtype: date
        """
        return self.__date

    @_date.setter
    def _date(self, _date):
        """Sets the _date of this GetMarketsRegionIdHistory200Ok.

        The date of this historical statistic entry

        :param _date: The _date of this GetMarketsRegionIdHistory200Ok.
        :type _date: date
        """
        if _date is None:
            raise ValueError("Invalid value for `_date`, must not be `None`")

        self.__date = _date

    @property
    def highest(self):
        """Gets the highest of this GetMarketsRegionIdHistory200Ok.

        highest number

        :return: The highest of this GetMarketsRegionIdHistory200Ok.
        :rtype: float
        """
        return self._highest

    @highest.setter
    def highest(self, highest):
        """Sets the highest of this GetMarketsRegionIdHistory200Ok.

        highest number

        :param highest: The highest of this GetMarketsRegionIdHistory200Ok.
        :type highest: float
        """
        if highest is None:
            raise ValueError("Invalid value for `highest`, must not be `None`")

        self._highest = highest

    @property
    def lowest(self):
        """Gets the lowest of this GetMarketsRegionIdHistory200Ok.

        lowest number

        :return: The lowest of this GetMarketsRegionIdHistory200Ok.
        :rtype: float
        """
        return self._lowest

    @lowest.setter
    def lowest(self, lowest):
        """Sets the lowest of this GetMarketsRegionIdHistory200Ok.

        lowest number

        :param lowest: The lowest of this GetMarketsRegionIdHistory200Ok.
        :type lowest: float
        """
        if lowest is None:
            raise ValueError("Invalid value for `lowest`, must not be `None`")

        self._lowest = lowest

    @property
    def order_count(self):
        """Gets the order_count of this GetMarketsRegionIdHistory200Ok.

        Total number of orders happened that day

        :return: The order_count of this GetMarketsRegionIdHistory200Ok.
        :rtype: int
        """
        return self._order_count

    @order_count.setter
    def order_count(self, order_count):
        """Sets the order_count of this GetMarketsRegionIdHistory200Ok.

        Total number of orders happened that day

        :param order_count: The order_count of this GetMarketsRegionIdHistory200Ok.
        :type order_count: int
        """
        if order_count is None:
            raise ValueError("Invalid value for `order_count`, must not be `None`")

        self._order_count = order_count

    @property
    def volume(self):
        """Gets the volume of this GetMarketsRegionIdHistory200Ok.

        Total

        :return: The volume of this GetMarketsRegionIdHistory200Ok.
        :rtype: int
        """
        return self._volume

    @volume.setter
    def volume(self, volume):
        """Sets the volume of this GetMarketsRegionIdHistory200Ok.

        Total

        :param volume: The volume of this GetMarketsRegionIdHistory200Ok.
        :type volume: int
        """
        if volume is None:
            raise ValueError("Invalid value for `volume`, must not be `None`")

        self._volume = volume
