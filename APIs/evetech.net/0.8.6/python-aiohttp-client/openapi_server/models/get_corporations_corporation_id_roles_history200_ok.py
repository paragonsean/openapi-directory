# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class GetCorporationsCorporationIdRolesHistory200Ok(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, changed_at: datetime=None, character_id: int=None, issuer_id: int=None, new_roles: List[str]=None, old_roles: List[str]=None, role_type: str=None):
        """GetCorporationsCorporationIdRolesHistory200Ok - a model defined in OpenAPI

        :param changed_at: The changed_at of this GetCorporationsCorporationIdRolesHistory200Ok.
        :param character_id: The character_id of this GetCorporationsCorporationIdRolesHistory200Ok.
        :param issuer_id: The issuer_id of this GetCorporationsCorporationIdRolesHistory200Ok.
        :param new_roles: The new_roles of this GetCorporationsCorporationIdRolesHistory200Ok.
        :param old_roles: The old_roles of this GetCorporationsCorporationIdRolesHistory200Ok.
        :param role_type: The role_type of this GetCorporationsCorporationIdRolesHistory200Ok.
        """
        self.openapi_types = {
            'changed_at': datetime,
            'character_id': int,
            'issuer_id': int,
            'new_roles': List[str],
            'old_roles': List[str],
            'role_type': str
        }

        self.attribute_map = {
            'changed_at': 'changed_at',
            'character_id': 'character_id',
            'issuer_id': 'issuer_id',
            'new_roles': 'new_roles',
            'old_roles': 'old_roles',
            'role_type': 'role_type'
        }

        self._changed_at = changed_at
        self._character_id = character_id
        self._issuer_id = issuer_id
        self._new_roles = new_roles
        self._old_roles = old_roles
        self._role_type = role_type

    @classmethod
    def from_dict(cls, dikt: dict) -> 'GetCorporationsCorporationIdRolesHistory200Ok':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The get_corporations_corporation_id_roles_history_200_ok of this GetCorporationsCorporationIdRolesHistory200Ok.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def changed_at(self):
        """Gets the changed_at of this GetCorporationsCorporationIdRolesHistory200Ok.

        changed_at string

        :return: The changed_at of this GetCorporationsCorporationIdRolesHistory200Ok.
        :rtype: datetime
        """
        return self._changed_at

    @changed_at.setter
    def changed_at(self, changed_at):
        """Sets the changed_at of this GetCorporationsCorporationIdRolesHistory200Ok.

        changed_at string

        :param changed_at: The changed_at of this GetCorporationsCorporationIdRolesHistory200Ok.
        :type changed_at: datetime
        """
        if changed_at is None:
            raise ValueError("Invalid value for `changed_at`, must not be `None`")

        self._changed_at = changed_at

    @property
    def character_id(self):
        """Gets the character_id of this GetCorporationsCorporationIdRolesHistory200Ok.

        The character whose roles are changed

        :return: The character_id of this GetCorporationsCorporationIdRolesHistory200Ok.
        :rtype: int
        """
        return self._character_id

    @character_id.setter
    def character_id(self, character_id):
        """Sets the character_id of this GetCorporationsCorporationIdRolesHistory200Ok.

        The character whose roles are changed

        :param character_id: The character_id of this GetCorporationsCorporationIdRolesHistory200Ok.
        :type character_id: int
        """
        if character_id is None:
            raise ValueError("Invalid value for `character_id`, must not be `None`")

        self._character_id = character_id

    @property
    def issuer_id(self):
        """Gets the issuer_id of this GetCorporationsCorporationIdRolesHistory200Ok.

        ID of the character who issued this change

        :return: The issuer_id of this GetCorporationsCorporationIdRolesHistory200Ok.
        :rtype: int
        """
        return self._issuer_id

    @issuer_id.setter
    def issuer_id(self, issuer_id):
        """Sets the issuer_id of this GetCorporationsCorporationIdRolesHistory200Ok.

        ID of the character who issued this change

        :param issuer_id: The issuer_id of this GetCorporationsCorporationIdRolesHistory200Ok.
        :type issuer_id: int
        """
        if issuer_id is None:
            raise ValueError("Invalid value for `issuer_id`, must not be `None`")

        self._issuer_id = issuer_id

    @property
    def new_roles(self):
        """Gets the new_roles of this GetCorporationsCorporationIdRolesHistory200Ok.

        new_roles array

        :return: The new_roles of this GetCorporationsCorporationIdRolesHistory200Ok.
        :rtype: List[str]
        """
        return self._new_roles

    @new_roles.setter
    def new_roles(self, new_roles):
        """Sets the new_roles of this GetCorporationsCorporationIdRolesHistory200Ok.

        new_roles array

        :param new_roles: The new_roles of this GetCorporationsCorporationIdRolesHistory200Ok.
        :type new_roles: List[str]
        """
        allowed_values = ["Account_Take_1", "Account_Take_2", "Account_Take_3", "Account_Take_4", "Account_Take_5", "Account_Take_6", "Account_Take_7", "Accountant", "Auditor", "Communications_Officer", "Config_Equipment", "Config_Starbase_Equipment", "Container_Take_1", "Container_Take_2", "Container_Take_3", "Container_Take_4", "Container_Take_5", "Container_Take_6", "Container_Take_7", "Contract_Manager", "Diplomat", "Director", "Factory_Manager", "Fitting_Manager", "Hangar_Query_1", "Hangar_Query_2", "Hangar_Query_3", "Hangar_Query_4", "Hangar_Query_5", "Hangar_Query_6", "Hangar_Query_7", "Hangar_Take_1", "Hangar_Take_2", "Hangar_Take_3", "Hangar_Take_4", "Hangar_Take_5", "Hangar_Take_6", "Hangar_Take_7", "Junior_Accountant", "Personnel_Manager", "Rent_Factory_Facility", "Rent_Office", "Rent_Research_Facility", "Security_Officer", "Starbase_Defense_Operator", "Starbase_Fuel_Technician", "Station_Manager", "Terrestrial_Combat_Officer", "Terrestrial_Logistics_Officer", "Trader"]  # noqa: E501
        if not set(new_roles).issubset(set(allowed_values)):
            raise ValueError(
                "Invalid values for `new_roles` [{0}], must be a subset of [{1}]"
                .format(", ".join(map(str, set(new_roles) - set(allowed_values))),
                        ", ".join(map(str, allowed_values)))
            )

        self._new_roles = new_roles

    @property
    def old_roles(self):
        """Gets the old_roles of this GetCorporationsCorporationIdRolesHistory200Ok.

        old_roles array

        :return: The old_roles of this GetCorporationsCorporationIdRolesHistory200Ok.
        :rtype: List[str]
        """
        return self._old_roles

    @old_roles.setter
    def old_roles(self, old_roles):
        """Sets the old_roles of this GetCorporationsCorporationIdRolesHistory200Ok.

        old_roles array

        :param old_roles: The old_roles of this GetCorporationsCorporationIdRolesHistory200Ok.
        :type old_roles: List[str]
        """
        allowed_values = ["Account_Take_1", "Account_Take_2", "Account_Take_3", "Account_Take_4", "Account_Take_5", "Account_Take_6", "Account_Take_7", "Accountant", "Auditor", "Communications_Officer", "Config_Equipment", "Config_Starbase_Equipment", "Container_Take_1", "Container_Take_2", "Container_Take_3", "Container_Take_4", "Container_Take_5", "Container_Take_6", "Container_Take_7", "Contract_Manager", "Diplomat", "Director", "Factory_Manager", "Fitting_Manager", "Hangar_Query_1", "Hangar_Query_2", "Hangar_Query_3", "Hangar_Query_4", "Hangar_Query_5", "Hangar_Query_6", "Hangar_Query_7", "Hangar_Take_1", "Hangar_Take_2", "Hangar_Take_3", "Hangar_Take_4", "Hangar_Take_5", "Hangar_Take_6", "Hangar_Take_7", "Junior_Accountant", "Personnel_Manager", "Rent_Factory_Facility", "Rent_Office", "Rent_Research_Facility", "Security_Officer", "Starbase_Defense_Operator", "Starbase_Fuel_Technician", "Station_Manager", "Terrestrial_Combat_Officer", "Terrestrial_Logistics_Officer", "Trader"]  # noqa: E501
        if not set(old_roles).issubset(set(allowed_values)):
            raise ValueError(
                "Invalid values for `old_roles` [{0}], must be a subset of [{1}]"
                .format(", ".join(map(str, set(old_roles) - set(allowed_values))),
                        ", ".join(map(str, allowed_values)))
            )

        self._old_roles = old_roles

    @property
    def role_type(self):
        """Gets the role_type of this GetCorporationsCorporationIdRolesHistory200Ok.

        role_type string

        :return: The role_type of this GetCorporationsCorporationIdRolesHistory200Ok.
        :rtype: str
        """
        return self._role_type

    @role_type.setter
    def role_type(self, role_type):
        """Sets the role_type of this GetCorporationsCorporationIdRolesHistory200Ok.

        role_type string

        :param role_type: The role_type of this GetCorporationsCorporationIdRolesHistory200Ok.
        :type role_type: str
        """
        allowed_values = ["grantable_roles", "grantable_roles_at_base", "grantable_roles_at_hq", "grantable_roles_at_other", "roles", "roles_at_base", "roles_at_hq", "roles_at_other"]  # noqa: E501
        if role_type not in allowed_values:
            raise ValueError(
                "Invalid value for `role_type` ({0}), must be one of {1}"
                .format(role_type, allowed_values)
            )

        self._role_type = role_type
