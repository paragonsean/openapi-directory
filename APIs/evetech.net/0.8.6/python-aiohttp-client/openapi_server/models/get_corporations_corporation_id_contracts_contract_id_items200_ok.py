# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class GetCorporationsCorporationIdContractsContractIdItems200Ok(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, is_included: bool=None, is_singleton: bool=None, quantity: int=None, raw_quantity: int=None, record_id: int=None, type_id: int=None):
        """GetCorporationsCorporationIdContractsContractIdItems200Ok - a model defined in OpenAPI

        :param is_included: The is_included of this GetCorporationsCorporationIdContractsContractIdItems200Ok.
        :param is_singleton: The is_singleton of this GetCorporationsCorporationIdContractsContractIdItems200Ok.
        :param quantity: The quantity of this GetCorporationsCorporationIdContractsContractIdItems200Ok.
        :param raw_quantity: The raw_quantity of this GetCorporationsCorporationIdContractsContractIdItems200Ok.
        :param record_id: The record_id of this GetCorporationsCorporationIdContractsContractIdItems200Ok.
        :param type_id: The type_id of this GetCorporationsCorporationIdContractsContractIdItems200Ok.
        """
        self.openapi_types = {
            'is_included': bool,
            'is_singleton': bool,
            'quantity': int,
            'raw_quantity': int,
            'record_id': int,
            'type_id': int
        }

        self.attribute_map = {
            'is_included': 'is_included',
            'is_singleton': 'is_singleton',
            'quantity': 'quantity',
            'raw_quantity': 'raw_quantity',
            'record_id': 'record_id',
            'type_id': 'type_id'
        }

        self._is_included = is_included
        self._is_singleton = is_singleton
        self._quantity = quantity
        self._raw_quantity = raw_quantity
        self._record_id = record_id
        self._type_id = type_id

    @classmethod
    def from_dict(cls, dikt: dict) -> 'GetCorporationsCorporationIdContractsContractIdItems200Ok':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The get_corporations_corporation_id_contracts_contract_id_items_200_ok of this GetCorporationsCorporationIdContractsContractIdItems200Ok.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def is_included(self):
        """Gets the is_included of this GetCorporationsCorporationIdContractsContractIdItems200Ok.

        true if the contract issuer has submitted this item with the contract, false if the isser is asking for this item in the contract

        :return: The is_included of this GetCorporationsCorporationIdContractsContractIdItems200Ok.
        :rtype: bool
        """
        return self._is_included

    @is_included.setter
    def is_included(self, is_included):
        """Sets the is_included of this GetCorporationsCorporationIdContractsContractIdItems200Ok.

        true if the contract issuer has submitted this item with the contract, false if the isser is asking for this item in the contract

        :param is_included: The is_included of this GetCorporationsCorporationIdContractsContractIdItems200Ok.
        :type is_included: bool
        """
        if is_included is None:
            raise ValueError("Invalid value for `is_included`, must not be `None`")

        self._is_included = is_included

    @property
    def is_singleton(self):
        """Gets the is_singleton of this GetCorporationsCorporationIdContractsContractIdItems200Ok.

        is_singleton boolean

        :return: The is_singleton of this GetCorporationsCorporationIdContractsContractIdItems200Ok.
        :rtype: bool
        """
        return self._is_singleton

    @is_singleton.setter
    def is_singleton(self, is_singleton):
        """Sets the is_singleton of this GetCorporationsCorporationIdContractsContractIdItems200Ok.

        is_singleton boolean

        :param is_singleton: The is_singleton of this GetCorporationsCorporationIdContractsContractIdItems200Ok.
        :type is_singleton: bool
        """
        if is_singleton is None:
            raise ValueError("Invalid value for `is_singleton`, must not be `None`")

        self._is_singleton = is_singleton

    @property
    def quantity(self):
        """Gets the quantity of this GetCorporationsCorporationIdContractsContractIdItems200Ok.

        Number of items in the stack

        :return: The quantity of this GetCorporationsCorporationIdContractsContractIdItems200Ok.
        :rtype: int
        """
        return self._quantity

    @quantity.setter
    def quantity(self, quantity):
        """Sets the quantity of this GetCorporationsCorporationIdContractsContractIdItems200Ok.

        Number of items in the stack

        :param quantity: The quantity of this GetCorporationsCorporationIdContractsContractIdItems200Ok.
        :type quantity: int
        """
        if quantity is None:
            raise ValueError("Invalid value for `quantity`, must not be `None`")

        self._quantity = quantity

    @property
    def raw_quantity(self):
        """Gets the raw_quantity of this GetCorporationsCorporationIdContractsContractIdItems200Ok.

        -1 indicates that the item is a singleton (non-stackable). If the item happens to be a Blueprint, -1 is an Original and -2 is a Blueprint Copy

        :return: The raw_quantity of this GetCorporationsCorporationIdContractsContractIdItems200Ok.
        :rtype: int
        """
        return self._raw_quantity

    @raw_quantity.setter
    def raw_quantity(self, raw_quantity):
        """Sets the raw_quantity of this GetCorporationsCorporationIdContractsContractIdItems200Ok.

        -1 indicates that the item is a singleton (non-stackable). If the item happens to be a Blueprint, -1 is an Original and -2 is a Blueprint Copy

        :param raw_quantity: The raw_quantity of this GetCorporationsCorporationIdContractsContractIdItems200Ok.
        :type raw_quantity: int
        """

        self._raw_quantity = raw_quantity

    @property
    def record_id(self):
        """Gets the record_id of this GetCorporationsCorporationIdContractsContractIdItems200Ok.

        Unique ID for the item

        :return: The record_id of this GetCorporationsCorporationIdContractsContractIdItems200Ok.
        :rtype: int
        """
        return self._record_id

    @record_id.setter
    def record_id(self, record_id):
        """Sets the record_id of this GetCorporationsCorporationIdContractsContractIdItems200Ok.

        Unique ID for the item

        :param record_id: The record_id of this GetCorporationsCorporationIdContractsContractIdItems200Ok.
        :type record_id: int
        """
        if record_id is None:
            raise ValueError("Invalid value for `record_id`, must not be `None`")

        self._record_id = record_id

    @property
    def type_id(self):
        """Gets the type_id of this GetCorporationsCorporationIdContractsContractIdItems200Ok.

        Type ID for item

        :return: The type_id of this GetCorporationsCorporationIdContractsContractIdItems200Ok.
        :rtype: int
        """
        return self._type_id

    @type_id.setter
    def type_id(self, type_id):
        """Sets the type_id of this GetCorporationsCorporationIdContractsContractIdItems200Ok.

        Type ID for item

        :param type_id: The type_id of this GetCorporationsCorporationIdContractsContractIdItems200Ok.
        :type type_id: int
        """
        if type_id is None:
            raise ValueError("Invalid value for `type_id`, must not be `None`")

        self._type_id = type_id
