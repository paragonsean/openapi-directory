# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class GetUniverseAncestries200Ok(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, bloodline_id: int=None, description: str=None, icon_id: int=None, id: int=None, name: str=None, short_description: str=None):
        """GetUniverseAncestries200Ok - a model defined in OpenAPI

        :param bloodline_id: The bloodline_id of this GetUniverseAncestries200Ok.
        :param description: The description of this GetUniverseAncestries200Ok.
        :param icon_id: The icon_id of this GetUniverseAncestries200Ok.
        :param id: The id of this GetUniverseAncestries200Ok.
        :param name: The name of this GetUniverseAncestries200Ok.
        :param short_description: The short_description of this GetUniverseAncestries200Ok.
        """
        self.openapi_types = {
            'bloodline_id': int,
            'description': str,
            'icon_id': int,
            'id': int,
            'name': str,
            'short_description': str
        }

        self.attribute_map = {
            'bloodline_id': 'bloodline_id',
            'description': 'description',
            'icon_id': 'icon_id',
            'id': 'id',
            'name': 'name',
            'short_description': 'short_description'
        }

        self._bloodline_id = bloodline_id
        self._description = description
        self._icon_id = icon_id
        self._id = id
        self._name = name
        self._short_description = short_description

    @classmethod
    def from_dict(cls, dikt: dict) -> 'GetUniverseAncestries200Ok':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The get_universe_ancestries_200_ok of this GetUniverseAncestries200Ok.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def bloodline_id(self):
        """Gets the bloodline_id of this GetUniverseAncestries200Ok.

        The bloodline associated with this ancestry

        :return: The bloodline_id of this GetUniverseAncestries200Ok.
        :rtype: int
        """
        return self._bloodline_id

    @bloodline_id.setter
    def bloodline_id(self, bloodline_id):
        """Sets the bloodline_id of this GetUniverseAncestries200Ok.

        The bloodline associated with this ancestry

        :param bloodline_id: The bloodline_id of this GetUniverseAncestries200Ok.
        :type bloodline_id: int
        """
        if bloodline_id is None:
            raise ValueError("Invalid value for `bloodline_id`, must not be `None`")

        self._bloodline_id = bloodline_id

    @property
    def description(self):
        """Gets the description of this GetUniverseAncestries200Ok.

        description string

        :return: The description of this GetUniverseAncestries200Ok.
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this GetUniverseAncestries200Ok.

        description string

        :param description: The description of this GetUniverseAncestries200Ok.
        :type description: str
        """
        if description is None:
            raise ValueError("Invalid value for `description`, must not be `None`")

        self._description = description

    @property
    def icon_id(self):
        """Gets the icon_id of this GetUniverseAncestries200Ok.

        icon_id integer

        :return: The icon_id of this GetUniverseAncestries200Ok.
        :rtype: int
        """
        return self._icon_id

    @icon_id.setter
    def icon_id(self, icon_id):
        """Sets the icon_id of this GetUniverseAncestries200Ok.

        icon_id integer

        :param icon_id: The icon_id of this GetUniverseAncestries200Ok.
        :type icon_id: int
        """

        self._icon_id = icon_id

    @property
    def id(self):
        """Gets the id of this GetUniverseAncestries200Ok.

        id integer

        :return: The id of this GetUniverseAncestries200Ok.
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this GetUniverseAncestries200Ok.

        id integer

        :param id: The id of this GetUniverseAncestries200Ok.
        :type id: int
        """
        if id is None:
            raise ValueError("Invalid value for `id`, must not be `None`")

        self._id = id

    @property
    def name(self):
        """Gets the name of this GetUniverseAncestries200Ok.

        name string

        :return: The name of this GetUniverseAncestries200Ok.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this GetUniverseAncestries200Ok.

        name string

        :param name: The name of this GetUniverseAncestries200Ok.
        :type name: str
        """
        if name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")

        self._name = name

    @property
    def short_description(self):
        """Gets the short_description of this GetUniverseAncestries200Ok.

        short_description string

        :return: The short_description of this GetUniverseAncestries200Ok.
        :rtype: str
        """
        return self._short_description

    @short_description.setter
    def short_description(self, short_description):
        """Sets the short_description of this GetUniverseAncestries200Ok.

        short_description string

        :param short_description: The short_description of this GetUniverseAncestries200Ok.
        :type short_description: str
        """

        self._short_description = short_description
