# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.get_corporations_corporation_id_fw_stats_kills import GetCorporationsCorporationIdFwStatsKills
from openapi_server.models.get_corporations_corporation_id_fw_stats_victory_points import GetCorporationsCorporationIdFwStatsVictoryPoints
from openapi_server import util


class GetCorporationsCorporationIdFwStatsOk(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, enlisted_on: datetime=None, faction_id: int=None, kills: GetCorporationsCorporationIdFwStatsKills=None, pilots: int=None, victory_points: GetCorporationsCorporationIdFwStatsVictoryPoints=None):
        """GetCorporationsCorporationIdFwStatsOk - a model defined in OpenAPI

        :param enlisted_on: The enlisted_on of this GetCorporationsCorporationIdFwStatsOk.
        :param faction_id: The faction_id of this GetCorporationsCorporationIdFwStatsOk.
        :param kills: The kills of this GetCorporationsCorporationIdFwStatsOk.
        :param pilots: The pilots of this GetCorporationsCorporationIdFwStatsOk.
        :param victory_points: The victory_points of this GetCorporationsCorporationIdFwStatsOk.
        """
        self.openapi_types = {
            'enlisted_on': datetime,
            'faction_id': int,
            'kills': GetCorporationsCorporationIdFwStatsKills,
            'pilots': int,
            'victory_points': GetCorporationsCorporationIdFwStatsVictoryPoints
        }

        self.attribute_map = {
            'enlisted_on': 'enlisted_on',
            'faction_id': 'faction_id',
            'kills': 'kills',
            'pilots': 'pilots',
            'victory_points': 'victory_points'
        }

        self._enlisted_on = enlisted_on
        self._faction_id = faction_id
        self._kills = kills
        self._pilots = pilots
        self._victory_points = victory_points

    @classmethod
    def from_dict(cls, dikt: dict) -> 'GetCorporationsCorporationIdFwStatsOk':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The get_corporations_corporation_id_fw_stats_ok of this GetCorporationsCorporationIdFwStatsOk.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def enlisted_on(self):
        """Gets the enlisted_on of this GetCorporationsCorporationIdFwStatsOk.

        The enlistment date of the given corporation into faction warfare. Will not be included if corporation is not enlisted in faction warfare

        :return: The enlisted_on of this GetCorporationsCorporationIdFwStatsOk.
        :rtype: datetime
        """
        return self._enlisted_on

    @enlisted_on.setter
    def enlisted_on(self, enlisted_on):
        """Sets the enlisted_on of this GetCorporationsCorporationIdFwStatsOk.

        The enlistment date of the given corporation into faction warfare. Will not be included if corporation is not enlisted in faction warfare

        :param enlisted_on: The enlisted_on of this GetCorporationsCorporationIdFwStatsOk.
        :type enlisted_on: datetime
        """

        self._enlisted_on = enlisted_on

    @property
    def faction_id(self):
        """Gets the faction_id of this GetCorporationsCorporationIdFwStatsOk.

        The faction the given corporation is enlisted to fight for. Will not be included if corporation is not enlisted in faction warfare

        :return: The faction_id of this GetCorporationsCorporationIdFwStatsOk.
        :rtype: int
        """
        return self._faction_id

    @faction_id.setter
    def faction_id(self, faction_id):
        """Sets the faction_id of this GetCorporationsCorporationIdFwStatsOk.

        The faction the given corporation is enlisted to fight for. Will not be included if corporation is not enlisted in faction warfare

        :param faction_id: The faction_id of this GetCorporationsCorporationIdFwStatsOk.
        :type faction_id: int
        """

        self._faction_id = faction_id

    @property
    def kills(self):
        """Gets the kills of this GetCorporationsCorporationIdFwStatsOk.


        :return: The kills of this GetCorporationsCorporationIdFwStatsOk.
        :rtype: GetCorporationsCorporationIdFwStatsKills
        """
        return self._kills

    @kills.setter
    def kills(self, kills):
        """Sets the kills of this GetCorporationsCorporationIdFwStatsOk.


        :param kills: The kills of this GetCorporationsCorporationIdFwStatsOk.
        :type kills: GetCorporationsCorporationIdFwStatsKills
        """
        if kills is None:
            raise ValueError("Invalid value for `kills`, must not be `None`")

        self._kills = kills

    @property
    def pilots(self):
        """Gets the pilots of this GetCorporationsCorporationIdFwStatsOk.

        How many pilots the enlisted corporation has. Will not be included if corporation is not enlisted in faction warfare

        :return: The pilots of this GetCorporationsCorporationIdFwStatsOk.
        :rtype: int
        """
        return self._pilots

    @pilots.setter
    def pilots(self, pilots):
        """Sets the pilots of this GetCorporationsCorporationIdFwStatsOk.

        How many pilots the enlisted corporation has. Will not be included if corporation is not enlisted in faction warfare

        :param pilots: The pilots of this GetCorporationsCorporationIdFwStatsOk.
        :type pilots: int
        """

        self._pilots = pilots

    @property
    def victory_points(self):
        """Gets the victory_points of this GetCorporationsCorporationIdFwStatsOk.


        :return: The victory_points of this GetCorporationsCorporationIdFwStatsOk.
        :rtype: GetCorporationsCorporationIdFwStatsVictoryPoints
        """
        return self._victory_points

    @victory_points.setter
    def victory_points(self, victory_points):
        """Sets the victory_points of this GetCorporationsCorporationIdFwStatsOk.


        :param victory_points: The victory_points of this GetCorporationsCorporationIdFwStatsOk.
        :type victory_points: GetCorporationsCorporationIdFwStatsVictoryPoints
        """
        if victory_points is None:
            raise ValueError("Invalid value for `victory_points`, must not be `None`")

        self._victory_points = victory_points
