# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class GetContractsPublicBidsContractId200Ok(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, amount: float=None, bid_id: int=None, date_bid: datetime=None):
        """GetContractsPublicBidsContractId200Ok - a model defined in OpenAPI

        :param amount: The amount of this GetContractsPublicBidsContractId200Ok.
        :param bid_id: The bid_id of this GetContractsPublicBidsContractId200Ok.
        :param date_bid: The date_bid of this GetContractsPublicBidsContractId200Ok.
        """
        self.openapi_types = {
            'amount': float,
            'bid_id': int,
            'date_bid': datetime
        }

        self.attribute_map = {
            'amount': 'amount',
            'bid_id': 'bid_id',
            'date_bid': 'date_bid'
        }

        self._amount = amount
        self._bid_id = bid_id
        self._date_bid = date_bid

    @classmethod
    def from_dict(cls, dikt: dict) -> 'GetContractsPublicBidsContractId200Ok':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The get_contracts_public_bids_contract_id_200_ok of this GetContractsPublicBidsContractId200Ok.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def amount(self):
        """Gets the amount of this GetContractsPublicBidsContractId200Ok.

        The amount bid, in ISK

        :return: The amount of this GetContractsPublicBidsContractId200Ok.
        :rtype: float
        """
        return self._amount

    @amount.setter
    def amount(self, amount):
        """Sets the amount of this GetContractsPublicBidsContractId200Ok.

        The amount bid, in ISK

        :param amount: The amount of this GetContractsPublicBidsContractId200Ok.
        :type amount: float
        """
        if amount is None:
            raise ValueError("Invalid value for `amount`, must not be `None`")

        self._amount = amount

    @property
    def bid_id(self):
        """Gets the bid_id of this GetContractsPublicBidsContractId200Ok.

        Unique ID for the bid

        :return: The bid_id of this GetContractsPublicBidsContractId200Ok.
        :rtype: int
        """
        return self._bid_id

    @bid_id.setter
    def bid_id(self, bid_id):
        """Sets the bid_id of this GetContractsPublicBidsContractId200Ok.

        Unique ID for the bid

        :param bid_id: The bid_id of this GetContractsPublicBidsContractId200Ok.
        :type bid_id: int
        """
        if bid_id is None:
            raise ValueError("Invalid value for `bid_id`, must not be `None`")

        self._bid_id = bid_id

    @property
    def date_bid(self):
        """Gets the date_bid of this GetContractsPublicBidsContractId200Ok.

        Datetime when the bid was placed

        :return: The date_bid of this GetContractsPublicBidsContractId200Ok.
        :rtype: datetime
        """
        return self._date_bid

    @date_bid.setter
    def date_bid(self, date_bid):
        """Sets the date_bid of this GetContractsPublicBidsContractId200Ok.

        Datetime when the bid was placed

        :param date_bid: The date_bid of this GetContractsPublicBidsContractId200Ok.
        :type date_bid: datetime
        """
        if date_bid is None:
            raise ValueError("Invalid value for `date_bid`, must not be `None`")

        self._date_bid = date_bid
