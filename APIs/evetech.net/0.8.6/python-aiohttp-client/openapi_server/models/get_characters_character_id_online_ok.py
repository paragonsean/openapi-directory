# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class GetCharactersCharacterIdOnlineOk(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, last_login: datetime=None, last_logout: datetime=None, logins: int=None, online: bool=None):
        """GetCharactersCharacterIdOnlineOk - a model defined in OpenAPI

        :param last_login: The last_login of this GetCharactersCharacterIdOnlineOk.
        :param last_logout: The last_logout of this GetCharactersCharacterIdOnlineOk.
        :param logins: The logins of this GetCharactersCharacterIdOnlineOk.
        :param online: The online of this GetCharactersCharacterIdOnlineOk.
        """
        self.openapi_types = {
            'last_login': datetime,
            'last_logout': datetime,
            'logins': int,
            'online': bool
        }

        self.attribute_map = {
            'last_login': 'last_login',
            'last_logout': 'last_logout',
            'logins': 'logins',
            'online': 'online'
        }

        self._last_login = last_login
        self._last_logout = last_logout
        self._logins = logins
        self._online = online

    @classmethod
    def from_dict(cls, dikt: dict) -> 'GetCharactersCharacterIdOnlineOk':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The get_characters_character_id_online_ok of this GetCharactersCharacterIdOnlineOk.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def last_login(self):
        """Gets the last_login of this GetCharactersCharacterIdOnlineOk.

        Timestamp of the last login

        :return: The last_login of this GetCharactersCharacterIdOnlineOk.
        :rtype: datetime
        """
        return self._last_login

    @last_login.setter
    def last_login(self, last_login):
        """Sets the last_login of this GetCharactersCharacterIdOnlineOk.

        Timestamp of the last login

        :param last_login: The last_login of this GetCharactersCharacterIdOnlineOk.
        :type last_login: datetime
        """

        self._last_login = last_login

    @property
    def last_logout(self):
        """Gets the last_logout of this GetCharactersCharacterIdOnlineOk.

        Timestamp of the last logout

        :return: The last_logout of this GetCharactersCharacterIdOnlineOk.
        :rtype: datetime
        """
        return self._last_logout

    @last_logout.setter
    def last_logout(self, last_logout):
        """Sets the last_logout of this GetCharactersCharacterIdOnlineOk.

        Timestamp of the last logout

        :param last_logout: The last_logout of this GetCharactersCharacterIdOnlineOk.
        :type last_logout: datetime
        """

        self._last_logout = last_logout

    @property
    def logins(self):
        """Gets the logins of this GetCharactersCharacterIdOnlineOk.

        Total number of times the character has logged in

        :return: The logins of this GetCharactersCharacterIdOnlineOk.
        :rtype: int
        """
        return self._logins

    @logins.setter
    def logins(self, logins):
        """Sets the logins of this GetCharactersCharacterIdOnlineOk.

        Total number of times the character has logged in

        :param logins: The logins of this GetCharactersCharacterIdOnlineOk.
        :type logins: int
        """

        self._logins = logins

    @property
    def online(self):
        """Gets the online of this GetCharactersCharacterIdOnlineOk.

        If the character is online

        :return: The online of this GetCharactersCharacterIdOnlineOk.
        :rtype: bool
        """
        return self._online

    @online.setter
    def online(self, online):
        """Sets the online of this GetCharactersCharacterIdOnlineOk.

        If the character is online

        :param online: The online of this GetCharactersCharacterIdOnlineOk.
        :type online: bool
        """
        if online is None:
            raise ValueError("Invalid value for `online`, must not be `None`")

        self._online = online
