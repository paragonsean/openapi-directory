# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class GetCorporationsCorporationIdIndustryJobs200Ok(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, activity_id: int=None, blueprint_id: int=None, blueprint_location_id: int=None, blueprint_type_id: int=None, completed_character_id: int=None, completed_date: datetime=None, cost: float=None, duration: int=None, end_date: datetime=None, facility_id: int=None, installer_id: int=None, job_id: int=None, licensed_runs: int=None, location_id: int=None, output_location_id: int=None, pause_date: datetime=None, probability: float=None, product_type_id: int=None, runs: int=None, start_date: datetime=None, status: str=None, successful_runs: int=None):
        """GetCorporationsCorporationIdIndustryJobs200Ok - a model defined in OpenAPI

        :param activity_id: The activity_id of this GetCorporationsCorporationIdIndustryJobs200Ok.
        :param blueprint_id: The blueprint_id of this GetCorporationsCorporationIdIndustryJobs200Ok.
        :param blueprint_location_id: The blueprint_location_id of this GetCorporationsCorporationIdIndustryJobs200Ok.
        :param blueprint_type_id: The blueprint_type_id of this GetCorporationsCorporationIdIndustryJobs200Ok.
        :param completed_character_id: The completed_character_id of this GetCorporationsCorporationIdIndustryJobs200Ok.
        :param completed_date: The completed_date of this GetCorporationsCorporationIdIndustryJobs200Ok.
        :param cost: The cost of this GetCorporationsCorporationIdIndustryJobs200Ok.
        :param duration: The duration of this GetCorporationsCorporationIdIndustryJobs200Ok.
        :param end_date: The end_date of this GetCorporationsCorporationIdIndustryJobs200Ok.
        :param facility_id: The facility_id of this GetCorporationsCorporationIdIndustryJobs200Ok.
        :param installer_id: The installer_id of this GetCorporationsCorporationIdIndustryJobs200Ok.
        :param job_id: The job_id of this GetCorporationsCorporationIdIndustryJobs200Ok.
        :param licensed_runs: The licensed_runs of this GetCorporationsCorporationIdIndustryJobs200Ok.
        :param location_id: The location_id of this GetCorporationsCorporationIdIndustryJobs200Ok.
        :param output_location_id: The output_location_id of this GetCorporationsCorporationIdIndustryJobs200Ok.
        :param pause_date: The pause_date of this GetCorporationsCorporationIdIndustryJobs200Ok.
        :param probability: The probability of this GetCorporationsCorporationIdIndustryJobs200Ok.
        :param product_type_id: The product_type_id of this GetCorporationsCorporationIdIndustryJobs200Ok.
        :param runs: The runs of this GetCorporationsCorporationIdIndustryJobs200Ok.
        :param start_date: The start_date of this GetCorporationsCorporationIdIndustryJobs200Ok.
        :param status: The status of this GetCorporationsCorporationIdIndustryJobs200Ok.
        :param successful_runs: The successful_runs of this GetCorporationsCorporationIdIndustryJobs200Ok.
        """
        self.openapi_types = {
            'activity_id': int,
            'blueprint_id': int,
            'blueprint_location_id': int,
            'blueprint_type_id': int,
            'completed_character_id': int,
            'completed_date': datetime,
            'cost': float,
            'duration': int,
            'end_date': datetime,
            'facility_id': int,
            'installer_id': int,
            'job_id': int,
            'licensed_runs': int,
            'location_id': int,
            'output_location_id': int,
            'pause_date': datetime,
            'probability': float,
            'product_type_id': int,
            'runs': int,
            'start_date': datetime,
            'status': str,
            'successful_runs': int
        }

        self.attribute_map = {
            'activity_id': 'activity_id',
            'blueprint_id': 'blueprint_id',
            'blueprint_location_id': 'blueprint_location_id',
            'blueprint_type_id': 'blueprint_type_id',
            'completed_character_id': 'completed_character_id',
            'completed_date': 'completed_date',
            'cost': 'cost',
            'duration': 'duration',
            'end_date': 'end_date',
            'facility_id': 'facility_id',
            'installer_id': 'installer_id',
            'job_id': 'job_id',
            'licensed_runs': 'licensed_runs',
            'location_id': 'location_id',
            'output_location_id': 'output_location_id',
            'pause_date': 'pause_date',
            'probability': 'probability',
            'product_type_id': 'product_type_id',
            'runs': 'runs',
            'start_date': 'start_date',
            'status': 'status',
            'successful_runs': 'successful_runs'
        }

        self._activity_id = activity_id
        self._blueprint_id = blueprint_id
        self._blueprint_location_id = blueprint_location_id
        self._blueprint_type_id = blueprint_type_id
        self._completed_character_id = completed_character_id
        self._completed_date = completed_date
        self._cost = cost
        self._duration = duration
        self._end_date = end_date
        self._facility_id = facility_id
        self._installer_id = installer_id
        self._job_id = job_id
        self._licensed_runs = licensed_runs
        self._location_id = location_id
        self._output_location_id = output_location_id
        self._pause_date = pause_date
        self._probability = probability
        self._product_type_id = product_type_id
        self._runs = runs
        self._start_date = start_date
        self._status = status
        self._successful_runs = successful_runs

    @classmethod
    def from_dict(cls, dikt: dict) -> 'GetCorporationsCorporationIdIndustryJobs200Ok':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The get_corporations_corporation_id_industry_jobs_200_ok of this GetCorporationsCorporationIdIndustryJobs200Ok.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def activity_id(self):
        """Gets the activity_id of this GetCorporationsCorporationIdIndustryJobs200Ok.

        Job activity ID

        :return: The activity_id of this GetCorporationsCorporationIdIndustryJobs200Ok.
        :rtype: int
        """
        return self._activity_id

    @activity_id.setter
    def activity_id(self, activity_id):
        """Sets the activity_id of this GetCorporationsCorporationIdIndustryJobs200Ok.

        Job activity ID

        :param activity_id: The activity_id of this GetCorporationsCorporationIdIndustryJobs200Ok.
        :type activity_id: int
        """
        if activity_id is None:
            raise ValueError("Invalid value for `activity_id`, must not be `None`")

        self._activity_id = activity_id

    @property
    def blueprint_id(self):
        """Gets the blueprint_id of this GetCorporationsCorporationIdIndustryJobs200Ok.

        blueprint_id integer

        :return: The blueprint_id of this GetCorporationsCorporationIdIndustryJobs200Ok.
        :rtype: int
        """
        return self._blueprint_id

    @blueprint_id.setter
    def blueprint_id(self, blueprint_id):
        """Sets the blueprint_id of this GetCorporationsCorporationIdIndustryJobs200Ok.

        blueprint_id integer

        :param blueprint_id: The blueprint_id of this GetCorporationsCorporationIdIndustryJobs200Ok.
        :type blueprint_id: int
        """
        if blueprint_id is None:
            raise ValueError("Invalid value for `blueprint_id`, must not be `None`")

        self._blueprint_id = blueprint_id

    @property
    def blueprint_location_id(self):
        """Gets the blueprint_location_id of this GetCorporationsCorporationIdIndustryJobs200Ok.

        Location ID of the location from which the blueprint was installed. Normally a station ID, but can also be an asset (e.g. container) or corporation facility

        :return: The blueprint_location_id of this GetCorporationsCorporationIdIndustryJobs200Ok.
        :rtype: int
        """
        return self._blueprint_location_id

    @blueprint_location_id.setter
    def blueprint_location_id(self, blueprint_location_id):
        """Sets the blueprint_location_id of this GetCorporationsCorporationIdIndustryJobs200Ok.

        Location ID of the location from which the blueprint was installed. Normally a station ID, but can also be an asset (e.g. container) or corporation facility

        :param blueprint_location_id: The blueprint_location_id of this GetCorporationsCorporationIdIndustryJobs200Ok.
        :type blueprint_location_id: int
        """
        if blueprint_location_id is None:
            raise ValueError("Invalid value for `blueprint_location_id`, must not be `None`")

        self._blueprint_location_id = blueprint_location_id

    @property
    def blueprint_type_id(self):
        """Gets the blueprint_type_id of this GetCorporationsCorporationIdIndustryJobs200Ok.

        blueprint_type_id integer

        :return: The blueprint_type_id of this GetCorporationsCorporationIdIndustryJobs200Ok.
        :rtype: int
        """
        return self._blueprint_type_id

    @blueprint_type_id.setter
    def blueprint_type_id(self, blueprint_type_id):
        """Sets the blueprint_type_id of this GetCorporationsCorporationIdIndustryJobs200Ok.

        blueprint_type_id integer

        :param blueprint_type_id: The blueprint_type_id of this GetCorporationsCorporationIdIndustryJobs200Ok.
        :type blueprint_type_id: int
        """
        if blueprint_type_id is None:
            raise ValueError("Invalid value for `blueprint_type_id`, must not be `None`")

        self._blueprint_type_id = blueprint_type_id

    @property
    def completed_character_id(self):
        """Gets the completed_character_id of this GetCorporationsCorporationIdIndustryJobs200Ok.

        ID of the character which completed this job

        :return: The completed_character_id of this GetCorporationsCorporationIdIndustryJobs200Ok.
        :rtype: int
        """
        return self._completed_character_id

    @completed_character_id.setter
    def completed_character_id(self, completed_character_id):
        """Sets the completed_character_id of this GetCorporationsCorporationIdIndustryJobs200Ok.

        ID of the character which completed this job

        :param completed_character_id: The completed_character_id of this GetCorporationsCorporationIdIndustryJobs200Ok.
        :type completed_character_id: int
        """

        self._completed_character_id = completed_character_id

    @property
    def completed_date(self):
        """Gets the completed_date of this GetCorporationsCorporationIdIndustryJobs200Ok.

        Date and time when this job was completed

        :return: The completed_date of this GetCorporationsCorporationIdIndustryJobs200Ok.
        :rtype: datetime
        """
        return self._completed_date

    @completed_date.setter
    def completed_date(self, completed_date):
        """Sets the completed_date of this GetCorporationsCorporationIdIndustryJobs200Ok.

        Date and time when this job was completed

        :param completed_date: The completed_date of this GetCorporationsCorporationIdIndustryJobs200Ok.
        :type completed_date: datetime
        """

        self._completed_date = completed_date

    @property
    def cost(self):
        """Gets the cost of this GetCorporationsCorporationIdIndustryJobs200Ok.

        The sume of job installation fee and industry facility tax

        :return: The cost of this GetCorporationsCorporationIdIndustryJobs200Ok.
        :rtype: float
        """
        return self._cost

    @cost.setter
    def cost(self, cost):
        """Sets the cost of this GetCorporationsCorporationIdIndustryJobs200Ok.

        The sume of job installation fee and industry facility tax

        :param cost: The cost of this GetCorporationsCorporationIdIndustryJobs200Ok.
        :type cost: float
        """

        self._cost = cost

    @property
    def duration(self):
        """Gets the duration of this GetCorporationsCorporationIdIndustryJobs200Ok.

        Job duration in seconds

        :return: The duration of this GetCorporationsCorporationIdIndustryJobs200Ok.
        :rtype: int
        """
        return self._duration

    @duration.setter
    def duration(self, duration):
        """Sets the duration of this GetCorporationsCorporationIdIndustryJobs200Ok.

        Job duration in seconds

        :param duration: The duration of this GetCorporationsCorporationIdIndustryJobs200Ok.
        :type duration: int
        """
        if duration is None:
            raise ValueError("Invalid value for `duration`, must not be `None`")

        self._duration = duration

    @property
    def end_date(self):
        """Gets the end_date of this GetCorporationsCorporationIdIndustryJobs200Ok.

        Date and time when this job finished

        :return: The end_date of this GetCorporationsCorporationIdIndustryJobs200Ok.
        :rtype: datetime
        """
        return self._end_date

    @end_date.setter
    def end_date(self, end_date):
        """Sets the end_date of this GetCorporationsCorporationIdIndustryJobs200Ok.

        Date and time when this job finished

        :param end_date: The end_date of this GetCorporationsCorporationIdIndustryJobs200Ok.
        :type end_date: datetime
        """
        if end_date is None:
            raise ValueError("Invalid value for `end_date`, must not be `None`")

        self._end_date = end_date

    @property
    def facility_id(self):
        """Gets the facility_id of this GetCorporationsCorporationIdIndustryJobs200Ok.

        ID of the facility where this job is running

        :return: The facility_id of this GetCorporationsCorporationIdIndustryJobs200Ok.
        :rtype: int
        """
        return self._facility_id

    @facility_id.setter
    def facility_id(self, facility_id):
        """Sets the facility_id of this GetCorporationsCorporationIdIndustryJobs200Ok.

        ID of the facility where this job is running

        :param facility_id: The facility_id of this GetCorporationsCorporationIdIndustryJobs200Ok.
        :type facility_id: int
        """
        if facility_id is None:
            raise ValueError("Invalid value for `facility_id`, must not be `None`")

        self._facility_id = facility_id

    @property
    def installer_id(self):
        """Gets the installer_id of this GetCorporationsCorporationIdIndustryJobs200Ok.

        ID of the character which installed this job

        :return: The installer_id of this GetCorporationsCorporationIdIndustryJobs200Ok.
        :rtype: int
        """
        return self._installer_id

    @installer_id.setter
    def installer_id(self, installer_id):
        """Sets the installer_id of this GetCorporationsCorporationIdIndustryJobs200Ok.

        ID of the character which installed this job

        :param installer_id: The installer_id of this GetCorporationsCorporationIdIndustryJobs200Ok.
        :type installer_id: int
        """
        if installer_id is None:
            raise ValueError("Invalid value for `installer_id`, must not be `None`")

        self._installer_id = installer_id

    @property
    def job_id(self):
        """Gets the job_id of this GetCorporationsCorporationIdIndustryJobs200Ok.

        Unique job ID

        :return: The job_id of this GetCorporationsCorporationIdIndustryJobs200Ok.
        :rtype: int
        """
        return self._job_id

    @job_id.setter
    def job_id(self, job_id):
        """Sets the job_id of this GetCorporationsCorporationIdIndustryJobs200Ok.

        Unique job ID

        :param job_id: The job_id of this GetCorporationsCorporationIdIndustryJobs200Ok.
        :type job_id: int
        """
        if job_id is None:
            raise ValueError("Invalid value for `job_id`, must not be `None`")

        self._job_id = job_id

    @property
    def licensed_runs(self):
        """Gets the licensed_runs of this GetCorporationsCorporationIdIndustryJobs200Ok.

        Number of runs blueprint is licensed for

        :return: The licensed_runs of this GetCorporationsCorporationIdIndustryJobs200Ok.
        :rtype: int
        """
        return self._licensed_runs

    @licensed_runs.setter
    def licensed_runs(self, licensed_runs):
        """Sets the licensed_runs of this GetCorporationsCorporationIdIndustryJobs200Ok.

        Number of runs blueprint is licensed for

        :param licensed_runs: The licensed_runs of this GetCorporationsCorporationIdIndustryJobs200Ok.
        :type licensed_runs: int
        """

        self._licensed_runs = licensed_runs

    @property
    def location_id(self):
        """Gets the location_id of this GetCorporationsCorporationIdIndustryJobs200Ok.

        ID of the location for the industry facility

        :return: The location_id of this GetCorporationsCorporationIdIndustryJobs200Ok.
        :rtype: int
        """
        return self._location_id

    @location_id.setter
    def location_id(self, location_id):
        """Sets the location_id of this GetCorporationsCorporationIdIndustryJobs200Ok.

        ID of the location for the industry facility

        :param location_id: The location_id of this GetCorporationsCorporationIdIndustryJobs200Ok.
        :type location_id: int
        """
        if location_id is None:
            raise ValueError("Invalid value for `location_id`, must not be `None`")

        self._location_id = location_id

    @property
    def output_location_id(self):
        """Gets the output_location_id of this GetCorporationsCorporationIdIndustryJobs200Ok.

        Location ID of the location to which the output of the job will be delivered. Normally a station ID, but can also be a corporation facility

        :return: The output_location_id of this GetCorporationsCorporationIdIndustryJobs200Ok.
        :rtype: int
        """
        return self._output_location_id

    @output_location_id.setter
    def output_location_id(self, output_location_id):
        """Sets the output_location_id of this GetCorporationsCorporationIdIndustryJobs200Ok.

        Location ID of the location to which the output of the job will be delivered. Normally a station ID, but can also be a corporation facility

        :param output_location_id: The output_location_id of this GetCorporationsCorporationIdIndustryJobs200Ok.
        :type output_location_id: int
        """
        if output_location_id is None:
            raise ValueError("Invalid value for `output_location_id`, must not be `None`")

        self._output_location_id = output_location_id

    @property
    def pause_date(self):
        """Gets the pause_date of this GetCorporationsCorporationIdIndustryJobs200Ok.

        Date and time when this job was paused (i.e. time when the facility where this job was installed went offline)

        :return: The pause_date of this GetCorporationsCorporationIdIndustryJobs200Ok.
        :rtype: datetime
        """
        return self._pause_date

    @pause_date.setter
    def pause_date(self, pause_date):
        """Sets the pause_date of this GetCorporationsCorporationIdIndustryJobs200Ok.

        Date and time when this job was paused (i.e. time when the facility where this job was installed went offline)

        :param pause_date: The pause_date of this GetCorporationsCorporationIdIndustryJobs200Ok.
        :type pause_date: datetime
        """

        self._pause_date = pause_date

    @property
    def probability(self):
        """Gets the probability of this GetCorporationsCorporationIdIndustryJobs200Ok.

        Chance of success for invention

        :return: The probability of this GetCorporationsCorporationIdIndustryJobs200Ok.
        :rtype: float
        """
        return self._probability

    @probability.setter
    def probability(self, probability):
        """Sets the probability of this GetCorporationsCorporationIdIndustryJobs200Ok.

        Chance of success for invention

        :param probability: The probability of this GetCorporationsCorporationIdIndustryJobs200Ok.
        :type probability: float
        """

        self._probability = probability

    @property
    def product_type_id(self):
        """Gets the product_type_id of this GetCorporationsCorporationIdIndustryJobs200Ok.

        Type ID of product (manufactured, copied or invented)

        :return: The product_type_id of this GetCorporationsCorporationIdIndustryJobs200Ok.
        :rtype: int
        """
        return self._product_type_id

    @product_type_id.setter
    def product_type_id(self, product_type_id):
        """Sets the product_type_id of this GetCorporationsCorporationIdIndustryJobs200Ok.

        Type ID of product (manufactured, copied or invented)

        :param product_type_id: The product_type_id of this GetCorporationsCorporationIdIndustryJobs200Ok.
        :type product_type_id: int
        """

        self._product_type_id = product_type_id

    @property
    def runs(self):
        """Gets the runs of this GetCorporationsCorporationIdIndustryJobs200Ok.

        Number of runs for a manufacturing job, or number of copies to make for a blueprint copy

        :return: The runs of this GetCorporationsCorporationIdIndustryJobs200Ok.
        :rtype: int
        """
        return self._runs

    @runs.setter
    def runs(self, runs):
        """Sets the runs of this GetCorporationsCorporationIdIndustryJobs200Ok.

        Number of runs for a manufacturing job, or number of copies to make for a blueprint copy

        :param runs: The runs of this GetCorporationsCorporationIdIndustryJobs200Ok.
        :type runs: int
        """
        if runs is None:
            raise ValueError("Invalid value for `runs`, must not be `None`")

        self._runs = runs

    @property
    def start_date(self):
        """Gets the start_date of this GetCorporationsCorporationIdIndustryJobs200Ok.

        Date and time when this job started

        :return: The start_date of this GetCorporationsCorporationIdIndustryJobs200Ok.
        :rtype: datetime
        """
        return self._start_date

    @start_date.setter
    def start_date(self, start_date):
        """Sets the start_date of this GetCorporationsCorporationIdIndustryJobs200Ok.

        Date and time when this job started

        :param start_date: The start_date of this GetCorporationsCorporationIdIndustryJobs200Ok.
        :type start_date: datetime
        """
        if start_date is None:
            raise ValueError("Invalid value for `start_date`, must not be `None`")

        self._start_date = start_date

    @property
    def status(self):
        """Gets the status of this GetCorporationsCorporationIdIndustryJobs200Ok.

        status string

        :return: The status of this GetCorporationsCorporationIdIndustryJobs200Ok.
        :rtype: str
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this GetCorporationsCorporationIdIndustryJobs200Ok.

        status string

        :param status: The status of this GetCorporationsCorporationIdIndustryJobs200Ok.
        :type status: str
        """
        allowed_values = ["active", "cancelled", "delivered", "paused", "ready", "reverted"]  # noqa: E501
        if status not in allowed_values:
            raise ValueError(
                "Invalid value for `status` ({0}), must be one of {1}"
                .format(status, allowed_values)
            )

        self._status = status

    @property
    def successful_runs(self):
        """Gets the successful_runs of this GetCorporationsCorporationIdIndustryJobs200Ok.

        Number of successful runs for this job. Equal to runs unless this is an invention job

        :return: The successful_runs of this GetCorporationsCorporationIdIndustryJobs200Ok.
        :rtype: int
        """
        return self._successful_runs

    @successful_runs.setter
    def successful_runs(self, successful_runs):
        """Sets the successful_runs of this GetCorporationsCorporationIdIndustryJobs200Ok.

        Number of successful runs for this job. Equal to runs unless this is an invention job

        :param successful_runs: The successful_runs of this GetCorporationsCorporationIdIndustryJobs200Ok.
        :type successful_runs: int
        """

        self._successful_runs = successful_runs
