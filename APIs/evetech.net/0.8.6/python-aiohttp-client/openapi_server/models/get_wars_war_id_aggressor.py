# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class GetWarsWarIdAggressor(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, alliance_id: int=None, corporation_id: int=None, isk_destroyed: float=None, ships_killed: int=None):
        """GetWarsWarIdAggressor - a model defined in OpenAPI

        :param alliance_id: The alliance_id of this GetWarsWarIdAggressor.
        :param corporation_id: The corporation_id of this GetWarsWarIdAggressor.
        :param isk_destroyed: The isk_destroyed of this GetWarsWarIdAggressor.
        :param ships_killed: The ships_killed of this GetWarsWarIdAggressor.
        """
        self.openapi_types = {
            'alliance_id': int,
            'corporation_id': int,
            'isk_destroyed': float,
            'ships_killed': int
        }

        self.attribute_map = {
            'alliance_id': 'alliance_id',
            'corporation_id': 'corporation_id',
            'isk_destroyed': 'isk_destroyed',
            'ships_killed': 'ships_killed'
        }

        self._alliance_id = alliance_id
        self._corporation_id = corporation_id
        self._isk_destroyed = isk_destroyed
        self._ships_killed = ships_killed

    @classmethod
    def from_dict(cls, dikt: dict) -> 'GetWarsWarIdAggressor':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The get_wars_war_id_aggressor of this GetWarsWarIdAggressor.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def alliance_id(self):
        """Gets the alliance_id of this GetWarsWarIdAggressor.

        Alliance ID if and only if the aggressor is an alliance

        :return: The alliance_id of this GetWarsWarIdAggressor.
        :rtype: int
        """
        return self._alliance_id

    @alliance_id.setter
    def alliance_id(self, alliance_id):
        """Sets the alliance_id of this GetWarsWarIdAggressor.

        Alliance ID if and only if the aggressor is an alliance

        :param alliance_id: The alliance_id of this GetWarsWarIdAggressor.
        :type alliance_id: int
        """

        self._alliance_id = alliance_id

    @property
    def corporation_id(self):
        """Gets the corporation_id of this GetWarsWarIdAggressor.

        Corporation ID if and only if the aggressor is a corporation

        :return: The corporation_id of this GetWarsWarIdAggressor.
        :rtype: int
        """
        return self._corporation_id

    @corporation_id.setter
    def corporation_id(self, corporation_id):
        """Sets the corporation_id of this GetWarsWarIdAggressor.

        Corporation ID if and only if the aggressor is a corporation

        :param corporation_id: The corporation_id of this GetWarsWarIdAggressor.
        :type corporation_id: int
        """

        self._corporation_id = corporation_id

    @property
    def isk_destroyed(self):
        """Gets the isk_destroyed of this GetWarsWarIdAggressor.

        ISK value of ships the aggressor has destroyed

        :return: The isk_destroyed of this GetWarsWarIdAggressor.
        :rtype: float
        """
        return self._isk_destroyed

    @isk_destroyed.setter
    def isk_destroyed(self, isk_destroyed):
        """Sets the isk_destroyed of this GetWarsWarIdAggressor.

        ISK value of ships the aggressor has destroyed

        :param isk_destroyed: The isk_destroyed of this GetWarsWarIdAggressor.
        :type isk_destroyed: float
        """
        if isk_destroyed is None:
            raise ValueError("Invalid value for `isk_destroyed`, must not be `None`")

        self._isk_destroyed = isk_destroyed

    @property
    def ships_killed(self):
        """Gets the ships_killed of this GetWarsWarIdAggressor.

        The number of ships the aggressor has killed

        :return: The ships_killed of this GetWarsWarIdAggressor.
        :rtype: int
        """
        return self._ships_killed

    @ships_killed.setter
    def ships_killed(self, ships_killed):
        """Sets the ships_killed of this GetWarsWarIdAggressor.

        The number of ships the aggressor has killed

        :param ships_killed: The ships_killed of this GetWarsWarIdAggressor.
        :type ships_killed: int
        """
        if ships_killed is None:
            raise ValueError("Invalid value for `ships_killed`, must not be `None`")

        self._ships_killed = ships_killed
