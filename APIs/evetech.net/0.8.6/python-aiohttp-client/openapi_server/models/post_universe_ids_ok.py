# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.post_universe_ids_agent import PostUniverseIdsAgent
from openapi_server.models.post_universe_ids_alliance import PostUniverseIdsAlliance
from openapi_server.models.post_universe_ids_character import PostUniverseIdsCharacter
from openapi_server.models.post_universe_ids_constellation import PostUniverseIdsConstellation
from openapi_server.models.post_universe_ids_corporation import PostUniverseIdsCorporation
from openapi_server.models.post_universe_ids_faction import PostUniverseIdsFaction
from openapi_server.models.post_universe_ids_inventory_type import PostUniverseIdsInventoryType
from openapi_server.models.post_universe_ids_region import PostUniverseIdsRegion
from openapi_server.models.post_universe_ids_station import PostUniverseIdsStation
from openapi_server.models.post_universe_ids_system import PostUniverseIdsSystem
from openapi_server import util


class PostUniverseIdsOk(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, agents: List[PostUniverseIdsAgent]=None, alliances: List[PostUniverseIdsAlliance]=None, characters: List[PostUniverseIdsCharacter]=None, constellations: List[PostUniverseIdsConstellation]=None, corporations: List[PostUniverseIdsCorporation]=None, factions: List[PostUniverseIdsFaction]=None, inventory_types: List[PostUniverseIdsInventoryType]=None, regions: List[PostUniverseIdsRegion]=None, stations: List[PostUniverseIdsStation]=None, systems: List[PostUniverseIdsSystem]=None):
        """PostUniverseIdsOk - a model defined in OpenAPI

        :param agents: The agents of this PostUniverseIdsOk.
        :param alliances: The alliances of this PostUniverseIdsOk.
        :param characters: The characters of this PostUniverseIdsOk.
        :param constellations: The constellations of this PostUniverseIdsOk.
        :param corporations: The corporations of this PostUniverseIdsOk.
        :param factions: The factions of this PostUniverseIdsOk.
        :param inventory_types: The inventory_types of this PostUniverseIdsOk.
        :param regions: The regions of this PostUniverseIdsOk.
        :param stations: The stations of this PostUniverseIdsOk.
        :param systems: The systems of this PostUniverseIdsOk.
        """
        self.openapi_types = {
            'agents': List[PostUniverseIdsAgent],
            'alliances': List[PostUniverseIdsAlliance],
            'characters': List[PostUniverseIdsCharacter],
            'constellations': List[PostUniverseIdsConstellation],
            'corporations': List[PostUniverseIdsCorporation],
            'factions': List[PostUniverseIdsFaction],
            'inventory_types': List[PostUniverseIdsInventoryType],
            'regions': List[PostUniverseIdsRegion],
            'stations': List[PostUniverseIdsStation],
            'systems': List[PostUniverseIdsSystem]
        }

        self.attribute_map = {
            'agents': 'agents',
            'alliances': 'alliances',
            'characters': 'characters',
            'constellations': 'constellations',
            'corporations': 'corporations',
            'factions': 'factions',
            'inventory_types': 'inventory_types',
            'regions': 'regions',
            'stations': 'stations',
            'systems': 'systems'
        }

        self._agents = agents
        self._alliances = alliances
        self._characters = characters
        self._constellations = constellations
        self._corporations = corporations
        self._factions = factions
        self._inventory_types = inventory_types
        self._regions = regions
        self._stations = stations
        self._systems = systems

    @classmethod
    def from_dict(cls, dikt: dict) -> 'PostUniverseIdsOk':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The post_universe_ids_ok of this PostUniverseIdsOk.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def agents(self):
        """Gets the agents of this PostUniverseIdsOk.

        agents array

        :return: The agents of this PostUniverseIdsOk.
        :rtype: List[PostUniverseIdsAgent]
        """
        return self._agents

    @agents.setter
    def agents(self, agents):
        """Sets the agents of this PostUniverseIdsOk.

        agents array

        :param agents: The agents of this PostUniverseIdsOk.
        :type agents: List[PostUniverseIdsAgent]
        """
        if agents is not None and len(agents) > 1000:
            raise ValueError("Invalid value for `agents`, number of items must be less than or equal to `1000`")

        self._agents = agents

    @property
    def alliances(self):
        """Gets the alliances of this PostUniverseIdsOk.

        alliances array

        :return: The alliances of this PostUniverseIdsOk.
        :rtype: List[PostUniverseIdsAlliance]
        """
        return self._alliances

    @alliances.setter
    def alliances(self, alliances):
        """Sets the alliances of this PostUniverseIdsOk.

        alliances array

        :param alliances: The alliances of this PostUniverseIdsOk.
        :type alliances: List[PostUniverseIdsAlliance]
        """
        if alliances is not None and len(alliances) > 1000:
            raise ValueError("Invalid value for `alliances`, number of items must be less than or equal to `1000`")

        self._alliances = alliances

    @property
    def characters(self):
        """Gets the characters of this PostUniverseIdsOk.

        characters array

        :return: The characters of this PostUniverseIdsOk.
        :rtype: List[PostUniverseIdsCharacter]
        """
        return self._characters

    @characters.setter
    def characters(self, characters):
        """Sets the characters of this PostUniverseIdsOk.

        characters array

        :param characters: The characters of this PostUniverseIdsOk.
        :type characters: List[PostUniverseIdsCharacter]
        """
        if characters is not None and len(characters) > 1000:
            raise ValueError("Invalid value for `characters`, number of items must be less than or equal to `1000`")

        self._characters = characters

    @property
    def constellations(self):
        """Gets the constellations of this PostUniverseIdsOk.

        constellations array

        :return: The constellations of this PostUniverseIdsOk.
        :rtype: List[PostUniverseIdsConstellation]
        """
        return self._constellations

    @constellations.setter
    def constellations(self, constellations):
        """Sets the constellations of this PostUniverseIdsOk.

        constellations array

        :param constellations: The constellations of this PostUniverseIdsOk.
        :type constellations: List[PostUniverseIdsConstellation]
        """
        if constellations is not None and len(constellations) > 1000:
            raise ValueError("Invalid value for `constellations`, number of items must be less than or equal to `1000`")

        self._constellations = constellations

    @property
    def corporations(self):
        """Gets the corporations of this PostUniverseIdsOk.

        corporations array

        :return: The corporations of this PostUniverseIdsOk.
        :rtype: List[PostUniverseIdsCorporation]
        """
        return self._corporations

    @corporations.setter
    def corporations(self, corporations):
        """Sets the corporations of this PostUniverseIdsOk.

        corporations array

        :param corporations: The corporations of this PostUniverseIdsOk.
        :type corporations: List[PostUniverseIdsCorporation]
        """
        if corporations is not None and len(corporations) > 1000:
            raise ValueError("Invalid value for `corporations`, number of items must be less than or equal to `1000`")

        self._corporations = corporations

    @property
    def factions(self):
        """Gets the factions of this PostUniverseIdsOk.

        factions array

        :return: The factions of this PostUniverseIdsOk.
        :rtype: List[PostUniverseIdsFaction]
        """
        return self._factions

    @factions.setter
    def factions(self, factions):
        """Sets the factions of this PostUniverseIdsOk.

        factions array

        :param factions: The factions of this PostUniverseIdsOk.
        :type factions: List[PostUniverseIdsFaction]
        """
        if factions is not None and len(factions) > 1000:
            raise ValueError("Invalid value for `factions`, number of items must be less than or equal to `1000`")

        self._factions = factions

    @property
    def inventory_types(self):
        """Gets the inventory_types of this PostUniverseIdsOk.

        inventory_types array

        :return: The inventory_types of this PostUniverseIdsOk.
        :rtype: List[PostUniverseIdsInventoryType]
        """
        return self._inventory_types

    @inventory_types.setter
    def inventory_types(self, inventory_types):
        """Sets the inventory_types of this PostUniverseIdsOk.

        inventory_types array

        :param inventory_types: The inventory_types of this PostUniverseIdsOk.
        :type inventory_types: List[PostUniverseIdsInventoryType]
        """
        if inventory_types is not None and len(inventory_types) > 1000:
            raise ValueError("Invalid value for `inventory_types`, number of items must be less than or equal to `1000`")

        self._inventory_types = inventory_types

    @property
    def regions(self):
        """Gets the regions of this PostUniverseIdsOk.

        regions array

        :return: The regions of this PostUniverseIdsOk.
        :rtype: List[PostUniverseIdsRegion]
        """
        return self._regions

    @regions.setter
    def regions(self, regions):
        """Sets the regions of this PostUniverseIdsOk.

        regions array

        :param regions: The regions of this PostUniverseIdsOk.
        :type regions: List[PostUniverseIdsRegion]
        """
        if regions is not None and len(regions) > 1000:
            raise ValueError("Invalid value for `regions`, number of items must be less than or equal to `1000`")

        self._regions = regions

    @property
    def stations(self):
        """Gets the stations of this PostUniverseIdsOk.

        stations array

        :return: The stations of this PostUniverseIdsOk.
        :rtype: List[PostUniverseIdsStation]
        """
        return self._stations

    @stations.setter
    def stations(self, stations):
        """Sets the stations of this PostUniverseIdsOk.

        stations array

        :param stations: The stations of this PostUniverseIdsOk.
        :type stations: List[PostUniverseIdsStation]
        """
        if stations is not None and len(stations) > 1000:
            raise ValueError("Invalid value for `stations`, number of items must be less than or equal to `1000`")

        self._stations = stations

    @property
    def systems(self):
        """Gets the systems of this PostUniverseIdsOk.

        systems array

        :return: The systems of this PostUniverseIdsOk.
        :rtype: List[PostUniverseIdsSystem]
        """
        return self._systems

    @systems.setter
    def systems(self, systems):
        """Sets the systems of this PostUniverseIdsOk.

        systems array

        :param systems: The systems of this PostUniverseIdsOk.
        :type systems: List[PostUniverseIdsSystem]
        """
        if systems is not None and len(systems) > 1000:
            raise ValueError("Invalid value for `systems`, number of items must be less than or equal to `1000`")

        self._systems = systems
