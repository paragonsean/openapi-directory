# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class GetIncursions200Ok(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, constellation_id: int=None, faction_id: int=None, has_boss: bool=None, infested_solar_systems: List[int]=None, influence: float=None, staging_solar_system_id: int=None, state: str=None, type: str=None):
        """GetIncursions200Ok - a model defined in OpenAPI

        :param constellation_id: The constellation_id of this GetIncursions200Ok.
        :param faction_id: The faction_id of this GetIncursions200Ok.
        :param has_boss: The has_boss of this GetIncursions200Ok.
        :param infested_solar_systems: The infested_solar_systems of this GetIncursions200Ok.
        :param influence: The influence of this GetIncursions200Ok.
        :param staging_solar_system_id: The staging_solar_system_id of this GetIncursions200Ok.
        :param state: The state of this GetIncursions200Ok.
        :param type: The type of this GetIncursions200Ok.
        """
        self.openapi_types = {
            'constellation_id': int,
            'faction_id': int,
            'has_boss': bool,
            'infested_solar_systems': List[int],
            'influence': float,
            'staging_solar_system_id': int,
            'state': str,
            'type': str
        }

        self.attribute_map = {
            'constellation_id': 'constellation_id',
            'faction_id': 'faction_id',
            'has_boss': 'has_boss',
            'infested_solar_systems': 'infested_solar_systems',
            'influence': 'influence',
            'staging_solar_system_id': 'staging_solar_system_id',
            'state': 'state',
            'type': 'type'
        }

        self._constellation_id = constellation_id
        self._faction_id = faction_id
        self._has_boss = has_boss
        self._infested_solar_systems = infested_solar_systems
        self._influence = influence
        self._staging_solar_system_id = staging_solar_system_id
        self._state = state
        self._type = type

    @classmethod
    def from_dict(cls, dikt: dict) -> 'GetIncursions200Ok':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The get_incursions_200_ok of this GetIncursions200Ok.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def constellation_id(self):
        """Gets the constellation_id of this GetIncursions200Ok.

        The constellation id in which this incursion takes place

        :return: The constellation_id of this GetIncursions200Ok.
        :rtype: int
        """
        return self._constellation_id

    @constellation_id.setter
    def constellation_id(self, constellation_id):
        """Sets the constellation_id of this GetIncursions200Ok.

        The constellation id in which this incursion takes place

        :param constellation_id: The constellation_id of this GetIncursions200Ok.
        :type constellation_id: int
        """
        if constellation_id is None:
            raise ValueError("Invalid value for `constellation_id`, must not be `None`")

        self._constellation_id = constellation_id

    @property
    def faction_id(self):
        """Gets the faction_id of this GetIncursions200Ok.

        The attacking faction's id

        :return: The faction_id of this GetIncursions200Ok.
        :rtype: int
        """
        return self._faction_id

    @faction_id.setter
    def faction_id(self, faction_id):
        """Sets the faction_id of this GetIncursions200Ok.

        The attacking faction's id

        :param faction_id: The faction_id of this GetIncursions200Ok.
        :type faction_id: int
        """
        if faction_id is None:
            raise ValueError("Invalid value for `faction_id`, must not be `None`")

        self._faction_id = faction_id

    @property
    def has_boss(self):
        """Gets the has_boss of this GetIncursions200Ok.

        Whether the final encounter has boss or not

        :return: The has_boss of this GetIncursions200Ok.
        :rtype: bool
        """
        return self._has_boss

    @has_boss.setter
    def has_boss(self, has_boss):
        """Sets the has_boss of this GetIncursions200Ok.

        Whether the final encounter has boss or not

        :param has_boss: The has_boss of this GetIncursions200Ok.
        :type has_boss: bool
        """
        if has_boss is None:
            raise ValueError("Invalid value for `has_boss`, must not be `None`")

        self._has_boss = has_boss

    @property
    def infested_solar_systems(self):
        """Gets the infested_solar_systems of this GetIncursions200Ok.

        A list of infested solar system ids that are a part of this incursion

        :return: The infested_solar_systems of this GetIncursions200Ok.
        :rtype: List[int]
        """
        return self._infested_solar_systems

    @infested_solar_systems.setter
    def infested_solar_systems(self, infested_solar_systems):
        """Sets the infested_solar_systems of this GetIncursions200Ok.

        A list of infested solar system ids that are a part of this incursion

        :param infested_solar_systems: The infested_solar_systems of this GetIncursions200Ok.
        :type infested_solar_systems: List[int]
        """
        if infested_solar_systems is None:
            raise ValueError("Invalid value for `infested_solar_systems`, must not be `None`")
        if infested_solar_systems is not None and len(infested_solar_systems) > 100:
            raise ValueError("Invalid value for `infested_solar_systems`, number of items must be less than or equal to `100`")

        self._infested_solar_systems = infested_solar_systems

    @property
    def influence(self):
        """Gets the influence of this GetIncursions200Ok.

        Influence of this incursion as a float from 0 to 1

        :return: The influence of this GetIncursions200Ok.
        :rtype: float
        """
        return self._influence

    @influence.setter
    def influence(self, influence):
        """Sets the influence of this GetIncursions200Ok.

        Influence of this incursion as a float from 0 to 1

        :param influence: The influence of this GetIncursions200Ok.
        :type influence: float
        """
        if influence is None:
            raise ValueError("Invalid value for `influence`, must not be `None`")

        self._influence = influence

    @property
    def staging_solar_system_id(self):
        """Gets the staging_solar_system_id of this GetIncursions200Ok.

        Staging solar system for this incursion

        :return: The staging_solar_system_id of this GetIncursions200Ok.
        :rtype: int
        """
        return self._staging_solar_system_id

    @staging_solar_system_id.setter
    def staging_solar_system_id(self, staging_solar_system_id):
        """Sets the staging_solar_system_id of this GetIncursions200Ok.

        Staging solar system for this incursion

        :param staging_solar_system_id: The staging_solar_system_id of this GetIncursions200Ok.
        :type staging_solar_system_id: int
        """
        if staging_solar_system_id is None:
            raise ValueError("Invalid value for `staging_solar_system_id`, must not be `None`")

        self._staging_solar_system_id = staging_solar_system_id

    @property
    def state(self):
        """Gets the state of this GetIncursions200Ok.

        The state of this incursion

        :return: The state of this GetIncursions200Ok.
        :rtype: str
        """
        return self._state

    @state.setter
    def state(self, state):
        """Sets the state of this GetIncursions200Ok.

        The state of this incursion

        :param state: The state of this GetIncursions200Ok.
        :type state: str
        """
        allowed_values = ["withdrawing", "mobilizing", "established"]  # noqa: E501
        if state not in allowed_values:
            raise ValueError(
                "Invalid value for `state` ({0}), must be one of {1}"
                .format(state, allowed_values)
            )

        self._state = state

    @property
    def type(self):
        """Gets the type of this GetIncursions200Ok.

        The type of this incursion

        :return: The type of this GetIncursions200Ok.
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this GetIncursions200Ok.

        The type of this incursion

        :param type: The type of this GetIncursions200Ok.
        :type type: str
        """
        if type is None:
            raise ValueError("Invalid value for `type`, must not be `None`")

        self._type = type
