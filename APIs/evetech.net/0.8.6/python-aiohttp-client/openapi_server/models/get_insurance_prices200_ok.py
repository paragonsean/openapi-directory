# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.get_insurance_prices_level import GetInsurancePricesLevel
from openapi_server import util


class GetInsurancePrices200Ok(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, levels: List[GetInsurancePricesLevel]=None, type_id: int=None):
        """GetInsurancePrices200Ok - a model defined in OpenAPI

        :param levels: The levels of this GetInsurancePrices200Ok.
        :param type_id: The type_id of this GetInsurancePrices200Ok.
        """
        self.openapi_types = {
            'levels': List[GetInsurancePricesLevel],
            'type_id': int
        }

        self.attribute_map = {
            'levels': 'levels',
            'type_id': 'type_id'
        }

        self._levels = levels
        self._type_id = type_id

    @classmethod
    def from_dict(cls, dikt: dict) -> 'GetInsurancePrices200Ok':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The get_insurance_prices_200_ok of this GetInsurancePrices200Ok.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def levels(self):
        """Gets the levels of this GetInsurancePrices200Ok.

        A list of a available insurance levels for this ship type

        :return: The levels of this GetInsurancePrices200Ok.
        :rtype: List[GetInsurancePricesLevel]
        """
        return self._levels

    @levels.setter
    def levels(self, levels):
        """Sets the levels of this GetInsurancePrices200Ok.

        A list of a available insurance levels for this ship type

        :param levels: The levels of this GetInsurancePrices200Ok.
        :type levels: List[GetInsurancePricesLevel]
        """
        if levels is None:
            raise ValueError("Invalid value for `levels`, must not be `None`")
        if levels is not None and len(levels) > 6:
            raise ValueError("Invalid value for `levels`, number of items must be less than or equal to `6`")

        self._levels = levels

    @property
    def type_id(self):
        """Gets the type_id of this GetInsurancePrices200Ok.

        type_id integer

        :return: The type_id of this GetInsurancePrices200Ok.
        :rtype: int
        """
        return self._type_id

    @type_id.setter
    def type_id(self, type_id):
        """Sets the type_id of this GetInsurancePrices200Ok.

        type_id integer

        :param type_id: The type_id of this GetInsurancePrices200Ok.
        :type type_id: int
        """
        if type_id is None:
            raise ValueError("Invalid value for `type_id`, must not be `None`")

        self._type_id = type_id
