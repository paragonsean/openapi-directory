# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.get_characters_character_id_mail_recipient import GetCharactersCharacterIdMailRecipient
from openapi_server import util


class GetCharactersCharacterIdMail200Ok(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, _from: int=None, is_read: bool=None, labels: list[int]=None, mail_id: int=None, recipients: list[GetCharactersCharacterIdMailRecipient]=None, subject: str=None, timestamp: datetime=None):
        """GetCharactersCharacterIdMail200Ok - a model defined in OpenAPI

        :param _from: The _from of this GetCharactersCharacterIdMail200Ok.
        :param is_read: The is_read of this GetCharactersCharacterIdMail200Ok.
        :param labels: The labels of this GetCharactersCharacterIdMail200Ok.
        :param mail_id: The mail_id of this GetCharactersCharacterIdMail200Ok.
        :param recipients: The recipients of this GetCharactersCharacterIdMail200Ok.
        :param subject: The subject of this GetCharactersCharacterIdMail200Ok.
        :param timestamp: The timestamp of this GetCharactersCharacterIdMail200Ok.
        """
        self.openapi_types = {
            '_from': int,
            'is_read': bool,
            'labels': list[int],
            'mail_id': int,
            'recipients': list[GetCharactersCharacterIdMailRecipient],
            'subject': str,
            'timestamp': datetime
        }

        self.attribute_map = {
            '_from': 'from',
            'is_read': 'is_read',
            'labels': 'labels',
            'mail_id': 'mail_id',
            'recipients': 'recipients',
            'subject': 'subject',
            'timestamp': 'timestamp'
        }

        self.__from = _from
        self._is_read = is_read
        self._labels = labels
        self._mail_id = mail_id
        self._recipients = recipients
        self._subject = subject
        self._timestamp = timestamp

    @classmethod
    def from_dict(cls, dikt: dict) -> 'GetCharactersCharacterIdMail200Ok':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The get_characters_character_id_mail_200_ok of this GetCharactersCharacterIdMail200Ok.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def _from(self):
        """Gets the _from of this GetCharactersCharacterIdMail200Ok.

        From whom the mail was sent

        :return: The _from of this GetCharactersCharacterIdMail200Ok.
        :rtype: int
        """
        return self.__from

    @_from.setter
    def _from(self, _from):
        """Sets the _from of this GetCharactersCharacterIdMail200Ok.

        From whom the mail was sent

        :param _from: The _from of this GetCharactersCharacterIdMail200Ok.
        :type _from: int
        """

        self.__from = _from

    @property
    def is_read(self):
        """Gets the is_read of this GetCharactersCharacterIdMail200Ok.

        is_read boolean

        :return: The is_read of this GetCharactersCharacterIdMail200Ok.
        :rtype: bool
        """
        return self._is_read

    @is_read.setter
    def is_read(self, is_read):
        """Sets the is_read of this GetCharactersCharacterIdMail200Ok.

        is_read boolean

        :param is_read: The is_read of this GetCharactersCharacterIdMail200Ok.
        :type is_read: bool
        """

        self._is_read = is_read

    @property
    def labels(self):
        """Gets the labels of this GetCharactersCharacterIdMail200Ok.

        labels array

        :return: The labels of this GetCharactersCharacterIdMail200Ok.
        :rtype: list[int]
        """
        return self._labels

    @labels.setter
    def labels(self, labels):
        """Sets the labels of this GetCharactersCharacterIdMail200Ok.

        labels array

        :param labels: The labels of this GetCharactersCharacterIdMail200Ok.
        :type labels: list[int]
        """
        if labels is not None and len(labels) > 25:
            raise ValueError("Invalid value for `labels`, number of items must be less than or equal to `25`")

        self._labels = labels

    @property
    def mail_id(self):
        """Gets the mail_id of this GetCharactersCharacterIdMail200Ok.

        mail_id integer

        :return: The mail_id of this GetCharactersCharacterIdMail200Ok.
        :rtype: int
        """
        return self._mail_id

    @mail_id.setter
    def mail_id(self, mail_id):
        """Sets the mail_id of this GetCharactersCharacterIdMail200Ok.

        mail_id integer

        :param mail_id: The mail_id of this GetCharactersCharacterIdMail200Ok.
        :type mail_id: int
        """

        self._mail_id = mail_id

    @property
    def recipients(self):
        """Gets the recipients of this GetCharactersCharacterIdMail200Ok.

        Recipients of the mail

        :return: The recipients of this GetCharactersCharacterIdMail200Ok.
        :rtype: list[GetCharactersCharacterIdMailRecipient]
        """
        return self._recipients

    @recipients.setter
    def recipients(self, recipients):
        """Sets the recipients of this GetCharactersCharacterIdMail200Ok.

        Recipients of the mail

        :param recipients: The recipients of this GetCharactersCharacterIdMail200Ok.
        :type recipients: list[GetCharactersCharacterIdMailRecipient]
        """
        if recipients is not None and len(recipients) > 52:
            raise ValueError("Invalid value for `recipients`, number of items must be less than or equal to `52`")
        if recipients is not None and len(recipients) < 1:
            raise ValueError("Invalid value for `recipients`, number of items must be greater than or equal to `1`")

        self._recipients = recipients

    @property
    def subject(self):
        """Gets the subject of this GetCharactersCharacterIdMail200Ok.

        Mail subject

        :return: The subject of this GetCharactersCharacterIdMail200Ok.
        :rtype: str
        """
        return self._subject

    @subject.setter
    def subject(self, subject):
        """Sets the subject of this GetCharactersCharacterIdMail200Ok.

        Mail subject

        :param subject: The subject of this GetCharactersCharacterIdMail200Ok.
        :type subject: str
        """

        self._subject = subject

    @property
    def timestamp(self):
        """Gets the timestamp of this GetCharactersCharacterIdMail200Ok.

        When the mail was sent

        :return: The timestamp of this GetCharactersCharacterIdMail200Ok.
        :rtype: datetime
        """
        return self._timestamp

    @timestamp.setter
    def timestamp(self, timestamp):
        """Sets the timestamp of this GetCharactersCharacterIdMail200Ok.

        When the mail was sent

        :param timestamp: The timestamp of this GetCharactersCharacterIdMail200Ok.
        :type timestamp: datetime
        """

        self._timestamp = timestamp
