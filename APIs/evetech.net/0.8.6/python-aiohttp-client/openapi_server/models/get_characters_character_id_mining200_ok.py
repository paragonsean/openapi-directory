# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class GetCharactersCharacterIdMining200Ok(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, _date: date=None, quantity: int=None, solar_system_id: int=None, type_id: int=None):
        """GetCharactersCharacterIdMining200Ok - a model defined in OpenAPI

        :param _date: The _date of this GetCharactersCharacterIdMining200Ok.
        :param quantity: The quantity of this GetCharactersCharacterIdMining200Ok.
        :param solar_system_id: The solar_system_id of this GetCharactersCharacterIdMining200Ok.
        :param type_id: The type_id of this GetCharactersCharacterIdMining200Ok.
        """
        self.openapi_types = {
            '_date': date,
            'quantity': int,
            'solar_system_id': int,
            'type_id': int
        }

        self.attribute_map = {
            '_date': 'date',
            'quantity': 'quantity',
            'solar_system_id': 'solar_system_id',
            'type_id': 'type_id'
        }

        self.__date = _date
        self._quantity = quantity
        self._solar_system_id = solar_system_id
        self._type_id = type_id

    @classmethod
    def from_dict(cls, dikt: dict) -> 'GetCharactersCharacterIdMining200Ok':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The get_characters_character_id_mining_200_ok of this GetCharactersCharacterIdMining200Ok.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def _date(self):
        """Gets the _date of this GetCharactersCharacterIdMining200Ok.

        date string

        :return: The _date of this GetCharactersCharacterIdMining200Ok.
        :rtype: date
        """
        return self.__date

    @_date.setter
    def _date(self, _date):
        """Sets the _date of this GetCharactersCharacterIdMining200Ok.

        date string

        :param _date: The _date of this GetCharactersCharacterIdMining200Ok.
        :type _date: date
        """
        if _date is None:
            raise ValueError("Invalid value for `_date`, must not be `None`")

        self.__date = _date

    @property
    def quantity(self):
        """Gets the quantity of this GetCharactersCharacterIdMining200Ok.

        quantity integer

        :return: The quantity of this GetCharactersCharacterIdMining200Ok.
        :rtype: int
        """
        return self._quantity

    @quantity.setter
    def quantity(self, quantity):
        """Sets the quantity of this GetCharactersCharacterIdMining200Ok.

        quantity integer

        :param quantity: The quantity of this GetCharactersCharacterIdMining200Ok.
        :type quantity: int
        """
        if quantity is None:
            raise ValueError("Invalid value for `quantity`, must not be `None`")

        self._quantity = quantity

    @property
    def solar_system_id(self):
        """Gets the solar_system_id of this GetCharactersCharacterIdMining200Ok.

        solar_system_id integer

        :return: The solar_system_id of this GetCharactersCharacterIdMining200Ok.
        :rtype: int
        """
        return self._solar_system_id

    @solar_system_id.setter
    def solar_system_id(self, solar_system_id):
        """Sets the solar_system_id of this GetCharactersCharacterIdMining200Ok.

        solar_system_id integer

        :param solar_system_id: The solar_system_id of this GetCharactersCharacterIdMining200Ok.
        :type solar_system_id: int
        """
        if solar_system_id is None:
            raise ValueError("Invalid value for `solar_system_id`, must not be `None`")

        self._solar_system_id = solar_system_id

    @property
    def type_id(self):
        """Gets the type_id of this GetCharactersCharacterIdMining200Ok.

        type_id integer

        :return: The type_id of this GetCharactersCharacterIdMining200Ok.
        :rtype: int
        """
        return self._type_id

    @type_id.setter
    def type_id(self, type_id):
        """Sets the type_id of this GetCharactersCharacterIdMining200Ok.

        type_id integer

        :param type_id: The type_id of this GetCharactersCharacterIdMining200Ok.
        :type type_id: int
        """
        if type_id is None:
            raise ValueError("Invalid value for `type_id`, must not be `None`")

        self._type_id = type_id
