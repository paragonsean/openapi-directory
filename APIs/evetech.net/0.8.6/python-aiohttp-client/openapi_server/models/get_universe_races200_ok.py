# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class GetUniverseRaces200Ok(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, alliance_id: int=None, description: str=None, name: str=None, race_id: int=None):
        """GetUniverseRaces200Ok - a model defined in OpenAPI

        :param alliance_id: The alliance_id of this GetUniverseRaces200Ok.
        :param description: The description of this GetUniverseRaces200Ok.
        :param name: The name of this GetUniverseRaces200Ok.
        :param race_id: The race_id of this GetUniverseRaces200Ok.
        """
        self.openapi_types = {
            'alliance_id': int,
            'description': str,
            'name': str,
            'race_id': int
        }

        self.attribute_map = {
            'alliance_id': 'alliance_id',
            'description': 'description',
            'name': 'name',
            'race_id': 'race_id'
        }

        self._alliance_id = alliance_id
        self._description = description
        self._name = name
        self._race_id = race_id

    @classmethod
    def from_dict(cls, dikt: dict) -> 'GetUniverseRaces200Ok':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The get_universe_races_200_ok of this GetUniverseRaces200Ok.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def alliance_id(self):
        """Gets the alliance_id of this GetUniverseRaces200Ok.

        The alliance generally associated with this race

        :return: The alliance_id of this GetUniverseRaces200Ok.
        :rtype: int
        """
        return self._alliance_id

    @alliance_id.setter
    def alliance_id(self, alliance_id):
        """Sets the alliance_id of this GetUniverseRaces200Ok.

        The alliance generally associated with this race

        :param alliance_id: The alliance_id of this GetUniverseRaces200Ok.
        :type alliance_id: int
        """
        if alliance_id is None:
            raise ValueError("Invalid value for `alliance_id`, must not be `None`")

        self._alliance_id = alliance_id

    @property
    def description(self):
        """Gets the description of this GetUniverseRaces200Ok.

        description string

        :return: The description of this GetUniverseRaces200Ok.
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this GetUniverseRaces200Ok.

        description string

        :param description: The description of this GetUniverseRaces200Ok.
        :type description: str
        """
        if description is None:
            raise ValueError("Invalid value for `description`, must not be `None`")

        self._description = description

    @property
    def name(self):
        """Gets the name of this GetUniverseRaces200Ok.

        name string

        :return: The name of this GetUniverseRaces200Ok.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this GetUniverseRaces200Ok.

        name string

        :param name: The name of this GetUniverseRaces200Ok.
        :type name: str
        """
        if name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")

        self._name = name

    @property
    def race_id(self):
        """Gets the race_id of this GetUniverseRaces200Ok.

        race_id integer

        :return: The race_id of this GetUniverseRaces200Ok.
        :rtype: int
        """
        return self._race_id

    @race_id.setter
    def race_id(self, race_id):
        """Sets the race_id of this GetUniverseRaces200Ok.

        race_id integer

        :param race_id: The race_id of this GetUniverseRaces200Ok.
        :type race_id: int
        """
        if race_id is None:
            raise ValueError("Invalid value for `race_id`, must not be `None`")

        self._race_id = race_id
