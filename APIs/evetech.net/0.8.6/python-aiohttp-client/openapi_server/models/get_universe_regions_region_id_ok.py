# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class GetUniverseRegionsRegionIdOk(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, constellations: List[int]=None, description: str=None, name: str=None, region_id: int=None):
        """GetUniverseRegionsRegionIdOk - a model defined in OpenAPI

        :param constellations: The constellations of this GetUniverseRegionsRegionIdOk.
        :param description: The description of this GetUniverseRegionsRegionIdOk.
        :param name: The name of this GetUniverseRegionsRegionIdOk.
        :param region_id: The region_id of this GetUniverseRegionsRegionIdOk.
        """
        self.openapi_types = {
            'constellations': List[int],
            'description': str,
            'name': str,
            'region_id': int
        }

        self.attribute_map = {
            'constellations': 'constellations',
            'description': 'description',
            'name': 'name',
            'region_id': 'region_id'
        }

        self._constellations = constellations
        self._description = description
        self._name = name
        self._region_id = region_id

    @classmethod
    def from_dict(cls, dikt: dict) -> 'GetUniverseRegionsRegionIdOk':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The get_universe_regions_region_id_ok of this GetUniverseRegionsRegionIdOk.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def constellations(self):
        """Gets the constellations of this GetUniverseRegionsRegionIdOk.

        constellations array

        :return: The constellations of this GetUniverseRegionsRegionIdOk.
        :rtype: List[int]
        """
        return self._constellations

    @constellations.setter
    def constellations(self, constellations):
        """Sets the constellations of this GetUniverseRegionsRegionIdOk.

        constellations array

        :param constellations: The constellations of this GetUniverseRegionsRegionIdOk.
        :type constellations: List[int]
        """
        if constellations is None:
            raise ValueError("Invalid value for `constellations`, must not be `None`")
        if constellations is not None and len(constellations) > 1000:
            raise ValueError("Invalid value for `constellations`, number of items must be less than or equal to `1000`")

        self._constellations = constellations

    @property
    def description(self):
        """Gets the description of this GetUniverseRegionsRegionIdOk.

        description string

        :return: The description of this GetUniverseRegionsRegionIdOk.
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this GetUniverseRegionsRegionIdOk.

        description string

        :param description: The description of this GetUniverseRegionsRegionIdOk.
        :type description: str
        """

        self._description = description

    @property
    def name(self):
        """Gets the name of this GetUniverseRegionsRegionIdOk.

        name string

        :return: The name of this GetUniverseRegionsRegionIdOk.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this GetUniverseRegionsRegionIdOk.

        name string

        :param name: The name of this GetUniverseRegionsRegionIdOk.
        :type name: str
        """
        if name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")

        self._name = name

    @property
    def region_id(self):
        """Gets the region_id of this GetUniverseRegionsRegionIdOk.

        region_id integer

        :return: The region_id of this GetUniverseRegionsRegionIdOk.
        :rtype: int
        """
        return self._region_id

    @region_id.setter
    def region_id(self, region_id):
        """Sets the region_id of this GetUniverseRegionsRegionIdOk.

        region_id integer

        :param region_id: The region_id of this GetUniverseRegionsRegionIdOk.
        :type region_id: int
        """
        if region_id is None:
            raise ValueError("Invalid value for `region_id`, must not be `None`")

        self._region_id = region_id
