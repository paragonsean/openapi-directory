# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class GetCorporationsCorporationIdDivisionsHangarHangar(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, division: int=None, name: str=None):
        """GetCorporationsCorporationIdDivisionsHangarHangar - a model defined in OpenAPI

        :param division: The division of this GetCorporationsCorporationIdDivisionsHangarHangar.
        :param name: The name of this GetCorporationsCorporationIdDivisionsHangarHangar.
        """
        self.openapi_types = {
            'division': int,
            'name': str
        }

        self.attribute_map = {
            'division': 'division',
            'name': 'name'
        }

        self._division = division
        self._name = name

    @classmethod
    def from_dict(cls, dikt: dict) -> 'GetCorporationsCorporationIdDivisionsHangarHangar':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The get_corporations_corporation_id_divisions_hangar_hangar of this GetCorporationsCorporationIdDivisionsHangarHangar.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def division(self):
        """Gets the division of this GetCorporationsCorporationIdDivisionsHangarHangar.

        division integer

        :return: The division of this GetCorporationsCorporationIdDivisionsHangarHangar.
        :rtype: int
        """
        return self._division

    @division.setter
    def division(self, division):
        """Sets the division of this GetCorporationsCorporationIdDivisionsHangarHangar.

        division integer

        :param division: The division of this GetCorporationsCorporationIdDivisionsHangarHangar.
        :type division: int
        """
        if division is not None and division > 7:
            raise ValueError("Invalid value for `division`, must be a value less than or equal to `7`")
        if division is not None and division < 1:
            raise ValueError("Invalid value for `division`, must be a value greater than or equal to `1`")

        self._division = division

    @property
    def name(self):
        """Gets the name of this GetCorporationsCorporationIdDivisionsHangarHangar.

        name string

        :return: The name of this GetCorporationsCorporationIdDivisionsHangarHangar.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this GetCorporationsCorporationIdDivisionsHangarHangar.

        name string

        :param name: The name of this GetCorporationsCorporationIdDivisionsHangarHangar.
        :type name: str
        """
        if name is not None and len(name) > 50:
            raise ValueError("Invalid value for `name`, length must be less than or equal to `50`")

        self._name = name
