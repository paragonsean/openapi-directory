# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class PostFleetsFleetIdWingsCreated(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, wing_id: int=None):
        """PostFleetsFleetIdWingsCreated - a model defined in OpenAPI

        :param wing_id: The wing_id of this PostFleetsFleetIdWingsCreated.
        """
        self.openapi_types = {
            'wing_id': int
        }

        self.attribute_map = {
            'wing_id': 'wing_id'
        }

        self._wing_id = wing_id

    @classmethod
    def from_dict(cls, dikt: dict) -> 'PostFleetsFleetIdWingsCreated':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The post_fleets_fleet_id_wings_created of this PostFleetsFleetIdWingsCreated.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def wing_id(self):
        """Gets the wing_id of this PostFleetsFleetIdWingsCreated.

        The wing_id of the newly created wing

        :return: The wing_id of this PostFleetsFleetIdWingsCreated.
        :rtype: int
        """
        return self._wing_id

    @wing_id.setter
    def wing_id(self, wing_id):
        """Sets the wing_id of this PostFleetsFleetIdWingsCreated.

        The wing_id of the newly created wing

        :param wing_id: The wing_id of this PostFleetsFleetIdWingsCreated.
        :type wing_id: int
        """
        if wing_id is None:
            raise ValueError("Invalid value for `wing_id`, must not be `None`")

        self._wing_id = wing_id
