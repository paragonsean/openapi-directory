# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class GetUniverseBloodlines200Ok(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, bloodline_id: int=None, charisma: int=None, corporation_id: int=None, description: str=None, intelligence: int=None, memory: int=None, name: str=None, perception: int=None, race_id: int=None, ship_type_id: int=None, willpower: int=None):
        """GetUniverseBloodlines200Ok - a model defined in OpenAPI

        :param bloodline_id: The bloodline_id of this GetUniverseBloodlines200Ok.
        :param charisma: The charisma of this GetUniverseBloodlines200Ok.
        :param corporation_id: The corporation_id of this GetUniverseBloodlines200Ok.
        :param description: The description of this GetUniverseBloodlines200Ok.
        :param intelligence: The intelligence of this GetUniverseBloodlines200Ok.
        :param memory: The memory of this GetUniverseBloodlines200Ok.
        :param name: The name of this GetUniverseBloodlines200Ok.
        :param perception: The perception of this GetUniverseBloodlines200Ok.
        :param race_id: The race_id of this GetUniverseBloodlines200Ok.
        :param ship_type_id: The ship_type_id of this GetUniverseBloodlines200Ok.
        :param willpower: The willpower of this GetUniverseBloodlines200Ok.
        """
        self.openapi_types = {
            'bloodline_id': int,
            'charisma': int,
            'corporation_id': int,
            'description': str,
            'intelligence': int,
            'memory': int,
            'name': str,
            'perception': int,
            'race_id': int,
            'ship_type_id': int,
            'willpower': int
        }

        self.attribute_map = {
            'bloodline_id': 'bloodline_id',
            'charisma': 'charisma',
            'corporation_id': 'corporation_id',
            'description': 'description',
            'intelligence': 'intelligence',
            'memory': 'memory',
            'name': 'name',
            'perception': 'perception',
            'race_id': 'race_id',
            'ship_type_id': 'ship_type_id',
            'willpower': 'willpower'
        }

        self._bloodline_id = bloodline_id
        self._charisma = charisma
        self._corporation_id = corporation_id
        self._description = description
        self._intelligence = intelligence
        self._memory = memory
        self._name = name
        self._perception = perception
        self._race_id = race_id
        self._ship_type_id = ship_type_id
        self._willpower = willpower

    @classmethod
    def from_dict(cls, dikt: dict) -> 'GetUniverseBloodlines200Ok':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The get_universe_bloodlines_200_ok of this GetUniverseBloodlines200Ok.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def bloodline_id(self):
        """Gets the bloodline_id of this GetUniverseBloodlines200Ok.

        bloodline_id integer

        :return: The bloodline_id of this GetUniverseBloodlines200Ok.
        :rtype: int
        """
        return self._bloodline_id

    @bloodline_id.setter
    def bloodline_id(self, bloodline_id):
        """Sets the bloodline_id of this GetUniverseBloodlines200Ok.

        bloodline_id integer

        :param bloodline_id: The bloodline_id of this GetUniverseBloodlines200Ok.
        :type bloodline_id: int
        """
        if bloodline_id is None:
            raise ValueError("Invalid value for `bloodline_id`, must not be `None`")

        self._bloodline_id = bloodline_id

    @property
    def charisma(self):
        """Gets the charisma of this GetUniverseBloodlines200Ok.

        charisma integer

        :return: The charisma of this GetUniverseBloodlines200Ok.
        :rtype: int
        """
        return self._charisma

    @charisma.setter
    def charisma(self, charisma):
        """Sets the charisma of this GetUniverseBloodlines200Ok.

        charisma integer

        :param charisma: The charisma of this GetUniverseBloodlines200Ok.
        :type charisma: int
        """
        if charisma is None:
            raise ValueError("Invalid value for `charisma`, must not be `None`")

        self._charisma = charisma

    @property
    def corporation_id(self):
        """Gets the corporation_id of this GetUniverseBloodlines200Ok.

        corporation_id integer

        :return: The corporation_id of this GetUniverseBloodlines200Ok.
        :rtype: int
        """
        return self._corporation_id

    @corporation_id.setter
    def corporation_id(self, corporation_id):
        """Sets the corporation_id of this GetUniverseBloodlines200Ok.

        corporation_id integer

        :param corporation_id: The corporation_id of this GetUniverseBloodlines200Ok.
        :type corporation_id: int
        """
        if corporation_id is None:
            raise ValueError("Invalid value for `corporation_id`, must not be `None`")

        self._corporation_id = corporation_id

    @property
    def description(self):
        """Gets the description of this GetUniverseBloodlines200Ok.

        description string

        :return: The description of this GetUniverseBloodlines200Ok.
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this GetUniverseBloodlines200Ok.

        description string

        :param description: The description of this GetUniverseBloodlines200Ok.
        :type description: str
        """
        if description is None:
            raise ValueError("Invalid value for `description`, must not be `None`")

        self._description = description

    @property
    def intelligence(self):
        """Gets the intelligence of this GetUniverseBloodlines200Ok.

        intelligence integer

        :return: The intelligence of this GetUniverseBloodlines200Ok.
        :rtype: int
        """
        return self._intelligence

    @intelligence.setter
    def intelligence(self, intelligence):
        """Sets the intelligence of this GetUniverseBloodlines200Ok.

        intelligence integer

        :param intelligence: The intelligence of this GetUniverseBloodlines200Ok.
        :type intelligence: int
        """
        if intelligence is None:
            raise ValueError("Invalid value for `intelligence`, must not be `None`")

        self._intelligence = intelligence

    @property
    def memory(self):
        """Gets the memory of this GetUniverseBloodlines200Ok.

        memory integer

        :return: The memory of this GetUniverseBloodlines200Ok.
        :rtype: int
        """
        return self._memory

    @memory.setter
    def memory(self, memory):
        """Sets the memory of this GetUniverseBloodlines200Ok.

        memory integer

        :param memory: The memory of this GetUniverseBloodlines200Ok.
        :type memory: int
        """
        if memory is None:
            raise ValueError("Invalid value for `memory`, must not be `None`")

        self._memory = memory

    @property
    def name(self):
        """Gets the name of this GetUniverseBloodlines200Ok.

        name string

        :return: The name of this GetUniverseBloodlines200Ok.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this GetUniverseBloodlines200Ok.

        name string

        :param name: The name of this GetUniverseBloodlines200Ok.
        :type name: str
        """
        if name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")

        self._name = name

    @property
    def perception(self):
        """Gets the perception of this GetUniverseBloodlines200Ok.

        perception integer

        :return: The perception of this GetUniverseBloodlines200Ok.
        :rtype: int
        """
        return self._perception

    @perception.setter
    def perception(self, perception):
        """Sets the perception of this GetUniverseBloodlines200Ok.

        perception integer

        :param perception: The perception of this GetUniverseBloodlines200Ok.
        :type perception: int
        """
        if perception is None:
            raise ValueError("Invalid value for `perception`, must not be `None`")

        self._perception = perception

    @property
    def race_id(self):
        """Gets the race_id of this GetUniverseBloodlines200Ok.

        race_id integer

        :return: The race_id of this GetUniverseBloodlines200Ok.
        :rtype: int
        """
        return self._race_id

    @race_id.setter
    def race_id(self, race_id):
        """Sets the race_id of this GetUniverseBloodlines200Ok.

        race_id integer

        :param race_id: The race_id of this GetUniverseBloodlines200Ok.
        :type race_id: int
        """
        if race_id is None:
            raise ValueError("Invalid value for `race_id`, must not be `None`")

        self._race_id = race_id

    @property
    def ship_type_id(self):
        """Gets the ship_type_id of this GetUniverseBloodlines200Ok.

        ship_type_id integer

        :return: The ship_type_id of this GetUniverseBloodlines200Ok.
        :rtype: int
        """
        return self._ship_type_id

    @ship_type_id.setter
    def ship_type_id(self, ship_type_id):
        """Sets the ship_type_id of this GetUniverseBloodlines200Ok.

        ship_type_id integer

        :param ship_type_id: The ship_type_id of this GetUniverseBloodlines200Ok.
        :type ship_type_id: int
        """
        if ship_type_id is None:
            raise ValueError("Invalid value for `ship_type_id`, must not be `None`")

        self._ship_type_id = ship_type_id

    @property
    def willpower(self):
        """Gets the willpower of this GetUniverseBloodlines200Ok.

        willpower integer

        :return: The willpower of this GetUniverseBloodlines200Ok.
        :rtype: int
        """
        return self._willpower

    @willpower.setter
    def willpower(self, willpower):
        """Sets the willpower of this GetUniverseBloodlines200Ok.

        willpower integer

        :param willpower: The willpower of this GetUniverseBloodlines200Ok.
        :type willpower: int
        """
        if willpower is None:
            raise ValueError("Invalid value for `willpower`, must not be `None`")

        self._willpower = willpower
