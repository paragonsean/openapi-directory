# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class PutCharactersCharacterIdMailMailIdContents(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, labels: List[int]=None, read: bool=None):
        """PutCharactersCharacterIdMailMailIdContents - a model defined in OpenAPI

        :param labels: The labels of this PutCharactersCharacterIdMailMailIdContents.
        :param read: The read of this PutCharactersCharacterIdMailMailIdContents.
        """
        self.openapi_types = {
            'labels': List[int],
            'read': bool
        }

        self.attribute_map = {
            'labels': 'labels',
            'read': 'read'
        }

        self._labels = labels
        self._read = read

    @classmethod
    def from_dict(cls, dikt: dict) -> 'PutCharactersCharacterIdMailMailIdContents':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The put_characters_character_id_mail_mail_id_contents of this PutCharactersCharacterIdMailMailIdContents.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def labels(self):
        """Gets the labels of this PutCharactersCharacterIdMailMailIdContents.

        Labels to assign to the mail. Pre-existing labels are unassigned.

        :return: The labels of this PutCharactersCharacterIdMailMailIdContents.
        :rtype: List[int]
        """
        return self._labels

    @labels.setter
    def labels(self, labels):
        """Sets the labels of this PutCharactersCharacterIdMailMailIdContents.

        Labels to assign to the mail. Pre-existing labels are unassigned.

        :param labels: The labels of this PutCharactersCharacterIdMailMailIdContents.
        :type labels: List[int]
        """
        if labels is not None and len(labels) > 25:
            raise ValueError("Invalid value for `labels`, number of items must be less than or equal to `25`")

        self._labels = labels

    @property
    def read(self):
        """Gets the read of this PutCharactersCharacterIdMailMailIdContents.

        Whether the mail is flagged as read

        :return: The read of this PutCharactersCharacterIdMailMailIdContents.
        :rtype: bool
        """
        return self._read

    @read.setter
    def read(self, read):
        """Sets the read of this PutCharactersCharacterIdMailMailIdContents.

        Whether the mail is flagged as read

        :param read: The read of this PutCharactersCharacterIdMailMailIdContents.
        :type read: bool
        """

        self._read = read
