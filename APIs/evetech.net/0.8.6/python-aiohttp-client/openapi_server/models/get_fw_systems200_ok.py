# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class GetFwSystems200Ok(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, contested: str=None, occupier_faction_id: int=None, owner_faction_id: int=None, solar_system_id: int=None, victory_points: int=None, victory_points_threshold: int=None):
        """GetFwSystems200Ok - a model defined in OpenAPI

        :param contested: The contested of this GetFwSystems200Ok.
        :param occupier_faction_id: The occupier_faction_id of this GetFwSystems200Ok.
        :param owner_faction_id: The owner_faction_id of this GetFwSystems200Ok.
        :param solar_system_id: The solar_system_id of this GetFwSystems200Ok.
        :param victory_points: The victory_points of this GetFwSystems200Ok.
        :param victory_points_threshold: The victory_points_threshold of this GetFwSystems200Ok.
        """
        self.openapi_types = {
            'contested': str,
            'occupier_faction_id': int,
            'owner_faction_id': int,
            'solar_system_id': int,
            'victory_points': int,
            'victory_points_threshold': int
        }

        self.attribute_map = {
            'contested': 'contested',
            'occupier_faction_id': 'occupier_faction_id',
            'owner_faction_id': 'owner_faction_id',
            'solar_system_id': 'solar_system_id',
            'victory_points': 'victory_points',
            'victory_points_threshold': 'victory_points_threshold'
        }

        self._contested = contested
        self._occupier_faction_id = occupier_faction_id
        self._owner_faction_id = owner_faction_id
        self._solar_system_id = solar_system_id
        self._victory_points = victory_points
        self._victory_points_threshold = victory_points_threshold

    @classmethod
    def from_dict(cls, dikt: dict) -> 'GetFwSystems200Ok':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The get_fw_systems_200_ok of this GetFwSystems200Ok.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def contested(self):
        """Gets the contested of this GetFwSystems200Ok.

        contested string

        :return: The contested of this GetFwSystems200Ok.
        :rtype: str
        """
        return self._contested

    @contested.setter
    def contested(self, contested):
        """Sets the contested of this GetFwSystems200Ok.

        contested string

        :param contested: The contested of this GetFwSystems200Ok.
        :type contested: str
        """
        allowed_values = ["captured", "contested", "uncontested", "vulnerable"]  # noqa: E501
        if contested not in allowed_values:
            raise ValueError(
                "Invalid value for `contested` ({0}), must be one of {1}"
                .format(contested, allowed_values)
            )

        self._contested = contested

    @property
    def occupier_faction_id(self):
        """Gets the occupier_faction_id of this GetFwSystems200Ok.

        occupier_faction_id integer

        :return: The occupier_faction_id of this GetFwSystems200Ok.
        :rtype: int
        """
        return self._occupier_faction_id

    @occupier_faction_id.setter
    def occupier_faction_id(self, occupier_faction_id):
        """Sets the occupier_faction_id of this GetFwSystems200Ok.

        occupier_faction_id integer

        :param occupier_faction_id: The occupier_faction_id of this GetFwSystems200Ok.
        :type occupier_faction_id: int
        """
        if occupier_faction_id is None:
            raise ValueError("Invalid value for `occupier_faction_id`, must not be `None`")

        self._occupier_faction_id = occupier_faction_id

    @property
    def owner_faction_id(self):
        """Gets the owner_faction_id of this GetFwSystems200Ok.

        owner_faction_id integer

        :return: The owner_faction_id of this GetFwSystems200Ok.
        :rtype: int
        """
        return self._owner_faction_id

    @owner_faction_id.setter
    def owner_faction_id(self, owner_faction_id):
        """Sets the owner_faction_id of this GetFwSystems200Ok.

        owner_faction_id integer

        :param owner_faction_id: The owner_faction_id of this GetFwSystems200Ok.
        :type owner_faction_id: int
        """
        if owner_faction_id is None:
            raise ValueError("Invalid value for `owner_faction_id`, must not be `None`")

        self._owner_faction_id = owner_faction_id

    @property
    def solar_system_id(self):
        """Gets the solar_system_id of this GetFwSystems200Ok.

        solar_system_id integer

        :return: The solar_system_id of this GetFwSystems200Ok.
        :rtype: int
        """
        return self._solar_system_id

    @solar_system_id.setter
    def solar_system_id(self, solar_system_id):
        """Sets the solar_system_id of this GetFwSystems200Ok.

        solar_system_id integer

        :param solar_system_id: The solar_system_id of this GetFwSystems200Ok.
        :type solar_system_id: int
        """
        if solar_system_id is None:
            raise ValueError("Invalid value for `solar_system_id`, must not be `None`")

        self._solar_system_id = solar_system_id

    @property
    def victory_points(self):
        """Gets the victory_points of this GetFwSystems200Ok.

        victory_points integer

        :return: The victory_points of this GetFwSystems200Ok.
        :rtype: int
        """
        return self._victory_points

    @victory_points.setter
    def victory_points(self, victory_points):
        """Sets the victory_points of this GetFwSystems200Ok.

        victory_points integer

        :param victory_points: The victory_points of this GetFwSystems200Ok.
        :type victory_points: int
        """
        if victory_points is None:
            raise ValueError("Invalid value for `victory_points`, must not be `None`")

        self._victory_points = victory_points

    @property
    def victory_points_threshold(self):
        """Gets the victory_points_threshold of this GetFwSystems200Ok.

        victory_points_threshold integer

        :return: The victory_points_threshold of this GetFwSystems200Ok.
        :rtype: int
        """
        return self._victory_points_threshold

    @victory_points_threshold.setter
    def victory_points_threshold(self, victory_points_threshold):
        """Sets the victory_points_threshold of this GetFwSystems200Ok.

        victory_points_threshold integer

        :param victory_points_threshold: The victory_points_threshold of this GetFwSystems200Ok.
        :type victory_points_threshold: int
        """
        if victory_points_threshold is None:
            raise ValueError("Invalid value for `victory_points_threshold`, must not be `None`")

        self._victory_points_threshold = victory_points_threshold
