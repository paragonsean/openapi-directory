# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class GetUniverseStarsStarIdOk(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, age: int=None, luminosity: float=None, name: str=None, radius: int=None, solar_system_id: int=None, spectral_class: str=None, temperature: int=None, type_id: int=None):
        """GetUniverseStarsStarIdOk - a model defined in OpenAPI

        :param age: The age of this GetUniverseStarsStarIdOk.
        :param luminosity: The luminosity of this GetUniverseStarsStarIdOk.
        :param name: The name of this GetUniverseStarsStarIdOk.
        :param radius: The radius of this GetUniverseStarsStarIdOk.
        :param solar_system_id: The solar_system_id of this GetUniverseStarsStarIdOk.
        :param spectral_class: The spectral_class of this GetUniverseStarsStarIdOk.
        :param temperature: The temperature of this GetUniverseStarsStarIdOk.
        :param type_id: The type_id of this GetUniverseStarsStarIdOk.
        """
        self.openapi_types = {
            'age': int,
            'luminosity': float,
            'name': str,
            'radius': int,
            'solar_system_id': int,
            'spectral_class': str,
            'temperature': int,
            'type_id': int
        }

        self.attribute_map = {
            'age': 'age',
            'luminosity': 'luminosity',
            'name': 'name',
            'radius': 'radius',
            'solar_system_id': 'solar_system_id',
            'spectral_class': 'spectral_class',
            'temperature': 'temperature',
            'type_id': 'type_id'
        }

        self._age = age
        self._luminosity = luminosity
        self._name = name
        self._radius = radius
        self._solar_system_id = solar_system_id
        self._spectral_class = spectral_class
        self._temperature = temperature
        self._type_id = type_id

    @classmethod
    def from_dict(cls, dikt: dict) -> 'GetUniverseStarsStarIdOk':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The get_universe_stars_star_id_ok of this GetUniverseStarsStarIdOk.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def age(self):
        """Gets the age of this GetUniverseStarsStarIdOk.

        Age of star in years

        :return: The age of this GetUniverseStarsStarIdOk.
        :rtype: int
        """
        return self._age

    @age.setter
    def age(self, age):
        """Sets the age of this GetUniverseStarsStarIdOk.

        Age of star in years

        :param age: The age of this GetUniverseStarsStarIdOk.
        :type age: int
        """
        if age is None:
            raise ValueError("Invalid value for `age`, must not be `None`")

        self._age = age

    @property
    def luminosity(self):
        """Gets the luminosity of this GetUniverseStarsStarIdOk.

        luminosity number

        :return: The luminosity of this GetUniverseStarsStarIdOk.
        :rtype: float
        """
        return self._luminosity

    @luminosity.setter
    def luminosity(self, luminosity):
        """Sets the luminosity of this GetUniverseStarsStarIdOk.

        luminosity number

        :param luminosity: The luminosity of this GetUniverseStarsStarIdOk.
        :type luminosity: float
        """
        if luminosity is None:
            raise ValueError("Invalid value for `luminosity`, must not be `None`")

        self._luminosity = luminosity

    @property
    def name(self):
        """Gets the name of this GetUniverseStarsStarIdOk.

        name string

        :return: The name of this GetUniverseStarsStarIdOk.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this GetUniverseStarsStarIdOk.

        name string

        :param name: The name of this GetUniverseStarsStarIdOk.
        :type name: str
        """
        if name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")

        self._name = name

    @property
    def radius(self):
        """Gets the radius of this GetUniverseStarsStarIdOk.

        radius integer

        :return: The radius of this GetUniverseStarsStarIdOk.
        :rtype: int
        """
        return self._radius

    @radius.setter
    def radius(self, radius):
        """Sets the radius of this GetUniverseStarsStarIdOk.

        radius integer

        :param radius: The radius of this GetUniverseStarsStarIdOk.
        :type radius: int
        """
        if radius is None:
            raise ValueError("Invalid value for `radius`, must not be `None`")

        self._radius = radius

    @property
    def solar_system_id(self):
        """Gets the solar_system_id of this GetUniverseStarsStarIdOk.

        solar_system_id integer

        :return: The solar_system_id of this GetUniverseStarsStarIdOk.
        :rtype: int
        """
        return self._solar_system_id

    @solar_system_id.setter
    def solar_system_id(self, solar_system_id):
        """Sets the solar_system_id of this GetUniverseStarsStarIdOk.

        solar_system_id integer

        :param solar_system_id: The solar_system_id of this GetUniverseStarsStarIdOk.
        :type solar_system_id: int
        """
        if solar_system_id is None:
            raise ValueError("Invalid value for `solar_system_id`, must not be `None`")

        self._solar_system_id = solar_system_id

    @property
    def spectral_class(self):
        """Gets the spectral_class of this GetUniverseStarsStarIdOk.

        spectral_class string

        :return: The spectral_class of this GetUniverseStarsStarIdOk.
        :rtype: str
        """
        return self._spectral_class

    @spectral_class.setter
    def spectral_class(self, spectral_class):
        """Sets the spectral_class of this GetUniverseStarsStarIdOk.

        spectral_class string

        :param spectral_class: The spectral_class of this GetUniverseStarsStarIdOk.
        :type spectral_class: str
        """
        allowed_values = ["K2 V", "K4 V", "G2 V", "G8 V", "M7 V", "K7 V", "M2 V", "K5 V", "M3 V", "G0 V", "G7 V", "G3 V", "F9 V", "G5 V", "F6 V", "K8 V", "K9 V", "K6 V", "G9 V", "G6 V", "G4 VI", "G4 V", "F8 V", "F2 V", "F1 V", "K3 V", "F0 VI", "G1 VI", "G0 VI", "K1 V", "M4 V", "M1 V", "M6 V", "M0 V", "K2 IV", "G2 VI", "K0 V", "K5 IV", "F5 VI", "G6 VI", "F6 VI", "F2 IV", "G3 VI", "M8 V", "F1 VI", "K1 IV", "F7 V", "G5 VI", "M5 V", "G7 VI", "F5 V", "F4 VI", "F8 VI", "K3 IV", "F4 IV", "F0 V", "G7 IV", "G8 VI", "F2 VI", "F4 V", "F7 VI", "F3 V", "G1 V", "G9 VI", "F3 IV", "F9 VI", "M9 V", "K0 IV", "F1 IV", "G4 IV", "F3 VI", "K4 IV", "G5 IV", "G3 IV", "G1 IV", "K7 IV", "G0 IV", "K6 IV", "K9 IV", "G2 IV", "F9 IV", "F0 IV", "K8 IV", "G8 IV", "F6 IV", "F5 IV", "A0", "A0IV", "A0IV2"]  # noqa: E501
        if spectral_class not in allowed_values:
            raise ValueError(
                "Invalid value for `spectral_class` ({0}), must be one of {1}"
                .format(spectral_class, allowed_values)
            )

        self._spectral_class = spectral_class

    @property
    def temperature(self):
        """Gets the temperature of this GetUniverseStarsStarIdOk.

        temperature integer

        :return: The temperature of this GetUniverseStarsStarIdOk.
        :rtype: int
        """
        return self._temperature

    @temperature.setter
    def temperature(self, temperature):
        """Sets the temperature of this GetUniverseStarsStarIdOk.

        temperature integer

        :param temperature: The temperature of this GetUniverseStarsStarIdOk.
        :type temperature: int
        """
        if temperature is None:
            raise ValueError("Invalid value for `temperature`, must not be `None`")

        self._temperature = temperature

    @property
    def type_id(self):
        """Gets the type_id of this GetUniverseStarsStarIdOk.

        type_id integer

        :return: The type_id of this GetUniverseStarsStarIdOk.
        :rtype: int
        """
        return self._type_id

    @type_id.setter
    def type_id(self, type_id):
        """Sets the type_id of this GetUniverseStarsStarIdOk.

        type_id integer

        :param type_id: The type_id of this GetUniverseStarsStarIdOk.
        :type type_id: int
        """
        if type_id is None:
            raise ValueError("Invalid value for `type_id`, must not be `None`")

        self._type_id = type_id
