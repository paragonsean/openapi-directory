# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class GetCharactersCharacterIdClonesJumpClone(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, implants: List[int]=None, jump_clone_id: int=None, location_id: int=None, location_type: str=None, name: str=None):
        """GetCharactersCharacterIdClonesJumpClone - a model defined in OpenAPI

        :param implants: The implants of this GetCharactersCharacterIdClonesJumpClone.
        :param jump_clone_id: The jump_clone_id of this GetCharactersCharacterIdClonesJumpClone.
        :param location_id: The location_id of this GetCharactersCharacterIdClonesJumpClone.
        :param location_type: The location_type of this GetCharactersCharacterIdClonesJumpClone.
        :param name: The name of this GetCharactersCharacterIdClonesJumpClone.
        """
        self.openapi_types = {
            'implants': List[int],
            'jump_clone_id': int,
            'location_id': int,
            'location_type': str,
            'name': str
        }

        self.attribute_map = {
            'implants': 'implants',
            'jump_clone_id': 'jump_clone_id',
            'location_id': 'location_id',
            'location_type': 'location_type',
            'name': 'name'
        }

        self._implants = implants
        self._jump_clone_id = jump_clone_id
        self._location_id = location_id
        self._location_type = location_type
        self._name = name

    @classmethod
    def from_dict(cls, dikt: dict) -> 'GetCharactersCharacterIdClonesJumpClone':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The get_characters_character_id_clones_jump_clone of this GetCharactersCharacterIdClonesJumpClone.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def implants(self):
        """Gets the implants of this GetCharactersCharacterIdClonesJumpClone.

        implants array

        :return: The implants of this GetCharactersCharacterIdClonesJumpClone.
        :rtype: List[int]
        """
        return self._implants

    @implants.setter
    def implants(self, implants):
        """Sets the implants of this GetCharactersCharacterIdClonesJumpClone.

        implants array

        :param implants: The implants of this GetCharactersCharacterIdClonesJumpClone.
        :type implants: List[int]
        """
        if implants is None:
            raise ValueError("Invalid value for `implants`, must not be `None`")
        if implants is not None and len(implants) > 11:
            raise ValueError("Invalid value for `implants`, number of items must be less than or equal to `11`")

        self._implants = implants

    @property
    def jump_clone_id(self):
        """Gets the jump_clone_id of this GetCharactersCharacterIdClonesJumpClone.

        jump_clone_id integer

        :return: The jump_clone_id of this GetCharactersCharacterIdClonesJumpClone.
        :rtype: int
        """
        return self._jump_clone_id

    @jump_clone_id.setter
    def jump_clone_id(self, jump_clone_id):
        """Sets the jump_clone_id of this GetCharactersCharacterIdClonesJumpClone.

        jump_clone_id integer

        :param jump_clone_id: The jump_clone_id of this GetCharactersCharacterIdClonesJumpClone.
        :type jump_clone_id: int
        """
        if jump_clone_id is None:
            raise ValueError("Invalid value for `jump_clone_id`, must not be `None`")

        self._jump_clone_id = jump_clone_id

    @property
    def location_id(self):
        """Gets the location_id of this GetCharactersCharacterIdClonesJumpClone.

        location_id integer

        :return: The location_id of this GetCharactersCharacterIdClonesJumpClone.
        :rtype: int
        """
        return self._location_id

    @location_id.setter
    def location_id(self, location_id):
        """Sets the location_id of this GetCharactersCharacterIdClonesJumpClone.

        location_id integer

        :param location_id: The location_id of this GetCharactersCharacterIdClonesJumpClone.
        :type location_id: int
        """
        if location_id is None:
            raise ValueError("Invalid value for `location_id`, must not be `None`")

        self._location_id = location_id

    @property
    def location_type(self):
        """Gets the location_type of this GetCharactersCharacterIdClonesJumpClone.

        location_type string

        :return: The location_type of this GetCharactersCharacterIdClonesJumpClone.
        :rtype: str
        """
        return self._location_type

    @location_type.setter
    def location_type(self, location_type):
        """Sets the location_type of this GetCharactersCharacterIdClonesJumpClone.

        location_type string

        :param location_type: The location_type of this GetCharactersCharacterIdClonesJumpClone.
        :type location_type: str
        """
        allowed_values = ["station", "structure"]  # noqa: E501
        if location_type not in allowed_values:
            raise ValueError(
                "Invalid value for `location_type` ({0}), must be one of {1}"
                .format(location_type, allowed_values)
            )

        self._location_type = location_type

    @property
    def name(self):
        """Gets the name of this GetCharactersCharacterIdClonesJumpClone.

        name string

        :return: The name of this GetCharactersCharacterIdClonesJumpClone.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this GetCharactersCharacterIdClonesJumpClone.

        name string

        :param name: The name of this GetCharactersCharacterIdClonesJumpClone.
        :type name: str
        """

        self._name = name
