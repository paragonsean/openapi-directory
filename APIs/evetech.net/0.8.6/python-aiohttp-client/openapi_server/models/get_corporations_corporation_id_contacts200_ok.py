# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class GetCorporationsCorporationIdContacts200Ok(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, contact_id: int=None, contact_type: str=None, is_watched: bool=None, label_ids: List[int]=None, standing: float=None):
        """GetCorporationsCorporationIdContacts200Ok - a model defined in OpenAPI

        :param contact_id: The contact_id of this GetCorporationsCorporationIdContacts200Ok.
        :param contact_type: The contact_type of this GetCorporationsCorporationIdContacts200Ok.
        :param is_watched: The is_watched of this GetCorporationsCorporationIdContacts200Ok.
        :param label_ids: The label_ids of this GetCorporationsCorporationIdContacts200Ok.
        :param standing: The standing of this GetCorporationsCorporationIdContacts200Ok.
        """
        self.openapi_types = {
            'contact_id': int,
            'contact_type': str,
            'is_watched': bool,
            'label_ids': List[int],
            'standing': float
        }

        self.attribute_map = {
            'contact_id': 'contact_id',
            'contact_type': 'contact_type',
            'is_watched': 'is_watched',
            'label_ids': 'label_ids',
            'standing': 'standing'
        }

        self._contact_id = contact_id
        self._contact_type = contact_type
        self._is_watched = is_watched
        self._label_ids = label_ids
        self._standing = standing

    @classmethod
    def from_dict(cls, dikt: dict) -> 'GetCorporationsCorporationIdContacts200Ok':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The get_corporations_corporation_id_contacts_200_ok of this GetCorporationsCorporationIdContacts200Ok.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def contact_id(self):
        """Gets the contact_id of this GetCorporationsCorporationIdContacts200Ok.

        contact_id integer

        :return: The contact_id of this GetCorporationsCorporationIdContacts200Ok.
        :rtype: int
        """
        return self._contact_id

    @contact_id.setter
    def contact_id(self, contact_id):
        """Sets the contact_id of this GetCorporationsCorporationIdContacts200Ok.

        contact_id integer

        :param contact_id: The contact_id of this GetCorporationsCorporationIdContacts200Ok.
        :type contact_id: int
        """
        if contact_id is None:
            raise ValueError("Invalid value for `contact_id`, must not be `None`")

        self._contact_id = contact_id

    @property
    def contact_type(self):
        """Gets the contact_type of this GetCorporationsCorporationIdContacts200Ok.

        contact_type string

        :return: The contact_type of this GetCorporationsCorporationIdContacts200Ok.
        :rtype: str
        """
        return self._contact_type

    @contact_type.setter
    def contact_type(self, contact_type):
        """Sets the contact_type of this GetCorporationsCorporationIdContacts200Ok.

        contact_type string

        :param contact_type: The contact_type of this GetCorporationsCorporationIdContacts200Ok.
        :type contact_type: str
        """
        allowed_values = ["character", "corporation", "alliance", "faction"]  # noqa: E501
        if contact_type not in allowed_values:
            raise ValueError(
                "Invalid value for `contact_type` ({0}), must be one of {1}"
                .format(contact_type, allowed_values)
            )

        self._contact_type = contact_type

    @property
    def is_watched(self):
        """Gets the is_watched of this GetCorporationsCorporationIdContacts200Ok.

        Whether this contact is being watched

        :return: The is_watched of this GetCorporationsCorporationIdContacts200Ok.
        :rtype: bool
        """
        return self._is_watched

    @is_watched.setter
    def is_watched(self, is_watched):
        """Sets the is_watched of this GetCorporationsCorporationIdContacts200Ok.

        Whether this contact is being watched

        :param is_watched: The is_watched of this GetCorporationsCorporationIdContacts200Ok.
        :type is_watched: bool
        """

        self._is_watched = is_watched

    @property
    def label_ids(self):
        """Gets the label_ids of this GetCorporationsCorporationIdContacts200Ok.

        label_ids array

        :return: The label_ids of this GetCorporationsCorporationIdContacts200Ok.
        :rtype: List[int]
        """
        return self._label_ids

    @label_ids.setter
    def label_ids(self, label_ids):
        """Sets the label_ids of this GetCorporationsCorporationIdContacts200Ok.

        label_ids array

        :param label_ids: The label_ids of this GetCorporationsCorporationIdContacts200Ok.
        :type label_ids: List[int]
        """
        if label_ids is not None and len(label_ids) > 63:
            raise ValueError("Invalid value for `label_ids`, number of items must be less than or equal to `63`")

        self._label_ids = label_ids

    @property
    def standing(self):
        """Gets the standing of this GetCorporationsCorporationIdContacts200Ok.

        Standing of the contact

        :return: The standing of this GetCorporationsCorporationIdContacts200Ok.
        :rtype: float
        """
        return self._standing

    @standing.setter
    def standing(self, standing):
        """Sets the standing of this GetCorporationsCorporationIdContacts200Ok.

        Standing of the contact

        :param standing: The standing of this GetCorporationsCorporationIdContacts200Ok.
        :type standing: float
        """
        if standing is None:
            raise ValueError("Invalid value for `standing`, must not be `None`")

        self._standing = standing
