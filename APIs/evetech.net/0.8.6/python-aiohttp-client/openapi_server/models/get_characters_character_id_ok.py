# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class GetCharactersCharacterIdOk(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, alliance_id: int=None, ancestry_id: int=None, birthday: datetime=None, bloodline_id: int=None, corporation_id: int=None, description: str=None, faction_id: int=None, gender: str=None, name: str=None, race_id: int=None, security_status: float=None):
        """GetCharactersCharacterIdOk - a model defined in OpenAPI

        :param alliance_id: The alliance_id of this GetCharactersCharacterIdOk.
        :param ancestry_id: The ancestry_id of this GetCharactersCharacterIdOk.
        :param birthday: The birthday of this GetCharactersCharacterIdOk.
        :param bloodline_id: The bloodline_id of this GetCharactersCharacterIdOk.
        :param corporation_id: The corporation_id of this GetCharactersCharacterIdOk.
        :param description: The description of this GetCharactersCharacterIdOk.
        :param faction_id: The faction_id of this GetCharactersCharacterIdOk.
        :param gender: The gender of this GetCharactersCharacterIdOk.
        :param name: The name of this GetCharactersCharacterIdOk.
        :param race_id: The race_id of this GetCharactersCharacterIdOk.
        :param security_status: The security_status of this GetCharactersCharacterIdOk.
        """
        self.openapi_types = {
            'alliance_id': int,
            'ancestry_id': int,
            'birthday': datetime,
            'bloodline_id': int,
            'corporation_id': int,
            'description': str,
            'faction_id': int,
            'gender': str,
            'name': str,
            'race_id': int,
            'security_status': float
        }

        self.attribute_map = {
            'alliance_id': 'alliance_id',
            'ancestry_id': 'ancestry_id',
            'birthday': 'birthday',
            'bloodline_id': 'bloodline_id',
            'corporation_id': 'corporation_id',
            'description': 'description',
            'faction_id': 'faction_id',
            'gender': 'gender',
            'name': 'name',
            'race_id': 'race_id',
            'security_status': 'security_status'
        }

        self._alliance_id = alliance_id
        self._ancestry_id = ancestry_id
        self._birthday = birthday
        self._bloodline_id = bloodline_id
        self._corporation_id = corporation_id
        self._description = description
        self._faction_id = faction_id
        self._gender = gender
        self._name = name
        self._race_id = race_id
        self._security_status = security_status

    @classmethod
    def from_dict(cls, dikt: dict) -> 'GetCharactersCharacterIdOk':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The get_characters_character_id_ok of this GetCharactersCharacterIdOk.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def alliance_id(self):
        """Gets the alliance_id of this GetCharactersCharacterIdOk.

        The character's alliance ID

        :return: The alliance_id of this GetCharactersCharacterIdOk.
        :rtype: int
        """
        return self._alliance_id

    @alliance_id.setter
    def alliance_id(self, alliance_id):
        """Sets the alliance_id of this GetCharactersCharacterIdOk.

        The character's alliance ID

        :param alliance_id: The alliance_id of this GetCharactersCharacterIdOk.
        :type alliance_id: int
        """

        self._alliance_id = alliance_id

    @property
    def ancestry_id(self):
        """Gets the ancestry_id of this GetCharactersCharacterIdOk.

        ancestry_id integer

        :return: The ancestry_id of this GetCharactersCharacterIdOk.
        :rtype: int
        """
        return self._ancestry_id

    @ancestry_id.setter
    def ancestry_id(self, ancestry_id):
        """Sets the ancestry_id of this GetCharactersCharacterIdOk.

        ancestry_id integer

        :param ancestry_id: The ancestry_id of this GetCharactersCharacterIdOk.
        :type ancestry_id: int
        """

        self._ancestry_id = ancestry_id

    @property
    def birthday(self):
        """Gets the birthday of this GetCharactersCharacterIdOk.

        Creation date of the character

        :return: The birthday of this GetCharactersCharacterIdOk.
        :rtype: datetime
        """
        return self._birthday

    @birthday.setter
    def birthday(self, birthday):
        """Sets the birthday of this GetCharactersCharacterIdOk.

        Creation date of the character

        :param birthday: The birthday of this GetCharactersCharacterIdOk.
        :type birthday: datetime
        """
        if birthday is None:
            raise ValueError("Invalid value for `birthday`, must not be `None`")

        self._birthday = birthday

    @property
    def bloodline_id(self):
        """Gets the bloodline_id of this GetCharactersCharacterIdOk.

        bloodline_id integer

        :return: The bloodline_id of this GetCharactersCharacterIdOk.
        :rtype: int
        """
        return self._bloodline_id

    @bloodline_id.setter
    def bloodline_id(self, bloodline_id):
        """Sets the bloodline_id of this GetCharactersCharacterIdOk.

        bloodline_id integer

        :param bloodline_id: The bloodline_id of this GetCharactersCharacterIdOk.
        :type bloodline_id: int
        """
        if bloodline_id is None:
            raise ValueError("Invalid value for `bloodline_id`, must not be `None`")

        self._bloodline_id = bloodline_id

    @property
    def corporation_id(self):
        """Gets the corporation_id of this GetCharactersCharacterIdOk.

        The character's corporation ID

        :return: The corporation_id of this GetCharactersCharacterIdOk.
        :rtype: int
        """
        return self._corporation_id

    @corporation_id.setter
    def corporation_id(self, corporation_id):
        """Sets the corporation_id of this GetCharactersCharacterIdOk.

        The character's corporation ID

        :param corporation_id: The corporation_id of this GetCharactersCharacterIdOk.
        :type corporation_id: int
        """
        if corporation_id is None:
            raise ValueError("Invalid value for `corporation_id`, must not be `None`")

        self._corporation_id = corporation_id

    @property
    def description(self):
        """Gets the description of this GetCharactersCharacterIdOk.

        description string

        :return: The description of this GetCharactersCharacterIdOk.
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this GetCharactersCharacterIdOk.

        description string

        :param description: The description of this GetCharactersCharacterIdOk.
        :type description: str
        """

        self._description = description

    @property
    def faction_id(self):
        """Gets the faction_id of this GetCharactersCharacterIdOk.

        ID of the faction the character is fighting for, if the character is enlisted in Factional Warfare

        :return: The faction_id of this GetCharactersCharacterIdOk.
        :rtype: int
        """
        return self._faction_id

    @faction_id.setter
    def faction_id(self, faction_id):
        """Sets the faction_id of this GetCharactersCharacterIdOk.

        ID of the faction the character is fighting for, if the character is enlisted in Factional Warfare

        :param faction_id: The faction_id of this GetCharactersCharacterIdOk.
        :type faction_id: int
        """

        self._faction_id = faction_id

    @property
    def gender(self):
        """Gets the gender of this GetCharactersCharacterIdOk.

        gender string

        :return: The gender of this GetCharactersCharacterIdOk.
        :rtype: str
        """
        return self._gender

    @gender.setter
    def gender(self, gender):
        """Sets the gender of this GetCharactersCharacterIdOk.

        gender string

        :param gender: The gender of this GetCharactersCharacterIdOk.
        :type gender: str
        """
        allowed_values = ["female", "male"]  # noqa: E501
        if gender not in allowed_values:
            raise ValueError(
                "Invalid value for `gender` ({0}), must be one of {1}"
                .format(gender, allowed_values)
            )

        self._gender = gender

    @property
    def name(self):
        """Gets the name of this GetCharactersCharacterIdOk.

        name string

        :return: The name of this GetCharactersCharacterIdOk.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this GetCharactersCharacterIdOk.

        name string

        :param name: The name of this GetCharactersCharacterIdOk.
        :type name: str
        """
        if name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")

        self._name = name

    @property
    def race_id(self):
        """Gets the race_id of this GetCharactersCharacterIdOk.

        race_id integer

        :return: The race_id of this GetCharactersCharacterIdOk.
        :rtype: int
        """
        return self._race_id

    @race_id.setter
    def race_id(self, race_id):
        """Sets the race_id of this GetCharactersCharacterIdOk.

        race_id integer

        :param race_id: The race_id of this GetCharactersCharacterIdOk.
        :type race_id: int
        """
        if race_id is None:
            raise ValueError("Invalid value for `race_id`, must not be `None`")

        self._race_id = race_id

    @property
    def security_status(self):
        """Gets the security_status of this GetCharactersCharacterIdOk.

        security_status number

        :return: The security_status of this GetCharactersCharacterIdOk.
        :rtype: float
        """
        return self._security_status

    @security_status.setter
    def security_status(self, security_status):
        """Sets the security_status of this GetCharactersCharacterIdOk.

        security_status number

        :param security_status: The security_status of this GetCharactersCharacterIdOk.
        :type security_status: float
        """
        if security_status is not None and security_status > 1E+1:
            raise ValueError("Invalid value for `security_status`, must be a value less than or equal to `1E+1`")
        if security_status is not None and security_status < -1E+1:
            raise ValueError("Invalid value for `security_status`, must be a value greater than or equal to `-1E+1`")

        self._security_status = security_status
