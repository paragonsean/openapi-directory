# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.get_characters_character_id_fw_stats_kills import GetCharactersCharacterIdFwStatsKills
from openapi_server.models.get_characters_character_id_fw_stats_victory_points import GetCharactersCharacterIdFwStatsVictoryPoints
from openapi_server import util


class GetCharactersCharacterIdFwStatsOk(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, current_rank: int=None, enlisted_on: datetime=None, faction_id: int=None, highest_rank: int=None, kills: GetCharactersCharacterIdFwStatsKills=None, victory_points: GetCharactersCharacterIdFwStatsVictoryPoints=None):
        """GetCharactersCharacterIdFwStatsOk - a model defined in OpenAPI

        :param current_rank: The current_rank of this GetCharactersCharacterIdFwStatsOk.
        :param enlisted_on: The enlisted_on of this GetCharactersCharacterIdFwStatsOk.
        :param faction_id: The faction_id of this GetCharactersCharacterIdFwStatsOk.
        :param highest_rank: The highest_rank of this GetCharactersCharacterIdFwStatsOk.
        :param kills: The kills of this GetCharactersCharacterIdFwStatsOk.
        :param victory_points: The victory_points of this GetCharactersCharacterIdFwStatsOk.
        """
        self.openapi_types = {
            'current_rank': int,
            'enlisted_on': datetime,
            'faction_id': int,
            'highest_rank': int,
            'kills': GetCharactersCharacterIdFwStatsKills,
            'victory_points': GetCharactersCharacterIdFwStatsVictoryPoints
        }

        self.attribute_map = {
            'current_rank': 'current_rank',
            'enlisted_on': 'enlisted_on',
            'faction_id': 'faction_id',
            'highest_rank': 'highest_rank',
            'kills': 'kills',
            'victory_points': 'victory_points'
        }

        self._current_rank = current_rank
        self._enlisted_on = enlisted_on
        self._faction_id = faction_id
        self._highest_rank = highest_rank
        self._kills = kills
        self._victory_points = victory_points

    @classmethod
    def from_dict(cls, dikt: dict) -> 'GetCharactersCharacterIdFwStatsOk':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The get_characters_character_id_fw_stats_ok of this GetCharactersCharacterIdFwStatsOk.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def current_rank(self):
        """Gets the current_rank of this GetCharactersCharacterIdFwStatsOk.

        The given character's current faction rank

        :return: The current_rank of this GetCharactersCharacterIdFwStatsOk.
        :rtype: int
        """
        return self._current_rank

    @current_rank.setter
    def current_rank(self, current_rank):
        """Sets the current_rank of this GetCharactersCharacterIdFwStatsOk.

        The given character's current faction rank

        :param current_rank: The current_rank of this GetCharactersCharacterIdFwStatsOk.
        :type current_rank: int
        """
        if current_rank is not None and current_rank > 9:
            raise ValueError("Invalid value for `current_rank`, must be a value less than or equal to `9`")
        if current_rank is not None and current_rank < 0:
            raise ValueError("Invalid value for `current_rank`, must be a value greater than or equal to `0`")

        self._current_rank = current_rank

    @property
    def enlisted_on(self):
        """Gets the enlisted_on of this GetCharactersCharacterIdFwStatsOk.

        The enlistment date of the given character into faction warfare. Will not be included if character is not enlisted in faction warfare

        :return: The enlisted_on of this GetCharactersCharacterIdFwStatsOk.
        :rtype: datetime
        """
        return self._enlisted_on

    @enlisted_on.setter
    def enlisted_on(self, enlisted_on):
        """Sets the enlisted_on of this GetCharactersCharacterIdFwStatsOk.

        The enlistment date of the given character into faction warfare. Will not be included if character is not enlisted in faction warfare

        :param enlisted_on: The enlisted_on of this GetCharactersCharacterIdFwStatsOk.
        :type enlisted_on: datetime
        """

        self._enlisted_on = enlisted_on

    @property
    def faction_id(self):
        """Gets the faction_id of this GetCharactersCharacterIdFwStatsOk.

        The faction the given character is enlisted to fight for. Will not be included if character is not enlisted in faction warfare

        :return: The faction_id of this GetCharactersCharacterIdFwStatsOk.
        :rtype: int
        """
        return self._faction_id

    @faction_id.setter
    def faction_id(self, faction_id):
        """Sets the faction_id of this GetCharactersCharacterIdFwStatsOk.

        The faction the given character is enlisted to fight for. Will not be included if character is not enlisted in faction warfare

        :param faction_id: The faction_id of this GetCharactersCharacterIdFwStatsOk.
        :type faction_id: int
        """

        self._faction_id = faction_id

    @property
    def highest_rank(self):
        """Gets the highest_rank of this GetCharactersCharacterIdFwStatsOk.

        The given character's highest faction rank achieved

        :return: The highest_rank of this GetCharactersCharacterIdFwStatsOk.
        :rtype: int
        """
        return self._highest_rank

    @highest_rank.setter
    def highest_rank(self, highest_rank):
        """Sets the highest_rank of this GetCharactersCharacterIdFwStatsOk.

        The given character's highest faction rank achieved

        :param highest_rank: The highest_rank of this GetCharactersCharacterIdFwStatsOk.
        :type highest_rank: int
        """
        if highest_rank is not None and highest_rank > 9:
            raise ValueError("Invalid value for `highest_rank`, must be a value less than or equal to `9`")
        if highest_rank is not None and highest_rank < 0:
            raise ValueError("Invalid value for `highest_rank`, must be a value greater than or equal to `0`")

        self._highest_rank = highest_rank

    @property
    def kills(self):
        """Gets the kills of this GetCharactersCharacterIdFwStatsOk.


        :return: The kills of this GetCharactersCharacterIdFwStatsOk.
        :rtype: GetCharactersCharacterIdFwStatsKills
        """
        return self._kills

    @kills.setter
    def kills(self, kills):
        """Sets the kills of this GetCharactersCharacterIdFwStatsOk.


        :param kills: The kills of this GetCharactersCharacterIdFwStatsOk.
        :type kills: GetCharactersCharacterIdFwStatsKills
        """
        if kills is None:
            raise ValueError("Invalid value for `kills`, must not be `None`")

        self._kills = kills

    @property
    def victory_points(self):
        """Gets the victory_points of this GetCharactersCharacterIdFwStatsOk.


        :return: The victory_points of this GetCharactersCharacterIdFwStatsOk.
        :rtype: GetCharactersCharacterIdFwStatsVictoryPoints
        """
        return self._victory_points

    @victory_points.setter
    def victory_points(self, victory_points):
        """Sets the victory_points of this GetCharactersCharacterIdFwStatsOk.


        :param victory_points: The victory_points of this GetCharactersCharacterIdFwStatsOk.
        :type victory_points: GetCharactersCharacterIdFwStatsVictoryPoints
        """
        if victory_points is None:
            raise ValueError("Invalid value for `victory_points`, must not be `None`")

        self._victory_points = victory_points
