# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.get_universe_constellations_constellation_id_position import GetUniverseConstellationsConstellationIdPosition
from openapi_server import util


class GetUniverseConstellationsConstellationIdOk(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, constellation_id: int=None, name: str=None, position: GetUniverseConstellationsConstellationIdPosition=None, region_id: int=None, systems: List[int]=None):
        """GetUniverseConstellationsConstellationIdOk - a model defined in OpenAPI

        :param constellation_id: The constellation_id of this GetUniverseConstellationsConstellationIdOk.
        :param name: The name of this GetUniverseConstellationsConstellationIdOk.
        :param position: The position of this GetUniverseConstellationsConstellationIdOk.
        :param region_id: The region_id of this GetUniverseConstellationsConstellationIdOk.
        :param systems: The systems of this GetUniverseConstellationsConstellationIdOk.
        """
        self.openapi_types = {
            'constellation_id': int,
            'name': str,
            'position': GetUniverseConstellationsConstellationIdPosition,
            'region_id': int,
            'systems': List[int]
        }

        self.attribute_map = {
            'constellation_id': 'constellation_id',
            'name': 'name',
            'position': 'position',
            'region_id': 'region_id',
            'systems': 'systems'
        }

        self._constellation_id = constellation_id
        self._name = name
        self._position = position
        self._region_id = region_id
        self._systems = systems

    @classmethod
    def from_dict(cls, dikt: dict) -> 'GetUniverseConstellationsConstellationIdOk':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The get_universe_constellations_constellation_id_ok of this GetUniverseConstellationsConstellationIdOk.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def constellation_id(self):
        """Gets the constellation_id of this GetUniverseConstellationsConstellationIdOk.

        constellation_id integer

        :return: The constellation_id of this GetUniverseConstellationsConstellationIdOk.
        :rtype: int
        """
        return self._constellation_id

    @constellation_id.setter
    def constellation_id(self, constellation_id):
        """Sets the constellation_id of this GetUniverseConstellationsConstellationIdOk.

        constellation_id integer

        :param constellation_id: The constellation_id of this GetUniverseConstellationsConstellationIdOk.
        :type constellation_id: int
        """
        if constellation_id is None:
            raise ValueError("Invalid value for `constellation_id`, must not be `None`")

        self._constellation_id = constellation_id

    @property
    def name(self):
        """Gets the name of this GetUniverseConstellationsConstellationIdOk.

        name string

        :return: The name of this GetUniverseConstellationsConstellationIdOk.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this GetUniverseConstellationsConstellationIdOk.

        name string

        :param name: The name of this GetUniverseConstellationsConstellationIdOk.
        :type name: str
        """
        if name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")

        self._name = name

    @property
    def position(self):
        """Gets the position of this GetUniverseConstellationsConstellationIdOk.


        :return: The position of this GetUniverseConstellationsConstellationIdOk.
        :rtype: GetUniverseConstellationsConstellationIdPosition
        """
        return self._position

    @position.setter
    def position(self, position):
        """Sets the position of this GetUniverseConstellationsConstellationIdOk.


        :param position: The position of this GetUniverseConstellationsConstellationIdOk.
        :type position: GetUniverseConstellationsConstellationIdPosition
        """
        if position is None:
            raise ValueError("Invalid value for `position`, must not be `None`")

        self._position = position

    @property
    def region_id(self):
        """Gets the region_id of this GetUniverseConstellationsConstellationIdOk.

        The region this constellation is in

        :return: The region_id of this GetUniverseConstellationsConstellationIdOk.
        :rtype: int
        """
        return self._region_id

    @region_id.setter
    def region_id(self, region_id):
        """Sets the region_id of this GetUniverseConstellationsConstellationIdOk.

        The region this constellation is in

        :param region_id: The region_id of this GetUniverseConstellationsConstellationIdOk.
        :type region_id: int
        """
        if region_id is None:
            raise ValueError("Invalid value for `region_id`, must not be `None`")

        self._region_id = region_id

    @property
    def systems(self):
        """Gets the systems of this GetUniverseConstellationsConstellationIdOk.

        systems array

        :return: The systems of this GetUniverseConstellationsConstellationIdOk.
        :rtype: List[int]
        """
        return self._systems

    @systems.setter
    def systems(self, systems):
        """Sets the systems of this GetUniverseConstellationsConstellationIdOk.

        systems array

        :param systems: The systems of this GetUniverseConstellationsConstellationIdOk.
        :type systems: List[int]
        """
        if systems is None:
            raise ValueError("Invalid value for `systems`, must not be `None`")
        if systems is not None and len(systems) > 10000:
            raise ValueError("Invalid value for `systems`, number of items must be less than or equal to `10000`")

        self._systems = systems
