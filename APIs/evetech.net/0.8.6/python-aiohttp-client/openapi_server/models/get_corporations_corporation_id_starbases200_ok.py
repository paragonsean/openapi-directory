# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class GetCorporationsCorporationIdStarbases200Ok(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, moon_id: int=None, onlined_since: datetime=None, reinforced_until: datetime=None, starbase_id: int=None, state: str=None, system_id: int=None, type_id: int=None, unanchor_at: datetime=None):
        """GetCorporationsCorporationIdStarbases200Ok - a model defined in OpenAPI

        :param moon_id: The moon_id of this GetCorporationsCorporationIdStarbases200Ok.
        :param onlined_since: The onlined_since of this GetCorporationsCorporationIdStarbases200Ok.
        :param reinforced_until: The reinforced_until of this GetCorporationsCorporationIdStarbases200Ok.
        :param starbase_id: The starbase_id of this GetCorporationsCorporationIdStarbases200Ok.
        :param state: The state of this GetCorporationsCorporationIdStarbases200Ok.
        :param system_id: The system_id of this GetCorporationsCorporationIdStarbases200Ok.
        :param type_id: The type_id of this GetCorporationsCorporationIdStarbases200Ok.
        :param unanchor_at: The unanchor_at of this GetCorporationsCorporationIdStarbases200Ok.
        """
        self.openapi_types = {
            'moon_id': int,
            'onlined_since': datetime,
            'reinforced_until': datetime,
            'starbase_id': int,
            'state': str,
            'system_id': int,
            'type_id': int,
            'unanchor_at': datetime
        }

        self.attribute_map = {
            'moon_id': 'moon_id',
            'onlined_since': 'onlined_since',
            'reinforced_until': 'reinforced_until',
            'starbase_id': 'starbase_id',
            'state': 'state',
            'system_id': 'system_id',
            'type_id': 'type_id',
            'unanchor_at': 'unanchor_at'
        }

        self._moon_id = moon_id
        self._onlined_since = onlined_since
        self._reinforced_until = reinforced_until
        self._starbase_id = starbase_id
        self._state = state
        self._system_id = system_id
        self._type_id = type_id
        self._unanchor_at = unanchor_at

    @classmethod
    def from_dict(cls, dikt: dict) -> 'GetCorporationsCorporationIdStarbases200Ok':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The get_corporations_corporation_id_starbases_200_ok of this GetCorporationsCorporationIdStarbases200Ok.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def moon_id(self):
        """Gets the moon_id of this GetCorporationsCorporationIdStarbases200Ok.

        The moon this starbase (POS) is anchored on, unanchored POSes do not have this information

        :return: The moon_id of this GetCorporationsCorporationIdStarbases200Ok.
        :rtype: int
        """
        return self._moon_id

    @moon_id.setter
    def moon_id(self, moon_id):
        """Sets the moon_id of this GetCorporationsCorporationIdStarbases200Ok.

        The moon this starbase (POS) is anchored on, unanchored POSes do not have this information

        :param moon_id: The moon_id of this GetCorporationsCorporationIdStarbases200Ok.
        :type moon_id: int
        """

        self._moon_id = moon_id

    @property
    def onlined_since(self):
        """Gets the onlined_since of this GetCorporationsCorporationIdStarbases200Ok.

        When the POS onlined, for starbases (POSes) in online state

        :return: The onlined_since of this GetCorporationsCorporationIdStarbases200Ok.
        :rtype: datetime
        """
        return self._onlined_since

    @onlined_since.setter
    def onlined_since(self, onlined_since):
        """Sets the onlined_since of this GetCorporationsCorporationIdStarbases200Ok.

        When the POS onlined, for starbases (POSes) in online state

        :param onlined_since: The onlined_since of this GetCorporationsCorporationIdStarbases200Ok.
        :type onlined_since: datetime
        """

        self._onlined_since = onlined_since

    @property
    def reinforced_until(self):
        """Gets the reinforced_until of this GetCorporationsCorporationIdStarbases200Ok.

        When the POS will be out of reinforcement, for starbases (POSes) in reinforced state

        :return: The reinforced_until of this GetCorporationsCorporationIdStarbases200Ok.
        :rtype: datetime
        """
        return self._reinforced_until

    @reinforced_until.setter
    def reinforced_until(self, reinforced_until):
        """Sets the reinforced_until of this GetCorporationsCorporationIdStarbases200Ok.

        When the POS will be out of reinforcement, for starbases (POSes) in reinforced state

        :param reinforced_until: The reinforced_until of this GetCorporationsCorporationIdStarbases200Ok.
        :type reinforced_until: datetime
        """

        self._reinforced_until = reinforced_until

    @property
    def starbase_id(self):
        """Gets the starbase_id of this GetCorporationsCorporationIdStarbases200Ok.

        Unique ID for this starbase (POS)

        :return: The starbase_id of this GetCorporationsCorporationIdStarbases200Ok.
        :rtype: int
        """
        return self._starbase_id

    @starbase_id.setter
    def starbase_id(self, starbase_id):
        """Sets the starbase_id of this GetCorporationsCorporationIdStarbases200Ok.

        Unique ID for this starbase (POS)

        :param starbase_id: The starbase_id of this GetCorporationsCorporationIdStarbases200Ok.
        :type starbase_id: int
        """
        if starbase_id is None:
            raise ValueError("Invalid value for `starbase_id`, must not be `None`")

        self._starbase_id = starbase_id

    @property
    def state(self):
        """Gets the state of this GetCorporationsCorporationIdStarbases200Ok.

        state string

        :return: The state of this GetCorporationsCorporationIdStarbases200Ok.
        :rtype: str
        """
        return self._state

    @state.setter
    def state(self, state):
        """Sets the state of this GetCorporationsCorporationIdStarbases200Ok.

        state string

        :param state: The state of this GetCorporationsCorporationIdStarbases200Ok.
        :type state: str
        """
        allowed_values = ["offline", "online", "onlining", "reinforced", "unanchoring"]  # noqa: E501
        if state not in allowed_values:
            raise ValueError(
                "Invalid value for `state` ({0}), must be one of {1}"
                .format(state, allowed_values)
            )

        self._state = state

    @property
    def system_id(self):
        """Gets the system_id of this GetCorporationsCorporationIdStarbases200Ok.

        The solar system this starbase (POS) is in, unanchored POSes have this information

        :return: The system_id of this GetCorporationsCorporationIdStarbases200Ok.
        :rtype: int
        """
        return self._system_id

    @system_id.setter
    def system_id(self, system_id):
        """Sets the system_id of this GetCorporationsCorporationIdStarbases200Ok.

        The solar system this starbase (POS) is in, unanchored POSes have this information

        :param system_id: The system_id of this GetCorporationsCorporationIdStarbases200Ok.
        :type system_id: int
        """
        if system_id is None:
            raise ValueError("Invalid value for `system_id`, must not be `None`")

        self._system_id = system_id

    @property
    def type_id(self):
        """Gets the type_id of this GetCorporationsCorporationIdStarbases200Ok.

        Starbase (POS) type

        :return: The type_id of this GetCorporationsCorporationIdStarbases200Ok.
        :rtype: int
        """
        return self._type_id

    @type_id.setter
    def type_id(self, type_id):
        """Sets the type_id of this GetCorporationsCorporationIdStarbases200Ok.

        Starbase (POS) type

        :param type_id: The type_id of this GetCorporationsCorporationIdStarbases200Ok.
        :type type_id: int
        """
        if type_id is None:
            raise ValueError("Invalid value for `type_id`, must not be `None`")

        self._type_id = type_id

    @property
    def unanchor_at(self):
        """Gets the unanchor_at of this GetCorporationsCorporationIdStarbases200Ok.

        When the POS started unanchoring, for starbases (POSes) in unanchoring state

        :return: The unanchor_at of this GetCorporationsCorporationIdStarbases200Ok.
        :rtype: datetime
        """
        return self._unanchor_at

    @unanchor_at.setter
    def unanchor_at(self, unanchor_at):
        """Sets the unanchor_at of this GetCorporationsCorporationIdStarbases200Ok.

        When the POS started unanchoring, for starbases (POSes) in unanchoring state

        :param unanchor_at: The unanchor_at of this GetCorporationsCorporationIdStarbases200Ok.
        :type unanchor_at: datetime
        """

        self._unanchor_at = unanchor_at
