# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class GetIndustryFacilities200Ok(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, facility_id: int=None, owner_id: int=None, region_id: int=None, solar_system_id: int=None, tax: float=None, type_id: int=None):
        """GetIndustryFacilities200Ok - a model defined in OpenAPI

        :param facility_id: The facility_id of this GetIndustryFacilities200Ok.
        :param owner_id: The owner_id of this GetIndustryFacilities200Ok.
        :param region_id: The region_id of this GetIndustryFacilities200Ok.
        :param solar_system_id: The solar_system_id of this GetIndustryFacilities200Ok.
        :param tax: The tax of this GetIndustryFacilities200Ok.
        :param type_id: The type_id of this GetIndustryFacilities200Ok.
        """
        self.openapi_types = {
            'facility_id': int,
            'owner_id': int,
            'region_id': int,
            'solar_system_id': int,
            'tax': float,
            'type_id': int
        }

        self.attribute_map = {
            'facility_id': 'facility_id',
            'owner_id': 'owner_id',
            'region_id': 'region_id',
            'solar_system_id': 'solar_system_id',
            'tax': 'tax',
            'type_id': 'type_id'
        }

        self._facility_id = facility_id
        self._owner_id = owner_id
        self._region_id = region_id
        self._solar_system_id = solar_system_id
        self._tax = tax
        self._type_id = type_id

    @classmethod
    def from_dict(cls, dikt: dict) -> 'GetIndustryFacilities200Ok':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The get_industry_facilities_200_ok of this GetIndustryFacilities200Ok.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def facility_id(self):
        """Gets the facility_id of this GetIndustryFacilities200Ok.

        ID of the facility

        :return: The facility_id of this GetIndustryFacilities200Ok.
        :rtype: int
        """
        return self._facility_id

    @facility_id.setter
    def facility_id(self, facility_id):
        """Sets the facility_id of this GetIndustryFacilities200Ok.

        ID of the facility

        :param facility_id: The facility_id of this GetIndustryFacilities200Ok.
        :type facility_id: int
        """
        if facility_id is None:
            raise ValueError("Invalid value for `facility_id`, must not be `None`")

        self._facility_id = facility_id

    @property
    def owner_id(self):
        """Gets the owner_id of this GetIndustryFacilities200Ok.

        Owner of the facility

        :return: The owner_id of this GetIndustryFacilities200Ok.
        :rtype: int
        """
        return self._owner_id

    @owner_id.setter
    def owner_id(self, owner_id):
        """Sets the owner_id of this GetIndustryFacilities200Ok.

        Owner of the facility

        :param owner_id: The owner_id of this GetIndustryFacilities200Ok.
        :type owner_id: int
        """
        if owner_id is None:
            raise ValueError("Invalid value for `owner_id`, must not be `None`")

        self._owner_id = owner_id

    @property
    def region_id(self):
        """Gets the region_id of this GetIndustryFacilities200Ok.

        Region ID where the facility is

        :return: The region_id of this GetIndustryFacilities200Ok.
        :rtype: int
        """
        return self._region_id

    @region_id.setter
    def region_id(self, region_id):
        """Sets the region_id of this GetIndustryFacilities200Ok.

        Region ID where the facility is

        :param region_id: The region_id of this GetIndustryFacilities200Ok.
        :type region_id: int
        """
        if region_id is None:
            raise ValueError("Invalid value for `region_id`, must not be `None`")

        self._region_id = region_id

    @property
    def solar_system_id(self):
        """Gets the solar_system_id of this GetIndustryFacilities200Ok.

        Solar system ID where the facility is

        :return: The solar_system_id of this GetIndustryFacilities200Ok.
        :rtype: int
        """
        return self._solar_system_id

    @solar_system_id.setter
    def solar_system_id(self, solar_system_id):
        """Sets the solar_system_id of this GetIndustryFacilities200Ok.

        Solar system ID where the facility is

        :param solar_system_id: The solar_system_id of this GetIndustryFacilities200Ok.
        :type solar_system_id: int
        """
        if solar_system_id is None:
            raise ValueError("Invalid value for `solar_system_id`, must not be `None`")

        self._solar_system_id = solar_system_id

    @property
    def tax(self):
        """Gets the tax of this GetIndustryFacilities200Ok.

        Tax imposed by the facility

        :return: The tax of this GetIndustryFacilities200Ok.
        :rtype: float
        """
        return self._tax

    @tax.setter
    def tax(self, tax):
        """Sets the tax of this GetIndustryFacilities200Ok.

        Tax imposed by the facility

        :param tax: The tax of this GetIndustryFacilities200Ok.
        :type tax: float
        """

        self._tax = tax

    @property
    def type_id(self):
        """Gets the type_id of this GetIndustryFacilities200Ok.

        Type ID of the facility

        :return: The type_id of this GetIndustryFacilities200Ok.
        :rtype: int
        """
        return self._type_id

    @type_id.setter
    def type_id(self, type_id):
        """Sets the type_id of this GetIndustryFacilities200Ok.

        Type ID of the facility

        :param type_id: The type_id of this GetIndustryFacilities200Ok.
        :type type_id: int
        """
        if type_id is None:
            raise ValueError("Invalid value for `type_id`, must not be `None`")

        self._type_id = type_id
