# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class GetCorporationsCorporationIdMedalsIssued200Ok(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, character_id: int=None, issued_at: datetime=None, issuer_id: int=None, medal_id: int=None, reason: str=None, status: str=None):
        """GetCorporationsCorporationIdMedalsIssued200Ok - a model defined in OpenAPI

        :param character_id: The character_id of this GetCorporationsCorporationIdMedalsIssued200Ok.
        :param issued_at: The issued_at of this GetCorporationsCorporationIdMedalsIssued200Ok.
        :param issuer_id: The issuer_id of this GetCorporationsCorporationIdMedalsIssued200Ok.
        :param medal_id: The medal_id of this GetCorporationsCorporationIdMedalsIssued200Ok.
        :param reason: The reason of this GetCorporationsCorporationIdMedalsIssued200Ok.
        :param status: The status of this GetCorporationsCorporationIdMedalsIssued200Ok.
        """
        self.openapi_types = {
            'character_id': int,
            'issued_at': datetime,
            'issuer_id': int,
            'medal_id': int,
            'reason': str,
            'status': str
        }

        self.attribute_map = {
            'character_id': 'character_id',
            'issued_at': 'issued_at',
            'issuer_id': 'issuer_id',
            'medal_id': 'medal_id',
            'reason': 'reason',
            'status': 'status'
        }

        self._character_id = character_id
        self._issued_at = issued_at
        self._issuer_id = issuer_id
        self._medal_id = medal_id
        self._reason = reason
        self._status = status

    @classmethod
    def from_dict(cls, dikt: dict) -> 'GetCorporationsCorporationIdMedalsIssued200Ok':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The get_corporations_corporation_id_medals_issued_200_ok of this GetCorporationsCorporationIdMedalsIssued200Ok.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def character_id(self):
        """Gets the character_id of this GetCorporationsCorporationIdMedalsIssued200Ok.

        ID of the character who was rewarded this medal

        :return: The character_id of this GetCorporationsCorporationIdMedalsIssued200Ok.
        :rtype: int
        """
        return self._character_id

    @character_id.setter
    def character_id(self, character_id):
        """Sets the character_id of this GetCorporationsCorporationIdMedalsIssued200Ok.

        ID of the character who was rewarded this medal

        :param character_id: The character_id of this GetCorporationsCorporationIdMedalsIssued200Ok.
        :type character_id: int
        """
        if character_id is None:
            raise ValueError("Invalid value for `character_id`, must not be `None`")

        self._character_id = character_id

    @property
    def issued_at(self):
        """Gets the issued_at of this GetCorporationsCorporationIdMedalsIssued200Ok.

        issued_at string

        :return: The issued_at of this GetCorporationsCorporationIdMedalsIssued200Ok.
        :rtype: datetime
        """
        return self._issued_at

    @issued_at.setter
    def issued_at(self, issued_at):
        """Sets the issued_at of this GetCorporationsCorporationIdMedalsIssued200Ok.

        issued_at string

        :param issued_at: The issued_at of this GetCorporationsCorporationIdMedalsIssued200Ok.
        :type issued_at: datetime
        """
        if issued_at is None:
            raise ValueError("Invalid value for `issued_at`, must not be `None`")

        self._issued_at = issued_at

    @property
    def issuer_id(self):
        """Gets the issuer_id of this GetCorporationsCorporationIdMedalsIssued200Ok.

        ID of the character who issued the medal

        :return: The issuer_id of this GetCorporationsCorporationIdMedalsIssued200Ok.
        :rtype: int
        """
        return self._issuer_id

    @issuer_id.setter
    def issuer_id(self, issuer_id):
        """Sets the issuer_id of this GetCorporationsCorporationIdMedalsIssued200Ok.

        ID of the character who issued the medal

        :param issuer_id: The issuer_id of this GetCorporationsCorporationIdMedalsIssued200Ok.
        :type issuer_id: int
        """
        if issuer_id is None:
            raise ValueError("Invalid value for `issuer_id`, must not be `None`")

        self._issuer_id = issuer_id

    @property
    def medal_id(self):
        """Gets the medal_id of this GetCorporationsCorporationIdMedalsIssued200Ok.

        medal_id integer

        :return: The medal_id of this GetCorporationsCorporationIdMedalsIssued200Ok.
        :rtype: int
        """
        return self._medal_id

    @medal_id.setter
    def medal_id(self, medal_id):
        """Sets the medal_id of this GetCorporationsCorporationIdMedalsIssued200Ok.

        medal_id integer

        :param medal_id: The medal_id of this GetCorporationsCorporationIdMedalsIssued200Ok.
        :type medal_id: int
        """
        if medal_id is None:
            raise ValueError("Invalid value for `medal_id`, must not be `None`")

        self._medal_id = medal_id

    @property
    def reason(self):
        """Gets the reason of this GetCorporationsCorporationIdMedalsIssued200Ok.

        reason string

        :return: The reason of this GetCorporationsCorporationIdMedalsIssued200Ok.
        :rtype: str
        """
        return self._reason

    @reason.setter
    def reason(self, reason):
        """Sets the reason of this GetCorporationsCorporationIdMedalsIssued200Ok.

        reason string

        :param reason: The reason of this GetCorporationsCorporationIdMedalsIssued200Ok.
        :type reason: str
        """
        if reason is None:
            raise ValueError("Invalid value for `reason`, must not be `None`")
        if reason is not None and len(reason) > 1000:
            raise ValueError("Invalid value for `reason`, length must be less than or equal to `1000`")

        self._reason = reason

    @property
    def status(self):
        """Gets the status of this GetCorporationsCorporationIdMedalsIssued200Ok.

        status string

        :return: The status of this GetCorporationsCorporationIdMedalsIssued200Ok.
        :rtype: str
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this GetCorporationsCorporationIdMedalsIssued200Ok.

        status string

        :param status: The status of this GetCorporationsCorporationIdMedalsIssued200Ok.
        :type status: str
        """
        allowed_values = ["private", "public"]  # noqa: E501
        if status not in allowed_values:
            raise ValueError(
                "Invalid value for `status` ({0}), must be one of {1}"
                .format(status, allowed_values)
            )

        self._status = status
