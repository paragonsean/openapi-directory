# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class GetCharactersCharacterIdCalendarEventIdOk(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, _date: datetime=None, duration: int=None, event_id: int=None, importance: int=None, owner_id: int=None, owner_name: str=None, owner_type: str=None, response: str=None, text: str=None, title: str=None):
        """GetCharactersCharacterIdCalendarEventIdOk - a model defined in OpenAPI

        :param _date: The _date of this GetCharactersCharacterIdCalendarEventIdOk.
        :param duration: The duration of this GetCharactersCharacterIdCalendarEventIdOk.
        :param event_id: The event_id of this GetCharactersCharacterIdCalendarEventIdOk.
        :param importance: The importance of this GetCharactersCharacterIdCalendarEventIdOk.
        :param owner_id: The owner_id of this GetCharactersCharacterIdCalendarEventIdOk.
        :param owner_name: The owner_name of this GetCharactersCharacterIdCalendarEventIdOk.
        :param owner_type: The owner_type of this GetCharactersCharacterIdCalendarEventIdOk.
        :param response: The response of this GetCharactersCharacterIdCalendarEventIdOk.
        :param text: The text of this GetCharactersCharacterIdCalendarEventIdOk.
        :param title: The title of this GetCharactersCharacterIdCalendarEventIdOk.
        """
        self.openapi_types = {
            '_date': datetime,
            'duration': int,
            'event_id': int,
            'importance': int,
            'owner_id': int,
            'owner_name': str,
            'owner_type': str,
            'response': str,
            'text': str,
            'title': str
        }

        self.attribute_map = {
            '_date': 'date',
            'duration': 'duration',
            'event_id': 'event_id',
            'importance': 'importance',
            'owner_id': 'owner_id',
            'owner_name': 'owner_name',
            'owner_type': 'owner_type',
            'response': 'response',
            'text': 'text',
            'title': 'title'
        }

        self.__date = _date
        self._duration = duration
        self._event_id = event_id
        self._importance = importance
        self._owner_id = owner_id
        self._owner_name = owner_name
        self._owner_type = owner_type
        self._response = response
        self._text = text
        self._title = title

    @classmethod
    def from_dict(cls, dikt: dict) -> 'GetCharactersCharacterIdCalendarEventIdOk':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The get_characters_character_id_calendar_event_id_ok of this GetCharactersCharacterIdCalendarEventIdOk.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def _date(self):
        """Gets the _date of this GetCharactersCharacterIdCalendarEventIdOk.

        date string

        :return: The _date of this GetCharactersCharacterIdCalendarEventIdOk.
        :rtype: datetime
        """
        return self.__date

    @_date.setter
    def _date(self, _date):
        """Sets the _date of this GetCharactersCharacterIdCalendarEventIdOk.

        date string

        :param _date: The _date of this GetCharactersCharacterIdCalendarEventIdOk.
        :type _date: datetime
        """
        if _date is None:
            raise ValueError("Invalid value for `_date`, must not be `None`")

        self.__date = _date

    @property
    def duration(self):
        """Gets the duration of this GetCharactersCharacterIdCalendarEventIdOk.

        Length in minutes

        :return: The duration of this GetCharactersCharacterIdCalendarEventIdOk.
        :rtype: int
        """
        return self._duration

    @duration.setter
    def duration(self, duration):
        """Sets the duration of this GetCharactersCharacterIdCalendarEventIdOk.

        Length in minutes

        :param duration: The duration of this GetCharactersCharacterIdCalendarEventIdOk.
        :type duration: int
        """
        if duration is None:
            raise ValueError("Invalid value for `duration`, must not be `None`")

        self._duration = duration

    @property
    def event_id(self):
        """Gets the event_id of this GetCharactersCharacterIdCalendarEventIdOk.

        event_id integer

        :return: The event_id of this GetCharactersCharacterIdCalendarEventIdOk.
        :rtype: int
        """
        return self._event_id

    @event_id.setter
    def event_id(self, event_id):
        """Sets the event_id of this GetCharactersCharacterIdCalendarEventIdOk.

        event_id integer

        :param event_id: The event_id of this GetCharactersCharacterIdCalendarEventIdOk.
        :type event_id: int
        """
        if event_id is None:
            raise ValueError("Invalid value for `event_id`, must not be `None`")

        self._event_id = event_id

    @property
    def importance(self):
        """Gets the importance of this GetCharactersCharacterIdCalendarEventIdOk.

        importance integer

        :return: The importance of this GetCharactersCharacterIdCalendarEventIdOk.
        :rtype: int
        """
        return self._importance

    @importance.setter
    def importance(self, importance):
        """Sets the importance of this GetCharactersCharacterIdCalendarEventIdOk.

        importance integer

        :param importance: The importance of this GetCharactersCharacterIdCalendarEventIdOk.
        :type importance: int
        """
        if importance is None:
            raise ValueError("Invalid value for `importance`, must not be `None`")

        self._importance = importance

    @property
    def owner_id(self):
        """Gets the owner_id of this GetCharactersCharacterIdCalendarEventIdOk.

        owner_id integer

        :return: The owner_id of this GetCharactersCharacterIdCalendarEventIdOk.
        :rtype: int
        """
        return self._owner_id

    @owner_id.setter
    def owner_id(self, owner_id):
        """Sets the owner_id of this GetCharactersCharacterIdCalendarEventIdOk.

        owner_id integer

        :param owner_id: The owner_id of this GetCharactersCharacterIdCalendarEventIdOk.
        :type owner_id: int
        """
        if owner_id is None:
            raise ValueError("Invalid value for `owner_id`, must not be `None`")

        self._owner_id = owner_id

    @property
    def owner_name(self):
        """Gets the owner_name of this GetCharactersCharacterIdCalendarEventIdOk.

        owner_name string

        :return: The owner_name of this GetCharactersCharacterIdCalendarEventIdOk.
        :rtype: str
        """
        return self._owner_name

    @owner_name.setter
    def owner_name(self, owner_name):
        """Sets the owner_name of this GetCharactersCharacterIdCalendarEventIdOk.

        owner_name string

        :param owner_name: The owner_name of this GetCharactersCharacterIdCalendarEventIdOk.
        :type owner_name: str
        """
        if owner_name is None:
            raise ValueError("Invalid value for `owner_name`, must not be `None`")

        self._owner_name = owner_name

    @property
    def owner_type(self):
        """Gets the owner_type of this GetCharactersCharacterIdCalendarEventIdOk.

        owner_type string

        :return: The owner_type of this GetCharactersCharacterIdCalendarEventIdOk.
        :rtype: str
        """
        return self._owner_type

    @owner_type.setter
    def owner_type(self, owner_type):
        """Sets the owner_type of this GetCharactersCharacterIdCalendarEventIdOk.

        owner_type string

        :param owner_type: The owner_type of this GetCharactersCharacterIdCalendarEventIdOk.
        :type owner_type: str
        """
        allowed_values = ["eve_server", "corporation", "faction", "character", "alliance"]  # noqa: E501
        if owner_type not in allowed_values:
            raise ValueError(
                "Invalid value for `owner_type` ({0}), must be one of {1}"
                .format(owner_type, allowed_values)
            )

        self._owner_type = owner_type

    @property
    def response(self):
        """Gets the response of this GetCharactersCharacterIdCalendarEventIdOk.

        response string

        :return: The response of this GetCharactersCharacterIdCalendarEventIdOk.
        :rtype: str
        """
        return self._response

    @response.setter
    def response(self, response):
        """Sets the response of this GetCharactersCharacterIdCalendarEventIdOk.

        response string

        :param response: The response of this GetCharactersCharacterIdCalendarEventIdOk.
        :type response: str
        """
        if response is None:
            raise ValueError("Invalid value for `response`, must not be `None`")

        self._response = response

    @property
    def text(self):
        """Gets the text of this GetCharactersCharacterIdCalendarEventIdOk.

        text string

        :return: The text of this GetCharactersCharacterIdCalendarEventIdOk.
        :rtype: str
        """
        return self._text

    @text.setter
    def text(self, text):
        """Sets the text of this GetCharactersCharacterIdCalendarEventIdOk.

        text string

        :param text: The text of this GetCharactersCharacterIdCalendarEventIdOk.
        :type text: str
        """
        if text is None:
            raise ValueError("Invalid value for `text`, must not be `None`")

        self._text = text

    @property
    def title(self):
        """Gets the title of this GetCharactersCharacterIdCalendarEventIdOk.

        title string

        :return: The title of this GetCharactersCharacterIdCalendarEventIdOk.
        :rtype: str
        """
        return self._title

    @title.setter
    def title(self, title):
        """Sets the title of this GetCharactersCharacterIdCalendarEventIdOk.

        title string

        :param title: The title of this GetCharactersCharacterIdCalendarEventIdOk.
        :type title: str
        """
        if title is None:
            raise ValueError("Invalid value for `title`, must not be `None`")

        self._title = title
