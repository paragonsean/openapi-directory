# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class GetUniverseSchematicsSchematicIdOk(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, cycle_time: int=None, schematic_name: str=None):
        """GetUniverseSchematicsSchematicIdOk - a model defined in OpenAPI

        :param cycle_time: The cycle_time of this GetUniverseSchematicsSchematicIdOk.
        :param schematic_name: The schematic_name of this GetUniverseSchematicsSchematicIdOk.
        """
        self.openapi_types = {
            'cycle_time': int,
            'schematic_name': str
        }

        self.attribute_map = {
            'cycle_time': 'cycle_time',
            'schematic_name': 'schematic_name'
        }

        self._cycle_time = cycle_time
        self._schematic_name = schematic_name

    @classmethod
    def from_dict(cls, dikt: dict) -> 'GetUniverseSchematicsSchematicIdOk':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The get_universe_schematics_schematic_id_ok of this GetUniverseSchematicsSchematicIdOk.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def cycle_time(self):
        """Gets the cycle_time of this GetUniverseSchematicsSchematicIdOk.

        Time in seconds to process a run

        :return: The cycle_time of this GetUniverseSchematicsSchematicIdOk.
        :rtype: int
        """
        return self._cycle_time

    @cycle_time.setter
    def cycle_time(self, cycle_time):
        """Sets the cycle_time of this GetUniverseSchematicsSchematicIdOk.

        Time in seconds to process a run

        :param cycle_time: The cycle_time of this GetUniverseSchematicsSchematicIdOk.
        :type cycle_time: int
        """
        if cycle_time is None:
            raise ValueError("Invalid value for `cycle_time`, must not be `None`")

        self._cycle_time = cycle_time

    @property
    def schematic_name(self):
        """Gets the schematic_name of this GetUniverseSchematicsSchematicIdOk.

        schematic_name string

        :return: The schematic_name of this GetUniverseSchematicsSchematicIdOk.
        :rtype: str
        """
        return self._schematic_name

    @schematic_name.setter
    def schematic_name(self, schematic_name):
        """Sets the schematic_name of this GetUniverseSchematicsSchematicIdOk.

        schematic_name string

        :param schematic_name: The schematic_name of this GetUniverseSchematicsSchematicIdOk.
        :type schematic_name: str
        """
        if schematic_name is None:
            raise ValueError("Invalid value for `schematic_name`, must not be `None`")

        self._schematic_name = schematic_name
