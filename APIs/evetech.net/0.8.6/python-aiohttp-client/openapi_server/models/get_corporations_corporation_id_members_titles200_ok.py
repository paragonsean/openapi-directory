# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class GetCorporationsCorporationIdMembersTitles200Ok(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, character_id: int=None, titles: List[int]=None):
        """GetCorporationsCorporationIdMembersTitles200Ok - a model defined in OpenAPI

        :param character_id: The character_id of this GetCorporationsCorporationIdMembersTitles200Ok.
        :param titles: The titles of this GetCorporationsCorporationIdMembersTitles200Ok.
        """
        self.openapi_types = {
            'character_id': int,
            'titles': List[int]
        }

        self.attribute_map = {
            'character_id': 'character_id',
            'titles': 'titles'
        }

        self._character_id = character_id
        self._titles = titles

    @classmethod
    def from_dict(cls, dikt: dict) -> 'GetCorporationsCorporationIdMembersTitles200Ok':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The get_corporations_corporation_id_members_titles_200_ok of this GetCorporationsCorporationIdMembersTitles200Ok.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def character_id(self):
        """Gets the character_id of this GetCorporationsCorporationIdMembersTitles200Ok.

        character_id integer

        :return: The character_id of this GetCorporationsCorporationIdMembersTitles200Ok.
        :rtype: int
        """
        return self._character_id

    @character_id.setter
    def character_id(self, character_id):
        """Sets the character_id of this GetCorporationsCorporationIdMembersTitles200Ok.

        character_id integer

        :param character_id: The character_id of this GetCorporationsCorporationIdMembersTitles200Ok.
        :type character_id: int
        """
        if character_id is None:
            raise ValueError("Invalid value for `character_id`, must not be `None`")

        self._character_id = character_id

    @property
    def titles(self):
        """Gets the titles of this GetCorporationsCorporationIdMembersTitles200Ok.

        A list of title_id

        :return: The titles of this GetCorporationsCorporationIdMembersTitles200Ok.
        :rtype: List[int]
        """
        return self._titles

    @titles.setter
    def titles(self, titles):
        """Sets the titles of this GetCorporationsCorporationIdMembersTitles200Ok.

        A list of title_id

        :param titles: The titles of this GetCorporationsCorporationIdMembersTitles200Ok.
        :type titles: List[int]
        """
        if titles is None:
            raise ValueError("Invalid value for `titles`, must not be `None`")
        if titles is not None and len(titles) > 16:
            raise ValueError("Invalid value for `titles`, number of items must be less than or equal to `16`")

        self._titles = titles
