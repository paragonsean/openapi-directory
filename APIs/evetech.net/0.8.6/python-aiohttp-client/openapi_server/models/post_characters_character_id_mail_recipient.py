# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class PostCharactersCharacterIdMailRecipient(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, recipient_id: int=None, recipient_type: str=None):
        """PostCharactersCharacterIdMailRecipient - a model defined in OpenAPI

        :param recipient_id: The recipient_id of this PostCharactersCharacterIdMailRecipient.
        :param recipient_type: The recipient_type of this PostCharactersCharacterIdMailRecipient.
        """
        self.openapi_types = {
            'recipient_id': int,
            'recipient_type': str
        }

        self.attribute_map = {
            'recipient_id': 'recipient_id',
            'recipient_type': 'recipient_type'
        }

        self._recipient_id = recipient_id
        self._recipient_type = recipient_type

    @classmethod
    def from_dict(cls, dikt: dict) -> 'PostCharactersCharacterIdMailRecipient':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The post_characters_character_id_mail_recipient of this PostCharactersCharacterIdMailRecipient.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def recipient_id(self):
        """Gets the recipient_id of this PostCharactersCharacterIdMailRecipient.

        recipient_id integer

        :return: The recipient_id of this PostCharactersCharacterIdMailRecipient.
        :rtype: int
        """
        return self._recipient_id

    @recipient_id.setter
    def recipient_id(self, recipient_id):
        """Sets the recipient_id of this PostCharactersCharacterIdMailRecipient.

        recipient_id integer

        :param recipient_id: The recipient_id of this PostCharactersCharacterIdMailRecipient.
        :type recipient_id: int
        """
        if recipient_id is None:
            raise ValueError("Invalid value for `recipient_id`, must not be `None`")

        self._recipient_id = recipient_id

    @property
    def recipient_type(self):
        """Gets the recipient_type of this PostCharactersCharacterIdMailRecipient.

        recipient_type string

        :return: The recipient_type of this PostCharactersCharacterIdMailRecipient.
        :rtype: str
        """
        return self._recipient_type

    @recipient_type.setter
    def recipient_type(self, recipient_type):
        """Sets the recipient_type of this PostCharactersCharacterIdMailRecipient.

        recipient_type string

        :param recipient_type: The recipient_type of this PostCharactersCharacterIdMailRecipient.
        :type recipient_type: str
        """
        allowed_values = ["alliance", "character", "corporation", "mailing_list"]  # noqa: E501
        if recipient_type not in allowed_values:
            raise ValueError(
                "Invalid value for `recipient_type` ({0}), must be one of {1}"
                .format(recipient_type, allowed_values)
            )

        self._recipient_type = recipient_type
