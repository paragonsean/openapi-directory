# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class GetLoyaltyStoresCorporationIdOffersRequiredItem(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, quantity: int=None, type_id: int=None):
        """GetLoyaltyStoresCorporationIdOffersRequiredItem - a model defined in OpenAPI

        :param quantity: The quantity of this GetLoyaltyStoresCorporationIdOffersRequiredItem.
        :param type_id: The type_id of this GetLoyaltyStoresCorporationIdOffersRequiredItem.
        """
        self.openapi_types = {
            'quantity': int,
            'type_id': int
        }

        self.attribute_map = {
            'quantity': 'quantity',
            'type_id': 'type_id'
        }

        self._quantity = quantity
        self._type_id = type_id

    @classmethod
    def from_dict(cls, dikt: dict) -> 'GetLoyaltyStoresCorporationIdOffersRequiredItem':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The get_loyalty_stores_corporation_id_offers_required_item of this GetLoyaltyStoresCorporationIdOffersRequiredItem.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def quantity(self):
        """Gets the quantity of this GetLoyaltyStoresCorporationIdOffersRequiredItem.

        quantity integer

        :return: The quantity of this GetLoyaltyStoresCorporationIdOffersRequiredItem.
        :rtype: int
        """
        return self._quantity

    @quantity.setter
    def quantity(self, quantity):
        """Sets the quantity of this GetLoyaltyStoresCorporationIdOffersRequiredItem.

        quantity integer

        :param quantity: The quantity of this GetLoyaltyStoresCorporationIdOffersRequiredItem.
        :type quantity: int
        """
        if quantity is None:
            raise ValueError("Invalid value for `quantity`, must not be `None`")

        self._quantity = quantity

    @property
    def type_id(self):
        """Gets the type_id of this GetLoyaltyStoresCorporationIdOffersRequiredItem.

        type_id integer

        :return: The type_id of this GetLoyaltyStoresCorporationIdOffersRequiredItem.
        :rtype: int
        """
        return self._type_id

    @type_id.setter
    def type_id(self, type_id):
        """Sets the type_id of this GetLoyaltyStoresCorporationIdOffersRequiredItem.

        type_id integer

        :param type_id: The type_id of this GetLoyaltyStoresCorporationIdOffersRequiredItem.
        :type type_id: int
        """
        if type_id is None:
            raise ValueError("Invalid value for `type_id`, must not be `None`")

        self._type_id = type_id
