# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class PostCharactersCharacterIdFittingsCreated(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, fitting_id: int=None):
        """PostCharactersCharacterIdFittingsCreated - a model defined in OpenAPI

        :param fitting_id: The fitting_id of this PostCharactersCharacterIdFittingsCreated.
        """
        self.openapi_types = {
            'fitting_id': int
        }

        self.attribute_map = {
            'fitting_id': 'fitting_id'
        }

        self._fitting_id = fitting_id

    @classmethod
    def from_dict(cls, dikt: dict) -> 'PostCharactersCharacterIdFittingsCreated':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The post_characters_character_id_fittings_created of this PostCharactersCharacterIdFittingsCreated.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def fitting_id(self):
        """Gets the fitting_id of this PostCharactersCharacterIdFittingsCreated.

        fitting_id integer

        :return: The fitting_id of this PostCharactersCharacterIdFittingsCreated.
        :rtype: int
        """
        return self._fitting_id

    @fitting_id.setter
    def fitting_id(self, fitting_id):
        """Sets the fitting_id of this PostCharactersCharacterIdFittingsCreated.

        fitting_id integer

        :param fitting_id: The fitting_id of this PostCharactersCharacterIdFittingsCreated.
        :type fitting_id: int
        """
        if fitting_id is None:
            raise ValueError("Invalid value for `fitting_id`, must not be `None`")

        self._fitting_id = fitting_id
