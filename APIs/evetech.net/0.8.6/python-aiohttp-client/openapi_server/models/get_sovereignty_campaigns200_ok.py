# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.get_sovereignty_campaigns_participant import GetSovereigntyCampaignsParticipant
from openapi_server import util


class GetSovereigntyCampaigns200Ok(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, attackers_score: float=None, campaign_id: int=None, constellation_id: int=None, defender_id: int=None, defender_score: float=None, event_type: str=None, participants: List[GetSovereigntyCampaignsParticipant]=None, solar_system_id: int=None, start_time: datetime=None, structure_id: int=None):
        """GetSovereigntyCampaigns200Ok - a model defined in OpenAPI

        :param attackers_score: The attackers_score of this GetSovereigntyCampaigns200Ok.
        :param campaign_id: The campaign_id of this GetSovereigntyCampaigns200Ok.
        :param constellation_id: The constellation_id of this GetSovereigntyCampaigns200Ok.
        :param defender_id: The defender_id of this GetSovereigntyCampaigns200Ok.
        :param defender_score: The defender_score of this GetSovereigntyCampaigns200Ok.
        :param event_type: The event_type of this GetSovereigntyCampaigns200Ok.
        :param participants: The participants of this GetSovereigntyCampaigns200Ok.
        :param solar_system_id: The solar_system_id of this GetSovereigntyCampaigns200Ok.
        :param start_time: The start_time of this GetSovereigntyCampaigns200Ok.
        :param structure_id: The structure_id of this GetSovereigntyCampaigns200Ok.
        """
        self.openapi_types = {
            'attackers_score': float,
            'campaign_id': int,
            'constellation_id': int,
            'defender_id': int,
            'defender_score': float,
            'event_type': str,
            'participants': List[GetSovereigntyCampaignsParticipant],
            'solar_system_id': int,
            'start_time': datetime,
            'structure_id': int
        }

        self.attribute_map = {
            'attackers_score': 'attackers_score',
            'campaign_id': 'campaign_id',
            'constellation_id': 'constellation_id',
            'defender_id': 'defender_id',
            'defender_score': 'defender_score',
            'event_type': 'event_type',
            'participants': 'participants',
            'solar_system_id': 'solar_system_id',
            'start_time': 'start_time',
            'structure_id': 'structure_id'
        }

        self._attackers_score = attackers_score
        self._campaign_id = campaign_id
        self._constellation_id = constellation_id
        self._defender_id = defender_id
        self._defender_score = defender_score
        self._event_type = event_type
        self._participants = participants
        self._solar_system_id = solar_system_id
        self._start_time = start_time
        self._structure_id = structure_id

    @classmethod
    def from_dict(cls, dikt: dict) -> 'GetSovereigntyCampaigns200Ok':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The get_sovereignty_campaigns_200_ok of this GetSovereigntyCampaigns200Ok.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def attackers_score(self):
        """Gets the attackers_score of this GetSovereigntyCampaigns200Ok.

        Score for all attacking parties, only present in Defense Events. 

        :return: The attackers_score of this GetSovereigntyCampaigns200Ok.
        :rtype: float
        """
        return self._attackers_score

    @attackers_score.setter
    def attackers_score(self, attackers_score):
        """Sets the attackers_score of this GetSovereigntyCampaigns200Ok.

        Score for all attacking parties, only present in Defense Events. 

        :param attackers_score: The attackers_score of this GetSovereigntyCampaigns200Ok.
        :type attackers_score: float
        """

        self._attackers_score = attackers_score

    @property
    def campaign_id(self):
        """Gets the campaign_id of this GetSovereigntyCampaigns200Ok.

        Unique ID for this campaign.

        :return: The campaign_id of this GetSovereigntyCampaigns200Ok.
        :rtype: int
        """
        return self._campaign_id

    @campaign_id.setter
    def campaign_id(self, campaign_id):
        """Sets the campaign_id of this GetSovereigntyCampaigns200Ok.

        Unique ID for this campaign.

        :param campaign_id: The campaign_id of this GetSovereigntyCampaigns200Ok.
        :type campaign_id: int
        """
        if campaign_id is None:
            raise ValueError("Invalid value for `campaign_id`, must not be `None`")

        self._campaign_id = campaign_id

    @property
    def constellation_id(self):
        """Gets the constellation_id of this GetSovereigntyCampaigns200Ok.

        The constellation in which the campaign will take place. 

        :return: The constellation_id of this GetSovereigntyCampaigns200Ok.
        :rtype: int
        """
        return self._constellation_id

    @constellation_id.setter
    def constellation_id(self, constellation_id):
        """Sets the constellation_id of this GetSovereigntyCampaigns200Ok.

        The constellation in which the campaign will take place. 

        :param constellation_id: The constellation_id of this GetSovereigntyCampaigns200Ok.
        :type constellation_id: int
        """
        if constellation_id is None:
            raise ValueError("Invalid value for `constellation_id`, must not be `None`")

        self._constellation_id = constellation_id

    @property
    def defender_id(self):
        """Gets the defender_id of this GetSovereigntyCampaigns200Ok.

        Defending alliance, only present in Defense Events 

        :return: The defender_id of this GetSovereigntyCampaigns200Ok.
        :rtype: int
        """
        return self._defender_id

    @defender_id.setter
    def defender_id(self, defender_id):
        """Sets the defender_id of this GetSovereigntyCampaigns200Ok.

        Defending alliance, only present in Defense Events 

        :param defender_id: The defender_id of this GetSovereigntyCampaigns200Ok.
        :type defender_id: int
        """

        self._defender_id = defender_id

    @property
    def defender_score(self):
        """Gets the defender_score of this GetSovereigntyCampaigns200Ok.

        Score for the defending alliance, only present in Defense Events. 

        :return: The defender_score of this GetSovereigntyCampaigns200Ok.
        :rtype: float
        """
        return self._defender_score

    @defender_score.setter
    def defender_score(self, defender_score):
        """Sets the defender_score of this GetSovereigntyCampaigns200Ok.

        Score for the defending alliance, only present in Defense Events. 

        :param defender_score: The defender_score of this GetSovereigntyCampaigns200Ok.
        :type defender_score: float
        """

        self._defender_score = defender_score

    @property
    def event_type(self):
        """Gets the event_type of this GetSovereigntyCampaigns200Ok.

        Type of event this campaign is for. tcu_defense, ihub_defense and station_defense are referred to as \"Defense Events\", station_freeport as \"Freeport Events\". 

        :return: The event_type of this GetSovereigntyCampaigns200Ok.
        :rtype: str
        """
        return self._event_type

    @event_type.setter
    def event_type(self, event_type):
        """Sets the event_type of this GetSovereigntyCampaigns200Ok.

        Type of event this campaign is for. tcu_defense, ihub_defense and station_defense are referred to as \"Defense Events\", station_freeport as \"Freeport Events\". 

        :param event_type: The event_type of this GetSovereigntyCampaigns200Ok.
        :type event_type: str
        """
        allowed_values = ["tcu_defense", "ihub_defense", "station_defense", "station_freeport"]  # noqa: E501
        if event_type not in allowed_values:
            raise ValueError(
                "Invalid value for `event_type` ({0}), must be one of {1}"
                .format(event_type, allowed_values)
            )

        self._event_type = event_type

    @property
    def participants(self):
        """Gets the participants of this GetSovereigntyCampaigns200Ok.

        Alliance participating and their respective scores, only present in Freeport Events. 

        :return: The participants of this GetSovereigntyCampaigns200Ok.
        :rtype: List[GetSovereigntyCampaignsParticipant]
        """
        return self._participants

    @participants.setter
    def participants(self, participants):
        """Sets the participants of this GetSovereigntyCampaigns200Ok.

        Alliance participating and their respective scores, only present in Freeport Events. 

        :param participants: The participants of this GetSovereigntyCampaigns200Ok.
        :type participants: List[GetSovereigntyCampaignsParticipant]
        """
        if participants is not None and len(participants) > 5000:
            raise ValueError("Invalid value for `participants`, number of items must be less than or equal to `5000`")

        self._participants = participants

    @property
    def solar_system_id(self):
        """Gets the solar_system_id of this GetSovereigntyCampaigns200Ok.

        The solar system the structure is located in. 

        :return: The solar_system_id of this GetSovereigntyCampaigns200Ok.
        :rtype: int
        """
        return self._solar_system_id

    @solar_system_id.setter
    def solar_system_id(self, solar_system_id):
        """Sets the solar_system_id of this GetSovereigntyCampaigns200Ok.

        The solar system the structure is located in. 

        :param solar_system_id: The solar_system_id of this GetSovereigntyCampaigns200Ok.
        :type solar_system_id: int
        """
        if solar_system_id is None:
            raise ValueError("Invalid value for `solar_system_id`, must not be `None`")

        self._solar_system_id = solar_system_id

    @property
    def start_time(self):
        """Gets the start_time of this GetSovereigntyCampaigns200Ok.

        Time the event is scheduled to start. 

        :return: The start_time of this GetSovereigntyCampaigns200Ok.
        :rtype: datetime
        """
        return self._start_time

    @start_time.setter
    def start_time(self, start_time):
        """Sets the start_time of this GetSovereigntyCampaigns200Ok.

        Time the event is scheduled to start. 

        :param start_time: The start_time of this GetSovereigntyCampaigns200Ok.
        :type start_time: datetime
        """
        if start_time is None:
            raise ValueError("Invalid value for `start_time`, must not be `None`")

        self._start_time = start_time

    @property
    def structure_id(self):
        """Gets the structure_id of this GetSovereigntyCampaigns200Ok.

        The structure item ID that is related to this campaign. 

        :return: The structure_id of this GetSovereigntyCampaigns200Ok.
        :rtype: int
        """
        return self._structure_id

    @structure_id.setter
    def structure_id(self, structure_id):
        """Sets the structure_id of this GetSovereigntyCampaigns200Ok.

        The structure item ID that is related to this campaign. 

        :param structure_id: The structure_id of this GetSovereigntyCampaigns200Ok.
        :type structure_id: int
        """
        if structure_id is None:
            raise ValueError("Invalid value for `structure_id`, must not be `None`")

        self._structure_id = structure_id
