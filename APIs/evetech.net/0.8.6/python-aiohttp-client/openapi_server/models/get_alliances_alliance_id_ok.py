# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class GetAlliancesAllianceIdOk(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, creator_corporation_id: int=None, creator_id: int=None, date_founded: datetime=None, executor_corporation_id: int=None, faction_id: int=None, name: str=None, ticker: str=None):
        """GetAlliancesAllianceIdOk - a model defined in OpenAPI

        :param creator_corporation_id: The creator_corporation_id of this GetAlliancesAllianceIdOk.
        :param creator_id: The creator_id of this GetAlliancesAllianceIdOk.
        :param date_founded: The date_founded of this GetAlliancesAllianceIdOk.
        :param executor_corporation_id: The executor_corporation_id of this GetAlliancesAllianceIdOk.
        :param faction_id: The faction_id of this GetAlliancesAllianceIdOk.
        :param name: The name of this GetAlliancesAllianceIdOk.
        :param ticker: The ticker of this GetAlliancesAllianceIdOk.
        """
        self.openapi_types = {
            'creator_corporation_id': int,
            'creator_id': int,
            'date_founded': datetime,
            'executor_corporation_id': int,
            'faction_id': int,
            'name': str,
            'ticker': str
        }

        self.attribute_map = {
            'creator_corporation_id': 'creator_corporation_id',
            'creator_id': 'creator_id',
            'date_founded': 'date_founded',
            'executor_corporation_id': 'executor_corporation_id',
            'faction_id': 'faction_id',
            'name': 'name',
            'ticker': 'ticker'
        }

        self._creator_corporation_id = creator_corporation_id
        self._creator_id = creator_id
        self._date_founded = date_founded
        self._executor_corporation_id = executor_corporation_id
        self._faction_id = faction_id
        self._name = name
        self._ticker = ticker

    @classmethod
    def from_dict(cls, dikt: dict) -> 'GetAlliancesAllianceIdOk':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The get_alliances_alliance_id_ok of this GetAlliancesAllianceIdOk.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def creator_corporation_id(self):
        """Gets the creator_corporation_id of this GetAlliancesAllianceIdOk.

        ID of the corporation that created the alliance

        :return: The creator_corporation_id of this GetAlliancesAllianceIdOk.
        :rtype: int
        """
        return self._creator_corporation_id

    @creator_corporation_id.setter
    def creator_corporation_id(self, creator_corporation_id):
        """Sets the creator_corporation_id of this GetAlliancesAllianceIdOk.

        ID of the corporation that created the alliance

        :param creator_corporation_id: The creator_corporation_id of this GetAlliancesAllianceIdOk.
        :type creator_corporation_id: int
        """
        if creator_corporation_id is None:
            raise ValueError("Invalid value for `creator_corporation_id`, must not be `None`")

        self._creator_corporation_id = creator_corporation_id

    @property
    def creator_id(self):
        """Gets the creator_id of this GetAlliancesAllianceIdOk.

        ID of the character that created the alliance

        :return: The creator_id of this GetAlliancesAllianceIdOk.
        :rtype: int
        """
        return self._creator_id

    @creator_id.setter
    def creator_id(self, creator_id):
        """Sets the creator_id of this GetAlliancesAllianceIdOk.

        ID of the character that created the alliance

        :param creator_id: The creator_id of this GetAlliancesAllianceIdOk.
        :type creator_id: int
        """
        if creator_id is None:
            raise ValueError("Invalid value for `creator_id`, must not be `None`")

        self._creator_id = creator_id

    @property
    def date_founded(self):
        """Gets the date_founded of this GetAlliancesAllianceIdOk.

        date_founded string

        :return: The date_founded of this GetAlliancesAllianceIdOk.
        :rtype: datetime
        """
        return self._date_founded

    @date_founded.setter
    def date_founded(self, date_founded):
        """Sets the date_founded of this GetAlliancesAllianceIdOk.

        date_founded string

        :param date_founded: The date_founded of this GetAlliancesAllianceIdOk.
        :type date_founded: datetime
        """
        if date_founded is None:
            raise ValueError("Invalid value for `date_founded`, must not be `None`")

        self._date_founded = date_founded

    @property
    def executor_corporation_id(self):
        """Gets the executor_corporation_id of this GetAlliancesAllianceIdOk.

        the executor corporation ID, if this alliance is not closed

        :return: The executor_corporation_id of this GetAlliancesAllianceIdOk.
        :rtype: int
        """
        return self._executor_corporation_id

    @executor_corporation_id.setter
    def executor_corporation_id(self, executor_corporation_id):
        """Sets the executor_corporation_id of this GetAlliancesAllianceIdOk.

        the executor corporation ID, if this alliance is not closed

        :param executor_corporation_id: The executor_corporation_id of this GetAlliancesAllianceIdOk.
        :type executor_corporation_id: int
        """

        self._executor_corporation_id = executor_corporation_id

    @property
    def faction_id(self):
        """Gets the faction_id of this GetAlliancesAllianceIdOk.

        Faction ID this alliance is fighting for, if this alliance is enlisted in factional warfare

        :return: The faction_id of this GetAlliancesAllianceIdOk.
        :rtype: int
        """
        return self._faction_id

    @faction_id.setter
    def faction_id(self, faction_id):
        """Sets the faction_id of this GetAlliancesAllianceIdOk.

        Faction ID this alliance is fighting for, if this alliance is enlisted in factional warfare

        :param faction_id: The faction_id of this GetAlliancesAllianceIdOk.
        :type faction_id: int
        """

        self._faction_id = faction_id

    @property
    def name(self):
        """Gets the name of this GetAlliancesAllianceIdOk.

        the full name of the alliance

        :return: The name of this GetAlliancesAllianceIdOk.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this GetAlliancesAllianceIdOk.

        the full name of the alliance

        :param name: The name of this GetAlliancesAllianceIdOk.
        :type name: str
        """
        if name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")

        self._name = name

    @property
    def ticker(self):
        """Gets the ticker of this GetAlliancesAllianceIdOk.

        the short name of the alliance

        :return: The ticker of this GetAlliancesAllianceIdOk.
        :rtype: str
        """
        return self._ticker

    @ticker.setter
    def ticker(self, ticker):
        """Sets the ticker of this GetAlliancesAllianceIdOk.

        the short name of the alliance

        :param ticker: The ticker of this GetAlliancesAllianceIdOk.
        :type ticker: str
        """
        if ticker is None:
            raise ValueError("Invalid value for `ticker`, must not be `None`")

        self._ticker = ticker
