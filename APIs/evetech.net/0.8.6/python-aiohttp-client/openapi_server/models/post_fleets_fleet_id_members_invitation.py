# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class PostFleetsFleetIdMembersInvitation(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, character_id: int=None, role: str=None, squad_id: int=None, wing_id: int=None):
        """PostFleetsFleetIdMembersInvitation - a model defined in OpenAPI

        :param character_id: The character_id of this PostFleetsFleetIdMembersInvitation.
        :param role: The role of this PostFleetsFleetIdMembersInvitation.
        :param squad_id: The squad_id of this PostFleetsFleetIdMembersInvitation.
        :param wing_id: The wing_id of this PostFleetsFleetIdMembersInvitation.
        """
        self.openapi_types = {
            'character_id': int,
            'role': str,
            'squad_id': int,
            'wing_id': int
        }

        self.attribute_map = {
            'character_id': 'character_id',
            'role': 'role',
            'squad_id': 'squad_id',
            'wing_id': 'wing_id'
        }

        self._character_id = character_id
        self._role = role
        self._squad_id = squad_id
        self._wing_id = wing_id

    @classmethod
    def from_dict(cls, dikt: dict) -> 'PostFleetsFleetIdMembersInvitation':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The post_fleets_fleet_id_members_invitation of this PostFleetsFleetIdMembersInvitation.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def character_id(self):
        """Gets the character_id of this PostFleetsFleetIdMembersInvitation.

        The character you want to invite

        :return: The character_id of this PostFleetsFleetIdMembersInvitation.
        :rtype: int
        """
        return self._character_id

    @character_id.setter
    def character_id(self, character_id):
        """Sets the character_id of this PostFleetsFleetIdMembersInvitation.

        The character you want to invite

        :param character_id: The character_id of this PostFleetsFleetIdMembersInvitation.
        :type character_id: int
        """
        if character_id is None:
            raise ValueError("Invalid value for `character_id`, must not be `None`")

        self._character_id = character_id

    @property
    def role(self):
        """Gets the role of this PostFleetsFleetIdMembersInvitation.

        If a character is invited with the `fleet_commander` role, neither `wing_id` or `squad_id` should be specified. If a character is invited with the `wing_commander` role, only `wing_id` should be specified. If a character is invited with the `squad_commander` role, both `wing_id` and `squad_id` should be specified. If a character is invited with the `squad_member` role, `wing_id` and `squad_id` should either both be specified or not specified at all. If they aren’t specified, the invited character will join any squad with available positions.

        :return: The role of this PostFleetsFleetIdMembersInvitation.
        :rtype: str
        """
        return self._role

    @role.setter
    def role(self, role):
        """Sets the role of this PostFleetsFleetIdMembersInvitation.

        If a character is invited with the `fleet_commander` role, neither `wing_id` or `squad_id` should be specified. If a character is invited with the `wing_commander` role, only `wing_id` should be specified. If a character is invited with the `squad_commander` role, both `wing_id` and `squad_id` should be specified. If a character is invited with the `squad_member` role, `wing_id` and `squad_id` should either both be specified or not specified at all. If they aren’t specified, the invited character will join any squad with available positions.

        :param role: The role of this PostFleetsFleetIdMembersInvitation.
        :type role: str
        """
        allowed_values = ["fleet_commander", "wing_commander", "squad_commander", "squad_member"]  # noqa: E501
        if role not in allowed_values:
            raise ValueError(
                "Invalid value for `role` ({0}), must be one of {1}"
                .format(role, allowed_values)
            )

        self._role = role

    @property
    def squad_id(self):
        """Gets the squad_id of this PostFleetsFleetIdMembersInvitation.

        squad_id integer

        :return: The squad_id of this PostFleetsFleetIdMembersInvitation.
        :rtype: int
        """
        return self._squad_id

    @squad_id.setter
    def squad_id(self, squad_id):
        """Sets the squad_id of this PostFleetsFleetIdMembersInvitation.

        squad_id integer

        :param squad_id: The squad_id of this PostFleetsFleetIdMembersInvitation.
        :type squad_id: int
        """
        if squad_id is not None and squad_id < 0:
            raise ValueError("Invalid value for `squad_id`, must be a value greater than or equal to `0`")

        self._squad_id = squad_id

    @property
    def wing_id(self):
        """Gets the wing_id of this PostFleetsFleetIdMembersInvitation.

        wing_id integer

        :return: The wing_id of this PostFleetsFleetIdMembersInvitation.
        :rtype: int
        """
        return self._wing_id

    @wing_id.setter
    def wing_id(self, wing_id):
        """Sets the wing_id of this PostFleetsFleetIdMembersInvitation.

        wing_id integer

        :param wing_id: The wing_id of this PostFleetsFleetIdMembersInvitation.
        :type wing_id: int
        """
        if wing_id is not None and wing_id < 0:
            raise ValueError("Invalid value for `wing_id`, must be a value greater than or equal to `0`")

        self._wing_id = wing_id
