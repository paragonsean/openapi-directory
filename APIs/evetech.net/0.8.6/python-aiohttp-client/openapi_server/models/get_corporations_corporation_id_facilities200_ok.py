# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class GetCorporationsCorporationIdFacilities200Ok(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, facility_id: int=None, system_id: int=None, type_id: int=None):
        """GetCorporationsCorporationIdFacilities200Ok - a model defined in OpenAPI

        :param facility_id: The facility_id of this GetCorporationsCorporationIdFacilities200Ok.
        :param system_id: The system_id of this GetCorporationsCorporationIdFacilities200Ok.
        :param type_id: The type_id of this GetCorporationsCorporationIdFacilities200Ok.
        """
        self.openapi_types = {
            'facility_id': int,
            'system_id': int,
            'type_id': int
        }

        self.attribute_map = {
            'facility_id': 'facility_id',
            'system_id': 'system_id',
            'type_id': 'type_id'
        }

        self._facility_id = facility_id
        self._system_id = system_id
        self._type_id = type_id

    @classmethod
    def from_dict(cls, dikt: dict) -> 'GetCorporationsCorporationIdFacilities200Ok':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The get_corporations_corporation_id_facilities_200_ok of this GetCorporationsCorporationIdFacilities200Ok.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def facility_id(self):
        """Gets the facility_id of this GetCorporationsCorporationIdFacilities200Ok.

        facility_id integer

        :return: The facility_id of this GetCorporationsCorporationIdFacilities200Ok.
        :rtype: int
        """
        return self._facility_id

    @facility_id.setter
    def facility_id(self, facility_id):
        """Sets the facility_id of this GetCorporationsCorporationIdFacilities200Ok.

        facility_id integer

        :param facility_id: The facility_id of this GetCorporationsCorporationIdFacilities200Ok.
        :type facility_id: int
        """
        if facility_id is None:
            raise ValueError("Invalid value for `facility_id`, must not be `None`")

        self._facility_id = facility_id

    @property
    def system_id(self):
        """Gets the system_id of this GetCorporationsCorporationIdFacilities200Ok.

        system_id integer

        :return: The system_id of this GetCorporationsCorporationIdFacilities200Ok.
        :rtype: int
        """
        return self._system_id

    @system_id.setter
    def system_id(self, system_id):
        """Sets the system_id of this GetCorporationsCorporationIdFacilities200Ok.

        system_id integer

        :param system_id: The system_id of this GetCorporationsCorporationIdFacilities200Ok.
        :type system_id: int
        """
        if system_id is None:
            raise ValueError("Invalid value for `system_id`, must not be `None`")

        self._system_id = system_id

    @property
    def type_id(self):
        """Gets the type_id of this GetCorporationsCorporationIdFacilities200Ok.

        type_id integer

        :return: The type_id of this GetCorporationsCorporationIdFacilities200Ok.
        :rtype: int
        """
        return self._type_id

    @type_id.setter
    def type_id(self, type_id):
        """Sets the type_id of this GetCorporationsCorporationIdFacilities200Ok.

        type_id integer

        :param type_id: The type_id of this GetCorporationsCorporationIdFacilities200Ok.
        :type type_id: int
        """
        if type_id is None:
            raise ValueError("Invalid value for `type_id`, must not be `None`")

        self._type_id = type_id
