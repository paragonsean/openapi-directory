# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class GetCorporationsCorporationIdShareholders200Ok(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, share_count: int=None, shareholder_id: int=None, shareholder_type: str=None):
        """GetCorporationsCorporationIdShareholders200Ok - a model defined in OpenAPI

        :param share_count: The share_count of this GetCorporationsCorporationIdShareholders200Ok.
        :param shareholder_id: The shareholder_id of this GetCorporationsCorporationIdShareholders200Ok.
        :param shareholder_type: The shareholder_type of this GetCorporationsCorporationIdShareholders200Ok.
        """
        self.openapi_types = {
            'share_count': int,
            'shareholder_id': int,
            'shareholder_type': str
        }

        self.attribute_map = {
            'share_count': 'share_count',
            'shareholder_id': 'shareholder_id',
            'shareholder_type': 'shareholder_type'
        }

        self._share_count = share_count
        self._shareholder_id = shareholder_id
        self._shareholder_type = shareholder_type

    @classmethod
    def from_dict(cls, dikt: dict) -> 'GetCorporationsCorporationIdShareholders200Ok':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The get_corporations_corporation_id_shareholders_200_ok of this GetCorporationsCorporationIdShareholders200Ok.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def share_count(self):
        """Gets the share_count of this GetCorporationsCorporationIdShareholders200Ok.

        share_count integer

        :return: The share_count of this GetCorporationsCorporationIdShareholders200Ok.
        :rtype: int
        """
        return self._share_count

    @share_count.setter
    def share_count(self, share_count):
        """Sets the share_count of this GetCorporationsCorporationIdShareholders200Ok.

        share_count integer

        :param share_count: The share_count of this GetCorporationsCorporationIdShareholders200Ok.
        :type share_count: int
        """
        if share_count is None:
            raise ValueError("Invalid value for `share_count`, must not be `None`")

        self._share_count = share_count

    @property
    def shareholder_id(self):
        """Gets the shareholder_id of this GetCorporationsCorporationIdShareholders200Ok.

        shareholder_id integer

        :return: The shareholder_id of this GetCorporationsCorporationIdShareholders200Ok.
        :rtype: int
        """
        return self._shareholder_id

    @shareholder_id.setter
    def shareholder_id(self, shareholder_id):
        """Sets the shareholder_id of this GetCorporationsCorporationIdShareholders200Ok.

        shareholder_id integer

        :param shareholder_id: The shareholder_id of this GetCorporationsCorporationIdShareholders200Ok.
        :type shareholder_id: int
        """
        if shareholder_id is None:
            raise ValueError("Invalid value for `shareholder_id`, must not be `None`")

        self._shareholder_id = shareholder_id

    @property
    def shareholder_type(self):
        """Gets the shareholder_type of this GetCorporationsCorporationIdShareholders200Ok.

        shareholder_type string

        :return: The shareholder_type of this GetCorporationsCorporationIdShareholders200Ok.
        :rtype: str
        """
        return self._shareholder_type

    @shareholder_type.setter
    def shareholder_type(self, shareholder_type):
        """Sets the shareholder_type of this GetCorporationsCorporationIdShareholders200Ok.

        shareholder_type string

        :param shareholder_type: The shareholder_type of this GetCorporationsCorporationIdShareholders200Ok.
        :type shareholder_type: str
        """
        allowed_values = ["character", "corporation"]  # noqa: E501
        if shareholder_type not in allowed_values:
            raise ValueError(
                "Invalid value for `shareholder_type` ({0}), must be one of {1}"
                .format(shareholder_type, allowed_values)
            )

        self._shareholder_type = shareholder_type
