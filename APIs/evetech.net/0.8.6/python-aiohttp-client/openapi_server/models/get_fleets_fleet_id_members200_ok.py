# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class GetFleetsFleetIdMembers200Ok(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, character_id: int=None, join_time: datetime=None, role: str=None, role_name: str=None, ship_type_id: int=None, solar_system_id: int=None, squad_id: int=None, station_id: int=None, takes_fleet_warp: bool=None, wing_id: int=None):
        """GetFleetsFleetIdMembers200Ok - a model defined in OpenAPI

        :param character_id: The character_id of this GetFleetsFleetIdMembers200Ok.
        :param join_time: The join_time of this GetFleetsFleetIdMembers200Ok.
        :param role: The role of this GetFleetsFleetIdMembers200Ok.
        :param role_name: The role_name of this GetFleetsFleetIdMembers200Ok.
        :param ship_type_id: The ship_type_id of this GetFleetsFleetIdMembers200Ok.
        :param solar_system_id: The solar_system_id of this GetFleetsFleetIdMembers200Ok.
        :param squad_id: The squad_id of this GetFleetsFleetIdMembers200Ok.
        :param station_id: The station_id of this GetFleetsFleetIdMembers200Ok.
        :param takes_fleet_warp: The takes_fleet_warp of this GetFleetsFleetIdMembers200Ok.
        :param wing_id: The wing_id of this GetFleetsFleetIdMembers200Ok.
        """
        self.openapi_types = {
            'character_id': int,
            'join_time': datetime,
            'role': str,
            'role_name': str,
            'ship_type_id': int,
            'solar_system_id': int,
            'squad_id': int,
            'station_id': int,
            'takes_fleet_warp': bool,
            'wing_id': int
        }

        self.attribute_map = {
            'character_id': 'character_id',
            'join_time': 'join_time',
            'role': 'role',
            'role_name': 'role_name',
            'ship_type_id': 'ship_type_id',
            'solar_system_id': 'solar_system_id',
            'squad_id': 'squad_id',
            'station_id': 'station_id',
            'takes_fleet_warp': 'takes_fleet_warp',
            'wing_id': 'wing_id'
        }

        self._character_id = character_id
        self._join_time = join_time
        self._role = role
        self._role_name = role_name
        self._ship_type_id = ship_type_id
        self._solar_system_id = solar_system_id
        self._squad_id = squad_id
        self._station_id = station_id
        self._takes_fleet_warp = takes_fleet_warp
        self._wing_id = wing_id

    @classmethod
    def from_dict(cls, dikt: dict) -> 'GetFleetsFleetIdMembers200Ok':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The get_fleets_fleet_id_members_200_ok of this GetFleetsFleetIdMembers200Ok.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def character_id(self):
        """Gets the character_id of this GetFleetsFleetIdMembers200Ok.

        character_id integer

        :return: The character_id of this GetFleetsFleetIdMembers200Ok.
        :rtype: int
        """
        return self._character_id

    @character_id.setter
    def character_id(self, character_id):
        """Sets the character_id of this GetFleetsFleetIdMembers200Ok.

        character_id integer

        :param character_id: The character_id of this GetFleetsFleetIdMembers200Ok.
        :type character_id: int
        """
        if character_id is None:
            raise ValueError("Invalid value for `character_id`, must not be `None`")

        self._character_id = character_id

    @property
    def join_time(self):
        """Gets the join_time of this GetFleetsFleetIdMembers200Ok.

        join_time string

        :return: The join_time of this GetFleetsFleetIdMembers200Ok.
        :rtype: datetime
        """
        return self._join_time

    @join_time.setter
    def join_time(self, join_time):
        """Sets the join_time of this GetFleetsFleetIdMembers200Ok.

        join_time string

        :param join_time: The join_time of this GetFleetsFleetIdMembers200Ok.
        :type join_time: datetime
        """
        if join_time is None:
            raise ValueError("Invalid value for `join_time`, must not be `None`")

        self._join_time = join_time

    @property
    def role(self):
        """Gets the role of this GetFleetsFleetIdMembers200Ok.

        Member’s role in fleet

        :return: The role of this GetFleetsFleetIdMembers200Ok.
        :rtype: str
        """
        return self._role

    @role.setter
    def role(self, role):
        """Sets the role of this GetFleetsFleetIdMembers200Ok.

        Member’s role in fleet

        :param role: The role of this GetFleetsFleetIdMembers200Ok.
        :type role: str
        """
        allowed_values = ["fleet_commander", "wing_commander", "squad_commander", "squad_member"]  # noqa: E501
        if role not in allowed_values:
            raise ValueError(
                "Invalid value for `role` ({0}), must be one of {1}"
                .format(role, allowed_values)
            )

        self._role = role

    @property
    def role_name(self):
        """Gets the role_name of this GetFleetsFleetIdMembers200Ok.

        Localized role names

        :return: The role_name of this GetFleetsFleetIdMembers200Ok.
        :rtype: str
        """
        return self._role_name

    @role_name.setter
    def role_name(self, role_name):
        """Sets the role_name of this GetFleetsFleetIdMembers200Ok.

        Localized role names

        :param role_name: The role_name of this GetFleetsFleetIdMembers200Ok.
        :type role_name: str
        """
        if role_name is None:
            raise ValueError("Invalid value for `role_name`, must not be `None`")

        self._role_name = role_name

    @property
    def ship_type_id(self):
        """Gets the ship_type_id of this GetFleetsFleetIdMembers200Ok.

        ship_type_id integer

        :return: The ship_type_id of this GetFleetsFleetIdMembers200Ok.
        :rtype: int
        """
        return self._ship_type_id

    @ship_type_id.setter
    def ship_type_id(self, ship_type_id):
        """Sets the ship_type_id of this GetFleetsFleetIdMembers200Ok.

        ship_type_id integer

        :param ship_type_id: The ship_type_id of this GetFleetsFleetIdMembers200Ok.
        :type ship_type_id: int
        """
        if ship_type_id is None:
            raise ValueError("Invalid value for `ship_type_id`, must not be `None`")

        self._ship_type_id = ship_type_id

    @property
    def solar_system_id(self):
        """Gets the solar_system_id of this GetFleetsFleetIdMembers200Ok.

        Solar system the member is located in

        :return: The solar_system_id of this GetFleetsFleetIdMembers200Ok.
        :rtype: int
        """
        return self._solar_system_id

    @solar_system_id.setter
    def solar_system_id(self, solar_system_id):
        """Sets the solar_system_id of this GetFleetsFleetIdMembers200Ok.

        Solar system the member is located in

        :param solar_system_id: The solar_system_id of this GetFleetsFleetIdMembers200Ok.
        :type solar_system_id: int
        """
        if solar_system_id is None:
            raise ValueError("Invalid value for `solar_system_id`, must not be `None`")

        self._solar_system_id = solar_system_id

    @property
    def squad_id(self):
        """Gets the squad_id of this GetFleetsFleetIdMembers200Ok.

        ID of the squad the member is in. If not applicable, will be set to -1

        :return: The squad_id of this GetFleetsFleetIdMembers200Ok.
        :rtype: int
        """
        return self._squad_id

    @squad_id.setter
    def squad_id(self, squad_id):
        """Sets the squad_id of this GetFleetsFleetIdMembers200Ok.

        ID of the squad the member is in. If not applicable, will be set to -1

        :param squad_id: The squad_id of this GetFleetsFleetIdMembers200Ok.
        :type squad_id: int
        """
        if squad_id is None:
            raise ValueError("Invalid value for `squad_id`, must not be `None`")

        self._squad_id = squad_id

    @property
    def station_id(self):
        """Gets the station_id of this GetFleetsFleetIdMembers200Ok.

        Station in which the member is docked in, if applicable

        :return: The station_id of this GetFleetsFleetIdMembers200Ok.
        :rtype: int
        """
        return self._station_id

    @station_id.setter
    def station_id(self, station_id):
        """Sets the station_id of this GetFleetsFleetIdMembers200Ok.

        Station in which the member is docked in, if applicable

        :param station_id: The station_id of this GetFleetsFleetIdMembers200Ok.
        :type station_id: int
        """

        self._station_id = station_id

    @property
    def takes_fleet_warp(self):
        """Gets the takes_fleet_warp of this GetFleetsFleetIdMembers200Ok.

        Whether the member take fleet warps

        :return: The takes_fleet_warp of this GetFleetsFleetIdMembers200Ok.
        :rtype: bool
        """
        return self._takes_fleet_warp

    @takes_fleet_warp.setter
    def takes_fleet_warp(self, takes_fleet_warp):
        """Sets the takes_fleet_warp of this GetFleetsFleetIdMembers200Ok.

        Whether the member take fleet warps

        :param takes_fleet_warp: The takes_fleet_warp of this GetFleetsFleetIdMembers200Ok.
        :type takes_fleet_warp: bool
        """
        if takes_fleet_warp is None:
            raise ValueError("Invalid value for `takes_fleet_warp`, must not be `None`")

        self._takes_fleet_warp = takes_fleet_warp

    @property
    def wing_id(self):
        """Gets the wing_id of this GetFleetsFleetIdMembers200Ok.

        ID of the wing the member is in. If not applicable, will be set to -1

        :return: The wing_id of this GetFleetsFleetIdMembers200Ok.
        :rtype: int
        """
        return self._wing_id

    @wing_id.setter
    def wing_id(self, wing_id):
        """Sets the wing_id of this GetFleetsFleetIdMembers200Ok.

        ID of the wing the member is in. If not applicable, will be set to -1

        :param wing_id: The wing_id of this GetFleetsFleetIdMembers200Ok.
        :type wing_id: int
        """
        if wing_id is None:
            raise ValueError("Invalid value for `wing_id`, must not be `None`")

        self._wing_id = wing_id
