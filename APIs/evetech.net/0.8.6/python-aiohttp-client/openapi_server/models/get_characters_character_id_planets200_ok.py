# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class GetCharactersCharacterIdPlanets200Ok(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, last_update: datetime=None, num_pins: int=None, owner_id: int=None, planet_id: int=None, planet_type: str=None, solar_system_id: int=None, upgrade_level: int=None):
        """GetCharactersCharacterIdPlanets200Ok - a model defined in OpenAPI

        :param last_update: The last_update of this GetCharactersCharacterIdPlanets200Ok.
        :param num_pins: The num_pins of this GetCharactersCharacterIdPlanets200Ok.
        :param owner_id: The owner_id of this GetCharactersCharacterIdPlanets200Ok.
        :param planet_id: The planet_id of this GetCharactersCharacterIdPlanets200Ok.
        :param planet_type: The planet_type of this GetCharactersCharacterIdPlanets200Ok.
        :param solar_system_id: The solar_system_id of this GetCharactersCharacterIdPlanets200Ok.
        :param upgrade_level: The upgrade_level of this GetCharactersCharacterIdPlanets200Ok.
        """
        self.openapi_types = {
            'last_update': datetime,
            'num_pins': int,
            'owner_id': int,
            'planet_id': int,
            'planet_type': str,
            'solar_system_id': int,
            'upgrade_level': int
        }

        self.attribute_map = {
            'last_update': 'last_update',
            'num_pins': 'num_pins',
            'owner_id': 'owner_id',
            'planet_id': 'planet_id',
            'planet_type': 'planet_type',
            'solar_system_id': 'solar_system_id',
            'upgrade_level': 'upgrade_level'
        }

        self._last_update = last_update
        self._num_pins = num_pins
        self._owner_id = owner_id
        self._planet_id = planet_id
        self._planet_type = planet_type
        self._solar_system_id = solar_system_id
        self._upgrade_level = upgrade_level

    @classmethod
    def from_dict(cls, dikt: dict) -> 'GetCharactersCharacterIdPlanets200Ok':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The get_characters_character_id_planets_200_ok of this GetCharactersCharacterIdPlanets200Ok.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def last_update(self):
        """Gets the last_update of this GetCharactersCharacterIdPlanets200Ok.

        last_update string

        :return: The last_update of this GetCharactersCharacterIdPlanets200Ok.
        :rtype: datetime
        """
        return self._last_update

    @last_update.setter
    def last_update(self, last_update):
        """Sets the last_update of this GetCharactersCharacterIdPlanets200Ok.

        last_update string

        :param last_update: The last_update of this GetCharactersCharacterIdPlanets200Ok.
        :type last_update: datetime
        """
        if last_update is None:
            raise ValueError("Invalid value for `last_update`, must not be `None`")

        self._last_update = last_update

    @property
    def num_pins(self):
        """Gets the num_pins of this GetCharactersCharacterIdPlanets200Ok.

        num_pins integer

        :return: The num_pins of this GetCharactersCharacterIdPlanets200Ok.
        :rtype: int
        """
        return self._num_pins

    @num_pins.setter
    def num_pins(self, num_pins):
        """Sets the num_pins of this GetCharactersCharacterIdPlanets200Ok.

        num_pins integer

        :param num_pins: The num_pins of this GetCharactersCharacterIdPlanets200Ok.
        :type num_pins: int
        """
        if num_pins is None:
            raise ValueError("Invalid value for `num_pins`, must not be `None`")
        if num_pins is not None and num_pins < 1:
            raise ValueError("Invalid value for `num_pins`, must be a value greater than or equal to `1`")

        self._num_pins = num_pins

    @property
    def owner_id(self):
        """Gets the owner_id of this GetCharactersCharacterIdPlanets200Ok.

        owner_id integer

        :return: The owner_id of this GetCharactersCharacterIdPlanets200Ok.
        :rtype: int
        """
        return self._owner_id

    @owner_id.setter
    def owner_id(self, owner_id):
        """Sets the owner_id of this GetCharactersCharacterIdPlanets200Ok.

        owner_id integer

        :param owner_id: The owner_id of this GetCharactersCharacterIdPlanets200Ok.
        :type owner_id: int
        """
        if owner_id is None:
            raise ValueError("Invalid value for `owner_id`, must not be `None`")

        self._owner_id = owner_id

    @property
    def planet_id(self):
        """Gets the planet_id of this GetCharactersCharacterIdPlanets200Ok.

        planet_id integer

        :return: The planet_id of this GetCharactersCharacterIdPlanets200Ok.
        :rtype: int
        """
        return self._planet_id

    @planet_id.setter
    def planet_id(self, planet_id):
        """Sets the planet_id of this GetCharactersCharacterIdPlanets200Ok.

        planet_id integer

        :param planet_id: The planet_id of this GetCharactersCharacterIdPlanets200Ok.
        :type planet_id: int
        """
        if planet_id is None:
            raise ValueError("Invalid value for `planet_id`, must not be `None`")

        self._planet_id = planet_id

    @property
    def planet_type(self):
        """Gets the planet_type of this GetCharactersCharacterIdPlanets200Ok.

        planet_type string

        :return: The planet_type of this GetCharactersCharacterIdPlanets200Ok.
        :rtype: str
        """
        return self._planet_type

    @planet_type.setter
    def planet_type(self, planet_type):
        """Sets the planet_type of this GetCharactersCharacterIdPlanets200Ok.

        planet_type string

        :param planet_type: The planet_type of this GetCharactersCharacterIdPlanets200Ok.
        :type planet_type: str
        """
        allowed_values = ["temperate", "barren", "oceanic", "ice", "gas", "lava", "storm", "plasma"]  # noqa: E501
        if planet_type not in allowed_values:
            raise ValueError(
                "Invalid value for `planet_type` ({0}), must be one of {1}"
                .format(planet_type, allowed_values)
            )

        self._planet_type = planet_type

    @property
    def solar_system_id(self):
        """Gets the solar_system_id of this GetCharactersCharacterIdPlanets200Ok.

        solar_system_id integer

        :return: The solar_system_id of this GetCharactersCharacterIdPlanets200Ok.
        :rtype: int
        """
        return self._solar_system_id

    @solar_system_id.setter
    def solar_system_id(self, solar_system_id):
        """Sets the solar_system_id of this GetCharactersCharacterIdPlanets200Ok.

        solar_system_id integer

        :param solar_system_id: The solar_system_id of this GetCharactersCharacterIdPlanets200Ok.
        :type solar_system_id: int
        """
        if solar_system_id is None:
            raise ValueError("Invalid value for `solar_system_id`, must not be `None`")

        self._solar_system_id = solar_system_id

    @property
    def upgrade_level(self):
        """Gets the upgrade_level of this GetCharactersCharacterIdPlanets200Ok.

        upgrade_level integer

        :return: The upgrade_level of this GetCharactersCharacterIdPlanets200Ok.
        :rtype: int
        """
        return self._upgrade_level

    @upgrade_level.setter
    def upgrade_level(self, upgrade_level):
        """Sets the upgrade_level of this GetCharactersCharacterIdPlanets200Ok.

        upgrade_level integer

        :param upgrade_level: The upgrade_level of this GetCharactersCharacterIdPlanets200Ok.
        :type upgrade_level: int
        """
        if upgrade_level is None:
            raise ValueError("Invalid value for `upgrade_level`, must not be `None`")
        if upgrade_level is not None and upgrade_level > 5:
            raise ValueError("Invalid value for `upgrade_level`, must be a value less than or equal to `5`")
        if upgrade_level is not None and upgrade_level < 0:
            raise ValueError("Invalid value for `upgrade_level`, must be a value greater than or equal to `0`")

        self._upgrade_level = upgrade_level
