# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class GetCharactersCharacterIdBlueprints200Ok(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, item_id: int=None, location_flag: str=None, location_id: int=None, material_efficiency: int=None, quantity: int=None, runs: int=None, time_efficiency: int=None, type_id: int=None):
        """GetCharactersCharacterIdBlueprints200Ok - a model defined in OpenAPI

        :param item_id: The item_id of this GetCharactersCharacterIdBlueprints200Ok.
        :param location_flag: The location_flag of this GetCharactersCharacterIdBlueprints200Ok.
        :param location_id: The location_id of this GetCharactersCharacterIdBlueprints200Ok.
        :param material_efficiency: The material_efficiency of this GetCharactersCharacterIdBlueprints200Ok.
        :param quantity: The quantity of this GetCharactersCharacterIdBlueprints200Ok.
        :param runs: The runs of this GetCharactersCharacterIdBlueprints200Ok.
        :param time_efficiency: The time_efficiency of this GetCharactersCharacterIdBlueprints200Ok.
        :param type_id: The type_id of this GetCharactersCharacterIdBlueprints200Ok.
        """
        self.openapi_types = {
            'item_id': int,
            'location_flag': str,
            'location_id': int,
            'material_efficiency': int,
            'quantity': int,
            'runs': int,
            'time_efficiency': int,
            'type_id': int
        }

        self.attribute_map = {
            'item_id': 'item_id',
            'location_flag': 'location_flag',
            'location_id': 'location_id',
            'material_efficiency': 'material_efficiency',
            'quantity': 'quantity',
            'runs': 'runs',
            'time_efficiency': 'time_efficiency',
            'type_id': 'type_id'
        }

        self._item_id = item_id
        self._location_flag = location_flag
        self._location_id = location_id
        self._material_efficiency = material_efficiency
        self._quantity = quantity
        self._runs = runs
        self._time_efficiency = time_efficiency
        self._type_id = type_id

    @classmethod
    def from_dict(cls, dikt: dict) -> 'GetCharactersCharacterIdBlueprints200Ok':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The get_characters_character_id_blueprints_200_ok of this GetCharactersCharacterIdBlueprints200Ok.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def item_id(self):
        """Gets the item_id of this GetCharactersCharacterIdBlueprints200Ok.

        Unique ID for this item.

        :return: The item_id of this GetCharactersCharacterIdBlueprints200Ok.
        :rtype: int
        """
        return self._item_id

    @item_id.setter
    def item_id(self, item_id):
        """Sets the item_id of this GetCharactersCharacterIdBlueprints200Ok.

        Unique ID for this item.

        :param item_id: The item_id of this GetCharactersCharacterIdBlueprints200Ok.
        :type item_id: int
        """
        if item_id is None:
            raise ValueError("Invalid value for `item_id`, must not be `None`")

        self._item_id = item_id

    @property
    def location_flag(self):
        """Gets the location_flag of this GetCharactersCharacterIdBlueprints200Ok.

        Type of the location_id

        :return: The location_flag of this GetCharactersCharacterIdBlueprints200Ok.
        :rtype: str
        """
        return self._location_flag

    @location_flag.setter
    def location_flag(self, location_flag):
        """Sets the location_flag of this GetCharactersCharacterIdBlueprints200Ok.

        Type of the location_id

        :param location_flag: The location_flag of this GetCharactersCharacterIdBlueprints200Ok.
        :type location_flag: str
        """
        allowed_values = ["AutoFit", "Cargo", "CorpseBay", "DroneBay", "FleetHangar", "Deliveries", "HiddenModifiers", "Hangar", "HangarAll", "LoSlot0", "LoSlot1", "LoSlot2", "LoSlot3", "LoSlot4", "LoSlot5", "LoSlot6", "LoSlot7", "MedSlot0", "MedSlot1", "MedSlot2", "MedSlot3", "MedSlot4", "MedSlot5", "MedSlot6", "MedSlot7", "HiSlot0", "HiSlot1", "HiSlot2", "HiSlot3", "HiSlot4", "HiSlot5", "HiSlot6", "HiSlot7", "AssetSafety", "Locked", "Unlocked", "Implant", "QuafeBay", "RigSlot0", "RigSlot1", "RigSlot2", "RigSlot3", "RigSlot4", "RigSlot5", "RigSlot6", "RigSlot7", "ShipHangar", "SpecializedFuelBay", "SpecializedOreHold", "SpecializedGasHold", "SpecializedMineralHold", "SpecializedSalvageHold", "SpecializedShipHold", "SpecializedSmallShipHold", "SpecializedMediumShipHold", "SpecializedLargeShipHold", "SpecializedIndustrialShipHold", "SpecializedAmmoHold", "SpecializedCommandCenterHold", "SpecializedPlanetaryCommoditiesHold", "SpecializedMaterialBay", "SubSystemSlot0", "SubSystemSlot1", "SubSystemSlot2", "SubSystemSlot3", "SubSystemSlot4", "SubSystemSlot5", "SubSystemSlot6", "SubSystemSlot7", "FighterBay", "FighterTube0", "FighterTube1", "FighterTube2", "FighterTube3", "FighterTube4", "Module"]  # noqa: E501
        if location_flag not in allowed_values:
            raise ValueError(
                "Invalid value for `location_flag` ({0}), must be one of {1}"
                .format(location_flag, allowed_values)
            )

        self._location_flag = location_flag

    @property
    def location_id(self):
        """Gets the location_id of this GetCharactersCharacterIdBlueprints200Ok.

        References a solar system, station or item_id if this blueprint is located within a container. If the return value is an item_id, then the Character AssetList API must be queried to find the container using the given item_id to determine the correct location of the Blueprint.

        :return: The location_id of this GetCharactersCharacterIdBlueprints200Ok.
        :rtype: int
        """
        return self._location_id

    @location_id.setter
    def location_id(self, location_id):
        """Sets the location_id of this GetCharactersCharacterIdBlueprints200Ok.

        References a solar system, station or item_id if this blueprint is located within a container. If the return value is an item_id, then the Character AssetList API must be queried to find the container using the given item_id to determine the correct location of the Blueprint.

        :param location_id: The location_id of this GetCharactersCharacterIdBlueprints200Ok.
        :type location_id: int
        """
        if location_id is None:
            raise ValueError("Invalid value for `location_id`, must not be `None`")

        self._location_id = location_id

    @property
    def material_efficiency(self):
        """Gets the material_efficiency of this GetCharactersCharacterIdBlueprints200Ok.

        Material Efficiency Level of the blueprint.

        :return: The material_efficiency of this GetCharactersCharacterIdBlueprints200Ok.
        :rtype: int
        """
        return self._material_efficiency

    @material_efficiency.setter
    def material_efficiency(self, material_efficiency):
        """Sets the material_efficiency of this GetCharactersCharacterIdBlueprints200Ok.

        Material Efficiency Level of the blueprint.

        :param material_efficiency: The material_efficiency of this GetCharactersCharacterIdBlueprints200Ok.
        :type material_efficiency: int
        """
        if material_efficiency is None:
            raise ValueError("Invalid value for `material_efficiency`, must not be `None`")
        if material_efficiency is not None and material_efficiency > 25:
            raise ValueError("Invalid value for `material_efficiency`, must be a value less than or equal to `25`")
        if material_efficiency is not None and material_efficiency < 0:
            raise ValueError("Invalid value for `material_efficiency`, must be a value greater than or equal to `0`")

        self._material_efficiency = material_efficiency

    @property
    def quantity(self):
        """Gets the quantity of this GetCharactersCharacterIdBlueprints200Ok.

        A range of numbers with a minimum of -2 and no maximum value where -1 is an original and -2 is a copy. It can be a positive integer if it is a stack of blueprint originals fresh from the market (e.g. no activities performed on them yet).

        :return: The quantity of this GetCharactersCharacterIdBlueprints200Ok.
        :rtype: int
        """
        return self._quantity

    @quantity.setter
    def quantity(self, quantity):
        """Sets the quantity of this GetCharactersCharacterIdBlueprints200Ok.

        A range of numbers with a minimum of -2 and no maximum value where -1 is an original and -2 is a copy. It can be a positive integer if it is a stack of blueprint originals fresh from the market (e.g. no activities performed on them yet).

        :param quantity: The quantity of this GetCharactersCharacterIdBlueprints200Ok.
        :type quantity: int
        """
        if quantity is None:
            raise ValueError("Invalid value for `quantity`, must not be `None`")
        if quantity is not None and quantity < -2:
            raise ValueError("Invalid value for `quantity`, must be a value greater than or equal to `-2`")

        self._quantity = quantity

    @property
    def runs(self):
        """Gets the runs of this GetCharactersCharacterIdBlueprints200Ok.

        Number of runs remaining if the blueprint is a copy, -1 if it is an original.

        :return: The runs of this GetCharactersCharacterIdBlueprints200Ok.
        :rtype: int
        """
        return self._runs

    @runs.setter
    def runs(self, runs):
        """Sets the runs of this GetCharactersCharacterIdBlueprints200Ok.

        Number of runs remaining if the blueprint is a copy, -1 if it is an original.

        :param runs: The runs of this GetCharactersCharacterIdBlueprints200Ok.
        :type runs: int
        """
        if runs is None:
            raise ValueError("Invalid value for `runs`, must not be `None`")
        if runs is not None and runs < -1:
            raise ValueError("Invalid value for `runs`, must be a value greater than or equal to `-1`")

        self._runs = runs

    @property
    def time_efficiency(self):
        """Gets the time_efficiency of this GetCharactersCharacterIdBlueprints200Ok.

        Time Efficiency Level of the blueprint.

        :return: The time_efficiency of this GetCharactersCharacterIdBlueprints200Ok.
        :rtype: int
        """
        return self._time_efficiency

    @time_efficiency.setter
    def time_efficiency(self, time_efficiency):
        """Sets the time_efficiency of this GetCharactersCharacterIdBlueprints200Ok.

        Time Efficiency Level of the blueprint.

        :param time_efficiency: The time_efficiency of this GetCharactersCharacterIdBlueprints200Ok.
        :type time_efficiency: int
        """
        if time_efficiency is None:
            raise ValueError("Invalid value for `time_efficiency`, must not be `None`")
        if time_efficiency is not None and time_efficiency > 20:
            raise ValueError("Invalid value for `time_efficiency`, must be a value less than or equal to `20`")
        if time_efficiency is not None and time_efficiency < 0:
            raise ValueError("Invalid value for `time_efficiency`, must be a value greater than or equal to `0`")

        self._time_efficiency = time_efficiency

    @property
    def type_id(self):
        """Gets the type_id of this GetCharactersCharacterIdBlueprints200Ok.

        type_id integer

        :return: The type_id of this GetCharactersCharacterIdBlueprints200Ok.
        :rtype: int
        """
        return self._type_id

    @type_id.setter
    def type_id(self, type_id):
        """Sets the type_id of this GetCharactersCharacterIdBlueprints200Ok.

        type_id integer

        :param type_id: The type_id of this GetCharactersCharacterIdBlueprints200Ok.
        :type type_id: int
        """
        if type_id is None:
            raise ValueError("Invalid value for `type_id`, must not be `None`")

        self._type_id = type_id
