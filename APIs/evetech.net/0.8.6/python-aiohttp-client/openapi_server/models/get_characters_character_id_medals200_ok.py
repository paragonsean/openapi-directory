# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.get_characters_character_id_medals_graphic import GetCharactersCharacterIdMedalsGraphic
from openapi_server import util


class GetCharactersCharacterIdMedals200Ok(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, corporation_id: int=None, _date: datetime=None, description: str=None, graphics: List[GetCharactersCharacterIdMedalsGraphic]=None, issuer_id: int=None, medal_id: int=None, reason: str=None, status: str=None, title: str=None):
        """GetCharactersCharacterIdMedals200Ok - a model defined in OpenAPI

        :param corporation_id: The corporation_id of this GetCharactersCharacterIdMedals200Ok.
        :param _date: The _date of this GetCharactersCharacterIdMedals200Ok.
        :param description: The description of this GetCharactersCharacterIdMedals200Ok.
        :param graphics: The graphics of this GetCharactersCharacterIdMedals200Ok.
        :param issuer_id: The issuer_id of this GetCharactersCharacterIdMedals200Ok.
        :param medal_id: The medal_id of this GetCharactersCharacterIdMedals200Ok.
        :param reason: The reason of this GetCharactersCharacterIdMedals200Ok.
        :param status: The status of this GetCharactersCharacterIdMedals200Ok.
        :param title: The title of this GetCharactersCharacterIdMedals200Ok.
        """
        self.openapi_types = {
            'corporation_id': int,
            '_date': datetime,
            'description': str,
            'graphics': List[GetCharactersCharacterIdMedalsGraphic],
            'issuer_id': int,
            'medal_id': int,
            'reason': str,
            'status': str,
            'title': str
        }

        self.attribute_map = {
            'corporation_id': 'corporation_id',
            '_date': 'date',
            'description': 'description',
            'graphics': 'graphics',
            'issuer_id': 'issuer_id',
            'medal_id': 'medal_id',
            'reason': 'reason',
            'status': 'status',
            'title': 'title'
        }

        self._corporation_id = corporation_id
        self.__date = _date
        self._description = description
        self._graphics = graphics
        self._issuer_id = issuer_id
        self._medal_id = medal_id
        self._reason = reason
        self._status = status
        self._title = title

    @classmethod
    def from_dict(cls, dikt: dict) -> 'GetCharactersCharacterIdMedals200Ok':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The get_characters_character_id_medals_200_ok of this GetCharactersCharacterIdMedals200Ok.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def corporation_id(self):
        """Gets the corporation_id of this GetCharactersCharacterIdMedals200Ok.

        corporation_id integer

        :return: The corporation_id of this GetCharactersCharacterIdMedals200Ok.
        :rtype: int
        """
        return self._corporation_id

    @corporation_id.setter
    def corporation_id(self, corporation_id):
        """Sets the corporation_id of this GetCharactersCharacterIdMedals200Ok.

        corporation_id integer

        :param corporation_id: The corporation_id of this GetCharactersCharacterIdMedals200Ok.
        :type corporation_id: int
        """
        if corporation_id is None:
            raise ValueError("Invalid value for `corporation_id`, must not be `None`")

        self._corporation_id = corporation_id

    @property
    def _date(self):
        """Gets the _date of this GetCharactersCharacterIdMedals200Ok.

        date string

        :return: The _date of this GetCharactersCharacterIdMedals200Ok.
        :rtype: datetime
        """
        return self.__date

    @_date.setter
    def _date(self, _date):
        """Sets the _date of this GetCharactersCharacterIdMedals200Ok.

        date string

        :param _date: The _date of this GetCharactersCharacterIdMedals200Ok.
        :type _date: datetime
        """
        if _date is None:
            raise ValueError("Invalid value for `_date`, must not be `None`")

        self.__date = _date

    @property
    def description(self):
        """Gets the description of this GetCharactersCharacterIdMedals200Ok.

        description string

        :return: The description of this GetCharactersCharacterIdMedals200Ok.
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this GetCharactersCharacterIdMedals200Ok.

        description string

        :param description: The description of this GetCharactersCharacterIdMedals200Ok.
        :type description: str
        """
        if description is None:
            raise ValueError("Invalid value for `description`, must not be `None`")

        self._description = description

    @property
    def graphics(self):
        """Gets the graphics of this GetCharactersCharacterIdMedals200Ok.

        graphics array

        :return: The graphics of this GetCharactersCharacterIdMedals200Ok.
        :rtype: List[GetCharactersCharacterIdMedalsGraphic]
        """
        return self._graphics

    @graphics.setter
    def graphics(self, graphics):
        """Sets the graphics of this GetCharactersCharacterIdMedals200Ok.

        graphics array

        :param graphics: The graphics of this GetCharactersCharacterIdMedals200Ok.
        :type graphics: List[GetCharactersCharacterIdMedalsGraphic]
        """
        if graphics is None:
            raise ValueError("Invalid value for `graphics`, must not be `None`")
        if graphics is not None and len(graphics) > 9:
            raise ValueError("Invalid value for `graphics`, number of items must be less than or equal to `9`")
        if graphics is not None and len(graphics) < 3:
            raise ValueError("Invalid value for `graphics`, number of items must be greater than or equal to `3`")

        self._graphics = graphics

    @property
    def issuer_id(self):
        """Gets the issuer_id of this GetCharactersCharacterIdMedals200Ok.

        issuer_id integer

        :return: The issuer_id of this GetCharactersCharacterIdMedals200Ok.
        :rtype: int
        """
        return self._issuer_id

    @issuer_id.setter
    def issuer_id(self, issuer_id):
        """Sets the issuer_id of this GetCharactersCharacterIdMedals200Ok.

        issuer_id integer

        :param issuer_id: The issuer_id of this GetCharactersCharacterIdMedals200Ok.
        :type issuer_id: int
        """
        if issuer_id is None:
            raise ValueError("Invalid value for `issuer_id`, must not be `None`")

        self._issuer_id = issuer_id

    @property
    def medal_id(self):
        """Gets the medal_id of this GetCharactersCharacterIdMedals200Ok.

        medal_id integer

        :return: The medal_id of this GetCharactersCharacterIdMedals200Ok.
        :rtype: int
        """
        return self._medal_id

    @medal_id.setter
    def medal_id(self, medal_id):
        """Sets the medal_id of this GetCharactersCharacterIdMedals200Ok.

        medal_id integer

        :param medal_id: The medal_id of this GetCharactersCharacterIdMedals200Ok.
        :type medal_id: int
        """
        if medal_id is None:
            raise ValueError("Invalid value for `medal_id`, must not be `None`")

        self._medal_id = medal_id

    @property
    def reason(self):
        """Gets the reason of this GetCharactersCharacterIdMedals200Ok.

        reason string

        :return: The reason of this GetCharactersCharacterIdMedals200Ok.
        :rtype: str
        """
        return self._reason

    @reason.setter
    def reason(self, reason):
        """Sets the reason of this GetCharactersCharacterIdMedals200Ok.

        reason string

        :param reason: The reason of this GetCharactersCharacterIdMedals200Ok.
        :type reason: str
        """
        if reason is None:
            raise ValueError("Invalid value for `reason`, must not be `None`")

        self._reason = reason

    @property
    def status(self):
        """Gets the status of this GetCharactersCharacterIdMedals200Ok.

        status string

        :return: The status of this GetCharactersCharacterIdMedals200Ok.
        :rtype: str
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this GetCharactersCharacterIdMedals200Ok.

        status string

        :param status: The status of this GetCharactersCharacterIdMedals200Ok.
        :type status: str
        """
        allowed_values = ["public", "private"]  # noqa: E501
        if status not in allowed_values:
            raise ValueError(
                "Invalid value for `status` ({0}), must be one of {1}"
                .format(status, allowed_values)
            )

        self._status = status

    @property
    def title(self):
        """Gets the title of this GetCharactersCharacterIdMedals200Ok.

        title string

        :return: The title of this GetCharactersCharacterIdMedals200Ok.
        :rtype: str
        """
        return self._title

    @title.setter
    def title(self, title):
        """Sets the title of this GetCharactersCharacterIdMedals200Ok.

        title string

        :param title: The title of this GetCharactersCharacterIdMedals200Ok.
        :type title: str
        """
        if title is None:
            raise ValueError("Invalid value for `title`, must not be `None`")

        self._title = title
