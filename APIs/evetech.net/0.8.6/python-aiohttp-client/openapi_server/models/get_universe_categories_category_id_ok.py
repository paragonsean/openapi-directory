# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class GetUniverseCategoriesCategoryIdOk(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, category_id: int=None, groups: List[int]=None, name: str=None, published: bool=None):
        """GetUniverseCategoriesCategoryIdOk - a model defined in OpenAPI

        :param category_id: The category_id of this GetUniverseCategoriesCategoryIdOk.
        :param groups: The groups of this GetUniverseCategoriesCategoryIdOk.
        :param name: The name of this GetUniverseCategoriesCategoryIdOk.
        :param published: The published of this GetUniverseCategoriesCategoryIdOk.
        """
        self.openapi_types = {
            'category_id': int,
            'groups': List[int],
            'name': str,
            'published': bool
        }

        self.attribute_map = {
            'category_id': 'category_id',
            'groups': 'groups',
            'name': 'name',
            'published': 'published'
        }

        self._category_id = category_id
        self._groups = groups
        self._name = name
        self._published = published

    @classmethod
    def from_dict(cls, dikt: dict) -> 'GetUniverseCategoriesCategoryIdOk':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The get_universe_categories_category_id_ok of this GetUniverseCategoriesCategoryIdOk.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def category_id(self):
        """Gets the category_id of this GetUniverseCategoriesCategoryIdOk.

        category_id integer

        :return: The category_id of this GetUniverseCategoriesCategoryIdOk.
        :rtype: int
        """
        return self._category_id

    @category_id.setter
    def category_id(self, category_id):
        """Sets the category_id of this GetUniverseCategoriesCategoryIdOk.

        category_id integer

        :param category_id: The category_id of this GetUniverseCategoriesCategoryIdOk.
        :type category_id: int
        """
        if category_id is None:
            raise ValueError("Invalid value for `category_id`, must not be `None`")

        self._category_id = category_id

    @property
    def groups(self):
        """Gets the groups of this GetUniverseCategoriesCategoryIdOk.

        groups array

        :return: The groups of this GetUniverseCategoriesCategoryIdOk.
        :rtype: List[int]
        """
        return self._groups

    @groups.setter
    def groups(self, groups):
        """Sets the groups of this GetUniverseCategoriesCategoryIdOk.

        groups array

        :param groups: The groups of this GetUniverseCategoriesCategoryIdOk.
        :type groups: List[int]
        """
        if groups is None:
            raise ValueError("Invalid value for `groups`, must not be `None`")
        if groups is not None and len(groups) > 10000:
            raise ValueError("Invalid value for `groups`, number of items must be less than or equal to `10000`")

        self._groups = groups

    @property
    def name(self):
        """Gets the name of this GetUniverseCategoriesCategoryIdOk.

        name string

        :return: The name of this GetUniverseCategoriesCategoryIdOk.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this GetUniverseCategoriesCategoryIdOk.

        name string

        :param name: The name of this GetUniverseCategoriesCategoryIdOk.
        :type name: str
        """
        if name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")

        self._name = name

    @property
    def published(self):
        """Gets the published of this GetUniverseCategoriesCategoryIdOk.

        published boolean

        :return: The published of this GetUniverseCategoriesCategoryIdOk.
        :rtype: bool
        """
        return self._published

    @published.setter
    def published(self, published):
        """Sets the published of this GetUniverseCategoriesCategoryIdOk.

        published boolean

        :param published: The published of this GetUniverseCategoriesCategoryIdOk.
        :type published: bool
        """
        if published is None:
            raise ValueError("Invalid value for `published`, must not be `None`")

        self._published = published
