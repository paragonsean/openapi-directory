# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class PostCharactersCharacterIdMailLabelsLabel(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, color: str='ffffff', name: str=None):
        """PostCharactersCharacterIdMailLabelsLabel - a model defined in OpenAPI

        :param color: The color of this PostCharactersCharacterIdMailLabelsLabel.
        :param name: The name of this PostCharactersCharacterIdMailLabelsLabel.
        """
        self.openapi_types = {
            'color': str,
            'name': str
        }

        self.attribute_map = {
            'color': 'color',
            'name': 'name'
        }

        self._color = color
        self._name = name

    @classmethod
    def from_dict(cls, dikt: dict) -> 'PostCharactersCharacterIdMailLabelsLabel':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The post_characters_character_id_mail_labels_label of this PostCharactersCharacterIdMailLabelsLabel.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def color(self):
        """Gets the color of this PostCharactersCharacterIdMailLabelsLabel.

        Hexadecimal string representing label color, in RGB format

        :return: The color of this PostCharactersCharacterIdMailLabelsLabel.
        :rtype: str
        """
        return self._color

    @color.setter
    def color(self, color):
        """Sets the color of this PostCharactersCharacterIdMailLabelsLabel.

        Hexadecimal string representing label color, in RGB format

        :param color: The color of this PostCharactersCharacterIdMailLabelsLabel.
        :type color: str
        """
        allowed_values = ["#0000fe", "#006634", "#0099ff", "#00ff33", "#01ffff", "#349800", "#660066", "#666666", "#999999", "#99ffff", "#9a0000", "#ccff9a", "#e6e6e6", "#fe0000", "#ff6600", "#ffff01", "#ffffcd", "#ffffff"]  # noqa: E501
        if color not in allowed_values:
            raise ValueError(
                "Invalid value for `color` ({0}), must be one of {1}"
                .format(color, allowed_values)
            )

        self._color = color

    @property
    def name(self):
        """Gets the name of this PostCharactersCharacterIdMailLabelsLabel.

        name string

        :return: The name of this PostCharactersCharacterIdMailLabelsLabel.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this PostCharactersCharacterIdMailLabelsLabel.

        name string

        :param name: The name of this PostCharactersCharacterIdMailLabelsLabel.
        :type name: str
        """
        if name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")
        if name is not None and len(name) > 40:
            raise ValueError("Invalid value for `name`, length must be less than or equal to `40`")
        if name is not None and len(name) < 1:
            raise ValueError("Invalid value for `name`, length must be greater than or equal to `1`")

        self._name = name
