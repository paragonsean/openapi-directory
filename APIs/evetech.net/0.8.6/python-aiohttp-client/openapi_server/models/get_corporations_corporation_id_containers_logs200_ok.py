# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class GetCorporationsCorporationIdContainersLogs200Ok(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, action: str=None, character_id: int=None, container_id: int=None, container_type_id: int=None, location_flag: str=None, location_id: int=None, logged_at: datetime=None, new_config_bitmask: int=None, old_config_bitmask: int=None, password_type: str=None, quantity: int=None, type_id: int=None):
        """GetCorporationsCorporationIdContainersLogs200Ok - a model defined in OpenAPI

        :param action: The action of this GetCorporationsCorporationIdContainersLogs200Ok.
        :param character_id: The character_id of this GetCorporationsCorporationIdContainersLogs200Ok.
        :param container_id: The container_id of this GetCorporationsCorporationIdContainersLogs200Ok.
        :param container_type_id: The container_type_id of this GetCorporationsCorporationIdContainersLogs200Ok.
        :param location_flag: The location_flag of this GetCorporationsCorporationIdContainersLogs200Ok.
        :param location_id: The location_id of this GetCorporationsCorporationIdContainersLogs200Ok.
        :param logged_at: The logged_at of this GetCorporationsCorporationIdContainersLogs200Ok.
        :param new_config_bitmask: The new_config_bitmask of this GetCorporationsCorporationIdContainersLogs200Ok.
        :param old_config_bitmask: The old_config_bitmask of this GetCorporationsCorporationIdContainersLogs200Ok.
        :param password_type: The password_type of this GetCorporationsCorporationIdContainersLogs200Ok.
        :param quantity: The quantity of this GetCorporationsCorporationIdContainersLogs200Ok.
        :param type_id: The type_id of this GetCorporationsCorporationIdContainersLogs200Ok.
        """
        self.openapi_types = {
            'action': str,
            'character_id': int,
            'container_id': int,
            'container_type_id': int,
            'location_flag': str,
            'location_id': int,
            'logged_at': datetime,
            'new_config_bitmask': int,
            'old_config_bitmask': int,
            'password_type': str,
            'quantity': int,
            'type_id': int
        }

        self.attribute_map = {
            'action': 'action',
            'character_id': 'character_id',
            'container_id': 'container_id',
            'container_type_id': 'container_type_id',
            'location_flag': 'location_flag',
            'location_id': 'location_id',
            'logged_at': 'logged_at',
            'new_config_bitmask': 'new_config_bitmask',
            'old_config_bitmask': 'old_config_bitmask',
            'password_type': 'password_type',
            'quantity': 'quantity',
            'type_id': 'type_id'
        }

        self._action = action
        self._character_id = character_id
        self._container_id = container_id
        self._container_type_id = container_type_id
        self._location_flag = location_flag
        self._location_id = location_id
        self._logged_at = logged_at
        self._new_config_bitmask = new_config_bitmask
        self._old_config_bitmask = old_config_bitmask
        self._password_type = password_type
        self._quantity = quantity
        self._type_id = type_id

    @classmethod
    def from_dict(cls, dikt: dict) -> 'GetCorporationsCorporationIdContainersLogs200Ok':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The get_corporations_corporation_id_containers_logs_200_ok of this GetCorporationsCorporationIdContainersLogs200Ok.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def action(self):
        """Gets the action of this GetCorporationsCorporationIdContainersLogs200Ok.

        action string

        :return: The action of this GetCorporationsCorporationIdContainersLogs200Ok.
        :rtype: str
        """
        return self._action

    @action.setter
    def action(self, action):
        """Sets the action of this GetCorporationsCorporationIdContainersLogs200Ok.

        action string

        :param action: The action of this GetCorporationsCorporationIdContainersLogs200Ok.
        :type action: str
        """
        allowed_values = ["add", "assemble", "configure", "enter_password", "lock", "move", "repackage", "set_name", "set_password", "unlock"]  # noqa: E501
        if action not in allowed_values:
            raise ValueError(
                "Invalid value for `action` ({0}), must be one of {1}"
                .format(action, allowed_values)
            )

        self._action = action

    @property
    def character_id(self):
        """Gets the character_id of this GetCorporationsCorporationIdContainersLogs200Ok.

        ID of the character who performed the action.

        :return: The character_id of this GetCorporationsCorporationIdContainersLogs200Ok.
        :rtype: int
        """
        return self._character_id

    @character_id.setter
    def character_id(self, character_id):
        """Sets the character_id of this GetCorporationsCorporationIdContainersLogs200Ok.

        ID of the character who performed the action.

        :param character_id: The character_id of this GetCorporationsCorporationIdContainersLogs200Ok.
        :type character_id: int
        """
        if character_id is None:
            raise ValueError("Invalid value for `character_id`, must not be `None`")

        self._character_id = character_id

    @property
    def container_id(self):
        """Gets the container_id of this GetCorporationsCorporationIdContainersLogs200Ok.

        ID of the container

        :return: The container_id of this GetCorporationsCorporationIdContainersLogs200Ok.
        :rtype: int
        """
        return self._container_id

    @container_id.setter
    def container_id(self, container_id):
        """Sets the container_id of this GetCorporationsCorporationIdContainersLogs200Ok.

        ID of the container

        :param container_id: The container_id of this GetCorporationsCorporationIdContainersLogs200Ok.
        :type container_id: int
        """
        if container_id is None:
            raise ValueError("Invalid value for `container_id`, must not be `None`")

        self._container_id = container_id

    @property
    def container_type_id(self):
        """Gets the container_type_id of this GetCorporationsCorporationIdContainersLogs200Ok.

        Type ID of the container

        :return: The container_type_id of this GetCorporationsCorporationIdContainersLogs200Ok.
        :rtype: int
        """
        return self._container_type_id

    @container_type_id.setter
    def container_type_id(self, container_type_id):
        """Sets the container_type_id of this GetCorporationsCorporationIdContainersLogs200Ok.

        Type ID of the container

        :param container_type_id: The container_type_id of this GetCorporationsCorporationIdContainersLogs200Ok.
        :type container_type_id: int
        """
        if container_type_id is None:
            raise ValueError("Invalid value for `container_type_id`, must not be `None`")

        self._container_type_id = container_type_id

    @property
    def location_flag(self):
        """Gets the location_flag of this GetCorporationsCorporationIdContainersLogs200Ok.

        location_flag string

        :return: The location_flag of this GetCorporationsCorporationIdContainersLogs200Ok.
        :rtype: str
        """
        return self._location_flag

    @location_flag.setter
    def location_flag(self, location_flag):
        """Sets the location_flag of this GetCorporationsCorporationIdContainersLogs200Ok.

        location_flag string

        :param location_flag: The location_flag of this GetCorporationsCorporationIdContainersLogs200Ok.
        :type location_flag: str
        """
        allowed_values = ["AssetSafety", "AutoFit", "Bonus", "Booster", "BoosterBay", "Capsule", "Cargo", "CorpDeliveries", "CorpSAG1", "CorpSAG2", "CorpSAG3", "CorpSAG4", "CorpSAG5", "CorpSAG6", "CorpSAG7", "CrateLoot", "Deliveries", "DroneBay", "DustBattle", "DustDatabank", "FighterBay", "FighterTube0", "FighterTube1", "FighterTube2", "FighterTube3", "FighterTube4", "FleetHangar", "Hangar", "HangarAll", "HiSlot0", "HiSlot1", "HiSlot2", "HiSlot3", "HiSlot4", "HiSlot5", "HiSlot6", "HiSlot7", "HiddenModifiers", "Implant", "Impounded", "JunkyardReprocessed", "JunkyardTrashed", "LoSlot0", "LoSlot1", "LoSlot2", "LoSlot3", "LoSlot4", "LoSlot5", "LoSlot6", "LoSlot7", "Locked", "MedSlot0", "MedSlot1", "MedSlot2", "MedSlot3", "MedSlot4", "MedSlot5", "MedSlot6", "MedSlot7", "OfficeFolder", "Pilot", "PlanetSurface", "QuafeBay", "Reward", "RigSlot0", "RigSlot1", "RigSlot2", "RigSlot3", "RigSlot4", "RigSlot5", "RigSlot6", "RigSlot7", "SecondaryStorage", "ServiceSlot0", "ServiceSlot1", "ServiceSlot2", "ServiceSlot3", "ServiceSlot4", "ServiceSlot5", "ServiceSlot6", "ServiceSlot7", "ShipHangar", "ShipOffline", "Skill", "SkillInTraining", "SpecializedAmmoHold", "SpecializedCommandCenterHold", "SpecializedFuelBay", "SpecializedGasHold", "SpecializedIndustrialShipHold", "SpecializedLargeShipHold", "SpecializedMaterialBay", "SpecializedMediumShipHold", "SpecializedMineralHold", "SpecializedOreHold", "SpecializedPlanetaryCommoditiesHold", "SpecializedSalvageHold", "SpecializedShipHold", "SpecializedSmallShipHold", "StructureActive", "StructureFuel", "StructureInactive", "StructureOffline", "SubSystemBay", "SubSystemSlot0", "SubSystemSlot1", "SubSystemSlot2", "SubSystemSlot3", "SubSystemSlot4", "SubSystemSlot5", "SubSystemSlot6", "SubSystemSlot7", "Unlocked", "Wallet", "Wardrobe"]  # noqa: E501
        if location_flag not in allowed_values:
            raise ValueError(
                "Invalid value for `location_flag` ({0}), must be one of {1}"
                .format(location_flag, allowed_values)
            )

        self._location_flag = location_flag

    @property
    def location_id(self):
        """Gets the location_id of this GetCorporationsCorporationIdContainersLogs200Ok.

        location_id integer

        :return: The location_id of this GetCorporationsCorporationIdContainersLogs200Ok.
        :rtype: int
        """
        return self._location_id

    @location_id.setter
    def location_id(self, location_id):
        """Sets the location_id of this GetCorporationsCorporationIdContainersLogs200Ok.

        location_id integer

        :param location_id: The location_id of this GetCorporationsCorporationIdContainersLogs200Ok.
        :type location_id: int
        """
        if location_id is None:
            raise ValueError("Invalid value for `location_id`, must not be `None`")

        self._location_id = location_id

    @property
    def logged_at(self):
        """Gets the logged_at of this GetCorporationsCorporationIdContainersLogs200Ok.

        Timestamp when this log was created

        :return: The logged_at of this GetCorporationsCorporationIdContainersLogs200Ok.
        :rtype: datetime
        """
        return self._logged_at

    @logged_at.setter
    def logged_at(self, logged_at):
        """Sets the logged_at of this GetCorporationsCorporationIdContainersLogs200Ok.

        Timestamp when this log was created

        :param logged_at: The logged_at of this GetCorporationsCorporationIdContainersLogs200Ok.
        :type logged_at: datetime
        """
        if logged_at is None:
            raise ValueError("Invalid value for `logged_at`, must not be `None`")

        self._logged_at = logged_at

    @property
    def new_config_bitmask(self):
        """Gets the new_config_bitmask of this GetCorporationsCorporationIdContainersLogs200Ok.

        new_config_bitmask integer

        :return: The new_config_bitmask of this GetCorporationsCorporationIdContainersLogs200Ok.
        :rtype: int
        """
        return self._new_config_bitmask

    @new_config_bitmask.setter
    def new_config_bitmask(self, new_config_bitmask):
        """Sets the new_config_bitmask of this GetCorporationsCorporationIdContainersLogs200Ok.

        new_config_bitmask integer

        :param new_config_bitmask: The new_config_bitmask of this GetCorporationsCorporationIdContainersLogs200Ok.
        :type new_config_bitmask: int
        """

        self._new_config_bitmask = new_config_bitmask

    @property
    def old_config_bitmask(self):
        """Gets the old_config_bitmask of this GetCorporationsCorporationIdContainersLogs200Ok.

        old_config_bitmask integer

        :return: The old_config_bitmask of this GetCorporationsCorporationIdContainersLogs200Ok.
        :rtype: int
        """
        return self._old_config_bitmask

    @old_config_bitmask.setter
    def old_config_bitmask(self, old_config_bitmask):
        """Sets the old_config_bitmask of this GetCorporationsCorporationIdContainersLogs200Ok.

        old_config_bitmask integer

        :param old_config_bitmask: The old_config_bitmask of this GetCorporationsCorporationIdContainersLogs200Ok.
        :type old_config_bitmask: int
        """

        self._old_config_bitmask = old_config_bitmask

    @property
    def password_type(self):
        """Gets the password_type of this GetCorporationsCorporationIdContainersLogs200Ok.

        Type of password set if action is of type SetPassword or EnterPassword

        :return: The password_type of this GetCorporationsCorporationIdContainersLogs200Ok.
        :rtype: str
        """
        return self._password_type

    @password_type.setter
    def password_type(self, password_type):
        """Sets the password_type of this GetCorporationsCorporationIdContainersLogs200Ok.

        Type of password set if action is of type SetPassword or EnterPassword

        :param password_type: The password_type of this GetCorporationsCorporationIdContainersLogs200Ok.
        :type password_type: str
        """
        allowed_values = ["config", "general"]  # noqa: E501
        if password_type not in allowed_values:
            raise ValueError(
                "Invalid value for `password_type` ({0}), must be one of {1}"
                .format(password_type, allowed_values)
            )

        self._password_type = password_type

    @property
    def quantity(self):
        """Gets the quantity of this GetCorporationsCorporationIdContainersLogs200Ok.

        Quantity of the item being acted upon

        :return: The quantity of this GetCorporationsCorporationIdContainersLogs200Ok.
        :rtype: int
        """
        return self._quantity

    @quantity.setter
    def quantity(self, quantity):
        """Sets the quantity of this GetCorporationsCorporationIdContainersLogs200Ok.

        Quantity of the item being acted upon

        :param quantity: The quantity of this GetCorporationsCorporationIdContainersLogs200Ok.
        :type quantity: int
        """

        self._quantity = quantity

    @property
    def type_id(self):
        """Gets the type_id of this GetCorporationsCorporationIdContainersLogs200Ok.

        Type ID of the item being acted upon

        :return: The type_id of this GetCorporationsCorporationIdContainersLogs200Ok.
        :rtype: int
        """
        return self._type_id

    @type_id.setter
    def type_id(self, type_id):
        """Sets the type_id of this GetCorporationsCorporationIdContainersLogs200Ok.

        Type ID of the item being acted upon

        :param type_id: The type_id of this GetCorporationsCorporationIdContainersLogs200Ok.
        :type type_id: int
        """

        self._type_id = type_id
