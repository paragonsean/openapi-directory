# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class GetCharactersCharacterIdNotifications200Ok(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, is_read: bool=None, notification_id: int=None, sender_id: int=None, sender_type: str=None, text: str=None, timestamp: datetime=None, type: str=None):
        """GetCharactersCharacterIdNotifications200Ok - a model defined in OpenAPI

        :param is_read: The is_read of this GetCharactersCharacterIdNotifications200Ok.
        :param notification_id: The notification_id of this GetCharactersCharacterIdNotifications200Ok.
        :param sender_id: The sender_id of this GetCharactersCharacterIdNotifications200Ok.
        :param sender_type: The sender_type of this GetCharactersCharacterIdNotifications200Ok.
        :param text: The text of this GetCharactersCharacterIdNotifications200Ok.
        :param timestamp: The timestamp of this GetCharactersCharacterIdNotifications200Ok.
        :param type: The type of this GetCharactersCharacterIdNotifications200Ok.
        """
        self.openapi_types = {
            'is_read': bool,
            'notification_id': int,
            'sender_id': int,
            'sender_type': str,
            'text': str,
            'timestamp': datetime,
            'type': str
        }

        self.attribute_map = {
            'is_read': 'is_read',
            'notification_id': 'notification_id',
            'sender_id': 'sender_id',
            'sender_type': 'sender_type',
            'text': 'text',
            'timestamp': 'timestamp',
            'type': 'type'
        }

        self._is_read = is_read
        self._notification_id = notification_id
        self._sender_id = sender_id
        self._sender_type = sender_type
        self._text = text
        self._timestamp = timestamp
        self._type = type

    @classmethod
    def from_dict(cls, dikt: dict) -> 'GetCharactersCharacterIdNotifications200Ok':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The get_characters_character_id_notifications_200_ok of this GetCharactersCharacterIdNotifications200Ok.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def is_read(self):
        """Gets the is_read of this GetCharactersCharacterIdNotifications200Ok.

        is_read boolean

        :return: The is_read of this GetCharactersCharacterIdNotifications200Ok.
        :rtype: bool
        """
        return self._is_read

    @is_read.setter
    def is_read(self, is_read):
        """Sets the is_read of this GetCharactersCharacterIdNotifications200Ok.

        is_read boolean

        :param is_read: The is_read of this GetCharactersCharacterIdNotifications200Ok.
        :type is_read: bool
        """

        self._is_read = is_read

    @property
    def notification_id(self):
        """Gets the notification_id of this GetCharactersCharacterIdNotifications200Ok.

        notification_id integer

        :return: The notification_id of this GetCharactersCharacterIdNotifications200Ok.
        :rtype: int
        """
        return self._notification_id

    @notification_id.setter
    def notification_id(self, notification_id):
        """Sets the notification_id of this GetCharactersCharacterIdNotifications200Ok.

        notification_id integer

        :param notification_id: The notification_id of this GetCharactersCharacterIdNotifications200Ok.
        :type notification_id: int
        """
        if notification_id is None:
            raise ValueError("Invalid value for `notification_id`, must not be `None`")

        self._notification_id = notification_id

    @property
    def sender_id(self):
        """Gets the sender_id of this GetCharactersCharacterIdNotifications200Ok.

        sender_id integer

        :return: The sender_id of this GetCharactersCharacterIdNotifications200Ok.
        :rtype: int
        """
        return self._sender_id

    @sender_id.setter
    def sender_id(self, sender_id):
        """Sets the sender_id of this GetCharactersCharacterIdNotifications200Ok.

        sender_id integer

        :param sender_id: The sender_id of this GetCharactersCharacterIdNotifications200Ok.
        :type sender_id: int
        """
        if sender_id is None:
            raise ValueError("Invalid value for `sender_id`, must not be `None`")

        self._sender_id = sender_id

    @property
    def sender_type(self):
        """Gets the sender_type of this GetCharactersCharacterIdNotifications200Ok.

        sender_type string

        :return: The sender_type of this GetCharactersCharacterIdNotifications200Ok.
        :rtype: str
        """
        return self._sender_type

    @sender_type.setter
    def sender_type(self, sender_type):
        """Sets the sender_type of this GetCharactersCharacterIdNotifications200Ok.

        sender_type string

        :param sender_type: The sender_type of this GetCharactersCharacterIdNotifications200Ok.
        :type sender_type: str
        """
        allowed_values = ["character", "corporation", "alliance", "faction", "other"]  # noqa: E501
        if sender_type not in allowed_values:
            raise ValueError(
                "Invalid value for `sender_type` ({0}), must be one of {1}"
                .format(sender_type, allowed_values)
            )

        self._sender_type = sender_type

    @property
    def text(self):
        """Gets the text of this GetCharactersCharacterIdNotifications200Ok.

        text string

        :return: The text of this GetCharactersCharacterIdNotifications200Ok.
        :rtype: str
        """
        return self._text

    @text.setter
    def text(self, text):
        """Sets the text of this GetCharactersCharacterIdNotifications200Ok.

        text string

        :param text: The text of this GetCharactersCharacterIdNotifications200Ok.
        :type text: str
        """

        self._text = text

    @property
    def timestamp(self):
        """Gets the timestamp of this GetCharactersCharacterIdNotifications200Ok.

        timestamp string

        :return: The timestamp of this GetCharactersCharacterIdNotifications200Ok.
        :rtype: datetime
        """
        return self._timestamp

    @timestamp.setter
    def timestamp(self, timestamp):
        """Sets the timestamp of this GetCharactersCharacterIdNotifications200Ok.

        timestamp string

        :param timestamp: The timestamp of this GetCharactersCharacterIdNotifications200Ok.
        :type timestamp: datetime
        """
        if timestamp is None:
            raise ValueError("Invalid value for `timestamp`, must not be `None`")

        self._timestamp = timestamp

    @property
    def type(self):
        """Gets the type of this GetCharactersCharacterIdNotifications200Ok.

        type string

        :return: The type of this GetCharactersCharacterIdNotifications200Ok.
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this GetCharactersCharacterIdNotifications200Ok.

        type string

        :param type: The type of this GetCharactersCharacterIdNotifications200Ok.
        :type type: str
        """
        allowed_values = ["AcceptedAlly", "AcceptedSurrender", "AllAnchoringMsg", "AllMaintenanceBillMsg", "AllStrucInvulnerableMsg", "AllStructVulnerableMsg", "AllWarCorpJoinedAllianceMsg", "AllWarDeclaredMsg", "AllWarInvalidatedMsg", "AllWarRetractedMsg", "AllWarSurrenderMsg", "AllianceCapitalChanged", "AllyContractCancelled", "AllyJoinedWarAggressorMsg", "AllyJoinedWarAllyMsg", "AllyJoinedWarDefenderMsg", "BattlePunishFriendlyFire", "BillOutOfMoneyMsg", "BillPaidCorpAllMsg", "BountyClaimMsg", "BountyESSShared", "BountyESSTaken", "BountyPlacedAlliance", "BountyPlacedChar", "BountyPlacedCorp", "BountyYourBountyClaimed", "BuddyConnectContactAdd", "CharAppAcceptMsg", "CharAppRejectMsg", "CharAppWithdrawMsg", "CharLeftCorpMsg", "CharMedalMsg", "CharTerminationMsg", "CloneActivationMsg", "CloneActivationMsg2", "CloneMovedMsg", "CloneRevokedMsg1", "CloneRevokedMsg2", "CombatOperationFinished", "ContactAdd", "ContactEdit", "ContainerPasswordMsg", "CorpAllBillMsg", "CorpAppAcceptMsg", "CorpAppInvitedMsg", "CorpAppNewMsg", "CorpAppRejectCustomMsg", "CorpAppRejectMsg", "CorpDividendMsg", "CorpFriendlyFireDisableTimerCompleted", "CorpFriendlyFireDisableTimerStarted", "CorpFriendlyFireEnableTimerCompleted", "CorpFriendlyFireEnableTimerStarted", "CorpKicked", "CorpLiquidationMsg", "CorpNewCEOMsg", "CorpNewsMsg", "CorpOfficeExpirationMsg", "CorpStructLostMsg", "CorpTaxChangeMsg", "CorpVoteCEORevokedMsg", "CorpVoteMsg", "CorpWarDeclaredMsg", "CorpWarFightingLegalMsg", "CorpWarInvalidatedMsg", "CorpWarRetractedMsg", "CorpWarSurrenderMsg", "CustomsMsg", "DeclareWar", "DistrictAttacked", "DustAppAcceptedMsg", "EntosisCaptureStarted", "FWAllianceKickMsg", "FWAllianceWarningMsg", "FWCharKickMsg", "FWCharRankGainMsg", "FWCharRankLossMsg", "FWCharWarningMsg", "FWCorpJoinMsg", "FWCorpKickMsg", "FWCorpLeaveMsg", "FWCorpWarningMsg", "FacWarCorpJoinRequestMsg", "FacWarCorpJoinWithdrawMsg", "FacWarCorpLeaveRequestMsg", "FacWarCorpLeaveWithdrawMsg", "FacWarLPDisqualifiedEvent", "FacWarLPDisqualifiedKill", "FacWarLPPayoutEvent", "FacWarLPPayoutKill", "GameTimeAdded", "GameTimeReceived", "GameTimeSent", "GiftReceived", "IHubDestroyedByBillFailure", "IncursionCompletedMsg", "IndustryOperationFinished", "IndustryTeamAuctionLost", "IndustryTeamAuctionWon", "InfrastructureHubBillAboutToExpire", "InsuranceExpirationMsg", "InsuranceFirstShipMsg", "InsuranceInvalidatedMsg", "InsuranceIssuedMsg", "InsurancePayoutMsg", "JumpCloneDeletedMsg1", "JumpCloneDeletedMsg2", "KillReportFinalBlow", "KillReportVictim", "KillRightAvailable", "KillRightAvailableOpen", "KillRightEarned", "KillRightUnavailable", "KillRightUnavailableOpen", "KillRightUsed", "LocateCharMsg", "MadeWarMutual", "MercOfferedNegotiationMsg", "MissionOfferExpirationMsg", "MissionTimeoutMsg", "MoonminingAutomaticFracture", "MoonminingExtractionCancelled", "MoonminingExtractionFinished", "MoonminingExtractionStarted", "MoonminingLaserFired", "NPCStandingsGained", "NPCStandingsLost", "OfferedSurrender", "OfferedToAlly", "OldLscMessages", "OperationFinished", "OrbitalAttacked", "OrbitalReinforced", "OwnershipTransferred", "ReimbursementMsg", "ResearchMissionAvailableMsg", "RetractsWar", "SeasonalChallengeCompleted", "SovAllClaimAquiredMsg", "SovAllClaimLostMsg", "SovCommandNodeEventStarted", "SovCorpBillLateMsg", "SovCorpClaimFailMsg", "SovDisruptorMsg", "SovStationEnteredFreeport", "SovStructureDestroyed", "SovStructureReinforced", "SovStructureSelfDestructCancel", "SovStructureSelfDestructFinished", "SovStructureSelfDestructRequested", "SovereigntyIHDamageMsg", "SovereigntySBUDamageMsg", "SovereigntyTCUDamageMsg", "StationAggressionMsg1", "StationAggressionMsg2", "StationConquerMsg", "StationServiceDisabled", "StationServiceEnabled", "StationStateChangeMsg", "StoryLineMissionAvailableMsg", "StructureAnchoring", "StructureCourierContractChanged", "StructureDestroyed", "StructureFuelAlert", "StructureItemsDelivered", "StructureItemsMovedToSafety", "StructureLostArmor", "StructureLostShields", "StructureOnline", "StructureServicesOffline", "StructureUnanchoring", "StructureUnderAttack", "StructureWentHighPower", "StructureWentLowPower", "StructuresJobsCancelled", "StructuresJobsPaused", "StructuresReinforcementChanged", "TowerAlertMsg", "TowerResourceAlertMsg", "TransactionReversalMsg", "TutorialMsg", "WarAllyOfferDeclinedMsg", "WarSurrenderDeclinedMsg", "WarSurrenderOfferMsg"]  # noqa: E501
        if type not in allowed_values:
            raise ValueError(
                "Invalid value for `type` ({0}), must be one of {1}"
                .format(type, allowed_values)
            )

        self._type = type
