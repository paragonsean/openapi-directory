# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class GetUniverseSystemsSystemIdPlanet(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, asteroid_belts: List[int]=None, moons: List[int]=None, planet_id: int=None):
        """GetUniverseSystemsSystemIdPlanet - a model defined in OpenAPI

        :param asteroid_belts: The asteroid_belts of this GetUniverseSystemsSystemIdPlanet.
        :param moons: The moons of this GetUniverseSystemsSystemIdPlanet.
        :param planet_id: The planet_id of this GetUniverseSystemsSystemIdPlanet.
        """
        self.openapi_types = {
            'asteroid_belts': List[int],
            'moons': List[int],
            'planet_id': int
        }

        self.attribute_map = {
            'asteroid_belts': 'asteroid_belts',
            'moons': 'moons',
            'planet_id': 'planet_id'
        }

        self._asteroid_belts = asteroid_belts
        self._moons = moons
        self._planet_id = planet_id

    @classmethod
    def from_dict(cls, dikt: dict) -> 'GetUniverseSystemsSystemIdPlanet':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The get_universe_systems_system_id_planet of this GetUniverseSystemsSystemIdPlanet.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def asteroid_belts(self):
        """Gets the asteroid_belts of this GetUniverseSystemsSystemIdPlanet.

        asteroid_belts array

        :return: The asteroid_belts of this GetUniverseSystemsSystemIdPlanet.
        :rtype: List[int]
        """
        return self._asteroid_belts

    @asteroid_belts.setter
    def asteroid_belts(self, asteroid_belts):
        """Sets the asteroid_belts of this GetUniverseSystemsSystemIdPlanet.

        asteroid_belts array

        :param asteroid_belts: The asteroid_belts of this GetUniverseSystemsSystemIdPlanet.
        :type asteroid_belts: List[int]
        """
        if asteroid_belts is not None and len(asteroid_belts) > 100:
            raise ValueError("Invalid value for `asteroid_belts`, number of items must be less than or equal to `100`")

        self._asteroid_belts = asteroid_belts

    @property
    def moons(self):
        """Gets the moons of this GetUniverseSystemsSystemIdPlanet.

        moons array

        :return: The moons of this GetUniverseSystemsSystemIdPlanet.
        :rtype: List[int]
        """
        return self._moons

    @moons.setter
    def moons(self, moons):
        """Sets the moons of this GetUniverseSystemsSystemIdPlanet.

        moons array

        :param moons: The moons of this GetUniverseSystemsSystemIdPlanet.
        :type moons: List[int]
        """
        if moons is not None and len(moons) > 1000:
            raise ValueError("Invalid value for `moons`, number of items must be less than or equal to `1000`")

        self._moons = moons

    @property
    def planet_id(self):
        """Gets the planet_id of this GetUniverseSystemsSystemIdPlanet.

        planet_id integer

        :return: The planet_id of this GetUniverseSystemsSystemIdPlanet.
        :rtype: int
        """
        return self._planet_id

    @planet_id.setter
    def planet_id(self, planet_id):
        """Sets the planet_id of this GetUniverseSystemsSystemIdPlanet.

        planet_id integer

        :param planet_id: The planet_id of this GetUniverseSystemsSystemIdPlanet.
        :type planet_id: int
        """
        if planet_id is None:
            raise ValueError("Invalid value for `planet_id`, must not be `None`")

        self._planet_id = planet_id
