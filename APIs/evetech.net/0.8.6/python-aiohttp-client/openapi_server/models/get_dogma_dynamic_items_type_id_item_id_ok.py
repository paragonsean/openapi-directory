# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.get_dogma_dynamic_items_type_id_item_id_dogma_attribute import GetDogmaDynamicItemsTypeIdItemIdDogmaAttribute
from openapi_server.models.get_dogma_dynamic_items_type_id_item_id_dogma_effect import GetDogmaDynamicItemsTypeIdItemIdDogmaEffect
from openapi_server import util


class GetDogmaDynamicItemsTypeIdItemIdOk(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, created_by: int=None, dogma_attributes: List[GetDogmaDynamicItemsTypeIdItemIdDogmaAttribute]=None, dogma_effects: List[GetDogmaDynamicItemsTypeIdItemIdDogmaEffect]=None, mutator_type_id: int=None, source_type_id: int=None):
        """GetDogmaDynamicItemsTypeIdItemIdOk - a model defined in OpenAPI

        :param created_by: The created_by of this GetDogmaDynamicItemsTypeIdItemIdOk.
        :param dogma_attributes: The dogma_attributes of this GetDogmaDynamicItemsTypeIdItemIdOk.
        :param dogma_effects: The dogma_effects of this GetDogmaDynamicItemsTypeIdItemIdOk.
        :param mutator_type_id: The mutator_type_id of this GetDogmaDynamicItemsTypeIdItemIdOk.
        :param source_type_id: The source_type_id of this GetDogmaDynamicItemsTypeIdItemIdOk.
        """
        self.openapi_types = {
            'created_by': int,
            'dogma_attributes': List[GetDogmaDynamicItemsTypeIdItemIdDogmaAttribute],
            'dogma_effects': List[GetDogmaDynamicItemsTypeIdItemIdDogmaEffect],
            'mutator_type_id': int,
            'source_type_id': int
        }

        self.attribute_map = {
            'created_by': 'created_by',
            'dogma_attributes': 'dogma_attributes',
            'dogma_effects': 'dogma_effects',
            'mutator_type_id': 'mutator_type_id',
            'source_type_id': 'source_type_id'
        }

        self._created_by = created_by
        self._dogma_attributes = dogma_attributes
        self._dogma_effects = dogma_effects
        self._mutator_type_id = mutator_type_id
        self._source_type_id = source_type_id

    @classmethod
    def from_dict(cls, dikt: dict) -> 'GetDogmaDynamicItemsTypeIdItemIdOk':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The get_dogma_dynamic_items_type_id_item_id_ok of this GetDogmaDynamicItemsTypeIdItemIdOk.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def created_by(self):
        """Gets the created_by of this GetDogmaDynamicItemsTypeIdItemIdOk.

        The ID of the character who created the item

        :return: The created_by of this GetDogmaDynamicItemsTypeIdItemIdOk.
        :rtype: int
        """
        return self._created_by

    @created_by.setter
    def created_by(self, created_by):
        """Sets the created_by of this GetDogmaDynamicItemsTypeIdItemIdOk.

        The ID of the character who created the item

        :param created_by: The created_by of this GetDogmaDynamicItemsTypeIdItemIdOk.
        :type created_by: int
        """
        if created_by is None:
            raise ValueError("Invalid value for `created_by`, must not be `None`")

        self._created_by = created_by

    @property
    def dogma_attributes(self):
        """Gets the dogma_attributes of this GetDogmaDynamicItemsTypeIdItemIdOk.

        dogma_attributes array

        :return: The dogma_attributes of this GetDogmaDynamicItemsTypeIdItemIdOk.
        :rtype: List[GetDogmaDynamicItemsTypeIdItemIdDogmaAttribute]
        """
        return self._dogma_attributes

    @dogma_attributes.setter
    def dogma_attributes(self, dogma_attributes):
        """Sets the dogma_attributes of this GetDogmaDynamicItemsTypeIdItemIdOk.

        dogma_attributes array

        :param dogma_attributes: The dogma_attributes of this GetDogmaDynamicItemsTypeIdItemIdOk.
        :type dogma_attributes: List[GetDogmaDynamicItemsTypeIdItemIdDogmaAttribute]
        """
        if dogma_attributes is None:
            raise ValueError("Invalid value for `dogma_attributes`, must not be `None`")
        if dogma_attributes is not None and len(dogma_attributes) > 1000:
            raise ValueError("Invalid value for `dogma_attributes`, number of items must be less than or equal to `1000`")

        self._dogma_attributes = dogma_attributes

    @property
    def dogma_effects(self):
        """Gets the dogma_effects of this GetDogmaDynamicItemsTypeIdItemIdOk.

        dogma_effects array

        :return: The dogma_effects of this GetDogmaDynamicItemsTypeIdItemIdOk.
        :rtype: List[GetDogmaDynamicItemsTypeIdItemIdDogmaEffect]
        """
        return self._dogma_effects

    @dogma_effects.setter
    def dogma_effects(self, dogma_effects):
        """Sets the dogma_effects of this GetDogmaDynamicItemsTypeIdItemIdOk.

        dogma_effects array

        :param dogma_effects: The dogma_effects of this GetDogmaDynamicItemsTypeIdItemIdOk.
        :type dogma_effects: List[GetDogmaDynamicItemsTypeIdItemIdDogmaEffect]
        """
        if dogma_effects is None:
            raise ValueError("Invalid value for `dogma_effects`, must not be `None`")
        if dogma_effects is not None and len(dogma_effects) > 1000:
            raise ValueError("Invalid value for `dogma_effects`, number of items must be less than or equal to `1000`")

        self._dogma_effects = dogma_effects

    @property
    def mutator_type_id(self):
        """Gets the mutator_type_id of this GetDogmaDynamicItemsTypeIdItemIdOk.

        The type ID of the mutator used to generate the dynamic item.

        :return: The mutator_type_id of this GetDogmaDynamicItemsTypeIdItemIdOk.
        :rtype: int
        """
        return self._mutator_type_id

    @mutator_type_id.setter
    def mutator_type_id(self, mutator_type_id):
        """Sets the mutator_type_id of this GetDogmaDynamicItemsTypeIdItemIdOk.

        The type ID of the mutator used to generate the dynamic item.

        :param mutator_type_id: The mutator_type_id of this GetDogmaDynamicItemsTypeIdItemIdOk.
        :type mutator_type_id: int
        """
        if mutator_type_id is None:
            raise ValueError("Invalid value for `mutator_type_id`, must not be `None`")

        self._mutator_type_id = mutator_type_id

    @property
    def source_type_id(self):
        """Gets the source_type_id of this GetDogmaDynamicItemsTypeIdItemIdOk.

        The type ID of the source item the mutator was applied to create the dynamic item.

        :return: The source_type_id of this GetDogmaDynamicItemsTypeIdItemIdOk.
        :rtype: int
        """
        return self._source_type_id

    @source_type_id.setter
    def source_type_id(self, source_type_id):
        """Sets the source_type_id of this GetDogmaDynamicItemsTypeIdItemIdOk.

        The type ID of the source item the mutator was applied to create the dynamic item.

        :param source_type_id: The source_type_id of this GetDogmaDynamicItemsTypeIdItemIdOk.
        :type source_type_id: int
        """
        if source_type_id is None:
            raise ValueError("Invalid value for `source_type_id`, must not be `None`")

        self._source_type_id = source_type_id
