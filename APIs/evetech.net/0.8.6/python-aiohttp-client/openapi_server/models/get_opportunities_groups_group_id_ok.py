# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class GetOpportunitiesGroupsGroupIdOk(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, connected_groups: List[int]=None, description: str=None, group_id: int=None, name: str=None, notification: str=None, required_tasks: List[int]=None):
        """GetOpportunitiesGroupsGroupIdOk - a model defined in OpenAPI

        :param connected_groups: The connected_groups of this GetOpportunitiesGroupsGroupIdOk.
        :param description: The description of this GetOpportunitiesGroupsGroupIdOk.
        :param group_id: The group_id of this GetOpportunitiesGroupsGroupIdOk.
        :param name: The name of this GetOpportunitiesGroupsGroupIdOk.
        :param notification: The notification of this GetOpportunitiesGroupsGroupIdOk.
        :param required_tasks: The required_tasks of this GetOpportunitiesGroupsGroupIdOk.
        """
        self.openapi_types = {
            'connected_groups': List[int],
            'description': str,
            'group_id': int,
            'name': str,
            'notification': str,
            'required_tasks': List[int]
        }

        self.attribute_map = {
            'connected_groups': 'connected_groups',
            'description': 'description',
            'group_id': 'group_id',
            'name': 'name',
            'notification': 'notification',
            'required_tasks': 'required_tasks'
        }

        self._connected_groups = connected_groups
        self._description = description
        self._group_id = group_id
        self._name = name
        self._notification = notification
        self._required_tasks = required_tasks

    @classmethod
    def from_dict(cls, dikt: dict) -> 'GetOpportunitiesGroupsGroupIdOk':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The get_opportunities_groups_group_id_ok of this GetOpportunitiesGroupsGroupIdOk.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def connected_groups(self):
        """Gets the connected_groups of this GetOpportunitiesGroupsGroupIdOk.

        The groups that are connected to this group on the opportunities map

        :return: The connected_groups of this GetOpportunitiesGroupsGroupIdOk.
        :rtype: List[int]
        """
        return self._connected_groups

    @connected_groups.setter
    def connected_groups(self, connected_groups):
        """Sets the connected_groups of this GetOpportunitiesGroupsGroupIdOk.

        The groups that are connected to this group on the opportunities map

        :param connected_groups: The connected_groups of this GetOpportunitiesGroupsGroupIdOk.
        :type connected_groups: List[int]
        """
        if connected_groups is None:
            raise ValueError("Invalid value for `connected_groups`, must not be `None`")
        if connected_groups is not None and len(connected_groups) > 50:
            raise ValueError("Invalid value for `connected_groups`, number of items must be less than or equal to `50`")

        self._connected_groups = connected_groups

    @property
    def description(self):
        """Gets the description of this GetOpportunitiesGroupsGroupIdOk.

        description string

        :return: The description of this GetOpportunitiesGroupsGroupIdOk.
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this GetOpportunitiesGroupsGroupIdOk.

        description string

        :param description: The description of this GetOpportunitiesGroupsGroupIdOk.
        :type description: str
        """
        if description is None:
            raise ValueError("Invalid value for `description`, must not be `None`")

        self._description = description

    @property
    def group_id(self):
        """Gets the group_id of this GetOpportunitiesGroupsGroupIdOk.

        group_id integer

        :return: The group_id of this GetOpportunitiesGroupsGroupIdOk.
        :rtype: int
        """
        return self._group_id

    @group_id.setter
    def group_id(self, group_id):
        """Sets the group_id of this GetOpportunitiesGroupsGroupIdOk.

        group_id integer

        :param group_id: The group_id of this GetOpportunitiesGroupsGroupIdOk.
        :type group_id: int
        """
        if group_id is None:
            raise ValueError("Invalid value for `group_id`, must not be `None`")

        self._group_id = group_id

    @property
    def name(self):
        """Gets the name of this GetOpportunitiesGroupsGroupIdOk.

        name string

        :return: The name of this GetOpportunitiesGroupsGroupIdOk.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this GetOpportunitiesGroupsGroupIdOk.

        name string

        :param name: The name of this GetOpportunitiesGroupsGroupIdOk.
        :type name: str
        """
        if name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")

        self._name = name

    @property
    def notification(self):
        """Gets the notification of this GetOpportunitiesGroupsGroupIdOk.

        notification string

        :return: The notification of this GetOpportunitiesGroupsGroupIdOk.
        :rtype: str
        """
        return self._notification

    @notification.setter
    def notification(self, notification):
        """Sets the notification of this GetOpportunitiesGroupsGroupIdOk.

        notification string

        :param notification: The notification of this GetOpportunitiesGroupsGroupIdOk.
        :type notification: str
        """
        if notification is None:
            raise ValueError("Invalid value for `notification`, must not be `None`")

        self._notification = notification

    @property
    def required_tasks(self):
        """Gets the required_tasks of this GetOpportunitiesGroupsGroupIdOk.

        Tasks need to complete for this group

        :return: The required_tasks of this GetOpportunitiesGroupsGroupIdOk.
        :rtype: List[int]
        """
        return self._required_tasks

    @required_tasks.setter
    def required_tasks(self, required_tasks):
        """Sets the required_tasks of this GetOpportunitiesGroupsGroupIdOk.

        Tasks need to complete for this group

        :param required_tasks: The required_tasks of this GetOpportunitiesGroupsGroupIdOk.
        :type required_tasks: List[int]
        """
        if required_tasks is None:
            raise ValueError("Invalid value for `required_tasks`, must not be `None`")
        if required_tasks is not None and len(required_tasks) > 100:
            raise ValueError("Invalid value for `required_tasks`, number of items must be less than or equal to `100`")

        self._required_tasks = required_tasks
