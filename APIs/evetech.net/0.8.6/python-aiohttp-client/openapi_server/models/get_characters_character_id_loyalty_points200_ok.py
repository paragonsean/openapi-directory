# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class GetCharactersCharacterIdLoyaltyPoints200Ok(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, corporation_id: int=None, loyalty_points: int=None):
        """GetCharactersCharacterIdLoyaltyPoints200Ok - a model defined in OpenAPI

        :param corporation_id: The corporation_id of this GetCharactersCharacterIdLoyaltyPoints200Ok.
        :param loyalty_points: The loyalty_points of this GetCharactersCharacterIdLoyaltyPoints200Ok.
        """
        self.openapi_types = {
            'corporation_id': int,
            'loyalty_points': int
        }

        self.attribute_map = {
            'corporation_id': 'corporation_id',
            'loyalty_points': 'loyalty_points'
        }

        self._corporation_id = corporation_id
        self._loyalty_points = loyalty_points

    @classmethod
    def from_dict(cls, dikt: dict) -> 'GetCharactersCharacterIdLoyaltyPoints200Ok':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The get_characters_character_id_loyalty_points_200_ok of this GetCharactersCharacterIdLoyaltyPoints200Ok.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def corporation_id(self):
        """Gets the corporation_id of this GetCharactersCharacterIdLoyaltyPoints200Ok.

        corporation_id integer

        :return: The corporation_id of this GetCharactersCharacterIdLoyaltyPoints200Ok.
        :rtype: int
        """
        return self._corporation_id

    @corporation_id.setter
    def corporation_id(self, corporation_id):
        """Sets the corporation_id of this GetCharactersCharacterIdLoyaltyPoints200Ok.

        corporation_id integer

        :param corporation_id: The corporation_id of this GetCharactersCharacterIdLoyaltyPoints200Ok.
        :type corporation_id: int
        """
        if corporation_id is None:
            raise ValueError("Invalid value for `corporation_id`, must not be `None`")

        self._corporation_id = corporation_id

    @property
    def loyalty_points(self):
        """Gets the loyalty_points of this GetCharactersCharacterIdLoyaltyPoints200Ok.

        loyalty_points integer

        :return: The loyalty_points of this GetCharactersCharacterIdLoyaltyPoints200Ok.
        :rtype: int
        """
        return self._loyalty_points

    @loyalty_points.setter
    def loyalty_points(self, loyalty_points):
        """Sets the loyalty_points of this GetCharactersCharacterIdLoyaltyPoints200Ok.

        loyalty_points integer

        :param loyalty_points: The loyalty_points of this GetCharactersCharacterIdLoyaltyPoints200Ok.
        :type loyalty_points: int
        """
        if loyalty_points is None:
            raise ValueError("Invalid value for `loyalty_points`, must not be `None`")

        self._loyalty_points = loyalty_points
