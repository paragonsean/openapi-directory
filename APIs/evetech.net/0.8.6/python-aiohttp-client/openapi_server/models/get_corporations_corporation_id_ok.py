# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class GetCorporationsCorporationIdOk(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, alliance_id: int=None, ceo_id: int=None, creator_id: int=None, date_founded: datetime=None, description: str=None, faction_id: int=None, home_station_id: int=None, member_count: int=None, name: str=None, shares: int=None, tax_rate: float=None, ticker: str=None, url: str=None, war_eligible: bool=None):
        """GetCorporationsCorporationIdOk - a model defined in OpenAPI

        :param alliance_id: The alliance_id of this GetCorporationsCorporationIdOk.
        :param ceo_id: The ceo_id of this GetCorporationsCorporationIdOk.
        :param creator_id: The creator_id of this GetCorporationsCorporationIdOk.
        :param date_founded: The date_founded of this GetCorporationsCorporationIdOk.
        :param description: The description of this GetCorporationsCorporationIdOk.
        :param faction_id: The faction_id of this GetCorporationsCorporationIdOk.
        :param home_station_id: The home_station_id of this GetCorporationsCorporationIdOk.
        :param member_count: The member_count of this GetCorporationsCorporationIdOk.
        :param name: The name of this GetCorporationsCorporationIdOk.
        :param shares: The shares of this GetCorporationsCorporationIdOk.
        :param tax_rate: The tax_rate of this GetCorporationsCorporationIdOk.
        :param ticker: The ticker of this GetCorporationsCorporationIdOk.
        :param url: The url of this GetCorporationsCorporationIdOk.
        :param war_eligible: The war_eligible of this GetCorporationsCorporationIdOk.
        """
        self.openapi_types = {
            'alliance_id': int,
            'ceo_id': int,
            'creator_id': int,
            'date_founded': datetime,
            'description': str,
            'faction_id': int,
            'home_station_id': int,
            'member_count': int,
            'name': str,
            'shares': int,
            'tax_rate': float,
            'ticker': str,
            'url': str,
            'war_eligible': bool
        }

        self.attribute_map = {
            'alliance_id': 'alliance_id',
            'ceo_id': 'ceo_id',
            'creator_id': 'creator_id',
            'date_founded': 'date_founded',
            'description': 'description',
            'faction_id': 'faction_id',
            'home_station_id': 'home_station_id',
            'member_count': 'member_count',
            'name': 'name',
            'shares': 'shares',
            'tax_rate': 'tax_rate',
            'ticker': 'ticker',
            'url': 'url',
            'war_eligible': 'war_eligible'
        }

        self._alliance_id = alliance_id
        self._ceo_id = ceo_id
        self._creator_id = creator_id
        self._date_founded = date_founded
        self._description = description
        self._faction_id = faction_id
        self._home_station_id = home_station_id
        self._member_count = member_count
        self._name = name
        self._shares = shares
        self._tax_rate = tax_rate
        self._ticker = ticker
        self._url = url
        self._war_eligible = war_eligible

    @classmethod
    def from_dict(cls, dikt: dict) -> 'GetCorporationsCorporationIdOk':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The get_corporations_corporation_id_ok of this GetCorporationsCorporationIdOk.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def alliance_id(self):
        """Gets the alliance_id of this GetCorporationsCorporationIdOk.

        ID of the alliance that corporation is a member of, if any

        :return: The alliance_id of this GetCorporationsCorporationIdOk.
        :rtype: int
        """
        return self._alliance_id

    @alliance_id.setter
    def alliance_id(self, alliance_id):
        """Sets the alliance_id of this GetCorporationsCorporationIdOk.

        ID of the alliance that corporation is a member of, if any

        :param alliance_id: The alliance_id of this GetCorporationsCorporationIdOk.
        :type alliance_id: int
        """

        self._alliance_id = alliance_id

    @property
    def ceo_id(self):
        """Gets the ceo_id of this GetCorporationsCorporationIdOk.

        ceo_id integer

        :return: The ceo_id of this GetCorporationsCorporationIdOk.
        :rtype: int
        """
        return self._ceo_id

    @ceo_id.setter
    def ceo_id(self, ceo_id):
        """Sets the ceo_id of this GetCorporationsCorporationIdOk.

        ceo_id integer

        :param ceo_id: The ceo_id of this GetCorporationsCorporationIdOk.
        :type ceo_id: int
        """
        if ceo_id is None:
            raise ValueError("Invalid value for `ceo_id`, must not be `None`")

        self._ceo_id = ceo_id

    @property
    def creator_id(self):
        """Gets the creator_id of this GetCorporationsCorporationIdOk.

        creator_id integer

        :return: The creator_id of this GetCorporationsCorporationIdOk.
        :rtype: int
        """
        return self._creator_id

    @creator_id.setter
    def creator_id(self, creator_id):
        """Sets the creator_id of this GetCorporationsCorporationIdOk.

        creator_id integer

        :param creator_id: The creator_id of this GetCorporationsCorporationIdOk.
        :type creator_id: int
        """
        if creator_id is None:
            raise ValueError("Invalid value for `creator_id`, must not be `None`")

        self._creator_id = creator_id

    @property
    def date_founded(self):
        """Gets the date_founded of this GetCorporationsCorporationIdOk.

        date_founded string

        :return: The date_founded of this GetCorporationsCorporationIdOk.
        :rtype: datetime
        """
        return self._date_founded

    @date_founded.setter
    def date_founded(self, date_founded):
        """Sets the date_founded of this GetCorporationsCorporationIdOk.

        date_founded string

        :param date_founded: The date_founded of this GetCorporationsCorporationIdOk.
        :type date_founded: datetime
        """

        self._date_founded = date_founded

    @property
    def description(self):
        """Gets the description of this GetCorporationsCorporationIdOk.

        description string

        :return: The description of this GetCorporationsCorporationIdOk.
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this GetCorporationsCorporationIdOk.

        description string

        :param description: The description of this GetCorporationsCorporationIdOk.
        :type description: str
        """

        self._description = description

    @property
    def faction_id(self):
        """Gets the faction_id of this GetCorporationsCorporationIdOk.

        faction_id integer

        :return: The faction_id of this GetCorporationsCorporationIdOk.
        :rtype: int
        """
        return self._faction_id

    @faction_id.setter
    def faction_id(self, faction_id):
        """Sets the faction_id of this GetCorporationsCorporationIdOk.

        faction_id integer

        :param faction_id: The faction_id of this GetCorporationsCorporationIdOk.
        :type faction_id: int
        """

        self._faction_id = faction_id

    @property
    def home_station_id(self):
        """Gets the home_station_id of this GetCorporationsCorporationIdOk.

        home_station_id integer

        :return: The home_station_id of this GetCorporationsCorporationIdOk.
        :rtype: int
        """
        return self._home_station_id

    @home_station_id.setter
    def home_station_id(self, home_station_id):
        """Sets the home_station_id of this GetCorporationsCorporationIdOk.

        home_station_id integer

        :param home_station_id: The home_station_id of this GetCorporationsCorporationIdOk.
        :type home_station_id: int
        """

        self._home_station_id = home_station_id

    @property
    def member_count(self):
        """Gets the member_count of this GetCorporationsCorporationIdOk.

        member_count integer

        :return: The member_count of this GetCorporationsCorporationIdOk.
        :rtype: int
        """
        return self._member_count

    @member_count.setter
    def member_count(self, member_count):
        """Sets the member_count of this GetCorporationsCorporationIdOk.

        member_count integer

        :param member_count: The member_count of this GetCorporationsCorporationIdOk.
        :type member_count: int
        """
        if member_count is None:
            raise ValueError("Invalid value for `member_count`, must not be `None`")

        self._member_count = member_count

    @property
    def name(self):
        """Gets the name of this GetCorporationsCorporationIdOk.

        the full name of the corporation

        :return: The name of this GetCorporationsCorporationIdOk.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this GetCorporationsCorporationIdOk.

        the full name of the corporation

        :param name: The name of this GetCorporationsCorporationIdOk.
        :type name: str
        """
        if name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")

        self._name = name

    @property
    def shares(self):
        """Gets the shares of this GetCorporationsCorporationIdOk.

        shares integer

        :return: The shares of this GetCorporationsCorporationIdOk.
        :rtype: int
        """
        return self._shares

    @shares.setter
    def shares(self, shares):
        """Sets the shares of this GetCorporationsCorporationIdOk.

        shares integer

        :param shares: The shares of this GetCorporationsCorporationIdOk.
        :type shares: int
        """

        self._shares = shares

    @property
    def tax_rate(self):
        """Gets the tax_rate of this GetCorporationsCorporationIdOk.

        tax_rate number

        :return: The tax_rate of this GetCorporationsCorporationIdOk.
        :rtype: float
        """
        return self._tax_rate

    @tax_rate.setter
    def tax_rate(self, tax_rate):
        """Sets the tax_rate of this GetCorporationsCorporationIdOk.

        tax_rate number

        :param tax_rate: The tax_rate of this GetCorporationsCorporationIdOk.
        :type tax_rate: float
        """
        if tax_rate is None:
            raise ValueError("Invalid value for `tax_rate`, must not be `None`")
        if tax_rate is not None and tax_rate > 1:
            raise ValueError("Invalid value for `tax_rate`, must be a value less than or equal to `1`")
        if tax_rate is not None and tax_rate < 0:
            raise ValueError("Invalid value for `tax_rate`, must be a value greater than or equal to `0`")

        self._tax_rate = tax_rate

    @property
    def ticker(self):
        """Gets the ticker of this GetCorporationsCorporationIdOk.

        the short name of the corporation

        :return: The ticker of this GetCorporationsCorporationIdOk.
        :rtype: str
        """
        return self._ticker

    @ticker.setter
    def ticker(self, ticker):
        """Sets the ticker of this GetCorporationsCorporationIdOk.

        the short name of the corporation

        :param ticker: The ticker of this GetCorporationsCorporationIdOk.
        :type ticker: str
        """
        if ticker is None:
            raise ValueError("Invalid value for `ticker`, must not be `None`")

        self._ticker = ticker

    @property
    def url(self):
        """Gets the url of this GetCorporationsCorporationIdOk.

        url string

        :return: The url of this GetCorporationsCorporationIdOk.
        :rtype: str
        """
        return self._url

    @url.setter
    def url(self, url):
        """Sets the url of this GetCorporationsCorporationIdOk.

        url string

        :param url: The url of this GetCorporationsCorporationIdOk.
        :type url: str
        """

        self._url = url

    @property
    def war_eligible(self):
        """Gets the war_eligible of this GetCorporationsCorporationIdOk.

        war_eligible boolean

        :return: The war_eligible of this GetCorporationsCorporationIdOk.
        :rtype: bool
        """
        return self._war_eligible

    @war_eligible.setter
    def war_eligible(self, war_eligible):
        """Sets the war_eligible of this GetCorporationsCorporationIdOk.

        war_eligible boolean

        :param war_eligible: The war_eligible of this GetCorporationsCorporationIdOk.
        :type war_eligible: bool
        """

        self._war_eligible = war_eligible
