# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class GetCharactersCharacterIdWalletTransactions200Ok(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, client_id: int=None, _date: datetime=None, is_buy: bool=None, is_personal: bool=None, journal_ref_id: int=None, location_id: int=None, quantity: int=None, transaction_id: int=None, type_id: int=None, unit_price: float=None):
        """GetCharactersCharacterIdWalletTransactions200Ok - a model defined in OpenAPI

        :param client_id: The client_id of this GetCharactersCharacterIdWalletTransactions200Ok.
        :param _date: The _date of this GetCharactersCharacterIdWalletTransactions200Ok.
        :param is_buy: The is_buy of this GetCharactersCharacterIdWalletTransactions200Ok.
        :param is_personal: The is_personal of this GetCharactersCharacterIdWalletTransactions200Ok.
        :param journal_ref_id: The journal_ref_id of this GetCharactersCharacterIdWalletTransactions200Ok.
        :param location_id: The location_id of this GetCharactersCharacterIdWalletTransactions200Ok.
        :param quantity: The quantity of this GetCharactersCharacterIdWalletTransactions200Ok.
        :param transaction_id: The transaction_id of this GetCharactersCharacterIdWalletTransactions200Ok.
        :param type_id: The type_id of this GetCharactersCharacterIdWalletTransactions200Ok.
        :param unit_price: The unit_price of this GetCharactersCharacterIdWalletTransactions200Ok.
        """
        self.openapi_types = {
            'client_id': int,
            '_date': datetime,
            'is_buy': bool,
            'is_personal': bool,
            'journal_ref_id': int,
            'location_id': int,
            'quantity': int,
            'transaction_id': int,
            'type_id': int,
            'unit_price': float
        }

        self.attribute_map = {
            'client_id': 'client_id',
            '_date': 'date',
            'is_buy': 'is_buy',
            'is_personal': 'is_personal',
            'journal_ref_id': 'journal_ref_id',
            'location_id': 'location_id',
            'quantity': 'quantity',
            'transaction_id': 'transaction_id',
            'type_id': 'type_id',
            'unit_price': 'unit_price'
        }

        self._client_id = client_id
        self.__date = _date
        self._is_buy = is_buy
        self._is_personal = is_personal
        self._journal_ref_id = journal_ref_id
        self._location_id = location_id
        self._quantity = quantity
        self._transaction_id = transaction_id
        self._type_id = type_id
        self._unit_price = unit_price

    @classmethod
    def from_dict(cls, dikt: dict) -> 'GetCharactersCharacterIdWalletTransactions200Ok':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The get_characters_character_id_wallet_transactions_200_ok of this GetCharactersCharacterIdWalletTransactions200Ok.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def client_id(self):
        """Gets the client_id of this GetCharactersCharacterIdWalletTransactions200Ok.

        client_id integer

        :return: The client_id of this GetCharactersCharacterIdWalletTransactions200Ok.
        :rtype: int
        """
        return self._client_id

    @client_id.setter
    def client_id(self, client_id):
        """Sets the client_id of this GetCharactersCharacterIdWalletTransactions200Ok.

        client_id integer

        :param client_id: The client_id of this GetCharactersCharacterIdWalletTransactions200Ok.
        :type client_id: int
        """
        if client_id is None:
            raise ValueError("Invalid value for `client_id`, must not be `None`")

        self._client_id = client_id

    @property
    def _date(self):
        """Gets the _date of this GetCharactersCharacterIdWalletTransactions200Ok.

        Date and time of transaction

        :return: The _date of this GetCharactersCharacterIdWalletTransactions200Ok.
        :rtype: datetime
        """
        return self.__date

    @_date.setter
    def _date(self, _date):
        """Sets the _date of this GetCharactersCharacterIdWalletTransactions200Ok.

        Date and time of transaction

        :param _date: The _date of this GetCharactersCharacterIdWalletTransactions200Ok.
        :type _date: datetime
        """
        if _date is None:
            raise ValueError("Invalid value for `_date`, must not be `None`")

        self.__date = _date

    @property
    def is_buy(self):
        """Gets the is_buy of this GetCharactersCharacterIdWalletTransactions200Ok.

        is_buy boolean

        :return: The is_buy of this GetCharactersCharacterIdWalletTransactions200Ok.
        :rtype: bool
        """
        return self._is_buy

    @is_buy.setter
    def is_buy(self, is_buy):
        """Sets the is_buy of this GetCharactersCharacterIdWalletTransactions200Ok.

        is_buy boolean

        :param is_buy: The is_buy of this GetCharactersCharacterIdWalletTransactions200Ok.
        :type is_buy: bool
        """
        if is_buy is None:
            raise ValueError("Invalid value for `is_buy`, must not be `None`")

        self._is_buy = is_buy

    @property
    def is_personal(self):
        """Gets the is_personal of this GetCharactersCharacterIdWalletTransactions200Ok.

        is_personal boolean

        :return: The is_personal of this GetCharactersCharacterIdWalletTransactions200Ok.
        :rtype: bool
        """
        return self._is_personal

    @is_personal.setter
    def is_personal(self, is_personal):
        """Sets the is_personal of this GetCharactersCharacterIdWalletTransactions200Ok.

        is_personal boolean

        :param is_personal: The is_personal of this GetCharactersCharacterIdWalletTransactions200Ok.
        :type is_personal: bool
        """
        if is_personal is None:
            raise ValueError("Invalid value for `is_personal`, must not be `None`")

        self._is_personal = is_personal

    @property
    def journal_ref_id(self):
        """Gets the journal_ref_id of this GetCharactersCharacterIdWalletTransactions200Ok.

        journal_ref_id integer

        :return: The journal_ref_id of this GetCharactersCharacterIdWalletTransactions200Ok.
        :rtype: int
        """
        return self._journal_ref_id

    @journal_ref_id.setter
    def journal_ref_id(self, journal_ref_id):
        """Sets the journal_ref_id of this GetCharactersCharacterIdWalletTransactions200Ok.

        journal_ref_id integer

        :param journal_ref_id: The journal_ref_id of this GetCharactersCharacterIdWalletTransactions200Ok.
        :type journal_ref_id: int
        """
        if journal_ref_id is None:
            raise ValueError("Invalid value for `journal_ref_id`, must not be `None`")

        self._journal_ref_id = journal_ref_id

    @property
    def location_id(self):
        """Gets the location_id of this GetCharactersCharacterIdWalletTransactions200Ok.

        location_id integer

        :return: The location_id of this GetCharactersCharacterIdWalletTransactions200Ok.
        :rtype: int
        """
        return self._location_id

    @location_id.setter
    def location_id(self, location_id):
        """Sets the location_id of this GetCharactersCharacterIdWalletTransactions200Ok.

        location_id integer

        :param location_id: The location_id of this GetCharactersCharacterIdWalletTransactions200Ok.
        :type location_id: int
        """
        if location_id is None:
            raise ValueError("Invalid value for `location_id`, must not be `None`")

        self._location_id = location_id

    @property
    def quantity(self):
        """Gets the quantity of this GetCharactersCharacterIdWalletTransactions200Ok.

        quantity integer

        :return: The quantity of this GetCharactersCharacterIdWalletTransactions200Ok.
        :rtype: int
        """
        return self._quantity

    @quantity.setter
    def quantity(self, quantity):
        """Sets the quantity of this GetCharactersCharacterIdWalletTransactions200Ok.

        quantity integer

        :param quantity: The quantity of this GetCharactersCharacterIdWalletTransactions200Ok.
        :type quantity: int
        """
        if quantity is None:
            raise ValueError("Invalid value for `quantity`, must not be `None`")

        self._quantity = quantity

    @property
    def transaction_id(self):
        """Gets the transaction_id of this GetCharactersCharacterIdWalletTransactions200Ok.

        Unique transaction ID

        :return: The transaction_id of this GetCharactersCharacterIdWalletTransactions200Ok.
        :rtype: int
        """
        return self._transaction_id

    @transaction_id.setter
    def transaction_id(self, transaction_id):
        """Sets the transaction_id of this GetCharactersCharacterIdWalletTransactions200Ok.

        Unique transaction ID

        :param transaction_id: The transaction_id of this GetCharactersCharacterIdWalletTransactions200Ok.
        :type transaction_id: int
        """
        if transaction_id is None:
            raise ValueError("Invalid value for `transaction_id`, must not be `None`")

        self._transaction_id = transaction_id

    @property
    def type_id(self):
        """Gets the type_id of this GetCharactersCharacterIdWalletTransactions200Ok.

        type_id integer

        :return: The type_id of this GetCharactersCharacterIdWalletTransactions200Ok.
        :rtype: int
        """
        return self._type_id

    @type_id.setter
    def type_id(self, type_id):
        """Sets the type_id of this GetCharactersCharacterIdWalletTransactions200Ok.

        type_id integer

        :param type_id: The type_id of this GetCharactersCharacterIdWalletTransactions200Ok.
        :type type_id: int
        """
        if type_id is None:
            raise ValueError("Invalid value for `type_id`, must not be `None`")

        self._type_id = type_id

    @property
    def unit_price(self):
        """Gets the unit_price of this GetCharactersCharacterIdWalletTransactions200Ok.

        Amount paid per unit

        :return: The unit_price of this GetCharactersCharacterIdWalletTransactions200Ok.
        :rtype: float
        """
        return self._unit_price

    @unit_price.setter
    def unit_price(self, unit_price):
        """Sets the unit_price of this GetCharactersCharacterIdWalletTransactions200Ok.

        Amount paid per unit

        :param unit_price: The unit_price of this GetCharactersCharacterIdWalletTransactions200Ok.
        :type unit_price: float
        """
        if unit_price is None:
            raise ValueError("Invalid value for `unit_price`, must not be `None`")

        self._unit_price = unit_price
