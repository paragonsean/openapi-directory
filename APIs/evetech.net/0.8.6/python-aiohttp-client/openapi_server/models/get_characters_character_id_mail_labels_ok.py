# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.get_characters_character_id_mail_labels_label import GetCharactersCharacterIdMailLabelsLabel
from openapi_server import util


class GetCharactersCharacterIdMailLabelsOk(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, labels: List[GetCharactersCharacterIdMailLabelsLabel]=None, total_unread_count: int=None):
        """GetCharactersCharacterIdMailLabelsOk - a model defined in OpenAPI

        :param labels: The labels of this GetCharactersCharacterIdMailLabelsOk.
        :param total_unread_count: The total_unread_count of this GetCharactersCharacterIdMailLabelsOk.
        """
        self.openapi_types = {
            'labels': List[GetCharactersCharacterIdMailLabelsLabel],
            'total_unread_count': int
        }

        self.attribute_map = {
            'labels': 'labels',
            'total_unread_count': 'total_unread_count'
        }

        self._labels = labels
        self._total_unread_count = total_unread_count

    @classmethod
    def from_dict(cls, dikt: dict) -> 'GetCharactersCharacterIdMailLabelsOk':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The get_characters_character_id_mail_labels_ok of this GetCharactersCharacterIdMailLabelsOk.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def labels(self):
        """Gets the labels of this GetCharactersCharacterIdMailLabelsOk.

        labels array

        :return: The labels of this GetCharactersCharacterIdMailLabelsOk.
        :rtype: List[GetCharactersCharacterIdMailLabelsLabel]
        """
        return self._labels

    @labels.setter
    def labels(self, labels):
        """Sets the labels of this GetCharactersCharacterIdMailLabelsOk.

        labels array

        :param labels: The labels of this GetCharactersCharacterIdMailLabelsOk.
        :type labels: List[GetCharactersCharacterIdMailLabelsLabel]
        """
        if labels is not None and len(labels) > 30:
            raise ValueError("Invalid value for `labels`, number of items must be less than or equal to `30`")

        self._labels = labels

    @property
    def total_unread_count(self):
        """Gets the total_unread_count of this GetCharactersCharacterIdMailLabelsOk.

        total_unread_count integer

        :return: The total_unread_count of this GetCharactersCharacterIdMailLabelsOk.
        :rtype: int
        """
        return self._total_unread_count

    @total_unread_count.setter
    def total_unread_count(self, total_unread_count):
        """Sets the total_unread_count of this GetCharactersCharacterIdMailLabelsOk.

        total_unread_count integer

        :param total_unread_count: The total_unread_count of this GetCharactersCharacterIdMailLabelsOk.
        :type total_unread_count: int
        """
        if total_unread_count is not None and total_unread_count < 0:
            raise ValueError("Invalid value for `total_unread_count`, must be a value greater than or equal to `0`")

        self._total_unread_count = total_unread_count
