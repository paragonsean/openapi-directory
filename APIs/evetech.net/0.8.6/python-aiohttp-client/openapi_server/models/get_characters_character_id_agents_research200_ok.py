# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class GetCharactersCharacterIdAgentsResearch200Ok(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, agent_id: int=None, points_per_day: float=None, remainder_points: float=None, skill_type_id: int=None, started_at: datetime=None):
        """GetCharactersCharacterIdAgentsResearch200Ok - a model defined in OpenAPI

        :param agent_id: The agent_id of this GetCharactersCharacterIdAgentsResearch200Ok.
        :param points_per_day: The points_per_day of this GetCharactersCharacterIdAgentsResearch200Ok.
        :param remainder_points: The remainder_points of this GetCharactersCharacterIdAgentsResearch200Ok.
        :param skill_type_id: The skill_type_id of this GetCharactersCharacterIdAgentsResearch200Ok.
        :param started_at: The started_at of this GetCharactersCharacterIdAgentsResearch200Ok.
        """
        self.openapi_types = {
            'agent_id': int,
            'points_per_day': float,
            'remainder_points': float,
            'skill_type_id': int,
            'started_at': datetime
        }

        self.attribute_map = {
            'agent_id': 'agent_id',
            'points_per_day': 'points_per_day',
            'remainder_points': 'remainder_points',
            'skill_type_id': 'skill_type_id',
            'started_at': 'started_at'
        }

        self._agent_id = agent_id
        self._points_per_day = points_per_day
        self._remainder_points = remainder_points
        self._skill_type_id = skill_type_id
        self._started_at = started_at

    @classmethod
    def from_dict(cls, dikt: dict) -> 'GetCharactersCharacterIdAgentsResearch200Ok':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The get_characters_character_id_agents_research_200_ok of this GetCharactersCharacterIdAgentsResearch200Ok.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def agent_id(self):
        """Gets the agent_id of this GetCharactersCharacterIdAgentsResearch200Ok.

        agent_id integer

        :return: The agent_id of this GetCharactersCharacterIdAgentsResearch200Ok.
        :rtype: int
        """
        return self._agent_id

    @agent_id.setter
    def agent_id(self, agent_id):
        """Sets the agent_id of this GetCharactersCharacterIdAgentsResearch200Ok.

        agent_id integer

        :param agent_id: The agent_id of this GetCharactersCharacterIdAgentsResearch200Ok.
        :type agent_id: int
        """
        if agent_id is None:
            raise ValueError("Invalid value for `agent_id`, must not be `None`")

        self._agent_id = agent_id

    @property
    def points_per_day(self):
        """Gets the points_per_day of this GetCharactersCharacterIdAgentsResearch200Ok.

        points_per_day number

        :return: The points_per_day of this GetCharactersCharacterIdAgentsResearch200Ok.
        :rtype: float
        """
        return self._points_per_day

    @points_per_day.setter
    def points_per_day(self, points_per_day):
        """Sets the points_per_day of this GetCharactersCharacterIdAgentsResearch200Ok.

        points_per_day number

        :param points_per_day: The points_per_day of this GetCharactersCharacterIdAgentsResearch200Ok.
        :type points_per_day: float
        """
        if points_per_day is None:
            raise ValueError("Invalid value for `points_per_day`, must not be `None`")

        self._points_per_day = points_per_day

    @property
    def remainder_points(self):
        """Gets the remainder_points of this GetCharactersCharacterIdAgentsResearch200Ok.

        remainder_points number

        :return: The remainder_points of this GetCharactersCharacterIdAgentsResearch200Ok.
        :rtype: float
        """
        return self._remainder_points

    @remainder_points.setter
    def remainder_points(self, remainder_points):
        """Sets the remainder_points of this GetCharactersCharacterIdAgentsResearch200Ok.

        remainder_points number

        :param remainder_points: The remainder_points of this GetCharactersCharacterIdAgentsResearch200Ok.
        :type remainder_points: float
        """
        if remainder_points is None:
            raise ValueError("Invalid value for `remainder_points`, must not be `None`")

        self._remainder_points = remainder_points

    @property
    def skill_type_id(self):
        """Gets the skill_type_id of this GetCharactersCharacterIdAgentsResearch200Ok.

        skill_type_id integer

        :return: The skill_type_id of this GetCharactersCharacterIdAgentsResearch200Ok.
        :rtype: int
        """
        return self._skill_type_id

    @skill_type_id.setter
    def skill_type_id(self, skill_type_id):
        """Sets the skill_type_id of this GetCharactersCharacterIdAgentsResearch200Ok.

        skill_type_id integer

        :param skill_type_id: The skill_type_id of this GetCharactersCharacterIdAgentsResearch200Ok.
        :type skill_type_id: int
        """
        if skill_type_id is None:
            raise ValueError("Invalid value for `skill_type_id`, must not be `None`")

        self._skill_type_id = skill_type_id

    @property
    def started_at(self):
        """Gets the started_at of this GetCharactersCharacterIdAgentsResearch200Ok.

        started_at string

        :return: The started_at of this GetCharactersCharacterIdAgentsResearch200Ok.
        :rtype: datetime
        """
        return self._started_at

    @started_at.setter
    def started_at(self, started_at):
        """Sets the started_at of this GetCharactersCharacterIdAgentsResearch200Ok.

        started_at string

        :param started_at: The started_at of this GetCharactersCharacterIdAgentsResearch200Ok.
        :type started_at: datetime
        """
        if started_at is None:
            raise ValueError("Invalid value for `started_at`, must not be `None`")

        self._started_at = started_at
