# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.get_characters_character_id_mail_mail_id_recipient import GetCharactersCharacterIdMailMailIdRecipient
from openapi_server import util


class GetCharactersCharacterIdMailMailIdOk(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, body: str=None, _from: int=None, labels: List[int]=None, read: bool=None, recipients: list[GetCharactersCharacterIdMailMailIdRecipient]=None, subject: str=None, timestamp: datetime=None):
        """GetCharactersCharacterIdMailMailIdOk - a model defined in OpenAPI

        :param body: The body of this GetCharactersCharacterIdMailMailIdOk.
        :param _from: The _from of this GetCharactersCharacterIdMailMailIdOk.
        :param labels: The labels of this GetCharactersCharacterIdMailMailIdOk.
        :param read: The read of this GetCharactersCharacterIdMailMailIdOk.
        :param recipients: The recipients of this GetCharactersCharacterIdMailMailIdOk.
        :param subject: The subject of this GetCharactersCharacterIdMailMailIdOk.
        :param timestamp: The timestamp of this GetCharactersCharacterIdMailMailIdOk.
        """
        self.openapi_types = {
            'body': str,
            '_from': int,
            'labels': List[int],
            'read': bool,
            'recipients': list[GetCharactersCharacterIdMailMailIdRecipient],
            'subject': str,
            'timestamp': datetime
        }

        self.attribute_map = {
            'body': 'body',
            '_from': 'from',
            'labels': 'labels',
            'read': 'read',
            'recipients': 'recipients',
            'subject': 'subject',
            'timestamp': 'timestamp'
        }

        self._body = body
        self.__from = _from
        self._labels = labels
        self._read = read
        self._recipients = recipients
        self._subject = subject
        self._timestamp = timestamp

    @classmethod
    def from_dict(cls, dikt: dict) -> 'GetCharactersCharacterIdMailMailIdOk':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The get_characters_character_id_mail_mail_id_ok of this GetCharactersCharacterIdMailMailIdOk.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def body(self):
        """Gets the body of this GetCharactersCharacterIdMailMailIdOk.

        Mail's body

        :return: The body of this GetCharactersCharacterIdMailMailIdOk.
        :rtype: str
        """
        return self._body

    @body.setter
    def body(self, body):
        """Sets the body of this GetCharactersCharacterIdMailMailIdOk.

        Mail's body

        :param body: The body of this GetCharactersCharacterIdMailMailIdOk.
        :type body: str
        """

        self._body = body

    @property
    def _from(self):
        """Gets the _from of this GetCharactersCharacterIdMailMailIdOk.

        From whom the mail was sent

        :return: The _from of this GetCharactersCharacterIdMailMailIdOk.
        :rtype: int
        """
        return self.__from

    @_from.setter
    def _from(self, _from):
        """Sets the _from of this GetCharactersCharacterIdMailMailIdOk.

        From whom the mail was sent

        :param _from: The _from of this GetCharactersCharacterIdMailMailIdOk.
        :type _from: int
        """

        self.__from = _from

    @property
    def labels(self):
        """Gets the labels of this GetCharactersCharacterIdMailMailIdOk.

        Labels attached to the mail

        :return: The labels of this GetCharactersCharacterIdMailMailIdOk.
        :rtype: List[int]
        """
        return self._labels

    @labels.setter
    def labels(self, labels):
        """Sets the labels of this GetCharactersCharacterIdMailMailIdOk.

        Labels attached to the mail

        :param labels: The labels of this GetCharactersCharacterIdMailMailIdOk.
        :type labels: List[int]
        """
        if labels is not None and len(labels) > 25:
            raise ValueError("Invalid value for `labels`, number of items must be less than or equal to `25`")

        self._labels = labels

    @property
    def read(self):
        """Gets the read of this GetCharactersCharacterIdMailMailIdOk.

        Whether the mail is flagged as read

        :return: The read of this GetCharactersCharacterIdMailMailIdOk.
        :rtype: bool
        """
        return self._read

    @read.setter
    def read(self, read):
        """Sets the read of this GetCharactersCharacterIdMailMailIdOk.

        Whether the mail is flagged as read

        :param read: The read of this GetCharactersCharacterIdMailMailIdOk.
        :type read: bool
        """

        self._read = read

    @property
    def recipients(self):
        """Gets the recipients of this GetCharactersCharacterIdMailMailIdOk.

        Recipients of the mail

        :return: The recipients of this GetCharactersCharacterIdMailMailIdOk.
        :rtype: list[GetCharactersCharacterIdMailMailIdRecipient]
        """
        return self._recipients

    @recipients.setter
    def recipients(self, recipients):
        """Sets the recipients of this GetCharactersCharacterIdMailMailIdOk.

        Recipients of the mail

        :param recipients: The recipients of this GetCharactersCharacterIdMailMailIdOk.
        :type recipients: list[GetCharactersCharacterIdMailMailIdRecipient]
        """
        if recipients is not None and len(recipients) > 52:
            raise ValueError("Invalid value for `recipients`, number of items must be less than or equal to `52`")
        if recipients is not None and len(recipients) < 1:
            raise ValueError("Invalid value for `recipients`, number of items must be greater than or equal to `1`")

        self._recipients = recipients

    @property
    def subject(self):
        """Gets the subject of this GetCharactersCharacterIdMailMailIdOk.

        Mail subject

        :return: The subject of this GetCharactersCharacterIdMailMailIdOk.
        :rtype: str
        """
        return self._subject

    @subject.setter
    def subject(self, subject):
        """Sets the subject of this GetCharactersCharacterIdMailMailIdOk.

        Mail subject

        :param subject: The subject of this GetCharactersCharacterIdMailMailIdOk.
        :type subject: str
        """

        self._subject = subject

    @property
    def timestamp(self):
        """Gets the timestamp of this GetCharactersCharacterIdMailMailIdOk.

        When the mail was sent

        :return: The timestamp of this GetCharactersCharacterIdMailMailIdOk.
        :rtype: datetime
        """
        return self._timestamp

    @timestamp.setter
    def timestamp(self, timestamp):
        """Sets the timestamp of this GetCharactersCharacterIdMailMailIdOk.

        When the mail was sent

        :param timestamp: The timestamp of this GetCharactersCharacterIdMailMailIdOk.
        :type timestamp: datetime
        """

        self._timestamp = timestamp
