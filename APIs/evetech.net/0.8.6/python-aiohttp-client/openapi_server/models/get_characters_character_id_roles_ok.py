# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class GetCharactersCharacterIdRolesOk(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, roles: List[str]=None, roles_at_base: List[str]=None, roles_at_hq: List[str]=None, roles_at_other: List[str]=None):
        """GetCharactersCharacterIdRolesOk - a model defined in OpenAPI

        :param roles: The roles of this GetCharactersCharacterIdRolesOk.
        :param roles_at_base: The roles_at_base of this GetCharactersCharacterIdRolesOk.
        :param roles_at_hq: The roles_at_hq of this GetCharactersCharacterIdRolesOk.
        :param roles_at_other: The roles_at_other of this GetCharactersCharacterIdRolesOk.
        """
        self.openapi_types = {
            'roles': List[str],
            'roles_at_base': List[str],
            'roles_at_hq': List[str],
            'roles_at_other': List[str]
        }

        self.attribute_map = {
            'roles': 'roles',
            'roles_at_base': 'roles_at_base',
            'roles_at_hq': 'roles_at_hq',
            'roles_at_other': 'roles_at_other'
        }

        self._roles = roles
        self._roles_at_base = roles_at_base
        self._roles_at_hq = roles_at_hq
        self._roles_at_other = roles_at_other

    @classmethod
    def from_dict(cls, dikt: dict) -> 'GetCharactersCharacterIdRolesOk':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The get_characters_character_id_roles_ok of this GetCharactersCharacterIdRolesOk.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def roles(self):
        """Gets the roles of this GetCharactersCharacterIdRolesOk.

        roles array

        :return: The roles of this GetCharactersCharacterIdRolesOk.
        :rtype: List[str]
        """
        return self._roles

    @roles.setter
    def roles(self, roles):
        """Sets the roles of this GetCharactersCharacterIdRolesOk.

        roles array

        :param roles: The roles of this GetCharactersCharacterIdRolesOk.
        :type roles: List[str]
        """
        allowed_values = ["Account_Take_1", "Account_Take_2", "Account_Take_3", "Account_Take_4", "Account_Take_5", "Account_Take_6", "Account_Take_7", "Accountant", "Auditor", "Communications_Officer", "Config_Equipment", "Config_Starbase_Equipment", "Container_Take_1", "Container_Take_2", "Container_Take_3", "Container_Take_4", "Container_Take_5", "Container_Take_6", "Container_Take_7", "Contract_Manager", "Diplomat", "Director", "Factory_Manager", "Fitting_Manager", "Hangar_Query_1", "Hangar_Query_2", "Hangar_Query_3", "Hangar_Query_4", "Hangar_Query_5", "Hangar_Query_6", "Hangar_Query_7", "Hangar_Take_1", "Hangar_Take_2", "Hangar_Take_3", "Hangar_Take_4", "Hangar_Take_5", "Hangar_Take_6", "Hangar_Take_7", "Junior_Accountant", "Personnel_Manager", "Rent_Factory_Facility", "Rent_Office", "Rent_Research_Facility", "Security_Officer", "Starbase_Defense_Operator", "Starbase_Fuel_Technician", "Station_Manager", "Terrestrial_Combat_Officer", "Terrestrial_Logistics_Officer", "Trader"]  # noqa: E501
        if not set(roles).issubset(set(allowed_values)):
            raise ValueError(
                "Invalid values for `roles` [{0}], must be a subset of [{1}]"
                .format(", ".join(map(str, set(roles) - set(allowed_values))),
                        ", ".join(map(str, allowed_values)))
            )

        self._roles = roles

    @property
    def roles_at_base(self):
        """Gets the roles_at_base of this GetCharactersCharacterIdRolesOk.

        roles_at_base array

        :return: The roles_at_base of this GetCharactersCharacterIdRolesOk.
        :rtype: List[str]
        """
        return self._roles_at_base

    @roles_at_base.setter
    def roles_at_base(self, roles_at_base):
        """Sets the roles_at_base of this GetCharactersCharacterIdRolesOk.

        roles_at_base array

        :param roles_at_base: The roles_at_base of this GetCharactersCharacterIdRolesOk.
        :type roles_at_base: List[str]
        """
        allowed_values = ["Account_Take_1", "Account_Take_2", "Account_Take_3", "Account_Take_4", "Account_Take_5", "Account_Take_6", "Account_Take_7", "Accountant", "Auditor", "Communications_Officer", "Config_Equipment", "Config_Starbase_Equipment", "Container_Take_1", "Container_Take_2", "Container_Take_3", "Container_Take_4", "Container_Take_5", "Container_Take_6", "Container_Take_7", "Contract_Manager", "Diplomat", "Director", "Factory_Manager", "Fitting_Manager", "Hangar_Query_1", "Hangar_Query_2", "Hangar_Query_3", "Hangar_Query_4", "Hangar_Query_5", "Hangar_Query_6", "Hangar_Query_7", "Hangar_Take_1", "Hangar_Take_2", "Hangar_Take_3", "Hangar_Take_4", "Hangar_Take_5", "Hangar_Take_6", "Hangar_Take_7", "Junior_Accountant", "Personnel_Manager", "Rent_Factory_Facility", "Rent_Office", "Rent_Research_Facility", "Security_Officer", "Starbase_Defense_Operator", "Starbase_Fuel_Technician", "Station_Manager", "Terrestrial_Combat_Officer", "Terrestrial_Logistics_Officer", "Trader"]  # noqa: E501
        if not set(roles_at_base).issubset(set(allowed_values)):
            raise ValueError(
                "Invalid values for `roles_at_base` [{0}], must be a subset of [{1}]"
                .format(", ".join(map(str, set(roles_at_base) - set(allowed_values))),
                        ", ".join(map(str, allowed_values)))
            )

        self._roles_at_base = roles_at_base

    @property
    def roles_at_hq(self):
        """Gets the roles_at_hq of this GetCharactersCharacterIdRolesOk.

        roles_at_hq array

        :return: The roles_at_hq of this GetCharactersCharacterIdRolesOk.
        :rtype: List[str]
        """
        return self._roles_at_hq

    @roles_at_hq.setter
    def roles_at_hq(self, roles_at_hq):
        """Sets the roles_at_hq of this GetCharactersCharacterIdRolesOk.

        roles_at_hq array

        :param roles_at_hq: The roles_at_hq of this GetCharactersCharacterIdRolesOk.
        :type roles_at_hq: List[str]
        """
        allowed_values = ["Account_Take_1", "Account_Take_2", "Account_Take_3", "Account_Take_4", "Account_Take_5", "Account_Take_6", "Account_Take_7", "Accountant", "Auditor", "Communications_Officer", "Config_Equipment", "Config_Starbase_Equipment", "Container_Take_1", "Container_Take_2", "Container_Take_3", "Container_Take_4", "Container_Take_5", "Container_Take_6", "Container_Take_7", "Contract_Manager", "Diplomat", "Director", "Factory_Manager", "Fitting_Manager", "Hangar_Query_1", "Hangar_Query_2", "Hangar_Query_3", "Hangar_Query_4", "Hangar_Query_5", "Hangar_Query_6", "Hangar_Query_7", "Hangar_Take_1", "Hangar_Take_2", "Hangar_Take_3", "Hangar_Take_4", "Hangar_Take_5", "Hangar_Take_6", "Hangar_Take_7", "Junior_Accountant", "Personnel_Manager", "Rent_Factory_Facility", "Rent_Office", "Rent_Research_Facility", "Security_Officer", "Starbase_Defense_Operator", "Starbase_Fuel_Technician", "Station_Manager", "Terrestrial_Combat_Officer", "Terrestrial_Logistics_Officer", "Trader"]  # noqa: E501
        if not set(roles_at_hq).issubset(set(allowed_values)):
            raise ValueError(
                "Invalid values for `roles_at_hq` [{0}], must be a subset of [{1}]"
                .format(", ".join(map(str, set(roles_at_hq) - set(allowed_values))),
                        ", ".join(map(str, allowed_values)))
            )

        self._roles_at_hq = roles_at_hq

    @property
    def roles_at_other(self):
        """Gets the roles_at_other of this GetCharactersCharacterIdRolesOk.

        roles_at_other array

        :return: The roles_at_other of this GetCharactersCharacterIdRolesOk.
        :rtype: List[str]
        """
        return self._roles_at_other

    @roles_at_other.setter
    def roles_at_other(self, roles_at_other):
        """Sets the roles_at_other of this GetCharactersCharacterIdRolesOk.

        roles_at_other array

        :param roles_at_other: The roles_at_other of this GetCharactersCharacterIdRolesOk.
        :type roles_at_other: List[str]
        """
        allowed_values = ["Account_Take_1", "Account_Take_2", "Account_Take_3", "Account_Take_4", "Account_Take_5", "Account_Take_6", "Account_Take_7", "Accountant", "Auditor", "Communications_Officer", "Config_Equipment", "Config_Starbase_Equipment", "Container_Take_1", "Container_Take_2", "Container_Take_3", "Container_Take_4", "Container_Take_5", "Container_Take_6", "Container_Take_7", "Contract_Manager", "Diplomat", "Director", "Factory_Manager", "Fitting_Manager", "Hangar_Query_1", "Hangar_Query_2", "Hangar_Query_3", "Hangar_Query_4", "Hangar_Query_5", "Hangar_Query_6", "Hangar_Query_7", "Hangar_Take_1", "Hangar_Take_2", "Hangar_Take_3", "Hangar_Take_4", "Hangar_Take_5", "Hangar_Take_6", "Hangar_Take_7", "Junior_Accountant", "Personnel_Manager", "Rent_Factory_Facility", "Rent_Office", "Rent_Research_Facility", "Security_Officer", "Starbase_Defense_Operator", "Starbase_Fuel_Technician", "Station_Manager", "Terrestrial_Combat_Officer", "Terrestrial_Logistics_Officer", "Trader"]  # noqa: E501
        if not set(roles_at_other).issubset(set(allowed_values)):
            raise ValueError(
                "Invalid values for `roles_at_other` [{0}], must be a subset of [{1}]"
                .format(", ".join(map(str, set(roles_at_other) - set(allowed_values))),
                        ", ".join(map(str, allowed_values)))
            )

        self._roles_at_other = roles_at_other
