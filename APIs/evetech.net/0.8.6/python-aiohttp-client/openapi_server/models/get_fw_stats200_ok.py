# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.get_fw_stats_kills import GetFwStatsKills
from openapi_server.models.get_fw_stats_victory_points import GetFwStatsVictoryPoints
from openapi_server import util


class GetFwStats200Ok(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, faction_id: int=None, kills: GetFwStatsKills=None, pilots: int=None, systems_controlled: int=None, victory_points: GetFwStatsVictoryPoints=None):
        """GetFwStats200Ok - a model defined in OpenAPI

        :param faction_id: The faction_id of this GetFwStats200Ok.
        :param kills: The kills of this GetFwStats200Ok.
        :param pilots: The pilots of this GetFwStats200Ok.
        :param systems_controlled: The systems_controlled of this GetFwStats200Ok.
        :param victory_points: The victory_points of this GetFwStats200Ok.
        """
        self.openapi_types = {
            'faction_id': int,
            'kills': GetFwStatsKills,
            'pilots': int,
            'systems_controlled': int,
            'victory_points': GetFwStatsVictoryPoints
        }

        self.attribute_map = {
            'faction_id': 'faction_id',
            'kills': 'kills',
            'pilots': 'pilots',
            'systems_controlled': 'systems_controlled',
            'victory_points': 'victory_points'
        }

        self._faction_id = faction_id
        self._kills = kills
        self._pilots = pilots
        self._systems_controlled = systems_controlled
        self._victory_points = victory_points

    @classmethod
    def from_dict(cls, dikt: dict) -> 'GetFwStats200Ok':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The get_fw_stats_200_ok of this GetFwStats200Ok.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def faction_id(self):
        """Gets the faction_id of this GetFwStats200Ok.

        faction_id integer

        :return: The faction_id of this GetFwStats200Ok.
        :rtype: int
        """
        return self._faction_id

    @faction_id.setter
    def faction_id(self, faction_id):
        """Sets the faction_id of this GetFwStats200Ok.

        faction_id integer

        :param faction_id: The faction_id of this GetFwStats200Ok.
        :type faction_id: int
        """
        if faction_id is None:
            raise ValueError("Invalid value for `faction_id`, must not be `None`")

        self._faction_id = faction_id

    @property
    def kills(self):
        """Gets the kills of this GetFwStats200Ok.


        :return: The kills of this GetFwStats200Ok.
        :rtype: GetFwStatsKills
        """
        return self._kills

    @kills.setter
    def kills(self, kills):
        """Sets the kills of this GetFwStats200Ok.


        :param kills: The kills of this GetFwStats200Ok.
        :type kills: GetFwStatsKills
        """
        if kills is None:
            raise ValueError("Invalid value for `kills`, must not be `None`")

        self._kills = kills

    @property
    def pilots(self):
        """Gets the pilots of this GetFwStats200Ok.

        How many pilots fight for the given faction

        :return: The pilots of this GetFwStats200Ok.
        :rtype: int
        """
        return self._pilots

    @pilots.setter
    def pilots(self, pilots):
        """Sets the pilots of this GetFwStats200Ok.

        How many pilots fight for the given faction

        :param pilots: The pilots of this GetFwStats200Ok.
        :type pilots: int
        """
        if pilots is None:
            raise ValueError("Invalid value for `pilots`, must not be `None`")

        self._pilots = pilots

    @property
    def systems_controlled(self):
        """Gets the systems_controlled of this GetFwStats200Ok.

        The number of solar systems controlled by the given faction

        :return: The systems_controlled of this GetFwStats200Ok.
        :rtype: int
        """
        return self._systems_controlled

    @systems_controlled.setter
    def systems_controlled(self, systems_controlled):
        """Sets the systems_controlled of this GetFwStats200Ok.

        The number of solar systems controlled by the given faction

        :param systems_controlled: The systems_controlled of this GetFwStats200Ok.
        :type systems_controlled: int
        """
        if systems_controlled is None:
            raise ValueError("Invalid value for `systems_controlled`, must not be `None`")

        self._systems_controlled = systems_controlled

    @property
    def victory_points(self):
        """Gets the victory_points of this GetFwStats200Ok.


        :return: The victory_points of this GetFwStats200Ok.
        :rtype: GetFwStatsVictoryPoints
        """
        return self._victory_points

    @victory_points.setter
    def victory_points(self, victory_points):
        """Sets the victory_points of this GetFwStats200Ok.


        :param victory_points: The victory_points of this GetFwStats200Ok.
        :type victory_points: GetFwStatsVictoryPoints
        """
        if victory_points is None:
            raise ValueError("Invalid value for `victory_points`, must not be `None`")

        self._victory_points = victory_points
