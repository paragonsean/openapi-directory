# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.get_fw_leaderboards_characters_kills import GetFwLeaderboardsCharactersKills
from openapi_server.models.get_fw_leaderboards_characters_victory_points import GetFwLeaderboardsCharactersVictoryPoints
from openapi_server import util


class GetFwLeaderboardsCharactersOk(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, kills: GetFwLeaderboardsCharactersKills=None, victory_points: GetFwLeaderboardsCharactersVictoryPoints=None):
        """GetFwLeaderboardsCharactersOk - a model defined in OpenAPI

        :param kills: The kills of this GetFwLeaderboardsCharactersOk.
        :param victory_points: The victory_points of this GetFwLeaderboardsCharactersOk.
        """
        self.openapi_types = {
            'kills': GetFwLeaderboardsCharactersKills,
            'victory_points': GetFwLeaderboardsCharactersVictoryPoints
        }

        self.attribute_map = {
            'kills': 'kills',
            'victory_points': 'victory_points'
        }

        self._kills = kills
        self._victory_points = victory_points

    @classmethod
    def from_dict(cls, dikt: dict) -> 'GetFwLeaderboardsCharactersOk':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The get_fw_leaderboards_characters_ok of this GetFwLeaderboardsCharactersOk.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def kills(self):
        """Gets the kills of this GetFwLeaderboardsCharactersOk.


        :return: The kills of this GetFwLeaderboardsCharactersOk.
        :rtype: GetFwLeaderboardsCharactersKills
        """
        return self._kills

    @kills.setter
    def kills(self, kills):
        """Sets the kills of this GetFwLeaderboardsCharactersOk.


        :param kills: The kills of this GetFwLeaderboardsCharactersOk.
        :type kills: GetFwLeaderboardsCharactersKills
        """
        if kills is None:
            raise ValueError("Invalid value for `kills`, must not be `None`")

        self._kills = kills

    @property
    def victory_points(self):
        """Gets the victory_points of this GetFwLeaderboardsCharactersOk.


        :return: The victory_points of this GetFwLeaderboardsCharactersOk.
        :rtype: GetFwLeaderboardsCharactersVictoryPoints
        """
        return self._victory_points

    @victory_points.setter
    def victory_points(self, victory_points):
        """Sets the victory_points of this GetFwLeaderboardsCharactersOk.


        :param victory_points: The victory_points of this GetFwLeaderboardsCharactersOk.
        :type victory_points: GetFwLeaderboardsCharactersVictoryPoints
        """
        if victory_points is None:
            raise ValueError("Invalid value for `victory_points`, must not be `None`")

        self._victory_points = victory_points
