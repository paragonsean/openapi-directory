# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class GetMarketsPrices200Ok(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, adjusted_price: float=None, average_price: float=None, type_id: int=None):
        """GetMarketsPrices200Ok - a model defined in OpenAPI

        :param adjusted_price: The adjusted_price of this GetMarketsPrices200Ok.
        :param average_price: The average_price of this GetMarketsPrices200Ok.
        :param type_id: The type_id of this GetMarketsPrices200Ok.
        """
        self.openapi_types = {
            'adjusted_price': float,
            'average_price': float,
            'type_id': int
        }

        self.attribute_map = {
            'adjusted_price': 'adjusted_price',
            'average_price': 'average_price',
            'type_id': 'type_id'
        }

        self._adjusted_price = adjusted_price
        self._average_price = average_price
        self._type_id = type_id

    @classmethod
    def from_dict(cls, dikt: dict) -> 'GetMarketsPrices200Ok':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The get_markets_prices_200_ok of this GetMarketsPrices200Ok.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def adjusted_price(self):
        """Gets the adjusted_price of this GetMarketsPrices200Ok.

        adjusted_price number

        :return: The adjusted_price of this GetMarketsPrices200Ok.
        :rtype: float
        """
        return self._adjusted_price

    @adjusted_price.setter
    def adjusted_price(self, adjusted_price):
        """Sets the adjusted_price of this GetMarketsPrices200Ok.

        adjusted_price number

        :param adjusted_price: The adjusted_price of this GetMarketsPrices200Ok.
        :type adjusted_price: float
        """

        self._adjusted_price = adjusted_price

    @property
    def average_price(self):
        """Gets the average_price of this GetMarketsPrices200Ok.

        average_price number

        :return: The average_price of this GetMarketsPrices200Ok.
        :rtype: float
        """
        return self._average_price

    @average_price.setter
    def average_price(self, average_price):
        """Sets the average_price of this GetMarketsPrices200Ok.

        average_price number

        :param average_price: The average_price of this GetMarketsPrices200Ok.
        :type average_price: float
        """

        self._average_price = average_price

    @property
    def type_id(self):
        """Gets the type_id of this GetMarketsPrices200Ok.

        type_id integer

        :return: The type_id of this GetMarketsPrices200Ok.
        :rtype: int
        """
        return self._type_id

    @type_id.setter
    def type_id(self, type_id):
        """Sets the type_id of this GetMarketsPrices200Ok.

        type_id integer

        :param type_id: The type_id of this GetMarketsPrices200Ok.
        :type type_id: int
        """
        if type_id is None:
            raise ValueError("Invalid value for `type_id`, must not be `None`")

        self._type_id = type_id
