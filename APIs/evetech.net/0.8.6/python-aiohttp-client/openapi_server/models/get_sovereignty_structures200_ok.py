# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class GetSovereigntyStructures200Ok(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, alliance_id: int=None, solar_system_id: int=None, structure_id: int=None, structure_type_id: int=None, vulnerability_occupancy_level: float=None, vulnerable_end_time: datetime=None, vulnerable_start_time: datetime=None):
        """GetSovereigntyStructures200Ok - a model defined in OpenAPI

        :param alliance_id: The alliance_id of this GetSovereigntyStructures200Ok.
        :param solar_system_id: The solar_system_id of this GetSovereigntyStructures200Ok.
        :param structure_id: The structure_id of this GetSovereigntyStructures200Ok.
        :param structure_type_id: The structure_type_id of this GetSovereigntyStructures200Ok.
        :param vulnerability_occupancy_level: The vulnerability_occupancy_level of this GetSovereigntyStructures200Ok.
        :param vulnerable_end_time: The vulnerable_end_time of this GetSovereigntyStructures200Ok.
        :param vulnerable_start_time: The vulnerable_start_time of this GetSovereigntyStructures200Ok.
        """
        self.openapi_types = {
            'alliance_id': int,
            'solar_system_id': int,
            'structure_id': int,
            'structure_type_id': int,
            'vulnerability_occupancy_level': float,
            'vulnerable_end_time': datetime,
            'vulnerable_start_time': datetime
        }

        self.attribute_map = {
            'alliance_id': 'alliance_id',
            'solar_system_id': 'solar_system_id',
            'structure_id': 'structure_id',
            'structure_type_id': 'structure_type_id',
            'vulnerability_occupancy_level': 'vulnerability_occupancy_level',
            'vulnerable_end_time': 'vulnerable_end_time',
            'vulnerable_start_time': 'vulnerable_start_time'
        }

        self._alliance_id = alliance_id
        self._solar_system_id = solar_system_id
        self._structure_id = structure_id
        self._structure_type_id = structure_type_id
        self._vulnerability_occupancy_level = vulnerability_occupancy_level
        self._vulnerable_end_time = vulnerable_end_time
        self._vulnerable_start_time = vulnerable_start_time

    @classmethod
    def from_dict(cls, dikt: dict) -> 'GetSovereigntyStructures200Ok':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The get_sovereignty_structures_200_ok of this GetSovereigntyStructures200Ok.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def alliance_id(self):
        """Gets the alliance_id of this GetSovereigntyStructures200Ok.

        The alliance that owns the structure. 

        :return: The alliance_id of this GetSovereigntyStructures200Ok.
        :rtype: int
        """
        return self._alliance_id

    @alliance_id.setter
    def alliance_id(self, alliance_id):
        """Sets the alliance_id of this GetSovereigntyStructures200Ok.

        The alliance that owns the structure. 

        :param alliance_id: The alliance_id of this GetSovereigntyStructures200Ok.
        :type alliance_id: int
        """
        if alliance_id is None:
            raise ValueError("Invalid value for `alliance_id`, must not be `None`")

        self._alliance_id = alliance_id

    @property
    def solar_system_id(self):
        """Gets the solar_system_id of this GetSovereigntyStructures200Ok.

        Solar system in which the structure is located. 

        :return: The solar_system_id of this GetSovereigntyStructures200Ok.
        :rtype: int
        """
        return self._solar_system_id

    @solar_system_id.setter
    def solar_system_id(self, solar_system_id):
        """Sets the solar_system_id of this GetSovereigntyStructures200Ok.

        Solar system in which the structure is located. 

        :param solar_system_id: The solar_system_id of this GetSovereigntyStructures200Ok.
        :type solar_system_id: int
        """
        if solar_system_id is None:
            raise ValueError("Invalid value for `solar_system_id`, must not be `None`")

        self._solar_system_id = solar_system_id

    @property
    def structure_id(self):
        """Gets the structure_id of this GetSovereigntyStructures200Ok.

        Unique item ID for this structure.

        :return: The structure_id of this GetSovereigntyStructures200Ok.
        :rtype: int
        """
        return self._structure_id

    @structure_id.setter
    def structure_id(self, structure_id):
        """Sets the structure_id of this GetSovereigntyStructures200Ok.

        Unique item ID for this structure.

        :param structure_id: The structure_id of this GetSovereigntyStructures200Ok.
        :type structure_id: int
        """
        if structure_id is None:
            raise ValueError("Invalid value for `structure_id`, must not be `None`")

        self._structure_id = structure_id

    @property
    def structure_type_id(self):
        """Gets the structure_type_id of this GetSovereigntyStructures200Ok.

        A reference to the type of structure this is. 

        :return: The structure_type_id of this GetSovereigntyStructures200Ok.
        :rtype: int
        """
        return self._structure_type_id

    @structure_type_id.setter
    def structure_type_id(self, structure_type_id):
        """Sets the structure_type_id of this GetSovereigntyStructures200Ok.

        A reference to the type of structure this is. 

        :param structure_type_id: The structure_type_id of this GetSovereigntyStructures200Ok.
        :type structure_type_id: int
        """
        if structure_type_id is None:
            raise ValueError("Invalid value for `structure_type_id`, must not be `None`")

        self._structure_type_id = structure_type_id

    @property
    def vulnerability_occupancy_level(self):
        """Gets the vulnerability_occupancy_level of this GetSovereigntyStructures200Ok.

        The occupancy level for the next or current vulnerability window. This takes into account all development indexes and capital system bonuses. Also known as Activity Defense Multiplier from in the client. It increases the time that attackers must spend using their entosis links on the structure. 

        :return: The vulnerability_occupancy_level of this GetSovereigntyStructures200Ok.
        :rtype: float
        """
        return self._vulnerability_occupancy_level

    @vulnerability_occupancy_level.setter
    def vulnerability_occupancy_level(self, vulnerability_occupancy_level):
        """Sets the vulnerability_occupancy_level of this GetSovereigntyStructures200Ok.

        The occupancy level for the next or current vulnerability window. This takes into account all development indexes and capital system bonuses. Also known as Activity Defense Multiplier from in the client. It increases the time that attackers must spend using their entosis links on the structure. 

        :param vulnerability_occupancy_level: The vulnerability_occupancy_level of this GetSovereigntyStructures200Ok.
        :type vulnerability_occupancy_level: float
        """

        self._vulnerability_occupancy_level = vulnerability_occupancy_level

    @property
    def vulnerable_end_time(self):
        """Gets the vulnerable_end_time of this GetSovereigntyStructures200Ok.

        The time at which the next or current vulnerability window ends. At the end of a vulnerability window the next window is recalculated and locked in along with the vulnerabilityOccupancyLevel. If the structure is not in 100% entosis control of the defender, it will go in to 'overtime' and stay vulnerable for as long as that situation persists. Only once the defenders have 100% entosis control and has the vulnerableEndTime passed does the vulnerability interval expire and a new one is calculated. 

        :return: The vulnerable_end_time of this GetSovereigntyStructures200Ok.
        :rtype: datetime
        """
        return self._vulnerable_end_time

    @vulnerable_end_time.setter
    def vulnerable_end_time(self, vulnerable_end_time):
        """Sets the vulnerable_end_time of this GetSovereigntyStructures200Ok.

        The time at which the next or current vulnerability window ends. At the end of a vulnerability window the next window is recalculated and locked in along with the vulnerabilityOccupancyLevel. If the structure is not in 100% entosis control of the defender, it will go in to 'overtime' and stay vulnerable for as long as that situation persists. Only once the defenders have 100% entosis control and has the vulnerableEndTime passed does the vulnerability interval expire and a new one is calculated. 

        :param vulnerable_end_time: The vulnerable_end_time of this GetSovereigntyStructures200Ok.
        :type vulnerable_end_time: datetime
        """

        self._vulnerable_end_time = vulnerable_end_time

    @property
    def vulnerable_start_time(self):
        """Gets the vulnerable_start_time of this GetSovereigntyStructures200Ok.

        The next time at which the structure will become vulnerable. Or the start time of the current window if current time is between this and vulnerableEndTime. 

        :return: The vulnerable_start_time of this GetSovereigntyStructures200Ok.
        :rtype: datetime
        """
        return self._vulnerable_start_time

    @vulnerable_start_time.setter
    def vulnerable_start_time(self, vulnerable_start_time):
        """Sets the vulnerable_start_time of this GetSovereigntyStructures200Ok.

        The next time at which the structure will become vulnerable. Or the start time of the current window if current time is between this and vulnerableEndTime. 

        :param vulnerable_start_time: The vulnerable_start_time of this GetSovereigntyStructures200Ok.
        :type vulnerable_start_time: datetime
        """

        self._vulnerable_start_time = vulnerable_start_time
