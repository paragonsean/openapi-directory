# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class PostUiOpenwindowNewmailNewMail(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, body: str=None, recipients: List[int]=None, subject: str=None, to_corp_or_alliance_id: int=None, to_mailing_list_id: int=None):
        """PostUiOpenwindowNewmailNewMail - a model defined in OpenAPI

        :param body: The body of this PostUiOpenwindowNewmailNewMail.
        :param recipients: The recipients of this PostUiOpenwindowNewmailNewMail.
        :param subject: The subject of this PostUiOpenwindowNewmailNewMail.
        :param to_corp_or_alliance_id: The to_corp_or_alliance_id of this PostUiOpenwindowNewmailNewMail.
        :param to_mailing_list_id: The to_mailing_list_id of this PostUiOpenwindowNewmailNewMail.
        """
        self.openapi_types = {
            'body': str,
            'recipients': List[int],
            'subject': str,
            'to_corp_or_alliance_id': int,
            'to_mailing_list_id': int
        }

        self.attribute_map = {
            'body': 'body',
            'recipients': 'recipients',
            'subject': 'subject',
            'to_corp_or_alliance_id': 'to_corp_or_alliance_id',
            'to_mailing_list_id': 'to_mailing_list_id'
        }

        self._body = body
        self._recipients = recipients
        self._subject = subject
        self._to_corp_or_alliance_id = to_corp_or_alliance_id
        self._to_mailing_list_id = to_mailing_list_id

    @classmethod
    def from_dict(cls, dikt: dict) -> 'PostUiOpenwindowNewmailNewMail':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The post_ui_openwindow_newmail_new_mail of this PostUiOpenwindowNewmailNewMail.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def body(self):
        """Gets the body of this PostUiOpenwindowNewmailNewMail.

        body string

        :return: The body of this PostUiOpenwindowNewmailNewMail.
        :rtype: str
        """
        return self._body

    @body.setter
    def body(self, body):
        """Sets the body of this PostUiOpenwindowNewmailNewMail.

        body string

        :param body: The body of this PostUiOpenwindowNewmailNewMail.
        :type body: str
        """
        if body is None:
            raise ValueError("Invalid value for `body`, must not be `None`")
        if body is not None and len(body) > 10000:
            raise ValueError("Invalid value for `body`, length must be less than or equal to `10000`")

        self._body = body

    @property
    def recipients(self):
        """Gets the recipients of this PostUiOpenwindowNewmailNewMail.

        recipients array

        :return: The recipients of this PostUiOpenwindowNewmailNewMail.
        :rtype: List[int]
        """
        return self._recipients

    @recipients.setter
    def recipients(self, recipients):
        """Sets the recipients of this PostUiOpenwindowNewmailNewMail.

        recipients array

        :param recipients: The recipients of this PostUiOpenwindowNewmailNewMail.
        :type recipients: List[int]
        """
        if recipients is None:
            raise ValueError("Invalid value for `recipients`, must not be `None`")
        if recipients is not None and len(recipients) > 50:
            raise ValueError("Invalid value for `recipients`, number of items must be less than or equal to `50`")
        if recipients is not None and len(recipients) < 1:
            raise ValueError("Invalid value for `recipients`, number of items must be greater than or equal to `1`")

        self._recipients = recipients

    @property
    def subject(self):
        """Gets the subject of this PostUiOpenwindowNewmailNewMail.

        subject string

        :return: The subject of this PostUiOpenwindowNewmailNewMail.
        :rtype: str
        """
        return self._subject

    @subject.setter
    def subject(self, subject):
        """Sets the subject of this PostUiOpenwindowNewmailNewMail.

        subject string

        :param subject: The subject of this PostUiOpenwindowNewmailNewMail.
        :type subject: str
        """
        if subject is None:
            raise ValueError("Invalid value for `subject`, must not be `None`")
        if subject is not None and len(subject) > 1000:
            raise ValueError("Invalid value for `subject`, length must be less than or equal to `1000`")

        self._subject = subject

    @property
    def to_corp_or_alliance_id(self):
        """Gets the to_corp_or_alliance_id of this PostUiOpenwindowNewmailNewMail.

        to_corp_or_alliance_id integer

        :return: The to_corp_or_alliance_id of this PostUiOpenwindowNewmailNewMail.
        :rtype: int
        """
        return self._to_corp_or_alliance_id

    @to_corp_or_alliance_id.setter
    def to_corp_or_alliance_id(self, to_corp_or_alliance_id):
        """Sets the to_corp_or_alliance_id of this PostUiOpenwindowNewmailNewMail.

        to_corp_or_alliance_id integer

        :param to_corp_or_alliance_id: The to_corp_or_alliance_id of this PostUiOpenwindowNewmailNewMail.
        :type to_corp_or_alliance_id: int
        """

        self._to_corp_or_alliance_id = to_corp_or_alliance_id

    @property
    def to_mailing_list_id(self):
        """Gets the to_mailing_list_id of this PostUiOpenwindowNewmailNewMail.

        Corporations, alliances and mailing lists are all types of mailing groups. You may only send to one mailing group, at a time, so you may fill out either this field or the to_corp_or_alliance_ids field

        :return: The to_mailing_list_id of this PostUiOpenwindowNewmailNewMail.
        :rtype: int
        """
        return self._to_mailing_list_id

    @to_mailing_list_id.setter
    def to_mailing_list_id(self, to_mailing_list_id):
        """Sets the to_mailing_list_id of this PostUiOpenwindowNewmailNewMail.

        Corporations, alliances and mailing lists are all types of mailing groups. You may only send to one mailing group, at a time, so you may fill out either this field or the to_corp_or_alliance_ids field

        :param to_mailing_list_id: The to_mailing_list_id of this PostUiOpenwindowNewmailNewMail.
        :type to_mailing_list_id: int
        """

        self._to_mailing_list_id = to_mailing_list_id
