# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class GetCorporationsCorporationIdAlliancehistory200Ok(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, alliance_id: int=None, is_deleted: bool=None, record_id: int=None, start_date: datetime=None):
        """GetCorporationsCorporationIdAlliancehistory200Ok - a model defined in OpenAPI

        :param alliance_id: The alliance_id of this GetCorporationsCorporationIdAlliancehistory200Ok.
        :param is_deleted: The is_deleted of this GetCorporationsCorporationIdAlliancehistory200Ok.
        :param record_id: The record_id of this GetCorporationsCorporationIdAlliancehistory200Ok.
        :param start_date: The start_date of this GetCorporationsCorporationIdAlliancehistory200Ok.
        """
        self.openapi_types = {
            'alliance_id': int,
            'is_deleted': bool,
            'record_id': int,
            'start_date': datetime
        }

        self.attribute_map = {
            'alliance_id': 'alliance_id',
            'is_deleted': 'is_deleted',
            'record_id': 'record_id',
            'start_date': 'start_date'
        }

        self._alliance_id = alliance_id
        self._is_deleted = is_deleted
        self._record_id = record_id
        self._start_date = start_date

    @classmethod
    def from_dict(cls, dikt: dict) -> 'GetCorporationsCorporationIdAlliancehistory200Ok':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The get_corporations_corporation_id_alliancehistory_200_ok of this GetCorporationsCorporationIdAlliancehistory200Ok.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def alliance_id(self):
        """Gets the alliance_id of this GetCorporationsCorporationIdAlliancehistory200Ok.

        alliance_id integer

        :return: The alliance_id of this GetCorporationsCorporationIdAlliancehistory200Ok.
        :rtype: int
        """
        return self._alliance_id

    @alliance_id.setter
    def alliance_id(self, alliance_id):
        """Sets the alliance_id of this GetCorporationsCorporationIdAlliancehistory200Ok.

        alliance_id integer

        :param alliance_id: The alliance_id of this GetCorporationsCorporationIdAlliancehistory200Ok.
        :type alliance_id: int
        """

        self._alliance_id = alliance_id

    @property
    def is_deleted(self):
        """Gets the is_deleted of this GetCorporationsCorporationIdAlliancehistory200Ok.

        True if the alliance has been closed

        :return: The is_deleted of this GetCorporationsCorporationIdAlliancehistory200Ok.
        :rtype: bool
        """
        return self._is_deleted

    @is_deleted.setter
    def is_deleted(self, is_deleted):
        """Sets the is_deleted of this GetCorporationsCorporationIdAlliancehistory200Ok.

        True if the alliance has been closed

        :param is_deleted: The is_deleted of this GetCorporationsCorporationIdAlliancehistory200Ok.
        :type is_deleted: bool
        """

        self._is_deleted = is_deleted

    @property
    def record_id(self):
        """Gets the record_id of this GetCorporationsCorporationIdAlliancehistory200Ok.

        An incrementing ID that can be used to canonically establish order of records in cases where dates may be ambiguous

        :return: The record_id of this GetCorporationsCorporationIdAlliancehistory200Ok.
        :rtype: int
        """
        return self._record_id

    @record_id.setter
    def record_id(self, record_id):
        """Sets the record_id of this GetCorporationsCorporationIdAlliancehistory200Ok.

        An incrementing ID that can be used to canonically establish order of records in cases where dates may be ambiguous

        :param record_id: The record_id of this GetCorporationsCorporationIdAlliancehistory200Ok.
        :type record_id: int
        """
        if record_id is None:
            raise ValueError("Invalid value for `record_id`, must not be `None`")

        self._record_id = record_id

    @property
    def start_date(self):
        """Gets the start_date of this GetCorporationsCorporationIdAlliancehistory200Ok.

        start_date string

        :return: The start_date of this GetCorporationsCorporationIdAlliancehistory200Ok.
        :rtype: datetime
        """
        return self._start_date

    @start_date.setter
    def start_date(self, start_date):
        """Sets the start_date of this GetCorporationsCorporationIdAlliancehistory200Ok.

        start_date string

        :param start_date: The start_date of this GetCorporationsCorporationIdAlliancehistory200Ok.
        :type start_date: datetime
        """
        if start_date is None:
            raise ValueError("Invalid value for `start_date`, must not be `None`")

        self._start_date = start_date
