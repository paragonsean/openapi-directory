# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.get_loyalty_stores_corporation_id_offers_required_item import GetLoyaltyStoresCorporationIdOffersRequiredItem
from openapi_server import util


class GetLoyaltyStoresCorporationIdOffers200Ok(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, ak_cost: int=None, isk_cost: int=None, lp_cost: int=None, offer_id: int=None, quantity: int=None, required_items: List[GetLoyaltyStoresCorporationIdOffersRequiredItem]=None, type_id: int=None):
        """GetLoyaltyStoresCorporationIdOffers200Ok - a model defined in OpenAPI

        :param ak_cost: The ak_cost of this GetLoyaltyStoresCorporationIdOffers200Ok.
        :param isk_cost: The isk_cost of this GetLoyaltyStoresCorporationIdOffers200Ok.
        :param lp_cost: The lp_cost of this GetLoyaltyStoresCorporationIdOffers200Ok.
        :param offer_id: The offer_id of this GetLoyaltyStoresCorporationIdOffers200Ok.
        :param quantity: The quantity of this GetLoyaltyStoresCorporationIdOffers200Ok.
        :param required_items: The required_items of this GetLoyaltyStoresCorporationIdOffers200Ok.
        :param type_id: The type_id of this GetLoyaltyStoresCorporationIdOffers200Ok.
        """
        self.openapi_types = {
            'ak_cost': int,
            'isk_cost': int,
            'lp_cost': int,
            'offer_id': int,
            'quantity': int,
            'required_items': List[GetLoyaltyStoresCorporationIdOffersRequiredItem],
            'type_id': int
        }

        self.attribute_map = {
            'ak_cost': 'ak_cost',
            'isk_cost': 'isk_cost',
            'lp_cost': 'lp_cost',
            'offer_id': 'offer_id',
            'quantity': 'quantity',
            'required_items': 'required_items',
            'type_id': 'type_id'
        }

        self._ak_cost = ak_cost
        self._isk_cost = isk_cost
        self._lp_cost = lp_cost
        self._offer_id = offer_id
        self._quantity = quantity
        self._required_items = required_items
        self._type_id = type_id

    @classmethod
    def from_dict(cls, dikt: dict) -> 'GetLoyaltyStoresCorporationIdOffers200Ok':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The get_loyalty_stores_corporation_id_offers_200_ok of this GetLoyaltyStoresCorporationIdOffers200Ok.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def ak_cost(self):
        """Gets the ak_cost of this GetLoyaltyStoresCorporationIdOffers200Ok.

        Analysis kredit cost

        :return: The ak_cost of this GetLoyaltyStoresCorporationIdOffers200Ok.
        :rtype: int
        """
        return self._ak_cost

    @ak_cost.setter
    def ak_cost(self, ak_cost):
        """Sets the ak_cost of this GetLoyaltyStoresCorporationIdOffers200Ok.

        Analysis kredit cost

        :param ak_cost: The ak_cost of this GetLoyaltyStoresCorporationIdOffers200Ok.
        :type ak_cost: int
        """

        self._ak_cost = ak_cost

    @property
    def isk_cost(self):
        """Gets the isk_cost of this GetLoyaltyStoresCorporationIdOffers200Ok.

        isk_cost integer

        :return: The isk_cost of this GetLoyaltyStoresCorporationIdOffers200Ok.
        :rtype: int
        """
        return self._isk_cost

    @isk_cost.setter
    def isk_cost(self, isk_cost):
        """Sets the isk_cost of this GetLoyaltyStoresCorporationIdOffers200Ok.

        isk_cost integer

        :param isk_cost: The isk_cost of this GetLoyaltyStoresCorporationIdOffers200Ok.
        :type isk_cost: int
        """
        if isk_cost is None:
            raise ValueError("Invalid value for `isk_cost`, must not be `None`")

        self._isk_cost = isk_cost

    @property
    def lp_cost(self):
        """Gets the lp_cost of this GetLoyaltyStoresCorporationIdOffers200Ok.

        lp_cost integer

        :return: The lp_cost of this GetLoyaltyStoresCorporationIdOffers200Ok.
        :rtype: int
        """
        return self._lp_cost

    @lp_cost.setter
    def lp_cost(self, lp_cost):
        """Sets the lp_cost of this GetLoyaltyStoresCorporationIdOffers200Ok.

        lp_cost integer

        :param lp_cost: The lp_cost of this GetLoyaltyStoresCorporationIdOffers200Ok.
        :type lp_cost: int
        """
        if lp_cost is None:
            raise ValueError("Invalid value for `lp_cost`, must not be `None`")

        self._lp_cost = lp_cost

    @property
    def offer_id(self):
        """Gets the offer_id of this GetLoyaltyStoresCorporationIdOffers200Ok.

        offer_id integer

        :return: The offer_id of this GetLoyaltyStoresCorporationIdOffers200Ok.
        :rtype: int
        """
        return self._offer_id

    @offer_id.setter
    def offer_id(self, offer_id):
        """Sets the offer_id of this GetLoyaltyStoresCorporationIdOffers200Ok.

        offer_id integer

        :param offer_id: The offer_id of this GetLoyaltyStoresCorporationIdOffers200Ok.
        :type offer_id: int
        """
        if offer_id is None:
            raise ValueError("Invalid value for `offer_id`, must not be `None`")

        self._offer_id = offer_id

    @property
    def quantity(self):
        """Gets the quantity of this GetLoyaltyStoresCorporationIdOffers200Ok.

        quantity integer

        :return: The quantity of this GetLoyaltyStoresCorporationIdOffers200Ok.
        :rtype: int
        """
        return self._quantity

    @quantity.setter
    def quantity(self, quantity):
        """Sets the quantity of this GetLoyaltyStoresCorporationIdOffers200Ok.

        quantity integer

        :param quantity: The quantity of this GetLoyaltyStoresCorporationIdOffers200Ok.
        :type quantity: int
        """
        if quantity is None:
            raise ValueError("Invalid value for `quantity`, must not be `None`")

        self._quantity = quantity

    @property
    def required_items(self):
        """Gets the required_items of this GetLoyaltyStoresCorporationIdOffers200Ok.

        required_items array

        :return: The required_items of this GetLoyaltyStoresCorporationIdOffers200Ok.
        :rtype: List[GetLoyaltyStoresCorporationIdOffersRequiredItem]
        """
        return self._required_items

    @required_items.setter
    def required_items(self, required_items):
        """Sets the required_items of this GetLoyaltyStoresCorporationIdOffers200Ok.

        required_items array

        :param required_items: The required_items of this GetLoyaltyStoresCorporationIdOffers200Ok.
        :type required_items: List[GetLoyaltyStoresCorporationIdOffersRequiredItem]
        """
        if required_items is None:
            raise ValueError("Invalid value for `required_items`, must not be `None`")
        if required_items is not None and len(required_items) > 100:
            raise ValueError("Invalid value for `required_items`, number of items must be less than or equal to `100`")

        self._required_items = required_items

    @property
    def type_id(self):
        """Gets the type_id of this GetLoyaltyStoresCorporationIdOffers200Ok.

        type_id integer

        :return: The type_id of this GetLoyaltyStoresCorporationIdOffers200Ok.
        :rtype: int
        """
        return self._type_id

    @type_id.setter
    def type_id(self, type_id):
        """Sets the type_id of this GetLoyaltyStoresCorporationIdOffers200Ok.

        type_id integer

        :param type_id: The type_id of this GetLoyaltyStoresCorporationIdOffers200Ok.
        :type type_id: int
        """
        if type_id is None:
            raise ValueError("Invalid value for `type_id`, must not be `None`")

        self._type_id = type_id
