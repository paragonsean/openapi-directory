# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class GetMarketsGroupsMarketGroupIdOk(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, description: str=None, market_group_id: int=None, name: str=None, parent_group_id: int=None, types: List[int]=None):
        """GetMarketsGroupsMarketGroupIdOk - a model defined in OpenAPI

        :param description: The description of this GetMarketsGroupsMarketGroupIdOk.
        :param market_group_id: The market_group_id of this GetMarketsGroupsMarketGroupIdOk.
        :param name: The name of this GetMarketsGroupsMarketGroupIdOk.
        :param parent_group_id: The parent_group_id of this GetMarketsGroupsMarketGroupIdOk.
        :param types: The types of this GetMarketsGroupsMarketGroupIdOk.
        """
        self.openapi_types = {
            'description': str,
            'market_group_id': int,
            'name': str,
            'parent_group_id': int,
            'types': List[int]
        }

        self.attribute_map = {
            'description': 'description',
            'market_group_id': 'market_group_id',
            'name': 'name',
            'parent_group_id': 'parent_group_id',
            'types': 'types'
        }

        self._description = description
        self._market_group_id = market_group_id
        self._name = name
        self._parent_group_id = parent_group_id
        self._types = types

    @classmethod
    def from_dict(cls, dikt: dict) -> 'GetMarketsGroupsMarketGroupIdOk':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The get_markets_groups_market_group_id_ok of this GetMarketsGroupsMarketGroupIdOk.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def description(self):
        """Gets the description of this GetMarketsGroupsMarketGroupIdOk.

        description string

        :return: The description of this GetMarketsGroupsMarketGroupIdOk.
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this GetMarketsGroupsMarketGroupIdOk.

        description string

        :param description: The description of this GetMarketsGroupsMarketGroupIdOk.
        :type description: str
        """
        if description is None:
            raise ValueError("Invalid value for `description`, must not be `None`")

        self._description = description

    @property
    def market_group_id(self):
        """Gets the market_group_id of this GetMarketsGroupsMarketGroupIdOk.

        market_group_id integer

        :return: The market_group_id of this GetMarketsGroupsMarketGroupIdOk.
        :rtype: int
        """
        return self._market_group_id

    @market_group_id.setter
    def market_group_id(self, market_group_id):
        """Sets the market_group_id of this GetMarketsGroupsMarketGroupIdOk.

        market_group_id integer

        :param market_group_id: The market_group_id of this GetMarketsGroupsMarketGroupIdOk.
        :type market_group_id: int
        """
        if market_group_id is None:
            raise ValueError("Invalid value for `market_group_id`, must not be `None`")

        self._market_group_id = market_group_id

    @property
    def name(self):
        """Gets the name of this GetMarketsGroupsMarketGroupIdOk.

        name string

        :return: The name of this GetMarketsGroupsMarketGroupIdOk.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this GetMarketsGroupsMarketGroupIdOk.

        name string

        :param name: The name of this GetMarketsGroupsMarketGroupIdOk.
        :type name: str
        """
        if name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")

        self._name = name

    @property
    def parent_group_id(self):
        """Gets the parent_group_id of this GetMarketsGroupsMarketGroupIdOk.

        parent_group_id integer

        :return: The parent_group_id of this GetMarketsGroupsMarketGroupIdOk.
        :rtype: int
        """
        return self._parent_group_id

    @parent_group_id.setter
    def parent_group_id(self, parent_group_id):
        """Sets the parent_group_id of this GetMarketsGroupsMarketGroupIdOk.

        parent_group_id integer

        :param parent_group_id: The parent_group_id of this GetMarketsGroupsMarketGroupIdOk.
        :type parent_group_id: int
        """

        self._parent_group_id = parent_group_id

    @property
    def types(self):
        """Gets the types of this GetMarketsGroupsMarketGroupIdOk.

        types array

        :return: The types of this GetMarketsGroupsMarketGroupIdOk.
        :rtype: List[int]
        """
        return self._types

    @types.setter
    def types(self, types):
        """Sets the types of this GetMarketsGroupsMarketGroupIdOk.

        types array

        :param types: The types of this GetMarketsGroupsMarketGroupIdOk.
        :type types: List[int]
        """
        if types is None:
            raise ValueError("Invalid value for `types`, must not be `None`")
        if types is not None and len(types) > 5000:
            raise ValueError("Invalid value for `types`, number of items must be less than or equal to `5000`")

        self._types = types
