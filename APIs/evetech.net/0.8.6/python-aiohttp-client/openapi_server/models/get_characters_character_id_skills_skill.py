# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class GetCharactersCharacterIdSkillsSkill(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, active_skill_level: int=None, skill_id: int=None, skillpoints_in_skill: int=None, trained_skill_level: int=None):
        """GetCharactersCharacterIdSkillsSkill - a model defined in OpenAPI

        :param active_skill_level: The active_skill_level of this GetCharactersCharacterIdSkillsSkill.
        :param skill_id: The skill_id of this GetCharactersCharacterIdSkillsSkill.
        :param skillpoints_in_skill: The skillpoints_in_skill of this GetCharactersCharacterIdSkillsSkill.
        :param trained_skill_level: The trained_skill_level of this GetCharactersCharacterIdSkillsSkill.
        """
        self.openapi_types = {
            'active_skill_level': int,
            'skill_id': int,
            'skillpoints_in_skill': int,
            'trained_skill_level': int
        }

        self.attribute_map = {
            'active_skill_level': 'active_skill_level',
            'skill_id': 'skill_id',
            'skillpoints_in_skill': 'skillpoints_in_skill',
            'trained_skill_level': 'trained_skill_level'
        }

        self._active_skill_level = active_skill_level
        self._skill_id = skill_id
        self._skillpoints_in_skill = skillpoints_in_skill
        self._trained_skill_level = trained_skill_level

    @classmethod
    def from_dict(cls, dikt: dict) -> 'GetCharactersCharacterIdSkillsSkill':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The get_characters_character_id_skills_skill of this GetCharactersCharacterIdSkillsSkill.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def active_skill_level(self):
        """Gets the active_skill_level of this GetCharactersCharacterIdSkillsSkill.

        active_skill_level integer

        :return: The active_skill_level of this GetCharactersCharacterIdSkillsSkill.
        :rtype: int
        """
        return self._active_skill_level

    @active_skill_level.setter
    def active_skill_level(self, active_skill_level):
        """Sets the active_skill_level of this GetCharactersCharacterIdSkillsSkill.

        active_skill_level integer

        :param active_skill_level: The active_skill_level of this GetCharactersCharacterIdSkillsSkill.
        :type active_skill_level: int
        """
        if active_skill_level is None:
            raise ValueError("Invalid value for `active_skill_level`, must not be `None`")

        self._active_skill_level = active_skill_level

    @property
    def skill_id(self):
        """Gets the skill_id of this GetCharactersCharacterIdSkillsSkill.

        skill_id integer

        :return: The skill_id of this GetCharactersCharacterIdSkillsSkill.
        :rtype: int
        """
        return self._skill_id

    @skill_id.setter
    def skill_id(self, skill_id):
        """Sets the skill_id of this GetCharactersCharacterIdSkillsSkill.

        skill_id integer

        :param skill_id: The skill_id of this GetCharactersCharacterIdSkillsSkill.
        :type skill_id: int
        """
        if skill_id is None:
            raise ValueError("Invalid value for `skill_id`, must not be `None`")

        self._skill_id = skill_id

    @property
    def skillpoints_in_skill(self):
        """Gets the skillpoints_in_skill of this GetCharactersCharacterIdSkillsSkill.

        skillpoints_in_skill integer

        :return: The skillpoints_in_skill of this GetCharactersCharacterIdSkillsSkill.
        :rtype: int
        """
        return self._skillpoints_in_skill

    @skillpoints_in_skill.setter
    def skillpoints_in_skill(self, skillpoints_in_skill):
        """Sets the skillpoints_in_skill of this GetCharactersCharacterIdSkillsSkill.

        skillpoints_in_skill integer

        :param skillpoints_in_skill: The skillpoints_in_skill of this GetCharactersCharacterIdSkillsSkill.
        :type skillpoints_in_skill: int
        """
        if skillpoints_in_skill is None:
            raise ValueError("Invalid value for `skillpoints_in_skill`, must not be `None`")

        self._skillpoints_in_skill = skillpoints_in_skill

    @property
    def trained_skill_level(self):
        """Gets the trained_skill_level of this GetCharactersCharacterIdSkillsSkill.

        trained_skill_level integer

        :return: The trained_skill_level of this GetCharactersCharacterIdSkillsSkill.
        :rtype: int
        """
        return self._trained_skill_level

    @trained_skill_level.setter
    def trained_skill_level(self, trained_skill_level):
        """Sets the trained_skill_level of this GetCharactersCharacterIdSkillsSkill.

        trained_skill_level integer

        :param trained_skill_level: The trained_skill_level of this GetCharactersCharacterIdSkillsSkill.
        :type trained_skill_level: int
        """
        if trained_skill_level is None:
            raise ValueError("Invalid value for `trained_skill_level`, must not be `None`")

        self._trained_skill_level = trained_skill_level
