# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class GetCharactersCharacterIdSearchOk(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, agent: List[int]=None, alliance: List[int]=None, character: List[int]=None, constellation: List[int]=None, corporation: List[int]=None, faction: List[int]=None, inventory_type: List[int]=None, region: List[int]=None, solar_system: List[int]=None, station: List[int]=None, structure: List[int]=None):
        """GetCharactersCharacterIdSearchOk - a model defined in OpenAPI

        :param agent: The agent of this GetCharactersCharacterIdSearchOk.
        :param alliance: The alliance of this GetCharactersCharacterIdSearchOk.
        :param character: The character of this GetCharactersCharacterIdSearchOk.
        :param constellation: The constellation of this GetCharactersCharacterIdSearchOk.
        :param corporation: The corporation of this GetCharactersCharacterIdSearchOk.
        :param faction: The faction of this GetCharactersCharacterIdSearchOk.
        :param inventory_type: The inventory_type of this GetCharactersCharacterIdSearchOk.
        :param region: The region of this GetCharactersCharacterIdSearchOk.
        :param solar_system: The solar_system of this GetCharactersCharacterIdSearchOk.
        :param station: The station of this GetCharactersCharacterIdSearchOk.
        :param structure: The structure of this GetCharactersCharacterIdSearchOk.
        """
        self.openapi_types = {
            'agent': List[int],
            'alliance': List[int],
            'character': List[int],
            'constellation': List[int],
            'corporation': List[int],
            'faction': List[int],
            'inventory_type': List[int],
            'region': List[int],
            'solar_system': List[int],
            'station': List[int],
            'structure': List[int]
        }

        self.attribute_map = {
            'agent': 'agent',
            'alliance': 'alliance',
            'character': 'character',
            'constellation': 'constellation',
            'corporation': 'corporation',
            'faction': 'faction',
            'inventory_type': 'inventory_type',
            'region': 'region',
            'solar_system': 'solar_system',
            'station': 'station',
            'structure': 'structure'
        }

        self._agent = agent
        self._alliance = alliance
        self._character = character
        self._constellation = constellation
        self._corporation = corporation
        self._faction = faction
        self._inventory_type = inventory_type
        self._region = region
        self._solar_system = solar_system
        self._station = station
        self._structure = structure

    @classmethod
    def from_dict(cls, dikt: dict) -> 'GetCharactersCharacterIdSearchOk':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The get_characters_character_id_search_ok of this GetCharactersCharacterIdSearchOk.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def agent(self):
        """Gets the agent of this GetCharactersCharacterIdSearchOk.

        agent array

        :return: The agent of this GetCharactersCharacterIdSearchOk.
        :rtype: List[int]
        """
        return self._agent

    @agent.setter
    def agent(self, agent):
        """Sets the agent of this GetCharactersCharacterIdSearchOk.

        agent array

        :param agent: The agent of this GetCharactersCharacterIdSearchOk.
        :type agent: List[int]
        """
        if agent is not None and len(agent) > 500:
            raise ValueError("Invalid value for `agent`, number of items must be less than or equal to `500`")

        self._agent = agent

    @property
    def alliance(self):
        """Gets the alliance of this GetCharactersCharacterIdSearchOk.

        alliance array

        :return: The alliance of this GetCharactersCharacterIdSearchOk.
        :rtype: List[int]
        """
        return self._alliance

    @alliance.setter
    def alliance(self, alliance):
        """Sets the alliance of this GetCharactersCharacterIdSearchOk.

        alliance array

        :param alliance: The alliance of this GetCharactersCharacterIdSearchOk.
        :type alliance: List[int]
        """
        if alliance is not None and len(alliance) > 500:
            raise ValueError("Invalid value for `alliance`, number of items must be less than or equal to `500`")

        self._alliance = alliance

    @property
    def character(self):
        """Gets the character of this GetCharactersCharacterIdSearchOk.

        character array

        :return: The character of this GetCharactersCharacterIdSearchOk.
        :rtype: List[int]
        """
        return self._character

    @character.setter
    def character(self, character):
        """Sets the character of this GetCharactersCharacterIdSearchOk.

        character array

        :param character: The character of this GetCharactersCharacterIdSearchOk.
        :type character: List[int]
        """
        if character is not None and len(character) > 500:
            raise ValueError("Invalid value for `character`, number of items must be less than or equal to `500`")

        self._character = character

    @property
    def constellation(self):
        """Gets the constellation of this GetCharactersCharacterIdSearchOk.

        constellation array

        :return: The constellation of this GetCharactersCharacterIdSearchOk.
        :rtype: List[int]
        """
        return self._constellation

    @constellation.setter
    def constellation(self, constellation):
        """Sets the constellation of this GetCharactersCharacterIdSearchOk.

        constellation array

        :param constellation: The constellation of this GetCharactersCharacterIdSearchOk.
        :type constellation: List[int]
        """
        if constellation is not None and len(constellation) > 500:
            raise ValueError("Invalid value for `constellation`, number of items must be less than or equal to `500`")

        self._constellation = constellation

    @property
    def corporation(self):
        """Gets the corporation of this GetCharactersCharacterIdSearchOk.

        corporation array

        :return: The corporation of this GetCharactersCharacterIdSearchOk.
        :rtype: List[int]
        """
        return self._corporation

    @corporation.setter
    def corporation(self, corporation):
        """Sets the corporation of this GetCharactersCharacterIdSearchOk.

        corporation array

        :param corporation: The corporation of this GetCharactersCharacterIdSearchOk.
        :type corporation: List[int]
        """
        if corporation is not None and len(corporation) > 500:
            raise ValueError("Invalid value for `corporation`, number of items must be less than or equal to `500`")

        self._corporation = corporation

    @property
    def faction(self):
        """Gets the faction of this GetCharactersCharacterIdSearchOk.

        faction array

        :return: The faction of this GetCharactersCharacterIdSearchOk.
        :rtype: List[int]
        """
        return self._faction

    @faction.setter
    def faction(self, faction):
        """Sets the faction of this GetCharactersCharacterIdSearchOk.

        faction array

        :param faction: The faction of this GetCharactersCharacterIdSearchOk.
        :type faction: List[int]
        """
        if faction is not None and len(faction) > 500:
            raise ValueError("Invalid value for `faction`, number of items must be less than or equal to `500`")

        self._faction = faction

    @property
    def inventory_type(self):
        """Gets the inventory_type of this GetCharactersCharacterIdSearchOk.

        inventory_type array

        :return: The inventory_type of this GetCharactersCharacterIdSearchOk.
        :rtype: List[int]
        """
        return self._inventory_type

    @inventory_type.setter
    def inventory_type(self, inventory_type):
        """Sets the inventory_type of this GetCharactersCharacterIdSearchOk.

        inventory_type array

        :param inventory_type: The inventory_type of this GetCharactersCharacterIdSearchOk.
        :type inventory_type: List[int]
        """
        if inventory_type is not None and len(inventory_type) > 500:
            raise ValueError("Invalid value for `inventory_type`, number of items must be less than or equal to `500`")

        self._inventory_type = inventory_type

    @property
    def region(self):
        """Gets the region of this GetCharactersCharacterIdSearchOk.

        region array

        :return: The region of this GetCharactersCharacterIdSearchOk.
        :rtype: List[int]
        """
        return self._region

    @region.setter
    def region(self, region):
        """Sets the region of this GetCharactersCharacterIdSearchOk.

        region array

        :param region: The region of this GetCharactersCharacterIdSearchOk.
        :type region: List[int]
        """
        if region is not None and len(region) > 500:
            raise ValueError("Invalid value for `region`, number of items must be less than or equal to `500`")

        self._region = region

    @property
    def solar_system(self):
        """Gets the solar_system of this GetCharactersCharacterIdSearchOk.

        solar_system array

        :return: The solar_system of this GetCharactersCharacterIdSearchOk.
        :rtype: List[int]
        """
        return self._solar_system

    @solar_system.setter
    def solar_system(self, solar_system):
        """Sets the solar_system of this GetCharactersCharacterIdSearchOk.

        solar_system array

        :param solar_system: The solar_system of this GetCharactersCharacterIdSearchOk.
        :type solar_system: List[int]
        """
        if solar_system is not None and len(solar_system) > 500:
            raise ValueError("Invalid value for `solar_system`, number of items must be less than or equal to `500`")

        self._solar_system = solar_system

    @property
    def station(self):
        """Gets the station of this GetCharactersCharacterIdSearchOk.

        station array

        :return: The station of this GetCharactersCharacterIdSearchOk.
        :rtype: List[int]
        """
        return self._station

    @station.setter
    def station(self, station):
        """Sets the station of this GetCharactersCharacterIdSearchOk.

        station array

        :param station: The station of this GetCharactersCharacterIdSearchOk.
        :type station: List[int]
        """
        if station is not None and len(station) > 500:
            raise ValueError("Invalid value for `station`, number of items must be less than or equal to `500`")

        self._station = station

    @property
    def structure(self):
        """Gets the structure of this GetCharactersCharacterIdSearchOk.

        structure array

        :return: The structure of this GetCharactersCharacterIdSearchOk.
        :rtype: List[int]
        """
        return self._structure

    @structure.setter
    def structure(self, structure):
        """Sets the structure of this GetCharactersCharacterIdSearchOk.

        structure array

        :param structure: The structure of this GetCharactersCharacterIdSearchOk.
        :type structure: List[int]
        """
        if structure is not None and len(structure) > 500:
            raise ValueError("Invalid value for `structure`, number of items must be less than or equal to `500`")

        self._structure = structure
