# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class GetCorporationsCorporationIdFwStatsVictoryPoints(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, last_week: int=None, total: int=None, yesterday: int=None):
        """GetCorporationsCorporationIdFwStatsVictoryPoints - a model defined in OpenAPI

        :param last_week: The last_week of this GetCorporationsCorporationIdFwStatsVictoryPoints.
        :param total: The total of this GetCorporationsCorporationIdFwStatsVictoryPoints.
        :param yesterday: The yesterday of this GetCorporationsCorporationIdFwStatsVictoryPoints.
        """
        self.openapi_types = {
            'last_week': int,
            'total': int,
            'yesterday': int
        }

        self.attribute_map = {
            'last_week': 'last_week',
            'total': 'total',
            'yesterday': 'yesterday'
        }

        self._last_week = last_week
        self._total = total
        self._yesterday = yesterday

    @classmethod
    def from_dict(cls, dikt: dict) -> 'GetCorporationsCorporationIdFwStatsVictoryPoints':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The get_corporations_corporation_id_fw_stats_victory_points of this GetCorporationsCorporationIdFwStatsVictoryPoints.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def last_week(self):
        """Gets the last_week of this GetCorporationsCorporationIdFwStatsVictoryPoints.

        Last week's victory points gained by members of the given corporation

        :return: The last_week of this GetCorporationsCorporationIdFwStatsVictoryPoints.
        :rtype: int
        """
        return self._last_week

    @last_week.setter
    def last_week(self, last_week):
        """Sets the last_week of this GetCorporationsCorporationIdFwStatsVictoryPoints.

        Last week's victory points gained by members of the given corporation

        :param last_week: The last_week of this GetCorporationsCorporationIdFwStatsVictoryPoints.
        :type last_week: int
        """
        if last_week is None:
            raise ValueError("Invalid value for `last_week`, must not be `None`")

        self._last_week = last_week

    @property
    def total(self):
        """Gets the total of this GetCorporationsCorporationIdFwStatsVictoryPoints.

        Total victory points gained since the given corporation enlisted

        :return: The total of this GetCorporationsCorporationIdFwStatsVictoryPoints.
        :rtype: int
        """
        return self._total

    @total.setter
    def total(self, total):
        """Sets the total of this GetCorporationsCorporationIdFwStatsVictoryPoints.

        Total victory points gained since the given corporation enlisted

        :param total: The total of this GetCorporationsCorporationIdFwStatsVictoryPoints.
        :type total: int
        """
        if total is None:
            raise ValueError("Invalid value for `total`, must not be `None`")

        self._total = total

    @property
    def yesterday(self):
        """Gets the yesterday of this GetCorporationsCorporationIdFwStatsVictoryPoints.

        Yesterday's victory points gained by members of the given corporation

        :return: The yesterday of this GetCorporationsCorporationIdFwStatsVictoryPoints.
        :rtype: int
        """
        return self._yesterday

    @yesterday.setter
    def yesterday(self, yesterday):
        """Sets the yesterday of this GetCorporationsCorporationIdFwStatsVictoryPoints.

        Yesterday's victory points gained by members of the given corporation

        :param yesterday: The yesterday of this GetCorporationsCorporationIdFwStatsVictoryPoints.
        :type yesterday: int
        """
        if yesterday is None:
            raise ValueError("Invalid value for `yesterday`, must not be `None`")

        self._yesterday = yesterday
