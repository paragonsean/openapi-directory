# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class GetCharactersCharacterIdCalendar200Ok(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, event_date: datetime=None, event_id: int=None, event_response: str=None, importance: int=None, title: str=None):
        """GetCharactersCharacterIdCalendar200Ok - a model defined in OpenAPI

        :param event_date: The event_date of this GetCharactersCharacterIdCalendar200Ok.
        :param event_id: The event_id of this GetCharactersCharacterIdCalendar200Ok.
        :param event_response: The event_response of this GetCharactersCharacterIdCalendar200Ok.
        :param importance: The importance of this GetCharactersCharacterIdCalendar200Ok.
        :param title: The title of this GetCharactersCharacterIdCalendar200Ok.
        """
        self.openapi_types = {
            'event_date': datetime,
            'event_id': int,
            'event_response': str,
            'importance': int,
            'title': str
        }

        self.attribute_map = {
            'event_date': 'event_date',
            'event_id': 'event_id',
            'event_response': 'event_response',
            'importance': 'importance',
            'title': 'title'
        }

        self._event_date = event_date
        self._event_id = event_id
        self._event_response = event_response
        self._importance = importance
        self._title = title

    @classmethod
    def from_dict(cls, dikt: dict) -> 'GetCharactersCharacterIdCalendar200Ok':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The get_characters_character_id_calendar_200_ok of this GetCharactersCharacterIdCalendar200Ok.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def event_date(self):
        """Gets the event_date of this GetCharactersCharacterIdCalendar200Ok.

        event_date string

        :return: The event_date of this GetCharactersCharacterIdCalendar200Ok.
        :rtype: datetime
        """
        return self._event_date

    @event_date.setter
    def event_date(self, event_date):
        """Sets the event_date of this GetCharactersCharacterIdCalendar200Ok.

        event_date string

        :param event_date: The event_date of this GetCharactersCharacterIdCalendar200Ok.
        :type event_date: datetime
        """

        self._event_date = event_date

    @property
    def event_id(self):
        """Gets the event_id of this GetCharactersCharacterIdCalendar200Ok.

        event_id integer

        :return: The event_id of this GetCharactersCharacterIdCalendar200Ok.
        :rtype: int
        """
        return self._event_id

    @event_id.setter
    def event_id(self, event_id):
        """Sets the event_id of this GetCharactersCharacterIdCalendar200Ok.

        event_id integer

        :param event_id: The event_id of this GetCharactersCharacterIdCalendar200Ok.
        :type event_id: int
        """

        self._event_id = event_id

    @property
    def event_response(self):
        """Gets the event_response of this GetCharactersCharacterIdCalendar200Ok.

        event_response string

        :return: The event_response of this GetCharactersCharacterIdCalendar200Ok.
        :rtype: str
        """
        return self._event_response

    @event_response.setter
    def event_response(self, event_response):
        """Sets the event_response of this GetCharactersCharacterIdCalendar200Ok.

        event_response string

        :param event_response: The event_response of this GetCharactersCharacterIdCalendar200Ok.
        :type event_response: str
        """
        allowed_values = ["declined", "not_responded", "accepted", "tentative"]  # noqa: E501
        if event_response not in allowed_values:
            raise ValueError(
                "Invalid value for `event_response` ({0}), must be one of {1}"
                .format(event_response, allowed_values)
            )

        self._event_response = event_response

    @property
    def importance(self):
        """Gets the importance of this GetCharactersCharacterIdCalendar200Ok.

        importance integer

        :return: The importance of this GetCharactersCharacterIdCalendar200Ok.
        :rtype: int
        """
        return self._importance

    @importance.setter
    def importance(self, importance):
        """Sets the importance of this GetCharactersCharacterIdCalendar200Ok.

        importance integer

        :param importance: The importance of this GetCharactersCharacterIdCalendar200Ok.
        :type importance: int
        """

        self._importance = importance

    @property
    def title(self):
        """Gets the title of this GetCharactersCharacterIdCalendar200Ok.

        title string

        :return: The title of this GetCharactersCharacterIdCalendar200Ok.
        :rtype: str
        """
        return self._title

    @title.setter
    def title(self, title):
        """Sets the title of this GetCharactersCharacterIdCalendar200Ok.

        title string

        :param title: The title of this GetCharactersCharacterIdCalendar200Ok.
        :type title: str
        """

        self._title = title
