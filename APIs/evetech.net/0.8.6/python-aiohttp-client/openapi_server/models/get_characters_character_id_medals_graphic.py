# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class GetCharactersCharacterIdMedalsGraphic(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, color: int=None, graphic: str=None, layer: int=None, part: int=None):
        """GetCharactersCharacterIdMedalsGraphic - a model defined in OpenAPI

        :param color: The color of this GetCharactersCharacterIdMedalsGraphic.
        :param graphic: The graphic of this GetCharactersCharacterIdMedalsGraphic.
        :param layer: The layer of this GetCharactersCharacterIdMedalsGraphic.
        :param part: The part of this GetCharactersCharacterIdMedalsGraphic.
        """
        self.openapi_types = {
            'color': int,
            'graphic': str,
            'layer': int,
            'part': int
        }

        self.attribute_map = {
            'color': 'color',
            'graphic': 'graphic',
            'layer': 'layer',
            'part': 'part'
        }

        self._color = color
        self._graphic = graphic
        self._layer = layer
        self._part = part

    @classmethod
    def from_dict(cls, dikt: dict) -> 'GetCharactersCharacterIdMedalsGraphic':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The get_characters_character_id_medals_graphic of this GetCharactersCharacterIdMedalsGraphic.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def color(self):
        """Gets the color of this GetCharactersCharacterIdMedalsGraphic.

        color integer

        :return: The color of this GetCharactersCharacterIdMedalsGraphic.
        :rtype: int
        """
        return self._color

    @color.setter
    def color(self, color):
        """Sets the color of this GetCharactersCharacterIdMedalsGraphic.

        color integer

        :param color: The color of this GetCharactersCharacterIdMedalsGraphic.
        :type color: int
        """

        self._color = color

    @property
    def graphic(self):
        """Gets the graphic of this GetCharactersCharacterIdMedalsGraphic.

        graphic string

        :return: The graphic of this GetCharactersCharacterIdMedalsGraphic.
        :rtype: str
        """
        return self._graphic

    @graphic.setter
    def graphic(self, graphic):
        """Sets the graphic of this GetCharactersCharacterIdMedalsGraphic.

        graphic string

        :param graphic: The graphic of this GetCharactersCharacterIdMedalsGraphic.
        :type graphic: str
        """
        if graphic is None:
            raise ValueError("Invalid value for `graphic`, must not be `None`")

        self._graphic = graphic

    @property
    def layer(self):
        """Gets the layer of this GetCharactersCharacterIdMedalsGraphic.

        layer integer

        :return: The layer of this GetCharactersCharacterIdMedalsGraphic.
        :rtype: int
        """
        return self._layer

    @layer.setter
    def layer(self, layer):
        """Sets the layer of this GetCharactersCharacterIdMedalsGraphic.

        layer integer

        :param layer: The layer of this GetCharactersCharacterIdMedalsGraphic.
        :type layer: int
        """
        if layer is None:
            raise ValueError("Invalid value for `layer`, must not be `None`")

        self._layer = layer

    @property
    def part(self):
        """Gets the part of this GetCharactersCharacterIdMedalsGraphic.

        part integer

        :return: The part of this GetCharactersCharacterIdMedalsGraphic.
        :rtype: int
        """
        return self._part

    @part.setter
    def part(self, part):
        """Sets the part of this GetCharactersCharacterIdMedalsGraphic.

        part integer

        :param part: The part of this GetCharactersCharacterIdMedalsGraphic.
        :type part: int
        """
        if part is None:
            raise ValueError("Invalid value for `part`, must not be `None`")

        self._part = part
