# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.get_characters_character_id_skills_skill import GetCharactersCharacterIdSkillsSkill
from openapi_server import util


class GetCharactersCharacterIdSkillsOk(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, skills: List[GetCharactersCharacterIdSkillsSkill]=None, total_sp: int=None, unallocated_sp: int=None):
        """GetCharactersCharacterIdSkillsOk - a model defined in OpenAPI

        :param skills: The skills of this GetCharactersCharacterIdSkillsOk.
        :param total_sp: The total_sp of this GetCharactersCharacterIdSkillsOk.
        :param unallocated_sp: The unallocated_sp of this GetCharactersCharacterIdSkillsOk.
        """
        self.openapi_types = {
            'skills': List[GetCharactersCharacterIdSkillsSkill],
            'total_sp': int,
            'unallocated_sp': int
        }

        self.attribute_map = {
            'skills': 'skills',
            'total_sp': 'total_sp',
            'unallocated_sp': 'unallocated_sp'
        }

        self._skills = skills
        self._total_sp = total_sp
        self._unallocated_sp = unallocated_sp

    @classmethod
    def from_dict(cls, dikt: dict) -> 'GetCharactersCharacterIdSkillsOk':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The get_characters_character_id_skills_ok of this GetCharactersCharacterIdSkillsOk.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def skills(self):
        """Gets the skills of this GetCharactersCharacterIdSkillsOk.

        skills array

        :return: The skills of this GetCharactersCharacterIdSkillsOk.
        :rtype: List[GetCharactersCharacterIdSkillsSkill]
        """
        return self._skills

    @skills.setter
    def skills(self, skills):
        """Sets the skills of this GetCharactersCharacterIdSkillsOk.

        skills array

        :param skills: The skills of this GetCharactersCharacterIdSkillsOk.
        :type skills: List[GetCharactersCharacterIdSkillsSkill]
        """
        if skills is None:
            raise ValueError("Invalid value for `skills`, must not be `None`")
        if skills is not None and len(skills) > 1000:
            raise ValueError("Invalid value for `skills`, number of items must be less than or equal to `1000`")

        self._skills = skills

    @property
    def total_sp(self):
        """Gets the total_sp of this GetCharactersCharacterIdSkillsOk.

        total_sp integer

        :return: The total_sp of this GetCharactersCharacterIdSkillsOk.
        :rtype: int
        """
        return self._total_sp

    @total_sp.setter
    def total_sp(self, total_sp):
        """Sets the total_sp of this GetCharactersCharacterIdSkillsOk.

        total_sp integer

        :param total_sp: The total_sp of this GetCharactersCharacterIdSkillsOk.
        :type total_sp: int
        """
        if total_sp is None:
            raise ValueError("Invalid value for `total_sp`, must not be `None`")

        self._total_sp = total_sp

    @property
    def unallocated_sp(self):
        """Gets the unallocated_sp of this GetCharactersCharacterIdSkillsOk.

        Skill points available to be assigned

        :return: The unallocated_sp of this GetCharactersCharacterIdSkillsOk.
        :rtype: int
        """
        return self._unallocated_sp

    @unallocated_sp.setter
    def unallocated_sp(self, unallocated_sp):
        """Sets the unallocated_sp of this GetCharactersCharacterIdSkillsOk.

        Skill points available to be assigned

        :param unallocated_sp: The unallocated_sp of this GetCharactersCharacterIdSkillsOk.
        :type unallocated_sp: int
        """

        self._unallocated_sp = unallocated_sp
