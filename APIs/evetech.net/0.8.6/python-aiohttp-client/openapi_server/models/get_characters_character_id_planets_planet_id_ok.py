# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.get_characters_character_id_planets_planet_id_link import GetCharactersCharacterIdPlanetsPlanetIdLink
from openapi_server.models.get_characters_character_id_planets_planet_id_pin import GetCharactersCharacterIdPlanetsPlanetIdPin
from openapi_server.models.get_characters_character_id_planets_planet_id_route import GetCharactersCharacterIdPlanetsPlanetIdRoute
from openapi_server import util


class GetCharactersCharacterIdPlanetsPlanetIdOk(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, links: List[GetCharactersCharacterIdPlanetsPlanetIdLink]=None, pins: List[GetCharactersCharacterIdPlanetsPlanetIdPin]=None, routes: List[GetCharactersCharacterIdPlanetsPlanetIdRoute]=None):
        """GetCharactersCharacterIdPlanetsPlanetIdOk - a model defined in OpenAPI

        :param links: The links of this GetCharactersCharacterIdPlanetsPlanetIdOk.
        :param pins: The pins of this GetCharactersCharacterIdPlanetsPlanetIdOk.
        :param routes: The routes of this GetCharactersCharacterIdPlanetsPlanetIdOk.
        """
        self.openapi_types = {
            'links': List[GetCharactersCharacterIdPlanetsPlanetIdLink],
            'pins': List[GetCharactersCharacterIdPlanetsPlanetIdPin],
            'routes': List[GetCharactersCharacterIdPlanetsPlanetIdRoute]
        }

        self.attribute_map = {
            'links': 'links',
            'pins': 'pins',
            'routes': 'routes'
        }

        self._links = links
        self._pins = pins
        self._routes = routes

    @classmethod
    def from_dict(cls, dikt: dict) -> 'GetCharactersCharacterIdPlanetsPlanetIdOk':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The get_characters_character_id_planets_planet_id_ok of this GetCharactersCharacterIdPlanetsPlanetIdOk.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def links(self):
        """Gets the links of this GetCharactersCharacterIdPlanetsPlanetIdOk.

        links array

        :return: The links of this GetCharactersCharacterIdPlanetsPlanetIdOk.
        :rtype: List[GetCharactersCharacterIdPlanetsPlanetIdLink]
        """
        return self._links

    @links.setter
    def links(self, links):
        """Sets the links of this GetCharactersCharacterIdPlanetsPlanetIdOk.

        links array

        :param links: The links of this GetCharactersCharacterIdPlanetsPlanetIdOk.
        :type links: List[GetCharactersCharacterIdPlanetsPlanetIdLink]
        """
        if links is None:
            raise ValueError("Invalid value for `links`, must not be `None`")
        if links is not None and len(links) > 500:
            raise ValueError("Invalid value for `links`, number of items must be less than or equal to `500`")

        self._links = links

    @property
    def pins(self):
        """Gets the pins of this GetCharactersCharacterIdPlanetsPlanetIdOk.

        pins array

        :return: The pins of this GetCharactersCharacterIdPlanetsPlanetIdOk.
        :rtype: List[GetCharactersCharacterIdPlanetsPlanetIdPin]
        """
        return self._pins

    @pins.setter
    def pins(self, pins):
        """Sets the pins of this GetCharactersCharacterIdPlanetsPlanetIdOk.

        pins array

        :param pins: The pins of this GetCharactersCharacterIdPlanetsPlanetIdOk.
        :type pins: List[GetCharactersCharacterIdPlanetsPlanetIdPin]
        """
        if pins is None:
            raise ValueError("Invalid value for `pins`, must not be `None`")
        if pins is not None and len(pins) > 100:
            raise ValueError("Invalid value for `pins`, number of items must be less than or equal to `100`")

        self._pins = pins

    @property
    def routes(self):
        """Gets the routes of this GetCharactersCharacterIdPlanetsPlanetIdOk.

        routes array

        :return: The routes of this GetCharactersCharacterIdPlanetsPlanetIdOk.
        :rtype: List[GetCharactersCharacterIdPlanetsPlanetIdRoute]
        """
        return self._routes

    @routes.setter
    def routes(self, routes):
        """Sets the routes of this GetCharactersCharacterIdPlanetsPlanetIdOk.

        routes array

        :param routes: The routes of this GetCharactersCharacterIdPlanetsPlanetIdOk.
        :type routes: List[GetCharactersCharacterIdPlanetsPlanetIdRoute]
        """
        if routes is None:
            raise ValueError("Invalid value for `routes`, must not be `None`")
        if routes is not None and len(routes) > 1000:
            raise ValueError("Invalid value for `routes`, number of items must be less than or equal to `1000`")

        self._routes = routes
