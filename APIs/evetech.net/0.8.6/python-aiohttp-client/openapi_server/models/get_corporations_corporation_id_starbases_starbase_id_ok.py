# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.get_corporations_corporation_id_starbases_starbase_id_fuel import GetCorporationsCorporationIdStarbasesStarbaseIdFuel
from openapi_server import util


class GetCorporationsCorporationIdStarbasesStarbaseIdOk(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, allow_alliance_members: bool=None, allow_corporation_members: bool=None, anchor: str=None, attack_if_at_war: bool=None, attack_if_other_security_status_dropping: bool=None, attack_security_status_threshold: float=None, attack_standing_threshold: float=None, fuel_bay_take: str=None, fuel_bay_view: str=None, fuels: List[GetCorporationsCorporationIdStarbasesStarbaseIdFuel]=None, offline: str=None, online: str=None, unanchor: str=None, use_alliance_standings: bool=None):
        """GetCorporationsCorporationIdStarbasesStarbaseIdOk - a model defined in OpenAPI

        :param allow_alliance_members: The allow_alliance_members of this GetCorporationsCorporationIdStarbasesStarbaseIdOk.
        :param allow_corporation_members: The allow_corporation_members of this GetCorporationsCorporationIdStarbasesStarbaseIdOk.
        :param anchor: The anchor of this GetCorporationsCorporationIdStarbasesStarbaseIdOk.
        :param attack_if_at_war: The attack_if_at_war of this GetCorporationsCorporationIdStarbasesStarbaseIdOk.
        :param attack_if_other_security_status_dropping: The attack_if_other_security_status_dropping of this GetCorporationsCorporationIdStarbasesStarbaseIdOk.
        :param attack_security_status_threshold: The attack_security_status_threshold of this GetCorporationsCorporationIdStarbasesStarbaseIdOk.
        :param attack_standing_threshold: The attack_standing_threshold of this GetCorporationsCorporationIdStarbasesStarbaseIdOk.
        :param fuel_bay_take: The fuel_bay_take of this GetCorporationsCorporationIdStarbasesStarbaseIdOk.
        :param fuel_bay_view: The fuel_bay_view of this GetCorporationsCorporationIdStarbasesStarbaseIdOk.
        :param fuels: The fuels of this GetCorporationsCorporationIdStarbasesStarbaseIdOk.
        :param offline: The offline of this GetCorporationsCorporationIdStarbasesStarbaseIdOk.
        :param online: The online of this GetCorporationsCorporationIdStarbasesStarbaseIdOk.
        :param unanchor: The unanchor of this GetCorporationsCorporationIdStarbasesStarbaseIdOk.
        :param use_alliance_standings: The use_alliance_standings of this GetCorporationsCorporationIdStarbasesStarbaseIdOk.
        """
        self.openapi_types = {
            'allow_alliance_members': bool,
            'allow_corporation_members': bool,
            'anchor': str,
            'attack_if_at_war': bool,
            'attack_if_other_security_status_dropping': bool,
            'attack_security_status_threshold': float,
            'attack_standing_threshold': float,
            'fuel_bay_take': str,
            'fuel_bay_view': str,
            'fuels': List[GetCorporationsCorporationIdStarbasesStarbaseIdFuel],
            'offline': str,
            'online': str,
            'unanchor': str,
            'use_alliance_standings': bool
        }

        self.attribute_map = {
            'allow_alliance_members': 'allow_alliance_members',
            'allow_corporation_members': 'allow_corporation_members',
            'anchor': 'anchor',
            'attack_if_at_war': 'attack_if_at_war',
            'attack_if_other_security_status_dropping': 'attack_if_other_security_status_dropping',
            'attack_security_status_threshold': 'attack_security_status_threshold',
            'attack_standing_threshold': 'attack_standing_threshold',
            'fuel_bay_take': 'fuel_bay_take',
            'fuel_bay_view': 'fuel_bay_view',
            'fuels': 'fuels',
            'offline': 'offline',
            'online': 'online',
            'unanchor': 'unanchor',
            'use_alliance_standings': 'use_alliance_standings'
        }

        self._allow_alliance_members = allow_alliance_members
        self._allow_corporation_members = allow_corporation_members
        self._anchor = anchor
        self._attack_if_at_war = attack_if_at_war
        self._attack_if_other_security_status_dropping = attack_if_other_security_status_dropping
        self._attack_security_status_threshold = attack_security_status_threshold
        self._attack_standing_threshold = attack_standing_threshold
        self._fuel_bay_take = fuel_bay_take
        self._fuel_bay_view = fuel_bay_view
        self._fuels = fuels
        self._offline = offline
        self._online = online
        self._unanchor = unanchor
        self._use_alliance_standings = use_alliance_standings

    @classmethod
    def from_dict(cls, dikt: dict) -> 'GetCorporationsCorporationIdStarbasesStarbaseIdOk':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The get_corporations_corporation_id_starbases_starbase_id_ok of this GetCorporationsCorporationIdStarbasesStarbaseIdOk.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def allow_alliance_members(self):
        """Gets the allow_alliance_members of this GetCorporationsCorporationIdStarbasesStarbaseIdOk.

        allow_alliance_members boolean

        :return: The allow_alliance_members of this GetCorporationsCorporationIdStarbasesStarbaseIdOk.
        :rtype: bool
        """
        return self._allow_alliance_members

    @allow_alliance_members.setter
    def allow_alliance_members(self, allow_alliance_members):
        """Sets the allow_alliance_members of this GetCorporationsCorporationIdStarbasesStarbaseIdOk.

        allow_alliance_members boolean

        :param allow_alliance_members: The allow_alliance_members of this GetCorporationsCorporationIdStarbasesStarbaseIdOk.
        :type allow_alliance_members: bool
        """
        if allow_alliance_members is None:
            raise ValueError("Invalid value for `allow_alliance_members`, must not be `None`")

        self._allow_alliance_members = allow_alliance_members

    @property
    def allow_corporation_members(self):
        """Gets the allow_corporation_members of this GetCorporationsCorporationIdStarbasesStarbaseIdOk.

        allow_corporation_members boolean

        :return: The allow_corporation_members of this GetCorporationsCorporationIdStarbasesStarbaseIdOk.
        :rtype: bool
        """
        return self._allow_corporation_members

    @allow_corporation_members.setter
    def allow_corporation_members(self, allow_corporation_members):
        """Sets the allow_corporation_members of this GetCorporationsCorporationIdStarbasesStarbaseIdOk.

        allow_corporation_members boolean

        :param allow_corporation_members: The allow_corporation_members of this GetCorporationsCorporationIdStarbasesStarbaseIdOk.
        :type allow_corporation_members: bool
        """
        if allow_corporation_members is None:
            raise ValueError("Invalid value for `allow_corporation_members`, must not be `None`")

        self._allow_corporation_members = allow_corporation_members

    @property
    def anchor(self):
        """Gets the anchor of this GetCorporationsCorporationIdStarbasesStarbaseIdOk.

        Who can anchor starbase (POS) and its structures

        :return: The anchor of this GetCorporationsCorporationIdStarbasesStarbaseIdOk.
        :rtype: str
        """
        return self._anchor

    @anchor.setter
    def anchor(self, anchor):
        """Sets the anchor of this GetCorporationsCorporationIdStarbasesStarbaseIdOk.

        Who can anchor starbase (POS) and its structures

        :param anchor: The anchor of this GetCorporationsCorporationIdStarbasesStarbaseIdOk.
        :type anchor: str
        """
        allowed_values = ["alliance_member", "config_starbase_equipment_role", "corporation_member", "starbase_fuel_technician_role"]  # noqa: E501
        if anchor not in allowed_values:
            raise ValueError(
                "Invalid value for `anchor` ({0}), must be one of {1}"
                .format(anchor, allowed_values)
            )

        self._anchor = anchor

    @property
    def attack_if_at_war(self):
        """Gets the attack_if_at_war of this GetCorporationsCorporationIdStarbasesStarbaseIdOk.

        attack_if_at_war boolean

        :return: The attack_if_at_war of this GetCorporationsCorporationIdStarbasesStarbaseIdOk.
        :rtype: bool
        """
        return self._attack_if_at_war

    @attack_if_at_war.setter
    def attack_if_at_war(self, attack_if_at_war):
        """Sets the attack_if_at_war of this GetCorporationsCorporationIdStarbasesStarbaseIdOk.

        attack_if_at_war boolean

        :param attack_if_at_war: The attack_if_at_war of this GetCorporationsCorporationIdStarbasesStarbaseIdOk.
        :type attack_if_at_war: bool
        """
        if attack_if_at_war is None:
            raise ValueError("Invalid value for `attack_if_at_war`, must not be `None`")

        self._attack_if_at_war = attack_if_at_war

    @property
    def attack_if_other_security_status_dropping(self):
        """Gets the attack_if_other_security_status_dropping of this GetCorporationsCorporationIdStarbasesStarbaseIdOk.

        attack_if_other_security_status_dropping boolean

        :return: The attack_if_other_security_status_dropping of this GetCorporationsCorporationIdStarbasesStarbaseIdOk.
        :rtype: bool
        """
        return self._attack_if_other_security_status_dropping

    @attack_if_other_security_status_dropping.setter
    def attack_if_other_security_status_dropping(self, attack_if_other_security_status_dropping):
        """Sets the attack_if_other_security_status_dropping of this GetCorporationsCorporationIdStarbasesStarbaseIdOk.

        attack_if_other_security_status_dropping boolean

        :param attack_if_other_security_status_dropping: The attack_if_other_security_status_dropping of this GetCorporationsCorporationIdStarbasesStarbaseIdOk.
        :type attack_if_other_security_status_dropping: bool
        """
        if attack_if_other_security_status_dropping is None:
            raise ValueError("Invalid value for `attack_if_other_security_status_dropping`, must not be `None`")

        self._attack_if_other_security_status_dropping = attack_if_other_security_status_dropping

    @property
    def attack_security_status_threshold(self):
        """Gets the attack_security_status_threshold of this GetCorporationsCorporationIdStarbasesStarbaseIdOk.

        Starbase (POS) will attack if target's security standing is lower than this value

        :return: The attack_security_status_threshold of this GetCorporationsCorporationIdStarbasesStarbaseIdOk.
        :rtype: float
        """
        return self._attack_security_status_threshold

    @attack_security_status_threshold.setter
    def attack_security_status_threshold(self, attack_security_status_threshold):
        """Sets the attack_security_status_threshold of this GetCorporationsCorporationIdStarbasesStarbaseIdOk.

        Starbase (POS) will attack if target's security standing is lower than this value

        :param attack_security_status_threshold: The attack_security_status_threshold of this GetCorporationsCorporationIdStarbasesStarbaseIdOk.
        :type attack_security_status_threshold: float
        """

        self._attack_security_status_threshold = attack_security_status_threshold

    @property
    def attack_standing_threshold(self):
        """Gets the attack_standing_threshold of this GetCorporationsCorporationIdStarbasesStarbaseIdOk.

        Starbase (POS) will attack if target's standing is lower than this value

        :return: The attack_standing_threshold of this GetCorporationsCorporationIdStarbasesStarbaseIdOk.
        :rtype: float
        """
        return self._attack_standing_threshold

    @attack_standing_threshold.setter
    def attack_standing_threshold(self, attack_standing_threshold):
        """Sets the attack_standing_threshold of this GetCorporationsCorporationIdStarbasesStarbaseIdOk.

        Starbase (POS) will attack if target's standing is lower than this value

        :param attack_standing_threshold: The attack_standing_threshold of this GetCorporationsCorporationIdStarbasesStarbaseIdOk.
        :type attack_standing_threshold: float
        """

        self._attack_standing_threshold = attack_standing_threshold

    @property
    def fuel_bay_take(self):
        """Gets the fuel_bay_take of this GetCorporationsCorporationIdStarbasesStarbaseIdOk.

        Who can take fuel blocks out of the starbase (POS)'s fuel bay

        :return: The fuel_bay_take of this GetCorporationsCorporationIdStarbasesStarbaseIdOk.
        :rtype: str
        """
        return self._fuel_bay_take

    @fuel_bay_take.setter
    def fuel_bay_take(self, fuel_bay_take):
        """Sets the fuel_bay_take of this GetCorporationsCorporationIdStarbasesStarbaseIdOk.

        Who can take fuel blocks out of the starbase (POS)'s fuel bay

        :param fuel_bay_take: The fuel_bay_take of this GetCorporationsCorporationIdStarbasesStarbaseIdOk.
        :type fuel_bay_take: str
        """
        allowed_values = ["alliance_member", "config_starbase_equipment_role", "corporation_member", "starbase_fuel_technician_role"]  # noqa: E501
        if fuel_bay_take not in allowed_values:
            raise ValueError(
                "Invalid value for `fuel_bay_take` ({0}), must be one of {1}"
                .format(fuel_bay_take, allowed_values)
            )

        self._fuel_bay_take = fuel_bay_take

    @property
    def fuel_bay_view(self):
        """Gets the fuel_bay_view of this GetCorporationsCorporationIdStarbasesStarbaseIdOk.

        Who can view the starbase (POS)'s fule bay. Characters either need to have required role or belong to the starbase (POS) owner's corporation or alliance, as described by the enum, all other access settings follows the same scheme

        :return: The fuel_bay_view of this GetCorporationsCorporationIdStarbasesStarbaseIdOk.
        :rtype: str
        """
        return self._fuel_bay_view

    @fuel_bay_view.setter
    def fuel_bay_view(self, fuel_bay_view):
        """Sets the fuel_bay_view of this GetCorporationsCorporationIdStarbasesStarbaseIdOk.

        Who can view the starbase (POS)'s fule bay. Characters either need to have required role or belong to the starbase (POS) owner's corporation or alliance, as described by the enum, all other access settings follows the same scheme

        :param fuel_bay_view: The fuel_bay_view of this GetCorporationsCorporationIdStarbasesStarbaseIdOk.
        :type fuel_bay_view: str
        """
        allowed_values = ["alliance_member", "config_starbase_equipment_role", "corporation_member", "starbase_fuel_technician_role"]  # noqa: E501
        if fuel_bay_view not in allowed_values:
            raise ValueError(
                "Invalid value for `fuel_bay_view` ({0}), must be one of {1}"
                .format(fuel_bay_view, allowed_values)
            )

        self._fuel_bay_view = fuel_bay_view

    @property
    def fuels(self):
        """Gets the fuels of this GetCorporationsCorporationIdStarbasesStarbaseIdOk.

        Fuel blocks and other things that will be consumed when operating a starbase (POS)

        :return: The fuels of this GetCorporationsCorporationIdStarbasesStarbaseIdOk.
        :rtype: List[GetCorporationsCorporationIdStarbasesStarbaseIdFuel]
        """
        return self._fuels

    @fuels.setter
    def fuels(self, fuels):
        """Sets the fuels of this GetCorporationsCorporationIdStarbasesStarbaseIdOk.

        Fuel blocks and other things that will be consumed when operating a starbase (POS)

        :param fuels: The fuels of this GetCorporationsCorporationIdStarbasesStarbaseIdOk.
        :type fuels: List[GetCorporationsCorporationIdStarbasesStarbaseIdFuel]
        """
        if fuels is not None and len(fuels) > 20:
            raise ValueError("Invalid value for `fuels`, number of items must be less than or equal to `20`")

        self._fuels = fuels

    @property
    def offline(self):
        """Gets the offline of this GetCorporationsCorporationIdStarbasesStarbaseIdOk.

        Who can offline starbase (POS) and its structures

        :return: The offline of this GetCorporationsCorporationIdStarbasesStarbaseIdOk.
        :rtype: str
        """
        return self._offline

    @offline.setter
    def offline(self, offline):
        """Sets the offline of this GetCorporationsCorporationIdStarbasesStarbaseIdOk.

        Who can offline starbase (POS) and its structures

        :param offline: The offline of this GetCorporationsCorporationIdStarbasesStarbaseIdOk.
        :type offline: str
        """
        allowed_values = ["alliance_member", "config_starbase_equipment_role", "corporation_member", "starbase_fuel_technician_role"]  # noqa: E501
        if offline not in allowed_values:
            raise ValueError(
                "Invalid value for `offline` ({0}), must be one of {1}"
                .format(offline, allowed_values)
            )

        self._offline = offline

    @property
    def online(self):
        """Gets the online of this GetCorporationsCorporationIdStarbasesStarbaseIdOk.

        Who can online starbase (POS) and its structures

        :return: The online of this GetCorporationsCorporationIdStarbasesStarbaseIdOk.
        :rtype: str
        """
        return self._online

    @online.setter
    def online(self, online):
        """Sets the online of this GetCorporationsCorporationIdStarbasesStarbaseIdOk.

        Who can online starbase (POS) and its structures

        :param online: The online of this GetCorporationsCorporationIdStarbasesStarbaseIdOk.
        :type online: str
        """
        allowed_values = ["alliance_member", "config_starbase_equipment_role", "corporation_member", "starbase_fuel_technician_role"]  # noqa: E501
        if online not in allowed_values:
            raise ValueError(
                "Invalid value for `online` ({0}), must be one of {1}"
                .format(online, allowed_values)
            )

        self._online = online

    @property
    def unanchor(self):
        """Gets the unanchor of this GetCorporationsCorporationIdStarbasesStarbaseIdOk.

        Who can unanchor starbase (POS) and its structures

        :return: The unanchor of this GetCorporationsCorporationIdStarbasesStarbaseIdOk.
        :rtype: str
        """
        return self._unanchor

    @unanchor.setter
    def unanchor(self, unanchor):
        """Sets the unanchor of this GetCorporationsCorporationIdStarbasesStarbaseIdOk.

        Who can unanchor starbase (POS) and its structures

        :param unanchor: The unanchor of this GetCorporationsCorporationIdStarbasesStarbaseIdOk.
        :type unanchor: str
        """
        allowed_values = ["alliance_member", "config_starbase_equipment_role", "corporation_member", "starbase_fuel_technician_role"]  # noqa: E501
        if unanchor not in allowed_values:
            raise ValueError(
                "Invalid value for `unanchor` ({0}), must be one of {1}"
                .format(unanchor, allowed_values)
            )

        self._unanchor = unanchor

    @property
    def use_alliance_standings(self):
        """Gets the use_alliance_standings of this GetCorporationsCorporationIdStarbasesStarbaseIdOk.

        True if the starbase (POS) is using alliance standings, otherwise using corporation's

        :return: The use_alliance_standings of this GetCorporationsCorporationIdStarbasesStarbaseIdOk.
        :rtype: bool
        """
        return self._use_alliance_standings

    @use_alliance_standings.setter
    def use_alliance_standings(self, use_alliance_standings):
        """Sets the use_alliance_standings of this GetCorporationsCorporationIdStarbasesStarbaseIdOk.

        True if the starbase (POS) is using alliance standings, otherwise using corporation's

        :param use_alliance_standings: The use_alliance_standings of this GetCorporationsCorporationIdStarbasesStarbaseIdOk.
        :type use_alliance_standings: bool
        """
        if use_alliance_standings is None:
            raise ValueError("Invalid value for `use_alliance_standings`, must not be `None`")

        self._use_alliance_standings = use_alliance_standings
