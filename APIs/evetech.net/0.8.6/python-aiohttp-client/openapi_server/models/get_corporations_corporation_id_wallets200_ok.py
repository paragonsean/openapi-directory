# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class GetCorporationsCorporationIdWallets200Ok(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, balance: float=None, division: int=None):
        """GetCorporationsCorporationIdWallets200Ok - a model defined in OpenAPI

        :param balance: The balance of this GetCorporationsCorporationIdWallets200Ok.
        :param division: The division of this GetCorporationsCorporationIdWallets200Ok.
        """
        self.openapi_types = {
            'balance': float,
            'division': int
        }

        self.attribute_map = {
            'balance': 'balance',
            'division': 'division'
        }

        self._balance = balance
        self._division = division

    @classmethod
    def from_dict(cls, dikt: dict) -> 'GetCorporationsCorporationIdWallets200Ok':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The get_corporations_corporation_id_wallets_200_ok of this GetCorporationsCorporationIdWallets200Ok.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def balance(self):
        """Gets the balance of this GetCorporationsCorporationIdWallets200Ok.

        balance number

        :return: The balance of this GetCorporationsCorporationIdWallets200Ok.
        :rtype: float
        """
        return self._balance

    @balance.setter
    def balance(self, balance):
        """Sets the balance of this GetCorporationsCorporationIdWallets200Ok.

        balance number

        :param balance: The balance of this GetCorporationsCorporationIdWallets200Ok.
        :type balance: float
        """
        if balance is None:
            raise ValueError("Invalid value for `balance`, must not be `None`")

        self._balance = balance

    @property
    def division(self):
        """Gets the division of this GetCorporationsCorporationIdWallets200Ok.

        division integer

        :return: The division of this GetCorporationsCorporationIdWallets200Ok.
        :rtype: int
        """
        return self._division

    @division.setter
    def division(self, division):
        """Sets the division of this GetCorporationsCorporationIdWallets200Ok.

        division integer

        :param division: The division of this GetCorporationsCorporationIdWallets200Ok.
        :type division: int
        """
        if division is None:
            raise ValueError("Invalid value for `division`, must not be `None`")
        if division is not None and division > 7:
            raise ValueError("Invalid value for `division`, must be a value less than or equal to `7`")
        if division is not None and division < 1:
            raise ValueError("Invalid value for `division`, must be a value greater than or equal to `1`")

        self._division = division
