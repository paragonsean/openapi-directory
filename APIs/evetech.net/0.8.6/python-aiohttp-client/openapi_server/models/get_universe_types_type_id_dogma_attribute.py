# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class GetUniverseTypesTypeIdDogmaAttribute(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, attribute_id: int=None, value: float=None):
        """GetUniverseTypesTypeIdDogmaAttribute - a model defined in OpenAPI

        :param attribute_id: The attribute_id of this GetUniverseTypesTypeIdDogmaAttribute.
        :param value: The value of this GetUniverseTypesTypeIdDogmaAttribute.
        """
        self.openapi_types = {
            'attribute_id': int,
            'value': float
        }

        self.attribute_map = {
            'attribute_id': 'attribute_id',
            'value': 'value'
        }

        self._attribute_id = attribute_id
        self._value = value

    @classmethod
    def from_dict(cls, dikt: dict) -> 'GetUniverseTypesTypeIdDogmaAttribute':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The get_universe_types_type_id_dogma_attribute of this GetUniverseTypesTypeIdDogmaAttribute.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def attribute_id(self):
        """Gets the attribute_id of this GetUniverseTypesTypeIdDogmaAttribute.

        attribute_id integer

        :return: The attribute_id of this GetUniverseTypesTypeIdDogmaAttribute.
        :rtype: int
        """
        return self._attribute_id

    @attribute_id.setter
    def attribute_id(self, attribute_id):
        """Sets the attribute_id of this GetUniverseTypesTypeIdDogmaAttribute.

        attribute_id integer

        :param attribute_id: The attribute_id of this GetUniverseTypesTypeIdDogmaAttribute.
        :type attribute_id: int
        """
        if attribute_id is None:
            raise ValueError("Invalid value for `attribute_id`, must not be `None`")

        self._attribute_id = attribute_id

    @property
    def value(self):
        """Gets the value of this GetUniverseTypesTypeIdDogmaAttribute.

        value number

        :return: The value of this GetUniverseTypesTypeIdDogmaAttribute.
        :rtype: float
        """
        return self._value

    @value.setter
    def value(self, value):
        """Sets the value of this GetUniverseTypesTypeIdDogmaAttribute.

        value number

        :param value: The value of this GetUniverseTypesTypeIdDogmaAttribute.
        :type value: float
        """
        if value is None:
            raise ValueError("Invalid value for `value`, must not be `None`")

        self._value = value
