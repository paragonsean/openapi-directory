# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class GetCharactersCharacterIdMailLabelsLabel(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, color: str='ffffff', label_id: int=None, name: str=None, unread_count: int=None):
        """GetCharactersCharacterIdMailLabelsLabel - a model defined in OpenAPI

        :param color: The color of this GetCharactersCharacterIdMailLabelsLabel.
        :param label_id: The label_id of this GetCharactersCharacterIdMailLabelsLabel.
        :param name: The name of this GetCharactersCharacterIdMailLabelsLabel.
        :param unread_count: The unread_count of this GetCharactersCharacterIdMailLabelsLabel.
        """
        self.openapi_types = {
            'color': str,
            'label_id': int,
            'name': str,
            'unread_count': int
        }

        self.attribute_map = {
            'color': 'color',
            'label_id': 'label_id',
            'name': 'name',
            'unread_count': 'unread_count'
        }

        self._color = color
        self._label_id = label_id
        self._name = name
        self._unread_count = unread_count

    @classmethod
    def from_dict(cls, dikt: dict) -> 'GetCharactersCharacterIdMailLabelsLabel':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The get_characters_character_id_mail_labels_label of this GetCharactersCharacterIdMailLabelsLabel.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def color(self):
        """Gets the color of this GetCharactersCharacterIdMailLabelsLabel.

        color string

        :return: The color of this GetCharactersCharacterIdMailLabelsLabel.
        :rtype: str
        """
        return self._color

    @color.setter
    def color(self, color):
        """Sets the color of this GetCharactersCharacterIdMailLabelsLabel.

        color string

        :param color: The color of this GetCharactersCharacterIdMailLabelsLabel.
        :type color: str
        """
        allowed_values = ["#0000fe", "#006634", "#0099ff", "#00ff33", "#01ffff", "#349800", "#660066", "#666666", "#999999", "#99ffff", "#9a0000", "#ccff9a", "#e6e6e6", "#fe0000", "#ff6600", "#ffff01", "#ffffcd", "#ffffff"]  # noqa: E501
        if color not in allowed_values:
            raise ValueError(
                "Invalid value for `color` ({0}), must be one of {1}"
                .format(color, allowed_values)
            )

        self._color = color

    @property
    def label_id(self):
        """Gets the label_id of this GetCharactersCharacterIdMailLabelsLabel.

        label_id integer

        :return: The label_id of this GetCharactersCharacterIdMailLabelsLabel.
        :rtype: int
        """
        return self._label_id

    @label_id.setter
    def label_id(self, label_id):
        """Sets the label_id of this GetCharactersCharacterIdMailLabelsLabel.

        label_id integer

        :param label_id: The label_id of this GetCharactersCharacterIdMailLabelsLabel.
        :type label_id: int
        """
        if label_id is not None and label_id < 0:
            raise ValueError("Invalid value for `label_id`, must be a value greater than or equal to `0`")

        self._label_id = label_id

    @property
    def name(self):
        """Gets the name of this GetCharactersCharacterIdMailLabelsLabel.

        name string

        :return: The name of this GetCharactersCharacterIdMailLabelsLabel.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this GetCharactersCharacterIdMailLabelsLabel.

        name string

        :param name: The name of this GetCharactersCharacterIdMailLabelsLabel.
        :type name: str
        """
        if name is not None and len(name) > 40:
            raise ValueError("Invalid value for `name`, length must be less than or equal to `40`")

        self._name = name

    @property
    def unread_count(self):
        """Gets the unread_count of this GetCharactersCharacterIdMailLabelsLabel.

        unread_count integer

        :return: The unread_count of this GetCharactersCharacterIdMailLabelsLabel.
        :rtype: int
        """
        return self._unread_count

    @unread_count.setter
    def unread_count(self, unread_count):
        """Sets the unread_count of this GetCharactersCharacterIdMailLabelsLabel.

        unread_count integer

        :param unread_count: The unread_count of this GetCharactersCharacterIdMailLabelsLabel.
        :type unread_count: int
        """
        if unread_count is not None and unread_count < 0:
            raise ValueError("Invalid value for `unread_count`, must be a value greater than or equal to `0`")

        self._unread_count = unread_count
