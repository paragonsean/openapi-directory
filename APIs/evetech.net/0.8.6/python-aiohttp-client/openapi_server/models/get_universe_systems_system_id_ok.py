# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.get_universe_systems_system_id_planet import GetUniverseSystemsSystemIdPlanet
from openapi_server.models.get_universe_systems_system_id_position import GetUniverseSystemsSystemIdPosition
from openapi_server import util


class GetUniverseSystemsSystemIdOk(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, constellation_id: int=None, name: str=None, planets: List[GetUniverseSystemsSystemIdPlanet]=None, position: GetUniverseSystemsSystemIdPosition=None, security_class: str=None, security_status: float=None, star_id: int=None, stargates: List[int]=None, stations: List[int]=None, system_id: int=None):
        """GetUniverseSystemsSystemIdOk - a model defined in OpenAPI

        :param constellation_id: The constellation_id of this GetUniverseSystemsSystemIdOk.
        :param name: The name of this GetUniverseSystemsSystemIdOk.
        :param planets: The planets of this GetUniverseSystemsSystemIdOk.
        :param position: The position of this GetUniverseSystemsSystemIdOk.
        :param security_class: The security_class of this GetUniverseSystemsSystemIdOk.
        :param security_status: The security_status of this GetUniverseSystemsSystemIdOk.
        :param star_id: The star_id of this GetUniverseSystemsSystemIdOk.
        :param stargates: The stargates of this GetUniverseSystemsSystemIdOk.
        :param stations: The stations of this GetUniverseSystemsSystemIdOk.
        :param system_id: The system_id of this GetUniverseSystemsSystemIdOk.
        """
        self.openapi_types = {
            'constellation_id': int,
            'name': str,
            'planets': List[GetUniverseSystemsSystemIdPlanet],
            'position': GetUniverseSystemsSystemIdPosition,
            'security_class': str,
            'security_status': float,
            'star_id': int,
            'stargates': List[int],
            'stations': List[int],
            'system_id': int
        }

        self.attribute_map = {
            'constellation_id': 'constellation_id',
            'name': 'name',
            'planets': 'planets',
            'position': 'position',
            'security_class': 'security_class',
            'security_status': 'security_status',
            'star_id': 'star_id',
            'stargates': 'stargates',
            'stations': 'stations',
            'system_id': 'system_id'
        }

        self._constellation_id = constellation_id
        self._name = name
        self._planets = planets
        self._position = position
        self._security_class = security_class
        self._security_status = security_status
        self._star_id = star_id
        self._stargates = stargates
        self._stations = stations
        self._system_id = system_id

    @classmethod
    def from_dict(cls, dikt: dict) -> 'GetUniverseSystemsSystemIdOk':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The get_universe_systems_system_id_ok of this GetUniverseSystemsSystemIdOk.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def constellation_id(self):
        """Gets the constellation_id of this GetUniverseSystemsSystemIdOk.

        The constellation this solar system is in

        :return: The constellation_id of this GetUniverseSystemsSystemIdOk.
        :rtype: int
        """
        return self._constellation_id

    @constellation_id.setter
    def constellation_id(self, constellation_id):
        """Sets the constellation_id of this GetUniverseSystemsSystemIdOk.

        The constellation this solar system is in

        :param constellation_id: The constellation_id of this GetUniverseSystemsSystemIdOk.
        :type constellation_id: int
        """
        if constellation_id is None:
            raise ValueError("Invalid value for `constellation_id`, must not be `None`")

        self._constellation_id = constellation_id

    @property
    def name(self):
        """Gets the name of this GetUniverseSystemsSystemIdOk.

        name string

        :return: The name of this GetUniverseSystemsSystemIdOk.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this GetUniverseSystemsSystemIdOk.

        name string

        :param name: The name of this GetUniverseSystemsSystemIdOk.
        :type name: str
        """
        if name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")

        self._name = name

    @property
    def planets(self):
        """Gets the planets of this GetUniverseSystemsSystemIdOk.

        planets array

        :return: The planets of this GetUniverseSystemsSystemIdOk.
        :rtype: List[GetUniverseSystemsSystemIdPlanet]
        """
        return self._planets

    @planets.setter
    def planets(self, planets):
        """Sets the planets of this GetUniverseSystemsSystemIdOk.

        planets array

        :param planets: The planets of this GetUniverseSystemsSystemIdOk.
        :type planets: List[GetUniverseSystemsSystemIdPlanet]
        """
        if planets is not None and len(planets) > 1000:
            raise ValueError("Invalid value for `planets`, number of items must be less than or equal to `1000`")

        self._planets = planets

    @property
    def position(self):
        """Gets the position of this GetUniverseSystemsSystemIdOk.


        :return: The position of this GetUniverseSystemsSystemIdOk.
        :rtype: GetUniverseSystemsSystemIdPosition
        """
        return self._position

    @position.setter
    def position(self, position):
        """Sets the position of this GetUniverseSystemsSystemIdOk.


        :param position: The position of this GetUniverseSystemsSystemIdOk.
        :type position: GetUniverseSystemsSystemIdPosition
        """
        if position is None:
            raise ValueError("Invalid value for `position`, must not be `None`")

        self._position = position

    @property
    def security_class(self):
        """Gets the security_class of this GetUniverseSystemsSystemIdOk.

        security_class string

        :return: The security_class of this GetUniverseSystemsSystemIdOk.
        :rtype: str
        """
        return self._security_class

    @security_class.setter
    def security_class(self, security_class):
        """Sets the security_class of this GetUniverseSystemsSystemIdOk.

        security_class string

        :param security_class: The security_class of this GetUniverseSystemsSystemIdOk.
        :type security_class: str
        """

        self._security_class = security_class

    @property
    def security_status(self):
        """Gets the security_status of this GetUniverseSystemsSystemIdOk.

        security_status number

        :return: The security_status of this GetUniverseSystemsSystemIdOk.
        :rtype: float
        """
        return self._security_status

    @security_status.setter
    def security_status(self, security_status):
        """Sets the security_status of this GetUniverseSystemsSystemIdOk.

        security_status number

        :param security_status: The security_status of this GetUniverseSystemsSystemIdOk.
        :type security_status: float
        """
        if security_status is None:
            raise ValueError("Invalid value for `security_status`, must not be `None`")

        self._security_status = security_status

    @property
    def star_id(self):
        """Gets the star_id of this GetUniverseSystemsSystemIdOk.

        star_id integer

        :return: The star_id of this GetUniverseSystemsSystemIdOk.
        :rtype: int
        """
        return self._star_id

    @star_id.setter
    def star_id(self, star_id):
        """Sets the star_id of this GetUniverseSystemsSystemIdOk.

        star_id integer

        :param star_id: The star_id of this GetUniverseSystemsSystemIdOk.
        :type star_id: int
        """

        self._star_id = star_id

    @property
    def stargates(self):
        """Gets the stargates of this GetUniverseSystemsSystemIdOk.

        stargates array

        :return: The stargates of this GetUniverseSystemsSystemIdOk.
        :rtype: List[int]
        """
        return self._stargates

    @stargates.setter
    def stargates(self, stargates):
        """Sets the stargates of this GetUniverseSystemsSystemIdOk.

        stargates array

        :param stargates: The stargates of this GetUniverseSystemsSystemIdOk.
        :type stargates: List[int]
        """
        if stargates is not None and len(stargates) > 25:
            raise ValueError("Invalid value for `stargates`, number of items must be less than or equal to `25`")

        self._stargates = stargates

    @property
    def stations(self):
        """Gets the stations of this GetUniverseSystemsSystemIdOk.

        stations array

        :return: The stations of this GetUniverseSystemsSystemIdOk.
        :rtype: List[int]
        """
        return self._stations

    @stations.setter
    def stations(self, stations):
        """Sets the stations of this GetUniverseSystemsSystemIdOk.

        stations array

        :param stations: The stations of this GetUniverseSystemsSystemIdOk.
        :type stations: List[int]
        """
        if stations is not None and len(stations) > 25:
            raise ValueError("Invalid value for `stations`, number of items must be less than or equal to `25`")

        self._stations = stations

    @property
    def system_id(self):
        """Gets the system_id of this GetUniverseSystemsSystemIdOk.

        system_id integer

        :return: The system_id of this GetUniverseSystemsSystemIdOk.
        :rtype: int
        """
        return self._system_id

    @system_id.setter
    def system_id(self, system_id):
        """Sets the system_id of this GetUniverseSystemsSystemIdOk.

        system_id integer

        :param system_id: The system_id of this GetUniverseSystemsSystemIdOk.
        :type system_id: int
        """
        if system_id is None:
            raise ValueError("Invalid value for `system_id`, must not be `None`")

        self._system_id = system_id
