# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.get_wars_war_id_aggressor import GetWarsWarIdAggressor
from openapi_server.models.get_wars_war_id_ally import GetWarsWarIdAlly
from openapi_server.models.get_wars_war_id_defender import GetWarsWarIdDefender
from openapi_server import util


class GetWarsWarIdOk(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, aggressor: GetWarsWarIdAggressor=None, allies: List[GetWarsWarIdAlly]=None, declared: datetime=None, defender: GetWarsWarIdDefender=None, finished: datetime=None, id: int=None, mutual: bool=None, open_for_allies: bool=None, retracted: datetime=None, started: datetime=None):
        """GetWarsWarIdOk - a model defined in OpenAPI

        :param aggressor: The aggressor of this GetWarsWarIdOk.
        :param allies: The allies of this GetWarsWarIdOk.
        :param declared: The declared of this GetWarsWarIdOk.
        :param defender: The defender of this GetWarsWarIdOk.
        :param finished: The finished of this GetWarsWarIdOk.
        :param id: The id of this GetWarsWarIdOk.
        :param mutual: The mutual of this GetWarsWarIdOk.
        :param open_for_allies: The open_for_allies of this GetWarsWarIdOk.
        :param retracted: The retracted of this GetWarsWarIdOk.
        :param started: The started of this GetWarsWarIdOk.
        """
        self.openapi_types = {
            'aggressor': GetWarsWarIdAggressor,
            'allies': List[GetWarsWarIdAlly],
            'declared': datetime,
            'defender': GetWarsWarIdDefender,
            'finished': datetime,
            'id': int,
            'mutual': bool,
            'open_for_allies': bool,
            'retracted': datetime,
            'started': datetime
        }

        self.attribute_map = {
            'aggressor': 'aggressor',
            'allies': 'allies',
            'declared': 'declared',
            'defender': 'defender',
            'finished': 'finished',
            'id': 'id',
            'mutual': 'mutual',
            'open_for_allies': 'open_for_allies',
            'retracted': 'retracted',
            'started': 'started'
        }

        self._aggressor = aggressor
        self._allies = allies
        self._declared = declared
        self._defender = defender
        self._finished = finished
        self._id = id
        self._mutual = mutual
        self._open_for_allies = open_for_allies
        self._retracted = retracted
        self._started = started

    @classmethod
    def from_dict(cls, dikt: dict) -> 'GetWarsWarIdOk':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The get_wars_war_id_ok of this GetWarsWarIdOk.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def aggressor(self):
        """Gets the aggressor of this GetWarsWarIdOk.


        :return: The aggressor of this GetWarsWarIdOk.
        :rtype: GetWarsWarIdAggressor
        """
        return self._aggressor

    @aggressor.setter
    def aggressor(self, aggressor):
        """Sets the aggressor of this GetWarsWarIdOk.


        :param aggressor: The aggressor of this GetWarsWarIdOk.
        :type aggressor: GetWarsWarIdAggressor
        """
        if aggressor is None:
            raise ValueError("Invalid value for `aggressor`, must not be `None`")

        self._aggressor = aggressor

    @property
    def allies(self):
        """Gets the allies of this GetWarsWarIdOk.

        allied corporations or alliances, each object contains either corporation_id or alliance_id

        :return: The allies of this GetWarsWarIdOk.
        :rtype: List[GetWarsWarIdAlly]
        """
        return self._allies

    @allies.setter
    def allies(self, allies):
        """Sets the allies of this GetWarsWarIdOk.

        allied corporations or alliances, each object contains either corporation_id or alliance_id

        :param allies: The allies of this GetWarsWarIdOk.
        :type allies: List[GetWarsWarIdAlly]
        """
        if allies is not None and len(allies) > 10000:
            raise ValueError("Invalid value for `allies`, number of items must be less than or equal to `10000`")

        self._allies = allies

    @property
    def declared(self):
        """Gets the declared of this GetWarsWarIdOk.

        Time that the war was declared

        :return: The declared of this GetWarsWarIdOk.
        :rtype: datetime
        """
        return self._declared

    @declared.setter
    def declared(self, declared):
        """Sets the declared of this GetWarsWarIdOk.

        Time that the war was declared

        :param declared: The declared of this GetWarsWarIdOk.
        :type declared: datetime
        """
        if declared is None:
            raise ValueError("Invalid value for `declared`, must not be `None`")

        self._declared = declared

    @property
    def defender(self):
        """Gets the defender of this GetWarsWarIdOk.


        :return: The defender of this GetWarsWarIdOk.
        :rtype: GetWarsWarIdDefender
        """
        return self._defender

    @defender.setter
    def defender(self, defender):
        """Sets the defender of this GetWarsWarIdOk.


        :param defender: The defender of this GetWarsWarIdOk.
        :type defender: GetWarsWarIdDefender
        """
        if defender is None:
            raise ValueError("Invalid value for `defender`, must not be `None`")

        self._defender = defender

    @property
    def finished(self):
        """Gets the finished of this GetWarsWarIdOk.

        Time the war ended and shooting was no longer allowed

        :return: The finished of this GetWarsWarIdOk.
        :rtype: datetime
        """
        return self._finished

    @finished.setter
    def finished(self, finished):
        """Sets the finished of this GetWarsWarIdOk.

        Time the war ended and shooting was no longer allowed

        :param finished: The finished of this GetWarsWarIdOk.
        :type finished: datetime
        """

        self._finished = finished

    @property
    def id(self):
        """Gets the id of this GetWarsWarIdOk.

        ID of the specified war

        :return: The id of this GetWarsWarIdOk.
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this GetWarsWarIdOk.

        ID of the specified war

        :param id: The id of this GetWarsWarIdOk.
        :type id: int
        """
        if id is None:
            raise ValueError("Invalid value for `id`, must not be `None`")

        self._id = id

    @property
    def mutual(self):
        """Gets the mutual of this GetWarsWarIdOk.

        Was the war declared mutual by both parties

        :return: The mutual of this GetWarsWarIdOk.
        :rtype: bool
        """
        return self._mutual

    @mutual.setter
    def mutual(self, mutual):
        """Sets the mutual of this GetWarsWarIdOk.

        Was the war declared mutual by both parties

        :param mutual: The mutual of this GetWarsWarIdOk.
        :type mutual: bool
        """
        if mutual is None:
            raise ValueError("Invalid value for `mutual`, must not be `None`")

        self._mutual = mutual

    @property
    def open_for_allies(self):
        """Gets the open_for_allies of this GetWarsWarIdOk.

        Is the war currently open for allies or not

        :return: The open_for_allies of this GetWarsWarIdOk.
        :rtype: bool
        """
        return self._open_for_allies

    @open_for_allies.setter
    def open_for_allies(self, open_for_allies):
        """Sets the open_for_allies of this GetWarsWarIdOk.

        Is the war currently open for allies or not

        :param open_for_allies: The open_for_allies of this GetWarsWarIdOk.
        :type open_for_allies: bool
        """
        if open_for_allies is None:
            raise ValueError("Invalid value for `open_for_allies`, must not be `None`")

        self._open_for_allies = open_for_allies

    @property
    def retracted(self):
        """Gets the retracted of this GetWarsWarIdOk.

        Time the war was retracted but both sides could still shoot each other

        :return: The retracted of this GetWarsWarIdOk.
        :rtype: datetime
        """
        return self._retracted

    @retracted.setter
    def retracted(self, retracted):
        """Sets the retracted of this GetWarsWarIdOk.

        Time the war was retracted but both sides could still shoot each other

        :param retracted: The retracted of this GetWarsWarIdOk.
        :type retracted: datetime
        """

        self._retracted = retracted

    @property
    def started(self):
        """Gets the started of this GetWarsWarIdOk.

        Time when the war started and both sides could shoot each other

        :return: The started of this GetWarsWarIdOk.
        :rtype: datetime
        """
        return self._started

    @started.setter
    def started(self, started):
        """Sets the started of this GetWarsWarIdOk.

        Time when the war started and both sides could shoot each other

        :param started: The started of this GetWarsWarIdOk.
        :type started: datetime
        """

        self._started = started
