# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class GetCharactersCharacterIdAssets200Ok(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, is_blueprint_copy: bool=None, is_singleton: bool=None, item_id: int=None, location_flag: str=None, location_id: int=None, location_type: str=None, quantity: int=None, type_id: int=None):
        """GetCharactersCharacterIdAssets200Ok - a model defined in OpenAPI

        :param is_blueprint_copy: The is_blueprint_copy of this GetCharactersCharacterIdAssets200Ok.
        :param is_singleton: The is_singleton of this GetCharactersCharacterIdAssets200Ok.
        :param item_id: The item_id of this GetCharactersCharacterIdAssets200Ok.
        :param location_flag: The location_flag of this GetCharactersCharacterIdAssets200Ok.
        :param location_id: The location_id of this GetCharactersCharacterIdAssets200Ok.
        :param location_type: The location_type of this GetCharactersCharacterIdAssets200Ok.
        :param quantity: The quantity of this GetCharactersCharacterIdAssets200Ok.
        :param type_id: The type_id of this GetCharactersCharacterIdAssets200Ok.
        """
        self.openapi_types = {
            'is_blueprint_copy': bool,
            'is_singleton': bool,
            'item_id': int,
            'location_flag': str,
            'location_id': int,
            'location_type': str,
            'quantity': int,
            'type_id': int
        }

        self.attribute_map = {
            'is_blueprint_copy': 'is_blueprint_copy',
            'is_singleton': 'is_singleton',
            'item_id': 'item_id',
            'location_flag': 'location_flag',
            'location_id': 'location_id',
            'location_type': 'location_type',
            'quantity': 'quantity',
            'type_id': 'type_id'
        }

        self._is_blueprint_copy = is_blueprint_copy
        self._is_singleton = is_singleton
        self._item_id = item_id
        self._location_flag = location_flag
        self._location_id = location_id
        self._location_type = location_type
        self._quantity = quantity
        self._type_id = type_id

    @classmethod
    def from_dict(cls, dikt: dict) -> 'GetCharactersCharacterIdAssets200Ok':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The get_characters_character_id_assets_200_ok of this GetCharactersCharacterIdAssets200Ok.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def is_blueprint_copy(self):
        """Gets the is_blueprint_copy of this GetCharactersCharacterIdAssets200Ok.

        is_blueprint_copy boolean

        :return: The is_blueprint_copy of this GetCharactersCharacterIdAssets200Ok.
        :rtype: bool
        """
        return self._is_blueprint_copy

    @is_blueprint_copy.setter
    def is_blueprint_copy(self, is_blueprint_copy):
        """Sets the is_blueprint_copy of this GetCharactersCharacterIdAssets200Ok.

        is_blueprint_copy boolean

        :param is_blueprint_copy: The is_blueprint_copy of this GetCharactersCharacterIdAssets200Ok.
        :type is_blueprint_copy: bool
        """

        self._is_blueprint_copy = is_blueprint_copy

    @property
    def is_singleton(self):
        """Gets the is_singleton of this GetCharactersCharacterIdAssets200Ok.

        is_singleton boolean

        :return: The is_singleton of this GetCharactersCharacterIdAssets200Ok.
        :rtype: bool
        """
        return self._is_singleton

    @is_singleton.setter
    def is_singleton(self, is_singleton):
        """Sets the is_singleton of this GetCharactersCharacterIdAssets200Ok.

        is_singleton boolean

        :param is_singleton: The is_singleton of this GetCharactersCharacterIdAssets200Ok.
        :type is_singleton: bool
        """
        if is_singleton is None:
            raise ValueError("Invalid value for `is_singleton`, must not be `None`")

        self._is_singleton = is_singleton

    @property
    def item_id(self):
        """Gets the item_id of this GetCharactersCharacterIdAssets200Ok.

        item_id integer

        :return: The item_id of this GetCharactersCharacterIdAssets200Ok.
        :rtype: int
        """
        return self._item_id

    @item_id.setter
    def item_id(self, item_id):
        """Sets the item_id of this GetCharactersCharacterIdAssets200Ok.

        item_id integer

        :param item_id: The item_id of this GetCharactersCharacterIdAssets200Ok.
        :type item_id: int
        """
        if item_id is None:
            raise ValueError("Invalid value for `item_id`, must not be `None`")

        self._item_id = item_id

    @property
    def location_flag(self):
        """Gets the location_flag of this GetCharactersCharacterIdAssets200Ok.

        location_flag string

        :return: The location_flag of this GetCharactersCharacterIdAssets200Ok.
        :rtype: str
        """
        return self._location_flag

    @location_flag.setter
    def location_flag(self, location_flag):
        """Sets the location_flag of this GetCharactersCharacterIdAssets200Ok.

        location_flag string

        :param location_flag: The location_flag of this GetCharactersCharacterIdAssets200Ok.
        :type location_flag: str
        """
        allowed_values = ["AssetSafety", "AutoFit", "BoosterBay", "Cargo", "CorpseBay", "Deliveries", "DroneBay", "FighterBay", "FighterTube0", "FighterTube1", "FighterTube2", "FighterTube3", "FighterTube4", "FleetHangar", "Hangar", "HangarAll", "HiSlot0", "HiSlot1", "HiSlot2", "HiSlot3", "HiSlot4", "HiSlot5", "HiSlot6", "HiSlot7", "HiddenModifiers", "Implant", "LoSlot0", "LoSlot1", "LoSlot2", "LoSlot3", "LoSlot4", "LoSlot5", "LoSlot6", "LoSlot7", "Locked", "MedSlot0", "MedSlot1", "MedSlot2", "MedSlot3", "MedSlot4", "MedSlot5", "MedSlot6", "MedSlot7", "QuafeBay", "RigSlot0", "RigSlot1", "RigSlot2", "RigSlot3", "RigSlot4", "RigSlot5", "RigSlot6", "RigSlot7", "ShipHangar", "Skill", "SpecializedAmmoHold", "SpecializedCommandCenterHold", "SpecializedFuelBay", "SpecializedGasHold", "SpecializedIndustrialShipHold", "SpecializedLargeShipHold", "SpecializedMaterialBay", "SpecializedMediumShipHold", "SpecializedMineralHold", "SpecializedOreHold", "SpecializedPlanetaryCommoditiesHold", "SpecializedSalvageHold", "SpecializedShipHold", "SpecializedSmallShipHold", "SubSystemBay", "SubSystemSlot0", "SubSystemSlot1", "SubSystemSlot2", "SubSystemSlot3", "SubSystemSlot4", "SubSystemSlot5", "SubSystemSlot6", "SubSystemSlot7", "Unlocked", "Wardrobe"]  # noqa: E501
        if location_flag not in allowed_values:
            raise ValueError(
                "Invalid value for `location_flag` ({0}), must be one of {1}"
                .format(location_flag, allowed_values)
            )

        self._location_flag = location_flag

    @property
    def location_id(self):
        """Gets the location_id of this GetCharactersCharacterIdAssets200Ok.

        location_id integer

        :return: The location_id of this GetCharactersCharacterIdAssets200Ok.
        :rtype: int
        """
        return self._location_id

    @location_id.setter
    def location_id(self, location_id):
        """Sets the location_id of this GetCharactersCharacterIdAssets200Ok.

        location_id integer

        :param location_id: The location_id of this GetCharactersCharacterIdAssets200Ok.
        :type location_id: int
        """
        if location_id is None:
            raise ValueError("Invalid value for `location_id`, must not be `None`")

        self._location_id = location_id

    @property
    def location_type(self):
        """Gets the location_type of this GetCharactersCharacterIdAssets200Ok.

        location_type string

        :return: The location_type of this GetCharactersCharacterIdAssets200Ok.
        :rtype: str
        """
        return self._location_type

    @location_type.setter
    def location_type(self, location_type):
        """Sets the location_type of this GetCharactersCharacterIdAssets200Ok.

        location_type string

        :param location_type: The location_type of this GetCharactersCharacterIdAssets200Ok.
        :type location_type: str
        """
        allowed_values = ["station", "solar_system", "other"]  # noqa: E501
        if location_type not in allowed_values:
            raise ValueError(
                "Invalid value for `location_type` ({0}), must be one of {1}"
                .format(location_type, allowed_values)
            )

        self._location_type = location_type

    @property
    def quantity(self):
        """Gets the quantity of this GetCharactersCharacterIdAssets200Ok.

        quantity integer

        :return: The quantity of this GetCharactersCharacterIdAssets200Ok.
        :rtype: int
        """
        return self._quantity

    @quantity.setter
    def quantity(self, quantity):
        """Sets the quantity of this GetCharactersCharacterIdAssets200Ok.

        quantity integer

        :param quantity: The quantity of this GetCharactersCharacterIdAssets200Ok.
        :type quantity: int
        """
        if quantity is None:
            raise ValueError("Invalid value for `quantity`, must not be `None`")

        self._quantity = quantity

    @property
    def type_id(self):
        """Gets the type_id of this GetCharactersCharacterIdAssets200Ok.

        type_id integer

        :return: The type_id of this GetCharactersCharacterIdAssets200Ok.
        :rtype: int
        """
        return self._type_id

    @type_id.setter
    def type_id(self, type_id):
        """Sets the type_id of this GetCharactersCharacterIdAssets200Ok.

        type_id integer

        :param type_id: The type_id of this GetCharactersCharacterIdAssets200Ok.
        :type type_id: int
        """
        if type_id is None:
            raise ValueError("Invalid value for `type_id`, must not be `None`")

        self._type_id = type_id
