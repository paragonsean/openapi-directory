# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class GetMarketsRegionIdOrders200Ok(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, duration: int=None, is_buy_order: bool=None, issued: datetime=None, location_id: int=None, min_volume: int=None, order_id: int=None, price: float=None, range: str=None, system_id: int=None, type_id: int=None, volume_remain: int=None, volume_total: int=None):
        """GetMarketsRegionIdOrders200Ok - a model defined in OpenAPI

        :param duration: The duration of this GetMarketsRegionIdOrders200Ok.
        :param is_buy_order: The is_buy_order of this GetMarketsRegionIdOrders200Ok.
        :param issued: The issued of this GetMarketsRegionIdOrders200Ok.
        :param location_id: The location_id of this GetMarketsRegionIdOrders200Ok.
        :param min_volume: The min_volume of this GetMarketsRegionIdOrders200Ok.
        :param order_id: The order_id of this GetMarketsRegionIdOrders200Ok.
        :param price: The price of this GetMarketsRegionIdOrders200Ok.
        :param range: The range of this GetMarketsRegionIdOrders200Ok.
        :param system_id: The system_id of this GetMarketsRegionIdOrders200Ok.
        :param type_id: The type_id of this GetMarketsRegionIdOrders200Ok.
        :param volume_remain: The volume_remain of this GetMarketsRegionIdOrders200Ok.
        :param volume_total: The volume_total of this GetMarketsRegionIdOrders200Ok.
        """
        self.openapi_types = {
            'duration': int,
            'is_buy_order': bool,
            'issued': datetime,
            'location_id': int,
            'min_volume': int,
            'order_id': int,
            'price': float,
            'range': str,
            'system_id': int,
            'type_id': int,
            'volume_remain': int,
            'volume_total': int
        }

        self.attribute_map = {
            'duration': 'duration',
            'is_buy_order': 'is_buy_order',
            'issued': 'issued',
            'location_id': 'location_id',
            'min_volume': 'min_volume',
            'order_id': 'order_id',
            'price': 'price',
            'range': 'range',
            'system_id': 'system_id',
            'type_id': 'type_id',
            'volume_remain': 'volume_remain',
            'volume_total': 'volume_total'
        }

        self._duration = duration
        self._is_buy_order = is_buy_order
        self._issued = issued
        self._location_id = location_id
        self._min_volume = min_volume
        self._order_id = order_id
        self._price = price
        self._range = range
        self._system_id = system_id
        self._type_id = type_id
        self._volume_remain = volume_remain
        self._volume_total = volume_total

    @classmethod
    def from_dict(cls, dikt: dict) -> 'GetMarketsRegionIdOrders200Ok':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The get_markets_region_id_orders_200_ok of this GetMarketsRegionIdOrders200Ok.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def duration(self):
        """Gets the duration of this GetMarketsRegionIdOrders200Ok.

        duration integer

        :return: The duration of this GetMarketsRegionIdOrders200Ok.
        :rtype: int
        """
        return self._duration

    @duration.setter
    def duration(self, duration):
        """Sets the duration of this GetMarketsRegionIdOrders200Ok.

        duration integer

        :param duration: The duration of this GetMarketsRegionIdOrders200Ok.
        :type duration: int
        """
        if duration is None:
            raise ValueError("Invalid value for `duration`, must not be `None`")

        self._duration = duration

    @property
    def is_buy_order(self):
        """Gets the is_buy_order of this GetMarketsRegionIdOrders200Ok.

        is_buy_order boolean

        :return: The is_buy_order of this GetMarketsRegionIdOrders200Ok.
        :rtype: bool
        """
        return self._is_buy_order

    @is_buy_order.setter
    def is_buy_order(self, is_buy_order):
        """Sets the is_buy_order of this GetMarketsRegionIdOrders200Ok.

        is_buy_order boolean

        :param is_buy_order: The is_buy_order of this GetMarketsRegionIdOrders200Ok.
        :type is_buy_order: bool
        """
        if is_buy_order is None:
            raise ValueError("Invalid value for `is_buy_order`, must not be `None`")

        self._is_buy_order = is_buy_order

    @property
    def issued(self):
        """Gets the issued of this GetMarketsRegionIdOrders200Ok.

        issued string

        :return: The issued of this GetMarketsRegionIdOrders200Ok.
        :rtype: datetime
        """
        return self._issued

    @issued.setter
    def issued(self, issued):
        """Sets the issued of this GetMarketsRegionIdOrders200Ok.

        issued string

        :param issued: The issued of this GetMarketsRegionIdOrders200Ok.
        :type issued: datetime
        """
        if issued is None:
            raise ValueError("Invalid value for `issued`, must not be `None`")

        self._issued = issued

    @property
    def location_id(self):
        """Gets the location_id of this GetMarketsRegionIdOrders200Ok.

        location_id integer

        :return: The location_id of this GetMarketsRegionIdOrders200Ok.
        :rtype: int
        """
        return self._location_id

    @location_id.setter
    def location_id(self, location_id):
        """Sets the location_id of this GetMarketsRegionIdOrders200Ok.

        location_id integer

        :param location_id: The location_id of this GetMarketsRegionIdOrders200Ok.
        :type location_id: int
        """
        if location_id is None:
            raise ValueError("Invalid value for `location_id`, must not be `None`")

        self._location_id = location_id

    @property
    def min_volume(self):
        """Gets the min_volume of this GetMarketsRegionIdOrders200Ok.

        min_volume integer

        :return: The min_volume of this GetMarketsRegionIdOrders200Ok.
        :rtype: int
        """
        return self._min_volume

    @min_volume.setter
    def min_volume(self, min_volume):
        """Sets the min_volume of this GetMarketsRegionIdOrders200Ok.

        min_volume integer

        :param min_volume: The min_volume of this GetMarketsRegionIdOrders200Ok.
        :type min_volume: int
        """
        if min_volume is None:
            raise ValueError("Invalid value for `min_volume`, must not be `None`")

        self._min_volume = min_volume

    @property
    def order_id(self):
        """Gets the order_id of this GetMarketsRegionIdOrders200Ok.

        order_id integer

        :return: The order_id of this GetMarketsRegionIdOrders200Ok.
        :rtype: int
        """
        return self._order_id

    @order_id.setter
    def order_id(self, order_id):
        """Sets the order_id of this GetMarketsRegionIdOrders200Ok.

        order_id integer

        :param order_id: The order_id of this GetMarketsRegionIdOrders200Ok.
        :type order_id: int
        """
        if order_id is None:
            raise ValueError("Invalid value for `order_id`, must not be `None`")

        self._order_id = order_id

    @property
    def price(self):
        """Gets the price of this GetMarketsRegionIdOrders200Ok.

        price number

        :return: The price of this GetMarketsRegionIdOrders200Ok.
        :rtype: float
        """
        return self._price

    @price.setter
    def price(self, price):
        """Sets the price of this GetMarketsRegionIdOrders200Ok.

        price number

        :param price: The price of this GetMarketsRegionIdOrders200Ok.
        :type price: float
        """
        if price is None:
            raise ValueError("Invalid value for `price`, must not be `None`")

        self._price = price

    @property
    def range(self):
        """Gets the range of this GetMarketsRegionIdOrders200Ok.

        range string

        :return: The range of this GetMarketsRegionIdOrders200Ok.
        :rtype: str
        """
        return self._range

    @range.setter
    def range(self, range):
        """Sets the range of this GetMarketsRegionIdOrders200Ok.

        range string

        :param range: The range of this GetMarketsRegionIdOrders200Ok.
        :type range: str
        """
        allowed_values = ["station", "region", "solarsystem", "1", "2", "3", "4", "5", "10", "20", "30", "40"]  # noqa: E501
        if range not in allowed_values:
            raise ValueError(
                "Invalid value for `range` ({0}), must be one of {1}"
                .format(range, allowed_values)
            )

        self._range = range

    @property
    def system_id(self):
        """Gets the system_id of this GetMarketsRegionIdOrders200Ok.

        The solar system this order was placed

        :return: The system_id of this GetMarketsRegionIdOrders200Ok.
        :rtype: int
        """
        return self._system_id

    @system_id.setter
    def system_id(self, system_id):
        """Sets the system_id of this GetMarketsRegionIdOrders200Ok.

        The solar system this order was placed

        :param system_id: The system_id of this GetMarketsRegionIdOrders200Ok.
        :type system_id: int
        """
        if system_id is None:
            raise ValueError("Invalid value for `system_id`, must not be `None`")

        self._system_id = system_id

    @property
    def type_id(self):
        """Gets the type_id of this GetMarketsRegionIdOrders200Ok.

        type_id integer

        :return: The type_id of this GetMarketsRegionIdOrders200Ok.
        :rtype: int
        """
        return self._type_id

    @type_id.setter
    def type_id(self, type_id):
        """Sets the type_id of this GetMarketsRegionIdOrders200Ok.

        type_id integer

        :param type_id: The type_id of this GetMarketsRegionIdOrders200Ok.
        :type type_id: int
        """
        if type_id is None:
            raise ValueError("Invalid value for `type_id`, must not be `None`")

        self._type_id = type_id

    @property
    def volume_remain(self):
        """Gets the volume_remain of this GetMarketsRegionIdOrders200Ok.

        volume_remain integer

        :return: The volume_remain of this GetMarketsRegionIdOrders200Ok.
        :rtype: int
        """
        return self._volume_remain

    @volume_remain.setter
    def volume_remain(self, volume_remain):
        """Sets the volume_remain of this GetMarketsRegionIdOrders200Ok.

        volume_remain integer

        :param volume_remain: The volume_remain of this GetMarketsRegionIdOrders200Ok.
        :type volume_remain: int
        """
        if volume_remain is None:
            raise ValueError("Invalid value for `volume_remain`, must not be `None`")

        self._volume_remain = volume_remain

    @property
    def volume_total(self):
        """Gets the volume_total of this GetMarketsRegionIdOrders200Ok.

        volume_total integer

        :return: The volume_total of this GetMarketsRegionIdOrders200Ok.
        :rtype: int
        """
        return self._volume_total

    @volume_total.setter
    def volume_total(self, volume_total):
        """Sets the volume_total of this GetMarketsRegionIdOrders200Ok.

        volume_total integer

        :param volume_total: The volume_total of this GetMarketsRegionIdOrders200Ok.
        :type volume_total: int
        """
        if volume_total is None:
            raise ValueError("Invalid value for `volume_total`, must not be `None`")

        self._volume_total = volume_total
