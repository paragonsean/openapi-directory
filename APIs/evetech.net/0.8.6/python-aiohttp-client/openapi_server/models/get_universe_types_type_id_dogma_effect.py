# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class GetUniverseTypesTypeIdDogmaEffect(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, effect_id: int=None, is_default: bool=None):
        """GetUniverseTypesTypeIdDogmaEffect - a model defined in OpenAPI

        :param effect_id: The effect_id of this GetUniverseTypesTypeIdDogmaEffect.
        :param is_default: The is_default of this GetUniverseTypesTypeIdDogmaEffect.
        """
        self.openapi_types = {
            'effect_id': int,
            'is_default': bool
        }

        self.attribute_map = {
            'effect_id': 'effect_id',
            'is_default': 'is_default'
        }

        self._effect_id = effect_id
        self._is_default = is_default

    @classmethod
    def from_dict(cls, dikt: dict) -> 'GetUniverseTypesTypeIdDogmaEffect':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The get_universe_types_type_id_dogma_effect of this GetUniverseTypesTypeIdDogmaEffect.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def effect_id(self):
        """Gets the effect_id of this GetUniverseTypesTypeIdDogmaEffect.

        effect_id integer

        :return: The effect_id of this GetUniverseTypesTypeIdDogmaEffect.
        :rtype: int
        """
        return self._effect_id

    @effect_id.setter
    def effect_id(self, effect_id):
        """Sets the effect_id of this GetUniverseTypesTypeIdDogmaEffect.

        effect_id integer

        :param effect_id: The effect_id of this GetUniverseTypesTypeIdDogmaEffect.
        :type effect_id: int
        """
        if effect_id is None:
            raise ValueError("Invalid value for `effect_id`, must not be `None`")

        self._effect_id = effect_id

    @property
    def is_default(self):
        """Gets the is_default of this GetUniverseTypesTypeIdDogmaEffect.

        is_default boolean

        :return: The is_default of this GetUniverseTypesTypeIdDogmaEffect.
        :rtype: bool
        """
        return self._is_default

    @is_default.setter
    def is_default(self, is_default):
        """Sets the is_default of this GetUniverseTypesTypeIdDogmaEffect.

        is_default boolean

        :param is_default: The is_default of this GetUniverseTypesTypeIdDogmaEffect.
        :type is_default: bool
        """
        if is_default is None:
            raise ValueError("Invalid value for `is_default`, must not be `None`")

        self._is_default = is_default
