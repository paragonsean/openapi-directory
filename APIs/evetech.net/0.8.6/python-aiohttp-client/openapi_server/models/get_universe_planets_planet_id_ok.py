# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.get_universe_planets_planet_id_position import GetUniversePlanetsPlanetIdPosition
from openapi_server import util


class GetUniversePlanetsPlanetIdOk(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, name: str=None, planet_id: int=None, position: GetUniversePlanetsPlanetIdPosition=None, system_id: int=None, type_id: int=None):
        """GetUniversePlanetsPlanetIdOk - a model defined in OpenAPI

        :param name: The name of this GetUniversePlanetsPlanetIdOk.
        :param planet_id: The planet_id of this GetUniversePlanetsPlanetIdOk.
        :param position: The position of this GetUniversePlanetsPlanetIdOk.
        :param system_id: The system_id of this GetUniversePlanetsPlanetIdOk.
        :param type_id: The type_id of this GetUniversePlanetsPlanetIdOk.
        """
        self.openapi_types = {
            'name': str,
            'planet_id': int,
            'position': GetUniversePlanetsPlanetIdPosition,
            'system_id': int,
            'type_id': int
        }

        self.attribute_map = {
            'name': 'name',
            'planet_id': 'planet_id',
            'position': 'position',
            'system_id': 'system_id',
            'type_id': 'type_id'
        }

        self._name = name
        self._planet_id = planet_id
        self._position = position
        self._system_id = system_id
        self._type_id = type_id

    @classmethod
    def from_dict(cls, dikt: dict) -> 'GetUniversePlanetsPlanetIdOk':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The get_universe_planets_planet_id_ok of this GetUniversePlanetsPlanetIdOk.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def name(self):
        """Gets the name of this GetUniversePlanetsPlanetIdOk.

        name string

        :return: The name of this GetUniversePlanetsPlanetIdOk.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this GetUniversePlanetsPlanetIdOk.

        name string

        :param name: The name of this GetUniversePlanetsPlanetIdOk.
        :type name: str
        """
        if name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")

        self._name = name

    @property
    def planet_id(self):
        """Gets the planet_id of this GetUniversePlanetsPlanetIdOk.

        planet_id integer

        :return: The planet_id of this GetUniversePlanetsPlanetIdOk.
        :rtype: int
        """
        return self._planet_id

    @planet_id.setter
    def planet_id(self, planet_id):
        """Sets the planet_id of this GetUniversePlanetsPlanetIdOk.

        planet_id integer

        :param planet_id: The planet_id of this GetUniversePlanetsPlanetIdOk.
        :type planet_id: int
        """
        if planet_id is None:
            raise ValueError("Invalid value for `planet_id`, must not be `None`")

        self._planet_id = planet_id

    @property
    def position(self):
        """Gets the position of this GetUniversePlanetsPlanetIdOk.


        :return: The position of this GetUniversePlanetsPlanetIdOk.
        :rtype: GetUniversePlanetsPlanetIdPosition
        """
        return self._position

    @position.setter
    def position(self, position):
        """Sets the position of this GetUniversePlanetsPlanetIdOk.


        :param position: The position of this GetUniversePlanetsPlanetIdOk.
        :type position: GetUniversePlanetsPlanetIdPosition
        """
        if position is None:
            raise ValueError("Invalid value for `position`, must not be `None`")

        self._position = position

    @property
    def system_id(self):
        """Gets the system_id of this GetUniversePlanetsPlanetIdOk.

        The solar system this planet is in

        :return: The system_id of this GetUniversePlanetsPlanetIdOk.
        :rtype: int
        """
        return self._system_id

    @system_id.setter
    def system_id(self, system_id):
        """Sets the system_id of this GetUniversePlanetsPlanetIdOk.

        The solar system this planet is in

        :param system_id: The system_id of this GetUniversePlanetsPlanetIdOk.
        :type system_id: int
        """
        if system_id is None:
            raise ValueError("Invalid value for `system_id`, must not be `None`")

        self._system_id = system_id

    @property
    def type_id(self):
        """Gets the type_id of this GetUniversePlanetsPlanetIdOk.

        type_id integer

        :return: The type_id of this GetUniversePlanetsPlanetIdOk.
        :rtype: int
        """
        return self._type_id

    @type_id.setter
    def type_id(self, type_id):
        """Sets the type_id of this GetUniversePlanetsPlanetIdOk.

        type_id integer

        :param type_id: The type_id of this GetUniversePlanetsPlanetIdOk.
        :type type_id: int
        """
        if type_id is None:
            raise ValueError("Invalid value for `type_id`, must not be `None`")

        self._type_id = type_id
