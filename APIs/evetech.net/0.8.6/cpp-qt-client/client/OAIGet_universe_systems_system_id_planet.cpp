/**
 * EVE Swagger Interface
 * An OpenAPI for EVE Online
 *
 * The version of the OpenAPI document: 0.8.6
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIGet_universe_systems_system_id_planet.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIGet_universe_systems_system_id_planet::OAIGet_universe_systems_system_id_planet(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIGet_universe_systems_system_id_planet::OAIGet_universe_systems_system_id_planet() {
    this->initializeModel();
}

OAIGet_universe_systems_system_id_planet::~OAIGet_universe_systems_system_id_planet() {}

void OAIGet_universe_systems_system_id_planet::initializeModel() {

    m_asteroid_belts_isSet = false;
    m_asteroid_belts_isValid = false;

    m_moons_isSet = false;
    m_moons_isValid = false;

    m_planet_id_isSet = false;
    m_planet_id_isValid = false;
}

void OAIGet_universe_systems_system_id_planet::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIGet_universe_systems_system_id_planet::fromJsonObject(QJsonObject json) {

    m_asteroid_belts_isValid = ::OpenAPI::fromJsonValue(m_asteroid_belts, json[QString("asteroid_belts")]);
    m_asteroid_belts_isSet = !json[QString("asteroid_belts")].isNull() && m_asteroid_belts_isValid;

    m_moons_isValid = ::OpenAPI::fromJsonValue(m_moons, json[QString("moons")]);
    m_moons_isSet = !json[QString("moons")].isNull() && m_moons_isValid;

    m_planet_id_isValid = ::OpenAPI::fromJsonValue(m_planet_id, json[QString("planet_id")]);
    m_planet_id_isSet = !json[QString("planet_id")].isNull() && m_planet_id_isValid;
}

QString OAIGet_universe_systems_system_id_planet::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIGet_universe_systems_system_id_planet::asJsonObject() const {
    QJsonObject obj;
    if (m_asteroid_belts.size() > 0) {
        obj.insert(QString("asteroid_belts"), ::OpenAPI::toJsonValue(m_asteroid_belts));
    }
    if (m_moons.size() > 0) {
        obj.insert(QString("moons"), ::OpenAPI::toJsonValue(m_moons));
    }
    if (m_planet_id_isSet) {
        obj.insert(QString("planet_id"), ::OpenAPI::toJsonValue(m_planet_id));
    }
    return obj;
}

QList<qint32> OAIGet_universe_systems_system_id_planet::getAsteroidBelts() const {
    return m_asteroid_belts;
}
void OAIGet_universe_systems_system_id_planet::setAsteroidBelts(const QList<qint32> &asteroid_belts) {
    m_asteroid_belts = asteroid_belts;
    m_asteroid_belts_isSet = true;
}

bool OAIGet_universe_systems_system_id_planet::is_asteroid_belts_Set() const{
    return m_asteroid_belts_isSet;
}

bool OAIGet_universe_systems_system_id_planet::is_asteroid_belts_Valid() const{
    return m_asteroid_belts_isValid;
}

QList<qint32> OAIGet_universe_systems_system_id_planet::getMoons() const {
    return m_moons;
}
void OAIGet_universe_systems_system_id_planet::setMoons(const QList<qint32> &moons) {
    m_moons = moons;
    m_moons_isSet = true;
}

bool OAIGet_universe_systems_system_id_planet::is_moons_Set() const{
    return m_moons_isSet;
}

bool OAIGet_universe_systems_system_id_planet::is_moons_Valid() const{
    return m_moons_isValid;
}

qint32 OAIGet_universe_systems_system_id_planet::getPlanetId() const {
    return m_planet_id;
}
void OAIGet_universe_systems_system_id_planet::setPlanetId(const qint32 &planet_id) {
    m_planet_id = planet_id;
    m_planet_id_isSet = true;
}

bool OAIGet_universe_systems_system_id_planet::is_planet_id_Set() const{
    return m_planet_id_isSet;
}

bool OAIGet_universe_systems_system_id_planet::is_planet_id_Valid() const{
    return m_planet_id_isValid;
}

bool OAIGet_universe_systems_system_id_planet::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_asteroid_belts.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_moons.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_planet_id_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIGet_universe_systems_system_id_planet::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_planet_id_isValid && true;
}

} // namespace OpenAPI
