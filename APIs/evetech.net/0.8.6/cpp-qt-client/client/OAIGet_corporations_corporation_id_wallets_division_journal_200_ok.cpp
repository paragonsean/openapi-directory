/**
 * EVE Swagger Interface
 * An OpenAPI for EVE Online
 *
 * The version of the OpenAPI document: 0.8.6
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIGet_corporations_corporation_id_wallets_division_journal_200_ok.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIGet_corporations_corporation_id_wallets_division_journal_200_ok::OAIGet_corporations_corporation_id_wallets_division_journal_200_ok(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIGet_corporations_corporation_id_wallets_division_journal_200_ok::OAIGet_corporations_corporation_id_wallets_division_journal_200_ok() {
    this->initializeModel();
}

OAIGet_corporations_corporation_id_wallets_division_journal_200_ok::~OAIGet_corporations_corporation_id_wallets_division_journal_200_ok() {}

void OAIGet_corporations_corporation_id_wallets_division_journal_200_ok::initializeModel() {

    m_amount_isSet = false;
    m_amount_isValid = false;

    m_balance_isSet = false;
    m_balance_isValid = false;

    m_context_id_isSet = false;
    m_context_id_isValid = false;

    m_context_id_type_isSet = false;
    m_context_id_type_isValid = false;

    m_date_isSet = false;
    m_date_isValid = false;

    m_description_isSet = false;
    m_description_isValid = false;

    m_first_party_id_isSet = false;
    m_first_party_id_isValid = false;

    m_id_isSet = false;
    m_id_isValid = false;

    m_reason_isSet = false;
    m_reason_isValid = false;

    m_ref_type_isSet = false;
    m_ref_type_isValid = false;

    m_second_party_id_isSet = false;
    m_second_party_id_isValid = false;

    m_tax_isSet = false;
    m_tax_isValid = false;

    m_tax_receiver_id_isSet = false;
    m_tax_receiver_id_isValid = false;
}

void OAIGet_corporations_corporation_id_wallets_division_journal_200_ok::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIGet_corporations_corporation_id_wallets_division_journal_200_ok::fromJsonObject(QJsonObject json) {

    m_amount_isValid = ::OpenAPI::fromJsonValue(m_amount, json[QString("amount")]);
    m_amount_isSet = !json[QString("amount")].isNull() && m_amount_isValid;

    m_balance_isValid = ::OpenAPI::fromJsonValue(m_balance, json[QString("balance")]);
    m_balance_isSet = !json[QString("balance")].isNull() && m_balance_isValid;

    m_context_id_isValid = ::OpenAPI::fromJsonValue(m_context_id, json[QString("context_id")]);
    m_context_id_isSet = !json[QString("context_id")].isNull() && m_context_id_isValid;

    m_context_id_type_isValid = ::OpenAPI::fromJsonValue(m_context_id_type, json[QString("context_id_type")]);
    m_context_id_type_isSet = !json[QString("context_id_type")].isNull() && m_context_id_type_isValid;

    m_date_isValid = ::OpenAPI::fromJsonValue(m_date, json[QString("date")]);
    m_date_isSet = !json[QString("date")].isNull() && m_date_isValid;

    m_description_isValid = ::OpenAPI::fromJsonValue(m_description, json[QString("description")]);
    m_description_isSet = !json[QString("description")].isNull() && m_description_isValid;

    m_first_party_id_isValid = ::OpenAPI::fromJsonValue(m_first_party_id, json[QString("first_party_id")]);
    m_first_party_id_isSet = !json[QString("first_party_id")].isNull() && m_first_party_id_isValid;

    m_id_isValid = ::OpenAPI::fromJsonValue(m_id, json[QString("id")]);
    m_id_isSet = !json[QString("id")].isNull() && m_id_isValid;

    m_reason_isValid = ::OpenAPI::fromJsonValue(m_reason, json[QString("reason")]);
    m_reason_isSet = !json[QString("reason")].isNull() && m_reason_isValid;

    m_ref_type_isValid = ::OpenAPI::fromJsonValue(m_ref_type, json[QString("ref_type")]);
    m_ref_type_isSet = !json[QString("ref_type")].isNull() && m_ref_type_isValid;

    m_second_party_id_isValid = ::OpenAPI::fromJsonValue(m_second_party_id, json[QString("second_party_id")]);
    m_second_party_id_isSet = !json[QString("second_party_id")].isNull() && m_second_party_id_isValid;

    m_tax_isValid = ::OpenAPI::fromJsonValue(m_tax, json[QString("tax")]);
    m_tax_isSet = !json[QString("tax")].isNull() && m_tax_isValid;

    m_tax_receiver_id_isValid = ::OpenAPI::fromJsonValue(m_tax_receiver_id, json[QString("tax_receiver_id")]);
    m_tax_receiver_id_isSet = !json[QString("tax_receiver_id")].isNull() && m_tax_receiver_id_isValid;
}

QString OAIGet_corporations_corporation_id_wallets_division_journal_200_ok::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIGet_corporations_corporation_id_wallets_division_journal_200_ok::asJsonObject() const {
    QJsonObject obj;
    if (m_amount_isSet) {
        obj.insert(QString("amount"), ::OpenAPI::toJsonValue(m_amount));
    }
    if (m_balance_isSet) {
        obj.insert(QString("balance"), ::OpenAPI::toJsonValue(m_balance));
    }
    if (m_context_id_isSet) {
        obj.insert(QString("context_id"), ::OpenAPI::toJsonValue(m_context_id));
    }
    if (m_context_id_type_isSet) {
        obj.insert(QString("context_id_type"), ::OpenAPI::toJsonValue(m_context_id_type));
    }
    if (m_date_isSet) {
        obj.insert(QString("date"), ::OpenAPI::toJsonValue(m_date));
    }
    if (m_description_isSet) {
        obj.insert(QString("description"), ::OpenAPI::toJsonValue(m_description));
    }
    if (m_first_party_id_isSet) {
        obj.insert(QString("first_party_id"), ::OpenAPI::toJsonValue(m_first_party_id));
    }
    if (m_id_isSet) {
        obj.insert(QString("id"), ::OpenAPI::toJsonValue(m_id));
    }
    if (m_reason_isSet) {
        obj.insert(QString("reason"), ::OpenAPI::toJsonValue(m_reason));
    }
    if (m_ref_type_isSet) {
        obj.insert(QString("ref_type"), ::OpenAPI::toJsonValue(m_ref_type));
    }
    if (m_second_party_id_isSet) {
        obj.insert(QString("second_party_id"), ::OpenAPI::toJsonValue(m_second_party_id));
    }
    if (m_tax_isSet) {
        obj.insert(QString("tax"), ::OpenAPI::toJsonValue(m_tax));
    }
    if (m_tax_receiver_id_isSet) {
        obj.insert(QString("tax_receiver_id"), ::OpenAPI::toJsonValue(m_tax_receiver_id));
    }
    return obj;
}

double OAIGet_corporations_corporation_id_wallets_division_journal_200_ok::getAmount() const {
    return m_amount;
}
void OAIGet_corporations_corporation_id_wallets_division_journal_200_ok::setAmount(const double &amount) {
    m_amount = amount;
    m_amount_isSet = true;
}

bool OAIGet_corporations_corporation_id_wallets_division_journal_200_ok::is_amount_Set() const{
    return m_amount_isSet;
}

bool OAIGet_corporations_corporation_id_wallets_division_journal_200_ok::is_amount_Valid() const{
    return m_amount_isValid;
}

double OAIGet_corporations_corporation_id_wallets_division_journal_200_ok::getBalance() const {
    return m_balance;
}
void OAIGet_corporations_corporation_id_wallets_division_journal_200_ok::setBalance(const double &balance) {
    m_balance = balance;
    m_balance_isSet = true;
}

bool OAIGet_corporations_corporation_id_wallets_division_journal_200_ok::is_balance_Set() const{
    return m_balance_isSet;
}

bool OAIGet_corporations_corporation_id_wallets_division_journal_200_ok::is_balance_Valid() const{
    return m_balance_isValid;
}

qint64 OAIGet_corporations_corporation_id_wallets_division_journal_200_ok::getContextId() const {
    return m_context_id;
}
void OAIGet_corporations_corporation_id_wallets_division_journal_200_ok::setContextId(const qint64 &context_id) {
    m_context_id = context_id;
    m_context_id_isSet = true;
}

bool OAIGet_corporations_corporation_id_wallets_division_journal_200_ok::is_context_id_Set() const{
    return m_context_id_isSet;
}

bool OAIGet_corporations_corporation_id_wallets_division_journal_200_ok::is_context_id_Valid() const{
    return m_context_id_isValid;
}

QString OAIGet_corporations_corporation_id_wallets_division_journal_200_ok::getContextIdType() const {
    return m_context_id_type;
}
void OAIGet_corporations_corporation_id_wallets_division_journal_200_ok::setContextIdType(const QString &context_id_type) {
    m_context_id_type = context_id_type;
    m_context_id_type_isSet = true;
}

bool OAIGet_corporations_corporation_id_wallets_division_journal_200_ok::is_context_id_type_Set() const{
    return m_context_id_type_isSet;
}

bool OAIGet_corporations_corporation_id_wallets_division_journal_200_ok::is_context_id_type_Valid() const{
    return m_context_id_type_isValid;
}

QDateTime OAIGet_corporations_corporation_id_wallets_division_journal_200_ok::getDate() const {
    return m_date;
}
void OAIGet_corporations_corporation_id_wallets_division_journal_200_ok::setDate(const QDateTime &date) {
    m_date = date;
    m_date_isSet = true;
}

bool OAIGet_corporations_corporation_id_wallets_division_journal_200_ok::is_date_Set() const{
    return m_date_isSet;
}

bool OAIGet_corporations_corporation_id_wallets_division_journal_200_ok::is_date_Valid() const{
    return m_date_isValid;
}

QString OAIGet_corporations_corporation_id_wallets_division_journal_200_ok::getDescription() const {
    return m_description;
}
void OAIGet_corporations_corporation_id_wallets_division_journal_200_ok::setDescription(const QString &description) {
    m_description = description;
    m_description_isSet = true;
}

bool OAIGet_corporations_corporation_id_wallets_division_journal_200_ok::is_description_Set() const{
    return m_description_isSet;
}

bool OAIGet_corporations_corporation_id_wallets_division_journal_200_ok::is_description_Valid() const{
    return m_description_isValid;
}

qint32 OAIGet_corporations_corporation_id_wallets_division_journal_200_ok::getFirstPartyId() const {
    return m_first_party_id;
}
void OAIGet_corporations_corporation_id_wallets_division_journal_200_ok::setFirstPartyId(const qint32 &first_party_id) {
    m_first_party_id = first_party_id;
    m_first_party_id_isSet = true;
}

bool OAIGet_corporations_corporation_id_wallets_division_journal_200_ok::is_first_party_id_Set() const{
    return m_first_party_id_isSet;
}

bool OAIGet_corporations_corporation_id_wallets_division_journal_200_ok::is_first_party_id_Valid() const{
    return m_first_party_id_isValid;
}

qint64 OAIGet_corporations_corporation_id_wallets_division_journal_200_ok::getId() const {
    return m_id;
}
void OAIGet_corporations_corporation_id_wallets_division_journal_200_ok::setId(const qint64 &id) {
    m_id = id;
    m_id_isSet = true;
}

bool OAIGet_corporations_corporation_id_wallets_division_journal_200_ok::is_id_Set() const{
    return m_id_isSet;
}

bool OAIGet_corporations_corporation_id_wallets_division_journal_200_ok::is_id_Valid() const{
    return m_id_isValid;
}

QString OAIGet_corporations_corporation_id_wallets_division_journal_200_ok::getReason() const {
    return m_reason;
}
void OAIGet_corporations_corporation_id_wallets_division_journal_200_ok::setReason(const QString &reason) {
    m_reason = reason;
    m_reason_isSet = true;
}

bool OAIGet_corporations_corporation_id_wallets_division_journal_200_ok::is_reason_Set() const{
    return m_reason_isSet;
}

bool OAIGet_corporations_corporation_id_wallets_division_journal_200_ok::is_reason_Valid() const{
    return m_reason_isValid;
}

QString OAIGet_corporations_corporation_id_wallets_division_journal_200_ok::getRefType() const {
    return m_ref_type;
}
void OAIGet_corporations_corporation_id_wallets_division_journal_200_ok::setRefType(const QString &ref_type) {
    m_ref_type = ref_type;
    m_ref_type_isSet = true;
}

bool OAIGet_corporations_corporation_id_wallets_division_journal_200_ok::is_ref_type_Set() const{
    return m_ref_type_isSet;
}

bool OAIGet_corporations_corporation_id_wallets_division_journal_200_ok::is_ref_type_Valid() const{
    return m_ref_type_isValid;
}

qint32 OAIGet_corporations_corporation_id_wallets_division_journal_200_ok::getSecondPartyId() const {
    return m_second_party_id;
}
void OAIGet_corporations_corporation_id_wallets_division_journal_200_ok::setSecondPartyId(const qint32 &second_party_id) {
    m_second_party_id = second_party_id;
    m_second_party_id_isSet = true;
}

bool OAIGet_corporations_corporation_id_wallets_division_journal_200_ok::is_second_party_id_Set() const{
    return m_second_party_id_isSet;
}

bool OAIGet_corporations_corporation_id_wallets_division_journal_200_ok::is_second_party_id_Valid() const{
    return m_second_party_id_isValid;
}

double OAIGet_corporations_corporation_id_wallets_division_journal_200_ok::getTax() const {
    return m_tax;
}
void OAIGet_corporations_corporation_id_wallets_division_journal_200_ok::setTax(const double &tax) {
    m_tax = tax;
    m_tax_isSet = true;
}

bool OAIGet_corporations_corporation_id_wallets_division_journal_200_ok::is_tax_Set() const{
    return m_tax_isSet;
}

bool OAIGet_corporations_corporation_id_wallets_division_journal_200_ok::is_tax_Valid() const{
    return m_tax_isValid;
}

qint32 OAIGet_corporations_corporation_id_wallets_division_journal_200_ok::getTaxReceiverId() const {
    return m_tax_receiver_id;
}
void OAIGet_corporations_corporation_id_wallets_division_journal_200_ok::setTaxReceiverId(const qint32 &tax_receiver_id) {
    m_tax_receiver_id = tax_receiver_id;
    m_tax_receiver_id_isSet = true;
}

bool OAIGet_corporations_corporation_id_wallets_division_journal_200_ok::is_tax_receiver_id_Set() const{
    return m_tax_receiver_id_isSet;
}

bool OAIGet_corporations_corporation_id_wallets_division_journal_200_ok::is_tax_receiver_id_Valid() const{
    return m_tax_receiver_id_isValid;
}

bool OAIGet_corporations_corporation_id_wallets_division_journal_200_ok::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_amount_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_balance_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_context_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_context_id_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_date_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_description_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_first_party_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_reason_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_ref_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_second_party_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_tax_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_tax_receiver_id_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIGet_corporations_corporation_id_wallets_division_journal_200_ok::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_date_isValid && m_description_isValid && m_id_isValid && m_ref_type_isValid && true;
}

} // namespace OpenAPI
