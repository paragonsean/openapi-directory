/**
 * EVE Swagger Interface
 * An OpenAPI for EVE Online
 *
 * The version of the OpenAPI document: 0.8.6
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIGet_corporations_corporation_id_fw_stats_ok.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIGet_corporations_corporation_id_fw_stats_ok::OAIGet_corporations_corporation_id_fw_stats_ok(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIGet_corporations_corporation_id_fw_stats_ok::OAIGet_corporations_corporation_id_fw_stats_ok() {
    this->initializeModel();
}

OAIGet_corporations_corporation_id_fw_stats_ok::~OAIGet_corporations_corporation_id_fw_stats_ok() {}

void OAIGet_corporations_corporation_id_fw_stats_ok::initializeModel() {

    m_enlisted_on_isSet = false;
    m_enlisted_on_isValid = false;

    m_faction_id_isSet = false;
    m_faction_id_isValid = false;

    m_kills_isSet = false;
    m_kills_isValid = false;

    m_pilots_isSet = false;
    m_pilots_isValid = false;

    m_victory_points_isSet = false;
    m_victory_points_isValid = false;
}

void OAIGet_corporations_corporation_id_fw_stats_ok::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIGet_corporations_corporation_id_fw_stats_ok::fromJsonObject(QJsonObject json) {

    m_enlisted_on_isValid = ::OpenAPI::fromJsonValue(m_enlisted_on, json[QString("enlisted_on")]);
    m_enlisted_on_isSet = !json[QString("enlisted_on")].isNull() && m_enlisted_on_isValid;

    m_faction_id_isValid = ::OpenAPI::fromJsonValue(m_faction_id, json[QString("faction_id")]);
    m_faction_id_isSet = !json[QString("faction_id")].isNull() && m_faction_id_isValid;

    m_kills_isValid = ::OpenAPI::fromJsonValue(m_kills, json[QString("kills")]);
    m_kills_isSet = !json[QString("kills")].isNull() && m_kills_isValid;

    m_pilots_isValid = ::OpenAPI::fromJsonValue(m_pilots, json[QString("pilots")]);
    m_pilots_isSet = !json[QString("pilots")].isNull() && m_pilots_isValid;

    m_victory_points_isValid = ::OpenAPI::fromJsonValue(m_victory_points, json[QString("victory_points")]);
    m_victory_points_isSet = !json[QString("victory_points")].isNull() && m_victory_points_isValid;
}

QString OAIGet_corporations_corporation_id_fw_stats_ok::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIGet_corporations_corporation_id_fw_stats_ok::asJsonObject() const {
    QJsonObject obj;
    if (m_enlisted_on_isSet) {
        obj.insert(QString("enlisted_on"), ::OpenAPI::toJsonValue(m_enlisted_on));
    }
    if (m_faction_id_isSet) {
        obj.insert(QString("faction_id"), ::OpenAPI::toJsonValue(m_faction_id));
    }
    if (m_kills.isSet()) {
        obj.insert(QString("kills"), ::OpenAPI::toJsonValue(m_kills));
    }
    if (m_pilots_isSet) {
        obj.insert(QString("pilots"), ::OpenAPI::toJsonValue(m_pilots));
    }
    if (m_victory_points.isSet()) {
        obj.insert(QString("victory_points"), ::OpenAPI::toJsonValue(m_victory_points));
    }
    return obj;
}

QDateTime OAIGet_corporations_corporation_id_fw_stats_ok::getEnlistedOn() const {
    return m_enlisted_on;
}
void OAIGet_corporations_corporation_id_fw_stats_ok::setEnlistedOn(const QDateTime &enlisted_on) {
    m_enlisted_on = enlisted_on;
    m_enlisted_on_isSet = true;
}

bool OAIGet_corporations_corporation_id_fw_stats_ok::is_enlisted_on_Set() const{
    return m_enlisted_on_isSet;
}

bool OAIGet_corporations_corporation_id_fw_stats_ok::is_enlisted_on_Valid() const{
    return m_enlisted_on_isValid;
}

qint32 OAIGet_corporations_corporation_id_fw_stats_ok::getFactionId() const {
    return m_faction_id;
}
void OAIGet_corporations_corporation_id_fw_stats_ok::setFactionId(const qint32 &faction_id) {
    m_faction_id = faction_id;
    m_faction_id_isSet = true;
}

bool OAIGet_corporations_corporation_id_fw_stats_ok::is_faction_id_Set() const{
    return m_faction_id_isSet;
}

bool OAIGet_corporations_corporation_id_fw_stats_ok::is_faction_id_Valid() const{
    return m_faction_id_isValid;
}

OAIGet_corporations_corporation_id_fw_stats_kills OAIGet_corporations_corporation_id_fw_stats_ok::getKills() const {
    return m_kills;
}
void OAIGet_corporations_corporation_id_fw_stats_ok::setKills(const OAIGet_corporations_corporation_id_fw_stats_kills &kills) {
    m_kills = kills;
    m_kills_isSet = true;
}

bool OAIGet_corporations_corporation_id_fw_stats_ok::is_kills_Set() const{
    return m_kills_isSet;
}

bool OAIGet_corporations_corporation_id_fw_stats_ok::is_kills_Valid() const{
    return m_kills_isValid;
}

qint32 OAIGet_corporations_corporation_id_fw_stats_ok::getPilots() const {
    return m_pilots;
}
void OAIGet_corporations_corporation_id_fw_stats_ok::setPilots(const qint32 &pilots) {
    m_pilots = pilots;
    m_pilots_isSet = true;
}

bool OAIGet_corporations_corporation_id_fw_stats_ok::is_pilots_Set() const{
    return m_pilots_isSet;
}

bool OAIGet_corporations_corporation_id_fw_stats_ok::is_pilots_Valid() const{
    return m_pilots_isValid;
}

OAIGet_corporations_corporation_id_fw_stats_victory_points OAIGet_corporations_corporation_id_fw_stats_ok::getVictoryPoints() const {
    return m_victory_points;
}
void OAIGet_corporations_corporation_id_fw_stats_ok::setVictoryPoints(const OAIGet_corporations_corporation_id_fw_stats_victory_points &victory_points) {
    m_victory_points = victory_points;
    m_victory_points_isSet = true;
}

bool OAIGet_corporations_corporation_id_fw_stats_ok::is_victory_points_Set() const{
    return m_victory_points_isSet;
}

bool OAIGet_corporations_corporation_id_fw_stats_ok::is_victory_points_Valid() const{
    return m_victory_points_isValid;
}

bool OAIGet_corporations_corporation_id_fw_stats_ok::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_enlisted_on_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_faction_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_kills.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_pilots_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_victory_points.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIGet_corporations_corporation_id_fw_stats_ok::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_kills_isValid && m_victory_points_isValid && true;
}

} // namespace OpenAPI
