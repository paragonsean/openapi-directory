/**
 * EVE Swagger Interface
 * An OpenAPI for EVE Online
 *
 * The version of the OpenAPI document: 0.8.6
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIGet_dogma_effects_effect_id_ok.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIGet_dogma_effects_effect_id_ok::OAIGet_dogma_effects_effect_id_ok(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIGet_dogma_effects_effect_id_ok::OAIGet_dogma_effects_effect_id_ok() {
    this->initializeModel();
}

OAIGet_dogma_effects_effect_id_ok::~OAIGet_dogma_effects_effect_id_ok() {}

void OAIGet_dogma_effects_effect_id_ok::initializeModel() {

    m_description_isSet = false;
    m_description_isValid = false;

    m_disallow_auto_repeat_isSet = false;
    m_disallow_auto_repeat_isValid = false;

    m_discharge_attribute_id_isSet = false;
    m_discharge_attribute_id_isValid = false;

    m_display_name_isSet = false;
    m_display_name_isValid = false;

    m_duration_attribute_id_isSet = false;
    m_duration_attribute_id_isValid = false;

    m_effect_category_isSet = false;
    m_effect_category_isValid = false;

    m_effect_id_isSet = false;
    m_effect_id_isValid = false;

    m_electronic_chance_isSet = false;
    m_electronic_chance_isValid = false;

    m_falloff_attribute_id_isSet = false;
    m_falloff_attribute_id_isValid = false;

    m_icon_id_isSet = false;
    m_icon_id_isValid = false;

    m_is_assistance_isSet = false;
    m_is_assistance_isValid = false;

    m_is_offensive_isSet = false;
    m_is_offensive_isValid = false;

    m_is_warp_safe_isSet = false;
    m_is_warp_safe_isValid = false;

    m_modifiers_isSet = false;
    m_modifiers_isValid = false;

    m_name_isSet = false;
    m_name_isValid = false;

    m_post_expression_isSet = false;
    m_post_expression_isValid = false;

    m_pre_expression_isSet = false;
    m_pre_expression_isValid = false;

    m_published_isSet = false;
    m_published_isValid = false;

    m_range_attribute_id_isSet = false;
    m_range_attribute_id_isValid = false;

    m_range_chance_isSet = false;
    m_range_chance_isValid = false;

    m_tracking_speed_attribute_id_isSet = false;
    m_tracking_speed_attribute_id_isValid = false;
}

void OAIGet_dogma_effects_effect_id_ok::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIGet_dogma_effects_effect_id_ok::fromJsonObject(QJsonObject json) {

    m_description_isValid = ::OpenAPI::fromJsonValue(m_description, json[QString("description")]);
    m_description_isSet = !json[QString("description")].isNull() && m_description_isValid;

    m_disallow_auto_repeat_isValid = ::OpenAPI::fromJsonValue(m_disallow_auto_repeat, json[QString("disallow_auto_repeat")]);
    m_disallow_auto_repeat_isSet = !json[QString("disallow_auto_repeat")].isNull() && m_disallow_auto_repeat_isValid;

    m_discharge_attribute_id_isValid = ::OpenAPI::fromJsonValue(m_discharge_attribute_id, json[QString("discharge_attribute_id")]);
    m_discharge_attribute_id_isSet = !json[QString("discharge_attribute_id")].isNull() && m_discharge_attribute_id_isValid;

    m_display_name_isValid = ::OpenAPI::fromJsonValue(m_display_name, json[QString("display_name")]);
    m_display_name_isSet = !json[QString("display_name")].isNull() && m_display_name_isValid;

    m_duration_attribute_id_isValid = ::OpenAPI::fromJsonValue(m_duration_attribute_id, json[QString("duration_attribute_id")]);
    m_duration_attribute_id_isSet = !json[QString("duration_attribute_id")].isNull() && m_duration_attribute_id_isValid;

    m_effect_category_isValid = ::OpenAPI::fromJsonValue(m_effect_category, json[QString("effect_category")]);
    m_effect_category_isSet = !json[QString("effect_category")].isNull() && m_effect_category_isValid;

    m_effect_id_isValid = ::OpenAPI::fromJsonValue(m_effect_id, json[QString("effect_id")]);
    m_effect_id_isSet = !json[QString("effect_id")].isNull() && m_effect_id_isValid;

    m_electronic_chance_isValid = ::OpenAPI::fromJsonValue(m_electronic_chance, json[QString("electronic_chance")]);
    m_electronic_chance_isSet = !json[QString("electronic_chance")].isNull() && m_electronic_chance_isValid;

    m_falloff_attribute_id_isValid = ::OpenAPI::fromJsonValue(m_falloff_attribute_id, json[QString("falloff_attribute_id")]);
    m_falloff_attribute_id_isSet = !json[QString("falloff_attribute_id")].isNull() && m_falloff_attribute_id_isValid;

    m_icon_id_isValid = ::OpenAPI::fromJsonValue(m_icon_id, json[QString("icon_id")]);
    m_icon_id_isSet = !json[QString("icon_id")].isNull() && m_icon_id_isValid;

    m_is_assistance_isValid = ::OpenAPI::fromJsonValue(m_is_assistance, json[QString("is_assistance")]);
    m_is_assistance_isSet = !json[QString("is_assistance")].isNull() && m_is_assistance_isValid;

    m_is_offensive_isValid = ::OpenAPI::fromJsonValue(m_is_offensive, json[QString("is_offensive")]);
    m_is_offensive_isSet = !json[QString("is_offensive")].isNull() && m_is_offensive_isValid;

    m_is_warp_safe_isValid = ::OpenAPI::fromJsonValue(m_is_warp_safe, json[QString("is_warp_safe")]);
    m_is_warp_safe_isSet = !json[QString("is_warp_safe")].isNull() && m_is_warp_safe_isValid;

    m_modifiers_isValid = ::OpenAPI::fromJsonValue(m_modifiers, json[QString("modifiers")]);
    m_modifiers_isSet = !json[QString("modifiers")].isNull() && m_modifiers_isValid;

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("name")]);
    m_name_isSet = !json[QString("name")].isNull() && m_name_isValid;

    m_post_expression_isValid = ::OpenAPI::fromJsonValue(m_post_expression, json[QString("post_expression")]);
    m_post_expression_isSet = !json[QString("post_expression")].isNull() && m_post_expression_isValid;

    m_pre_expression_isValid = ::OpenAPI::fromJsonValue(m_pre_expression, json[QString("pre_expression")]);
    m_pre_expression_isSet = !json[QString("pre_expression")].isNull() && m_pre_expression_isValid;

    m_published_isValid = ::OpenAPI::fromJsonValue(m_published, json[QString("published")]);
    m_published_isSet = !json[QString("published")].isNull() && m_published_isValid;

    m_range_attribute_id_isValid = ::OpenAPI::fromJsonValue(m_range_attribute_id, json[QString("range_attribute_id")]);
    m_range_attribute_id_isSet = !json[QString("range_attribute_id")].isNull() && m_range_attribute_id_isValid;

    m_range_chance_isValid = ::OpenAPI::fromJsonValue(m_range_chance, json[QString("range_chance")]);
    m_range_chance_isSet = !json[QString("range_chance")].isNull() && m_range_chance_isValid;

    m_tracking_speed_attribute_id_isValid = ::OpenAPI::fromJsonValue(m_tracking_speed_attribute_id, json[QString("tracking_speed_attribute_id")]);
    m_tracking_speed_attribute_id_isSet = !json[QString("tracking_speed_attribute_id")].isNull() && m_tracking_speed_attribute_id_isValid;
}

QString OAIGet_dogma_effects_effect_id_ok::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIGet_dogma_effects_effect_id_ok::asJsonObject() const {
    QJsonObject obj;
    if (m_description_isSet) {
        obj.insert(QString("description"), ::OpenAPI::toJsonValue(m_description));
    }
    if (m_disallow_auto_repeat_isSet) {
        obj.insert(QString("disallow_auto_repeat"), ::OpenAPI::toJsonValue(m_disallow_auto_repeat));
    }
    if (m_discharge_attribute_id_isSet) {
        obj.insert(QString("discharge_attribute_id"), ::OpenAPI::toJsonValue(m_discharge_attribute_id));
    }
    if (m_display_name_isSet) {
        obj.insert(QString("display_name"), ::OpenAPI::toJsonValue(m_display_name));
    }
    if (m_duration_attribute_id_isSet) {
        obj.insert(QString("duration_attribute_id"), ::OpenAPI::toJsonValue(m_duration_attribute_id));
    }
    if (m_effect_category_isSet) {
        obj.insert(QString("effect_category"), ::OpenAPI::toJsonValue(m_effect_category));
    }
    if (m_effect_id_isSet) {
        obj.insert(QString("effect_id"), ::OpenAPI::toJsonValue(m_effect_id));
    }
    if (m_electronic_chance_isSet) {
        obj.insert(QString("electronic_chance"), ::OpenAPI::toJsonValue(m_electronic_chance));
    }
    if (m_falloff_attribute_id_isSet) {
        obj.insert(QString("falloff_attribute_id"), ::OpenAPI::toJsonValue(m_falloff_attribute_id));
    }
    if (m_icon_id_isSet) {
        obj.insert(QString("icon_id"), ::OpenAPI::toJsonValue(m_icon_id));
    }
    if (m_is_assistance_isSet) {
        obj.insert(QString("is_assistance"), ::OpenAPI::toJsonValue(m_is_assistance));
    }
    if (m_is_offensive_isSet) {
        obj.insert(QString("is_offensive"), ::OpenAPI::toJsonValue(m_is_offensive));
    }
    if (m_is_warp_safe_isSet) {
        obj.insert(QString("is_warp_safe"), ::OpenAPI::toJsonValue(m_is_warp_safe));
    }
    if (m_modifiers.size() > 0) {
        obj.insert(QString("modifiers"), ::OpenAPI::toJsonValue(m_modifiers));
    }
    if (m_name_isSet) {
        obj.insert(QString("name"), ::OpenAPI::toJsonValue(m_name));
    }
    if (m_post_expression_isSet) {
        obj.insert(QString("post_expression"), ::OpenAPI::toJsonValue(m_post_expression));
    }
    if (m_pre_expression_isSet) {
        obj.insert(QString("pre_expression"), ::OpenAPI::toJsonValue(m_pre_expression));
    }
    if (m_published_isSet) {
        obj.insert(QString("published"), ::OpenAPI::toJsonValue(m_published));
    }
    if (m_range_attribute_id_isSet) {
        obj.insert(QString("range_attribute_id"), ::OpenAPI::toJsonValue(m_range_attribute_id));
    }
    if (m_range_chance_isSet) {
        obj.insert(QString("range_chance"), ::OpenAPI::toJsonValue(m_range_chance));
    }
    if (m_tracking_speed_attribute_id_isSet) {
        obj.insert(QString("tracking_speed_attribute_id"), ::OpenAPI::toJsonValue(m_tracking_speed_attribute_id));
    }
    return obj;
}

QString OAIGet_dogma_effects_effect_id_ok::getDescription() const {
    return m_description;
}
void OAIGet_dogma_effects_effect_id_ok::setDescription(const QString &description) {
    m_description = description;
    m_description_isSet = true;
}

bool OAIGet_dogma_effects_effect_id_ok::is_description_Set() const{
    return m_description_isSet;
}

bool OAIGet_dogma_effects_effect_id_ok::is_description_Valid() const{
    return m_description_isValid;
}

bool OAIGet_dogma_effects_effect_id_ok::isDisallowAutoRepeat() const {
    return m_disallow_auto_repeat;
}
void OAIGet_dogma_effects_effect_id_ok::setDisallowAutoRepeat(const bool &disallow_auto_repeat) {
    m_disallow_auto_repeat = disallow_auto_repeat;
    m_disallow_auto_repeat_isSet = true;
}

bool OAIGet_dogma_effects_effect_id_ok::is_disallow_auto_repeat_Set() const{
    return m_disallow_auto_repeat_isSet;
}

bool OAIGet_dogma_effects_effect_id_ok::is_disallow_auto_repeat_Valid() const{
    return m_disallow_auto_repeat_isValid;
}

qint32 OAIGet_dogma_effects_effect_id_ok::getDischargeAttributeId() const {
    return m_discharge_attribute_id;
}
void OAIGet_dogma_effects_effect_id_ok::setDischargeAttributeId(const qint32 &discharge_attribute_id) {
    m_discharge_attribute_id = discharge_attribute_id;
    m_discharge_attribute_id_isSet = true;
}

bool OAIGet_dogma_effects_effect_id_ok::is_discharge_attribute_id_Set() const{
    return m_discharge_attribute_id_isSet;
}

bool OAIGet_dogma_effects_effect_id_ok::is_discharge_attribute_id_Valid() const{
    return m_discharge_attribute_id_isValid;
}

QString OAIGet_dogma_effects_effect_id_ok::getDisplayName() const {
    return m_display_name;
}
void OAIGet_dogma_effects_effect_id_ok::setDisplayName(const QString &display_name) {
    m_display_name = display_name;
    m_display_name_isSet = true;
}

bool OAIGet_dogma_effects_effect_id_ok::is_display_name_Set() const{
    return m_display_name_isSet;
}

bool OAIGet_dogma_effects_effect_id_ok::is_display_name_Valid() const{
    return m_display_name_isValid;
}

qint32 OAIGet_dogma_effects_effect_id_ok::getDurationAttributeId() const {
    return m_duration_attribute_id;
}
void OAIGet_dogma_effects_effect_id_ok::setDurationAttributeId(const qint32 &duration_attribute_id) {
    m_duration_attribute_id = duration_attribute_id;
    m_duration_attribute_id_isSet = true;
}

bool OAIGet_dogma_effects_effect_id_ok::is_duration_attribute_id_Set() const{
    return m_duration_attribute_id_isSet;
}

bool OAIGet_dogma_effects_effect_id_ok::is_duration_attribute_id_Valid() const{
    return m_duration_attribute_id_isValid;
}

qint32 OAIGet_dogma_effects_effect_id_ok::getEffectCategory() const {
    return m_effect_category;
}
void OAIGet_dogma_effects_effect_id_ok::setEffectCategory(const qint32 &effect_category) {
    m_effect_category = effect_category;
    m_effect_category_isSet = true;
}

bool OAIGet_dogma_effects_effect_id_ok::is_effect_category_Set() const{
    return m_effect_category_isSet;
}

bool OAIGet_dogma_effects_effect_id_ok::is_effect_category_Valid() const{
    return m_effect_category_isValid;
}

qint32 OAIGet_dogma_effects_effect_id_ok::getEffectId() const {
    return m_effect_id;
}
void OAIGet_dogma_effects_effect_id_ok::setEffectId(const qint32 &effect_id) {
    m_effect_id = effect_id;
    m_effect_id_isSet = true;
}

bool OAIGet_dogma_effects_effect_id_ok::is_effect_id_Set() const{
    return m_effect_id_isSet;
}

bool OAIGet_dogma_effects_effect_id_ok::is_effect_id_Valid() const{
    return m_effect_id_isValid;
}

bool OAIGet_dogma_effects_effect_id_ok::isElectronicChance() const {
    return m_electronic_chance;
}
void OAIGet_dogma_effects_effect_id_ok::setElectronicChance(const bool &electronic_chance) {
    m_electronic_chance = electronic_chance;
    m_electronic_chance_isSet = true;
}

bool OAIGet_dogma_effects_effect_id_ok::is_electronic_chance_Set() const{
    return m_electronic_chance_isSet;
}

bool OAIGet_dogma_effects_effect_id_ok::is_electronic_chance_Valid() const{
    return m_electronic_chance_isValid;
}

qint32 OAIGet_dogma_effects_effect_id_ok::getFalloffAttributeId() const {
    return m_falloff_attribute_id;
}
void OAIGet_dogma_effects_effect_id_ok::setFalloffAttributeId(const qint32 &falloff_attribute_id) {
    m_falloff_attribute_id = falloff_attribute_id;
    m_falloff_attribute_id_isSet = true;
}

bool OAIGet_dogma_effects_effect_id_ok::is_falloff_attribute_id_Set() const{
    return m_falloff_attribute_id_isSet;
}

bool OAIGet_dogma_effects_effect_id_ok::is_falloff_attribute_id_Valid() const{
    return m_falloff_attribute_id_isValid;
}

qint32 OAIGet_dogma_effects_effect_id_ok::getIconId() const {
    return m_icon_id;
}
void OAIGet_dogma_effects_effect_id_ok::setIconId(const qint32 &icon_id) {
    m_icon_id = icon_id;
    m_icon_id_isSet = true;
}

bool OAIGet_dogma_effects_effect_id_ok::is_icon_id_Set() const{
    return m_icon_id_isSet;
}

bool OAIGet_dogma_effects_effect_id_ok::is_icon_id_Valid() const{
    return m_icon_id_isValid;
}

bool OAIGet_dogma_effects_effect_id_ok::isIsAssistance() const {
    return m_is_assistance;
}
void OAIGet_dogma_effects_effect_id_ok::setIsAssistance(const bool &is_assistance) {
    m_is_assistance = is_assistance;
    m_is_assistance_isSet = true;
}

bool OAIGet_dogma_effects_effect_id_ok::is_is_assistance_Set() const{
    return m_is_assistance_isSet;
}

bool OAIGet_dogma_effects_effect_id_ok::is_is_assistance_Valid() const{
    return m_is_assistance_isValid;
}

bool OAIGet_dogma_effects_effect_id_ok::isIsOffensive() const {
    return m_is_offensive;
}
void OAIGet_dogma_effects_effect_id_ok::setIsOffensive(const bool &is_offensive) {
    m_is_offensive = is_offensive;
    m_is_offensive_isSet = true;
}

bool OAIGet_dogma_effects_effect_id_ok::is_is_offensive_Set() const{
    return m_is_offensive_isSet;
}

bool OAIGet_dogma_effects_effect_id_ok::is_is_offensive_Valid() const{
    return m_is_offensive_isValid;
}

bool OAIGet_dogma_effects_effect_id_ok::isIsWarpSafe() const {
    return m_is_warp_safe;
}
void OAIGet_dogma_effects_effect_id_ok::setIsWarpSafe(const bool &is_warp_safe) {
    m_is_warp_safe = is_warp_safe;
    m_is_warp_safe_isSet = true;
}

bool OAIGet_dogma_effects_effect_id_ok::is_is_warp_safe_Set() const{
    return m_is_warp_safe_isSet;
}

bool OAIGet_dogma_effects_effect_id_ok::is_is_warp_safe_Valid() const{
    return m_is_warp_safe_isValid;
}

QList<OAIGet_dogma_effects_effect_id_modifier> OAIGet_dogma_effects_effect_id_ok::getModifiers() const {
    return m_modifiers;
}
void OAIGet_dogma_effects_effect_id_ok::setModifiers(const QList<OAIGet_dogma_effects_effect_id_modifier> &modifiers) {
    m_modifiers = modifiers;
    m_modifiers_isSet = true;
}

bool OAIGet_dogma_effects_effect_id_ok::is_modifiers_Set() const{
    return m_modifiers_isSet;
}

bool OAIGet_dogma_effects_effect_id_ok::is_modifiers_Valid() const{
    return m_modifiers_isValid;
}

QString OAIGet_dogma_effects_effect_id_ok::getName() const {
    return m_name;
}
void OAIGet_dogma_effects_effect_id_ok::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAIGet_dogma_effects_effect_id_ok::is_name_Set() const{
    return m_name_isSet;
}

bool OAIGet_dogma_effects_effect_id_ok::is_name_Valid() const{
    return m_name_isValid;
}

qint32 OAIGet_dogma_effects_effect_id_ok::getPostExpression() const {
    return m_post_expression;
}
void OAIGet_dogma_effects_effect_id_ok::setPostExpression(const qint32 &post_expression) {
    m_post_expression = post_expression;
    m_post_expression_isSet = true;
}

bool OAIGet_dogma_effects_effect_id_ok::is_post_expression_Set() const{
    return m_post_expression_isSet;
}

bool OAIGet_dogma_effects_effect_id_ok::is_post_expression_Valid() const{
    return m_post_expression_isValid;
}

qint32 OAIGet_dogma_effects_effect_id_ok::getPreExpression() const {
    return m_pre_expression;
}
void OAIGet_dogma_effects_effect_id_ok::setPreExpression(const qint32 &pre_expression) {
    m_pre_expression = pre_expression;
    m_pre_expression_isSet = true;
}

bool OAIGet_dogma_effects_effect_id_ok::is_pre_expression_Set() const{
    return m_pre_expression_isSet;
}

bool OAIGet_dogma_effects_effect_id_ok::is_pre_expression_Valid() const{
    return m_pre_expression_isValid;
}

bool OAIGet_dogma_effects_effect_id_ok::isPublished() const {
    return m_published;
}
void OAIGet_dogma_effects_effect_id_ok::setPublished(const bool &published) {
    m_published = published;
    m_published_isSet = true;
}

bool OAIGet_dogma_effects_effect_id_ok::is_published_Set() const{
    return m_published_isSet;
}

bool OAIGet_dogma_effects_effect_id_ok::is_published_Valid() const{
    return m_published_isValid;
}

qint32 OAIGet_dogma_effects_effect_id_ok::getRangeAttributeId() const {
    return m_range_attribute_id;
}
void OAIGet_dogma_effects_effect_id_ok::setRangeAttributeId(const qint32 &range_attribute_id) {
    m_range_attribute_id = range_attribute_id;
    m_range_attribute_id_isSet = true;
}

bool OAIGet_dogma_effects_effect_id_ok::is_range_attribute_id_Set() const{
    return m_range_attribute_id_isSet;
}

bool OAIGet_dogma_effects_effect_id_ok::is_range_attribute_id_Valid() const{
    return m_range_attribute_id_isValid;
}

bool OAIGet_dogma_effects_effect_id_ok::isRangeChance() const {
    return m_range_chance;
}
void OAIGet_dogma_effects_effect_id_ok::setRangeChance(const bool &range_chance) {
    m_range_chance = range_chance;
    m_range_chance_isSet = true;
}

bool OAIGet_dogma_effects_effect_id_ok::is_range_chance_Set() const{
    return m_range_chance_isSet;
}

bool OAIGet_dogma_effects_effect_id_ok::is_range_chance_Valid() const{
    return m_range_chance_isValid;
}

qint32 OAIGet_dogma_effects_effect_id_ok::getTrackingSpeedAttributeId() const {
    return m_tracking_speed_attribute_id;
}
void OAIGet_dogma_effects_effect_id_ok::setTrackingSpeedAttributeId(const qint32 &tracking_speed_attribute_id) {
    m_tracking_speed_attribute_id = tracking_speed_attribute_id;
    m_tracking_speed_attribute_id_isSet = true;
}

bool OAIGet_dogma_effects_effect_id_ok::is_tracking_speed_attribute_id_Set() const{
    return m_tracking_speed_attribute_id_isSet;
}

bool OAIGet_dogma_effects_effect_id_ok::is_tracking_speed_attribute_id_Valid() const{
    return m_tracking_speed_attribute_id_isValid;
}

bool OAIGet_dogma_effects_effect_id_ok::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_description_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_disallow_auto_repeat_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_discharge_attribute_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_display_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_duration_attribute_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_effect_category_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_effect_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_electronic_chance_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_falloff_attribute_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_icon_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_is_assistance_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_is_offensive_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_is_warp_safe_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_modifiers.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_post_expression_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_pre_expression_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_published_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_range_attribute_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_range_chance_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_tracking_speed_attribute_id_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIGet_dogma_effects_effect_id_ok::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_effect_id_isValid && true;
}

} // namespace OpenAPI
