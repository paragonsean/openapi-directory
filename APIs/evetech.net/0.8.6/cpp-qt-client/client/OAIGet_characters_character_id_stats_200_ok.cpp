/**
 * EVE Swagger Interface
 * An OpenAPI for EVE Online
 *
 * The version of the OpenAPI document: 0.8.6
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIGet_characters_character_id_stats_200_ok.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIGet_characters_character_id_stats_200_ok::OAIGet_characters_character_id_stats_200_ok(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIGet_characters_character_id_stats_200_ok::OAIGet_characters_character_id_stats_200_ok() {
    this->initializeModel();
}

OAIGet_characters_character_id_stats_200_ok::~OAIGet_characters_character_id_stats_200_ok() {}

void OAIGet_characters_character_id_stats_200_ok::initializeModel() {

    m_character_isSet = false;
    m_character_isValid = false;

    m_combat_isSet = false;
    m_combat_isValid = false;

    m_industry_isSet = false;
    m_industry_isValid = false;

    m_inventory_isSet = false;
    m_inventory_isValid = false;

    m_isk_isSet = false;
    m_isk_isValid = false;

    m_market_isSet = false;
    m_market_isValid = false;

    m_mining_isSet = false;
    m_mining_isValid = false;

    m_module_isSet = false;
    m_module_isValid = false;

    m_orbital_isSet = false;
    m_orbital_isValid = false;

    m_pve_isSet = false;
    m_pve_isValid = false;

    m_social_isSet = false;
    m_social_isValid = false;

    m_travel_isSet = false;
    m_travel_isValid = false;

    m_year_isSet = false;
    m_year_isValid = false;
}

void OAIGet_characters_character_id_stats_200_ok::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIGet_characters_character_id_stats_200_ok::fromJsonObject(QJsonObject json) {

    m_character_isValid = ::OpenAPI::fromJsonValue(m_character, json[QString("character")]);
    m_character_isSet = !json[QString("character")].isNull() && m_character_isValid;

    m_combat_isValid = ::OpenAPI::fromJsonValue(m_combat, json[QString("combat")]);
    m_combat_isSet = !json[QString("combat")].isNull() && m_combat_isValid;

    m_industry_isValid = ::OpenAPI::fromJsonValue(m_industry, json[QString("industry")]);
    m_industry_isSet = !json[QString("industry")].isNull() && m_industry_isValid;

    m_inventory_isValid = ::OpenAPI::fromJsonValue(m_inventory, json[QString("inventory")]);
    m_inventory_isSet = !json[QString("inventory")].isNull() && m_inventory_isValid;

    m_isk_isValid = ::OpenAPI::fromJsonValue(m_isk, json[QString("isk")]);
    m_isk_isSet = !json[QString("isk")].isNull() && m_isk_isValid;

    m_market_isValid = ::OpenAPI::fromJsonValue(m_market, json[QString("market")]);
    m_market_isSet = !json[QString("market")].isNull() && m_market_isValid;

    m_mining_isValid = ::OpenAPI::fromJsonValue(m_mining, json[QString("mining")]);
    m_mining_isSet = !json[QString("mining")].isNull() && m_mining_isValid;

    m_module_isValid = ::OpenAPI::fromJsonValue(m_module, json[QString("module")]);
    m_module_isSet = !json[QString("module")].isNull() && m_module_isValid;

    m_orbital_isValid = ::OpenAPI::fromJsonValue(m_orbital, json[QString("orbital")]);
    m_orbital_isSet = !json[QString("orbital")].isNull() && m_orbital_isValid;

    m_pve_isValid = ::OpenAPI::fromJsonValue(m_pve, json[QString("pve")]);
    m_pve_isSet = !json[QString("pve")].isNull() && m_pve_isValid;

    m_social_isValid = ::OpenAPI::fromJsonValue(m_social, json[QString("social")]);
    m_social_isSet = !json[QString("social")].isNull() && m_social_isValid;

    m_travel_isValid = ::OpenAPI::fromJsonValue(m_travel, json[QString("travel")]);
    m_travel_isSet = !json[QString("travel")].isNull() && m_travel_isValid;

    m_year_isValid = ::OpenAPI::fromJsonValue(m_year, json[QString("year")]);
    m_year_isSet = !json[QString("year")].isNull() && m_year_isValid;
}

QString OAIGet_characters_character_id_stats_200_ok::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIGet_characters_character_id_stats_200_ok::asJsonObject() const {
    QJsonObject obj;
    if (m_character.isSet()) {
        obj.insert(QString("character"), ::OpenAPI::toJsonValue(m_character));
    }
    if (m_combat.isSet()) {
        obj.insert(QString("combat"), ::OpenAPI::toJsonValue(m_combat));
    }
    if (m_industry.isSet()) {
        obj.insert(QString("industry"), ::OpenAPI::toJsonValue(m_industry));
    }
    if (m_inventory.isSet()) {
        obj.insert(QString("inventory"), ::OpenAPI::toJsonValue(m_inventory));
    }
    if (m_isk.isSet()) {
        obj.insert(QString("isk"), ::OpenAPI::toJsonValue(m_isk));
    }
    if (m_market.isSet()) {
        obj.insert(QString("market"), ::OpenAPI::toJsonValue(m_market));
    }
    if (m_mining.isSet()) {
        obj.insert(QString("mining"), ::OpenAPI::toJsonValue(m_mining));
    }
    if (m_module.isSet()) {
        obj.insert(QString("module"), ::OpenAPI::toJsonValue(m_module));
    }
    if (m_orbital.isSet()) {
        obj.insert(QString("orbital"), ::OpenAPI::toJsonValue(m_orbital));
    }
    if (m_pve.isSet()) {
        obj.insert(QString("pve"), ::OpenAPI::toJsonValue(m_pve));
    }
    if (m_social.isSet()) {
        obj.insert(QString("social"), ::OpenAPI::toJsonValue(m_social));
    }
    if (m_travel.isSet()) {
        obj.insert(QString("travel"), ::OpenAPI::toJsonValue(m_travel));
    }
    if (m_year_isSet) {
        obj.insert(QString("year"), ::OpenAPI::toJsonValue(m_year));
    }
    return obj;
}

OAIGet_characters_character_id_stats_character OAIGet_characters_character_id_stats_200_ok::getCharacter() const {
    return m_character;
}
void OAIGet_characters_character_id_stats_200_ok::setCharacter(const OAIGet_characters_character_id_stats_character &character) {
    m_character = character;
    m_character_isSet = true;
}

bool OAIGet_characters_character_id_stats_200_ok::is_character_Set() const{
    return m_character_isSet;
}

bool OAIGet_characters_character_id_stats_200_ok::is_character_Valid() const{
    return m_character_isValid;
}

OAIGet_characters_character_id_stats_combat OAIGet_characters_character_id_stats_200_ok::getCombat() const {
    return m_combat;
}
void OAIGet_characters_character_id_stats_200_ok::setCombat(const OAIGet_characters_character_id_stats_combat &combat) {
    m_combat = combat;
    m_combat_isSet = true;
}

bool OAIGet_characters_character_id_stats_200_ok::is_combat_Set() const{
    return m_combat_isSet;
}

bool OAIGet_characters_character_id_stats_200_ok::is_combat_Valid() const{
    return m_combat_isValid;
}

OAIGet_characters_character_id_stats_industry OAIGet_characters_character_id_stats_200_ok::getIndustry() const {
    return m_industry;
}
void OAIGet_characters_character_id_stats_200_ok::setIndustry(const OAIGet_characters_character_id_stats_industry &industry) {
    m_industry = industry;
    m_industry_isSet = true;
}

bool OAIGet_characters_character_id_stats_200_ok::is_industry_Set() const{
    return m_industry_isSet;
}

bool OAIGet_characters_character_id_stats_200_ok::is_industry_Valid() const{
    return m_industry_isValid;
}

OAIGet_characters_character_id_stats_inventory OAIGet_characters_character_id_stats_200_ok::getInventory() const {
    return m_inventory;
}
void OAIGet_characters_character_id_stats_200_ok::setInventory(const OAIGet_characters_character_id_stats_inventory &inventory) {
    m_inventory = inventory;
    m_inventory_isSet = true;
}

bool OAIGet_characters_character_id_stats_200_ok::is_inventory_Set() const{
    return m_inventory_isSet;
}

bool OAIGet_characters_character_id_stats_200_ok::is_inventory_Valid() const{
    return m_inventory_isValid;
}

OAIGet_characters_character_id_stats_isk OAIGet_characters_character_id_stats_200_ok::getIsk() const {
    return m_isk;
}
void OAIGet_characters_character_id_stats_200_ok::setIsk(const OAIGet_characters_character_id_stats_isk &isk) {
    m_isk = isk;
    m_isk_isSet = true;
}

bool OAIGet_characters_character_id_stats_200_ok::is_isk_Set() const{
    return m_isk_isSet;
}

bool OAIGet_characters_character_id_stats_200_ok::is_isk_Valid() const{
    return m_isk_isValid;
}

OAIGet_characters_character_id_stats_market OAIGet_characters_character_id_stats_200_ok::getMarket() const {
    return m_market;
}
void OAIGet_characters_character_id_stats_200_ok::setMarket(const OAIGet_characters_character_id_stats_market &market) {
    m_market = market;
    m_market_isSet = true;
}

bool OAIGet_characters_character_id_stats_200_ok::is_market_Set() const{
    return m_market_isSet;
}

bool OAIGet_characters_character_id_stats_200_ok::is_market_Valid() const{
    return m_market_isValid;
}

OAIGet_characters_character_id_stats_mining OAIGet_characters_character_id_stats_200_ok::getMining() const {
    return m_mining;
}
void OAIGet_characters_character_id_stats_200_ok::setMining(const OAIGet_characters_character_id_stats_mining &mining) {
    m_mining = mining;
    m_mining_isSet = true;
}

bool OAIGet_characters_character_id_stats_200_ok::is_mining_Set() const{
    return m_mining_isSet;
}

bool OAIGet_characters_character_id_stats_200_ok::is_mining_Valid() const{
    return m_mining_isValid;
}

OAIGet_characters_character_id_stats_module OAIGet_characters_character_id_stats_200_ok::getModule() const {
    return m_module;
}
void OAIGet_characters_character_id_stats_200_ok::setModule(const OAIGet_characters_character_id_stats_module &module) {
    m_module = module;
    m_module_isSet = true;
}

bool OAIGet_characters_character_id_stats_200_ok::is_module_Set() const{
    return m_module_isSet;
}

bool OAIGet_characters_character_id_stats_200_ok::is_module_Valid() const{
    return m_module_isValid;
}

OAIGet_characters_character_id_stats_orbital OAIGet_characters_character_id_stats_200_ok::getOrbital() const {
    return m_orbital;
}
void OAIGet_characters_character_id_stats_200_ok::setOrbital(const OAIGet_characters_character_id_stats_orbital &orbital) {
    m_orbital = orbital;
    m_orbital_isSet = true;
}

bool OAIGet_characters_character_id_stats_200_ok::is_orbital_Set() const{
    return m_orbital_isSet;
}

bool OAIGet_characters_character_id_stats_200_ok::is_orbital_Valid() const{
    return m_orbital_isValid;
}

OAIGet_characters_character_id_stats_pve OAIGet_characters_character_id_stats_200_ok::getPve() const {
    return m_pve;
}
void OAIGet_characters_character_id_stats_200_ok::setPve(const OAIGet_characters_character_id_stats_pve &pve) {
    m_pve = pve;
    m_pve_isSet = true;
}

bool OAIGet_characters_character_id_stats_200_ok::is_pve_Set() const{
    return m_pve_isSet;
}

bool OAIGet_characters_character_id_stats_200_ok::is_pve_Valid() const{
    return m_pve_isValid;
}

OAIGet_characters_character_id_stats_social OAIGet_characters_character_id_stats_200_ok::getSocial() const {
    return m_social;
}
void OAIGet_characters_character_id_stats_200_ok::setSocial(const OAIGet_characters_character_id_stats_social &social) {
    m_social = social;
    m_social_isSet = true;
}

bool OAIGet_characters_character_id_stats_200_ok::is_social_Set() const{
    return m_social_isSet;
}

bool OAIGet_characters_character_id_stats_200_ok::is_social_Valid() const{
    return m_social_isValid;
}

OAIGet_characters_character_id_stats_travel OAIGet_characters_character_id_stats_200_ok::getTravel() const {
    return m_travel;
}
void OAIGet_characters_character_id_stats_200_ok::setTravel(const OAIGet_characters_character_id_stats_travel &travel) {
    m_travel = travel;
    m_travel_isSet = true;
}

bool OAIGet_characters_character_id_stats_200_ok::is_travel_Set() const{
    return m_travel_isSet;
}

bool OAIGet_characters_character_id_stats_200_ok::is_travel_Valid() const{
    return m_travel_isValid;
}

qint32 OAIGet_characters_character_id_stats_200_ok::getYear() const {
    return m_year;
}
void OAIGet_characters_character_id_stats_200_ok::setYear(const qint32 &year) {
    m_year = year;
    m_year_isSet = true;
}

bool OAIGet_characters_character_id_stats_200_ok::is_year_Set() const{
    return m_year_isSet;
}

bool OAIGet_characters_character_id_stats_200_ok::is_year_Valid() const{
    return m_year_isValid;
}

bool OAIGet_characters_character_id_stats_200_ok::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_character.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_combat.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_industry.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_inventory.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_isk.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_market.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_mining.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_module.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_orbital.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_pve.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_social.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_travel.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_year_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIGet_characters_character_id_stats_200_ok::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_year_isValid && true;
}

} // namespace OpenAPI
