/**
 * EVE Swagger Interface
 * An OpenAPI for EVE Online
 *
 * The version of the OpenAPI document: 0.8.6
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIGet_universe_bloodlines_200_ok.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIGet_universe_bloodlines_200_ok::OAIGet_universe_bloodlines_200_ok(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIGet_universe_bloodlines_200_ok::OAIGet_universe_bloodlines_200_ok() {
    this->initializeModel();
}

OAIGet_universe_bloodlines_200_ok::~OAIGet_universe_bloodlines_200_ok() {}

void OAIGet_universe_bloodlines_200_ok::initializeModel() {

    m_bloodline_id_isSet = false;
    m_bloodline_id_isValid = false;

    m_charisma_isSet = false;
    m_charisma_isValid = false;

    m_corporation_id_isSet = false;
    m_corporation_id_isValid = false;

    m_description_isSet = false;
    m_description_isValid = false;

    m_intelligence_isSet = false;
    m_intelligence_isValid = false;

    m_memory_isSet = false;
    m_memory_isValid = false;

    m_name_isSet = false;
    m_name_isValid = false;

    m_perception_isSet = false;
    m_perception_isValid = false;

    m_race_id_isSet = false;
    m_race_id_isValid = false;

    m_ship_type_id_isSet = false;
    m_ship_type_id_isValid = false;

    m_willpower_isSet = false;
    m_willpower_isValid = false;
}

void OAIGet_universe_bloodlines_200_ok::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIGet_universe_bloodlines_200_ok::fromJsonObject(QJsonObject json) {

    m_bloodline_id_isValid = ::OpenAPI::fromJsonValue(m_bloodline_id, json[QString("bloodline_id")]);
    m_bloodline_id_isSet = !json[QString("bloodline_id")].isNull() && m_bloodline_id_isValid;

    m_charisma_isValid = ::OpenAPI::fromJsonValue(m_charisma, json[QString("charisma")]);
    m_charisma_isSet = !json[QString("charisma")].isNull() && m_charisma_isValid;

    m_corporation_id_isValid = ::OpenAPI::fromJsonValue(m_corporation_id, json[QString("corporation_id")]);
    m_corporation_id_isSet = !json[QString("corporation_id")].isNull() && m_corporation_id_isValid;

    m_description_isValid = ::OpenAPI::fromJsonValue(m_description, json[QString("description")]);
    m_description_isSet = !json[QString("description")].isNull() && m_description_isValid;

    m_intelligence_isValid = ::OpenAPI::fromJsonValue(m_intelligence, json[QString("intelligence")]);
    m_intelligence_isSet = !json[QString("intelligence")].isNull() && m_intelligence_isValid;

    m_memory_isValid = ::OpenAPI::fromJsonValue(m_memory, json[QString("memory")]);
    m_memory_isSet = !json[QString("memory")].isNull() && m_memory_isValid;

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("name")]);
    m_name_isSet = !json[QString("name")].isNull() && m_name_isValid;

    m_perception_isValid = ::OpenAPI::fromJsonValue(m_perception, json[QString("perception")]);
    m_perception_isSet = !json[QString("perception")].isNull() && m_perception_isValid;

    m_race_id_isValid = ::OpenAPI::fromJsonValue(m_race_id, json[QString("race_id")]);
    m_race_id_isSet = !json[QString("race_id")].isNull() && m_race_id_isValid;

    m_ship_type_id_isValid = ::OpenAPI::fromJsonValue(m_ship_type_id, json[QString("ship_type_id")]);
    m_ship_type_id_isSet = !json[QString("ship_type_id")].isNull() && m_ship_type_id_isValid;

    m_willpower_isValid = ::OpenAPI::fromJsonValue(m_willpower, json[QString("willpower")]);
    m_willpower_isSet = !json[QString("willpower")].isNull() && m_willpower_isValid;
}

QString OAIGet_universe_bloodlines_200_ok::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIGet_universe_bloodlines_200_ok::asJsonObject() const {
    QJsonObject obj;
    if (m_bloodline_id_isSet) {
        obj.insert(QString("bloodline_id"), ::OpenAPI::toJsonValue(m_bloodline_id));
    }
    if (m_charisma_isSet) {
        obj.insert(QString("charisma"), ::OpenAPI::toJsonValue(m_charisma));
    }
    if (m_corporation_id_isSet) {
        obj.insert(QString("corporation_id"), ::OpenAPI::toJsonValue(m_corporation_id));
    }
    if (m_description_isSet) {
        obj.insert(QString("description"), ::OpenAPI::toJsonValue(m_description));
    }
    if (m_intelligence_isSet) {
        obj.insert(QString("intelligence"), ::OpenAPI::toJsonValue(m_intelligence));
    }
    if (m_memory_isSet) {
        obj.insert(QString("memory"), ::OpenAPI::toJsonValue(m_memory));
    }
    if (m_name_isSet) {
        obj.insert(QString("name"), ::OpenAPI::toJsonValue(m_name));
    }
    if (m_perception_isSet) {
        obj.insert(QString("perception"), ::OpenAPI::toJsonValue(m_perception));
    }
    if (m_race_id_isSet) {
        obj.insert(QString("race_id"), ::OpenAPI::toJsonValue(m_race_id));
    }
    if (m_ship_type_id_isSet) {
        obj.insert(QString("ship_type_id"), ::OpenAPI::toJsonValue(m_ship_type_id));
    }
    if (m_willpower_isSet) {
        obj.insert(QString("willpower"), ::OpenAPI::toJsonValue(m_willpower));
    }
    return obj;
}

qint32 OAIGet_universe_bloodlines_200_ok::getBloodlineId() const {
    return m_bloodline_id;
}
void OAIGet_universe_bloodlines_200_ok::setBloodlineId(const qint32 &bloodline_id) {
    m_bloodline_id = bloodline_id;
    m_bloodline_id_isSet = true;
}

bool OAIGet_universe_bloodlines_200_ok::is_bloodline_id_Set() const{
    return m_bloodline_id_isSet;
}

bool OAIGet_universe_bloodlines_200_ok::is_bloodline_id_Valid() const{
    return m_bloodline_id_isValid;
}

qint32 OAIGet_universe_bloodlines_200_ok::getCharisma() const {
    return m_charisma;
}
void OAIGet_universe_bloodlines_200_ok::setCharisma(const qint32 &charisma) {
    m_charisma = charisma;
    m_charisma_isSet = true;
}

bool OAIGet_universe_bloodlines_200_ok::is_charisma_Set() const{
    return m_charisma_isSet;
}

bool OAIGet_universe_bloodlines_200_ok::is_charisma_Valid() const{
    return m_charisma_isValid;
}

qint32 OAIGet_universe_bloodlines_200_ok::getCorporationId() const {
    return m_corporation_id;
}
void OAIGet_universe_bloodlines_200_ok::setCorporationId(const qint32 &corporation_id) {
    m_corporation_id = corporation_id;
    m_corporation_id_isSet = true;
}

bool OAIGet_universe_bloodlines_200_ok::is_corporation_id_Set() const{
    return m_corporation_id_isSet;
}

bool OAIGet_universe_bloodlines_200_ok::is_corporation_id_Valid() const{
    return m_corporation_id_isValid;
}

QString OAIGet_universe_bloodlines_200_ok::getDescription() const {
    return m_description;
}
void OAIGet_universe_bloodlines_200_ok::setDescription(const QString &description) {
    m_description = description;
    m_description_isSet = true;
}

bool OAIGet_universe_bloodlines_200_ok::is_description_Set() const{
    return m_description_isSet;
}

bool OAIGet_universe_bloodlines_200_ok::is_description_Valid() const{
    return m_description_isValid;
}

qint32 OAIGet_universe_bloodlines_200_ok::getIntelligence() const {
    return m_intelligence;
}
void OAIGet_universe_bloodlines_200_ok::setIntelligence(const qint32 &intelligence) {
    m_intelligence = intelligence;
    m_intelligence_isSet = true;
}

bool OAIGet_universe_bloodlines_200_ok::is_intelligence_Set() const{
    return m_intelligence_isSet;
}

bool OAIGet_universe_bloodlines_200_ok::is_intelligence_Valid() const{
    return m_intelligence_isValid;
}

qint32 OAIGet_universe_bloodlines_200_ok::getMemory() const {
    return m_memory;
}
void OAIGet_universe_bloodlines_200_ok::setMemory(const qint32 &memory) {
    m_memory = memory;
    m_memory_isSet = true;
}

bool OAIGet_universe_bloodlines_200_ok::is_memory_Set() const{
    return m_memory_isSet;
}

bool OAIGet_universe_bloodlines_200_ok::is_memory_Valid() const{
    return m_memory_isValid;
}

QString OAIGet_universe_bloodlines_200_ok::getName() const {
    return m_name;
}
void OAIGet_universe_bloodlines_200_ok::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAIGet_universe_bloodlines_200_ok::is_name_Set() const{
    return m_name_isSet;
}

bool OAIGet_universe_bloodlines_200_ok::is_name_Valid() const{
    return m_name_isValid;
}

qint32 OAIGet_universe_bloodlines_200_ok::getPerception() const {
    return m_perception;
}
void OAIGet_universe_bloodlines_200_ok::setPerception(const qint32 &perception) {
    m_perception = perception;
    m_perception_isSet = true;
}

bool OAIGet_universe_bloodlines_200_ok::is_perception_Set() const{
    return m_perception_isSet;
}

bool OAIGet_universe_bloodlines_200_ok::is_perception_Valid() const{
    return m_perception_isValid;
}

qint32 OAIGet_universe_bloodlines_200_ok::getRaceId() const {
    return m_race_id;
}
void OAIGet_universe_bloodlines_200_ok::setRaceId(const qint32 &race_id) {
    m_race_id = race_id;
    m_race_id_isSet = true;
}

bool OAIGet_universe_bloodlines_200_ok::is_race_id_Set() const{
    return m_race_id_isSet;
}

bool OAIGet_universe_bloodlines_200_ok::is_race_id_Valid() const{
    return m_race_id_isValid;
}

qint32 OAIGet_universe_bloodlines_200_ok::getShipTypeId() const {
    return m_ship_type_id;
}
void OAIGet_universe_bloodlines_200_ok::setShipTypeId(const qint32 &ship_type_id) {
    m_ship_type_id = ship_type_id;
    m_ship_type_id_isSet = true;
}

bool OAIGet_universe_bloodlines_200_ok::is_ship_type_id_Set() const{
    return m_ship_type_id_isSet;
}

bool OAIGet_universe_bloodlines_200_ok::is_ship_type_id_Valid() const{
    return m_ship_type_id_isValid;
}

qint32 OAIGet_universe_bloodlines_200_ok::getWillpower() const {
    return m_willpower;
}
void OAIGet_universe_bloodlines_200_ok::setWillpower(const qint32 &willpower) {
    m_willpower = willpower;
    m_willpower_isSet = true;
}

bool OAIGet_universe_bloodlines_200_ok::is_willpower_Set() const{
    return m_willpower_isSet;
}

bool OAIGet_universe_bloodlines_200_ok::is_willpower_Valid() const{
    return m_willpower_isValid;
}

bool OAIGet_universe_bloodlines_200_ok::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_bloodline_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_charisma_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_corporation_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_description_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_intelligence_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_memory_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_perception_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_race_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_ship_type_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_willpower_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIGet_universe_bloodlines_200_ok::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_bloodline_id_isValid && m_charisma_isValid && m_corporation_id_isValid && m_description_isValid && m_intelligence_isValid && m_memory_isValid && m_name_isValid && m_perception_isValid && m_race_id_isValid && m_ship_type_id_isValid && m_willpower_isValid && true;
}

} // namespace OpenAPI
