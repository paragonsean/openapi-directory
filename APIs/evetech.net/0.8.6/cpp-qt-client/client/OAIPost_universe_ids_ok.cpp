/**
 * EVE Swagger Interface
 * An OpenAPI for EVE Online
 *
 * The version of the OpenAPI document: 0.8.6
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIPost_universe_ids_ok.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIPost_universe_ids_ok::OAIPost_universe_ids_ok(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIPost_universe_ids_ok::OAIPost_universe_ids_ok() {
    this->initializeModel();
}

OAIPost_universe_ids_ok::~OAIPost_universe_ids_ok() {}

void OAIPost_universe_ids_ok::initializeModel() {

    m_agents_isSet = false;
    m_agents_isValid = false;

    m_alliances_isSet = false;
    m_alliances_isValid = false;

    m_characters_isSet = false;
    m_characters_isValid = false;

    m_constellations_isSet = false;
    m_constellations_isValid = false;

    m_corporations_isSet = false;
    m_corporations_isValid = false;

    m_factions_isSet = false;
    m_factions_isValid = false;

    m_inventory_types_isSet = false;
    m_inventory_types_isValid = false;

    m_regions_isSet = false;
    m_regions_isValid = false;

    m_stations_isSet = false;
    m_stations_isValid = false;

    m_systems_isSet = false;
    m_systems_isValid = false;
}

void OAIPost_universe_ids_ok::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIPost_universe_ids_ok::fromJsonObject(QJsonObject json) {

    m_agents_isValid = ::OpenAPI::fromJsonValue(m_agents, json[QString("agents")]);
    m_agents_isSet = !json[QString("agents")].isNull() && m_agents_isValid;

    m_alliances_isValid = ::OpenAPI::fromJsonValue(m_alliances, json[QString("alliances")]);
    m_alliances_isSet = !json[QString("alliances")].isNull() && m_alliances_isValid;

    m_characters_isValid = ::OpenAPI::fromJsonValue(m_characters, json[QString("characters")]);
    m_characters_isSet = !json[QString("characters")].isNull() && m_characters_isValid;

    m_constellations_isValid = ::OpenAPI::fromJsonValue(m_constellations, json[QString("constellations")]);
    m_constellations_isSet = !json[QString("constellations")].isNull() && m_constellations_isValid;

    m_corporations_isValid = ::OpenAPI::fromJsonValue(m_corporations, json[QString("corporations")]);
    m_corporations_isSet = !json[QString("corporations")].isNull() && m_corporations_isValid;

    m_factions_isValid = ::OpenAPI::fromJsonValue(m_factions, json[QString("factions")]);
    m_factions_isSet = !json[QString("factions")].isNull() && m_factions_isValid;

    m_inventory_types_isValid = ::OpenAPI::fromJsonValue(m_inventory_types, json[QString("inventory_types")]);
    m_inventory_types_isSet = !json[QString("inventory_types")].isNull() && m_inventory_types_isValid;

    m_regions_isValid = ::OpenAPI::fromJsonValue(m_regions, json[QString("regions")]);
    m_regions_isSet = !json[QString("regions")].isNull() && m_regions_isValid;

    m_stations_isValid = ::OpenAPI::fromJsonValue(m_stations, json[QString("stations")]);
    m_stations_isSet = !json[QString("stations")].isNull() && m_stations_isValid;

    m_systems_isValid = ::OpenAPI::fromJsonValue(m_systems, json[QString("systems")]);
    m_systems_isSet = !json[QString("systems")].isNull() && m_systems_isValid;
}

QString OAIPost_universe_ids_ok::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIPost_universe_ids_ok::asJsonObject() const {
    QJsonObject obj;
    if (m_agents.size() > 0) {
        obj.insert(QString("agents"), ::OpenAPI::toJsonValue(m_agents));
    }
    if (m_alliances.size() > 0) {
        obj.insert(QString("alliances"), ::OpenAPI::toJsonValue(m_alliances));
    }
    if (m_characters.size() > 0) {
        obj.insert(QString("characters"), ::OpenAPI::toJsonValue(m_characters));
    }
    if (m_constellations.size() > 0) {
        obj.insert(QString("constellations"), ::OpenAPI::toJsonValue(m_constellations));
    }
    if (m_corporations.size() > 0) {
        obj.insert(QString("corporations"), ::OpenAPI::toJsonValue(m_corporations));
    }
    if (m_factions.size() > 0) {
        obj.insert(QString("factions"), ::OpenAPI::toJsonValue(m_factions));
    }
    if (m_inventory_types.size() > 0) {
        obj.insert(QString("inventory_types"), ::OpenAPI::toJsonValue(m_inventory_types));
    }
    if (m_regions.size() > 0) {
        obj.insert(QString("regions"), ::OpenAPI::toJsonValue(m_regions));
    }
    if (m_stations.size() > 0) {
        obj.insert(QString("stations"), ::OpenAPI::toJsonValue(m_stations));
    }
    if (m_systems.size() > 0) {
        obj.insert(QString("systems"), ::OpenAPI::toJsonValue(m_systems));
    }
    return obj;
}

QList<OAIPost_universe_ids_agent> OAIPost_universe_ids_ok::getAgents() const {
    return m_agents;
}
void OAIPost_universe_ids_ok::setAgents(const QList<OAIPost_universe_ids_agent> &agents) {
    m_agents = agents;
    m_agents_isSet = true;
}

bool OAIPost_universe_ids_ok::is_agents_Set() const{
    return m_agents_isSet;
}

bool OAIPost_universe_ids_ok::is_agents_Valid() const{
    return m_agents_isValid;
}

QList<OAIPost_universe_ids_alliance> OAIPost_universe_ids_ok::getAlliances() const {
    return m_alliances;
}
void OAIPost_universe_ids_ok::setAlliances(const QList<OAIPost_universe_ids_alliance> &alliances) {
    m_alliances = alliances;
    m_alliances_isSet = true;
}

bool OAIPost_universe_ids_ok::is_alliances_Set() const{
    return m_alliances_isSet;
}

bool OAIPost_universe_ids_ok::is_alliances_Valid() const{
    return m_alliances_isValid;
}

QList<OAIPost_universe_ids_character> OAIPost_universe_ids_ok::getCharacters() const {
    return m_characters;
}
void OAIPost_universe_ids_ok::setCharacters(const QList<OAIPost_universe_ids_character> &characters) {
    m_characters = characters;
    m_characters_isSet = true;
}

bool OAIPost_universe_ids_ok::is_characters_Set() const{
    return m_characters_isSet;
}

bool OAIPost_universe_ids_ok::is_characters_Valid() const{
    return m_characters_isValid;
}

QList<OAIPost_universe_ids_constellation> OAIPost_universe_ids_ok::getConstellations() const {
    return m_constellations;
}
void OAIPost_universe_ids_ok::setConstellations(const QList<OAIPost_universe_ids_constellation> &constellations) {
    m_constellations = constellations;
    m_constellations_isSet = true;
}

bool OAIPost_universe_ids_ok::is_constellations_Set() const{
    return m_constellations_isSet;
}

bool OAIPost_universe_ids_ok::is_constellations_Valid() const{
    return m_constellations_isValid;
}

QList<OAIPost_universe_ids_corporation> OAIPost_universe_ids_ok::getCorporations() const {
    return m_corporations;
}
void OAIPost_universe_ids_ok::setCorporations(const QList<OAIPost_universe_ids_corporation> &corporations) {
    m_corporations = corporations;
    m_corporations_isSet = true;
}

bool OAIPost_universe_ids_ok::is_corporations_Set() const{
    return m_corporations_isSet;
}

bool OAIPost_universe_ids_ok::is_corporations_Valid() const{
    return m_corporations_isValid;
}

QList<OAIPost_universe_ids_faction> OAIPost_universe_ids_ok::getFactions() const {
    return m_factions;
}
void OAIPost_universe_ids_ok::setFactions(const QList<OAIPost_universe_ids_faction> &factions) {
    m_factions = factions;
    m_factions_isSet = true;
}

bool OAIPost_universe_ids_ok::is_factions_Set() const{
    return m_factions_isSet;
}

bool OAIPost_universe_ids_ok::is_factions_Valid() const{
    return m_factions_isValid;
}

QList<OAIPost_universe_ids_inventory_type> OAIPost_universe_ids_ok::getInventoryTypes() const {
    return m_inventory_types;
}
void OAIPost_universe_ids_ok::setInventoryTypes(const QList<OAIPost_universe_ids_inventory_type> &inventory_types) {
    m_inventory_types = inventory_types;
    m_inventory_types_isSet = true;
}

bool OAIPost_universe_ids_ok::is_inventory_types_Set() const{
    return m_inventory_types_isSet;
}

bool OAIPost_universe_ids_ok::is_inventory_types_Valid() const{
    return m_inventory_types_isValid;
}

QList<OAIPost_universe_ids_region> OAIPost_universe_ids_ok::getRegions() const {
    return m_regions;
}
void OAIPost_universe_ids_ok::setRegions(const QList<OAIPost_universe_ids_region> &regions) {
    m_regions = regions;
    m_regions_isSet = true;
}

bool OAIPost_universe_ids_ok::is_regions_Set() const{
    return m_regions_isSet;
}

bool OAIPost_universe_ids_ok::is_regions_Valid() const{
    return m_regions_isValid;
}

QList<OAIPost_universe_ids_station> OAIPost_universe_ids_ok::getStations() const {
    return m_stations;
}
void OAIPost_universe_ids_ok::setStations(const QList<OAIPost_universe_ids_station> &stations) {
    m_stations = stations;
    m_stations_isSet = true;
}

bool OAIPost_universe_ids_ok::is_stations_Set() const{
    return m_stations_isSet;
}

bool OAIPost_universe_ids_ok::is_stations_Valid() const{
    return m_stations_isValid;
}

QList<OAIPost_universe_ids_system> OAIPost_universe_ids_ok::getSystems() const {
    return m_systems;
}
void OAIPost_universe_ids_ok::setSystems(const QList<OAIPost_universe_ids_system> &systems) {
    m_systems = systems;
    m_systems_isSet = true;
}

bool OAIPost_universe_ids_ok::is_systems_Set() const{
    return m_systems_isSet;
}

bool OAIPost_universe_ids_ok::is_systems_Valid() const{
    return m_systems_isValid;
}

bool OAIPost_universe_ids_ok::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_agents.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_alliances.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_characters.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_constellations.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_corporations.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_factions.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_inventory_types.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_regions.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_stations.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_systems.size() > 0) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIPost_universe_ids_ok::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
