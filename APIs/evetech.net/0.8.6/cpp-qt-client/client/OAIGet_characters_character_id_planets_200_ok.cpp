/**
 * EVE Swagger Interface
 * An OpenAPI for EVE Online
 *
 * The version of the OpenAPI document: 0.8.6
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIGet_characters_character_id_planets_200_ok.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIGet_characters_character_id_planets_200_ok::OAIGet_characters_character_id_planets_200_ok(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIGet_characters_character_id_planets_200_ok::OAIGet_characters_character_id_planets_200_ok() {
    this->initializeModel();
}

OAIGet_characters_character_id_planets_200_ok::~OAIGet_characters_character_id_planets_200_ok() {}

void OAIGet_characters_character_id_planets_200_ok::initializeModel() {

    m_last_update_isSet = false;
    m_last_update_isValid = false;

    m_num_pins_isSet = false;
    m_num_pins_isValid = false;

    m_owner_id_isSet = false;
    m_owner_id_isValid = false;

    m_planet_id_isSet = false;
    m_planet_id_isValid = false;

    m_planet_type_isSet = false;
    m_planet_type_isValid = false;

    m_solar_system_id_isSet = false;
    m_solar_system_id_isValid = false;

    m_upgrade_level_isSet = false;
    m_upgrade_level_isValid = false;
}

void OAIGet_characters_character_id_planets_200_ok::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIGet_characters_character_id_planets_200_ok::fromJsonObject(QJsonObject json) {

    m_last_update_isValid = ::OpenAPI::fromJsonValue(m_last_update, json[QString("last_update")]);
    m_last_update_isSet = !json[QString("last_update")].isNull() && m_last_update_isValid;

    m_num_pins_isValid = ::OpenAPI::fromJsonValue(m_num_pins, json[QString("num_pins")]);
    m_num_pins_isSet = !json[QString("num_pins")].isNull() && m_num_pins_isValid;

    m_owner_id_isValid = ::OpenAPI::fromJsonValue(m_owner_id, json[QString("owner_id")]);
    m_owner_id_isSet = !json[QString("owner_id")].isNull() && m_owner_id_isValid;

    m_planet_id_isValid = ::OpenAPI::fromJsonValue(m_planet_id, json[QString("planet_id")]);
    m_planet_id_isSet = !json[QString("planet_id")].isNull() && m_planet_id_isValid;

    m_planet_type_isValid = ::OpenAPI::fromJsonValue(m_planet_type, json[QString("planet_type")]);
    m_planet_type_isSet = !json[QString("planet_type")].isNull() && m_planet_type_isValid;

    m_solar_system_id_isValid = ::OpenAPI::fromJsonValue(m_solar_system_id, json[QString("solar_system_id")]);
    m_solar_system_id_isSet = !json[QString("solar_system_id")].isNull() && m_solar_system_id_isValid;

    m_upgrade_level_isValid = ::OpenAPI::fromJsonValue(m_upgrade_level, json[QString("upgrade_level")]);
    m_upgrade_level_isSet = !json[QString("upgrade_level")].isNull() && m_upgrade_level_isValid;
}

QString OAIGet_characters_character_id_planets_200_ok::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIGet_characters_character_id_planets_200_ok::asJsonObject() const {
    QJsonObject obj;
    if (m_last_update_isSet) {
        obj.insert(QString("last_update"), ::OpenAPI::toJsonValue(m_last_update));
    }
    if (m_num_pins_isSet) {
        obj.insert(QString("num_pins"), ::OpenAPI::toJsonValue(m_num_pins));
    }
    if (m_owner_id_isSet) {
        obj.insert(QString("owner_id"), ::OpenAPI::toJsonValue(m_owner_id));
    }
    if (m_planet_id_isSet) {
        obj.insert(QString("planet_id"), ::OpenAPI::toJsonValue(m_planet_id));
    }
    if (m_planet_type_isSet) {
        obj.insert(QString("planet_type"), ::OpenAPI::toJsonValue(m_planet_type));
    }
    if (m_solar_system_id_isSet) {
        obj.insert(QString("solar_system_id"), ::OpenAPI::toJsonValue(m_solar_system_id));
    }
    if (m_upgrade_level_isSet) {
        obj.insert(QString("upgrade_level"), ::OpenAPI::toJsonValue(m_upgrade_level));
    }
    return obj;
}

QDateTime OAIGet_characters_character_id_planets_200_ok::getLastUpdate() const {
    return m_last_update;
}
void OAIGet_characters_character_id_planets_200_ok::setLastUpdate(const QDateTime &last_update) {
    m_last_update = last_update;
    m_last_update_isSet = true;
}

bool OAIGet_characters_character_id_planets_200_ok::is_last_update_Set() const{
    return m_last_update_isSet;
}

bool OAIGet_characters_character_id_planets_200_ok::is_last_update_Valid() const{
    return m_last_update_isValid;
}

qint32 OAIGet_characters_character_id_planets_200_ok::getNumPins() const {
    return m_num_pins;
}
void OAIGet_characters_character_id_planets_200_ok::setNumPins(const qint32 &num_pins) {
    m_num_pins = num_pins;
    m_num_pins_isSet = true;
}

bool OAIGet_characters_character_id_planets_200_ok::is_num_pins_Set() const{
    return m_num_pins_isSet;
}

bool OAIGet_characters_character_id_planets_200_ok::is_num_pins_Valid() const{
    return m_num_pins_isValid;
}

qint32 OAIGet_characters_character_id_planets_200_ok::getOwnerId() const {
    return m_owner_id;
}
void OAIGet_characters_character_id_planets_200_ok::setOwnerId(const qint32 &owner_id) {
    m_owner_id = owner_id;
    m_owner_id_isSet = true;
}

bool OAIGet_characters_character_id_planets_200_ok::is_owner_id_Set() const{
    return m_owner_id_isSet;
}

bool OAIGet_characters_character_id_planets_200_ok::is_owner_id_Valid() const{
    return m_owner_id_isValid;
}

qint32 OAIGet_characters_character_id_planets_200_ok::getPlanetId() const {
    return m_planet_id;
}
void OAIGet_characters_character_id_planets_200_ok::setPlanetId(const qint32 &planet_id) {
    m_planet_id = planet_id;
    m_planet_id_isSet = true;
}

bool OAIGet_characters_character_id_planets_200_ok::is_planet_id_Set() const{
    return m_planet_id_isSet;
}

bool OAIGet_characters_character_id_planets_200_ok::is_planet_id_Valid() const{
    return m_planet_id_isValid;
}

QString OAIGet_characters_character_id_planets_200_ok::getPlanetType() const {
    return m_planet_type;
}
void OAIGet_characters_character_id_planets_200_ok::setPlanetType(const QString &planet_type) {
    m_planet_type = planet_type;
    m_planet_type_isSet = true;
}

bool OAIGet_characters_character_id_planets_200_ok::is_planet_type_Set() const{
    return m_planet_type_isSet;
}

bool OAIGet_characters_character_id_planets_200_ok::is_planet_type_Valid() const{
    return m_planet_type_isValid;
}

qint32 OAIGet_characters_character_id_planets_200_ok::getSolarSystemId() const {
    return m_solar_system_id;
}
void OAIGet_characters_character_id_planets_200_ok::setSolarSystemId(const qint32 &solar_system_id) {
    m_solar_system_id = solar_system_id;
    m_solar_system_id_isSet = true;
}

bool OAIGet_characters_character_id_planets_200_ok::is_solar_system_id_Set() const{
    return m_solar_system_id_isSet;
}

bool OAIGet_characters_character_id_planets_200_ok::is_solar_system_id_Valid() const{
    return m_solar_system_id_isValid;
}

qint32 OAIGet_characters_character_id_planets_200_ok::getUpgradeLevel() const {
    return m_upgrade_level;
}
void OAIGet_characters_character_id_planets_200_ok::setUpgradeLevel(const qint32 &upgrade_level) {
    m_upgrade_level = upgrade_level;
    m_upgrade_level_isSet = true;
}

bool OAIGet_characters_character_id_planets_200_ok::is_upgrade_level_Set() const{
    return m_upgrade_level_isSet;
}

bool OAIGet_characters_character_id_planets_200_ok::is_upgrade_level_Valid() const{
    return m_upgrade_level_isValid;
}

bool OAIGet_characters_character_id_planets_200_ok::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_last_update_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_num_pins_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_owner_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_planet_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_planet_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_solar_system_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_upgrade_level_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIGet_characters_character_id_planets_200_ok::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_last_update_isValid && m_num_pins_isValid && m_owner_id_isValid && m_planet_id_isValid && m_planet_type_isValid && m_solar_system_id_isValid && m_upgrade_level_isValid && true;
}

} // namespace OpenAPI
