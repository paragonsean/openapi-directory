/**
 * EVE Swagger Interface
 * An OpenAPI for EVE Online
 *
 * The version of the OpenAPI document: 0.8.6
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIPost_ui_openwindow_newmail_new_mail.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIPost_ui_openwindow_newmail_new_mail::OAIPost_ui_openwindow_newmail_new_mail(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIPost_ui_openwindow_newmail_new_mail::OAIPost_ui_openwindow_newmail_new_mail() {
    this->initializeModel();
}

OAIPost_ui_openwindow_newmail_new_mail::~OAIPost_ui_openwindow_newmail_new_mail() {}

void OAIPost_ui_openwindow_newmail_new_mail::initializeModel() {

    m_body_isSet = false;
    m_body_isValid = false;

    m_recipients_isSet = false;
    m_recipients_isValid = false;

    m_subject_isSet = false;
    m_subject_isValid = false;

    m_to_corp_or_alliance_id_isSet = false;
    m_to_corp_or_alliance_id_isValid = false;

    m_to_mailing_list_id_isSet = false;
    m_to_mailing_list_id_isValid = false;
}

void OAIPost_ui_openwindow_newmail_new_mail::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIPost_ui_openwindow_newmail_new_mail::fromJsonObject(QJsonObject json) {

    m_body_isValid = ::OpenAPI::fromJsonValue(m_body, json[QString("body")]);
    m_body_isSet = !json[QString("body")].isNull() && m_body_isValid;

    m_recipients_isValid = ::OpenAPI::fromJsonValue(m_recipients, json[QString("recipients")]);
    m_recipients_isSet = !json[QString("recipients")].isNull() && m_recipients_isValid;

    m_subject_isValid = ::OpenAPI::fromJsonValue(m_subject, json[QString("subject")]);
    m_subject_isSet = !json[QString("subject")].isNull() && m_subject_isValid;

    m_to_corp_or_alliance_id_isValid = ::OpenAPI::fromJsonValue(m_to_corp_or_alliance_id, json[QString("to_corp_or_alliance_id")]);
    m_to_corp_or_alliance_id_isSet = !json[QString("to_corp_or_alliance_id")].isNull() && m_to_corp_or_alliance_id_isValid;

    m_to_mailing_list_id_isValid = ::OpenAPI::fromJsonValue(m_to_mailing_list_id, json[QString("to_mailing_list_id")]);
    m_to_mailing_list_id_isSet = !json[QString("to_mailing_list_id")].isNull() && m_to_mailing_list_id_isValid;
}

QString OAIPost_ui_openwindow_newmail_new_mail::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIPost_ui_openwindow_newmail_new_mail::asJsonObject() const {
    QJsonObject obj;
    if (m_body_isSet) {
        obj.insert(QString("body"), ::OpenAPI::toJsonValue(m_body));
    }
    if (m_recipients.size() > 0) {
        obj.insert(QString("recipients"), ::OpenAPI::toJsonValue(m_recipients));
    }
    if (m_subject_isSet) {
        obj.insert(QString("subject"), ::OpenAPI::toJsonValue(m_subject));
    }
    if (m_to_corp_or_alliance_id_isSet) {
        obj.insert(QString("to_corp_or_alliance_id"), ::OpenAPI::toJsonValue(m_to_corp_or_alliance_id));
    }
    if (m_to_mailing_list_id_isSet) {
        obj.insert(QString("to_mailing_list_id"), ::OpenAPI::toJsonValue(m_to_mailing_list_id));
    }
    return obj;
}

QString OAIPost_ui_openwindow_newmail_new_mail::getBody() const {
    return m_body;
}
void OAIPost_ui_openwindow_newmail_new_mail::setBody(const QString &body) {
    m_body = body;
    m_body_isSet = true;
}

bool OAIPost_ui_openwindow_newmail_new_mail::is_body_Set() const{
    return m_body_isSet;
}

bool OAIPost_ui_openwindow_newmail_new_mail::is_body_Valid() const{
    return m_body_isValid;
}

QList<qint32> OAIPost_ui_openwindow_newmail_new_mail::getRecipients() const {
    return m_recipients;
}
void OAIPost_ui_openwindow_newmail_new_mail::setRecipients(const QList<qint32> &recipients) {
    m_recipients = recipients;
    m_recipients_isSet = true;
}

bool OAIPost_ui_openwindow_newmail_new_mail::is_recipients_Set() const{
    return m_recipients_isSet;
}

bool OAIPost_ui_openwindow_newmail_new_mail::is_recipients_Valid() const{
    return m_recipients_isValid;
}

QString OAIPost_ui_openwindow_newmail_new_mail::getSubject() const {
    return m_subject;
}
void OAIPost_ui_openwindow_newmail_new_mail::setSubject(const QString &subject) {
    m_subject = subject;
    m_subject_isSet = true;
}

bool OAIPost_ui_openwindow_newmail_new_mail::is_subject_Set() const{
    return m_subject_isSet;
}

bool OAIPost_ui_openwindow_newmail_new_mail::is_subject_Valid() const{
    return m_subject_isValid;
}

qint32 OAIPost_ui_openwindow_newmail_new_mail::getToCorpOrAllianceId() const {
    return m_to_corp_or_alliance_id;
}
void OAIPost_ui_openwindow_newmail_new_mail::setToCorpOrAllianceId(const qint32 &to_corp_or_alliance_id) {
    m_to_corp_or_alliance_id = to_corp_or_alliance_id;
    m_to_corp_or_alliance_id_isSet = true;
}

bool OAIPost_ui_openwindow_newmail_new_mail::is_to_corp_or_alliance_id_Set() const{
    return m_to_corp_or_alliance_id_isSet;
}

bool OAIPost_ui_openwindow_newmail_new_mail::is_to_corp_or_alliance_id_Valid() const{
    return m_to_corp_or_alliance_id_isValid;
}

qint32 OAIPost_ui_openwindow_newmail_new_mail::getToMailingListId() const {
    return m_to_mailing_list_id;
}
void OAIPost_ui_openwindow_newmail_new_mail::setToMailingListId(const qint32 &to_mailing_list_id) {
    m_to_mailing_list_id = to_mailing_list_id;
    m_to_mailing_list_id_isSet = true;
}

bool OAIPost_ui_openwindow_newmail_new_mail::is_to_mailing_list_id_Set() const{
    return m_to_mailing_list_id_isSet;
}

bool OAIPost_ui_openwindow_newmail_new_mail::is_to_mailing_list_id_Valid() const{
    return m_to_mailing_list_id_isValid;
}

bool OAIPost_ui_openwindow_newmail_new_mail::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_body_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_recipients.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_subject_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_to_corp_or_alliance_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_to_mailing_list_id_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIPost_ui_openwindow_newmail_new_mail::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_body_isValid && m_recipients_isValid && m_subject_isValid && true;
}

} // namespace OpenAPI
