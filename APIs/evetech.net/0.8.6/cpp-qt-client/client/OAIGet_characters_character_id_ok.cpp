/**
 * EVE Swagger Interface
 * An OpenAPI for EVE Online
 *
 * The version of the OpenAPI document: 0.8.6
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIGet_characters_character_id_ok.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIGet_characters_character_id_ok::OAIGet_characters_character_id_ok(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIGet_characters_character_id_ok::OAIGet_characters_character_id_ok() {
    this->initializeModel();
}

OAIGet_characters_character_id_ok::~OAIGet_characters_character_id_ok() {}

void OAIGet_characters_character_id_ok::initializeModel() {

    m_alliance_id_isSet = false;
    m_alliance_id_isValid = false;

    m_ancestry_id_isSet = false;
    m_ancestry_id_isValid = false;

    m_birthday_isSet = false;
    m_birthday_isValid = false;

    m_bloodline_id_isSet = false;
    m_bloodline_id_isValid = false;

    m_corporation_id_isSet = false;
    m_corporation_id_isValid = false;

    m_description_isSet = false;
    m_description_isValid = false;

    m_faction_id_isSet = false;
    m_faction_id_isValid = false;

    m_gender_isSet = false;
    m_gender_isValid = false;

    m_name_isSet = false;
    m_name_isValid = false;

    m_race_id_isSet = false;
    m_race_id_isValid = false;

    m_security_status_isSet = false;
    m_security_status_isValid = false;
}

void OAIGet_characters_character_id_ok::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIGet_characters_character_id_ok::fromJsonObject(QJsonObject json) {

    m_alliance_id_isValid = ::OpenAPI::fromJsonValue(m_alliance_id, json[QString("alliance_id")]);
    m_alliance_id_isSet = !json[QString("alliance_id")].isNull() && m_alliance_id_isValid;

    m_ancestry_id_isValid = ::OpenAPI::fromJsonValue(m_ancestry_id, json[QString("ancestry_id")]);
    m_ancestry_id_isSet = !json[QString("ancestry_id")].isNull() && m_ancestry_id_isValid;

    m_birthday_isValid = ::OpenAPI::fromJsonValue(m_birthday, json[QString("birthday")]);
    m_birthday_isSet = !json[QString("birthday")].isNull() && m_birthday_isValid;

    m_bloodline_id_isValid = ::OpenAPI::fromJsonValue(m_bloodline_id, json[QString("bloodline_id")]);
    m_bloodline_id_isSet = !json[QString("bloodline_id")].isNull() && m_bloodline_id_isValid;

    m_corporation_id_isValid = ::OpenAPI::fromJsonValue(m_corporation_id, json[QString("corporation_id")]);
    m_corporation_id_isSet = !json[QString("corporation_id")].isNull() && m_corporation_id_isValid;

    m_description_isValid = ::OpenAPI::fromJsonValue(m_description, json[QString("description")]);
    m_description_isSet = !json[QString("description")].isNull() && m_description_isValid;

    m_faction_id_isValid = ::OpenAPI::fromJsonValue(m_faction_id, json[QString("faction_id")]);
    m_faction_id_isSet = !json[QString("faction_id")].isNull() && m_faction_id_isValid;

    m_gender_isValid = ::OpenAPI::fromJsonValue(m_gender, json[QString("gender")]);
    m_gender_isSet = !json[QString("gender")].isNull() && m_gender_isValid;

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("name")]);
    m_name_isSet = !json[QString("name")].isNull() && m_name_isValid;

    m_race_id_isValid = ::OpenAPI::fromJsonValue(m_race_id, json[QString("race_id")]);
    m_race_id_isSet = !json[QString("race_id")].isNull() && m_race_id_isValid;

    m_security_status_isValid = ::OpenAPI::fromJsonValue(m_security_status, json[QString("security_status")]);
    m_security_status_isSet = !json[QString("security_status")].isNull() && m_security_status_isValid;
}

QString OAIGet_characters_character_id_ok::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIGet_characters_character_id_ok::asJsonObject() const {
    QJsonObject obj;
    if (m_alliance_id_isSet) {
        obj.insert(QString("alliance_id"), ::OpenAPI::toJsonValue(m_alliance_id));
    }
    if (m_ancestry_id_isSet) {
        obj.insert(QString("ancestry_id"), ::OpenAPI::toJsonValue(m_ancestry_id));
    }
    if (m_birthday_isSet) {
        obj.insert(QString("birthday"), ::OpenAPI::toJsonValue(m_birthday));
    }
    if (m_bloodline_id_isSet) {
        obj.insert(QString("bloodline_id"), ::OpenAPI::toJsonValue(m_bloodline_id));
    }
    if (m_corporation_id_isSet) {
        obj.insert(QString("corporation_id"), ::OpenAPI::toJsonValue(m_corporation_id));
    }
    if (m_description_isSet) {
        obj.insert(QString("description"), ::OpenAPI::toJsonValue(m_description));
    }
    if (m_faction_id_isSet) {
        obj.insert(QString("faction_id"), ::OpenAPI::toJsonValue(m_faction_id));
    }
    if (m_gender_isSet) {
        obj.insert(QString("gender"), ::OpenAPI::toJsonValue(m_gender));
    }
    if (m_name_isSet) {
        obj.insert(QString("name"), ::OpenAPI::toJsonValue(m_name));
    }
    if (m_race_id_isSet) {
        obj.insert(QString("race_id"), ::OpenAPI::toJsonValue(m_race_id));
    }
    if (m_security_status_isSet) {
        obj.insert(QString("security_status"), ::OpenAPI::toJsonValue(m_security_status));
    }
    return obj;
}

qint32 OAIGet_characters_character_id_ok::getAllianceId() const {
    return m_alliance_id;
}
void OAIGet_characters_character_id_ok::setAllianceId(const qint32 &alliance_id) {
    m_alliance_id = alliance_id;
    m_alliance_id_isSet = true;
}

bool OAIGet_characters_character_id_ok::is_alliance_id_Set() const{
    return m_alliance_id_isSet;
}

bool OAIGet_characters_character_id_ok::is_alliance_id_Valid() const{
    return m_alliance_id_isValid;
}

qint32 OAIGet_characters_character_id_ok::getAncestryId() const {
    return m_ancestry_id;
}
void OAIGet_characters_character_id_ok::setAncestryId(const qint32 &ancestry_id) {
    m_ancestry_id = ancestry_id;
    m_ancestry_id_isSet = true;
}

bool OAIGet_characters_character_id_ok::is_ancestry_id_Set() const{
    return m_ancestry_id_isSet;
}

bool OAIGet_characters_character_id_ok::is_ancestry_id_Valid() const{
    return m_ancestry_id_isValid;
}

QDateTime OAIGet_characters_character_id_ok::getBirthday() const {
    return m_birthday;
}
void OAIGet_characters_character_id_ok::setBirthday(const QDateTime &birthday) {
    m_birthday = birthday;
    m_birthday_isSet = true;
}

bool OAIGet_characters_character_id_ok::is_birthday_Set() const{
    return m_birthday_isSet;
}

bool OAIGet_characters_character_id_ok::is_birthday_Valid() const{
    return m_birthday_isValid;
}

qint32 OAIGet_characters_character_id_ok::getBloodlineId() const {
    return m_bloodline_id;
}
void OAIGet_characters_character_id_ok::setBloodlineId(const qint32 &bloodline_id) {
    m_bloodline_id = bloodline_id;
    m_bloodline_id_isSet = true;
}

bool OAIGet_characters_character_id_ok::is_bloodline_id_Set() const{
    return m_bloodline_id_isSet;
}

bool OAIGet_characters_character_id_ok::is_bloodline_id_Valid() const{
    return m_bloodline_id_isValid;
}

qint32 OAIGet_characters_character_id_ok::getCorporationId() const {
    return m_corporation_id;
}
void OAIGet_characters_character_id_ok::setCorporationId(const qint32 &corporation_id) {
    m_corporation_id = corporation_id;
    m_corporation_id_isSet = true;
}

bool OAIGet_characters_character_id_ok::is_corporation_id_Set() const{
    return m_corporation_id_isSet;
}

bool OAIGet_characters_character_id_ok::is_corporation_id_Valid() const{
    return m_corporation_id_isValid;
}

QString OAIGet_characters_character_id_ok::getDescription() const {
    return m_description;
}
void OAIGet_characters_character_id_ok::setDescription(const QString &description) {
    m_description = description;
    m_description_isSet = true;
}

bool OAIGet_characters_character_id_ok::is_description_Set() const{
    return m_description_isSet;
}

bool OAIGet_characters_character_id_ok::is_description_Valid() const{
    return m_description_isValid;
}

qint32 OAIGet_characters_character_id_ok::getFactionId() const {
    return m_faction_id;
}
void OAIGet_characters_character_id_ok::setFactionId(const qint32 &faction_id) {
    m_faction_id = faction_id;
    m_faction_id_isSet = true;
}

bool OAIGet_characters_character_id_ok::is_faction_id_Set() const{
    return m_faction_id_isSet;
}

bool OAIGet_characters_character_id_ok::is_faction_id_Valid() const{
    return m_faction_id_isValid;
}

QString OAIGet_characters_character_id_ok::getGender() const {
    return m_gender;
}
void OAIGet_characters_character_id_ok::setGender(const QString &gender) {
    m_gender = gender;
    m_gender_isSet = true;
}

bool OAIGet_characters_character_id_ok::is_gender_Set() const{
    return m_gender_isSet;
}

bool OAIGet_characters_character_id_ok::is_gender_Valid() const{
    return m_gender_isValid;
}

QString OAIGet_characters_character_id_ok::getName() const {
    return m_name;
}
void OAIGet_characters_character_id_ok::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAIGet_characters_character_id_ok::is_name_Set() const{
    return m_name_isSet;
}

bool OAIGet_characters_character_id_ok::is_name_Valid() const{
    return m_name_isValid;
}

qint32 OAIGet_characters_character_id_ok::getRaceId() const {
    return m_race_id;
}
void OAIGet_characters_character_id_ok::setRaceId(const qint32 &race_id) {
    m_race_id = race_id;
    m_race_id_isSet = true;
}

bool OAIGet_characters_character_id_ok::is_race_id_Set() const{
    return m_race_id_isSet;
}

bool OAIGet_characters_character_id_ok::is_race_id_Valid() const{
    return m_race_id_isValid;
}

float OAIGet_characters_character_id_ok::getSecurityStatus() const {
    return m_security_status;
}
void OAIGet_characters_character_id_ok::setSecurityStatus(const float &security_status) {
    m_security_status = security_status;
    m_security_status_isSet = true;
}

bool OAIGet_characters_character_id_ok::is_security_status_Set() const{
    return m_security_status_isSet;
}

bool OAIGet_characters_character_id_ok::is_security_status_Valid() const{
    return m_security_status_isValid;
}

bool OAIGet_characters_character_id_ok::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_alliance_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_ancestry_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_birthday_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_bloodline_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_corporation_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_description_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_faction_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_gender_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_race_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_security_status_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIGet_characters_character_id_ok::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_birthday_isValid && m_bloodline_id_isValid && m_corporation_id_isValid && m_gender_isValid && m_name_isValid && m_race_id_isValid && true;
}

} // namespace OpenAPI
