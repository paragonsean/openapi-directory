/**
 * EVE Swagger Interface
 * An OpenAPI for EVE Online
 *
 * The version of the OpenAPI document: 0.8.6
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIGet_characters_character_id_notifications_200_ok.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIGet_characters_character_id_notifications_200_ok::OAIGet_characters_character_id_notifications_200_ok(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIGet_characters_character_id_notifications_200_ok::OAIGet_characters_character_id_notifications_200_ok() {
    this->initializeModel();
}

OAIGet_characters_character_id_notifications_200_ok::~OAIGet_characters_character_id_notifications_200_ok() {}

void OAIGet_characters_character_id_notifications_200_ok::initializeModel() {

    m_is_read_isSet = false;
    m_is_read_isValid = false;

    m_notification_id_isSet = false;
    m_notification_id_isValid = false;

    m_sender_id_isSet = false;
    m_sender_id_isValid = false;

    m_sender_type_isSet = false;
    m_sender_type_isValid = false;

    m_text_isSet = false;
    m_text_isValid = false;

    m_timestamp_isSet = false;
    m_timestamp_isValid = false;

    m_type_isSet = false;
    m_type_isValid = false;
}

void OAIGet_characters_character_id_notifications_200_ok::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIGet_characters_character_id_notifications_200_ok::fromJsonObject(QJsonObject json) {

    m_is_read_isValid = ::OpenAPI::fromJsonValue(m_is_read, json[QString("is_read")]);
    m_is_read_isSet = !json[QString("is_read")].isNull() && m_is_read_isValid;

    m_notification_id_isValid = ::OpenAPI::fromJsonValue(m_notification_id, json[QString("notification_id")]);
    m_notification_id_isSet = !json[QString("notification_id")].isNull() && m_notification_id_isValid;

    m_sender_id_isValid = ::OpenAPI::fromJsonValue(m_sender_id, json[QString("sender_id")]);
    m_sender_id_isSet = !json[QString("sender_id")].isNull() && m_sender_id_isValid;

    m_sender_type_isValid = ::OpenAPI::fromJsonValue(m_sender_type, json[QString("sender_type")]);
    m_sender_type_isSet = !json[QString("sender_type")].isNull() && m_sender_type_isValid;

    m_text_isValid = ::OpenAPI::fromJsonValue(m_text, json[QString("text")]);
    m_text_isSet = !json[QString("text")].isNull() && m_text_isValid;

    m_timestamp_isValid = ::OpenAPI::fromJsonValue(m_timestamp, json[QString("timestamp")]);
    m_timestamp_isSet = !json[QString("timestamp")].isNull() && m_timestamp_isValid;

    m_type_isValid = ::OpenAPI::fromJsonValue(m_type, json[QString("type")]);
    m_type_isSet = !json[QString("type")].isNull() && m_type_isValid;
}

QString OAIGet_characters_character_id_notifications_200_ok::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIGet_characters_character_id_notifications_200_ok::asJsonObject() const {
    QJsonObject obj;
    if (m_is_read_isSet) {
        obj.insert(QString("is_read"), ::OpenAPI::toJsonValue(m_is_read));
    }
    if (m_notification_id_isSet) {
        obj.insert(QString("notification_id"), ::OpenAPI::toJsonValue(m_notification_id));
    }
    if (m_sender_id_isSet) {
        obj.insert(QString("sender_id"), ::OpenAPI::toJsonValue(m_sender_id));
    }
    if (m_sender_type_isSet) {
        obj.insert(QString("sender_type"), ::OpenAPI::toJsonValue(m_sender_type));
    }
    if (m_text_isSet) {
        obj.insert(QString("text"), ::OpenAPI::toJsonValue(m_text));
    }
    if (m_timestamp_isSet) {
        obj.insert(QString("timestamp"), ::OpenAPI::toJsonValue(m_timestamp));
    }
    if (m_type_isSet) {
        obj.insert(QString("type"), ::OpenAPI::toJsonValue(m_type));
    }
    return obj;
}

bool OAIGet_characters_character_id_notifications_200_ok::isIsRead() const {
    return m_is_read;
}
void OAIGet_characters_character_id_notifications_200_ok::setIsRead(const bool &is_read) {
    m_is_read = is_read;
    m_is_read_isSet = true;
}

bool OAIGet_characters_character_id_notifications_200_ok::is_is_read_Set() const{
    return m_is_read_isSet;
}

bool OAIGet_characters_character_id_notifications_200_ok::is_is_read_Valid() const{
    return m_is_read_isValid;
}

qint64 OAIGet_characters_character_id_notifications_200_ok::getNotificationId() const {
    return m_notification_id;
}
void OAIGet_characters_character_id_notifications_200_ok::setNotificationId(const qint64 &notification_id) {
    m_notification_id = notification_id;
    m_notification_id_isSet = true;
}

bool OAIGet_characters_character_id_notifications_200_ok::is_notification_id_Set() const{
    return m_notification_id_isSet;
}

bool OAIGet_characters_character_id_notifications_200_ok::is_notification_id_Valid() const{
    return m_notification_id_isValid;
}

qint32 OAIGet_characters_character_id_notifications_200_ok::getSenderId() const {
    return m_sender_id;
}
void OAIGet_characters_character_id_notifications_200_ok::setSenderId(const qint32 &sender_id) {
    m_sender_id = sender_id;
    m_sender_id_isSet = true;
}

bool OAIGet_characters_character_id_notifications_200_ok::is_sender_id_Set() const{
    return m_sender_id_isSet;
}

bool OAIGet_characters_character_id_notifications_200_ok::is_sender_id_Valid() const{
    return m_sender_id_isValid;
}

QString OAIGet_characters_character_id_notifications_200_ok::getSenderType() const {
    return m_sender_type;
}
void OAIGet_characters_character_id_notifications_200_ok::setSenderType(const QString &sender_type) {
    m_sender_type = sender_type;
    m_sender_type_isSet = true;
}

bool OAIGet_characters_character_id_notifications_200_ok::is_sender_type_Set() const{
    return m_sender_type_isSet;
}

bool OAIGet_characters_character_id_notifications_200_ok::is_sender_type_Valid() const{
    return m_sender_type_isValid;
}

QString OAIGet_characters_character_id_notifications_200_ok::getText() const {
    return m_text;
}
void OAIGet_characters_character_id_notifications_200_ok::setText(const QString &text) {
    m_text = text;
    m_text_isSet = true;
}

bool OAIGet_characters_character_id_notifications_200_ok::is_text_Set() const{
    return m_text_isSet;
}

bool OAIGet_characters_character_id_notifications_200_ok::is_text_Valid() const{
    return m_text_isValid;
}

QDateTime OAIGet_characters_character_id_notifications_200_ok::getTimestamp() const {
    return m_timestamp;
}
void OAIGet_characters_character_id_notifications_200_ok::setTimestamp(const QDateTime &timestamp) {
    m_timestamp = timestamp;
    m_timestamp_isSet = true;
}

bool OAIGet_characters_character_id_notifications_200_ok::is_timestamp_Set() const{
    return m_timestamp_isSet;
}

bool OAIGet_characters_character_id_notifications_200_ok::is_timestamp_Valid() const{
    return m_timestamp_isValid;
}

QString OAIGet_characters_character_id_notifications_200_ok::getType() const {
    return m_type;
}
void OAIGet_characters_character_id_notifications_200_ok::setType(const QString &type) {
    m_type = type;
    m_type_isSet = true;
}

bool OAIGet_characters_character_id_notifications_200_ok::is_type_Set() const{
    return m_type_isSet;
}

bool OAIGet_characters_character_id_notifications_200_ok::is_type_Valid() const{
    return m_type_isValid;
}

bool OAIGet_characters_character_id_notifications_200_ok::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_is_read_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_notification_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_sender_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_sender_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_text_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_timestamp_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_type_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIGet_characters_character_id_notifications_200_ok::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_notification_id_isValid && m_sender_id_isValid && m_sender_type_isValid && m_timestamp_isValid && m_type_isValid && true;
}

} // namespace OpenAPI
