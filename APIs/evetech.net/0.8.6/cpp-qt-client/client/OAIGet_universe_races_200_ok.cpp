/**
 * EVE Swagger Interface
 * An OpenAPI for EVE Online
 *
 * The version of the OpenAPI document: 0.8.6
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIGet_universe_races_200_ok.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIGet_universe_races_200_ok::OAIGet_universe_races_200_ok(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIGet_universe_races_200_ok::OAIGet_universe_races_200_ok() {
    this->initializeModel();
}

OAIGet_universe_races_200_ok::~OAIGet_universe_races_200_ok() {}

void OAIGet_universe_races_200_ok::initializeModel() {

    m_alliance_id_isSet = false;
    m_alliance_id_isValid = false;

    m_description_isSet = false;
    m_description_isValid = false;

    m_name_isSet = false;
    m_name_isValid = false;

    m_race_id_isSet = false;
    m_race_id_isValid = false;
}

void OAIGet_universe_races_200_ok::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIGet_universe_races_200_ok::fromJsonObject(QJsonObject json) {

    m_alliance_id_isValid = ::OpenAPI::fromJsonValue(m_alliance_id, json[QString("alliance_id")]);
    m_alliance_id_isSet = !json[QString("alliance_id")].isNull() && m_alliance_id_isValid;

    m_description_isValid = ::OpenAPI::fromJsonValue(m_description, json[QString("description")]);
    m_description_isSet = !json[QString("description")].isNull() && m_description_isValid;

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("name")]);
    m_name_isSet = !json[QString("name")].isNull() && m_name_isValid;

    m_race_id_isValid = ::OpenAPI::fromJsonValue(m_race_id, json[QString("race_id")]);
    m_race_id_isSet = !json[QString("race_id")].isNull() && m_race_id_isValid;
}

QString OAIGet_universe_races_200_ok::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIGet_universe_races_200_ok::asJsonObject() const {
    QJsonObject obj;
    if (m_alliance_id_isSet) {
        obj.insert(QString("alliance_id"), ::OpenAPI::toJsonValue(m_alliance_id));
    }
    if (m_description_isSet) {
        obj.insert(QString("description"), ::OpenAPI::toJsonValue(m_description));
    }
    if (m_name_isSet) {
        obj.insert(QString("name"), ::OpenAPI::toJsonValue(m_name));
    }
    if (m_race_id_isSet) {
        obj.insert(QString("race_id"), ::OpenAPI::toJsonValue(m_race_id));
    }
    return obj;
}

qint32 OAIGet_universe_races_200_ok::getAllianceId() const {
    return m_alliance_id;
}
void OAIGet_universe_races_200_ok::setAllianceId(const qint32 &alliance_id) {
    m_alliance_id = alliance_id;
    m_alliance_id_isSet = true;
}

bool OAIGet_universe_races_200_ok::is_alliance_id_Set() const{
    return m_alliance_id_isSet;
}

bool OAIGet_universe_races_200_ok::is_alliance_id_Valid() const{
    return m_alliance_id_isValid;
}

QString OAIGet_universe_races_200_ok::getDescription() const {
    return m_description;
}
void OAIGet_universe_races_200_ok::setDescription(const QString &description) {
    m_description = description;
    m_description_isSet = true;
}

bool OAIGet_universe_races_200_ok::is_description_Set() const{
    return m_description_isSet;
}

bool OAIGet_universe_races_200_ok::is_description_Valid() const{
    return m_description_isValid;
}

QString OAIGet_universe_races_200_ok::getName() const {
    return m_name;
}
void OAIGet_universe_races_200_ok::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAIGet_universe_races_200_ok::is_name_Set() const{
    return m_name_isSet;
}

bool OAIGet_universe_races_200_ok::is_name_Valid() const{
    return m_name_isValid;
}

qint32 OAIGet_universe_races_200_ok::getRaceId() const {
    return m_race_id;
}
void OAIGet_universe_races_200_ok::setRaceId(const qint32 &race_id) {
    m_race_id = race_id;
    m_race_id_isSet = true;
}

bool OAIGet_universe_races_200_ok::is_race_id_Set() const{
    return m_race_id_isSet;
}

bool OAIGet_universe_races_200_ok::is_race_id_Valid() const{
    return m_race_id_isValid;
}

bool OAIGet_universe_races_200_ok::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_alliance_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_description_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_race_id_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIGet_universe_races_200_ok::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_alliance_id_isValid && m_description_isValid && m_name_isValid && m_race_id_isValid && true;
}

} // namespace OpenAPI
