/**
 * EVE Swagger Interface
 * An OpenAPI for EVE Online
 *
 * The version of the OpenAPI document: 0.8.6
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIGet_characters_character_id_attributes_ok.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIGet_characters_character_id_attributes_ok::OAIGet_characters_character_id_attributes_ok(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIGet_characters_character_id_attributes_ok::OAIGet_characters_character_id_attributes_ok() {
    this->initializeModel();
}

OAIGet_characters_character_id_attributes_ok::~OAIGet_characters_character_id_attributes_ok() {}

void OAIGet_characters_character_id_attributes_ok::initializeModel() {

    m_accrued_remap_cooldown_date_isSet = false;
    m_accrued_remap_cooldown_date_isValid = false;

    m_bonus_remaps_isSet = false;
    m_bonus_remaps_isValid = false;

    m_charisma_isSet = false;
    m_charisma_isValid = false;

    m_intelligence_isSet = false;
    m_intelligence_isValid = false;

    m_last_remap_date_isSet = false;
    m_last_remap_date_isValid = false;

    m_memory_isSet = false;
    m_memory_isValid = false;

    m_perception_isSet = false;
    m_perception_isValid = false;

    m_willpower_isSet = false;
    m_willpower_isValid = false;
}

void OAIGet_characters_character_id_attributes_ok::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIGet_characters_character_id_attributes_ok::fromJsonObject(QJsonObject json) {

    m_accrued_remap_cooldown_date_isValid = ::OpenAPI::fromJsonValue(m_accrued_remap_cooldown_date, json[QString("accrued_remap_cooldown_date")]);
    m_accrued_remap_cooldown_date_isSet = !json[QString("accrued_remap_cooldown_date")].isNull() && m_accrued_remap_cooldown_date_isValid;

    m_bonus_remaps_isValid = ::OpenAPI::fromJsonValue(m_bonus_remaps, json[QString("bonus_remaps")]);
    m_bonus_remaps_isSet = !json[QString("bonus_remaps")].isNull() && m_bonus_remaps_isValid;

    m_charisma_isValid = ::OpenAPI::fromJsonValue(m_charisma, json[QString("charisma")]);
    m_charisma_isSet = !json[QString("charisma")].isNull() && m_charisma_isValid;

    m_intelligence_isValid = ::OpenAPI::fromJsonValue(m_intelligence, json[QString("intelligence")]);
    m_intelligence_isSet = !json[QString("intelligence")].isNull() && m_intelligence_isValid;

    m_last_remap_date_isValid = ::OpenAPI::fromJsonValue(m_last_remap_date, json[QString("last_remap_date")]);
    m_last_remap_date_isSet = !json[QString("last_remap_date")].isNull() && m_last_remap_date_isValid;

    m_memory_isValid = ::OpenAPI::fromJsonValue(m_memory, json[QString("memory")]);
    m_memory_isSet = !json[QString("memory")].isNull() && m_memory_isValid;

    m_perception_isValid = ::OpenAPI::fromJsonValue(m_perception, json[QString("perception")]);
    m_perception_isSet = !json[QString("perception")].isNull() && m_perception_isValid;

    m_willpower_isValid = ::OpenAPI::fromJsonValue(m_willpower, json[QString("willpower")]);
    m_willpower_isSet = !json[QString("willpower")].isNull() && m_willpower_isValid;
}

QString OAIGet_characters_character_id_attributes_ok::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIGet_characters_character_id_attributes_ok::asJsonObject() const {
    QJsonObject obj;
    if (m_accrued_remap_cooldown_date_isSet) {
        obj.insert(QString("accrued_remap_cooldown_date"), ::OpenAPI::toJsonValue(m_accrued_remap_cooldown_date));
    }
    if (m_bonus_remaps_isSet) {
        obj.insert(QString("bonus_remaps"), ::OpenAPI::toJsonValue(m_bonus_remaps));
    }
    if (m_charisma_isSet) {
        obj.insert(QString("charisma"), ::OpenAPI::toJsonValue(m_charisma));
    }
    if (m_intelligence_isSet) {
        obj.insert(QString("intelligence"), ::OpenAPI::toJsonValue(m_intelligence));
    }
    if (m_last_remap_date_isSet) {
        obj.insert(QString("last_remap_date"), ::OpenAPI::toJsonValue(m_last_remap_date));
    }
    if (m_memory_isSet) {
        obj.insert(QString("memory"), ::OpenAPI::toJsonValue(m_memory));
    }
    if (m_perception_isSet) {
        obj.insert(QString("perception"), ::OpenAPI::toJsonValue(m_perception));
    }
    if (m_willpower_isSet) {
        obj.insert(QString("willpower"), ::OpenAPI::toJsonValue(m_willpower));
    }
    return obj;
}

QDateTime OAIGet_characters_character_id_attributes_ok::getAccruedRemapCooldownDate() const {
    return m_accrued_remap_cooldown_date;
}
void OAIGet_characters_character_id_attributes_ok::setAccruedRemapCooldownDate(const QDateTime &accrued_remap_cooldown_date) {
    m_accrued_remap_cooldown_date = accrued_remap_cooldown_date;
    m_accrued_remap_cooldown_date_isSet = true;
}

bool OAIGet_characters_character_id_attributes_ok::is_accrued_remap_cooldown_date_Set() const{
    return m_accrued_remap_cooldown_date_isSet;
}

bool OAIGet_characters_character_id_attributes_ok::is_accrued_remap_cooldown_date_Valid() const{
    return m_accrued_remap_cooldown_date_isValid;
}

qint32 OAIGet_characters_character_id_attributes_ok::getBonusRemaps() const {
    return m_bonus_remaps;
}
void OAIGet_characters_character_id_attributes_ok::setBonusRemaps(const qint32 &bonus_remaps) {
    m_bonus_remaps = bonus_remaps;
    m_bonus_remaps_isSet = true;
}

bool OAIGet_characters_character_id_attributes_ok::is_bonus_remaps_Set() const{
    return m_bonus_remaps_isSet;
}

bool OAIGet_characters_character_id_attributes_ok::is_bonus_remaps_Valid() const{
    return m_bonus_remaps_isValid;
}

qint32 OAIGet_characters_character_id_attributes_ok::getCharisma() const {
    return m_charisma;
}
void OAIGet_characters_character_id_attributes_ok::setCharisma(const qint32 &charisma) {
    m_charisma = charisma;
    m_charisma_isSet = true;
}

bool OAIGet_characters_character_id_attributes_ok::is_charisma_Set() const{
    return m_charisma_isSet;
}

bool OAIGet_characters_character_id_attributes_ok::is_charisma_Valid() const{
    return m_charisma_isValid;
}

qint32 OAIGet_characters_character_id_attributes_ok::getIntelligence() const {
    return m_intelligence;
}
void OAIGet_characters_character_id_attributes_ok::setIntelligence(const qint32 &intelligence) {
    m_intelligence = intelligence;
    m_intelligence_isSet = true;
}

bool OAIGet_characters_character_id_attributes_ok::is_intelligence_Set() const{
    return m_intelligence_isSet;
}

bool OAIGet_characters_character_id_attributes_ok::is_intelligence_Valid() const{
    return m_intelligence_isValid;
}

QDateTime OAIGet_characters_character_id_attributes_ok::getLastRemapDate() const {
    return m_last_remap_date;
}
void OAIGet_characters_character_id_attributes_ok::setLastRemapDate(const QDateTime &last_remap_date) {
    m_last_remap_date = last_remap_date;
    m_last_remap_date_isSet = true;
}

bool OAIGet_characters_character_id_attributes_ok::is_last_remap_date_Set() const{
    return m_last_remap_date_isSet;
}

bool OAIGet_characters_character_id_attributes_ok::is_last_remap_date_Valid() const{
    return m_last_remap_date_isValid;
}

qint32 OAIGet_characters_character_id_attributes_ok::getMemory() const {
    return m_memory;
}
void OAIGet_characters_character_id_attributes_ok::setMemory(const qint32 &memory) {
    m_memory = memory;
    m_memory_isSet = true;
}

bool OAIGet_characters_character_id_attributes_ok::is_memory_Set() const{
    return m_memory_isSet;
}

bool OAIGet_characters_character_id_attributes_ok::is_memory_Valid() const{
    return m_memory_isValid;
}

qint32 OAIGet_characters_character_id_attributes_ok::getPerception() const {
    return m_perception;
}
void OAIGet_characters_character_id_attributes_ok::setPerception(const qint32 &perception) {
    m_perception = perception;
    m_perception_isSet = true;
}

bool OAIGet_characters_character_id_attributes_ok::is_perception_Set() const{
    return m_perception_isSet;
}

bool OAIGet_characters_character_id_attributes_ok::is_perception_Valid() const{
    return m_perception_isValid;
}

qint32 OAIGet_characters_character_id_attributes_ok::getWillpower() const {
    return m_willpower;
}
void OAIGet_characters_character_id_attributes_ok::setWillpower(const qint32 &willpower) {
    m_willpower = willpower;
    m_willpower_isSet = true;
}

bool OAIGet_characters_character_id_attributes_ok::is_willpower_Set() const{
    return m_willpower_isSet;
}

bool OAIGet_characters_character_id_attributes_ok::is_willpower_Valid() const{
    return m_willpower_isValid;
}

bool OAIGet_characters_character_id_attributes_ok::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_accrued_remap_cooldown_date_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_bonus_remaps_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_charisma_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_intelligence_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_last_remap_date_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_memory_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_perception_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_willpower_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIGet_characters_character_id_attributes_ok::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_charisma_isValid && m_intelligence_isValid && m_memory_isValid && m_perception_isValid && m_willpower_isValid && true;
}

} // namespace OpenAPI
