/**
 * EVE Swagger Interface
 * An OpenAPI for EVE Online
 *
 * The version of the OpenAPI document: 0.8.6
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIGet_characters_character_id_skills_skill.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIGet_characters_character_id_skills_skill::OAIGet_characters_character_id_skills_skill(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIGet_characters_character_id_skills_skill::OAIGet_characters_character_id_skills_skill() {
    this->initializeModel();
}

OAIGet_characters_character_id_skills_skill::~OAIGet_characters_character_id_skills_skill() {}

void OAIGet_characters_character_id_skills_skill::initializeModel() {

    m_active_skill_level_isSet = false;
    m_active_skill_level_isValid = false;

    m_skill_id_isSet = false;
    m_skill_id_isValid = false;

    m_skillpoints_in_skill_isSet = false;
    m_skillpoints_in_skill_isValid = false;

    m_trained_skill_level_isSet = false;
    m_trained_skill_level_isValid = false;
}

void OAIGet_characters_character_id_skills_skill::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIGet_characters_character_id_skills_skill::fromJsonObject(QJsonObject json) {

    m_active_skill_level_isValid = ::OpenAPI::fromJsonValue(m_active_skill_level, json[QString("active_skill_level")]);
    m_active_skill_level_isSet = !json[QString("active_skill_level")].isNull() && m_active_skill_level_isValid;

    m_skill_id_isValid = ::OpenAPI::fromJsonValue(m_skill_id, json[QString("skill_id")]);
    m_skill_id_isSet = !json[QString("skill_id")].isNull() && m_skill_id_isValid;

    m_skillpoints_in_skill_isValid = ::OpenAPI::fromJsonValue(m_skillpoints_in_skill, json[QString("skillpoints_in_skill")]);
    m_skillpoints_in_skill_isSet = !json[QString("skillpoints_in_skill")].isNull() && m_skillpoints_in_skill_isValid;

    m_trained_skill_level_isValid = ::OpenAPI::fromJsonValue(m_trained_skill_level, json[QString("trained_skill_level")]);
    m_trained_skill_level_isSet = !json[QString("trained_skill_level")].isNull() && m_trained_skill_level_isValid;
}

QString OAIGet_characters_character_id_skills_skill::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIGet_characters_character_id_skills_skill::asJsonObject() const {
    QJsonObject obj;
    if (m_active_skill_level_isSet) {
        obj.insert(QString("active_skill_level"), ::OpenAPI::toJsonValue(m_active_skill_level));
    }
    if (m_skill_id_isSet) {
        obj.insert(QString("skill_id"), ::OpenAPI::toJsonValue(m_skill_id));
    }
    if (m_skillpoints_in_skill_isSet) {
        obj.insert(QString("skillpoints_in_skill"), ::OpenAPI::toJsonValue(m_skillpoints_in_skill));
    }
    if (m_trained_skill_level_isSet) {
        obj.insert(QString("trained_skill_level"), ::OpenAPI::toJsonValue(m_trained_skill_level));
    }
    return obj;
}

qint32 OAIGet_characters_character_id_skills_skill::getActiveSkillLevel() const {
    return m_active_skill_level;
}
void OAIGet_characters_character_id_skills_skill::setActiveSkillLevel(const qint32 &active_skill_level) {
    m_active_skill_level = active_skill_level;
    m_active_skill_level_isSet = true;
}

bool OAIGet_characters_character_id_skills_skill::is_active_skill_level_Set() const{
    return m_active_skill_level_isSet;
}

bool OAIGet_characters_character_id_skills_skill::is_active_skill_level_Valid() const{
    return m_active_skill_level_isValid;
}

qint32 OAIGet_characters_character_id_skills_skill::getSkillId() const {
    return m_skill_id;
}
void OAIGet_characters_character_id_skills_skill::setSkillId(const qint32 &skill_id) {
    m_skill_id = skill_id;
    m_skill_id_isSet = true;
}

bool OAIGet_characters_character_id_skills_skill::is_skill_id_Set() const{
    return m_skill_id_isSet;
}

bool OAIGet_characters_character_id_skills_skill::is_skill_id_Valid() const{
    return m_skill_id_isValid;
}

qint64 OAIGet_characters_character_id_skills_skill::getSkillpointsInSkill() const {
    return m_skillpoints_in_skill;
}
void OAIGet_characters_character_id_skills_skill::setSkillpointsInSkill(const qint64 &skillpoints_in_skill) {
    m_skillpoints_in_skill = skillpoints_in_skill;
    m_skillpoints_in_skill_isSet = true;
}

bool OAIGet_characters_character_id_skills_skill::is_skillpoints_in_skill_Set() const{
    return m_skillpoints_in_skill_isSet;
}

bool OAIGet_characters_character_id_skills_skill::is_skillpoints_in_skill_Valid() const{
    return m_skillpoints_in_skill_isValid;
}

qint32 OAIGet_characters_character_id_skills_skill::getTrainedSkillLevel() const {
    return m_trained_skill_level;
}
void OAIGet_characters_character_id_skills_skill::setTrainedSkillLevel(const qint32 &trained_skill_level) {
    m_trained_skill_level = trained_skill_level;
    m_trained_skill_level_isSet = true;
}

bool OAIGet_characters_character_id_skills_skill::is_trained_skill_level_Set() const{
    return m_trained_skill_level_isSet;
}

bool OAIGet_characters_character_id_skills_skill::is_trained_skill_level_Valid() const{
    return m_trained_skill_level_isValid;
}

bool OAIGet_characters_character_id_skills_skill::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_active_skill_level_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_skill_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_skillpoints_in_skill_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_trained_skill_level_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIGet_characters_character_id_skills_skill::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_active_skill_level_isValid && m_skill_id_isValid && m_skillpoints_in_skill_isValid && m_trained_skill_level_isValid && true;
}

} // namespace OpenAPI
