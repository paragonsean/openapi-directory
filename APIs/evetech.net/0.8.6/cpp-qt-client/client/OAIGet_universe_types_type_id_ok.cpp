/**
 * EVE Swagger Interface
 * An OpenAPI for EVE Online
 *
 * The version of the OpenAPI document: 0.8.6
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIGet_universe_types_type_id_ok.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIGet_universe_types_type_id_ok::OAIGet_universe_types_type_id_ok(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIGet_universe_types_type_id_ok::OAIGet_universe_types_type_id_ok() {
    this->initializeModel();
}

OAIGet_universe_types_type_id_ok::~OAIGet_universe_types_type_id_ok() {}

void OAIGet_universe_types_type_id_ok::initializeModel() {

    m_capacity_isSet = false;
    m_capacity_isValid = false;

    m_description_isSet = false;
    m_description_isValid = false;

    m_dogma_attributes_isSet = false;
    m_dogma_attributes_isValid = false;

    m_dogma_effects_isSet = false;
    m_dogma_effects_isValid = false;

    m_graphic_id_isSet = false;
    m_graphic_id_isValid = false;

    m_group_id_isSet = false;
    m_group_id_isValid = false;

    m_icon_id_isSet = false;
    m_icon_id_isValid = false;

    m_market_group_id_isSet = false;
    m_market_group_id_isValid = false;

    m_mass_isSet = false;
    m_mass_isValid = false;

    m_name_isSet = false;
    m_name_isValid = false;

    m_packaged_volume_isSet = false;
    m_packaged_volume_isValid = false;

    m_portion_size_isSet = false;
    m_portion_size_isValid = false;

    m_published_isSet = false;
    m_published_isValid = false;

    m_radius_isSet = false;
    m_radius_isValid = false;

    m_type_id_isSet = false;
    m_type_id_isValid = false;

    m_volume_isSet = false;
    m_volume_isValid = false;
}

void OAIGet_universe_types_type_id_ok::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIGet_universe_types_type_id_ok::fromJsonObject(QJsonObject json) {

    m_capacity_isValid = ::OpenAPI::fromJsonValue(m_capacity, json[QString("capacity")]);
    m_capacity_isSet = !json[QString("capacity")].isNull() && m_capacity_isValid;

    m_description_isValid = ::OpenAPI::fromJsonValue(m_description, json[QString("description")]);
    m_description_isSet = !json[QString("description")].isNull() && m_description_isValid;

    m_dogma_attributes_isValid = ::OpenAPI::fromJsonValue(m_dogma_attributes, json[QString("dogma_attributes")]);
    m_dogma_attributes_isSet = !json[QString("dogma_attributes")].isNull() && m_dogma_attributes_isValid;

    m_dogma_effects_isValid = ::OpenAPI::fromJsonValue(m_dogma_effects, json[QString("dogma_effects")]);
    m_dogma_effects_isSet = !json[QString("dogma_effects")].isNull() && m_dogma_effects_isValid;

    m_graphic_id_isValid = ::OpenAPI::fromJsonValue(m_graphic_id, json[QString("graphic_id")]);
    m_graphic_id_isSet = !json[QString("graphic_id")].isNull() && m_graphic_id_isValid;

    m_group_id_isValid = ::OpenAPI::fromJsonValue(m_group_id, json[QString("group_id")]);
    m_group_id_isSet = !json[QString("group_id")].isNull() && m_group_id_isValid;

    m_icon_id_isValid = ::OpenAPI::fromJsonValue(m_icon_id, json[QString("icon_id")]);
    m_icon_id_isSet = !json[QString("icon_id")].isNull() && m_icon_id_isValid;

    m_market_group_id_isValid = ::OpenAPI::fromJsonValue(m_market_group_id, json[QString("market_group_id")]);
    m_market_group_id_isSet = !json[QString("market_group_id")].isNull() && m_market_group_id_isValid;

    m_mass_isValid = ::OpenAPI::fromJsonValue(m_mass, json[QString("mass")]);
    m_mass_isSet = !json[QString("mass")].isNull() && m_mass_isValid;

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("name")]);
    m_name_isSet = !json[QString("name")].isNull() && m_name_isValid;

    m_packaged_volume_isValid = ::OpenAPI::fromJsonValue(m_packaged_volume, json[QString("packaged_volume")]);
    m_packaged_volume_isSet = !json[QString("packaged_volume")].isNull() && m_packaged_volume_isValid;

    m_portion_size_isValid = ::OpenAPI::fromJsonValue(m_portion_size, json[QString("portion_size")]);
    m_portion_size_isSet = !json[QString("portion_size")].isNull() && m_portion_size_isValid;

    m_published_isValid = ::OpenAPI::fromJsonValue(m_published, json[QString("published")]);
    m_published_isSet = !json[QString("published")].isNull() && m_published_isValid;

    m_radius_isValid = ::OpenAPI::fromJsonValue(m_radius, json[QString("radius")]);
    m_radius_isSet = !json[QString("radius")].isNull() && m_radius_isValid;

    m_type_id_isValid = ::OpenAPI::fromJsonValue(m_type_id, json[QString("type_id")]);
    m_type_id_isSet = !json[QString("type_id")].isNull() && m_type_id_isValid;

    m_volume_isValid = ::OpenAPI::fromJsonValue(m_volume, json[QString("volume")]);
    m_volume_isSet = !json[QString("volume")].isNull() && m_volume_isValid;
}

QString OAIGet_universe_types_type_id_ok::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIGet_universe_types_type_id_ok::asJsonObject() const {
    QJsonObject obj;
    if (m_capacity_isSet) {
        obj.insert(QString("capacity"), ::OpenAPI::toJsonValue(m_capacity));
    }
    if (m_description_isSet) {
        obj.insert(QString("description"), ::OpenAPI::toJsonValue(m_description));
    }
    if (m_dogma_attributes.size() > 0) {
        obj.insert(QString("dogma_attributes"), ::OpenAPI::toJsonValue(m_dogma_attributes));
    }
    if (m_dogma_effects.size() > 0) {
        obj.insert(QString("dogma_effects"), ::OpenAPI::toJsonValue(m_dogma_effects));
    }
    if (m_graphic_id_isSet) {
        obj.insert(QString("graphic_id"), ::OpenAPI::toJsonValue(m_graphic_id));
    }
    if (m_group_id_isSet) {
        obj.insert(QString("group_id"), ::OpenAPI::toJsonValue(m_group_id));
    }
    if (m_icon_id_isSet) {
        obj.insert(QString("icon_id"), ::OpenAPI::toJsonValue(m_icon_id));
    }
    if (m_market_group_id_isSet) {
        obj.insert(QString("market_group_id"), ::OpenAPI::toJsonValue(m_market_group_id));
    }
    if (m_mass_isSet) {
        obj.insert(QString("mass"), ::OpenAPI::toJsonValue(m_mass));
    }
    if (m_name_isSet) {
        obj.insert(QString("name"), ::OpenAPI::toJsonValue(m_name));
    }
    if (m_packaged_volume_isSet) {
        obj.insert(QString("packaged_volume"), ::OpenAPI::toJsonValue(m_packaged_volume));
    }
    if (m_portion_size_isSet) {
        obj.insert(QString("portion_size"), ::OpenAPI::toJsonValue(m_portion_size));
    }
    if (m_published_isSet) {
        obj.insert(QString("published"), ::OpenAPI::toJsonValue(m_published));
    }
    if (m_radius_isSet) {
        obj.insert(QString("radius"), ::OpenAPI::toJsonValue(m_radius));
    }
    if (m_type_id_isSet) {
        obj.insert(QString("type_id"), ::OpenAPI::toJsonValue(m_type_id));
    }
    if (m_volume_isSet) {
        obj.insert(QString("volume"), ::OpenAPI::toJsonValue(m_volume));
    }
    return obj;
}

float OAIGet_universe_types_type_id_ok::getCapacity() const {
    return m_capacity;
}
void OAIGet_universe_types_type_id_ok::setCapacity(const float &capacity) {
    m_capacity = capacity;
    m_capacity_isSet = true;
}

bool OAIGet_universe_types_type_id_ok::is_capacity_Set() const{
    return m_capacity_isSet;
}

bool OAIGet_universe_types_type_id_ok::is_capacity_Valid() const{
    return m_capacity_isValid;
}

QString OAIGet_universe_types_type_id_ok::getDescription() const {
    return m_description;
}
void OAIGet_universe_types_type_id_ok::setDescription(const QString &description) {
    m_description = description;
    m_description_isSet = true;
}

bool OAIGet_universe_types_type_id_ok::is_description_Set() const{
    return m_description_isSet;
}

bool OAIGet_universe_types_type_id_ok::is_description_Valid() const{
    return m_description_isValid;
}

QList<OAIGet_universe_types_type_id_dogma_attribute> OAIGet_universe_types_type_id_ok::getDogmaAttributes() const {
    return m_dogma_attributes;
}
void OAIGet_universe_types_type_id_ok::setDogmaAttributes(const QList<OAIGet_universe_types_type_id_dogma_attribute> &dogma_attributes) {
    m_dogma_attributes = dogma_attributes;
    m_dogma_attributes_isSet = true;
}

bool OAIGet_universe_types_type_id_ok::is_dogma_attributes_Set() const{
    return m_dogma_attributes_isSet;
}

bool OAIGet_universe_types_type_id_ok::is_dogma_attributes_Valid() const{
    return m_dogma_attributes_isValid;
}

QList<OAIGet_universe_types_type_id_dogma_effect> OAIGet_universe_types_type_id_ok::getDogmaEffects() const {
    return m_dogma_effects;
}
void OAIGet_universe_types_type_id_ok::setDogmaEffects(const QList<OAIGet_universe_types_type_id_dogma_effect> &dogma_effects) {
    m_dogma_effects = dogma_effects;
    m_dogma_effects_isSet = true;
}

bool OAIGet_universe_types_type_id_ok::is_dogma_effects_Set() const{
    return m_dogma_effects_isSet;
}

bool OAIGet_universe_types_type_id_ok::is_dogma_effects_Valid() const{
    return m_dogma_effects_isValid;
}

qint32 OAIGet_universe_types_type_id_ok::getGraphicId() const {
    return m_graphic_id;
}
void OAIGet_universe_types_type_id_ok::setGraphicId(const qint32 &graphic_id) {
    m_graphic_id = graphic_id;
    m_graphic_id_isSet = true;
}

bool OAIGet_universe_types_type_id_ok::is_graphic_id_Set() const{
    return m_graphic_id_isSet;
}

bool OAIGet_universe_types_type_id_ok::is_graphic_id_Valid() const{
    return m_graphic_id_isValid;
}

qint32 OAIGet_universe_types_type_id_ok::getGroupId() const {
    return m_group_id;
}
void OAIGet_universe_types_type_id_ok::setGroupId(const qint32 &group_id) {
    m_group_id = group_id;
    m_group_id_isSet = true;
}

bool OAIGet_universe_types_type_id_ok::is_group_id_Set() const{
    return m_group_id_isSet;
}

bool OAIGet_universe_types_type_id_ok::is_group_id_Valid() const{
    return m_group_id_isValid;
}

qint32 OAIGet_universe_types_type_id_ok::getIconId() const {
    return m_icon_id;
}
void OAIGet_universe_types_type_id_ok::setIconId(const qint32 &icon_id) {
    m_icon_id = icon_id;
    m_icon_id_isSet = true;
}

bool OAIGet_universe_types_type_id_ok::is_icon_id_Set() const{
    return m_icon_id_isSet;
}

bool OAIGet_universe_types_type_id_ok::is_icon_id_Valid() const{
    return m_icon_id_isValid;
}

qint32 OAIGet_universe_types_type_id_ok::getMarketGroupId() const {
    return m_market_group_id;
}
void OAIGet_universe_types_type_id_ok::setMarketGroupId(const qint32 &market_group_id) {
    m_market_group_id = market_group_id;
    m_market_group_id_isSet = true;
}

bool OAIGet_universe_types_type_id_ok::is_market_group_id_Set() const{
    return m_market_group_id_isSet;
}

bool OAIGet_universe_types_type_id_ok::is_market_group_id_Valid() const{
    return m_market_group_id_isValid;
}

float OAIGet_universe_types_type_id_ok::getMass() const {
    return m_mass;
}
void OAIGet_universe_types_type_id_ok::setMass(const float &mass) {
    m_mass = mass;
    m_mass_isSet = true;
}

bool OAIGet_universe_types_type_id_ok::is_mass_Set() const{
    return m_mass_isSet;
}

bool OAIGet_universe_types_type_id_ok::is_mass_Valid() const{
    return m_mass_isValid;
}

QString OAIGet_universe_types_type_id_ok::getName() const {
    return m_name;
}
void OAIGet_universe_types_type_id_ok::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAIGet_universe_types_type_id_ok::is_name_Set() const{
    return m_name_isSet;
}

bool OAIGet_universe_types_type_id_ok::is_name_Valid() const{
    return m_name_isValid;
}

float OAIGet_universe_types_type_id_ok::getPackagedVolume() const {
    return m_packaged_volume;
}
void OAIGet_universe_types_type_id_ok::setPackagedVolume(const float &packaged_volume) {
    m_packaged_volume = packaged_volume;
    m_packaged_volume_isSet = true;
}

bool OAIGet_universe_types_type_id_ok::is_packaged_volume_Set() const{
    return m_packaged_volume_isSet;
}

bool OAIGet_universe_types_type_id_ok::is_packaged_volume_Valid() const{
    return m_packaged_volume_isValid;
}

qint32 OAIGet_universe_types_type_id_ok::getPortionSize() const {
    return m_portion_size;
}
void OAIGet_universe_types_type_id_ok::setPortionSize(const qint32 &portion_size) {
    m_portion_size = portion_size;
    m_portion_size_isSet = true;
}

bool OAIGet_universe_types_type_id_ok::is_portion_size_Set() const{
    return m_portion_size_isSet;
}

bool OAIGet_universe_types_type_id_ok::is_portion_size_Valid() const{
    return m_portion_size_isValid;
}

bool OAIGet_universe_types_type_id_ok::isPublished() const {
    return m_published;
}
void OAIGet_universe_types_type_id_ok::setPublished(const bool &published) {
    m_published = published;
    m_published_isSet = true;
}

bool OAIGet_universe_types_type_id_ok::is_published_Set() const{
    return m_published_isSet;
}

bool OAIGet_universe_types_type_id_ok::is_published_Valid() const{
    return m_published_isValid;
}

float OAIGet_universe_types_type_id_ok::getRadius() const {
    return m_radius;
}
void OAIGet_universe_types_type_id_ok::setRadius(const float &radius) {
    m_radius = radius;
    m_radius_isSet = true;
}

bool OAIGet_universe_types_type_id_ok::is_radius_Set() const{
    return m_radius_isSet;
}

bool OAIGet_universe_types_type_id_ok::is_radius_Valid() const{
    return m_radius_isValid;
}

qint32 OAIGet_universe_types_type_id_ok::getTypeId() const {
    return m_type_id;
}
void OAIGet_universe_types_type_id_ok::setTypeId(const qint32 &type_id) {
    m_type_id = type_id;
    m_type_id_isSet = true;
}

bool OAIGet_universe_types_type_id_ok::is_type_id_Set() const{
    return m_type_id_isSet;
}

bool OAIGet_universe_types_type_id_ok::is_type_id_Valid() const{
    return m_type_id_isValid;
}

float OAIGet_universe_types_type_id_ok::getVolume() const {
    return m_volume;
}
void OAIGet_universe_types_type_id_ok::setVolume(const float &volume) {
    m_volume = volume;
    m_volume_isSet = true;
}

bool OAIGet_universe_types_type_id_ok::is_volume_Set() const{
    return m_volume_isSet;
}

bool OAIGet_universe_types_type_id_ok::is_volume_Valid() const{
    return m_volume_isValid;
}

bool OAIGet_universe_types_type_id_ok::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_capacity_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_description_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_dogma_attributes.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_dogma_effects.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_graphic_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_group_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_icon_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_market_group_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_mass_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_packaged_volume_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_portion_size_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_published_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_radius_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_type_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_volume_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIGet_universe_types_type_id_ok::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_description_isValid && m_group_id_isValid && m_name_isValid && m_published_isValid && m_type_id_isValid && true;
}

} // namespace OpenAPI
