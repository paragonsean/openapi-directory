/**
 * EVE Swagger Interface
 * An OpenAPI for EVE Online
 *
 * The version of the OpenAPI document: 0.8.6
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIGet_corporations_corporation_id_wallets_division_transactions_200_ok.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIGet_corporations_corporation_id_wallets_division_transactions_200_ok::OAIGet_corporations_corporation_id_wallets_division_transactions_200_ok(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIGet_corporations_corporation_id_wallets_division_transactions_200_ok::OAIGet_corporations_corporation_id_wallets_division_transactions_200_ok() {
    this->initializeModel();
}

OAIGet_corporations_corporation_id_wallets_division_transactions_200_ok::~OAIGet_corporations_corporation_id_wallets_division_transactions_200_ok() {}

void OAIGet_corporations_corporation_id_wallets_division_transactions_200_ok::initializeModel() {

    m_client_id_isSet = false;
    m_client_id_isValid = false;

    m_date_isSet = false;
    m_date_isValid = false;

    m_is_buy_isSet = false;
    m_is_buy_isValid = false;

    m_journal_ref_id_isSet = false;
    m_journal_ref_id_isValid = false;

    m_location_id_isSet = false;
    m_location_id_isValid = false;

    m_quantity_isSet = false;
    m_quantity_isValid = false;

    m_transaction_id_isSet = false;
    m_transaction_id_isValid = false;

    m_type_id_isSet = false;
    m_type_id_isValid = false;

    m_unit_price_isSet = false;
    m_unit_price_isValid = false;
}

void OAIGet_corporations_corporation_id_wallets_division_transactions_200_ok::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIGet_corporations_corporation_id_wallets_division_transactions_200_ok::fromJsonObject(QJsonObject json) {

    m_client_id_isValid = ::OpenAPI::fromJsonValue(m_client_id, json[QString("client_id")]);
    m_client_id_isSet = !json[QString("client_id")].isNull() && m_client_id_isValid;

    m_date_isValid = ::OpenAPI::fromJsonValue(m_date, json[QString("date")]);
    m_date_isSet = !json[QString("date")].isNull() && m_date_isValid;

    m_is_buy_isValid = ::OpenAPI::fromJsonValue(m_is_buy, json[QString("is_buy")]);
    m_is_buy_isSet = !json[QString("is_buy")].isNull() && m_is_buy_isValid;

    m_journal_ref_id_isValid = ::OpenAPI::fromJsonValue(m_journal_ref_id, json[QString("journal_ref_id")]);
    m_journal_ref_id_isSet = !json[QString("journal_ref_id")].isNull() && m_journal_ref_id_isValid;

    m_location_id_isValid = ::OpenAPI::fromJsonValue(m_location_id, json[QString("location_id")]);
    m_location_id_isSet = !json[QString("location_id")].isNull() && m_location_id_isValid;

    m_quantity_isValid = ::OpenAPI::fromJsonValue(m_quantity, json[QString("quantity")]);
    m_quantity_isSet = !json[QString("quantity")].isNull() && m_quantity_isValid;

    m_transaction_id_isValid = ::OpenAPI::fromJsonValue(m_transaction_id, json[QString("transaction_id")]);
    m_transaction_id_isSet = !json[QString("transaction_id")].isNull() && m_transaction_id_isValid;

    m_type_id_isValid = ::OpenAPI::fromJsonValue(m_type_id, json[QString("type_id")]);
    m_type_id_isSet = !json[QString("type_id")].isNull() && m_type_id_isValid;

    m_unit_price_isValid = ::OpenAPI::fromJsonValue(m_unit_price, json[QString("unit_price")]);
    m_unit_price_isSet = !json[QString("unit_price")].isNull() && m_unit_price_isValid;
}

QString OAIGet_corporations_corporation_id_wallets_division_transactions_200_ok::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIGet_corporations_corporation_id_wallets_division_transactions_200_ok::asJsonObject() const {
    QJsonObject obj;
    if (m_client_id_isSet) {
        obj.insert(QString("client_id"), ::OpenAPI::toJsonValue(m_client_id));
    }
    if (m_date_isSet) {
        obj.insert(QString("date"), ::OpenAPI::toJsonValue(m_date));
    }
    if (m_is_buy_isSet) {
        obj.insert(QString("is_buy"), ::OpenAPI::toJsonValue(m_is_buy));
    }
    if (m_journal_ref_id_isSet) {
        obj.insert(QString("journal_ref_id"), ::OpenAPI::toJsonValue(m_journal_ref_id));
    }
    if (m_location_id_isSet) {
        obj.insert(QString("location_id"), ::OpenAPI::toJsonValue(m_location_id));
    }
    if (m_quantity_isSet) {
        obj.insert(QString("quantity"), ::OpenAPI::toJsonValue(m_quantity));
    }
    if (m_transaction_id_isSet) {
        obj.insert(QString("transaction_id"), ::OpenAPI::toJsonValue(m_transaction_id));
    }
    if (m_type_id_isSet) {
        obj.insert(QString("type_id"), ::OpenAPI::toJsonValue(m_type_id));
    }
    if (m_unit_price_isSet) {
        obj.insert(QString("unit_price"), ::OpenAPI::toJsonValue(m_unit_price));
    }
    return obj;
}

qint32 OAIGet_corporations_corporation_id_wallets_division_transactions_200_ok::getClientId() const {
    return m_client_id;
}
void OAIGet_corporations_corporation_id_wallets_division_transactions_200_ok::setClientId(const qint32 &client_id) {
    m_client_id = client_id;
    m_client_id_isSet = true;
}

bool OAIGet_corporations_corporation_id_wallets_division_transactions_200_ok::is_client_id_Set() const{
    return m_client_id_isSet;
}

bool OAIGet_corporations_corporation_id_wallets_division_transactions_200_ok::is_client_id_Valid() const{
    return m_client_id_isValid;
}

QDateTime OAIGet_corporations_corporation_id_wallets_division_transactions_200_ok::getDate() const {
    return m_date;
}
void OAIGet_corporations_corporation_id_wallets_division_transactions_200_ok::setDate(const QDateTime &date) {
    m_date = date;
    m_date_isSet = true;
}

bool OAIGet_corporations_corporation_id_wallets_division_transactions_200_ok::is_date_Set() const{
    return m_date_isSet;
}

bool OAIGet_corporations_corporation_id_wallets_division_transactions_200_ok::is_date_Valid() const{
    return m_date_isValid;
}

bool OAIGet_corporations_corporation_id_wallets_division_transactions_200_ok::isIsBuy() const {
    return m_is_buy;
}
void OAIGet_corporations_corporation_id_wallets_division_transactions_200_ok::setIsBuy(const bool &is_buy) {
    m_is_buy = is_buy;
    m_is_buy_isSet = true;
}

bool OAIGet_corporations_corporation_id_wallets_division_transactions_200_ok::is_is_buy_Set() const{
    return m_is_buy_isSet;
}

bool OAIGet_corporations_corporation_id_wallets_division_transactions_200_ok::is_is_buy_Valid() const{
    return m_is_buy_isValid;
}

qint64 OAIGet_corporations_corporation_id_wallets_division_transactions_200_ok::getJournalRefId() const {
    return m_journal_ref_id;
}
void OAIGet_corporations_corporation_id_wallets_division_transactions_200_ok::setJournalRefId(const qint64 &journal_ref_id) {
    m_journal_ref_id = journal_ref_id;
    m_journal_ref_id_isSet = true;
}

bool OAIGet_corporations_corporation_id_wallets_division_transactions_200_ok::is_journal_ref_id_Set() const{
    return m_journal_ref_id_isSet;
}

bool OAIGet_corporations_corporation_id_wallets_division_transactions_200_ok::is_journal_ref_id_Valid() const{
    return m_journal_ref_id_isValid;
}

qint64 OAIGet_corporations_corporation_id_wallets_division_transactions_200_ok::getLocationId() const {
    return m_location_id;
}
void OAIGet_corporations_corporation_id_wallets_division_transactions_200_ok::setLocationId(const qint64 &location_id) {
    m_location_id = location_id;
    m_location_id_isSet = true;
}

bool OAIGet_corporations_corporation_id_wallets_division_transactions_200_ok::is_location_id_Set() const{
    return m_location_id_isSet;
}

bool OAIGet_corporations_corporation_id_wallets_division_transactions_200_ok::is_location_id_Valid() const{
    return m_location_id_isValid;
}

qint32 OAIGet_corporations_corporation_id_wallets_division_transactions_200_ok::getQuantity() const {
    return m_quantity;
}
void OAIGet_corporations_corporation_id_wallets_division_transactions_200_ok::setQuantity(const qint32 &quantity) {
    m_quantity = quantity;
    m_quantity_isSet = true;
}

bool OAIGet_corporations_corporation_id_wallets_division_transactions_200_ok::is_quantity_Set() const{
    return m_quantity_isSet;
}

bool OAIGet_corporations_corporation_id_wallets_division_transactions_200_ok::is_quantity_Valid() const{
    return m_quantity_isValid;
}

qint64 OAIGet_corporations_corporation_id_wallets_division_transactions_200_ok::getTransactionId() const {
    return m_transaction_id;
}
void OAIGet_corporations_corporation_id_wallets_division_transactions_200_ok::setTransactionId(const qint64 &transaction_id) {
    m_transaction_id = transaction_id;
    m_transaction_id_isSet = true;
}

bool OAIGet_corporations_corporation_id_wallets_division_transactions_200_ok::is_transaction_id_Set() const{
    return m_transaction_id_isSet;
}

bool OAIGet_corporations_corporation_id_wallets_division_transactions_200_ok::is_transaction_id_Valid() const{
    return m_transaction_id_isValid;
}

qint32 OAIGet_corporations_corporation_id_wallets_division_transactions_200_ok::getTypeId() const {
    return m_type_id;
}
void OAIGet_corporations_corporation_id_wallets_division_transactions_200_ok::setTypeId(const qint32 &type_id) {
    m_type_id = type_id;
    m_type_id_isSet = true;
}

bool OAIGet_corporations_corporation_id_wallets_division_transactions_200_ok::is_type_id_Set() const{
    return m_type_id_isSet;
}

bool OAIGet_corporations_corporation_id_wallets_division_transactions_200_ok::is_type_id_Valid() const{
    return m_type_id_isValid;
}

double OAIGet_corporations_corporation_id_wallets_division_transactions_200_ok::getUnitPrice() const {
    return m_unit_price;
}
void OAIGet_corporations_corporation_id_wallets_division_transactions_200_ok::setUnitPrice(const double &unit_price) {
    m_unit_price = unit_price;
    m_unit_price_isSet = true;
}

bool OAIGet_corporations_corporation_id_wallets_division_transactions_200_ok::is_unit_price_Set() const{
    return m_unit_price_isSet;
}

bool OAIGet_corporations_corporation_id_wallets_division_transactions_200_ok::is_unit_price_Valid() const{
    return m_unit_price_isValid;
}

bool OAIGet_corporations_corporation_id_wallets_division_transactions_200_ok::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_client_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_date_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_is_buy_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_journal_ref_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_location_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_quantity_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_transaction_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_type_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_unit_price_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIGet_corporations_corporation_id_wallets_division_transactions_200_ok::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_client_id_isValid && m_date_isValid && m_is_buy_isValid && m_journal_ref_id_isValid && m_location_id_isValid && m_quantity_isValid && m_transaction_id_isValid && m_type_id_isValid && m_unit_price_isValid && true;
}

} // namespace OpenAPI
