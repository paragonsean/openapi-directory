/**
 * EVE Swagger Interface
 * An OpenAPI for EVE Online
 *
 * The version of the OpenAPI document: 0.8.6
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#ifndef OAI_OAIUniverseApi_H
#define OAI_OAIUniverseApi_H

#include "OAIHelpers.h"
#include "OAIHttpRequest.h"
#include "OAIServerConfiguration.h"
#include "OAIOauth.h"

#include "OAIBad_request.h"
#include "OAIError_limited.h"
#include "OAIForbidden.h"
#include "OAIGateway_timeout.h"
#include "OAIGet_universe_ancestries_200_ok.h"
#include "OAIGet_universe_asteroid_belts_asteroid_belt_id_not_found.h"
#include "OAIGet_universe_asteroid_belts_asteroid_belt_id_ok.h"
#include "OAIGet_universe_bloodlines_200_ok.h"
#include "OAIGet_universe_categories_category_id_not_found.h"
#include "OAIGet_universe_categories_category_id_ok.h"
#include "OAIGet_universe_constellations_constellation_id_not_found.h"
#include "OAIGet_universe_constellations_constellation_id_ok.h"
#include "OAIGet_universe_factions_200_ok.h"
#include "OAIGet_universe_graphics_graphic_id_not_found.h"
#include "OAIGet_universe_graphics_graphic_id_ok.h"
#include "OAIGet_universe_groups_group_id_not_found.h"
#include "OAIGet_universe_groups_group_id_ok.h"
#include "OAIGet_universe_moons_moon_id_not_found.h"
#include "OAIGet_universe_moons_moon_id_ok.h"
#include "OAIGet_universe_planets_planet_id_not_found.h"
#include "OAIGet_universe_planets_planet_id_ok.h"
#include "OAIGet_universe_races_200_ok.h"
#include "OAIGet_universe_regions_region_id_not_found.h"
#include "OAIGet_universe_regions_region_id_ok.h"
#include "OAIGet_universe_stargates_stargate_id_not_found.h"
#include "OAIGet_universe_stargates_stargate_id_ok.h"
#include "OAIGet_universe_stars_star_id_ok.h"
#include "OAIGet_universe_stations_station_id_not_found.h"
#include "OAIGet_universe_stations_station_id_ok.h"
#include "OAIGet_universe_structures_structure_id_not_found.h"
#include "OAIGet_universe_structures_structure_id_ok.h"
#include "OAIGet_universe_system_jumps_200_ok.h"
#include "OAIGet_universe_system_kills_200_ok.h"
#include "OAIGet_universe_systems_system_id_not_found.h"
#include "OAIGet_universe_systems_system_id_ok.h"
#include "OAIGet_universe_types_type_id_not_found.h"
#include "OAIGet_universe_types_type_id_ok.h"
#include "OAIInternal_server_error.h"
#include "OAIPost_universe_ids_ok.h"
#include "OAIPost_universe_names_200_ok.h"
#include "OAIPost_universe_names_not_found.h"
#include "OAIService_unavailable.h"
#include "OAIUnauthorized.h"
#include <QSet>
#include <QString>

#include <QObject>
#include <QByteArray>
#include <QStringList>
#include <QList>
#include <QNetworkAccessManager>

namespace OpenAPI {

class OAIUniverseApi : public QObject {
    Q_OBJECT

public:
    OAIUniverseApi(const int timeOut = 0);
    ~OAIUniverseApi();

    void initializeServerConfigs();
    int setDefaultServerValue(int serverIndex,const QString &operation, const QString &variable,const QString &val);
    void setServerIndex(const QString &operation, int serverIndex);
    void setApiKey(const QString &apiKeyName, const QString &apiKey);
    void setBearerToken(const QString &token);
    void setUsername(const QString &username);
    void setPassword(const QString &password);
    void setTimeOut(const int timeOut);
    void setWorkingDirectory(const QString &path);
    void setNetworkAccessManager(QNetworkAccessManager* manager);
    int addServerConfiguration(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables = QMap<QString, OAIServerVariable>());
    void setNewServerForAllOperations(const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void setNewServer(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void addHeaders(const QString &key, const QString &value);
    void enableRequestCompression();
    void enableResponseCompression();
    void abortRequests();
    QString getParamStylePrefix(const QString &style);
    QString getParamStyleSuffix(const QString &style);
    QString getParamStyleDelimiter(const QString &style, const QString &name, bool isExplode);

    /**
    * @param[in]  accept_language QString [optional]
    * @param[in]  datasource QString [optional]
    * @param[in]  if_none_match QString [optional]
    * @param[in]  language QString [optional]
    */
    virtual void getUniverseAncestries(const ::OpenAPI::OptionalParam<QString> &accept_language = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &datasource = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &if_none_match = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &language = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  asteroid_belt_id qint32 [required]
    * @param[in]  datasource QString [optional]
    * @param[in]  if_none_match QString [optional]
    */
    virtual void getUniverseAsteroidBeltsAsteroidBeltId(const qint32 &asteroid_belt_id, const ::OpenAPI::OptionalParam<QString> &datasource = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &if_none_match = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  accept_language QString [optional]
    * @param[in]  datasource QString [optional]
    * @param[in]  if_none_match QString [optional]
    * @param[in]  language QString [optional]
    */
    virtual void getUniverseBloodlines(const ::OpenAPI::OptionalParam<QString> &accept_language = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &datasource = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &if_none_match = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &language = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  datasource QString [optional]
    * @param[in]  if_none_match QString [optional]
    */
    virtual void getUniverseCategories(const ::OpenAPI::OptionalParam<QString> &datasource = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &if_none_match = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  category_id qint32 [required]
    * @param[in]  accept_language QString [optional]
    * @param[in]  datasource QString [optional]
    * @param[in]  if_none_match QString [optional]
    * @param[in]  language QString [optional]
    */
    virtual void getUniverseCategoriesCategoryId(const qint32 &category_id, const ::OpenAPI::OptionalParam<QString> &accept_language = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &datasource = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &if_none_match = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &language = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  datasource QString [optional]
    * @param[in]  if_none_match QString [optional]
    */
    virtual void getUniverseConstellations(const ::OpenAPI::OptionalParam<QString> &datasource = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &if_none_match = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  constellation_id qint32 [required]
    * @param[in]  accept_language QString [optional]
    * @param[in]  datasource QString [optional]
    * @param[in]  if_none_match QString [optional]
    * @param[in]  language QString [optional]
    */
    virtual void getUniverseConstellationsConstellationId(const qint32 &constellation_id, const ::OpenAPI::OptionalParam<QString> &accept_language = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &datasource = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &if_none_match = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &language = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  accept_language QString [optional]
    * @param[in]  datasource QString [optional]
    * @param[in]  if_none_match QString [optional]
    * @param[in]  language QString [optional]
    */
    virtual void getUniverseFactions(const ::OpenAPI::OptionalParam<QString> &accept_language = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &datasource = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &if_none_match = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &language = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  datasource QString [optional]
    * @param[in]  if_none_match QString [optional]
    */
    virtual void getUniverseGraphics(const ::OpenAPI::OptionalParam<QString> &datasource = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &if_none_match = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  graphic_id qint32 [required]
    * @param[in]  datasource QString [optional]
    * @param[in]  if_none_match QString [optional]
    */
    virtual void getUniverseGraphicsGraphicId(const qint32 &graphic_id, const ::OpenAPI::OptionalParam<QString> &datasource = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &if_none_match = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  datasource QString [optional]
    * @param[in]  if_none_match QString [optional]
    * @param[in]  page qint32 [optional]
    */
    virtual void getUniverseGroups(const ::OpenAPI::OptionalParam<QString> &datasource = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &if_none_match = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<qint32> &page = ::OpenAPI::OptionalParam<qint32>());

    /**
    * @param[in]  group_id qint32 [required]
    * @param[in]  accept_language QString [optional]
    * @param[in]  datasource QString [optional]
    * @param[in]  if_none_match QString [optional]
    * @param[in]  language QString [optional]
    */
    virtual void getUniverseGroupsGroupId(const qint32 &group_id, const ::OpenAPI::OptionalParam<QString> &accept_language = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &datasource = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &if_none_match = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &language = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  moon_id qint32 [required]
    * @param[in]  datasource QString [optional]
    * @param[in]  if_none_match QString [optional]
    */
    virtual void getUniverseMoonsMoonId(const qint32 &moon_id, const ::OpenAPI::OptionalParam<QString> &datasource = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &if_none_match = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  planet_id qint32 [required]
    * @param[in]  datasource QString [optional]
    * @param[in]  if_none_match QString [optional]
    */
    virtual void getUniversePlanetsPlanetId(const qint32 &planet_id, const ::OpenAPI::OptionalParam<QString> &datasource = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &if_none_match = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  accept_language QString [optional]
    * @param[in]  datasource QString [optional]
    * @param[in]  if_none_match QString [optional]
    * @param[in]  language QString [optional]
    */
    virtual void getUniverseRaces(const ::OpenAPI::OptionalParam<QString> &accept_language = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &datasource = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &if_none_match = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &language = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  datasource QString [optional]
    * @param[in]  if_none_match QString [optional]
    */
    virtual void getUniverseRegions(const ::OpenAPI::OptionalParam<QString> &datasource = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &if_none_match = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  region_id qint32 [required]
    * @param[in]  accept_language QString [optional]
    * @param[in]  datasource QString [optional]
    * @param[in]  if_none_match QString [optional]
    * @param[in]  language QString [optional]
    */
    virtual void getUniverseRegionsRegionId(const qint32 &region_id, const ::OpenAPI::OptionalParam<QString> &accept_language = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &datasource = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &if_none_match = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &language = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  stargate_id qint32 [required]
    * @param[in]  datasource QString [optional]
    * @param[in]  if_none_match QString [optional]
    */
    virtual void getUniverseStargatesStargateId(const qint32 &stargate_id, const ::OpenAPI::OptionalParam<QString> &datasource = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &if_none_match = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  star_id qint32 [required]
    * @param[in]  datasource QString [optional]
    * @param[in]  if_none_match QString [optional]
    */
    virtual void getUniverseStarsStarId(const qint32 &star_id, const ::OpenAPI::OptionalParam<QString> &datasource = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &if_none_match = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  station_id qint32 [required]
    * @param[in]  datasource QString [optional]
    * @param[in]  if_none_match QString [optional]
    */
    virtual void getUniverseStationsStationId(const qint32 &station_id, const ::OpenAPI::OptionalParam<QString> &datasource = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &if_none_match = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  datasource QString [optional]
    * @param[in]  filter QString [optional]
    * @param[in]  if_none_match QString [optional]
    */
    virtual void getUniverseStructures(const ::OpenAPI::OptionalParam<QString> &datasource = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &filter = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &if_none_match = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  structure_id qint64 [required]
    * @param[in]  datasource QString [optional]
    * @param[in]  if_none_match QString [optional]
    * @param[in]  token QString [optional]
    */
    virtual void getUniverseStructuresStructureId(const qint64 &structure_id, const ::OpenAPI::OptionalParam<QString> &datasource = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &if_none_match = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &token = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  datasource QString [optional]
    * @param[in]  if_none_match QString [optional]
    */
    virtual void getUniverseSystemJumps(const ::OpenAPI::OptionalParam<QString> &datasource = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &if_none_match = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  datasource QString [optional]
    * @param[in]  if_none_match QString [optional]
    */
    virtual void getUniverseSystemKills(const ::OpenAPI::OptionalParam<QString> &datasource = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &if_none_match = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  datasource QString [optional]
    * @param[in]  if_none_match QString [optional]
    */
    virtual void getUniverseSystems(const ::OpenAPI::OptionalParam<QString> &datasource = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &if_none_match = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  system_id qint32 [required]
    * @param[in]  accept_language QString [optional]
    * @param[in]  datasource QString [optional]
    * @param[in]  if_none_match QString [optional]
    * @param[in]  language QString [optional]
    */
    virtual void getUniverseSystemsSystemId(const qint32 &system_id, const ::OpenAPI::OptionalParam<QString> &accept_language = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &datasource = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &if_none_match = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &language = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  datasource QString [optional]
    * @param[in]  if_none_match QString [optional]
    * @param[in]  page qint32 [optional]
    */
    virtual void getUniverseTypes(const ::OpenAPI::OptionalParam<QString> &datasource = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &if_none_match = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<qint32> &page = ::OpenAPI::OptionalParam<qint32>());

    /**
    * @param[in]  type_id qint32 [required]
    * @param[in]  accept_language QString [optional]
    * @param[in]  datasource QString [optional]
    * @param[in]  if_none_match QString [optional]
    * @param[in]  language QString [optional]
    */
    virtual void getUniverseTypesTypeId(const qint32 &type_id, const ::OpenAPI::OptionalParam<QString> &accept_language = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &datasource = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &if_none_match = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &language = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  names QSet<QString> [required]
    * @param[in]  accept_language QString [optional]
    * @param[in]  datasource QString [optional]
    * @param[in]  language QString [optional]
    */
    virtual void postUniverseIds(const QSet<QString> &names, const ::OpenAPI::OptionalParam<QString> &accept_language = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &datasource = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &language = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  ids QSet<qint32> [required]
    * @param[in]  datasource QString [optional]
    */
    virtual void postUniverseNames(const QSet<qint32> &ids, const ::OpenAPI::OptionalParam<QString> &datasource = ::OpenAPI::OptionalParam<QString>());


private:
    QMap<QString,int> _serverIndices;
    QMap<QString,QList<OAIServerConfiguration>> _serverConfigs;
    QMap<QString, QString> _apiKeys;
    QString _bearerToken;
    QString _username;
    QString _password;
    int _timeOut;
    QString _workingDirectory;
    QNetworkAccessManager* _manager;
    QMap<QString, QString> _defaultHeaders;
    bool _isResponseCompressionEnabled;
    bool _isRequestCompressionEnabled;
    OAIHttpRequestInput _latestInput;
    OAIHttpRequestWorker *_latestWorker;
    QStringList _latestScope;
    OauthCode _authFlow;
    OauthImplicit _implicitFlow;
    OauthCredentials _credentialFlow;
    OauthPassword _passwordFlow;
    int _OauthMethod = 0;

    void getUniverseAncestriesCallback(OAIHttpRequestWorker *worker);
    void getUniverseAsteroidBeltsAsteroidBeltIdCallback(OAIHttpRequestWorker *worker);
    void getUniverseBloodlinesCallback(OAIHttpRequestWorker *worker);
    void getUniverseCategoriesCallback(OAIHttpRequestWorker *worker);
    void getUniverseCategoriesCategoryIdCallback(OAIHttpRequestWorker *worker);
    void getUniverseConstellationsCallback(OAIHttpRequestWorker *worker);
    void getUniverseConstellationsConstellationIdCallback(OAIHttpRequestWorker *worker);
    void getUniverseFactionsCallback(OAIHttpRequestWorker *worker);
    void getUniverseGraphicsCallback(OAIHttpRequestWorker *worker);
    void getUniverseGraphicsGraphicIdCallback(OAIHttpRequestWorker *worker);
    void getUniverseGroupsCallback(OAIHttpRequestWorker *worker);
    void getUniverseGroupsGroupIdCallback(OAIHttpRequestWorker *worker);
    void getUniverseMoonsMoonIdCallback(OAIHttpRequestWorker *worker);
    void getUniversePlanetsPlanetIdCallback(OAIHttpRequestWorker *worker);
    void getUniverseRacesCallback(OAIHttpRequestWorker *worker);
    void getUniverseRegionsCallback(OAIHttpRequestWorker *worker);
    void getUniverseRegionsRegionIdCallback(OAIHttpRequestWorker *worker);
    void getUniverseStargatesStargateIdCallback(OAIHttpRequestWorker *worker);
    void getUniverseStarsStarIdCallback(OAIHttpRequestWorker *worker);
    void getUniverseStationsStationIdCallback(OAIHttpRequestWorker *worker);
    void getUniverseStructuresCallback(OAIHttpRequestWorker *worker);
    void getUniverseStructuresStructureIdCallback(OAIHttpRequestWorker *worker);
    void getUniverseSystemJumpsCallback(OAIHttpRequestWorker *worker);
    void getUniverseSystemKillsCallback(OAIHttpRequestWorker *worker);
    void getUniverseSystemsCallback(OAIHttpRequestWorker *worker);
    void getUniverseSystemsSystemIdCallback(OAIHttpRequestWorker *worker);
    void getUniverseTypesCallback(OAIHttpRequestWorker *worker);
    void getUniverseTypesTypeIdCallback(OAIHttpRequestWorker *worker);
    void postUniverseIdsCallback(OAIHttpRequestWorker *worker);
    void postUniverseNamesCallback(OAIHttpRequestWorker *worker);

Q_SIGNALS:

    void getUniverseAncestriesSignal(QList<OAIGet_universe_ancestries_200_ok> summary);
    void getUniverseAsteroidBeltsAsteroidBeltIdSignal(OAIGet_universe_asteroid_belts_asteroid_belt_id_ok summary);
    void getUniverseBloodlinesSignal(QList<OAIGet_universe_bloodlines_200_ok> summary);
    void getUniverseCategoriesSignal(QList<qint32> summary);
    void getUniverseCategoriesCategoryIdSignal(OAIGet_universe_categories_category_id_ok summary);
    void getUniverseConstellationsSignal(QList<qint32> summary);
    void getUniverseConstellationsConstellationIdSignal(OAIGet_universe_constellations_constellation_id_ok summary);
    void getUniverseFactionsSignal(QList<OAIGet_universe_factions_200_ok> summary);
    void getUniverseGraphicsSignal(QList<qint32> summary);
    void getUniverseGraphicsGraphicIdSignal(OAIGet_universe_graphics_graphic_id_ok summary);
    void getUniverseGroupsSignal(QList<qint32> summary);
    void getUniverseGroupsGroupIdSignal(OAIGet_universe_groups_group_id_ok summary);
    void getUniverseMoonsMoonIdSignal(OAIGet_universe_moons_moon_id_ok summary);
    void getUniversePlanetsPlanetIdSignal(OAIGet_universe_planets_planet_id_ok summary);
    void getUniverseRacesSignal(QList<OAIGet_universe_races_200_ok> summary);
    void getUniverseRegionsSignal(QList<qint32> summary);
    void getUniverseRegionsRegionIdSignal(OAIGet_universe_regions_region_id_ok summary);
    void getUniverseStargatesStargateIdSignal(OAIGet_universe_stargates_stargate_id_ok summary);
    void getUniverseStarsStarIdSignal(OAIGet_universe_stars_star_id_ok summary);
    void getUniverseStationsStationIdSignal(OAIGet_universe_stations_station_id_ok summary);
    void getUniverseStructuresSignal(QSet<qint64> summary);
    void getUniverseStructuresStructureIdSignal(OAIGet_universe_structures_structure_id_ok summary);
    void getUniverseSystemJumpsSignal(QList<OAIGet_universe_system_jumps_200_ok> summary);
    void getUniverseSystemKillsSignal(QList<OAIGet_universe_system_kills_200_ok> summary);
    void getUniverseSystemsSignal(QList<qint32> summary);
    void getUniverseSystemsSystemIdSignal(OAIGet_universe_systems_system_id_ok summary);
    void getUniverseTypesSignal(QList<qint32> summary);
    void getUniverseTypesTypeIdSignal(OAIGet_universe_types_type_id_ok summary);
    void postUniverseIdsSignal(OAIPost_universe_ids_ok summary);
    void postUniverseNamesSignal(QList<OAIPost_universe_names_200_ok> summary);


    void getUniverseAncestriesSignalFull(OAIHttpRequestWorker *worker, QList<OAIGet_universe_ancestries_200_ok> summary);
    void getUniverseAsteroidBeltsAsteroidBeltIdSignalFull(OAIHttpRequestWorker *worker, OAIGet_universe_asteroid_belts_asteroid_belt_id_ok summary);
    void getUniverseBloodlinesSignalFull(OAIHttpRequestWorker *worker, QList<OAIGet_universe_bloodlines_200_ok> summary);
    void getUniverseCategoriesSignalFull(OAIHttpRequestWorker *worker, QList<qint32> summary);
    void getUniverseCategoriesCategoryIdSignalFull(OAIHttpRequestWorker *worker, OAIGet_universe_categories_category_id_ok summary);
    void getUniverseConstellationsSignalFull(OAIHttpRequestWorker *worker, QList<qint32> summary);
    void getUniverseConstellationsConstellationIdSignalFull(OAIHttpRequestWorker *worker, OAIGet_universe_constellations_constellation_id_ok summary);
    void getUniverseFactionsSignalFull(OAIHttpRequestWorker *worker, QList<OAIGet_universe_factions_200_ok> summary);
    void getUniverseGraphicsSignalFull(OAIHttpRequestWorker *worker, QList<qint32> summary);
    void getUniverseGraphicsGraphicIdSignalFull(OAIHttpRequestWorker *worker, OAIGet_universe_graphics_graphic_id_ok summary);
    void getUniverseGroupsSignalFull(OAIHttpRequestWorker *worker, QList<qint32> summary);
    void getUniverseGroupsGroupIdSignalFull(OAIHttpRequestWorker *worker, OAIGet_universe_groups_group_id_ok summary);
    void getUniverseMoonsMoonIdSignalFull(OAIHttpRequestWorker *worker, OAIGet_universe_moons_moon_id_ok summary);
    void getUniversePlanetsPlanetIdSignalFull(OAIHttpRequestWorker *worker, OAIGet_universe_planets_planet_id_ok summary);
    void getUniverseRacesSignalFull(OAIHttpRequestWorker *worker, QList<OAIGet_universe_races_200_ok> summary);
    void getUniverseRegionsSignalFull(OAIHttpRequestWorker *worker, QList<qint32> summary);
    void getUniverseRegionsRegionIdSignalFull(OAIHttpRequestWorker *worker, OAIGet_universe_regions_region_id_ok summary);
    void getUniverseStargatesStargateIdSignalFull(OAIHttpRequestWorker *worker, OAIGet_universe_stargates_stargate_id_ok summary);
    void getUniverseStarsStarIdSignalFull(OAIHttpRequestWorker *worker, OAIGet_universe_stars_star_id_ok summary);
    void getUniverseStationsStationIdSignalFull(OAIHttpRequestWorker *worker, OAIGet_universe_stations_station_id_ok summary);
    void getUniverseStructuresSignalFull(OAIHttpRequestWorker *worker, QSet<qint64> summary);
    void getUniverseStructuresStructureIdSignalFull(OAIHttpRequestWorker *worker, OAIGet_universe_structures_structure_id_ok summary);
    void getUniverseSystemJumpsSignalFull(OAIHttpRequestWorker *worker, QList<OAIGet_universe_system_jumps_200_ok> summary);
    void getUniverseSystemKillsSignalFull(OAIHttpRequestWorker *worker, QList<OAIGet_universe_system_kills_200_ok> summary);
    void getUniverseSystemsSignalFull(OAIHttpRequestWorker *worker, QList<qint32> summary);
    void getUniverseSystemsSystemIdSignalFull(OAIHttpRequestWorker *worker, OAIGet_universe_systems_system_id_ok summary);
    void getUniverseTypesSignalFull(OAIHttpRequestWorker *worker, QList<qint32> summary);
    void getUniverseTypesTypeIdSignalFull(OAIHttpRequestWorker *worker, OAIGet_universe_types_type_id_ok summary);
    void postUniverseIdsSignalFull(OAIHttpRequestWorker *worker, OAIPost_universe_ids_ok summary);
    void postUniverseNamesSignalFull(OAIHttpRequestWorker *worker, QList<OAIPost_universe_names_200_ok> summary);

    Q_DECL_DEPRECATED_X("Use getUniverseAncestriesSignalError() instead")
    void getUniverseAncestriesSignalE(QList<OAIGet_universe_ancestries_200_ok> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getUniverseAncestriesSignalError(QList<OAIGet_universe_ancestries_200_ok> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getUniverseAsteroidBeltsAsteroidBeltIdSignalError() instead")
    void getUniverseAsteroidBeltsAsteroidBeltIdSignalE(OAIGet_universe_asteroid_belts_asteroid_belt_id_ok summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getUniverseAsteroidBeltsAsteroidBeltIdSignalError(OAIGet_universe_asteroid_belts_asteroid_belt_id_ok summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getUniverseBloodlinesSignalError() instead")
    void getUniverseBloodlinesSignalE(QList<OAIGet_universe_bloodlines_200_ok> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getUniverseBloodlinesSignalError(QList<OAIGet_universe_bloodlines_200_ok> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getUniverseCategoriesSignalError() instead")
    void getUniverseCategoriesSignalE(QList<qint32> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getUniverseCategoriesSignalError(QList<qint32> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getUniverseCategoriesCategoryIdSignalError() instead")
    void getUniverseCategoriesCategoryIdSignalE(OAIGet_universe_categories_category_id_ok summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getUniverseCategoriesCategoryIdSignalError(OAIGet_universe_categories_category_id_ok summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getUniverseConstellationsSignalError() instead")
    void getUniverseConstellationsSignalE(QList<qint32> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getUniverseConstellationsSignalError(QList<qint32> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getUniverseConstellationsConstellationIdSignalError() instead")
    void getUniverseConstellationsConstellationIdSignalE(OAIGet_universe_constellations_constellation_id_ok summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getUniverseConstellationsConstellationIdSignalError(OAIGet_universe_constellations_constellation_id_ok summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getUniverseFactionsSignalError() instead")
    void getUniverseFactionsSignalE(QList<OAIGet_universe_factions_200_ok> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getUniverseFactionsSignalError(QList<OAIGet_universe_factions_200_ok> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getUniverseGraphicsSignalError() instead")
    void getUniverseGraphicsSignalE(QList<qint32> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getUniverseGraphicsSignalError(QList<qint32> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getUniverseGraphicsGraphicIdSignalError() instead")
    void getUniverseGraphicsGraphicIdSignalE(OAIGet_universe_graphics_graphic_id_ok summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getUniverseGraphicsGraphicIdSignalError(OAIGet_universe_graphics_graphic_id_ok summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getUniverseGroupsSignalError() instead")
    void getUniverseGroupsSignalE(QList<qint32> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getUniverseGroupsSignalError(QList<qint32> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getUniverseGroupsGroupIdSignalError() instead")
    void getUniverseGroupsGroupIdSignalE(OAIGet_universe_groups_group_id_ok summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getUniverseGroupsGroupIdSignalError(OAIGet_universe_groups_group_id_ok summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getUniverseMoonsMoonIdSignalError() instead")
    void getUniverseMoonsMoonIdSignalE(OAIGet_universe_moons_moon_id_ok summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getUniverseMoonsMoonIdSignalError(OAIGet_universe_moons_moon_id_ok summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getUniversePlanetsPlanetIdSignalError() instead")
    void getUniversePlanetsPlanetIdSignalE(OAIGet_universe_planets_planet_id_ok summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getUniversePlanetsPlanetIdSignalError(OAIGet_universe_planets_planet_id_ok summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getUniverseRacesSignalError() instead")
    void getUniverseRacesSignalE(QList<OAIGet_universe_races_200_ok> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getUniverseRacesSignalError(QList<OAIGet_universe_races_200_ok> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getUniverseRegionsSignalError() instead")
    void getUniverseRegionsSignalE(QList<qint32> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getUniverseRegionsSignalError(QList<qint32> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getUniverseRegionsRegionIdSignalError() instead")
    void getUniverseRegionsRegionIdSignalE(OAIGet_universe_regions_region_id_ok summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getUniverseRegionsRegionIdSignalError(OAIGet_universe_regions_region_id_ok summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getUniverseStargatesStargateIdSignalError() instead")
    void getUniverseStargatesStargateIdSignalE(OAIGet_universe_stargates_stargate_id_ok summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getUniverseStargatesStargateIdSignalError(OAIGet_universe_stargates_stargate_id_ok summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getUniverseStarsStarIdSignalError() instead")
    void getUniverseStarsStarIdSignalE(OAIGet_universe_stars_star_id_ok summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getUniverseStarsStarIdSignalError(OAIGet_universe_stars_star_id_ok summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getUniverseStationsStationIdSignalError() instead")
    void getUniverseStationsStationIdSignalE(OAIGet_universe_stations_station_id_ok summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getUniverseStationsStationIdSignalError(OAIGet_universe_stations_station_id_ok summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getUniverseStructuresSignalError() instead")
    void getUniverseStructuresSignalE(QSet<qint64> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getUniverseStructuresSignalError(QSet<qint64> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getUniverseStructuresStructureIdSignalError() instead")
    void getUniverseStructuresStructureIdSignalE(OAIGet_universe_structures_structure_id_ok summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getUniverseStructuresStructureIdSignalError(OAIGet_universe_structures_structure_id_ok summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getUniverseSystemJumpsSignalError() instead")
    void getUniverseSystemJumpsSignalE(QList<OAIGet_universe_system_jumps_200_ok> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getUniverseSystemJumpsSignalError(QList<OAIGet_universe_system_jumps_200_ok> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getUniverseSystemKillsSignalError() instead")
    void getUniverseSystemKillsSignalE(QList<OAIGet_universe_system_kills_200_ok> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getUniverseSystemKillsSignalError(QList<OAIGet_universe_system_kills_200_ok> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getUniverseSystemsSignalError() instead")
    void getUniverseSystemsSignalE(QList<qint32> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getUniverseSystemsSignalError(QList<qint32> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getUniverseSystemsSystemIdSignalError() instead")
    void getUniverseSystemsSystemIdSignalE(OAIGet_universe_systems_system_id_ok summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getUniverseSystemsSystemIdSignalError(OAIGet_universe_systems_system_id_ok summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getUniverseTypesSignalError() instead")
    void getUniverseTypesSignalE(QList<qint32> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getUniverseTypesSignalError(QList<qint32> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getUniverseTypesTypeIdSignalError() instead")
    void getUniverseTypesTypeIdSignalE(OAIGet_universe_types_type_id_ok summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getUniverseTypesTypeIdSignalError(OAIGet_universe_types_type_id_ok summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use postUniverseIdsSignalError() instead")
    void postUniverseIdsSignalE(OAIPost_universe_ids_ok summary, QNetworkReply::NetworkError error_type, QString error_str);
    void postUniverseIdsSignalError(OAIPost_universe_ids_ok summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use postUniverseNamesSignalError() instead")
    void postUniverseNamesSignalE(QList<OAIPost_universe_names_200_ok> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void postUniverseNamesSignalError(QList<OAIPost_universe_names_200_ok> summary, QNetworkReply::NetworkError error_type, const QString &error_str);

    Q_DECL_DEPRECATED_X("Use getUniverseAncestriesSignalErrorFull() instead")
    void getUniverseAncestriesSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getUniverseAncestriesSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getUniverseAsteroidBeltsAsteroidBeltIdSignalErrorFull() instead")
    void getUniverseAsteroidBeltsAsteroidBeltIdSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getUniverseAsteroidBeltsAsteroidBeltIdSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getUniverseBloodlinesSignalErrorFull() instead")
    void getUniverseBloodlinesSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getUniverseBloodlinesSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getUniverseCategoriesSignalErrorFull() instead")
    void getUniverseCategoriesSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getUniverseCategoriesSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getUniverseCategoriesCategoryIdSignalErrorFull() instead")
    void getUniverseCategoriesCategoryIdSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getUniverseCategoriesCategoryIdSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getUniverseConstellationsSignalErrorFull() instead")
    void getUniverseConstellationsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getUniverseConstellationsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getUniverseConstellationsConstellationIdSignalErrorFull() instead")
    void getUniverseConstellationsConstellationIdSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getUniverseConstellationsConstellationIdSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getUniverseFactionsSignalErrorFull() instead")
    void getUniverseFactionsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getUniverseFactionsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getUniverseGraphicsSignalErrorFull() instead")
    void getUniverseGraphicsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getUniverseGraphicsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getUniverseGraphicsGraphicIdSignalErrorFull() instead")
    void getUniverseGraphicsGraphicIdSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getUniverseGraphicsGraphicIdSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getUniverseGroupsSignalErrorFull() instead")
    void getUniverseGroupsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getUniverseGroupsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getUniverseGroupsGroupIdSignalErrorFull() instead")
    void getUniverseGroupsGroupIdSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getUniverseGroupsGroupIdSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getUniverseMoonsMoonIdSignalErrorFull() instead")
    void getUniverseMoonsMoonIdSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getUniverseMoonsMoonIdSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getUniversePlanetsPlanetIdSignalErrorFull() instead")
    void getUniversePlanetsPlanetIdSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getUniversePlanetsPlanetIdSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getUniverseRacesSignalErrorFull() instead")
    void getUniverseRacesSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getUniverseRacesSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getUniverseRegionsSignalErrorFull() instead")
    void getUniverseRegionsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getUniverseRegionsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getUniverseRegionsRegionIdSignalErrorFull() instead")
    void getUniverseRegionsRegionIdSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getUniverseRegionsRegionIdSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getUniverseStargatesStargateIdSignalErrorFull() instead")
    void getUniverseStargatesStargateIdSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getUniverseStargatesStargateIdSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getUniverseStarsStarIdSignalErrorFull() instead")
    void getUniverseStarsStarIdSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getUniverseStarsStarIdSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getUniverseStationsStationIdSignalErrorFull() instead")
    void getUniverseStationsStationIdSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getUniverseStationsStationIdSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getUniverseStructuresSignalErrorFull() instead")
    void getUniverseStructuresSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getUniverseStructuresSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getUniverseStructuresStructureIdSignalErrorFull() instead")
    void getUniverseStructuresStructureIdSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getUniverseStructuresStructureIdSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getUniverseSystemJumpsSignalErrorFull() instead")
    void getUniverseSystemJumpsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getUniverseSystemJumpsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getUniverseSystemKillsSignalErrorFull() instead")
    void getUniverseSystemKillsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getUniverseSystemKillsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getUniverseSystemsSignalErrorFull() instead")
    void getUniverseSystemsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getUniverseSystemsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getUniverseSystemsSystemIdSignalErrorFull() instead")
    void getUniverseSystemsSystemIdSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getUniverseSystemsSystemIdSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getUniverseTypesSignalErrorFull() instead")
    void getUniverseTypesSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getUniverseTypesSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getUniverseTypesTypeIdSignalErrorFull() instead")
    void getUniverseTypesTypeIdSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getUniverseTypesTypeIdSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use postUniverseIdsSignalErrorFull() instead")
    void postUniverseIdsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void postUniverseIdsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use postUniverseNamesSignalErrorFull() instead")
    void postUniverseNamesSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void postUniverseNamesSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);

    void abortRequestsSignal();
    void allPendingRequestsCompleted();

public Q_SLOTS:
    void tokenAvailable();
};

} // namespace OpenAPI
#endif
