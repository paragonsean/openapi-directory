/**
 * EVE Swagger Interface
 * An OpenAPI for EVE Online
 *
 * The version of the OpenAPI document: 0.8.6
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIGet_corporations_corporation_id_starbases_starbase_id_ok.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIGet_corporations_corporation_id_starbases_starbase_id_ok::OAIGet_corporations_corporation_id_starbases_starbase_id_ok(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIGet_corporations_corporation_id_starbases_starbase_id_ok::OAIGet_corporations_corporation_id_starbases_starbase_id_ok() {
    this->initializeModel();
}

OAIGet_corporations_corporation_id_starbases_starbase_id_ok::~OAIGet_corporations_corporation_id_starbases_starbase_id_ok() {}

void OAIGet_corporations_corporation_id_starbases_starbase_id_ok::initializeModel() {

    m_allow_alliance_members_isSet = false;
    m_allow_alliance_members_isValid = false;

    m_allow_corporation_members_isSet = false;
    m_allow_corporation_members_isValid = false;

    m_anchor_isSet = false;
    m_anchor_isValid = false;

    m_attack_if_at_war_isSet = false;
    m_attack_if_at_war_isValid = false;

    m_attack_if_other_security_status_dropping_isSet = false;
    m_attack_if_other_security_status_dropping_isValid = false;

    m_attack_security_status_threshold_isSet = false;
    m_attack_security_status_threshold_isValid = false;

    m_attack_standing_threshold_isSet = false;
    m_attack_standing_threshold_isValid = false;

    m_fuel_bay_take_isSet = false;
    m_fuel_bay_take_isValid = false;

    m_fuel_bay_view_isSet = false;
    m_fuel_bay_view_isValid = false;

    m_fuels_isSet = false;
    m_fuels_isValid = false;

    m_offline_isSet = false;
    m_offline_isValid = false;

    m_online_isSet = false;
    m_online_isValid = false;

    m_unanchor_isSet = false;
    m_unanchor_isValid = false;

    m_use_alliance_standings_isSet = false;
    m_use_alliance_standings_isValid = false;
}

void OAIGet_corporations_corporation_id_starbases_starbase_id_ok::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIGet_corporations_corporation_id_starbases_starbase_id_ok::fromJsonObject(QJsonObject json) {

    m_allow_alliance_members_isValid = ::OpenAPI::fromJsonValue(m_allow_alliance_members, json[QString("allow_alliance_members")]);
    m_allow_alliance_members_isSet = !json[QString("allow_alliance_members")].isNull() && m_allow_alliance_members_isValid;

    m_allow_corporation_members_isValid = ::OpenAPI::fromJsonValue(m_allow_corporation_members, json[QString("allow_corporation_members")]);
    m_allow_corporation_members_isSet = !json[QString("allow_corporation_members")].isNull() && m_allow_corporation_members_isValid;

    m_anchor_isValid = ::OpenAPI::fromJsonValue(m_anchor, json[QString("anchor")]);
    m_anchor_isSet = !json[QString("anchor")].isNull() && m_anchor_isValid;

    m_attack_if_at_war_isValid = ::OpenAPI::fromJsonValue(m_attack_if_at_war, json[QString("attack_if_at_war")]);
    m_attack_if_at_war_isSet = !json[QString("attack_if_at_war")].isNull() && m_attack_if_at_war_isValid;

    m_attack_if_other_security_status_dropping_isValid = ::OpenAPI::fromJsonValue(m_attack_if_other_security_status_dropping, json[QString("attack_if_other_security_status_dropping")]);
    m_attack_if_other_security_status_dropping_isSet = !json[QString("attack_if_other_security_status_dropping")].isNull() && m_attack_if_other_security_status_dropping_isValid;

    m_attack_security_status_threshold_isValid = ::OpenAPI::fromJsonValue(m_attack_security_status_threshold, json[QString("attack_security_status_threshold")]);
    m_attack_security_status_threshold_isSet = !json[QString("attack_security_status_threshold")].isNull() && m_attack_security_status_threshold_isValid;

    m_attack_standing_threshold_isValid = ::OpenAPI::fromJsonValue(m_attack_standing_threshold, json[QString("attack_standing_threshold")]);
    m_attack_standing_threshold_isSet = !json[QString("attack_standing_threshold")].isNull() && m_attack_standing_threshold_isValid;

    m_fuel_bay_take_isValid = ::OpenAPI::fromJsonValue(m_fuel_bay_take, json[QString("fuel_bay_take")]);
    m_fuel_bay_take_isSet = !json[QString("fuel_bay_take")].isNull() && m_fuel_bay_take_isValid;

    m_fuel_bay_view_isValid = ::OpenAPI::fromJsonValue(m_fuel_bay_view, json[QString("fuel_bay_view")]);
    m_fuel_bay_view_isSet = !json[QString("fuel_bay_view")].isNull() && m_fuel_bay_view_isValid;

    m_fuels_isValid = ::OpenAPI::fromJsonValue(m_fuels, json[QString("fuels")]);
    m_fuels_isSet = !json[QString("fuels")].isNull() && m_fuels_isValid;

    m_offline_isValid = ::OpenAPI::fromJsonValue(m_offline, json[QString("offline")]);
    m_offline_isSet = !json[QString("offline")].isNull() && m_offline_isValid;

    m_online_isValid = ::OpenAPI::fromJsonValue(m_online, json[QString("online")]);
    m_online_isSet = !json[QString("online")].isNull() && m_online_isValid;

    m_unanchor_isValid = ::OpenAPI::fromJsonValue(m_unanchor, json[QString("unanchor")]);
    m_unanchor_isSet = !json[QString("unanchor")].isNull() && m_unanchor_isValid;

    m_use_alliance_standings_isValid = ::OpenAPI::fromJsonValue(m_use_alliance_standings, json[QString("use_alliance_standings")]);
    m_use_alliance_standings_isSet = !json[QString("use_alliance_standings")].isNull() && m_use_alliance_standings_isValid;
}

QString OAIGet_corporations_corporation_id_starbases_starbase_id_ok::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIGet_corporations_corporation_id_starbases_starbase_id_ok::asJsonObject() const {
    QJsonObject obj;
    if (m_allow_alliance_members_isSet) {
        obj.insert(QString("allow_alliance_members"), ::OpenAPI::toJsonValue(m_allow_alliance_members));
    }
    if (m_allow_corporation_members_isSet) {
        obj.insert(QString("allow_corporation_members"), ::OpenAPI::toJsonValue(m_allow_corporation_members));
    }
    if (m_anchor_isSet) {
        obj.insert(QString("anchor"), ::OpenAPI::toJsonValue(m_anchor));
    }
    if (m_attack_if_at_war_isSet) {
        obj.insert(QString("attack_if_at_war"), ::OpenAPI::toJsonValue(m_attack_if_at_war));
    }
    if (m_attack_if_other_security_status_dropping_isSet) {
        obj.insert(QString("attack_if_other_security_status_dropping"), ::OpenAPI::toJsonValue(m_attack_if_other_security_status_dropping));
    }
    if (m_attack_security_status_threshold_isSet) {
        obj.insert(QString("attack_security_status_threshold"), ::OpenAPI::toJsonValue(m_attack_security_status_threshold));
    }
    if (m_attack_standing_threshold_isSet) {
        obj.insert(QString("attack_standing_threshold"), ::OpenAPI::toJsonValue(m_attack_standing_threshold));
    }
    if (m_fuel_bay_take_isSet) {
        obj.insert(QString("fuel_bay_take"), ::OpenAPI::toJsonValue(m_fuel_bay_take));
    }
    if (m_fuel_bay_view_isSet) {
        obj.insert(QString("fuel_bay_view"), ::OpenAPI::toJsonValue(m_fuel_bay_view));
    }
    if (m_fuels.size() > 0) {
        obj.insert(QString("fuels"), ::OpenAPI::toJsonValue(m_fuels));
    }
    if (m_offline_isSet) {
        obj.insert(QString("offline"), ::OpenAPI::toJsonValue(m_offline));
    }
    if (m_online_isSet) {
        obj.insert(QString("online"), ::OpenAPI::toJsonValue(m_online));
    }
    if (m_unanchor_isSet) {
        obj.insert(QString("unanchor"), ::OpenAPI::toJsonValue(m_unanchor));
    }
    if (m_use_alliance_standings_isSet) {
        obj.insert(QString("use_alliance_standings"), ::OpenAPI::toJsonValue(m_use_alliance_standings));
    }
    return obj;
}

bool OAIGet_corporations_corporation_id_starbases_starbase_id_ok::isAllowAllianceMembers() const {
    return m_allow_alliance_members;
}
void OAIGet_corporations_corporation_id_starbases_starbase_id_ok::setAllowAllianceMembers(const bool &allow_alliance_members) {
    m_allow_alliance_members = allow_alliance_members;
    m_allow_alliance_members_isSet = true;
}

bool OAIGet_corporations_corporation_id_starbases_starbase_id_ok::is_allow_alliance_members_Set() const{
    return m_allow_alliance_members_isSet;
}

bool OAIGet_corporations_corporation_id_starbases_starbase_id_ok::is_allow_alliance_members_Valid() const{
    return m_allow_alliance_members_isValid;
}

bool OAIGet_corporations_corporation_id_starbases_starbase_id_ok::isAllowCorporationMembers() const {
    return m_allow_corporation_members;
}
void OAIGet_corporations_corporation_id_starbases_starbase_id_ok::setAllowCorporationMembers(const bool &allow_corporation_members) {
    m_allow_corporation_members = allow_corporation_members;
    m_allow_corporation_members_isSet = true;
}

bool OAIGet_corporations_corporation_id_starbases_starbase_id_ok::is_allow_corporation_members_Set() const{
    return m_allow_corporation_members_isSet;
}

bool OAIGet_corporations_corporation_id_starbases_starbase_id_ok::is_allow_corporation_members_Valid() const{
    return m_allow_corporation_members_isValid;
}

QString OAIGet_corporations_corporation_id_starbases_starbase_id_ok::getAnchor() const {
    return m_anchor;
}
void OAIGet_corporations_corporation_id_starbases_starbase_id_ok::setAnchor(const QString &anchor) {
    m_anchor = anchor;
    m_anchor_isSet = true;
}

bool OAIGet_corporations_corporation_id_starbases_starbase_id_ok::is_anchor_Set() const{
    return m_anchor_isSet;
}

bool OAIGet_corporations_corporation_id_starbases_starbase_id_ok::is_anchor_Valid() const{
    return m_anchor_isValid;
}

bool OAIGet_corporations_corporation_id_starbases_starbase_id_ok::isAttackIfAtWar() const {
    return m_attack_if_at_war;
}
void OAIGet_corporations_corporation_id_starbases_starbase_id_ok::setAttackIfAtWar(const bool &attack_if_at_war) {
    m_attack_if_at_war = attack_if_at_war;
    m_attack_if_at_war_isSet = true;
}

bool OAIGet_corporations_corporation_id_starbases_starbase_id_ok::is_attack_if_at_war_Set() const{
    return m_attack_if_at_war_isSet;
}

bool OAIGet_corporations_corporation_id_starbases_starbase_id_ok::is_attack_if_at_war_Valid() const{
    return m_attack_if_at_war_isValid;
}

bool OAIGet_corporations_corporation_id_starbases_starbase_id_ok::isAttackIfOtherSecurityStatusDropping() const {
    return m_attack_if_other_security_status_dropping;
}
void OAIGet_corporations_corporation_id_starbases_starbase_id_ok::setAttackIfOtherSecurityStatusDropping(const bool &attack_if_other_security_status_dropping) {
    m_attack_if_other_security_status_dropping = attack_if_other_security_status_dropping;
    m_attack_if_other_security_status_dropping_isSet = true;
}

bool OAIGet_corporations_corporation_id_starbases_starbase_id_ok::is_attack_if_other_security_status_dropping_Set() const{
    return m_attack_if_other_security_status_dropping_isSet;
}

bool OAIGet_corporations_corporation_id_starbases_starbase_id_ok::is_attack_if_other_security_status_dropping_Valid() const{
    return m_attack_if_other_security_status_dropping_isValid;
}

float OAIGet_corporations_corporation_id_starbases_starbase_id_ok::getAttackSecurityStatusThreshold() const {
    return m_attack_security_status_threshold;
}
void OAIGet_corporations_corporation_id_starbases_starbase_id_ok::setAttackSecurityStatusThreshold(const float &attack_security_status_threshold) {
    m_attack_security_status_threshold = attack_security_status_threshold;
    m_attack_security_status_threshold_isSet = true;
}

bool OAIGet_corporations_corporation_id_starbases_starbase_id_ok::is_attack_security_status_threshold_Set() const{
    return m_attack_security_status_threshold_isSet;
}

bool OAIGet_corporations_corporation_id_starbases_starbase_id_ok::is_attack_security_status_threshold_Valid() const{
    return m_attack_security_status_threshold_isValid;
}

float OAIGet_corporations_corporation_id_starbases_starbase_id_ok::getAttackStandingThreshold() const {
    return m_attack_standing_threshold;
}
void OAIGet_corporations_corporation_id_starbases_starbase_id_ok::setAttackStandingThreshold(const float &attack_standing_threshold) {
    m_attack_standing_threshold = attack_standing_threshold;
    m_attack_standing_threshold_isSet = true;
}

bool OAIGet_corporations_corporation_id_starbases_starbase_id_ok::is_attack_standing_threshold_Set() const{
    return m_attack_standing_threshold_isSet;
}

bool OAIGet_corporations_corporation_id_starbases_starbase_id_ok::is_attack_standing_threshold_Valid() const{
    return m_attack_standing_threshold_isValid;
}

QString OAIGet_corporations_corporation_id_starbases_starbase_id_ok::getFuelBayTake() const {
    return m_fuel_bay_take;
}
void OAIGet_corporations_corporation_id_starbases_starbase_id_ok::setFuelBayTake(const QString &fuel_bay_take) {
    m_fuel_bay_take = fuel_bay_take;
    m_fuel_bay_take_isSet = true;
}

bool OAIGet_corporations_corporation_id_starbases_starbase_id_ok::is_fuel_bay_take_Set() const{
    return m_fuel_bay_take_isSet;
}

bool OAIGet_corporations_corporation_id_starbases_starbase_id_ok::is_fuel_bay_take_Valid() const{
    return m_fuel_bay_take_isValid;
}

QString OAIGet_corporations_corporation_id_starbases_starbase_id_ok::getFuelBayView() const {
    return m_fuel_bay_view;
}
void OAIGet_corporations_corporation_id_starbases_starbase_id_ok::setFuelBayView(const QString &fuel_bay_view) {
    m_fuel_bay_view = fuel_bay_view;
    m_fuel_bay_view_isSet = true;
}

bool OAIGet_corporations_corporation_id_starbases_starbase_id_ok::is_fuel_bay_view_Set() const{
    return m_fuel_bay_view_isSet;
}

bool OAIGet_corporations_corporation_id_starbases_starbase_id_ok::is_fuel_bay_view_Valid() const{
    return m_fuel_bay_view_isValid;
}

QList<OAIGet_corporations_corporation_id_starbases_starbase_id_fuel> OAIGet_corporations_corporation_id_starbases_starbase_id_ok::getFuels() const {
    return m_fuels;
}
void OAIGet_corporations_corporation_id_starbases_starbase_id_ok::setFuels(const QList<OAIGet_corporations_corporation_id_starbases_starbase_id_fuel> &fuels) {
    m_fuels = fuels;
    m_fuels_isSet = true;
}

bool OAIGet_corporations_corporation_id_starbases_starbase_id_ok::is_fuels_Set() const{
    return m_fuels_isSet;
}

bool OAIGet_corporations_corporation_id_starbases_starbase_id_ok::is_fuels_Valid() const{
    return m_fuels_isValid;
}

QString OAIGet_corporations_corporation_id_starbases_starbase_id_ok::getOffline() const {
    return m_offline;
}
void OAIGet_corporations_corporation_id_starbases_starbase_id_ok::setOffline(const QString &offline) {
    m_offline = offline;
    m_offline_isSet = true;
}

bool OAIGet_corporations_corporation_id_starbases_starbase_id_ok::is_offline_Set() const{
    return m_offline_isSet;
}

bool OAIGet_corporations_corporation_id_starbases_starbase_id_ok::is_offline_Valid() const{
    return m_offline_isValid;
}

QString OAIGet_corporations_corporation_id_starbases_starbase_id_ok::getOnline() const {
    return m_online;
}
void OAIGet_corporations_corporation_id_starbases_starbase_id_ok::setOnline(const QString &online) {
    m_online = online;
    m_online_isSet = true;
}

bool OAIGet_corporations_corporation_id_starbases_starbase_id_ok::is_online_Set() const{
    return m_online_isSet;
}

bool OAIGet_corporations_corporation_id_starbases_starbase_id_ok::is_online_Valid() const{
    return m_online_isValid;
}

QString OAIGet_corporations_corporation_id_starbases_starbase_id_ok::getUnanchor() const {
    return m_unanchor;
}
void OAIGet_corporations_corporation_id_starbases_starbase_id_ok::setUnanchor(const QString &unanchor) {
    m_unanchor = unanchor;
    m_unanchor_isSet = true;
}

bool OAIGet_corporations_corporation_id_starbases_starbase_id_ok::is_unanchor_Set() const{
    return m_unanchor_isSet;
}

bool OAIGet_corporations_corporation_id_starbases_starbase_id_ok::is_unanchor_Valid() const{
    return m_unanchor_isValid;
}

bool OAIGet_corporations_corporation_id_starbases_starbase_id_ok::isUseAllianceStandings() const {
    return m_use_alliance_standings;
}
void OAIGet_corporations_corporation_id_starbases_starbase_id_ok::setUseAllianceStandings(const bool &use_alliance_standings) {
    m_use_alliance_standings = use_alliance_standings;
    m_use_alliance_standings_isSet = true;
}

bool OAIGet_corporations_corporation_id_starbases_starbase_id_ok::is_use_alliance_standings_Set() const{
    return m_use_alliance_standings_isSet;
}

bool OAIGet_corporations_corporation_id_starbases_starbase_id_ok::is_use_alliance_standings_Valid() const{
    return m_use_alliance_standings_isValid;
}

bool OAIGet_corporations_corporation_id_starbases_starbase_id_ok::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_allow_alliance_members_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_allow_corporation_members_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_anchor_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_attack_if_at_war_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_attack_if_other_security_status_dropping_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_attack_security_status_threshold_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_attack_standing_threshold_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_fuel_bay_take_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_fuel_bay_view_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_fuels.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_offline_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_online_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_unanchor_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_use_alliance_standings_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIGet_corporations_corporation_id_starbases_starbase_id_ok::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_allow_alliance_members_isValid && m_allow_corporation_members_isValid && m_anchor_isValid && m_attack_if_at_war_isValid && m_attack_if_other_security_status_dropping_isValid && m_fuel_bay_take_isValid && m_fuel_bay_view_isValid && m_offline_isValid && m_online_isValid && m_unanchor_isValid && m_use_alliance_standings_isValid && true;
}

} // namespace OpenAPI
