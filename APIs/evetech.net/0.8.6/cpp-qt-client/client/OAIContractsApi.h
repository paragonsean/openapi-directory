/**
 * EVE Swagger Interface
 * An OpenAPI for EVE Online
 *
 * The version of the OpenAPI document: 0.8.6
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#ifndef OAI_OAIContractsApi_H
#define OAI_OAIContractsApi_H

#include "OAIHelpers.h"
#include "OAIHttpRequest.h"
#include "OAIServerConfiguration.h"
#include "OAIOauth.h"

#include "OAIBad_request.h"
#include "OAIError_limited.h"
#include "OAIForbidden.h"
#include "OAIGateway_timeout.h"
#include "OAIGet_characters_character_id_contracts_200_ok.h"
#include "OAIGet_characters_character_id_contracts_contract_id_bids_200_ok.h"
#include "OAIGet_characters_character_id_contracts_contract_id_bids_not_found.h"
#include "OAIGet_characters_character_id_contracts_contract_id_items_200_ok.h"
#include "OAIGet_characters_character_id_contracts_contract_id_items_not_found.h"
#include "OAIGet_contracts_public_bids_contract_id_200_ok.h"
#include "OAIGet_contracts_public_bids_contract_id_forbidden.h"
#include "OAIGet_contracts_public_bids_contract_id_not_found.h"
#include "OAIGet_contracts_public_items_contract_id_200_ok.h"
#include "OAIGet_contracts_public_items_contract_id_forbidden.h"
#include "OAIGet_contracts_public_items_contract_id_not_found.h"
#include "OAIGet_contracts_public_region_id_200_ok.h"
#include "OAIGet_contracts_public_region_id_not_found.h"
#include "OAIGet_corporations_corporation_id_contracts_200_ok.h"
#include "OAIGet_corporations_corporation_id_contracts_contract_id_bids_200_ok.h"
#include "OAIGet_corporations_corporation_id_contracts_contract_id_bids_not_found.h"
#include "OAIGet_corporations_corporation_id_contracts_contract_id_items_200_ok.h"
#include "OAIGet_corporations_corporation_id_contracts_contract_id_items_error_520.h"
#include "OAIGet_corporations_corporation_id_contracts_contract_id_items_not_found.h"
#include "OAIInternal_server_error.h"
#include "OAIService_unavailable.h"
#include "OAIUnauthorized.h"
#include <QString>

#include <QObject>
#include <QByteArray>
#include <QStringList>
#include <QList>
#include <QNetworkAccessManager>

namespace OpenAPI {

class OAIContractsApi : public QObject {
    Q_OBJECT

public:
    OAIContractsApi(const int timeOut = 0);
    ~OAIContractsApi();

    void initializeServerConfigs();
    int setDefaultServerValue(int serverIndex,const QString &operation, const QString &variable,const QString &val);
    void setServerIndex(const QString &operation, int serverIndex);
    void setApiKey(const QString &apiKeyName, const QString &apiKey);
    void setBearerToken(const QString &token);
    void setUsername(const QString &username);
    void setPassword(const QString &password);
    void setTimeOut(const int timeOut);
    void setWorkingDirectory(const QString &path);
    void setNetworkAccessManager(QNetworkAccessManager* manager);
    int addServerConfiguration(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables = QMap<QString, OAIServerVariable>());
    void setNewServerForAllOperations(const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void setNewServer(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void addHeaders(const QString &key, const QString &value);
    void enableRequestCompression();
    void enableResponseCompression();
    void abortRequests();
    QString getParamStylePrefix(const QString &style);
    QString getParamStyleSuffix(const QString &style);
    QString getParamStyleDelimiter(const QString &style, const QString &name, bool isExplode);

    /**
    * @param[in]  character_id qint32 [required]
    * @param[in]  datasource QString [optional]
    * @param[in]  if_none_match QString [optional]
    * @param[in]  page qint32 [optional]
    * @param[in]  token QString [optional]
    */
    virtual void getCharactersCharacterIdContracts(const qint32 &character_id, const ::OpenAPI::OptionalParam<QString> &datasource = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &if_none_match = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<qint32> &page = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<QString> &token = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  character_id qint32 [required]
    * @param[in]  contract_id qint32 [required]
    * @param[in]  datasource QString [optional]
    * @param[in]  if_none_match QString [optional]
    * @param[in]  token QString [optional]
    */
    virtual void getCharactersCharacterIdContractsContractIdBids(const qint32 &character_id, const qint32 &contract_id, const ::OpenAPI::OptionalParam<QString> &datasource = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &if_none_match = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &token = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  character_id qint32 [required]
    * @param[in]  contract_id qint32 [required]
    * @param[in]  datasource QString [optional]
    * @param[in]  if_none_match QString [optional]
    * @param[in]  token QString [optional]
    */
    virtual void getCharactersCharacterIdContractsContractIdItems(const qint32 &character_id, const qint32 &contract_id, const ::OpenAPI::OptionalParam<QString> &datasource = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &if_none_match = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &token = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  contract_id qint32 [required]
    * @param[in]  datasource QString [optional]
    * @param[in]  if_none_match QString [optional]
    * @param[in]  page qint32 [optional]
    */
    virtual void getContractsPublicBidsContractId(const qint32 &contract_id, const ::OpenAPI::OptionalParam<QString> &datasource = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &if_none_match = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<qint32> &page = ::OpenAPI::OptionalParam<qint32>());

    /**
    * @param[in]  contract_id qint32 [required]
    * @param[in]  datasource QString [optional]
    * @param[in]  if_none_match QString [optional]
    * @param[in]  page qint32 [optional]
    */
    virtual void getContractsPublicItemsContractId(const qint32 &contract_id, const ::OpenAPI::OptionalParam<QString> &datasource = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &if_none_match = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<qint32> &page = ::OpenAPI::OptionalParam<qint32>());

    /**
    * @param[in]  region_id qint32 [required]
    * @param[in]  datasource QString [optional]
    * @param[in]  if_none_match QString [optional]
    * @param[in]  page qint32 [optional]
    */
    virtual void getContractsPublicRegionId(const qint32 &region_id, const ::OpenAPI::OptionalParam<QString> &datasource = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &if_none_match = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<qint32> &page = ::OpenAPI::OptionalParam<qint32>());

    /**
    * @param[in]  corporation_id qint32 [required]
    * @param[in]  datasource QString [optional]
    * @param[in]  if_none_match QString [optional]
    * @param[in]  page qint32 [optional]
    * @param[in]  token QString [optional]
    */
    virtual void getCorporationsCorporationIdContracts(const qint32 &corporation_id, const ::OpenAPI::OptionalParam<QString> &datasource = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &if_none_match = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<qint32> &page = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<QString> &token = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  contract_id qint32 [required]
    * @param[in]  corporation_id qint32 [required]
    * @param[in]  datasource QString [optional]
    * @param[in]  if_none_match QString [optional]
    * @param[in]  page qint32 [optional]
    * @param[in]  token QString [optional]
    */
    virtual void getCorporationsCorporationIdContractsContractIdBids(const qint32 &contract_id, const qint32 &corporation_id, const ::OpenAPI::OptionalParam<QString> &datasource = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &if_none_match = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<qint32> &page = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<QString> &token = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  contract_id qint32 [required]
    * @param[in]  corporation_id qint32 [required]
    * @param[in]  datasource QString [optional]
    * @param[in]  if_none_match QString [optional]
    * @param[in]  token QString [optional]
    */
    virtual void getCorporationsCorporationIdContractsContractIdItems(const qint32 &contract_id, const qint32 &corporation_id, const ::OpenAPI::OptionalParam<QString> &datasource = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &if_none_match = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &token = ::OpenAPI::OptionalParam<QString>());


private:
    QMap<QString,int> _serverIndices;
    QMap<QString,QList<OAIServerConfiguration>> _serverConfigs;
    QMap<QString, QString> _apiKeys;
    QString _bearerToken;
    QString _username;
    QString _password;
    int _timeOut;
    QString _workingDirectory;
    QNetworkAccessManager* _manager;
    QMap<QString, QString> _defaultHeaders;
    bool _isResponseCompressionEnabled;
    bool _isRequestCompressionEnabled;
    OAIHttpRequestInput _latestInput;
    OAIHttpRequestWorker *_latestWorker;
    QStringList _latestScope;
    OauthCode _authFlow;
    OauthImplicit _implicitFlow;
    OauthCredentials _credentialFlow;
    OauthPassword _passwordFlow;
    int _OauthMethod = 0;

    void getCharactersCharacterIdContractsCallback(OAIHttpRequestWorker *worker);
    void getCharactersCharacterIdContractsContractIdBidsCallback(OAIHttpRequestWorker *worker);
    void getCharactersCharacterIdContractsContractIdItemsCallback(OAIHttpRequestWorker *worker);
    void getContractsPublicBidsContractIdCallback(OAIHttpRequestWorker *worker);
    void getContractsPublicItemsContractIdCallback(OAIHttpRequestWorker *worker);
    void getContractsPublicRegionIdCallback(OAIHttpRequestWorker *worker);
    void getCorporationsCorporationIdContractsCallback(OAIHttpRequestWorker *worker);
    void getCorporationsCorporationIdContractsContractIdBidsCallback(OAIHttpRequestWorker *worker);
    void getCorporationsCorporationIdContractsContractIdItemsCallback(OAIHttpRequestWorker *worker);

Q_SIGNALS:

    void getCharactersCharacterIdContractsSignal(QList<OAIGet_characters_character_id_contracts_200_ok> summary);
    void getCharactersCharacterIdContractsContractIdBidsSignal(QList<OAIGet_characters_character_id_contracts_contract_id_bids_200_ok> summary);
    void getCharactersCharacterIdContractsContractIdItemsSignal(QList<OAIGet_characters_character_id_contracts_contract_id_items_200_ok> summary);
    void getContractsPublicBidsContractIdSignal(QList<OAIGet_contracts_public_bids_contract_id_200_ok> summary);
    void getContractsPublicItemsContractIdSignal(QList<OAIGet_contracts_public_items_contract_id_200_ok> summary);
    void getContractsPublicRegionIdSignal(QList<OAIGet_contracts_public_region_id_200_ok> summary);
    void getCorporationsCorporationIdContractsSignal(QList<OAIGet_corporations_corporation_id_contracts_200_ok> summary);
    void getCorporationsCorporationIdContractsContractIdBidsSignal(QList<OAIGet_corporations_corporation_id_contracts_contract_id_bids_200_ok> summary);
    void getCorporationsCorporationIdContractsContractIdItemsSignal(QList<OAIGet_corporations_corporation_id_contracts_contract_id_items_200_ok> summary);


    void getCharactersCharacterIdContractsSignalFull(OAIHttpRequestWorker *worker, QList<OAIGet_characters_character_id_contracts_200_ok> summary);
    void getCharactersCharacterIdContractsContractIdBidsSignalFull(OAIHttpRequestWorker *worker, QList<OAIGet_characters_character_id_contracts_contract_id_bids_200_ok> summary);
    void getCharactersCharacterIdContractsContractIdItemsSignalFull(OAIHttpRequestWorker *worker, QList<OAIGet_characters_character_id_contracts_contract_id_items_200_ok> summary);
    void getContractsPublicBidsContractIdSignalFull(OAIHttpRequestWorker *worker, QList<OAIGet_contracts_public_bids_contract_id_200_ok> summary);
    void getContractsPublicItemsContractIdSignalFull(OAIHttpRequestWorker *worker, QList<OAIGet_contracts_public_items_contract_id_200_ok> summary);
    void getContractsPublicRegionIdSignalFull(OAIHttpRequestWorker *worker, QList<OAIGet_contracts_public_region_id_200_ok> summary);
    void getCorporationsCorporationIdContractsSignalFull(OAIHttpRequestWorker *worker, QList<OAIGet_corporations_corporation_id_contracts_200_ok> summary);
    void getCorporationsCorporationIdContractsContractIdBidsSignalFull(OAIHttpRequestWorker *worker, QList<OAIGet_corporations_corporation_id_contracts_contract_id_bids_200_ok> summary);
    void getCorporationsCorporationIdContractsContractIdItemsSignalFull(OAIHttpRequestWorker *worker, QList<OAIGet_corporations_corporation_id_contracts_contract_id_items_200_ok> summary);

    Q_DECL_DEPRECATED_X("Use getCharactersCharacterIdContractsSignalError() instead")
    void getCharactersCharacterIdContractsSignalE(QList<OAIGet_characters_character_id_contracts_200_ok> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getCharactersCharacterIdContractsSignalError(QList<OAIGet_characters_character_id_contracts_200_ok> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getCharactersCharacterIdContractsContractIdBidsSignalError() instead")
    void getCharactersCharacterIdContractsContractIdBidsSignalE(QList<OAIGet_characters_character_id_contracts_contract_id_bids_200_ok> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getCharactersCharacterIdContractsContractIdBidsSignalError(QList<OAIGet_characters_character_id_contracts_contract_id_bids_200_ok> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getCharactersCharacterIdContractsContractIdItemsSignalError() instead")
    void getCharactersCharacterIdContractsContractIdItemsSignalE(QList<OAIGet_characters_character_id_contracts_contract_id_items_200_ok> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getCharactersCharacterIdContractsContractIdItemsSignalError(QList<OAIGet_characters_character_id_contracts_contract_id_items_200_ok> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getContractsPublicBidsContractIdSignalError() instead")
    void getContractsPublicBidsContractIdSignalE(QList<OAIGet_contracts_public_bids_contract_id_200_ok> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getContractsPublicBidsContractIdSignalError(QList<OAIGet_contracts_public_bids_contract_id_200_ok> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getContractsPublicItemsContractIdSignalError() instead")
    void getContractsPublicItemsContractIdSignalE(QList<OAIGet_contracts_public_items_contract_id_200_ok> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getContractsPublicItemsContractIdSignalError(QList<OAIGet_contracts_public_items_contract_id_200_ok> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getContractsPublicRegionIdSignalError() instead")
    void getContractsPublicRegionIdSignalE(QList<OAIGet_contracts_public_region_id_200_ok> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getContractsPublicRegionIdSignalError(QList<OAIGet_contracts_public_region_id_200_ok> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getCorporationsCorporationIdContractsSignalError() instead")
    void getCorporationsCorporationIdContractsSignalE(QList<OAIGet_corporations_corporation_id_contracts_200_ok> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getCorporationsCorporationIdContractsSignalError(QList<OAIGet_corporations_corporation_id_contracts_200_ok> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getCorporationsCorporationIdContractsContractIdBidsSignalError() instead")
    void getCorporationsCorporationIdContractsContractIdBidsSignalE(QList<OAIGet_corporations_corporation_id_contracts_contract_id_bids_200_ok> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getCorporationsCorporationIdContractsContractIdBidsSignalError(QList<OAIGet_corporations_corporation_id_contracts_contract_id_bids_200_ok> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getCorporationsCorporationIdContractsContractIdItemsSignalError() instead")
    void getCorporationsCorporationIdContractsContractIdItemsSignalE(QList<OAIGet_corporations_corporation_id_contracts_contract_id_items_200_ok> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getCorporationsCorporationIdContractsContractIdItemsSignalError(QList<OAIGet_corporations_corporation_id_contracts_contract_id_items_200_ok> summary, QNetworkReply::NetworkError error_type, const QString &error_str);

    Q_DECL_DEPRECATED_X("Use getCharactersCharacterIdContractsSignalErrorFull() instead")
    void getCharactersCharacterIdContractsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getCharactersCharacterIdContractsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getCharactersCharacterIdContractsContractIdBidsSignalErrorFull() instead")
    void getCharactersCharacterIdContractsContractIdBidsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getCharactersCharacterIdContractsContractIdBidsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getCharactersCharacterIdContractsContractIdItemsSignalErrorFull() instead")
    void getCharactersCharacterIdContractsContractIdItemsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getCharactersCharacterIdContractsContractIdItemsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getContractsPublicBidsContractIdSignalErrorFull() instead")
    void getContractsPublicBidsContractIdSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getContractsPublicBidsContractIdSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getContractsPublicItemsContractIdSignalErrorFull() instead")
    void getContractsPublicItemsContractIdSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getContractsPublicItemsContractIdSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getContractsPublicRegionIdSignalErrorFull() instead")
    void getContractsPublicRegionIdSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getContractsPublicRegionIdSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getCorporationsCorporationIdContractsSignalErrorFull() instead")
    void getCorporationsCorporationIdContractsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getCorporationsCorporationIdContractsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getCorporationsCorporationIdContractsContractIdBidsSignalErrorFull() instead")
    void getCorporationsCorporationIdContractsContractIdBidsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getCorporationsCorporationIdContractsContractIdBidsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getCorporationsCorporationIdContractsContractIdItemsSignalErrorFull() instead")
    void getCorporationsCorporationIdContractsContractIdItemsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getCorporationsCorporationIdContractsContractIdItemsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);

    void abortRequestsSignal();
    void allPendingRequestsCompleted();

public Q_SLOTS:
    void tokenAvailable();
};

} // namespace OpenAPI
#endif
