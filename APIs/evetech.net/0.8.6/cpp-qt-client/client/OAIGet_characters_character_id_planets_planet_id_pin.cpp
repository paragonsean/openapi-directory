/**
 * EVE Swagger Interface
 * An OpenAPI for EVE Online
 *
 * The version of the OpenAPI document: 0.8.6
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIGet_characters_character_id_planets_planet_id_pin.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIGet_characters_character_id_planets_planet_id_pin::OAIGet_characters_character_id_planets_planet_id_pin(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIGet_characters_character_id_planets_planet_id_pin::OAIGet_characters_character_id_planets_planet_id_pin() {
    this->initializeModel();
}

OAIGet_characters_character_id_planets_planet_id_pin::~OAIGet_characters_character_id_planets_planet_id_pin() {}

void OAIGet_characters_character_id_planets_planet_id_pin::initializeModel() {

    m_contents_isSet = false;
    m_contents_isValid = false;

    m_expiry_time_isSet = false;
    m_expiry_time_isValid = false;

    m_extractor_details_isSet = false;
    m_extractor_details_isValid = false;

    m_factory_details_isSet = false;
    m_factory_details_isValid = false;

    m_install_time_isSet = false;
    m_install_time_isValid = false;

    m_last_cycle_start_isSet = false;
    m_last_cycle_start_isValid = false;

    m_latitude_isSet = false;
    m_latitude_isValid = false;

    m_longitude_isSet = false;
    m_longitude_isValid = false;

    m_pin_id_isSet = false;
    m_pin_id_isValid = false;

    m_schematic_id_isSet = false;
    m_schematic_id_isValid = false;

    m_type_id_isSet = false;
    m_type_id_isValid = false;
}

void OAIGet_characters_character_id_planets_planet_id_pin::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIGet_characters_character_id_planets_planet_id_pin::fromJsonObject(QJsonObject json) {

    m_contents_isValid = ::OpenAPI::fromJsonValue(m_contents, json[QString("contents")]);
    m_contents_isSet = !json[QString("contents")].isNull() && m_contents_isValid;

    m_expiry_time_isValid = ::OpenAPI::fromJsonValue(m_expiry_time, json[QString("expiry_time")]);
    m_expiry_time_isSet = !json[QString("expiry_time")].isNull() && m_expiry_time_isValid;

    m_extractor_details_isValid = ::OpenAPI::fromJsonValue(m_extractor_details, json[QString("extractor_details")]);
    m_extractor_details_isSet = !json[QString("extractor_details")].isNull() && m_extractor_details_isValid;

    m_factory_details_isValid = ::OpenAPI::fromJsonValue(m_factory_details, json[QString("factory_details")]);
    m_factory_details_isSet = !json[QString("factory_details")].isNull() && m_factory_details_isValid;

    m_install_time_isValid = ::OpenAPI::fromJsonValue(m_install_time, json[QString("install_time")]);
    m_install_time_isSet = !json[QString("install_time")].isNull() && m_install_time_isValid;

    m_last_cycle_start_isValid = ::OpenAPI::fromJsonValue(m_last_cycle_start, json[QString("last_cycle_start")]);
    m_last_cycle_start_isSet = !json[QString("last_cycle_start")].isNull() && m_last_cycle_start_isValid;

    m_latitude_isValid = ::OpenAPI::fromJsonValue(m_latitude, json[QString("latitude")]);
    m_latitude_isSet = !json[QString("latitude")].isNull() && m_latitude_isValid;

    m_longitude_isValid = ::OpenAPI::fromJsonValue(m_longitude, json[QString("longitude")]);
    m_longitude_isSet = !json[QString("longitude")].isNull() && m_longitude_isValid;

    m_pin_id_isValid = ::OpenAPI::fromJsonValue(m_pin_id, json[QString("pin_id")]);
    m_pin_id_isSet = !json[QString("pin_id")].isNull() && m_pin_id_isValid;

    m_schematic_id_isValid = ::OpenAPI::fromJsonValue(m_schematic_id, json[QString("schematic_id")]);
    m_schematic_id_isSet = !json[QString("schematic_id")].isNull() && m_schematic_id_isValid;

    m_type_id_isValid = ::OpenAPI::fromJsonValue(m_type_id, json[QString("type_id")]);
    m_type_id_isSet = !json[QString("type_id")].isNull() && m_type_id_isValid;
}

QString OAIGet_characters_character_id_planets_planet_id_pin::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIGet_characters_character_id_planets_planet_id_pin::asJsonObject() const {
    QJsonObject obj;
    if (m_contents.size() > 0) {
        obj.insert(QString("contents"), ::OpenAPI::toJsonValue(m_contents));
    }
    if (m_expiry_time_isSet) {
        obj.insert(QString("expiry_time"), ::OpenAPI::toJsonValue(m_expiry_time));
    }
    if (m_extractor_details.isSet()) {
        obj.insert(QString("extractor_details"), ::OpenAPI::toJsonValue(m_extractor_details));
    }
    if (m_factory_details.isSet()) {
        obj.insert(QString("factory_details"), ::OpenAPI::toJsonValue(m_factory_details));
    }
    if (m_install_time_isSet) {
        obj.insert(QString("install_time"), ::OpenAPI::toJsonValue(m_install_time));
    }
    if (m_last_cycle_start_isSet) {
        obj.insert(QString("last_cycle_start"), ::OpenAPI::toJsonValue(m_last_cycle_start));
    }
    if (m_latitude_isSet) {
        obj.insert(QString("latitude"), ::OpenAPI::toJsonValue(m_latitude));
    }
    if (m_longitude_isSet) {
        obj.insert(QString("longitude"), ::OpenAPI::toJsonValue(m_longitude));
    }
    if (m_pin_id_isSet) {
        obj.insert(QString("pin_id"), ::OpenAPI::toJsonValue(m_pin_id));
    }
    if (m_schematic_id_isSet) {
        obj.insert(QString("schematic_id"), ::OpenAPI::toJsonValue(m_schematic_id));
    }
    if (m_type_id_isSet) {
        obj.insert(QString("type_id"), ::OpenAPI::toJsonValue(m_type_id));
    }
    return obj;
}

QList<OAIGet_characters_character_id_planets_planet_id_content> OAIGet_characters_character_id_planets_planet_id_pin::getContents() const {
    return m_contents;
}
void OAIGet_characters_character_id_planets_planet_id_pin::setContents(const QList<OAIGet_characters_character_id_planets_planet_id_content> &contents) {
    m_contents = contents;
    m_contents_isSet = true;
}

bool OAIGet_characters_character_id_planets_planet_id_pin::is_contents_Set() const{
    return m_contents_isSet;
}

bool OAIGet_characters_character_id_planets_planet_id_pin::is_contents_Valid() const{
    return m_contents_isValid;
}

QDateTime OAIGet_characters_character_id_planets_planet_id_pin::getExpiryTime() const {
    return m_expiry_time;
}
void OAIGet_characters_character_id_planets_planet_id_pin::setExpiryTime(const QDateTime &expiry_time) {
    m_expiry_time = expiry_time;
    m_expiry_time_isSet = true;
}

bool OAIGet_characters_character_id_planets_planet_id_pin::is_expiry_time_Set() const{
    return m_expiry_time_isSet;
}

bool OAIGet_characters_character_id_planets_planet_id_pin::is_expiry_time_Valid() const{
    return m_expiry_time_isValid;
}

OAIGet_characters_character_id_planets_planet_id_extractor_details OAIGet_characters_character_id_planets_planet_id_pin::getExtractorDetails() const {
    return m_extractor_details;
}
void OAIGet_characters_character_id_planets_planet_id_pin::setExtractorDetails(const OAIGet_characters_character_id_planets_planet_id_extractor_details &extractor_details) {
    m_extractor_details = extractor_details;
    m_extractor_details_isSet = true;
}

bool OAIGet_characters_character_id_planets_planet_id_pin::is_extractor_details_Set() const{
    return m_extractor_details_isSet;
}

bool OAIGet_characters_character_id_planets_planet_id_pin::is_extractor_details_Valid() const{
    return m_extractor_details_isValid;
}

OAIGet_characters_character_id_planets_planet_id_factory_details OAIGet_characters_character_id_planets_planet_id_pin::getFactoryDetails() const {
    return m_factory_details;
}
void OAIGet_characters_character_id_planets_planet_id_pin::setFactoryDetails(const OAIGet_characters_character_id_planets_planet_id_factory_details &factory_details) {
    m_factory_details = factory_details;
    m_factory_details_isSet = true;
}

bool OAIGet_characters_character_id_planets_planet_id_pin::is_factory_details_Set() const{
    return m_factory_details_isSet;
}

bool OAIGet_characters_character_id_planets_planet_id_pin::is_factory_details_Valid() const{
    return m_factory_details_isValid;
}

QDateTime OAIGet_characters_character_id_planets_planet_id_pin::getInstallTime() const {
    return m_install_time;
}
void OAIGet_characters_character_id_planets_planet_id_pin::setInstallTime(const QDateTime &install_time) {
    m_install_time = install_time;
    m_install_time_isSet = true;
}

bool OAIGet_characters_character_id_planets_planet_id_pin::is_install_time_Set() const{
    return m_install_time_isSet;
}

bool OAIGet_characters_character_id_planets_planet_id_pin::is_install_time_Valid() const{
    return m_install_time_isValid;
}

QDateTime OAIGet_characters_character_id_planets_planet_id_pin::getLastCycleStart() const {
    return m_last_cycle_start;
}
void OAIGet_characters_character_id_planets_planet_id_pin::setLastCycleStart(const QDateTime &last_cycle_start) {
    m_last_cycle_start = last_cycle_start;
    m_last_cycle_start_isSet = true;
}

bool OAIGet_characters_character_id_planets_planet_id_pin::is_last_cycle_start_Set() const{
    return m_last_cycle_start_isSet;
}

bool OAIGet_characters_character_id_planets_planet_id_pin::is_last_cycle_start_Valid() const{
    return m_last_cycle_start_isValid;
}

float OAIGet_characters_character_id_planets_planet_id_pin::getLatitude() const {
    return m_latitude;
}
void OAIGet_characters_character_id_planets_planet_id_pin::setLatitude(const float &latitude) {
    m_latitude = latitude;
    m_latitude_isSet = true;
}

bool OAIGet_characters_character_id_planets_planet_id_pin::is_latitude_Set() const{
    return m_latitude_isSet;
}

bool OAIGet_characters_character_id_planets_planet_id_pin::is_latitude_Valid() const{
    return m_latitude_isValid;
}

float OAIGet_characters_character_id_planets_planet_id_pin::getLongitude() const {
    return m_longitude;
}
void OAIGet_characters_character_id_planets_planet_id_pin::setLongitude(const float &longitude) {
    m_longitude = longitude;
    m_longitude_isSet = true;
}

bool OAIGet_characters_character_id_planets_planet_id_pin::is_longitude_Set() const{
    return m_longitude_isSet;
}

bool OAIGet_characters_character_id_planets_planet_id_pin::is_longitude_Valid() const{
    return m_longitude_isValid;
}

qint64 OAIGet_characters_character_id_planets_planet_id_pin::getPinId() const {
    return m_pin_id;
}
void OAIGet_characters_character_id_planets_planet_id_pin::setPinId(const qint64 &pin_id) {
    m_pin_id = pin_id;
    m_pin_id_isSet = true;
}

bool OAIGet_characters_character_id_planets_planet_id_pin::is_pin_id_Set() const{
    return m_pin_id_isSet;
}

bool OAIGet_characters_character_id_planets_planet_id_pin::is_pin_id_Valid() const{
    return m_pin_id_isValid;
}

qint32 OAIGet_characters_character_id_planets_planet_id_pin::getSchematicId() const {
    return m_schematic_id;
}
void OAIGet_characters_character_id_planets_planet_id_pin::setSchematicId(const qint32 &schematic_id) {
    m_schematic_id = schematic_id;
    m_schematic_id_isSet = true;
}

bool OAIGet_characters_character_id_planets_planet_id_pin::is_schematic_id_Set() const{
    return m_schematic_id_isSet;
}

bool OAIGet_characters_character_id_planets_planet_id_pin::is_schematic_id_Valid() const{
    return m_schematic_id_isValid;
}

qint32 OAIGet_characters_character_id_planets_planet_id_pin::getTypeId() const {
    return m_type_id;
}
void OAIGet_characters_character_id_planets_planet_id_pin::setTypeId(const qint32 &type_id) {
    m_type_id = type_id;
    m_type_id_isSet = true;
}

bool OAIGet_characters_character_id_planets_planet_id_pin::is_type_id_Set() const{
    return m_type_id_isSet;
}

bool OAIGet_characters_character_id_planets_planet_id_pin::is_type_id_Valid() const{
    return m_type_id_isValid;
}

bool OAIGet_characters_character_id_planets_planet_id_pin::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_contents.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_expiry_time_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_extractor_details.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_factory_details.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_install_time_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_last_cycle_start_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_latitude_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_longitude_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_pin_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_schematic_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_type_id_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIGet_characters_character_id_planets_planet_id_pin::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_latitude_isValid && m_longitude_isValid && m_pin_id_isValid && m_type_id_isValid && true;
}

} // namespace OpenAPI
