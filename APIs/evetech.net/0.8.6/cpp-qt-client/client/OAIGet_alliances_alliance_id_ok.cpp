/**
 * EVE Swagger Interface
 * An OpenAPI for EVE Online
 *
 * The version of the OpenAPI document: 0.8.6
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIGet_alliances_alliance_id_ok.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIGet_alliances_alliance_id_ok::OAIGet_alliances_alliance_id_ok(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIGet_alliances_alliance_id_ok::OAIGet_alliances_alliance_id_ok() {
    this->initializeModel();
}

OAIGet_alliances_alliance_id_ok::~OAIGet_alliances_alliance_id_ok() {}

void OAIGet_alliances_alliance_id_ok::initializeModel() {

    m_creator_corporation_id_isSet = false;
    m_creator_corporation_id_isValid = false;

    m_creator_id_isSet = false;
    m_creator_id_isValid = false;

    m_date_founded_isSet = false;
    m_date_founded_isValid = false;

    m_executor_corporation_id_isSet = false;
    m_executor_corporation_id_isValid = false;

    m_faction_id_isSet = false;
    m_faction_id_isValid = false;

    m_name_isSet = false;
    m_name_isValid = false;

    m_ticker_isSet = false;
    m_ticker_isValid = false;
}

void OAIGet_alliances_alliance_id_ok::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIGet_alliances_alliance_id_ok::fromJsonObject(QJsonObject json) {

    m_creator_corporation_id_isValid = ::OpenAPI::fromJsonValue(m_creator_corporation_id, json[QString("creator_corporation_id")]);
    m_creator_corporation_id_isSet = !json[QString("creator_corporation_id")].isNull() && m_creator_corporation_id_isValid;

    m_creator_id_isValid = ::OpenAPI::fromJsonValue(m_creator_id, json[QString("creator_id")]);
    m_creator_id_isSet = !json[QString("creator_id")].isNull() && m_creator_id_isValid;

    m_date_founded_isValid = ::OpenAPI::fromJsonValue(m_date_founded, json[QString("date_founded")]);
    m_date_founded_isSet = !json[QString("date_founded")].isNull() && m_date_founded_isValid;

    m_executor_corporation_id_isValid = ::OpenAPI::fromJsonValue(m_executor_corporation_id, json[QString("executor_corporation_id")]);
    m_executor_corporation_id_isSet = !json[QString("executor_corporation_id")].isNull() && m_executor_corporation_id_isValid;

    m_faction_id_isValid = ::OpenAPI::fromJsonValue(m_faction_id, json[QString("faction_id")]);
    m_faction_id_isSet = !json[QString("faction_id")].isNull() && m_faction_id_isValid;

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("name")]);
    m_name_isSet = !json[QString("name")].isNull() && m_name_isValid;

    m_ticker_isValid = ::OpenAPI::fromJsonValue(m_ticker, json[QString("ticker")]);
    m_ticker_isSet = !json[QString("ticker")].isNull() && m_ticker_isValid;
}

QString OAIGet_alliances_alliance_id_ok::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIGet_alliances_alliance_id_ok::asJsonObject() const {
    QJsonObject obj;
    if (m_creator_corporation_id_isSet) {
        obj.insert(QString("creator_corporation_id"), ::OpenAPI::toJsonValue(m_creator_corporation_id));
    }
    if (m_creator_id_isSet) {
        obj.insert(QString("creator_id"), ::OpenAPI::toJsonValue(m_creator_id));
    }
    if (m_date_founded_isSet) {
        obj.insert(QString("date_founded"), ::OpenAPI::toJsonValue(m_date_founded));
    }
    if (m_executor_corporation_id_isSet) {
        obj.insert(QString("executor_corporation_id"), ::OpenAPI::toJsonValue(m_executor_corporation_id));
    }
    if (m_faction_id_isSet) {
        obj.insert(QString("faction_id"), ::OpenAPI::toJsonValue(m_faction_id));
    }
    if (m_name_isSet) {
        obj.insert(QString("name"), ::OpenAPI::toJsonValue(m_name));
    }
    if (m_ticker_isSet) {
        obj.insert(QString("ticker"), ::OpenAPI::toJsonValue(m_ticker));
    }
    return obj;
}

qint32 OAIGet_alliances_alliance_id_ok::getCreatorCorporationId() const {
    return m_creator_corporation_id;
}
void OAIGet_alliances_alliance_id_ok::setCreatorCorporationId(const qint32 &creator_corporation_id) {
    m_creator_corporation_id = creator_corporation_id;
    m_creator_corporation_id_isSet = true;
}

bool OAIGet_alliances_alliance_id_ok::is_creator_corporation_id_Set() const{
    return m_creator_corporation_id_isSet;
}

bool OAIGet_alliances_alliance_id_ok::is_creator_corporation_id_Valid() const{
    return m_creator_corporation_id_isValid;
}

qint32 OAIGet_alliances_alliance_id_ok::getCreatorId() const {
    return m_creator_id;
}
void OAIGet_alliances_alliance_id_ok::setCreatorId(const qint32 &creator_id) {
    m_creator_id = creator_id;
    m_creator_id_isSet = true;
}

bool OAIGet_alliances_alliance_id_ok::is_creator_id_Set() const{
    return m_creator_id_isSet;
}

bool OAIGet_alliances_alliance_id_ok::is_creator_id_Valid() const{
    return m_creator_id_isValid;
}

QDateTime OAIGet_alliances_alliance_id_ok::getDateFounded() const {
    return m_date_founded;
}
void OAIGet_alliances_alliance_id_ok::setDateFounded(const QDateTime &date_founded) {
    m_date_founded = date_founded;
    m_date_founded_isSet = true;
}

bool OAIGet_alliances_alliance_id_ok::is_date_founded_Set() const{
    return m_date_founded_isSet;
}

bool OAIGet_alliances_alliance_id_ok::is_date_founded_Valid() const{
    return m_date_founded_isValid;
}

qint32 OAIGet_alliances_alliance_id_ok::getExecutorCorporationId() const {
    return m_executor_corporation_id;
}
void OAIGet_alliances_alliance_id_ok::setExecutorCorporationId(const qint32 &executor_corporation_id) {
    m_executor_corporation_id = executor_corporation_id;
    m_executor_corporation_id_isSet = true;
}

bool OAIGet_alliances_alliance_id_ok::is_executor_corporation_id_Set() const{
    return m_executor_corporation_id_isSet;
}

bool OAIGet_alliances_alliance_id_ok::is_executor_corporation_id_Valid() const{
    return m_executor_corporation_id_isValid;
}

qint32 OAIGet_alliances_alliance_id_ok::getFactionId() const {
    return m_faction_id;
}
void OAIGet_alliances_alliance_id_ok::setFactionId(const qint32 &faction_id) {
    m_faction_id = faction_id;
    m_faction_id_isSet = true;
}

bool OAIGet_alliances_alliance_id_ok::is_faction_id_Set() const{
    return m_faction_id_isSet;
}

bool OAIGet_alliances_alliance_id_ok::is_faction_id_Valid() const{
    return m_faction_id_isValid;
}

QString OAIGet_alliances_alliance_id_ok::getName() const {
    return m_name;
}
void OAIGet_alliances_alliance_id_ok::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAIGet_alliances_alliance_id_ok::is_name_Set() const{
    return m_name_isSet;
}

bool OAIGet_alliances_alliance_id_ok::is_name_Valid() const{
    return m_name_isValid;
}

QString OAIGet_alliances_alliance_id_ok::getTicker() const {
    return m_ticker;
}
void OAIGet_alliances_alliance_id_ok::setTicker(const QString &ticker) {
    m_ticker = ticker;
    m_ticker_isSet = true;
}

bool OAIGet_alliances_alliance_id_ok::is_ticker_Set() const{
    return m_ticker_isSet;
}

bool OAIGet_alliances_alliance_id_ok::is_ticker_Valid() const{
    return m_ticker_isValid;
}

bool OAIGet_alliances_alliance_id_ok::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_creator_corporation_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_creator_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_date_founded_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_executor_corporation_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_faction_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_ticker_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIGet_alliances_alliance_id_ok::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_creator_corporation_id_isValid && m_creator_id_isValid && m_date_founded_isValid && m_name_isValid && m_ticker_isValid && true;
}

} // namespace OpenAPI
