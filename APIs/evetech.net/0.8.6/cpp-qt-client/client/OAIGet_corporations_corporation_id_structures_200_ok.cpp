/**
 * EVE Swagger Interface
 * An OpenAPI for EVE Online
 *
 * The version of the OpenAPI document: 0.8.6
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIGet_corporations_corporation_id_structures_200_ok.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIGet_corporations_corporation_id_structures_200_ok::OAIGet_corporations_corporation_id_structures_200_ok(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIGet_corporations_corporation_id_structures_200_ok::OAIGet_corporations_corporation_id_structures_200_ok() {
    this->initializeModel();
}

OAIGet_corporations_corporation_id_structures_200_ok::~OAIGet_corporations_corporation_id_structures_200_ok() {}

void OAIGet_corporations_corporation_id_structures_200_ok::initializeModel() {

    m_corporation_id_isSet = false;
    m_corporation_id_isValid = false;

    m_fuel_expires_isSet = false;
    m_fuel_expires_isValid = false;

    m_next_reinforce_apply_isSet = false;
    m_next_reinforce_apply_isValid = false;

    m_next_reinforce_hour_isSet = false;
    m_next_reinforce_hour_isValid = false;

    m_next_reinforce_weekday_isSet = false;
    m_next_reinforce_weekday_isValid = false;

    m_profile_id_isSet = false;
    m_profile_id_isValid = false;

    m_reinforce_hour_isSet = false;
    m_reinforce_hour_isValid = false;

    m_reinforce_weekday_isSet = false;
    m_reinforce_weekday_isValid = false;

    m_services_isSet = false;
    m_services_isValid = false;

    m_state_isSet = false;
    m_state_isValid = false;

    m_state_timer_end_isSet = false;
    m_state_timer_end_isValid = false;

    m_state_timer_start_isSet = false;
    m_state_timer_start_isValid = false;

    m_structure_id_isSet = false;
    m_structure_id_isValid = false;

    m_system_id_isSet = false;
    m_system_id_isValid = false;

    m_type_id_isSet = false;
    m_type_id_isValid = false;

    m_unanchors_at_isSet = false;
    m_unanchors_at_isValid = false;
}

void OAIGet_corporations_corporation_id_structures_200_ok::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIGet_corporations_corporation_id_structures_200_ok::fromJsonObject(QJsonObject json) {

    m_corporation_id_isValid = ::OpenAPI::fromJsonValue(m_corporation_id, json[QString("corporation_id")]);
    m_corporation_id_isSet = !json[QString("corporation_id")].isNull() && m_corporation_id_isValid;

    m_fuel_expires_isValid = ::OpenAPI::fromJsonValue(m_fuel_expires, json[QString("fuel_expires")]);
    m_fuel_expires_isSet = !json[QString("fuel_expires")].isNull() && m_fuel_expires_isValid;

    m_next_reinforce_apply_isValid = ::OpenAPI::fromJsonValue(m_next_reinforce_apply, json[QString("next_reinforce_apply")]);
    m_next_reinforce_apply_isSet = !json[QString("next_reinforce_apply")].isNull() && m_next_reinforce_apply_isValid;

    m_next_reinforce_hour_isValid = ::OpenAPI::fromJsonValue(m_next_reinforce_hour, json[QString("next_reinforce_hour")]);
    m_next_reinforce_hour_isSet = !json[QString("next_reinforce_hour")].isNull() && m_next_reinforce_hour_isValid;

    m_next_reinforce_weekday_isValid = ::OpenAPI::fromJsonValue(m_next_reinforce_weekday, json[QString("next_reinforce_weekday")]);
    m_next_reinforce_weekday_isSet = !json[QString("next_reinforce_weekday")].isNull() && m_next_reinforce_weekday_isValid;

    m_profile_id_isValid = ::OpenAPI::fromJsonValue(m_profile_id, json[QString("profile_id")]);
    m_profile_id_isSet = !json[QString("profile_id")].isNull() && m_profile_id_isValid;

    m_reinforce_hour_isValid = ::OpenAPI::fromJsonValue(m_reinforce_hour, json[QString("reinforce_hour")]);
    m_reinforce_hour_isSet = !json[QString("reinforce_hour")].isNull() && m_reinforce_hour_isValid;

    m_reinforce_weekday_isValid = ::OpenAPI::fromJsonValue(m_reinforce_weekday, json[QString("reinforce_weekday")]);
    m_reinforce_weekday_isSet = !json[QString("reinforce_weekday")].isNull() && m_reinforce_weekday_isValid;

    m_services_isValid = ::OpenAPI::fromJsonValue(m_services, json[QString("services")]);
    m_services_isSet = !json[QString("services")].isNull() && m_services_isValid;

    m_state_isValid = ::OpenAPI::fromJsonValue(m_state, json[QString("state")]);
    m_state_isSet = !json[QString("state")].isNull() && m_state_isValid;

    m_state_timer_end_isValid = ::OpenAPI::fromJsonValue(m_state_timer_end, json[QString("state_timer_end")]);
    m_state_timer_end_isSet = !json[QString("state_timer_end")].isNull() && m_state_timer_end_isValid;

    m_state_timer_start_isValid = ::OpenAPI::fromJsonValue(m_state_timer_start, json[QString("state_timer_start")]);
    m_state_timer_start_isSet = !json[QString("state_timer_start")].isNull() && m_state_timer_start_isValid;

    m_structure_id_isValid = ::OpenAPI::fromJsonValue(m_structure_id, json[QString("structure_id")]);
    m_structure_id_isSet = !json[QString("structure_id")].isNull() && m_structure_id_isValid;

    m_system_id_isValid = ::OpenAPI::fromJsonValue(m_system_id, json[QString("system_id")]);
    m_system_id_isSet = !json[QString("system_id")].isNull() && m_system_id_isValid;

    m_type_id_isValid = ::OpenAPI::fromJsonValue(m_type_id, json[QString("type_id")]);
    m_type_id_isSet = !json[QString("type_id")].isNull() && m_type_id_isValid;

    m_unanchors_at_isValid = ::OpenAPI::fromJsonValue(m_unanchors_at, json[QString("unanchors_at")]);
    m_unanchors_at_isSet = !json[QString("unanchors_at")].isNull() && m_unanchors_at_isValid;
}

QString OAIGet_corporations_corporation_id_structures_200_ok::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIGet_corporations_corporation_id_structures_200_ok::asJsonObject() const {
    QJsonObject obj;
    if (m_corporation_id_isSet) {
        obj.insert(QString("corporation_id"), ::OpenAPI::toJsonValue(m_corporation_id));
    }
    if (m_fuel_expires_isSet) {
        obj.insert(QString("fuel_expires"), ::OpenAPI::toJsonValue(m_fuel_expires));
    }
    if (m_next_reinforce_apply_isSet) {
        obj.insert(QString("next_reinforce_apply"), ::OpenAPI::toJsonValue(m_next_reinforce_apply));
    }
    if (m_next_reinforce_hour_isSet) {
        obj.insert(QString("next_reinforce_hour"), ::OpenAPI::toJsonValue(m_next_reinforce_hour));
    }
    if (m_next_reinforce_weekday_isSet) {
        obj.insert(QString("next_reinforce_weekday"), ::OpenAPI::toJsonValue(m_next_reinforce_weekday));
    }
    if (m_profile_id_isSet) {
        obj.insert(QString("profile_id"), ::OpenAPI::toJsonValue(m_profile_id));
    }
    if (m_reinforce_hour_isSet) {
        obj.insert(QString("reinforce_hour"), ::OpenAPI::toJsonValue(m_reinforce_hour));
    }
    if (m_reinforce_weekday_isSet) {
        obj.insert(QString("reinforce_weekday"), ::OpenAPI::toJsonValue(m_reinforce_weekday));
    }
    if (m_services.size() > 0) {
        obj.insert(QString("services"), ::OpenAPI::toJsonValue(m_services));
    }
    if (m_state_isSet) {
        obj.insert(QString("state"), ::OpenAPI::toJsonValue(m_state));
    }
    if (m_state_timer_end_isSet) {
        obj.insert(QString("state_timer_end"), ::OpenAPI::toJsonValue(m_state_timer_end));
    }
    if (m_state_timer_start_isSet) {
        obj.insert(QString("state_timer_start"), ::OpenAPI::toJsonValue(m_state_timer_start));
    }
    if (m_structure_id_isSet) {
        obj.insert(QString("structure_id"), ::OpenAPI::toJsonValue(m_structure_id));
    }
    if (m_system_id_isSet) {
        obj.insert(QString("system_id"), ::OpenAPI::toJsonValue(m_system_id));
    }
    if (m_type_id_isSet) {
        obj.insert(QString("type_id"), ::OpenAPI::toJsonValue(m_type_id));
    }
    if (m_unanchors_at_isSet) {
        obj.insert(QString("unanchors_at"), ::OpenAPI::toJsonValue(m_unanchors_at));
    }
    return obj;
}

qint32 OAIGet_corporations_corporation_id_structures_200_ok::getCorporationId() const {
    return m_corporation_id;
}
void OAIGet_corporations_corporation_id_structures_200_ok::setCorporationId(const qint32 &corporation_id) {
    m_corporation_id = corporation_id;
    m_corporation_id_isSet = true;
}

bool OAIGet_corporations_corporation_id_structures_200_ok::is_corporation_id_Set() const{
    return m_corporation_id_isSet;
}

bool OAIGet_corporations_corporation_id_structures_200_ok::is_corporation_id_Valid() const{
    return m_corporation_id_isValid;
}

QDateTime OAIGet_corporations_corporation_id_structures_200_ok::getFuelExpires() const {
    return m_fuel_expires;
}
void OAIGet_corporations_corporation_id_structures_200_ok::setFuelExpires(const QDateTime &fuel_expires) {
    m_fuel_expires = fuel_expires;
    m_fuel_expires_isSet = true;
}

bool OAIGet_corporations_corporation_id_structures_200_ok::is_fuel_expires_Set() const{
    return m_fuel_expires_isSet;
}

bool OAIGet_corporations_corporation_id_structures_200_ok::is_fuel_expires_Valid() const{
    return m_fuel_expires_isValid;
}

QDateTime OAIGet_corporations_corporation_id_structures_200_ok::getNextReinforceApply() const {
    return m_next_reinforce_apply;
}
void OAIGet_corporations_corporation_id_structures_200_ok::setNextReinforceApply(const QDateTime &next_reinforce_apply) {
    m_next_reinforce_apply = next_reinforce_apply;
    m_next_reinforce_apply_isSet = true;
}

bool OAIGet_corporations_corporation_id_structures_200_ok::is_next_reinforce_apply_Set() const{
    return m_next_reinforce_apply_isSet;
}

bool OAIGet_corporations_corporation_id_structures_200_ok::is_next_reinforce_apply_Valid() const{
    return m_next_reinforce_apply_isValid;
}

qint32 OAIGet_corporations_corporation_id_structures_200_ok::getNextReinforceHour() const {
    return m_next_reinforce_hour;
}
void OAIGet_corporations_corporation_id_structures_200_ok::setNextReinforceHour(const qint32 &next_reinforce_hour) {
    m_next_reinforce_hour = next_reinforce_hour;
    m_next_reinforce_hour_isSet = true;
}

bool OAIGet_corporations_corporation_id_structures_200_ok::is_next_reinforce_hour_Set() const{
    return m_next_reinforce_hour_isSet;
}

bool OAIGet_corporations_corporation_id_structures_200_ok::is_next_reinforce_hour_Valid() const{
    return m_next_reinforce_hour_isValid;
}

qint32 OAIGet_corporations_corporation_id_structures_200_ok::getNextReinforceWeekday() const {
    return m_next_reinforce_weekday;
}
void OAIGet_corporations_corporation_id_structures_200_ok::setNextReinforceWeekday(const qint32 &next_reinforce_weekday) {
    m_next_reinforce_weekday = next_reinforce_weekday;
    m_next_reinforce_weekday_isSet = true;
}

bool OAIGet_corporations_corporation_id_structures_200_ok::is_next_reinforce_weekday_Set() const{
    return m_next_reinforce_weekday_isSet;
}

bool OAIGet_corporations_corporation_id_structures_200_ok::is_next_reinforce_weekday_Valid() const{
    return m_next_reinforce_weekday_isValid;
}

qint32 OAIGet_corporations_corporation_id_structures_200_ok::getProfileId() const {
    return m_profile_id;
}
void OAIGet_corporations_corporation_id_structures_200_ok::setProfileId(const qint32 &profile_id) {
    m_profile_id = profile_id;
    m_profile_id_isSet = true;
}

bool OAIGet_corporations_corporation_id_structures_200_ok::is_profile_id_Set() const{
    return m_profile_id_isSet;
}

bool OAIGet_corporations_corporation_id_structures_200_ok::is_profile_id_Valid() const{
    return m_profile_id_isValid;
}

qint32 OAIGet_corporations_corporation_id_structures_200_ok::getReinforceHour() const {
    return m_reinforce_hour;
}
void OAIGet_corporations_corporation_id_structures_200_ok::setReinforceHour(const qint32 &reinforce_hour) {
    m_reinforce_hour = reinforce_hour;
    m_reinforce_hour_isSet = true;
}

bool OAIGet_corporations_corporation_id_structures_200_ok::is_reinforce_hour_Set() const{
    return m_reinforce_hour_isSet;
}

bool OAIGet_corporations_corporation_id_structures_200_ok::is_reinforce_hour_Valid() const{
    return m_reinforce_hour_isValid;
}

qint32 OAIGet_corporations_corporation_id_structures_200_ok::getReinforceWeekday() const {
    return m_reinforce_weekday;
}
void OAIGet_corporations_corporation_id_structures_200_ok::setReinforceWeekday(const qint32 &reinforce_weekday) {
    m_reinforce_weekday = reinforce_weekday;
    m_reinforce_weekday_isSet = true;
}

bool OAIGet_corporations_corporation_id_structures_200_ok::is_reinforce_weekday_Set() const{
    return m_reinforce_weekday_isSet;
}

bool OAIGet_corporations_corporation_id_structures_200_ok::is_reinforce_weekday_Valid() const{
    return m_reinforce_weekday_isValid;
}

QList<OAIGet_corporations_corporation_id_structures_service> OAIGet_corporations_corporation_id_structures_200_ok::getServices() const {
    return m_services;
}
void OAIGet_corporations_corporation_id_structures_200_ok::setServices(const QList<OAIGet_corporations_corporation_id_structures_service> &services) {
    m_services = services;
    m_services_isSet = true;
}

bool OAIGet_corporations_corporation_id_structures_200_ok::is_services_Set() const{
    return m_services_isSet;
}

bool OAIGet_corporations_corporation_id_structures_200_ok::is_services_Valid() const{
    return m_services_isValid;
}

QString OAIGet_corporations_corporation_id_structures_200_ok::getState() const {
    return m_state;
}
void OAIGet_corporations_corporation_id_structures_200_ok::setState(const QString &state) {
    m_state = state;
    m_state_isSet = true;
}

bool OAIGet_corporations_corporation_id_structures_200_ok::is_state_Set() const{
    return m_state_isSet;
}

bool OAIGet_corporations_corporation_id_structures_200_ok::is_state_Valid() const{
    return m_state_isValid;
}

QDateTime OAIGet_corporations_corporation_id_structures_200_ok::getStateTimerEnd() const {
    return m_state_timer_end;
}
void OAIGet_corporations_corporation_id_structures_200_ok::setStateTimerEnd(const QDateTime &state_timer_end) {
    m_state_timer_end = state_timer_end;
    m_state_timer_end_isSet = true;
}

bool OAIGet_corporations_corporation_id_structures_200_ok::is_state_timer_end_Set() const{
    return m_state_timer_end_isSet;
}

bool OAIGet_corporations_corporation_id_structures_200_ok::is_state_timer_end_Valid() const{
    return m_state_timer_end_isValid;
}

QDateTime OAIGet_corporations_corporation_id_structures_200_ok::getStateTimerStart() const {
    return m_state_timer_start;
}
void OAIGet_corporations_corporation_id_structures_200_ok::setStateTimerStart(const QDateTime &state_timer_start) {
    m_state_timer_start = state_timer_start;
    m_state_timer_start_isSet = true;
}

bool OAIGet_corporations_corporation_id_structures_200_ok::is_state_timer_start_Set() const{
    return m_state_timer_start_isSet;
}

bool OAIGet_corporations_corporation_id_structures_200_ok::is_state_timer_start_Valid() const{
    return m_state_timer_start_isValid;
}

qint64 OAIGet_corporations_corporation_id_structures_200_ok::getStructureId() const {
    return m_structure_id;
}
void OAIGet_corporations_corporation_id_structures_200_ok::setStructureId(const qint64 &structure_id) {
    m_structure_id = structure_id;
    m_structure_id_isSet = true;
}

bool OAIGet_corporations_corporation_id_structures_200_ok::is_structure_id_Set() const{
    return m_structure_id_isSet;
}

bool OAIGet_corporations_corporation_id_structures_200_ok::is_structure_id_Valid() const{
    return m_structure_id_isValid;
}

qint32 OAIGet_corporations_corporation_id_structures_200_ok::getSystemId() const {
    return m_system_id;
}
void OAIGet_corporations_corporation_id_structures_200_ok::setSystemId(const qint32 &system_id) {
    m_system_id = system_id;
    m_system_id_isSet = true;
}

bool OAIGet_corporations_corporation_id_structures_200_ok::is_system_id_Set() const{
    return m_system_id_isSet;
}

bool OAIGet_corporations_corporation_id_structures_200_ok::is_system_id_Valid() const{
    return m_system_id_isValid;
}

qint32 OAIGet_corporations_corporation_id_structures_200_ok::getTypeId() const {
    return m_type_id;
}
void OAIGet_corporations_corporation_id_structures_200_ok::setTypeId(const qint32 &type_id) {
    m_type_id = type_id;
    m_type_id_isSet = true;
}

bool OAIGet_corporations_corporation_id_structures_200_ok::is_type_id_Set() const{
    return m_type_id_isSet;
}

bool OAIGet_corporations_corporation_id_structures_200_ok::is_type_id_Valid() const{
    return m_type_id_isValid;
}

QDateTime OAIGet_corporations_corporation_id_structures_200_ok::getUnanchorsAt() const {
    return m_unanchors_at;
}
void OAIGet_corporations_corporation_id_structures_200_ok::setUnanchorsAt(const QDateTime &unanchors_at) {
    m_unanchors_at = unanchors_at;
    m_unanchors_at_isSet = true;
}

bool OAIGet_corporations_corporation_id_structures_200_ok::is_unanchors_at_Set() const{
    return m_unanchors_at_isSet;
}

bool OAIGet_corporations_corporation_id_structures_200_ok::is_unanchors_at_Valid() const{
    return m_unanchors_at_isValid;
}

bool OAIGet_corporations_corporation_id_structures_200_ok::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_corporation_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_fuel_expires_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_next_reinforce_apply_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_next_reinforce_hour_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_next_reinforce_weekday_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_profile_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_reinforce_hour_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_reinforce_weekday_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_services.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_state_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_state_timer_end_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_state_timer_start_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_structure_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_system_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_type_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_unanchors_at_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIGet_corporations_corporation_id_structures_200_ok::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_corporation_id_isValid && m_profile_id_isValid && m_reinforce_hour_isValid && m_reinforce_weekday_isValid && m_state_isValid && m_structure_id_isValid && m_system_id_isValid && m_type_id_isValid && true;
}

} // namespace OpenAPI
