/**
 * EVE Swagger Interface
 * An OpenAPI for EVE Online
 *
 * The version of the OpenAPI document: 0.8.6
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#ifndef OAI_OAICharacterApi_H
#define OAI_OAICharacterApi_H

#include "OAIHelpers.h"
#include "OAIHttpRequest.h"
#include "OAIServerConfiguration.h"
#include "OAIOauth.h"

#include "OAIBad_request.h"
#include "OAIError_limited.h"
#include "OAIForbidden.h"
#include "OAIGateway_timeout.h"
#include "OAIGet_characters_character_id_agents_research_200_ok.h"
#include "OAIGet_characters_character_id_blueprints_200_ok.h"
#include "OAIGet_characters_character_id_corporationhistory_200_ok.h"
#include "OAIGet_characters_character_id_fatigue_ok.h"
#include "OAIGet_characters_character_id_medals_200_ok.h"
#include "OAIGet_characters_character_id_not_found.h"
#include "OAIGet_characters_character_id_notifications_200_ok.h"
#include "OAIGet_characters_character_id_notifications_contacts_200_ok.h"
#include "OAIGet_characters_character_id_ok.h"
#include "OAIGet_characters_character_id_portrait_not_found.h"
#include "OAIGet_characters_character_id_portrait_ok.h"
#include "OAIGet_characters_character_id_roles_ok.h"
#include "OAIGet_characters_character_id_standings_200_ok.h"
#include "OAIGet_characters_character_id_stats_200_ok.h"
#include "OAIGet_characters_character_id_titles_200_ok.h"
#include "OAIInternal_server_error.h"
#include "OAIPost_characters_affiliation_200_ok.h"
#include "OAIPost_characters_affiliation_not_found.h"
#include "OAIService_unavailable.h"
#include "OAIUnauthorized.h"
#include <QSet>
#include <QString>

#include <QObject>
#include <QByteArray>
#include <QStringList>
#include <QList>
#include <QNetworkAccessManager>

namespace OpenAPI {

class OAICharacterApi : public QObject {
    Q_OBJECT

public:
    OAICharacterApi(const int timeOut = 0);
    ~OAICharacterApi();

    void initializeServerConfigs();
    int setDefaultServerValue(int serverIndex,const QString &operation, const QString &variable,const QString &val);
    void setServerIndex(const QString &operation, int serverIndex);
    void setApiKey(const QString &apiKeyName, const QString &apiKey);
    void setBearerToken(const QString &token);
    void setUsername(const QString &username);
    void setPassword(const QString &password);
    void setTimeOut(const int timeOut);
    void setWorkingDirectory(const QString &path);
    void setNetworkAccessManager(QNetworkAccessManager* manager);
    int addServerConfiguration(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables = QMap<QString, OAIServerVariable>());
    void setNewServerForAllOperations(const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void setNewServer(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void addHeaders(const QString &key, const QString &value);
    void enableRequestCompression();
    void enableResponseCompression();
    void abortRequests();
    QString getParamStylePrefix(const QString &style);
    QString getParamStyleSuffix(const QString &style);
    QString getParamStyleDelimiter(const QString &style, const QString &name, bool isExplode);

    /**
    * @param[in]  character_id qint32 [required]
    * @param[in]  datasource QString [optional]
    * @param[in]  if_none_match QString [optional]
    */
    virtual void getCharactersCharacterId(const qint32 &character_id, const ::OpenAPI::OptionalParam<QString> &datasource = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &if_none_match = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  character_id qint32 [required]
    * @param[in]  datasource QString [optional]
    * @param[in]  if_none_match QString [optional]
    * @param[in]  token QString [optional]
    */
    virtual void getCharactersCharacterIdAgentsResearch(const qint32 &character_id, const ::OpenAPI::OptionalParam<QString> &datasource = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &if_none_match = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &token = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  character_id qint32 [required]
    * @param[in]  datasource QString [optional]
    * @param[in]  if_none_match QString [optional]
    * @param[in]  page qint32 [optional]
    * @param[in]  token QString [optional]
    */
    virtual void getCharactersCharacterIdBlueprints(const qint32 &character_id, const ::OpenAPI::OptionalParam<QString> &datasource = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &if_none_match = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<qint32> &page = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<QString> &token = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  character_id qint32 [required]
    * @param[in]  datasource QString [optional]
    * @param[in]  if_none_match QString [optional]
    */
    virtual void getCharactersCharacterIdCorporationhistory(const qint32 &character_id, const ::OpenAPI::OptionalParam<QString> &datasource = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &if_none_match = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  character_id qint32 [required]
    * @param[in]  datasource QString [optional]
    * @param[in]  if_none_match QString [optional]
    * @param[in]  token QString [optional]
    */
    virtual void getCharactersCharacterIdFatigue(const qint32 &character_id, const ::OpenAPI::OptionalParam<QString> &datasource = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &if_none_match = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &token = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  character_id qint32 [required]
    * @param[in]  datasource QString [optional]
    * @param[in]  if_none_match QString [optional]
    * @param[in]  token QString [optional]
    */
    virtual void getCharactersCharacterIdMedals(const qint32 &character_id, const ::OpenAPI::OptionalParam<QString> &datasource = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &if_none_match = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &token = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  character_id qint32 [required]
    * @param[in]  datasource QString [optional]
    * @param[in]  if_none_match QString [optional]
    * @param[in]  token QString [optional]
    */
    virtual void getCharactersCharacterIdNotifications(const qint32 &character_id, const ::OpenAPI::OptionalParam<QString> &datasource = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &if_none_match = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &token = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  character_id qint32 [required]
    * @param[in]  datasource QString [optional]
    * @param[in]  if_none_match QString [optional]
    * @param[in]  token QString [optional]
    */
    virtual void getCharactersCharacterIdNotificationsContacts(const qint32 &character_id, const ::OpenAPI::OptionalParam<QString> &datasource = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &if_none_match = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &token = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  character_id qint32 [required]
    * @param[in]  datasource QString [optional]
    * @param[in]  if_none_match QString [optional]
    */
    virtual void getCharactersCharacterIdPortrait(const qint32 &character_id, const ::OpenAPI::OptionalParam<QString> &datasource = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &if_none_match = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  character_id qint32 [required]
    * @param[in]  datasource QString [optional]
    * @param[in]  if_none_match QString [optional]
    * @param[in]  token QString [optional]
    */
    virtual void getCharactersCharacterIdRoles(const qint32 &character_id, const ::OpenAPI::OptionalParam<QString> &datasource = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &if_none_match = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &token = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  character_id qint32 [required]
    * @param[in]  datasource QString [optional]
    * @param[in]  if_none_match QString [optional]
    * @param[in]  token QString [optional]
    */
    virtual void getCharactersCharacterIdStandings(const qint32 &character_id, const ::OpenAPI::OptionalParam<QString> &datasource = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &if_none_match = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &token = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  character_id qint32 [required]
    * @param[in]  datasource QString [optional]
    * @param[in]  if_none_match QString [optional]
    * @param[in]  token QString [optional]
    */
    virtual void getCharactersCharacterIdStats(const qint32 &character_id, const ::OpenAPI::OptionalParam<QString> &datasource = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &if_none_match = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &token = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  character_id qint32 [required]
    * @param[in]  datasource QString [optional]
    * @param[in]  if_none_match QString [optional]
    * @param[in]  token QString [optional]
    */
    virtual void getCharactersCharacterIdTitles(const qint32 &character_id, const ::OpenAPI::OptionalParam<QString> &datasource = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &if_none_match = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &token = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  characters QSet<qint32> [required]
    * @param[in]  datasource QString [optional]
    */
    virtual void postCharactersAffiliation(const QSet<qint32> &characters, const ::OpenAPI::OptionalParam<QString> &datasource = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  character_id qint32 [required]
    * @param[in]  characters QSet<qint32> [required]
    * @param[in]  datasource QString [optional]
    * @param[in]  token QString [optional]
    */
    virtual void postCharactersCharacterIdCspa(const qint32 &character_id, const QSet<qint32> &characters, const ::OpenAPI::OptionalParam<QString> &datasource = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &token = ::OpenAPI::OptionalParam<QString>());


private:
    QMap<QString,int> _serverIndices;
    QMap<QString,QList<OAIServerConfiguration>> _serverConfigs;
    QMap<QString, QString> _apiKeys;
    QString _bearerToken;
    QString _username;
    QString _password;
    int _timeOut;
    QString _workingDirectory;
    QNetworkAccessManager* _manager;
    QMap<QString, QString> _defaultHeaders;
    bool _isResponseCompressionEnabled;
    bool _isRequestCompressionEnabled;
    OAIHttpRequestInput _latestInput;
    OAIHttpRequestWorker *_latestWorker;
    QStringList _latestScope;
    OauthCode _authFlow;
    OauthImplicit _implicitFlow;
    OauthCredentials _credentialFlow;
    OauthPassword _passwordFlow;
    int _OauthMethod = 0;

    void getCharactersCharacterIdCallback(OAIHttpRequestWorker *worker);
    void getCharactersCharacterIdAgentsResearchCallback(OAIHttpRequestWorker *worker);
    void getCharactersCharacterIdBlueprintsCallback(OAIHttpRequestWorker *worker);
    void getCharactersCharacterIdCorporationhistoryCallback(OAIHttpRequestWorker *worker);
    void getCharactersCharacterIdFatigueCallback(OAIHttpRequestWorker *worker);
    void getCharactersCharacterIdMedalsCallback(OAIHttpRequestWorker *worker);
    void getCharactersCharacterIdNotificationsCallback(OAIHttpRequestWorker *worker);
    void getCharactersCharacterIdNotificationsContactsCallback(OAIHttpRequestWorker *worker);
    void getCharactersCharacterIdPortraitCallback(OAIHttpRequestWorker *worker);
    void getCharactersCharacterIdRolesCallback(OAIHttpRequestWorker *worker);
    void getCharactersCharacterIdStandingsCallback(OAIHttpRequestWorker *worker);
    void getCharactersCharacterIdStatsCallback(OAIHttpRequestWorker *worker);
    void getCharactersCharacterIdTitlesCallback(OAIHttpRequestWorker *worker);
    void postCharactersAffiliationCallback(OAIHttpRequestWorker *worker);
    void postCharactersCharacterIdCspaCallback(OAIHttpRequestWorker *worker);

Q_SIGNALS:

    void getCharactersCharacterIdSignal(OAIGet_characters_character_id_ok summary);
    void getCharactersCharacterIdAgentsResearchSignal(QList<OAIGet_characters_character_id_agents_research_200_ok> summary);
    void getCharactersCharacterIdBlueprintsSignal(QList<OAIGet_characters_character_id_blueprints_200_ok> summary);
    void getCharactersCharacterIdCorporationhistorySignal(QList<OAIGet_characters_character_id_corporationhistory_200_ok> summary);
    void getCharactersCharacterIdFatigueSignal(OAIGet_characters_character_id_fatigue_ok summary);
    void getCharactersCharacterIdMedalsSignal(QList<OAIGet_characters_character_id_medals_200_ok> summary);
    void getCharactersCharacterIdNotificationsSignal(QList<OAIGet_characters_character_id_notifications_200_ok> summary);
    void getCharactersCharacterIdNotificationsContactsSignal(QList<OAIGet_characters_character_id_notifications_contacts_200_ok> summary);
    void getCharactersCharacterIdPortraitSignal(OAIGet_characters_character_id_portrait_ok summary);
    void getCharactersCharacterIdRolesSignal(OAIGet_characters_character_id_roles_ok summary);
    void getCharactersCharacterIdStandingsSignal(QList<OAIGet_characters_character_id_standings_200_ok> summary);
    void getCharactersCharacterIdStatsSignal(QList<OAIGet_characters_character_id_stats_200_ok> summary);
    void getCharactersCharacterIdTitlesSignal(QList<OAIGet_characters_character_id_titles_200_ok> summary);
    void postCharactersAffiliationSignal(QList<OAIPost_characters_affiliation_200_ok> summary);
    void postCharactersCharacterIdCspaSignal(float summary);


    void getCharactersCharacterIdSignalFull(OAIHttpRequestWorker *worker, OAIGet_characters_character_id_ok summary);
    void getCharactersCharacterIdAgentsResearchSignalFull(OAIHttpRequestWorker *worker, QList<OAIGet_characters_character_id_agents_research_200_ok> summary);
    void getCharactersCharacterIdBlueprintsSignalFull(OAIHttpRequestWorker *worker, QList<OAIGet_characters_character_id_blueprints_200_ok> summary);
    void getCharactersCharacterIdCorporationhistorySignalFull(OAIHttpRequestWorker *worker, QList<OAIGet_characters_character_id_corporationhistory_200_ok> summary);
    void getCharactersCharacterIdFatigueSignalFull(OAIHttpRequestWorker *worker, OAIGet_characters_character_id_fatigue_ok summary);
    void getCharactersCharacterIdMedalsSignalFull(OAIHttpRequestWorker *worker, QList<OAIGet_characters_character_id_medals_200_ok> summary);
    void getCharactersCharacterIdNotificationsSignalFull(OAIHttpRequestWorker *worker, QList<OAIGet_characters_character_id_notifications_200_ok> summary);
    void getCharactersCharacterIdNotificationsContactsSignalFull(OAIHttpRequestWorker *worker, QList<OAIGet_characters_character_id_notifications_contacts_200_ok> summary);
    void getCharactersCharacterIdPortraitSignalFull(OAIHttpRequestWorker *worker, OAIGet_characters_character_id_portrait_ok summary);
    void getCharactersCharacterIdRolesSignalFull(OAIHttpRequestWorker *worker, OAIGet_characters_character_id_roles_ok summary);
    void getCharactersCharacterIdStandingsSignalFull(OAIHttpRequestWorker *worker, QList<OAIGet_characters_character_id_standings_200_ok> summary);
    void getCharactersCharacterIdStatsSignalFull(OAIHttpRequestWorker *worker, QList<OAIGet_characters_character_id_stats_200_ok> summary);
    void getCharactersCharacterIdTitlesSignalFull(OAIHttpRequestWorker *worker, QList<OAIGet_characters_character_id_titles_200_ok> summary);
    void postCharactersAffiliationSignalFull(OAIHttpRequestWorker *worker, QList<OAIPost_characters_affiliation_200_ok> summary);
    void postCharactersCharacterIdCspaSignalFull(OAIHttpRequestWorker *worker, float summary);

    Q_DECL_DEPRECATED_X("Use getCharactersCharacterIdSignalError() instead")
    void getCharactersCharacterIdSignalE(OAIGet_characters_character_id_ok summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getCharactersCharacterIdSignalError(OAIGet_characters_character_id_ok summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getCharactersCharacterIdAgentsResearchSignalError() instead")
    void getCharactersCharacterIdAgentsResearchSignalE(QList<OAIGet_characters_character_id_agents_research_200_ok> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getCharactersCharacterIdAgentsResearchSignalError(QList<OAIGet_characters_character_id_agents_research_200_ok> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getCharactersCharacterIdBlueprintsSignalError() instead")
    void getCharactersCharacterIdBlueprintsSignalE(QList<OAIGet_characters_character_id_blueprints_200_ok> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getCharactersCharacterIdBlueprintsSignalError(QList<OAIGet_characters_character_id_blueprints_200_ok> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getCharactersCharacterIdCorporationhistorySignalError() instead")
    void getCharactersCharacterIdCorporationhistorySignalE(QList<OAIGet_characters_character_id_corporationhistory_200_ok> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getCharactersCharacterIdCorporationhistorySignalError(QList<OAIGet_characters_character_id_corporationhistory_200_ok> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getCharactersCharacterIdFatigueSignalError() instead")
    void getCharactersCharacterIdFatigueSignalE(OAIGet_characters_character_id_fatigue_ok summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getCharactersCharacterIdFatigueSignalError(OAIGet_characters_character_id_fatigue_ok summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getCharactersCharacterIdMedalsSignalError() instead")
    void getCharactersCharacterIdMedalsSignalE(QList<OAIGet_characters_character_id_medals_200_ok> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getCharactersCharacterIdMedalsSignalError(QList<OAIGet_characters_character_id_medals_200_ok> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getCharactersCharacterIdNotificationsSignalError() instead")
    void getCharactersCharacterIdNotificationsSignalE(QList<OAIGet_characters_character_id_notifications_200_ok> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getCharactersCharacterIdNotificationsSignalError(QList<OAIGet_characters_character_id_notifications_200_ok> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getCharactersCharacterIdNotificationsContactsSignalError() instead")
    void getCharactersCharacterIdNotificationsContactsSignalE(QList<OAIGet_characters_character_id_notifications_contacts_200_ok> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getCharactersCharacterIdNotificationsContactsSignalError(QList<OAIGet_characters_character_id_notifications_contacts_200_ok> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getCharactersCharacterIdPortraitSignalError() instead")
    void getCharactersCharacterIdPortraitSignalE(OAIGet_characters_character_id_portrait_ok summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getCharactersCharacterIdPortraitSignalError(OAIGet_characters_character_id_portrait_ok summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getCharactersCharacterIdRolesSignalError() instead")
    void getCharactersCharacterIdRolesSignalE(OAIGet_characters_character_id_roles_ok summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getCharactersCharacterIdRolesSignalError(OAIGet_characters_character_id_roles_ok summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getCharactersCharacterIdStandingsSignalError() instead")
    void getCharactersCharacterIdStandingsSignalE(QList<OAIGet_characters_character_id_standings_200_ok> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getCharactersCharacterIdStandingsSignalError(QList<OAIGet_characters_character_id_standings_200_ok> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getCharactersCharacterIdStatsSignalError() instead")
    void getCharactersCharacterIdStatsSignalE(QList<OAIGet_characters_character_id_stats_200_ok> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getCharactersCharacterIdStatsSignalError(QList<OAIGet_characters_character_id_stats_200_ok> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getCharactersCharacterIdTitlesSignalError() instead")
    void getCharactersCharacterIdTitlesSignalE(QList<OAIGet_characters_character_id_titles_200_ok> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getCharactersCharacterIdTitlesSignalError(QList<OAIGet_characters_character_id_titles_200_ok> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use postCharactersAffiliationSignalError() instead")
    void postCharactersAffiliationSignalE(QList<OAIPost_characters_affiliation_200_ok> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void postCharactersAffiliationSignalError(QList<OAIPost_characters_affiliation_200_ok> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use postCharactersCharacterIdCspaSignalError() instead")
    void postCharactersCharacterIdCspaSignalE(float summary, QNetworkReply::NetworkError error_type, QString error_str);
    void postCharactersCharacterIdCspaSignalError(float summary, QNetworkReply::NetworkError error_type, const QString &error_str);

    Q_DECL_DEPRECATED_X("Use getCharactersCharacterIdSignalErrorFull() instead")
    void getCharactersCharacterIdSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getCharactersCharacterIdSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getCharactersCharacterIdAgentsResearchSignalErrorFull() instead")
    void getCharactersCharacterIdAgentsResearchSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getCharactersCharacterIdAgentsResearchSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getCharactersCharacterIdBlueprintsSignalErrorFull() instead")
    void getCharactersCharacterIdBlueprintsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getCharactersCharacterIdBlueprintsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getCharactersCharacterIdCorporationhistorySignalErrorFull() instead")
    void getCharactersCharacterIdCorporationhistorySignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getCharactersCharacterIdCorporationhistorySignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getCharactersCharacterIdFatigueSignalErrorFull() instead")
    void getCharactersCharacterIdFatigueSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getCharactersCharacterIdFatigueSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getCharactersCharacterIdMedalsSignalErrorFull() instead")
    void getCharactersCharacterIdMedalsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getCharactersCharacterIdMedalsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getCharactersCharacterIdNotificationsSignalErrorFull() instead")
    void getCharactersCharacterIdNotificationsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getCharactersCharacterIdNotificationsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getCharactersCharacterIdNotificationsContactsSignalErrorFull() instead")
    void getCharactersCharacterIdNotificationsContactsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getCharactersCharacterIdNotificationsContactsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getCharactersCharacterIdPortraitSignalErrorFull() instead")
    void getCharactersCharacterIdPortraitSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getCharactersCharacterIdPortraitSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getCharactersCharacterIdRolesSignalErrorFull() instead")
    void getCharactersCharacterIdRolesSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getCharactersCharacterIdRolesSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getCharactersCharacterIdStandingsSignalErrorFull() instead")
    void getCharactersCharacterIdStandingsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getCharactersCharacterIdStandingsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getCharactersCharacterIdStatsSignalErrorFull() instead")
    void getCharactersCharacterIdStatsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getCharactersCharacterIdStatsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getCharactersCharacterIdTitlesSignalErrorFull() instead")
    void getCharactersCharacterIdTitlesSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getCharactersCharacterIdTitlesSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use postCharactersAffiliationSignalErrorFull() instead")
    void postCharactersAffiliationSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void postCharactersAffiliationSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use postCharactersCharacterIdCspaSignalErrorFull() instead")
    void postCharactersCharacterIdCspaSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void postCharactersCharacterIdCspaSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);

    void abortRequestsSignal();
    void allPendingRequestsCompleted();

public Q_SLOTS:
    void tokenAvailable();
};

} // namespace OpenAPI
#endif
