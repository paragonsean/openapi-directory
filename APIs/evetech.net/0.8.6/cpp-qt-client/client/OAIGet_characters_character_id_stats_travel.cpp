/**
 * EVE Swagger Interface
 * An OpenAPI for EVE Online
 *
 * The version of the OpenAPI document: 0.8.6
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIGet_characters_character_id_stats_travel.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIGet_characters_character_id_stats_travel::OAIGet_characters_character_id_stats_travel(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIGet_characters_character_id_stats_travel::OAIGet_characters_character_id_stats_travel() {
    this->initializeModel();
}

OAIGet_characters_character_id_stats_travel::~OAIGet_characters_character_id_stats_travel() {}

void OAIGet_characters_character_id_stats_travel::initializeModel() {

    m_acceleration_gate_activations_isSet = false;
    m_acceleration_gate_activations_isValid = false;

    m_align_to_isSet = false;
    m_align_to_isValid = false;

    m_distance_warped_high_sec_isSet = false;
    m_distance_warped_high_sec_isValid = false;

    m_distance_warped_low_sec_isSet = false;
    m_distance_warped_low_sec_isValid = false;

    m_distance_warped_null_sec_isSet = false;
    m_distance_warped_null_sec_isValid = false;

    m_distance_warped_wormhole_isSet = false;
    m_distance_warped_wormhole_isValid = false;

    m_docks_high_sec_isSet = false;
    m_docks_high_sec_isValid = false;

    m_docks_low_sec_isSet = false;
    m_docks_low_sec_isValid = false;

    m_docks_null_sec_isSet = false;
    m_docks_null_sec_isValid = false;

    m_jumps_stargate_high_sec_isSet = false;
    m_jumps_stargate_high_sec_isValid = false;

    m_jumps_stargate_low_sec_isSet = false;
    m_jumps_stargate_low_sec_isValid = false;

    m_jumps_stargate_null_sec_isSet = false;
    m_jumps_stargate_null_sec_isValid = false;

    m_jumps_wormhole_isSet = false;
    m_jumps_wormhole_isValid = false;

    m_warps_high_sec_isSet = false;
    m_warps_high_sec_isValid = false;

    m_warps_low_sec_isSet = false;
    m_warps_low_sec_isValid = false;

    m_warps_null_sec_isSet = false;
    m_warps_null_sec_isValid = false;

    m_warps_to_bookmark_isSet = false;
    m_warps_to_bookmark_isValid = false;

    m_warps_to_celestial_isSet = false;
    m_warps_to_celestial_isValid = false;

    m_warps_to_fleet_member_isSet = false;
    m_warps_to_fleet_member_isValid = false;

    m_warps_to_scan_result_isSet = false;
    m_warps_to_scan_result_isValid = false;

    m_warps_wormhole_isSet = false;
    m_warps_wormhole_isValid = false;
}

void OAIGet_characters_character_id_stats_travel::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIGet_characters_character_id_stats_travel::fromJsonObject(QJsonObject json) {

    m_acceleration_gate_activations_isValid = ::OpenAPI::fromJsonValue(m_acceleration_gate_activations, json[QString("acceleration_gate_activations")]);
    m_acceleration_gate_activations_isSet = !json[QString("acceleration_gate_activations")].isNull() && m_acceleration_gate_activations_isValid;

    m_align_to_isValid = ::OpenAPI::fromJsonValue(m_align_to, json[QString("align_to")]);
    m_align_to_isSet = !json[QString("align_to")].isNull() && m_align_to_isValid;

    m_distance_warped_high_sec_isValid = ::OpenAPI::fromJsonValue(m_distance_warped_high_sec, json[QString("distance_warped_high_sec")]);
    m_distance_warped_high_sec_isSet = !json[QString("distance_warped_high_sec")].isNull() && m_distance_warped_high_sec_isValid;

    m_distance_warped_low_sec_isValid = ::OpenAPI::fromJsonValue(m_distance_warped_low_sec, json[QString("distance_warped_low_sec")]);
    m_distance_warped_low_sec_isSet = !json[QString("distance_warped_low_sec")].isNull() && m_distance_warped_low_sec_isValid;

    m_distance_warped_null_sec_isValid = ::OpenAPI::fromJsonValue(m_distance_warped_null_sec, json[QString("distance_warped_null_sec")]);
    m_distance_warped_null_sec_isSet = !json[QString("distance_warped_null_sec")].isNull() && m_distance_warped_null_sec_isValid;

    m_distance_warped_wormhole_isValid = ::OpenAPI::fromJsonValue(m_distance_warped_wormhole, json[QString("distance_warped_wormhole")]);
    m_distance_warped_wormhole_isSet = !json[QString("distance_warped_wormhole")].isNull() && m_distance_warped_wormhole_isValid;

    m_docks_high_sec_isValid = ::OpenAPI::fromJsonValue(m_docks_high_sec, json[QString("docks_high_sec")]);
    m_docks_high_sec_isSet = !json[QString("docks_high_sec")].isNull() && m_docks_high_sec_isValid;

    m_docks_low_sec_isValid = ::OpenAPI::fromJsonValue(m_docks_low_sec, json[QString("docks_low_sec")]);
    m_docks_low_sec_isSet = !json[QString("docks_low_sec")].isNull() && m_docks_low_sec_isValid;

    m_docks_null_sec_isValid = ::OpenAPI::fromJsonValue(m_docks_null_sec, json[QString("docks_null_sec")]);
    m_docks_null_sec_isSet = !json[QString("docks_null_sec")].isNull() && m_docks_null_sec_isValid;

    m_jumps_stargate_high_sec_isValid = ::OpenAPI::fromJsonValue(m_jumps_stargate_high_sec, json[QString("jumps_stargate_high_sec")]);
    m_jumps_stargate_high_sec_isSet = !json[QString("jumps_stargate_high_sec")].isNull() && m_jumps_stargate_high_sec_isValid;

    m_jumps_stargate_low_sec_isValid = ::OpenAPI::fromJsonValue(m_jumps_stargate_low_sec, json[QString("jumps_stargate_low_sec")]);
    m_jumps_stargate_low_sec_isSet = !json[QString("jumps_stargate_low_sec")].isNull() && m_jumps_stargate_low_sec_isValid;

    m_jumps_stargate_null_sec_isValid = ::OpenAPI::fromJsonValue(m_jumps_stargate_null_sec, json[QString("jumps_stargate_null_sec")]);
    m_jumps_stargate_null_sec_isSet = !json[QString("jumps_stargate_null_sec")].isNull() && m_jumps_stargate_null_sec_isValid;

    m_jumps_wormhole_isValid = ::OpenAPI::fromJsonValue(m_jumps_wormhole, json[QString("jumps_wormhole")]);
    m_jumps_wormhole_isSet = !json[QString("jumps_wormhole")].isNull() && m_jumps_wormhole_isValid;

    m_warps_high_sec_isValid = ::OpenAPI::fromJsonValue(m_warps_high_sec, json[QString("warps_high_sec")]);
    m_warps_high_sec_isSet = !json[QString("warps_high_sec")].isNull() && m_warps_high_sec_isValid;

    m_warps_low_sec_isValid = ::OpenAPI::fromJsonValue(m_warps_low_sec, json[QString("warps_low_sec")]);
    m_warps_low_sec_isSet = !json[QString("warps_low_sec")].isNull() && m_warps_low_sec_isValid;

    m_warps_null_sec_isValid = ::OpenAPI::fromJsonValue(m_warps_null_sec, json[QString("warps_null_sec")]);
    m_warps_null_sec_isSet = !json[QString("warps_null_sec")].isNull() && m_warps_null_sec_isValid;

    m_warps_to_bookmark_isValid = ::OpenAPI::fromJsonValue(m_warps_to_bookmark, json[QString("warps_to_bookmark")]);
    m_warps_to_bookmark_isSet = !json[QString("warps_to_bookmark")].isNull() && m_warps_to_bookmark_isValid;

    m_warps_to_celestial_isValid = ::OpenAPI::fromJsonValue(m_warps_to_celestial, json[QString("warps_to_celestial")]);
    m_warps_to_celestial_isSet = !json[QString("warps_to_celestial")].isNull() && m_warps_to_celestial_isValid;

    m_warps_to_fleet_member_isValid = ::OpenAPI::fromJsonValue(m_warps_to_fleet_member, json[QString("warps_to_fleet_member")]);
    m_warps_to_fleet_member_isSet = !json[QString("warps_to_fleet_member")].isNull() && m_warps_to_fleet_member_isValid;

    m_warps_to_scan_result_isValid = ::OpenAPI::fromJsonValue(m_warps_to_scan_result, json[QString("warps_to_scan_result")]);
    m_warps_to_scan_result_isSet = !json[QString("warps_to_scan_result")].isNull() && m_warps_to_scan_result_isValid;

    m_warps_wormhole_isValid = ::OpenAPI::fromJsonValue(m_warps_wormhole, json[QString("warps_wormhole")]);
    m_warps_wormhole_isSet = !json[QString("warps_wormhole")].isNull() && m_warps_wormhole_isValid;
}

QString OAIGet_characters_character_id_stats_travel::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIGet_characters_character_id_stats_travel::asJsonObject() const {
    QJsonObject obj;
    if (m_acceleration_gate_activations_isSet) {
        obj.insert(QString("acceleration_gate_activations"), ::OpenAPI::toJsonValue(m_acceleration_gate_activations));
    }
    if (m_align_to_isSet) {
        obj.insert(QString("align_to"), ::OpenAPI::toJsonValue(m_align_to));
    }
    if (m_distance_warped_high_sec_isSet) {
        obj.insert(QString("distance_warped_high_sec"), ::OpenAPI::toJsonValue(m_distance_warped_high_sec));
    }
    if (m_distance_warped_low_sec_isSet) {
        obj.insert(QString("distance_warped_low_sec"), ::OpenAPI::toJsonValue(m_distance_warped_low_sec));
    }
    if (m_distance_warped_null_sec_isSet) {
        obj.insert(QString("distance_warped_null_sec"), ::OpenAPI::toJsonValue(m_distance_warped_null_sec));
    }
    if (m_distance_warped_wormhole_isSet) {
        obj.insert(QString("distance_warped_wormhole"), ::OpenAPI::toJsonValue(m_distance_warped_wormhole));
    }
    if (m_docks_high_sec_isSet) {
        obj.insert(QString("docks_high_sec"), ::OpenAPI::toJsonValue(m_docks_high_sec));
    }
    if (m_docks_low_sec_isSet) {
        obj.insert(QString("docks_low_sec"), ::OpenAPI::toJsonValue(m_docks_low_sec));
    }
    if (m_docks_null_sec_isSet) {
        obj.insert(QString("docks_null_sec"), ::OpenAPI::toJsonValue(m_docks_null_sec));
    }
    if (m_jumps_stargate_high_sec_isSet) {
        obj.insert(QString("jumps_stargate_high_sec"), ::OpenAPI::toJsonValue(m_jumps_stargate_high_sec));
    }
    if (m_jumps_stargate_low_sec_isSet) {
        obj.insert(QString("jumps_stargate_low_sec"), ::OpenAPI::toJsonValue(m_jumps_stargate_low_sec));
    }
    if (m_jumps_stargate_null_sec_isSet) {
        obj.insert(QString("jumps_stargate_null_sec"), ::OpenAPI::toJsonValue(m_jumps_stargate_null_sec));
    }
    if (m_jumps_wormhole_isSet) {
        obj.insert(QString("jumps_wormhole"), ::OpenAPI::toJsonValue(m_jumps_wormhole));
    }
    if (m_warps_high_sec_isSet) {
        obj.insert(QString("warps_high_sec"), ::OpenAPI::toJsonValue(m_warps_high_sec));
    }
    if (m_warps_low_sec_isSet) {
        obj.insert(QString("warps_low_sec"), ::OpenAPI::toJsonValue(m_warps_low_sec));
    }
    if (m_warps_null_sec_isSet) {
        obj.insert(QString("warps_null_sec"), ::OpenAPI::toJsonValue(m_warps_null_sec));
    }
    if (m_warps_to_bookmark_isSet) {
        obj.insert(QString("warps_to_bookmark"), ::OpenAPI::toJsonValue(m_warps_to_bookmark));
    }
    if (m_warps_to_celestial_isSet) {
        obj.insert(QString("warps_to_celestial"), ::OpenAPI::toJsonValue(m_warps_to_celestial));
    }
    if (m_warps_to_fleet_member_isSet) {
        obj.insert(QString("warps_to_fleet_member"), ::OpenAPI::toJsonValue(m_warps_to_fleet_member));
    }
    if (m_warps_to_scan_result_isSet) {
        obj.insert(QString("warps_to_scan_result"), ::OpenAPI::toJsonValue(m_warps_to_scan_result));
    }
    if (m_warps_wormhole_isSet) {
        obj.insert(QString("warps_wormhole"), ::OpenAPI::toJsonValue(m_warps_wormhole));
    }
    return obj;
}

qint64 OAIGet_characters_character_id_stats_travel::getAccelerationGateActivations() const {
    return m_acceleration_gate_activations;
}
void OAIGet_characters_character_id_stats_travel::setAccelerationGateActivations(const qint64 &acceleration_gate_activations) {
    m_acceleration_gate_activations = acceleration_gate_activations;
    m_acceleration_gate_activations_isSet = true;
}

bool OAIGet_characters_character_id_stats_travel::is_acceleration_gate_activations_Set() const{
    return m_acceleration_gate_activations_isSet;
}

bool OAIGet_characters_character_id_stats_travel::is_acceleration_gate_activations_Valid() const{
    return m_acceleration_gate_activations_isValid;
}

qint64 OAIGet_characters_character_id_stats_travel::getAlignTo() const {
    return m_align_to;
}
void OAIGet_characters_character_id_stats_travel::setAlignTo(const qint64 &align_to) {
    m_align_to = align_to;
    m_align_to_isSet = true;
}

bool OAIGet_characters_character_id_stats_travel::is_align_to_Set() const{
    return m_align_to_isSet;
}

bool OAIGet_characters_character_id_stats_travel::is_align_to_Valid() const{
    return m_align_to_isValid;
}

qint64 OAIGet_characters_character_id_stats_travel::getDistanceWarpedHighSec() const {
    return m_distance_warped_high_sec;
}
void OAIGet_characters_character_id_stats_travel::setDistanceWarpedHighSec(const qint64 &distance_warped_high_sec) {
    m_distance_warped_high_sec = distance_warped_high_sec;
    m_distance_warped_high_sec_isSet = true;
}

bool OAIGet_characters_character_id_stats_travel::is_distance_warped_high_sec_Set() const{
    return m_distance_warped_high_sec_isSet;
}

bool OAIGet_characters_character_id_stats_travel::is_distance_warped_high_sec_Valid() const{
    return m_distance_warped_high_sec_isValid;
}

qint64 OAIGet_characters_character_id_stats_travel::getDistanceWarpedLowSec() const {
    return m_distance_warped_low_sec;
}
void OAIGet_characters_character_id_stats_travel::setDistanceWarpedLowSec(const qint64 &distance_warped_low_sec) {
    m_distance_warped_low_sec = distance_warped_low_sec;
    m_distance_warped_low_sec_isSet = true;
}

bool OAIGet_characters_character_id_stats_travel::is_distance_warped_low_sec_Set() const{
    return m_distance_warped_low_sec_isSet;
}

bool OAIGet_characters_character_id_stats_travel::is_distance_warped_low_sec_Valid() const{
    return m_distance_warped_low_sec_isValid;
}

qint64 OAIGet_characters_character_id_stats_travel::getDistanceWarpedNullSec() const {
    return m_distance_warped_null_sec;
}
void OAIGet_characters_character_id_stats_travel::setDistanceWarpedNullSec(const qint64 &distance_warped_null_sec) {
    m_distance_warped_null_sec = distance_warped_null_sec;
    m_distance_warped_null_sec_isSet = true;
}

bool OAIGet_characters_character_id_stats_travel::is_distance_warped_null_sec_Set() const{
    return m_distance_warped_null_sec_isSet;
}

bool OAIGet_characters_character_id_stats_travel::is_distance_warped_null_sec_Valid() const{
    return m_distance_warped_null_sec_isValid;
}

qint64 OAIGet_characters_character_id_stats_travel::getDistanceWarpedWormhole() const {
    return m_distance_warped_wormhole;
}
void OAIGet_characters_character_id_stats_travel::setDistanceWarpedWormhole(const qint64 &distance_warped_wormhole) {
    m_distance_warped_wormhole = distance_warped_wormhole;
    m_distance_warped_wormhole_isSet = true;
}

bool OAIGet_characters_character_id_stats_travel::is_distance_warped_wormhole_Set() const{
    return m_distance_warped_wormhole_isSet;
}

bool OAIGet_characters_character_id_stats_travel::is_distance_warped_wormhole_Valid() const{
    return m_distance_warped_wormhole_isValid;
}

qint64 OAIGet_characters_character_id_stats_travel::getDocksHighSec() const {
    return m_docks_high_sec;
}
void OAIGet_characters_character_id_stats_travel::setDocksHighSec(const qint64 &docks_high_sec) {
    m_docks_high_sec = docks_high_sec;
    m_docks_high_sec_isSet = true;
}

bool OAIGet_characters_character_id_stats_travel::is_docks_high_sec_Set() const{
    return m_docks_high_sec_isSet;
}

bool OAIGet_characters_character_id_stats_travel::is_docks_high_sec_Valid() const{
    return m_docks_high_sec_isValid;
}

qint64 OAIGet_characters_character_id_stats_travel::getDocksLowSec() const {
    return m_docks_low_sec;
}
void OAIGet_characters_character_id_stats_travel::setDocksLowSec(const qint64 &docks_low_sec) {
    m_docks_low_sec = docks_low_sec;
    m_docks_low_sec_isSet = true;
}

bool OAIGet_characters_character_id_stats_travel::is_docks_low_sec_Set() const{
    return m_docks_low_sec_isSet;
}

bool OAIGet_characters_character_id_stats_travel::is_docks_low_sec_Valid() const{
    return m_docks_low_sec_isValid;
}

qint64 OAIGet_characters_character_id_stats_travel::getDocksNullSec() const {
    return m_docks_null_sec;
}
void OAIGet_characters_character_id_stats_travel::setDocksNullSec(const qint64 &docks_null_sec) {
    m_docks_null_sec = docks_null_sec;
    m_docks_null_sec_isSet = true;
}

bool OAIGet_characters_character_id_stats_travel::is_docks_null_sec_Set() const{
    return m_docks_null_sec_isSet;
}

bool OAIGet_characters_character_id_stats_travel::is_docks_null_sec_Valid() const{
    return m_docks_null_sec_isValid;
}

qint64 OAIGet_characters_character_id_stats_travel::getJumpsStargateHighSec() const {
    return m_jumps_stargate_high_sec;
}
void OAIGet_characters_character_id_stats_travel::setJumpsStargateHighSec(const qint64 &jumps_stargate_high_sec) {
    m_jumps_stargate_high_sec = jumps_stargate_high_sec;
    m_jumps_stargate_high_sec_isSet = true;
}

bool OAIGet_characters_character_id_stats_travel::is_jumps_stargate_high_sec_Set() const{
    return m_jumps_stargate_high_sec_isSet;
}

bool OAIGet_characters_character_id_stats_travel::is_jumps_stargate_high_sec_Valid() const{
    return m_jumps_stargate_high_sec_isValid;
}

qint64 OAIGet_characters_character_id_stats_travel::getJumpsStargateLowSec() const {
    return m_jumps_stargate_low_sec;
}
void OAIGet_characters_character_id_stats_travel::setJumpsStargateLowSec(const qint64 &jumps_stargate_low_sec) {
    m_jumps_stargate_low_sec = jumps_stargate_low_sec;
    m_jumps_stargate_low_sec_isSet = true;
}

bool OAIGet_characters_character_id_stats_travel::is_jumps_stargate_low_sec_Set() const{
    return m_jumps_stargate_low_sec_isSet;
}

bool OAIGet_characters_character_id_stats_travel::is_jumps_stargate_low_sec_Valid() const{
    return m_jumps_stargate_low_sec_isValid;
}

qint64 OAIGet_characters_character_id_stats_travel::getJumpsStargateNullSec() const {
    return m_jumps_stargate_null_sec;
}
void OAIGet_characters_character_id_stats_travel::setJumpsStargateNullSec(const qint64 &jumps_stargate_null_sec) {
    m_jumps_stargate_null_sec = jumps_stargate_null_sec;
    m_jumps_stargate_null_sec_isSet = true;
}

bool OAIGet_characters_character_id_stats_travel::is_jumps_stargate_null_sec_Set() const{
    return m_jumps_stargate_null_sec_isSet;
}

bool OAIGet_characters_character_id_stats_travel::is_jumps_stargate_null_sec_Valid() const{
    return m_jumps_stargate_null_sec_isValid;
}

qint64 OAIGet_characters_character_id_stats_travel::getJumpsWormhole() const {
    return m_jumps_wormhole;
}
void OAIGet_characters_character_id_stats_travel::setJumpsWormhole(const qint64 &jumps_wormhole) {
    m_jumps_wormhole = jumps_wormhole;
    m_jumps_wormhole_isSet = true;
}

bool OAIGet_characters_character_id_stats_travel::is_jumps_wormhole_Set() const{
    return m_jumps_wormhole_isSet;
}

bool OAIGet_characters_character_id_stats_travel::is_jumps_wormhole_Valid() const{
    return m_jumps_wormhole_isValid;
}

qint64 OAIGet_characters_character_id_stats_travel::getWarpsHighSec() const {
    return m_warps_high_sec;
}
void OAIGet_characters_character_id_stats_travel::setWarpsHighSec(const qint64 &warps_high_sec) {
    m_warps_high_sec = warps_high_sec;
    m_warps_high_sec_isSet = true;
}

bool OAIGet_characters_character_id_stats_travel::is_warps_high_sec_Set() const{
    return m_warps_high_sec_isSet;
}

bool OAIGet_characters_character_id_stats_travel::is_warps_high_sec_Valid() const{
    return m_warps_high_sec_isValid;
}

qint64 OAIGet_characters_character_id_stats_travel::getWarpsLowSec() const {
    return m_warps_low_sec;
}
void OAIGet_characters_character_id_stats_travel::setWarpsLowSec(const qint64 &warps_low_sec) {
    m_warps_low_sec = warps_low_sec;
    m_warps_low_sec_isSet = true;
}

bool OAIGet_characters_character_id_stats_travel::is_warps_low_sec_Set() const{
    return m_warps_low_sec_isSet;
}

bool OAIGet_characters_character_id_stats_travel::is_warps_low_sec_Valid() const{
    return m_warps_low_sec_isValid;
}

qint64 OAIGet_characters_character_id_stats_travel::getWarpsNullSec() const {
    return m_warps_null_sec;
}
void OAIGet_characters_character_id_stats_travel::setWarpsNullSec(const qint64 &warps_null_sec) {
    m_warps_null_sec = warps_null_sec;
    m_warps_null_sec_isSet = true;
}

bool OAIGet_characters_character_id_stats_travel::is_warps_null_sec_Set() const{
    return m_warps_null_sec_isSet;
}

bool OAIGet_characters_character_id_stats_travel::is_warps_null_sec_Valid() const{
    return m_warps_null_sec_isValid;
}

qint64 OAIGet_characters_character_id_stats_travel::getWarpsToBookmark() const {
    return m_warps_to_bookmark;
}
void OAIGet_characters_character_id_stats_travel::setWarpsToBookmark(const qint64 &warps_to_bookmark) {
    m_warps_to_bookmark = warps_to_bookmark;
    m_warps_to_bookmark_isSet = true;
}

bool OAIGet_characters_character_id_stats_travel::is_warps_to_bookmark_Set() const{
    return m_warps_to_bookmark_isSet;
}

bool OAIGet_characters_character_id_stats_travel::is_warps_to_bookmark_Valid() const{
    return m_warps_to_bookmark_isValid;
}

qint64 OAIGet_characters_character_id_stats_travel::getWarpsToCelestial() const {
    return m_warps_to_celestial;
}
void OAIGet_characters_character_id_stats_travel::setWarpsToCelestial(const qint64 &warps_to_celestial) {
    m_warps_to_celestial = warps_to_celestial;
    m_warps_to_celestial_isSet = true;
}

bool OAIGet_characters_character_id_stats_travel::is_warps_to_celestial_Set() const{
    return m_warps_to_celestial_isSet;
}

bool OAIGet_characters_character_id_stats_travel::is_warps_to_celestial_Valid() const{
    return m_warps_to_celestial_isValid;
}

qint64 OAIGet_characters_character_id_stats_travel::getWarpsToFleetMember() const {
    return m_warps_to_fleet_member;
}
void OAIGet_characters_character_id_stats_travel::setWarpsToFleetMember(const qint64 &warps_to_fleet_member) {
    m_warps_to_fleet_member = warps_to_fleet_member;
    m_warps_to_fleet_member_isSet = true;
}

bool OAIGet_characters_character_id_stats_travel::is_warps_to_fleet_member_Set() const{
    return m_warps_to_fleet_member_isSet;
}

bool OAIGet_characters_character_id_stats_travel::is_warps_to_fleet_member_Valid() const{
    return m_warps_to_fleet_member_isValid;
}

qint64 OAIGet_characters_character_id_stats_travel::getWarpsToScanResult() const {
    return m_warps_to_scan_result;
}
void OAIGet_characters_character_id_stats_travel::setWarpsToScanResult(const qint64 &warps_to_scan_result) {
    m_warps_to_scan_result = warps_to_scan_result;
    m_warps_to_scan_result_isSet = true;
}

bool OAIGet_characters_character_id_stats_travel::is_warps_to_scan_result_Set() const{
    return m_warps_to_scan_result_isSet;
}

bool OAIGet_characters_character_id_stats_travel::is_warps_to_scan_result_Valid() const{
    return m_warps_to_scan_result_isValid;
}

qint64 OAIGet_characters_character_id_stats_travel::getWarpsWormhole() const {
    return m_warps_wormhole;
}
void OAIGet_characters_character_id_stats_travel::setWarpsWormhole(const qint64 &warps_wormhole) {
    m_warps_wormhole = warps_wormhole;
    m_warps_wormhole_isSet = true;
}

bool OAIGet_characters_character_id_stats_travel::is_warps_wormhole_Set() const{
    return m_warps_wormhole_isSet;
}

bool OAIGet_characters_character_id_stats_travel::is_warps_wormhole_Valid() const{
    return m_warps_wormhole_isValid;
}

bool OAIGet_characters_character_id_stats_travel::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_acceleration_gate_activations_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_align_to_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_distance_warped_high_sec_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_distance_warped_low_sec_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_distance_warped_null_sec_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_distance_warped_wormhole_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_docks_high_sec_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_docks_low_sec_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_docks_null_sec_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_jumps_stargate_high_sec_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_jumps_stargate_low_sec_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_jumps_stargate_null_sec_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_jumps_wormhole_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_warps_high_sec_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_warps_low_sec_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_warps_null_sec_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_warps_to_bookmark_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_warps_to_celestial_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_warps_to_fleet_member_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_warps_to_scan_result_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_warps_wormhole_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIGet_characters_character_id_stats_travel::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
