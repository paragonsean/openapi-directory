/**
 * EVE Swagger Interface
 * An OpenAPI for EVE Online
 *
 * The version of the OpenAPI document: 0.8.6
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIGet_corporations_corporation_id_orders_history_200_ok.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIGet_corporations_corporation_id_orders_history_200_ok::OAIGet_corporations_corporation_id_orders_history_200_ok(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIGet_corporations_corporation_id_orders_history_200_ok::OAIGet_corporations_corporation_id_orders_history_200_ok() {
    this->initializeModel();
}

OAIGet_corporations_corporation_id_orders_history_200_ok::~OAIGet_corporations_corporation_id_orders_history_200_ok() {}

void OAIGet_corporations_corporation_id_orders_history_200_ok::initializeModel() {

    m_duration_isSet = false;
    m_duration_isValid = false;

    m_escrow_isSet = false;
    m_escrow_isValid = false;

    m_is_buy_order_isSet = false;
    m_is_buy_order_isValid = false;

    m_issued_isSet = false;
    m_issued_isValid = false;

    m_issued_by_isSet = false;
    m_issued_by_isValid = false;

    m_location_id_isSet = false;
    m_location_id_isValid = false;

    m_min_volume_isSet = false;
    m_min_volume_isValid = false;

    m_order_id_isSet = false;
    m_order_id_isValid = false;

    m_price_isSet = false;
    m_price_isValid = false;

    m_range_isSet = false;
    m_range_isValid = false;

    m_region_id_isSet = false;
    m_region_id_isValid = false;

    m_state_isSet = false;
    m_state_isValid = false;

    m_type_id_isSet = false;
    m_type_id_isValid = false;

    m_volume_remain_isSet = false;
    m_volume_remain_isValid = false;

    m_volume_total_isSet = false;
    m_volume_total_isValid = false;

    m_wallet_division_isSet = false;
    m_wallet_division_isValid = false;
}

void OAIGet_corporations_corporation_id_orders_history_200_ok::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIGet_corporations_corporation_id_orders_history_200_ok::fromJsonObject(QJsonObject json) {

    m_duration_isValid = ::OpenAPI::fromJsonValue(m_duration, json[QString("duration")]);
    m_duration_isSet = !json[QString("duration")].isNull() && m_duration_isValid;

    m_escrow_isValid = ::OpenAPI::fromJsonValue(m_escrow, json[QString("escrow")]);
    m_escrow_isSet = !json[QString("escrow")].isNull() && m_escrow_isValid;

    m_is_buy_order_isValid = ::OpenAPI::fromJsonValue(m_is_buy_order, json[QString("is_buy_order")]);
    m_is_buy_order_isSet = !json[QString("is_buy_order")].isNull() && m_is_buy_order_isValid;

    m_issued_isValid = ::OpenAPI::fromJsonValue(m_issued, json[QString("issued")]);
    m_issued_isSet = !json[QString("issued")].isNull() && m_issued_isValid;

    m_issued_by_isValid = ::OpenAPI::fromJsonValue(m_issued_by, json[QString("issued_by")]);
    m_issued_by_isSet = !json[QString("issued_by")].isNull() && m_issued_by_isValid;

    m_location_id_isValid = ::OpenAPI::fromJsonValue(m_location_id, json[QString("location_id")]);
    m_location_id_isSet = !json[QString("location_id")].isNull() && m_location_id_isValid;

    m_min_volume_isValid = ::OpenAPI::fromJsonValue(m_min_volume, json[QString("min_volume")]);
    m_min_volume_isSet = !json[QString("min_volume")].isNull() && m_min_volume_isValid;

    m_order_id_isValid = ::OpenAPI::fromJsonValue(m_order_id, json[QString("order_id")]);
    m_order_id_isSet = !json[QString("order_id")].isNull() && m_order_id_isValid;

    m_price_isValid = ::OpenAPI::fromJsonValue(m_price, json[QString("price")]);
    m_price_isSet = !json[QString("price")].isNull() && m_price_isValid;

    m_range_isValid = ::OpenAPI::fromJsonValue(m_range, json[QString("range")]);
    m_range_isSet = !json[QString("range")].isNull() && m_range_isValid;

    m_region_id_isValid = ::OpenAPI::fromJsonValue(m_region_id, json[QString("region_id")]);
    m_region_id_isSet = !json[QString("region_id")].isNull() && m_region_id_isValid;

    m_state_isValid = ::OpenAPI::fromJsonValue(m_state, json[QString("state")]);
    m_state_isSet = !json[QString("state")].isNull() && m_state_isValid;

    m_type_id_isValid = ::OpenAPI::fromJsonValue(m_type_id, json[QString("type_id")]);
    m_type_id_isSet = !json[QString("type_id")].isNull() && m_type_id_isValid;

    m_volume_remain_isValid = ::OpenAPI::fromJsonValue(m_volume_remain, json[QString("volume_remain")]);
    m_volume_remain_isSet = !json[QString("volume_remain")].isNull() && m_volume_remain_isValid;

    m_volume_total_isValid = ::OpenAPI::fromJsonValue(m_volume_total, json[QString("volume_total")]);
    m_volume_total_isSet = !json[QString("volume_total")].isNull() && m_volume_total_isValid;

    m_wallet_division_isValid = ::OpenAPI::fromJsonValue(m_wallet_division, json[QString("wallet_division")]);
    m_wallet_division_isSet = !json[QString("wallet_division")].isNull() && m_wallet_division_isValid;
}

QString OAIGet_corporations_corporation_id_orders_history_200_ok::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIGet_corporations_corporation_id_orders_history_200_ok::asJsonObject() const {
    QJsonObject obj;
    if (m_duration_isSet) {
        obj.insert(QString("duration"), ::OpenAPI::toJsonValue(m_duration));
    }
    if (m_escrow_isSet) {
        obj.insert(QString("escrow"), ::OpenAPI::toJsonValue(m_escrow));
    }
    if (m_is_buy_order_isSet) {
        obj.insert(QString("is_buy_order"), ::OpenAPI::toJsonValue(m_is_buy_order));
    }
    if (m_issued_isSet) {
        obj.insert(QString("issued"), ::OpenAPI::toJsonValue(m_issued));
    }
    if (m_issued_by_isSet) {
        obj.insert(QString("issued_by"), ::OpenAPI::toJsonValue(m_issued_by));
    }
    if (m_location_id_isSet) {
        obj.insert(QString("location_id"), ::OpenAPI::toJsonValue(m_location_id));
    }
    if (m_min_volume_isSet) {
        obj.insert(QString("min_volume"), ::OpenAPI::toJsonValue(m_min_volume));
    }
    if (m_order_id_isSet) {
        obj.insert(QString("order_id"), ::OpenAPI::toJsonValue(m_order_id));
    }
    if (m_price_isSet) {
        obj.insert(QString("price"), ::OpenAPI::toJsonValue(m_price));
    }
    if (m_range_isSet) {
        obj.insert(QString("range"), ::OpenAPI::toJsonValue(m_range));
    }
    if (m_region_id_isSet) {
        obj.insert(QString("region_id"), ::OpenAPI::toJsonValue(m_region_id));
    }
    if (m_state_isSet) {
        obj.insert(QString("state"), ::OpenAPI::toJsonValue(m_state));
    }
    if (m_type_id_isSet) {
        obj.insert(QString("type_id"), ::OpenAPI::toJsonValue(m_type_id));
    }
    if (m_volume_remain_isSet) {
        obj.insert(QString("volume_remain"), ::OpenAPI::toJsonValue(m_volume_remain));
    }
    if (m_volume_total_isSet) {
        obj.insert(QString("volume_total"), ::OpenAPI::toJsonValue(m_volume_total));
    }
    if (m_wallet_division_isSet) {
        obj.insert(QString("wallet_division"), ::OpenAPI::toJsonValue(m_wallet_division));
    }
    return obj;
}

qint32 OAIGet_corporations_corporation_id_orders_history_200_ok::getDuration() const {
    return m_duration;
}
void OAIGet_corporations_corporation_id_orders_history_200_ok::setDuration(const qint32 &duration) {
    m_duration = duration;
    m_duration_isSet = true;
}

bool OAIGet_corporations_corporation_id_orders_history_200_ok::is_duration_Set() const{
    return m_duration_isSet;
}

bool OAIGet_corporations_corporation_id_orders_history_200_ok::is_duration_Valid() const{
    return m_duration_isValid;
}

double OAIGet_corporations_corporation_id_orders_history_200_ok::getEscrow() const {
    return m_escrow;
}
void OAIGet_corporations_corporation_id_orders_history_200_ok::setEscrow(const double &escrow) {
    m_escrow = escrow;
    m_escrow_isSet = true;
}

bool OAIGet_corporations_corporation_id_orders_history_200_ok::is_escrow_Set() const{
    return m_escrow_isSet;
}

bool OAIGet_corporations_corporation_id_orders_history_200_ok::is_escrow_Valid() const{
    return m_escrow_isValid;
}

bool OAIGet_corporations_corporation_id_orders_history_200_ok::isIsBuyOrder() const {
    return m_is_buy_order;
}
void OAIGet_corporations_corporation_id_orders_history_200_ok::setIsBuyOrder(const bool &is_buy_order) {
    m_is_buy_order = is_buy_order;
    m_is_buy_order_isSet = true;
}

bool OAIGet_corporations_corporation_id_orders_history_200_ok::is_is_buy_order_Set() const{
    return m_is_buy_order_isSet;
}

bool OAIGet_corporations_corporation_id_orders_history_200_ok::is_is_buy_order_Valid() const{
    return m_is_buy_order_isValid;
}

QDateTime OAIGet_corporations_corporation_id_orders_history_200_ok::getIssued() const {
    return m_issued;
}
void OAIGet_corporations_corporation_id_orders_history_200_ok::setIssued(const QDateTime &issued) {
    m_issued = issued;
    m_issued_isSet = true;
}

bool OAIGet_corporations_corporation_id_orders_history_200_ok::is_issued_Set() const{
    return m_issued_isSet;
}

bool OAIGet_corporations_corporation_id_orders_history_200_ok::is_issued_Valid() const{
    return m_issued_isValid;
}

qint32 OAIGet_corporations_corporation_id_orders_history_200_ok::getIssuedBy() const {
    return m_issued_by;
}
void OAIGet_corporations_corporation_id_orders_history_200_ok::setIssuedBy(const qint32 &issued_by) {
    m_issued_by = issued_by;
    m_issued_by_isSet = true;
}

bool OAIGet_corporations_corporation_id_orders_history_200_ok::is_issued_by_Set() const{
    return m_issued_by_isSet;
}

bool OAIGet_corporations_corporation_id_orders_history_200_ok::is_issued_by_Valid() const{
    return m_issued_by_isValid;
}

qint64 OAIGet_corporations_corporation_id_orders_history_200_ok::getLocationId() const {
    return m_location_id;
}
void OAIGet_corporations_corporation_id_orders_history_200_ok::setLocationId(const qint64 &location_id) {
    m_location_id = location_id;
    m_location_id_isSet = true;
}

bool OAIGet_corporations_corporation_id_orders_history_200_ok::is_location_id_Set() const{
    return m_location_id_isSet;
}

bool OAIGet_corporations_corporation_id_orders_history_200_ok::is_location_id_Valid() const{
    return m_location_id_isValid;
}

qint32 OAIGet_corporations_corporation_id_orders_history_200_ok::getMinVolume() const {
    return m_min_volume;
}
void OAIGet_corporations_corporation_id_orders_history_200_ok::setMinVolume(const qint32 &min_volume) {
    m_min_volume = min_volume;
    m_min_volume_isSet = true;
}

bool OAIGet_corporations_corporation_id_orders_history_200_ok::is_min_volume_Set() const{
    return m_min_volume_isSet;
}

bool OAIGet_corporations_corporation_id_orders_history_200_ok::is_min_volume_Valid() const{
    return m_min_volume_isValid;
}

qint64 OAIGet_corporations_corporation_id_orders_history_200_ok::getOrderId() const {
    return m_order_id;
}
void OAIGet_corporations_corporation_id_orders_history_200_ok::setOrderId(const qint64 &order_id) {
    m_order_id = order_id;
    m_order_id_isSet = true;
}

bool OAIGet_corporations_corporation_id_orders_history_200_ok::is_order_id_Set() const{
    return m_order_id_isSet;
}

bool OAIGet_corporations_corporation_id_orders_history_200_ok::is_order_id_Valid() const{
    return m_order_id_isValid;
}

double OAIGet_corporations_corporation_id_orders_history_200_ok::getPrice() const {
    return m_price;
}
void OAIGet_corporations_corporation_id_orders_history_200_ok::setPrice(const double &price) {
    m_price = price;
    m_price_isSet = true;
}

bool OAIGet_corporations_corporation_id_orders_history_200_ok::is_price_Set() const{
    return m_price_isSet;
}

bool OAIGet_corporations_corporation_id_orders_history_200_ok::is_price_Valid() const{
    return m_price_isValid;
}

QString OAIGet_corporations_corporation_id_orders_history_200_ok::getRange() const {
    return m_range;
}
void OAIGet_corporations_corporation_id_orders_history_200_ok::setRange(const QString &range) {
    m_range = range;
    m_range_isSet = true;
}

bool OAIGet_corporations_corporation_id_orders_history_200_ok::is_range_Set() const{
    return m_range_isSet;
}

bool OAIGet_corporations_corporation_id_orders_history_200_ok::is_range_Valid() const{
    return m_range_isValid;
}

qint32 OAIGet_corporations_corporation_id_orders_history_200_ok::getRegionId() const {
    return m_region_id;
}
void OAIGet_corporations_corporation_id_orders_history_200_ok::setRegionId(const qint32 &region_id) {
    m_region_id = region_id;
    m_region_id_isSet = true;
}

bool OAIGet_corporations_corporation_id_orders_history_200_ok::is_region_id_Set() const{
    return m_region_id_isSet;
}

bool OAIGet_corporations_corporation_id_orders_history_200_ok::is_region_id_Valid() const{
    return m_region_id_isValid;
}

QString OAIGet_corporations_corporation_id_orders_history_200_ok::getState() const {
    return m_state;
}
void OAIGet_corporations_corporation_id_orders_history_200_ok::setState(const QString &state) {
    m_state = state;
    m_state_isSet = true;
}

bool OAIGet_corporations_corporation_id_orders_history_200_ok::is_state_Set() const{
    return m_state_isSet;
}

bool OAIGet_corporations_corporation_id_orders_history_200_ok::is_state_Valid() const{
    return m_state_isValid;
}

qint32 OAIGet_corporations_corporation_id_orders_history_200_ok::getTypeId() const {
    return m_type_id;
}
void OAIGet_corporations_corporation_id_orders_history_200_ok::setTypeId(const qint32 &type_id) {
    m_type_id = type_id;
    m_type_id_isSet = true;
}

bool OAIGet_corporations_corporation_id_orders_history_200_ok::is_type_id_Set() const{
    return m_type_id_isSet;
}

bool OAIGet_corporations_corporation_id_orders_history_200_ok::is_type_id_Valid() const{
    return m_type_id_isValid;
}

qint32 OAIGet_corporations_corporation_id_orders_history_200_ok::getVolumeRemain() const {
    return m_volume_remain;
}
void OAIGet_corporations_corporation_id_orders_history_200_ok::setVolumeRemain(const qint32 &volume_remain) {
    m_volume_remain = volume_remain;
    m_volume_remain_isSet = true;
}

bool OAIGet_corporations_corporation_id_orders_history_200_ok::is_volume_remain_Set() const{
    return m_volume_remain_isSet;
}

bool OAIGet_corporations_corporation_id_orders_history_200_ok::is_volume_remain_Valid() const{
    return m_volume_remain_isValid;
}

qint32 OAIGet_corporations_corporation_id_orders_history_200_ok::getVolumeTotal() const {
    return m_volume_total;
}
void OAIGet_corporations_corporation_id_orders_history_200_ok::setVolumeTotal(const qint32 &volume_total) {
    m_volume_total = volume_total;
    m_volume_total_isSet = true;
}

bool OAIGet_corporations_corporation_id_orders_history_200_ok::is_volume_total_Set() const{
    return m_volume_total_isSet;
}

bool OAIGet_corporations_corporation_id_orders_history_200_ok::is_volume_total_Valid() const{
    return m_volume_total_isValid;
}

qint32 OAIGet_corporations_corporation_id_orders_history_200_ok::getWalletDivision() const {
    return m_wallet_division;
}
void OAIGet_corporations_corporation_id_orders_history_200_ok::setWalletDivision(const qint32 &wallet_division) {
    m_wallet_division = wallet_division;
    m_wallet_division_isSet = true;
}

bool OAIGet_corporations_corporation_id_orders_history_200_ok::is_wallet_division_Set() const{
    return m_wallet_division_isSet;
}

bool OAIGet_corporations_corporation_id_orders_history_200_ok::is_wallet_division_Valid() const{
    return m_wallet_division_isValid;
}

bool OAIGet_corporations_corporation_id_orders_history_200_ok::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_duration_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_escrow_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_is_buy_order_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_issued_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_issued_by_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_location_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_min_volume_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_order_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_price_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_range_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_region_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_state_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_type_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_volume_remain_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_volume_total_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_wallet_division_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIGet_corporations_corporation_id_orders_history_200_ok::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_duration_isValid && m_issued_isValid && m_location_id_isValid && m_order_id_isValid && m_price_isValid && m_range_isValid && m_region_id_isValid && m_state_isValid && m_type_id_isValid && m_volume_remain_isValid && m_volume_total_isValid && m_wallet_division_isValid && true;
}

} // namespace OpenAPI
