/**
 * EVE Swagger Interface
 * An OpenAPI for EVE Online
 *
 * The version of the OpenAPI document: 0.8.6
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIGet_universe_factions_200_ok.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIGet_universe_factions_200_ok::OAIGet_universe_factions_200_ok(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIGet_universe_factions_200_ok::OAIGet_universe_factions_200_ok() {
    this->initializeModel();
}

OAIGet_universe_factions_200_ok::~OAIGet_universe_factions_200_ok() {}

void OAIGet_universe_factions_200_ok::initializeModel() {

    m_corporation_id_isSet = false;
    m_corporation_id_isValid = false;

    m_description_isSet = false;
    m_description_isValid = false;

    m_faction_id_isSet = false;
    m_faction_id_isValid = false;

    m_is_unique_isSet = false;
    m_is_unique_isValid = false;

    m_militia_corporation_id_isSet = false;
    m_militia_corporation_id_isValid = false;

    m_name_isSet = false;
    m_name_isValid = false;

    m_size_factor_isSet = false;
    m_size_factor_isValid = false;

    m_solar_system_id_isSet = false;
    m_solar_system_id_isValid = false;

    m_station_count_isSet = false;
    m_station_count_isValid = false;

    m_station_system_count_isSet = false;
    m_station_system_count_isValid = false;
}

void OAIGet_universe_factions_200_ok::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIGet_universe_factions_200_ok::fromJsonObject(QJsonObject json) {

    m_corporation_id_isValid = ::OpenAPI::fromJsonValue(m_corporation_id, json[QString("corporation_id")]);
    m_corporation_id_isSet = !json[QString("corporation_id")].isNull() && m_corporation_id_isValid;

    m_description_isValid = ::OpenAPI::fromJsonValue(m_description, json[QString("description")]);
    m_description_isSet = !json[QString("description")].isNull() && m_description_isValid;

    m_faction_id_isValid = ::OpenAPI::fromJsonValue(m_faction_id, json[QString("faction_id")]);
    m_faction_id_isSet = !json[QString("faction_id")].isNull() && m_faction_id_isValid;

    m_is_unique_isValid = ::OpenAPI::fromJsonValue(m_is_unique, json[QString("is_unique")]);
    m_is_unique_isSet = !json[QString("is_unique")].isNull() && m_is_unique_isValid;

    m_militia_corporation_id_isValid = ::OpenAPI::fromJsonValue(m_militia_corporation_id, json[QString("militia_corporation_id")]);
    m_militia_corporation_id_isSet = !json[QString("militia_corporation_id")].isNull() && m_militia_corporation_id_isValid;

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("name")]);
    m_name_isSet = !json[QString("name")].isNull() && m_name_isValid;

    m_size_factor_isValid = ::OpenAPI::fromJsonValue(m_size_factor, json[QString("size_factor")]);
    m_size_factor_isSet = !json[QString("size_factor")].isNull() && m_size_factor_isValid;

    m_solar_system_id_isValid = ::OpenAPI::fromJsonValue(m_solar_system_id, json[QString("solar_system_id")]);
    m_solar_system_id_isSet = !json[QString("solar_system_id")].isNull() && m_solar_system_id_isValid;

    m_station_count_isValid = ::OpenAPI::fromJsonValue(m_station_count, json[QString("station_count")]);
    m_station_count_isSet = !json[QString("station_count")].isNull() && m_station_count_isValid;

    m_station_system_count_isValid = ::OpenAPI::fromJsonValue(m_station_system_count, json[QString("station_system_count")]);
    m_station_system_count_isSet = !json[QString("station_system_count")].isNull() && m_station_system_count_isValid;
}

QString OAIGet_universe_factions_200_ok::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIGet_universe_factions_200_ok::asJsonObject() const {
    QJsonObject obj;
    if (m_corporation_id_isSet) {
        obj.insert(QString("corporation_id"), ::OpenAPI::toJsonValue(m_corporation_id));
    }
    if (m_description_isSet) {
        obj.insert(QString("description"), ::OpenAPI::toJsonValue(m_description));
    }
    if (m_faction_id_isSet) {
        obj.insert(QString("faction_id"), ::OpenAPI::toJsonValue(m_faction_id));
    }
    if (m_is_unique_isSet) {
        obj.insert(QString("is_unique"), ::OpenAPI::toJsonValue(m_is_unique));
    }
    if (m_militia_corporation_id_isSet) {
        obj.insert(QString("militia_corporation_id"), ::OpenAPI::toJsonValue(m_militia_corporation_id));
    }
    if (m_name_isSet) {
        obj.insert(QString("name"), ::OpenAPI::toJsonValue(m_name));
    }
    if (m_size_factor_isSet) {
        obj.insert(QString("size_factor"), ::OpenAPI::toJsonValue(m_size_factor));
    }
    if (m_solar_system_id_isSet) {
        obj.insert(QString("solar_system_id"), ::OpenAPI::toJsonValue(m_solar_system_id));
    }
    if (m_station_count_isSet) {
        obj.insert(QString("station_count"), ::OpenAPI::toJsonValue(m_station_count));
    }
    if (m_station_system_count_isSet) {
        obj.insert(QString("station_system_count"), ::OpenAPI::toJsonValue(m_station_system_count));
    }
    return obj;
}

qint32 OAIGet_universe_factions_200_ok::getCorporationId() const {
    return m_corporation_id;
}
void OAIGet_universe_factions_200_ok::setCorporationId(const qint32 &corporation_id) {
    m_corporation_id = corporation_id;
    m_corporation_id_isSet = true;
}

bool OAIGet_universe_factions_200_ok::is_corporation_id_Set() const{
    return m_corporation_id_isSet;
}

bool OAIGet_universe_factions_200_ok::is_corporation_id_Valid() const{
    return m_corporation_id_isValid;
}

QString OAIGet_universe_factions_200_ok::getDescription() const {
    return m_description;
}
void OAIGet_universe_factions_200_ok::setDescription(const QString &description) {
    m_description = description;
    m_description_isSet = true;
}

bool OAIGet_universe_factions_200_ok::is_description_Set() const{
    return m_description_isSet;
}

bool OAIGet_universe_factions_200_ok::is_description_Valid() const{
    return m_description_isValid;
}

qint32 OAIGet_universe_factions_200_ok::getFactionId() const {
    return m_faction_id;
}
void OAIGet_universe_factions_200_ok::setFactionId(const qint32 &faction_id) {
    m_faction_id = faction_id;
    m_faction_id_isSet = true;
}

bool OAIGet_universe_factions_200_ok::is_faction_id_Set() const{
    return m_faction_id_isSet;
}

bool OAIGet_universe_factions_200_ok::is_faction_id_Valid() const{
    return m_faction_id_isValid;
}

bool OAIGet_universe_factions_200_ok::isIsUnique() const {
    return m_is_unique;
}
void OAIGet_universe_factions_200_ok::setIsUnique(const bool &is_unique) {
    m_is_unique = is_unique;
    m_is_unique_isSet = true;
}

bool OAIGet_universe_factions_200_ok::is_is_unique_Set() const{
    return m_is_unique_isSet;
}

bool OAIGet_universe_factions_200_ok::is_is_unique_Valid() const{
    return m_is_unique_isValid;
}

qint32 OAIGet_universe_factions_200_ok::getMilitiaCorporationId() const {
    return m_militia_corporation_id;
}
void OAIGet_universe_factions_200_ok::setMilitiaCorporationId(const qint32 &militia_corporation_id) {
    m_militia_corporation_id = militia_corporation_id;
    m_militia_corporation_id_isSet = true;
}

bool OAIGet_universe_factions_200_ok::is_militia_corporation_id_Set() const{
    return m_militia_corporation_id_isSet;
}

bool OAIGet_universe_factions_200_ok::is_militia_corporation_id_Valid() const{
    return m_militia_corporation_id_isValid;
}

QString OAIGet_universe_factions_200_ok::getName() const {
    return m_name;
}
void OAIGet_universe_factions_200_ok::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAIGet_universe_factions_200_ok::is_name_Set() const{
    return m_name_isSet;
}

bool OAIGet_universe_factions_200_ok::is_name_Valid() const{
    return m_name_isValid;
}

float OAIGet_universe_factions_200_ok::getSizeFactor() const {
    return m_size_factor;
}
void OAIGet_universe_factions_200_ok::setSizeFactor(const float &size_factor) {
    m_size_factor = size_factor;
    m_size_factor_isSet = true;
}

bool OAIGet_universe_factions_200_ok::is_size_factor_Set() const{
    return m_size_factor_isSet;
}

bool OAIGet_universe_factions_200_ok::is_size_factor_Valid() const{
    return m_size_factor_isValid;
}

qint32 OAIGet_universe_factions_200_ok::getSolarSystemId() const {
    return m_solar_system_id;
}
void OAIGet_universe_factions_200_ok::setSolarSystemId(const qint32 &solar_system_id) {
    m_solar_system_id = solar_system_id;
    m_solar_system_id_isSet = true;
}

bool OAIGet_universe_factions_200_ok::is_solar_system_id_Set() const{
    return m_solar_system_id_isSet;
}

bool OAIGet_universe_factions_200_ok::is_solar_system_id_Valid() const{
    return m_solar_system_id_isValid;
}

qint32 OAIGet_universe_factions_200_ok::getStationCount() const {
    return m_station_count;
}
void OAIGet_universe_factions_200_ok::setStationCount(const qint32 &station_count) {
    m_station_count = station_count;
    m_station_count_isSet = true;
}

bool OAIGet_universe_factions_200_ok::is_station_count_Set() const{
    return m_station_count_isSet;
}

bool OAIGet_universe_factions_200_ok::is_station_count_Valid() const{
    return m_station_count_isValid;
}

qint32 OAIGet_universe_factions_200_ok::getStationSystemCount() const {
    return m_station_system_count;
}
void OAIGet_universe_factions_200_ok::setStationSystemCount(const qint32 &station_system_count) {
    m_station_system_count = station_system_count;
    m_station_system_count_isSet = true;
}

bool OAIGet_universe_factions_200_ok::is_station_system_count_Set() const{
    return m_station_system_count_isSet;
}

bool OAIGet_universe_factions_200_ok::is_station_system_count_Valid() const{
    return m_station_system_count_isValid;
}

bool OAIGet_universe_factions_200_ok::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_corporation_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_description_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_faction_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_is_unique_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_militia_corporation_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_size_factor_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_solar_system_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_station_count_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_station_system_count_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIGet_universe_factions_200_ok::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_description_isValid && m_faction_id_isValid && m_is_unique_isValid && m_name_isValid && m_size_factor_isValid && m_station_count_isValid && m_station_system_count_isValid && true;
}

} // namespace OpenAPI
