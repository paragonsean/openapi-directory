/**
 * EVE Swagger Interface
 * An OpenAPI for EVE Online
 *
 * The version of the OpenAPI document: 0.8.6
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIGet_characters_character_id_calendar_200_ok.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIGet_characters_character_id_calendar_200_ok::OAIGet_characters_character_id_calendar_200_ok(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIGet_characters_character_id_calendar_200_ok::OAIGet_characters_character_id_calendar_200_ok() {
    this->initializeModel();
}

OAIGet_characters_character_id_calendar_200_ok::~OAIGet_characters_character_id_calendar_200_ok() {}

void OAIGet_characters_character_id_calendar_200_ok::initializeModel() {

    m_event_date_isSet = false;
    m_event_date_isValid = false;

    m_event_id_isSet = false;
    m_event_id_isValid = false;

    m_event_response_isSet = false;
    m_event_response_isValid = false;

    m_importance_isSet = false;
    m_importance_isValid = false;

    m_title_isSet = false;
    m_title_isValid = false;
}

void OAIGet_characters_character_id_calendar_200_ok::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIGet_characters_character_id_calendar_200_ok::fromJsonObject(QJsonObject json) {

    m_event_date_isValid = ::OpenAPI::fromJsonValue(m_event_date, json[QString("event_date")]);
    m_event_date_isSet = !json[QString("event_date")].isNull() && m_event_date_isValid;

    m_event_id_isValid = ::OpenAPI::fromJsonValue(m_event_id, json[QString("event_id")]);
    m_event_id_isSet = !json[QString("event_id")].isNull() && m_event_id_isValid;

    m_event_response_isValid = ::OpenAPI::fromJsonValue(m_event_response, json[QString("event_response")]);
    m_event_response_isSet = !json[QString("event_response")].isNull() && m_event_response_isValid;

    m_importance_isValid = ::OpenAPI::fromJsonValue(m_importance, json[QString("importance")]);
    m_importance_isSet = !json[QString("importance")].isNull() && m_importance_isValid;

    m_title_isValid = ::OpenAPI::fromJsonValue(m_title, json[QString("title")]);
    m_title_isSet = !json[QString("title")].isNull() && m_title_isValid;
}

QString OAIGet_characters_character_id_calendar_200_ok::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIGet_characters_character_id_calendar_200_ok::asJsonObject() const {
    QJsonObject obj;
    if (m_event_date_isSet) {
        obj.insert(QString("event_date"), ::OpenAPI::toJsonValue(m_event_date));
    }
    if (m_event_id_isSet) {
        obj.insert(QString("event_id"), ::OpenAPI::toJsonValue(m_event_id));
    }
    if (m_event_response_isSet) {
        obj.insert(QString("event_response"), ::OpenAPI::toJsonValue(m_event_response));
    }
    if (m_importance_isSet) {
        obj.insert(QString("importance"), ::OpenAPI::toJsonValue(m_importance));
    }
    if (m_title_isSet) {
        obj.insert(QString("title"), ::OpenAPI::toJsonValue(m_title));
    }
    return obj;
}

QDateTime OAIGet_characters_character_id_calendar_200_ok::getEventDate() const {
    return m_event_date;
}
void OAIGet_characters_character_id_calendar_200_ok::setEventDate(const QDateTime &event_date) {
    m_event_date = event_date;
    m_event_date_isSet = true;
}

bool OAIGet_characters_character_id_calendar_200_ok::is_event_date_Set() const{
    return m_event_date_isSet;
}

bool OAIGet_characters_character_id_calendar_200_ok::is_event_date_Valid() const{
    return m_event_date_isValid;
}

qint32 OAIGet_characters_character_id_calendar_200_ok::getEventId() const {
    return m_event_id;
}
void OAIGet_characters_character_id_calendar_200_ok::setEventId(const qint32 &event_id) {
    m_event_id = event_id;
    m_event_id_isSet = true;
}

bool OAIGet_characters_character_id_calendar_200_ok::is_event_id_Set() const{
    return m_event_id_isSet;
}

bool OAIGet_characters_character_id_calendar_200_ok::is_event_id_Valid() const{
    return m_event_id_isValid;
}

QString OAIGet_characters_character_id_calendar_200_ok::getEventResponse() const {
    return m_event_response;
}
void OAIGet_characters_character_id_calendar_200_ok::setEventResponse(const QString &event_response) {
    m_event_response = event_response;
    m_event_response_isSet = true;
}

bool OAIGet_characters_character_id_calendar_200_ok::is_event_response_Set() const{
    return m_event_response_isSet;
}

bool OAIGet_characters_character_id_calendar_200_ok::is_event_response_Valid() const{
    return m_event_response_isValid;
}

qint32 OAIGet_characters_character_id_calendar_200_ok::getImportance() const {
    return m_importance;
}
void OAIGet_characters_character_id_calendar_200_ok::setImportance(const qint32 &importance) {
    m_importance = importance;
    m_importance_isSet = true;
}

bool OAIGet_characters_character_id_calendar_200_ok::is_importance_Set() const{
    return m_importance_isSet;
}

bool OAIGet_characters_character_id_calendar_200_ok::is_importance_Valid() const{
    return m_importance_isValid;
}

QString OAIGet_characters_character_id_calendar_200_ok::getTitle() const {
    return m_title;
}
void OAIGet_characters_character_id_calendar_200_ok::setTitle(const QString &title) {
    m_title = title;
    m_title_isSet = true;
}

bool OAIGet_characters_character_id_calendar_200_ok::is_title_Set() const{
    return m_title_isSet;
}

bool OAIGet_characters_character_id_calendar_200_ok::is_title_Valid() const{
    return m_title_isValid;
}

bool OAIGet_characters_character_id_calendar_200_ok::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_event_date_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_event_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_event_response_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_importance_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_title_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIGet_characters_character_id_calendar_200_ok::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
