/**
 * EVE Swagger Interface
 * An OpenAPI for EVE Online
 *
 * The version of the OpenAPI document: 0.8.6
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIGet_fw_systems_200_ok.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIGet_fw_systems_200_ok::OAIGet_fw_systems_200_ok(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIGet_fw_systems_200_ok::OAIGet_fw_systems_200_ok() {
    this->initializeModel();
}

OAIGet_fw_systems_200_ok::~OAIGet_fw_systems_200_ok() {}

void OAIGet_fw_systems_200_ok::initializeModel() {

    m_contested_isSet = false;
    m_contested_isValid = false;

    m_occupier_faction_id_isSet = false;
    m_occupier_faction_id_isValid = false;

    m_owner_faction_id_isSet = false;
    m_owner_faction_id_isValid = false;

    m_solar_system_id_isSet = false;
    m_solar_system_id_isValid = false;

    m_victory_points_isSet = false;
    m_victory_points_isValid = false;

    m_victory_points_threshold_isSet = false;
    m_victory_points_threshold_isValid = false;
}

void OAIGet_fw_systems_200_ok::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIGet_fw_systems_200_ok::fromJsonObject(QJsonObject json) {

    m_contested_isValid = ::OpenAPI::fromJsonValue(m_contested, json[QString("contested")]);
    m_contested_isSet = !json[QString("contested")].isNull() && m_contested_isValid;

    m_occupier_faction_id_isValid = ::OpenAPI::fromJsonValue(m_occupier_faction_id, json[QString("occupier_faction_id")]);
    m_occupier_faction_id_isSet = !json[QString("occupier_faction_id")].isNull() && m_occupier_faction_id_isValid;

    m_owner_faction_id_isValid = ::OpenAPI::fromJsonValue(m_owner_faction_id, json[QString("owner_faction_id")]);
    m_owner_faction_id_isSet = !json[QString("owner_faction_id")].isNull() && m_owner_faction_id_isValid;

    m_solar_system_id_isValid = ::OpenAPI::fromJsonValue(m_solar_system_id, json[QString("solar_system_id")]);
    m_solar_system_id_isSet = !json[QString("solar_system_id")].isNull() && m_solar_system_id_isValid;

    m_victory_points_isValid = ::OpenAPI::fromJsonValue(m_victory_points, json[QString("victory_points")]);
    m_victory_points_isSet = !json[QString("victory_points")].isNull() && m_victory_points_isValid;

    m_victory_points_threshold_isValid = ::OpenAPI::fromJsonValue(m_victory_points_threshold, json[QString("victory_points_threshold")]);
    m_victory_points_threshold_isSet = !json[QString("victory_points_threshold")].isNull() && m_victory_points_threshold_isValid;
}

QString OAIGet_fw_systems_200_ok::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIGet_fw_systems_200_ok::asJsonObject() const {
    QJsonObject obj;
    if (m_contested_isSet) {
        obj.insert(QString("contested"), ::OpenAPI::toJsonValue(m_contested));
    }
    if (m_occupier_faction_id_isSet) {
        obj.insert(QString("occupier_faction_id"), ::OpenAPI::toJsonValue(m_occupier_faction_id));
    }
    if (m_owner_faction_id_isSet) {
        obj.insert(QString("owner_faction_id"), ::OpenAPI::toJsonValue(m_owner_faction_id));
    }
    if (m_solar_system_id_isSet) {
        obj.insert(QString("solar_system_id"), ::OpenAPI::toJsonValue(m_solar_system_id));
    }
    if (m_victory_points_isSet) {
        obj.insert(QString("victory_points"), ::OpenAPI::toJsonValue(m_victory_points));
    }
    if (m_victory_points_threshold_isSet) {
        obj.insert(QString("victory_points_threshold"), ::OpenAPI::toJsonValue(m_victory_points_threshold));
    }
    return obj;
}

QString OAIGet_fw_systems_200_ok::getContested() const {
    return m_contested;
}
void OAIGet_fw_systems_200_ok::setContested(const QString &contested) {
    m_contested = contested;
    m_contested_isSet = true;
}

bool OAIGet_fw_systems_200_ok::is_contested_Set() const{
    return m_contested_isSet;
}

bool OAIGet_fw_systems_200_ok::is_contested_Valid() const{
    return m_contested_isValid;
}

qint32 OAIGet_fw_systems_200_ok::getOccupierFactionId() const {
    return m_occupier_faction_id;
}
void OAIGet_fw_systems_200_ok::setOccupierFactionId(const qint32 &occupier_faction_id) {
    m_occupier_faction_id = occupier_faction_id;
    m_occupier_faction_id_isSet = true;
}

bool OAIGet_fw_systems_200_ok::is_occupier_faction_id_Set() const{
    return m_occupier_faction_id_isSet;
}

bool OAIGet_fw_systems_200_ok::is_occupier_faction_id_Valid() const{
    return m_occupier_faction_id_isValid;
}

qint32 OAIGet_fw_systems_200_ok::getOwnerFactionId() const {
    return m_owner_faction_id;
}
void OAIGet_fw_systems_200_ok::setOwnerFactionId(const qint32 &owner_faction_id) {
    m_owner_faction_id = owner_faction_id;
    m_owner_faction_id_isSet = true;
}

bool OAIGet_fw_systems_200_ok::is_owner_faction_id_Set() const{
    return m_owner_faction_id_isSet;
}

bool OAIGet_fw_systems_200_ok::is_owner_faction_id_Valid() const{
    return m_owner_faction_id_isValid;
}

qint32 OAIGet_fw_systems_200_ok::getSolarSystemId() const {
    return m_solar_system_id;
}
void OAIGet_fw_systems_200_ok::setSolarSystemId(const qint32 &solar_system_id) {
    m_solar_system_id = solar_system_id;
    m_solar_system_id_isSet = true;
}

bool OAIGet_fw_systems_200_ok::is_solar_system_id_Set() const{
    return m_solar_system_id_isSet;
}

bool OAIGet_fw_systems_200_ok::is_solar_system_id_Valid() const{
    return m_solar_system_id_isValid;
}

qint32 OAIGet_fw_systems_200_ok::getVictoryPoints() const {
    return m_victory_points;
}
void OAIGet_fw_systems_200_ok::setVictoryPoints(const qint32 &victory_points) {
    m_victory_points = victory_points;
    m_victory_points_isSet = true;
}

bool OAIGet_fw_systems_200_ok::is_victory_points_Set() const{
    return m_victory_points_isSet;
}

bool OAIGet_fw_systems_200_ok::is_victory_points_Valid() const{
    return m_victory_points_isValid;
}

qint32 OAIGet_fw_systems_200_ok::getVictoryPointsThreshold() const {
    return m_victory_points_threshold;
}
void OAIGet_fw_systems_200_ok::setVictoryPointsThreshold(const qint32 &victory_points_threshold) {
    m_victory_points_threshold = victory_points_threshold;
    m_victory_points_threshold_isSet = true;
}

bool OAIGet_fw_systems_200_ok::is_victory_points_threshold_Set() const{
    return m_victory_points_threshold_isSet;
}

bool OAIGet_fw_systems_200_ok::is_victory_points_threshold_Valid() const{
    return m_victory_points_threshold_isValid;
}

bool OAIGet_fw_systems_200_ok::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_contested_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_occupier_faction_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_owner_faction_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_solar_system_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_victory_points_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_victory_points_threshold_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIGet_fw_systems_200_ok::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_contested_isValid && m_occupier_faction_id_isValid && m_owner_faction_id_isValid && m_solar_system_id_isValid && m_victory_points_isValid && m_victory_points_threshold_isValid && true;
}

} // namespace OpenAPI
