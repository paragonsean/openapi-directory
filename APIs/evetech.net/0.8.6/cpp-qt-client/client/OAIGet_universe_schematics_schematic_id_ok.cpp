/**
 * EVE Swagger Interface
 * An OpenAPI for EVE Online
 *
 * The version of the OpenAPI document: 0.8.6
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIGet_universe_schematics_schematic_id_ok.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIGet_universe_schematics_schematic_id_ok::OAIGet_universe_schematics_schematic_id_ok(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIGet_universe_schematics_schematic_id_ok::OAIGet_universe_schematics_schematic_id_ok() {
    this->initializeModel();
}

OAIGet_universe_schematics_schematic_id_ok::~OAIGet_universe_schematics_schematic_id_ok() {}

void OAIGet_universe_schematics_schematic_id_ok::initializeModel() {

    m_cycle_time_isSet = false;
    m_cycle_time_isValid = false;

    m_schematic_name_isSet = false;
    m_schematic_name_isValid = false;
}

void OAIGet_universe_schematics_schematic_id_ok::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIGet_universe_schematics_schematic_id_ok::fromJsonObject(QJsonObject json) {

    m_cycle_time_isValid = ::OpenAPI::fromJsonValue(m_cycle_time, json[QString("cycle_time")]);
    m_cycle_time_isSet = !json[QString("cycle_time")].isNull() && m_cycle_time_isValid;

    m_schematic_name_isValid = ::OpenAPI::fromJsonValue(m_schematic_name, json[QString("schematic_name")]);
    m_schematic_name_isSet = !json[QString("schematic_name")].isNull() && m_schematic_name_isValid;
}

QString OAIGet_universe_schematics_schematic_id_ok::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIGet_universe_schematics_schematic_id_ok::asJsonObject() const {
    QJsonObject obj;
    if (m_cycle_time_isSet) {
        obj.insert(QString("cycle_time"), ::OpenAPI::toJsonValue(m_cycle_time));
    }
    if (m_schematic_name_isSet) {
        obj.insert(QString("schematic_name"), ::OpenAPI::toJsonValue(m_schematic_name));
    }
    return obj;
}

qint32 OAIGet_universe_schematics_schematic_id_ok::getCycleTime() const {
    return m_cycle_time;
}
void OAIGet_universe_schematics_schematic_id_ok::setCycleTime(const qint32 &cycle_time) {
    m_cycle_time = cycle_time;
    m_cycle_time_isSet = true;
}

bool OAIGet_universe_schematics_schematic_id_ok::is_cycle_time_Set() const{
    return m_cycle_time_isSet;
}

bool OAIGet_universe_schematics_schematic_id_ok::is_cycle_time_Valid() const{
    return m_cycle_time_isValid;
}

QString OAIGet_universe_schematics_schematic_id_ok::getSchematicName() const {
    return m_schematic_name;
}
void OAIGet_universe_schematics_schematic_id_ok::setSchematicName(const QString &schematic_name) {
    m_schematic_name = schematic_name;
    m_schematic_name_isSet = true;
}

bool OAIGet_universe_schematics_schematic_id_ok::is_schematic_name_Set() const{
    return m_schematic_name_isSet;
}

bool OAIGet_universe_schematics_schematic_id_ok::is_schematic_name_Valid() const{
    return m_schematic_name_isValid;
}

bool OAIGet_universe_schematics_schematic_id_ok::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_cycle_time_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_schematic_name_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIGet_universe_schematics_schematic_id_ok::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_cycle_time_isValid && m_schematic_name_isValid && true;
}

} // namespace OpenAPI
