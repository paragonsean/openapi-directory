/**
 * EVE Swagger Interface
 * An OpenAPI for EVE Online
 *
 * The version of the OpenAPI document: 0.8.6
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#ifndef OAI_OAIContactsApi_H
#define OAI_OAIContactsApi_H

#include "OAIHelpers.h"
#include "OAIHttpRequest.h"
#include "OAIServerConfiguration.h"
#include "OAIOauth.h"

#include "OAIBad_request.h"
#include "OAIError_limited.h"
#include "OAIForbidden.h"
#include "OAIGateway_timeout.h"
#include "OAIGet_alliances_alliance_id_contacts_200_ok.h"
#include "OAIGet_alliances_alliance_id_contacts_labels_200_ok.h"
#include "OAIGet_characters_character_id_contacts_200_ok.h"
#include "OAIGet_characters_character_id_contacts_labels_200_ok.h"
#include "OAIGet_corporations_corporation_id_contacts_200_ok.h"
#include "OAIGet_corporations_corporation_id_contacts_labels_200_ok.h"
#include "OAIInternal_server_error.h"
#include "OAIPost_characters_character_id_contacts_error_520.h"
#include "OAIService_unavailable.h"
#include "OAIUnauthorized.h"
#include <QString>

#include <QObject>
#include <QByteArray>
#include <QStringList>
#include <QList>
#include <QNetworkAccessManager>

namespace OpenAPI {

class OAIContactsApi : public QObject {
    Q_OBJECT

public:
    OAIContactsApi(const int timeOut = 0);
    ~OAIContactsApi();

    void initializeServerConfigs();
    int setDefaultServerValue(int serverIndex,const QString &operation, const QString &variable,const QString &val);
    void setServerIndex(const QString &operation, int serverIndex);
    void setApiKey(const QString &apiKeyName, const QString &apiKey);
    void setBearerToken(const QString &token);
    void setUsername(const QString &username);
    void setPassword(const QString &password);
    void setTimeOut(const int timeOut);
    void setWorkingDirectory(const QString &path);
    void setNetworkAccessManager(QNetworkAccessManager* manager);
    int addServerConfiguration(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables = QMap<QString, OAIServerVariable>());
    void setNewServerForAllOperations(const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void setNewServer(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void addHeaders(const QString &key, const QString &value);
    void enableRequestCompression();
    void enableResponseCompression();
    void abortRequests();
    QString getParamStylePrefix(const QString &style);
    QString getParamStyleSuffix(const QString &style);
    QString getParamStyleDelimiter(const QString &style, const QString &name, bool isExplode);

    /**
    * @param[in]  character_id qint32 [required]
    * @param[in]  contact_ids QList<qint32> [required]
    * @param[in]  datasource QString [optional]
    * @param[in]  token QString [optional]
    */
    virtual void deleteCharactersCharacterIdContacts(const qint32 &character_id, const QList<qint32> &contact_ids, const ::OpenAPI::OptionalParam<QString> &datasource = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &token = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  alliance_id qint32 [required]
    * @param[in]  datasource QString [optional]
    * @param[in]  if_none_match QString [optional]
    * @param[in]  page qint32 [optional]
    * @param[in]  token QString [optional]
    */
    virtual void getAlliancesAllianceIdContacts(const qint32 &alliance_id, const ::OpenAPI::OptionalParam<QString> &datasource = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &if_none_match = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<qint32> &page = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<QString> &token = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  alliance_id qint32 [required]
    * @param[in]  datasource QString [optional]
    * @param[in]  if_none_match QString [optional]
    * @param[in]  token QString [optional]
    */
    virtual void getAlliancesAllianceIdContactsLabels(const qint32 &alliance_id, const ::OpenAPI::OptionalParam<QString> &datasource = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &if_none_match = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &token = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  character_id qint32 [required]
    * @param[in]  datasource QString [optional]
    * @param[in]  if_none_match QString [optional]
    * @param[in]  page qint32 [optional]
    * @param[in]  token QString [optional]
    */
    virtual void getCharactersCharacterIdContacts(const qint32 &character_id, const ::OpenAPI::OptionalParam<QString> &datasource = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &if_none_match = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<qint32> &page = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<QString> &token = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  character_id qint32 [required]
    * @param[in]  datasource QString [optional]
    * @param[in]  if_none_match QString [optional]
    * @param[in]  token QString [optional]
    */
    virtual void getCharactersCharacterIdContactsLabels(const qint32 &character_id, const ::OpenAPI::OptionalParam<QString> &datasource = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &if_none_match = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &token = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  corporation_id qint32 [required]
    * @param[in]  datasource QString [optional]
    * @param[in]  if_none_match QString [optional]
    * @param[in]  page qint32 [optional]
    * @param[in]  token QString [optional]
    */
    virtual void getCorporationsCorporationIdContacts(const qint32 &corporation_id, const ::OpenAPI::OptionalParam<QString> &datasource = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &if_none_match = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<qint32> &page = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<QString> &token = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  corporation_id qint32 [required]
    * @param[in]  datasource QString [optional]
    * @param[in]  if_none_match QString [optional]
    * @param[in]  token QString [optional]
    */
    virtual void getCorporationsCorporationIdContactsLabels(const qint32 &corporation_id, const ::OpenAPI::OptionalParam<QString> &datasource = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &if_none_match = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &token = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  character_id qint32 [required]
    * @param[in]  standing float [required]
    * @param[in]  contact_ids QList<qint32> [required]
    * @param[in]  datasource QString [optional]
    * @param[in]  label_ids QList<qint64> [optional]
    * @param[in]  token QString [optional]
    * @param[in]  watched bool [optional]
    */
    virtual void postCharactersCharacterIdContacts(const qint32 &character_id, const float &standing, const QList<qint32> &contact_ids, const ::OpenAPI::OptionalParam<QString> &datasource = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QList<qint64>> &label_ids = ::OpenAPI::OptionalParam<QList<qint64>>(), const ::OpenAPI::OptionalParam<QString> &token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &watched = ::OpenAPI::OptionalParam<bool>());

    /**
    * @param[in]  character_id qint32 [required]
    * @param[in]  standing float [required]
    * @param[in]  contact_ids QList<qint32> [required]
    * @param[in]  datasource QString [optional]
    * @param[in]  label_ids QList<qint64> [optional]
    * @param[in]  token QString [optional]
    * @param[in]  watched bool [optional]
    */
    virtual void putCharactersCharacterIdContacts(const qint32 &character_id, const float &standing, const QList<qint32> &contact_ids, const ::OpenAPI::OptionalParam<QString> &datasource = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QList<qint64>> &label_ids = ::OpenAPI::OptionalParam<QList<qint64>>(), const ::OpenAPI::OptionalParam<QString> &token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &watched = ::OpenAPI::OptionalParam<bool>());


private:
    QMap<QString,int> _serverIndices;
    QMap<QString,QList<OAIServerConfiguration>> _serverConfigs;
    QMap<QString, QString> _apiKeys;
    QString _bearerToken;
    QString _username;
    QString _password;
    int _timeOut;
    QString _workingDirectory;
    QNetworkAccessManager* _manager;
    QMap<QString, QString> _defaultHeaders;
    bool _isResponseCompressionEnabled;
    bool _isRequestCompressionEnabled;
    OAIHttpRequestInput _latestInput;
    OAIHttpRequestWorker *_latestWorker;
    QStringList _latestScope;
    OauthCode _authFlow;
    OauthImplicit _implicitFlow;
    OauthCredentials _credentialFlow;
    OauthPassword _passwordFlow;
    int _OauthMethod = 0;

    void deleteCharactersCharacterIdContactsCallback(OAIHttpRequestWorker *worker);
    void getAlliancesAllianceIdContactsCallback(OAIHttpRequestWorker *worker);
    void getAlliancesAllianceIdContactsLabelsCallback(OAIHttpRequestWorker *worker);
    void getCharactersCharacterIdContactsCallback(OAIHttpRequestWorker *worker);
    void getCharactersCharacterIdContactsLabelsCallback(OAIHttpRequestWorker *worker);
    void getCorporationsCorporationIdContactsCallback(OAIHttpRequestWorker *worker);
    void getCorporationsCorporationIdContactsLabelsCallback(OAIHttpRequestWorker *worker);
    void postCharactersCharacterIdContactsCallback(OAIHttpRequestWorker *worker);
    void putCharactersCharacterIdContactsCallback(OAIHttpRequestWorker *worker);

Q_SIGNALS:

    void deleteCharactersCharacterIdContactsSignal();
    void getAlliancesAllianceIdContactsSignal(QList<OAIGet_alliances_alliance_id_contacts_200_ok> summary);
    void getAlliancesAllianceIdContactsLabelsSignal(QList<OAIGet_alliances_alliance_id_contacts_labels_200_ok> summary);
    void getCharactersCharacterIdContactsSignal(QList<OAIGet_characters_character_id_contacts_200_ok> summary);
    void getCharactersCharacterIdContactsLabelsSignal(QList<OAIGet_characters_character_id_contacts_labels_200_ok> summary);
    void getCorporationsCorporationIdContactsSignal(QList<OAIGet_corporations_corporation_id_contacts_200_ok> summary);
    void getCorporationsCorporationIdContactsLabelsSignal(QList<OAIGet_corporations_corporation_id_contacts_labels_200_ok> summary);
    void postCharactersCharacterIdContactsSignal(QList<qint32> summary);
    void putCharactersCharacterIdContactsSignal();


    void deleteCharactersCharacterIdContactsSignalFull(OAIHttpRequestWorker *worker);
    void getAlliancesAllianceIdContactsSignalFull(OAIHttpRequestWorker *worker, QList<OAIGet_alliances_alliance_id_contacts_200_ok> summary);
    void getAlliancesAllianceIdContactsLabelsSignalFull(OAIHttpRequestWorker *worker, QList<OAIGet_alliances_alliance_id_contacts_labels_200_ok> summary);
    void getCharactersCharacterIdContactsSignalFull(OAIHttpRequestWorker *worker, QList<OAIGet_characters_character_id_contacts_200_ok> summary);
    void getCharactersCharacterIdContactsLabelsSignalFull(OAIHttpRequestWorker *worker, QList<OAIGet_characters_character_id_contacts_labels_200_ok> summary);
    void getCorporationsCorporationIdContactsSignalFull(OAIHttpRequestWorker *worker, QList<OAIGet_corporations_corporation_id_contacts_200_ok> summary);
    void getCorporationsCorporationIdContactsLabelsSignalFull(OAIHttpRequestWorker *worker, QList<OAIGet_corporations_corporation_id_contacts_labels_200_ok> summary);
    void postCharactersCharacterIdContactsSignalFull(OAIHttpRequestWorker *worker, QList<qint32> summary);
    void putCharactersCharacterIdContactsSignalFull(OAIHttpRequestWorker *worker);

    Q_DECL_DEPRECATED_X("Use deleteCharactersCharacterIdContactsSignalError() instead")
    void deleteCharactersCharacterIdContactsSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void deleteCharactersCharacterIdContactsSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getAlliancesAllianceIdContactsSignalError() instead")
    void getAlliancesAllianceIdContactsSignalE(QList<OAIGet_alliances_alliance_id_contacts_200_ok> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getAlliancesAllianceIdContactsSignalError(QList<OAIGet_alliances_alliance_id_contacts_200_ok> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getAlliancesAllianceIdContactsLabelsSignalError() instead")
    void getAlliancesAllianceIdContactsLabelsSignalE(QList<OAIGet_alliances_alliance_id_contacts_labels_200_ok> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getAlliancesAllianceIdContactsLabelsSignalError(QList<OAIGet_alliances_alliance_id_contacts_labels_200_ok> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getCharactersCharacterIdContactsSignalError() instead")
    void getCharactersCharacterIdContactsSignalE(QList<OAIGet_characters_character_id_contacts_200_ok> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getCharactersCharacterIdContactsSignalError(QList<OAIGet_characters_character_id_contacts_200_ok> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getCharactersCharacterIdContactsLabelsSignalError() instead")
    void getCharactersCharacterIdContactsLabelsSignalE(QList<OAIGet_characters_character_id_contacts_labels_200_ok> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getCharactersCharacterIdContactsLabelsSignalError(QList<OAIGet_characters_character_id_contacts_labels_200_ok> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getCorporationsCorporationIdContactsSignalError() instead")
    void getCorporationsCorporationIdContactsSignalE(QList<OAIGet_corporations_corporation_id_contacts_200_ok> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getCorporationsCorporationIdContactsSignalError(QList<OAIGet_corporations_corporation_id_contacts_200_ok> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getCorporationsCorporationIdContactsLabelsSignalError() instead")
    void getCorporationsCorporationIdContactsLabelsSignalE(QList<OAIGet_corporations_corporation_id_contacts_labels_200_ok> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getCorporationsCorporationIdContactsLabelsSignalError(QList<OAIGet_corporations_corporation_id_contacts_labels_200_ok> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use postCharactersCharacterIdContactsSignalError() instead")
    void postCharactersCharacterIdContactsSignalE(QList<qint32> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void postCharactersCharacterIdContactsSignalError(QList<qint32> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use putCharactersCharacterIdContactsSignalError() instead")
    void putCharactersCharacterIdContactsSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void putCharactersCharacterIdContactsSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);

    Q_DECL_DEPRECATED_X("Use deleteCharactersCharacterIdContactsSignalErrorFull() instead")
    void deleteCharactersCharacterIdContactsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void deleteCharactersCharacterIdContactsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getAlliancesAllianceIdContactsSignalErrorFull() instead")
    void getAlliancesAllianceIdContactsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getAlliancesAllianceIdContactsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getAlliancesAllianceIdContactsLabelsSignalErrorFull() instead")
    void getAlliancesAllianceIdContactsLabelsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getAlliancesAllianceIdContactsLabelsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getCharactersCharacterIdContactsSignalErrorFull() instead")
    void getCharactersCharacterIdContactsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getCharactersCharacterIdContactsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getCharactersCharacterIdContactsLabelsSignalErrorFull() instead")
    void getCharactersCharacterIdContactsLabelsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getCharactersCharacterIdContactsLabelsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getCorporationsCorporationIdContactsSignalErrorFull() instead")
    void getCorporationsCorporationIdContactsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getCorporationsCorporationIdContactsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getCorporationsCorporationIdContactsLabelsSignalErrorFull() instead")
    void getCorporationsCorporationIdContactsLabelsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getCorporationsCorporationIdContactsLabelsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use postCharactersCharacterIdContactsSignalErrorFull() instead")
    void postCharactersCharacterIdContactsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void postCharactersCharacterIdContactsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use putCharactersCharacterIdContactsSignalErrorFull() instead")
    void putCharactersCharacterIdContactsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void putCharactersCharacterIdContactsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);

    void abortRequestsSignal();
    void allPendingRequestsCompleted();

public Q_SLOTS:
    void tokenAvailable();
};

} // namespace OpenAPI
#endif
