/**
 * EVE Swagger Interface
 * An OpenAPI for EVE Online
 *
 * The version of the OpenAPI document: 0.8.6
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIGet_fw_leaderboards_kills.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIGet_fw_leaderboards_kills::OAIGet_fw_leaderboards_kills(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIGet_fw_leaderboards_kills::OAIGet_fw_leaderboards_kills() {
    this->initializeModel();
}

OAIGet_fw_leaderboards_kills::~OAIGet_fw_leaderboards_kills() {}

void OAIGet_fw_leaderboards_kills::initializeModel() {

    m_active_total_isSet = false;
    m_active_total_isValid = false;

    m_last_week_isSet = false;
    m_last_week_isValid = false;

    m_yesterday_isSet = false;
    m_yesterday_isValid = false;
}

void OAIGet_fw_leaderboards_kills::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIGet_fw_leaderboards_kills::fromJsonObject(QJsonObject json) {

    m_active_total_isValid = ::OpenAPI::fromJsonValue(m_active_total, json[QString("active_total")]);
    m_active_total_isSet = !json[QString("active_total")].isNull() && m_active_total_isValid;

    m_last_week_isValid = ::OpenAPI::fromJsonValue(m_last_week, json[QString("last_week")]);
    m_last_week_isSet = !json[QString("last_week")].isNull() && m_last_week_isValid;

    m_yesterday_isValid = ::OpenAPI::fromJsonValue(m_yesterday, json[QString("yesterday")]);
    m_yesterday_isSet = !json[QString("yesterday")].isNull() && m_yesterday_isValid;
}

QString OAIGet_fw_leaderboards_kills::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIGet_fw_leaderboards_kills::asJsonObject() const {
    QJsonObject obj;
    if (m_active_total.size() > 0) {
        obj.insert(QString("active_total"), ::OpenAPI::toJsonValue(m_active_total));
    }
    if (m_last_week.size() > 0) {
        obj.insert(QString("last_week"), ::OpenAPI::toJsonValue(m_last_week));
    }
    if (m_yesterday.size() > 0) {
        obj.insert(QString("yesterday"), ::OpenAPI::toJsonValue(m_yesterday));
    }
    return obj;
}

QList<OAIGet_fw_leaderboards_active_total_active_total> OAIGet_fw_leaderboards_kills::getActiveTotal() const {
    return m_active_total;
}
void OAIGet_fw_leaderboards_kills::setActiveTotal(const QList<OAIGet_fw_leaderboards_active_total_active_total> &active_total) {
    m_active_total = active_total;
    m_active_total_isSet = true;
}

bool OAIGet_fw_leaderboards_kills::is_active_total_Set() const{
    return m_active_total_isSet;
}

bool OAIGet_fw_leaderboards_kills::is_active_total_Valid() const{
    return m_active_total_isValid;
}

QList<OAIGet_fw_leaderboards_last_week_last_week> OAIGet_fw_leaderboards_kills::getLastWeek() const {
    return m_last_week;
}
void OAIGet_fw_leaderboards_kills::setLastWeek(const QList<OAIGet_fw_leaderboards_last_week_last_week> &last_week) {
    m_last_week = last_week;
    m_last_week_isSet = true;
}

bool OAIGet_fw_leaderboards_kills::is_last_week_Set() const{
    return m_last_week_isSet;
}

bool OAIGet_fw_leaderboards_kills::is_last_week_Valid() const{
    return m_last_week_isValid;
}

QList<OAIGet_fw_leaderboards_yesterday_yesterday> OAIGet_fw_leaderboards_kills::getYesterday() const {
    return m_yesterday;
}
void OAIGet_fw_leaderboards_kills::setYesterday(const QList<OAIGet_fw_leaderboards_yesterday_yesterday> &yesterday) {
    m_yesterday = yesterday;
    m_yesterday_isSet = true;
}

bool OAIGet_fw_leaderboards_kills::is_yesterday_Set() const{
    return m_yesterday_isSet;
}

bool OAIGet_fw_leaderboards_kills::is_yesterday_Valid() const{
    return m_yesterday_isValid;
}

bool OAIGet_fw_leaderboards_kills::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_active_total.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_last_week.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_yesterday.size() > 0) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIGet_fw_leaderboards_kills::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_active_total_isValid && m_last_week_isValid && m_yesterday_isValid && true;
}

} // namespace OpenAPI
