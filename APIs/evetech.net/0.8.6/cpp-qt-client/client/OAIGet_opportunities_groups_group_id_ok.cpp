/**
 * EVE Swagger Interface
 * An OpenAPI for EVE Online
 *
 * The version of the OpenAPI document: 0.8.6
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIGet_opportunities_groups_group_id_ok.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIGet_opportunities_groups_group_id_ok::OAIGet_opportunities_groups_group_id_ok(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIGet_opportunities_groups_group_id_ok::OAIGet_opportunities_groups_group_id_ok() {
    this->initializeModel();
}

OAIGet_opportunities_groups_group_id_ok::~OAIGet_opportunities_groups_group_id_ok() {}

void OAIGet_opportunities_groups_group_id_ok::initializeModel() {

    m_connected_groups_isSet = false;
    m_connected_groups_isValid = false;

    m_description_isSet = false;
    m_description_isValid = false;

    m_group_id_isSet = false;
    m_group_id_isValid = false;

    m_name_isSet = false;
    m_name_isValid = false;

    m_notification_isSet = false;
    m_notification_isValid = false;

    m_required_tasks_isSet = false;
    m_required_tasks_isValid = false;
}

void OAIGet_opportunities_groups_group_id_ok::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIGet_opportunities_groups_group_id_ok::fromJsonObject(QJsonObject json) {

    m_connected_groups_isValid = ::OpenAPI::fromJsonValue(m_connected_groups, json[QString("connected_groups")]);
    m_connected_groups_isSet = !json[QString("connected_groups")].isNull() && m_connected_groups_isValid;

    m_description_isValid = ::OpenAPI::fromJsonValue(m_description, json[QString("description")]);
    m_description_isSet = !json[QString("description")].isNull() && m_description_isValid;

    m_group_id_isValid = ::OpenAPI::fromJsonValue(m_group_id, json[QString("group_id")]);
    m_group_id_isSet = !json[QString("group_id")].isNull() && m_group_id_isValid;

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("name")]);
    m_name_isSet = !json[QString("name")].isNull() && m_name_isValid;

    m_notification_isValid = ::OpenAPI::fromJsonValue(m_notification, json[QString("notification")]);
    m_notification_isSet = !json[QString("notification")].isNull() && m_notification_isValid;

    m_required_tasks_isValid = ::OpenAPI::fromJsonValue(m_required_tasks, json[QString("required_tasks")]);
    m_required_tasks_isSet = !json[QString("required_tasks")].isNull() && m_required_tasks_isValid;
}

QString OAIGet_opportunities_groups_group_id_ok::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIGet_opportunities_groups_group_id_ok::asJsonObject() const {
    QJsonObject obj;
    if (m_connected_groups.size() > 0) {
        obj.insert(QString("connected_groups"), ::OpenAPI::toJsonValue(m_connected_groups));
    }
    if (m_description_isSet) {
        obj.insert(QString("description"), ::OpenAPI::toJsonValue(m_description));
    }
    if (m_group_id_isSet) {
        obj.insert(QString("group_id"), ::OpenAPI::toJsonValue(m_group_id));
    }
    if (m_name_isSet) {
        obj.insert(QString("name"), ::OpenAPI::toJsonValue(m_name));
    }
    if (m_notification_isSet) {
        obj.insert(QString("notification"), ::OpenAPI::toJsonValue(m_notification));
    }
    if (m_required_tasks.size() > 0) {
        obj.insert(QString("required_tasks"), ::OpenAPI::toJsonValue(m_required_tasks));
    }
    return obj;
}

QList<qint32> OAIGet_opportunities_groups_group_id_ok::getConnectedGroups() const {
    return m_connected_groups;
}
void OAIGet_opportunities_groups_group_id_ok::setConnectedGroups(const QList<qint32> &connected_groups) {
    m_connected_groups = connected_groups;
    m_connected_groups_isSet = true;
}

bool OAIGet_opportunities_groups_group_id_ok::is_connected_groups_Set() const{
    return m_connected_groups_isSet;
}

bool OAIGet_opportunities_groups_group_id_ok::is_connected_groups_Valid() const{
    return m_connected_groups_isValid;
}

QString OAIGet_opportunities_groups_group_id_ok::getDescription() const {
    return m_description;
}
void OAIGet_opportunities_groups_group_id_ok::setDescription(const QString &description) {
    m_description = description;
    m_description_isSet = true;
}

bool OAIGet_opportunities_groups_group_id_ok::is_description_Set() const{
    return m_description_isSet;
}

bool OAIGet_opportunities_groups_group_id_ok::is_description_Valid() const{
    return m_description_isValid;
}

qint32 OAIGet_opportunities_groups_group_id_ok::getGroupId() const {
    return m_group_id;
}
void OAIGet_opportunities_groups_group_id_ok::setGroupId(const qint32 &group_id) {
    m_group_id = group_id;
    m_group_id_isSet = true;
}

bool OAIGet_opportunities_groups_group_id_ok::is_group_id_Set() const{
    return m_group_id_isSet;
}

bool OAIGet_opportunities_groups_group_id_ok::is_group_id_Valid() const{
    return m_group_id_isValid;
}

QString OAIGet_opportunities_groups_group_id_ok::getName() const {
    return m_name;
}
void OAIGet_opportunities_groups_group_id_ok::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAIGet_opportunities_groups_group_id_ok::is_name_Set() const{
    return m_name_isSet;
}

bool OAIGet_opportunities_groups_group_id_ok::is_name_Valid() const{
    return m_name_isValid;
}

QString OAIGet_opportunities_groups_group_id_ok::getNotification() const {
    return m_notification;
}
void OAIGet_opportunities_groups_group_id_ok::setNotification(const QString &notification) {
    m_notification = notification;
    m_notification_isSet = true;
}

bool OAIGet_opportunities_groups_group_id_ok::is_notification_Set() const{
    return m_notification_isSet;
}

bool OAIGet_opportunities_groups_group_id_ok::is_notification_Valid() const{
    return m_notification_isValid;
}

QList<qint32> OAIGet_opportunities_groups_group_id_ok::getRequiredTasks() const {
    return m_required_tasks;
}
void OAIGet_opportunities_groups_group_id_ok::setRequiredTasks(const QList<qint32> &required_tasks) {
    m_required_tasks = required_tasks;
    m_required_tasks_isSet = true;
}

bool OAIGet_opportunities_groups_group_id_ok::is_required_tasks_Set() const{
    return m_required_tasks_isSet;
}

bool OAIGet_opportunities_groups_group_id_ok::is_required_tasks_Valid() const{
    return m_required_tasks_isValid;
}

bool OAIGet_opportunities_groups_group_id_ok::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_connected_groups.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_description_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_group_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_notification_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_required_tasks.size() > 0) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIGet_opportunities_groups_group_id_ok::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_connected_groups_isValid && m_description_isValid && m_group_id_isValid && m_name_isValid && m_notification_isValid && m_required_tasks_isValid && true;
}

} // namespace OpenAPI
