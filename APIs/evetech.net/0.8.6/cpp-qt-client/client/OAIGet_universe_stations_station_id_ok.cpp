/**
 * EVE Swagger Interface
 * An OpenAPI for EVE Online
 *
 * The version of the OpenAPI document: 0.8.6
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIGet_universe_stations_station_id_ok.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIGet_universe_stations_station_id_ok::OAIGet_universe_stations_station_id_ok(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIGet_universe_stations_station_id_ok::OAIGet_universe_stations_station_id_ok() {
    this->initializeModel();
}

OAIGet_universe_stations_station_id_ok::~OAIGet_universe_stations_station_id_ok() {}

void OAIGet_universe_stations_station_id_ok::initializeModel() {

    m_max_dockable_ship_volume_isSet = false;
    m_max_dockable_ship_volume_isValid = false;

    m_name_isSet = false;
    m_name_isValid = false;

    m_office_rental_cost_isSet = false;
    m_office_rental_cost_isValid = false;

    m_owner_isSet = false;
    m_owner_isValid = false;

    m_position_isSet = false;
    m_position_isValid = false;

    m_race_id_isSet = false;
    m_race_id_isValid = false;

    m_reprocessing_efficiency_isSet = false;
    m_reprocessing_efficiency_isValid = false;

    m_reprocessing_stations_take_isSet = false;
    m_reprocessing_stations_take_isValid = false;

    m_services_isSet = false;
    m_services_isValid = false;

    m_station_id_isSet = false;
    m_station_id_isValid = false;

    m_system_id_isSet = false;
    m_system_id_isValid = false;

    m_type_id_isSet = false;
    m_type_id_isValid = false;
}

void OAIGet_universe_stations_station_id_ok::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIGet_universe_stations_station_id_ok::fromJsonObject(QJsonObject json) {

    m_max_dockable_ship_volume_isValid = ::OpenAPI::fromJsonValue(m_max_dockable_ship_volume, json[QString("max_dockable_ship_volume")]);
    m_max_dockable_ship_volume_isSet = !json[QString("max_dockable_ship_volume")].isNull() && m_max_dockable_ship_volume_isValid;

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("name")]);
    m_name_isSet = !json[QString("name")].isNull() && m_name_isValid;

    m_office_rental_cost_isValid = ::OpenAPI::fromJsonValue(m_office_rental_cost, json[QString("office_rental_cost")]);
    m_office_rental_cost_isSet = !json[QString("office_rental_cost")].isNull() && m_office_rental_cost_isValid;

    m_owner_isValid = ::OpenAPI::fromJsonValue(m_owner, json[QString("owner")]);
    m_owner_isSet = !json[QString("owner")].isNull() && m_owner_isValid;

    m_position_isValid = ::OpenAPI::fromJsonValue(m_position, json[QString("position")]);
    m_position_isSet = !json[QString("position")].isNull() && m_position_isValid;

    m_race_id_isValid = ::OpenAPI::fromJsonValue(m_race_id, json[QString("race_id")]);
    m_race_id_isSet = !json[QString("race_id")].isNull() && m_race_id_isValid;

    m_reprocessing_efficiency_isValid = ::OpenAPI::fromJsonValue(m_reprocessing_efficiency, json[QString("reprocessing_efficiency")]);
    m_reprocessing_efficiency_isSet = !json[QString("reprocessing_efficiency")].isNull() && m_reprocessing_efficiency_isValid;

    m_reprocessing_stations_take_isValid = ::OpenAPI::fromJsonValue(m_reprocessing_stations_take, json[QString("reprocessing_stations_take")]);
    m_reprocessing_stations_take_isSet = !json[QString("reprocessing_stations_take")].isNull() && m_reprocessing_stations_take_isValid;

    m_services_isValid = ::OpenAPI::fromJsonValue(m_services, json[QString("services")]);
    m_services_isSet = !json[QString("services")].isNull() && m_services_isValid;

    m_station_id_isValid = ::OpenAPI::fromJsonValue(m_station_id, json[QString("station_id")]);
    m_station_id_isSet = !json[QString("station_id")].isNull() && m_station_id_isValid;

    m_system_id_isValid = ::OpenAPI::fromJsonValue(m_system_id, json[QString("system_id")]);
    m_system_id_isSet = !json[QString("system_id")].isNull() && m_system_id_isValid;

    m_type_id_isValid = ::OpenAPI::fromJsonValue(m_type_id, json[QString("type_id")]);
    m_type_id_isSet = !json[QString("type_id")].isNull() && m_type_id_isValid;
}

QString OAIGet_universe_stations_station_id_ok::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIGet_universe_stations_station_id_ok::asJsonObject() const {
    QJsonObject obj;
    if (m_max_dockable_ship_volume_isSet) {
        obj.insert(QString("max_dockable_ship_volume"), ::OpenAPI::toJsonValue(m_max_dockable_ship_volume));
    }
    if (m_name_isSet) {
        obj.insert(QString("name"), ::OpenAPI::toJsonValue(m_name));
    }
    if (m_office_rental_cost_isSet) {
        obj.insert(QString("office_rental_cost"), ::OpenAPI::toJsonValue(m_office_rental_cost));
    }
    if (m_owner_isSet) {
        obj.insert(QString("owner"), ::OpenAPI::toJsonValue(m_owner));
    }
    if (m_position.isSet()) {
        obj.insert(QString("position"), ::OpenAPI::toJsonValue(m_position));
    }
    if (m_race_id_isSet) {
        obj.insert(QString("race_id"), ::OpenAPI::toJsonValue(m_race_id));
    }
    if (m_reprocessing_efficiency_isSet) {
        obj.insert(QString("reprocessing_efficiency"), ::OpenAPI::toJsonValue(m_reprocessing_efficiency));
    }
    if (m_reprocessing_stations_take_isSet) {
        obj.insert(QString("reprocessing_stations_take"), ::OpenAPI::toJsonValue(m_reprocessing_stations_take));
    }
    if (m_services.size() > 0) {
        obj.insert(QString("services"), ::OpenAPI::toJsonValue(m_services));
    }
    if (m_station_id_isSet) {
        obj.insert(QString("station_id"), ::OpenAPI::toJsonValue(m_station_id));
    }
    if (m_system_id_isSet) {
        obj.insert(QString("system_id"), ::OpenAPI::toJsonValue(m_system_id));
    }
    if (m_type_id_isSet) {
        obj.insert(QString("type_id"), ::OpenAPI::toJsonValue(m_type_id));
    }
    return obj;
}

float OAIGet_universe_stations_station_id_ok::getMaxDockableShipVolume() const {
    return m_max_dockable_ship_volume;
}
void OAIGet_universe_stations_station_id_ok::setMaxDockableShipVolume(const float &max_dockable_ship_volume) {
    m_max_dockable_ship_volume = max_dockable_ship_volume;
    m_max_dockable_ship_volume_isSet = true;
}

bool OAIGet_universe_stations_station_id_ok::is_max_dockable_ship_volume_Set() const{
    return m_max_dockable_ship_volume_isSet;
}

bool OAIGet_universe_stations_station_id_ok::is_max_dockable_ship_volume_Valid() const{
    return m_max_dockable_ship_volume_isValid;
}

QString OAIGet_universe_stations_station_id_ok::getName() const {
    return m_name;
}
void OAIGet_universe_stations_station_id_ok::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAIGet_universe_stations_station_id_ok::is_name_Set() const{
    return m_name_isSet;
}

bool OAIGet_universe_stations_station_id_ok::is_name_Valid() const{
    return m_name_isValid;
}

float OAIGet_universe_stations_station_id_ok::getOfficeRentalCost() const {
    return m_office_rental_cost;
}
void OAIGet_universe_stations_station_id_ok::setOfficeRentalCost(const float &office_rental_cost) {
    m_office_rental_cost = office_rental_cost;
    m_office_rental_cost_isSet = true;
}

bool OAIGet_universe_stations_station_id_ok::is_office_rental_cost_Set() const{
    return m_office_rental_cost_isSet;
}

bool OAIGet_universe_stations_station_id_ok::is_office_rental_cost_Valid() const{
    return m_office_rental_cost_isValid;
}

qint32 OAIGet_universe_stations_station_id_ok::getOwner() const {
    return m_owner;
}
void OAIGet_universe_stations_station_id_ok::setOwner(const qint32 &owner) {
    m_owner = owner;
    m_owner_isSet = true;
}

bool OAIGet_universe_stations_station_id_ok::is_owner_Set() const{
    return m_owner_isSet;
}

bool OAIGet_universe_stations_station_id_ok::is_owner_Valid() const{
    return m_owner_isValid;
}

OAIGet_universe_stations_station_id_position OAIGet_universe_stations_station_id_ok::getPosition() const {
    return m_position;
}
void OAIGet_universe_stations_station_id_ok::setPosition(const OAIGet_universe_stations_station_id_position &position) {
    m_position = position;
    m_position_isSet = true;
}

bool OAIGet_universe_stations_station_id_ok::is_position_Set() const{
    return m_position_isSet;
}

bool OAIGet_universe_stations_station_id_ok::is_position_Valid() const{
    return m_position_isValid;
}

qint32 OAIGet_universe_stations_station_id_ok::getRaceId() const {
    return m_race_id;
}
void OAIGet_universe_stations_station_id_ok::setRaceId(const qint32 &race_id) {
    m_race_id = race_id;
    m_race_id_isSet = true;
}

bool OAIGet_universe_stations_station_id_ok::is_race_id_Set() const{
    return m_race_id_isSet;
}

bool OAIGet_universe_stations_station_id_ok::is_race_id_Valid() const{
    return m_race_id_isValid;
}

float OAIGet_universe_stations_station_id_ok::getReprocessingEfficiency() const {
    return m_reprocessing_efficiency;
}
void OAIGet_universe_stations_station_id_ok::setReprocessingEfficiency(const float &reprocessing_efficiency) {
    m_reprocessing_efficiency = reprocessing_efficiency;
    m_reprocessing_efficiency_isSet = true;
}

bool OAIGet_universe_stations_station_id_ok::is_reprocessing_efficiency_Set() const{
    return m_reprocessing_efficiency_isSet;
}

bool OAIGet_universe_stations_station_id_ok::is_reprocessing_efficiency_Valid() const{
    return m_reprocessing_efficiency_isValid;
}

float OAIGet_universe_stations_station_id_ok::getReprocessingStationsTake() const {
    return m_reprocessing_stations_take;
}
void OAIGet_universe_stations_station_id_ok::setReprocessingStationsTake(const float &reprocessing_stations_take) {
    m_reprocessing_stations_take = reprocessing_stations_take;
    m_reprocessing_stations_take_isSet = true;
}

bool OAIGet_universe_stations_station_id_ok::is_reprocessing_stations_take_Set() const{
    return m_reprocessing_stations_take_isSet;
}

bool OAIGet_universe_stations_station_id_ok::is_reprocessing_stations_take_Valid() const{
    return m_reprocessing_stations_take_isValid;
}

QList<QString> OAIGet_universe_stations_station_id_ok::getServices() const {
    return m_services;
}
void OAIGet_universe_stations_station_id_ok::setServices(const QList<QString> &services) {
    m_services = services;
    m_services_isSet = true;
}

bool OAIGet_universe_stations_station_id_ok::is_services_Set() const{
    return m_services_isSet;
}

bool OAIGet_universe_stations_station_id_ok::is_services_Valid() const{
    return m_services_isValid;
}

qint32 OAIGet_universe_stations_station_id_ok::getStationId() const {
    return m_station_id;
}
void OAIGet_universe_stations_station_id_ok::setStationId(const qint32 &station_id) {
    m_station_id = station_id;
    m_station_id_isSet = true;
}

bool OAIGet_universe_stations_station_id_ok::is_station_id_Set() const{
    return m_station_id_isSet;
}

bool OAIGet_universe_stations_station_id_ok::is_station_id_Valid() const{
    return m_station_id_isValid;
}

qint32 OAIGet_universe_stations_station_id_ok::getSystemId() const {
    return m_system_id;
}
void OAIGet_universe_stations_station_id_ok::setSystemId(const qint32 &system_id) {
    m_system_id = system_id;
    m_system_id_isSet = true;
}

bool OAIGet_universe_stations_station_id_ok::is_system_id_Set() const{
    return m_system_id_isSet;
}

bool OAIGet_universe_stations_station_id_ok::is_system_id_Valid() const{
    return m_system_id_isValid;
}

qint32 OAIGet_universe_stations_station_id_ok::getTypeId() const {
    return m_type_id;
}
void OAIGet_universe_stations_station_id_ok::setTypeId(const qint32 &type_id) {
    m_type_id = type_id;
    m_type_id_isSet = true;
}

bool OAIGet_universe_stations_station_id_ok::is_type_id_Set() const{
    return m_type_id_isSet;
}

bool OAIGet_universe_stations_station_id_ok::is_type_id_Valid() const{
    return m_type_id_isValid;
}

bool OAIGet_universe_stations_station_id_ok::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_max_dockable_ship_volume_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_office_rental_cost_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_owner_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_position.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_race_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_reprocessing_efficiency_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_reprocessing_stations_take_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_services.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_station_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_system_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_type_id_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIGet_universe_stations_station_id_ok::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_max_dockable_ship_volume_isValid && m_name_isValid && m_office_rental_cost_isValid && m_position_isValid && m_reprocessing_efficiency_isValid && m_reprocessing_stations_take_isValid && m_services_isValid && m_station_id_isValid && m_system_id_isValid && m_type_id_isValid && true;
}

} // namespace OpenAPI
