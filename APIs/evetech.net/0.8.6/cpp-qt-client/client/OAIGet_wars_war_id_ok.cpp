/**
 * EVE Swagger Interface
 * An OpenAPI for EVE Online
 *
 * The version of the OpenAPI document: 0.8.6
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIGet_wars_war_id_ok.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIGet_wars_war_id_ok::OAIGet_wars_war_id_ok(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIGet_wars_war_id_ok::OAIGet_wars_war_id_ok() {
    this->initializeModel();
}

OAIGet_wars_war_id_ok::~OAIGet_wars_war_id_ok() {}

void OAIGet_wars_war_id_ok::initializeModel() {

    m_aggressor_isSet = false;
    m_aggressor_isValid = false;

    m_allies_isSet = false;
    m_allies_isValid = false;

    m_declared_isSet = false;
    m_declared_isValid = false;

    m_defender_isSet = false;
    m_defender_isValid = false;

    m_finished_isSet = false;
    m_finished_isValid = false;

    m_id_isSet = false;
    m_id_isValid = false;

    m_mutual_isSet = false;
    m_mutual_isValid = false;

    m_open_for_allies_isSet = false;
    m_open_for_allies_isValid = false;

    m_retracted_isSet = false;
    m_retracted_isValid = false;

    m_started_isSet = false;
    m_started_isValid = false;
}

void OAIGet_wars_war_id_ok::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIGet_wars_war_id_ok::fromJsonObject(QJsonObject json) {

    m_aggressor_isValid = ::OpenAPI::fromJsonValue(m_aggressor, json[QString("aggressor")]);
    m_aggressor_isSet = !json[QString("aggressor")].isNull() && m_aggressor_isValid;

    m_allies_isValid = ::OpenAPI::fromJsonValue(m_allies, json[QString("allies")]);
    m_allies_isSet = !json[QString("allies")].isNull() && m_allies_isValid;

    m_declared_isValid = ::OpenAPI::fromJsonValue(m_declared, json[QString("declared")]);
    m_declared_isSet = !json[QString("declared")].isNull() && m_declared_isValid;

    m_defender_isValid = ::OpenAPI::fromJsonValue(m_defender, json[QString("defender")]);
    m_defender_isSet = !json[QString("defender")].isNull() && m_defender_isValid;

    m_finished_isValid = ::OpenAPI::fromJsonValue(m_finished, json[QString("finished")]);
    m_finished_isSet = !json[QString("finished")].isNull() && m_finished_isValid;

    m_id_isValid = ::OpenAPI::fromJsonValue(m_id, json[QString("id")]);
    m_id_isSet = !json[QString("id")].isNull() && m_id_isValid;

    m_mutual_isValid = ::OpenAPI::fromJsonValue(m_mutual, json[QString("mutual")]);
    m_mutual_isSet = !json[QString("mutual")].isNull() && m_mutual_isValid;

    m_open_for_allies_isValid = ::OpenAPI::fromJsonValue(m_open_for_allies, json[QString("open_for_allies")]);
    m_open_for_allies_isSet = !json[QString("open_for_allies")].isNull() && m_open_for_allies_isValid;

    m_retracted_isValid = ::OpenAPI::fromJsonValue(m_retracted, json[QString("retracted")]);
    m_retracted_isSet = !json[QString("retracted")].isNull() && m_retracted_isValid;

    m_started_isValid = ::OpenAPI::fromJsonValue(m_started, json[QString("started")]);
    m_started_isSet = !json[QString("started")].isNull() && m_started_isValid;
}

QString OAIGet_wars_war_id_ok::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIGet_wars_war_id_ok::asJsonObject() const {
    QJsonObject obj;
    if (m_aggressor.isSet()) {
        obj.insert(QString("aggressor"), ::OpenAPI::toJsonValue(m_aggressor));
    }
    if (m_allies.size() > 0) {
        obj.insert(QString("allies"), ::OpenAPI::toJsonValue(m_allies));
    }
    if (m_declared_isSet) {
        obj.insert(QString("declared"), ::OpenAPI::toJsonValue(m_declared));
    }
    if (m_defender.isSet()) {
        obj.insert(QString("defender"), ::OpenAPI::toJsonValue(m_defender));
    }
    if (m_finished_isSet) {
        obj.insert(QString("finished"), ::OpenAPI::toJsonValue(m_finished));
    }
    if (m_id_isSet) {
        obj.insert(QString("id"), ::OpenAPI::toJsonValue(m_id));
    }
    if (m_mutual_isSet) {
        obj.insert(QString("mutual"), ::OpenAPI::toJsonValue(m_mutual));
    }
    if (m_open_for_allies_isSet) {
        obj.insert(QString("open_for_allies"), ::OpenAPI::toJsonValue(m_open_for_allies));
    }
    if (m_retracted_isSet) {
        obj.insert(QString("retracted"), ::OpenAPI::toJsonValue(m_retracted));
    }
    if (m_started_isSet) {
        obj.insert(QString("started"), ::OpenAPI::toJsonValue(m_started));
    }
    return obj;
}

OAIGet_wars_war_id_aggressor OAIGet_wars_war_id_ok::getAggressor() const {
    return m_aggressor;
}
void OAIGet_wars_war_id_ok::setAggressor(const OAIGet_wars_war_id_aggressor &aggressor) {
    m_aggressor = aggressor;
    m_aggressor_isSet = true;
}

bool OAIGet_wars_war_id_ok::is_aggressor_Set() const{
    return m_aggressor_isSet;
}

bool OAIGet_wars_war_id_ok::is_aggressor_Valid() const{
    return m_aggressor_isValid;
}

QList<OAIGet_wars_war_id_ally> OAIGet_wars_war_id_ok::getAllies() const {
    return m_allies;
}
void OAIGet_wars_war_id_ok::setAllies(const QList<OAIGet_wars_war_id_ally> &allies) {
    m_allies = allies;
    m_allies_isSet = true;
}

bool OAIGet_wars_war_id_ok::is_allies_Set() const{
    return m_allies_isSet;
}

bool OAIGet_wars_war_id_ok::is_allies_Valid() const{
    return m_allies_isValid;
}

QDateTime OAIGet_wars_war_id_ok::getDeclared() const {
    return m_declared;
}
void OAIGet_wars_war_id_ok::setDeclared(const QDateTime &declared) {
    m_declared = declared;
    m_declared_isSet = true;
}

bool OAIGet_wars_war_id_ok::is_declared_Set() const{
    return m_declared_isSet;
}

bool OAIGet_wars_war_id_ok::is_declared_Valid() const{
    return m_declared_isValid;
}

OAIGet_wars_war_id_defender OAIGet_wars_war_id_ok::getDefender() const {
    return m_defender;
}
void OAIGet_wars_war_id_ok::setDefender(const OAIGet_wars_war_id_defender &defender) {
    m_defender = defender;
    m_defender_isSet = true;
}

bool OAIGet_wars_war_id_ok::is_defender_Set() const{
    return m_defender_isSet;
}

bool OAIGet_wars_war_id_ok::is_defender_Valid() const{
    return m_defender_isValid;
}

QDateTime OAIGet_wars_war_id_ok::getFinished() const {
    return m_finished;
}
void OAIGet_wars_war_id_ok::setFinished(const QDateTime &finished) {
    m_finished = finished;
    m_finished_isSet = true;
}

bool OAIGet_wars_war_id_ok::is_finished_Set() const{
    return m_finished_isSet;
}

bool OAIGet_wars_war_id_ok::is_finished_Valid() const{
    return m_finished_isValid;
}

qint32 OAIGet_wars_war_id_ok::getId() const {
    return m_id;
}
void OAIGet_wars_war_id_ok::setId(const qint32 &id) {
    m_id = id;
    m_id_isSet = true;
}

bool OAIGet_wars_war_id_ok::is_id_Set() const{
    return m_id_isSet;
}

bool OAIGet_wars_war_id_ok::is_id_Valid() const{
    return m_id_isValid;
}

bool OAIGet_wars_war_id_ok::isMutual() const {
    return m_mutual;
}
void OAIGet_wars_war_id_ok::setMutual(const bool &mutual) {
    m_mutual = mutual;
    m_mutual_isSet = true;
}

bool OAIGet_wars_war_id_ok::is_mutual_Set() const{
    return m_mutual_isSet;
}

bool OAIGet_wars_war_id_ok::is_mutual_Valid() const{
    return m_mutual_isValid;
}

bool OAIGet_wars_war_id_ok::isOpenForAllies() const {
    return m_open_for_allies;
}
void OAIGet_wars_war_id_ok::setOpenForAllies(const bool &open_for_allies) {
    m_open_for_allies = open_for_allies;
    m_open_for_allies_isSet = true;
}

bool OAIGet_wars_war_id_ok::is_open_for_allies_Set() const{
    return m_open_for_allies_isSet;
}

bool OAIGet_wars_war_id_ok::is_open_for_allies_Valid() const{
    return m_open_for_allies_isValid;
}

QDateTime OAIGet_wars_war_id_ok::getRetracted() const {
    return m_retracted;
}
void OAIGet_wars_war_id_ok::setRetracted(const QDateTime &retracted) {
    m_retracted = retracted;
    m_retracted_isSet = true;
}

bool OAIGet_wars_war_id_ok::is_retracted_Set() const{
    return m_retracted_isSet;
}

bool OAIGet_wars_war_id_ok::is_retracted_Valid() const{
    return m_retracted_isValid;
}

QDateTime OAIGet_wars_war_id_ok::getStarted() const {
    return m_started;
}
void OAIGet_wars_war_id_ok::setStarted(const QDateTime &started) {
    m_started = started;
    m_started_isSet = true;
}

bool OAIGet_wars_war_id_ok::is_started_Set() const{
    return m_started_isSet;
}

bool OAIGet_wars_war_id_ok::is_started_Valid() const{
    return m_started_isValid;
}

bool OAIGet_wars_war_id_ok::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_aggressor.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_allies.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_declared_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_defender.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_finished_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_mutual_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_open_for_allies_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_retracted_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_started_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIGet_wars_war_id_ok::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_aggressor_isValid && m_declared_isValid && m_defender_isValid && m_id_isValid && m_mutual_isValid && m_open_for_allies_isValid && true;
}

} // namespace OpenAPI
