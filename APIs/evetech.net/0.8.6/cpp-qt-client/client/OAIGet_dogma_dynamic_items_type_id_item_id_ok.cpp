/**
 * EVE Swagger Interface
 * An OpenAPI for EVE Online
 *
 * The version of the OpenAPI document: 0.8.6
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIGet_dogma_dynamic_items_type_id_item_id_ok.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIGet_dogma_dynamic_items_type_id_item_id_ok::OAIGet_dogma_dynamic_items_type_id_item_id_ok(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIGet_dogma_dynamic_items_type_id_item_id_ok::OAIGet_dogma_dynamic_items_type_id_item_id_ok() {
    this->initializeModel();
}

OAIGet_dogma_dynamic_items_type_id_item_id_ok::~OAIGet_dogma_dynamic_items_type_id_item_id_ok() {}

void OAIGet_dogma_dynamic_items_type_id_item_id_ok::initializeModel() {

    m_created_by_isSet = false;
    m_created_by_isValid = false;

    m_dogma_attributes_isSet = false;
    m_dogma_attributes_isValid = false;

    m_dogma_effects_isSet = false;
    m_dogma_effects_isValid = false;

    m_mutator_type_id_isSet = false;
    m_mutator_type_id_isValid = false;

    m_source_type_id_isSet = false;
    m_source_type_id_isValid = false;
}

void OAIGet_dogma_dynamic_items_type_id_item_id_ok::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIGet_dogma_dynamic_items_type_id_item_id_ok::fromJsonObject(QJsonObject json) {

    m_created_by_isValid = ::OpenAPI::fromJsonValue(m_created_by, json[QString("created_by")]);
    m_created_by_isSet = !json[QString("created_by")].isNull() && m_created_by_isValid;

    m_dogma_attributes_isValid = ::OpenAPI::fromJsonValue(m_dogma_attributes, json[QString("dogma_attributes")]);
    m_dogma_attributes_isSet = !json[QString("dogma_attributes")].isNull() && m_dogma_attributes_isValid;

    m_dogma_effects_isValid = ::OpenAPI::fromJsonValue(m_dogma_effects, json[QString("dogma_effects")]);
    m_dogma_effects_isSet = !json[QString("dogma_effects")].isNull() && m_dogma_effects_isValid;

    m_mutator_type_id_isValid = ::OpenAPI::fromJsonValue(m_mutator_type_id, json[QString("mutator_type_id")]);
    m_mutator_type_id_isSet = !json[QString("mutator_type_id")].isNull() && m_mutator_type_id_isValid;

    m_source_type_id_isValid = ::OpenAPI::fromJsonValue(m_source_type_id, json[QString("source_type_id")]);
    m_source_type_id_isSet = !json[QString("source_type_id")].isNull() && m_source_type_id_isValid;
}

QString OAIGet_dogma_dynamic_items_type_id_item_id_ok::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIGet_dogma_dynamic_items_type_id_item_id_ok::asJsonObject() const {
    QJsonObject obj;
    if (m_created_by_isSet) {
        obj.insert(QString("created_by"), ::OpenAPI::toJsonValue(m_created_by));
    }
    if (m_dogma_attributes.size() > 0) {
        obj.insert(QString("dogma_attributes"), ::OpenAPI::toJsonValue(m_dogma_attributes));
    }
    if (m_dogma_effects.size() > 0) {
        obj.insert(QString("dogma_effects"), ::OpenAPI::toJsonValue(m_dogma_effects));
    }
    if (m_mutator_type_id_isSet) {
        obj.insert(QString("mutator_type_id"), ::OpenAPI::toJsonValue(m_mutator_type_id));
    }
    if (m_source_type_id_isSet) {
        obj.insert(QString("source_type_id"), ::OpenAPI::toJsonValue(m_source_type_id));
    }
    return obj;
}

qint32 OAIGet_dogma_dynamic_items_type_id_item_id_ok::getCreatedBy() const {
    return m_created_by;
}
void OAIGet_dogma_dynamic_items_type_id_item_id_ok::setCreatedBy(const qint32 &created_by) {
    m_created_by = created_by;
    m_created_by_isSet = true;
}

bool OAIGet_dogma_dynamic_items_type_id_item_id_ok::is_created_by_Set() const{
    return m_created_by_isSet;
}

bool OAIGet_dogma_dynamic_items_type_id_item_id_ok::is_created_by_Valid() const{
    return m_created_by_isValid;
}

QList<OAIGet_dogma_dynamic_items_type_id_item_id_dogma_attribute> OAIGet_dogma_dynamic_items_type_id_item_id_ok::getDogmaAttributes() const {
    return m_dogma_attributes;
}
void OAIGet_dogma_dynamic_items_type_id_item_id_ok::setDogmaAttributes(const QList<OAIGet_dogma_dynamic_items_type_id_item_id_dogma_attribute> &dogma_attributes) {
    m_dogma_attributes = dogma_attributes;
    m_dogma_attributes_isSet = true;
}

bool OAIGet_dogma_dynamic_items_type_id_item_id_ok::is_dogma_attributes_Set() const{
    return m_dogma_attributes_isSet;
}

bool OAIGet_dogma_dynamic_items_type_id_item_id_ok::is_dogma_attributes_Valid() const{
    return m_dogma_attributes_isValid;
}

QList<OAIGet_dogma_dynamic_items_type_id_item_id_dogma_effect> OAIGet_dogma_dynamic_items_type_id_item_id_ok::getDogmaEffects() const {
    return m_dogma_effects;
}
void OAIGet_dogma_dynamic_items_type_id_item_id_ok::setDogmaEffects(const QList<OAIGet_dogma_dynamic_items_type_id_item_id_dogma_effect> &dogma_effects) {
    m_dogma_effects = dogma_effects;
    m_dogma_effects_isSet = true;
}

bool OAIGet_dogma_dynamic_items_type_id_item_id_ok::is_dogma_effects_Set() const{
    return m_dogma_effects_isSet;
}

bool OAIGet_dogma_dynamic_items_type_id_item_id_ok::is_dogma_effects_Valid() const{
    return m_dogma_effects_isValid;
}

qint32 OAIGet_dogma_dynamic_items_type_id_item_id_ok::getMutatorTypeId() const {
    return m_mutator_type_id;
}
void OAIGet_dogma_dynamic_items_type_id_item_id_ok::setMutatorTypeId(const qint32 &mutator_type_id) {
    m_mutator_type_id = mutator_type_id;
    m_mutator_type_id_isSet = true;
}

bool OAIGet_dogma_dynamic_items_type_id_item_id_ok::is_mutator_type_id_Set() const{
    return m_mutator_type_id_isSet;
}

bool OAIGet_dogma_dynamic_items_type_id_item_id_ok::is_mutator_type_id_Valid() const{
    return m_mutator_type_id_isValid;
}

qint32 OAIGet_dogma_dynamic_items_type_id_item_id_ok::getSourceTypeId() const {
    return m_source_type_id;
}
void OAIGet_dogma_dynamic_items_type_id_item_id_ok::setSourceTypeId(const qint32 &source_type_id) {
    m_source_type_id = source_type_id;
    m_source_type_id_isSet = true;
}

bool OAIGet_dogma_dynamic_items_type_id_item_id_ok::is_source_type_id_Set() const{
    return m_source_type_id_isSet;
}

bool OAIGet_dogma_dynamic_items_type_id_item_id_ok::is_source_type_id_Valid() const{
    return m_source_type_id_isValid;
}

bool OAIGet_dogma_dynamic_items_type_id_item_id_ok::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_created_by_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_dogma_attributes.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_dogma_effects.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_mutator_type_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_source_type_id_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIGet_dogma_dynamic_items_type_id_item_id_ok::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_created_by_isValid && m_dogma_attributes_isValid && m_dogma_effects_isValid && m_mutator_type_id_isValid && m_source_type_id_isValid && true;
}

} // namespace OpenAPI
