/**
 * EVE Swagger Interface
 * An OpenAPI for EVE Online
 *
 * The version of the OpenAPI document: 0.8.6
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIGet_characters_character_id_stats_pve.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIGet_characters_character_id_stats_pve::OAIGet_characters_character_id_stats_pve(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIGet_characters_character_id_stats_pve::OAIGet_characters_character_id_stats_pve() {
    this->initializeModel();
}

OAIGet_characters_character_id_stats_pve::~OAIGet_characters_character_id_stats_pve() {}

void OAIGet_characters_character_id_stats_pve::initializeModel() {

    m_dungeons_completed_agent_isSet = false;
    m_dungeons_completed_agent_isValid = false;

    m_dungeons_completed_distribution_isSet = false;
    m_dungeons_completed_distribution_isValid = false;

    m_missions_succeeded_isSet = false;
    m_missions_succeeded_isValid = false;

    m_missions_succeeded_epic_arc_isSet = false;
    m_missions_succeeded_epic_arc_isValid = false;
}

void OAIGet_characters_character_id_stats_pve::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIGet_characters_character_id_stats_pve::fromJsonObject(QJsonObject json) {

    m_dungeons_completed_agent_isValid = ::OpenAPI::fromJsonValue(m_dungeons_completed_agent, json[QString("dungeons_completed_agent")]);
    m_dungeons_completed_agent_isSet = !json[QString("dungeons_completed_agent")].isNull() && m_dungeons_completed_agent_isValid;

    m_dungeons_completed_distribution_isValid = ::OpenAPI::fromJsonValue(m_dungeons_completed_distribution, json[QString("dungeons_completed_distribution")]);
    m_dungeons_completed_distribution_isSet = !json[QString("dungeons_completed_distribution")].isNull() && m_dungeons_completed_distribution_isValid;

    m_missions_succeeded_isValid = ::OpenAPI::fromJsonValue(m_missions_succeeded, json[QString("missions_succeeded")]);
    m_missions_succeeded_isSet = !json[QString("missions_succeeded")].isNull() && m_missions_succeeded_isValid;

    m_missions_succeeded_epic_arc_isValid = ::OpenAPI::fromJsonValue(m_missions_succeeded_epic_arc, json[QString("missions_succeeded_epic_arc")]);
    m_missions_succeeded_epic_arc_isSet = !json[QString("missions_succeeded_epic_arc")].isNull() && m_missions_succeeded_epic_arc_isValid;
}

QString OAIGet_characters_character_id_stats_pve::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIGet_characters_character_id_stats_pve::asJsonObject() const {
    QJsonObject obj;
    if (m_dungeons_completed_agent_isSet) {
        obj.insert(QString("dungeons_completed_agent"), ::OpenAPI::toJsonValue(m_dungeons_completed_agent));
    }
    if (m_dungeons_completed_distribution_isSet) {
        obj.insert(QString("dungeons_completed_distribution"), ::OpenAPI::toJsonValue(m_dungeons_completed_distribution));
    }
    if (m_missions_succeeded_isSet) {
        obj.insert(QString("missions_succeeded"), ::OpenAPI::toJsonValue(m_missions_succeeded));
    }
    if (m_missions_succeeded_epic_arc_isSet) {
        obj.insert(QString("missions_succeeded_epic_arc"), ::OpenAPI::toJsonValue(m_missions_succeeded_epic_arc));
    }
    return obj;
}

qint64 OAIGet_characters_character_id_stats_pve::getDungeonsCompletedAgent() const {
    return m_dungeons_completed_agent;
}
void OAIGet_characters_character_id_stats_pve::setDungeonsCompletedAgent(const qint64 &dungeons_completed_agent) {
    m_dungeons_completed_agent = dungeons_completed_agent;
    m_dungeons_completed_agent_isSet = true;
}

bool OAIGet_characters_character_id_stats_pve::is_dungeons_completed_agent_Set() const{
    return m_dungeons_completed_agent_isSet;
}

bool OAIGet_characters_character_id_stats_pve::is_dungeons_completed_agent_Valid() const{
    return m_dungeons_completed_agent_isValid;
}

qint64 OAIGet_characters_character_id_stats_pve::getDungeonsCompletedDistribution() const {
    return m_dungeons_completed_distribution;
}
void OAIGet_characters_character_id_stats_pve::setDungeonsCompletedDistribution(const qint64 &dungeons_completed_distribution) {
    m_dungeons_completed_distribution = dungeons_completed_distribution;
    m_dungeons_completed_distribution_isSet = true;
}

bool OAIGet_characters_character_id_stats_pve::is_dungeons_completed_distribution_Set() const{
    return m_dungeons_completed_distribution_isSet;
}

bool OAIGet_characters_character_id_stats_pve::is_dungeons_completed_distribution_Valid() const{
    return m_dungeons_completed_distribution_isValid;
}

qint64 OAIGet_characters_character_id_stats_pve::getMissionsSucceeded() const {
    return m_missions_succeeded;
}
void OAIGet_characters_character_id_stats_pve::setMissionsSucceeded(const qint64 &missions_succeeded) {
    m_missions_succeeded = missions_succeeded;
    m_missions_succeeded_isSet = true;
}

bool OAIGet_characters_character_id_stats_pve::is_missions_succeeded_Set() const{
    return m_missions_succeeded_isSet;
}

bool OAIGet_characters_character_id_stats_pve::is_missions_succeeded_Valid() const{
    return m_missions_succeeded_isValid;
}

qint64 OAIGet_characters_character_id_stats_pve::getMissionsSucceededEpicArc() const {
    return m_missions_succeeded_epic_arc;
}
void OAIGet_characters_character_id_stats_pve::setMissionsSucceededEpicArc(const qint64 &missions_succeeded_epic_arc) {
    m_missions_succeeded_epic_arc = missions_succeeded_epic_arc;
    m_missions_succeeded_epic_arc_isSet = true;
}

bool OAIGet_characters_character_id_stats_pve::is_missions_succeeded_epic_arc_Set() const{
    return m_missions_succeeded_epic_arc_isSet;
}

bool OAIGet_characters_character_id_stats_pve::is_missions_succeeded_epic_arc_Valid() const{
    return m_missions_succeeded_epic_arc_isValid;
}

bool OAIGet_characters_character_id_stats_pve::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_dungeons_completed_agent_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_dungeons_completed_distribution_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_missions_succeeded_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_missions_succeeded_epic_arc_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIGet_characters_character_id_stats_pve::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
