/**
 * EVE Swagger Interface
 * An OpenAPI for EVE Online
 *
 * The version of the OpenAPI document: 0.8.6
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIGet_characters_character_id_clones_ok.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIGet_characters_character_id_clones_ok::OAIGet_characters_character_id_clones_ok(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIGet_characters_character_id_clones_ok::OAIGet_characters_character_id_clones_ok() {
    this->initializeModel();
}

OAIGet_characters_character_id_clones_ok::~OAIGet_characters_character_id_clones_ok() {}

void OAIGet_characters_character_id_clones_ok::initializeModel() {

    m_home_location_isSet = false;
    m_home_location_isValid = false;

    m_jump_clones_isSet = false;
    m_jump_clones_isValid = false;

    m_last_clone_jump_date_isSet = false;
    m_last_clone_jump_date_isValid = false;

    m_last_station_change_date_isSet = false;
    m_last_station_change_date_isValid = false;
}

void OAIGet_characters_character_id_clones_ok::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIGet_characters_character_id_clones_ok::fromJsonObject(QJsonObject json) {

    m_home_location_isValid = ::OpenAPI::fromJsonValue(m_home_location, json[QString("home_location")]);
    m_home_location_isSet = !json[QString("home_location")].isNull() && m_home_location_isValid;

    m_jump_clones_isValid = ::OpenAPI::fromJsonValue(m_jump_clones, json[QString("jump_clones")]);
    m_jump_clones_isSet = !json[QString("jump_clones")].isNull() && m_jump_clones_isValid;

    m_last_clone_jump_date_isValid = ::OpenAPI::fromJsonValue(m_last_clone_jump_date, json[QString("last_clone_jump_date")]);
    m_last_clone_jump_date_isSet = !json[QString("last_clone_jump_date")].isNull() && m_last_clone_jump_date_isValid;

    m_last_station_change_date_isValid = ::OpenAPI::fromJsonValue(m_last_station_change_date, json[QString("last_station_change_date")]);
    m_last_station_change_date_isSet = !json[QString("last_station_change_date")].isNull() && m_last_station_change_date_isValid;
}

QString OAIGet_characters_character_id_clones_ok::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIGet_characters_character_id_clones_ok::asJsonObject() const {
    QJsonObject obj;
    if (m_home_location.isSet()) {
        obj.insert(QString("home_location"), ::OpenAPI::toJsonValue(m_home_location));
    }
    if (m_jump_clones.size() > 0) {
        obj.insert(QString("jump_clones"), ::OpenAPI::toJsonValue(m_jump_clones));
    }
    if (m_last_clone_jump_date_isSet) {
        obj.insert(QString("last_clone_jump_date"), ::OpenAPI::toJsonValue(m_last_clone_jump_date));
    }
    if (m_last_station_change_date_isSet) {
        obj.insert(QString("last_station_change_date"), ::OpenAPI::toJsonValue(m_last_station_change_date));
    }
    return obj;
}

OAIGet_characters_character_id_clones_home_location OAIGet_characters_character_id_clones_ok::getHomeLocation() const {
    return m_home_location;
}
void OAIGet_characters_character_id_clones_ok::setHomeLocation(const OAIGet_characters_character_id_clones_home_location &home_location) {
    m_home_location = home_location;
    m_home_location_isSet = true;
}

bool OAIGet_characters_character_id_clones_ok::is_home_location_Set() const{
    return m_home_location_isSet;
}

bool OAIGet_characters_character_id_clones_ok::is_home_location_Valid() const{
    return m_home_location_isValid;
}

QList<OAIGet_characters_character_id_clones_jump_clone> OAIGet_characters_character_id_clones_ok::getJumpClones() const {
    return m_jump_clones;
}
void OAIGet_characters_character_id_clones_ok::setJumpClones(const QList<OAIGet_characters_character_id_clones_jump_clone> &jump_clones) {
    m_jump_clones = jump_clones;
    m_jump_clones_isSet = true;
}

bool OAIGet_characters_character_id_clones_ok::is_jump_clones_Set() const{
    return m_jump_clones_isSet;
}

bool OAIGet_characters_character_id_clones_ok::is_jump_clones_Valid() const{
    return m_jump_clones_isValid;
}

QDateTime OAIGet_characters_character_id_clones_ok::getLastCloneJumpDate() const {
    return m_last_clone_jump_date;
}
void OAIGet_characters_character_id_clones_ok::setLastCloneJumpDate(const QDateTime &last_clone_jump_date) {
    m_last_clone_jump_date = last_clone_jump_date;
    m_last_clone_jump_date_isSet = true;
}

bool OAIGet_characters_character_id_clones_ok::is_last_clone_jump_date_Set() const{
    return m_last_clone_jump_date_isSet;
}

bool OAIGet_characters_character_id_clones_ok::is_last_clone_jump_date_Valid() const{
    return m_last_clone_jump_date_isValid;
}

QDateTime OAIGet_characters_character_id_clones_ok::getLastStationChangeDate() const {
    return m_last_station_change_date;
}
void OAIGet_characters_character_id_clones_ok::setLastStationChangeDate(const QDateTime &last_station_change_date) {
    m_last_station_change_date = last_station_change_date;
    m_last_station_change_date_isSet = true;
}

bool OAIGet_characters_character_id_clones_ok::is_last_station_change_date_Set() const{
    return m_last_station_change_date_isSet;
}

bool OAIGet_characters_character_id_clones_ok::is_last_station_change_date_Valid() const{
    return m_last_station_change_date_isValid;
}

bool OAIGet_characters_character_id_clones_ok::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_home_location.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_jump_clones.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_last_clone_jump_date_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_last_station_change_date_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIGet_characters_character_id_clones_ok::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_jump_clones_isValid && true;
}

} // namespace OpenAPI
