/**
 * EVE Swagger Interface
 * An OpenAPI for EVE Online
 *
 * The version of the OpenAPI document: 0.8.6
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIGet_universe_stars_star_id_ok.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIGet_universe_stars_star_id_ok::OAIGet_universe_stars_star_id_ok(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIGet_universe_stars_star_id_ok::OAIGet_universe_stars_star_id_ok() {
    this->initializeModel();
}

OAIGet_universe_stars_star_id_ok::~OAIGet_universe_stars_star_id_ok() {}

void OAIGet_universe_stars_star_id_ok::initializeModel() {

    m_age_isSet = false;
    m_age_isValid = false;

    m_luminosity_isSet = false;
    m_luminosity_isValid = false;

    m_name_isSet = false;
    m_name_isValid = false;

    m_radius_isSet = false;
    m_radius_isValid = false;

    m_solar_system_id_isSet = false;
    m_solar_system_id_isValid = false;

    m_spectral_class_isSet = false;
    m_spectral_class_isValid = false;

    m_temperature_isSet = false;
    m_temperature_isValid = false;

    m_type_id_isSet = false;
    m_type_id_isValid = false;
}

void OAIGet_universe_stars_star_id_ok::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIGet_universe_stars_star_id_ok::fromJsonObject(QJsonObject json) {

    m_age_isValid = ::OpenAPI::fromJsonValue(m_age, json[QString("age")]);
    m_age_isSet = !json[QString("age")].isNull() && m_age_isValid;

    m_luminosity_isValid = ::OpenAPI::fromJsonValue(m_luminosity, json[QString("luminosity")]);
    m_luminosity_isSet = !json[QString("luminosity")].isNull() && m_luminosity_isValid;

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("name")]);
    m_name_isSet = !json[QString("name")].isNull() && m_name_isValid;

    m_radius_isValid = ::OpenAPI::fromJsonValue(m_radius, json[QString("radius")]);
    m_radius_isSet = !json[QString("radius")].isNull() && m_radius_isValid;

    m_solar_system_id_isValid = ::OpenAPI::fromJsonValue(m_solar_system_id, json[QString("solar_system_id")]);
    m_solar_system_id_isSet = !json[QString("solar_system_id")].isNull() && m_solar_system_id_isValid;

    m_spectral_class_isValid = ::OpenAPI::fromJsonValue(m_spectral_class, json[QString("spectral_class")]);
    m_spectral_class_isSet = !json[QString("spectral_class")].isNull() && m_spectral_class_isValid;

    m_temperature_isValid = ::OpenAPI::fromJsonValue(m_temperature, json[QString("temperature")]);
    m_temperature_isSet = !json[QString("temperature")].isNull() && m_temperature_isValid;

    m_type_id_isValid = ::OpenAPI::fromJsonValue(m_type_id, json[QString("type_id")]);
    m_type_id_isSet = !json[QString("type_id")].isNull() && m_type_id_isValid;
}

QString OAIGet_universe_stars_star_id_ok::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIGet_universe_stars_star_id_ok::asJsonObject() const {
    QJsonObject obj;
    if (m_age_isSet) {
        obj.insert(QString("age"), ::OpenAPI::toJsonValue(m_age));
    }
    if (m_luminosity_isSet) {
        obj.insert(QString("luminosity"), ::OpenAPI::toJsonValue(m_luminosity));
    }
    if (m_name_isSet) {
        obj.insert(QString("name"), ::OpenAPI::toJsonValue(m_name));
    }
    if (m_radius_isSet) {
        obj.insert(QString("radius"), ::OpenAPI::toJsonValue(m_radius));
    }
    if (m_solar_system_id_isSet) {
        obj.insert(QString("solar_system_id"), ::OpenAPI::toJsonValue(m_solar_system_id));
    }
    if (m_spectral_class_isSet) {
        obj.insert(QString("spectral_class"), ::OpenAPI::toJsonValue(m_spectral_class));
    }
    if (m_temperature_isSet) {
        obj.insert(QString("temperature"), ::OpenAPI::toJsonValue(m_temperature));
    }
    if (m_type_id_isSet) {
        obj.insert(QString("type_id"), ::OpenAPI::toJsonValue(m_type_id));
    }
    return obj;
}

qint64 OAIGet_universe_stars_star_id_ok::getAge() const {
    return m_age;
}
void OAIGet_universe_stars_star_id_ok::setAge(const qint64 &age) {
    m_age = age;
    m_age_isSet = true;
}

bool OAIGet_universe_stars_star_id_ok::is_age_Set() const{
    return m_age_isSet;
}

bool OAIGet_universe_stars_star_id_ok::is_age_Valid() const{
    return m_age_isValid;
}

float OAIGet_universe_stars_star_id_ok::getLuminosity() const {
    return m_luminosity;
}
void OAIGet_universe_stars_star_id_ok::setLuminosity(const float &luminosity) {
    m_luminosity = luminosity;
    m_luminosity_isSet = true;
}

bool OAIGet_universe_stars_star_id_ok::is_luminosity_Set() const{
    return m_luminosity_isSet;
}

bool OAIGet_universe_stars_star_id_ok::is_luminosity_Valid() const{
    return m_luminosity_isValid;
}

QString OAIGet_universe_stars_star_id_ok::getName() const {
    return m_name;
}
void OAIGet_universe_stars_star_id_ok::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAIGet_universe_stars_star_id_ok::is_name_Set() const{
    return m_name_isSet;
}

bool OAIGet_universe_stars_star_id_ok::is_name_Valid() const{
    return m_name_isValid;
}

qint64 OAIGet_universe_stars_star_id_ok::getRadius() const {
    return m_radius;
}
void OAIGet_universe_stars_star_id_ok::setRadius(const qint64 &radius) {
    m_radius = radius;
    m_radius_isSet = true;
}

bool OAIGet_universe_stars_star_id_ok::is_radius_Set() const{
    return m_radius_isSet;
}

bool OAIGet_universe_stars_star_id_ok::is_radius_Valid() const{
    return m_radius_isValid;
}

qint32 OAIGet_universe_stars_star_id_ok::getSolarSystemId() const {
    return m_solar_system_id;
}
void OAIGet_universe_stars_star_id_ok::setSolarSystemId(const qint32 &solar_system_id) {
    m_solar_system_id = solar_system_id;
    m_solar_system_id_isSet = true;
}

bool OAIGet_universe_stars_star_id_ok::is_solar_system_id_Set() const{
    return m_solar_system_id_isSet;
}

bool OAIGet_universe_stars_star_id_ok::is_solar_system_id_Valid() const{
    return m_solar_system_id_isValid;
}

QString OAIGet_universe_stars_star_id_ok::getSpectralClass() const {
    return m_spectral_class;
}
void OAIGet_universe_stars_star_id_ok::setSpectralClass(const QString &spectral_class) {
    m_spectral_class = spectral_class;
    m_spectral_class_isSet = true;
}

bool OAIGet_universe_stars_star_id_ok::is_spectral_class_Set() const{
    return m_spectral_class_isSet;
}

bool OAIGet_universe_stars_star_id_ok::is_spectral_class_Valid() const{
    return m_spectral_class_isValid;
}

qint32 OAIGet_universe_stars_star_id_ok::getTemperature() const {
    return m_temperature;
}
void OAIGet_universe_stars_star_id_ok::setTemperature(const qint32 &temperature) {
    m_temperature = temperature;
    m_temperature_isSet = true;
}

bool OAIGet_universe_stars_star_id_ok::is_temperature_Set() const{
    return m_temperature_isSet;
}

bool OAIGet_universe_stars_star_id_ok::is_temperature_Valid() const{
    return m_temperature_isValid;
}

qint32 OAIGet_universe_stars_star_id_ok::getTypeId() const {
    return m_type_id;
}
void OAIGet_universe_stars_star_id_ok::setTypeId(const qint32 &type_id) {
    m_type_id = type_id;
    m_type_id_isSet = true;
}

bool OAIGet_universe_stars_star_id_ok::is_type_id_Set() const{
    return m_type_id_isSet;
}

bool OAIGet_universe_stars_star_id_ok::is_type_id_Valid() const{
    return m_type_id_isValid;
}

bool OAIGet_universe_stars_star_id_ok::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_age_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_luminosity_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_radius_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_solar_system_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_spectral_class_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_temperature_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_type_id_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIGet_universe_stars_star_id_ok::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_age_isValid && m_luminosity_isValid && m_name_isValid && m_radius_isValid && m_solar_system_id_isValid && m_spectral_class_isValid && m_temperature_isValid && m_type_id_isValid && true;
}

} // namespace OpenAPI
