/**
 * EVE Swagger Interface
 * An OpenAPI for EVE Online
 *
 * The version of the OpenAPI document: 0.8.6
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIGet_corporations_corporation_id_bookmarks_200_ok.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIGet_corporations_corporation_id_bookmarks_200_ok::OAIGet_corporations_corporation_id_bookmarks_200_ok(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIGet_corporations_corporation_id_bookmarks_200_ok::OAIGet_corporations_corporation_id_bookmarks_200_ok() {
    this->initializeModel();
}

OAIGet_corporations_corporation_id_bookmarks_200_ok::~OAIGet_corporations_corporation_id_bookmarks_200_ok() {}

void OAIGet_corporations_corporation_id_bookmarks_200_ok::initializeModel() {

    m_bookmark_id_isSet = false;
    m_bookmark_id_isValid = false;

    m_coordinates_isSet = false;
    m_coordinates_isValid = false;

    m_created_isSet = false;
    m_created_isValid = false;

    m_creator_id_isSet = false;
    m_creator_id_isValid = false;

    m_folder_id_isSet = false;
    m_folder_id_isValid = false;

    m_item_isSet = false;
    m_item_isValid = false;

    m_label_isSet = false;
    m_label_isValid = false;

    m_location_id_isSet = false;
    m_location_id_isValid = false;

    m_notes_isSet = false;
    m_notes_isValid = false;
}

void OAIGet_corporations_corporation_id_bookmarks_200_ok::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIGet_corporations_corporation_id_bookmarks_200_ok::fromJsonObject(QJsonObject json) {

    m_bookmark_id_isValid = ::OpenAPI::fromJsonValue(m_bookmark_id, json[QString("bookmark_id")]);
    m_bookmark_id_isSet = !json[QString("bookmark_id")].isNull() && m_bookmark_id_isValid;

    m_coordinates_isValid = ::OpenAPI::fromJsonValue(m_coordinates, json[QString("coordinates")]);
    m_coordinates_isSet = !json[QString("coordinates")].isNull() && m_coordinates_isValid;

    m_created_isValid = ::OpenAPI::fromJsonValue(m_created, json[QString("created")]);
    m_created_isSet = !json[QString("created")].isNull() && m_created_isValid;

    m_creator_id_isValid = ::OpenAPI::fromJsonValue(m_creator_id, json[QString("creator_id")]);
    m_creator_id_isSet = !json[QString("creator_id")].isNull() && m_creator_id_isValid;

    m_folder_id_isValid = ::OpenAPI::fromJsonValue(m_folder_id, json[QString("folder_id")]);
    m_folder_id_isSet = !json[QString("folder_id")].isNull() && m_folder_id_isValid;

    m_item_isValid = ::OpenAPI::fromJsonValue(m_item, json[QString("item")]);
    m_item_isSet = !json[QString("item")].isNull() && m_item_isValid;

    m_label_isValid = ::OpenAPI::fromJsonValue(m_label, json[QString("label")]);
    m_label_isSet = !json[QString("label")].isNull() && m_label_isValid;

    m_location_id_isValid = ::OpenAPI::fromJsonValue(m_location_id, json[QString("location_id")]);
    m_location_id_isSet = !json[QString("location_id")].isNull() && m_location_id_isValid;

    m_notes_isValid = ::OpenAPI::fromJsonValue(m_notes, json[QString("notes")]);
    m_notes_isSet = !json[QString("notes")].isNull() && m_notes_isValid;
}

QString OAIGet_corporations_corporation_id_bookmarks_200_ok::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIGet_corporations_corporation_id_bookmarks_200_ok::asJsonObject() const {
    QJsonObject obj;
    if (m_bookmark_id_isSet) {
        obj.insert(QString("bookmark_id"), ::OpenAPI::toJsonValue(m_bookmark_id));
    }
    if (m_coordinates.isSet()) {
        obj.insert(QString("coordinates"), ::OpenAPI::toJsonValue(m_coordinates));
    }
    if (m_created_isSet) {
        obj.insert(QString("created"), ::OpenAPI::toJsonValue(m_created));
    }
    if (m_creator_id_isSet) {
        obj.insert(QString("creator_id"), ::OpenAPI::toJsonValue(m_creator_id));
    }
    if (m_folder_id_isSet) {
        obj.insert(QString("folder_id"), ::OpenAPI::toJsonValue(m_folder_id));
    }
    if (m_item.isSet()) {
        obj.insert(QString("item"), ::OpenAPI::toJsonValue(m_item));
    }
    if (m_label_isSet) {
        obj.insert(QString("label"), ::OpenAPI::toJsonValue(m_label));
    }
    if (m_location_id_isSet) {
        obj.insert(QString("location_id"), ::OpenAPI::toJsonValue(m_location_id));
    }
    if (m_notes_isSet) {
        obj.insert(QString("notes"), ::OpenAPI::toJsonValue(m_notes));
    }
    return obj;
}

qint32 OAIGet_corporations_corporation_id_bookmarks_200_ok::getBookmarkId() const {
    return m_bookmark_id;
}
void OAIGet_corporations_corporation_id_bookmarks_200_ok::setBookmarkId(const qint32 &bookmark_id) {
    m_bookmark_id = bookmark_id;
    m_bookmark_id_isSet = true;
}

bool OAIGet_corporations_corporation_id_bookmarks_200_ok::is_bookmark_id_Set() const{
    return m_bookmark_id_isSet;
}

bool OAIGet_corporations_corporation_id_bookmarks_200_ok::is_bookmark_id_Valid() const{
    return m_bookmark_id_isValid;
}

OAIGet_corporations_corporation_id_bookmarks_coordinates OAIGet_corporations_corporation_id_bookmarks_200_ok::getCoordinates() const {
    return m_coordinates;
}
void OAIGet_corporations_corporation_id_bookmarks_200_ok::setCoordinates(const OAIGet_corporations_corporation_id_bookmarks_coordinates &coordinates) {
    m_coordinates = coordinates;
    m_coordinates_isSet = true;
}

bool OAIGet_corporations_corporation_id_bookmarks_200_ok::is_coordinates_Set() const{
    return m_coordinates_isSet;
}

bool OAIGet_corporations_corporation_id_bookmarks_200_ok::is_coordinates_Valid() const{
    return m_coordinates_isValid;
}

QDateTime OAIGet_corporations_corporation_id_bookmarks_200_ok::getCreated() const {
    return m_created;
}
void OAIGet_corporations_corporation_id_bookmarks_200_ok::setCreated(const QDateTime &created) {
    m_created = created;
    m_created_isSet = true;
}

bool OAIGet_corporations_corporation_id_bookmarks_200_ok::is_created_Set() const{
    return m_created_isSet;
}

bool OAIGet_corporations_corporation_id_bookmarks_200_ok::is_created_Valid() const{
    return m_created_isValid;
}

qint32 OAIGet_corporations_corporation_id_bookmarks_200_ok::getCreatorId() const {
    return m_creator_id;
}
void OAIGet_corporations_corporation_id_bookmarks_200_ok::setCreatorId(const qint32 &creator_id) {
    m_creator_id = creator_id;
    m_creator_id_isSet = true;
}

bool OAIGet_corporations_corporation_id_bookmarks_200_ok::is_creator_id_Set() const{
    return m_creator_id_isSet;
}

bool OAIGet_corporations_corporation_id_bookmarks_200_ok::is_creator_id_Valid() const{
    return m_creator_id_isValid;
}

qint32 OAIGet_corporations_corporation_id_bookmarks_200_ok::getFolderId() const {
    return m_folder_id;
}
void OAIGet_corporations_corporation_id_bookmarks_200_ok::setFolderId(const qint32 &folder_id) {
    m_folder_id = folder_id;
    m_folder_id_isSet = true;
}

bool OAIGet_corporations_corporation_id_bookmarks_200_ok::is_folder_id_Set() const{
    return m_folder_id_isSet;
}

bool OAIGet_corporations_corporation_id_bookmarks_200_ok::is_folder_id_Valid() const{
    return m_folder_id_isValid;
}

OAIGet_corporations_corporation_id_bookmarks_item OAIGet_corporations_corporation_id_bookmarks_200_ok::getItem() const {
    return m_item;
}
void OAIGet_corporations_corporation_id_bookmarks_200_ok::setItem(const OAIGet_corporations_corporation_id_bookmarks_item &item) {
    m_item = item;
    m_item_isSet = true;
}

bool OAIGet_corporations_corporation_id_bookmarks_200_ok::is_item_Set() const{
    return m_item_isSet;
}

bool OAIGet_corporations_corporation_id_bookmarks_200_ok::is_item_Valid() const{
    return m_item_isValid;
}

QString OAIGet_corporations_corporation_id_bookmarks_200_ok::getLabel() const {
    return m_label;
}
void OAIGet_corporations_corporation_id_bookmarks_200_ok::setLabel(const QString &label) {
    m_label = label;
    m_label_isSet = true;
}

bool OAIGet_corporations_corporation_id_bookmarks_200_ok::is_label_Set() const{
    return m_label_isSet;
}

bool OAIGet_corporations_corporation_id_bookmarks_200_ok::is_label_Valid() const{
    return m_label_isValid;
}

qint32 OAIGet_corporations_corporation_id_bookmarks_200_ok::getLocationId() const {
    return m_location_id;
}
void OAIGet_corporations_corporation_id_bookmarks_200_ok::setLocationId(const qint32 &location_id) {
    m_location_id = location_id;
    m_location_id_isSet = true;
}

bool OAIGet_corporations_corporation_id_bookmarks_200_ok::is_location_id_Set() const{
    return m_location_id_isSet;
}

bool OAIGet_corporations_corporation_id_bookmarks_200_ok::is_location_id_Valid() const{
    return m_location_id_isValid;
}

QString OAIGet_corporations_corporation_id_bookmarks_200_ok::getNotes() const {
    return m_notes;
}
void OAIGet_corporations_corporation_id_bookmarks_200_ok::setNotes(const QString &notes) {
    m_notes = notes;
    m_notes_isSet = true;
}

bool OAIGet_corporations_corporation_id_bookmarks_200_ok::is_notes_Set() const{
    return m_notes_isSet;
}

bool OAIGet_corporations_corporation_id_bookmarks_200_ok::is_notes_Valid() const{
    return m_notes_isValid;
}

bool OAIGet_corporations_corporation_id_bookmarks_200_ok::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_bookmark_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_coordinates.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_created_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_creator_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_folder_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_item.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_label_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_location_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_notes_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIGet_corporations_corporation_id_bookmarks_200_ok::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_bookmark_id_isValid && m_created_isValid && m_creator_id_isValid && m_label_isValid && m_location_id_isValid && m_notes_isValid && true;
}

} // namespace OpenAPI
