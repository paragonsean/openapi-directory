/**
 * EVE Swagger Interface
 * An OpenAPI for EVE Online
 *
 * The version of the OpenAPI document: 0.8.6
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#ifndef OAI_OAIFactionWarfareApi_H
#define OAI_OAIFactionWarfareApi_H

#include "OAIHelpers.h"
#include "OAIHttpRequest.h"
#include "OAIServerConfiguration.h"
#include "OAIOauth.h"

#include "OAIBad_request.h"
#include "OAIError_limited.h"
#include "OAIForbidden.h"
#include "OAIGateway_timeout.h"
#include "OAIGet_characters_character_id_fw_stats_ok.h"
#include "OAIGet_corporations_corporation_id_fw_stats_ok.h"
#include "OAIGet_fw_leaderboards_characters_ok.h"
#include "OAIGet_fw_leaderboards_corporations_ok.h"
#include "OAIGet_fw_leaderboards_ok.h"
#include "OAIGet_fw_stats_200_ok.h"
#include "OAIGet_fw_systems_200_ok.h"
#include "OAIGet_fw_wars_200_ok.h"
#include "OAIInternal_server_error.h"
#include "OAIService_unavailable.h"
#include "OAIUnauthorized.h"
#include <QString>

#include <QObject>
#include <QByteArray>
#include <QStringList>
#include <QList>
#include <QNetworkAccessManager>

namespace OpenAPI {

class OAIFactionWarfareApi : public QObject {
    Q_OBJECT

public:
    OAIFactionWarfareApi(const int timeOut = 0);
    ~OAIFactionWarfareApi();

    void initializeServerConfigs();
    int setDefaultServerValue(int serverIndex,const QString &operation, const QString &variable,const QString &val);
    void setServerIndex(const QString &operation, int serverIndex);
    void setApiKey(const QString &apiKeyName, const QString &apiKey);
    void setBearerToken(const QString &token);
    void setUsername(const QString &username);
    void setPassword(const QString &password);
    void setTimeOut(const int timeOut);
    void setWorkingDirectory(const QString &path);
    void setNetworkAccessManager(QNetworkAccessManager* manager);
    int addServerConfiguration(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables = QMap<QString, OAIServerVariable>());
    void setNewServerForAllOperations(const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void setNewServer(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void addHeaders(const QString &key, const QString &value);
    void enableRequestCompression();
    void enableResponseCompression();
    void abortRequests();
    QString getParamStylePrefix(const QString &style);
    QString getParamStyleSuffix(const QString &style);
    QString getParamStyleDelimiter(const QString &style, const QString &name, bool isExplode);

    /**
    * @param[in]  character_id qint32 [required]
    * @param[in]  datasource QString [optional]
    * @param[in]  if_none_match QString [optional]
    * @param[in]  token QString [optional]
    */
    virtual void getCharactersCharacterIdFwStats(const qint32 &character_id, const ::OpenAPI::OptionalParam<QString> &datasource = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &if_none_match = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &token = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  corporation_id qint32 [required]
    * @param[in]  datasource QString [optional]
    * @param[in]  if_none_match QString [optional]
    * @param[in]  token QString [optional]
    */
    virtual void getCorporationsCorporationIdFwStats(const qint32 &corporation_id, const ::OpenAPI::OptionalParam<QString> &datasource = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &if_none_match = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &token = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  datasource QString [optional]
    * @param[in]  if_none_match QString [optional]
    */
    virtual void getFwLeaderboards(const ::OpenAPI::OptionalParam<QString> &datasource = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &if_none_match = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  datasource QString [optional]
    * @param[in]  if_none_match QString [optional]
    */
    virtual void getFwLeaderboardsCharacters(const ::OpenAPI::OptionalParam<QString> &datasource = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &if_none_match = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  datasource QString [optional]
    * @param[in]  if_none_match QString [optional]
    */
    virtual void getFwLeaderboardsCorporations(const ::OpenAPI::OptionalParam<QString> &datasource = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &if_none_match = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  datasource QString [optional]
    * @param[in]  if_none_match QString [optional]
    */
    virtual void getFwStats(const ::OpenAPI::OptionalParam<QString> &datasource = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &if_none_match = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  datasource QString [optional]
    * @param[in]  if_none_match QString [optional]
    */
    virtual void getFwSystems(const ::OpenAPI::OptionalParam<QString> &datasource = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &if_none_match = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  datasource QString [optional]
    * @param[in]  if_none_match QString [optional]
    */
    virtual void getFwWars(const ::OpenAPI::OptionalParam<QString> &datasource = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &if_none_match = ::OpenAPI::OptionalParam<QString>());


private:
    QMap<QString,int> _serverIndices;
    QMap<QString,QList<OAIServerConfiguration>> _serverConfigs;
    QMap<QString, QString> _apiKeys;
    QString _bearerToken;
    QString _username;
    QString _password;
    int _timeOut;
    QString _workingDirectory;
    QNetworkAccessManager* _manager;
    QMap<QString, QString> _defaultHeaders;
    bool _isResponseCompressionEnabled;
    bool _isRequestCompressionEnabled;
    OAIHttpRequestInput _latestInput;
    OAIHttpRequestWorker *_latestWorker;
    QStringList _latestScope;
    OauthCode _authFlow;
    OauthImplicit _implicitFlow;
    OauthCredentials _credentialFlow;
    OauthPassword _passwordFlow;
    int _OauthMethod = 0;

    void getCharactersCharacterIdFwStatsCallback(OAIHttpRequestWorker *worker);
    void getCorporationsCorporationIdFwStatsCallback(OAIHttpRequestWorker *worker);
    void getFwLeaderboardsCallback(OAIHttpRequestWorker *worker);
    void getFwLeaderboardsCharactersCallback(OAIHttpRequestWorker *worker);
    void getFwLeaderboardsCorporationsCallback(OAIHttpRequestWorker *worker);
    void getFwStatsCallback(OAIHttpRequestWorker *worker);
    void getFwSystemsCallback(OAIHttpRequestWorker *worker);
    void getFwWarsCallback(OAIHttpRequestWorker *worker);

Q_SIGNALS:

    void getCharactersCharacterIdFwStatsSignal(OAIGet_characters_character_id_fw_stats_ok summary);
    void getCorporationsCorporationIdFwStatsSignal(OAIGet_corporations_corporation_id_fw_stats_ok summary);
    void getFwLeaderboardsSignal(OAIGet_fw_leaderboards_ok summary);
    void getFwLeaderboardsCharactersSignal(OAIGet_fw_leaderboards_characters_ok summary);
    void getFwLeaderboardsCorporationsSignal(OAIGet_fw_leaderboards_corporations_ok summary);
    void getFwStatsSignal(QList<OAIGet_fw_stats_200_ok> summary);
    void getFwSystemsSignal(QList<OAIGet_fw_systems_200_ok> summary);
    void getFwWarsSignal(QList<OAIGet_fw_wars_200_ok> summary);


    void getCharactersCharacterIdFwStatsSignalFull(OAIHttpRequestWorker *worker, OAIGet_characters_character_id_fw_stats_ok summary);
    void getCorporationsCorporationIdFwStatsSignalFull(OAIHttpRequestWorker *worker, OAIGet_corporations_corporation_id_fw_stats_ok summary);
    void getFwLeaderboardsSignalFull(OAIHttpRequestWorker *worker, OAIGet_fw_leaderboards_ok summary);
    void getFwLeaderboardsCharactersSignalFull(OAIHttpRequestWorker *worker, OAIGet_fw_leaderboards_characters_ok summary);
    void getFwLeaderboardsCorporationsSignalFull(OAIHttpRequestWorker *worker, OAIGet_fw_leaderboards_corporations_ok summary);
    void getFwStatsSignalFull(OAIHttpRequestWorker *worker, QList<OAIGet_fw_stats_200_ok> summary);
    void getFwSystemsSignalFull(OAIHttpRequestWorker *worker, QList<OAIGet_fw_systems_200_ok> summary);
    void getFwWarsSignalFull(OAIHttpRequestWorker *worker, QList<OAIGet_fw_wars_200_ok> summary);

    Q_DECL_DEPRECATED_X("Use getCharactersCharacterIdFwStatsSignalError() instead")
    void getCharactersCharacterIdFwStatsSignalE(OAIGet_characters_character_id_fw_stats_ok summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getCharactersCharacterIdFwStatsSignalError(OAIGet_characters_character_id_fw_stats_ok summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getCorporationsCorporationIdFwStatsSignalError() instead")
    void getCorporationsCorporationIdFwStatsSignalE(OAIGet_corporations_corporation_id_fw_stats_ok summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getCorporationsCorporationIdFwStatsSignalError(OAIGet_corporations_corporation_id_fw_stats_ok summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getFwLeaderboardsSignalError() instead")
    void getFwLeaderboardsSignalE(OAIGet_fw_leaderboards_ok summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getFwLeaderboardsSignalError(OAIGet_fw_leaderboards_ok summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getFwLeaderboardsCharactersSignalError() instead")
    void getFwLeaderboardsCharactersSignalE(OAIGet_fw_leaderboards_characters_ok summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getFwLeaderboardsCharactersSignalError(OAIGet_fw_leaderboards_characters_ok summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getFwLeaderboardsCorporationsSignalError() instead")
    void getFwLeaderboardsCorporationsSignalE(OAIGet_fw_leaderboards_corporations_ok summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getFwLeaderboardsCorporationsSignalError(OAIGet_fw_leaderboards_corporations_ok summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getFwStatsSignalError() instead")
    void getFwStatsSignalE(QList<OAIGet_fw_stats_200_ok> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getFwStatsSignalError(QList<OAIGet_fw_stats_200_ok> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getFwSystemsSignalError() instead")
    void getFwSystemsSignalE(QList<OAIGet_fw_systems_200_ok> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getFwSystemsSignalError(QList<OAIGet_fw_systems_200_ok> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getFwWarsSignalError() instead")
    void getFwWarsSignalE(QList<OAIGet_fw_wars_200_ok> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getFwWarsSignalError(QList<OAIGet_fw_wars_200_ok> summary, QNetworkReply::NetworkError error_type, const QString &error_str);

    Q_DECL_DEPRECATED_X("Use getCharactersCharacterIdFwStatsSignalErrorFull() instead")
    void getCharactersCharacterIdFwStatsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getCharactersCharacterIdFwStatsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getCorporationsCorporationIdFwStatsSignalErrorFull() instead")
    void getCorporationsCorporationIdFwStatsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getCorporationsCorporationIdFwStatsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getFwLeaderboardsSignalErrorFull() instead")
    void getFwLeaderboardsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getFwLeaderboardsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getFwLeaderboardsCharactersSignalErrorFull() instead")
    void getFwLeaderboardsCharactersSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getFwLeaderboardsCharactersSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getFwLeaderboardsCorporationsSignalErrorFull() instead")
    void getFwLeaderboardsCorporationsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getFwLeaderboardsCorporationsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getFwStatsSignalErrorFull() instead")
    void getFwStatsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getFwStatsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getFwSystemsSignalErrorFull() instead")
    void getFwSystemsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getFwSystemsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getFwWarsSignalErrorFull() instead")
    void getFwWarsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getFwWarsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);

    void abortRequestsSignal();
    void allPendingRequestsCompleted();

public Q_SLOTS:
    void tokenAvailable();
};

} // namespace OpenAPI
#endif
