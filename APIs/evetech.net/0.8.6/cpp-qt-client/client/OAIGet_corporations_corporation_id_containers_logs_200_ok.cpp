/**
 * EVE Swagger Interface
 * An OpenAPI for EVE Online
 *
 * The version of the OpenAPI document: 0.8.6
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIGet_corporations_corporation_id_containers_logs_200_ok.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIGet_corporations_corporation_id_containers_logs_200_ok::OAIGet_corporations_corporation_id_containers_logs_200_ok(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIGet_corporations_corporation_id_containers_logs_200_ok::OAIGet_corporations_corporation_id_containers_logs_200_ok() {
    this->initializeModel();
}

OAIGet_corporations_corporation_id_containers_logs_200_ok::~OAIGet_corporations_corporation_id_containers_logs_200_ok() {}

void OAIGet_corporations_corporation_id_containers_logs_200_ok::initializeModel() {

    m_action_isSet = false;
    m_action_isValid = false;

    m_character_id_isSet = false;
    m_character_id_isValid = false;

    m_container_id_isSet = false;
    m_container_id_isValid = false;

    m_container_type_id_isSet = false;
    m_container_type_id_isValid = false;

    m_location_flag_isSet = false;
    m_location_flag_isValid = false;

    m_location_id_isSet = false;
    m_location_id_isValid = false;

    m_logged_at_isSet = false;
    m_logged_at_isValid = false;

    m_new_config_bitmask_isSet = false;
    m_new_config_bitmask_isValid = false;

    m_old_config_bitmask_isSet = false;
    m_old_config_bitmask_isValid = false;

    m_password_type_isSet = false;
    m_password_type_isValid = false;

    m_quantity_isSet = false;
    m_quantity_isValid = false;

    m_type_id_isSet = false;
    m_type_id_isValid = false;
}

void OAIGet_corporations_corporation_id_containers_logs_200_ok::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIGet_corporations_corporation_id_containers_logs_200_ok::fromJsonObject(QJsonObject json) {

    m_action_isValid = ::OpenAPI::fromJsonValue(m_action, json[QString("action")]);
    m_action_isSet = !json[QString("action")].isNull() && m_action_isValid;

    m_character_id_isValid = ::OpenAPI::fromJsonValue(m_character_id, json[QString("character_id")]);
    m_character_id_isSet = !json[QString("character_id")].isNull() && m_character_id_isValid;

    m_container_id_isValid = ::OpenAPI::fromJsonValue(m_container_id, json[QString("container_id")]);
    m_container_id_isSet = !json[QString("container_id")].isNull() && m_container_id_isValid;

    m_container_type_id_isValid = ::OpenAPI::fromJsonValue(m_container_type_id, json[QString("container_type_id")]);
    m_container_type_id_isSet = !json[QString("container_type_id")].isNull() && m_container_type_id_isValid;

    m_location_flag_isValid = ::OpenAPI::fromJsonValue(m_location_flag, json[QString("location_flag")]);
    m_location_flag_isSet = !json[QString("location_flag")].isNull() && m_location_flag_isValid;

    m_location_id_isValid = ::OpenAPI::fromJsonValue(m_location_id, json[QString("location_id")]);
    m_location_id_isSet = !json[QString("location_id")].isNull() && m_location_id_isValid;

    m_logged_at_isValid = ::OpenAPI::fromJsonValue(m_logged_at, json[QString("logged_at")]);
    m_logged_at_isSet = !json[QString("logged_at")].isNull() && m_logged_at_isValid;

    m_new_config_bitmask_isValid = ::OpenAPI::fromJsonValue(m_new_config_bitmask, json[QString("new_config_bitmask")]);
    m_new_config_bitmask_isSet = !json[QString("new_config_bitmask")].isNull() && m_new_config_bitmask_isValid;

    m_old_config_bitmask_isValid = ::OpenAPI::fromJsonValue(m_old_config_bitmask, json[QString("old_config_bitmask")]);
    m_old_config_bitmask_isSet = !json[QString("old_config_bitmask")].isNull() && m_old_config_bitmask_isValid;

    m_password_type_isValid = ::OpenAPI::fromJsonValue(m_password_type, json[QString("password_type")]);
    m_password_type_isSet = !json[QString("password_type")].isNull() && m_password_type_isValid;

    m_quantity_isValid = ::OpenAPI::fromJsonValue(m_quantity, json[QString("quantity")]);
    m_quantity_isSet = !json[QString("quantity")].isNull() && m_quantity_isValid;

    m_type_id_isValid = ::OpenAPI::fromJsonValue(m_type_id, json[QString("type_id")]);
    m_type_id_isSet = !json[QString("type_id")].isNull() && m_type_id_isValid;
}

QString OAIGet_corporations_corporation_id_containers_logs_200_ok::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIGet_corporations_corporation_id_containers_logs_200_ok::asJsonObject() const {
    QJsonObject obj;
    if (m_action_isSet) {
        obj.insert(QString("action"), ::OpenAPI::toJsonValue(m_action));
    }
    if (m_character_id_isSet) {
        obj.insert(QString("character_id"), ::OpenAPI::toJsonValue(m_character_id));
    }
    if (m_container_id_isSet) {
        obj.insert(QString("container_id"), ::OpenAPI::toJsonValue(m_container_id));
    }
    if (m_container_type_id_isSet) {
        obj.insert(QString("container_type_id"), ::OpenAPI::toJsonValue(m_container_type_id));
    }
    if (m_location_flag_isSet) {
        obj.insert(QString("location_flag"), ::OpenAPI::toJsonValue(m_location_flag));
    }
    if (m_location_id_isSet) {
        obj.insert(QString("location_id"), ::OpenAPI::toJsonValue(m_location_id));
    }
    if (m_logged_at_isSet) {
        obj.insert(QString("logged_at"), ::OpenAPI::toJsonValue(m_logged_at));
    }
    if (m_new_config_bitmask_isSet) {
        obj.insert(QString("new_config_bitmask"), ::OpenAPI::toJsonValue(m_new_config_bitmask));
    }
    if (m_old_config_bitmask_isSet) {
        obj.insert(QString("old_config_bitmask"), ::OpenAPI::toJsonValue(m_old_config_bitmask));
    }
    if (m_password_type_isSet) {
        obj.insert(QString("password_type"), ::OpenAPI::toJsonValue(m_password_type));
    }
    if (m_quantity_isSet) {
        obj.insert(QString("quantity"), ::OpenAPI::toJsonValue(m_quantity));
    }
    if (m_type_id_isSet) {
        obj.insert(QString("type_id"), ::OpenAPI::toJsonValue(m_type_id));
    }
    return obj;
}

QString OAIGet_corporations_corporation_id_containers_logs_200_ok::getAction() const {
    return m_action;
}
void OAIGet_corporations_corporation_id_containers_logs_200_ok::setAction(const QString &action) {
    m_action = action;
    m_action_isSet = true;
}

bool OAIGet_corporations_corporation_id_containers_logs_200_ok::is_action_Set() const{
    return m_action_isSet;
}

bool OAIGet_corporations_corporation_id_containers_logs_200_ok::is_action_Valid() const{
    return m_action_isValid;
}

qint32 OAIGet_corporations_corporation_id_containers_logs_200_ok::getCharacterId() const {
    return m_character_id;
}
void OAIGet_corporations_corporation_id_containers_logs_200_ok::setCharacterId(const qint32 &character_id) {
    m_character_id = character_id;
    m_character_id_isSet = true;
}

bool OAIGet_corporations_corporation_id_containers_logs_200_ok::is_character_id_Set() const{
    return m_character_id_isSet;
}

bool OAIGet_corporations_corporation_id_containers_logs_200_ok::is_character_id_Valid() const{
    return m_character_id_isValid;
}

qint64 OAIGet_corporations_corporation_id_containers_logs_200_ok::getContainerId() const {
    return m_container_id;
}
void OAIGet_corporations_corporation_id_containers_logs_200_ok::setContainerId(const qint64 &container_id) {
    m_container_id = container_id;
    m_container_id_isSet = true;
}

bool OAIGet_corporations_corporation_id_containers_logs_200_ok::is_container_id_Set() const{
    return m_container_id_isSet;
}

bool OAIGet_corporations_corporation_id_containers_logs_200_ok::is_container_id_Valid() const{
    return m_container_id_isValid;
}

qint32 OAIGet_corporations_corporation_id_containers_logs_200_ok::getContainerTypeId() const {
    return m_container_type_id;
}
void OAIGet_corporations_corporation_id_containers_logs_200_ok::setContainerTypeId(const qint32 &container_type_id) {
    m_container_type_id = container_type_id;
    m_container_type_id_isSet = true;
}

bool OAIGet_corporations_corporation_id_containers_logs_200_ok::is_container_type_id_Set() const{
    return m_container_type_id_isSet;
}

bool OAIGet_corporations_corporation_id_containers_logs_200_ok::is_container_type_id_Valid() const{
    return m_container_type_id_isValid;
}

QString OAIGet_corporations_corporation_id_containers_logs_200_ok::getLocationFlag() const {
    return m_location_flag;
}
void OAIGet_corporations_corporation_id_containers_logs_200_ok::setLocationFlag(const QString &location_flag) {
    m_location_flag = location_flag;
    m_location_flag_isSet = true;
}

bool OAIGet_corporations_corporation_id_containers_logs_200_ok::is_location_flag_Set() const{
    return m_location_flag_isSet;
}

bool OAIGet_corporations_corporation_id_containers_logs_200_ok::is_location_flag_Valid() const{
    return m_location_flag_isValid;
}

qint64 OAIGet_corporations_corporation_id_containers_logs_200_ok::getLocationId() const {
    return m_location_id;
}
void OAIGet_corporations_corporation_id_containers_logs_200_ok::setLocationId(const qint64 &location_id) {
    m_location_id = location_id;
    m_location_id_isSet = true;
}

bool OAIGet_corporations_corporation_id_containers_logs_200_ok::is_location_id_Set() const{
    return m_location_id_isSet;
}

bool OAIGet_corporations_corporation_id_containers_logs_200_ok::is_location_id_Valid() const{
    return m_location_id_isValid;
}

QDateTime OAIGet_corporations_corporation_id_containers_logs_200_ok::getLoggedAt() const {
    return m_logged_at;
}
void OAIGet_corporations_corporation_id_containers_logs_200_ok::setLoggedAt(const QDateTime &logged_at) {
    m_logged_at = logged_at;
    m_logged_at_isSet = true;
}

bool OAIGet_corporations_corporation_id_containers_logs_200_ok::is_logged_at_Set() const{
    return m_logged_at_isSet;
}

bool OAIGet_corporations_corporation_id_containers_logs_200_ok::is_logged_at_Valid() const{
    return m_logged_at_isValid;
}

qint32 OAIGet_corporations_corporation_id_containers_logs_200_ok::getNewConfigBitmask() const {
    return m_new_config_bitmask;
}
void OAIGet_corporations_corporation_id_containers_logs_200_ok::setNewConfigBitmask(const qint32 &new_config_bitmask) {
    m_new_config_bitmask = new_config_bitmask;
    m_new_config_bitmask_isSet = true;
}

bool OAIGet_corporations_corporation_id_containers_logs_200_ok::is_new_config_bitmask_Set() const{
    return m_new_config_bitmask_isSet;
}

bool OAIGet_corporations_corporation_id_containers_logs_200_ok::is_new_config_bitmask_Valid() const{
    return m_new_config_bitmask_isValid;
}

qint32 OAIGet_corporations_corporation_id_containers_logs_200_ok::getOldConfigBitmask() const {
    return m_old_config_bitmask;
}
void OAIGet_corporations_corporation_id_containers_logs_200_ok::setOldConfigBitmask(const qint32 &old_config_bitmask) {
    m_old_config_bitmask = old_config_bitmask;
    m_old_config_bitmask_isSet = true;
}

bool OAIGet_corporations_corporation_id_containers_logs_200_ok::is_old_config_bitmask_Set() const{
    return m_old_config_bitmask_isSet;
}

bool OAIGet_corporations_corporation_id_containers_logs_200_ok::is_old_config_bitmask_Valid() const{
    return m_old_config_bitmask_isValid;
}

QString OAIGet_corporations_corporation_id_containers_logs_200_ok::getPasswordType() const {
    return m_password_type;
}
void OAIGet_corporations_corporation_id_containers_logs_200_ok::setPasswordType(const QString &password_type) {
    m_password_type = password_type;
    m_password_type_isSet = true;
}

bool OAIGet_corporations_corporation_id_containers_logs_200_ok::is_password_type_Set() const{
    return m_password_type_isSet;
}

bool OAIGet_corporations_corporation_id_containers_logs_200_ok::is_password_type_Valid() const{
    return m_password_type_isValid;
}

qint32 OAIGet_corporations_corporation_id_containers_logs_200_ok::getQuantity() const {
    return m_quantity;
}
void OAIGet_corporations_corporation_id_containers_logs_200_ok::setQuantity(const qint32 &quantity) {
    m_quantity = quantity;
    m_quantity_isSet = true;
}

bool OAIGet_corporations_corporation_id_containers_logs_200_ok::is_quantity_Set() const{
    return m_quantity_isSet;
}

bool OAIGet_corporations_corporation_id_containers_logs_200_ok::is_quantity_Valid() const{
    return m_quantity_isValid;
}

qint32 OAIGet_corporations_corporation_id_containers_logs_200_ok::getTypeId() const {
    return m_type_id;
}
void OAIGet_corporations_corporation_id_containers_logs_200_ok::setTypeId(const qint32 &type_id) {
    m_type_id = type_id;
    m_type_id_isSet = true;
}

bool OAIGet_corporations_corporation_id_containers_logs_200_ok::is_type_id_Set() const{
    return m_type_id_isSet;
}

bool OAIGet_corporations_corporation_id_containers_logs_200_ok::is_type_id_Valid() const{
    return m_type_id_isValid;
}

bool OAIGet_corporations_corporation_id_containers_logs_200_ok::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_action_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_character_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_container_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_container_type_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_location_flag_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_location_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_logged_at_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_new_config_bitmask_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_old_config_bitmask_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_password_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_quantity_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_type_id_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIGet_corporations_corporation_id_containers_logs_200_ok::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_action_isValid && m_character_id_isValid && m_container_id_isValid && m_container_type_id_isValid && m_location_flag_isValid && m_location_id_isValid && m_logged_at_isValid && true;
}

} // namespace OpenAPI
