/**
 * EVE Swagger Interface
 * An OpenAPI for EVE Online
 *
 * The version of the OpenAPI document: 0.8.6
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIGet_characters_character_id_planets_planet_id_ok.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIGet_characters_character_id_planets_planet_id_ok::OAIGet_characters_character_id_planets_planet_id_ok(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIGet_characters_character_id_planets_planet_id_ok::OAIGet_characters_character_id_planets_planet_id_ok() {
    this->initializeModel();
}

OAIGet_characters_character_id_planets_planet_id_ok::~OAIGet_characters_character_id_planets_planet_id_ok() {}

void OAIGet_characters_character_id_planets_planet_id_ok::initializeModel() {

    m_links_isSet = false;
    m_links_isValid = false;

    m_pins_isSet = false;
    m_pins_isValid = false;

    m_routes_isSet = false;
    m_routes_isValid = false;
}

void OAIGet_characters_character_id_planets_planet_id_ok::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIGet_characters_character_id_planets_planet_id_ok::fromJsonObject(QJsonObject json) {

    m_links_isValid = ::OpenAPI::fromJsonValue(m_links, json[QString("links")]);
    m_links_isSet = !json[QString("links")].isNull() && m_links_isValid;

    m_pins_isValid = ::OpenAPI::fromJsonValue(m_pins, json[QString("pins")]);
    m_pins_isSet = !json[QString("pins")].isNull() && m_pins_isValid;

    m_routes_isValid = ::OpenAPI::fromJsonValue(m_routes, json[QString("routes")]);
    m_routes_isSet = !json[QString("routes")].isNull() && m_routes_isValid;
}

QString OAIGet_characters_character_id_planets_planet_id_ok::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIGet_characters_character_id_planets_planet_id_ok::asJsonObject() const {
    QJsonObject obj;
    if (m_links.size() > 0) {
        obj.insert(QString("links"), ::OpenAPI::toJsonValue(m_links));
    }
    if (m_pins.size() > 0) {
        obj.insert(QString("pins"), ::OpenAPI::toJsonValue(m_pins));
    }
    if (m_routes.size() > 0) {
        obj.insert(QString("routes"), ::OpenAPI::toJsonValue(m_routes));
    }
    return obj;
}

QList<OAIGet_characters_character_id_planets_planet_id_link> OAIGet_characters_character_id_planets_planet_id_ok::getLinks() const {
    return m_links;
}
void OAIGet_characters_character_id_planets_planet_id_ok::setLinks(const QList<OAIGet_characters_character_id_planets_planet_id_link> &links) {
    m_links = links;
    m_links_isSet = true;
}

bool OAIGet_characters_character_id_planets_planet_id_ok::is_links_Set() const{
    return m_links_isSet;
}

bool OAIGet_characters_character_id_planets_planet_id_ok::is_links_Valid() const{
    return m_links_isValid;
}

QList<OAIGet_characters_character_id_planets_planet_id_pin> OAIGet_characters_character_id_planets_planet_id_ok::getPins() const {
    return m_pins;
}
void OAIGet_characters_character_id_planets_planet_id_ok::setPins(const QList<OAIGet_characters_character_id_planets_planet_id_pin> &pins) {
    m_pins = pins;
    m_pins_isSet = true;
}

bool OAIGet_characters_character_id_planets_planet_id_ok::is_pins_Set() const{
    return m_pins_isSet;
}

bool OAIGet_characters_character_id_planets_planet_id_ok::is_pins_Valid() const{
    return m_pins_isValid;
}

QList<OAIGet_characters_character_id_planets_planet_id_route> OAIGet_characters_character_id_planets_planet_id_ok::getRoutes() const {
    return m_routes;
}
void OAIGet_characters_character_id_planets_planet_id_ok::setRoutes(const QList<OAIGet_characters_character_id_planets_planet_id_route> &routes) {
    m_routes = routes;
    m_routes_isSet = true;
}

bool OAIGet_characters_character_id_planets_planet_id_ok::is_routes_Set() const{
    return m_routes_isSet;
}

bool OAIGet_characters_character_id_planets_planet_id_ok::is_routes_Valid() const{
    return m_routes_isValid;
}

bool OAIGet_characters_character_id_planets_planet_id_ok::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_links.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_pins.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_routes.size() > 0) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIGet_characters_character_id_planets_planet_id_ok::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_links_isValid && m_pins_isValid && m_routes_isValid && true;
}

} // namespace OpenAPI
