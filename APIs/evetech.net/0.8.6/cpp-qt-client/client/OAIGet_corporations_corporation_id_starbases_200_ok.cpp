/**
 * EVE Swagger Interface
 * An OpenAPI for EVE Online
 *
 * The version of the OpenAPI document: 0.8.6
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIGet_corporations_corporation_id_starbases_200_ok.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIGet_corporations_corporation_id_starbases_200_ok::OAIGet_corporations_corporation_id_starbases_200_ok(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIGet_corporations_corporation_id_starbases_200_ok::OAIGet_corporations_corporation_id_starbases_200_ok() {
    this->initializeModel();
}

OAIGet_corporations_corporation_id_starbases_200_ok::~OAIGet_corporations_corporation_id_starbases_200_ok() {}

void OAIGet_corporations_corporation_id_starbases_200_ok::initializeModel() {

    m_moon_id_isSet = false;
    m_moon_id_isValid = false;

    m_onlined_since_isSet = false;
    m_onlined_since_isValid = false;

    m_reinforced_until_isSet = false;
    m_reinforced_until_isValid = false;

    m_starbase_id_isSet = false;
    m_starbase_id_isValid = false;

    m_state_isSet = false;
    m_state_isValid = false;

    m_system_id_isSet = false;
    m_system_id_isValid = false;

    m_type_id_isSet = false;
    m_type_id_isValid = false;

    m_unanchor_at_isSet = false;
    m_unanchor_at_isValid = false;
}

void OAIGet_corporations_corporation_id_starbases_200_ok::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIGet_corporations_corporation_id_starbases_200_ok::fromJsonObject(QJsonObject json) {

    m_moon_id_isValid = ::OpenAPI::fromJsonValue(m_moon_id, json[QString("moon_id")]);
    m_moon_id_isSet = !json[QString("moon_id")].isNull() && m_moon_id_isValid;

    m_onlined_since_isValid = ::OpenAPI::fromJsonValue(m_onlined_since, json[QString("onlined_since")]);
    m_onlined_since_isSet = !json[QString("onlined_since")].isNull() && m_onlined_since_isValid;

    m_reinforced_until_isValid = ::OpenAPI::fromJsonValue(m_reinforced_until, json[QString("reinforced_until")]);
    m_reinforced_until_isSet = !json[QString("reinforced_until")].isNull() && m_reinforced_until_isValid;

    m_starbase_id_isValid = ::OpenAPI::fromJsonValue(m_starbase_id, json[QString("starbase_id")]);
    m_starbase_id_isSet = !json[QString("starbase_id")].isNull() && m_starbase_id_isValid;

    m_state_isValid = ::OpenAPI::fromJsonValue(m_state, json[QString("state")]);
    m_state_isSet = !json[QString("state")].isNull() && m_state_isValid;

    m_system_id_isValid = ::OpenAPI::fromJsonValue(m_system_id, json[QString("system_id")]);
    m_system_id_isSet = !json[QString("system_id")].isNull() && m_system_id_isValid;

    m_type_id_isValid = ::OpenAPI::fromJsonValue(m_type_id, json[QString("type_id")]);
    m_type_id_isSet = !json[QString("type_id")].isNull() && m_type_id_isValid;

    m_unanchor_at_isValid = ::OpenAPI::fromJsonValue(m_unanchor_at, json[QString("unanchor_at")]);
    m_unanchor_at_isSet = !json[QString("unanchor_at")].isNull() && m_unanchor_at_isValid;
}

QString OAIGet_corporations_corporation_id_starbases_200_ok::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIGet_corporations_corporation_id_starbases_200_ok::asJsonObject() const {
    QJsonObject obj;
    if (m_moon_id_isSet) {
        obj.insert(QString("moon_id"), ::OpenAPI::toJsonValue(m_moon_id));
    }
    if (m_onlined_since_isSet) {
        obj.insert(QString("onlined_since"), ::OpenAPI::toJsonValue(m_onlined_since));
    }
    if (m_reinforced_until_isSet) {
        obj.insert(QString("reinforced_until"), ::OpenAPI::toJsonValue(m_reinforced_until));
    }
    if (m_starbase_id_isSet) {
        obj.insert(QString("starbase_id"), ::OpenAPI::toJsonValue(m_starbase_id));
    }
    if (m_state_isSet) {
        obj.insert(QString("state"), ::OpenAPI::toJsonValue(m_state));
    }
    if (m_system_id_isSet) {
        obj.insert(QString("system_id"), ::OpenAPI::toJsonValue(m_system_id));
    }
    if (m_type_id_isSet) {
        obj.insert(QString("type_id"), ::OpenAPI::toJsonValue(m_type_id));
    }
    if (m_unanchor_at_isSet) {
        obj.insert(QString("unanchor_at"), ::OpenAPI::toJsonValue(m_unanchor_at));
    }
    return obj;
}

qint32 OAIGet_corporations_corporation_id_starbases_200_ok::getMoonId() const {
    return m_moon_id;
}
void OAIGet_corporations_corporation_id_starbases_200_ok::setMoonId(const qint32 &moon_id) {
    m_moon_id = moon_id;
    m_moon_id_isSet = true;
}

bool OAIGet_corporations_corporation_id_starbases_200_ok::is_moon_id_Set() const{
    return m_moon_id_isSet;
}

bool OAIGet_corporations_corporation_id_starbases_200_ok::is_moon_id_Valid() const{
    return m_moon_id_isValid;
}

QDateTime OAIGet_corporations_corporation_id_starbases_200_ok::getOnlinedSince() const {
    return m_onlined_since;
}
void OAIGet_corporations_corporation_id_starbases_200_ok::setOnlinedSince(const QDateTime &onlined_since) {
    m_onlined_since = onlined_since;
    m_onlined_since_isSet = true;
}

bool OAIGet_corporations_corporation_id_starbases_200_ok::is_onlined_since_Set() const{
    return m_onlined_since_isSet;
}

bool OAIGet_corporations_corporation_id_starbases_200_ok::is_onlined_since_Valid() const{
    return m_onlined_since_isValid;
}

QDateTime OAIGet_corporations_corporation_id_starbases_200_ok::getReinforcedUntil() const {
    return m_reinforced_until;
}
void OAIGet_corporations_corporation_id_starbases_200_ok::setReinforcedUntil(const QDateTime &reinforced_until) {
    m_reinforced_until = reinforced_until;
    m_reinforced_until_isSet = true;
}

bool OAIGet_corporations_corporation_id_starbases_200_ok::is_reinforced_until_Set() const{
    return m_reinforced_until_isSet;
}

bool OAIGet_corporations_corporation_id_starbases_200_ok::is_reinforced_until_Valid() const{
    return m_reinforced_until_isValid;
}

qint64 OAIGet_corporations_corporation_id_starbases_200_ok::getStarbaseId() const {
    return m_starbase_id;
}
void OAIGet_corporations_corporation_id_starbases_200_ok::setStarbaseId(const qint64 &starbase_id) {
    m_starbase_id = starbase_id;
    m_starbase_id_isSet = true;
}

bool OAIGet_corporations_corporation_id_starbases_200_ok::is_starbase_id_Set() const{
    return m_starbase_id_isSet;
}

bool OAIGet_corporations_corporation_id_starbases_200_ok::is_starbase_id_Valid() const{
    return m_starbase_id_isValid;
}

QString OAIGet_corporations_corporation_id_starbases_200_ok::getState() const {
    return m_state;
}
void OAIGet_corporations_corporation_id_starbases_200_ok::setState(const QString &state) {
    m_state = state;
    m_state_isSet = true;
}

bool OAIGet_corporations_corporation_id_starbases_200_ok::is_state_Set() const{
    return m_state_isSet;
}

bool OAIGet_corporations_corporation_id_starbases_200_ok::is_state_Valid() const{
    return m_state_isValid;
}

qint32 OAIGet_corporations_corporation_id_starbases_200_ok::getSystemId() const {
    return m_system_id;
}
void OAIGet_corporations_corporation_id_starbases_200_ok::setSystemId(const qint32 &system_id) {
    m_system_id = system_id;
    m_system_id_isSet = true;
}

bool OAIGet_corporations_corporation_id_starbases_200_ok::is_system_id_Set() const{
    return m_system_id_isSet;
}

bool OAIGet_corporations_corporation_id_starbases_200_ok::is_system_id_Valid() const{
    return m_system_id_isValid;
}

qint32 OAIGet_corporations_corporation_id_starbases_200_ok::getTypeId() const {
    return m_type_id;
}
void OAIGet_corporations_corporation_id_starbases_200_ok::setTypeId(const qint32 &type_id) {
    m_type_id = type_id;
    m_type_id_isSet = true;
}

bool OAIGet_corporations_corporation_id_starbases_200_ok::is_type_id_Set() const{
    return m_type_id_isSet;
}

bool OAIGet_corporations_corporation_id_starbases_200_ok::is_type_id_Valid() const{
    return m_type_id_isValid;
}

QDateTime OAIGet_corporations_corporation_id_starbases_200_ok::getUnanchorAt() const {
    return m_unanchor_at;
}
void OAIGet_corporations_corporation_id_starbases_200_ok::setUnanchorAt(const QDateTime &unanchor_at) {
    m_unanchor_at = unanchor_at;
    m_unanchor_at_isSet = true;
}

bool OAIGet_corporations_corporation_id_starbases_200_ok::is_unanchor_at_Set() const{
    return m_unanchor_at_isSet;
}

bool OAIGet_corporations_corporation_id_starbases_200_ok::is_unanchor_at_Valid() const{
    return m_unanchor_at_isValid;
}

bool OAIGet_corporations_corporation_id_starbases_200_ok::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_moon_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_onlined_since_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_reinforced_until_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_starbase_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_state_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_system_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_type_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_unanchor_at_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIGet_corporations_corporation_id_starbases_200_ok::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_starbase_id_isValid && m_system_id_isValid && m_type_id_isValid && true;
}

} // namespace OpenAPI
