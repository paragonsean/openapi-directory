/**
 * EVE Swagger Interface
 * An OpenAPI for EVE Online
 *
 * The version of the OpenAPI document: 0.8.6
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIGet_contracts_public_region_id_200_ok.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIGet_contracts_public_region_id_200_ok::OAIGet_contracts_public_region_id_200_ok(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIGet_contracts_public_region_id_200_ok::OAIGet_contracts_public_region_id_200_ok() {
    this->initializeModel();
}

OAIGet_contracts_public_region_id_200_ok::~OAIGet_contracts_public_region_id_200_ok() {}

void OAIGet_contracts_public_region_id_200_ok::initializeModel() {

    m_buyout_isSet = false;
    m_buyout_isValid = false;

    m_collateral_isSet = false;
    m_collateral_isValid = false;

    m_contract_id_isSet = false;
    m_contract_id_isValid = false;

    m_date_expired_isSet = false;
    m_date_expired_isValid = false;

    m_date_issued_isSet = false;
    m_date_issued_isValid = false;

    m_days_to_complete_isSet = false;
    m_days_to_complete_isValid = false;

    m_end_location_id_isSet = false;
    m_end_location_id_isValid = false;

    m_for_corporation_isSet = false;
    m_for_corporation_isValid = false;

    m_issuer_corporation_id_isSet = false;
    m_issuer_corporation_id_isValid = false;

    m_issuer_id_isSet = false;
    m_issuer_id_isValid = false;

    m_price_isSet = false;
    m_price_isValid = false;

    m_reward_isSet = false;
    m_reward_isValid = false;

    m_start_location_id_isSet = false;
    m_start_location_id_isValid = false;

    m_title_isSet = false;
    m_title_isValid = false;

    m_type_isSet = false;
    m_type_isValid = false;

    m_volume_isSet = false;
    m_volume_isValid = false;
}

void OAIGet_contracts_public_region_id_200_ok::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIGet_contracts_public_region_id_200_ok::fromJsonObject(QJsonObject json) {

    m_buyout_isValid = ::OpenAPI::fromJsonValue(m_buyout, json[QString("buyout")]);
    m_buyout_isSet = !json[QString("buyout")].isNull() && m_buyout_isValid;

    m_collateral_isValid = ::OpenAPI::fromJsonValue(m_collateral, json[QString("collateral")]);
    m_collateral_isSet = !json[QString("collateral")].isNull() && m_collateral_isValid;

    m_contract_id_isValid = ::OpenAPI::fromJsonValue(m_contract_id, json[QString("contract_id")]);
    m_contract_id_isSet = !json[QString("contract_id")].isNull() && m_contract_id_isValid;

    m_date_expired_isValid = ::OpenAPI::fromJsonValue(m_date_expired, json[QString("date_expired")]);
    m_date_expired_isSet = !json[QString("date_expired")].isNull() && m_date_expired_isValid;

    m_date_issued_isValid = ::OpenAPI::fromJsonValue(m_date_issued, json[QString("date_issued")]);
    m_date_issued_isSet = !json[QString("date_issued")].isNull() && m_date_issued_isValid;

    m_days_to_complete_isValid = ::OpenAPI::fromJsonValue(m_days_to_complete, json[QString("days_to_complete")]);
    m_days_to_complete_isSet = !json[QString("days_to_complete")].isNull() && m_days_to_complete_isValid;

    m_end_location_id_isValid = ::OpenAPI::fromJsonValue(m_end_location_id, json[QString("end_location_id")]);
    m_end_location_id_isSet = !json[QString("end_location_id")].isNull() && m_end_location_id_isValid;

    m_for_corporation_isValid = ::OpenAPI::fromJsonValue(m_for_corporation, json[QString("for_corporation")]);
    m_for_corporation_isSet = !json[QString("for_corporation")].isNull() && m_for_corporation_isValid;

    m_issuer_corporation_id_isValid = ::OpenAPI::fromJsonValue(m_issuer_corporation_id, json[QString("issuer_corporation_id")]);
    m_issuer_corporation_id_isSet = !json[QString("issuer_corporation_id")].isNull() && m_issuer_corporation_id_isValid;

    m_issuer_id_isValid = ::OpenAPI::fromJsonValue(m_issuer_id, json[QString("issuer_id")]);
    m_issuer_id_isSet = !json[QString("issuer_id")].isNull() && m_issuer_id_isValid;

    m_price_isValid = ::OpenAPI::fromJsonValue(m_price, json[QString("price")]);
    m_price_isSet = !json[QString("price")].isNull() && m_price_isValid;

    m_reward_isValid = ::OpenAPI::fromJsonValue(m_reward, json[QString("reward")]);
    m_reward_isSet = !json[QString("reward")].isNull() && m_reward_isValid;

    m_start_location_id_isValid = ::OpenAPI::fromJsonValue(m_start_location_id, json[QString("start_location_id")]);
    m_start_location_id_isSet = !json[QString("start_location_id")].isNull() && m_start_location_id_isValid;

    m_title_isValid = ::OpenAPI::fromJsonValue(m_title, json[QString("title")]);
    m_title_isSet = !json[QString("title")].isNull() && m_title_isValid;

    m_type_isValid = ::OpenAPI::fromJsonValue(m_type, json[QString("type")]);
    m_type_isSet = !json[QString("type")].isNull() && m_type_isValid;

    m_volume_isValid = ::OpenAPI::fromJsonValue(m_volume, json[QString("volume")]);
    m_volume_isSet = !json[QString("volume")].isNull() && m_volume_isValid;
}

QString OAIGet_contracts_public_region_id_200_ok::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIGet_contracts_public_region_id_200_ok::asJsonObject() const {
    QJsonObject obj;
    if (m_buyout_isSet) {
        obj.insert(QString("buyout"), ::OpenAPI::toJsonValue(m_buyout));
    }
    if (m_collateral_isSet) {
        obj.insert(QString("collateral"), ::OpenAPI::toJsonValue(m_collateral));
    }
    if (m_contract_id_isSet) {
        obj.insert(QString("contract_id"), ::OpenAPI::toJsonValue(m_contract_id));
    }
    if (m_date_expired_isSet) {
        obj.insert(QString("date_expired"), ::OpenAPI::toJsonValue(m_date_expired));
    }
    if (m_date_issued_isSet) {
        obj.insert(QString("date_issued"), ::OpenAPI::toJsonValue(m_date_issued));
    }
    if (m_days_to_complete_isSet) {
        obj.insert(QString("days_to_complete"), ::OpenAPI::toJsonValue(m_days_to_complete));
    }
    if (m_end_location_id_isSet) {
        obj.insert(QString("end_location_id"), ::OpenAPI::toJsonValue(m_end_location_id));
    }
    if (m_for_corporation_isSet) {
        obj.insert(QString("for_corporation"), ::OpenAPI::toJsonValue(m_for_corporation));
    }
    if (m_issuer_corporation_id_isSet) {
        obj.insert(QString("issuer_corporation_id"), ::OpenAPI::toJsonValue(m_issuer_corporation_id));
    }
    if (m_issuer_id_isSet) {
        obj.insert(QString("issuer_id"), ::OpenAPI::toJsonValue(m_issuer_id));
    }
    if (m_price_isSet) {
        obj.insert(QString("price"), ::OpenAPI::toJsonValue(m_price));
    }
    if (m_reward_isSet) {
        obj.insert(QString("reward"), ::OpenAPI::toJsonValue(m_reward));
    }
    if (m_start_location_id_isSet) {
        obj.insert(QString("start_location_id"), ::OpenAPI::toJsonValue(m_start_location_id));
    }
    if (m_title_isSet) {
        obj.insert(QString("title"), ::OpenAPI::toJsonValue(m_title));
    }
    if (m_type_isSet) {
        obj.insert(QString("type"), ::OpenAPI::toJsonValue(m_type));
    }
    if (m_volume_isSet) {
        obj.insert(QString("volume"), ::OpenAPI::toJsonValue(m_volume));
    }
    return obj;
}

double OAIGet_contracts_public_region_id_200_ok::getBuyout() const {
    return m_buyout;
}
void OAIGet_contracts_public_region_id_200_ok::setBuyout(const double &buyout) {
    m_buyout = buyout;
    m_buyout_isSet = true;
}

bool OAIGet_contracts_public_region_id_200_ok::is_buyout_Set() const{
    return m_buyout_isSet;
}

bool OAIGet_contracts_public_region_id_200_ok::is_buyout_Valid() const{
    return m_buyout_isValid;
}

double OAIGet_contracts_public_region_id_200_ok::getCollateral() const {
    return m_collateral;
}
void OAIGet_contracts_public_region_id_200_ok::setCollateral(const double &collateral) {
    m_collateral = collateral;
    m_collateral_isSet = true;
}

bool OAIGet_contracts_public_region_id_200_ok::is_collateral_Set() const{
    return m_collateral_isSet;
}

bool OAIGet_contracts_public_region_id_200_ok::is_collateral_Valid() const{
    return m_collateral_isValid;
}

qint32 OAIGet_contracts_public_region_id_200_ok::getContractId() const {
    return m_contract_id;
}
void OAIGet_contracts_public_region_id_200_ok::setContractId(const qint32 &contract_id) {
    m_contract_id = contract_id;
    m_contract_id_isSet = true;
}

bool OAIGet_contracts_public_region_id_200_ok::is_contract_id_Set() const{
    return m_contract_id_isSet;
}

bool OAIGet_contracts_public_region_id_200_ok::is_contract_id_Valid() const{
    return m_contract_id_isValid;
}

QDateTime OAIGet_contracts_public_region_id_200_ok::getDateExpired() const {
    return m_date_expired;
}
void OAIGet_contracts_public_region_id_200_ok::setDateExpired(const QDateTime &date_expired) {
    m_date_expired = date_expired;
    m_date_expired_isSet = true;
}

bool OAIGet_contracts_public_region_id_200_ok::is_date_expired_Set() const{
    return m_date_expired_isSet;
}

bool OAIGet_contracts_public_region_id_200_ok::is_date_expired_Valid() const{
    return m_date_expired_isValid;
}

QDateTime OAIGet_contracts_public_region_id_200_ok::getDateIssued() const {
    return m_date_issued;
}
void OAIGet_contracts_public_region_id_200_ok::setDateIssued(const QDateTime &date_issued) {
    m_date_issued = date_issued;
    m_date_issued_isSet = true;
}

bool OAIGet_contracts_public_region_id_200_ok::is_date_issued_Set() const{
    return m_date_issued_isSet;
}

bool OAIGet_contracts_public_region_id_200_ok::is_date_issued_Valid() const{
    return m_date_issued_isValid;
}

qint32 OAIGet_contracts_public_region_id_200_ok::getDaysToComplete() const {
    return m_days_to_complete;
}
void OAIGet_contracts_public_region_id_200_ok::setDaysToComplete(const qint32 &days_to_complete) {
    m_days_to_complete = days_to_complete;
    m_days_to_complete_isSet = true;
}

bool OAIGet_contracts_public_region_id_200_ok::is_days_to_complete_Set() const{
    return m_days_to_complete_isSet;
}

bool OAIGet_contracts_public_region_id_200_ok::is_days_to_complete_Valid() const{
    return m_days_to_complete_isValid;
}

qint64 OAIGet_contracts_public_region_id_200_ok::getEndLocationId() const {
    return m_end_location_id;
}
void OAIGet_contracts_public_region_id_200_ok::setEndLocationId(const qint64 &end_location_id) {
    m_end_location_id = end_location_id;
    m_end_location_id_isSet = true;
}

bool OAIGet_contracts_public_region_id_200_ok::is_end_location_id_Set() const{
    return m_end_location_id_isSet;
}

bool OAIGet_contracts_public_region_id_200_ok::is_end_location_id_Valid() const{
    return m_end_location_id_isValid;
}

bool OAIGet_contracts_public_region_id_200_ok::isForCorporation() const {
    return m_for_corporation;
}
void OAIGet_contracts_public_region_id_200_ok::setForCorporation(const bool &for_corporation) {
    m_for_corporation = for_corporation;
    m_for_corporation_isSet = true;
}

bool OAIGet_contracts_public_region_id_200_ok::is_for_corporation_Set() const{
    return m_for_corporation_isSet;
}

bool OAIGet_contracts_public_region_id_200_ok::is_for_corporation_Valid() const{
    return m_for_corporation_isValid;
}

qint32 OAIGet_contracts_public_region_id_200_ok::getIssuerCorporationId() const {
    return m_issuer_corporation_id;
}
void OAIGet_contracts_public_region_id_200_ok::setIssuerCorporationId(const qint32 &issuer_corporation_id) {
    m_issuer_corporation_id = issuer_corporation_id;
    m_issuer_corporation_id_isSet = true;
}

bool OAIGet_contracts_public_region_id_200_ok::is_issuer_corporation_id_Set() const{
    return m_issuer_corporation_id_isSet;
}

bool OAIGet_contracts_public_region_id_200_ok::is_issuer_corporation_id_Valid() const{
    return m_issuer_corporation_id_isValid;
}

qint32 OAIGet_contracts_public_region_id_200_ok::getIssuerId() const {
    return m_issuer_id;
}
void OAIGet_contracts_public_region_id_200_ok::setIssuerId(const qint32 &issuer_id) {
    m_issuer_id = issuer_id;
    m_issuer_id_isSet = true;
}

bool OAIGet_contracts_public_region_id_200_ok::is_issuer_id_Set() const{
    return m_issuer_id_isSet;
}

bool OAIGet_contracts_public_region_id_200_ok::is_issuer_id_Valid() const{
    return m_issuer_id_isValid;
}

double OAIGet_contracts_public_region_id_200_ok::getPrice() const {
    return m_price;
}
void OAIGet_contracts_public_region_id_200_ok::setPrice(const double &price) {
    m_price = price;
    m_price_isSet = true;
}

bool OAIGet_contracts_public_region_id_200_ok::is_price_Set() const{
    return m_price_isSet;
}

bool OAIGet_contracts_public_region_id_200_ok::is_price_Valid() const{
    return m_price_isValid;
}

double OAIGet_contracts_public_region_id_200_ok::getReward() const {
    return m_reward;
}
void OAIGet_contracts_public_region_id_200_ok::setReward(const double &reward) {
    m_reward = reward;
    m_reward_isSet = true;
}

bool OAIGet_contracts_public_region_id_200_ok::is_reward_Set() const{
    return m_reward_isSet;
}

bool OAIGet_contracts_public_region_id_200_ok::is_reward_Valid() const{
    return m_reward_isValid;
}

qint64 OAIGet_contracts_public_region_id_200_ok::getStartLocationId() const {
    return m_start_location_id;
}
void OAIGet_contracts_public_region_id_200_ok::setStartLocationId(const qint64 &start_location_id) {
    m_start_location_id = start_location_id;
    m_start_location_id_isSet = true;
}

bool OAIGet_contracts_public_region_id_200_ok::is_start_location_id_Set() const{
    return m_start_location_id_isSet;
}

bool OAIGet_contracts_public_region_id_200_ok::is_start_location_id_Valid() const{
    return m_start_location_id_isValid;
}

QString OAIGet_contracts_public_region_id_200_ok::getTitle() const {
    return m_title;
}
void OAIGet_contracts_public_region_id_200_ok::setTitle(const QString &title) {
    m_title = title;
    m_title_isSet = true;
}

bool OAIGet_contracts_public_region_id_200_ok::is_title_Set() const{
    return m_title_isSet;
}

bool OAIGet_contracts_public_region_id_200_ok::is_title_Valid() const{
    return m_title_isValid;
}

QString OAIGet_contracts_public_region_id_200_ok::getType() const {
    return m_type;
}
void OAIGet_contracts_public_region_id_200_ok::setType(const QString &type) {
    m_type = type;
    m_type_isSet = true;
}

bool OAIGet_contracts_public_region_id_200_ok::is_type_Set() const{
    return m_type_isSet;
}

bool OAIGet_contracts_public_region_id_200_ok::is_type_Valid() const{
    return m_type_isValid;
}

double OAIGet_contracts_public_region_id_200_ok::getVolume() const {
    return m_volume;
}
void OAIGet_contracts_public_region_id_200_ok::setVolume(const double &volume) {
    m_volume = volume;
    m_volume_isSet = true;
}

bool OAIGet_contracts_public_region_id_200_ok::is_volume_Set() const{
    return m_volume_isSet;
}

bool OAIGet_contracts_public_region_id_200_ok::is_volume_Valid() const{
    return m_volume_isValid;
}

bool OAIGet_contracts_public_region_id_200_ok::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_buyout_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_collateral_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_contract_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_date_expired_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_date_issued_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_days_to_complete_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_end_location_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_for_corporation_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_issuer_corporation_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_issuer_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_price_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_reward_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_start_location_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_title_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_volume_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIGet_contracts_public_region_id_200_ok::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_contract_id_isValid && m_date_expired_isValid && m_date_issued_isValid && m_issuer_corporation_id_isValid && m_issuer_id_isValid && m_type_isValid && true;
}

} // namespace OpenAPI
