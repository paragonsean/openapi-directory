/**
 * EVE Swagger Interface
 * An OpenAPI for EVE Online
 *
 * The version of the OpenAPI document: 0.8.6
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIGet_characters_character_id_calendar_event_id_ok.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIGet_characters_character_id_calendar_event_id_ok::OAIGet_characters_character_id_calendar_event_id_ok(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIGet_characters_character_id_calendar_event_id_ok::OAIGet_characters_character_id_calendar_event_id_ok() {
    this->initializeModel();
}

OAIGet_characters_character_id_calendar_event_id_ok::~OAIGet_characters_character_id_calendar_event_id_ok() {}

void OAIGet_characters_character_id_calendar_event_id_ok::initializeModel() {

    m_date_isSet = false;
    m_date_isValid = false;

    m_duration_isSet = false;
    m_duration_isValid = false;

    m_event_id_isSet = false;
    m_event_id_isValid = false;

    m_importance_isSet = false;
    m_importance_isValid = false;

    m_owner_id_isSet = false;
    m_owner_id_isValid = false;

    m_owner_name_isSet = false;
    m_owner_name_isValid = false;

    m_owner_type_isSet = false;
    m_owner_type_isValid = false;

    m_response_isSet = false;
    m_response_isValid = false;

    m_text_isSet = false;
    m_text_isValid = false;

    m_title_isSet = false;
    m_title_isValid = false;
}

void OAIGet_characters_character_id_calendar_event_id_ok::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIGet_characters_character_id_calendar_event_id_ok::fromJsonObject(QJsonObject json) {

    m_date_isValid = ::OpenAPI::fromJsonValue(m_date, json[QString("date")]);
    m_date_isSet = !json[QString("date")].isNull() && m_date_isValid;

    m_duration_isValid = ::OpenAPI::fromJsonValue(m_duration, json[QString("duration")]);
    m_duration_isSet = !json[QString("duration")].isNull() && m_duration_isValid;

    m_event_id_isValid = ::OpenAPI::fromJsonValue(m_event_id, json[QString("event_id")]);
    m_event_id_isSet = !json[QString("event_id")].isNull() && m_event_id_isValid;

    m_importance_isValid = ::OpenAPI::fromJsonValue(m_importance, json[QString("importance")]);
    m_importance_isSet = !json[QString("importance")].isNull() && m_importance_isValid;

    m_owner_id_isValid = ::OpenAPI::fromJsonValue(m_owner_id, json[QString("owner_id")]);
    m_owner_id_isSet = !json[QString("owner_id")].isNull() && m_owner_id_isValid;

    m_owner_name_isValid = ::OpenAPI::fromJsonValue(m_owner_name, json[QString("owner_name")]);
    m_owner_name_isSet = !json[QString("owner_name")].isNull() && m_owner_name_isValid;

    m_owner_type_isValid = ::OpenAPI::fromJsonValue(m_owner_type, json[QString("owner_type")]);
    m_owner_type_isSet = !json[QString("owner_type")].isNull() && m_owner_type_isValid;

    m_response_isValid = ::OpenAPI::fromJsonValue(m_response, json[QString("response")]);
    m_response_isSet = !json[QString("response")].isNull() && m_response_isValid;

    m_text_isValid = ::OpenAPI::fromJsonValue(m_text, json[QString("text")]);
    m_text_isSet = !json[QString("text")].isNull() && m_text_isValid;

    m_title_isValid = ::OpenAPI::fromJsonValue(m_title, json[QString("title")]);
    m_title_isSet = !json[QString("title")].isNull() && m_title_isValid;
}

QString OAIGet_characters_character_id_calendar_event_id_ok::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIGet_characters_character_id_calendar_event_id_ok::asJsonObject() const {
    QJsonObject obj;
    if (m_date_isSet) {
        obj.insert(QString("date"), ::OpenAPI::toJsonValue(m_date));
    }
    if (m_duration_isSet) {
        obj.insert(QString("duration"), ::OpenAPI::toJsonValue(m_duration));
    }
    if (m_event_id_isSet) {
        obj.insert(QString("event_id"), ::OpenAPI::toJsonValue(m_event_id));
    }
    if (m_importance_isSet) {
        obj.insert(QString("importance"), ::OpenAPI::toJsonValue(m_importance));
    }
    if (m_owner_id_isSet) {
        obj.insert(QString("owner_id"), ::OpenAPI::toJsonValue(m_owner_id));
    }
    if (m_owner_name_isSet) {
        obj.insert(QString("owner_name"), ::OpenAPI::toJsonValue(m_owner_name));
    }
    if (m_owner_type_isSet) {
        obj.insert(QString("owner_type"), ::OpenAPI::toJsonValue(m_owner_type));
    }
    if (m_response_isSet) {
        obj.insert(QString("response"), ::OpenAPI::toJsonValue(m_response));
    }
    if (m_text_isSet) {
        obj.insert(QString("text"), ::OpenAPI::toJsonValue(m_text));
    }
    if (m_title_isSet) {
        obj.insert(QString("title"), ::OpenAPI::toJsonValue(m_title));
    }
    return obj;
}

QDateTime OAIGet_characters_character_id_calendar_event_id_ok::getDate() const {
    return m_date;
}
void OAIGet_characters_character_id_calendar_event_id_ok::setDate(const QDateTime &date) {
    m_date = date;
    m_date_isSet = true;
}

bool OAIGet_characters_character_id_calendar_event_id_ok::is_date_Set() const{
    return m_date_isSet;
}

bool OAIGet_characters_character_id_calendar_event_id_ok::is_date_Valid() const{
    return m_date_isValid;
}

qint32 OAIGet_characters_character_id_calendar_event_id_ok::getDuration() const {
    return m_duration;
}
void OAIGet_characters_character_id_calendar_event_id_ok::setDuration(const qint32 &duration) {
    m_duration = duration;
    m_duration_isSet = true;
}

bool OAIGet_characters_character_id_calendar_event_id_ok::is_duration_Set() const{
    return m_duration_isSet;
}

bool OAIGet_characters_character_id_calendar_event_id_ok::is_duration_Valid() const{
    return m_duration_isValid;
}

qint32 OAIGet_characters_character_id_calendar_event_id_ok::getEventId() const {
    return m_event_id;
}
void OAIGet_characters_character_id_calendar_event_id_ok::setEventId(const qint32 &event_id) {
    m_event_id = event_id;
    m_event_id_isSet = true;
}

bool OAIGet_characters_character_id_calendar_event_id_ok::is_event_id_Set() const{
    return m_event_id_isSet;
}

bool OAIGet_characters_character_id_calendar_event_id_ok::is_event_id_Valid() const{
    return m_event_id_isValid;
}

qint32 OAIGet_characters_character_id_calendar_event_id_ok::getImportance() const {
    return m_importance;
}
void OAIGet_characters_character_id_calendar_event_id_ok::setImportance(const qint32 &importance) {
    m_importance = importance;
    m_importance_isSet = true;
}

bool OAIGet_characters_character_id_calendar_event_id_ok::is_importance_Set() const{
    return m_importance_isSet;
}

bool OAIGet_characters_character_id_calendar_event_id_ok::is_importance_Valid() const{
    return m_importance_isValid;
}

qint32 OAIGet_characters_character_id_calendar_event_id_ok::getOwnerId() const {
    return m_owner_id;
}
void OAIGet_characters_character_id_calendar_event_id_ok::setOwnerId(const qint32 &owner_id) {
    m_owner_id = owner_id;
    m_owner_id_isSet = true;
}

bool OAIGet_characters_character_id_calendar_event_id_ok::is_owner_id_Set() const{
    return m_owner_id_isSet;
}

bool OAIGet_characters_character_id_calendar_event_id_ok::is_owner_id_Valid() const{
    return m_owner_id_isValid;
}

QString OAIGet_characters_character_id_calendar_event_id_ok::getOwnerName() const {
    return m_owner_name;
}
void OAIGet_characters_character_id_calendar_event_id_ok::setOwnerName(const QString &owner_name) {
    m_owner_name = owner_name;
    m_owner_name_isSet = true;
}

bool OAIGet_characters_character_id_calendar_event_id_ok::is_owner_name_Set() const{
    return m_owner_name_isSet;
}

bool OAIGet_characters_character_id_calendar_event_id_ok::is_owner_name_Valid() const{
    return m_owner_name_isValid;
}

QString OAIGet_characters_character_id_calendar_event_id_ok::getOwnerType() const {
    return m_owner_type;
}
void OAIGet_characters_character_id_calendar_event_id_ok::setOwnerType(const QString &owner_type) {
    m_owner_type = owner_type;
    m_owner_type_isSet = true;
}

bool OAIGet_characters_character_id_calendar_event_id_ok::is_owner_type_Set() const{
    return m_owner_type_isSet;
}

bool OAIGet_characters_character_id_calendar_event_id_ok::is_owner_type_Valid() const{
    return m_owner_type_isValid;
}

QString OAIGet_characters_character_id_calendar_event_id_ok::getResponse() const {
    return m_response;
}
void OAIGet_characters_character_id_calendar_event_id_ok::setResponse(const QString &response) {
    m_response = response;
    m_response_isSet = true;
}

bool OAIGet_characters_character_id_calendar_event_id_ok::is_response_Set() const{
    return m_response_isSet;
}

bool OAIGet_characters_character_id_calendar_event_id_ok::is_response_Valid() const{
    return m_response_isValid;
}

QString OAIGet_characters_character_id_calendar_event_id_ok::getText() const {
    return m_text;
}
void OAIGet_characters_character_id_calendar_event_id_ok::setText(const QString &text) {
    m_text = text;
    m_text_isSet = true;
}

bool OAIGet_characters_character_id_calendar_event_id_ok::is_text_Set() const{
    return m_text_isSet;
}

bool OAIGet_characters_character_id_calendar_event_id_ok::is_text_Valid() const{
    return m_text_isValid;
}

QString OAIGet_characters_character_id_calendar_event_id_ok::getTitle() const {
    return m_title;
}
void OAIGet_characters_character_id_calendar_event_id_ok::setTitle(const QString &title) {
    m_title = title;
    m_title_isSet = true;
}

bool OAIGet_characters_character_id_calendar_event_id_ok::is_title_Set() const{
    return m_title_isSet;
}

bool OAIGet_characters_character_id_calendar_event_id_ok::is_title_Valid() const{
    return m_title_isValid;
}

bool OAIGet_characters_character_id_calendar_event_id_ok::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_date_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_duration_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_event_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_importance_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_owner_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_owner_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_owner_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_response_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_text_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_title_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIGet_characters_character_id_calendar_event_id_ok::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_date_isValid && m_duration_isValid && m_event_id_isValid && m_importance_isValid && m_owner_id_isValid && m_owner_name_isValid && m_owner_type_isValid && m_response_isValid && m_text_isValid && m_title_isValid && true;
}

} // namespace OpenAPI
