/**
 * EVE Swagger Interface
 * An OpenAPI for EVE Online
 *
 * The version of the OpenAPI document: 0.8.6
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#ifndef OAI_OAIFleetsApi_H
#define OAI_OAIFleetsApi_H

#include "OAIHelpers.h"
#include "OAIHttpRequest.h"
#include "OAIServerConfiguration.h"
#include "OAIOauth.h"

#include "OAIBad_request.h"
#include "OAIDelete_fleets_fleet_id_members_member_id_not_found.h"
#include "OAIDelete_fleets_fleet_id_squads_squad_id_not_found.h"
#include "OAIDelete_fleets_fleet_id_wings_wing_id_not_found.h"
#include "OAIError_limited.h"
#include "OAIForbidden.h"
#include "OAIGateway_timeout.h"
#include "OAIGet_characters_character_id_fleet_not_found.h"
#include "OAIGet_characters_character_id_fleet_ok.h"
#include "OAIGet_fleets_fleet_id_members_200_ok.h"
#include "OAIGet_fleets_fleet_id_members_not_found.h"
#include "OAIGet_fleets_fleet_id_not_found.h"
#include "OAIGet_fleets_fleet_id_ok.h"
#include "OAIGet_fleets_fleet_id_wings_200_ok.h"
#include "OAIGet_fleets_fleet_id_wings_not_found.h"
#include "OAIInternal_server_error.h"
#include "OAIPost_fleets_fleet_id_members_invitation.h"
#include "OAIPost_fleets_fleet_id_members_not_found.h"
#include "OAIPost_fleets_fleet_id_members_unprocessable_entity.h"
#include "OAIPost_fleets_fleet_id_wings_created.h"
#include "OAIPost_fleets_fleet_id_wings_not_found.h"
#include "OAIPost_fleets_fleet_id_wings_wing_id_squads_created.h"
#include "OAIPost_fleets_fleet_id_wings_wing_id_squads_not_found.h"
#include "OAIPut_fleets_fleet_id_members_member_id_movement.h"
#include "OAIPut_fleets_fleet_id_members_member_id_not_found.h"
#include "OAIPut_fleets_fleet_id_members_member_id_unprocessable_entity.h"
#include "OAIPut_fleets_fleet_id_new_settings.h"
#include "OAIPut_fleets_fleet_id_not_found.h"
#include "OAIPut_fleets_fleet_id_squads_squad_id_naming.h"
#include "OAIPut_fleets_fleet_id_squads_squad_id_not_found.h"
#include "OAIPut_fleets_fleet_id_wings_wing_id_naming.h"
#include "OAIPut_fleets_fleet_id_wings_wing_id_not_found.h"
#include "OAIService_unavailable.h"
#include "OAIUnauthorized.h"
#include <QString>

#include <QObject>
#include <QByteArray>
#include <QStringList>
#include <QList>
#include <QNetworkAccessManager>

namespace OpenAPI {

class OAIFleetsApi : public QObject {
    Q_OBJECT

public:
    OAIFleetsApi(const int timeOut = 0);
    ~OAIFleetsApi();

    void initializeServerConfigs();
    int setDefaultServerValue(int serverIndex,const QString &operation, const QString &variable,const QString &val);
    void setServerIndex(const QString &operation, int serverIndex);
    void setApiKey(const QString &apiKeyName, const QString &apiKey);
    void setBearerToken(const QString &token);
    void setUsername(const QString &username);
    void setPassword(const QString &password);
    void setTimeOut(const int timeOut);
    void setWorkingDirectory(const QString &path);
    void setNetworkAccessManager(QNetworkAccessManager* manager);
    int addServerConfiguration(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables = QMap<QString, OAIServerVariable>());
    void setNewServerForAllOperations(const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void setNewServer(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void addHeaders(const QString &key, const QString &value);
    void enableRequestCompression();
    void enableResponseCompression();
    void abortRequests();
    QString getParamStylePrefix(const QString &style);
    QString getParamStyleSuffix(const QString &style);
    QString getParamStyleDelimiter(const QString &style, const QString &name, bool isExplode);

    /**
    * @param[in]  fleet_id qint64 [required]
    * @param[in]  member_id qint32 [required]
    * @param[in]  datasource QString [optional]
    * @param[in]  token QString [optional]
    */
    virtual void deleteFleetsFleetIdMembersMemberId(const qint64 &fleet_id, const qint32 &member_id, const ::OpenAPI::OptionalParam<QString> &datasource = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &token = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  fleet_id qint64 [required]
    * @param[in]  squad_id qint64 [required]
    * @param[in]  datasource QString [optional]
    * @param[in]  token QString [optional]
    */
    virtual void deleteFleetsFleetIdSquadsSquadId(const qint64 &fleet_id, const qint64 &squad_id, const ::OpenAPI::OptionalParam<QString> &datasource = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &token = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  fleet_id qint64 [required]
    * @param[in]  wing_id qint64 [required]
    * @param[in]  datasource QString [optional]
    * @param[in]  token QString [optional]
    */
    virtual void deleteFleetsFleetIdWingsWingId(const qint64 &fleet_id, const qint64 &wing_id, const ::OpenAPI::OptionalParam<QString> &datasource = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &token = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  character_id qint32 [required]
    * @param[in]  datasource QString [optional]
    * @param[in]  if_none_match QString [optional]
    * @param[in]  token QString [optional]
    */
    virtual void getCharactersCharacterIdFleet(const qint32 &character_id, const ::OpenAPI::OptionalParam<QString> &datasource = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &if_none_match = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &token = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  fleet_id qint64 [required]
    * @param[in]  datasource QString [optional]
    * @param[in]  if_none_match QString [optional]
    * @param[in]  token QString [optional]
    */
    virtual void getFleetsFleetId(const qint64 &fleet_id, const ::OpenAPI::OptionalParam<QString> &datasource = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &if_none_match = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &token = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  fleet_id qint64 [required]
    * @param[in]  accept_language QString [optional]
    * @param[in]  datasource QString [optional]
    * @param[in]  if_none_match QString [optional]
    * @param[in]  language QString [optional]
    * @param[in]  token QString [optional]
    */
    virtual void getFleetsFleetIdMembers(const qint64 &fleet_id, const ::OpenAPI::OptionalParam<QString> &accept_language = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &datasource = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &if_none_match = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &language = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &token = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  fleet_id qint64 [required]
    * @param[in]  accept_language QString [optional]
    * @param[in]  datasource QString [optional]
    * @param[in]  if_none_match QString [optional]
    * @param[in]  language QString [optional]
    * @param[in]  token QString [optional]
    */
    virtual void getFleetsFleetIdWings(const qint64 &fleet_id, const ::OpenAPI::OptionalParam<QString> &accept_language = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &datasource = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &if_none_match = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &language = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &token = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  fleet_id qint64 [required]
    * @param[in]  invitation OAIPost_fleets_fleet_id_members_invitation [required]
    * @param[in]  datasource QString [optional]
    * @param[in]  token QString [optional]
    */
    virtual void postFleetsFleetIdMembers(const qint64 &fleet_id, const OAIPost_fleets_fleet_id_members_invitation &invitation, const ::OpenAPI::OptionalParam<QString> &datasource = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &token = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  fleet_id qint64 [required]
    * @param[in]  datasource QString [optional]
    * @param[in]  token QString [optional]
    */
    virtual void postFleetsFleetIdWings(const qint64 &fleet_id, const ::OpenAPI::OptionalParam<QString> &datasource = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &token = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  fleet_id qint64 [required]
    * @param[in]  wing_id qint64 [required]
    * @param[in]  datasource QString [optional]
    * @param[in]  token QString [optional]
    */
    virtual void postFleetsFleetIdWingsWingIdSquads(const qint64 &fleet_id, const qint64 &wing_id, const ::OpenAPI::OptionalParam<QString> &datasource = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &token = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  fleet_id qint64 [required]
    * @param[in]  new_settings OAIPut_fleets_fleet_id_new_settings [required]
    * @param[in]  datasource QString [optional]
    * @param[in]  token QString [optional]
    */
    virtual void putFleetsFleetId(const qint64 &fleet_id, const OAIPut_fleets_fleet_id_new_settings &new_settings, const ::OpenAPI::OptionalParam<QString> &datasource = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &token = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  fleet_id qint64 [required]
    * @param[in]  member_id qint32 [required]
    * @param[in]  movement OAIPut_fleets_fleet_id_members_member_id_movement [required]
    * @param[in]  datasource QString [optional]
    * @param[in]  token QString [optional]
    */
    virtual void putFleetsFleetIdMembersMemberId(const qint64 &fleet_id, const qint32 &member_id, const OAIPut_fleets_fleet_id_members_member_id_movement &movement, const ::OpenAPI::OptionalParam<QString> &datasource = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &token = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  fleet_id qint64 [required]
    * @param[in]  squad_id qint64 [required]
    * @param[in]  naming OAIPut_fleets_fleet_id_squads_squad_id_naming [required]
    * @param[in]  datasource QString [optional]
    * @param[in]  token QString [optional]
    */
    virtual void putFleetsFleetIdSquadsSquadId(const qint64 &fleet_id, const qint64 &squad_id, const OAIPut_fleets_fleet_id_squads_squad_id_naming &naming, const ::OpenAPI::OptionalParam<QString> &datasource = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &token = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  fleet_id qint64 [required]
    * @param[in]  wing_id qint64 [required]
    * @param[in]  naming OAIPut_fleets_fleet_id_wings_wing_id_naming [required]
    * @param[in]  datasource QString [optional]
    * @param[in]  token QString [optional]
    */
    virtual void putFleetsFleetIdWingsWingId(const qint64 &fleet_id, const qint64 &wing_id, const OAIPut_fleets_fleet_id_wings_wing_id_naming &naming, const ::OpenAPI::OptionalParam<QString> &datasource = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &token = ::OpenAPI::OptionalParam<QString>());


private:
    QMap<QString,int> _serverIndices;
    QMap<QString,QList<OAIServerConfiguration>> _serverConfigs;
    QMap<QString, QString> _apiKeys;
    QString _bearerToken;
    QString _username;
    QString _password;
    int _timeOut;
    QString _workingDirectory;
    QNetworkAccessManager* _manager;
    QMap<QString, QString> _defaultHeaders;
    bool _isResponseCompressionEnabled;
    bool _isRequestCompressionEnabled;
    OAIHttpRequestInput _latestInput;
    OAIHttpRequestWorker *_latestWorker;
    QStringList _latestScope;
    OauthCode _authFlow;
    OauthImplicit _implicitFlow;
    OauthCredentials _credentialFlow;
    OauthPassword _passwordFlow;
    int _OauthMethod = 0;

    void deleteFleetsFleetIdMembersMemberIdCallback(OAIHttpRequestWorker *worker);
    void deleteFleetsFleetIdSquadsSquadIdCallback(OAIHttpRequestWorker *worker);
    void deleteFleetsFleetIdWingsWingIdCallback(OAIHttpRequestWorker *worker);
    void getCharactersCharacterIdFleetCallback(OAIHttpRequestWorker *worker);
    void getFleetsFleetIdCallback(OAIHttpRequestWorker *worker);
    void getFleetsFleetIdMembersCallback(OAIHttpRequestWorker *worker);
    void getFleetsFleetIdWingsCallback(OAIHttpRequestWorker *worker);
    void postFleetsFleetIdMembersCallback(OAIHttpRequestWorker *worker);
    void postFleetsFleetIdWingsCallback(OAIHttpRequestWorker *worker);
    void postFleetsFleetIdWingsWingIdSquadsCallback(OAIHttpRequestWorker *worker);
    void putFleetsFleetIdCallback(OAIHttpRequestWorker *worker);
    void putFleetsFleetIdMembersMemberIdCallback(OAIHttpRequestWorker *worker);
    void putFleetsFleetIdSquadsSquadIdCallback(OAIHttpRequestWorker *worker);
    void putFleetsFleetIdWingsWingIdCallback(OAIHttpRequestWorker *worker);

Q_SIGNALS:

    void deleteFleetsFleetIdMembersMemberIdSignal();
    void deleteFleetsFleetIdSquadsSquadIdSignal();
    void deleteFleetsFleetIdWingsWingIdSignal();
    void getCharactersCharacterIdFleetSignal(OAIGet_characters_character_id_fleet_ok summary);
    void getFleetsFleetIdSignal(OAIGet_fleets_fleet_id_ok summary);
    void getFleetsFleetIdMembersSignal(QList<OAIGet_fleets_fleet_id_members_200_ok> summary);
    void getFleetsFleetIdWingsSignal(QList<OAIGet_fleets_fleet_id_wings_200_ok> summary);
    void postFleetsFleetIdMembersSignal();
    void postFleetsFleetIdWingsSignal(OAIPost_fleets_fleet_id_wings_created summary);
    void postFleetsFleetIdWingsWingIdSquadsSignal(OAIPost_fleets_fleet_id_wings_wing_id_squads_created summary);
    void putFleetsFleetIdSignal();
    void putFleetsFleetIdMembersMemberIdSignal();
    void putFleetsFleetIdSquadsSquadIdSignal();
    void putFleetsFleetIdWingsWingIdSignal();


    void deleteFleetsFleetIdMembersMemberIdSignalFull(OAIHttpRequestWorker *worker);
    void deleteFleetsFleetIdSquadsSquadIdSignalFull(OAIHttpRequestWorker *worker);
    void deleteFleetsFleetIdWingsWingIdSignalFull(OAIHttpRequestWorker *worker);
    void getCharactersCharacterIdFleetSignalFull(OAIHttpRequestWorker *worker, OAIGet_characters_character_id_fleet_ok summary);
    void getFleetsFleetIdSignalFull(OAIHttpRequestWorker *worker, OAIGet_fleets_fleet_id_ok summary);
    void getFleetsFleetIdMembersSignalFull(OAIHttpRequestWorker *worker, QList<OAIGet_fleets_fleet_id_members_200_ok> summary);
    void getFleetsFleetIdWingsSignalFull(OAIHttpRequestWorker *worker, QList<OAIGet_fleets_fleet_id_wings_200_ok> summary);
    void postFleetsFleetIdMembersSignalFull(OAIHttpRequestWorker *worker);
    void postFleetsFleetIdWingsSignalFull(OAIHttpRequestWorker *worker, OAIPost_fleets_fleet_id_wings_created summary);
    void postFleetsFleetIdWingsWingIdSquadsSignalFull(OAIHttpRequestWorker *worker, OAIPost_fleets_fleet_id_wings_wing_id_squads_created summary);
    void putFleetsFleetIdSignalFull(OAIHttpRequestWorker *worker);
    void putFleetsFleetIdMembersMemberIdSignalFull(OAIHttpRequestWorker *worker);
    void putFleetsFleetIdSquadsSquadIdSignalFull(OAIHttpRequestWorker *worker);
    void putFleetsFleetIdWingsWingIdSignalFull(OAIHttpRequestWorker *worker);

    Q_DECL_DEPRECATED_X("Use deleteFleetsFleetIdMembersMemberIdSignalError() instead")
    void deleteFleetsFleetIdMembersMemberIdSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void deleteFleetsFleetIdMembersMemberIdSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use deleteFleetsFleetIdSquadsSquadIdSignalError() instead")
    void deleteFleetsFleetIdSquadsSquadIdSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void deleteFleetsFleetIdSquadsSquadIdSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use deleteFleetsFleetIdWingsWingIdSignalError() instead")
    void deleteFleetsFleetIdWingsWingIdSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void deleteFleetsFleetIdWingsWingIdSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getCharactersCharacterIdFleetSignalError() instead")
    void getCharactersCharacterIdFleetSignalE(OAIGet_characters_character_id_fleet_ok summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getCharactersCharacterIdFleetSignalError(OAIGet_characters_character_id_fleet_ok summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getFleetsFleetIdSignalError() instead")
    void getFleetsFleetIdSignalE(OAIGet_fleets_fleet_id_ok summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getFleetsFleetIdSignalError(OAIGet_fleets_fleet_id_ok summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getFleetsFleetIdMembersSignalError() instead")
    void getFleetsFleetIdMembersSignalE(QList<OAIGet_fleets_fleet_id_members_200_ok> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getFleetsFleetIdMembersSignalError(QList<OAIGet_fleets_fleet_id_members_200_ok> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getFleetsFleetIdWingsSignalError() instead")
    void getFleetsFleetIdWingsSignalE(QList<OAIGet_fleets_fleet_id_wings_200_ok> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getFleetsFleetIdWingsSignalError(QList<OAIGet_fleets_fleet_id_wings_200_ok> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use postFleetsFleetIdMembersSignalError() instead")
    void postFleetsFleetIdMembersSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void postFleetsFleetIdMembersSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use postFleetsFleetIdWingsSignalError() instead")
    void postFleetsFleetIdWingsSignalE(OAIPost_fleets_fleet_id_wings_created summary, QNetworkReply::NetworkError error_type, QString error_str);
    void postFleetsFleetIdWingsSignalError(OAIPost_fleets_fleet_id_wings_created summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use postFleetsFleetIdWingsWingIdSquadsSignalError() instead")
    void postFleetsFleetIdWingsWingIdSquadsSignalE(OAIPost_fleets_fleet_id_wings_wing_id_squads_created summary, QNetworkReply::NetworkError error_type, QString error_str);
    void postFleetsFleetIdWingsWingIdSquadsSignalError(OAIPost_fleets_fleet_id_wings_wing_id_squads_created summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use putFleetsFleetIdSignalError() instead")
    void putFleetsFleetIdSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void putFleetsFleetIdSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use putFleetsFleetIdMembersMemberIdSignalError() instead")
    void putFleetsFleetIdMembersMemberIdSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void putFleetsFleetIdMembersMemberIdSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use putFleetsFleetIdSquadsSquadIdSignalError() instead")
    void putFleetsFleetIdSquadsSquadIdSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void putFleetsFleetIdSquadsSquadIdSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use putFleetsFleetIdWingsWingIdSignalError() instead")
    void putFleetsFleetIdWingsWingIdSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void putFleetsFleetIdWingsWingIdSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);

    Q_DECL_DEPRECATED_X("Use deleteFleetsFleetIdMembersMemberIdSignalErrorFull() instead")
    void deleteFleetsFleetIdMembersMemberIdSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void deleteFleetsFleetIdMembersMemberIdSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use deleteFleetsFleetIdSquadsSquadIdSignalErrorFull() instead")
    void deleteFleetsFleetIdSquadsSquadIdSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void deleteFleetsFleetIdSquadsSquadIdSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use deleteFleetsFleetIdWingsWingIdSignalErrorFull() instead")
    void deleteFleetsFleetIdWingsWingIdSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void deleteFleetsFleetIdWingsWingIdSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getCharactersCharacterIdFleetSignalErrorFull() instead")
    void getCharactersCharacterIdFleetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getCharactersCharacterIdFleetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getFleetsFleetIdSignalErrorFull() instead")
    void getFleetsFleetIdSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getFleetsFleetIdSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getFleetsFleetIdMembersSignalErrorFull() instead")
    void getFleetsFleetIdMembersSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getFleetsFleetIdMembersSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getFleetsFleetIdWingsSignalErrorFull() instead")
    void getFleetsFleetIdWingsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getFleetsFleetIdWingsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use postFleetsFleetIdMembersSignalErrorFull() instead")
    void postFleetsFleetIdMembersSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void postFleetsFleetIdMembersSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use postFleetsFleetIdWingsSignalErrorFull() instead")
    void postFleetsFleetIdWingsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void postFleetsFleetIdWingsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use postFleetsFleetIdWingsWingIdSquadsSignalErrorFull() instead")
    void postFleetsFleetIdWingsWingIdSquadsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void postFleetsFleetIdWingsWingIdSquadsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use putFleetsFleetIdSignalErrorFull() instead")
    void putFleetsFleetIdSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void putFleetsFleetIdSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use putFleetsFleetIdMembersMemberIdSignalErrorFull() instead")
    void putFleetsFleetIdMembersMemberIdSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void putFleetsFleetIdMembersMemberIdSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use putFleetsFleetIdSquadsSquadIdSignalErrorFull() instead")
    void putFleetsFleetIdSquadsSquadIdSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void putFleetsFleetIdSquadsSquadIdSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use putFleetsFleetIdWingsWingIdSignalErrorFull() instead")
    void putFleetsFleetIdWingsWingIdSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void putFleetsFleetIdWingsWingIdSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);

    void abortRequestsSignal();
    void allPendingRequestsCompleted();

public Q_SLOTS:
    void tokenAvailable();
};

} // namespace OpenAPI
#endif
