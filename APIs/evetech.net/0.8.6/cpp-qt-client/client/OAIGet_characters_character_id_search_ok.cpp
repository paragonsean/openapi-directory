/**
 * EVE Swagger Interface
 * An OpenAPI for EVE Online
 *
 * The version of the OpenAPI document: 0.8.6
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIGet_characters_character_id_search_ok.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIGet_characters_character_id_search_ok::OAIGet_characters_character_id_search_ok(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIGet_characters_character_id_search_ok::OAIGet_characters_character_id_search_ok() {
    this->initializeModel();
}

OAIGet_characters_character_id_search_ok::~OAIGet_characters_character_id_search_ok() {}

void OAIGet_characters_character_id_search_ok::initializeModel() {

    m_agent_isSet = false;
    m_agent_isValid = false;

    m_alliance_isSet = false;
    m_alliance_isValid = false;

    m_character_isSet = false;
    m_character_isValid = false;

    m_constellation_isSet = false;
    m_constellation_isValid = false;

    m_corporation_isSet = false;
    m_corporation_isValid = false;

    m_faction_isSet = false;
    m_faction_isValid = false;

    m_inventory_type_isSet = false;
    m_inventory_type_isValid = false;

    m_region_isSet = false;
    m_region_isValid = false;

    m_solar_system_isSet = false;
    m_solar_system_isValid = false;

    m_station_isSet = false;
    m_station_isValid = false;

    m_structure_isSet = false;
    m_structure_isValid = false;
}

void OAIGet_characters_character_id_search_ok::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIGet_characters_character_id_search_ok::fromJsonObject(QJsonObject json) {

    m_agent_isValid = ::OpenAPI::fromJsonValue(m_agent, json[QString("agent")]);
    m_agent_isSet = !json[QString("agent")].isNull() && m_agent_isValid;

    m_alliance_isValid = ::OpenAPI::fromJsonValue(m_alliance, json[QString("alliance")]);
    m_alliance_isSet = !json[QString("alliance")].isNull() && m_alliance_isValid;

    m_character_isValid = ::OpenAPI::fromJsonValue(m_character, json[QString("character")]);
    m_character_isSet = !json[QString("character")].isNull() && m_character_isValid;

    m_constellation_isValid = ::OpenAPI::fromJsonValue(m_constellation, json[QString("constellation")]);
    m_constellation_isSet = !json[QString("constellation")].isNull() && m_constellation_isValid;

    m_corporation_isValid = ::OpenAPI::fromJsonValue(m_corporation, json[QString("corporation")]);
    m_corporation_isSet = !json[QString("corporation")].isNull() && m_corporation_isValid;

    m_faction_isValid = ::OpenAPI::fromJsonValue(m_faction, json[QString("faction")]);
    m_faction_isSet = !json[QString("faction")].isNull() && m_faction_isValid;

    m_inventory_type_isValid = ::OpenAPI::fromJsonValue(m_inventory_type, json[QString("inventory_type")]);
    m_inventory_type_isSet = !json[QString("inventory_type")].isNull() && m_inventory_type_isValid;

    m_region_isValid = ::OpenAPI::fromJsonValue(m_region, json[QString("region")]);
    m_region_isSet = !json[QString("region")].isNull() && m_region_isValid;

    m_solar_system_isValid = ::OpenAPI::fromJsonValue(m_solar_system, json[QString("solar_system")]);
    m_solar_system_isSet = !json[QString("solar_system")].isNull() && m_solar_system_isValid;

    m_station_isValid = ::OpenAPI::fromJsonValue(m_station, json[QString("station")]);
    m_station_isSet = !json[QString("station")].isNull() && m_station_isValid;

    m_structure_isValid = ::OpenAPI::fromJsonValue(m_structure, json[QString("structure")]);
    m_structure_isSet = !json[QString("structure")].isNull() && m_structure_isValid;
}

QString OAIGet_characters_character_id_search_ok::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIGet_characters_character_id_search_ok::asJsonObject() const {
    QJsonObject obj;
    if (m_agent.size() > 0) {
        obj.insert(QString("agent"), ::OpenAPI::toJsonValue(m_agent));
    }
    if (m_alliance.size() > 0) {
        obj.insert(QString("alliance"), ::OpenAPI::toJsonValue(m_alliance));
    }
    if (m_character.size() > 0) {
        obj.insert(QString("character"), ::OpenAPI::toJsonValue(m_character));
    }
    if (m_constellation.size() > 0) {
        obj.insert(QString("constellation"), ::OpenAPI::toJsonValue(m_constellation));
    }
    if (m_corporation.size() > 0) {
        obj.insert(QString("corporation"), ::OpenAPI::toJsonValue(m_corporation));
    }
    if (m_faction.size() > 0) {
        obj.insert(QString("faction"), ::OpenAPI::toJsonValue(m_faction));
    }
    if (m_inventory_type.size() > 0) {
        obj.insert(QString("inventory_type"), ::OpenAPI::toJsonValue(m_inventory_type));
    }
    if (m_region.size() > 0) {
        obj.insert(QString("region"), ::OpenAPI::toJsonValue(m_region));
    }
    if (m_solar_system.size() > 0) {
        obj.insert(QString("solar_system"), ::OpenAPI::toJsonValue(m_solar_system));
    }
    if (m_station.size() > 0) {
        obj.insert(QString("station"), ::OpenAPI::toJsonValue(m_station));
    }
    if (m_structure.size() > 0) {
        obj.insert(QString("structure"), ::OpenAPI::toJsonValue(m_structure));
    }
    return obj;
}

QList<qint32> OAIGet_characters_character_id_search_ok::getAgent() const {
    return m_agent;
}
void OAIGet_characters_character_id_search_ok::setAgent(const QList<qint32> &agent) {
    m_agent = agent;
    m_agent_isSet = true;
}

bool OAIGet_characters_character_id_search_ok::is_agent_Set() const{
    return m_agent_isSet;
}

bool OAIGet_characters_character_id_search_ok::is_agent_Valid() const{
    return m_agent_isValid;
}

QList<qint32> OAIGet_characters_character_id_search_ok::getAlliance() const {
    return m_alliance;
}
void OAIGet_characters_character_id_search_ok::setAlliance(const QList<qint32> &alliance) {
    m_alliance = alliance;
    m_alliance_isSet = true;
}

bool OAIGet_characters_character_id_search_ok::is_alliance_Set() const{
    return m_alliance_isSet;
}

bool OAIGet_characters_character_id_search_ok::is_alliance_Valid() const{
    return m_alliance_isValid;
}

QList<qint32> OAIGet_characters_character_id_search_ok::getCharacter() const {
    return m_character;
}
void OAIGet_characters_character_id_search_ok::setCharacter(const QList<qint32> &character) {
    m_character = character;
    m_character_isSet = true;
}

bool OAIGet_characters_character_id_search_ok::is_character_Set() const{
    return m_character_isSet;
}

bool OAIGet_characters_character_id_search_ok::is_character_Valid() const{
    return m_character_isValid;
}

QList<qint32> OAIGet_characters_character_id_search_ok::getConstellation() const {
    return m_constellation;
}
void OAIGet_characters_character_id_search_ok::setConstellation(const QList<qint32> &constellation) {
    m_constellation = constellation;
    m_constellation_isSet = true;
}

bool OAIGet_characters_character_id_search_ok::is_constellation_Set() const{
    return m_constellation_isSet;
}

bool OAIGet_characters_character_id_search_ok::is_constellation_Valid() const{
    return m_constellation_isValid;
}

QList<qint32> OAIGet_characters_character_id_search_ok::getCorporation() const {
    return m_corporation;
}
void OAIGet_characters_character_id_search_ok::setCorporation(const QList<qint32> &corporation) {
    m_corporation = corporation;
    m_corporation_isSet = true;
}

bool OAIGet_characters_character_id_search_ok::is_corporation_Set() const{
    return m_corporation_isSet;
}

bool OAIGet_characters_character_id_search_ok::is_corporation_Valid() const{
    return m_corporation_isValid;
}

QList<qint32> OAIGet_characters_character_id_search_ok::getFaction() const {
    return m_faction;
}
void OAIGet_characters_character_id_search_ok::setFaction(const QList<qint32> &faction) {
    m_faction = faction;
    m_faction_isSet = true;
}

bool OAIGet_characters_character_id_search_ok::is_faction_Set() const{
    return m_faction_isSet;
}

bool OAIGet_characters_character_id_search_ok::is_faction_Valid() const{
    return m_faction_isValid;
}

QList<qint32> OAIGet_characters_character_id_search_ok::getInventoryType() const {
    return m_inventory_type;
}
void OAIGet_characters_character_id_search_ok::setInventoryType(const QList<qint32> &inventory_type) {
    m_inventory_type = inventory_type;
    m_inventory_type_isSet = true;
}

bool OAIGet_characters_character_id_search_ok::is_inventory_type_Set() const{
    return m_inventory_type_isSet;
}

bool OAIGet_characters_character_id_search_ok::is_inventory_type_Valid() const{
    return m_inventory_type_isValid;
}

QList<qint32> OAIGet_characters_character_id_search_ok::getRegion() const {
    return m_region;
}
void OAIGet_characters_character_id_search_ok::setRegion(const QList<qint32> &region) {
    m_region = region;
    m_region_isSet = true;
}

bool OAIGet_characters_character_id_search_ok::is_region_Set() const{
    return m_region_isSet;
}

bool OAIGet_characters_character_id_search_ok::is_region_Valid() const{
    return m_region_isValid;
}

QList<qint32> OAIGet_characters_character_id_search_ok::getSolarSystem() const {
    return m_solar_system;
}
void OAIGet_characters_character_id_search_ok::setSolarSystem(const QList<qint32> &solar_system) {
    m_solar_system = solar_system;
    m_solar_system_isSet = true;
}

bool OAIGet_characters_character_id_search_ok::is_solar_system_Set() const{
    return m_solar_system_isSet;
}

bool OAIGet_characters_character_id_search_ok::is_solar_system_Valid() const{
    return m_solar_system_isValid;
}

QList<qint32> OAIGet_characters_character_id_search_ok::getStation() const {
    return m_station;
}
void OAIGet_characters_character_id_search_ok::setStation(const QList<qint32> &station) {
    m_station = station;
    m_station_isSet = true;
}

bool OAIGet_characters_character_id_search_ok::is_station_Set() const{
    return m_station_isSet;
}

bool OAIGet_characters_character_id_search_ok::is_station_Valid() const{
    return m_station_isValid;
}

QList<qint64> OAIGet_characters_character_id_search_ok::getStructure() const {
    return m_structure;
}
void OAIGet_characters_character_id_search_ok::setStructure(const QList<qint64> &structure) {
    m_structure = structure;
    m_structure_isSet = true;
}

bool OAIGet_characters_character_id_search_ok::is_structure_Set() const{
    return m_structure_isSet;
}

bool OAIGet_characters_character_id_search_ok::is_structure_Valid() const{
    return m_structure_isValid;
}

bool OAIGet_characters_character_id_search_ok::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_agent.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_alliance.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_character.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_constellation.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_corporation.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_faction.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_inventory_type.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_region.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_solar_system.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_station.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_structure.size() > 0) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIGet_characters_character_id_search_ok::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
