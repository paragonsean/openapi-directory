/**
 * EVE Swagger Interface
 * An OpenAPI for EVE Online
 *
 * The version of the OpenAPI document: 0.8.6
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIGet_universe_categories_category_id_ok.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIGet_universe_categories_category_id_ok::OAIGet_universe_categories_category_id_ok(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIGet_universe_categories_category_id_ok::OAIGet_universe_categories_category_id_ok() {
    this->initializeModel();
}

OAIGet_universe_categories_category_id_ok::~OAIGet_universe_categories_category_id_ok() {}

void OAIGet_universe_categories_category_id_ok::initializeModel() {

    m_category_id_isSet = false;
    m_category_id_isValid = false;

    m_groups_isSet = false;
    m_groups_isValid = false;

    m_name_isSet = false;
    m_name_isValid = false;

    m_published_isSet = false;
    m_published_isValid = false;
}

void OAIGet_universe_categories_category_id_ok::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIGet_universe_categories_category_id_ok::fromJsonObject(QJsonObject json) {

    m_category_id_isValid = ::OpenAPI::fromJsonValue(m_category_id, json[QString("category_id")]);
    m_category_id_isSet = !json[QString("category_id")].isNull() && m_category_id_isValid;

    m_groups_isValid = ::OpenAPI::fromJsonValue(m_groups, json[QString("groups")]);
    m_groups_isSet = !json[QString("groups")].isNull() && m_groups_isValid;

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("name")]);
    m_name_isSet = !json[QString("name")].isNull() && m_name_isValid;

    m_published_isValid = ::OpenAPI::fromJsonValue(m_published, json[QString("published")]);
    m_published_isSet = !json[QString("published")].isNull() && m_published_isValid;
}

QString OAIGet_universe_categories_category_id_ok::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIGet_universe_categories_category_id_ok::asJsonObject() const {
    QJsonObject obj;
    if (m_category_id_isSet) {
        obj.insert(QString("category_id"), ::OpenAPI::toJsonValue(m_category_id));
    }
    if (m_groups.size() > 0) {
        obj.insert(QString("groups"), ::OpenAPI::toJsonValue(m_groups));
    }
    if (m_name_isSet) {
        obj.insert(QString("name"), ::OpenAPI::toJsonValue(m_name));
    }
    if (m_published_isSet) {
        obj.insert(QString("published"), ::OpenAPI::toJsonValue(m_published));
    }
    return obj;
}

qint32 OAIGet_universe_categories_category_id_ok::getCategoryId() const {
    return m_category_id;
}
void OAIGet_universe_categories_category_id_ok::setCategoryId(const qint32 &category_id) {
    m_category_id = category_id;
    m_category_id_isSet = true;
}

bool OAIGet_universe_categories_category_id_ok::is_category_id_Set() const{
    return m_category_id_isSet;
}

bool OAIGet_universe_categories_category_id_ok::is_category_id_Valid() const{
    return m_category_id_isValid;
}

QList<qint32> OAIGet_universe_categories_category_id_ok::getGroups() const {
    return m_groups;
}
void OAIGet_universe_categories_category_id_ok::setGroups(const QList<qint32> &groups) {
    m_groups = groups;
    m_groups_isSet = true;
}

bool OAIGet_universe_categories_category_id_ok::is_groups_Set() const{
    return m_groups_isSet;
}

bool OAIGet_universe_categories_category_id_ok::is_groups_Valid() const{
    return m_groups_isValid;
}

QString OAIGet_universe_categories_category_id_ok::getName() const {
    return m_name;
}
void OAIGet_universe_categories_category_id_ok::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAIGet_universe_categories_category_id_ok::is_name_Set() const{
    return m_name_isSet;
}

bool OAIGet_universe_categories_category_id_ok::is_name_Valid() const{
    return m_name_isValid;
}

bool OAIGet_universe_categories_category_id_ok::isPublished() const {
    return m_published;
}
void OAIGet_universe_categories_category_id_ok::setPublished(const bool &published) {
    m_published = published;
    m_published_isSet = true;
}

bool OAIGet_universe_categories_category_id_ok::is_published_Set() const{
    return m_published_isSet;
}

bool OAIGet_universe_categories_category_id_ok::is_published_Valid() const{
    return m_published_isValid;
}

bool OAIGet_universe_categories_category_id_ok::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_category_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_groups.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_published_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIGet_universe_categories_category_id_ok::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_category_id_isValid && m_groups_isValid && m_name_isValid && m_published_isValid && true;
}

} // namespace OpenAPI
