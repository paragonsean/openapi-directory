/**
 * EVE Swagger Interface
 * An OpenAPI for EVE Online
 *
 * The version of the OpenAPI document: 0.8.6
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIGet_characters_character_id_stats_combat.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIGet_characters_character_id_stats_combat::OAIGet_characters_character_id_stats_combat(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIGet_characters_character_id_stats_combat::OAIGet_characters_character_id_stats_combat() {
    this->initializeModel();
}

OAIGet_characters_character_id_stats_combat::~OAIGet_characters_character_id_stats_combat() {}

void OAIGet_characters_character_id_stats_combat::initializeModel() {

    m_cap_drainedby_npc_isSet = false;
    m_cap_drainedby_npc_isValid = false;

    m_cap_drainedby_pc_isSet = false;
    m_cap_drainedby_pc_isValid = false;

    m_cap_draining_pc_isSet = false;
    m_cap_draining_pc_isValid = false;

    m_criminal_flag_set_isSet = false;
    m_criminal_flag_set_isValid = false;

    m_damage_from_np_cs_amount_isSet = false;
    m_damage_from_np_cs_amount_isValid = false;

    m_damage_from_np_cs_num_shots_isSet = false;
    m_damage_from_np_cs_num_shots_isValid = false;

    m_damage_from_players_bomb_amount_isSet = false;
    m_damage_from_players_bomb_amount_isValid = false;

    m_damage_from_players_bomb_num_shots_isSet = false;
    m_damage_from_players_bomb_num_shots_isValid = false;

    m_damage_from_players_combat_drone_amount_isSet = false;
    m_damage_from_players_combat_drone_amount_isValid = false;

    m_damage_from_players_combat_drone_num_shots_isSet = false;
    m_damage_from_players_combat_drone_num_shots_isValid = false;

    m_damage_from_players_energy_amount_isSet = false;
    m_damage_from_players_energy_amount_isValid = false;

    m_damage_from_players_energy_num_shots_isSet = false;
    m_damage_from_players_energy_num_shots_isValid = false;

    m_damage_from_players_fighter_bomber_amount_isSet = false;
    m_damage_from_players_fighter_bomber_amount_isValid = false;

    m_damage_from_players_fighter_bomber_num_shots_isSet = false;
    m_damage_from_players_fighter_bomber_num_shots_isValid = false;

    m_damage_from_players_fighter_drone_amount_isSet = false;
    m_damage_from_players_fighter_drone_amount_isValid = false;

    m_damage_from_players_fighter_drone_num_shots_isSet = false;
    m_damage_from_players_fighter_drone_num_shots_isValid = false;

    m_damage_from_players_hybrid_amount_isSet = false;
    m_damage_from_players_hybrid_amount_isValid = false;

    m_damage_from_players_hybrid_num_shots_isSet = false;
    m_damage_from_players_hybrid_num_shots_isValid = false;

    m_damage_from_players_missile_amount_isSet = false;
    m_damage_from_players_missile_amount_isValid = false;

    m_damage_from_players_missile_num_shots_isSet = false;
    m_damage_from_players_missile_num_shots_isValid = false;

    m_damage_from_players_projectile_amount_isSet = false;
    m_damage_from_players_projectile_amount_isValid = false;

    m_damage_from_players_projectile_num_shots_isSet = false;
    m_damage_from_players_projectile_num_shots_isValid = false;

    m_damage_from_players_smart_bomb_amount_isSet = false;
    m_damage_from_players_smart_bomb_amount_isValid = false;

    m_damage_from_players_smart_bomb_num_shots_isSet = false;
    m_damage_from_players_smart_bomb_num_shots_isValid = false;

    m_damage_from_players_super_amount_isSet = false;
    m_damage_from_players_super_amount_isValid = false;

    m_damage_from_players_super_num_shots_isSet = false;
    m_damage_from_players_super_num_shots_isValid = false;

    m_damage_from_structures_total_amount_isSet = false;
    m_damage_from_structures_total_amount_isValid = false;

    m_damage_from_structures_total_num_shots_isSet = false;
    m_damage_from_structures_total_num_shots_isValid = false;

    m_damage_to_players_bomb_amount_isSet = false;
    m_damage_to_players_bomb_amount_isValid = false;

    m_damage_to_players_bomb_num_shots_isSet = false;
    m_damage_to_players_bomb_num_shots_isValid = false;

    m_damage_to_players_combat_drone_amount_isSet = false;
    m_damage_to_players_combat_drone_amount_isValid = false;

    m_damage_to_players_combat_drone_num_shots_isSet = false;
    m_damage_to_players_combat_drone_num_shots_isValid = false;

    m_damage_to_players_energy_amount_isSet = false;
    m_damage_to_players_energy_amount_isValid = false;

    m_damage_to_players_energy_num_shots_isSet = false;
    m_damage_to_players_energy_num_shots_isValid = false;

    m_damage_to_players_fighter_bomber_amount_isSet = false;
    m_damage_to_players_fighter_bomber_amount_isValid = false;

    m_damage_to_players_fighter_bomber_num_shots_isSet = false;
    m_damage_to_players_fighter_bomber_num_shots_isValid = false;

    m_damage_to_players_fighter_drone_amount_isSet = false;
    m_damage_to_players_fighter_drone_amount_isValid = false;

    m_damage_to_players_fighter_drone_num_shots_isSet = false;
    m_damage_to_players_fighter_drone_num_shots_isValid = false;

    m_damage_to_players_hybrid_amount_isSet = false;
    m_damage_to_players_hybrid_amount_isValid = false;

    m_damage_to_players_hybrid_num_shots_isSet = false;
    m_damage_to_players_hybrid_num_shots_isValid = false;

    m_damage_to_players_missile_amount_isSet = false;
    m_damage_to_players_missile_amount_isValid = false;

    m_damage_to_players_missile_num_shots_isSet = false;
    m_damage_to_players_missile_num_shots_isValid = false;

    m_damage_to_players_projectile_amount_isSet = false;
    m_damage_to_players_projectile_amount_isValid = false;

    m_damage_to_players_projectile_num_shots_isSet = false;
    m_damage_to_players_projectile_num_shots_isValid = false;

    m_damage_to_players_smart_bomb_amount_isSet = false;
    m_damage_to_players_smart_bomb_amount_isValid = false;

    m_damage_to_players_smart_bomb_num_shots_isSet = false;
    m_damage_to_players_smart_bomb_num_shots_isValid = false;

    m_damage_to_players_super_amount_isSet = false;
    m_damage_to_players_super_amount_isValid = false;

    m_damage_to_players_super_num_shots_isSet = false;
    m_damage_to_players_super_num_shots_isValid = false;

    m_damage_to_structures_total_amount_isSet = false;
    m_damage_to_structures_total_amount_isValid = false;

    m_damage_to_structures_total_num_shots_isSet = false;
    m_damage_to_structures_total_num_shots_isValid = false;

    m_deaths_high_sec_isSet = false;
    m_deaths_high_sec_isValid = false;

    m_deaths_low_sec_isSet = false;
    m_deaths_low_sec_isValid = false;

    m_deaths_null_sec_isSet = false;
    m_deaths_null_sec_isValid = false;

    m_deaths_pod_high_sec_isSet = false;
    m_deaths_pod_high_sec_isValid = false;

    m_deaths_pod_low_sec_isSet = false;
    m_deaths_pod_low_sec_isValid = false;

    m_deaths_pod_null_sec_isSet = false;
    m_deaths_pod_null_sec_isValid = false;

    m_deaths_pod_wormhole_isSet = false;
    m_deaths_pod_wormhole_isValid = false;

    m_deaths_wormhole_isSet = false;
    m_deaths_wormhole_isValid = false;

    m_drone_engage_isSet = false;
    m_drone_engage_isValid = false;

    m_dscans_isSet = false;
    m_dscans_isValid = false;

    m_duel_requested_isSet = false;
    m_duel_requested_isValid = false;

    m_engagement_register_isSet = false;
    m_engagement_register_isValid = false;

    m_kills_assists_isSet = false;
    m_kills_assists_isValid = false;

    m_kills_high_sec_isSet = false;
    m_kills_high_sec_isValid = false;

    m_kills_low_sec_isSet = false;
    m_kills_low_sec_isValid = false;

    m_kills_null_sec_isSet = false;
    m_kills_null_sec_isValid = false;

    m_kills_pod_high_sec_isSet = false;
    m_kills_pod_high_sec_isValid = false;

    m_kills_pod_low_sec_isSet = false;
    m_kills_pod_low_sec_isValid = false;

    m_kills_pod_null_sec_isSet = false;
    m_kills_pod_null_sec_isValid = false;

    m_kills_pod_wormhole_isSet = false;
    m_kills_pod_wormhole_isValid = false;

    m_kills_wormhole_isSet = false;
    m_kills_wormhole_isValid = false;

    m_npc_flag_set_isSet = false;
    m_npc_flag_set_isValid = false;

    m_probe_scans_isSet = false;
    m_probe_scans_isValid = false;

    m_pvp_flag_set_isSet = false;
    m_pvp_flag_set_isValid = false;

    m_repair_armor_by_remote_amount_isSet = false;
    m_repair_armor_by_remote_amount_isValid = false;

    m_repair_armor_remote_amount_isSet = false;
    m_repair_armor_remote_amount_isValid = false;

    m_repair_armor_self_amount_isSet = false;
    m_repair_armor_self_amount_isValid = false;

    m_repair_capacitor_by_remote_amount_isSet = false;
    m_repair_capacitor_by_remote_amount_isValid = false;

    m_repair_capacitor_remote_amount_isSet = false;
    m_repair_capacitor_remote_amount_isValid = false;

    m_repair_capacitor_self_amount_isSet = false;
    m_repair_capacitor_self_amount_isValid = false;

    m_repair_hull_by_remote_amount_isSet = false;
    m_repair_hull_by_remote_amount_isValid = false;

    m_repair_hull_remote_amount_isSet = false;
    m_repair_hull_remote_amount_isValid = false;

    m_repair_hull_self_amount_isSet = false;
    m_repair_hull_self_amount_isValid = false;

    m_repair_shield_by_remote_amount_isSet = false;
    m_repair_shield_by_remote_amount_isValid = false;

    m_repair_shield_remote_amount_isSet = false;
    m_repair_shield_remote_amount_isValid = false;

    m_repair_shield_self_amount_isSet = false;
    m_repair_shield_self_amount_isValid = false;

    m_self_destructs_isSet = false;
    m_self_destructs_isValid = false;

    m_warp_scramble_pc_isSet = false;
    m_warp_scramble_pc_isValid = false;

    m_warp_scrambledby_npc_isSet = false;
    m_warp_scrambledby_npc_isValid = false;

    m_warp_scrambledby_pc_isSet = false;
    m_warp_scrambledby_pc_isValid = false;

    m_weapon_flag_set_isSet = false;
    m_weapon_flag_set_isValid = false;

    m_webifiedby_npc_isSet = false;
    m_webifiedby_npc_isValid = false;

    m_webifiedby_pc_isSet = false;
    m_webifiedby_pc_isValid = false;

    m_webifying_pc_isSet = false;
    m_webifying_pc_isValid = false;
}

void OAIGet_characters_character_id_stats_combat::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIGet_characters_character_id_stats_combat::fromJsonObject(QJsonObject json) {

    m_cap_drainedby_npc_isValid = ::OpenAPI::fromJsonValue(m_cap_drainedby_npc, json[QString("cap_drainedby_npc")]);
    m_cap_drainedby_npc_isSet = !json[QString("cap_drainedby_npc")].isNull() && m_cap_drainedby_npc_isValid;

    m_cap_drainedby_pc_isValid = ::OpenAPI::fromJsonValue(m_cap_drainedby_pc, json[QString("cap_drainedby_pc")]);
    m_cap_drainedby_pc_isSet = !json[QString("cap_drainedby_pc")].isNull() && m_cap_drainedby_pc_isValid;

    m_cap_draining_pc_isValid = ::OpenAPI::fromJsonValue(m_cap_draining_pc, json[QString("cap_draining_pc")]);
    m_cap_draining_pc_isSet = !json[QString("cap_draining_pc")].isNull() && m_cap_draining_pc_isValid;

    m_criminal_flag_set_isValid = ::OpenAPI::fromJsonValue(m_criminal_flag_set, json[QString("criminal_flag_set")]);
    m_criminal_flag_set_isSet = !json[QString("criminal_flag_set")].isNull() && m_criminal_flag_set_isValid;

    m_damage_from_np_cs_amount_isValid = ::OpenAPI::fromJsonValue(m_damage_from_np_cs_amount, json[QString("damage_from_np_cs_amount")]);
    m_damage_from_np_cs_amount_isSet = !json[QString("damage_from_np_cs_amount")].isNull() && m_damage_from_np_cs_amount_isValid;

    m_damage_from_np_cs_num_shots_isValid = ::OpenAPI::fromJsonValue(m_damage_from_np_cs_num_shots, json[QString("damage_from_np_cs_num_shots")]);
    m_damage_from_np_cs_num_shots_isSet = !json[QString("damage_from_np_cs_num_shots")].isNull() && m_damage_from_np_cs_num_shots_isValid;

    m_damage_from_players_bomb_amount_isValid = ::OpenAPI::fromJsonValue(m_damage_from_players_bomb_amount, json[QString("damage_from_players_bomb_amount")]);
    m_damage_from_players_bomb_amount_isSet = !json[QString("damage_from_players_bomb_amount")].isNull() && m_damage_from_players_bomb_amount_isValid;

    m_damage_from_players_bomb_num_shots_isValid = ::OpenAPI::fromJsonValue(m_damage_from_players_bomb_num_shots, json[QString("damage_from_players_bomb_num_shots")]);
    m_damage_from_players_bomb_num_shots_isSet = !json[QString("damage_from_players_bomb_num_shots")].isNull() && m_damage_from_players_bomb_num_shots_isValid;

    m_damage_from_players_combat_drone_amount_isValid = ::OpenAPI::fromJsonValue(m_damage_from_players_combat_drone_amount, json[QString("damage_from_players_combat_drone_amount")]);
    m_damage_from_players_combat_drone_amount_isSet = !json[QString("damage_from_players_combat_drone_amount")].isNull() && m_damage_from_players_combat_drone_amount_isValid;

    m_damage_from_players_combat_drone_num_shots_isValid = ::OpenAPI::fromJsonValue(m_damage_from_players_combat_drone_num_shots, json[QString("damage_from_players_combat_drone_num_shots")]);
    m_damage_from_players_combat_drone_num_shots_isSet = !json[QString("damage_from_players_combat_drone_num_shots")].isNull() && m_damage_from_players_combat_drone_num_shots_isValid;

    m_damage_from_players_energy_amount_isValid = ::OpenAPI::fromJsonValue(m_damage_from_players_energy_amount, json[QString("damage_from_players_energy_amount")]);
    m_damage_from_players_energy_amount_isSet = !json[QString("damage_from_players_energy_amount")].isNull() && m_damage_from_players_energy_amount_isValid;

    m_damage_from_players_energy_num_shots_isValid = ::OpenAPI::fromJsonValue(m_damage_from_players_energy_num_shots, json[QString("damage_from_players_energy_num_shots")]);
    m_damage_from_players_energy_num_shots_isSet = !json[QString("damage_from_players_energy_num_shots")].isNull() && m_damage_from_players_energy_num_shots_isValid;

    m_damage_from_players_fighter_bomber_amount_isValid = ::OpenAPI::fromJsonValue(m_damage_from_players_fighter_bomber_amount, json[QString("damage_from_players_fighter_bomber_amount")]);
    m_damage_from_players_fighter_bomber_amount_isSet = !json[QString("damage_from_players_fighter_bomber_amount")].isNull() && m_damage_from_players_fighter_bomber_amount_isValid;

    m_damage_from_players_fighter_bomber_num_shots_isValid = ::OpenAPI::fromJsonValue(m_damage_from_players_fighter_bomber_num_shots, json[QString("damage_from_players_fighter_bomber_num_shots")]);
    m_damage_from_players_fighter_bomber_num_shots_isSet = !json[QString("damage_from_players_fighter_bomber_num_shots")].isNull() && m_damage_from_players_fighter_bomber_num_shots_isValid;

    m_damage_from_players_fighter_drone_amount_isValid = ::OpenAPI::fromJsonValue(m_damage_from_players_fighter_drone_amount, json[QString("damage_from_players_fighter_drone_amount")]);
    m_damage_from_players_fighter_drone_amount_isSet = !json[QString("damage_from_players_fighter_drone_amount")].isNull() && m_damage_from_players_fighter_drone_amount_isValid;

    m_damage_from_players_fighter_drone_num_shots_isValid = ::OpenAPI::fromJsonValue(m_damage_from_players_fighter_drone_num_shots, json[QString("damage_from_players_fighter_drone_num_shots")]);
    m_damage_from_players_fighter_drone_num_shots_isSet = !json[QString("damage_from_players_fighter_drone_num_shots")].isNull() && m_damage_from_players_fighter_drone_num_shots_isValid;

    m_damage_from_players_hybrid_amount_isValid = ::OpenAPI::fromJsonValue(m_damage_from_players_hybrid_amount, json[QString("damage_from_players_hybrid_amount")]);
    m_damage_from_players_hybrid_amount_isSet = !json[QString("damage_from_players_hybrid_amount")].isNull() && m_damage_from_players_hybrid_amount_isValid;

    m_damage_from_players_hybrid_num_shots_isValid = ::OpenAPI::fromJsonValue(m_damage_from_players_hybrid_num_shots, json[QString("damage_from_players_hybrid_num_shots")]);
    m_damage_from_players_hybrid_num_shots_isSet = !json[QString("damage_from_players_hybrid_num_shots")].isNull() && m_damage_from_players_hybrid_num_shots_isValid;

    m_damage_from_players_missile_amount_isValid = ::OpenAPI::fromJsonValue(m_damage_from_players_missile_amount, json[QString("damage_from_players_missile_amount")]);
    m_damage_from_players_missile_amount_isSet = !json[QString("damage_from_players_missile_amount")].isNull() && m_damage_from_players_missile_amount_isValid;

    m_damage_from_players_missile_num_shots_isValid = ::OpenAPI::fromJsonValue(m_damage_from_players_missile_num_shots, json[QString("damage_from_players_missile_num_shots")]);
    m_damage_from_players_missile_num_shots_isSet = !json[QString("damage_from_players_missile_num_shots")].isNull() && m_damage_from_players_missile_num_shots_isValid;

    m_damage_from_players_projectile_amount_isValid = ::OpenAPI::fromJsonValue(m_damage_from_players_projectile_amount, json[QString("damage_from_players_projectile_amount")]);
    m_damage_from_players_projectile_amount_isSet = !json[QString("damage_from_players_projectile_amount")].isNull() && m_damage_from_players_projectile_amount_isValid;

    m_damage_from_players_projectile_num_shots_isValid = ::OpenAPI::fromJsonValue(m_damage_from_players_projectile_num_shots, json[QString("damage_from_players_projectile_num_shots")]);
    m_damage_from_players_projectile_num_shots_isSet = !json[QString("damage_from_players_projectile_num_shots")].isNull() && m_damage_from_players_projectile_num_shots_isValid;

    m_damage_from_players_smart_bomb_amount_isValid = ::OpenAPI::fromJsonValue(m_damage_from_players_smart_bomb_amount, json[QString("damage_from_players_smart_bomb_amount")]);
    m_damage_from_players_smart_bomb_amount_isSet = !json[QString("damage_from_players_smart_bomb_amount")].isNull() && m_damage_from_players_smart_bomb_amount_isValid;

    m_damage_from_players_smart_bomb_num_shots_isValid = ::OpenAPI::fromJsonValue(m_damage_from_players_smart_bomb_num_shots, json[QString("damage_from_players_smart_bomb_num_shots")]);
    m_damage_from_players_smart_bomb_num_shots_isSet = !json[QString("damage_from_players_smart_bomb_num_shots")].isNull() && m_damage_from_players_smart_bomb_num_shots_isValid;

    m_damage_from_players_super_amount_isValid = ::OpenAPI::fromJsonValue(m_damage_from_players_super_amount, json[QString("damage_from_players_super_amount")]);
    m_damage_from_players_super_amount_isSet = !json[QString("damage_from_players_super_amount")].isNull() && m_damage_from_players_super_amount_isValid;

    m_damage_from_players_super_num_shots_isValid = ::OpenAPI::fromJsonValue(m_damage_from_players_super_num_shots, json[QString("damage_from_players_super_num_shots")]);
    m_damage_from_players_super_num_shots_isSet = !json[QString("damage_from_players_super_num_shots")].isNull() && m_damage_from_players_super_num_shots_isValid;

    m_damage_from_structures_total_amount_isValid = ::OpenAPI::fromJsonValue(m_damage_from_structures_total_amount, json[QString("damage_from_structures_total_amount")]);
    m_damage_from_structures_total_amount_isSet = !json[QString("damage_from_structures_total_amount")].isNull() && m_damage_from_structures_total_amount_isValid;

    m_damage_from_structures_total_num_shots_isValid = ::OpenAPI::fromJsonValue(m_damage_from_structures_total_num_shots, json[QString("damage_from_structures_total_num_shots")]);
    m_damage_from_structures_total_num_shots_isSet = !json[QString("damage_from_structures_total_num_shots")].isNull() && m_damage_from_structures_total_num_shots_isValid;

    m_damage_to_players_bomb_amount_isValid = ::OpenAPI::fromJsonValue(m_damage_to_players_bomb_amount, json[QString("damage_to_players_bomb_amount")]);
    m_damage_to_players_bomb_amount_isSet = !json[QString("damage_to_players_bomb_amount")].isNull() && m_damage_to_players_bomb_amount_isValid;

    m_damage_to_players_bomb_num_shots_isValid = ::OpenAPI::fromJsonValue(m_damage_to_players_bomb_num_shots, json[QString("damage_to_players_bomb_num_shots")]);
    m_damage_to_players_bomb_num_shots_isSet = !json[QString("damage_to_players_bomb_num_shots")].isNull() && m_damage_to_players_bomb_num_shots_isValid;

    m_damage_to_players_combat_drone_amount_isValid = ::OpenAPI::fromJsonValue(m_damage_to_players_combat_drone_amount, json[QString("damage_to_players_combat_drone_amount")]);
    m_damage_to_players_combat_drone_amount_isSet = !json[QString("damage_to_players_combat_drone_amount")].isNull() && m_damage_to_players_combat_drone_amount_isValid;

    m_damage_to_players_combat_drone_num_shots_isValid = ::OpenAPI::fromJsonValue(m_damage_to_players_combat_drone_num_shots, json[QString("damage_to_players_combat_drone_num_shots")]);
    m_damage_to_players_combat_drone_num_shots_isSet = !json[QString("damage_to_players_combat_drone_num_shots")].isNull() && m_damage_to_players_combat_drone_num_shots_isValid;

    m_damage_to_players_energy_amount_isValid = ::OpenAPI::fromJsonValue(m_damage_to_players_energy_amount, json[QString("damage_to_players_energy_amount")]);
    m_damage_to_players_energy_amount_isSet = !json[QString("damage_to_players_energy_amount")].isNull() && m_damage_to_players_energy_amount_isValid;

    m_damage_to_players_energy_num_shots_isValid = ::OpenAPI::fromJsonValue(m_damage_to_players_energy_num_shots, json[QString("damage_to_players_energy_num_shots")]);
    m_damage_to_players_energy_num_shots_isSet = !json[QString("damage_to_players_energy_num_shots")].isNull() && m_damage_to_players_energy_num_shots_isValid;

    m_damage_to_players_fighter_bomber_amount_isValid = ::OpenAPI::fromJsonValue(m_damage_to_players_fighter_bomber_amount, json[QString("damage_to_players_fighter_bomber_amount")]);
    m_damage_to_players_fighter_bomber_amount_isSet = !json[QString("damage_to_players_fighter_bomber_amount")].isNull() && m_damage_to_players_fighter_bomber_amount_isValid;

    m_damage_to_players_fighter_bomber_num_shots_isValid = ::OpenAPI::fromJsonValue(m_damage_to_players_fighter_bomber_num_shots, json[QString("damage_to_players_fighter_bomber_num_shots")]);
    m_damage_to_players_fighter_bomber_num_shots_isSet = !json[QString("damage_to_players_fighter_bomber_num_shots")].isNull() && m_damage_to_players_fighter_bomber_num_shots_isValid;

    m_damage_to_players_fighter_drone_amount_isValid = ::OpenAPI::fromJsonValue(m_damage_to_players_fighter_drone_amount, json[QString("damage_to_players_fighter_drone_amount")]);
    m_damage_to_players_fighter_drone_amount_isSet = !json[QString("damage_to_players_fighter_drone_amount")].isNull() && m_damage_to_players_fighter_drone_amount_isValid;

    m_damage_to_players_fighter_drone_num_shots_isValid = ::OpenAPI::fromJsonValue(m_damage_to_players_fighter_drone_num_shots, json[QString("damage_to_players_fighter_drone_num_shots")]);
    m_damage_to_players_fighter_drone_num_shots_isSet = !json[QString("damage_to_players_fighter_drone_num_shots")].isNull() && m_damage_to_players_fighter_drone_num_shots_isValid;

    m_damage_to_players_hybrid_amount_isValid = ::OpenAPI::fromJsonValue(m_damage_to_players_hybrid_amount, json[QString("damage_to_players_hybrid_amount")]);
    m_damage_to_players_hybrid_amount_isSet = !json[QString("damage_to_players_hybrid_amount")].isNull() && m_damage_to_players_hybrid_amount_isValid;

    m_damage_to_players_hybrid_num_shots_isValid = ::OpenAPI::fromJsonValue(m_damage_to_players_hybrid_num_shots, json[QString("damage_to_players_hybrid_num_shots")]);
    m_damage_to_players_hybrid_num_shots_isSet = !json[QString("damage_to_players_hybrid_num_shots")].isNull() && m_damage_to_players_hybrid_num_shots_isValid;

    m_damage_to_players_missile_amount_isValid = ::OpenAPI::fromJsonValue(m_damage_to_players_missile_amount, json[QString("damage_to_players_missile_amount")]);
    m_damage_to_players_missile_amount_isSet = !json[QString("damage_to_players_missile_amount")].isNull() && m_damage_to_players_missile_amount_isValid;

    m_damage_to_players_missile_num_shots_isValid = ::OpenAPI::fromJsonValue(m_damage_to_players_missile_num_shots, json[QString("damage_to_players_missile_num_shots")]);
    m_damage_to_players_missile_num_shots_isSet = !json[QString("damage_to_players_missile_num_shots")].isNull() && m_damage_to_players_missile_num_shots_isValid;

    m_damage_to_players_projectile_amount_isValid = ::OpenAPI::fromJsonValue(m_damage_to_players_projectile_amount, json[QString("damage_to_players_projectile_amount")]);
    m_damage_to_players_projectile_amount_isSet = !json[QString("damage_to_players_projectile_amount")].isNull() && m_damage_to_players_projectile_amount_isValid;

    m_damage_to_players_projectile_num_shots_isValid = ::OpenAPI::fromJsonValue(m_damage_to_players_projectile_num_shots, json[QString("damage_to_players_projectile_num_shots")]);
    m_damage_to_players_projectile_num_shots_isSet = !json[QString("damage_to_players_projectile_num_shots")].isNull() && m_damage_to_players_projectile_num_shots_isValid;

    m_damage_to_players_smart_bomb_amount_isValid = ::OpenAPI::fromJsonValue(m_damage_to_players_smart_bomb_amount, json[QString("damage_to_players_smart_bomb_amount")]);
    m_damage_to_players_smart_bomb_amount_isSet = !json[QString("damage_to_players_smart_bomb_amount")].isNull() && m_damage_to_players_smart_bomb_amount_isValid;

    m_damage_to_players_smart_bomb_num_shots_isValid = ::OpenAPI::fromJsonValue(m_damage_to_players_smart_bomb_num_shots, json[QString("damage_to_players_smart_bomb_num_shots")]);
    m_damage_to_players_smart_bomb_num_shots_isSet = !json[QString("damage_to_players_smart_bomb_num_shots")].isNull() && m_damage_to_players_smart_bomb_num_shots_isValid;

    m_damage_to_players_super_amount_isValid = ::OpenAPI::fromJsonValue(m_damage_to_players_super_amount, json[QString("damage_to_players_super_amount")]);
    m_damage_to_players_super_amount_isSet = !json[QString("damage_to_players_super_amount")].isNull() && m_damage_to_players_super_amount_isValid;

    m_damage_to_players_super_num_shots_isValid = ::OpenAPI::fromJsonValue(m_damage_to_players_super_num_shots, json[QString("damage_to_players_super_num_shots")]);
    m_damage_to_players_super_num_shots_isSet = !json[QString("damage_to_players_super_num_shots")].isNull() && m_damage_to_players_super_num_shots_isValid;

    m_damage_to_structures_total_amount_isValid = ::OpenAPI::fromJsonValue(m_damage_to_structures_total_amount, json[QString("damage_to_structures_total_amount")]);
    m_damage_to_structures_total_amount_isSet = !json[QString("damage_to_structures_total_amount")].isNull() && m_damage_to_structures_total_amount_isValid;

    m_damage_to_structures_total_num_shots_isValid = ::OpenAPI::fromJsonValue(m_damage_to_structures_total_num_shots, json[QString("damage_to_structures_total_num_shots")]);
    m_damage_to_structures_total_num_shots_isSet = !json[QString("damage_to_structures_total_num_shots")].isNull() && m_damage_to_structures_total_num_shots_isValid;

    m_deaths_high_sec_isValid = ::OpenAPI::fromJsonValue(m_deaths_high_sec, json[QString("deaths_high_sec")]);
    m_deaths_high_sec_isSet = !json[QString("deaths_high_sec")].isNull() && m_deaths_high_sec_isValid;

    m_deaths_low_sec_isValid = ::OpenAPI::fromJsonValue(m_deaths_low_sec, json[QString("deaths_low_sec")]);
    m_deaths_low_sec_isSet = !json[QString("deaths_low_sec")].isNull() && m_deaths_low_sec_isValid;

    m_deaths_null_sec_isValid = ::OpenAPI::fromJsonValue(m_deaths_null_sec, json[QString("deaths_null_sec")]);
    m_deaths_null_sec_isSet = !json[QString("deaths_null_sec")].isNull() && m_deaths_null_sec_isValid;

    m_deaths_pod_high_sec_isValid = ::OpenAPI::fromJsonValue(m_deaths_pod_high_sec, json[QString("deaths_pod_high_sec")]);
    m_deaths_pod_high_sec_isSet = !json[QString("deaths_pod_high_sec")].isNull() && m_deaths_pod_high_sec_isValid;

    m_deaths_pod_low_sec_isValid = ::OpenAPI::fromJsonValue(m_deaths_pod_low_sec, json[QString("deaths_pod_low_sec")]);
    m_deaths_pod_low_sec_isSet = !json[QString("deaths_pod_low_sec")].isNull() && m_deaths_pod_low_sec_isValid;

    m_deaths_pod_null_sec_isValid = ::OpenAPI::fromJsonValue(m_deaths_pod_null_sec, json[QString("deaths_pod_null_sec")]);
    m_deaths_pod_null_sec_isSet = !json[QString("deaths_pod_null_sec")].isNull() && m_deaths_pod_null_sec_isValid;

    m_deaths_pod_wormhole_isValid = ::OpenAPI::fromJsonValue(m_deaths_pod_wormhole, json[QString("deaths_pod_wormhole")]);
    m_deaths_pod_wormhole_isSet = !json[QString("deaths_pod_wormhole")].isNull() && m_deaths_pod_wormhole_isValid;

    m_deaths_wormhole_isValid = ::OpenAPI::fromJsonValue(m_deaths_wormhole, json[QString("deaths_wormhole")]);
    m_deaths_wormhole_isSet = !json[QString("deaths_wormhole")].isNull() && m_deaths_wormhole_isValid;

    m_drone_engage_isValid = ::OpenAPI::fromJsonValue(m_drone_engage, json[QString("drone_engage")]);
    m_drone_engage_isSet = !json[QString("drone_engage")].isNull() && m_drone_engage_isValid;

    m_dscans_isValid = ::OpenAPI::fromJsonValue(m_dscans, json[QString("dscans")]);
    m_dscans_isSet = !json[QString("dscans")].isNull() && m_dscans_isValid;

    m_duel_requested_isValid = ::OpenAPI::fromJsonValue(m_duel_requested, json[QString("duel_requested")]);
    m_duel_requested_isSet = !json[QString("duel_requested")].isNull() && m_duel_requested_isValid;

    m_engagement_register_isValid = ::OpenAPI::fromJsonValue(m_engagement_register, json[QString("engagement_register")]);
    m_engagement_register_isSet = !json[QString("engagement_register")].isNull() && m_engagement_register_isValid;

    m_kills_assists_isValid = ::OpenAPI::fromJsonValue(m_kills_assists, json[QString("kills_assists")]);
    m_kills_assists_isSet = !json[QString("kills_assists")].isNull() && m_kills_assists_isValid;

    m_kills_high_sec_isValid = ::OpenAPI::fromJsonValue(m_kills_high_sec, json[QString("kills_high_sec")]);
    m_kills_high_sec_isSet = !json[QString("kills_high_sec")].isNull() && m_kills_high_sec_isValid;

    m_kills_low_sec_isValid = ::OpenAPI::fromJsonValue(m_kills_low_sec, json[QString("kills_low_sec")]);
    m_kills_low_sec_isSet = !json[QString("kills_low_sec")].isNull() && m_kills_low_sec_isValid;

    m_kills_null_sec_isValid = ::OpenAPI::fromJsonValue(m_kills_null_sec, json[QString("kills_null_sec")]);
    m_kills_null_sec_isSet = !json[QString("kills_null_sec")].isNull() && m_kills_null_sec_isValid;

    m_kills_pod_high_sec_isValid = ::OpenAPI::fromJsonValue(m_kills_pod_high_sec, json[QString("kills_pod_high_sec")]);
    m_kills_pod_high_sec_isSet = !json[QString("kills_pod_high_sec")].isNull() && m_kills_pod_high_sec_isValid;

    m_kills_pod_low_sec_isValid = ::OpenAPI::fromJsonValue(m_kills_pod_low_sec, json[QString("kills_pod_low_sec")]);
    m_kills_pod_low_sec_isSet = !json[QString("kills_pod_low_sec")].isNull() && m_kills_pod_low_sec_isValid;

    m_kills_pod_null_sec_isValid = ::OpenAPI::fromJsonValue(m_kills_pod_null_sec, json[QString("kills_pod_null_sec")]);
    m_kills_pod_null_sec_isSet = !json[QString("kills_pod_null_sec")].isNull() && m_kills_pod_null_sec_isValid;

    m_kills_pod_wormhole_isValid = ::OpenAPI::fromJsonValue(m_kills_pod_wormhole, json[QString("kills_pod_wormhole")]);
    m_kills_pod_wormhole_isSet = !json[QString("kills_pod_wormhole")].isNull() && m_kills_pod_wormhole_isValid;

    m_kills_wormhole_isValid = ::OpenAPI::fromJsonValue(m_kills_wormhole, json[QString("kills_wormhole")]);
    m_kills_wormhole_isSet = !json[QString("kills_wormhole")].isNull() && m_kills_wormhole_isValid;

    m_npc_flag_set_isValid = ::OpenAPI::fromJsonValue(m_npc_flag_set, json[QString("npc_flag_set")]);
    m_npc_flag_set_isSet = !json[QString("npc_flag_set")].isNull() && m_npc_flag_set_isValid;

    m_probe_scans_isValid = ::OpenAPI::fromJsonValue(m_probe_scans, json[QString("probe_scans")]);
    m_probe_scans_isSet = !json[QString("probe_scans")].isNull() && m_probe_scans_isValid;

    m_pvp_flag_set_isValid = ::OpenAPI::fromJsonValue(m_pvp_flag_set, json[QString("pvp_flag_set")]);
    m_pvp_flag_set_isSet = !json[QString("pvp_flag_set")].isNull() && m_pvp_flag_set_isValid;

    m_repair_armor_by_remote_amount_isValid = ::OpenAPI::fromJsonValue(m_repair_armor_by_remote_amount, json[QString("repair_armor_by_remote_amount")]);
    m_repair_armor_by_remote_amount_isSet = !json[QString("repair_armor_by_remote_amount")].isNull() && m_repair_armor_by_remote_amount_isValid;

    m_repair_armor_remote_amount_isValid = ::OpenAPI::fromJsonValue(m_repair_armor_remote_amount, json[QString("repair_armor_remote_amount")]);
    m_repair_armor_remote_amount_isSet = !json[QString("repair_armor_remote_amount")].isNull() && m_repair_armor_remote_amount_isValid;

    m_repair_armor_self_amount_isValid = ::OpenAPI::fromJsonValue(m_repair_armor_self_amount, json[QString("repair_armor_self_amount")]);
    m_repair_armor_self_amount_isSet = !json[QString("repair_armor_self_amount")].isNull() && m_repair_armor_self_amount_isValid;

    m_repair_capacitor_by_remote_amount_isValid = ::OpenAPI::fromJsonValue(m_repair_capacitor_by_remote_amount, json[QString("repair_capacitor_by_remote_amount")]);
    m_repair_capacitor_by_remote_amount_isSet = !json[QString("repair_capacitor_by_remote_amount")].isNull() && m_repair_capacitor_by_remote_amount_isValid;

    m_repair_capacitor_remote_amount_isValid = ::OpenAPI::fromJsonValue(m_repair_capacitor_remote_amount, json[QString("repair_capacitor_remote_amount")]);
    m_repair_capacitor_remote_amount_isSet = !json[QString("repair_capacitor_remote_amount")].isNull() && m_repair_capacitor_remote_amount_isValid;

    m_repair_capacitor_self_amount_isValid = ::OpenAPI::fromJsonValue(m_repair_capacitor_self_amount, json[QString("repair_capacitor_self_amount")]);
    m_repair_capacitor_self_amount_isSet = !json[QString("repair_capacitor_self_amount")].isNull() && m_repair_capacitor_self_amount_isValid;

    m_repair_hull_by_remote_amount_isValid = ::OpenAPI::fromJsonValue(m_repair_hull_by_remote_amount, json[QString("repair_hull_by_remote_amount")]);
    m_repair_hull_by_remote_amount_isSet = !json[QString("repair_hull_by_remote_amount")].isNull() && m_repair_hull_by_remote_amount_isValid;

    m_repair_hull_remote_amount_isValid = ::OpenAPI::fromJsonValue(m_repair_hull_remote_amount, json[QString("repair_hull_remote_amount")]);
    m_repair_hull_remote_amount_isSet = !json[QString("repair_hull_remote_amount")].isNull() && m_repair_hull_remote_amount_isValid;

    m_repair_hull_self_amount_isValid = ::OpenAPI::fromJsonValue(m_repair_hull_self_amount, json[QString("repair_hull_self_amount")]);
    m_repair_hull_self_amount_isSet = !json[QString("repair_hull_self_amount")].isNull() && m_repair_hull_self_amount_isValid;

    m_repair_shield_by_remote_amount_isValid = ::OpenAPI::fromJsonValue(m_repair_shield_by_remote_amount, json[QString("repair_shield_by_remote_amount")]);
    m_repair_shield_by_remote_amount_isSet = !json[QString("repair_shield_by_remote_amount")].isNull() && m_repair_shield_by_remote_amount_isValid;

    m_repair_shield_remote_amount_isValid = ::OpenAPI::fromJsonValue(m_repair_shield_remote_amount, json[QString("repair_shield_remote_amount")]);
    m_repair_shield_remote_amount_isSet = !json[QString("repair_shield_remote_amount")].isNull() && m_repair_shield_remote_amount_isValid;

    m_repair_shield_self_amount_isValid = ::OpenAPI::fromJsonValue(m_repair_shield_self_amount, json[QString("repair_shield_self_amount")]);
    m_repair_shield_self_amount_isSet = !json[QString("repair_shield_self_amount")].isNull() && m_repair_shield_self_amount_isValid;

    m_self_destructs_isValid = ::OpenAPI::fromJsonValue(m_self_destructs, json[QString("self_destructs")]);
    m_self_destructs_isSet = !json[QString("self_destructs")].isNull() && m_self_destructs_isValid;

    m_warp_scramble_pc_isValid = ::OpenAPI::fromJsonValue(m_warp_scramble_pc, json[QString("warp_scramble_pc")]);
    m_warp_scramble_pc_isSet = !json[QString("warp_scramble_pc")].isNull() && m_warp_scramble_pc_isValid;

    m_warp_scrambledby_npc_isValid = ::OpenAPI::fromJsonValue(m_warp_scrambledby_npc, json[QString("warp_scrambledby_npc")]);
    m_warp_scrambledby_npc_isSet = !json[QString("warp_scrambledby_npc")].isNull() && m_warp_scrambledby_npc_isValid;

    m_warp_scrambledby_pc_isValid = ::OpenAPI::fromJsonValue(m_warp_scrambledby_pc, json[QString("warp_scrambledby_pc")]);
    m_warp_scrambledby_pc_isSet = !json[QString("warp_scrambledby_pc")].isNull() && m_warp_scrambledby_pc_isValid;

    m_weapon_flag_set_isValid = ::OpenAPI::fromJsonValue(m_weapon_flag_set, json[QString("weapon_flag_set")]);
    m_weapon_flag_set_isSet = !json[QString("weapon_flag_set")].isNull() && m_weapon_flag_set_isValid;

    m_webifiedby_npc_isValid = ::OpenAPI::fromJsonValue(m_webifiedby_npc, json[QString("webifiedby_npc")]);
    m_webifiedby_npc_isSet = !json[QString("webifiedby_npc")].isNull() && m_webifiedby_npc_isValid;

    m_webifiedby_pc_isValid = ::OpenAPI::fromJsonValue(m_webifiedby_pc, json[QString("webifiedby_pc")]);
    m_webifiedby_pc_isSet = !json[QString("webifiedby_pc")].isNull() && m_webifiedby_pc_isValid;

    m_webifying_pc_isValid = ::OpenAPI::fromJsonValue(m_webifying_pc, json[QString("webifying_pc")]);
    m_webifying_pc_isSet = !json[QString("webifying_pc")].isNull() && m_webifying_pc_isValid;
}

QString OAIGet_characters_character_id_stats_combat::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIGet_characters_character_id_stats_combat::asJsonObject() const {
    QJsonObject obj;
    if (m_cap_drainedby_npc_isSet) {
        obj.insert(QString("cap_drainedby_npc"), ::OpenAPI::toJsonValue(m_cap_drainedby_npc));
    }
    if (m_cap_drainedby_pc_isSet) {
        obj.insert(QString("cap_drainedby_pc"), ::OpenAPI::toJsonValue(m_cap_drainedby_pc));
    }
    if (m_cap_draining_pc_isSet) {
        obj.insert(QString("cap_draining_pc"), ::OpenAPI::toJsonValue(m_cap_draining_pc));
    }
    if (m_criminal_flag_set_isSet) {
        obj.insert(QString("criminal_flag_set"), ::OpenAPI::toJsonValue(m_criminal_flag_set));
    }
    if (m_damage_from_np_cs_amount_isSet) {
        obj.insert(QString("damage_from_np_cs_amount"), ::OpenAPI::toJsonValue(m_damage_from_np_cs_amount));
    }
    if (m_damage_from_np_cs_num_shots_isSet) {
        obj.insert(QString("damage_from_np_cs_num_shots"), ::OpenAPI::toJsonValue(m_damage_from_np_cs_num_shots));
    }
    if (m_damage_from_players_bomb_amount_isSet) {
        obj.insert(QString("damage_from_players_bomb_amount"), ::OpenAPI::toJsonValue(m_damage_from_players_bomb_amount));
    }
    if (m_damage_from_players_bomb_num_shots_isSet) {
        obj.insert(QString("damage_from_players_bomb_num_shots"), ::OpenAPI::toJsonValue(m_damage_from_players_bomb_num_shots));
    }
    if (m_damage_from_players_combat_drone_amount_isSet) {
        obj.insert(QString("damage_from_players_combat_drone_amount"), ::OpenAPI::toJsonValue(m_damage_from_players_combat_drone_amount));
    }
    if (m_damage_from_players_combat_drone_num_shots_isSet) {
        obj.insert(QString("damage_from_players_combat_drone_num_shots"), ::OpenAPI::toJsonValue(m_damage_from_players_combat_drone_num_shots));
    }
    if (m_damage_from_players_energy_amount_isSet) {
        obj.insert(QString("damage_from_players_energy_amount"), ::OpenAPI::toJsonValue(m_damage_from_players_energy_amount));
    }
    if (m_damage_from_players_energy_num_shots_isSet) {
        obj.insert(QString("damage_from_players_energy_num_shots"), ::OpenAPI::toJsonValue(m_damage_from_players_energy_num_shots));
    }
    if (m_damage_from_players_fighter_bomber_amount_isSet) {
        obj.insert(QString("damage_from_players_fighter_bomber_amount"), ::OpenAPI::toJsonValue(m_damage_from_players_fighter_bomber_amount));
    }
    if (m_damage_from_players_fighter_bomber_num_shots_isSet) {
        obj.insert(QString("damage_from_players_fighter_bomber_num_shots"), ::OpenAPI::toJsonValue(m_damage_from_players_fighter_bomber_num_shots));
    }
    if (m_damage_from_players_fighter_drone_amount_isSet) {
        obj.insert(QString("damage_from_players_fighter_drone_amount"), ::OpenAPI::toJsonValue(m_damage_from_players_fighter_drone_amount));
    }
    if (m_damage_from_players_fighter_drone_num_shots_isSet) {
        obj.insert(QString("damage_from_players_fighter_drone_num_shots"), ::OpenAPI::toJsonValue(m_damage_from_players_fighter_drone_num_shots));
    }
    if (m_damage_from_players_hybrid_amount_isSet) {
        obj.insert(QString("damage_from_players_hybrid_amount"), ::OpenAPI::toJsonValue(m_damage_from_players_hybrid_amount));
    }
    if (m_damage_from_players_hybrid_num_shots_isSet) {
        obj.insert(QString("damage_from_players_hybrid_num_shots"), ::OpenAPI::toJsonValue(m_damage_from_players_hybrid_num_shots));
    }
    if (m_damage_from_players_missile_amount_isSet) {
        obj.insert(QString("damage_from_players_missile_amount"), ::OpenAPI::toJsonValue(m_damage_from_players_missile_amount));
    }
    if (m_damage_from_players_missile_num_shots_isSet) {
        obj.insert(QString("damage_from_players_missile_num_shots"), ::OpenAPI::toJsonValue(m_damage_from_players_missile_num_shots));
    }
    if (m_damage_from_players_projectile_amount_isSet) {
        obj.insert(QString("damage_from_players_projectile_amount"), ::OpenAPI::toJsonValue(m_damage_from_players_projectile_amount));
    }
    if (m_damage_from_players_projectile_num_shots_isSet) {
        obj.insert(QString("damage_from_players_projectile_num_shots"), ::OpenAPI::toJsonValue(m_damage_from_players_projectile_num_shots));
    }
    if (m_damage_from_players_smart_bomb_amount_isSet) {
        obj.insert(QString("damage_from_players_smart_bomb_amount"), ::OpenAPI::toJsonValue(m_damage_from_players_smart_bomb_amount));
    }
    if (m_damage_from_players_smart_bomb_num_shots_isSet) {
        obj.insert(QString("damage_from_players_smart_bomb_num_shots"), ::OpenAPI::toJsonValue(m_damage_from_players_smart_bomb_num_shots));
    }
    if (m_damage_from_players_super_amount_isSet) {
        obj.insert(QString("damage_from_players_super_amount"), ::OpenAPI::toJsonValue(m_damage_from_players_super_amount));
    }
    if (m_damage_from_players_super_num_shots_isSet) {
        obj.insert(QString("damage_from_players_super_num_shots"), ::OpenAPI::toJsonValue(m_damage_from_players_super_num_shots));
    }
    if (m_damage_from_structures_total_amount_isSet) {
        obj.insert(QString("damage_from_structures_total_amount"), ::OpenAPI::toJsonValue(m_damage_from_structures_total_amount));
    }
    if (m_damage_from_structures_total_num_shots_isSet) {
        obj.insert(QString("damage_from_structures_total_num_shots"), ::OpenAPI::toJsonValue(m_damage_from_structures_total_num_shots));
    }
    if (m_damage_to_players_bomb_amount_isSet) {
        obj.insert(QString("damage_to_players_bomb_amount"), ::OpenAPI::toJsonValue(m_damage_to_players_bomb_amount));
    }
    if (m_damage_to_players_bomb_num_shots_isSet) {
        obj.insert(QString("damage_to_players_bomb_num_shots"), ::OpenAPI::toJsonValue(m_damage_to_players_bomb_num_shots));
    }
    if (m_damage_to_players_combat_drone_amount_isSet) {
        obj.insert(QString("damage_to_players_combat_drone_amount"), ::OpenAPI::toJsonValue(m_damage_to_players_combat_drone_amount));
    }
    if (m_damage_to_players_combat_drone_num_shots_isSet) {
        obj.insert(QString("damage_to_players_combat_drone_num_shots"), ::OpenAPI::toJsonValue(m_damage_to_players_combat_drone_num_shots));
    }
    if (m_damage_to_players_energy_amount_isSet) {
        obj.insert(QString("damage_to_players_energy_amount"), ::OpenAPI::toJsonValue(m_damage_to_players_energy_amount));
    }
    if (m_damage_to_players_energy_num_shots_isSet) {
        obj.insert(QString("damage_to_players_energy_num_shots"), ::OpenAPI::toJsonValue(m_damage_to_players_energy_num_shots));
    }
    if (m_damage_to_players_fighter_bomber_amount_isSet) {
        obj.insert(QString("damage_to_players_fighter_bomber_amount"), ::OpenAPI::toJsonValue(m_damage_to_players_fighter_bomber_amount));
    }
    if (m_damage_to_players_fighter_bomber_num_shots_isSet) {
        obj.insert(QString("damage_to_players_fighter_bomber_num_shots"), ::OpenAPI::toJsonValue(m_damage_to_players_fighter_bomber_num_shots));
    }
    if (m_damage_to_players_fighter_drone_amount_isSet) {
        obj.insert(QString("damage_to_players_fighter_drone_amount"), ::OpenAPI::toJsonValue(m_damage_to_players_fighter_drone_amount));
    }
    if (m_damage_to_players_fighter_drone_num_shots_isSet) {
        obj.insert(QString("damage_to_players_fighter_drone_num_shots"), ::OpenAPI::toJsonValue(m_damage_to_players_fighter_drone_num_shots));
    }
    if (m_damage_to_players_hybrid_amount_isSet) {
        obj.insert(QString("damage_to_players_hybrid_amount"), ::OpenAPI::toJsonValue(m_damage_to_players_hybrid_amount));
    }
    if (m_damage_to_players_hybrid_num_shots_isSet) {
        obj.insert(QString("damage_to_players_hybrid_num_shots"), ::OpenAPI::toJsonValue(m_damage_to_players_hybrid_num_shots));
    }
    if (m_damage_to_players_missile_amount_isSet) {
        obj.insert(QString("damage_to_players_missile_amount"), ::OpenAPI::toJsonValue(m_damage_to_players_missile_amount));
    }
    if (m_damage_to_players_missile_num_shots_isSet) {
        obj.insert(QString("damage_to_players_missile_num_shots"), ::OpenAPI::toJsonValue(m_damage_to_players_missile_num_shots));
    }
    if (m_damage_to_players_projectile_amount_isSet) {
        obj.insert(QString("damage_to_players_projectile_amount"), ::OpenAPI::toJsonValue(m_damage_to_players_projectile_amount));
    }
    if (m_damage_to_players_projectile_num_shots_isSet) {
        obj.insert(QString("damage_to_players_projectile_num_shots"), ::OpenAPI::toJsonValue(m_damage_to_players_projectile_num_shots));
    }
    if (m_damage_to_players_smart_bomb_amount_isSet) {
        obj.insert(QString("damage_to_players_smart_bomb_amount"), ::OpenAPI::toJsonValue(m_damage_to_players_smart_bomb_amount));
    }
    if (m_damage_to_players_smart_bomb_num_shots_isSet) {
        obj.insert(QString("damage_to_players_smart_bomb_num_shots"), ::OpenAPI::toJsonValue(m_damage_to_players_smart_bomb_num_shots));
    }
    if (m_damage_to_players_super_amount_isSet) {
        obj.insert(QString("damage_to_players_super_amount"), ::OpenAPI::toJsonValue(m_damage_to_players_super_amount));
    }
    if (m_damage_to_players_super_num_shots_isSet) {
        obj.insert(QString("damage_to_players_super_num_shots"), ::OpenAPI::toJsonValue(m_damage_to_players_super_num_shots));
    }
    if (m_damage_to_structures_total_amount_isSet) {
        obj.insert(QString("damage_to_structures_total_amount"), ::OpenAPI::toJsonValue(m_damage_to_structures_total_amount));
    }
    if (m_damage_to_structures_total_num_shots_isSet) {
        obj.insert(QString("damage_to_structures_total_num_shots"), ::OpenAPI::toJsonValue(m_damage_to_structures_total_num_shots));
    }
    if (m_deaths_high_sec_isSet) {
        obj.insert(QString("deaths_high_sec"), ::OpenAPI::toJsonValue(m_deaths_high_sec));
    }
    if (m_deaths_low_sec_isSet) {
        obj.insert(QString("deaths_low_sec"), ::OpenAPI::toJsonValue(m_deaths_low_sec));
    }
    if (m_deaths_null_sec_isSet) {
        obj.insert(QString("deaths_null_sec"), ::OpenAPI::toJsonValue(m_deaths_null_sec));
    }
    if (m_deaths_pod_high_sec_isSet) {
        obj.insert(QString("deaths_pod_high_sec"), ::OpenAPI::toJsonValue(m_deaths_pod_high_sec));
    }
    if (m_deaths_pod_low_sec_isSet) {
        obj.insert(QString("deaths_pod_low_sec"), ::OpenAPI::toJsonValue(m_deaths_pod_low_sec));
    }
    if (m_deaths_pod_null_sec_isSet) {
        obj.insert(QString("deaths_pod_null_sec"), ::OpenAPI::toJsonValue(m_deaths_pod_null_sec));
    }
    if (m_deaths_pod_wormhole_isSet) {
        obj.insert(QString("deaths_pod_wormhole"), ::OpenAPI::toJsonValue(m_deaths_pod_wormhole));
    }
    if (m_deaths_wormhole_isSet) {
        obj.insert(QString("deaths_wormhole"), ::OpenAPI::toJsonValue(m_deaths_wormhole));
    }
    if (m_drone_engage_isSet) {
        obj.insert(QString("drone_engage"), ::OpenAPI::toJsonValue(m_drone_engage));
    }
    if (m_dscans_isSet) {
        obj.insert(QString("dscans"), ::OpenAPI::toJsonValue(m_dscans));
    }
    if (m_duel_requested_isSet) {
        obj.insert(QString("duel_requested"), ::OpenAPI::toJsonValue(m_duel_requested));
    }
    if (m_engagement_register_isSet) {
        obj.insert(QString("engagement_register"), ::OpenAPI::toJsonValue(m_engagement_register));
    }
    if (m_kills_assists_isSet) {
        obj.insert(QString("kills_assists"), ::OpenAPI::toJsonValue(m_kills_assists));
    }
    if (m_kills_high_sec_isSet) {
        obj.insert(QString("kills_high_sec"), ::OpenAPI::toJsonValue(m_kills_high_sec));
    }
    if (m_kills_low_sec_isSet) {
        obj.insert(QString("kills_low_sec"), ::OpenAPI::toJsonValue(m_kills_low_sec));
    }
    if (m_kills_null_sec_isSet) {
        obj.insert(QString("kills_null_sec"), ::OpenAPI::toJsonValue(m_kills_null_sec));
    }
    if (m_kills_pod_high_sec_isSet) {
        obj.insert(QString("kills_pod_high_sec"), ::OpenAPI::toJsonValue(m_kills_pod_high_sec));
    }
    if (m_kills_pod_low_sec_isSet) {
        obj.insert(QString("kills_pod_low_sec"), ::OpenAPI::toJsonValue(m_kills_pod_low_sec));
    }
    if (m_kills_pod_null_sec_isSet) {
        obj.insert(QString("kills_pod_null_sec"), ::OpenAPI::toJsonValue(m_kills_pod_null_sec));
    }
    if (m_kills_pod_wormhole_isSet) {
        obj.insert(QString("kills_pod_wormhole"), ::OpenAPI::toJsonValue(m_kills_pod_wormhole));
    }
    if (m_kills_wormhole_isSet) {
        obj.insert(QString("kills_wormhole"), ::OpenAPI::toJsonValue(m_kills_wormhole));
    }
    if (m_npc_flag_set_isSet) {
        obj.insert(QString("npc_flag_set"), ::OpenAPI::toJsonValue(m_npc_flag_set));
    }
    if (m_probe_scans_isSet) {
        obj.insert(QString("probe_scans"), ::OpenAPI::toJsonValue(m_probe_scans));
    }
    if (m_pvp_flag_set_isSet) {
        obj.insert(QString("pvp_flag_set"), ::OpenAPI::toJsonValue(m_pvp_flag_set));
    }
    if (m_repair_armor_by_remote_amount_isSet) {
        obj.insert(QString("repair_armor_by_remote_amount"), ::OpenAPI::toJsonValue(m_repair_armor_by_remote_amount));
    }
    if (m_repair_armor_remote_amount_isSet) {
        obj.insert(QString("repair_armor_remote_amount"), ::OpenAPI::toJsonValue(m_repair_armor_remote_amount));
    }
    if (m_repair_armor_self_amount_isSet) {
        obj.insert(QString("repair_armor_self_amount"), ::OpenAPI::toJsonValue(m_repair_armor_self_amount));
    }
    if (m_repair_capacitor_by_remote_amount_isSet) {
        obj.insert(QString("repair_capacitor_by_remote_amount"), ::OpenAPI::toJsonValue(m_repair_capacitor_by_remote_amount));
    }
    if (m_repair_capacitor_remote_amount_isSet) {
        obj.insert(QString("repair_capacitor_remote_amount"), ::OpenAPI::toJsonValue(m_repair_capacitor_remote_amount));
    }
    if (m_repair_capacitor_self_amount_isSet) {
        obj.insert(QString("repair_capacitor_self_amount"), ::OpenAPI::toJsonValue(m_repair_capacitor_self_amount));
    }
    if (m_repair_hull_by_remote_amount_isSet) {
        obj.insert(QString("repair_hull_by_remote_amount"), ::OpenAPI::toJsonValue(m_repair_hull_by_remote_amount));
    }
    if (m_repair_hull_remote_amount_isSet) {
        obj.insert(QString("repair_hull_remote_amount"), ::OpenAPI::toJsonValue(m_repair_hull_remote_amount));
    }
    if (m_repair_hull_self_amount_isSet) {
        obj.insert(QString("repair_hull_self_amount"), ::OpenAPI::toJsonValue(m_repair_hull_self_amount));
    }
    if (m_repair_shield_by_remote_amount_isSet) {
        obj.insert(QString("repair_shield_by_remote_amount"), ::OpenAPI::toJsonValue(m_repair_shield_by_remote_amount));
    }
    if (m_repair_shield_remote_amount_isSet) {
        obj.insert(QString("repair_shield_remote_amount"), ::OpenAPI::toJsonValue(m_repair_shield_remote_amount));
    }
    if (m_repair_shield_self_amount_isSet) {
        obj.insert(QString("repair_shield_self_amount"), ::OpenAPI::toJsonValue(m_repair_shield_self_amount));
    }
    if (m_self_destructs_isSet) {
        obj.insert(QString("self_destructs"), ::OpenAPI::toJsonValue(m_self_destructs));
    }
    if (m_warp_scramble_pc_isSet) {
        obj.insert(QString("warp_scramble_pc"), ::OpenAPI::toJsonValue(m_warp_scramble_pc));
    }
    if (m_warp_scrambledby_npc_isSet) {
        obj.insert(QString("warp_scrambledby_npc"), ::OpenAPI::toJsonValue(m_warp_scrambledby_npc));
    }
    if (m_warp_scrambledby_pc_isSet) {
        obj.insert(QString("warp_scrambledby_pc"), ::OpenAPI::toJsonValue(m_warp_scrambledby_pc));
    }
    if (m_weapon_flag_set_isSet) {
        obj.insert(QString("weapon_flag_set"), ::OpenAPI::toJsonValue(m_weapon_flag_set));
    }
    if (m_webifiedby_npc_isSet) {
        obj.insert(QString("webifiedby_npc"), ::OpenAPI::toJsonValue(m_webifiedby_npc));
    }
    if (m_webifiedby_pc_isSet) {
        obj.insert(QString("webifiedby_pc"), ::OpenAPI::toJsonValue(m_webifiedby_pc));
    }
    if (m_webifying_pc_isSet) {
        obj.insert(QString("webifying_pc"), ::OpenAPI::toJsonValue(m_webifying_pc));
    }
    return obj;
}

qint64 OAIGet_characters_character_id_stats_combat::getCapDrainedbyNpc() const {
    return m_cap_drainedby_npc;
}
void OAIGet_characters_character_id_stats_combat::setCapDrainedbyNpc(const qint64 &cap_drainedby_npc) {
    m_cap_drainedby_npc = cap_drainedby_npc;
    m_cap_drainedby_npc_isSet = true;
}

bool OAIGet_characters_character_id_stats_combat::is_cap_drainedby_npc_Set() const{
    return m_cap_drainedby_npc_isSet;
}

bool OAIGet_characters_character_id_stats_combat::is_cap_drainedby_npc_Valid() const{
    return m_cap_drainedby_npc_isValid;
}

qint64 OAIGet_characters_character_id_stats_combat::getCapDrainedbyPc() const {
    return m_cap_drainedby_pc;
}
void OAIGet_characters_character_id_stats_combat::setCapDrainedbyPc(const qint64 &cap_drainedby_pc) {
    m_cap_drainedby_pc = cap_drainedby_pc;
    m_cap_drainedby_pc_isSet = true;
}

bool OAIGet_characters_character_id_stats_combat::is_cap_drainedby_pc_Set() const{
    return m_cap_drainedby_pc_isSet;
}

bool OAIGet_characters_character_id_stats_combat::is_cap_drainedby_pc_Valid() const{
    return m_cap_drainedby_pc_isValid;
}

qint64 OAIGet_characters_character_id_stats_combat::getCapDrainingPc() const {
    return m_cap_draining_pc;
}
void OAIGet_characters_character_id_stats_combat::setCapDrainingPc(const qint64 &cap_draining_pc) {
    m_cap_draining_pc = cap_draining_pc;
    m_cap_draining_pc_isSet = true;
}

bool OAIGet_characters_character_id_stats_combat::is_cap_draining_pc_Set() const{
    return m_cap_draining_pc_isSet;
}

bool OAIGet_characters_character_id_stats_combat::is_cap_draining_pc_Valid() const{
    return m_cap_draining_pc_isValid;
}

qint64 OAIGet_characters_character_id_stats_combat::getCriminalFlagSet() const {
    return m_criminal_flag_set;
}
void OAIGet_characters_character_id_stats_combat::setCriminalFlagSet(const qint64 &criminal_flag_set) {
    m_criminal_flag_set = criminal_flag_set;
    m_criminal_flag_set_isSet = true;
}

bool OAIGet_characters_character_id_stats_combat::is_criminal_flag_set_Set() const{
    return m_criminal_flag_set_isSet;
}

bool OAIGet_characters_character_id_stats_combat::is_criminal_flag_set_Valid() const{
    return m_criminal_flag_set_isValid;
}

qint64 OAIGet_characters_character_id_stats_combat::getDamageFromNpCsAmount() const {
    return m_damage_from_np_cs_amount;
}
void OAIGet_characters_character_id_stats_combat::setDamageFromNpCsAmount(const qint64 &damage_from_np_cs_amount) {
    m_damage_from_np_cs_amount = damage_from_np_cs_amount;
    m_damage_from_np_cs_amount_isSet = true;
}

bool OAIGet_characters_character_id_stats_combat::is_damage_from_np_cs_amount_Set() const{
    return m_damage_from_np_cs_amount_isSet;
}

bool OAIGet_characters_character_id_stats_combat::is_damage_from_np_cs_amount_Valid() const{
    return m_damage_from_np_cs_amount_isValid;
}

qint64 OAIGet_characters_character_id_stats_combat::getDamageFromNpCsNumShots() const {
    return m_damage_from_np_cs_num_shots;
}
void OAIGet_characters_character_id_stats_combat::setDamageFromNpCsNumShots(const qint64 &damage_from_np_cs_num_shots) {
    m_damage_from_np_cs_num_shots = damage_from_np_cs_num_shots;
    m_damage_from_np_cs_num_shots_isSet = true;
}

bool OAIGet_characters_character_id_stats_combat::is_damage_from_np_cs_num_shots_Set() const{
    return m_damage_from_np_cs_num_shots_isSet;
}

bool OAIGet_characters_character_id_stats_combat::is_damage_from_np_cs_num_shots_Valid() const{
    return m_damage_from_np_cs_num_shots_isValid;
}

qint64 OAIGet_characters_character_id_stats_combat::getDamageFromPlayersBombAmount() const {
    return m_damage_from_players_bomb_amount;
}
void OAIGet_characters_character_id_stats_combat::setDamageFromPlayersBombAmount(const qint64 &damage_from_players_bomb_amount) {
    m_damage_from_players_bomb_amount = damage_from_players_bomb_amount;
    m_damage_from_players_bomb_amount_isSet = true;
}

bool OAIGet_characters_character_id_stats_combat::is_damage_from_players_bomb_amount_Set() const{
    return m_damage_from_players_bomb_amount_isSet;
}

bool OAIGet_characters_character_id_stats_combat::is_damage_from_players_bomb_amount_Valid() const{
    return m_damage_from_players_bomb_amount_isValid;
}

qint64 OAIGet_characters_character_id_stats_combat::getDamageFromPlayersBombNumShots() const {
    return m_damage_from_players_bomb_num_shots;
}
void OAIGet_characters_character_id_stats_combat::setDamageFromPlayersBombNumShots(const qint64 &damage_from_players_bomb_num_shots) {
    m_damage_from_players_bomb_num_shots = damage_from_players_bomb_num_shots;
    m_damage_from_players_bomb_num_shots_isSet = true;
}

bool OAIGet_characters_character_id_stats_combat::is_damage_from_players_bomb_num_shots_Set() const{
    return m_damage_from_players_bomb_num_shots_isSet;
}

bool OAIGet_characters_character_id_stats_combat::is_damage_from_players_bomb_num_shots_Valid() const{
    return m_damage_from_players_bomb_num_shots_isValid;
}

qint64 OAIGet_characters_character_id_stats_combat::getDamageFromPlayersCombatDroneAmount() const {
    return m_damage_from_players_combat_drone_amount;
}
void OAIGet_characters_character_id_stats_combat::setDamageFromPlayersCombatDroneAmount(const qint64 &damage_from_players_combat_drone_amount) {
    m_damage_from_players_combat_drone_amount = damage_from_players_combat_drone_amount;
    m_damage_from_players_combat_drone_amount_isSet = true;
}

bool OAIGet_characters_character_id_stats_combat::is_damage_from_players_combat_drone_amount_Set() const{
    return m_damage_from_players_combat_drone_amount_isSet;
}

bool OAIGet_characters_character_id_stats_combat::is_damage_from_players_combat_drone_amount_Valid() const{
    return m_damage_from_players_combat_drone_amount_isValid;
}

qint64 OAIGet_characters_character_id_stats_combat::getDamageFromPlayersCombatDroneNumShots() const {
    return m_damage_from_players_combat_drone_num_shots;
}
void OAIGet_characters_character_id_stats_combat::setDamageFromPlayersCombatDroneNumShots(const qint64 &damage_from_players_combat_drone_num_shots) {
    m_damage_from_players_combat_drone_num_shots = damage_from_players_combat_drone_num_shots;
    m_damage_from_players_combat_drone_num_shots_isSet = true;
}

bool OAIGet_characters_character_id_stats_combat::is_damage_from_players_combat_drone_num_shots_Set() const{
    return m_damage_from_players_combat_drone_num_shots_isSet;
}

bool OAIGet_characters_character_id_stats_combat::is_damage_from_players_combat_drone_num_shots_Valid() const{
    return m_damage_from_players_combat_drone_num_shots_isValid;
}

qint64 OAIGet_characters_character_id_stats_combat::getDamageFromPlayersEnergyAmount() const {
    return m_damage_from_players_energy_amount;
}
void OAIGet_characters_character_id_stats_combat::setDamageFromPlayersEnergyAmount(const qint64 &damage_from_players_energy_amount) {
    m_damage_from_players_energy_amount = damage_from_players_energy_amount;
    m_damage_from_players_energy_amount_isSet = true;
}

bool OAIGet_characters_character_id_stats_combat::is_damage_from_players_energy_amount_Set() const{
    return m_damage_from_players_energy_amount_isSet;
}

bool OAIGet_characters_character_id_stats_combat::is_damage_from_players_energy_amount_Valid() const{
    return m_damage_from_players_energy_amount_isValid;
}

qint64 OAIGet_characters_character_id_stats_combat::getDamageFromPlayersEnergyNumShots() const {
    return m_damage_from_players_energy_num_shots;
}
void OAIGet_characters_character_id_stats_combat::setDamageFromPlayersEnergyNumShots(const qint64 &damage_from_players_energy_num_shots) {
    m_damage_from_players_energy_num_shots = damage_from_players_energy_num_shots;
    m_damage_from_players_energy_num_shots_isSet = true;
}

bool OAIGet_characters_character_id_stats_combat::is_damage_from_players_energy_num_shots_Set() const{
    return m_damage_from_players_energy_num_shots_isSet;
}

bool OAIGet_characters_character_id_stats_combat::is_damage_from_players_energy_num_shots_Valid() const{
    return m_damage_from_players_energy_num_shots_isValid;
}

qint64 OAIGet_characters_character_id_stats_combat::getDamageFromPlayersFighterBomberAmount() const {
    return m_damage_from_players_fighter_bomber_amount;
}
void OAIGet_characters_character_id_stats_combat::setDamageFromPlayersFighterBomberAmount(const qint64 &damage_from_players_fighter_bomber_amount) {
    m_damage_from_players_fighter_bomber_amount = damage_from_players_fighter_bomber_amount;
    m_damage_from_players_fighter_bomber_amount_isSet = true;
}

bool OAIGet_characters_character_id_stats_combat::is_damage_from_players_fighter_bomber_amount_Set() const{
    return m_damage_from_players_fighter_bomber_amount_isSet;
}

bool OAIGet_characters_character_id_stats_combat::is_damage_from_players_fighter_bomber_amount_Valid() const{
    return m_damage_from_players_fighter_bomber_amount_isValid;
}

qint64 OAIGet_characters_character_id_stats_combat::getDamageFromPlayersFighterBomberNumShots() const {
    return m_damage_from_players_fighter_bomber_num_shots;
}
void OAIGet_characters_character_id_stats_combat::setDamageFromPlayersFighterBomberNumShots(const qint64 &damage_from_players_fighter_bomber_num_shots) {
    m_damage_from_players_fighter_bomber_num_shots = damage_from_players_fighter_bomber_num_shots;
    m_damage_from_players_fighter_bomber_num_shots_isSet = true;
}

bool OAIGet_characters_character_id_stats_combat::is_damage_from_players_fighter_bomber_num_shots_Set() const{
    return m_damage_from_players_fighter_bomber_num_shots_isSet;
}

bool OAIGet_characters_character_id_stats_combat::is_damage_from_players_fighter_bomber_num_shots_Valid() const{
    return m_damage_from_players_fighter_bomber_num_shots_isValid;
}

qint64 OAIGet_characters_character_id_stats_combat::getDamageFromPlayersFighterDroneAmount() const {
    return m_damage_from_players_fighter_drone_amount;
}
void OAIGet_characters_character_id_stats_combat::setDamageFromPlayersFighterDroneAmount(const qint64 &damage_from_players_fighter_drone_amount) {
    m_damage_from_players_fighter_drone_amount = damage_from_players_fighter_drone_amount;
    m_damage_from_players_fighter_drone_amount_isSet = true;
}

bool OAIGet_characters_character_id_stats_combat::is_damage_from_players_fighter_drone_amount_Set() const{
    return m_damage_from_players_fighter_drone_amount_isSet;
}

bool OAIGet_characters_character_id_stats_combat::is_damage_from_players_fighter_drone_amount_Valid() const{
    return m_damage_from_players_fighter_drone_amount_isValid;
}

qint64 OAIGet_characters_character_id_stats_combat::getDamageFromPlayersFighterDroneNumShots() const {
    return m_damage_from_players_fighter_drone_num_shots;
}
void OAIGet_characters_character_id_stats_combat::setDamageFromPlayersFighterDroneNumShots(const qint64 &damage_from_players_fighter_drone_num_shots) {
    m_damage_from_players_fighter_drone_num_shots = damage_from_players_fighter_drone_num_shots;
    m_damage_from_players_fighter_drone_num_shots_isSet = true;
}

bool OAIGet_characters_character_id_stats_combat::is_damage_from_players_fighter_drone_num_shots_Set() const{
    return m_damage_from_players_fighter_drone_num_shots_isSet;
}

bool OAIGet_characters_character_id_stats_combat::is_damage_from_players_fighter_drone_num_shots_Valid() const{
    return m_damage_from_players_fighter_drone_num_shots_isValid;
}

qint64 OAIGet_characters_character_id_stats_combat::getDamageFromPlayersHybridAmount() const {
    return m_damage_from_players_hybrid_amount;
}
void OAIGet_characters_character_id_stats_combat::setDamageFromPlayersHybridAmount(const qint64 &damage_from_players_hybrid_amount) {
    m_damage_from_players_hybrid_amount = damage_from_players_hybrid_amount;
    m_damage_from_players_hybrid_amount_isSet = true;
}

bool OAIGet_characters_character_id_stats_combat::is_damage_from_players_hybrid_amount_Set() const{
    return m_damage_from_players_hybrid_amount_isSet;
}

bool OAIGet_characters_character_id_stats_combat::is_damage_from_players_hybrid_amount_Valid() const{
    return m_damage_from_players_hybrid_amount_isValid;
}

qint64 OAIGet_characters_character_id_stats_combat::getDamageFromPlayersHybridNumShots() const {
    return m_damage_from_players_hybrid_num_shots;
}
void OAIGet_characters_character_id_stats_combat::setDamageFromPlayersHybridNumShots(const qint64 &damage_from_players_hybrid_num_shots) {
    m_damage_from_players_hybrid_num_shots = damage_from_players_hybrid_num_shots;
    m_damage_from_players_hybrid_num_shots_isSet = true;
}

bool OAIGet_characters_character_id_stats_combat::is_damage_from_players_hybrid_num_shots_Set() const{
    return m_damage_from_players_hybrid_num_shots_isSet;
}

bool OAIGet_characters_character_id_stats_combat::is_damage_from_players_hybrid_num_shots_Valid() const{
    return m_damage_from_players_hybrid_num_shots_isValid;
}

qint64 OAIGet_characters_character_id_stats_combat::getDamageFromPlayersMissileAmount() const {
    return m_damage_from_players_missile_amount;
}
void OAIGet_characters_character_id_stats_combat::setDamageFromPlayersMissileAmount(const qint64 &damage_from_players_missile_amount) {
    m_damage_from_players_missile_amount = damage_from_players_missile_amount;
    m_damage_from_players_missile_amount_isSet = true;
}

bool OAIGet_characters_character_id_stats_combat::is_damage_from_players_missile_amount_Set() const{
    return m_damage_from_players_missile_amount_isSet;
}

bool OAIGet_characters_character_id_stats_combat::is_damage_from_players_missile_amount_Valid() const{
    return m_damage_from_players_missile_amount_isValid;
}

qint64 OAIGet_characters_character_id_stats_combat::getDamageFromPlayersMissileNumShots() const {
    return m_damage_from_players_missile_num_shots;
}
void OAIGet_characters_character_id_stats_combat::setDamageFromPlayersMissileNumShots(const qint64 &damage_from_players_missile_num_shots) {
    m_damage_from_players_missile_num_shots = damage_from_players_missile_num_shots;
    m_damage_from_players_missile_num_shots_isSet = true;
}

bool OAIGet_characters_character_id_stats_combat::is_damage_from_players_missile_num_shots_Set() const{
    return m_damage_from_players_missile_num_shots_isSet;
}

bool OAIGet_characters_character_id_stats_combat::is_damage_from_players_missile_num_shots_Valid() const{
    return m_damage_from_players_missile_num_shots_isValid;
}

qint64 OAIGet_characters_character_id_stats_combat::getDamageFromPlayersProjectileAmount() const {
    return m_damage_from_players_projectile_amount;
}
void OAIGet_characters_character_id_stats_combat::setDamageFromPlayersProjectileAmount(const qint64 &damage_from_players_projectile_amount) {
    m_damage_from_players_projectile_amount = damage_from_players_projectile_amount;
    m_damage_from_players_projectile_amount_isSet = true;
}

bool OAIGet_characters_character_id_stats_combat::is_damage_from_players_projectile_amount_Set() const{
    return m_damage_from_players_projectile_amount_isSet;
}

bool OAIGet_characters_character_id_stats_combat::is_damage_from_players_projectile_amount_Valid() const{
    return m_damage_from_players_projectile_amount_isValid;
}

qint64 OAIGet_characters_character_id_stats_combat::getDamageFromPlayersProjectileNumShots() const {
    return m_damage_from_players_projectile_num_shots;
}
void OAIGet_characters_character_id_stats_combat::setDamageFromPlayersProjectileNumShots(const qint64 &damage_from_players_projectile_num_shots) {
    m_damage_from_players_projectile_num_shots = damage_from_players_projectile_num_shots;
    m_damage_from_players_projectile_num_shots_isSet = true;
}

bool OAIGet_characters_character_id_stats_combat::is_damage_from_players_projectile_num_shots_Set() const{
    return m_damage_from_players_projectile_num_shots_isSet;
}

bool OAIGet_characters_character_id_stats_combat::is_damage_from_players_projectile_num_shots_Valid() const{
    return m_damage_from_players_projectile_num_shots_isValid;
}

qint64 OAIGet_characters_character_id_stats_combat::getDamageFromPlayersSmartBombAmount() const {
    return m_damage_from_players_smart_bomb_amount;
}
void OAIGet_characters_character_id_stats_combat::setDamageFromPlayersSmartBombAmount(const qint64 &damage_from_players_smart_bomb_amount) {
    m_damage_from_players_smart_bomb_amount = damage_from_players_smart_bomb_amount;
    m_damage_from_players_smart_bomb_amount_isSet = true;
}

bool OAIGet_characters_character_id_stats_combat::is_damage_from_players_smart_bomb_amount_Set() const{
    return m_damage_from_players_smart_bomb_amount_isSet;
}

bool OAIGet_characters_character_id_stats_combat::is_damage_from_players_smart_bomb_amount_Valid() const{
    return m_damage_from_players_smart_bomb_amount_isValid;
}

qint64 OAIGet_characters_character_id_stats_combat::getDamageFromPlayersSmartBombNumShots() const {
    return m_damage_from_players_smart_bomb_num_shots;
}
void OAIGet_characters_character_id_stats_combat::setDamageFromPlayersSmartBombNumShots(const qint64 &damage_from_players_smart_bomb_num_shots) {
    m_damage_from_players_smart_bomb_num_shots = damage_from_players_smart_bomb_num_shots;
    m_damage_from_players_smart_bomb_num_shots_isSet = true;
}

bool OAIGet_characters_character_id_stats_combat::is_damage_from_players_smart_bomb_num_shots_Set() const{
    return m_damage_from_players_smart_bomb_num_shots_isSet;
}

bool OAIGet_characters_character_id_stats_combat::is_damage_from_players_smart_bomb_num_shots_Valid() const{
    return m_damage_from_players_smart_bomb_num_shots_isValid;
}

qint64 OAIGet_characters_character_id_stats_combat::getDamageFromPlayersSuperAmount() const {
    return m_damage_from_players_super_amount;
}
void OAIGet_characters_character_id_stats_combat::setDamageFromPlayersSuperAmount(const qint64 &damage_from_players_super_amount) {
    m_damage_from_players_super_amount = damage_from_players_super_amount;
    m_damage_from_players_super_amount_isSet = true;
}

bool OAIGet_characters_character_id_stats_combat::is_damage_from_players_super_amount_Set() const{
    return m_damage_from_players_super_amount_isSet;
}

bool OAIGet_characters_character_id_stats_combat::is_damage_from_players_super_amount_Valid() const{
    return m_damage_from_players_super_amount_isValid;
}

qint64 OAIGet_characters_character_id_stats_combat::getDamageFromPlayersSuperNumShots() const {
    return m_damage_from_players_super_num_shots;
}
void OAIGet_characters_character_id_stats_combat::setDamageFromPlayersSuperNumShots(const qint64 &damage_from_players_super_num_shots) {
    m_damage_from_players_super_num_shots = damage_from_players_super_num_shots;
    m_damage_from_players_super_num_shots_isSet = true;
}

bool OAIGet_characters_character_id_stats_combat::is_damage_from_players_super_num_shots_Set() const{
    return m_damage_from_players_super_num_shots_isSet;
}

bool OAIGet_characters_character_id_stats_combat::is_damage_from_players_super_num_shots_Valid() const{
    return m_damage_from_players_super_num_shots_isValid;
}

qint64 OAIGet_characters_character_id_stats_combat::getDamageFromStructuresTotalAmount() const {
    return m_damage_from_structures_total_amount;
}
void OAIGet_characters_character_id_stats_combat::setDamageFromStructuresTotalAmount(const qint64 &damage_from_structures_total_amount) {
    m_damage_from_structures_total_amount = damage_from_structures_total_amount;
    m_damage_from_structures_total_amount_isSet = true;
}

bool OAIGet_characters_character_id_stats_combat::is_damage_from_structures_total_amount_Set() const{
    return m_damage_from_structures_total_amount_isSet;
}

bool OAIGet_characters_character_id_stats_combat::is_damage_from_structures_total_amount_Valid() const{
    return m_damage_from_structures_total_amount_isValid;
}

qint64 OAIGet_characters_character_id_stats_combat::getDamageFromStructuresTotalNumShots() const {
    return m_damage_from_structures_total_num_shots;
}
void OAIGet_characters_character_id_stats_combat::setDamageFromStructuresTotalNumShots(const qint64 &damage_from_structures_total_num_shots) {
    m_damage_from_structures_total_num_shots = damage_from_structures_total_num_shots;
    m_damage_from_structures_total_num_shots_isSet = true;
}

bool OAIGet_characters_character_id_stats_combat::is_damage_from_structures_total_num_shots_Set() const{
    return m_damage_from_structures_total_num_shots_isSet;
}

bool OAIGet_characters_character_id_stats_combat::is_damage_from_structures_total_num_shots_Valid() const{
    return m_damage_from_structures_total_num_shots_isValid;
}

qint64 OAIGet_characters_character_id_stats_combat::getDamageToPlayersBombAmount() const {
    return m_damage_to_players_bomb_amount;
}
void OAIGet_characters_character_id_stats_combat::setDamageToPlayersBombAmount(const qint64 &damage_to_players_bomb_amount) {
    m_damage_to_players_bomb_amount = damage_to_players_bomb_amount;
    m_damage_to_players_bomb_amount_isSet = true;
}

bool OAIGet_characters_character_id_stats_combat::is_damage_to_players_bomb_amount_Set() const{
    return m_damage_to_players_bomb_amount_isSet;
}

bool OAIGet_characters_character_id_stats_combat::is_damage_to_players_bomb_amount_Valid() const{
    return m_damage_to_players_bomb_amount_isValid;
}

qint64 OAIGet_characters_character_id_stats_combat::getDamageToPlayersBombNumShots() const {
    return m_damage_to_players_bomb_num_shots;
}
void OAIGet_characters_character_id_stats_combat::setDamageToPlayersBombNumShots(const qint64 &damage_to_players_bomb_num_shots) {
    m_damage_to_players_bomb_num_shots = damage_to_players_bomb_num_shots;
    m_damage_to_players_bomb_num_shots_isSet = true;
}

bool OAIGet_characters_character_id_stats_combat::is_damage_to_players_bomb_num_shots_Set() const{
    return m_damage_to_players_bomb_num_shots_isSet;
}

bool OAIGet_characters_character_id_stats_combat::is_damage_to_players_bomb_num_shots_Valid() const{
    return m_damage_to_players_bomb_num_shots_isValid;
}

qint64 OAIGet_characters_character_id_stats_combat::getDamageToPlayersCombatDroneAmount() const {
    return m_damage_to_players_combat_drone_amount;
}
void OAIGet_characters_character_id_stats_combat::setDamageToPlayersCombatDroneAmount(const qint64 &damage_to_players_combat_drone_amount) {
    m_damage_to_players_combat_drone_amount = damage_to_players_combat_drone_amount;
    m_damage_to_players_combat_drone_amount_isSet = true;
}

bool OAIGet_characters_character_id_stats_combat::is_damage_to_players_combat_drone_amount_Set() const{
    return m_damage_to_players_combat_drone_amount_isSet;
}

bool OAIGet_characters_character_id_stats_combat::is_damage_to_players_combat_drone_amount_Valid() const{
    return m_damage_to_players_combat_drone_amount_isValid;
}

qint64 OAIGet_characters_character_id_stats_combat::getDamageToPlayersCombatDroneNumShots() const {
    return m_damage_to_players_combat_drone_num_shots;
}
void OAIGet_characters_character_id_stats_combat::setDamageToPlayersCombatDroneNumShots(const qint64 &damage_to_players_combat_drone_num_shots) {
    m_damage_to_players_combat_drone_num_shots = damage_to_players_combat_drone_num_shots;
    m_damage_to_players_combat_drone_num_shots_isSet = true;
}

bool OAIGet_characters_character_id_stats_combat::is_damage_to_players_combat_drone_num_shots_Set() const{
    return m_damage_to_players_combat_drone_num_shots_isSet;
}

bool OAIGet_characters_character_id_stats_combat::is_damage_to_players_combat_drone_num_shots_Valid() const{
    return m_damage_to_players_combat_drone_num_shots_isValid;
}

qint64 OAIGet_characters_character_id_stats_combat::getDamageToPlayersEnergyAmount() const {
    return m_damage_to_players_energy_amount;
}
void OAIGet_characters_character_id_stats_combat::setDamageToPlayersEnergyAmount(const qint64 &damage_to_players_energy_amount) {
    m_damage_to_players_energy_amount = damage_to_players_energy_amount;
    m_damage_to_players_energy_amount_isSet = true;
}

bool OAIGet_characters_character_id_stats_combat::is_damage_to_players_energy_amount_Set() const{
    return m_damage_to_players_energy_amount_isSet;
}

bool OAIGet_characters_character_id_stats_combat::is_damage_to_players_energy_amount_Valid() const{
    return m_damage_to_players_energy_amount_isValid;
}

qint64 OAIGet_characters_character_id_stats_combat::getDamageToPlayersEnergyNumShots() const {
    return m_damage_to_players_energy_num_shots;
}
void OAIGet_characters_character_id_stats_combat::setDamageToPlayersEnergyNumShots(const qint64 &damage_to_players_energy_num_shots) {
    m_damage_to_players_energy_num_shots = damage_to_players_energy_num_shots;
    m_damage_to_players_energy_num_shots_isSet = true;
}

bool OAIGet_characters_character_id_stats_combat::is_damage_to_players_energy_num_shots_Set() const{
    return m_damage_to_players_energy_num_shots_isSet;
}

bool OAIGet_characters_character_id_stats_combat::is_damage_to_players_energy_num_shots_Valid() const{
    return m_damage_to_players_energy_num_shots_isValid;
}

qint64 OAIGet_characters_character_id_stats_combat::getDamageToPlayersFighterBomberAmount() const {
    return m_damage_to_players_fighter_bomber_amount;
}
void OAIGet_characters_character_id_stats_combat::setDamageToPlayersFighterBomberAmount(const qint64 &damage_to_players_fighter_bomber_amount) {
    m_damage_to_players_fighter_bomber_amount = damage_to_players_fighter_bomber_amount;
    m_damage_to_players_fighter_bomber_amount_isSet = true;
}

bool OAIGet_characters_character_id_stats_combat::is_damage_to_players_fighter_bomber_amount_Set() const{
    return m_damage_to_players_fighter_bomber_amount_isSet;
}

bool OAIGet_characters_character_id_stats_combat::is_damage_to_players_fighter_bomber_amount_Valid() const{
    return m_damage_to_players_fighter_bomber_amount_isValid;
}

qint64 OAIGet_characters_character_id_stats_combat::getDamageToPlayersFighterBomberNumShots() const {
    return m_damage_to_players_fighter_bomber_num_shots;
}
void OAIGet_characters_character_id_stats_combat::setDamageToPlayersFighterBomberNumShots(const qint64 &damage_to_players_fighter_bomber_num_shots) {
    m_damage_to_players_fighter_bomber_num_shots = damage_to_players_fighter_bomber_num_shots;
    m_damage_to_players_fighter_bomber_num_shots_isSet = true;
}

bool OAIGet_characters_character_id_stats_combat::is_damage_to_players_fighter_bomber_num_shots_Set() const{
    return m_damage_to_players_fighter_bomber_num_shots_isSet;
}

bool OAIGet_characters_character_id_stats_combat::is_damage_to_players_fighter_bomber_num_shots_Valid() const{
    return m_damage_to_players_fighter_bomber_num_shots_isValid;
}

qint64 OAIGet_characters_character_id_stats_combat::getDamageToPlayersFighterDroneAmount() const {
    return m_damage_to_players_fighter_drone_amount;
}
void OAIGet_characters_character_id_stats_combat::setDamageToPlayersFighterDroneAmount(const qint64 &damage_to_players_fighter_drone_amount) {
    m_damage_to_players_fighter_drone_amount = damage_to_players_fighter_drone_amount;
    m_damage_to_players_fighter_drone_amount_isSet = true;
}

bool OAIGet_characters_character_id_stats_combat::is_damage_to_players_fighter_drone_amount_Set() const{
    return m_damage_to_players_fighter_drone_amount_isSet;
}

bool OAIGet_characters_character_id_stats_combat::is_damage_to_players_fighter_drone_amount_Valid() const{
    return m_damage_to_players_fighter_drone_amount_isValid;
}

qint64 OAIGet_characters_character_id_stats_combat::getDamageToPlayersFighterDroneNumShots() const {
    return m_damage_to_players_fighter_drone_num_shots;
}
void OAIGet_characters_character_id_stats_combat::setDamageToPlayersFighterDroneNumShots(const qint64 &damage_to_players_fighter_drone_num_shots) {
    m_damage_to_players_fighter_drone_num_shots = damage_to_players_fighter_drone_num_shots;
    m_damage_to_players_fighter_drone_num_shots_isSet = true;
}

bool OAIGet_characters_character_id_stats_combat::is_damage_to_players_fighter_drone_num_shots_Set() const{
    return m_damage_to_players_fighter_drone_num_shots_isSet;
}

bool OAIGet_characters_character_id_stats_combat::is_damage_to_players_fighter_drone_num_shots_Valid() const{
    return m_damage_to_players_fighter_drone_num_shots_isValid;
}

qint64 OAIGet_characters_character_id_stats_combat::getDamageToPlayersHybridAmount() const {
    return m_damage_to_players_hybrid_amount;
}
void OAIGet_characters_character_id_stats_combat::setDamageToPlayersHybridAmount(const qint64 &damage_to_players_hybrid_amount) {
    m_damage_to_players_hybrid_amount = damage_to_players_hybrid_amount;
    m_damage_to_players_hybrid_amount_isSet = true;
}

bool OAIGet_characters_character_id_stats_combat::is_damage_to_players_hybrid_amount_Set() const{
    return m_damage_to_players_hybrid_amount_isSet;
}

bool OAIGet_characters_character_id_stats_combat::is_damage_to_players_hybrid_amount_Valid() const{
    return m_damage_to_players_hybrid_amount_isValid;
}

qint64 OAIGet_characters_character_id_stats_combat::getDamageToPlayersHybridNumShots() const {
    return m_damage_to_players_hybrid_num_shots;
}
void OAIGet_characters_character_id_stats_combat::setDamageToPlayersHybridNumShots(const qint64 &damage_to_players_hybrid_num_shots) {
    m_damage_to_players_hybrid_num_shots = damage_to_players_hybrid_num_shots;
    m_damage_to_players_hybrid_num_shots_isSet = true;
}

bool OAIGet_characters_character_id_stats_combat::is_damage_to_players_hybrid_num_shots_Set() const{
    return m_damage_to_players_hybrid_num_shots_isSet;
}

bool OAIGet_characters_character_id_stats_combat::is_damage_to_players_hybrid_num_shots_Valid() const{
    return m_damage_to_players_hybrid_num_shots_isValid;
}

qint64 OAIGet_characters_character_id_stats_combat::getDamageToPlayersMissileAmount() const {
    return m_damage_to_players_missile_amount;
}
void OAIGet_characters_character_id_stats_combat::setDamageToPlayersMissileAmount(const qint64 &damage_to_players_missile_amount) {
    m_damage_to_players_missile_amount = damage_to_players_missile_amount;
    m_damage_to_players_missile_amount_isSet = true;
}

bool OAIGet_characters_character_id_stats_combat::is_damage_to_players_missile_amount_Set() const{
    return m_damage_to_players_missile_amount_isSet;
}

bool OAIGet_characters_character_id_stats_combat::is_damage_to_players_missile_amount_Valid() const{
    return m_damage_to_players_missile_amount_isValid;
}

qint64 OAIGet_characters_character_id_stats_combat::getDamageToPlayersMissileNumShots() const {
    return m_damage_to_players_missile_num_shots;
}
void OAIGet_characters_character_id_stats_combat::setDamageToPlayersMissileNumShots(const qint64 &damage_to_players_missile_num_shots) {
    m_damage_to_players_missile_num_shots = damage_to_players_missile_num_shots;
    m_damage_to_players_missile_num_shots_isSet = true;
}

bool OAIGet_characters_character_id_stats_combat::is_damage_to_players_missile_num_shots_Set() const{
    return m_damage_to_players_missile_num_shots_isSet;
}

bool OAIGet_characters_character_id_stats_combat::is_damage_to_players_missile_num_shots_Valid() const{
    return m_damage_to_players_missile_num_shots_isValid;
}

qint64 OAIGet_characters_character_id_stats_combat::getDamageToPlayersProjectileAmount() const {
    return m_damage_to_players_projectile_amount;
}
void OAIGet_characters_character_id_stats_combat::setDamageToPlayersProjectileAmount(const qint64 &damage_to_players_projectile_amount) {
    m_damage_to_players_projectile_amount = damage_to_players_projectile_amount;
    m_damage_to_players_projectile_amount_isSet = true;
}

bool OAIGet_characters_character_id_stats_combat::is_damage_to_players_projectile_amount_Set() const{
    return m_damage_to_players_projectile_amount_isSet;
}

bool OAIGet_characters_character_id_stats_combat::is_damage_to_players_projectile_amount_Valid() const{
    return m_damage_to_players_projectile_amount_isValid;
}

qint64 OAIGet_characters_character_id_stats_combat::getDamageToPlayersProjectileNumShots() const {
    return m_damage_to_players_projectile_num_shots;
}
void OAIGet_characters_character_id_stats_combat::setDamageToPlayersProjectileNumShots(const qint64 &damage_to_players_projectile_num_shots) {
    m_damage_to_players_projectile_num_shots = damage_to_players_projectile_num_shots;
    m_damage_to_players_projectile_num_shots_isSet = true;
}

bool OAIGet_characters_character_id_stats_combat::is_damage_to_players_projectile_num_shots_Set() const{
    return m_damage_to_players_projectile_num_shots_isSet;
}

bool OAIGet_characters_character_id_stats_combat::is_damage_to_players_projectile_num_shots_Valid() const{
    return m_damage_to_players_projectile_num_shots_isValid;
}

qint64 OAIGet_characters_character_id_stats_combat::getDamageToPlayersSmartBombAmount() const {
    return m_damage_to_players_smart_bomb_amount;
}
void OAIGet_characters_character_id_stats_combat::setDamageToPlayersSmartBombAmount(const qint64 &damage_to_players_smart_bomb_amount) {
    m_damage_to_players_smart_bomb_amount = damage_to_players_smart_bomb_amount;
    m_damage_to_players_smart_bomb_amount_isSet = true;
}

bool OAIGet_characters_character_id_stats_combat::is_damage_to_players_smart_bomb_amount_Set() const{
    return m_damage_to_players_smart_bomb_amount_isSet;
}

bool OAIGet_characters_character_id_stats_combat::is_damage_to_players_smart_bomb_amount_Valid() const{
    return m_damage_to_players_smart_bomb_amount_isValid;
}

qint64 OAIGet_characters_character_id_stats_combat::getDamageToPlayersSmartBombNumShots() const {
    return m_damage_to_players_smart_bomb_num_shots;
}
void OAIGet_characters_character_id_stats_combat::setDamageToPlayersSmartBombNumShots(const qint64 &damage_to_players_smart_bomb_num_shots) {
    m_damage_to_players_smart_bomb_num_shots = damage_to_players_smart_bomb_num_shots;
    m_damage_to_players_smart_bomb_num_shots_isSet = true;
}

bool OAIGet_characters_character_id_stats_combat::is_damage_to_players_smart_bomb_num_shots_Set() const{
    return m_damage_to_players_smart_bomb_num_shots_isSet;
}

bool OAIGet_characters_character_id_stats_combat::is_damage_to_players_smart_bomb_num_shots_Valid() const{
    return m_damage_to_players_smart_bomb_num_shots_isValid;
}

qint64 OAIGet_characters_character_id_stats_combat::getDamageToPlayersSuperAmount() const {
    return m_damage_to_players_super_amount;
}
void OAIGet_characters_character_id_stats_combat::setDamageToPlayersSuperAmount(const qint64 &damage_to_players_super_amount) {
    m_damage_to_players_super_amount = damage_to_players_super_amount;
    m_damage_to_players_super_amount_isSet = true;
}

bool OAIGet_characters_character_id_stats_combat::is_damage_to_players_super_amount_Set() const{
    return m_damage_to_players_super_amount_isSet;
}

bool OAIGet_characters_character_id_stats_combat::is_damage_to_players_super_amount_Valid() const{
    return m_damage_to_players_super_amount_isValid;
}

qint64 OAIGet_characters_character_id_stats_combat::getDamageToPlayersSuperNumShots() const {
    return m_damage_to_players_super_num_shots;
}
void OAIGet_characters_character_id_stats_combat::setDamageToPlayersSuperNumShots(const qint64 &damage_to_players_super_num_shots) {
    m_damage_to_players_super_num_shots = damage_to_players_super_num_shots;
    m_damage_to_players_super_num_shots_isSet = true;
}

bool OAIGet_characters_character_id_stats_combat::is_damage_to_players_super_num_shots_Set() const{
    return m_damage_to_players_super_num_shots_isSet;
}

bool OAIGet_characters_character_id_stats_combat::is_damage_to_players_super_num_shots_Valid() const{
    return m_damage_to_players_super_num_shots_isValid;
}

qint64 OAIGet_characters_character_id_stats_combat::getDamageToStructuresTotalAmount() const {
    return m_damage_to_structures_total_amount;
}
void OAIGet_characters_character_id_stats_combat::setDamageToStructuresTotalAmount(const qint64 &damage_to_structures_total_amount) {
    m_damage_to_structures_total_amount = damage_to_structures_total_amount;
    m_damage_to_structures_total_amount_isSet = true;
}

bool OAIGet_characters_character_id_stats_combat::is_damage_to_structures_total_amount_Set() const{
    return m_damage_to_structures_total_amount_isSet;
}

bool OAIGet_characters_character_id_stats_combat::is_damage_to_structures_total_amount_Valid() const{
    return m_damage_to_structures_total_amount_isValid;
}

qint64 OAIGet_characters_character_id_stats_combat::getDamageToStructuresTotalNumShots() const {
    return m_damage_to_structures_total_num_shots;
}
void OAIGet_characters_character_id_stats_combat::setDamageToStructuresTotalNumShots(const qint64 &damage_to_structures_total_num_shots) {
    m_damage_to_structures_total_num_shots = damage_to_structures_total_num_shots;
    m_damage_to_structures_total_num_shots_isSet = true;
}

bool OAIGet_characters_character_id_stats_combat::is_damage_to_structures_total_num_shots_Set() const{
    return m_damage_to_structures_total_num_shots_isSet;
}

bool OAIGet_characters_character_id_stats_combat::is_damage_to_structures_total_num_shots_Valid() const{
    return m_damage_to_structures_total_num_shots_isValid;
}

qint64 OAIGet_characters_character_id_stats_combat::getDeathsHighSec() const {
    return m_deaths_high_sec;
}
void OAIGet_characters_character_id_stats_combat::setDeathsHighSec(const qint64 &deaths_high_sec) {
    m_deaths_high_sec = deaths_high_sec;
    m_deaths_high_sec_isSet = true;
}

bool OAIGet_characters_character_id_stats_combat::is_deaths_high_sec_Set() const{
    return m_deaths_high_sec_isSet;
}

bool OAIGet_characters_character_id_stats_combat::is_deaths_high_sec_Valid() const{
    return m_deaths_high_sec_isValid;
}

qint64 OAIGet_characters_character_id_stats_combat::getDeathsLowSec() const {
    return m_deaths_low_sec;
}
void OAIGet_characters_character_id_stats_combat::setDeathsLowSec(const qint64 &deaths_low_sec) {
    m_deaths_low_sec = deaths_low_sec;
    m_deaths_low_sec_isSet = true;
}

bool OAIGet_characters_character_id_stats_combat::is_deaths_low_sec_Set() const{
    return m_deaths_low_sec_isSet;
}

bool OAIGet_characters_character_id_stats_combat::is_deaths_low_sec_Valid() const{
    return m_deaths_low_sec_isValid;
}

qint64 OAIGet_characters_character_id_stats_combat::getDeathsNullSec() const {
    return m_deaths_null_sec;
}
void OAIGet_characters_character_id_stats_combat::setDeathsNullSec(const qint64 &deaths_null_sec) {
    m_deaths_null_sec = deaths_null_sec;
    m_deaths_null_sec_isSet = true;
}

bool OAIGet_characters_character_id_stats_combat::is_deaths_null_sec_Set() const{
    return m_deaths_null_sec_isSet;
}

bool OAIGet_characters_character_id_stats_combat::is_deaths_null_sec_Valid() const{
    return m_deaths_null_sec_isValid;
}

qint64 OAIGet_characters_character_id_stats_combat::getDeathsPodHighSec() const {
    return m_deaths_pod_high_sec;
}
void OAIGet_characters_character_id_stats_combat::setDeathsPodHighSec(const qint64 &deaths_pod_high_sec) {
    m_deaths_pod_high_sec = deaths_pod_high_sec;
    m_deaths_pod_high_sec_isSet = true;
}

bool OAIGet_characters_character_id_stats_combat::is_deaths_pod_high_sec_Set() const{
    return m_deaths_pod_high_sec_isSet;
}

bool OAIGet_characters_character_id_stats_combat::is_deaths_pod_high_sec_Valid() const{
    return m_deaths_pod_high_sec_isValid;
}

qint64 OAIGet_characters_character_id_stats_combat::getDeathsPodLowSec() const {
    return m_deaths_pod_low_sec;
}
void OAIGet_characters_character_id_stats_combat::setDeathsPodLowSec(const qint64 &deaths_pod_low_sec) {
    m_deaths_pod_low_sec = deaths_pod_low_sec;
    m_deaths_pod_low_sec_isSet = true;
}

bool OAIGet_characters_character_id_stats_combat::is_deaths_pod_low_sec_Set() const{
    return m_deaths_pod_low_sec_isSet;
}

bool OAIGet_characters_character_id_stats_combat::is_deaths_pod_low_sec_Valid() const{
    return m_deaths_pod_low_sec_isValid;
}

qint64 OAIGet_characters_character_id_stats_combat::getDeathsPodNullSec() const {
    return m_deaths_pod_null_sec;
}
void OAIGet_characters_character_id_stats_combat::setDeathsPodNullSec(const qint64 &deaths_pod_null_sec) {
    m_deaths_pod_null_sec = deaths_pod_null_sec;
    m_deaths_pod_null_sec_isSet = true;
}

bool OAIGet_characters_character_id_stats_combat::is_deaths_pod_null_sec_Set() const{
    return m_deaths_pod_null_sec_isSet;
}

bool OAIGet_characters_character_id_stats_combat::is_deaths_pod_null_sec_Valid() const{
    return m_deaths_pod_null_sec_isValid;
}

qint64 OAIGet_characters_character_id_stats_combat::getDeathsPodWormhole() const {
    return m_deaths_pod_wormhole;
}
void OAIGet_characters_character_id_stats_combat::setDeathsPodWormhole(const qint64 &deaths_pod_wormhole) {
    m_deaths_pod_wormhole = deaths_pod_wormhole;
    m_deaths_pod_wormhole_isSet = true;
}

bool OAIGet_characters_character_id_stats_combat::is_deaths_pod_wormhole_Set() const{
    return m_deaths_pod_wormhole_isSet;
}

bool OAIGet_characters_character_id_stats_combat::is_deaths_pod_wormhole_Valid() const{
    return m_deaths_pod_wormhole_isValid;
}

qint64 OAIGet_characters_character_id_stats_combat::getDeathsWormhole() const {
    return m_deaths_wormhole;
}
void OAIGet_characters_character_id_stats_combat::setDeathsWormhole(const qint64 &deaths_wormhole) {
    m_deaths_wormhole = deaths_wormhole;
    m_deaths_wormhole_isSet = true;
}

bool OAIGet_characters_character_id_stats_combat::is_deaths_wormhole_Set() const{
    return m_deaths_wormhole_isSet;
}

bool OAIGet_characters_character_id_stats_combat::is_deaths_wormhole_Valid() const{
    return m_deaths_wormhole_isValid;
}

qint64 OAIGet_characters_character_id_stats_combat::getDroneEngage() const {
    return m_drone_engage;
}
void OAIGet_characters_character_id_stats_combat::setDroneEngage(const qint64 &drone_engage) {
    m_drone_engage = drone_engage;
    m_drone_engage_isSet = true;
}

bool OAIGet_characters_character_id_stats_combat::is_drone_engage_Set() const{
    return m_drone_engage_isSet;
}

bool OAIGet_characters_character_id_stats_combat::is_drone_engage_Valid() const{
    return m_drone_engage_isValid;
}

qint64 OAIGet_characters_character_id_stats_combat::getDscans() const {
    return m_dscans;
}
void OAIGet_characters_character_id_stats_combat::setDscans(const qint64 &dscans) {
    m_dscans = dscans;
    m_dscans_isSet = true;
}

bool OAIGet_characters_character_id_stats_combat::is_dscans_Set() const{
    return m_dscans_isSet;
}

bool OAIGet_characters_character_id_stats_combat::is_dscans_Valid() const{
    return m_dscans_isValid;
}

qint64 OAIGet_characters_character_id_stats_combat::getDuelRequested() const {
    return m_duel_requested;
}
void OAIGet_characters_character_id_stats_combat::setDuelRequested(const qint64 &duel_requested) {
    m_duel_requested = duel_requested;
    m_duel_requested_isSet = true;
}

bool OAIGet_characters_character_id_stats_combat::is_duel_requested_Set() const{
    return m_duel_requested_isSet;
}

bool OAIGet_characters_character_id_stats_combat::is_duel_requested_Valid() const{
    return m_duel_requested_isValid;
}

qint64 OAIGet_characters_character_id_stats_combat::getEngagementRegister() const {
    return m_engagement_register;
}
void OAIGet_characters_character_id_stats_combat::setEngagementRegister(const qint64 &engagement_register) {
    m_engagement_register = engagement_register;
    m_engagement_register_isSet = true;
}

bool OAIGet_characters_character_id_stats_combat::is_engagement_register_Set() const{
    return m_engagement_register_isSet;
}

bool OAIGet_characters_character_id_stats_combat::is_engagement_register_Valid() const{
    return m_engagement_register_isValid;
}

qint64 OAIGet_characters_character_id_stats_combat::getKillsAssists() const {
    return m_kills_assists;
}
void OAIGet_characters_character_id_stats_combat::setKillsAssists(const qint64 &kills_assists) {
    m_kills_assists = kills_assists;
    m_kills_assists_isSet = true;
}

bool OAIGet_characters_character_id_stats_combat::is_kills_assists_Set() const{
    return m_kills_assists_isSet;
}

bool OAIGet_characters_character_id_stats_combat::is_kills_assists_Valid() const{
    return m_kills_assists_isValid;
}

qint64 OAIGet_characters_character_id_stats_combat::getKillsHighSec() const {
    return m_kills_high_sec;
}
void OAIGet_characters_character_id_stats_combat::setKillsHighSec(const qint64 &kills_high_sec) {
    m_kills_high_sec = kills_high_sec;
    m_kills_high_sec_isSet = true;
}

bool OAIGet_characters_character_id_stats_combat::is_kills_high_sec_Set() const{
    return m_kills_high_sec_isSet;
}

bool OAIGet_characters_character_id_stats_combat::is_kills_high_sec_Valid() const{
    return m_kills_high_sec_isValid;
}

qint64 OAIGet_characters_character_id_stats_combat::getKillsLowSec() const {
    return m_kills_low_sec;
}
void OAIGet_characters_character_id_stats_combat::setKillsLowSec(const qint64 &kills_low_sec) {
    m_kills_low_sec = kills_low_sec;
    m_kills_low_sec_isSet = true;
}

bool OAIGet_characters_character_id_stats_combat::is_kills_low_sec_Set() const{
    return m_kills_low_sec_isSet;
}

bool OAIGet_characters_character_id_stats_combat::is_kills_low_sec_Valid() const{
    return m_kills_low_sec_isValid;
}

qint64 OAIGet_characters_character_id_stats_combat::getKillsNullSec() const {
    return m_kills_null_sec;
}
void OAIGet_characters_character_id_stats_combat::setKillsNullSec(const qint64 &kills_null_sec) {
    m_kills_null_sec = kills_null_sec;
    m_kills_null_sec_isSet = true;
}

bool OAIGet_characters_character_id_stats_combat::is_kills_null_sec_Set() const{
    return m_kills_null_sec_isSet;
}

bool OAIGet_characters_character_id_stats_combat::is_kills_null_sec_Valid() const{
    return m_kills_null_sec_isValid;
}

qint64 OAIGet_characters_character_id_stats_combat::getKillsPodHighSec() const {
    return m_kills_pod_high_sec;
}
void OAIGet_characters_character_id_stats_combat::setKillsPodHighSec(const qint64 &kills_pod_high_sec) {
    m_kills_pod_high_sec = kills_pod_high_sec;
    m_kills_pod_high_sec_isSet = true;
}

bool OAIGet_characters_character_id_stats_combat::is_kills_pod_high_sec_Set() const{
    return m_kills_pod_high_sec_isSet;
}

bool OAIGet_characters_character_id_stats_combat::is_kills_pod_high_sec_Valid() const{
    return m_kills_pod_high_sec_isValid;
}

qint64 OAIGet_characters_character_id_stats_combat::getKillsPodLowSec() const {
    return m_kills_pod_low_sec;
}
void OAIGet_characters_character_id_stats_combat::setKillsPodLowSec(const qint64 &kills_pod_low_sec) {
    m_kills_pod_low_sec = kills_pod_low_sec;
    m_kills_pod_low_sec_isSet = true;
}

bool OAIGet_characters_character_id_stats_combat::is_kills_pod_low_sec_Set() const{
    return m_kills_pod_low_sec_isSet;
}

bool OAIGet_characters_character_id_stats_combat::is_kills_pod_low_sec_Valid() const{
    return m_kills_pod_low_sec_isValid;
}

qint64 OAIGet_characters_character_id_stats_combat::getKillsPodNullSec() const {
    return m_kills_pod_null_sec;
}
void OAIGet_characters_character_id_stats_combat::setKillsPodNullSec(const qint64 &kills_pod_null_sec) {
    m_kills_pod_null_sec = kills_pod_null_sec;
    m_kills_pod_null_sec_isSet = true;
}

bool OAIGet_characters_character_id_stats_combat::is_kills_pod_null_sec_Set() const{
    return m_kills_pod_null_sec_isSet;
}

bool OAIGet_characters_character_id_stats_combat::is_kills_pod_null_sec_Valid() const{
    return m_kills_pod_null_sec_isValid;
}

qint64 OAIGet_characters_character_id_stats_combat::getKillsPodWormhole() const {
    return m_kills_pod_wormhole;
}
void OAIGet_characters_character_id_stats_combat::setKillsPodWormhole(const qint64 &kills_pod_wormhole) {
    m_kills_pod_wormhole = kills_pod_wormhole;
    m_kills_pod_wormhole_isSet = true;
}

bool OAIGet_characters_character_id_stats_combat::is_kills_pod_wormhole_Set() const{
    return m_kills_pod_wormhole_isSet;
}

bool OAIGet_characters_character_id_stats_combat::is_kills_pod_wormhole_Valid() const{
    return m_kills_pod_wormhole_isValid;
}

qint64 OAIGet_characters_character_id_stats_combat::getKillsWormhole() const {
    return m_kills_wormhole;
}
void OAIGet_characters_character_id_stats_combat::setKillsWormhole(const qint64 &kills_wormhole) {
    m_kills_wormhole = kills_wormhole;
    m_kills_wormhole_isSet = true;
}

bool OAIGet_characters_character_id_stats_combat::is_kills_wormhole_Set() const{
    return m_kills_wormhole_isSet;
}

bool OAIGet_characters_character_id_stats_combat::is_kills_wormhole_Valid() const{
    return m_kills_wormhole_isValid;
}

qint64 OAIGet_characters_character_id_stats_combat::getNpcFlagSet() const {
    return m_npc_flag_set;
}
void OAIGet_characters_character_id_stats_combat::setNpcFlagSet(const qint64 &npc_flag_set) {
    m_npc_flag_set = npc_flag_set;
    m_npc_flag_set_isSet = true;
}

bool OAIGet_characters_character_id_stats_combat::is_npc_flag_set_Set() const{
    return m_npc_flag_set_isSet;
}

bool OAIGet_characters_character_id_stats_combat::is_npc_flag_set_Valid() const{
    return m_npc_flag_set_isValid;
}

qint64 OAIGet_characters_character_id_stats_combat::getProbeScans() const {
    return m_probe_scans;
}
void OAIGet_characters_character_id_stats_combat::setProbeScans(const qint64 &probe_scans) {
    m_probe_scans = probe_scans;
    m_probe_scans_isSet = true;
}

bool OAIGet_characters_character_id_stats_combat::is_probe_scans_Set() const{
    return m_probe_scans_isSet;
}

bool OAIGet_characters_character_id_stats_combat::is_probe_scans_Valid() const{
    return m_probe_scans_isValid;
}

qint64 OAIGet_characters_character_id_stats_combat::getPvpFlagSet() const {
    return m_pvp_flag_set;
}
void OAIGet_characters_character_id_stats_combat::setPvpFlagSet(const qint64 &pvp_flag_set) {
    m_pvp_flag_set = pvp_flag_set;
    m_pvp_flag_set_isSet = true;
}

bool OAIGet_characters_character_id_stats_combat::is_pvp_flag_set_Set() const{
    return m_pvp_flag_set_isSet;
}

bool OAIGet_characters_character_id_stats_combat::is_pvp_flag_set_Valid() const{
    return m_pvp_flag_set_isValid;
}

qint64 OAIGet_characters_character_id_stats_combat::getRepairArmorByRemoteAmount() const {
    return m_repair_armor_by_remote_amount;
}
void OAIGet_characters_character_id_stats_combat::setRepairArmorByRemoteAmount(const qint64 &repair_armor_by_remote_amount) {
    m_repair_armor_by_remote_amount = repair_armor_by_remote_amount;
    m_repair_armor_by_remote_amount_isSet = true;
}

bool OAIGet_characters_character_id_stats_combat::is_repair_armor_by_remote_amount_Set() const{
    return m_repair_armor_by_remote_amount_isSet;
}

bool OAIGet_characters_character_id_stats_combat::is_repair_armor_by_remote_amount_Valid() const{
    return m_repair_armor_by_remote_amount_isValid;
}

qint64 OAIGet_characters_character_id_stats_combat::getRepairArmorRemoteAmount() const {
    return m_repair_armor_remote_amount;
}
void OAIGet_characters_character_id_stats_combat::setRepairArmorRemoteAmount(const qint64 &repair_armor_remote_amount) {
    m_repair_armor_remote_amount = repair_armor_remote_amount;
    m_repair_armor_remote_amount_isSet = true;
}

bool OAIGet_characters_character_id_stats_combat::is_repair_armor_remote_amount_Set() const{
    return m_repair_armor_remote_amount_isSet;
}

bool OAIGet_characters_character_id_stats_combat::is_repair_armor_remote_amount_Valid() const{
    return m_repair_armor_remote_amount_isValid;
}

qint64 OAIGet_characters_character_id_stats_combat::getRepairArmorSelfAmount() const {
    return m_repair_armor_self_amount;
}
void OAIGet_characters_character_id_stats_combat::setRepairArmorSelfAmount(const qint64 &repair_armor_self_amount) {
    m_repair_armor_self_amount = repair_armor_self_amount;
    m_repair_armor_self_amount_isSet = true;
}

bool OAIGet_characters_character_id_stats_combat::is_repair_armor_self_amount_Set() const{
    return m_repair_armor_self_amount_isSet;
}

bool OAIGet_characters_character_id_stats_combat::is_repair_armor_self_amount_Valid() const{
    return m_repair_armor_self_amount_isValid;
}

qint64 OAIGet_characters_character_id_stats_combat::getRepairCapacitorByRemoteAmount() const {
    return m_repair_capacitor_by_remote_amount;
}
void OAIGet_characters_character_id_stats_combat::setRepairCapacitorByRemoteAmount(const qint64 &repair_capacitor_by_remote_amount) {
    m_repair_capacitor_by_remote_amount = repair_capacitor_by_remote_amount;
    m_repair_capacitor_by_remote_amount_isSet = true;
}

bool OAIGet_characters_character_id_stats_combat::is_repair_capacitor_by_remote_amount_Set() const{
    return m_repair_capacitor_by_remote_amount_isSet;
}

bool OAIGet_characters_character_id_stats_combat::is_repair_capacitor_by_remote_amount_Valid() const{
    return m_repair_capacitor_by_remote_amount_isValid;
}

qint64 OAIGet_characters_character_id_stats_combat::getRepairCapacitorRemoteAmount() const {
    return m_repair_capacitor_remote_amount;
}
void OAIGet_characters_character_id_stats_combat::setRepairCapacitorRemoteAmount(const qint64 &repair_capacitor_remote_amount) {
    m_repair_capacitor_remote_amount = repair_capacitor_remote_amount;
    m_repair_capacitor_remote_amount_isSet = true;
}

bool OAIGet_characters_character_id_stats_combat::is_repair_capacitor_remote_amount_Set() const{
    return m_repair_capacitor_remote_amount_isSet;
}

bool OAIGet_characters_character_id_stats_combat::is_repair_capacitor_remote_amount_Valid() const{
    return m_repair_capacitor_remote_amount_isValid;
}

qint64 OAIGet_characters_character_id_stats_combat::getRepairCapacitorSelfAmount() const {
    return m_repair_capacitor_self_amount;
}
void OAIGet_characters_character_id_stats_combat::setRepairCapacitorSelfAmount(const qint64 &repair_capacitor_self_amount) {
    m_repair_capacitor_self_amount = repair_capacitor_self_amount;
    m_repair_capacitor_self_amount_isSet = true;
}

bool OAIGet_characters_character_id_stats_combat::is_repair_capacitor_self_amount_Set() const{
    return m_repair_capacitor_self_amount_isSet;
}

bool OAIGet_characters_character_id_stats_combat::is_repair_capacitor_self_amount_Valid() const{
    return m_repair_capacitor_self_amount_isValid;
}

qint64 OAIGet_characters_character_id_stats_combat::getRepairHullByRemoteAmount() const {
    return m_repair_hull_by_remote_amount;
}
void OAIGet_characters_character_id_stats_combat::setRepairHullByRemoteAmount(const qint64 &repair_hull_by_remote_amount) {
    m_repair_hull_by_remote_amount = repair_hull_by_remote_amount;
    m_repair_hull_by_remote_amount_isSet = true;
}

bool OAIGet_characters_character_id_stats_combat::is_repair_hull_by_remote_amount_Set() const{
    return m_repair_hull_by_remote_amount_isSet;
}

bool OAIGet_characters_character_id_stats_combat::is_repair_hull_by_remote_amount_Valid() const{
    return m_repair_hull_by_remote_amount_isValid;
}

qint64 OAIGet_characters_character_id_stats_combat::getRepairHullRemoteAmount() const {
    return m_repair_hull_remote_amount;
}
void OAIGet_characters_character_id_stats_combat::setRepairHullRemoteAmount(const qint64 &repair_hull_remote_amount) {
    m_repair_hull_remote_amount = repair_hull_remote_amount;
    m_repair_hull_remote_amount_isSet = true;
}

bool OAIGet_characters_character_id_stats_combat::is_repair_hull_remote_amount_Set() const{
    return m_repair_hull_remote_amount_isSet;
}

bool OAIGet_characters_character_id_stats_combat::is_repair_hull_remote_amount_Valid() const{
    return m_repair_hull_remote_amount_isValid;
}

qint64 OAIGet_characters_character_id_stats_combat::getRepairHullSelfAmount() const {
    return m_repair_hull_self_amount;
}
void OAIGet_characters_character_id_stats_combat::setRepairHullSelfAmount(const qint64 &repair_hull_self_amount) {
    m_repair_hull_self_amount = repair_hull_self_amount;
    m_repair_hull_self_amount_isSet = true;
}

bool OAIGet_characters_character_id_stats_combat::is_repair_hull_self_amount_Set() const{
    return m_repair_hull_self_amount_isSet;
}

bool OAIGet_characters_character_id_stats_combat::is_repair_hull_self_amount_Valid() const{
    return m_repair_hull_self_amount_isValid;
}

qint64 OAIGet_characters_character_id_stats_combat::getRepairShieldByRemoteAmount() const {
    return m_repair_shield_by_remote_amount;
}
void OAIGet_characters_character_id_stats_combat::setRepairShieldByRemoteAmount(const qint64 &repair_shield_by_remote_amount) {
    m_repair_shield_by_remote_amount = repair_shield_by_remote_amount;
    m_repair_shield_by_remote_amount_isSet = true;
}

bool OAIGet_characters_character_id_stats_combat::is_repair_shield_by_remote_amount_Set() const{
    return m_repair_shield_by_remote_amount_isSet;
}

bool OAIGet_characters_character_id_stats_combat::is_repair_shield_by_remote_amount_Valid() const{
    return m_repair_shield_by_remote_amount_isValid;
}

qint64 OAIGet_characters_character_id_stats_combat::getRepairShieldRemoteAmount() const {
    return m_repair_shield_remote_amount;
}
void OAIGet_characters_character_id_stats_combat::setRepairShieldRemoteAmount(const qint64 &repair_shield_remote_amount) {
    m_repair_shield_remote_amount = repair_shield_remote_amount;
    m_repair_shield_remote_amount_isSet = true;
}

bool OAIGet_characters_character_id_stats_combat::is_repair_shield_remote_amount_Set() const{
    return m_repair_shield_remote_amount_isSet;
}

bool OAIGet_characters_character_id_stats_combat::is_repair_shield_remote_amount_Valid() const{
    return m_repair_shield_remote_amount_isValid;
}

qint64 OAIGet_characters_character_id_stats_combat::getRepairShieldSelfAmount() const {
    return m_repair_shield_self_amount;
}
void OAIGet_characters_character_id_stats_combat::setRepairShieldSelfAmount(const qint64 &repair_shield_self_amount) {
    m_repair_shield_self_amount = repair_shield_self_amount;
    m_repair_shield_self_amount_isSet = true;
}

bool OAIGet_characters_character_id_stats_combat::is_repair_shield_self_amount_Set() const{
    return m_repair_shield_self_amount_isSet;
}

bool OAIGet_characters_character_id_stats_combat::is_repair_shield_self_amount_Valid() const{
    return m_repair_shield_self_amount_isValid;
}

qint64 OAIGet_characters_character_id_stats_combat::getSelfDestructs() const {
    return m_self_destructs;
}
void OAIGet_characters_character_id_stats_combat::setSelfDestructs(const qint64 &self_destructs) {
    m_self_destructs = self_destructs;
    m_self_destructs_isSet = true;
}

bool OAIGet_characters_character_id_stats_combat::is_self_destructs_Set() const{
    return m_self_destructs_isSet;
}

bool OAIGet_characters_character_id_stats_combat::is_self_destructs_Valid() const{
    return m_self_destructs_isValid;
}

qint64 OAIGet_characters_character_id_stats_combat::getWarpScramblePc() const {
    return m_warp_scramble_pc;
}
void OAIGet_characters_character_id_stats_combat::setWarpScramblePc(const qint64 &warp_scramble_pc) {
    m_warp_scramble_pc = warp_scramble_pc;
    m_warp_scramble_pc_isSet = true;
}

bool OAIGet_characters_character_id_stats_combat::is_warp_scramble_pc_Set() const{
    return m_warp_scramble_pc_isSet;
}

bool OAIGet_characters_character_id_stats_combat::is_warp_scramble_pc_Valid() const{
    return m_warp_scramble_pc_isValid;
}

qint64 OAIGet_characters_character_id_stats_combat::getWarpScrambledbyNpc() const {
    return m_warp_scrambledby_npc;
}
void OAIGet_characters_character_id_stats_combat::setWarpScrambledbyNpc(const qint64 &warp_scrambledby_npc) {
    m_warp_scrambledby_npc = warp_scrambledby_npc;
    m_warp_scrambledby_npc_isSet = true;
}

bool OAIGet_characters_character_id_stats_combat::is_warp_scrambledby_npc_Set() const{
    return m_warp_scrambledby_npc_isSet;
}

bool OAIGet_characters_character_id_stats_combat::is_warp_scrambledby_npc_Valid() const{
    return m_warp_scrambledby_npc_isValid;
}

qint64 OAIGet_characters_character_id_stats_combat::getWarpScrambledbyPc() const {
    return m_warp_scrambledby_pc;
}
void OAIGet_characters_character_id_stats_combat::setWarpScrambledbyPc(const qint64 &warp_scrambledby_pc) {
    m_warp_scrambledby_pc = warp_scrambledby_pc;
    m_warp_scrambledby_pc_isSet = true;
}

bool OAIGet_characters_character_id_stats_combat::is_warp_scrambledby_pc_Set() const{
    return m_warp_scrambledby_pc_isSet;
}

bool OAIGet_characters_character_id_stats_combat::is_warp_scrambledby_pc_Valid() const{
    return m_warp_scrambledby_pc_isValid;
}

qint64 OAIGet_characters_character_id_stats_combat::getWeaponFlagSet() const {
    return m_weapon_flag_set;
}
void OAIGet_characters_character_id_stats_combat::setWeaponFlagSet(const qint64 &weapon_flag_set) {
    m_weapon_flag_set = weapon_flag_set;
    m_weapon_flag_set_isSet = true;
}

bool OAIGet_characters_character_id_stats_combat::is_weapon_flag_set_Set() const{
    return m_weapon_flag_set_isSet;
}

bool OAIGet_characters_character_id_stats_combat::is_weapon_flag_set_Valid() const{
    return m_weapon_flag_set_isValid;
}

qint64 OAIGet_characters_character_id_stats_combat::getWebifiedbyNpc() const {
    return m_webifiedby_npc;
}
void OAIGet_characters_character_id_stats_combat::setWebifiedbyNpc(const qint64 &webifiedby_npc) {
    m_webifiedby_npc = webifiedby_npc;
    m_webifiedby_npc_isSet = true;
}

bool OAIGet_characters_character_id_stats_combat::is_webifiedby_npc_Set() const{
    return m_webifiedby_npc_isSet;
}

bool OAIGet_characters_character_id_stats_combat::is_webifiedby_npc_Valid() const{
    return m_webifiedby_npc_isValid;
}

qint64 OAIGet_characters_character_id_stats_combat::getWebifiedbyPc() const {
    return m_webifiedby_pc;
}
void OAIGet_characters_character_id_stats_combat::setWebifiedbyPc(const qint64 &webifiedby_pc) {
    m_webifiedby_pc = webifiedby_pc;
    m_webifiedby_pc_isSet = true;
}

bool OAIGet_characters_character_id_stats_combat::is_webifiedby_pc_Set() const{
    return m_webifiedby_pc_isSet;
}

bool OAIGet_characters_character_id_stats_combat::is_webifiedby_pc_Valid() const{
    return m_webifiedby_pc_isValid;
}

qint64 OAIGet_characters_character_id_stats_combat::getWebifyingPc() const {
    return m_webifying_pc;
}
void OAIGet_characters_character_id_stats_combat::setWebifyingPc(const qint64 &webifying_pc) {
    m_webifying_pc = webifying_pc;
    m_webifying_pc_isSet = true;
}

bool OAIGet_characters_character_id_stats_combat::is_webifying_pc_Set() const{
    return m_webifying_pc_isSet;
}

bool OAIGet_characters_character_id_stats_combat::is_webifying_pc_Valid() const{
    return m_webifying_pc_isValid;
}

bool OAIGet_characters_character_id_stats_combat::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_cap_drainedby_npc_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_cap_drainedby_pc_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_cap_draining_pc_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_criminal_flag_set_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_damage_from_np_cs_amount_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_damage_from_np_cs_num_shots_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_damage_from_players_bomb_amount_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_damage_from_players_bomb_num_shots_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_damage_from_players_combat_drone_amount_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_damage_from_players_combat_drone_num_shots_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_damage_from_players_energy_amount_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_damage_from_players_energy_num_shots_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_damage_from_players_fighter_bomber_amount_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_damage_from_players_fighter_bomber_num_shots_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_damage_from_players_fighter_drone_amount_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_damage_from_players_fighter_drone_num_shots_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_damage_from_players_hybrid_amount_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_damage_from_players_hybrid_num_shots_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_damage_from_players_missile_amount_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_damage_from_players_missile_num_shots_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_damage_from_players_projectile_amount_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_damage_from_players_projectile_num_shots_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_damage_from_players_smart_bomb_amount_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_damage_from_players_smart_bomb_num_shots_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_damage_from_players_super_amount_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_damage_from_players_super_num_shots_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_damage_from_structures_total_amount_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_damage_from_structures_total_num_shots_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_damage_to_players_bomb_amount_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_damage_to_players_bomb_num_shots_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_damage_to_players_combat_drone_amount_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_damage_to_players_combat_drone_num_shots_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_damage_to_players_energy_amount_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_damage_to_players_energy_num_shots_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_damage_to_players_fighter_bomber_amount_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_damage_to_players_fighter_bomber_num_shots_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_damage_to_players_fighter_drone_amount_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_damage_to_players_fighter_drone_num_shots_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_damage_to_players_hybrid_amount_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_damage_to_players_hybrid_num_shots_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_damage_to_players_missile_amount_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_damage_to_players_missile_num_shots_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_damage_to_players_projectile_amount_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_damage_to_players_projectile_num_shots_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_damage_to_players_smart_bomb_amount_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_damage_to_players_smart_bomb_num_shots_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_damage_to_players_super_amount_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_damage_to_players_super_num_shots_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_damage_to_structures_total_amount_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_damage_to_structures_total_num_shots_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_deaths_high_sec_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_deaths_low_sec_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_deaths_null_sec_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_deaths_pod_high_sec_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_deaths_pod_low_sec_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_deaths_pod_null_sec_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_deaths_pod_wormhole_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_deaths_wormhole_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_drone_engage_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_dscans_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_duel_requested_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_engagement_register_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_kills_assists_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_kills_high_sec_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_kills_low_sec_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_kills_null_sec_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_kills_pod_high_sec_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_kills_pod_low_sec_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_kills_pod_null_sec_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_kills_pod_wormhole_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_kills_wormhole_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_npc_flag_set_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_probe_scans_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_pvp_flag_set_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_repair_armor_by_remote_amount_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_repair_armor_remote_amount_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_repair_armor_self_amount_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_repair_capacitor_by_remote_amount_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_repair_capacitor_remote_amount_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_repair_capacitor_self_amount_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_repair_hull_by_remote_amount_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_repair_hull_remote_amount_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_repair_hull_self_amount_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_repair_shield_by_remote_amount_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_repair_shield_remote_amount_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_repair_shield_self_amount_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_self_destructs_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_warp_scramble_pc_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_warp_scrambledby_npc_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_warp_scrambledby_pc_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_weapon_flag_set_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_webifiedby_npc_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_webifiedby_pc_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_webifying_pc_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIGet_characters_character_id_stats_combat::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
