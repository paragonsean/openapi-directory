/**
 * EVE Swagger Interface
 * An OpenAPI for EVE Online
 *
 * The version of the OpenAPI document: 0.8.6
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#ifndef OAI_OAIMailApi_H
#define OAI_OAIMailApi_H

#include "OAIHelpers.h"
#include "OAIHttpRequest.h"
#include "OAIServerConfiguration.h"
#include "OAIOauth.h"

#include "OAIBad_request.h"
#include "OAIDelete_characters_character_id_mail_labels_label_id_unprocessable_entity.h"
#include "OAIError_limited.h"
#include "OAIForbidden.h"
#include "OAIGateway_timeout.h"
#include "OAIGet_characters_character_id_mail_200_ok.h"
#include "OAIGet_characters_character_id_mail_labels_ok.h"
#include "OAIGet_characters_character_id_mail_lists_200_ok.h"
#include "OAIGet_characters_character_id_mail_mail_id_not_found.h"
#include "OAIGet_characters_character_id_mail_mail_id_ok.h"
#include "OAIInternal_server_error.h"
#include "OAIPost_characters_character_id_mail_error_520.h"
#include "OAIPost_characters_character_id_mail_labels_label.h"
#include "OAIPost_characters_character_id_mail_mail.h"
#include "OAIPut_characters_character_id_mail_mail_id_contents.h"
#include "OAIService_unavailable.h"
#include "OAIUnauthorized.h"
#include <QSet>
#include <QString>

#include <QObject>
#include <QByteArray>
#include <QStringList>
#include <QList>
#include <QNetworkAccessManager>

namespace OpenAPI {

class OAIMailApi : public QObject {
    Q_OBJECT

public:
    OAIMailApi(const int timeOut = 0);
    ~OAIMailApi();

    void initializeServerConfigs();
    int setDefaultServerValue(int serverIndex,const QString &operation, const QString &variable,const QString &val);
    void setServerIndex(const QString &operation, int serverIndex);
    void setApiKey(const QString &apiKeyName, const QString &apiKey);
    void setBearerToken(const QString &token);
    void setUsername(const QString &username);
    void setPassword(const QString &password);
    void setTimeOut(const int timeOut);
    void setWorkingDirectory(const QString &path);
    void setNetworkAccessManager(QNetworkAccessManager* manager);
    int addServerConfiguration(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables = QMap<QString, OAIServerVariable>());
    void setNewServerForAllOperations(const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void setNewServer(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void addHeaders(const QString &key, const QString &value);
    void enableRequestCompression();
    void enableResponseCompression();
    void abortRequests();
    QString getParamStylePrefix(const QString &style);
    QString getParamStyleSuffix(const QString &style);
    QString getParamStyleDelimiter(const QString &style, const QString &name, bool isExplode);

    /**
    * @param[in]  character_id qint32 [required]
    * @param[in]  label_id qint32 [required]
    * @param[in]  datasource QString [optional]
    * @param[in]  token QString [optional]
    */
    virtual void deleteCharactersCharacterIdMailLabelsLabelId(const qint32 &character_id, const qint32 &label_id, const ::OpenAPI::OptionalParam<QString> &datasource = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &token = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  character_id qint32 [required]
    * @param[in]  mail_id qint32 [required]
    * @param[in]  datasource QString [optional]
    * @param[in]  token QString [optional]
    */
    virtual void deleteCharactersCharacterIdMailMailId(const qint32 &character_id, const qint32 &mail_id, const ::OpenAPI::OptionalParam<QString> &datasource = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &token = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  character_id qint32 [required]
    * @param[in]  datasource QString [optional]
    * @param[in]  if_none_match QString [optional]
    * @param[in]  labels QSet<qint32> [optional]
    * @param[in]  last_mail_id qint32 [optional]
    * @param[in]  token QString [optional]
    */
    virtual void getCharactersCharacterIdMail(const qint32 &character_id, const ::OpenAPI::OptionalParam<QString> &datasource = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &if_none_match = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QSet<qint32>> &labels = ::OpenAPI::OptionalParam<QSet<qint32>>(), const ::OpenAPI::OptionalParam<qint32> &last_mail_id = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<QString> &token = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  character_id qint32 [required]
    * @param[in]  datasource QString [optional]
    * @param[in]  if_none_match QString [optional]
    * @param[in]  token QString [optional]
    */
    virtual void getCharactersCharacterIdMailLabels(const qint32 &character_id, const ::OpenAPI::OptionalParam<QString> &datasource = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &if_none_match = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &token = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  character_id qint32 [required]
    * @param[in]  datasource QString [optional]
    * @param[in]  if_none_match QString [optional]
    * @param[in]  token QString [optional]
    */
    virtual void getCharactersCharacterIdMailLists(const qint32 &character_id, const ::OpenAPI::OptionalParam<QString> &datasource = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &if_none_match = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &token = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  character_id qint32 [required]
    * @param[in]  mail_id qint32 [required]
    * @param[in]  datasource QString [optional]
    * @param[in]  if_none_match QString [optional]
    * @param[in]  token QString [optional]
    */
    virtual void getCharactersCharacterIdMailMailId(const qint32 &character_id, const qint32 &mail_id, const ::OpenAPI::OptionalParam<QString> &datasource = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &if_none_match = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &token = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  character_id qint32 [required]
    * @param[in]  mail OAIPost_characters_character_id_mail_mail [required]
    * @param[in]  datasource QString [optional]
    * @param[in]  token QString [optional]
    */
    virtual void postCharactersCharacterIdMail(const qint32 &character_id, const OAIPost_characters_character_id_mail_mail &mail, const ::OpenAPI::OptionalParam<QString> &datasource = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &token = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  character_id qint32 [required]
    * @param[in]  label OAIPost_characters_character_id_mail_labels_label [required]
    * @param[in]  datasource QString [optional]
    * @param[in]  token QString [optional]
    */
    virtual void postCharactersCharacterIdMailLabels(const qint32 &character_id, const OAIPost_characters_character_id_mail_labels_label &label, const ::OpenAPI::OptionalParam<QString> &datasource = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &token = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  character_id qint32 [required]
    * @param[in]  mail_id qint32 [required]
    * @param[in]  contents OAIPut_characters_character_id_mail_mail_id_contents [required]
    * @param[in]  datasource QString [optional]
    * @param[in]  token QString [optional]
    */
    virtual void putCharactersCharacterIdMailMailId(const qint32 &character_id, const qint32 &mail_id, const OAIPut_characters_character_id_mail_mail_id_contents &contents, const ::OpenAPI::OptionalParam<QString> &datasource = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &token = ::OpenAPI::OptionalParam<QString>());


private:
    QMap<QString,int> _serverIndices;
    QMap<QString,QList<OAIServerConfiguration>> _serverConfigs;
    QMap<QString, QString> _apiKeys;
    QString _bearerToken;
    QString _username;
    QString _password;
    int _timeOut;
    QString _workingDirectory;
    QNetworkAccessManager* _manager;
    QMap<QString, QString> _defaultHeaders;
    bool _isResponseCompressionEnabled;
    bool _isRequestCompressionEnabled;
    OAIHttpRequestInput _latestInput;
    OAIHttpRequestWorker *_latestWorker;
    QStringList _latestScope;
    OauthCode _authFlow;
    OauthImplicit _implicitFlow;
    OauthCredentials _credentialFlow;
    OauthPassword _passwordFlow;
    int _OauthMethod = 0;

    void deleteCharactersCharacterIdMailLabelsLabelIdCallback(OAIHttpRequestWorker *worker);
    void deleteCharactersCharacterIdMailMailIdCallback(OAIHttpRequestWorker *worker);
    void getCharactersCharacterIdMailCallback(OAIHttpRequestWorker *worker);
    void getCharactersCharacterIdMailLabelsCallback(OAIHttpRequestWorker *worker);
    void getCharactersCharacterIdMailListsCallback(OAIHttpRequestWorker *worker);
    void getCharactersCharacterIdMailMailIdCallback(OAIHttpRequestWorker *worker);
    void postCharactersCharacterIdMailCallback(OAIHttpRequestWorker *worker);
    void postCharactersCharacterIdMailLabelsCallback(OAIHttpRequestWorker *worker);
    void putCharactersCharacterIdMailMailIdCallback(OAIHttpRequestWorker *worker);

Q_SIGNALS:

    void deleteCharactersCharacterIdMailLabelsLabelIdSignal();
    void deleteCharactersCharacterIdMailMailIdSignal();
    void getCharactersCharacterIdMailSignal(QList<OAIGet_characters_character_id_mail_200_ok> summary);
    void getCharactersCharacterIdMailLabelsSignal(OAIGet_characters_character_id_mail_labels_ok summary);
    void getCharactersCharacterIdMailListsSignal(QList<OAIGet_characters_character_id_mail_lists_200_ok> summary);
    void getCharactersCharacterIdMailMailIdSignal(OAIGet_characters_character_id_mail_mail_id_ok summary);
    void postCharactersCharacterIdMailSignal(qint32 summary);
    void postCharactersCharacterIdMailLabelsSignal(qint32 summary);
    void putCharactersCharacterIdMailMailIdSignal();


    void deleteCharactersCharacterIdMailLabelsLabelIdSignalFull(OAIHttpRequestWorker *worker);
    void deleteCharactersCharacterIdMailMailIdSignalFull(OAIHttpRequestWorker *worker);
    void getCharactersCharacterIdMailSignalFull(OAIHttpRequestWorker *worker, QList<OAIGet_characters_character_id_mail_200_ok> summary);
    void getCharactersCharacterIdMailLabelsSignalFull(OAIHttpRequestWorker *worker, OAIGet_characters_character_id_mail_labels_ok summary);
    void getCharactersCharacterIdMailListsSignalFull(OAIHttpRequestWorker *worker, QList<OAIGet_characters_character_id_mail_lists_200_ok> summary);
    void getCharactersCharacterIdMailMailIdSignalFull(OAIHttpRequestWorker *worker, OAIGet_characters_character_id_mail_mail_id_ok summary);
    void postCharactersCharacterIdMailSignalFull(OAIHttpRequestWorker *worker, qint32 summary);
    void postCharactersCharacterIdMailLabelsSignalFull(OAIHttpRequestWorker *worker, qint32 summary);
    void putCharactersCharacterIdMailMailIdSignalFull(OAIHttpRequestWorker *worker);

    Q_DECL_DEPRECATED_X("Use deleteCharactersCharacterIdMailLabelsLabelIdSignalError() instead")
    void deleteCharactersCharacterIdMailLabelsLabelIdSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void deleteCharactersCharacterIdMailLabelsLabelIdSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use deleteCharactersCharacterIdMailMailIdSignalError() instead")
    void deleteCharactersCharacterIdMailMailIdSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void deleteCharactersCharacterIdMailMailIdSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getCharactersCharacterIdMailSignalError() instead")
    void getCharactersCharacterIdMailSignalE(QList<OAIGet_characters_character_id_mail_200_ok> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getCharactersCharacterIdMailSignalError(QList<OAIGet_characters_character_id_mail_200_ok> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getCharactersCharacterIdMailLabelsSignalError() instead")
    void getCharactersCharacterIdMailLabelsSignalE(OAIGet_characters_character_id_mail_labels_ok summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getCharactersCharacterIdMailLabelsSignalError(OAIGet_characters_character_id_mail_labels_ok summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getCharactersCharacterIdMailListsSignalError() instead")
    void getCharactersCharacterIdMailListsSignalE(QList<OAIGet_characters_character_id_mail_lists_200_ok> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getCharactersCharacterIdMailListsSignalError(QList<OAIGet_characters_character_id_mail_lists_200_ok> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getCharactersCharacterIdMailMailIdSignalError() instead")
    void getCharactersCharacterIdMailMailIdSignalE(OAIGet_characters_character_id_mail_mail_id_ok summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getCharactersCharacterIdMailMailIdSignalError(OAIGet_characters_character_id_mail_mail_id_ok summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use postCharactersCharacterIdMailSignalError() instead")
    void postCharactersCharacterIdMailSignalE(qint32 summary, QNetworkReply::NetworkError error_type, QString error_str);
    void postCharactersCharacterIdMailSignalError(qint32 summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use postCharactersCharacterIdMailLabelsSignalError() instead")
    void postCharactersCharacterIdMailLabelsSignalE(qint32 summary, QNetworkReply::NetworkError error_type, QString error_str);
    void postCharactersCharacterIdMailLabelsSignalError(qint32 summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use putCharactersCharacterIdMailMailIdSignalError() instead")
    void putCharactersCharacterIdMailMailIdSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void putCharactersCharacterIdMailMailIdSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);

    Q_DECL_DEPRECATED_X("Use deleteCharactersCharacterIdMailLabelsLabelIdSignalErrorFull() instead")
    void deleteCharactersCharacterIdMailLabelsLabelIdSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void deleteCharactersCharacterIdMailLabelsLabelIdSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use deleteCharactersCharacterIdMailMailIdSignalErrorFull() instead")
    void deleteCharactersCharacterIdMailMailIdSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void deleteCharactersCharacterIdMailMailIdSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getCharactersCharacterIdMailSignalErrorFull() instead")
    void getCharactersCharacterIdMailSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getCharactersCharacterIdMailSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getCharactersCharacterIdMailLabelsSignalErrorFull() instead")
    void getCharactersCharacterIdMailLabelsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getCharactersCharacterIdMailLabelsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getCharactersCharacterIdMailListsSignalErrorFull() instead")
    void getCharactersCharacterIdMailListsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getCharactersCharacterIdMailListsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getCharactersCharacterIdMailMailIdSignalErrorFull() instead")
    void getCharactersCharacterIdMailMailIdSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getCharactersCharacterIdMailMailIdSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use postCharactersCharacterIdMailSignalErrorFull() instead")
    void postCharactersCharacterIdMailSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void postCharactersCharacterIdMailSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use postCharactersCharacterIdMailLabelsSignalErrorFull() instead")
    void postCharactersCharacterIdMailLabelsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void postCharactersCharacterIdMailLabelsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use putCharactersCharacterIdMailMailIdSignalErrorFull() instead")
    void putCharactersCharacterIdMailMailIdSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void putCharactersCharacterIdMailMailIdSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);

    void abortRequestsSignal();
    void allPendingRequestsCompleted();

public Q_SLOTS:
    void tokenAvailable();
};

} // namespace OpenAPI
#endif
