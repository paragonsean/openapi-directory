/**
 * EVE Swagger Interface
 * An OpenAPI for EVE Online
 *
 * The version of the OpenAPI document: 0.8.6
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAIGet_corporations_corporation_id_containers_logs_200_ok.h
 *
 * 200 ok object
 */

#ifndef OAIGet_corporations_corporation_id_containers_logs_200_ok_H
#define OAIGet_corporations_corporation_id_containers_logs_200_ok_H

#include <QJsonObject>

#include <QDateTime>
#include <QString>

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {

class OAIGet_corporations_corporation_id_containers_logs_200_ok : public OAIObject {
public:
    OAIGet_corporations_corporation_id_containers_logs_200_ok();
    OAIGet_corporations_corporation_id_containers_logs_200_ok(QString json);
    ~OAIGet_corporations_corporation_id_containers_logs_200_ok() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    QString getAction() const;
    void setAction(const QString &action);
    bool is_action_Set() const;
    bool is_action_Valid() const;

    qint32 getCharacterId() const;
    void setCharacterId(const qint32 &character_id);
    bool is_character_id_Set() const;
    bool is_character_id_Valid() const;

    qint64 getContainerId() const;
    void setContainerId(const qint64 &container_id);
    bool is_container_id_Set() const;
    bool is_container_id_Valid() const;

    qint32 getContainerTypeId() const;
    void setContainerTypeId(const qint32 &container_type_id);
    bool is_container_type_id_Set() const;
    bool is_container_type_id_Valid() const;

    QString getLocationFlag() const;
    void setLocationFlag(const QString &location_flag);
    bool is_location_flag_Set() const;
    bool is_location_flag_Valid() const;

    qint64 getLocationId() const;
    void setLocationId(const qint64 &location_id);
    bool is_location_id_Set() const;
    bool is_location_id_Valid() const;

    QDateTime getLoggedAt() const;
    void setLoggedAt(const QDateTime &logged_at);
    bool is_logged_at_Set() const;
    bool is_logged_at_Valid() const;

    qint32 getNewConfigBitmask() const;
    void setNewConfigBitmask(const qint32 &new_config_bitmask);
    bool is_new_config_bitmask_Set() const;
    bool is_new_config_bitmask_Valid() const;

    qint32 getOldConfigBitmask() const;
    void setOldConfigBitmask(const qint32 &old_config_bitmask);
    bool is_old_config_bitmask_Set() const;
    bool is_old_config_bitmask_Valid() const;

    QString getPasswordType() const;
    void setPasswordType(const QString &password_type);
    bool is_password_type_Set() const;
    bool is_password_type_Valid() const;

    qint32 getQuantity() const;
    void setQuantity(const qint32 &quantity);
    bool is_quantity_Set() const;
    bool is_quantity_Valid() const;

    qint32 getTypeId() const;
    void setTypeId(const qint32 &type_id);
    bool is_type_id_Set() const;
    bool is_type_id_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    QString m_action;
    bool m_action_isSet;
    bool m_action_isValid;

    qint32 m_character_id;
    bool m_character_id_isSet;
    bool m_character_id_isValid;

    qint64 m_container_id;
    bool m_container_id_isSet;
    bool m_container_id_isValid;

    qint32 m_container_type_id;
    bool m_container_type_id_isSet;
    bool m_container_type_id_isValid;

    QString m_location_flag;
    bool m_location_flag_isSet;
    bool m_location_flag_isValid;

    qint64 m_location_id;
    bool m_location_id_isSet;
    bool m_location_id_isValid;

    QDateTime m_logged_at;
    bool m_logged_at_isSet;
    bool m_logged_at_isValid;

    qint32 m_new_config_bitmask;
    bool m_new_config_bitmask_isSet;
    bool m_new_config_bitmask_isValid;

    qint32 m_old_config_bitmask;
    bool m_old_config_bitmask_isSet;
    bool m_old_config_bitmask_isValid;

    QString m_password_type;
    bool m_password_type_isSet;
    bool m_password_type_isValid;

    qint32 m_quantity;
    bool m_quantity_isSet;
    bool m_quantity_isValid;

    qint32 m_type_id;
    bool m_type_id_isSet;
    bool m_type_id_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAIGet_corporations_corporation_id_containers_logs_200_ok)

#endif // OAIGet_corporations_corporation_id_containers_logs_200_ok_H
