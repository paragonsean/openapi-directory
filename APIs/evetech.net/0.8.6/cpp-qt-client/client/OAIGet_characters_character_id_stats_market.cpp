/**
 * EVE Swagger Interface
 * An OpenAPI for EVE Online
 *
 * The version of the OpenAPI document: 0.8.6
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIGet_characters_character_id_stats_market.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIGet_characters_character_id_stats_market::OAIGet_characters_character_id_stats_market(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIGet_characters_character_id_stats_market::OAIGet_characters_character_id_stats_market() {
    this->initializeModel();
}

OAIGet_characters_character_id_stats_market::~OAIGet_characters_character_id_stats_market() {}

void OAIGet_characters_character_id_stats_market::initializeModel() {

    m_accept_contracts_courier_isSet = false;
    m_accept_contracts_courier_isValid = false;

    m_accept_contracts_item_exchange_isSet = false;
    m_accept_contracts_item_exchange_isValid = false;

    m_buy_orders_placed_isSet = false;
    m_buy_orders_placed_isValid = false;

    m_cancel_market_order_isSet = false;
    m_cancel_market_order_isValid = false;

    m_create_contracts_auction_isSet = false;
    m_create_contracts_auction_isValid = false;

    m_create_contracts_courier_isSet = false;
    m_create_contracts_courier_isValid = false;

    m_create_contracts_item_exchange_isSet = false;
    m_create_contracts_item_exchange_isValid = false;

    m_deliver_courier_contract_isSet = false;
    m_deliver_courier_contract_isValid = false;

    m_isk_gained_isSet = false;
    m_isk_gained_isValid = false;

    m_isk_spent_isSet = false;
    m_isk_spent_isValid = false;

    m_modify_market_order_isSet = false;
    m_modify_market_order_isValid = false;

    m_search_contracts_isSet = false;
    m_search_contracts_isValid = false;

    m_sell_orders_placed_isSet = false;
    m_sell_orders_placed_isValid = false;
}

void OAIGet_characters_character_id_stats_market::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIGet_characters_character_id_stats_market::fromJsonObject(QJsonObject json) {

    m_accept_contracts_courier_isValid = ::OpenAPI::fromJsonValue(m_accept_contracts_courier, json[QString("accept_contracts_courier")]);
    m_accept_contracts_courier_isSet = !json[QString("accept_contracts_courier")].isNull() && m_accept_contracts_courier_isValid;

    m_accept_contracts_item_exchange_isValid = ::OpenAPI::fromJsonValue(m_accept_contracts_item_exchange, json[QString("accept_contracts_item_exchange")]);
    m_accept_contracts_item_exchange_isSet = !json[QString("accept_contracts_item_exchange")].isNull() && m_accept_contracts_item_exchange_isValid;

    m_buy_orders_placed_isValid = ::OpenAPI::fromJsonValue(m_buy_orders_placed, json[QString("buy_orders_placed")]);
    m_buy_orders_placed_isSet = !json[QString("buy_orders_placed")].isNull() && m_buy_orders_placed_isValid;

    m_cancel_market_order_isValid = ::OpenAPI::fromJsonValue(m_cancel_market_order, json[QString("cancel_market_order")]);
    m_cancel_market_order_isSet = !json[QString("cancel_market_order")].isNull() && m_cancel_market_order_isValid;

    m_create_contracts_auction_isValid = ::OpenAPI::fromJsonValue(m_create_contracts_auction, json[QString("create_contracts_auction")]);
    m_create_contracts_auction_isSet = !json[QString("create_contracts_auction")].isNull() && m_create_contracts_auction_isValid;

    m_create_contracts_courier_isValid = ::OpenAPI::fromJsonValue(m_create_contracts_courier, json[QString("create_contracts_courier")]);
    m_create_contracts_courier_isSet = !json[QString("create_contracts_courier")].isNull() && m_create_contracts_courier_isValid;

    m_create_contracts_item_exchange_isValid = ::OpenAPI::fromJsonValue(m_create_contracts_item_exchange, json[QString("create_contracts_item_exchange")]);
    m_create_contracts_item_exchange_isSet = !json[QString("create_contracts_item_exchange")].isNull() && m_create_contracts_item_exchange_isValid;

    m_deliver_courier_contract_isValid = ::OpenAPI::fromJsonValue(m_deliver_courier_contract, json[QString("deliver_courier_contract")]);
    m_deliver_courier_contract_isSet = !json[QString("deliver_courier_contract")].isNull() && m_deliver_courier_contract_isValid;

    m_isk_gained_isValid = ::OpenAPI::fromJsonValue(m_isk_gained, json[QString("isk_gained")]);
    m_isk_gained_isSet = !json[QString("isk_gained")].isNull() && m_isk_gained_isValid;

    m_isk_spent_isValid = ::OpenAPI::fromJsonValue(m_isk_spent, json[QString("isk_spent")]);
    m_isk_spent_isSet = !json[QString("isk_spent")].isNull() && m_isk_spent_isValid;

    m_modify_market_order_isValid = ::OpenAPI::fromJsonValue(m_modify_market_order, json[QString("modify_market_order")]);
    m_modify_market_order_isSet = !json[QString("modify_market_order")].isNull() && m_modify_market_order_isValid;

    m_search_contracts_isValid = ::OpenAPI::fromJsonValue(m_search_contracts, json[QString("search_contracts")]);
    m_search_contracts_isSet = !json[QString("search_contracts")].isNull() && m_search_contracts_isValid;

    m_sell_orders_placed_isValid = ::OpenAPI::fromJsonValue(m_sell_orders_placed, json[QString("sell_orders_placed")]);
    m_sell_orders_placed_isSet = !json[QString("sell_orders_placed")].isNull() && m_sell_orders_placed_isValid;
}

QString OAIGet_characters_character_id_stats_market::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIGet_characters_character_id_stats_market::asJsonObject() const {
    QJsonObject obj;
    if (m_accept_contracts_courier_isSet) {
        obj.insert(QString("accept_contracts_courier"), ::OpenAPI::toJsonValue(m_accept_contracts_courier));
    }
    if (m_accept_contracts_item_exchange_isSet) {
        obj.insert(QString("accept_contracts_item_exchange"), ::OpenAPI::toJsonValue(m_accept_contracts_item_exchange));
    }
    if (m_buy_orders_placed_isSet) {
        obj.insert(QString("buy_orders_placed"), ::OpenAPI::toJsonValue(m_buy_orders_placed));
    }
    if (m_cancel_market_order_isSet) {
        obj.insert(QString("cancel_market_order"), ::OpenAPI::toJsonValue(m_cancel_market_order));
    }
    if (m_create_contracts_auction_isSet) {
        obj.insert(QString("create_contracts_auction"), ::OpenAPI::toJsonValue(m_create_contracts_auction));
    }
    if (m_create_contracts_courier_isSet) {
        obj.insert(QString("create_contracts_courier"), ::OpenAPI::toJsonValue(m_create_contracts_courier));
    }
    if (m_create_contracts_item_exchange_isSet) {
        obj.insert(QString("create_contracts_item_exchange"), ::OpenAPI::toJsonValue(m_create_contracts_item_exchange));
    }
    if (m_deliver_courier_contract_isSet) {
        obj.insert(QString("deliver_courier_contract"), ::OpenAPI::toJsonValue(m_deliver_courier_contract));
    }
    if (m_isk_gained_isSet) {
        obj.insert(QString("isk_gained"), ::OpenAPI::toJsonValue(m_isk_gained));
    }
    if (m_isk_spent_isSet) {
        obj.insert(QString("isk_spent"), ::OpenAPI::toJsonValue(m_isk_spent));
    }
    if (m_modify_market_order_isSet) {
        obj.insert(QString("modify_market_order"), ::OpenAPI::toJsonValue(m_modify_market_order));
    }
    if (m_search_contracts_isSet) {
        obj.insert(QString("search_contracts"), ::OpenAPI::toJsonValue(m_search_contracts));
    }
    if (m_sell_orders_placed_isSet) {
        obj.insert(QString("sell_orders_placed"), ::OpenAPI::toJsonValue(m_sell_orders_placed));
    }
    return obj;
}

qint64 OAIGet_characters_character_id_stats_market::getAcceptContractsCourier() const {
    return m_accept_contracts_courier;
}
void OAIGet_characters_character_id_stats_market::setAcceptContractsCourier(const qint64 &accept_contracts_courier) {
    m_accept_contracts_courier = accept_contracts_courier;
    m_accept_contracts_courier_isSet = true;
}

bool OAIGet_characters_character_id_stats_market::is_accept_contracts_courier_Set() const{
    return m_accept_contracts_courier_isSet;
}

bool OAIGet_characters_character_id_stats_market::is_accept_contracts_courier_Valid() const{
    return m_accept_contracts_courier_isValid;
}

qint64 OAIGet_characters_character_id_stats_market::getAcceptContractsItemExchange() const {
    return m_accept_contracts_item_exchange;
}
void OAIGet_characters_character_id_stats_market::setAcceptContractsItemExchange(const qint64 &accept_contracts_item_exchange) {
    m_accept_contracts_item_exchange = accept_contracts_item_exchange;
    m_accept_contracts_item_exchange_isSet = true;
}

bool OAIGet_characters_character_id_stats_market::is_accept_contracts_item_exchange_Set() const{
    return m_accept_contracts_item_exchange_isSet;
}

bool OAIGet_characters_character_id_stats_market::is_accept_contracts_item_exchange_Valid() const{
    return m_accept_contracts_item_exchange_isValid;
}

qint64 OAIGet_characters_character_id_stats_market::getBuyOrdersPlaced() const {
    return m_buy_orders_placed;
}
void OAIGet_characters_character_id_stats_market::setBuyOrdersPlaced(const qint64 &buy_orders_placed) {
    m_buy_orders_placed = buy_orders_placed;
    m_buy_orders_placed_isSet = true;
}

bool OAIGet_characters_character_id_stats_market::is_buy_orders_placed_Set() const{
    return m_buy_orders_placed_isSet;
}

bool OAIGet_characters_character_id_stats_market::is_buy_orders_placed_Valid() const{
    return m_buy_orders_placed_isValid;
}

qint64 OAIGet_characters_character_id_stats_market::getCancelMarketOrder() const {
    return m_cancel_market_order;
}
void OAIGet_characters_character_id_stats_market::setCancelMarketOrder(const qint64 &cancel_market_order) {
    m_cancel_market_order = cancel_market_order;
    m_cancel_market_order_isSet = true;
}

bool OAIGet_characters_character_id_stats_market::is_cancel_market_order_Set() const{
    return m_cancel_market_order_isSet;
}

bool OAIGet_characters_character_id_stats_market::is_cancel_market_order_Valid() const{
    return m_cancel_market_order_isValid;
}

qint64 OAIGet_characters_character_id_stats_market::getCreateContractsAuction() const {
    return m_create_contracts_auction;
}
void OAIGet_characters_character_id_stats_market::setCreateContractsAuction(const qint64 &create_contracts_auction) {
    m_create_contracts_auction = create_contracts_auction;
    m_create_contracts_auction_isSet = true;
}

bool OAIGet_characters_character_id_stats_market::is_create_contracts_auction_Set() const{
    return m_create_contracts_auction_isSet;
}

bool OAIGet_characters_character_id_stats_market::is_create_contracts_auction_Valid() const{
    return m_create_contracts_auction_isValid;
}

qint64 OAIGet_characters_character_id_stats_market::getCreateContractsCourier() const {
    return m_create_contracts_courier;
}
void OAIGet_characters_character_id_stats_market::setCreateContractsCourier(const qint64 &create_contracts_courier) {
    m_create_contracts_courier = create_contracts_courier;
    m_create_contracts_courier_isSet = true;
}

bool OAIGet_characters_character_id_stats_market::is_create_contracts_courier_Set() const{
    return m_create_contracts_courier_isSet;
}

bool OAIGet_characters_character_id_stats_market::is_create_contracts_courier_Valid() const{
    return m_create_contracts_courier_isValid;
}

qint64 OAIGet_characters_character_id_stats_market::getCreateContractsItemExchange() const {
    return m_create_contracts_item_exchange;
}
void OAIGet_characters_character_id_stats_market::setCreateContractsItemExchange(const qint64 &create_contracts_item_exchange) {
    m_create_contracts_item_exchange = create_contracts_item_exchange;
    m_create_contracts_item_exchange_isSet = true;
}

bool OAIGet_characters_character_id_stats_market::is_create_contracts_item_exchange_Set() const{
    return m_create_contracts_item_exchange_isSet;
}

bool OAIGet_characters_character_id_stats_market::is_create_contracts_item_exchange_Valid() const{
    return m_create_contracts_item_exchange_isValid;
}

qint64 OAIGet_characters_character_id_stats_market::getDeliverCourierContract() const {
    return m_deliver_courier_contract;
}
void OAIGet_characters_character_id_stats_market::setDeliverCourierContract(const qint64 &deliver_courier_contract) {
    m_deliver_courier_contract = deliver_courier_contract;
    m_deliver_courier_contract_isSet = true;
}

bool OAIGet_characters_character_id_stats_market::is_deliver_courier_contract_Set() const{
    return m_deliver_courier_contract_isSet;
}

bool OAIGet_characters_character_id_stats_market::is_deliver_courier_contract_Valid() const{
    return m_deliver_courier_contract_isValid;
}

qint64 OAIGet_characters_character_id_stats_market::getIskGained() const {
    return m_isk_gained;
}
void OAIGet_characters_character_id_stats_market::setIskGained(const qint64 &isk_gained) {
    m_isk_gained = isk_gained;
    m_isk_gained_isSet = true;
}

bool OAIGet_characters_character_id_stats_market::is_isk_gained_Set() const{
    return m_isk_gained_isSet;
}

bool OAIGet_characters_character_id_stats_market::is_isk_gained_Valid() const{
    return m_isk_gained_isValid;
}

qint64 OAIGet_characters_character_id_stats_market::getIskSpent() const {
    return m_isk_spent;
}
void OAIGet_characters_character_id_stats_market::setIskSpent(const qint64 &isk_spent) {
    m_isk_spent = isk_spent;
    m_isk_spent_isSet = true;
}

bool OAIGet_characters_character_id_stats_market::is_isk_spent_Set() const{
    return m_isk_spent_isSet;
}

bool OAIGet_characters_character_id_stats_market::is_isk_spent_Valid() const{
    return m_isk_spent_isValid;
}

qint64 OAIGet_characters_character_id_stats_market::getModifyMarketOrder() const {
    return m_modify_market_order;
}
void OAIGet_characters_character_id_stats_market::setModifyMarketOrder(const qint64 &modify_market_order) {
    m_modify_market_order = modify_market_order;
    m_modify_market_order_isSet = true;
}

bool OAIGet_characters_character_id_stats_market::is_modify_market_order_Set() const{
    return m_modify_market_order_isSet;
}

bool OAIGet_characters_character_id_stats_market::is_modify_market_order_Valid() const{
    return m_modify_market_order_isValid;
}

qint64 OAIGet_characters_character_id_stats_market::getSearchContracts() const {
    return m_search_contracts;
}
void OAIGet_characters_character_id_stats_market::setSearchContracts(const qint64 &search_contracts) {
    m_search_contracts = search_contracts;
    m_search_contracts_isSet = true;
}

bool OAIGet_characters_character_id_stats_market::is_search_contracts_Set() const{
    return m_search_contracts_isSet;
}

bool OAIGet_characters_character_id_stats_market::is_search_contracts_Valid() const{
    return m_search_contracts_isValid;
}

qint64 OAIGet_characters_character_id_stats_market::getSellOrdersPlaced() const {
    return m_sell_orders_placed;
}
void OAIGet_characters_character_id_stats_market::setSellOrdersPlaced(const qint64 &sell_orders_placed) {
    m_sell_orders_placed = sell_orders_placed;
    m_sell_orders_placed_isSet = true;
}

bool OAIGet_characters_character_id_stats_market::is_sell_orders_placed_Set() const{
    return m_sell_orders_placed_isSet;
}

bool OAIGet_characters_character_id_stats_market::is_sell_orders_placed_Valid() const{
    return m_sell_orders_placed_isValid;
}

bool OAIGet_characters_character_id_stats_market::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_accept_contracts_courier_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_accept_contracts_item_exchange_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_buy_orders_placed_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_cancel_market_order_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_create_contracts_auction_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_create_contracts_courier_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_create_contracts_item_exchange_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_deliver_courier_contract_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_isk_gained_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_isk_spent_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_modify_market_order_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_search_contracts_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_sell_orders_placed_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIGet_characters_character_id_stats_market::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
