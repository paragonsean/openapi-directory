/**
 * EVE Swagger Interface
 * An OpenAPI for EVE Online
 *
 * The version of the OpenAPI document: 0.8.6
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIGet_industry_facilities_200_ok.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIGet_industry_facilities_200_ok::OAIGet_industry_facilities_200_ok(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIGet_industry_facilities_200_ok::OAIGet_industry_facilities_200_ok() {
    this->initializeModel();
}

OAIGet_industry_facilities_200_ok::~OAIGet_industry_facilities_200_ok() {}

void OAIGet_industry_facilities_200_ok::initializeModel() {

    m_facility_id_isSet = false;
    m_facility_id_isValid = false;

    m_owner_id_isSet = false;
    m_owner_id_isValid = false;

    m_region_id_isSet = false;
    m_region_id_isValid = false;

    m_solar_system_id_isSet = false;
    m_solar_system_id_isValid = false;

    m_tax_isSet = false;
    m_tax_isValid = false;

    m_type_id_isSet = false;
    m_type_id_isValid = false;
}

void OAIGet_industry_facilities_200_ok::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIGet_industry_facilities_200_ok::fromJsonObject(QJsonObject json) {

    m_facility_id_isValid = ::OpenAPI::fromJsonValue(m_facility_id, json[QString("facility_id")]);
    m_facility_id_isSet = !json[QString("facility_id")].isNull() && m_facility_id_isValid;

    m_owner_id_isValid = ::OpenAPI::fromJsonValue(m_owner_id, json[QString("owner_id")]);
    m_owner_id_isSet = !json[QString("owner_id")].isNull() && m_owner_id_isValid;

    m_region_id_isValid = ::OpenAPI::fromJsonValue(m_region_id, json[QString("region_id")]);
    m_region_id_isSet = !json[QString("region_id")].isNull() && m_region_id_isValid;

    m_solar_system_id_isValid = ::OpenAPI::fromJsonValue(m_solar_system_id, json[QString("solar_system_id")]);
    m_solar_system_id_isSet = !json[QString("solar_system_id")].isNull() && m_solar_system_id_isValid;

    m_tax_isValid = ::OpenAPI::fromJsonValue(m_tax, json[QString("tax")]);
    m_tax_isSet = !json[QString("tax")].isNull() && m_tax_isValid;

    m_type_id_isValid = ::OpenAPI::fromJsonValue(m_type_id, json[QString("type_id")]);
    m_type_id_isSet = !json[QString("type_id")].isNull() && m_type_id_isValid;
}

QString OAIGet_industry_facilities_200_ok::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIGet_industry_facilities_200_ok::asJsonObject() const {
    QJsonObject obj;
    if (m_facility_id_isSet) {
        obj.insert(QString("facility_id"), ::OpenAPI::toJsonValue(m_facility_id));
    }
    if (m_owner_id_isSet) {
        obj.insert(QString("owner_id"), ::OpenAPI::toJsonValue(m_owner_id));
    }
    if (m_region_id_isSet) {
        obj.insert(QString("region_id"), ::OpenAPI::toJsonValue(m_region_id));
    }
    if (m_solar_system_id_isSet) {
        obj.insert(QString("solar_system_id"), ::OpenAPI::toJsonValue(m_solar_system_id));
    }
    if (m_tax_isSet) {
        obj.insert(QString("tax"), ::OpenAPI::toJsonValue(m_tax));
    }
    if (m_type_id_isSet) {
        obj.insert(QString("type_id"), ::OpenAPI::toJsonValue(m_type_id));
    }
    return obj;
}

qint64 OAIGet_industry_facilities_200_ok::getFacilityId() const {
    return m_facility_id;
}
void OAIGet_industry_facilities_200_ok::setFacilityId(const qint64 &facility_id) {
    m_facility_id = facility_id;
    m_facility_id_isSet = true;
}

bool OAIGet_industry_facilities_200_ok::is_facility_id_Set() const{
    return m_facility_id_isSet;
}

bool OAIGet_industry_facilities_200_ok::is_facility_id_Valid() const{
    return m_facility_id_isValid;
}

qint32 OAIGet_industry_facilities_200_ok::getOwnerId() const {
    return m_owner_id;
}
void OAIGet_industry_facilities_200_ok::setOwnerId(const qint32 &owner_id) {
    m_owner_id = owner_id;
    m_owner_id_isSet = true;
}

bool OAIGet_industry_facilities_200_ok::is_owner_id_Set() const{
    return m_owner_id_isSet;
}

bool OAIGet_industry_facilities_200_ok::is_owner_id_Valid() const{
    return m_owner_id_isValid;
}

qint32 OAIGet_industry_facilities_200_ok::getRegionId() const {
    return m_region_id;
}
void OAIGet_industry_facilities_200_ok::setRegionId(const qint32 &region_id) {
    m_region_id = region_id;
    m_region_id_isSet = true;
}

bool OAIGet_industry_facilities_200_ok::is_region_id_Set() const{
    return m_region_id_isSet;
}

bool OAIGet_industry_facilities_200_ok::is_region_id_Valid() const{
    return m_region_id_isValid;
}

qint32 OAIGet_industry_facilities_200_ok::getSolarSystemId() const {
    return m_solar_system_id;
}
void OAIGet_industry_facilities_200_ok::setSolarSystemId(const qint32 &solar_system_id) {
    m_solar_system_id = solar_system_id;
    m_solar_system_id_isSet = true;
}

bool OAIGet_industry_facilities_200_ok::is_solar_system_id_Set() const{
    return m_solar_system_id_isSet;
}

bool OAIGet_industry_facilities_200_ok::is_solar_system_id_Valid() const{
    return m_solar_system_id_isValid;
}

float OAIGet_industry_facilities_200_ok::getTax() const {
    return m_tax;
}
void OAIGet_industry_facilities_200_ok::setTax(const float &tax) {
    m_tax = tax;
    m_tax_isSet = true;
}

bool OAIGet_industry_facilities_200_ok::is_tax_Set() const{
    return m_tax_isSet;
}

bool OAIGet_industry_facilities_200_ok::is_tax_Valid() const{
    return m_tax_isValid;
}

qint32 OAIGet_industry_facilities_200_ok::getTypeId() const {
    return m_type_id;
}
void OAIGet_industry_facilities_200_ok::setTypeId(const qint32 &type_id) {
    m_type_id = type_id;
    m_type_id_isSet = true;
}

bool OAIGet_industry_facilities_200_ok::is_type_id_Set() const{
    return m_type_id_isSet;
}

bool OAIGet_industry_facilities_200_ok::is_type_id_Valid() const{
    return m_type_id_isValid;
}

bool OAIGet_industry_facilities_200_ok::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_facility_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_owner_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_region_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_solar_system_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_tax_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_type_id_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIGet_industry_facilities_200_ok::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_facility_id_isValid && m_owner_id_isValid && m_region_id_isValid && m_solar_system_id_isValid && m_type_id_isValid && true;
}

} // namespace OpenAPI
