/**
 * EVE Swagger Interface
 * An OpenAPI for EVE Online
 *
 * The version of the OpenAPI document: 0.8.6
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIGet_characters_character_id_planets_planet_id_route.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIGet_characters_character_id_planets_planet_id_route::OAIGet_characters_character_id_planets_planet_id_route(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIGet_characters_character_id_planets_planet_id_route::OAIGet_characters_character_id_planets_planet_id_route() {
    this->initializeModel();
}

OAIGet_characters_character_id_planets_planet_id_route::~OAIGet_characters_character_id_planets_planet_id_route() {}

void OAIGet_characters_character_id_planets_planet_id_route::initializeModel() {

    m_content_type_id_isSet = false;
    m_content_type_id_isValid = false;

    m_destination_pin_id_isSet = false;
    m_destination_pin_id_isValid = false;

    m_quantity_isSet = false;
    m_quantity_isValid = false;

    m_route_id_isSet = false;
    m_route_id_isValid = false;

    m_source_pin_id_isSet = false;
    m_source_pin_id_isValid = false;

    m_waypoints_isSet = false;
    m_waypoints_isValid = false;
}

void OAIGet_characters_character_id_planets_planet_id_route::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIGet_characters_character_id_planets_planet_id_route::fromJsonObject(QJsonObject json) {

    m_content_type_id_isValid = ::OpenAPI::fromJsonValue(m_content_type_id, json[QString("content_type_id")]);
    m_content_type_id_isSet = !json[QString("content_type_id")].isNull() && m_content_type_id_isValid;

    m_destination_pin_id_isValid = ::OpenAPI::fromJsonValue(m_destination_pin_id, json[QString("destination_pin_id")]);
    m_destination_pin_id_isSet = !json[QString("destination_pin_id")].isNull() && m_destination_pin_id_isValid;

    m_quantity_isValid = ::OpenAPI::fromJsonValue(m_quantity, json[QString("quantity")]);
    m_quantity_isSet = !json[QString("quantity")].isNull() && m_quantity_isValid;

    m_route_id_isValid = ::OpenAPI::fromJsonValue(m_route_id, json[QString("route_id")]);
    m_route_id_isSet = !json[QString("route_id")].isNull() && m_route_id_isValid;

    m_source_pin_id_isValid = ::OpenAPI::fromJsonValue(m_source_pin_id, json[QString("source_pin_id")]);
    m_source_pin_id_isSet = !json[QString("source_pin_id")].isNull() && m_source_pin_id_isValid;

    m_waypoints_isValid = ::OpenAPI::fromJsonValue(m_waypoints, json[QString("waypoints")]);
    m_waypoints_isSet = !json[QString("waypoints")].isNull() && m_waypoints_isValid;
}

QString OAIGet_characters_character_id_planets_planet_id_route::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIGet_characters_character_id_planets_planet_id_route::asJsonObject() const {
    QJsonObject obj;
    if (m_content_type_id_isSet) {
        obj.insert(QString("content_type_id"), ::OpenAPI::toJsonValue(m_content_type_id));
    }
    if (m_destination_pin_id_isSet) {
        obj.insert(QString("destination_pin_id"), ::OpenAPI::toJsonValue(m_destination_pin_id));
    }
    if (m_quantity_isSet) {
        obj.insert(QString("quantity"), ::OpenAPI::toJsonValue(m_quantity));
    }
    if (m_route_id_isSet) {
        obj.insert(QString("route_id"), ::OpenAPI::toJsonValue(m_route_id));
    }
    if (m_source_pin_id_isSet) {
        obj.insert(QString("source_pin_id"), ::OpenAPI::toJsonValue(m_source_pin_id));
    }
    if (m_waypoints.size() > 0) {
        obj.insert(QString("waypoints"), ::OpenAPI::toJsonValue(m_waypoints));
    }
    return obj;
}

qint32 OAIGet_characters_character_id_planets_planet_id_route::getContentTypeId() const {
    return m_content_type_id;
}
void OAIGet_characters_character_id_planets_planet_id_route::setContentTypeId(const qint32 &content_type_id) {
    m_content_type_id = content_type_id;
    m_content_type_id_isSet = true;
}

bool OAIGet_characters_character_id_planets_planet_id_route::is_content_type_id_Set() const{
    return m_content_type_id_isSet;
}

bool OAIGet_characters_character_id_planets_planet_id_route::is_content_type_id_Valid() const{
    return m_content_type_id_isValid;
}

qint64 OAIGet_characters_character_id_planets_planet_id_route::getDestinationPinId() const {
    return m_destination_pin_id;
}
void OAIGet_characters_character_id_planets_planet_id_route::setDestinationPinId(const qint64 &destination_pin_id) {
    m_destination_pin_id = destination_pin_id;
    m_destination_pin_id_isSet = true;
}

bool OAIGet_characters_character_id_planets_planet_id_route::is_destination_pin_id_Set() const{
    return m_destination_pin_id_isSet;
}

bool OAIGet_characters_character_id_planets_planet_id_route::is_destination_pin_id_Valid() const{
    return m_destination_pin_id_isValid;
}

float OAIGet_characters_character_id_planets_planet_id_route::getQuantity() const {
    return m_quantity;
}
void OAIGet_characters_character_id_planets_planet_id_route::setQuantity(const float &quantity) {
    m_quantity = quantity;
    m_quantity_isSet = true;
}

bool OAIGet_characters_character_id_planets_planet_id_route::is_quantity_Set() const{
    return m_quantity_isSet;
}

bool OAIGet_characters_character_id_planets_planet_id_route::is_quantity_Valid() const{
    return m_quantity_isValid;
}

qint64 OAIGet_characters_character_id_planets_planet_id_route::getRouteId() const {
    return m_route_id;
}
void OAIGet_characters_character_id_planets_planet_id_route::setRouteId(const qint64 &route_id) {
    m_route_id = route_id;
    m_route_id_isSet = true;
}

bool OAIGet_characters_character_id_planets_planet_id_route::is_route_id_Set() const{
    return m_route_id_isSet;
}

bool OAIGet_characters_character_id_planets_planet_id_route::is_route_id_Valid() const{
    return m_route_id_isValid;
}

qint64 OAIGet_characters_character_id_planets_planet_id_route::getSourcePinId() const {
    return m_source_pin_id;
}
void OAIGet_characters_character_id_planets_planet_id_route::setSourcePinId(const qint64 &source_pin_id) {
    m_source_pin_id = source_pin_id;
    m_source_pin_id_isSet = true;
}

bool OAIGet_characters_character_id_planets_planet_id_route::is_source_pin_id_Set() const{
    return m_source_pin_id_isSet;
}

bool OAIGet_characters_character_id_planets_planet_id_route::is_source_pin_id_Valid() const{
    return m_source_pin_id_isValid;
}

QList<qint64> OAIGet_characters_character_id_planets_planet_id_route::getWaypoints() const {
    return m_waypoints;
}
void OAIGet_characters_character_id_planets_planet_id_route::setWaypoints(const QList<qint64> &waypoints) {
    m_waypoints = waypoints;
    m_waypoints_isSet = true;
}

bool OAIGet_characters_character_id_planets_planet_id_route::is_waypoints_Set() const{
    return m_waypoints_isSet;
}

bool OAIGet_characters_character_id_planets_planet_id_route::is_waypoints_Valid() const{
    return m_waypoints_isValid;
}

bool OAIGet_characters_character_id_planets_planet_id_route::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_content_type_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_destination_pin_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_quantity_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_route_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_source_pin_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_waypoints.size() > 0) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIGet_characters_character_id_planets_planet_id_route::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_content_type_id_isValid && m_destination_pin_id_isValid && m_quantity_isValid && m_route_id_isValid && m_source_pin_id_isValid && true;
}

} // namespace OpenAPI
