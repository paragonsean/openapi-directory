/**
 * EVE Swagger Interface
 * An OpenAPI for EVE Online
 *
 * The version of the OpenAPI document: 0.8.6
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#ifndef OAI_OAIMarketApi_H
#define OAI_OAIMarketApi_H

#include "OAIHelpers.h"
#include "OAIHttpRequest.h"
#include "OAIServerConfiguration.h"
#include "OAIOauth.h"

#include "OAIBad_request.h"
#include "OAIError_limited.h"
#include "OAIForbidden.h"
#include "OAIGateway_timeout.h"
#include "OAIGet_characters_character_id_orders_200_ok.h"
#include "OAIGet_characters_character_id_orders_history_200_ok.h"
#include "OAIGet_corporations_corporation_id_orders_200_ok.h"
#include "OAIGet_corporations_corporation_id_orders_history_200_ok.h"
#include "OAIGet_markets_groups_market_group_id_not_found.h"
#include "OAIGet_markets_groups_market_group_id_ok.h"
#include "OAIGet_markets_prices_200_ok.h"
#include "OAIGet_markets_region_id_history_200_ok.h"
#include "OAIGet_markets_region_id_history_error_520.h"
#include "OAIGet_markets_region_id_history_not_found.h"
#include "OAIGet_markets_region_id_history_unprocessable_entity.h"
#include "OAIGet_markets_region_id_orders_200_ok.h"
#include "OAIGet_markets_region_id_orders_not_found.h"
#include "OAIGet_markets_region_id_orders_unprocessable_entity.h"
#include "OAIGet_markets_structures_structure_id_200_ok.h"
#include "OAIInternal_server_error.h"
#include "OAIService_unavailable.h"
#include "OAIUnauthorized.h"
#include <QString>

#include <QObject>
#include <QByteArray>
#include <QStringList>
#include <QList>
#include <QNetworkAccessManager>

namespace OpenAPI {

class OAIMarketApi : public QObject {
    Q_OBJECT

public:
    OAIMarketApi(const int timeOut = 0);
    ~OAIMarketApi();

    void initializeServerConfigs();
    int setDefaultServerValue(int serverIndex,const QString &operation, const QString &variable,const QString &val);
    void setServerIndex(const QString &operation, int serverIndex);
    void setApiKey(const QString &apiKeyName, const QString &apiKey);
    void setBearerToken(const QString &token);
    void setUsername(const QString &username);
    void setPassword(const QString &password);
    void setTimeOut(const int timeOut);
    void setWorkingDirectory(const QString &path);
    void setNetworkAccessManager(QNetworkAccessManager* manager);
    int addServerConfiguration(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables = QMap<QString, OAIServerVariable>());
    void setNewServerForAllOperations(const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void setNewServer(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void addHeaders(const QString &key, const QString &value);
    void enableRequestCompression();
    void enableResponseCompression();
    void abortRequests();
    QString getParamStylePrefix(const QString &style);
    QString getParamStyleSuffix(const QString &style);
    QString getParamStyleDelimiter(const QString &style, const QString &name, bool isExplode);

    /**
    * @param[in]  character_id qint32 [required]
    * @param[in]  datasource QString [optional]
    * @param[in]  if_none_match QString [optional]
    * @param[in]  token QString [optional]
    */
    virtual void getCharactersCharacterIdOrders(const qint32 &character_id, const ::OpenAPI::OptionalParam<QString> &datasource = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &if_none_match = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &token = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  character_id qint32 [required]
    * @param[in]  datasource QString [optional]
    * @param[in]  if_none_match QString [optional]
    * @param[in]  page qint32 [optional]
    * @param[in]  token QString [optional]
    */
    virtual void getCharactersCharacterIdOrdersHistory(const qint32 &character_id, const ::OpenAPI::OptionalParam<QString> &datasource = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &if_none_match = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<qint32> &page = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<QString> &token = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  corporation_id qint32 [required]
    * @param[in]  datasource QString [optional]
    * @param[in]  if_none_match QString [optional]
    * @param[in]  page qint32 [optional]
    * @param[in]  token QString [optional]
    */
    virtual void getCorporationsCorporationIdOrders(const qint32 &corporation_id, const ::OpenAPI::OptionalParam<QString> &datasource = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &if_none_match = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<qint32> &page = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<QString> &token = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  corporation_id qint32 [required]
    * @param[in]  datasource QString [optional]
    * @param[in]  if_none_match QString [optional]
    * @param[in]  page qint32 [optional]
    * @param[in]  token QString [optional]
    */
    virtual void getCorporationsCorporationIdOrdersHistory(const qint32 &corporation_id, const ::OpenAPI::OptionalParam<QString> &datasource = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &if_none_match = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<qint32> &page = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<QString> &token = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  datasource QString [optional]
    * @param[in]  if_none_match QString [optional]
    */
    virtual void getMarketsGroups(const ::OpenAPI::OptionalParam<QString> &datasource = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &if_none_match = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  market_group_id qint32 [required]
    * @param[in]  accept_language QString [optional]
    * @param[in]  datasource QString [optional]
    * @param[in]  if_none_match QString [optional]
    * @param[in]  language QString [optional]
    */
    virtual void getMarketsGroupsMarketGroupId(const qint32 &market_group_id, const ::OpenAPI::OptionalParam<QString> &accept_language = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &datasource = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &if_none_match = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &language = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  datasource QString [optional]
    * @param[in]  if_none_match QString [optional]
    */
    virtual void getMarketsPrices(const ::OpenAPI::OptionalParam<QString> &datasource = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &if_none_match = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  region_id qint32 [required]
    * @param[in]  type_id qint32 [required]
    * @param[in]  datasource QString [optional]
    * @param[in]  if_none_match QString [optional]
    */
    virtual void getMarketsRegionIdHistory(const qint32 &region_id, const qint32 &type_id, const ::OpenAPI::OptionalParam<QString> &datasource = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &if_none_match = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  order_type QString [required]
    * @param[in]  region_id qint32 [required]
    * @param[in]  datasource QString [optional]
    * @param[in]  if_none_match QString [optional]
    * @param[in]  page qint32 [optional]
    * @param[in]  type_id qint32 [optional]
    */
    virtual void getMarketsRegionIdOrders(const QString &order_type, const qint32 &region_id, const ::OpenAPI::OptionalParam<QString> &datasource = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &if_none_match = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<qint32> &page = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint32> &type_id = ::OpenAPI::OptionalParam<qint32>());

    /**
    * @param[in]  region_id qint32 [required]
    * @param[in]  datasource QString [optional]
    * @param[in]  if_none_match QString [optional]
    * @param[in]  page qint32 [optional]
    */
    virtual void getMarketsRegionIdTypes(const qint32 &region_id, const ::OpenAPI::OptionalParam<QString> &datasource = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &if_none_match = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<qint32> &page = ::OpenAPI::OptionalParam<qint32>());

    /**
    * @param[in]  structure_id qint64 [required]
    * @param[in]  datasource QString [optional]
    * @param[in]  if_none_match QString [optional]
    * @param[in]  page qint32 [optional]
    * @param[in]  token QString [optional]
    */
    virtual void getMarketsStructuresStructureId(const qint64 &structure_id, const ::OpenAPI::OptionalParam<QString> &datasource = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &if_none_match = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<qint32> &page = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<QString> &token = ::OpenAPI::OptionalParam<QString>());


private:
    QMap<QString,int> _serverIndices;
    QMap<QString,QList<OAIServerConfiguration>> _serverConfigs;
    QMap<QString, QString> _apiKeys;
    QString _bearerToken;
    QString _username;
    QString _password;
    int _timeOut;
    QString _workingDirectory;
    QNetworkAccessManager* _manager;
    QMap<QString, QString> _defaultHeaders;
    bool _isResponseCompressionEnabled;
    bool _isRequestCompressionEnabled;
    OAIHttpRequestInput _latestInput;
    OAIHttpRequestWorker *_latestWorker;
    QStringList _latestScope;
    OauthCode _authFlow;
    OauthImplicit _implicitFlow;
    OauthCredentials _credentialFlow;
    OauthPassword _passwordFlow;
    int _OauthMethod = 0;

    void getCharactersCharacterIdOrdersCallback(OAIHttpRequestWorker *worker);
    void getCharactersCharacterIdOrdersHistoryCallback(OAIHttpRequestWorker *worker);
    void getCorporationsCorporationIdOrdersCallback(OAIHttpRequestWorker *worker);
    void getCorporationsCorporationIdOrdersHistoryCallback(OAIHttpRequestWorker *worker);
    void getMarketsGroupsCallback(OAIHttpRequestWorker *worker);
    void getMarketsGroupsMarketGroupIdCallback(OAIHttpRequestWorker *worker);
    void getMarketsPricesCallback(OAIHttpRequestWorker *worker);
    void getMarketsRegionIdHistoryCallback(OAIHttpRequestWorker *worker);
    void getMarketsRegionIdOrdersCallback(OAIHttpRequestWorker *worker);
    void getMarketsRegionIdTypesCallback(OAIHttpRequestWorker *worker);
    void getMarketsStructuresStructureIdCallback(OAIHttpRequestWorker *worker);

Q_SIGNALS:

    void getCharactersCharacterIdOrdersSignal(QList<OAIGet_characters_character_id_orders_200_ok> summary);
    void getCharactersCharacterIdOrdersHistorySignal(QList<OAIGet_characters_character_id_orders_history_200_ok> summary);
    void getCorporationsCorporationIdOrdersSignal(QList<OAIGet_corporations_corporation_id_orders_200_ok> summary);
    void getCorporationsCorporationIdOrdersHistorySignal(QList<OAIGet_corporations_corporation_id_orders_history_200_ok> summary);
    void getMarketsGroupsSignal(QList<qint32> summary);
    void getMarketsGroupsMarketGroupIdSignal(OAIGet_markets_groups_market_group_id_ok summary);
    void getMarketsPricesSignal(QList<OAIGet_markets_prices_200_ok> summary);
    void getMarketsRegionIdHistorySignal(QList<OAIGet_markets_region_id_history_200_ok> summary);
    void getMarketsRegionIdOrdersSignal(QList<OAIGet_markets_region_id_orders_200_ok> summary);
    void getMarketsRegionIdTypesSignal(QList<qint32> summary);
    void getMarketsStructuresStructureIdSignal(QList<OAIGet_markets_structures_structure_id_200_ok> summary);


    void getCharactersCharacterIdOrdersSignalFull(OAIHttpRequestWorker *worker, QList<OAIGet_characters_character_id_orders_200_ok> summary);
    void getCharactersCharacterIdOrdersHistorySignalFull(OAIHttpRequestWorker *worker, QList<OAIGet_characters_character_id_orders_history_200_ok> summary);
    void getCorporationsCorporationIdOrdersSignalFull(OAIHttpRequestWorker *worker, QList<OAIGet_corporations_corporation_id_orders_200_ok> summary);
    void getCorporationsCorporationIdOrdersHistorySignalFull(OAIHttpRequestWorker *worker, QList<OAIGet_corporations_corporation_id_orders_history_200_ok> summary);
    void getMarketsGroupsSignalFull(OAIHttpRequestWorker *worker, QList<qint32> summary);
    void getMarketsGroupsMarketGroupIdSignalFull(OAIHttpRequestWorker *worker, OAIGet_markets_groups_market_group_id_ok summary);
    void getMarketsPricesSignalFull(OAIHttpRequestWorker *worker, QList<OAIGet_markets_prices_200_ok> summary);
    void getMarketsRegionIdHistorySignalFull(OAIHttpRequestWorker *worker, QList<OAIGet_markets_region_id_history_200_ok> summary);
    void getMarketsRegionIdOrdersSignalFull(OAIHttpRequestWorker *worker, QList<OAIGet_markets_region_id_orders_200_ok> summary);
    void getMarketsRegionIdTypesSignalFull(OAIHttpRequestWorker *worker, QList<qint32> summary);
    void getMarketsStructuresStructureIdSignalFull(OAIHttpRequestWorker *worker, QList<OAIGet_markets_structures_structure_id_200_ok> summary);

    Q_DECL_DEPRECATED_X("Use getCharactersCharacterIdOrdersSignalError() instead")
    void getCharactersCharacterIdOrdersSignalE(QList<OAIGet_characters_character_id_orders_200_ok> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getCharactersCharacterIdOrdersSignalError(QList<OAIGet_characters_character_id_orders_200_ok> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getCharactersCharacterIdOrdersHistorySignalError() instead")
    void getCharactersCharacterIdOrdersHistorySignalE(QList<OAIGet_characters_character_id_orders_history_200_ok> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getCharactersCharacterIdOrdersHistorySignalError(QList<OAIGet_characters_character_id_orders_history_200_ok> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getCorporationsCorporationIdOrdersSignalError() instead")
    void getCorporationsCorporationIdOrdersSignalE(QList<OAIGet_corporations_corporation_id_orders_200_ok> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getCorporationsCorporationIdOrdersSignalError(QList<OAIGet_corporations_corporation_id_orders_200_ok> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getCorporationsCorporationIdOrdersHistorySignalError() instead")
    void getCorporationsCorporationIdOrdersHistorySignalE(QList<OAIGet_corporations_corporation_id_orders_history_200_ok> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getCorporationsCorporationIdOrdersHistorySignalError(QList<OAIGet_corporations_corporation_id_orders_history_200_ok> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getMarketsGroupsSignalError() instead")
    void getMarketsGroupsSignalE(QList<qint32> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getMarketsGroupsSignalError(QList<qint32> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getMarketsGroupsMarketGroupIdSignalError() instead")
    void getMarketsGroupsMarketGroupIdSignalE(OAIGet_markets_groups_market_group_id_ok summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getMarketsGroupsMarketGroupIdSignalError(OAIGet_markets_groups_market_group_id_ok summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getMarketsPricesSignalError() instead")
    void getMarketsPricesSignalE(QList<OAIGet_markets_prices_200_ok> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getMarketsPricesSignalError(QList<OAIGet_markets_prices_200_ok> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getMarketsRegionIdHistorySignalError() instead")
    void getMarketsRegionIdHistorySignalE(QList<OAIGet_markets_region_id_history_200_ok> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getMarketsRegionIdHistorySignalError(QList<OAIGet_markets_region_id_history_200_ok> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getMarketsRegionIdOrdersSignalError() instead")
    void getMarketsRegionIdOrdersSignalE(QList<OAIGet_markets_region_id_orders_200_ok> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getMarketsRegionIdOrdersSignalError(QList<OAIGet_markets_region_id_orders_200_ok> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getMarketsRegionIdTypesSignalError() instead")
    void getMarketsRegionIdTypesSignalE(QList<qint32> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getMarketsRegionIdTypesSignalError(QList<qint32> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getMarketsStructuresStructureIdSignalError() instead")
    void getMarketsStructuresStructureIdSignalE(QList<OAIGet_markets_structures_structure_id_200_ok> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getMarketsStructuresStructureIdSignalError(QList<OAIGet_markets_structures_structure_id_200_ok> summary, QNetworkReply::NetworkError error_type, const QString &error_str);

    Q_DECL_DEPRECATED_X("Use getCharactersCharacterIdOrdersSignalErrorFull() instead")
    void getCharactersCharacterIdOrdersSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getCharactersCharacterIdOrdersSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getCharactersCharacterIdOrdersHistorySignalErrorFull() instead")
    void getCharactersCharacterIdOrdersHistorySignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getCharactersCharacterIdOrdersHistorySignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getCorporationsCorporationIdOrdersSignalErrorFull() instead")
    void getCorporationsCorporationIdOrdersSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getCorporationsCorporationIdOrdersSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getCorporationsCorporationIdOrdersHistorySignalErrorFull() instead")
    void getCorporationsCorporationIdOrdersHistorySignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getCorporationsCorporationIdOrdersHistorySignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getMarketsGroupsSignalErrorFull() instead")
    void getMarketsGroupsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getMarketsGroupsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getMarketsGroupsMarketGroupIdSignalErrorFull() instead")
    void getMarketsGroupsMarketGroupIdSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getMarketsGroupsMarketGroupIdSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getMarketsPricesSignalErrorFull() instead")
    void getMarketsPricesSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getMarketsPricesSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getMarketsRegionIdHistorySignalErrorFull() instead")
    void getMarketsRegionIdHistorySignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getMarketsRegionIdHistorySignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getMarketsRegionIdOrdersSignalErrorFull() instead")
    void getMarketsRegionIdOrdersSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getMarketsRegionIdOrdersSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getMarketsRegionIdTypesSignalErrorFull() instead")
    void getMarketsRegionIdTypesSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getMarketsRegionIdTypesSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getMarketsStructuresStructureIdSignalErrorFull() instead")
    void getMarketsStructuresStructureIdSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getMarketsStructuresStructureIdSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);

    void abortRequestsSignal();
    void allPendingRequestsCompleted();

public Q_SLOTS:
    void tokenAvailable();
};

} // namespace OpenAPI
#endif
