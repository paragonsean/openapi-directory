/**
 * EVE Swagger Interface
 * An OpenAPI for EVE Online
 *
 * The version of the OpenAPI document: 0.8.6
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIGet_characters_character_id_planets_planet_id_extractor_details.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIGet_characters_character_id_planets_planet_id_extractor_details::OAIGet_characters_character_id_planets_planet_id_extractor_details(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIGet_characters_character_id_planets_planet_id_extractor_details::OAIGet_characters_character_id_planets_planet_id_extractor_details() {
    this->initializeModel();
}

OAIGet_characters_character_id_planets_planet_id_extractor_details::~OAIGet_characters_character_id_planets_planet_id_extractor_details() {}

void OAIGet_characters_character_id_planets_planet_id_extractor_details::initializeModel() {

    m_cycle_time_isSet = false;
    m_cycle_time_isValid = false;

    m_head_radius_isSet = false;
    m_head_radius_isValid = false;

    m_heads_isSet = false;
    m_heads_isValid = false;

    m_product_type_id_isSet = false;
    m_product_type_id_isValid = false;

    m_qty_per_cycle_isSet = false;
    m_qty_per_cycle_isValid = false;
}

void OAIGet_characters_character_id_planets_planet_id_extractor_details::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIGet_characters_character_id_planets_planet_id_extractor_details::fromJsonObject(QJsonObject json) {

    m_cycle_time_isValid = ::OpenAPI::fromJsonValue(m_cycle_time, json[QString("cycle_time")]);
    m_cycle_time_isSet = !json[QString("cycle_time")].isNull() && m_cycle_time_isValid;

    m_head_radius_isValid = ::OpenAPI::fromJsonValue(m_head_radius, json[QString("head_radius")]);
    m_head_radius_isSet = !json[QString("head_radius")].isNull() && m_head_radius_isValid;

    m_heads_isValid = ::OpenAPI::fromJsonValue(m_heads, json[QString("heads")]);
    m_heads_isSet = !json[QString("heads")].isNull() && m_heads_isValid;

    m_product_type_id_isValid = ::OpenAPI::fromJsonValue(m_product_type_id, json[QString("product_type_id")]);
    m_product_type_id_isSet = !json[QString("product_type_id")].isNull() && m_product_type_id_isValid;

    m_qty_per_cycle_isValid = ::OpenAPI::fromJsonValue(m_qty_per_cycle, json[QString("qty_per_cycle")]);
    m_qty_per_cycle_isSet = !json[QString("qty_per_cycle")].isNull() && m_qty_per_cycle_isValid;
}

QString OAIGet_characters_character_id_planets_planet_id_extractor_details::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIGet_characters_character_id_planets_planet_id_extractor_details::asJsonObject() const {
    QJsonObject obj;
    if (m_cycle_time_isSet) {
        obj.insert(QString("cycle_time"), ::OpenAPI::toJsonValue(m_cycle_time));
    }
    if (m_head_radius_isSet) {
        obj.insert(QString("head_radius"), ::OpenAPI::toJsonValue(m_head_radius));
    }
    if (m_heads.size() > 0) {
        obj.insert(QString("heads"), ::OpenAPI::toJsonValue(m_heads));
    }
    if (m_product_type_id_isSet) {
        obj.insert(QString("product_type_id"), ::OpenAPI::toJsonValue(m_product_type_id));
    }
    if (m_qty_per_cycle_isSet) {
        obj.insert(QString("qty_per_cycle"), ::OpenAPI::toJsonValue(m_qty_per_cycle));
    }
    return obj;
}

qint32 OAIGet_characters_character_id_planets_planet_id_extractor_details::getCycleTime() const {
    return m_cycle_time;
}
void OAIGet_characters_character_id_planets_planet_id_extractor_details::setCycleTime(const qint32 &cycle_time) {
    m_cycle_time = cycle_time;
    m_cycle_time_isSet = true;
}

bool OAIGet_characters_character_id_planets_planet_id_extractor_details::is_cycle_time_Set() const{
    return m_cycle_time_isSet;
}

bool OAIGet_characters_character_id_planets_planet_id_extractor_details::is_cycle_time_Valid() const{
    return m_cycle_time_isValid;
}

float OAIGet_characters_character_id_planets_planet_id_extractor_details::getHeadRadius() const {
    return m_head_radius;
}
void OAIGet_characters_character_id_planets_planet_id_extractor_details::setHeadRadius(const float &head_radius) {
    m_head_radius = head_radius;
    m_head_radius_isSet = true;
}

bool OAIGet_characters_character_id_planets_planet_id_extractor_details::is_head_radius_Set() const{
    return m_head_radius_isSet;
}

bool OAIGet_characters_character_id_planets_planet_id_extractor_details::is_head_radius_Valid() const{
    return m_head_radius_isValid;
}

QList<OAIGet_characters_character_id_planets_planet_id_head> OAIGet_characters_character_id_planets_planet_id_extractor_details::getHeads() const {
    return m_heads;
}
void OAIGet_characters_character_id_planets_planet_id_extractor_details::setHeads(const QList<OAIGet_characters_character_id_planets_planet_id_head> &heads) {
    m_heads = heads;
    m_heads_isSet = true;
}

bool OAIGet_characters_character_id_planets_planet_id_extractor_details::is_heads_Set() const{
    return m_heads_isSet;
}

bool OAIGet_characters_character_id_planets_planet_id_extractor_details::is_heads_Valid() const{
    return m_heads_isValid;
}

qint32 OAIGet_characters_character_id_planets_planet_id_extractor_details::getProductTypeId() const {
    return m_product_type_id;
}
void OAIGet_characters_character_id_planets_planet_id_extractor_details::setProductTypeId(const qint32 &product_type_id) {
    m_product_type_id = product_type_id;
    m_product_type_id_isSet = true;
}

bool OAIGet_characters_character_id_planets_planet_id_extractor_details::is_product_type_id_Set() const{
    return m_product_type_id_isSet;
}

bool OAIGet_characters_character_id_planets_planet_id_extractor_details::is_product_type_id_Valid() const{
    return m_product_type_id_isValid;
}

qint32 OAIGet_characters_character_id_planets_planet_id_extractor_details::getQtyPerCycle() const {
    return m_qty_per_cycle;
}
void OAIGet_characters_character_id_planets_planet_id_extractor_details::setQtyPerCycle(const qint32 &qty_per_cycle) {
    m_qty_per_cycle = qty_per_cycle;
    m_qty_per_cycle_isSet = true;
}

bool OAIGet_characters_character_id_planets_planet_id_extractor_details::is_qty_per_cycle_Set() const{
    return m_qty_per_cycle_isSet;
}

bool OAIGet_characters_character_id_planets_planet_id_extractor_details::is_qty_per_cycle_Valid() const{
    return m_qty_per_cycle_isValid;
}

bool OAIGet_characters_character_id_planets_planet_id_extractor_details::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_cycle_time_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_head_radius_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_heads.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_product_type_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_qty_per_cycle_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIGet_characters_character_id_planets_planet_id_extractor_details::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_heads_isValid && true;
}

} // namespace OpenAPI
