/**
 * EVE Swagger Interface
 * An OpenAPI for EVE Online
 *
 * The version of the OpenAPI document: 0.8.6
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#ifndef OAI_OAICorporationApi_H
#define OAI_OAICorporationApi_H

#include "OAIHelpers.h"
#include "OAIHttpRequest.h"
#include "OAIServerConfiguration.h"
#include "OAIOauth.h"

#include "OAIBad_request.h"
#include "OAIError_limited.h"
#include "OAIForbidden.h"
#include "OAIGateway_timeout.h"
#include "OAIGet_corporations_corporation_id_alliancehistory_200_ok.h"
#include "OAIGet_corporations_corporation_id_blueprints_200_ok.h"
#include "OAIGet_corporations_corporation_id_containers_logs_200_ok.h"
#include "OAIGet_corporations_corporation_id_divisions_ok.h"
#include "OAIGet_corporations_corporation_id_facilities_200_ok.h"
#include "OAIGet_corporations_corporation_id_icons_not_found.h"
#include "OAIGet_corporations_corporation_id_icons_ok.h"
#include "OAIGet_corporations_corporation_id_medals_200_ok.h"
#include "OAIGet_corporations_corporation_id_medals_issued_200_ok.h"
#include "OAIGet_corporations_corporation_id_members_titles_200_ok.h"
#include "OAIGet_corporations_corporation_id_membertracking_200_ok.h"
#include "OAIGet_corporations_corporation_id_not_found.h"
#include "OAIGet_corporations_corporation_id_ok.h"
#include "OAIGet_corporations_corporation_id_roles_200_ok.h"
#include "OAIGet_corporations_corporation_id_roles_history_200_ok.h"
#include "OAIGet_corporations_corporation_id_shareholders_200_ok.h"
#include "OAIGet_corporations_corporation_id_standings_200_ok.h"
#include "OAIGet_corporations_corporation_id_starbases_200_ok.h"
#include "OAIGet_corporations_corporation_id_starbases_starbase_id_ok.h"
#include "OAIGet_corporations_corporation_id_structures_200_ok.h"
#include "OAIGet_corporations_corporation_id_titles_200_ok.h"
#include "OAIInternal_server_error.h"
#include "OAIService_unavailable.h"
#include "OAIUnauthorized.h"
#include <QString>

#include <QObject>
#include <QByteArray>
#include <QStringList>
#include <QList>
#include <QNetworkAccessManager>

namespace OpenAPI {

class OAICorporationApi : public QObject {
    Q_OBJECT

public:
    OAICorporationApi(const int timeOut = 0);
    ~OAICorporationApi();

    void initializeServerConfigs();
    int setDefaultServerValue(int serverIndex,const QString &operation, const QString &variable,const QString &val);
    void setServerIndex(const QString &operation, int serverIndex);
    void setApiKey(const QString &apiKeyName, const QString &apiKey);
    void setBearerToken(const QString &token);
    void setUsername(const QString &username);
    void setPassword(const QString &password);
    void setTimeOut(const int timeOut);
    void setWorkingDirectory(const QString &path);
    void setNetworkAccessManager(QNetworkAccessManager* manager);
    int addServerConfiguration(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables = QMap<QString, OAIServerVariable>());
    void setNewServerForAllOperations(const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void setNewServer(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void addHeaders(const QString &key, const QString &value);
    void enableRequestCompression();
    void enableResponseCompression();
    void abortRequests();
    QString getParamStylePrefix(const QString &style);
    QString getParamStyleSuffix(const QString &style);
    QString getParamStyleDelimiter(const QString &style, const QString &name, bool isExplode);

    /**
    * @param[in]  corporation_id qint32 [required]
    * @param[in]  datasource QString [optional]
    * @param[in]  if_none_match QString [optional]
    */
    virtual void getCorporationsCorporationId(const qint32 &corporation_id, const ::OpenAPI::OptionalParam<QString> &datasource = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &if_none_match = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  corporation_id qint32 [required]
    * @param[in]  datasource QString [optional]
    * @param[in]  if_none_match QString [optional]
    */
    virtual void getCorporationsCorporationIdAlliancehistory(const qint32 &corporation_id, const ::OpenAPI::OptionalParam<QString> &datasource = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &if_none_match = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  corporation_id qint32 [required]
    * @param[in]  datasource QString [optional]
    * @param[in]  if_none_match QString [optional]
    * @param[in]  page qint32 [optional]
    * @param[in]  token QString [optional]
    */
    virtual void getCorporationsCorporationIdBlueprints(const qint32 &corporation_id, const ::OpenAPI::OptionalParam<QString> &datasource = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &if_none_match = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<qint32> &page = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<QString> &token = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  corporation_id qint32 [required]
    * @param[in]  datasource QString [optional]
    * @param[in]  if_none_match QString [optional]
    * @param[in]  page qint32 [optional]
    * @param[in]  token QString [optional]
    */
    virtual void getCorporationsCorporationIdContainersLogs(const qint32 &corporation_id, const ::OpenAPI::OptionalParam<QString> &datasource = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &if_none_match = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<qint32> &page = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<QString> &token = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  corporation_id qint32 [required]
    * @param[in]  datasource QString [optional]
    * @param[in]  if_none_match QString [optional]
    * @param[in]  token QString [optional]
    */
    virtual void getCorporationsCorporationIdDivisions(const qint32 &corporation_id, const ::OpenAPI::OptionalParam<QString> &datasource = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &if_none_match = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &token = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  corporation_id qint32 [required]
    * @param[in]  datasource QString [optional]
    * @param[in]  if_none_match QString [optional]
    * @param[in]  token QString [optional]
    */
    virtual void getCorporationsCorporationIdFacilities(const qint32 &corporation_id, const ::OpenAPI::OptionalParam<QString> &datasource = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &if_none_match = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &token = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  corporation_id qint32 [required]
    * @param[in]  datasource QString [optional]
    * @param[in]  if_none_match QString [optional]
    */
    virtual void getCorporationsCorporationIdIcons(const qint32 &corporation_id, const ::OpenAPI::OptionalParam<QString> &datasource = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &if_none_match = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  corporation_id qint32 [required]
    * @param[in]  datasource QString [optional]
    * @param[in]  if_none_match QString [optional]
    * @param[in]  page qint32 [optional]
    * @param[in]  token QString [optional]
    */
    virtual void getCorporationsCorporationIdMedals(const qint32 &corporation_id, const ::OpenAPI::OptionalParam<QString> &datasource = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &if_none_match = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<qint32> &page = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<QString> &token = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  corporation_id qint32 [required]
    * @param[in]  datasource QString [optional]
    * @param[in]  if_none_match QString [optional]
    * @param[in]  page qint32 [optional]
    * @param[in]  token QString [optional]
    */
    virtual void getCorporationsCorporationIdMedalsIssued(const qint32 &corporation_id, const ::OpenAPI::OptionalParam<QString> &datasource = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &if_none_match = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<qint32> &page = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<QString> &token = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  corporation_id qint32 [required]
    * @param[in]  datasource QString [optional]
    * @param[in]  if_none_match QString [optional]
    * @param[in]  token QString [optional]
    */
    virtual void getCorporationsCorporationIdMembers(const qint32 &corporation_id, const ::OpenAPI::OptionalParam<QString> &datasource = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &if_none_match = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &token = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  corporation_id qint32 [required]
    * @param[in]  datasource QString [optional]
    * @param[in]  if_none_match QString [optional]
    * @param[in]  token QString [optional]
    */
    virtual void getCorporationsCorporationIdMembersLimit(const qint32 &corporation_id, const ::OpenAPI::OptionalParam<QString> &datasource = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &if_none_match = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &token = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  corporation_id qint32 [required]
    * @param[in]  datasource QString [optional]
    * @param[in]  if_none_match QString [optional]
    * @param[in]  token QString [optional]
    */
    virtual void getCorporationsCorporationIdMembersTitles(const qint32 &corporation_id, const ::OpenAPI::OptionalParam<QString> &datasource = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &if_none_match = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &token = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  corporation_id qint32 [required]
    * @param[in]  datasource QString [optional]
    * @param[in]  if_none_match QString [optional]
    * @param[in]  token QString [optional]
    */
    virtual void getCorporationsCorporationIdMembertracking(const qint32 &corporation_id, const ::OpenAPI::OptionalParam<QString> &datasource = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &if_none_match = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &token = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  corporation_id qint32 [required]
    * @param[in]  datasource QString [optional]
    * @param[in]  if_none_match QString [optional]
    * @param[in]  token QString [optional]
    */
    virtual void getCorporationsCorporationIdRoles(const qint32 &corporation_id, const ::OpenAPI::OptionalParam<QString> &datasource = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &if_none_match = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &token = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  corporation_id qint32 [required]
    * @param[in]  datasource QString [optional]
    * @param[in]  if_none_match QString [optional]
    * @param[in]  page qint32 [optional]
    * @param[in]  token QString [optional]
    */
    virtual void getCorporationsCorporationIdRolesHistory(const qint32 &corporation_id, const ::OpenAPI::OptionalParam<QString> &datasource = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &if_none_match = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<qint32> &page = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<QString> &token = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  corporation_id qint32 [required]
    * @param[in]  datasource QString [optional]
    * @param[in]  if_none_match QString [optional]
    * @param[in]  page qint32 [optional]
    * @param[in]  token QString [optional]
    */
    virtual void getCorporationsCorporationIdShareholders(const qint32 &corporation_id, const ::OpenAPI::OptionalParam<QString> &datasource = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &if_none_match = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<qint32> &page = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<QString> &token = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  corporation_id qint32 [required]
    * @param[in]  datasource QString [optional]
    * @param[in]  if_none_match QString [optional]
    * @param[in]  page qint32 [optional]
    * @param[in]  token QString [optional]
    */
    virtual void getCorporationsCorporationIdStandings(const qint32 &corporation_id, const ::OpenAPI::OptionalParam<QString> &datasource = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &if_none_match = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<qint32> &page = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<QString> &token = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  corporation_id qint32 [required]
    * @param[in]  datasource QString [optional]
    * @param[in]  if_none_match QString [optional]
    * @param[in]  page qint32 [optional]
    * @param[in]  token QString [optional]
    */
    virtual void getCorporationsCorporationIdStarbases(const qint32 &corporation_id, const ::OpenAPI::OptionalParam<QString> &datasource = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &if_none_match = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<qint32> &page = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<QString> &token = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  corporation_id qint32 [required]
    * @param[in]  starbase_id qint64 [required]
    * @param[in]  system_id qint32 [required]
    * @param[in]  datasource QString [optional]
    * @param[in]  if_none_match QString [optional]
    * @param[in]  token QString [optional]
    */
    virtual void getCorporationsCorporationIdStarbasesStarbaseId(const qint32 &corporation_id, const qint64 &starbase_id, const qint32 &system_id, const ::OpenAPI::OptionalParam<QString> &datasource = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &if_none_match = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &token = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  corporation_id qint32 [required]
    * @param[in]  accept_language QString [optional]
    * @param[in]  datasource QString [optional]
    * @param[in]  if_none_match QString [optional]
    * @param[in]  language QString [optional]
    * @param[in]  page qint32 [optional]
    * @param[in]  token QString [optional]
    */
    virtual void getCorporationsCorporationIdStructures(const qint32 &corporation_id, const ::OpenAPI::OptionalParam<QString> &accept_language = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &datasource = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &if_none_match = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &language = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<qint32> &page = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<QString> &token = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  corporation_id qint32 [required]
    * @param[in]  datasource QString [optional]
    * @param[in]  if_none_match QString [optional]
    * @param[in]  token QString [optional]
    */
    virtual void getCorporationsCorporationIdTitles(const qint32 &corporation_id, const ::OpenAPI::OptionalParam<QString> &datasource = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &if_none_match = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &token = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  datasource QString [optional]
    * @param[in]  if_none_match QString [optional]
    */
    virtual void getCorporationsNpccorps(const ::OpenAPI::OptionalParam<QString> &datasource = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &if_none_match = ::OpenAPI::OptionalParam<QString>());


private:
    QMap<QString,int> _serverIndices;
    QMap<QString,QList<OAIServerConfiguration>> _serverConfigs;
    QMap<QString, QString> _apiKeys;
    QString _bearerToken;
    QString _username;
    QString _password;
    int _timeOut;
    QString _workingDirectory;
    QNetworkAccessManager* _manager;
    QMap<QString, QString> _defaultHeaders;
    bool _isResponseCompressionEnabled;
    bool _isRequestCompressionEnabled;
    OAIHttpRequestInput _latestInput;
    OAIHttpRequestWorker *_latestWorker;
    QStringList _latestScope;
    OauthCode _authFlow;
    OauthImplicit _implicitFlow;
    OauthCredentials _credentialFlow;
    OauthPassword _passwordFlow;
    int _OauthMethod = 0;

    void getCorporationsCorporationIdCallback(OAIHttpRequestWorker *worker);
    void getCorporationsCorporationIdAlliancehistoryCallback(OAIHttpRequestWorker *worker);
    void getCorporationsCorporationIdBlueprintsCallback(OAIHttpRequestWorker *worker);
    void getCorporationsCorporationIdContainersLogsCallback(OAIHttpRequestWorker *worker);
    void getCorporationsCorporationIdDivisionsCallback(OAIHttpRequestWorker *worker);
    void getCorporationsCorporationIdFacilitiesCallback(OAIHttpRequestWorker *worker);
    void getCorporationsCorporationIdIconsCallback(OAIHttpRequestWorker *worker);
    void getCorporationsCorporationIdMedalsCallback(OAIHttpRequestWorker *worker);
    void getCorporationsCorporationIdMedalsIssuedCallback(OAIHttpRequestWorker *worker);
    void getCorporationsCorporationIdMembersCallback(OAIHttpRequestWorker *worker);
    void getCorporationsCorporationIdMembersLimitCallback(OAIHttpRequestWorker *worker);
    void getCorporationsCorporationIdMembersTitlesCallback(OAIHttpRequestWorker *worker);
    void getCorporationsCorporationIdMembertrackingCallback(OAIHttpRequestWorker *worker);
    void getCorporationsCorporationIdRolesCallback(OAIHttpRequestWorker *worker);
    void getCorporationsCorporationIdRolesHistoryCallback(OAIHttpRequestWorker *worker);
    void getCorporationsCorporationIdShareholdersCallback(OAIHttpRequestWorker *worker);
    void getCorporationsCorporationIdStandingsCallback(OAIHttpRequestWorker *worker);
    void getCorporationsCorporationIdStarbasesCallback(OAIHttpRequestWorker *worker);
    void getCorporationsCorporationIdStarbasesStarbaseIdCallback(OAIHttpRequestWorker *worker);
    void getCorporationsCorporationIdStructuresCallback(OAIHttpRequestWorker *worker);
    void getCorporationsCorporationIdTitlesCallback(OAIHttpRequestWorker *worker);
    void getCorporationsNpccorpsCallback(OAIHttpRequestWorker *worker);

Q_SIGNALS:

    void getCorporationsCorporationIdSignal(OAIGet_corporations_corporation_id_ok summary);
    void getCorporationsCorporationIdAlliancehistorySignal(QList<OAIGet_corporations_corporation_id_alliancehistory_200_ok> summary);
    void getCorporationsCorporationIdBlueprintsSignal(QList<OAIGet_corporations_corporation_id_blueprints_200_ok> summary);
    void getCorporationsCorporationIdContainersLogsSignal(QList<OAIGet_corporations_corporation_id_containers_logs_200_ok> summary);
    void getCorporationsCorporationIdDivisionsSignal(OAIGet_corporations_corporation_id_divisions_ok summary);
    void getCorporationsCorporationIdFacilitiesSignal(QList<OAIGet_corporations_corporation_id_facilities_200_ok> summary);
    void getCorporationsCorporationIdIconsSignal(OAIGet_corporations_corporation_id_icons_ok summary);
    void getCorporationsCorporationIdMedalsSignal(QList<OAIGet_corporations_corporation_id_medals_200_ok> summary);
    void getCorporationsCorporationIdMedalsIssuedSignal(QList<OAIGet_corporations_corporation_id_medals_issued_200_ok> summary);
    void getCorporationsCorporationIdMembersSignal(QList<qint32> summary);
    void getCorporationsCorporationIdMembersLimitSignal(qint32 summary);
    void getCorporationsCorporationIdMembersTitlesSignal(QList<OAIGet_corporations_corporation_id_members_titles_200_ok> summary);
    void getCorporationsCorporationIdMembertrackingSignal(QList<OAIGet_corporations_corporation_id_membertracking_200_ok> summary);
    void getCorporationsCorporationIdRolesSignal(QList<OAIGet_corporations_corporation_id_roles_200_ok> summary);
    void getCorporationsCorporationIdRolesHistorySignal(QList<OAIGet_corporations_corporation_id_roles_history_200_ok> summary);
    void getCorporationsCorporationIdShareholdersSignal(QList<OAIGet_corporations_corporation_id_shareholders_200_ok> summary);
    void getCorporationsCorporationIdStandingsSignal(QList<OAIGet_corporations_corporation_id_standings_200_ok> summary);
    void getCorporationsCorporationIdStarbasesSignal(QList<OAIGet_corporations_corporation_id_starbases_200_ok> summary);
    void getCorporationsCorporationIdStarbasesStarbaseIdSignal(OAIGet_corporations_corporation_id_starbases_starbase_id_ok summary);
    void getCorporationsCorporationIdStructuresSignal(QList<OAIGet_corporations_corporation_id_structures_200_ok> summary);
    void getCorporationsCorporationIdTitlesSignal(QList<OAIGet_corporations_corporation_id_titles_200_ok> summary);
    void getCorporationsNpccorpsSignal(QList<qint32> summary);


    void getCorporationsCorporationIdSignalFull(OAIHttpRequestWorker *worker, OAIGet_corporations_corporation_id_ok summary);
    void getCorporationsCorporationIdAlliancehistorySignalFull(OAIHttpRequestWorker *worker, QList<OAIGet_corporations_corporation_id_alliancehistory_200_ok> summary);
    void getCorporationsCorporationIdBlueprintsSignalFull(OAIHttpRequestWorker *worker, QList<OAIGet_corporations_corporation_id_blueprints_200_ok> summary);
    void getCorporationsCorporationIdContainersLogsSignalFull(OAIHttpRequestWorker *worker, QList<OAIGet_corporations_corporation_id_containers_logs_200_ok> summary);
    void getCorporationsCorporationIdDivisionsSignalFull(OAIHttpRequestWorker *worker, OAIGet_corporations_corporation_id_divisions_ok summary);
    void getCorporationsCorporationIdFacilitiesSignalFull(OAIHttpRequestWorker *worker, QList<OAIGet_corporations_corporation_id_facilities_200_ok> summary);
    void getCorporationsCorporationIdIconsSignalFull(OAIHttpRequestWorker *worker, OAIGet_corporations_corporation_id_icons_ok summary);
    void getCorporationsCorporationIdMedalsSignalFull(OAIHttpRequestWorker *worker, QList<OAIGet_corporations_corporation_id_medals_200_ok> summary);
    void getCorporationsCorporationIdMedalsIssuedSignalFull(OAIHttpRequestWorker *worker, QList<OAIGet_corporations_corporation_id_medals_issued_200_ok> summary);
    void getCorporationsCorporationIdMembersSignalFull(OAIHttpRequestWorker *worker, QList<qint32> summary);
    void getCorporationsCorporationIdMembersLimitSignalFull(OAIHttpRequestWorker *worker, qint32 summary);
    void getCorporationsCorporationIdMembersTitlesSignalFull(OAIHttpRequestWorker *worker, QList<OAIGet_corporations_corporation_id_members_titles_200_ok> summary);
    void getCorporationsCorporationIdMembertrackingSignalFull(OAIHttpRequestWorker *worker, QList<OAIGet_corporations_corporation_id_membertracking_200_ok> summary);
    void getCorporationsCorporationIdRolesSignalFull(OAIHttpRequestWorker *worker, QList<OAIGet_corporations_corporation_id_roles_200_ok> summary);
    void getCorporationsCorporationIdRolesHistorySignalFull(OAIHttpRequestWorker *worker, QList<OAIGet_corporations_corporation_id_roles_history_200_ok> summary);
    void getCorporationsCorporationIdShareholdersSignalFull(OAIHttpRequestWorker *worker, QList<OAIGet_corporations_corporation_id_shareholders_200_ok> summary);
    void getCorporationsCorporationIdStandingsSignalFull(OAIHttpRequestWorker *worker, QList<OAIGet_corporations_corporation_id_standings_200_ok> summary);
    void getCorporationsCorporationIdStarbasesSignalFull(OAIHttpRequestWorker *worker, QList<OAIGet_corporations_corporation_id_starbases_200_ok> summary);
    void getCorporationsCorporationIdStarbasesStarbaseIdSignalFull(OAIHttpRequestWorker *worker, OAIGet_corporations_corporation_id_starbases_starbase_id_ok summary);
    void getCorporationsCorporationIdStructuresSignalFull(OAIHttpRequestWorker *worker, QList<OAIGet_corporations_corporation_id_structures_200_ok> summary);
    void getCorporationsCorporationIdTitlesSignalFull(OAIHttpRequestWorker *worker, QList<OAIGet_corporations_corporation_id_titles_200_ok> summary);
    void getCorporationsNpccorpsSignalFull(OAIHttpRequestWorker *worker, QList<qint32> summary);

    Q_DECL_DEPRECATED_X("Use getCorporationsCorporationIdSignalError() instead")
    void getCorporationsCorporationIdSignalE(OAIGet_corporations_corporation_id_ok summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getCorporationsCorporationIdSignalError(OAIGet_corporations_corporation_id_ok summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getCorporationsCorporationIdAlliancehistorySignalError() instead")
    void getCorporationsCorporationIdAlliancehistorySignalE(QList<OAIGet_corporations_corporation_id_alliancehistory_200_ok> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getCorporationsCorporationIdAlliancehistorySignalError(QList<OAIGet_corporations_corporation_id_alliancehistory_200_ok> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getCorporationsCorporationIdBlueprintsSignalError() instead")
    void getCorporationsCorporationIdBlueprintsSignalE(QList<OAIGet_corporations_corporation_id_blueprints_200_ok> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getCorporationsCorporationIdBlueprintsSignalError(QList<OAIGet_corporations_corporation_id_blueprints_200_ok> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getCorporationsCorporationIdContainersLogsSignalError() instead")
    void getCorporationsCorporationIdContainersLogsSignalE(QList<OAIGet_corporations_corporation_id_containers_logs_200_ok> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getCorporationsCorporationIdContainersLogsSignalError(QList<OAIGet_corporations_corporation_id_containers_logs_200_ok> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getCorporationsCorporationIdDivisionsSignalError() instead")
    void getCorporationsCorporationIdDivisionsSignalE(OAIGet_corporations_corporation_id_divisions_ok summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getCorporationsCorporationIdDivisionsSignalError(OAIGet_corporations_corporation_id_divisions_ok summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getCorporationsCorporationIdFacilitiesSignalError() instead")
    void getCorporationsCorporationIdFacilitiesSignalE(QList<OAIGet_corporations_corporation_id_facilities_200_ok> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getCorporationsCorporationIdFacilitiesSignalError(QList<OAIGet_corporations_corporation_id_facilities_200_ok> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getCorporationsCorporationIdIconsSignalError() instead")
    void getCorporationsCorporationIdIconsSignalE(OAIGet_corporations_corporation_id_icons_ok summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getCorporationsCorporationIdIconsSignalError(OAIGet_corporations_corporation_id_icons_ok summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getCorporationsCorporationIdMedalsSignalError() instead")
    void getCorporationsCorporationIdMedalsSignalE(QList<OAIGet_corporations_corporation_id_medals_200_ok> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getCorporationsCorporationIdMedalsSignalError(QList<OAIGet_corporations_corporation_id_medals_200_ok> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getCorporationsCorporationIdMedalsIssuedSignalError() instead")
    void getCorporationsCorporationIdMedalsIssuedSignalE(QList<OAIGet_corporations_corporation_id_medals_issued_200_ok> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getCorporationsCorporationIdMedalsIssuedSignalError(QList<OAIGet_corporations_corporation_id_medals_issued_200_ok> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getCorporationsCorporationIdMembersSignalError() instead")
    void getCorporationsCorporationIdMembersSignalE(QList<qint32> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getCorporationsCorporationIdMembersSignalError(QList<qint32> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getCorporationsCorporationIdMembersLimitSignalError() instead")
    void getCorporationsCorporationIdMembersLimitSignalE(qint32 summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getCorporationsCorporationIdMembersLimitSignalError(qint32 summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getCorporationsCorporationIdMembersTitlesSignalError() instead")
    void getCorporationsCorporationIdMembersTitlesSignalE(QList<OAIGet_corporations_corporation_id_members_titles_200_ok> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getCorporationsCorporationIdMembersTitlesSignalError(QList<OAIGet_corporations_corporation_id_members_titles_200_ok> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getCorporationsCorporationIdMembertrackingSignalError() instead")
    void getCorporationsCorporationIdMembertrackingSignalE(QList<OAIGet_corporations_corporation_id_membertracking_200_ok> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getCorporationsCorporationIdMembertrackingSignalError(QList<OAIGet_corporations_corporation_id_membertracking_200_ok> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getCorporationsCorporationIdRolesSignalError() instead")
    void getCorporationsCorporationIdRolesSignalE(QList<OAIGet_corporations_corporation_id_roles_200_ok> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getCorporationsCorporationIdRolesSignalError(QList<OAIGet_corporations_corporation_id_roles_200_ok> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getCorporationsCorporationIdRolesHistorySignalError() instead")
    void getCorporationsCorporationIdRolesHistorySignalE(QList<OAIGet_corporations_corporation_id_roles_history_200_ok> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getCorporationsCorporationIdRolesHistorySignalError(QList<OAIGet_corporations_corporation_id_roles_history_200_ok> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getCorporationsCorporationIdShareholdersSignalError() instead")
    void getCorporationsCorporationIdShareholdersSignalE(QList<OAIGet_corporations_corporation_id_shareholders_200_ok> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getCorporationsCorporationIdShareholdersSignalError(QList<OAIGet_corporations_corporation_id_shareholders_200_ok> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getCorporationsCorporationIdStandingsSignalError() instead")
    void getCorporationsCorporationIdStandingsSignalE(QList<OAIGet_corporations_corporation_id_standings_200_ok> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getCorporationsCorporationIdStandingsSignalError(QList<OAIGet_corporations_corporation_id_standings_200_ok> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getCorporationsCorporationIdStarbasesSignalError() instead")
    void getCorporationsCorporationIdStarbasesSignalE(QList<OAIGet_corporations_corporation_id_starbases_200_ok> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getCorporationsCorporationIdStarbasesSignalError(QList<OAIGet_corporations_corporation_id_starbases_200_ok> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getCorporationsCorporationIdStarbasesStarbaseIdSignalError() instead")
    void getCorporationsCorporationIdStarbasesStarbaseIdSignalE(OAIGet_corporations_corporation_id_starbases_starbase_id_ok summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getCorporationsCorporationIdStarbasesStarbaseIdSignalError(OAIGet_corporations_corporation_id_starbases_starbase_id_ok summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getCorporationsCorporationIdStructuresSignalError() instead")
    void getCorporationsCorporationIdStructuresSignalE(QList<OAIGet_corporations_corporation_id_structures_200_ok> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getCorporationsCorporationIdStructuresSignalError(QList<OAIGet_corporations_corporation_id_structures_200_ok> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getCorporationsCorporationIdTitlesSignalError() instead")
    void getCorporationsCorporationIdTitlesSignalE(QList<OAIGet_corporations_corporation_id_titles_200_ok> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getCorporationsCorporationIdTitlesSignalError(QList<OAIGet_corporations_corporation_id_titles_200_ok> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getCorporationsNpccorpsSignalError() instead")
    void getCorporationsNpccorpsSignalE(QList<qint32> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getCorporationsNpccorpsSignalError(QList<qint32> summary, QNetworkReply::NetworkError error_type, const QString &error_str);

    Q_DECL_DEPRECATED_X("Use getCorporationsCorporationIdSignalErrorFull() instead")
    void getCorporationsCorporationIdSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getCorporationsCorporationIdSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getCorporationsCorporationIdAlliancehistorySignalErrorFull() instead")
    void getCorporationsCorporationIdAlliancehistorySignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getCorporationsCorporationIdAlliancehistorySignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getCorporationsCorporationIdBlueprintsSignalErrorFull() instead")
    void getCorporationsCorporationIdBlueprintsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getCorporationsCorporationIdBlueprintsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getCorporationsCorporationIdContainersLogsSignalErrorFull() instead")
    void getCorporationsCorporationIdContainersLogsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getCorporationsCorporationIdContainersLogsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getCorporationsCorporationIdDivisionsSignalErrorFull() instead")
    void getCorporationsCorporationIdDivisionsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getCorporationsCorporationIdDivisionsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getCorporationsCorporationIdFacilitiesSignalErrorFull() instead")
    void getCorporationsCorporationIdFacilitiesSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getCorporationsCorporationIdFacilitiesSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getCorporationsCorporationIdIconsSignalErrorFull() instead")
    void getCorporationsCorporationIdIconsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getCorporationsCorporationIdIconsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getCorporationsCorporationIdMedalsSignalErrorFull() instead")
    void getCorporationsCorporationIdMedalsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getCorporationsCorporationIdMedalsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getCorporationsCorporationIdMedalsIssuedSignalErrorFull() instead")
    void getCorporationsCorporationIdMedalsIssuedSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getCorporationsCorporationIdMedalsIssuedSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getCorporationsCorporationIdMembersSignalErrorFull() instead")
    void getCorporationsCorporationIdMembersSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getCorporationsCorporationIdMembersSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getCorporationsCorporationIdMembersLimitSignalErrorFull() instead")
    void getCorporationsCorporationIdMembersLimitSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getCorporationsCorporationIdMembersLimitSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getCorporationsCorporationIdMembersTitlesSignalErrorFull() instead")
    void getCorporationsCorporationIdMembersTitlesSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getCorporationsCorporationIdMembersTitlesSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getCorporationsCorporationIdMembertrackingSignalErrorFull() instead")
    void getCorporationsCorporationIdMembertrackingSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getCorporationsCorporationIdMembertrackingSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getCorporationsCorporationIdRolesSignalErrorFull() instead")
    void getCorporationsCorporationIdRolesSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getCorporationsCorporationIdRolesSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getCorporationsCorporationIdRolesHistorySignalErrorFull() instead")
    void getCorporationsCorporationIdRolesHistorySignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getCorporationsCorporationIdRolesHistorySignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getCorporationsCorporationIdShareholdersSignalErrorFull() instead")
    void getCorporationsCorporationIdShareholdersSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getCorporationsCorporationIdShareholdersSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getCorporationsCorporationIdStandingsSignalErrorFull() instead")
    void getCorporationsCorporationIdStandingsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getCorporationsCorporationIdStandingsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getCorporationsCorporationIdStarbasesSignalErrorFull() instead")
    void getCorporationsCorporationIdStarbasesSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getCorporationsCorporationIdStarbasesSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getCorporationsCorporationIdStarbasesStarbaseIdSignalErrorFull() instead")
    void getCorporationsCorporationIdStarbasesStarbaseIdSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getCorporationsCorporationIdStarbasesStarbaseIdSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getCorporationsCorporationIdStructuresSignalErrorFull() instead")
    void getCorporationsCorporationIdStructuresSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getCorporationsCorporationIdStructuresSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getCorporationsCorporationIdTitlesSignalErrorFull() instead")
    void getCorporationsCorporationIdTitlesSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getCorporationsCorporationIdTitlesSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getCorporationsNpccorpsSignalErrorFull() instead")
    void getCorporationsNpccorpsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getCorporationsNpccorpsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);

    void abortRequestsSignal();
    void allPendingRequestsCompleted();

public Q_SLOTS:
    void tokenAvailable();
};

} // namespace OpenAPI
#endif
