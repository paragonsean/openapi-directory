/**
 * EVE Swagger Interface
 * An OpenAPI for EVE Online
 *
 * The version of the OpenAPI document: 0.8.6
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIGet_characters_character_id_stats_mining.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIGet_characters_character_id_stats_mining::OAIGet_characters_character_id_stats_mining(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIGet_characters_character_id_stats_mining::OAIGet_characters_character_id_stats_mining() {
    this->initializeModel();
}

OAIGet_characters_character_id_stats_mining::~OAIGet_characters_character_id_stats_mining() {}

void OAIGet_characters_character_id_stats_mining::initializeModel() {

    m_drone_mine_isSet = false;
    m_drone_mine_isValid = false;

    m_ore_arkonor_isSet = false;
    m_ore_arkonor_isValid = false;

    m_ore_bistot_isSet = false;
    m_ore_bistot_isValid = false;

    m_ore_crokite_isSet = false;
    m_ore_crokite_isValid = false;

    m_ore_dark_ochre_isSet = false;
    m_ore_dark_ochre_isValid = false;

    m_ore_gneiss_isSet = false;
    m_ore_gneiss_isValid = false;

    m_ore_harvestable_cloud_isSet = false;
    m_ore_harvestable_cloud_isValid = false;

    m_ore_hedbergite_isSet = false;
    m_ore_hedbergite_isValid = false;

    m_ore_hemorphite_isSet = false;
    m_ore_hemorphite_isValid = false;

    m_ore_ice_isSet = false;
    m_ore_ice_isValid = false;

    m_ore_jaspet_isSet = false;
    m_ore_jaspet_isValid = false;

    m_ore_kernite_isSet = false;
    m_ore_kernite_isValid = false;

    m_ore_mercoxit_isSet = false;
    m_ore_mercoxit_isValid = false;

    m_ore_omber_isSet = false;
    m_ore_omber_isValid = false;

    m_ore_plagioclase_isSet = false;
    m_ore_plagioclase_isValid = false;

    m_ore_pyroxeres_isSet = false;
    m_ore_pyroxeres_isValid = false;

    m_ore_scordite_isSet = false;
    m_ore_scordite_isValid = false;

    m_ore_spodumain_isSet = false;
    m_ore_spodumain_isValid = false;

    m_ore_veldspar_isSet = false;
    m_ore_veldspar_isValid = false;
}

void OAIGet_characters_character_id_stats_mining::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIGet_characters_character_id_stats_mining::fromJsonObject(QJsonObject json) {

    m_drone_mine_isValid = ::OpenAPI::fromJsonValue(m_drone_mine, json[QString("drone_mine")]);
    m_drone_mine_isSet = !json[QString("drone_mine")].isNull() && m_drone_mine_isValid;

    m_ore_arkonor_isValid = ::OpenAPI::fromJsonValue(m_ore_arkonor, json[QString("ore_arkonor")]);
    m_ore_arkonor_isSet = !json[QString("ore_arkonor")].isNull() && m_ore_arkonor_isValid;

    m_ore_bistot_isValid = ::OpenAPI::fromJsonValue(m_ore_bistot, json[QString("ore_bistot")]);
    m_ore_bistot_isSet = !json[QString("ore_bistot")].isNull() && m_ore_bistot_isValid;

    m_ore_crokite_isValid = ::OpenAPI::fromJsonValue(m_ore_crokite, json[QString("ore_crokite")]);
    m_ore_crokite_isSet = !json[QString("ore_crokite")].isNull() && m_ore_crokite_isValid;

    m_ore_dark_ochre_isValid = ::OpenAPI::fromJsonValue(m_ore_dark_ochre, json[QString("ore_dark_ochre")]);
    m_ore_dark_ochre_isSet = !json[QString("ore_dark_ochre")].isNull() && m_ore_dark_ochre_isValid;

    m_ore_gneiss_isValid = ::OpenAPI::fromJsonValue(m_ore_gneiss, json[QString("ore_gneiss")]);
    m_ore_gneiss_isSet = !json[QString("ore_gneiss")].isNull() && m_ore_gneiss_isValid;

    m_ore_harvestable_cloud_isValid = ::OpenAPI::fromJsonValue(m_ore_harvestable_cloud, json[QString("ore_harvestable_cloud")]);
    m_ore_harvestable_cloud_isSet = !json[QString("ore_harvestable_cloud")].isNull() && m_ore_harvestable_cloud_isValid;

    m_ore_hedbergite_isValid = ::OpenAPI::fromJsonValue(m_ore_hedbergite, json[QString("ore_hedbergite")]);
    m_ore_hedbergite_isSet = !json[QString("ore_hedbergite")].isNull() && m_ore_hedbergite_isValid;

    m_ore_hemorphite_isValid = ::OpenAPI::fromJsonValue(m_ore_hemorphite, json[QString("ore_hemorphite")]);
    m_ore_hemorphite_isSet = !json[QString("ore_hemorphite")].isNull() && m_ore_hemorphite_isValid;

    m_ore_ice_isValid = ::OpenAPI::fromJsonValue(m_ore_ice, json[QString("ore_ice")]);
    m_ore_ice_isSet = !json[QString("ore_ice")].isNull() && m_ore_ice_isValid;

    m_ore_jaspet_isValid = ::OpenAPI::fromJsonValue(m_ore_jaspet, json[QString("ore_jaspet")]);
    m_ore_jaspet_isSet = !json[QString("ore_jaspet")].isNull() && m_ore_jaspet_isValid;

    m_ore_kernite_isValid = ::OpenAPI::fromJsonValue(m_ore_kernite, json[QString("ore_kernite")]);
    m_ore_kernite_isSet = !json[QString("ore_kernite")].isNull() && m_ore_kernite_isValid;

    m_ore_mercoxit_isValid = ::OpenAPI::fromJsonValue(m_ore_mercoxit, json[QString("ore_mercoxit")]);
    m_ore_mercoxit_isSet = !json[QString("ore_mercoxit")].isNull() && m_ore_mercoxit_isValid;

    m_ore_omber_isValid = ::OpenAPI::fromJsonValue(m_ore_omber, json[QString("ore_omber")]);
    m_ore_omber_isSet = !json[QString("ore_omber")].isNull() && m_ore_omber_isValid;

    m_ore_plagioclase_isValid = ::OpenAPI::fromJsonValue(m_ore_plagioclase, json[QString("ore_plagioclase")]);
    m_ore_plagioclase_isSet = !json[QString("ore_plagioclase")].isNull() && m_ore_plagioclase_isValid;

    m_ore_pyroxeres_isValid = ::OpenAPI::fromJsonValue(m_ore_pyroxeres, json[QString("ore_pyroxeres")]);
    m_ore_pyroxeres_isSet = !json[QString("ore_pyroxeres")].isNull() && m_ore_pyroxeres_isValid;

    m_ore_scordite_isValid = ::OpenAPI::fromJsonValue(m_ore_scordite, json[QString("ore_scordite")]);
    m_ore_scordite_isSet = !json[QString("ore_scordite")].isNull() && m_ore_scordite_isValid;

    m_ore_spodumain_isValid = ::OpenAPI::fromJsonValue(m_ore_spodumain, json[QString("ore_spodumain")]);
    m_ore_spodumain_isSet = !json[QString("ore_spodumain")].isNull() && m_ore_spodumain_isValid;

    m_ore_veldspar_isValid = ::OpenAPI::fromJsonValue(m_ore_veldspar, json[QString("ore_veldspar")]);
    m_ore_veldspar_isSet = !json[QString("ore_veldspar")].isNull() && m_ore_veldspar_isValid;
}

QString OAIGet_characters_character_id_stats_mining::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIGet_characters_character_id_stats_mining::asJsonObject() const {
    QJsonObject obj;
    if (m_drone_mine_isSet) {
        obj.insert(QString("drone_mine"), ::OpenAPI::toJsonValue(m_drone_mine));
    }
    if (m_ore_arkonor_isSet) {
        obj.insert(QString("ore_arkonor"), ::OpenAPI::toJsonValue(m_ore_arkonor));
    }
    if (m_ore_bistot_isSet) {
        obj.insert(QString("ore_bistot"), ::OpenAPI::toJsonValue(m_ore_bistot));
    }
    if (m_ore_crokite_isSet) {
        obj.insert(QString("ore_crokite"), ::OpenAPI::toJsonValue(m_ore_crokite));
    }
    if (m_ore_dark_ochre_isSet) {
        obj.insert(QString("ore_dark_ochre"), ::OpenAPI::toJsonValue(m_ore_dark_ochre));
    }
    if (m_ore_gneiss_isSet) {
        obj.insert(QString("ore_gneiss"), ::OpenAPI::toJsonValue(m_ore_gneiss));
    }
    if (m_ore_harvestable_cloud_isSet) {
        obj.insert(QString("ore_harvestable_cloud"), ::OpenAPI::toJsonValue(m_ore_harvestable_cloud));
    }
    if (m_ore_hedbergite_isSet) {
        obj.insert(QString("ore_hedbergite"), ::OpenAPI::toJsonValue(m_ore_hedbergite));
    }
    if (m_ore_hemorphite_isSet) {
        obj.insert(QString("ore_hemorphite"), ::OpenAPI::toJsonValue(m_ore_hemorphite));
    }
    if (m_ore_ice_isSet) {
        obj.insert(QString("ore_ice"), ::OpenAPI::toJsonValue(m_ore_ice));
    }
    if (m_ore_jaspet_isSet) {
        obj.insert(QString("ore_jaspet"), ::OpenAPI::toJsonValue(m_ore_jaspet));
    }
    if (m_ore_kernite_isSet) {
        obj.insert(QString("ore_kernite"), ::OpenAPI::toJsonValue(m_ore_kernite));
    }
    if (m_ore_mercoxit_isSet) {
        obj.insert(QString("ore_mercoxit"), ::OpenAPI::toJsonValue(m_ore_mercoxit));
    }
    if (m_ore_omber_isSet) {
        obj.insert(QString("ore_omber"), ::OpenAPI::toJsonValue(m_ore_omber));
    }
    if (m_ore_plagioclase_isSet) {
        obj.insert(QString("ore_plagioclase"), ::OpenAPI::toJsonValue(m_ore_plagioclase));
    }
    if (m_ore_pyroxeres_isSet) {
        obj.insert(QString("ore_pyroxeres"), ::OpenAPI::toJsonValue(m_ore_pyroxeres));
    }
    if (m_ore_scordite_isSet) {
        obj.insert(QString("ore_scordite"), ::OpenAPI::toJsonValue(m_ore_scordite));
    }
    if (m_ore_spodumain_isSet) {
        obj.insert(QString("ore_spodumain"), ::OpenAPI::toJsonValue(m_ore_spodumain));
    }
    if (m_ore_veldspar_isSet) {
        obj.insert(QString("ore_veldspar"), ::OpenAPI::toJsonValue(m_ore_veldspar));
    }
    return obj;
}

qint64 OAIGet_characters_character_id_stats_mining::getDroneMine() const {
    return m_drone_mine;
}
void OAIGet_characters_character_id_stats_mining::setDroneMine(const qint64 &drone_mine) {
    m_drone_mine = drone_mine;
    m_drone_mine_isSet = true;
}

bool OAIGet_characters_character_id_stats_mining::is_drone_mine_Set() const{
    return m_drone_mine_isSet;
}

bool OAIGet_characters_character_id_stats_mining::is_drone_mine_Valid() const{
    return m_drone_mine_isValid;
}

qint64 OAIGet_characters_character_id_stats_mining::getOreArkonor() const {
    return m_ore_arkonor;
}
void OAIGet_characters_character_id_stats_mining::setOreArkonor(const qint64 &ore_arkonor) {
    m_ore_arkonor = ore_arkonor;
    m_ore_arkonor_isSet = true;
}

bool OAIGet_characters_character_id_stats_mining::is_ore_arkonor_Set() const{
    return m_ore_arkonor_isSet;
}

bool OAIGet_characters_character_id_stats_mining::is_ore_arkonor_Valid() const{
    return m_ore_arkonor_isValid;
}

qint64 OAIGet_characters_character_id_stats_mining::getOreBistot() const {
    return m_ore_bistot;
}
void OAIGet_characters_character_id_stats_mining::setOreBistot(const qint64 &ore_bistot) {
    m_ore_bistot = ore_bistot;
    m_ore_bistot_isSet = true;
}

bool OAIGet_characters_character_id_stats_mining::is_ore_bistot_Set() const{
    return m_ore_bistot_isSet;
}

bool OAIGet_characters_character_id_stats_mining::is_ore_bistot_Valid() const{
    return m_ore_bistot_isValid;
}

qint64 OAIGet_characters_character_id_stats_mining::getOreCrokite() const {
    return m_ore_crokite;
}
void OAIGet_characters_character_id_stats_mining::setOreCrokite(const qint64 &ore_crokite) {
    m_ore_crokite = ore_crokite;
    m_ore_crokite_isSet = true;
}

bool OAIGet_characters_character_id_stats_mining::is_ore_crokite_Set() const{
    return m_ore_crokite_isSet;
}

bool OAIGet_characters_character_id_stats_mining::is_ore_crokite_Valid() const{
    return m_ore_crokite_isValid;
}

qint64 OAIGet_characters_character_id_stats_mining::getOreDarkOchre() const {
    return m_ore_dark_ochre;
}
void OAIGet_characters_character_id_stats_mining::setOreDarkOchre(const qint64 &ore_dark_ochre) {
    m_ore_dark_ochre = ore_dark_ochre;
    m_ore_dark_ochre_isSet = true;
}

bool OAIGet_characters_character_id_stats_mining::is_ore_dark_ochre_Set() const{
    return m_ore_dark_ochre_isSet;
}

bool OAIGet_characters_character_id_stats_mining::is_ore_dark_ochre_Valid() const{
    return m_ore_dark_ochre_isValid;
}

qint64 OAIGet_characters_character_id_stats_mining::getOreGneiss() const {
    return m_ore_gneiss;
}
void OAIGet_characters_character_id_stats_mining::setOreGneiss(const qint64 &ore_gneiss) {
    m_ore_gneiss = ore_gneiss;
    m_ore_gneiss_isSet = true;
}

bool OAIGet_characters_character_id_stats_mining::is_ore_gneiss_Set() const{
    return m_ore_gneiss_isSet;
}

bool OAIGet_characters_character_id_stats_mining::is_ore_gneiss_Valid() const{
    return m_ore_gneiss_isValid;
}

qint64 OAIGet_characters_character_id_stats_mining::getOreHarvestableCloud() const {
    return m_ore_harvestable_cloud;
}
void OAIGet_characters_character_id_stats_mining::setOreHarvestableCloud(const qint64 &ore_harvestable_cloud) {
    m_ore_harvestable_cloud = ore_harvestable_cloud;
    m_ore_harvestable_cloud_isSet = true;
}

bool OAIGet_characters_character_id_stats_mining::is_ore_harvestable_cloud_Set() const{
    return m_ore_harvestable_cloud_isSet;
}

bool OAIGet_characters_character_id_stats_mining::is_ore_harvestable_cloud_Valid() const{
    return m_ore_harvestable_cloud_isValid;
}

qint64 OAIGet_characters_character_id_stats_mining::getOreHedbergite() const {
    return m_ore_hedbergite;
}
void OAIGet_characters_character_id_stats_mining::setOreHedbergite(const qint64 &ore_hedbergite) {
    m_ore_hedbergite = ore_hedbergite;
    m_ore_hedbergite_isSet = true;
}

bool OAIGet_characters_character_id_stats_mining::is_ore_hedbergite_Set() const{
    return m_ore_hedbergite_isSet;
}

bool OAIGet_characters_character_id_stats_mining::is_ore_hedbergite_Valid() const{
    return m_ore_hedbergite_isValid;
}

qint64 OAIGet_characters_character_id_stats_mining::getOreHemorphite() const {
    return m_ore_hemorphite;
}
void OAIGet_characters_character_id_stats_mining::setOreHemorphite(const qint64 &ore_hemorphite) {
    m_ore_hemorphite = ore_hemorphite;
    m_ore_hemorphite_isSet = true;
}

bool OAIGet_characters_character_id_stats_mining::is_ore_hemorphite_Set() const{
    return m_ore_hemorphite_isSet;
}

bool OAIGet_characters_character_id_stats_mining::is_ore_hemorphite_Valid() const{
    return m_ore_hemorphite_isValid;
}

qint64 OAIGet_characters_character_id_stats_mining::getOreIce() const {
    return m_ore_ice;
}
void OAIGet_characters_character_id_stats_mining::setOreIce(const qint64 &ore_ice) {
    m_ore_ice = ore_ice;
    m_ore_ice_isSet = true;
}

bool OAIGet_characters_character_id_stats_mining::is_ore_ice_Set() const{
    return m_ore_ice_isSet;
}

bool OAIGet_characters_character_id_stats_mining::is_ore_ice_Valid() const{
    return m_ore_ice_isValid;
}

qint64 OAIGet_characters_character_id_stats_mining::getOreJaspet() const {
    return m_ore_jaspet;
}
void OAIGet_characters_character_id_stats_mining::setOreJaspet(const qint64 &ore_jaspet) {
    m_ore_jaspet = ore_jaspet;
    m_ore_jaspet_isSet = true;
}

bool OAIGet_characters_character_id_stats_mining::is_ore_jaspet_Set() const{
    return m_ore_jaspet_isSet;
}

bool OAIGet_characters_character_id_stats_mining::is_ore_jaspet_Valid() const{
    return m_ore_jaspet_isValid;
}

qint64 OAIGet_characters_character_id_stats_mining::getOreKernite() const {
    return m_ore_kernite;
}
void OAIGet_characters_character_id_stats_mining::setOreKernite(const qint64 &ore_kernite) {
    m_ore_kernite = ore_kernite;
    m_ore_kernite_isSet = true;
}

bool OAIGet_characters_character_id_stats_mining::is_ore_kernite_Set() const{
    return m_ore_kernite_isSet;
}

bool OAIGet_characters_character_id_stats_mining::is_ore_kernite_Valid() const{
    return m_ore_kernite_isValid;
}

qint64 OAIGet_characters_character_id_stats_mining::getOreMercoxit() const {
    return m_ore_mercoxit;
}
void OAIGet_characters_character_id_stats_mining::setOreMercoxit(const qint64 &ore_mercoxit) {
    m_ore_mercoxit = ore_mercoxit;
    m_ore_mercoxit_isSet = true;
}

bool OAIGet_characters_character_id_stats_mining::is_ore_mercoxit_Set() const{
    return m_ore_mercoxit_isSet;
}

bool OAIGet_characters_character_id_stats_mining::is_ore_mercoxit_Valid() const{
    return m_ore_mercoxit_isValid;
}

qint64 OAIGet_characters_character_id_stats_mining::getOreOmber() const {
    return m_ore_omber;
}
void OAIGet_characters_character_id_stats_mining::setOreOmber(const qint64 &ore_omber) {
    m_ore_omber = ore_omber;
    m_ore_omber_isSet = true;
}

bool OAIGet_characters_character_id_stats_mining::is_ore_omber_Set() const{
    return m_ore_omber_isSet;
}

bool OAIGet_characters_character_id_stats_mining::is_ore_omber_Valid() const{
    return m_ore_omber_isValid;
}

qint64 OAIGet_characters_character_id_stats_mining::getOrePlagioclase() const {
    return m_ore_plagioclase;
}
void OAIGet_characters_character_id_stats_mining::setOrePlagioclase(const qint64 &ore_plagioclase) {
    m_ore_plagioclase = ore_plagioclase;
    m_ore_plagioclase_isSet = true;
}

bool OAIGet_characters_character_id_stats_mining::is_ore_plagioclase_Set() const{
    return m_ore_plagioclase_isSet;
}

bool OAIGet_characters_character_id_stats_mining::is_ore_plagioclase_Valid() const{
    return m_ore_plagioclase_isValid;
}

qint64 OAIGet_characters_character_id_stats_mining::getOrePyroxeres() const {
    return m_ore_pyroxeres;
}
void OAIGet_characters_character_id_stats_mining::setOrePyroxeres(const qint64 &ore_pyroxeres) {
    m_ore_pyroxeres = ore_pyroxeres;
    m_ore_pyroxeres_isSet = true;
}

bool OAIGet_characters_character_id_stats_mining::is_ore_pyroxeres_Set() const{
    return m_ore_pyroxeres_isSet;
}

bool OAIGet_characters_character_id_stats_mining::is_ore_pyroxeres_Valid() const{
    return m_ore_pyroxeres_isValid;
}

qint64 OAIGet_characters_character_id_stats_mining::getOreScordite() const {
    return m_ore_scordite;
}
void OAIGet_characters_character_id_stats_mining::setOreScordite(const qint64 &ore_scordite) {
    m_ore_scordite = ore_scordite;
    m_ore_scordite_isSet = true;
}

bool OAIGet_characters_character_id_stats_mining::is_ore_scordite_Set() const{
    return m_ore_scordite_isSet;
}

bool OAIGet_characters_character_id_stats_mining::is_ore_scordite_Valid() const{
    return m_ore_scordite_isValid;
}

qint64 OAIGet_characters_character_id_stats_mining::getOreSpodumain() const {
    return m_ore_spodumain;
}
void OAIGet_characters_character_id_stats_mining::setOreSpodumain(const qint64 &ore_spodumain) {
    m_ore_spodumain = ore_spodumain;
    m_ore_spodumain_isSet = true;
}

bool OAIGet_characters_character_id_stats_mining::is_ore_spodumain_Set() const{
    return m_ore_spodumain_isSet;
}

bool OAIGet_characters_character_id_stats_mining::is_ore_spodumain_Valid() const{
    return m_ore_spodumain_isValid;
}

qint64 OAIGet_characters_character_id_stats_mining::getOreVeldspar() const {
    return m_ore_veldspar;
}
void OAIGet_characters_character_id_stats_mining::setOreVeldspar(const qint64 &ore_veldspar) {
    m_ore_veldspar = ore_veldspar;
    m_ore_veldspar_isSet = true;
}

bool OAIGet_characters_character_id_stats_mining::is_ore_veldspar_Set() const{
    return m_ore_veldspar_isSet;
}

bool OAIGet_characters_character_id_stats_mining::is_ore_veldspar_Valid() const{
    return m_ore_veldspar_isValid;
}

bool OAIGet_characters_character_id_stats_mining::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_drone_mine_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_ore_arkonor_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_ore_bistot_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_ore_crokite_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_ore_dark_ochre_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_ore_gneiss_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_ore_harvestable_cloud_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_ore_hedbergite_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_ore_hemorphite_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_ore_ice_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_ore_jaspet_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_ore_kernite_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_ore_mercoxit_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_ore_omber_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_ore_plagioclase_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_ore_pyroxeres_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_ore_scordite_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_ore_spodumain_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_ore_veldspar_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIGet_characters_character_id_stats_mining::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
