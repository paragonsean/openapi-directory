/**
 * EVE Swagger Interface
 * An OpenAPI for EVE Online
 *
 * The version of the OpenAPI document: 0.8.6
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIGet_incursions_200_ok.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIGet_incursions_200_ok::OAIGet_incursions_200_ok(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIGet_incursions_200_ok::OAIGet_incursions_200_ok() {
    this->initializeModel();
}

OAIGet_incursions_200_ok::~OAIGet_incursions_200_ok() {}

void OAIGet_incursions_200_ok::initializeModel() {

    m_constellation_id_isSet = false;
    m_constellation_id_isValid = false;

    m_faction_id_isSet = false;
    m_faction_id_isValid = false;

    m_has_boss_isSet = false;
    m_has_boss_isValid = false;

    m_infested_solar_systems_isSet = false;
    m_infested_solar_systems_isValid = false;

    m_influence_isSet = false;
    m_influence_isValid = false;

    m_staging_solar_system_id_isSet = false;
    m_staging_solar_system_id_isValid = false;

    m_state_isSet = false;
    m_state_isValid = false;

    m_type_isSet = false;
    m_type_isValid = false;
}

void OAIGet_incursions_200_ok::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIGet_incursions_200_ok::fromJsonObject(QJsonObject json) {

    m_constellation_id_isValid = ::OpenAPI::fromJsonValue(m_constellation_id, json[QString("constellation_id")]);
    m_constellation_id_isSet = !json[QString("constellation_id")].isNull() && m_constellation_id_isValid;

    m_faction_id_isValid = ::OpenAPI::fromJsonValue(m_faction_id, json[QString("faction_id")]);
    m_faction_id_isSet = !json[QString("faction_id")].isNull() && m_faction_id_isValid;

    m_has_boss_isValid = ::OpenAPI::fromJsonValue(m_has_boss, json[QString("has_boss")]);
    m_has_boss_isSet = !json[QString("has_boss")].isNull() && m_has_boss_isValid;

    m_infested_solar_systems_isValid = ::OpenAPI::fromJsonValue(m_infested_solar_systems, json[QString("infested_solar_systems")]);
    m_infested_solar_systems_isSet = !json[QString("infested_solar_systems")].isNull() && m_infested_solar_systems_isValid;

    m_influence_isValid = ::OpenAPI::fromJsonValue(m_influence, json[QString("influence")]);
    m_influence_isSet = !json[QString("influence")].isNull() && m_influence_isValid;

    m_staging_solar_system_id_isValid = ::OpenAPI::fromJsonValue(m_staging_solar_system_id, json[QString("staging_solar_system_id")]);
    m_staging_solar_system_id_isSet = !json[QString("staging_solar_system_id")].isNull() && m_staging_solar_system_id_isValid;

    m_state_isValid = ::OpenAPI::fromJsonValue(m_state, json[QString("state")]);
    m_state_isSet = !json[QString("state")].isNull() && m_state_isValid;

    m_type_isValid = ::OpenAPI::fromJsonValue(m_type, json[QString("type")]);
    m_type_isSet = !json[QString("type")].isNull() && m_type_isValid;
}

QString OAIGet_incursions_200_ok::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIGet_incursions_200_ok::asJsonObject() const {
    QJsonObject obj;
    if (m_constellation_id_isSet) {
        obj.insert(QString("constellation_id"), ::OpenAPI::toJsonValue(m_constellation_id));
    }
    if (m_faction_id_isSet) {
        obj.insert(QString("faction_id"), ::OpenAPI::toJsonValue(m_faction_id));
    }
    if (m_has_boss_isSet) {
        obj.insert(QString("has_boss"), ::OpenAPI::toJsonValue(m_has_boss));
    }
    if (m_infested_solar_systems.size() > 0) {
        obj.insert(QString("infested_solar_systems"), ::OpenAPI::toJsonValue(m_infested_solar_systems));
    }
    if (m_influence_isSet) {
        obj.insert(QString("influence"), ::OpenAPI::toJsonValue(m_influence));
    }
    if (m_staging_solar_system_id_isSet) {
        obj.insert(QString("staging_solar_system_id"), ::OpenAPI::toJsonValue(m_staging_solar_system_id));
    }
    if (m_state_isSet) {
        obj.insert(QString("state"), ::OpenAPI::toJsonValue(m_state));
    }
    if (m_type_isSet) {
        obj.insert(QString("type"), ::OpenAPI::toJsonValue(m_type));
    }
    return obj;
}

qint32 OAIGet_incursions_200_ok::getConstellationId() const {
    return m_constellation_id;
}
void OAIGet_incursions_200_ok::setConstellationId(const qint32 &constellation_id) {
    m_constellation_id = constellation_id;
    m_constellation_id_isSet = true;
}

bool OAIGet_incursions_200_ok::is_constellation_id_Set() const{
    return m_constellation_id_isSet;
}

bool OAIGet_incursions_200_ok::is_constellation_id_Valid() const{
    return m_constellation_id_isValid;
}

qint32 OAIGet_incursions_200_ok::getFactionId() const {
    return m_faction_id;
}
void OAIGet_incursions_200_ok::setFactionId(const qint32 &faction_id) {
    m_faction_id = faction_id;
    m_faction_id_isSet = true;
}

bool OAIGet_incursions_200_ok::is_faction_id_Set() const{
    return m_faction_id_isSet;
}

bool OAIGet_incursions_200_ok::is_faction_id_Valid() const{
    return m_faction_id_isValid;
}

bool OAIGet_incursions_200_ok::isHasBoss() const {
    return m_has_boss;
}
void OAIGet_incursions_200_ok::setHasBoss(const bool &has_boss) {
    m_has_boss = has_boss;
    m_has_boss_isSet = true;
}

bool OAIGet_incursions_200_ok::is_has_boss_Set() const{
    return m_has_boss_isSet;
}

bool OAIGet_incursions_200_ok::is_has_boss_Valid() const{
    return m_has_boss_isValid;
}

QList<qint32> OAIGet_incursions_200_ok::getInfestedSolarSystems() const {
    return m_infested_solar_systems;
}
void OAIGet_incursions_200_ok::setInfestedSolarSystems(const QList<qint32> &infested_solar_systems) {
    m_infested_solar_systems = infested_solar_systems;
    m_infested_solar_systems_isSet = true;
}

bool OAIGet_incursions_200_ok::is_infested_solar_systems_Set() const{
    return m_infested_solar_systems_isSet;
}

bool OAIGet_incursions_200_ok::is_infested_solar_systems_Valid() const{
    return m_infested_solar_systems_isValid;
}

float OAIGet_incursions_200_ok::getInfluence() const {
    return m_influence;
}
void OAIGet_incursions_200_ok::setInfluence(const float &influence) {
    m_influence = influence;
    m_influence_isSet = true;
}

bool OAIGet_incursions_200_ok::is_influence_Set() const{
    return m_influence_isSet;
}

bool OAIGet_incursions_200_ok::is_influence_Valid() const{
    return m_influence_isValid;
}

qint32 OAIGet_incursions_200_ok::getStagingSolarSystemId() const {
    return m_staging_solar_system_id;
}
void OAIGet_incursions_200_ok::setStagingSolarSystemId(const qint32 &staging_solar_system_id) {
    m_staging_solar_system_id = staging_solar_system_id;
    m_staging_solar_system_id_isSet = true;
}

bool OAIGet_incursions_200_ok::is_staging_solar_system_id_Set() const{
    return m_staging_solar_system_id_isSet;
}

bool OAIGet_incursions_200_ok::is_staging_solar_system_id_Valid() const{
    return m_staging_solar_system_id_isValid;
}

QString OAIGet_incursions_200_ok::getState() const {
    return m_state;
}
void OAIGet_incursions_200_ok::setState(const QString &state) {
    m_state = state;
    m_state_isSet = true;
}

bool OAIGet_incursions_200_ok::is_state_Set() const{
    return m_state_isSet;
}

bool OAIGet_incursions_200_ok::is_state_Valid() const{
    return m_state_isValid;
}

QString OAIGet_incursions_200_ok::getType() const {
    return m_type;
}
void OAIGet_incursions_200_ok::setType(const QString &type) {
    m_type = type;
    m_type_isSet = true;
}

bool OAIGet_incursions_200_ok::is_type_Set() const{
    return m_type_isSet;
}

bool OAIGet_incursions_200_ok::is_type_Valid() const{
    return m_type_isValid;
}

bool OAIGet_incursions_200_ok::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_constellation_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_faction_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_has_boss_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_infested_solar_systems.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_influence_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_staging_solar_system_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_state_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_type_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIGet_incursions_200_ok::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_constellation_id_isValid && m_faction_id_isValid && m_has_boss_isValid && m_infested_solar_systems_isValid && m_influence_isValid && m_staging_solar_system_id_isValid && m_state_isValid && m_type_isValid && true;
}

} // namespace OpenAPI
