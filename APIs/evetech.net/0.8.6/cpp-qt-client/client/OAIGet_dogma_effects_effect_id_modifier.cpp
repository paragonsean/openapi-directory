/**
 * EVE Swagger Interface
 * An OpenAPI for EVE Online
 *
 * The version of the OpenAPI document: 0.8.6
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIGet_dogma_effects_effect_id_modifier.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIGet_dogma_effects_effect_id_modifier::OAIGet_dogma_effects_effect_id_modifier(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIGet_dogma_effects_effect_id_modifier::OAIGet_dogma_effects_effect_id_modifier() {
    this->initializeModel();
}

OAIGet_dogma_effects_effect_id_modifier::~OAIGet_dogma_effects_effect_id_modifier() {}

void OAIGet_dogma_effects_effect_id_modifier::initializeModel() {

    m_domain_isSet = false;
    m_domain_isValid = false;

    m_effect_id_isSet = false;
    m_effect_id_isValid = false;

    m_func_isSet = false;
    m_func_isValid = false;

    m_modified_attribute_id_isSet = false;
    m_modified_attribute_id_isValid = false;

    m_modifying_attribute_id_isSet = false;
    m_modifying_attribute_id_isValid = false;

    m_r_operator_isSet = false;
    m_r_operator_isValid = false;
}

void OAIGet_dogma_effects_effect_id_modifier::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIGet_dogma_effects_effect_id_modifier::fromJsonObject(QJsonObject json) {

    m_domain_isValid = ::OpenAPI::fromJsonValue(m_domain, json[QString("domain")]);
    m_domain_isSet = !json[QString("domain")].isNull() && m_domain_isValid;

    m_effect_id_isValid = ::OpenAPI::fromJsonValue(m_effect_id, json[QString("effect_id")]);
    m_effect_id_isSet = !json[QString("effect_id")].isNull() && m_effect_id_isValid;

    m_func_isValid = ::OpenAPI::fromJsonValue(m_func, json[QString("func")]);
    m_func_isSet = !json[QString("func")].isNull() && m_func_isValid;

    m_modified_attribute_id_isValid = ::OpenAPI::fromJsonValue(m_modified_attribute_id, json[QString("modified_attribute_id")]);
    m_modified_attribute_id_isSet = !json[QString("modified_attribute_id")].isNull() && m_modified_attribute_id_isValid;

    m_modifying_attribute_id_isValid = ::OpenAPI::fromJsonValue(m_modifying_attribute_id, json[QString("modifying_attribute_id")]);
    m_modifying_attribute_id_isSet = !json[QString("modifying_attribute_id")].isNull() && m_modifying_attribute_id_isValid;

    m_r_operator_isValid = ::OpenAPI::fromJsonValue(m_r_operator, json[QString("operator")]);
    m_r_operator_isSet = !json[QString("operator")].isNull() && m_r_operator_isValid;
}

QString OAIGet_dogma_effects_effect_id_modifier::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIGet_dogma_effects_effect_id_modifier::asJsonObject() const {
    QJsonObject obj;
    if (m_domain_isSet) {
        obj.insert(QString("domain"), ::OpenAPI::toJsonValue(m_domain));
    }
    if (m_effect_id_isSet) {
        obj.insert(QString("effect_id"), ::OpenAPI::toJsonValue(m_effect_id));
    }
    if (m_func_isSet) {
        obj.insert(QString("func"), ::OpenAPI::toJsonValue(m_func));
    }
    if (m_modified_attribute_id_isSet) {
        obj.insert(QString("modified_attribute_id"), ::OpenAPI::toJsonValue(m_modified_attribute_id));
    }
    if (m_modifying_attribute_id_isSet) {
        obj.insert(QString("modifying_attribute_id"), ::OpenAPI::toJsonValue(m_modifying_attribute_id));
    }
    if (m_r_operator_isSet) {
        obj.insert(QString("operator"), ::OpenAPI::toJsonValue(m_r_operator));
    }
    return obj;
}

QString OAIGet_dogma_effects_effect_id_modifier::getDomain() const {
    return m_domain;
}
void OAIGet_dogma_effects_effect_id_modifier::setDomain(const QString &domain) {
    m_domain = domain;
    m_domain_isSet = true;
}

bool OAIGet_dogma_effects_effect_id_modifier::is_domain_Set() const{
    return m_domain_isSet;
}

bool OAIGet_dogma_effects_effect_id_modifier::is_domain_Valid() const{
    return m_domain_isValid;
}

qint32 OAIGet_dogma_effects_effect_id_modifier::getEffectId() const {
    return m_effect_id;
}
void OAIGet_dogma_effects_effect_id_modifier::setEffectId(const qint32 &effect_id) {
    m_effect_id = effect_id;
    m_effect_id_isSet = true;
}

bool OAIGet_dogma_effects_effect_id_modifier::is_effect_id_Set() const{
    return m_effect_id_isSet;
}

bool OAIGet_dogma_effects_effect_id_modifier::is_effect_id_Valid() const{
    return m_effect_id_isValid;
}

QString OAIGet_dogma_effects_effect_id_modifier::getFunc() const {
    return m_func;
}
void OAIGet_dogma_effects_effect_id_modifier::setFunc(const QString &func) {
    m_func = func;
    m_func_isSet = true;
}

bool OAIGet_dogma_effects_effect_id_modifier::is_func_Set() const{
    return m_func_isSet;
}

bool OAIGet_dogma_effects_effect_id_modifier::is_func_Valid() const{
    return m_func_isValid;
}

qint32 OAIGet_dogma_effects_effect_id_modifier::getModifiedAttributeId() const {
    return m_modified_attribute_id;
}
void OAIGet_dogma_effects_effect_id_modifier::setModifiedAttributeId(const qint32 &modified_attribute_id) {
    m_modified_attribute_id = modified_attribute_id;
    m_modified_attribute_id_isSet = true;
}

bool OAIGet_dogma_effects_effect_id_modifier::is_modified_attribute_id_Set() const{
    return m_modified_attribute_id_isSet;
}

bool OAIGet_dogma_effects_effect_id_modifier::is_modified_attribute_id_Valid() const{
    return m_modified_attribute_id_isValid;
}

qint32 OAIGet_dogma_effects_effect_id_modifier::getModifyingAttributeId() const {
    return m_modifying_attribute_id;
}
void OAIGet_dogma_effects_effect_id_modifier::setModifyingAttributeId(const qint32 &modifying_attribute_id) {
    m_modifying_attribute_id = modifying_attribute_id;
    m_modifying_attribute_id_isSet = true;
}

bool OAIGet_dogma_effects_effect_id_modifier::is_modifying_attribute_id_Set() const{
    return m_modifying_attribute_id_isSet;
}

bool OAIGet_dogma_effects_effect_id_modifier::is_modifying_attribute_id_Valid() const{
    return m_modifying_attribute_id_isValid;
}

qint32 OAIGet_dogma_effects_effect_id_modifier::getROperator() const {
    return m_r_operator;
}
void OAIGet_dogma_effects_effect_id_modifier::setROperator(const qint32 &r_operator) {
    m_r_operator = r_operator;
    m_r_operator_isSet = true;
}

bool OAIGet_dogma_effects_effect_id_modifier::is_r_operator_Set() const{
    return m_r_operator_isSet;
}

bool OAIGet_dogma_effects_effect_id_modifier::is_r_operator_Valid() const{
    return m_r_operator_isValid;
}

bool OAIGet_dogma_effects_effect_id_modifier::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_domain_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_effect_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_func_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_modified_attribute_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_modifying_attribute_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_r_operator_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIGet_dogma_effects_effect_id_modifier::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_func_isValid && true;
}

} // namespace OpenAPI
