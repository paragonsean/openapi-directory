/**
 * EVE Swagger Interface
 * An OpenAPI for EVE Online
 *
 * The version of the OpenAPI document: 0.8.6
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAIGet_characters_character_id_stats_mining.h
 *
 * mining object
 */

#ifndef OAIGet_characters_character_id_stats_mining_H
#define OAIGet_characters_character_id_stats_mining_H

#include <QJsonObject>


#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {

class OAIGet_characters_character_id_stats_mining : public OAIObject {
public:
    OAIGet_characters_character_id_stats_mining();
    OAIGet_characters_character_id_stats_mining(QString json);
    ~OAIGet_characters_character_id_stats_mining() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    qint64 getDroneMine() const;
    void setDroneMine(const qint64 &drone_mine);
    bool is_drone_mine_Set() const;
    bool is_drone_mine_Valid() const;

    qint64 getOreArkonor() const;
    void setOreArkonor(const qint64 &ore_arkonor);
    bool is_ore_arkonor_Set() const;
    bool is_ore_arkonor_Valid() const;

    qint64 getOreBistot() const;
    void setOreBistot(const qint64 &ore_bistot);
    bool is_ore_bistot_Set() const;
    bool is_ore_bistot_Valid() const;

    qint64 getOreCrokite() const;
    void setOreCrokite(const qint64 &ore_crokite);
    bool is_ore_crokite_Set() const;
    bool is_ore_crokite_Valid() const;

    qint64 getOreDarkOchre() const;
    void setOreDarkOchre(const qint64 &ore_dark_ochre);
    bool is_ore_dark_ochre_Set() const;
    bool is_ore_dark_ochre_Valid() const;

    qint64 getOreGneiss() const;
    void setOreGneiss(const qint64 &ore_gneiss);
    bool is_ore_gneiss_Set() const;
    bool is_ore_gneiss_Valid() const;

    qint64 getOreHarvestableCloud() const;
    void setOreHarvestableCloud(const qint64 &ore_harvestable_cloud);
    bool is_ore_harvestable_cloud_Set() const;
    bool is_ore_harvestable_cloud_Valid() const;

    qint64 getOreHedbergite() const;
    void setOreHedbergite(const qint64 &ore_hedbergite);
    bool is_ore_hedbergite_Set() const;
    bool is_ore_hedbergite_Valid() const;

    qint64 getOreHemorphite() const;
    void setOreHemorphite(const qint64 &ore_hemorphite);
    bool is_ore_hemorphite_Set() const;
    bool is_ore_hemorphite_Valid() const;

    qint64 getOreIce() const;
    void setOreIce(const qint64 &ore_ice);
    bool is_ore_ice_Set() const;
    bool is_ore_ice_Valid() const;

    qint64 getOreJaspet() const;
    void setOreJaspet(const qint64 &ore_jaspet);
    bool is_ore_jaspet_Set() const;
    bool is_ore_jaspet_Valid() const;

    qint64 getOreKernite() const;
    void setOreKernite(const qint64 &ore_kernite);
    bool is_ore_kernite_Set() const;
    bool is_ore_kernite_Valid() const;

    qint64 getOreMercoxit() const;
    void setOreMercoxit(const qint64 &ore_mercoxit);
    bool is_ore_mercoxit_Set() const;
    bool is_ore_mercoxit_Valid() const;

    qint64 getOreOmber() const;
    void setOreOmber(const qint64 &ore_omber);
    bool is_ore_omber_Set() const;
    bool is_ore_omber_Valid() const;

    qint64 getOrePlagioclase() const;
    void setOrePlagioclase(const qint64 &ore_plagioclase);
    bool is_ore_plagioclase_Set() const;
    bool is_ore_plagioclase_Valid() const;

    qint64 getOrePyroxeres() const;
    void setOrePyroxeres(const qint64 &ore_pyroxeres);
    bool is_ore_pyroxeres_Set() const;
    bool is_ore_pyroxeres_Valid() const;

    qint64 getOreScordite() const;
    void setOreScordite(const qint64 &ore_scordite);
    bool is_ore_scordite_Set() const;
    bool is_ore_scordite_Valid() const;

    qint64 getOreSpodumain() const;
    void setOreSpodumain(const qint64 &ore_spodumain);
    bool is_ore_spodumain_Set() const;
    bool is_ore_spodumain_Valid() const;

    qint64 getOreVeldspar() const;
    void setOreVeldspar(const qint64 &ore_veldspar);
    bool is_ore_veldspar_Set() const;
    bool is_ore_veldspar_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    qint64 m_drone_mine;
    bool m_drone_mine_isSet;
    bool m_drone_mine_isValid;

    qint64 m_ore_arkonor;
    bool m_ore_arkonor_isSet;
    bool m_ore_arkonor_isValid;

    qint64 m_ore_bistot;
    bool m_ore_bistot_isSet;
    bool m_ore_bistot_isValid;

    qint64 m_ore_crokite;
    bool m_ore_crokite_isSet;
    bool m_ore_crokite_isValid;

    qint64 m_ore_dark_ochre;
    bool m_ore_dark_ochre_isSet;
    bool m_ore_dark_ochre_isValid;

    qint64 m_ore_gneiss;
    bool m_ore_gneiss_isSet;
    bool m_ore_gneiss_isValid;

    qint64 m_ore_harvestable_cloud;
    bool m_ore_harvestable_cloud_isSet;
    bool m_ore_harvestable_cloud_isValid;

    qint64 m_ore_hedbergite;
    bool m_ore_hedbergite_isSet;
    bool m_ore_hedbergite_isValid;

    qint64 m_ore_hemorphite;
    bool m_ore_hemorphite_isSet;
    bool m_ore_hemorphite_isValid;

    qint64 m_ore_ice;
    bool m_ore_ice_isSet;
    bool m_ore_ice_isValid;

    qint64 m_ore_jaspet;
    bool m_ore_jaspet_isSet;
    bool m_ore_jaspet_isValid;

    qint64 m_ore_kernite;
    bool m_ore_kernite_isSet;
    bool m_ore_kernite_isValid;

    qint64 m_ore_mercoxit;
    bool m_ore_mercoxit_isSet;
    bool m_ore_mercoxit_isValid;

    qint64 m_ore_omber;
    bool m_ore_omber_isSet;
    bool m_ore_omber_isValid;

    qint64 m_ore_plagioclase;
    bool m_ore_plagioclase_isSet;
    bool m_ore_plagioclase_isValid;

    qint64 m_ore_pyroxeres;
    bool m_ore_pyroxeres_isSet;
    bool m_ore_pyroxeres_isValid;

    qint64 m_ore_scordite;
    bool m_ore_scordite_isSet;
    bool m_ore_scordite_isValid;

    qint64 m_ore_spodumain;
    bool m_ore_spodumain_isSet;
    bool m_ore_spodumain_isValid;

    qint64 m_ore_veldspar;
    bool m_ore_veldspar_isSet;
    bool m_ore_veldspar_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAIGet_characters_character_id_stats_mining)

#endif // OAIGet_characters_character_id_stats_mining_H
