/**
 * EVE Swagger Interface
 * An OpenAPI for EVE Online
 *
 * The version of the OpenAPI document: 0.8.6
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIGet_sovereignty_structures_200_ok.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIGet_sovereignty_structures_200_ok::OAIGet_sovereignty_structures_200_ok(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIGet_sovereignty_structures_200_ok::OAIGet_sovereignty_structures_200_ok() {
    this->initializeModel();
}

OAIGet_sovereignty_structures_200_ok::~OAIGet_sovereignty_structures_200_ok() {}

void OAIGet_sovereignty_structures_200_ok::initializeModel() {

    m_alliance_id_isSet = false;
    m_alliance_id_isValid = false;

    m_solar_system_id_isSet = false;
    m_solar_system_id_isValid = false;

    m_structure_id_isSet = false;
    m_structure_id_isValid = false;

    m_structure_type_id_isSet = false;
    m_structure_type_id_isValid = false;

    m_vulnerability_occupancy_level_isSet = false;
    m_vulnerability_occupancy_level_isValid = false;

    m_vulnerable_end_time_isSet = false;
    m_vulnerable_end_time_isValid = false;

    m_vulnerable_start_time_isSet = false;
    m_vulnerable_start_time_isValid = false;
}

void OAIGet_sovereignty_structures_200_ok::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIGet_sovereignty_structures_200_ok::fromJsonObject(QJsonObject json) {

    m_alliance_id_isValid = ::OpenAPI::fromJsonValue(m_alliance_id, json[QString("alliance_id")]);
    m_alliance_id_isSet = !json[QString("alliance_id")].isNull() && m_alliance_id_isValid;

    m_solar_system_id_isValid = ::OpenAPI::fromJsonValue(m_solar_system_id, json[QString("solar_system_id")]);
    m_solar_system_id_isSet = !json[QString("solar_system_id")].isNull() && m_solar_system_id_isValid;

    m_structure_id_isValid = ::OpenAPI::fromJsonValue(m_structure_id, json[QString("structure_id")]);
    m_structure_id_isSet = !json[QString("structure_id")].isNull() && m_structure_id_isValid;

    m_structure_type_id_isValid = ::OpenAPI::fromJsonValue(m_structure_type_id, json[QString("structure_type_id")]);
    m_structure_type_id_isSet = !json[QString("structure_type_id")].isNull() && m_structure_type_id_isValid;

    m_vulnerability_occupancy_level_isValid = ::OpenAPI::fromJsonValue(m_vulnerability_occupancy_level, json[QString("vulnerability_occupancy_level")]);
    m_vulnerability_occupancy_level_isSet = !json[QString("vulnerability_occupancy_level")].isNull() && m_vulnerability_occupancy_level_isValid;

    m_vulnerable_end_time_isValid = ::OpenAPI::fromJsonValue(m_vulnerable_end_time, json[QString("vulnerable_end_time")]);
    m_vulnerable_end_time_isSet = !json[QString("vulnerable_end_time")].isNull() && m_vulnerable_end_time_isValid;

    m_vulnerable_start_time_isValid = ::OpenAPI::fromJsonValue(m_vulnerable_start_time, json[QString("vulnerable_start_time")]);
    m_vulnerable_start_time_isSet = !json[QString("vulnerable_start_time")].isNull() && m_vulnerable_start_time_isValid;
}

QString OAIGet_sovereignty_structures_200_ok::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIGet_sovereignty_structures_200_ok::asJsonObject() const {
    QJsonObject obj;
    if (m_alliance_id_isSet) {
        obj.insert(QString("alliance_id"), ::OpenAPI::toJsonValue(m_alliance_id));
    }
    if (m_solar_system_id_isSet) {
        obj.insert(QString("solar_system_id"), ::OpenAPI::toJsonValue(m_solar_system_id));
    }
    if (m_structure_id_isSet) {
        obj.insert(QString("structure_id"), ::OpenAPI::toJsonValue(m_structure_id));
    }
    if (m_structure_type_id_isSet) {
        obj.insert(QString("structure_type_id"), ::OpenAPI::toJsonValue(m_structure_type_id));
    }
    if (m_vulnerability_occupancy_level_isSet) {
        obj.insert(QString("vulnerability_occupancy_level"), ::OpenAPI::toJsonValue(m_vulnerability_occupancy_level));
    }
    if (m_vulnerable_end_time_isSet) {
        obj.insert(QString("vulnerable_end_time"), ::OpenAPI::toJsonValue(m_vulnerable_end_time));
    }
    if (m_vulnerable_start_time_isSet) {
        obj.insert(QString("vulnerable_start_time"), ::OpenAPI::toJsonValue(m_vulnerable_start_time));
    }
    return obj;
}

qint32 OAIGet_sovereignty_structures_200_ok::getAllianceId() const {
    return m_alliance_id;
}
void OAIGet_sovereignty_structures_200_ok::setAllianceId(const qint32 &alliance_id) {
    m_alliance_id = alliance_id;
    m_alliance_id_isSet = true;
}

bool OAIGet_sovereignty_structures_200_ok::is_alliance_id_Set() const{
    return m_alliance_id_isSet;
}

bool OAIGet_sovereignty_structures_200_ok::is_alliance_id_Valid() const{
    return m_alliance_id_isValid;
}

qint32 OAIGet_sovereignty_structures_200_ok::getSolarSystemId() const {
    return m_solar_system_id;
}
void OAIGet_sovereignty_structures_200_ok::setSolarSystemId(const qint32 &solar_system_id) {
    m_solar_system_id = solar_system_id;
    m_solar_system_id_isSet = true;
}

bool OAIGet_sovereignty_structures_200_ok::is_solar_system_id_Set() const{
    return m_solar_system_id_isSet;
}

bool OAIGet_sovereignty_structures_200_ok::is_solar_system_id_Valid() const{
    return m_solar_system_id_isValid;
}

qint64 OAIGet_sovereignty_structures_200_ok::getStructureId() const {
    return m_structure_id;
}
void OAIGet_sovereignty_structures_200_ok::setStructureId(const qint64 &structure_id) {
    m_structure_id = structure_id;
    m_structure_id_isSet = true;
}

bool OAIGet_sovereignty_structures_200_ok::is_structure_id_Set() const{
    return m_structure_id_isSet;
}

bool OAIGet_sovereignty_structures_200_ok::is_structure_id_Valid() const{
    return m_structure_id_isValid;
}

qint32 OAIGet_sovereignty_structures_200_ok::getStructureTypeId() const {
    return m_structure_type_id;
}
void OAIGet_sovereignty_structures_200_ok::setStructureTypeId(const qint32 &structure_type_id) {
    m_structure_type_id = structure_type_id;
    m_structure_type_id_isSet = true;
}

bool OAIGet_sovereignty_structures_200_ok::is_structure_type_id_Set() const{
    return m_structure_type_id_isSet;
}

bool OAIGet_sovereignty_structures_200_ok::is_structure_type_id_Valid() const{
    return m_structure_type_id_isValid;
}

float OAIGet_sovereignty_structures_200_ok::getVulnerabilityOccupancyLevel() const {
    return m_vulnerability_occupancy_level;
}
void OAIGet_sovereignty_structures_200_ok::setVulnerabilityOccupancyLevel(const float &vulnerability_occupancy_level) {
    m_vulnerability_occupancy_level = vulnerability_occupancy_level;
    m_vulnerability_occupancy_level_isSet = true;
}

bool OAIGet_sovereignty_structures_200_ok::is_vulnerability_occupancy_level_Set() const{
    return m_vulnerability_occupancy_level_isSet;
}

bool OAIGet_sovereignty_structures_200_ok::is_vulnerability_occupancy_level_Valid() const{
    return m_vulnerability_occupancy_level_isValid;
}

QDateTime OAIGet_sovereignty_structures_200_ok::getVulnerableEndTime() const {
    return m_vulnerable_end_time;
}
void OAIGet_sovereignty_structures_200_ok::setVulnerableEndTime(const QDateTime &vulnerable_end_time) {
    m_vulnerable_end_time = vulnerable_end_time;
    m_vulnerable_end_time_isSet = true;
}

bool OAIGet_sovereignty_structures_200_ok::is_vulnerable_end_time_Set() const{
    return m_vulnerable_end_time_isSet;
}

bool OAIGet_sovereignty_structures_200_ok::is_vulnerable_end_time_Valid() const{
    return m_vulnerable_end_time_isValid;
}

QDateTime OAIGet_sovereignty_structures_200_ok::getVulnerableStartTime() const {
    return m_vulnerable_start_time;
}
void OAIGet_sovereignty_structures_200_ok::setVulnerableStartTime(const QDateTime &vulnerable_start_time) {
    m_vulnerable_start_time = vulnerable_start_time;
    m_vulnerable_start_time_isSet = true;
}

bool OAIGet_sovereignty_structures_200_ok::is_vulnerable_start_time_Set() const{
    return m_vulnerable_start_time_isSet;
}

bool OAIGet_sovereignty_structures_200_ok::is_vulnerable_start_time_Valid() const{
    return m_vulnerable_start_time_isValid;
}

bool OAIGet_sovereignty_structures_200_ok::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_alliance_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_solar_system_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_structure_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_structure_type_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_vulnerability_occupancy_level_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_vulnerable_end_time_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_vulnerable_start_time_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIGet_sovereignty_structures_200_ok::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_alliance_id_isValid && m_solar_system_id_isValid && m_structure_id_isValid && m_structure_type_id_isValid && true;
}

} // namespace OpenAPI
