/**
 * EVE Swagger Interface
 * An OpenAPI for EVE Online
 *
 * The version of the OpenAPI document: 0.8.6
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIGet_characters_character_id_stats_module.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIGet_characters_character_id_stats_module::OAIGet_characters_character_id_stats_module(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIGet_characters_character_id_stats_module::OAIGet_characters_character_id_stats_module() {
    this->initializeModel();
}

OAIGet_characters_character_id_stats_module::~OAIGet_characters_character_id_stats_module() {}

void OAIGet_characters_character_id_stats_module::initializeModel() {

    m_activations_armor_hardener_isSet = false;
    m_activations_armor_hardener_isValid = false;

    m_activations_armor_repair_unit_isSet = false;
    m_activations_armor_repair_unit_isValid = false;

    m_activations_armor_resistance_shift_hardener_isSet = false;
    m_activations_armor_resistance_shift_hardener_isValid = false;

    m_activations_automated_targeting_system_isSet = false;
    m_activations_automated_targeting_system_isValid = false;

    m_activations_bastion_isSet = false;
    m_activations_bastion_isValid = false;

    m_activations_bomb_launcher_isSet = false;
    m_activations_bomb_launcher_isValid = false;

    m_activations_capacitor_booster_isSet = false;
    m_activations_capacitor_booster_isValid = false;

    m_activations_cargo_scanner_isSet = false;
    m_activations_cargo_scanner_isValid = false;

    m_activations_cloaking_device_isSet = false;
    m_activations_cloaking_device_isValid = false;

    m_activations_clone_vat_bay_isSet = false;
    m_activations_clone_vat_bay_isValid = false;

    m_activations_cynosural_field_isSet = false;
    m_activations_cynosural_field_isValid = false;

    m_activations_damage_control_isSet = false;
    m_activations_damage_control_isValid = false;

    m_activations_data_miners_isSet = false;
    m_activations_data_miners_isValid = false;

    m_activations_drone_control_unit_isSet = false;
    m_activations_drone_control_unit_isValid = false;

    m_activations_drone_tracking_modules_isSet = false;
    m_activations_drone_tracking_modules_isValid = false;

    m_activations_eccm_isSet = false;
    m_activations_eccm_isValid = false;

    m_activations_ecm_isSet = false;
    m_activations_ecm_isValid = false;

    m_activations_ecm_burst_isSet = false;
    m_activations_ecm_burst_isValid = false;

    m_activations_energy_destabilizer_isSet = false;
    m_activations_energy_destabilizer_isValid = false;

    m_activations_energy_vampire_isSet = false;
    m_activations_energy_vampire_isValid = false;

    m_activations_energy_weapon_isSet = false;
    m_activations_energy_weapon_isValid = false;

    m_activations_festival_launcher_isSet = false;
    m_activations_festival_launcher_isValid = false;

    m_activations_frequency_mining_laser_isSet = false;
    m_activations_frequency_mining_laser_isValid = false;

    m_activations_fueled_armor_repairer_isSet = false;
    m_activations_fueled_armor_repairer_isValid = false;

    m_activations_fueled_shield_booster_isSet = false;
    m_activations_fueled_shield_booster_isValid = false;

    m_activations_gang_coordinator_isSet = false;
    m_activations_gang_coordinator_isValid = false;

    m_activations_gas_cloud_harvester_isSet = false;
    m_activations_gas_cloud_harvester_isValid = false;

    m_activations_hull_repair_unit_isSet = false;
    m_activations_hull_repair_unit_isValid = false;

    m_activations_hybrid_weapon_isSet = false;
    m_activations_hybrid_weapon_isValid = false;

    m_activations_industrial_core_isSet = false;
    m_activations_industrial_core_isValid = false;

    m_activations_interdiction_sphere_launcher_isSet = false;
    m_activations_interdiction_sphere_launcher_isValid = false;

    m_activations_micro_jump_drive_isSet = false;
    m_activations_micro_jump_drive_isValid = false;

    m_activations_mining_laser_isSet = false;
    m_activations_mining_laser_isValid = false;

    m_activations_missile_launcher_isSet = false;
    m_activations_missile_launcher_isValid = false;

    m_activations_passive_targeting_system_isSet = false;
    m_activations_passive_targeting_system_isValid = false;

    m_activations_probe_launcher_isSet = false;
    m_activations_probe_launcher_isValid = false;

    m_activations_projected_eccm_isSet = false;
    m_activations_projected_eccm_isValid = false;

    m_activations_projectile_weapon_isSet = false;
    m_activations_projectile_weapon_isValid = false;

    m_activations_propulsion_module_isSet = false;
    m_activations_propulsion_module_isValid = false;

    m_activations_remote_armor_repairer_isSet = false;
    m_activations_remote_armor_repairer_isValid = false;

    m_activations_remote_capacitor_transmitter_isSet = false;
    m_activations_remote_capacitor_transmitter_isValid = false;

    m_activations_remote_ecm_burst_isSet = false;
    m_activations_remote_ecm_burst_isValid = false;

    m_activations_remote_hull_repairer_isSet = false;
    m_activations_remote_hull_repairer_isValid = false;

    m_activations_remote_sensor_booster_isSet = false;
    m_activations_remote_sensor_booster_isValid = false;

    m_activations_remote_sensor_damper_isSet = false;
    m_activations_remote_sensor_damper_isValid = false;

    m_activations_remote_shield_booster_isSet = false;
    m_activations_remote_shield_booster_isValid = false;

    m_activations_remote_tracking_computer_isSet = false;
    m_activations_remote_tracking_computer_isValid = false;

    m_activations_salvager_isSet = false;
    m_activations_salvager_isValid = false;

    m_activations_sensor_booster_isSet = false;
    m_activations_sensor_booster_isValid = false;

    m_activations_shield_booster_isSet = false;
    m_activations_shield_booster_isValid = false;

    m_activations_shield_hardener_isSet = false;
    m_activations_shield_hardener_isValid = false;

    m_activations_ship_scanner_isSet = false;
    m_activations_ship_scanner_isValid = false;

    m_activations_siege_isSet = false;
    m_activations_siege_isValid = false;

    m_activations_smart_bomb_isSet = false;
    m_activations_smart_bomb_isValid = false;

    m_activations_stasis_web_isSet = false;
    m_activations_stasis_web_isValid = false;

    m_activations_strip_miner_isSet = false;
    m_activations_strip_miner_isValid = false;

    m_activations_super_weapon_isSet = false;
    m_activations_super_weapon_isValid = false;

    m_activations_survey_scanner_isSet = false;
    m_activations_survey_scanner_isValid = false;

    m_activations_target_breaker_isSet = false;
    m_activations_target_breaker_isValid = false;

    m_activations_target_painter_isSet = false;
    m_activations_target_painter_isValid = false;

    m_activations_tracking_computer_isSet = false;
    m_activations_tracking_computer_isValid = false;

    m_activations_tracking_disruptor_isSet = false;
    m_activations_tracking_disruptor_isValid = false;

    m_activations_tractor_beam_isSet = false;
    m_activations_tractor_beam_isValid = false;

    m_activations_triage_isSet = false;
    m_activations_triage_isValid = false;

    m_activations_warp_disrupt_field_generator_isSet = false;
    m_activations_warp_disrupt_field_generator_isValid = false;

    m_activations_warp_scrambler_isSet = false;
    m_activations_warp_scrambler_isValid = false;

    m_link_weapons_isSet = false;
    m_link_weapons_isValid = false;

    m_overload_isSet = false;
    m_overload_isValid = false;

    m_repairs_isSet = false;
    m_repairs_isValid = false;
}

void OAIGet_characters_character_id_stats_module::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIGet_characters_character_id_stats_module::fromJsonObject(QJsonObject json) {

    m_activations_armor_hardener_isValid = ::OpenAPI::fromJsonValue(m_activations_armor_hardener, json[QString("activations_armor_hardener")]);
    m_activations_armor_hardener_isSet = !json[QString("activations_armor_hardener")].isNull() && m_activations_armor_hardener_isValid;

    m_activations_armor_repair_unit_isValid = ::OpenAPI::fromJsonValue(m_activations_armor_repair_unit, json[QString("activations_armor_repair_unit")]);
    m_activations_armor_repair_unit_isSet = !json[QString("activations_armor_repair_unit")].isNull() && m_activations_armor_repair_unit_isValid;

    m_activations_armor_resistance_shift_hardener_isValid = ::OpenAPI::fromJsonValue(m_activations_armor_resistance_shift_hardener, json[QString("activations_armor_resistance_shift_hardener")]);
    m_activations_armor_resistance_shift_hardener_isSet = !json[QString("activations_armor_resistance_shift_hardener")].isNull() && m_activations_armor_resistance_shift_hardener_isValid;

    m_activations_automated_targeting_system_isValid = ::OpenAPI::fromJsonValue(m_activations_automated_targeting_system, json[QString("activations_automated_targeting_system")]);
    m_activations_automated_targeting_system_isSet = !json[QString("activations_automated_targeting_system")].isNull() && m_activations_automated_targeting_system_isValid;

    m_activations_bastion_isValid = ::OpenAPI::fromJsonValue(m_activations_bastion, json[QString("activations_bastion")]);
    m_activations_bastion_isSet = !json[QString("activations_bastion")].isNull() && m_activations_bastion_isValid;

    m_activations_bomb_launcher_isValid = ::OpenAPI::fromJsonValue(m_activations_bomb_launcher, json[QString("activations_bomb_launcher")]);
    m_activations_bomb_launcher_isSet = !json[QString("activations_bomb_launcher")].isNull() && m_activations_bomb_launcher_isValid;

    m_activations_capacitor_booster_isValid = ::OpenAPI::fromJsonValue(m_activations_capacitor_booster, json[QString("activations_capacitor_booster")]);
    m_activations_capacitor_booster_isSet = !json[QString("activations_capacitor_booster")].isNull() && m_activations_capacitor_booster_isValid;

    m_activations_cargo_scanner_isValid = ::OpenAPI::fromJsonValue(m_activations_cargo_scanner, json[QString("activations_cargo_scanner")]);
    m_activations_cargo_scanner_isSet = !json[QString("activations_cargo_scanner")].isNull() && m_activations_cargo_scanner_isValid;

    m_activations_cloaking_device_isValid = ::OpenAPI::fromJsonValue(m_activations_cloaking_device, json[QString("activations_cloaking_device")]);
    m_activations_cloaking_device_isSet = !json[QString("activations_cloaking_device")].isNull() && m_activations_cloaking_device_isValid;

    m_activations_clone_vat_bay_isValid = ::OpenAPI::fromJsonValue(m_activations_clone_vat_bay, json[QString("activations_clone_vat_bay")]);
    m_activations_clone_vat_bay_isSet = !json[QString("activations_clone_vat_bay")].isNull() && m_activations_clone_vat_bay_isValid;

    m_activations_cynosural_field_isValid = ::OpenAPI::fromJsonValue(m_activations_cynosural_field, json[QString("activations_cynosural_field")]);
    m_activations_cynosural_field_isSet = !json[QString("activations_cynosural_field")].isNull() && m_activations_cynosural_field_isValid;

    m_activations_damage_control_isValid = ::OpenAPI::fromJsonValue(m_activations_damage_control, json[QString("activations_damage_control")]);
    m_activations_damage_control_isSet = !json[QString("activations_damage_control")].isNull() && m_activations_damage_control_isValid;

    m_activations_data_miners_isValid = ::OpenAPI::fromJsonValue(m_activations_data_miners, json[QString("activations_data_miners")]);
    m_activations_data_miners_isSet = !json[QString("activations_data_miners")].isNull() && m_activations_data_miners_isValid;

    m_activations_drone_control_unit_isValid = ::OpenAPI::fromJsonValue(m_activations_drone_control_unit, json[QString("activations_drone_control_unit")]);
    m_activations_drone_control_unit_isSet = !json[QString("activations_drone_control_unit")].isNull() && m_activations_drone_control_unit_isValid;

    m_activations_drone_tracking_modules_isValid = ::OpenAPI::fromJsonValue(m_activations_drone_tracking_modules, json[QString("activations_drone_tracking_modules")]);
    m_activations_drone_tracking_modules_isSet = !json[QString("activations_drone_tracking_modules")].isNull() && m_activations_drone_tracking_modules_isValid;

    m_activations_eccm_isValid = ::OpenAPI::fromJsonValue(m_activations_eccm, json[QString("activations_eccm")]);
    m_activations_eccm_isSet = !json[QString("activations_eccm")].isNull() && m_activations_eccm_isValid;

    m_activations_ecm_isValid = ::OpenAPI::fromJsonValue(m_activations_ecm, json[QString("activations_ecm")]);
    m_activations_ecm_isSet = !json[QString("activations_ecm")].isNull() && m_activations_ecm_isValid;

    m_activations_ecm_burst_isValid = ::OpenAPI::fromJsonValue(m_activations_ecm_burst, json[QString("activations_ecm_burst")]);
    m_activations_ecm_burst_isSet = !json[QString("activations_ecm_burst")].isNull() && m_activations_ecm_burst_isValid;

    m_activations_energy_destabilizer_isValid = ::OpenAPI::fromJsonValue(m_activations_energy_destabilizer, json[QString("activations_energy_destabilizer")]);
    m_activations_energy_destabilizer_isSet = !json[QString("activations_energy_destabilizer")].isNull() && m_activations_energy_destabilizer_isValid;

    m_activations_energy_vampire_isValid = ::OpenAPI::fromJsonValue(m_activations_energy_vampire, json[QString("activations_energy_vampire")]);
    m_activations_energy_vampire_isSet = !json[QString("activations_energy_vampire")].isNull() && m_activations_energy_vampire_isValid;

    m_activations_energy_weapon_isValid = ::OpenAPI::fromJsonValue(m_activations_energy_weapon, json[QString("activations_energy_weapon")]);
    m_activations_energy_weapon_isSet = !json[QString("activations_energy_weapon")].isNull() && m_activations_energy_weapon_isValid;

    m_activations_festival_launcher_isValid = ::OpenAPI::fromJsonValue(m_activations_festival_launcher, json[QString("activations_festival_launcher")]);
    m_activations_festival_launcher_isSet = !json[QString("activations_festival_launcher")].isNull() && m_activations_festival_launcher_isValid;

    m_activations_frequency_mining_laser_isValid = ::OpenAPI::fromJsonValue(m_activations_frequency_mining_laser, json[QString("activations_frequency_mining_laser")]);
    m_activations_frequency_mining_laser_isSet = !json[QString("activations_frequency_mining_laser")].isNull() && m_activations_frequency_mining_laser_isValid;

    m_activations_fueled_armor_repairer_isValid = ::OpenAPI::fromJsonValue(m_activations_fueled_armor_repairer, json[QString("activations_fueled_armor_repairer")]);
    m_activations_fueled_armor_repairer_isSet = !json[QString("activations_fueled_armor_repairer")].isNull() && m_activations_fueled_armor_repairer_isValid;

    m_activations_fueled_shield_booster_isValid = ::OpenAPI::fromJsonValue(m_activations_fueled_shield_booster, json[QString("activations_fueled_shield_booster")]);
    m_activations_fueled_shield_booster_isSet = !json[QString("activations_fueled_shield_booster")].isNull() && m_activations_fueled_shield_booster_isValid;

    m_activations_gang_coordinator_isValid = ::OpenAPI::fromJsonValue(m_activations_gang_coordinator, json[QString("activations_gang_coordinator")]);
    m_activations_gang_coordinator_isSet = !json[QString("activations_gang_coordinator")].isNull() && m_activations_gang_coordinator_isValid;

    m_activations_gas_cloud_harvester_isValid = ::OpenAPI::fromJsonValue(m_activations_gas_cloud_harvester, json[QString("activations_gas_cloud_harvester")]);
    m_activations_gas_cloud_harvester_isSet = !json[QString("activations_gas_cloud_harvester")].isNull() && m_activations_gas_cloud_harvester_isValid;

    m_activations_hull_repair_unit_isValid = ::OpenAPI::fromJsonValue(m_activations_hull_repair_unit, json[QString("activations_hull_repair_unit")]);
    m_activations_hull_repair_unit_isSet = !json[QString("activations_hull_repair_unit")].isNull() && m_activations_hull_repair_unit_isValid;

    m_activations_hybrid_weapon_isValid = ::OpenAPI::fromJsonValue(m_activations_hybrid_weapon, json[QString("activations_hybrid_weapon")]);
    m_activations_hybrid_weapon_isSet = !json[QString("activations_hybrid_weapon")].isNull() && m_activations_hybrid_weapon_isValid;

    m_activations_industrial_core_isValid = ::OpenAPI::fromJsonValue(m_activations_industrial_core, json[QString("activations_industrial_core")]);
    m_activations_industrial_core_isSet = !json[QString("activations_industrial_core")].isNull() && m_activations_industrial_core_isValid;

    m_activations_interdiction_sphere_launcher_isValid = ::OpenAPI::fromJsonValue(m_activations_interdiction_sphere_launcher, json[QString("activations_interdiction_sphere_launcher")]);
    m_activations_interdiction_sphere_launcher_isSet = !json[QString("activations_interdiction_sphere_launcher")].isNull() && m_activations_interdiction_sphere_launcher_isValid;

    m_activations_micro_jump_drive_isValid = ::OpenAPI::fromJsonValue(m_activations_micro_jump_drive, json[QString("activations_micro_jump_drive")]);
    m_activations_micro_jump_drive_isSet = !json[QString("activations_micro_jump_drive")].isNull() && m_activations_micro_jump_drive_isValid;

    m_activations_mining_laser_isValid = ::OpenAPI::fromJsonValue(m_activations_mining_laser, json[QString("activations_mining_laser")]);
    m_activations_mining_laser_isSet = !json[QString("activations_mining_laser")].isNull() && m_activations_mining_laser_isValid;

    m_activations_missile_launcher_isValid = ::OpenAPI::fromJsonValue(m_activations_missile_launcher, json[QString("activations_missile_launcher")]);
    m_activations_missile_launcher_isSet = !json[QString("activations_missile_launcher")].isNull() && m_activations_missile_launcher_isValid;

    m_activations_passive_targeting_system_isValid = ::OpenAPI::fromJsonValue(m_activations_passive_targeting_system, json[QString("activations_passive_targeting_system")]);
    m_activations_passive_targeting_system_isSet = !json[QString("activations_passive_targeting_system")].isNull() && m_activations_passive_targeting_system_isValid;

    m_activations_probe_launcher_isValid = ::OpenAPI::fromJsonValue(m_activations_probe_launcher, json[QString("activations_probe_launcher")]);
    m_activations_probe_launcher_isSet = !json[QString("activations_probe_launcher")].isNull() && m_activations_probe_launcher_isValid;

    m_activations_projected_eccm_isValid = ::OpenAPI::fromJsonValue(m_activations_projected_eccm, json[QString("activations_projected_eccm")]);
    m_activations_projected_eccm_isSet = !json[QString("activations_projected_eccm")].isNull() && m_activations_projected_eccm_isValid;

    m_activations_projectile_weapon_isValid = ::OpenAPI::fromJsonValue(m_activations_projectile_weapon, json[QString("activations_projectile_weapon")]);
    m_activations_projectile_weapon_isSet = !json[QString("activations_projectile_weapon")].isNull() && m_activations_projectile_weapon_isValid;

    m_activations_propulsion_module_isValid = ::OpenAPI::fromJsonValue(m_activations_propulsion_module, json[QString("activations_propulsion_module")]);
    m_activations_propulsion_module_isSet = !json[QString("activations_propulsion_module")].isNull() && m_activations_propulsion_module_isValid;

    m_activations_remote_armor_repairer_isValid = ::OpenAPI::fromJsonValue(m_activations_remote_armor_repairer, json[QString("activations_remote_armor_repairer")]);
    m_activations_remote_armor_repairer_isSet = !json[QString("activations_remote_armor_repairer")].isNull() && m_activations_remote_armor_repairer_isValid;

    m_activations_remote_capacitor_transmitter_isValid = ::OpenAPI::fromJsonValue(m_activations_remote_capacitor_transmitter, json[QString("activations_remote_capacitor_transmitter")]);
    m_activations_remote_capacitor_transmitter_isSet = !json[QString("activations_remote_capacitor_transmitter")].isNull() && m_activations_remote_capacitor_transmitter_isValid;

    m_activations_remote_ecm_burst_isValid = ::OpenAPI::fromJsonValue(m_activations_remote_ecm_burst, json[QString("activations_remote_ecm_burst")]);
    m_activations_remote_ecm_burst_isSet = !json[QString("activations_remote_ecm_burst")].isNull() && m_activations_remote_ecm_burst_isValid;

    m_activations_remote_hull_repairer_isValid = ::OpenAPI::fromJsonValue(m_activations_remote_hull_repairer, json[QString("activations_remote_hull_repairer")]);
    m_activations_remote_hull_repairer_isSet = !json[QString("activations_remote_hull_repairer")].isNull() && m_activations_remote_hull_repairer_isValid;

    m_activations_remote_sensor_booster_isValid = ::OpenAPI::fromJsonValue(m_activations_remote_sensor_booster, json[QString("activations_remote_sensor_booster")]);
    m_activations_remote_sensor_booster_isSet = !json[QString("activations_remote_sensor_booster")].isNull() && m_activations_remote_sensor_booster_isValid;

    m_activations_remote_sensor_damper_isValid = ::OpenAPI::fromJsonValue(m_activations_remote_sensor_damper, json[QString("activations_remote_sensor_damper")]);
    m_activations_remote_sensor_damper_isSet = !json[QString("activations_remote_sensor_damper")].isNull() && m_activations_remote_sensor_damper_isValid;

    m_activations_remote_shield_booster_isValid = ::OpenAPI::fromJsonValue(m_activations_remote_shield_booster, json[QString("activations_remote_shield_booster")]);
    m_activations_remote_shield_booster_isSet = !json[QString("activations_remote_shield_booster")].isNull() && m_activations_remote_shield_booster_isValid;

    m_activations_remote_tracking_computer_isValid = ::OpenAPI::fromJsonValue(m_activations_remote_tracking_computer, json[QString("activations_remote_tracking_computer")]);
    m_activations_remote_tracking_computer_isSet = !json[QString("activations_remote_tracking_computer")].isNull() && m_activations_remote_tracking_computer_isValid;

    m_activations_salvager_isValid = ::OpenAPI::fromJsonValue(m_activations_salvager, json[QString("activations_salvager")]);
    m_activations_salvager_isSet = !json[QString("activations_salvager")].isNull() && m_activations_salvager_isValid;

    m_activations_sensor_booster_isValid = ::OpenAPI::fromJsonValue(m_activations_sensor_booster, json[QString("activations_sensor_booster")]);
    m_activations_sensor_booster_isSet = !json[QString("activations_sensor_booster")].isNull() && m_activations_sensor_booster_isValid;

    m_activations_shield_booster_isValid = ::OpenAPI::fromJsonValue(m_activations_shield_booster, json[QString("activations_shield_booster")]);
    m_activations_shield_booster_isSet = !json[QString("activations_shield_booster")].isNull() && m_activations_shield_booster_isValid;

    m_activations_shield_hardener_isValid = ::OpenAPI::fromJsonValue(m_activations_shield_hardener, json[QString("activations_shield_hardener")]);
    m_activations_shield_hardener_isSet = !json[QString("activations_shield_hardener")].isNull() && m_activations_shield_hardener_isValid;

    m_activations_ship_scanner_isValid = ::OpenAPI::fromJsonValue(m_activations_ship_scanner, json[QString("activations_ship_scanner")]);
    m_activations_ship_scanner_isSet = !json[QString("activations_ship_scanner")].isNull() && m_activations_ship_scanner_isValid;

    m_activations_siege_isValid = ::OpenAPI::fromJsonValue(m_activations_siege, json[QString("activations_siege")]);
    m_activations_siege_isSet = !json[QString("activations_siege")].isNull() && m_activations_siege_isValid;

    m_activations_smart_bomb_isValid = ::OpenAPI::fromJsonValue(m_activations_smart_bomb, json[QString("activations_smart_bomb")]);
    m_activations_smart_bomb_isSet = !json[QString("activations_smart_bomb")].isNull() && m_activations_smart_bomb_isValid;

    m_activations_stasis_web_isValid = ::OpenAPI::fromJsonValue(m_activations_stasis_web, json[QString("activations_stasis_web")]);
    m_activations_stasis_web_isSet = !json[QString("activations_stasis_web")].isNull() && m_activations_stasis_web_isValid;

    m_activations_strip_miner_isValid = ::OpenAPI::fromJsonValue(m_activations_strip_miner, json[QString("activations_strip_miner")]);
    m_activations_strip_miner_isSet = !json[QString("activations_strip_miner")].isNull() && m_activations_strip_miner_isValid;

    m_activations_super_weapon_isValid = ::OpenAPI::fromJsonValue(m_activations_super_weapon, json[QString("activations_super_weapon")]);
    m_activations_super_weapon_isSet = !json[QString("activations_super_weapon")].isNull() && m_activations_super_weapon_isValid;

    m_activations_survey_scanner_isValid = ::OpenAPI::fromJsonValue(m_activations_survey_scanner, json[QString("activations_survey_scanner")]);
    m_activations_survey_scanner_isSet = !json[QString("activations_survey_scanner")].isNull() && m_activations_survey_scanner_isValid;

    m_activations_target_breaker_isValid = ::OpenAPI::fromJsonValue(m_activations_target_breaker, json[QString("activations_target_breaker")]);
    m_activations_target_breaker_isSet = !json[QString("activations_target_breaker")].isNull() && m_activations_target_breaker_isValid;

    m_activations_target_painter_isValid = ::OpenAPI::fromJsonValue(m_activations_target_painter, json[QString("activations_target_painter")]);
    m_activations_target_painter_isSet = !json[QString("activations_target_painter")].isNull() && m_activations_target_painter_isValid;

    m_activations_tracking_computer_isValid = ::OpenAPI::fromJsonValue(m_activations_tracking_computer, json[QString("activations_tracking_computer")]);
    m_activations_tracking_computer_isSet = !json[QString("activations_tracking_computer")].isNull() && m_activations_tracking_computer_isValid;

    m_activations_tracking_disruptor_isValid = ::OpenAPI::fromJsonValue(m_activations_tracking_disruptor, json[QString("activations_tracking_disruptor")]);
    m_activations_tracking_disruptor_isSet = !json[QString("activations_tracking_disruptor")].isNull() && m_activations_tracking_disruptor_isValid;

    m_activations_tractor_beam_isValid = ::OpenAPI::fromJsonValue(m_activations_tractor_beam, json[QString("activations_tractor_beam")]);
    m_activations_tractor_beam_isSet = !json[QString("activations_tractor_beam")].isNull() && m_activations_tractor_beam_isValid;

    m_activations_triage_isValid = ::OpenAPI::fromJsonValue(m_activations_triage, json[QString("activations_triage")]);
    m_activations_triage_isSet = !json[QString("activations_triage")].isNull() && m_activations_triage_isValid;

    m_activations_warp_disrupt_field_generator_isValid = ::OpenAPI::fromJsonValue(m_activations_warp_disrupt_field_generator, json[QString("activations_warp_disrupt_field_generator")]);
    m_activations_warp_disrupt_field_generator_isSet = !json[QString("activations_warp_disrupt_field_generator")].isNull() && m_activations_warp_disrupt_field_generator_isValid;

    m_activations_warp_scrambler_isValid = ::OpenAPI::fromJsonValue(m_activations_warp_scrambler, json[QString("activations_warp_scrambler")]);
    m_activations_warp_scrambler_isSet = !json[QString("activations_warp_scrambler")].isNull() && m_activations_warp_scrambler_isValid;

    m_link_weapons_isValid = ::OpenAPI::fromJsonValue(m_link_weapons, json[QString("link_weapons")]);
    m_link_weapons_isSet = !json[QString("link_weapons")].isNull() && m_link_weapons_isValid;

    m_overload_isValid = ::OpenAPI::fromJsonValue(m_overload, json[QString("overload")]);
    m_overload_isSet = !json[QString("overload")].isNull() && m_overload_isValid;

    m_repairs_isValid = ::OpenAPI::fromJsonValue(m_repairs, json[QString("repairs")]);
    m_repairs_isSet = !json[QString("repairs")].isNull() && m_repairs_isValid;
}

QString OAIGet_characters_character_id_stats_module::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIGet_characters_character_id_stats_module::asJsonObject() const {
    QJsonObject obj;
    if (m_activations_armor_hardener_isSet) {
        obj.insert(QString("activations_armor_hardener"), ::OpenAPI::toJsonValue(m_activations_armor_hardener));
    }
    if (m_activations_armor_repair_unit_isSet) {
        obj.insert(QString("activations_armor_repair_unit"), ::OpenAPI::toJsonValue(m_activations_armor_repair_unit));
    }
    if (m_activations_armor_resistance_shift_hardener_isSet) {
        obj.insert(QString("activations_armor_resistance_shift_hardener"), ::OpenAPI::toJsonValue(m_activations_armor_resistance_shift_hardener));
    }
    if (m_activations_automated_targeting_system_isSet) {
        obj.insert(QString("activations_automated_targeting_system"), ::OpenAPI::toJsonValue(m_activations_automated_targeting_system));
    }
    if (m_activations_bastion_isSet) {
        obj.insert(QString("activations_bastion"), ::OpenAPI::toJsonValue(m_activations_bastion));
    }
    if (m_activations_bomb_launcher_isSet) {
        obj.insert(QString("activations_bomb_launcher"), ::OpenAPI::toJsonValue(m_activations_bomb_launcher));
    }
    if (m_activations_capacitor_booster_isSet) {
        obj.insert(QString("activations_capacitor_booster"), ::OpenAPI::toJsonValue(m_activations_capacitor_booster));
    }
    if (m_activations_cargo_scanner_isSet) {
        obj.insert(QString("activations_cargo_scanner"), ::OpenAPI::toJsonValue(m_activations_cargo_scanner));
    }
    if (m_activations_cloaking_device_isSet) {
        obj.insert(QString("activations_cloaking_device"), ::OpenAPI::toJsonValue(m_activations_cloaking_device));
    }
    if (m_activations_clone_vat_bay_isSet) {
        obj.insert(QString("activations_clone_vat_bay"), ::OpenAPI::toJsonValue(m_activations_clone_vat_bay));
    }
    if (m_activations_cynosural_field_isSet) {
        obj.insert(QString("activations_cynosural_field"), ::OpenAPI::toJsonValue(m_activations_cynosural_field));
    }
    if (m_activations_damage_control_isSet) {
        obj.insert(QString("activations_damage_control"), ::OpenAPI::toJsonValue(m_activations_damage_control));
    }
    if (m_activations_data_miners_isSet) {
        obj.insert(QString("activations_data_miners"), ::OpenAPI::toJsonValue(m_activations_data_miners));
    }
    if (m_activations_drone_control_unit_isSet) {
        obj.insert(QString("activations_drone_control_unit"), ::OpenAPI::toJsonValue(m_activations_drone_control_unit));
    }
    if (m_activations_drone_tracking_modules_isSet) {
        obj.insert(QString("activations_drone_tracking_modules"), ::OpenAPI::toJsonValue(m_activations_drone_tracking_modules));
    }
    if (m_activations_eccm_isSet) {
        obj.insert(QString("activations_eccm"), ::OpenAPI::toJsonValue(m_activations_eccm));
    }
    if (m_activations_ecm_isSet) {
        obj.insert(QString("activations_ecm"), ::OpenAPI::toJsonValue(m_activations_ecm));
    }
    if (m_activations_ecm_burst_isSet) {
        obj.insert(QString("activations_ecm_burst"), ::OpenAPI::toJsonValue(m_activations_ecm_burst));
    }
    if (m_activations_energy_destabilizer_isSet) {
        obj.insert(QString("activations_energy_destabilizer"), ::OpenAPI::toJsonValue(m_activations_energy_destabilizer));
    }
    if (m_activations_energy_vampire_isSet) {
        obj.insert(QString("activations_energy_vampire"), ::OpenAPI::toJsonValue(m_activations_energy_vampire));
    }
    if (m_activations_energy_weapon_isSet) {
        obj.insert(QString("activations_energy_weapon"), ::OpenAPI::toJsonValue(m_activations_energy_weapon));
    }
    if (m_activations_festival_launcher_isSet) {
        obj.insert(QString("activations_festival_launcher"), ::OpenAPI::toJsonValue(m_activations_festival_launcher));
    }
    if (m_activations_frequency_mining_laser_isSet) {
        obj.insert(QString("activations_frequency_mining_laser"), ::OpenAPI::toJsonValue(m_activations_frequency_mining_laser));
    }
    if (m_activations_fueled_armor_repairer_isSet) {
        obj.insert(QString("activations_fueled_armor_repairer"), ::OpenAPI::toJsonValue(m_activations_fueled_armor_repairer));
    }
    if (m_activations_fueled_shield_booster_isSet) {
        obj.insert(QString("activations_fueled_shield_booster"), ::OpenAPI::toJsonValue(m_activations_fueled_shield_booster));
    }
    if (m_activations_gang_coordinator_isSet) {
        obj.insert(QString("activations_gang_coordinator"), ::OpenAPI::toJsonValue(m_activations_gang_coordinator));
    }
    if (m_activations_gas_cloud_harvester_isSet) {
        obj.insert(QString("activations_gas_cloud_harvester"), ::OpenAPI::toJsonValue(m_activations_gas_cloud_harvester));
    }
    if (m_activations_hull_repair_unit_isSet) {
        obj.insert(QString("activations_hull_repair_unit"), ::OpenAPI::toJsonValue(m_activations_hull_repair_unit));
    }
    if (m_activations_hybrid_weapon_isSet) {
        obj.insert(QString("activations_hybrid_weapon"), ::OpenAPI::toJsonValue(m_activations_hybrid_weapon));
    }
    if (m_activations_industrial_core_isSet) {
        obj.insert(QString("activations_industrial_core"), ::OpenAPI::toJsonValue(m_activations_industrial_core));
    }
    if (m_activations_interdiction_sphere_launcher_isSet) {
        obj.insert(QString("activations_interdiction_sphere_launcher"), ::OpenAPI::toJsonValue(m_activations_interdiction_sphere_launcher));
    }
    if (m_activations_micro_jump_drive_isSet) {
        obj.insert(QString("activations_micro_jump_drive"), ::OpenAPI::toJsonValue(m_activations_micro_jump_drive));
    }
    if (m_activations_mining_laser_isSet) {
        obj.insert(QString("activations_mining_laser"), ::OpenAPI::toJsonValue(m_activations_mining_laser));
    }
    if (m_activations_missile_launcher_isSet) {
        obj.insert(QString("activations_missile_launcher"), ::OpenAPI::toJsonValue(m_activations_missile_launcher));
    }
    if (m_activations_passive_targeting_system_isSet) {
        obj.insert(QString("activations_passive_targeting_system"), ::OpenAPI::toJsonValue(m_activations_passive_targeting_system));
    }
    if (m_activations_probe_launcher_isSet) {
        obj.insert(QString("activations_probe_launcher"), ::OpenAPI::toJsonValue(m_activations_probe_launcher));
    }
    if (m_activations_projected_eccm_isSet) {
        obj.insert(QString("activations_projected_eccm"), ::OpenAPI::toJsonValue(m_activations_projected_eccm));
    }
    if (m_activations_projectile_weapon_isSet) {
        obj.insert(QString("activations_projectile_weapon"), ::OpenAPI::toJsonValue(m_activations_projectile_weapon));
    }
    if (m_activations_propulsion_module_isSet) {
        obj.insert(QString("activations_propulsion_module"), ::OpenAPI::toJsonValue(m_activations_propulsion_module));
    }
    if (m_activations_remote_armor_repairer_isSet) {
        obj.insert(QString("activations_remote_armor_repairer"), ::OpenAPI::toJsonValue(m_activations_remote_armor_repairer));
    }
    if (m_activations_remote_capacitor_transmitter_isSet) {
        obj.insert(QString("activations_remote_capacitor_transmitter"), ::OpenAPI::toJsonValue(m_activations_remote_capacitor_transmitter));
    }
    if (m_activations_remote_ecm_burst_isSet) {
        obj.insert(QString("activations_remote_ecm_burst"), ::OpenAPI::toJsonValue(m_activations_remote_ecm_burst));
    }
    if (m_activations_remote_hull_repairer_isSet) {
        obj.insert(QString("activations_remote_hull_repairer"), ::OpenAPI::toJsonValue(m_activations_remote_hull_repairer));
    }
    if (m_activations_remote_sensor_booster_isSet) {
        obj.insert(QString("activations_remote_sensor_booster"), ::OpenAPI::toJsonValue(m_activations_remote_sensor_booster));
    }
    if (m_activations_remote_sensor_damper_isSet) {
        obj.insert(QString("activations_remote_sensor_damper"), ::OpenAPI::toJsonValue(m_activations_remote_sensor_damper));
    }
    if (m_activations_remote_shield_booster_isSet) {
        obj.insert(QString("activations_remote_shield_booster"), ::OpenAPI::toJsonValue(m_activations_remote_shield_booster));
    }
    if (m_activations_remote_tracking_computer_isSet) {
        obj.insert(QString("activations_remote_tracking_computer"), ::OpenAPI::toJsonValue(m_activations_remote_tracking_computer));
    }
    if (m_activations_salvager_isSet) {
        obj.insert(QString("activations_salvager"), ::OpenAPI::toJsonValue(m_activations_salvager));
    }
    if (m_activations_sensor_booster_isSet) {
        obj.insert(QString("activations_sensor_booster"), ::OpenAPI::toJsonValue(m_activations_sensor_booster));
    }
    if (m_activations_shield_booster_isSet) {
        obj.insert(QString("activations_shield_booster"), ::OpenAPI::toJsonValue(m_activations_shield_booster));
    }
    if (m_activations_shield_hardener_isSet) {
        obj.insert(QString("activations_shield_hardener"), ::OpenAPI::toJsonValue(m_activations_shield_hardener));
    }
    if (m_activations_ship_scanner_isSet) {
        obj.insert(QString("activations_ship_scanner"), ::OpenAPI::toJsonValue(m_activations_ship_scanner));
    }
    if (m_activations_siege_isSet) {
        obj.insert(QString("activations_siege"), ::OpenAPI::toJsonValue(m_activations_siege));
    }
    if (m_activations_smart_bomb_isSet) {
        obj.insert(QString("activations_smart_bomb"), ::OpenAPI::toJsonValue(m_activations_smart_bomb));
    }
    if (m_activations_stasis_web_isSet) {
        obj.insert(QString("activations_stasis_web"), ::OpenAPI::toJsonValue(m_activations_stasis_web));
    }
    if (m_activations_strip_miner_isSet) {
        obj.insert(QString("activations_strip_miner"), ::OpenAPI::toJsonValue(m_activations_strip_miner));
    }
    if (m_activations_super_weapon_isSet) {
        obj.insert(QString("activations_super_weapon"), ::OpenAPI::toJsonValue(m_activations_super_weapon));
    }
    if (m_activations_survey_scanner_isSet) {
        obj.insert(QString("activations_survey_scanner"), ::OpenAPI::toJsonValue(m_activations_survey_scanner));
    }
    if (m_activations_target_breaker_isSet) {
        obj.insert(QString("activations_target_breaker"), ::OpenAPI::toJsonValue(m_activations_target_breaker));
    }
    if (m_activations_target_painter_isSet) {
        obj.insert(QString("activations_target_painter"), ::OpenAPI::toJsonValue(m_activations_target_painter));
    }
    if (m_activations_tracking_computer_isSet) {
        obj.insert(QString("activations_tracking_computer"), ::OpenAPI::toJsonValue(m_activations_tracking_computer));
    }
    if (m_activations_tracking_disruptor_isSet) {
        obj.insert(QString("activations_tracking_disruptor"), ::OpenAPI::toJsonValue(m_activations_tracking_disruptor));
    }
    if (m_activations_tractor_beam_isSet) {
        obj.insert(QString("activations_tractor_beam"), ::OpenAPI::toJsonValue(m_activations_tractor_beam));
    }
    if (m_activations_triage_isSet) {
        obj.insert(QString("activations_triage"), ::OpenAPI::toJsonValue(m_activations_triage));
    }
    if (m_activations_warp_disrupt_field_generator_isSet) {
        obj.insert(QString("activations_warp_disrupt_field_generator"), ::OpenAPI::toJsonValue(m_activations_warp_disrupt_field_generator));
    }
    if (m_activations_warp_scrambler_isSet) {
        obj.insert(QString("activations_warp_scrambler"), ::OpenAPI::toJsonValue(m_activations_warp_scrambler));
    }
    if (m_link_weapons_isSet) {
        obj.insert(QString("link_weapons"), ::OpenAPI::toJsonValue(m_link_weapons));
    }
    if (m_overload_isSet) {
        obj.insert(QString("overload"), ::OpenAPI::toJsonValue(m_overload));
    }
    if (m_repairs_isSet) {
        obj.insert(QString("repairs"), ::OpenAPI::toJsonValue(m_repairs));
    }
    return obj;
}

qint64 OAIGet_characters_character_id_stats_module::getActivationsArmorHardener() const {
    return m_activations_armor_hardener;
}
void OAIGet_characters_character_id_stats_module::setActivationsArmorHardener(const qint64 &activations_armor_hardener) {
    m_activations_armor_hardener = activations_armor_hardener;
    m_activations_armor_hardener_isSet = true;
}

bool OAIGet_characters_character_id_stats_module::is_activations_armor_hardener_Set() const{
    return m_activations_armor_hardener_isSet;
}

bool OAIGet_characters_character_id_stats_module::is_activations_armor_hardener_Valid() const{
    return m_activations_armor_hardener_isValid;
}

qint64 OAIGet_characters_character_id_stats_module::getActivationsArmorRepairUnit() const {
    return m_activations_armor_repair_unit;
}
void OAIGet_characters_character_id_stats_module::setActivationsArmorRepairUnit(const qint64 &activations_armor_repair_unit) {
    m_activations_armor_repair_unit = activations_armor_repair_unit;
    m_activations_armor_repair_unit_isSet = true;
}

bool OAIGet_characters_character_id_stats_module::is_activations_armor_repair_unit_Set() const{
    return m_activations_armor_repair_unit_isSet;
}

bool OAIGet_characters_character_id_stats_module::is_activations_armor_repair_unit_Valid() const{
    return m_activations_armor_repair_unit_isValid;
}

qint64 OAIGet_characters_character_id_stats_module::getActivationsArmorResistanceShiftHardener() const {
    return m_activations_armor_resistance_shift_hardener;
}
void OAIGet_characters_character_id_stats_module::setActivationsArmorResistanceShiftHardener(const qint64 &activations_armor_resistance_shift_hardener) {
    m_activations_armor_resistance_shift_hardener = activations_armor_resistance_shift_hardener;
    m_activations_armor_resistance_shift_hardener_isSet = true;
}

bool OAIGet_characters_character_id_stats_module::is_activations_armor_resistance_shift_hardener_Set() const{
    return m_activations_armor_resistance_shift_hardener_isSet;
}

bool OAIGet_characters_character_id_stats_module::is_activations_armor_resistance_shift_hardener_Valid() const{
    return m_activations_armor_resistance_shift_hardener_isValid;
}

qint64 OAIGet_characters_character_id_stats_module::getActivationsAutomatedTargetingSystem() const {
    return m_activations_automated_targeting_system;
}
void OAIGet_characters_character_id_stats_module::setActivationsAutomatedTargetingSystem(const qint64 &activations_automated_targeting_system) {
    m_activations_automated_targeting_system = activations_automated_targeting_system;
    m_activations_automated_targeting_system_isSet = true;
}

bool OAIGet_characters_character_id_stats_module::is_activations_automated_targeting_system_Set() const{
    return m_activations_automated_targeting_system_isSet;
}

bool OAIGet_characters_character_id_stats_module::is_activations_automated_targeting_system_Valid() const{
    return m_activations_automated_targeting_system_isValid;
}

qint64 OAIGet_characters_character_id_stats_module::getActivationsBastion() const {
    return m_activations_bastion;
}
void OAIGet_characters_character_id_stats_module::setActivationsBastion(const qint64 &activations_bastion) {
    m_activations_bastion = activations_bastion;
    m_activations_bastion_isSet = true;
}

bool OAIGet_characters_character_id_stats_module::is_activations_bastion_Set() const{
    return m_activations_bastion_isSet;
}

bool OAIGet_characters_character_id_stats_module::is_activations_bastion_Valid() const{
    return m_activations_bastion_isValid;
}

qint64 OAIGet_characters_character_id_stats_module::getActivationsBombLauncher() const {
    return m_activations_bomb_launcher;
}
void OAIGet_characters_character_id_stats_module::setActivationsBombLauncher(const qint64 &activations_bomb_launcher) {
    m_activations_bomb_launcher = activations_bomb_launcher;
    m_activations_bomb_launcher_isSet = true;
}

bool OAIGet_characters_character_id_stats_module::is_activations_bomb_launcher_Set() const{
    return m_activations_bomb_launcher_isSet;
}

bool OAIGet_characters_character_id_stats_module::is_activations_bomb_launcher_Valid() const{
    return m_activations_bomb_launcher_isValid;
}

qint64 OAIGet_characters_character_id_stats_module::getActivationsCapacitorBooster() const {
    return m_activations_capacitor_booster;
}
void OAIGet_characters_character_id_stats_module::setActivationsCapacitorBooster(const qint64 &activations_capacitor_booster) {
    m_activations_capacitor_booster = activations_capacitor_booster;
    m_activations_capacitor_booster_isSet = true;
}

bool OAIGet_characters_character_id_stats_module::is_activations_capacitor_booster_Set() const{
    return m_activations_capacitor_booster_isSet;
}

bool OAIGet_characters_character_id_stats_module::is_activations_capacitor_booster_Valid() const{
    return m_activations_capacitor_booster_isValid;
}

qint64 OAIGet_characters_character_id_stats_module::getActivationsCargoScanner() const {
    return m_activations_cargo_scanner;
}
void OAIGet_characters_character_id_stats_module::setActivationsCargoScanner(const qint64 &activations_cargo_scanner) {
    m_activations_cargo_scanner = activations_cargo_scanner;
    m_activations_cargo_scanner_isSet = true;
}

bool OAIGet_characters_character_id_stats_module::is_activations_cargo_scanner_Set() const{
    return m_activations_cargo_scanner_isSet;
}

bool OAIGet_characters_character_id_stats_module::is_activations_cargo_scanner_Valid() const{
    return m_activations_cargo_scanner_isValid;
}

qint64 OAIGet_characters_character_id_stats_module::getActivationsCloakingDevice() const {
    return m_activations_cloaking_device;
}
void OAIGet_characters_character_id_stats_module::setActivationsCloakingDevice(const qint64 &activations_cloaking_device) {
    m_activations_cloaking_device = activations_cloaking_device;
    m_activations_cloaking_device_isSet = true;
}

bool OAIGet_characters_character_id_stats_module::is_activations_cloaking_device_Set() const{
    return m_activations_cloaking_device_isSet;
}

bool OAIGet_characters_character_id_stats_module::is_activations_cloaking_device_Valid() const{
    return m_activations_cloaking_device_isValid;
}

qint64 OAIGet_characters_character_id_stats_module::getActivationsCloneVatBay() const {
    return m_activations_clone_vat_bay;
}
void OAIGet_characters_character_id_stats_module::setActivationsCloneVatBay(const qint64 &activations_clone_vat_bay) {
    m_activations_clone_vat_bay = activations_clone_vat_bay;
    m_activations_clone_vat_bay_isSet = true;
}

bool OAIGet_characters_character_id_stats_module::is_activations_clone_vat_bay_Set() const{
    return m_activations_clone_vat_bay_isSet;
}

bool OAIGet_characters_character_id_stats_module::is_activations_clone_vat_bay_Valid() const{
    return m_activations_clone_vat_bay_isValid;
}

qint64 OAIGet_characters_character_id_stats_module::getActivationsCynosuralField() const {
    return m_activations_cynosural_field;
}
void OAIGet_characters_character_id_stats_module::setActivationsCynosuralField(const qint64 &activations_cynosural_field) {
    m_activations_cynosural_field = activations_cynosural_field;
    m_activations_cynosural_field_isSet = true;
}

bool OAIGet_characters_character_id_stats_module::is_activations_cynosural_field_Set() const{
    return m_activations_cynosural_field_isSet;
}

bool OAIGet_characters_character_id_stats_module::is_activations_cynosural_field_Valid() const{
    return m_activations_cynosural_field_isValid;
}

qint64 OAIGet_characters_character_id_stats_module::getActivationsDamageControl() const {
    return m_activations_damage_control;
}
void OAIGet_characters_character_id_stats_module::setActivationsDamageControl(const qint64 &activations_damage_control) {
    m_activations_damage_control = activations_damage_control;
    m_activations_damage_control_isSet = true;
}

bool OAIGet_characters_character_id_stats_module::is_activations_damage_control_Set() const{
    return m_activations_damage_control_isSet;
}

bool OAIGet_characters_character_id_stats_module::is_activations_damage_control_Valid() const{
    return m_activations_damage_control_isValid;
}

qint64 OAIGet_characters_character_id_stats_module::getActivationsDataMiners() const {
    return m_activations_data_miners;
}
void OAIGet_characters_character_id_stats_module::setActivationsDataMiners(const qint64 &activations_data_miners) {
    m_activations_data_miners = activations_data_miners;
    m_activations_data_miners_isSet = true;
}

bool OAIGet_characters_character_id_stats_module::is_activations_data_miners_Set() const{
    return m_activations_data_miners_isSet;
}

bool OAIGet_characters_character_id_stats_module::is_activations_data_miners_Valid() const{
    return m_activations_data_miners_isValid;
}

qint64 OAIGet_characters_character_id_stats_module::getActivationsDroneControlUnit() const {
    return m_activations_drone_control_unit;
}
void OAIGet_characters_character_id_stats_module::setActivationsDroneControlUnit(const qint64 &activations_drone_control_unit) {
    m_activations_drone_control_unit = activations_drone_control_unit;
    m_activations_drone_control_unit_isSet = true;
}

bool OAIGet_characters_character_id_stats_module::is_activations_drone_control_unit_Set() const{
    return m_activations_drone_control_unit_isSet;
}

bool OAIGet_characters_character_id_stats_module::is_activations_drone_control_unit_Valid() const{
    return m_activations_drone_control_unit_isValid;
}

qint64 OAIGet_characters_character_id_stats_module::getActivationsDroneTrackingModules() const {
    return m_activations_drone_tracking_modules;
}
void OAIGet_characters_character_id_stats_module::setActivationsDroneTrackingModules(const qint64 &activations_drone_tracking_modules) {
    m_activations_drone_tracking_modules = activations_drone_tracking_modules;
    m_activations_drone_tracking_modules_isSet = true;
}

bool OAIGet_characters_character_id_stats_module::is_activations_drone_tracking_modules_Set() const{
    return m_activations_drone_tracking_modules_isSet;
}

bool OAIGet_characters_character_id_stats_module::is_activations_drone_tracking_modules_Valid() const{
    return m_activations_drone_tracking_modules_isValid;
}

qint64 OAIGet_characters_character_id_stats_module::getActivationsEccm() const {
    return m_activations_eccm;
}
void OAIGet_characters_character_id_stats_module::setActivationsEccm(const qint64 &activations_eccm) {
    m_activations_eccm = activations_eccm;
    m_activations_eccm_isSet = true;
}

bool OAIGet_characters_character_id_stats_module::is_activations_eccm_Set() const{
    return m_activations_eccm_isSet;
}

bool OAIGet_characters_character_id_stats_module::is_activations_eccm_Valid() const{
    return m_activations_eccm_isValid;
}

qint64 OAIGet_characters_character_id_stats_module::getActivationsEcm() const {
    return m_activations_ecm;
}
void OAIGet_characters_character_id_stats_module::setActivationsEcm(const qint64 &activations_ecm) {
    m_activations_ecm = activations_ecm;
    m_activations_ecm_isSet = true;
}

bool OAIGet_characters_character_id_stats_module::is_activations_ecm_Set() const{
    return m_activations_ecm_isSet;
}

bool OAIGet_characters_character_id_stats_module::is_activations_ecm_Valid() const{
    return m_activations_ecm_isValid;
}

qint64 OAIGet_characters_character_id_stats_module::getActivationsEcmBurst() const {
    return m_activations_ecm_burst;
}
void OAIGet_characters_character_id_stats_module::setActivationsEcmBurst(const qint64 &activations_ecm_burst) {
    m_activations_ecm_burst = activations_ecm_burst;
    m_activations_ecm_burst_isSet = true;
}

bool OAIGet_characters_character_id_stats_module::is_activations_ecm_burst_Set() const{
    return m_activations_ecm_burst_isSet;
}

bool OAIGet_characters_character_id_stats_module::is_activations_ecm_burst_Valid() const{
    return m_activations_ecm_burst_isValid;
}

qint64 OAIGet_characters_character_id_stats_module::getActivationsEnergyDestabilizer() const {
    return m_activations_energy_destabilizer;
}
void OAIGet_characters_character_id_stats_module::setActivationsEnergyDestabilizer(const qint64 &activations_energy_destabilizer) {
    m_activations_energy_destabilizer = activations_energy_destabilizer;
    m_activations_energy_destabilizer_isSet = true;
}

bool OAIGet_characters_character_id_stats_module::is_activations_energy_destabilizer_Set() const{
    return m_activations_energy_destabilizer_isSet;
}

bool OAIGet_characters_character_id_stats_module::is_activations_energy_destabilizer_Valid() const{
    return m_activations_energy_destabilizer_isValid;
}

qint64 OAIGet_characters_character_id_stats_module::getActivationsEnergyVampire() const {
    return m_activations_energy_vampire;
}
void OAIGet_characters_character_id_stats_module::setActivationsEnergyVampire(const qint64 &activations_energy_vampire) {
    m_activations_energy_vampire = activations_energy_vampire;
    m_activations_energy_vampire_isSet = true;
}

bool OAIGet_characters_character_id_stats_module::is_activations_energy_vampire_Set() const{
    return m_activations_energy_vampire_isSet;
}

bool OAIGet_characters_character_id_stats_module::is_activations_energy_vampire_Valid() const{
    return m_activations_energy_vampire_isValid;
}

qint64 OAIGet_characters_character_id_stats_module::getActivationsEnergyWeapon() const {
    return m_activations_energy_weapon;
}
void OAIGet_characters_character_id_stats_module::setActivationsEnergyWeapon(const qint64 &activations_energy_weapon) {
    m_activations_energy_weapon = activations_energy_weapon;
    m_activations_energy_weapon_isSet = true;
}

bool OAIGet_characters_character_id_stats_module::is_activations_energy_weapon_Set() const{
    return m_activations_energy_weapon_isSet;
}

bool OAIGet_characters_character_id_stats_module::is_activations_energy_weapon_Valid() const{
    return m_activations_energy_weapon_isValid;
}

qint64 OAIGet_characters_character_id_stats_module::getActivationsFestivalLauncher() const {
    return m_activations_festival_launcher;
}
void OAIGet_characters_character_id_stats_module::setActivationsFestivalLauncher(const qint64 &activations_festival_launcher) {
    m_activations_festival_launcher = activations_festival_launcher;
    m_activations_festival_launcher_isSet = true;
}

bool OAIGet_characters_character_id_stats_module::is_activations_festival_launcher_Set() const{
    return m_activations_festival_launcher_isSet;
}

bool OAIGet_characters_character_id_stats_module::is_activations_festival_launcher_Valid() const{
    return m_activations_festival_launcher_isValid;
}

qint64 OAIGet_characters_character_id_stats_module::getActivationsFrequencyMiningLaser() const {
    return m_activations_frequency_mining_laser;
}
void OAIGet_characters_character_id_stats_module::setActivationsFrequencyMiningLaser(const qint64 &activations_frequency_mining_laser) {
    m_activations_frequency_mining_laser = activations_frequency_mining_laser;
    m_activations_frequency_mining_laser_isSet = true;
}

bool OAIGet_characters_character_id_stats_module::is_activations_frequency_mining_laser_Set() const{
    return m_activations_frequency_mining_laser_isSet;
}

bool OAIGet_characters_character_id_stats_module::is_activations_frequency_mining_laser_Valid() const{
    return m_activations_frequency_mining_laser_isValid;
}

qint64 OAIGet_characters_character_id_stats_module::getActivationsFueledArmorRepairer() const {
    return m_activations_fueled_armor_repairer;
}
void OAIGet_characters_character_id_stats_module::setActivationsFueledArmorRepairer(const qint64 &activations_fueled_armor_repairer) {
    m_activations_fueled_armor_repairer = activations_fueled_armor_repairer;
    m_activations_fueled_armor_repairer_isSet = true;
}

bool OAIGet_characters_character_id_stats_module::is_activations_fueled_armor_repairer_Set() const{
    return m_activations_fueled_armor_repairer_isSet;
}

bool OAIGet_characters_character_id_stats_module::is_activations_fueled_armor_repairer_Valid() const{
    return m_activations_fueled_armor_repairer_isValid;
}

qint64 OAIGet_characters_character_id_stats_module::getActivationsFueledShieldBooster() const {
    return m_activations_fueled_shield_booster;
}
void OAIGet_characters_character_id_stats_module::setActivationsFueledShieldBooster(const qint64 &activations_fueled_shield_booster) {
    m_activations_fueled_shield_booster = activations_fueled_shield_booster;
    m_activations_fueled_shield_booster_isSet = true;
}

bool OAIGet_characters_character_id_stats_module::is_activations_fueled_shield_booster_Set() const{
    return m_activations_fueled_shield_booster_isSet;
}

bool OAIGet_characters_character_id_stats_module::is_activations_fueled_shield_booster_Valid() const{
    return m_activations_fueled_shield_booster_isValid;
}

qint64 OAIGet_characters_character_id_stats_module::getActivationsGangCoordinator() const {
    return m_activations_gang_coordinator;
}
void OAIGet_characters_character_id_stats_module::setActivationsGangCoordinator(const qint64 &activations_gang_coordinator) {
    m_activations_gang_coordinator = activations_gang_coordinator;
    m_activations_gang_coordinator_isSet = true;
}

bool OAIGet_characters_character_id_stats_module::is_activations_gang_coordinator_Set() const{
    return m_activations_gang_coordinator_isSet;
}

bool OAIGet_characters_character_id_stats_module::is_activations_gang_coordinator_Valid() const{
    return m_activations_gang_coordinator_isValid;
}

qint64 OAIGet_characters_character_id_stats_module::getActivationsGasCloudHarvester() const {
    return m_activations_gas_cloud_harvester;
}
void OAIGet_characters_character_id_stats_module::setActivationsGasCloudHarvester(const qint64 &activations_gas_cloud_harvester) {
    m_activations_gas_cloud_harvester = activations_gas_cloud_harvester;
    m_activations_gas_cloud_harvester_isSet = true;
}

bool OAIGet_characters_character_id_stats_module::is_activations_gas_cloud_harvester_Set() const{
    return m_activations_gas_cloud_harvester_isSet;
}

bool OAIGet_characters_character_id_stats_module::is_activations_gas_cloud_harvester_Valid() const{
    return m_activations_gas_cloud_harvester_isValid;
}

qint64 OAIGet_characters_character_id_stats_module::getActivationsHullRepairUnit() const {
    return m_activations_hull_repair_unit;
}
void OAIGet_characters_character_id_stats_module::setActivationsHullRepairUnit(const qint64 &activations_hull_repair_unit) {
    m_activations_hull_repair_unit = activations_hull_repair_unit;
    m_activations_hull_repair_unit_isSet = true;
}

bool OAIGet_characters_character_id_stats_module::is_activations_hull_repair_unit_Set() const{
    return m_activations_hull_repair_unit_isSet;
}

bool OAIGet_characters_character_id_stats_module::is_activations_hull_repair_unit_Valid() const{
    return m_activations_hull_repair_unit_isValid;
}

qint64 OAIGet_characters_character_id_stats_module::getActivationsHybridWeapon() const {
    return m_activations_hybrid_weapon;
}
void OAIGet_characters_character_id_stats_module::setActivationsHybridWeapon(const qint64 &activations_hybrid_weapon) {
    m_activations_hybrid_weapon = activations_hybrid_weapon;
    m_activations_hybrid_weapon_isSet = true;
}

bool OAIGet_characters_character_id_stats_module::is_activations_hybrid_weapon_Set() const{
    return m_activations_hybrid_weapon_isSet;
}

bool OAIGet_characters_character_id_stats_module::is_activations_hybrid_weapon_Valid() const{
    return m_activations_hybrid_weapon_isValid;
}

qint64 OAIGet_characters_character_id_stats_module::getActivationsIndustrialCore() const {
    return m_activations_industrial_core;
}
void OAIGet_characters_character_id_stats_module::setActivationsIndustrialCore(const qint64 &activations_industrial_core) {
    m_activations_industrial_core = activations_industrial_core;
    m_activations_industrial_core_isSet = true;
}

bool OAIGet_characters_character_id_stats_module::is_activations_industrial_core_Set() const{
    return m_activations_industrial_core_isSet;
}

bool OAIGet_characters_character_id_stats_module::is_activations_industrial_core_Valid() const{
    return m_activations_industrial_core_isValid;
}

qint64 OAIGet_characters_character_id_stats_module::getActivationsInterdictionSphereLauncher() const {
    return m_activations_interdiction_sphere_launcher;
}
void OAIGet_characters_character_id_stats_module::setActivationsInterdictionSphereLauncher(const qint64 &activations_interdiction_sphere_launcher) {
    m_activations_interdiction_sphere_launcher = activations_interdiction_sphere_launcher;
    m_activations_interdiction_sphere_launcher_isSet = true;
}

bool OAIGet_characters_character_id_stats_module::is_activations_interdiction_sphere_launcher_Set() const{
    return m_activations_interdiction_sphere_launcher_isSet;
}

bool OAIGet_characters_character_id_stats_module::is_activations_interdiction_sphere_launcher_Valid() const{
    return m_activations_interdiction_sphere_launcher_isValid;
}

qint64 OAIGet_characters_character_id_stats_module::getActivationsMicroJumpDrive() const {
    return m_activations_micro_jump_drive;
}
void OAIGet_characters_character_id_stats_module::setActivationsMicroJumpDrive(const qint64 &activations_micro_jump_drive) {
    m_activations_micro_jump_drive = activations_micro_jump_drive;
    m_activations_micro_jump_drive_isSet = true;
}

bool OAIGet_characters_character_id_stats_module::is_activations_micro_jump_drive_Set() const{
    return m_activations_micro_jump_drive_isSet;
}

bool OAIGet_characters_character_id_stats_module::is_activations_micro_jump_drive_Valid() const{
    return m_activations_micro_jump_drive_isValid;
}

qint64 OAIGet_characters_character_id_stats_module::getActivationsMiningLaser() const {
    return m_activations_mining_laser;
}
void OAIGet_characters_character_id_stats_module::setActivationsMiningLaser(const qint64 &activations_mining_laser) {
    m_activations_mining_laser = activations_mining_laser;
    m_activations_mining_laser_isSet = true;
}

bool OAIGet_characters_character_id_stats_module::is_activations_mining_laser_Set() const{
    return m_activations_mining_laser_isSet;
}

bool OAIGet_characters_character_id_stats_module::is_activations_mining_laser_Valid() const{
    return m_activations_mining_laser_isValid;
}

qint64 OAIGet_characters_character_id_stats_module::getActivationsMissileLauncher() const {
    return m_activations_missile_launcher;
}
void OAIGet_characters_character_id_stats_module::setActivationsMissileLauncher(const qint64 &activations_missile_launcher) {
    m_activations_missile_launcher = activations_missile_launcher;
    m_activations_missile_launcher_isSet = true;
}

bool OAIGet_characters_character_id_stats_module::is_activations_missile_launcher_Set() const{
    return m_activations_missile_launcher_isSet;
}

bool OAIGet_characters_character_id_stats_module::is_activations_missile_launcher_Valid() const{
    return m_activations_missile_launcher_isValid;
}

qint64 OAIGet_characters_character_id_stats_module::getActivationsPassiveTargetingSystem() const {
    return m_activations_passive_targeting_system;
}
void OAIGet_characters_character_id_stats_module::setActivationsPassiveTargetingSystem(const qint64 &activations_passive_targeting_system) {
    m_activations_passive_targeting_system = activations_passive_targeting_system;
    m_activations_passive_targeting_system_isSet = true;
}

bool OAIGet_characters_character_id_stats_module::is_activations_passive_targeting_system_Set() const{
    return m_activations_passive_targeting_system_isSet;
}

bool OAIGet_characters_character_id_stats_module::is_activations_passive_targeting_system_Valid() const{
    return m_activations_passive_targeting_system_isValid;
}

qint64 OAIGet_characters_character_id_stats_module::getActivationsProbeLauncher() const {
    return m_activations_probe_launcher;
}
void OAIGet_characters_character_id_stats_module::setActivationsProbeLauncher(const qint64 &activations_probe_launcher) {
    m_activations_probe_launcher = activations_probe_launcher;
    m_activations_probe_launcher_isSet = true;
}

bool OAIGet_characters_character_id_stats_module::is_activations_probe_launcher_Set() const{
    return m_activations_probe_launcher_isSet;
}

bool OAIGet_characters_character_id_stats_module::is_activations_probe_launcher_Valid() const{
    return m_activations_probe_launcher_isValid;
}

qint64 OAIGet_characters_character_id_stats_module::getActivationsProjectedEccm() const {
    return m_activations_projected_eccm;
}
void OAIGet_characters_character_id_stats_module::setActivationsProjectedEccm(const qint64 &activations_projected_eccm) {
    m_activations_projected_eccm = activations_projected_eccm;
    m_activations_projected_eccm_isSet = true;
}

bool OAIGet_characters_character_id_stats_module::is_activations_projected_eccm_Set() const{
    return m_activations_projected_eccm_isSet;
}

bool OAIGet_characters_character_id_stats_module::is_activations_projected_eccm_Valid() const{
    return m_activations_projected_eccm_isValid;
}

qint64 OAIGet_characters_character_id_stats_module::getActivationsProjectileWeapon() const {
    return m_activations_projectile_weapon;
}
void OAIGet_characters_character_id_stats_module::setActivationsProjectileWeapon(const qint64 &activations_projectile_weapon) {
    m_activations_projectile_weapon = activations_projectile_weapon;
    m_activations_projectile_weapon_isSet = true;
}

bool OAIGet_characters_character_id_stats_module::is_activations_projectile_weapon_Set() const{
    return m_activations_projectile_weapon_isSet;
}

bool OAIGet_characters_character_id_stats_module::is_activations_projectile_weapon_Valid() const{
    return m_activations_projectile_weapon_isValid;
}

qint64 OAIGet_characters_character_id_stats_module::getActivationsPropulsionModule() const {
    return m_activations_propulsion_module;
}
void OAIGet_characters_character_id_stats_module::setActivationsPropulsionModule(const qint64 &activations_propulsion_module) {
    m_activations_propulsion_module = activations_propulsion_module;
    m_activations_propulsion_module_isSet = true;
}

bool OAIGet_characters_character_id_stats_module::is_activations_propulsion_module_Set() const{
    return m_activations_propulsion_module_isSet;
}

bool OAIGet_characters_character_id_stats_module::is_activations_propulsion_module_Valid() const{
    return m_activations_propulsion_module_isValid;
}

qint64 OAIGet_characters_character_id_stats_module::getActivationsRemoteArmorRepairer() const {
    return m_activations_remote_armor_repairer;
}
void OAIGet_characters_character_id_stats_module::setActivationsRemoteArmorRepairer(const qint64 &activations_remote_armor_repairer) {
    m_activations_remote_armor_repairer = activations_remote_armor_repairer;
    m_activations_remote_armor_repairer_isSet = true;
}

bool OAIGet_characters_character_id_stats_module::is_activations_remote_armor_repairer_Set() const{
    return m_activations_remote_armor_repairer_isSet;
}

bool OAIGet_characters_character_id_stats_module::is_activations_remote_armor_repairer_Valid() const{
    return m_activations_remote_armor_repairer_isValid;
}

qint64 OAIGet_characters_character_id_stats_module::getActivationsRemoteCapacitorTransmitter() const {
    return m_activations_remote_capacitor_transmitter;
}
void OAIGet_characters_character_id_stats_module::setActivationsRemoteCapacitorTransmitter(const qint64 &activations_remote_capacitor_transmitter) {
    m_activations_remote_capacitor_transmitter = activations_remote_capacitor_transmitter;
    m_activations_remote_capacitor_transmitter_isSet = true;
}

bool OAIGet_characters_character_id_stats_module::is_activations_remote_capacitor_transmitter_Set() const{
    return m_activations_remote_capacitor_transmitter_isSet;
}

bool OAIGet_characters_character_id_stats_module::is_activations_remote_capacitor_transmitter_Valid() const{
    return m_activations_remote_capacitor_transmitter_isValid;
}

qint64 OAIGet_characters_character_id_stats_module::getActivationsRemoteEcmBurst() const {
    return m_activations_remote_ecm_burst;
}
void OAIGet_characters_character_id_stats_module::setActivationsRemoteEcmBurst(const qint64 &activations_remote_ecm_burst) {
    m_activations_remote_ecm_burst = activations_remote_ecm_burst;
    m_activations_remote_ecm_burst_isSet = true;
}

bool OAIGet_characters_character_id_stats_module::is_activations_remote_ecm_burst_Set() const{
    return m_activations_remote_ecm_burst_isSet;
}

bool OAIGet_characters_character_id_stats_module::is_activations_remote_ecm_burst_Valid() const{
    return m_activations_remote_ecm_burst_isValid;
}

qint64 OAIGet_characters_character_id_stats_module::getActivationsRemoteHullRepairer() const {
    return m_activations_remote_hull_repairer;
}
void OAIGet_characters_character_id_stats_module::setActivationsRemoteHullRepairer(const qint64 &activations_remote_hull_repairer) {
    m_activations_remote_hull_repairer = activations_remote_hull_repairer;
    m_activations_remote_hull_repairer_isSet = true;
}

bool OAIGet_characters_character_id_stats_module::is_activations_remote_hull_repairer_Set() const{
    return m_activations_remote_hull_repairer_isSet;
}

bool OAIGet_characters_character_id_stats_module::is_activations_remote_hull_repairer_Valid() const{
    return m_activations_remote_hull_repairer_isValid;
}

qint64 OAIGet_characters_character_id_stats_module::getActivationsRemoteSensorBooster() const {
    return m_activations_remote_sensor_booster;
}
void OAIGet_characters_character_id_stats_module::setActivationsRemoteSensorBooster(const qint64 &activations_remote_sensor_booster) {
    m_activations_remote_sensor_booster = activations_remote_sensor_booster;
    m_activations_remote_sensor_booster_isSet = true;
}

bool OAIGet_characters_character_id_stats_module::is_activations_remote_sensor_booster_Set() const{
    return m_activations_remote_sensor_booster_isSet;
}

bool OAIGet_characters_character_id_stats_module::is_activations_remote_sensor_booster_Valid() const{
    return m_activations_remote_sensor_booster_isValid;
}

qint64 OAIGet_characters_character_id_stats_module::getActivationsRemoteSensorDamper() const {
    return m_activations_remote_sensor_damper;
}
void OAIGet_characters_character_id_stats_module::setActivationsRemoteSensorDamper(const qint64 &activations_remote_sensor_damper) {
    m_activations_remote_sensor_damper = activations_remote_sensor_damper;
    m_activations_remote_sensor_damper_isSet = true;
}

bool OAIGet_characters_character_id_stats_module::is_activations_remote_sensor_damper_Set() const{
    return m_activations_remote_sensor_damper_isSet;
}

bool OAIGet_characters_character_id_stats_module::is_activations_remote_sensor_damper_Valid() const{
    return m_activations_remote_sensor_damper_isValid;
}

qint64 OAIGet_characters_character_id_stats_module::getActivationsRemoteShieldBooster() const {
    return m_activations_remote_shield_booster;
}
void OAIGet_characters_character_id_stats_module::setActivationsRemoteShieldBooster(const qint64 &activations_remote_shield_booster) {
    m_activations_remote_shield_booster = activations_remote_shield_booster;
    m_activations_remote_shield_booster_isSet = true;
}

bool OAIGet_characters_character_id_stats_module::is_activations_remote_shield_booster_Set() const{
    return m_activations_remote_shield_booster_isSet;
}

bool OAIGet_characters_character_id_stats_module::is_activations_remote_shield_booster_Valid() const{
    return m_activations_remote_shield_booster_isValid;
}

qint64 OAIGet_characters_character_id_stats_module::getActivationsRemoteTrackingComputer() const {
    return m_activations_remote_tracking_computer;
}
void OAIGet_characters_character_id_stats_module::setActivationsRemoteTrackingComputer(const qint64 &activations_remote_tracking_computer) {
    m_activations_remote_tracking_computer = activations_remote_tracking_computer;
    m_activations_remote_tracking_computer_isSet = true;
}

bool OAIGet_characters_character_id_stats_module::is_activations_remote_tracking_computer_Set() const{
    return m_activations_remote_tracking_computer_isSet;
}

bool OAIGet_characters_character_id_stats_module::is_activations_remote_tracking_computer_Valid() const{
    return m_activations_remote_tracking_computer_isValid;
}

qint64 OAIGet_characters_character_id_stats_module::getActivationsSalvager() const {
    return m_activations_salvager;
}
void OAIGet_characters_character_id_stats_module::setActivationsSalvager(const qint64 &activations_salvager) {
    m_activations_salvager = activations_salvager;
    m_activations_salvager_isSet = true;
}

bool OAIGet_characters_character_id_stats_module::is_activations_salvager_Set() const{
    return m_activations_salvager_isSet;
}

bool OAIGet_characters_character_id_stats_module::is_activations_salvager_Valid() const{
    return m_activations_salvager_isValid;
}

qint64 OAIGet_characters_character_id_stats_module::getActivationsSensorBooster() const {
    return m_activations_sensor_booster;
}
void OAIGet_characters_character_id_stats_module::setActivationsSensorBooster(const qint64 &activations_sensor_booster) {
    m_activations_sensor_booster = activations_sensor_booster;
    m_activations_sensor_booster_isSet = true;
}

bool OAIGet_characters_character_id_stats_module::is_activations_sensor_booster_Set() const{
    return m_activations_sensor_booster_isSet;
}

bool OAIGet_characters_character_id_stats_module::is_activations_sensor_booster_Valid() const{
    return m_activations_sensor_booster_isValid;
}

qint64 OAIGet_characters_character_id_stats_module::getActivationsShieldBooster() const {
    return m_activations_shield_booster;
}
void OAIGet_characters_character_id_stats_module::setActivationsShieldBooster(const qint64 &activations_shield_booster) {
    m_activations_shield_booster = activations_shield_booster;
    m_activations_shield_booster_isSet = true;
}

bool OAIGet_characters_character_id_stats_module::is_activations_shield_booster_Set() const{
    return m_activations_shield_booster_isSet;
}

bool OAIGet_characters_character_id_stats_module::is_activations_shield_booster_Valid() const{
    return m_activations_shield_booster_isValid;
}

qint64 OAIGet_characters_character_id_stats_module::getActivationsShieldHardener() const {
    return m_activations_shield_hardener;
}
void OAIGet_characters_character_id_stats_module::setActivationsShieldHardener(const qint64 &activations_shield_hardener) {
    m_activations_shield_hardener = activations_shield_hardener;
    m_activations_shield_hardener_isSet = true;
}

bool OAIGet_characters_character_id_stats_module::is_activations_shield_hardener_Set() const{
    return m_activations_shield_hardener_isSet;
}

bool OAIGet_characters_character_id_stats_module::is_activations_shield_hardener_Valid() const{
    return m_activations_shield_hardener_isValid;
}

qint64 OAIGet_characters_character_id_stats_module::getActivationsShipScanner() const {
    return m_activations_ship_scanner;
}
void OAIGet_characters_character_id_stats_module::setActivationsShipScanner(const qint64 &activations_ship_scanner) {
    m_activations_ship_scanner = activations_ship_scanner;
    m_activations_ship_scanner_isSet = true;
}

bool OAIGet_characters_character_id_stats_module::is_activations_ship_scanner_Set() const{
    return m_activations_ship_scanner_isSet;
}

bool OAIGet_characters_character_id_stats_module::is_activations_ship_scanner_Valid() const{
    return m_activations_ship_scanner_isValid;
}

qint64 OAIGet_characters_character_id_stats_module::getActivationsSiege() const {
    return m_activations_siege;
}
void OAIGet_characters_character_id_stats_module::setActivationsSiege(const qint64 &activations_siege) {
    m_activations_siege = activations_siege;
    m_activations_siege_isSet = true;
}

bool OAIGet_characters_character_id_stats_module::is_activations_siege_Set() const{
    return m_activations_siege_isSet;
}

bool OAIGet_characters_character_id_stats_module::is_activations_siege_Valid() const{
    return m_activations_siege_isValid;
}

qint64 OAIGet_characters_character_id_stats_module::getActivationsSmartBomb() const {
    return m_activations_smart_bomb;
}
void OAIGet_characters_character_id_stats_module::setActivationsSmartBomb(const qint64 &activations_smart_bomb) {
    m_activations_smart_bomb = activations_smart_bomb;
    m_activations_smart_bomb_isSet = true;
}

bool OAIGet_characters_character_id_stats_module::is_activations_smart_bomb_Set() const{
    return m_activations_smart_bomb_isSet;
}

bool OAIGet_characters_character_id_stats_module::is_activations_smart_bomb_Valid() const{
    return m_activations_smart_bomb_isValid;
}

qint64 OAIGet_characters_character_id_stats_module::getActivationsStasisWeb() const {
    return m_activations_stasis_web;
}
void OAIGet_characters_character_id_stats_module::setActivationsStasisWeb(const qint64 &activations_stasis_web) {
    m_activations_stasis_web = activations_stasis_web;
    m_activations_stasis_web_isSet = true;
}

bool OAIGet_characters_character_id_stats_module::is_activations_stasis_web_Set() const{
    return m_activations_stasis_web_isSet;
}

bool OAIGet_characters_character_id_stats_module::is_activations_stasis_web_Valid() const{
    return m_activations_stasis_web_isValid;
}

qint64 OAIGet_characters_character_id_stats_module::getActivationsStripMiner() const {
    return m_activations_strip_miner;
}
void OAIGet_characters_character_id_stats_module::setActivationsStripMiner(const qint64 &activations_strip_miner) {
    m_activations_strip_miner = activations_strip_miner;
    m_activations_strip_miner_isSet = true;
}

bool OAIGet_characters_character_id_stats_module::is_activations_strip_miner_Set() const{
    return m_activations_strip_miner_isSet;
}

bool OAIGet_characters_character_id_stats_module::is_activations_strip_miner_Valid() const{
    return m_activations_strip_miner_isValid;
}

qint64 OAIGet_characters_character_id_stats_module::getActivationsSuperWeapon() const {
    return m_activations_super_weapon;
}
void OAIGet_characters_character_id_stats_module::setActivationsSuperWeapon(const qint64 &activations_super_weapon) {
    m_activations_super_weapon = activations_super_weapon;
    m_activations_super_weapon_isSet = true;
}

bool OAIGet_characters_character_id_stats_module::is_activations_super_weapon_Set() const{
    return m_activations_super_weapon_isSet;
}

bool OAIGet_characters_character_id_stats_module::is_activations_super_weapon_Valid() const{
    return m_activations_super_weapon_isValid;
}

qint64 OAIGet_characters_character_id_stats_module::getActivationsSurveyScanner() const {
    return m_activations_survey_scanner;
}
void OAIGet_characters_character_id_stats_module::setActivationsSurveyScanner(const qint64 &activations_survey_scanner) {
    m_activations_survey_scanner = activations_survey_scanner;
    m_activations_survey_scanner_isSet = true;
}

bool OAIGet_characters_character_id_stats_module::is_activations_survey_scanner_Set() const{
    return m_activations_survey_scanner_isSet;
}

bool OAIGet_characters_character_id_stats_module::is_activations_survey_scanner_Valid() const{
    return m_activations_survey_scanner_isValid;
}

qint64 OAIGet_characters_character_id_stats_module::getActivationsTargetBreaker() const {
    return m_activations_target_breaker;
}
void OAIGet_characters_character_id_stats_module::setActivationsTargetBreaker(const qint64 &activations_target_breaker) {
    m_activations_target_breaker = activations_target_breaker;
    m_activations_target_breaker_isSet = true;
}

bool OAIGet_characters_character_id_stats_module::is_activations_target_breaker_Set() const{
    return m_activations_target_breaker_isSet;
}

bool OAIGet_characters_character_id_stats_module::is_activations_target_breaker_Valid() const{
    return m_activations_target_breaker_isValid;
}

qint64 OAIGet_characters_character_id_stats_module::getActivationsTargetPainter() const {
    return m_activations_target_painter;
}
void OAIGet_characters_character_id_stats_module::setActivationsTargetPainter(const qint64 &activations_target_painter) {
    m_activations_target_painter = activations_target_painter;
    m_activations_target_painter_isSet = true;
}

bool OAIGet_characters_character_id_stats_module::is_activations_target_painter_Set() const{
    return m_activations_target_painter_isSet;
}

bool OAIGet_characters_character_id_stats_module::is_activations_target_painter_Valid() const{
    return m_activations_target_painter_isValid;
}

qint64 OAIGet_characters_character_id_stats_module::getActivationsTrackingComputer() const {
    return m_activations_tracking_computer;
}
void OAIGet_characters_character_id_stats_module::setActivationsTrackingComputer(const qint64 &activations_tracking_computer) {
    m_activations_tracking_computer = activations_tracking_computer;
    m_activations_tracking_computer_isSet = true;
}

bool OAIGet_characters_character_id_stats_module::is_activations_tracking_computer_Set() const{
    return m_activations_tracking_computer_isSet;
}

bool OAIGet_characters_character_id_stats_module::is_activations_tracking_computer_Valid() const{
    return m_activations_tracking_computer_isValid;
}

qint64 OAIGet_characters_character_id_stats_module::getActivationsTrackingDisruptor() const {
    return m_activations_tracking_disruptor;
}
void OAIGet_characters_character_id_stats_module::setActivationsTrackingDisruptor(const qint64 &activations_tracking_disruptor) {
    m_activations_tracking_disruptor = activations_tracking_disruptor;
    m_activations_tracking_disruptor_isSet = true;
}

bool OAIGet_characters_character_id_stats_module::is_activations_tracking_disruptor_Set() const{
    return m_activations_tracking_disruptor_isSet;
}

bool OAIGet_characters_character_id_stats_module::is_activations_tracking_disruptor_Valid() const{
    return m_activations_tracking_disruptor_isValid;
}

qint64 OAIGet_characters_character_id_stats_module::getActivationsTractorBeam() const {
    return m_activations_tractor_beam;
}
void OAIGet_characters_character_id_stats_module::setActivationsTractorBeam(const qint64 &activations_tractor_beam) {
    m_activations_tractor_beam = activations_tractor_beam;
    m_activations_tractor_beam_isSet = true;
}

bool OAIGet_characters_character_id_stats_module::is_activations_tractor_beam_Set() const{
    return m_activations_tractor_beam_isSet;
}

bool OAIGet_characters_character_id_stats_module::is_activations_tractor_beam_Valid() const{
    return m_activations_tractor_beam_isValid;
}

qint64 OAIGet_characters_character_id_stats_module::getActivationsTriage() const {
    return m_activations_triage;
}
void OAIGet_characters_character_id_stats_module::setActivationsTriage(const qint64 &activations_triage) {
    m_activations_triage = activations_triage;
    m_activations_triage_isSet = true;
}

bool OAIGet_characters_character_id_stats_module::is_activations_triage_Set() const{
    return m_activations_triage_isSet;
}

bool OAIGet_characters_character_id_stats_module::is_activations_triage_Valid() const{
    return m_activations_triage_isValid;
}

qint64 OAIGet_characters_character_id_stats_module::getActivationsWarpDisruptFieldGenerator() const {
    return m_activations_warp_disrupt_field_generator;
}
void OAIGet_characters_character_id_stats_module::setActivationsWarpDisruptFieldGenerator(const qint64 &activations_warp_disrupt_field_generator) {
    m_activations_warp_disrupt_field_generator = activations_warp_disrupt_field_generator;
    m_activations_warp_disrupt_field_generator_isSet = true;
}

bool OAIGet_characters_character_id_stats_module::is_activations_warp_disrupt_field_generator_Set() const{
    return m_activations_warp_disrupt_field_generator_isSet;
}

bool OAIGet_characters_character_id_stats_module::is_activations_warp_disrupt_field_generator_Valid() const{
    return m_activations_warp_disrupt_field_generator_isValid;
}

qint64 OAIGet_characters_character_id_stats_module::getActivationsWarpScrambler() const {
    return m_activations_warp_scrambler;
}
void OAIGet_characters_character_id_stats_module::setActivationsWarpScrambler(const qint64 &activations_warp_scrambler) {
    m_activations_warp_scrambler = activations_warp_scrambler;
    m_activations_warp_scrambler_isSet = true;
}

bool OAIGet_characters_character_id_stats_module::is_activations_warp_scrambler_Set() const{
    return m_activations_warp_scrambler_isSet;
}

bool OAIGet_characters_character_id_stats_module::is_activations_warp_scrambler_Valid() const{
    return m_activations_warp_scrambler_isValid;
}

qint64 OAIGet_characters_character_id_stats_module::getLinkWeapons() const {
    return m_link_weapons;
}
void OAIGet_characters_character_id_stats_module::setLinkWeapons(const qint64 &link_weapons) {
    m_link_weapons = link_weapons;
    m_link_weapons_isSet = true;
}

bool OAIGet_characters_character_id_stats_module::is_link_weapons_Set() const{
    return m_link_weapons_isSet;
}

bool OAIGet_characters_character_id_stats_module::is_link_weapons_Valid() const{
    return m_link_weapons_isValid;
}

qint64 OAIGet_characters_character_id_stats_module::getOverload() const {
    return m_overload;
}
void OAIGet_characters_character_id_stats_module::setOverload(const qint64 &overload) {
    m_overload = overload;
    m_overload_isSet = true;
}

bool OAIGet_characters_character_id_stats_module::is_overload_Set() const{
    return m_overload_isSet;
}

bool OAIGet_characters_character_id_stats_module::is_overload_Valid() const{
    return m_overload_isValid;
}

qint64 OAIGet_characters_character_id_stats_module::getRepairs() const {
    return m_repairs;
}
void OAIGet_characters_character_id_stats_module::setRepairs(const qint64 &repairs) {
    m_repairs = repairs;
    m_repairs_isSet = true;
}

bool OAIGet_characters_character_id_stats_module::is_repairs_Set() const{
    return m_repairs_isSet;
}

bool OAIGet_characters_character_id_stats_module::is_repairs_Valid() const{
    return m_repairs_isValid;
}

bool OAIGet_characters_character_id_stats_module::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_activations_armor_hardener_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_activations_armor_repair_unit_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_activations_armor_resistance_shift_hardener_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_activations_automated_targeting_system_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_activations_bastion_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_activations_bomb_launcher_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_activations_capacitor_booster_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_activations_cargo_scanner_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_activations_cloaking_device_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_activations_clone_vat_bay_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_activations_cynosural_field_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_activations_damage_control_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_activations_data_miners_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_activations_drone_control_unit_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_activations_drone_tracking_modules_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_activations_eccm_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_activations_ecm_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_activations_ecm_burst_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_activations_energy_destabilizer_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_activations_energy_vampire_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_activations_energy_weapon_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_activations_festival_launcher_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_activations_frequency_mining_laser_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_activations_fueled_armor_repairer_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_activations_fueled_shield_booster_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_activations_gang_coordinator_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_activations_gas_cloud_harvester_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_activations_hull_repair_unit_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_activations_hybrid_weapon_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_activations_industrial_core_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_activations_interdiction_sphere_launcher_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_activations_micro_jump_drive_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_activations_mining_laser_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_activations_missile_launcher_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_activations_passive_targeting_system_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_activations_probe_launcher_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_activations_projected_eccm_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_activations_projectile_weapon_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_activations_propulsion_module_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_activations_remote_armor_repairer_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_activations_remote_capacitor_transmitter_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_activations_remote_ecm_burst_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_activations_remote_hull_repairer_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_activations_remote_sensor_booster_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_activations_remote_sensor_damper_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_activations_remote_shield_booster_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_activations_remote_tracking_computer_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_activations_salvager_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_activations_sensor_booster_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_activations_shield_booster_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_activations_shield_hardener_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_activations_ship_scanner_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_activations_siege_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_activations_smart_bomb_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_activations_stasis_web_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_activations_strip_miner_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_activations_super_weapon_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_activations_survey_scanner_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_activations_target_breaker_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_activations_target_painter_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_activations_tracking_computer_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_activations_tracking_disruptor_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_activations_tractor_beam_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_activations_triage_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_activations_warp_disrupt_field_generator_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_activations_warp_scrambler_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_link_weapons_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_overload_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_repairs_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIGet_characters_character_id_stats_module::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
