/**
 * EVE Swagger Interface
 * An OpenAPI for EVE Online
 *
 * The version of the OpenAPI document: 0.8.6
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIGet_sovereignty_campaigns_200_ok.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIGet_sovereignty_campaigns_200_ok::OAIGet_sovereignty_campaigns_200_ok(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIGet_sovereignty_campaigns_200_ok::OAIGet_sovereignty_campaigns_200_ok() {
    this->initializeModel();
}

OAIGet_sovereignty_campaigns_200_ok::~OAIGet_sovereignty_campaigns_200_ok() {}

void OAIGet_sovereignty_campaigns_200_ok::initializeModel() {

    m_attackers_score_isSet = false;
    m_attackers_score_isValid = false;

    m_campaign_id_isSet = false;
    m_campaign_id_isValid = false;

    m_constellation_id_isSet = false;
    m_constellation_id_isValid = false;

    m_defender_id_isSet = false;
    m_defender_id_isValid = false;

    m_defender_score_isSet = false;
    m_defender_score_isValid = false;

    m_event_type_isSet = false;
    m_event_type_isValid = false;

    m_participants_isSet = false;
    m_participants_isValid = false;

    m_solar_system_id_isSet = false;
    m_solar_system_id_isValid = false;

    m_start_time_isSet = false;
    m_start_time_isValid = false;

    m_structure_id_isSet = false;
    m_structure_id_isValid = false;
}

void OAIGet_sovereignty_campaigns_200_ok::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIGet_sovereignty_campaigns_200_ok::fromJsonObject(QJsonObject json) {

    m_attackers_score_isValid = ::OpenAPI::fromJsonValue(m_attackers_score, json[QString("attackers_score")]);
    m_attackers_score_isSet = !json[QString("attackers_score")].isNull() && m_attackers_score_isValid;

    m_campaign_id_isValid = ::OpenAPI::fromJsonValue(m_campaign_id, json[QString("campaign_id")]);
    m_campaign_id_isSet = !json[QString("campaign_id")].isNull() && m_campaign_id_isValid;

    m_constellation_id_isValid = ::OpenAPI::fromJsonValue(m_constellation_id, json[QString("constellation_id")]);
    m_constellation_id_isSet = !json[QString("constellation_id")].isNull() && m_constellation_id_isValid;

    m_defender_id_isValid = ::OpenAPI::fromJsonValue(m_defender_id, json[QString("defender_id")]);
    m_defender_id_isSet = !json[QString("defender_id")].isNull() && m_defender_id_isValid;

    m_defender_score_isValid = ::OpenAPI::fromJsonValue(m_defender_score, json[QString("defender_score")]);
    m_defender_score_isSet = !json[QString("defender_score")].isNull() && m_defender_score_isValid;

    m_event_type_isValid = ::OpenAPI::fromJsonValue(m_event_type, json[QString("event_type")]);
    m_event_type_isSet = !json[QString("event_type")].isNull() && m_event_type_isValid;

    m_participants_isValid = ::OpenAPI::fromJsonValue(m_participants, json[QString("participants")]);
    m_participants_isSet = !json[QString("participants")].isNull() && m_participants_isValid;

    m_solar_system_id_isValid = ::OpenAPI::fromJsonValue(m_solar_system_id, json[QString("solar_system_id")]);
    m_solar_system_id_isSet = !json[QString("solar_system_id")].isNull() && m_solar_system_id_isValid;

    m_start_time_isValid = ::OpenAPI::fromJsonValue(m_start_time, json[QString("start_time")]);
    m_start_time_isSet = !json[QString("start_time")].isNull() && m_start_time_isValid;

    m_structure_id_isValid = ::OpenAPI::fromJsonValue(m_structure_id, json[QString("structure_id")]);
    m_structure_id_isSet = !json[QString("structure_id")].isNull() && m_structure_id_isValid;
}

QString OAIGet_sovereignty_campaigns_200_ok::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIGet_sovereignty_campaigns_200_ok::asJsonObject() const {
    QJsonObject obj;
    if (m_attackers_score_isSet) {
        obj.insert(QString("attackers_score"), ::OpenAPI::toJsonValue(m_attackers_score));
    }
    if (m_campaign_id_isSet) {
        obj.insert(QString("campaign_id"), ::OpenAPI::toJsonValue(m_campaign_id));
    }
    if (m_constellation_id_isSet) {
        obj.insert(QString("constellation_id"), ::OpenAPI::toJsonValue(m_constellation_id));
    }
    if (m_defender_id_isSet) {
        obj.insert(QString("defender_id"), ::OpenAPI::toJsonValue(m_defender_id));
    }
    if (m_defender_score_isSet) {
        obj.insert(QString("defender_score"), ::OpenAPI::toJsonValue(m_defender_score));
    }
    if (m_event_type_isSet) {
        obj.insert(QString("event_type"), ::OpenAPI::toJsonValue(m_event_type));
    }
    if (m_participants.size() > 0) {
        obj.insert(QString("participants"), ::OpenAPI::toJsonValue(m_participants));
    }
    if (m_solar_system_id_isSet) {
        obj.insert(QString("solar_system_id"), ::OpenAPI::toJsonValue(m_solar_system_id));
    }
    if (m_start_time_isSet) {
        obj.insert(QString("start_time"), ::OpenAPI::toJsonValue(m_start_time));
    }
    if (m_structure_id_isSet) {
        obj.insert(QString("structure_id"), ::OpenAPI::toJsonValue(m_structure_id));
    }
    return obj;
}

float OAIGet_sovereignty_campaigns_200_ok::getAttackersScore() const {
    return m_attackers_score;
}
void OAIGet_sovereignty_campaigns_200_ok::setAttackersScore(const float &attackers_score) {
    m_attackers_score = attackers_score;
    m_attackers_score_isSet = true;
}

bool OAIGet_sovereignty_campaigns_200_ok::is_attackers_score_Set() const{
    return m_attackers_score_isSet;
}

bool OAIGet_sovereignty_campaigns_200_ok::is_attackers_score_Valid() const{
    return m_attackers_score_isValid;
}

qint32 OAIGet_sovereignty_campaigns_200_ok::getCampaignId() const {
    return m_campaign_id;
}
void OAIGet_sovereignty_campaigns_200_ok::setCampaignId(const qint32 &campaign_id) {
    m_campaign_id = campaign_id;
    m_campaign_id_isSet = true;
}

bool OAIGet_sovereignty_campaigns_200_ok::is_campaign_id_Set() const{
    return m_campaign_id_isSet;
}

bool OAIGet_sovereignty_campaigns_200_ok::is_campaign_id_Valid() const{
    return m_campaign_id_isValid;
}

qint32 OAIGet_sovereignty_campaigns_200_ok::getConstellationId() const {
    return m_constellation_id;
}
void OAIGet_sovereignty_campaigns_200_ok::setConstellationId(const qint32 &constellation_id) {
    m_constellation_id = constellation_id;
    m_constellation_id_isSet = true;
}

bool OAIGet_sovereignty_campaigns_200_ok::is_constellation_id_Set() const{
    return m_constellation_id_isSet;
}

bool OAIGet_sovereignty_campaigns_200_ok::is_constellation_id_Valid() const{
    return m_constellation_id_isValid;
}

qint32 OAIGet_sovereignty_campaigns_200_ok::getDefenderId() const {
    return m_defender_id;
}
void OAIGet_sovereignty_campaigns_200_ok::setDefenderId(const qint32 &defender_id) {
    m_defender_id = defender_id;
    m_defender_id_isSet = true;
}

bool OAIGet_sovereignty_campaigns_200_ok::is_defender_id_Set() const{
    return m_defender_id_isSet;
}

bool OAIGet_sovereignty_campaigns_200_ok::is_defender_id_Valid() const{
    return m_defender_id_isValid;
}

float OAIGet_sovereignty_campaigns_200_ok::getDefenderScore() const {
    return m_defender_score;
}
void OAIGet_sovereignty_campaigns_200_ok::setDefenderScore(const float &defender_score) {
    m_defender_score = defender_score;
    m_defender_score_isSet = true;
}

bool OAIGet_sovereignty_campaigns_200_ok::is_defender_score_Set() const{
    return m_defender_score_isSet;
}

bool OAIGet_sovereignty_campaigns_200_ok::is_defender_score_Valid() const{
    return m_defender_score_isValid;
}

QString OAIGet_sovereignty_campaigns_200_ok::getEventType() const {
    return m_event_type;
}
void OAIGet_sovereignty_campaigns_200_ok::setEventType(const QString &event_type) {
    m_event_type = event_type;
    m_event_type_isSet = true;
}

bool OAIGet_sovereignty_campaigns_200_ok::is_event_type_Set() const{
    return m_event_type_isSet;
}

bool OAIGet_sovereignty_campaigns_200_ok::is_event_type_Valid() const{
    return m_event_type_isValid;
}

QList<OAIGet_sovereignty_campaigns_participant> OAIGet_sovereignty_campaigns_200_ok::getParticipants() const {
    return m_participants;
}
void OAIGet_sovereignty_campaigns_200_ok::setParticipants(const QList<OAIGet_sovereignty_campaigns_participant> &participants) {
    m_participants = participants;
    m_participants_isSet = true;
}

bool OAIGet_sovereignty_campaigns_200_ok::is_participants_Set() const{
    return m_participants_isSet;
}

bool OAIGet_sovereignty_campaigns_200_ok::is_participants_Valid() const{
    return m_participants_isValid;
}

qint32 OAIGet_sovereignty_campaigns_200_ok::getSolarSystemId() const {
    return m_solar_system_id;
}
void OAIGet_sovereignty_campaigns_200_ok::setSolarSystemId(const qint32 &solar_system_id) {
    m_solar_system_id = solar_system_id;
    m_solar_system_id_isSet = true;
}

bool OAIGet_sovereignty_campaigns_200_ok::is_solar_system_id_Set() const{
    return m_solar_system_id_isSet;
}

bool OAIGet_sovereignty_campaigns_200_ok::is_solar_system_id_Valid() const{
    return m_solar_system_id_isValid;
}

QDateTime OAIGet_sovereignty_campaigns_200_ok::getStartTime() const {
    return m_start_time;
}
void OAIGet_sovereignty_campaigns_200_ok::setStartTime(const QDateTime &start_time) {
    m_start_time = start_time;
    m_start_time_isSet = true;
}

bool OAIGet_sovereignty_campaigns_200_ok::is_start_time_Set() const{
    return m_start_time_isSet;
}

bool OAIGet_sovereignty_campaigns_200_ok::is_start_time_Valid() const{
    return m_start_time_isValid;
}

qint64 OAIGet_sovereignty_campaigns_200_ok::getStructureId() const {
    return m_structure_id;
}
void OAIGet_sovereignty_campaigns_200_ok::setStructureId(const qint64 &structure_id) {
    m_structure_id = structure_id;
    m_structure_id_isSet = true;
}

bool OAIGet_sovereignty_campaigns_200_ok::is_structure_id_Set() const{
    return m_structure_id_isSet;
}

bool OAIGet_sovereignty_campaigns_200_ok::is_structure_id_Valid() const{
    return m_structure_id_isValid;
}

bool OAIGet_sovereignty_campaigns_200_ok::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_attackers_score_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_campaign_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_constellation_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_defender_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_defender_score_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_event_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_participants.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_solar_system_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_start_time_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_structure_id_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIGet_sovereignty_campaigns_200_ok::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_campaign_id_isValid && m_constellation_id_isValid && m_event_type_isValid && m_solar_system_id_isValid && m_start_time_isValid && m_structure_id_isValid && true;
}

} // namespace OpenAPI
