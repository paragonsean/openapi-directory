/**
 * EVE Swagger Interface
 * An OpenAPI for EVE Online
 *
 * The version of the OpenAPI document: 0.8.6
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIGet_killmails_killmail_id_killmail_hash_attacker.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIGet_killmails_killmail_id_killmail_hash_attacker::OAIGet_killmails_killmail_id_killmail_hash_attacker(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIGet_killmails_killmail_id_killmail_hash_attacker::OAIGet_killmails_killmail_id_killmail_hash_attacker() {
    this->initializeModel();
}

OAIGet_killmails_killmail_id_killmail_hash_attacker::~OAIGet_killmails_killmail_id_killmail_hash_attacker() {}

void OAIGet_killmails_killmail_id_killmail_hash_attacker::initializeModel() {

    m_alliance_id_isSet = false;
    m_alliance_id_isValid = false;

    m_character_id_isSet = false;
    m_character_id_isValid = false;

    m_corporation_id_isSet = false;
    m_corporation_id_isValid = false;

    m_damage_done_isSet = false;
    m_damage_done_isValid = false;

    m_faction_id_isSet = false;
    m_faction_id_isValid = false;

    m_final_blow_isSet = false;
    m_final_blow_isValid = false;

    m_security_status_isSet = false;
    m_security_status_isValid = false;

    m_ship_type_id_isSet = false;
    m_ship_type_id_isValid = false;

    m_weapon_type_id_isSet = false;
    m_weapon_type_id_isValid = false;
}

void OAIGet_killmails_killmail_id_killmail_hash_attacker::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIGet_killmails_killmail_id_killmail_hash_attacker::fromJsonObject(QJsonObject json) {

    m_alliance_id_isValid = ::OpenAPI::fromJsonValue(m_alliance_id, json[QString("alliance_id")]);
    m_alliance_id_isSet = !json[QString("alliance_id")].isNull() && m_alliance_id_isValid;

    m_character_id_isValid = ::OpenAPI::fromJsonValue(m_character_id, json[QString("character_id")]);
    m_character_id_isSet = !json[QString("character_id")].isNull() && m_character_id_isValid;

    m_corporation_id_isValid = ::OpenAPI::fromJsonValue(m_corporation_id, json[QString("corporation_id")]);
    m_corporation_id_isSet = !json[QString("corporation_id")].isNull() && m_corporation_id_isValid;

    m_damage_done_isValid = ::OpenAPI::fromJsonValue(m_damage_done, json[QString("damage_done")]);
    m_damage_done_isSet = !json[QString("damage_done")].isNull() && m_damage_done_isValid;

    m_faction_id_isValid = ::OpenAPI::fromJsonValue(m_faction_id, json[QString("faction_id")]);
    m_faction_id_isSet = !json[QString("faction_id")].isNull() && m_faction_id_isValid;

    m_final_blow_isValid = ::OpenAPI::fromJsonValue(m_final_blow, json[QString("final_blow")]);
    m_final_blow_isSet = !json[QString("final_blow")].isNull() && m_final_blow_isValid;

    m_security_status_isValid = ::OpenAPI::fromJsonValue(m_security_status, json[QString("security_status")]);
    m_security_status_isSet = !json[QString("security_status")].isNull() && m_security_status_isValid;

    m_ship_type_id_isValid = ::OpenAPI::fromJsonValue(m_ship_type_id, json[QString("ship_type_id")]);
    m_ship_type_id_isSet = !json[QString("ship_type_id")].isNull() && m_ship_type_id_isValid;

    m_weapon_type_id_isValid = ::OpenAPI::fromJsonValue(m_weapon_type_id, json[QString("weapon_type_id")]);
    m_weapon_type_id_isSet = !json[QString("weapon_type_id")].isNull() && m_weapon_type_id_isValid;
}

QString OAIGet_killmails_killmail_id_killmail_hash_attacker::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIGet_killmails_killmail_id_killmail_hash_attacker::asJsonObject() const {
    QJsonObject obj;
    if (m_alliance_id_isSet) {
        obj.insert(QString("alliance_id"), ::OpenAPI::toJsonValue(m_alliance_id));
    }
    if (m_character_id_isSet) {
        obj.insert(QString("character_id"), ::OpenAPI::toJsonValue(m_character_id));
    }
    if (m_corporation_id_isSet) {
        obj.insert(QString("corporation_id"), ::OpenAPI::toJsonValue(m_corporation_id));
    }
    if (m_damage_done_isSet) {
        obj.insert(QString("damage_done"), ::OpenAPI::toJsonValue(m_damage_done));
    }
    if (m_faction_id_isSet) {
        obj.insert(QString("faction_id"), ::OpenAPI::toJsonValue(m_faction_id));
    }
    if (m_final_blow_isSet) {
        obj.insert(QString("final_blow"), ::OpenAPI::toJsonValue(m_final_blow));
    }
    if (m_security_status_isSet) {
        obj.insert(QString("security_status"), ::OpenAPI::toJsonValue(m_security_status));
    }
    if (m_ship_type_id_isSet) {
        obj.insert(QString("ship_type_id"), ::OpenAPI::toJsonValue(m_ship_type_id));
    }
    if (m_weapon_type_id_isSet) {
        obj.insert(QString("weapon_type_id"), ::OpenAPI::toJsonValue(m_weapon_type_id));
    }
    return obj;
}

qint32 OAIGet_killmails_killmail_id_killmail_hash_attacker::getAllianceId() const {
    return m_alliance_id;
}
void OAIGet_killmails_killmail_id_killmail_hash_attacker::setAllianceId(const qint32 &alliance_id) {
    m_alliance_id = alliance_id;
    m_alliance_id_isSet = true;
}

bool OAIGet_killmails_killmail_id_killmail_hash_attacker::is_alliance_id_Set() const{
    return m_alliance_id_isSet;
}

bool OAIGet_killmails_killmail_id_killmail_hash_attacker::is_alliance_id_Valid() const{
    return m_alliance_id_isValid;
}

qint32 OAIGet_killmails_killmail_id_killmail_hash_attacker::getCharacterId() const {
    return m_character_id;
}
void OAIGet_killmails_killmail_id_killmail_hash_attacker::setCharacterId(const qint32 &character_id) {
    m_character_id = character_id;
    m_character_id_isSet = true;
}

bool OAIGet_killmails_killmail_id_killmail_hash_attacker::is_character_id_Set() const{
    return m_character_id_isSet;
}

bool OAIGet_killmails_killmail_id_killmail_hash_attacker::is_character_id_Valid() const{
    return m_character_id_isValid;
}

qint32 OAIGet_killmails_killmail_id_killmail_hash_attacker::getCorporationId() const {
    return m_corporation_id;
}
void OAIGet_killmails_killmail_id_killmail_hash_attacker::setCorporationId(const qint32 &corporation_id) {
    m_corporation_id = corporation_id;
    m_corporation_id_isSet = true;
}

bool OAIGet_killmails_killmail_id_killmail_hash_attacker::is_corporation_id_Set() const{
    return m_corporation_id_isSet;
}

bool OAIGet_killmails_killmail_id_killmail_hash_attacker::is_corporation_id_Valid() const{
    return m_corporation_id_isValid;
}

qint32 OAIGet_killmails_killmail_id_killmail_hash_attacker::getDamageDone() const {
    return m_damage_done;
}
void OAIGet_killmails_killmail_id_killmail_hash_attacker::setDamageDone(const qint32 &damage_done) {
    m_damage_done = damage_done;
    m_damage_done_isSet = true;
}

bool OAIGet_killmails_killmail_id_killmail_hash_attacker::is_damage_done_Set() const{
    return m_damage_done_isSet;
}

bool OAIGet_killmails_killmail_id_killmail_hash_attacker::is_damage_done_Valid() const{
    return m_damage_done_isValid;
}

qint32 OAIGet_killmails_killmail_id_killmail_hash_attacker::getFactionId() const {
    return m_faction_id;
}
void OAIGet_killmails_killmail_id_killmail_hash_attacker::setFactionId(const qint32 &faction_id) {
    m_faction_id = faction_id;
    m_faction_id_isSet = true;
}

bool OAIGet_killmails_killmail_id_killmail_hash_attacker::is_faction_id_Set() const{
    return m_faction_id_isSet;
}

bool OAIGet_killmails_killmail_id_killmail_hash_attacker::is_faction_id_Valid() const{
    return m_faction_id_isValid;
}

bool OAIGet_killmails_killmail_id_killmail_hash_attacker::isFinalBlow() const {
    return m_final_blow;
}
void OAIGet_killmails_killmail_id_killmail_hash_attacker::setFinalBlow(const bool &final_blow) {
    m_final_blow = final_blow;
    m_final_blow_isSet = true;
}

bool OAIGet_killmails_killmail_id_killmail_hash_attacker::is_final_blow_Set() const{
    return m_final_blow_isSet;
}

bool OAIGet_killmails_killmail_id_killmail_hash_attacker::is_final_blow_Valid() const{
    return m_final_blow_isValid;
}

float OAIGet_killmails_killmail_id_killmail_hash_attacker::getSecurityStatus() const {
    return m_security_status;
}
void OAIGet_killmails_killmail_id_killmail_hash_attacker::setSecurityStatus(const float &security_status) {
    m_security_status = security_status;
    m_security_status_isSet = true;
}

bool OAIGet_killmails_killmail_id_killmail_hash_attacker::is_security_status_Set() const{
    return m_security_status_isSet;
}

bool OAIGet_killmails_killmail_id_killmail_hash_attacker::is_security_status_Valid() const{
    return m_security_status_isValid;
}

qint32 OAIGet_killmails_killmail_id_killmail_hash_attacker::getShipTypeId() const {
    return m_ship_type_id;
}
void OAIGet_killmails_killmail_id_killmail_hash_attacker::setShipTypeId(const qint32 &ship_type_id) {
    m_ship_type_id = ship_type_id;
    m_ship_type_id_isSet = true;
}

bool OAIGet_killmails_killmail_id_killmail_hash_attacker::is_ship_type_id_Set() const{
    return m_ship_type_id_isSet;
}

bool OAIGet_killmails_killmail_id_killmail_hash_attacker::is_ship_type_id_Valid() const{
    return m_ship_type_id_isValid;
}

qint32 OAIGet_killmails_killmail_id_killmail_hash_attacker::getWeaponTypeId() const {
    return m_weapon_type_id;
}
void OAIGet_killmails_killmail_id_killmail_hash_attacker::setWeaponTypeId(const qint32 &weapon_type_id) {
    m_weapon_type_id = weapon_type_id;
    m_weapon_type_id_isSet = true;
}

bool OAIGet_killmails_killmail_id_killmail_hash_attacker::is_weapon_type_id_Set() const{
    return m_weapon_type_id_isSet;
}

bool OAIGet_killmails_killmail_id_killmail_hash_attacker::is_weapon_type_id_Valid() const{
    return m_weapon_type_id_isValid;
}

bool OAIGet_killmails_killmail_id_killmail_hash_attacker::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_alliance_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_character_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_corporation_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_damage_done_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_faction_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_final_blow_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_security_status_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_ship_type_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_weapon_type_id_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIGet_killmails_killmail_id_killmail_hash_attacker::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_damage_done_isValid && m_final_blow_isValid && m_security_status_isValid && true;
}

} // namespace OpenAPI
