/**
 * EVE Swagger Interface
 * An OpenAPI for EVE Online
 *
 * The version of the OpenAPI document: 0.8.6
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAIGet_universe_types_type_id_ok.h
 *
 * 200 ok object
 */

#ifndef OAIGet_universe_types_type_id_ok_H
#define OAIGet_universe_types_type_id_ok_H

#include <QJsonObject>

#include "OAIGet_universe_types_type_id_dogma_attribute.h"
#include "OAIGet_universe_types_type_id_dogma_effect.h"
#include <QList>
#include <QString>

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {
class OAIGet_universe_types_type_id_dogma_attribute;
class OAIGet_universe_types_type_id_dogma_effect;

class OAIGet_universe_types_type_id_ok : public OAIObject {
public:
    OAIGet_universe_types_type_id_ok();
    OAIGet_universe_types_type_id_ok(QString json);
    ~OAIGet_universe_types_type_id_ok() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    float getCapacity() const;
    void setCapacity(const float &capacity);
    bool is_capacity_Set() const;
    bool is_capacity_Valid() const;

    QString getDescription() const;
    void setDescription(const QString &description);
    bool is_description_Set() const;
    bool is_description_Valid() const;

    QList<OAIGet_universe_types_type_id_dogma_attribute> getDogmaAttributes() const;
    void setDogmaAttributes(const QList<OAIGet_universe_types_type_id_dogma_attribute> &dogma_attributes);
    bool is_dogma_attributes_Set() const;
    bool is_dogma_attributes_Valid() const;

    QList<OAIGet_universe_types_type_id_dogma_effect> getDogmaEffects() const;
    void setDogmaEffects(const QList<OAIGet_universe_types_type_id_dogma_effect> &dogma_effects);
    bool is_dogma_effects_Set() const;
    bool is_dogma_effects_Valid() const;

    qint32 getGraphicId() const;
    void setGraphicId(const qint32 &graphic_id);
    bool is_graphic_id_Set() const;
    bool is_graphic_id_Valid() const;

    qint32 getGroupId() const;
    void setGroupId(const qint32 &group_id);
    bool is_group_id_Set() const;
    bool is_group_id_Valid() const;

    qint32 getIconId() const;
    void setIconId(const qint32 &icon_id);
    bool is_icon_id_Set() const;
    bool is_icon_id_Valid() const;

    qint32 getMarketGroupId() const;
    void setMarketGroupId(const qint32 &market_group_id);
    bool is_market_group_id_Set() const;
    bool is_market_group_id_Valid() const;

    float getMass() const;
    void setMass(const float &mass);
    bool is_mass_Set() const;
    bool is_mass_Valid() const;

    QString getName() const;
    void setName(const QString &name);
    bool is_name_Set() const;
    bool is_name_Valid() const;

    float getPackagedVolume() const;
    void setPackagedVolume(const float &packaged_volume);
    bool is_packaged_volume_Set() const;
    bool is_packaged_volume_Valid() const;

    qint32 getPortionSize() const;
    void setPortionSize(const qint32 &portion_size);
    bool is_portion_size_Set() const;
    bool is_portion_size_Valid() const;

    bool isPublished() const;
    void setPublished(const bool &published);
    bool is_published_Set() const;
    bool is_published_Valid() const;

    float getRadius() const;
    void setRadius(const float &radius);
    bool is_radius_Set() const;
    bool is_radius_Valid() const;

    qint32 getTypeId() const;
    void setTypeId(const qint32 &type_id);
    bool is_type_id_Set() const;
    bool is_type_id_Valid() const;

    float getVolume() const;
    void setVolume(const float &volume);
    bool is_volume_Set() const;
    bool is_volume_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    float m_capacity;
    bool m_capacity_isSet;
    bool m_capacity_isValid;

    QString m_description;
    bool m_description_isSet;
    bool m_description_isValid;

    QList<OAIGet_universe_types_type_id_dogma_attribute> m_dogma_attributes;
    bool m_dogma_attributes_isSet;
    bool m_dogma_attributes_isValid;

    QList<OAIGet_universe_types_type_id_dogma_effect> m_dogma_effects;
    bool m_dogma_effects_isSet;
    bool m_dogma_effects_isValid;

    qint32 m_graphic_id;
    bool m_graphic_id_isSet;
    bool m_graphic_id_isValid;

    qint32 m_group_id;
    bool m_group_id_isSet;
    bool m_group_id_isValid;

    qint32 m_icon_id;
    bool m_icon_id_isSet;
    bool m_icon_id_isValid;

    qint32 m_market_group_id;
    bool m_market_group_id_isSet;
    bool m_market_group_id_isValid;

    float m_mass;
    bool m_mass_isSet;
    bool m_mass_isValid;

    QString m_name;
    bool m_name_isSet;
    bool m_name_isValid;

    float m_packaged_volume;
    bool m_packaged_volume_isSet;
    bool m_packaged_volume_isValid;

    qint32 m_portion_size;
    bool m_portion_size_isSet;
    bool m_portion_size_isValid;

    bool m_published;
    bool m_published_isSet;
    bool m_published_isValid;

    float m_radius;
    bool m_radius_isSet;
    bool m_radius_isValid;

    qint32 m_type_id;
    bool m_type_id_isSet;
    bool m_type_id_isValid;

    float m_volume;
    bool m_volume_isSet;
    bool m_volume_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAIGet_universe_types_type_id_ok)

#endif // OAIGet_universe_types_type_id_ok_H
