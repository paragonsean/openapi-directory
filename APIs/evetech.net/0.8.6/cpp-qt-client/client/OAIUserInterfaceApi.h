/**
 * EVE Swagger Interface
 * An OpenAPI for EVE Online
 *
 * The version of the OpenAPI document: 0.8.6
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#ifndef OAI_OAIUserInterfaceApi_H
#define OAI_OAIUserInterfaceApi_H

#include "OAIHelpers.h"
#include "OAIHttpRequest.h"
#include "OAIServerConfiguration.h"
#include "OAIOauth.h"

#include "OAIBad_request.h"
#include "OAIError_limited.h"
#include "OAIForbidden.h"
#include "OAIGateway_timeout.h"
#include "OAIInternal_server_error.h"
#include "OAIPost_ui_openwindow_newmail_new_mail.h"
#include "OAIPost_ui_openwindow_newmail_unprocessable_entity.h"
#include "OAIService_unavailable.h"
#include "OAIUnauthorized.h"
#include <QString>

#include <QObject>
#include <QByteArray>
#include <QStringList>
#include <QList>
#include <QNetworkAccessManager>

namespace OpenAPI {

class OAIUserInterfaceApi : public QObject {
    Q_OBJECT

public:
    OAIUserInterfaceApi(const int timeOut = 0);
    ~OAIUserInterfaceApi();

    void initializeServerConfigs();
    int setDefaultServerValue(int serverIndex,const QString &operation, const QString &variable,const QString &val);
    void setServerIndex(const QString &operation, int serverIndex);
    void setApiKey(const QString &apiKeyName, const QString &apiKey);
    void setBearerToken(const QString &token);
    void setUsername(const QString &username);
    void setPassword(const QString &password);
    void setTimeOut(const int timeOut);
    void setWorkingDirectory(const QString &path);
    void setNetworkAccessManager(QNetworkAccessManager* manager);
    int addServerConfiguration(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables = QMap<QString, OAIServerVariable>());
    void setNewServerForAllOperations(const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void setNewServer(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void addHeaders(const QString &key, const QString &value);
    void enableRequestCompression();
    void enableResponseCompression();
    void abortRequests();
    QString getParamStylePrefix(const QString &style);
    QString getParamStyleSuffix(const QString &style);
    QString getParamStyleDelimiter(const QString &style, const QString &name, bool isExplode);

    /**
    * @param[in]  add_to_beginning bool [required]
    * @param[in]  clear_other_waypoints bool [required]
    * @param[in]  destination_id qint64 [required]
    * @param[in]  datasource QString [optional]
    * @param[in]  token QString [optional]
    */
    virtual void postUiAutopilotWaypoint(const bool &add_to_beginning, const bool &clear_other_waypoints, const qint64 &destination_id, const ::OpenAPI::OptionalParam<QString> &datasource = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &token = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  contract_id qint32 [required]
    * @param[in]  datasource QString [optional]
    * @param[in]  token QString [optional]
    */
    virtual void postUiOpenwindowContract(const qint32 &contract_id, const ::OpenAPI::OptionalParam<QString> &datasource = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &token = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  target_id qint32 [required]
    * @param[in]  datasource QString [optional]
    * @param[in]  token QString [optional]
    */
    virtual void postUiOpenwindowInformation(const qint32 &target_id, const ::OpenAPI::OptionalParam<QString> &datasource = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &token = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  type_id qint32 [required]
    * @param[in]  datasource QString [optional]
    * @param[in]  token QString [optional]
    */
    virtual void postUiOpenwindowMarketdetails(const qint32 &type_id, const ::OpenAPI::OptionalParam<QString> &datasource = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &token = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  new_mail OAIPost_ui_openwindow_newmail_new_mail [required]
    * @param[in]  datasource QString [optional]
    * @param[in]  token QString [optional]
    */
    virtual void postUiOpenwindowNewmail(const OAIPost_ui_openwindow_newmail_new_mail &new_mail, const ::OpenAPI::OptionalParam<QString> &datasource = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &token = ::OpenAPI::OptionalParam<QString>());


private:
    QMap<QString,int> _serverIndices;
    QMap<QString,QList<OAIServerConfiguration>> _serverConfigs;
    QMap<QString, QString> _apiKeys;
    QString _bearerToken;
    QString _username;
    QString _password;
    int _timeOut;
    QString _workingDirectory;
    QNetworkAccessManager* _manager;
    QMap<QString, QString> _defaultHeaders;
    bool _isResponseCompressionEnabled;
    bool _isRequestCompressionEnabled;
    OAIHttpRequestInput _latestInput;
    OAIHttpRequestWorker *_latestWorker;
    QStringList _latestScope;
    OauthCode _authFlow;
    OauthImplicit _implicitFlow;
    OauthCredentials _credentialFlow;
    OauthPassword _passwordFlow;
    int _OauthMethod = 0;

    void postUiAutopilotWaypointCallback(OAIHttpRequestWorker *worker);
    void postUiOpenwindowContractCallback(OAIHttpRequestWorker *worker);
    void postUiOpenwindowInformationCallback(OAIHttpRequestWorker *worker);
    void postUiOpenwindowMarketdetailsCallback(OAIHttpRequestWorker *worker);
    void postUiOpenwindowNewmailCallback(OAIHttpRequestWorker *worker);

Q_SIGNALS:

    void postUiAutopilotWaypointSignal();
    void postUiOpenwindowContractSignal();
    void postUiOpenwindowInformationSignal();
    void postUiOpenwindowMarketdetailsSignal();
    void postUiOpenwindowNewmailSignal();


    void postUiAutopilotWaypointSignalFull(OAIHttpRequestWorker *worker);
    void postUiOpenwindowContractSignalFull(OAIHttpRequestWorker *worker);
    void postUiOpenwindowInformationSignalFull(OAIHttpRequestWorker *worker);
    void postUiOpenwindowMarketdetailsSignalFull(OAIHttpRequestWorker *worker);
    void postUiOpenwindowNewmailSignalFull(OAIHttpRequestWorker *worker);

    Q_DECL_DEPRECATED_X("Use postUiAutopilotWaypointSignalError() instead")
    void postUiAutopilotWaypointSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void postUiAutopilotWaypointSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use postUiOpenwindowContractSignalError() instead")
    void postUiOpenwindowContractSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void postUiOpenwindowContractSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use postUiOpenwindowInformationSignalError() instead")
    void postUiOpenwindowInformationSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void postUiOpenwindowInformationSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use postUiOpenwindowMarketdetailsSignalError() instead")
    void postUiOpenwindowMarketdetailsSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void postUiOpenwindowMarketdetailsSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use postUiOpenwindowNewmailSignalError() instead")
    void postUiOpenwindowNewmailSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void postUiOpenwindowNewmailSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);

    Q_DECL_DEPRECATED_X("Use postUiAutopilotWaypointSignalErrorFull() instead")
    void postUiAutopilotWaypointSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void postUiAutopilotWaypointSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use postUiOpenwindowContractSignalErrorFull() instead")
    void postUiOpenwindowContractSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void postUiOpenwindowContractSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use postUiOpenwindowInformationSignalErrorFull() instead")
    void postUiOpenwindowInformationSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void postUiOpenwindowInformationSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use postUiOpenwindowMarketdetailsSignalErrorFull() instead")
    void postUiOpenwindowMarketdetailsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void postUiOpenwindowMarketdetailsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use postUiOpenwindowNewmailSignalErrorFull() instead")
    void postUiOpenwindowNewmailSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void postUiOpenwindowNewmailSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);

    void abortRequestsSignal();
    void allPendingRequestsCompleted();

public Q_SLOTS:
    void tokenAvailable();
};

} // namespace OpenAPI
#endif
