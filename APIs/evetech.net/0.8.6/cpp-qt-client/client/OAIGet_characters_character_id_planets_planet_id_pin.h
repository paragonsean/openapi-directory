/**
 * EVE Swagger Interface
 * An OpenAPI for EVE Online
 *
 * The version of the OpenAPI document: 0.8.6
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAIGet_characters_character_id_planets_planet_id_pin.h
 *
 * pin object
 */

#ifndef OAIGet_characters_character_id_planets_planet_id_pin_H
#define OAIGet_characters_character_id_planets_planet_id_pin_H

#include <QJsonObject>

#include "OAIGet_characters_character_id_planets_planet_id_content.h"
#include "OAIGet_characters_character_id_planets_planet_id_extractor_details.h"
#include "OAIGet_characters_character_id_planets_planet_id_factory_details.h"
#include <QDateTime>
#include <QList>

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {
class OAIGet_characters_character_id_planets_planet_id_content;
class OAIGet_characters_character_id_planets_planet_id_extractor_details;
class OAIGet_characters_character_id_planets_planet_id_factory_details;

class OAIGet_characters_character_id_planets_planet_id_pin : public OAIObject {
public:
    OAIGet_characters_character_id_planets_planet_id_pin();
    OAIGet_characters_character_id_planets_planet_id_pin(QString json);
    ~OAIGet_characters_character_id_planets_planet_id_pin() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    QList<OAIGet_characters_character_id_planets_planet_id_content> getContents() const;
    void setContents(const QList<OAIGet_characters_character_id_planets_planet_id_content> &contents);
    bool is_contents_Set() const;
    bool is_contents_Valid() const;

    QDateTime getExpiryTime() const;
    void setExpiryTime(const QDateTime &expiry_time);
    bool is_expiry_time_Set() const;
    bool is_expiry_time_Valid() const;

    OAIGet_characters_character_id_planets_planet_id_extractor_details getExtractorDetails() const;
    void setExtractorDetails(const OAIGet_characters_character_id_planets_planet_id_extractor_details &extractor_details);
    bool is_extractor_details_Set() const;
    bool is_extractor_details_Valid() const;

    OAIGet_characters_character_id_planets_planet_id_factory_details getFactoryDetails() const;
    void setFactoryDetails(const OAIGet_characters_character_id_planets_planet_id_factory_details &factory_details);
    bool is_factory_details_Set() const;
    bool is_factory_details_Valid() const;

    QDateTime getInstallTime() const;
    void setInstallTime(const QDateTime &install_time);
    bool is_install_time_Set() const;
    bool is_install_time_Valid() const;

    QDateTime getLastCycleStart() const;
    void setLastCycleStart(const QDateTime &last_cycle_start);
    bool is_last_cycle_start_Set() const;
    bool is_last_cycle_start_Valid() const;

    float getLatitude() const;
    void setLatitude(const float &latitude);
    bool is_latitude_Set() const;
    bool is_latitude_Valid() const;

    float getLongitude() const;
    void setLongitude(const float &longitude);
    bool is_longitude_Set() const;
    bool is_longitude_Valid() const;

    qint64 getPinId() const;
    void setPinId(const qint64 &pin_id);
    bool is_pin_id_Set() const;
    bool is_pin_id_Valid() const;

    qint32 getSchematicId() const;
    void setSchematicId(const qint32 &schematic_id);
    bool is_schematic_id_Set() const;
    bool is_schematic_id_Valid() const;

    qint32 getTypeId() const;
    void setTypeId(const qint32 &type_id);
    bool is_type_id_Set() const;
    bool is_type_id_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    QList<OAIGet_characters_character_id_planets_planet_id_content> m_contents;
    bool m_contents_isSet;
    bool m_contents_isValid;

    QDateTime m_expiry_time;
    bool m_expiry_time_isSet;
    bool m_expiry_time_isValid;

    OAIGet_characters_character_id_planets_planet_id_extractor_details m_extractor_details;
    bool m_extractor_details_isSet;
    bool m_extractor_details_isValid;

    OAIGet_characters_character_id_planets_planet_id_factory_details m_factory_details;
    bool m_factory_details_isSet;
    bool m_factory_details_isValid;

    QDateTime m_install_time;
    bool m_install_time_isSet;
    bool m_install_time_isValid;

    QDateTime m_last_cycle_start;
    bool m_last_cycle_start_isSet;
    bool m_last_cycle_start_isValid;

    float m_latitude;
    bool m_latitude_isSet;
    bool m_latitude_isValid;

    float m_longitude;
    bool m_longitude_isSet;
    bool m_longitude_isValid;

    qint64 m_pin_id;
    bool m_pin_id_isSet;
    bool m_pin_id_isValid;

    qint32 m_schematic_id;
    bool m_schematic_id_isSet;
    bool m_schematic_id_isValid;

    qint32 m_type_id;
    bool m_type_id_isSet;
    bool m_type_id_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAIGet_characters_character_id_planets_planet_id_pin)

#endif // OAIGet_characters_character_id_planets_planet_id_pin_H
