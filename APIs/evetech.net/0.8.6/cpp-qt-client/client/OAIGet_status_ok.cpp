/**
 * EVE Swagger Interface
 * An OpenAPI for EVE Online
 *
 * The version of the OpenAPI document: 0.8.6
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIGet_status_ok.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIGet_status_ok::OAIGet_status_ok(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIGet_status_ok::OAIGet_status_ok() {
    this->initializeModel();
}

OAIGet_status_ok::~OAIGet_status_ok() {}

void OAIGet_status_ok::initializeModel() {

    m_players_isSet = false;
    m_players_isValid = false;

    m_server_version_isSet = false;
    m_server_version_isValid = false;

    m_start_time_isSet = false;
    m_start_time_isValid = false;

    m_vip_isSet = false;
    m_vip_isValid = false;
}

void OAIGet_status_ok::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIGet_status_ok::fromJsonObject(QJsonObject json) {

    m_players_isValid = ::OpenAPI::fromJsonValue(m_players, json[QString("players")]);
    m_players_isSet = !json[QString("players")].isNull() && m_players_isValid;

    m_server_version_isValid = ::OpenAPI::fromJsonValue(m_server_version, json[QString("server_version")]);
    m_server_version_isSet = !json[QString("server_version")].isNull() && m_server_version_isValid;

    m_start_time_isValid = ::OpenAPI::fromJsonValue(m_start_time, json[QString("start_time")]);
    m_start_time_isSet = !json[QString("start_time")].isNull() && m_start_time_isValid;

    m_vip_isValid = ::OpenAPI::fromJsonValue(m_vip, json[QString("vip")]);
    m_vip_isSet = !json[QString("vip")].isNull() && m_vip_isValid;
}

QString OAIGet_status_ok::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIGet_status_ok::asJsonObject() const {
    QJsonObject obj;
    if (m_players_isSet) {
        obj.insert(QString("players"), ::OpenAPI::toJsonValue(m_players));
    }
    if (m_server_version_isSet) {
        obj.insert(QString("server_version"), ::OpenAPI::toJsonValue(m_server_version));
    }
    if (m_start_time_isSet) {
        obj.insert(QString("start_time"), ::OpenAPI::toJsonValue(m_start_time));
    }
    if (m_vip_isSet) {
        obj.insert(QString("vip"), ::OpenAPI::toJsonValue(m_vip));
    }
    return obj;
}

qint32 OAIGet_status_ok::getPlayers() const {
    return m_players;
}
void OAIGet_status_ok::setPlayers(const qint32 &players) {
    m_players = players;
    m_players_isSet = true;
}

bool OAIGet_status_ok::is_players_Set() const{
    return m_players_isSet;
}

bool OAIGet_status_ok::is_players_Valid() const{
    return m_players_isValid;
}

QString OAIGet_status_ok::getServerVersion() const {
    return m_server_version;
}
void OAIGet_status_ok::setServerVersion(const QString &server_version) {
    m_server_version = server_version;
    m_server_version_isSet = true;
}

bool OAIGet_status_ok::is_server_version_Set() const{
    return m_server_version_isSet;
}

bool OAIGet_status_ok::is_server_version_Valid() const{
    return m_server_version_isValid;
}

QDateTime OAIGet_status_ok::getStartTime() const {
    return m_start_time;
}
void OAIGet_status_ok::setStartTime(const QDateTime &start_time) {
    m_start_time = start_time;
    m_start_time_isSet = true;
}

bool OAIGet_status_ok::is_start_time_Set() const{
    return m_start_time_isSet;
}

bool OAIGet_status_ok::is_start_time_Valid() const{
    return m_start_time_isValid;
}

bool OAIGet_status_ok::isVip() const {
    return m_vip;
}
void OAIGet_status_ok::setVip(const bool &vip) {
    m_vip = vip;
    m_vip_isSet = true;
}

bool OAIGet_status_ok::is_vip_Set() const{
    return m_vip_isSet;
}

bool OAIGet_status_ok::is_vip_Valid() const{
    return m_vip_isValid;
}

bool OAIGet_status_ok::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_players_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_server_version_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_start_time_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_vip_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIGet_status_ok::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_players_isValid && m_server_version_isValid && m_start_time_isValid && true;
}

} // namespace OpenAPI
