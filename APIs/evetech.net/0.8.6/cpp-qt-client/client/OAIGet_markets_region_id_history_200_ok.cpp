/**
 * EVE Swagger Interface
 * An OpenAPI for EVE Online
 *
 * The version of the OpenAPI document: 0.8.6
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIGet_markets_region_id_history_200_ok.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIGet_markets_region_id_history_200_ok::OAIGet_markets_region_id_history_200_ok(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIGet_markets_region_id_history_200_ok::OAIGet_markets_region_id_history_200_ok() {
    this->initializeModel();
}

OAIGet_markets_region_id_history_200_ok::~OAIGet_markets_region_id_history_200_ok() {}

void OAIGet_markets_region_id_history_200_ok::initializeModel() {

    m_average_isSet = false;
    m_average_isValid = false;

    m_date_isSet = false;
    m_date_isValid = false;

    m_highest_isSet = false;
    m_highest_isValid = false;

    m_lowest_isSet = false;
    m_lowest_isValid = false;

    m_order_count_isSet = false;
    m_order_count_isValid = false;

    m_volume_isSet = false;
    m_volume_isValid = false;
}

void OAIGet_markets_region_id_history_200_ok::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIGet_markets_region_id_history_200_ok::fromJsonObject(QJsonObject json) {

    m_average_isValid = ::OpenAPI::fromJsonValue(m_average, json[QString("average")]);
    m_average_isSet = !json[QString("average")].isNull() && m_average_isValid;

    m_date_isValid = ::OpenAPI::fromJsonValue(m_date, json[QString("date")]);
    m_date_isSet = !json[QString("date")].isNull() && m_date_isValid;

    m_highest_isValid = ::OpenAPI::fromJsonValue(m_highest, json[QString("highest")]);
    m_highest_isSet = !json[QString("highest")].isNull() && m_highest_isValid;

    m_lowest_isValid = ::OpenAPI::fromJsonValue(m_lowest, json[QString("lowest")]);
    m_lowest_isSet = !json[QString("lowest")].isNull() && m_lowest_isValid;

    m_order_count_isValid = ::OpenAPI::fromJsonValue(m_order_count, json[QString("order_count")]);
    m_order_count_isSet = !json[QString("order_count")].isNull() && m_order_count_isValid;

    m_volume_isValid = ::OpenAPI::fromJsonValue(m_volume, json[QString("volume")]);
    m_volume_isSet = !json[QString("volume")].isNull() && m_volume_isValid;
}

QString OAIGet_markets_region_id_history_200_ok::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIGet_markets_region_id_history_200_ok::asJsonObject() const {
    QJsonObject obj;
    if (m_average_isSet) {
        obj.insert(QString("average"), ::OpenAPI::toJsonValue(m_average));
    }
    if (m_date_isSet) {
        obj.insert(QString("date"), ::OpenAPI::toJsonValue(m_date));
    }
    if (m_highest_isSet) {
        obj.insert(QString("highest"), ::OpenAPI::toJsonValue(m_highest));
    }
    if (m_lowest_isSet) {
        obj.insert(QString("lowest"), ::OpenAPI::toJsonValue(m_lowest));
    }
    if (m_order_count_isSet) {
        obj.insert(QString("order_count"), ::OpenAPI::toJsonValue(m_order_count));
    }
    if (m_volume_isSet) {
        obj.insert(QString("volume"), ::OpenAPI::toJsonValue(m_volume));
    }
    return obj;
}

double OAIGet_markets_region_id_history_200_ok::getAverage() const {
    return m_average;
}
void OAIGet_markets_region_id_history_200_ok::setAverage(const double &average) {
    m_average = average;
    m_average_isSet = true;
}

bool OAIGet_markets_region_id_history_200_ok::is_average_Set() const{
    return m_average_isSet;
}

bool OAIGet_markets_region_id_history_200_ok::is_average_Valid() const{
    return m_average_isValid;
}

QDate OAIGet_markets_region_id_history_200_ok::getDate() const {
    return m_date;
}
void OAIGet_markets_region_id_history_200_ok::setDate(const QDate &date) {
    m_date = date;
    m_date_isSet = true;
}

bool OAIGet_markets_region_id_history_200_ok::is_date_Set() const{
    return m_date_isSet;
}

bool OAIGet_markets_region_id_history_200_ok::is_date_Valid() const{
    return m_date_isValid;
}

double OAIGet_markets_region_id_history_200_ok::getHighest() const {
    return m_highest;
}
void OAIGet_markets_region_id_history_200_ok::setHighest(const double &highest) {
    m_highest = highest;
    m_highest_isSet = true;
}

bool OAIGet_markets_region_id_history_200_ok::is_highest_Set() const{
    return m_highest_isSet;
}

bool OAIGet_markets_region_id_history_200_ok::is_highest_Valid() const{
    return m_highest_isValid;
}

double OAIGet_markets_region_id_history_200_ok::getLowest() const {
    return m_lowest;
}
void OAIGet_markets_region_id_history_200_ok::setLowest(const double &lowest) {
    m_lowest = lowest;
    m_lowest_isSet = true;
}

bool OAIGet_markets_region_id_history_200_ok::is_lowest_Set() const{
    return m_lowest_isSet;
}

bool OAIGet_markets_region_id_history_200_ok::is_lowest_Valid() const{
    return m_lowest_isValid;
}

qint64 OAIGet_markets_region_id_history_200_ok::getOrderCount() const {
    return m_order_count;
}
void OAIGet_markets_region_id_history_200_ok::setOrderCount(const qint64 &order_count) {
    m_order_count = order_count;
    m_order_count_isSet = true;
}

bool OAIGet_markets_region_id_history_200_ok::is_order_count_Set() const{
    return m_order_count_isSet;
}

bool OAIGet_markets_region_id_history_200_ok::is_order_count_Valid() const{
    return m_order_count_isValid;
}

qint64 OAIGet_markets_region_id_history_200_ok::getVolume() const {
    return m_volume;
}
void OAIGet_markets_region_id_history_200_ok::setVolume(const qint64 &volume) {
    m_volume = volume;
    m_volume_isSet = true;
}

bool OAIGet_markets_region_id_history_200_ok::is_volume_Set() const{
    return m_volume_isSet;
}

bool OAIGet_markets_region_id_history_200_ok::is_volume_Valid() const{
    return m_volume_isValid;
}

bool OAIGet_markets_region_id_history_200_ok::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_average_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_date_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_highest_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_lowest_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_order_count_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_volume_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIGet_markets_region_id_history_200_ok::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_average_isValid && m_date_isValid && m_highest_isValid && m_lowest_isValid && m_order_count_isValid && m_volume_isValid && true;
}

} // namespace OpenAPI
