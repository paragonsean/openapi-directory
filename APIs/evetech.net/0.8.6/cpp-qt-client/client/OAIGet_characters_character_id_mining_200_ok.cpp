/**
 * EVE Swagger Interface
 * An OpenAPI for EVE Online
 *
 * The version of the OpenAPI document: 0.8.6
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIGet_characters_character_id_mining_200_ok.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIGet_characters_character_id_mining_200_ok::OAIGet_characters_character_id_mining_200_ok(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIGet_characters_character_id_mining_200_ok::OAIGet_characters_character_id_mining_200_ok() {
    this->initializeModel();
}

OAIGet_characters_character_id_mining_200_ok::~OAIGet_characters_character_id_mining_200_ok() {}

void OAIGet_characters_character_id_mining_200_ok::initializeModel() {

    m_date_isSet = false;
    m_date_isValid = false;

    m_quantity_isSet = false;
    m_quantity_isValid = false;

    m_solar_system_id_isSet = false;
    m_solar_system_id_isValid = false;

    m_type_id_isSet = false;
    m_type_id_isValid = false;
}

void OAIGet_characters_character_id_mining_200_ok::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIGet_characters_character_id_mining_200_ok::fromJsonObject(QJsonObject json) {

    m_date_isValid = ::OpenAPI::fromJsonValue(m_date, json[QString("date")]);
    m_date_isSet = !json[QString("date")].isNull() && m_date_isValid;

    m_quantity_isValid = ::OpenAPI::fromJsonValue(m_quantity, json[QString("quantity")]);
    m_quantity_isSet = !json[QString("quantity")].isNull() && m_quantity_isValid;

    m_solar_system_id_isValid = ::OpenAPI::fromJsonValue(m_solar_system_id, json[QString("solar_system_id")]);
    m_solar_system_id_isSet = !json[QString("solar_system_id")].isNull() && m_solar_system_id_isValid;

    m_type_id_isValid = ::OpenAPI::fromJsonValue(m_type_id, json[QString("type_id")]);
    m_type_id_isSet = !json[QString("type_id")].isNull() && m_type_id_isValid;
}

QString OAIGet_characters_character_id_mining_200_ok::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIGet_characters_character_id_mining_200_ok::asJsonObject() const {
    QJsonObject obj;
    if (m_date_isSet) {
        obj.insert(QString("date"), ::OpenAPI::toJsonValue(m_date));
    }
    if (m_quantity_isSet) {
        obj.insert(QString("quantity"), ::OpenAPI::toJsonValue(m_quantity));
    }
    if (m_solar_system_id_isSet) {
        obj.insert(QString("solar_system_id"), ::OpenAPI::toJsonValue(m_solar_system_id));
    }
    if (m_type_id_isSet) {
        obj.insert(QString("type_id"), ::OpenAPI::toJsonValue(m_type_id));
    }
    return obj;
}

QDate OAIGet_characters_character_id_mining_200_ok::getDate() const {
    return m_date;
}
void OAIGet_characters_character_id_mining_200_ok::setDate(const QDate &date) {
    m_date = date;
    m_date_isSet = true;
}

bool OAIGet_characters_character_id_mining_200_ok::is_date_Set() const{
    return m_date_isSet;
}

bool OAIGet_characters_character_id_mining_200_ok::is_date_Valid() const{
    return m_date_isValid;
}

qint64 OAIGet_characters_character_id_mining_200_ok::getQuantity() const {
    return m_quantity;
}
void OAIGet_characters_character_id_mining_200_ok::setQuantity(const qint64 &quantity) {
    m_quantity = quantity;
    m_quantity_isSet = true;
}

bool OAIGet_characters_character_id_mining_200_ok::is_quantity_Set() const{
    return m_quantity_isSet;
}

bool OAIGet_characters_character_id_mining_200_ok::is_quantity_Valid() const{
    return m_quantity_isValid;
}

qint32 OAIGet_characters_character_id_mining_200_ok::getSolarSystemId() const {
    return m_solar_system_id;
}
void OAIGet_characters_character_id_mining_200_ok::setSolarSystemId(const qint32 &solar_system_id) {
    m_solar_system_id = solar_system_id;
    m_solar_system_id_isSet = true;
}

bool OAIGet_characters_character_id_mining_200_ok::is_solar_system_id_Set() const{
    return m_solar_system_id_isSet;
}

bool OAIGet_characters_character_id_mining_200_ok::is_solar_system_id_Valid() const{
    return m_solar_system_id_isValid;
}

qint32 OAIGet_characters_character_id_mining_200_ok::getTypeId() const {
    return m_type_id;
}
void OAIGet_characters_character_id_mining_200_ok::setTypeId(const qint32 &type_id) {
    m_type_id = type_id;
    m_type_id_isSet = true;
}

bool OAIGet_characters_character_id_mining_200_ok::is_type_id_Set() const{
    return m_type_id_isSet;
}

bool OAIGet_characters_character_id_mining_200_ok::is_type_id_Valid() const{
    return m_type_id_isValid;
}

bool OAIGet_characters_character_id_mining_200_ok::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_date_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_quantity_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_solar_system_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_type_id_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIGet_characters_character_id_mining_200_ok::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_date_isValid && m_quantity_isValid && m_solar_system_id_isValid && m_type_id_isValid && true;
}

} // namespace OpenAPI
