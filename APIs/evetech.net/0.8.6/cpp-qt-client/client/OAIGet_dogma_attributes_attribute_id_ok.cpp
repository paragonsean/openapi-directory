/**
 * EVE Swagger Interface
 * An OpenAPI for EVE Online
 *
 * The version of the OpenAPI document: 0.8.6
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIGet_dogma_attributes_attribute_id_ok.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIGet_dogma_attributes_attribute_id_ok::OAIGet_dogma_attributes_attribute_id_ok(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIGet_dogma_attributes_attribute_id_ok::OAIGet_dogma_attributes_attribute_id_ok() {
    this->initializeModel();
}

OAIGet_dogma_attributes_attribute_id_ok::~OAIGet_dogma_attributes_attribute_id_ok() {}

void OAIGet_dogma_attributes_attribute_id_ok::initializeModel() {

    m_attribute_id_isSet = false;
    m_attribute_id_isValid = false;

    m_default_value_isSet = false;
    m_default_value_isValid = false;

    m_description_isSet = false;
    m_description_isValid = false;

    m_display_name_isSet = false;
    m_display_name_isValid = false;

    m_high_is_good_isSet = false;
    m_high_is_good_isValid = false;

    m_icon_id_isSet = false;
    m_icon_id_isValid = false;

    m_name_isSet = false;
    m_name_isValid = false;

    m_published_isSet = false;
    m_published_isValid = false;

    m_stackable_isSet = false;
    m_stackable_isValid = false;

    m_unit_id_isSet = false;
    m_unit_id_isValid = false;
}

void OAIGet_dogma_attributes_attribute_id_ok::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIGet_dogma_attributes_attribute_id_ok::fromJsonObject(QJsonObject json) {

    m_attribute_id_isValid = ::OpenAPI::fromJsonValue(m_attribute_id, json[QString("attribute_id")]);
    m_attribute_id_isSet = !json[QString("attribute_id")].isNull() && m_attribute_id_isValid;

    m_default_value_isValid = ::OpenAPI::fromJsonValue(m_default_value, json[QString("default_value")]);
    m_default_value_isSet = !json[QString("default_value")].isNull() && m_default_value_isValid;

    m_description_isValid = ::OpenAPI::fromJsonValue(m_description, json[QString("description")]);
    m_description_isSet = !json[QString("description")].isNull() && m_description_isValid;

    m_display_name_isValid = ::OpenAPI::fromJsonValue(m_display_name, json[QString("display_name")]);
    m_display_name_isSet = !json[QString("display_name")].isNull() && m_display_name_isValid;

    m_high_is_good_isValid = ::OpenAPI::fromJsonValue(m_high_is_good, json[QString("high_is_good")]);
    m_high_is_good_isSet = !json[QString("high_is_good")].isNull() && m_high_is_good_isValid;

    m_icon_id_isValid = ::OpenAPI::fromJsonValue(m_icon_id, json[QString("icon_id")]);
    m_icon_id_isSet = !json[QString("icon_id")].isNull() && m_icon_id_isValid;

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("name")]);
    m_name_isSet = !json[QString("name")].isNull() && m_name_isValid;

    m_published_isValid = ::OpenAPI::fromJsonValue(m_published, json[QString("published")]);
    m_published_isSet = !json[QString("published")].isNull() && m_published_isValid;

    m_stackable_isValid = ::OpenAPI::fromJsonValue(m_stackable, json[QString("stackable")]);
    m_stackable_isSet = !json[QString("stackable")].isNull() && m_stackable_isValid;

    m_unit_id_isValid = ::OpenAPI::fromJsonValue(m_unit_id, json[QString("unit_id")]);
    m_unit_id_isSet = !json[QString("unit_id")].isNull() && m_unit_id_isValid;
}

QString OAIGet_dogma_attributes_attribute_id_ok::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIGet_dogma_attributes_attribute_id_ok::asJsonObject() const {
    QJsonObject obj;
    if (m_attribute_id_isSet) {
        obj.insert(QString("attribute_id"), ::OpenAPI::toJsonValue(m_attribute_id));
    }
    if (m_default_value_isSet) {
        obj.insert(QString("default_value"), ::OpenAPI::toJsonValue(m_default_value));
    }
    if (m_description_isSet) {
        obj.insert(QString("description"), ::OpenAPI::toJsonValue(m_description));
    }
    if (m_display_name_isSet) {
        obj.insert(QString("display_name"), ::OpenAPI::toJsonValue(m_display_name));
    }
    if (m_high_is_good_isSet) {
        obj.insert(QString("high_is_good"), ::OpenAPI::toJsonValue(m_high_is_good));
    }
    if (m_icon_id_isSet) {
        obj.insert(QString("icon_id"), ::OpenAPI::toJsonValue(m_icon_id));
    }
    if (m_name_isSet) {
        obj.insert(QString("name"), ::OpenAPI::toJsonValue(m_name));
    }
    if (m_published_isSet) {
        obj.insert(QString("published"), ::OpenAPI::toJsonValue(m_published));
    }
    if (m_stackable_isSet) {
        obj.insert(QString("stackable"), ::OpenAPI::toJsonValue(m_stackable));
    }
    if (m_unit_id_isSet) {
        obj.insert(QString("unit_id"), ::OpenAPI::toJsonValue(m_unit_id));
    }
    return obj;
}

qint32 OAIGet_dogma_attributes_attribute_id_ok::getAttributeId() const {
    return m_attribute_id;
}
void OAIGet_dogma_attributes_attribute_id_ok::setAttributeId(const qint32 &attribute_id) {
    m_attribute_id = attribute_id;
    m_attribute_id_isSet = true;
}

bool OAIGet_dogma_attributes_attribute_id_ok::is_attribute_id_Set() const{
    return m_attribute_id_isSet;
}

bool OAIGet_dogma_attributes_attribute_id_ok::is_attribute_id_Valid() const{
    return m_attribute_id_isValid;
}

float OAIGet_dogma_attributes_attribute_id_ok::getDefaultValue() const {
    return m_default_value;
}
void OAIGet_dogma_attributes_attribute_id_ok::setDefaultValue(const float &default_value) {
    m_default_value = default_value;
    m_default_value_isSet = true;
}

bool OAIGet_dogma_attributes_attribute_id_ok::is_default_value_Set() const{
    return m_default_value_isSet;
}

bool OAIGet_dogma_attributes_attribute_id_ok::is_default_value_Valid() const{
    return m_default_value_isValid;
}

QString OAIGet_dogma_attributes_attribute_id_ok::getDescription() const {
    return m_description;
}
void OAIGet_dogma_attributes_attribute_id_ok::setDescription(const QString &description) {
    m_description = description;
    m_description_isSet = true;
}

bool OAIGet_dogma_attributes_attribute_id_ok::is_description_Set() const{
    return m_description_isSet;
}

bool OAIGet_dogma_attributes_attribute_id_ok::is_description_Valid() const{
    return m_description_isValid;
}

QString OAIGet_dogma_attributes_attribute_id_ok::getDisplayName() const {
    return m_display_name;
}
void OAIGet_dogma_attributes_attribute_id_ok::setDisplayName(const QString &display_name) {
    m_display_name = display_name;
    m_display_name_isSet = true;
}

bool OAIGet_dogma_attributes_attribute_id_ok::is_display_name_Set() const{
    return m_display_name_isSet;
}

bool OAIGet_dogma_attributes_attribute_id_ok::is_display_name_Valid() const{
    return m_display_name_isValid;
}

bool OAIGet_dogma_attributes_attribute_id_ok::isHighIsGood() const {
    return m_high_is_good;
}
void OAIGet_dogma_attributes_attribute_id_ok::setHighIsGood(const bool &high_is_good) {
    m_high_is_good = high_is_good;
    m_high_is_good_isSet = true;
}

bool OAIGet_dogma_attributes_attribute_id_ok::is_high_is_good_Set() const{
    return m_high_is_good_isSet;
}

bool OAIGet_dogma_attributes_attribute_id_ok::is_high_is_good_Valid() const{
    return m_high_is_good_isValid;
}

qint32 OAIGet_dogma_attributes_attribute_id_ok::getIconId() const {
    return m_icon_id;
}
void OAIGet_dogma_attributes_attribute_id_ok::setIconId(const qint32 &icon_id) {
    m_icon_id = icon_id;
    m_icon_id_isSet = true;
}

bool OAIGet_dogma_attributes_attribute_id_ok::is_icon_id_Set() const{
    return m_icon_id_isSet;
}

bool OAIGet_dogma_attributes_attribute_id_ok::is_icon_id_Valid() const{
    return m_icon_id_isValid;
}

QString OAIGet_dogma_attributes_attribute_id_ok::getName() const {
    return m_name;
}
void OAIGet_dogma_attributes_attribute_id_ok::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAIGet_dogma_attributes_attribute_id_ok::is_name_Set() const{
    return m_name_isSet;
}

bool OAIGet_dogma_attributes_attribute_id_ok::is_name_Valid() const{
    return m_name_isValid;
}

bool OAIGet_dogma_attributes_attribute_id_ok::isPublished() const {
    return m_published;
}
void OAIGet_dogma_attributes_attribute_id_ok::setPublished(const bool &published) {
    m_published = published;
    m_published_isSet = true;
}

bool OAIGet_dogma_attributes_attribute_id_ok::is_published_Set() const{
    return m_published_isSet;
}

bool OAIGet_dogma_attributes_attribute_id_ok::is_published_Valid() const{
    return m_published_isValid;
}

bool OAIGet_dogma_attributes_attribute_id_ok::isStackable() const {
    return m_stackable;
}
void OAIGet_dogma_attributes_attribute_id_ok::setStackable(const bool &stackable) {
    m_stackable = stackable;
    m_stackable_isSet = true;
}

bool OAIGet_dogma_attributes_attribute_id_ok::is_stackable_Set() const{
    return m_stackable_isSet;
}

bool OAIGet_dogma_attributes_attribute_id_ok::is_stackable_Valid() const{
    return m_stackable_isValid;
}

qint32 OAIGet_dogma_attributes_attribute_id_ok::getUnitId() const {
    return m_unit_id;
}
void OAIGet_dogma_attributes_attribute_id_ok::setUnitId(const qint32 &unit_id) {
    m_unit_id = unit_id;
    m_unit_id_isSet = true;
}

bool OAIGet_dogma_attributes_attribute_id_ok::is_unit_id_Set() const{
    return m_unit_id_isSet;
}

bool OAIGet_dogma_attributes_attribute_id_ok::is_unit_id_Valid() const{
    return m_unit_id_isValid;
}

bool OAIGet_dogma_attributes_attribute_id_ok::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_attribute_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_default_value_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_description_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_display_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_high_is_good_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_icon_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_published_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_stackable_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_unit_id_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIGet_dogma_attributes_attribute_id_ok::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_attribute_id_isValid && true;
}

} // namespace OpenAPI
