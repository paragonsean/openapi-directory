/**
 * EVE Swagger Interface
 * An OpenAPI for EVE Online
 *
 * The version of the OpenAPI document: 0.8.6
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAIGet_universe_stations_station_id_ok.h
 *
 * 200 ok object
 */

#ifndef OAIGet_universe_stations_station_id_ok_H
#define OAIGet_universe_stations_station_id_ok_H

#include <QJsonObject>

#include "OAIGet_universe_stations_station_id_position.h"
#include <QList>
#include <QString>

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {
class OAIGet_universe_stations_station_id_position;

class OAIGet_universe_stations_station_id_ok : public OAIObject {
public:
    OAIGet_universe_stations_station_id_ok();
    OAIGet_universe_stations_station_id_ok(QString json);
    ~OAIGet_universe_stations_station_id_ok() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    float getMaxDockableShipVolume() const;
    void setMaxDockableShipVolume(const float &max_dockable_ship_volume);
    bool is_max_dockable_ship_volume_Set() const;
    bool is_max_dockable_ship_volume_Valid() const;

    QString getName() const;
    void setName(const QString &name);
    bool is_name_Set() const;
    bool is_name_Valid() const;

    float getOfficeRentalCost() const;
    void setOfficeRentalCost(const float &office_rental_cost);
    bool is_office_rental_cost_Set() const;
    bool is_office_rental_cost_Valid() const;

    qint32 getOwner() const;
    void setOwner(const qint32 &owner);
    bool is_owner_Set() const;
    bool is_owner_Valid() const;

    OAIGet_universe_stations_station_id_position getPosition() const;
    void setPosition(const OAIGet_universe_stations_station_id_position &position);
    bool is_position_Set() const;
    bool is_position_Valid() const;

    qint32 getRaceId() const;
    void setRaceId(const qint32 &race_id);
    bool is_race_id_Set() const;
    bool is_race_id_Valid() const;

    float getReprocessingEfficiency() const;
    void setReprocessingEfficiency(const float &reprocessing_efficiency);
    bool is_reprocessing_efficiency_Set() const;
    bool is_reprocessing_efficiency_Valid() const;

    float getReprocessingStationsTake() const;
    void setReprocessingStationsTake(const float &reprocessing_stations_take);
    bool is_reprocessing_stations_take_Set() const;
    bool is_reprocessing_stations_take_Valid() const;

    QList<QString> getServices() const;
    void setServices(const QList<QString> &services);
    bool is_services_Set() const;
    bool is_services_Valid() const;

    qint32 getStationId() const;
    void setStationId(const qint32 &station_id);
    bool is_station_id_Set() const;
    bool is_station_id_Valid() const;

    qint32 getSystemId() const;
    void setSystemId(const qint32 &system_id);
    bool is_system_id_Set() const;
    bool is_system_id_Valid() const;

    qint32 getTypeId() const;
    void setTypeId(const qint32 &type_id);
    bool is_type_id_Set() const;
    bool is_type_id_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    float m_max_dockable_ship_volume;
    bool m_max_dockable_ship_volume_isSet;
    bool m_max_dockable_ship_volume_isValid;

    QString m_name;
    bool m_name_isSet;
    bool m_name_isValid;

    float m_office_rental_cost;
    bool m_office_rental_cost_isSet;
    bool m_office_rental_cost_isValid;

    qint32 m_owner;
    bool m_owner_isSet;
    bool m_owner_isValid;

    OAIGet_universe_stations_station_id_position m_position;
    bool m_position_isSet;
    bool m_position_isValid;

    qint32 m_race_id;
    bool m_race_id_isSet;
    bool m_race_id_isValid;

    float m_reprocessing_efficiency;
    bool m_reprocessing_efficiency_isSet;
    bool m_reprocessing_efficiency_isValid;

    float m_reprocessing_stations_take;
    bool m_reprocessing_stations_take_isSet;
    bool m_reprocessing_stations_take_isValid;

    QList<QString> m_services;
    bool m_services_isSet;
    bool m_services_isValid;

    qint32 m_station_id;
    bool m_station_id_isSet;
    bool m_station_id_isValid;

    qint32 m_system_id;
    bool m_system_id_isSet;
    bool m_system_id_isValid;

    qint32 m_type_id;
    bool m_type_id_isSet;
    bool m_type_id_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAIGet_universe_stations_station_id_ok)

#endif // OAIGet_universe_stations_station_id_ok_H
