/**
 * EVE Swagger Interface
 * An OpenAPI for EVE Online
 *
 * The version of the OpenAPI document: 0.8.6
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIGet_fleets_fleet_id_members_200_ok.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIGet_fleets_fleet_id_members_200_ok::OAIGet_fleets_fleet_id_members_200_ok(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIGet_fleets_fleet_id_members_200_ok::OAIGet_fleets_fleet_id_members_200_ok() {
    this->initializeModel();
}

OAIGet_fleets_fleet_id_members_200_ok::~OAIGet_fleets_fleet_id_members_200_ok() {}

void OAIGet_fleets_fleet_id_members_200_ok::initializeModel() {

    m_character_id_isSet = false;
    m_character_id_isValid = false;

    m_join_time_isSet = false;
    m_join_time_isValid = false;

    m_role_isSet = false;
    m_role_isValid = false;

    m_role_name_isSet = false;
    m_role_name_isValid = false;

    m_ship_type_id_isSet = false;
    m_ship_type_id_isValid = false;

    m_solar_system_id_isSet = false;
    m_solar_system_id_isValid = false;

    m_squad_id_isSet = false;
    m_squad_id_isValid = false;

    m_station_id_isSet = false;
    m_station_id_isValid = false;

    m_takes_fleet_warp_isSet = false;
    m_takes_fleet_warp_isValid = false;

    m_wing_id_isSet = false;
    m_wing_id_isValid = false;
}

void OAIGet_fleets_fleet_id_members_200_ok::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIGet_fleets_fleet_id_members_200_ok::fromJsonObject(QJsonObject json) {

    m_character_id_isValid = ::OpenAPI::fromJsonValue(m_character_id, json[QString("character_id")]);
    m_character_id_isSet = !json[QString("character_id")].isNull() && m_character_id_isValid;

    m_join_time_isValid = ::OpenAPI::fromJsonValue(m_join_time, json[QString("join_time")]);
    m_join_time_isSet = !json[QString("join_time")].isNull() && m_join_time_isValid;

    m_role_isValid = ::OpenAPI::fromJsonValue(m_role, json[QString("role")]);
    m_role_isSet = !json[QString("role")].isNull() && m_role_isValid;

    m_role_name_isValid = ::OpenAPI::fromJsonValue(m_role_name, json[QString("role_name")]);
    m_role_name_isSet = !json[QString("role_name")].isNull() && m_role_name_isValid;

    m_ship_type_id_isValid = ::OpenAPI::fromJsonValue(m_ship_type_id, json[QString("ship_type_id")]);
    m_ship_type_id_isSet = !json[QString("ship_type_id")].isNull() && m_ship_type_id_isValid;

    m_solar_system_id_isValid = ::OpenAPI::fromJsonValue(m_solar_system_id, json[QString("solar_system_id")]);
    m_solar_system_id_isSet = !json[QString("solar_system_id")].isNull() && m_solar_system_id_isValid;

    m_squad_id_isValid = ::OpenAPI::fromJsonValue(m_squad_id, json[QString("squad_id")]);
    m_squad_id_isSet = !json[QString("squad_id")].isNull() && m_squad_id_isValid;

    m_station_id_isValid = ::OpenAPI::fromJsonValue(m_station_id, json[QString("station_id")]);
    m_station_id_isSet = !json[QString("station_id")].isNull() && m_station_id_isValid;

    m_takes_fleet_warp_isValid = ::OpenAPI::fromJsonValue(m_takes_fleet_warp, json[QString("takes_fleet_warp")]);
    m_takes_fleet_warp_isSet = !json[QString("takes_fleet_warp")].isNull() && m_takes_fleet_warp_isValid;

    m_wing_id_isValid = ::OpenAPI::fromJsonValue(m_wing_id, json[QString("wing_id")]);
    m_wing_id_isSet = !json[QString("wing_id")].isNull() && m_wing_id_isValid;
}

QString OAIGet_fleets_fleet_id_members_200_ok::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIGet_fleets_fleet_id_members_200_ok::asJsonObject() const {
    QJsonObject obj;
    if (m_character_id_isSet) {
        obj.insert(QString("character_id"), ::OpenAPI::toJsonValue(m_character_id));
    }
    if (m_join_time_isSet) {
        obj.insert(QString("join_time"), ::OpenAPI::toJsonValue(m_join_time));
    }
    if (m_role_isSet) {
        obj.insert(QString("role"), ::OpenAPI::toJsonValue(m_role));
    }
    if (m_role_name_isSet) {
        obj.insert(QString("role_name"), ::OpenAPI::toJsonValue(m_role_name));
    }
    if (m_ship_type_id_isSet) {
        obj.insert(QString("ship_type_id"), ::OpenAPI::toJsonValue(m_ship_type_id));
    }
    if (m_solar_system_id_isSet) {
        obj.insert(QString("solar_system_id"), ::OpenAPI::toJsonValue(m_solar_system_id));
    }
    if (m_squad_id_isSet) {
        obj.insert(QString("squad_id"), ::OpenAPI::toJsonValue(m_squad_id));
    }
    if (m_station_id_isSet) {
        obj.insert(QString("station_id"), ::OpenAPI::toJsonValue(m_station_id));
    }
    if (m_takes_fleet_warp_isSet) {
        obj.insert(QString("takes_fleet_warp"), ::OpenAPI::toJsonValue(m_takes_fleet_warp));
    }
    if (m_wing_id_isSet) {
        obj.insert(QString("wing_id"), ::OpenAPI::toJsonValue(m_wing_id));
    }
    return obj;
}

qint32 OAIGet_fleets_fleet_id_members_200_ok::getCharacterId() const {
    return m_character_id;
}
void OAIGet_fleets_fleet_id_members_200_ok::setCharacterId(const qint32 &character_id) {
    m_character_id = character_id;
    m_character_id_isSet = true;
}

bool OAIGet_fleets_fleet_id_members_200_ok::is_character_id_Set() const{
    return m_character_id_isSet;
}

bool OAIGet_fleets_fleet_id_members_200_ok::is_character_id_Valid() const{
    return m_character_id_isValid;
}

QDateTime OAIGet_fleets_fleet_id_members_200_ok::getJoinTime() const {
    return m_join_time;
}
void OAIGet_fleets_fleet_id_members_200_ok::setJoinTime(const QDateTime &join_time) {
    m_join_time = join_time;
    m_join_time_isSet = true;
}

bool OAIGet_fleets_fleet_id_members_200_ok::is_join_time_Set() const{
    return m_join_time_isSet;
}

bool OAIGet_fleets_fleet_id_members_200_ok::is_join_time_Valid() const{
    return m_join_time_isValid;
}

QString OAIGet_fleets_fleet_id_members_200_ok::getRole() const {
    return m_role;
}
void OAIGet_fleets_fleet_id_members_200_ok::setRole(const QString &role) {
    m_role = role;
    m_role_isSet = true;
}

bool OAIGet_fleets_fleet_id_members_200_ok::is_role_Set() const{
    return m_role_isSet;
}

bool OAIGet_fleets_fleet_id_members_200_ok::is_role_Valid() const{
    return m_role_isValid;
}

QString OAIGet_fleets_fleet_id_members_200_ok::getRoleName() const {
    return m_role_name;
}
void OAIGet_fleets_fleet_id_members_200_ok::setRoleName(const QString &role_name) {
    m_role_name = role_name;
    m_role_name_isSet = true;
}

bool OAIGet_fleets_fleet_id_members_200_ok::is_role_name_Set() const{
    return m_role_name_isSet;
}

bool OAIGet_fleets_fleet_id_members_200_ok::is_role_name_Valid() const{
    return m_role_name_isValid;
}

qint32 OAIGet_fleets_fleet_id_members_200_ok::getShipTypeId() const {
    return m_ship_type_id;
}
void OAIGet_fleets_fleet_id_members_200_ok::setShipTypeId(const qint32 &ship_type_id) {
    m_ship_type_id = ship_type_id;
    m_ship_type_id_isSet = true;
}

bool OAIGet_fleets_fleet_id_members_200_ok::is_ship_type_id_Set() const{
    return m_ship_type_id_isSet;
}

bool OAIGet_fleets_fleet_id_members_200_ok::is_ship_type_id_Valid() const{
    return m_ship_type_id_isValid;
}

qint32 OAIGet_fleets_fleet_id_members_200_ok::getSolarSystemId() const {
    return m_solar_system_id;
}
void OAIGet_fleets_fleet_id_members_200_ok::setSolarSystemId(const qint32 &solar_system_id) {
    m_solar_system_id = solar_system_id;
    m_solar_system_id_isSet = true;
}

bool OAIGet_fleets_fleet_id_members_200_ok::is_solar_system_id_Set() const{
    return m_solar_system_id_isSet;
}

bool OAIGet_fleets_fleet_id_members_200_ok::is_solar_system_id_Valid() const{
    return m_solar_system_id_isValid;
}

qint64 OAIGet_fleets_fleet_id_members_200_ok::getSquadId() const {
    return m_squad_id;
}
void OAIGet_fleets_fleet_id_members_200_ok::setSquadId(const qint64 &squad_id) {
    m_squad_id = squad_id;
    m_squad_id_isSet = true;
}

bool OAIGet_fleets_fleet_id_members_200_ok::is_squad_id_Set() const{
    return m_squad_id_isSet;
}

bool OAIGet_fleets_fleet_id_members_200_ok::is_squad_id_Valid() const{
    return m_squad_id_isValid;
}

qint64 OAIGet_fleets_fleet_id_members_200_ok::getStationId() const {
    return m_station_id;
}
void OAIGet_fleets_fleet_id_members_200_ok::setStationId(const qint64 &station_id) {
    m_station_id = station_id;
    m_station_id_isSet = true;
}

bool OAIGet_fleets_fleet_id_members_200_ok::is_station_id_Set() const{
    return m_station_id_isSet;
}

bool OAIGet_fleets_fleet_id_members_200_ok::is_station_id_Valid() const{
    return m_station_id_isValid;
}

bool OAIGet_fleets_fleet_id_members_200_ok::isTakesFleetWarp() const {
    return m_takes_fleet_warp;
}
void OAIGet_fleets_fleet_id_members_200_ok::setTakesFleetWarp(const bool &takes_fleet_warp) {
    m_takes_fleet_warp = takes_fleet_warp;
    m_takes_fleet_warp_isSet = true;
}

bool OAIGet_fleets_fleet_id_members_200_ok::is_takes_fleet_warp_Set() const{
    return m_takes_fleet_warp_isSet;
}

bool OAIGet_fleets_fleet_id_members_200_ok::is_takes_fleet_warp_Valid() const{
    return m_takes_fleet_warp_isValid;
}

qint64 OAIGet_fleets_fleet_id_members_200_ok::getWingId() const {
    return m_wing_id;
}
void OAIGet_fleets_fleet_id_members_200_ok::setWingId(const qint64 &wing_id) {
    m_wing_id = wing_id;
    m_wing_id_isSet = true;
}

bool OAIGet_fleets_fleet_id_members_200_ok::is_wing_id_Set() const{
    return m_wing_id_isSet;
}

bool OAIGet_fleets_fleet_id_members_200_ok::is_wing_id_Valid() const{
    return m_wing_id_isValid;
}

bool OAIGet_fleets_fleet_id_members_200_ok::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_character_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_join_time_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_role_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_role_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_ship_type_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_solar_system_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_squad_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_station_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_takes_fleet_warp_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_wing_id_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIGet_fleets_fleet_id_members_200_ok::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_character_id_isValid && m_join_time_isValid && m_role_isValid && m_role_name_isValid && m_ship_type_id_isValid && m_solar_system_id_isValid && m_squad_id_isValid && m_takes_fleet_warp_isValid && m_wing_id_isValid && true;
}

} // namespace OpenAPI
