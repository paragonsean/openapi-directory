/**
 * EVE Swagger Interface
 * An OpenAPI for EVE Online
 *
 * The version of the OpenAPI document: 0.8.6
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#ifndef OAI_OAISearchApi_H
#define OAI_OAISearchApi_H

#include "OAIHelpers.h"
#include "OAIHttpRequest.h"
#include "OAIServerConfiguration.h"
#include "OAIOauth.h"

#include "OAIBad_request.h"
#include "OAIError_limited.h"
#include "OAIForbidden.h"
#include "OAIGateway_timeout.h"
#include "OAIGet_characters_character_id_search_ok.h"
#include "OAIGet_search_ok.h"
#include "OAIInternal_server_error.h"
#include "OAIService_unavailable.h"
#include "OAIUnauthorized.h"
#include <QSet>
#include <QString>

#include <QObject>
#include <QByteArray>
#include <QStringList>
#include <QList>
#include <QNetworkAccessManager>

namespace OpenAPI {

class OAISearchApi : public QObject {
    Q_OBJECT

public:
    OAISearchApi(const int timeOut = 0);
    ~OAISearchApi();

    void initializeServerConfigs();
    int setDefaultServerValue(int serverIndex,const QString &operation, const QString &variable,const QString &val);
    void setServerIndex(const QString &operation, int serverIndex);
    void setApiKey(const QString &apiKeyName, const QString &apiKey);
    void setBearerToken(const QString &token);
    void setUsername(const QString &username);
    void setPassword(const QString &password);
    void setTimeOut(const int timeOut);
    void setWorkingDirectory(const QString &path);
    void setNetworkAccessManager(QNetworkAccessManager* manager);
    int addServerConfiguration(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables = QMap<QString, OAIServerVariable>());
    void setNewServerForAllOperations(const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void setNewServer(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void addHeaders(const QString &key, const QString &value);
    void enableRequestCompression();
    void enableResponseCompression();
    void abortRequests();
    QString getParamStylePrefix(const QString &style);
    QString getParamStyleSuffix(const QString &style);
    QString getParamStyleDelimiter(const QString &style, const QString &name, bool isExplode);

    /**
    * @param[in]  categories QSet<QString> [required]
    * @param[in]  character_id qint32 [required]
    * @param[in]  search QString [required]
    * @param[in]  accept_language QString [optional]
    * @param[in]  datasource QString [optional]
    * @param[in]  if_none_match QString [optional]
    * @param[in]  language QString [optional]
    * @param[in]  strict bool [optional]
    * @param[in]  token QString [optional]
    */
    virtual void getCharactersCharacterIdSearch(const QSet<QString> &categories, const qint32 &character_id, const QString &search, const ::OpenAPI::OptionalParam<QString> &accept_language = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &datasource = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &if_none_match = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &language = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &strict = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QString> &token = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  categories QSet<QString> [required]
    * @param[in]  search QString [required]
    * @param[in]  accept_language QString [optional]
    * @param[in]  datasource QString [optional]
    * @param[in]  if_none_match QString [optional]
    * @param[in]  language QString [optional]
    * @param[in]  strict bool [optional]
    */
    virtual void getSearch(const QSet<QString> &categories, const QString &search, const ::OpenAPI::OptionalParam<QString> &accept_language = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &datasource = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &if_none_match = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &language = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &strict = ::OpenAPI::OptionalParam<bool>());


private:
    QMap<QString,int> _serverIndices;
    QMap<QString,QList<OAIServerConfiguration>> _serverConfigs;
    QMap<QString, QString> _apiKeys;
    QString _bearerToken;
    QString _username;
    QString _password;
    int _timeOut;
    QString _workingDirectory;
    QNetworkAccessManager* _manager;
    QMap<QString, QString> _defaultHeaders;
    bool _isResponseCompressionEnabled;
    bool _isRequestCompressionEnabled;
    OAIHttpRequestInput _latestInput;
    OAIHttpRequestWorker *_latestWorker;
    QStringList _latestScope;
    OauthCode _authFlow;
    OauthImplicit _implicitFlow;
    OauthCredentials _credentialFlow;
    OauthPassword _passwordFlow;
    int _OauthMethod = 0;

    void getCharactersCharacterIdSearchCallback(OAIHttpRequestWorker *worker);
    void getSearchCallback(OAIHttpRequestWorker *worker);

Q_SIGNALS:

    void getCharactersCharacterIdSearchSignal(OAIGet_characters_character_id_search_ok summary);
    void getSearchSignal(OAIGet_search_ok summary);


    void getCharactersCharacterIdSearchSignalFull(OAIHttpRequestWorker *worker, OAIGet_characters_character_id_search_ok summary);
    void getSearchSignalFull(OAIHttpRequestWorker *worker, OAIGet_search_ok summary);

    Q_DECL_DEPRECATED_X("Use getCharactersCharacterIdSearchSignalError() instead")
    void getCharactersCharacterIdSearchSignalE(OAIGet_characters_character_id_search_ok summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getCharactersCharacterIdSearchSignalError(OAIGet_characters_character_id_search_ok summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getSearchSignalError() instead")
    void getSearchSignalE(OAIGet_search_ok summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getSearchSignalError(OAIGet_search_ok summary, QNetworkReply::NetworkError error_type, const QString &error_str);

    Q_DECL_DEPRECATED_X("Use getCharactersCharacterIdSearchSignalErrorFull() instead")
    void getCharactersCharacterIdSearchSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getCharactersCharacterIdSearchSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getSearchSignalErrorFull() instead")
    void getSearchSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getSearchSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);

    void abortRequestsSignal();
    void allPendingRequestsCompleted();

public Q_SLOTS:
    void tokenAvailable();
};

} // namespace OpenAPI
#endif
