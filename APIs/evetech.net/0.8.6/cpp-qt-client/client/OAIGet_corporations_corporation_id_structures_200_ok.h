/**
 * EVE Swagger Interface
 * An OpenAPI for EVE Online
 *
 * The version of the OpenAPI document: 0.8.6
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAIGet_corporations_corporation_id_structures_200_ok.h
 *
 * 200 ok object
 */

#ifndef OAIGet_corporations_corporation_id_structures_200_ok_H
#define OAIGet_corporations_corporation_id_structures_200_ok_H

#include <QJsonObject>

#include "OAIGet_corporations_corporation_id_structures_service.h"
#include <QDateTime>
#include <QList>
#include <QString>

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {
class OAIGet_corporations_corporation_id_structures_service;

class OAIGet_corporations_corporation_id_structures_200_ok : public OAIObject {
public:
    OAIGet_corporations_corporation_id_structures_200_ok();
    OAIGet_corporations_corporation_id_structures_200_ok(QString json);
    ~OAIGet_corporations_corporation_id_structures_200_ok() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    qint32 getCorporationId() const;
    void setCorporationId(const qint32 &corporation_id);
    bool is_corporation_id_Set() const;
    bool is_corporation_id_Valid() const;

    QDateTime getFuelExpires() const;
    void setFuelExpires(const QDateTime &fuel_expires);
    bool is_fuel_expires_Set() const;
    bool is_fuel_expires_Valid() const;

    QDateTime getNextReinforceApply() const;
    void setNextReinforceApply(const QDateTime &next_reinforce_apply);
    bool is_next_reinforce_apply_Set() const;
    bool is_next_reinforce_apply_Valid() const;

    qint32 getNextReinforceHour() const;
    void setNextReinforceHour(const qint32 &next_reinforce_hour);
    bool is_next_reinforce_hour_Set() const;
    bool is_next_reinforce_hour_Valid() const;

    qint32 getNextReinforceWeekday() const;
    void setNextReinforceWeekday(const qint32 &next_reinforce_weekday);
    bool is_next_reinforce_weekday_Set() const;
    bool is_next_reinforce_weekday_Valid() const;

    qint32 getProfileId() const;
    void setProfileId(const qint32 &profile_id);
    bool is_profile_id_Set() const;
    bool is_profile_id_Valid() const;

    qint32 getReinforceHour() const;
    void setReinforceHour(const qint32 &reinforce_hour);
    bool is_reinforce_hour_Set() const;
    bool is_reinforce_hour_Valid() const;

    qint32 getReinforceWeekday() const;
    void setReinforceWeekday(const qint32 &reinforce_weekday);
    bool is_reinforce_weekday_Set() const;
    bool is_reinforce_weekday_Valid() const;

    QList<OAIGet_corporations_corporation_id_structures_service> getServices() const;
    void setServices(const QList<OAIGet_corporations_corporation_id_structures_service> &services);
    bool is_services_Set() const;
    bool is_services_Valid() const;

    QString getState() const;
    void setState(const QString &state);
    bool is_state_Set() const;
    bool is_state_Valid() const;

    QDateTime getStateTimerEnd() const;
    void setStateTimerEnd(const QDateTime &state_timer_end);
    bool is_state_timer_end_Set() const;
    bool is_state_timer_end_Valid() const;

    QDateTime getStateTimerStart() const;
    void setStateTimerStart(const QDateTime &state_timer_start);
    bool is_state_timer_start_Set() const;
    bool is_state_timer_start_Valid() const;

    qint64 getStructureId() const;
    void setStructureId(const qint64 &structure_id);
    bool is_structure_id_Set() const;
    bool is_structure_id_Valid() const;

    qint32 getSystemId() const;
    void setSystemId(const qint32 &system_id);
    bool is_system_id_Set() const;
    bool is_system_id_Valid() const;

    qint32 getTypeId() const;
    void setTypeId(const qint32 &type_id);
    bool is_type_id_Set() const;
    bool is_type_id_Valid() const;

    QDateTime getUnanchorsAt() const;
    void setUnanchorsAt(const QDateTime &unanchors_at);
    bool is_unanchors_at_Set() const;
    bool is_unanchors_at_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    qint32 m_corporation_id;
    bool m_corporation_id_isSet;
    bool m_corporation_id_isValid;

    QDateTime m_fuel_expires;
    bool m_fuel_expires_isSet;
    bool m_fuel_expires_isValid;

    QDateTime m_next_reinforce_apply;
    bool m_next_reinforce_apply_isSet;
    bool m_next_reinforce_apply_isValid;

    qint32 m_next_reinforce_hour;
    bool m_next_reinforce_hour_isSet;
    bool m_next_reinforce_hour_isValid;

    qint32 m_next_reinforce_weekday;
    bool m_next_reinforce_weekday_isSet;
    bool m_next_reinforce_weekday_isValid;

    qint32 m_profile_id;
    bool m_profile_id_isSet;
    bool m_profile_id_isValid;

    qint32 m_reinforce_hour;
    bool m_reinforce_hour_isSet;
    bool m_reinforce_hour_isValid;

    qint32 m_reinforce_weekday;
    bool m_reinforce_weekday_isSet;
    bool m_reinforce_weekday_isValid;

    QList<OAIGet_corporations_corporation_id_structures_service> m_services;
    bool m_services_isSet;
    bool m_services_isValid;

    QString m_state;
    bool m_state_isSet;
    bool m_state_isValid;

    QDateTime m_state_timer_end;
    bool m_state_timer_end_isSet;
    bool m_state_timer_end_isValid;

    QDateTime m_state_timer_start;
    bool m_state_timer_start_isSet;
    bool m_state_timer_start_isValid;

    qint64 m_structure_id;
    bool m_structure_id_isSet;
    bool m_structure_id_isValid;

    qint32 m_system_id;
    bool m_system_id_isSet;
    bool m_system_id_isValid;

    qint32 m_type_id;
    bool m_type_id_isSet;
    bool m_type_id_isValid;

    QDateTime m_unanchors_at;
    bool m_unanchors_at_isSet;
    bool m_unanchors_at_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAIGet_corporations_corporation_id_structures_200_ok)

#endif // OAIGet_corporations_corporation_id_structures_200_ok_H
