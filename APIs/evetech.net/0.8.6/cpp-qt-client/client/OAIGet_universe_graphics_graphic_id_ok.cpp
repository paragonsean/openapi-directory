/**
 * EVE Swagger Interface
 * An OpenAPI for EVE Online
 *
 * The version of the OpenAPI document: 0.8.6
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIGet_universe_graphics_graphic_id_ok.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIGet_universe_graphics_graphic_id_ok::OAIGet_universe_graphics_graphic_id_ok(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIGet_universe_graphics_graphic_id_ok::OAIGet_universe_graphics_graphic_id_ok() {
    this->initializeModel();
}

OAIGet_universe_graphics_graphic_id_ok::~OAIGet_universe_graphics_graphic_id_ok() {}

void OAIGet_universe_graphics_graphic_id_ok::initializeModel() {

    m_collision_file_isSet = false;
    m_collision_file_isValid = false;

    m_graphic_file_isSet = false;
    m_graphic_file_isValid = false;

    m_graphic_id_isSet = false;
    m_graphic_id_isValid = false;

    m_icon_folder_isSet = false;
    m_icon_folder_isValid = false;

    m_sof_dna_isSet = false;
    m_sof_dna_isValid = false;

    m_sof_fation_name_isSet = false;
    m_sof_fation_name_isValid = false;

    m_sof_hull_name_isSet = false;
    m_sof_hull_name_isValid = false;

    m_sof_race_name_isSet = false;
    m_sof_race_name_isValid = false;
}

void OAIGet_universe_graphics_graphic_id_ok::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIGet_universe_graphics_graphic_id_ok::fromJsonObject(QJsonObject json) {

    m_collision_file_isValid = ::OpenAPI::fromJsonValue(m_collision_file, json[QString("collision_file")]);
    m_collision_file_isSet = !json[QString("collision_file")].isNull() && m_collision_file_isValid;

    m_graphic_file_isValid = ::OpenAPI::fromJsonValue(m_graphic_file, json[QString("graphic_file")]);
    m_graphic_file_isSet = !json[QString("graphic_file")].isNull() && m_graphic_file_isValid;

    m_graphic_id_isValid = ::OpenAPI::fromJsonValue(m_graphic_id, json[QString("graphic_id")]);
    m_graphic_id_isSet = !json[QString("graphic_id")].isNull() && m_graphic_id_isValid;

    m_icon_folder_isValid = ::OpenAPI::fromJsonValue(m_icon_folder, json[QString("icon_folder")]);
    m_icon_folder_isSet = !json[QString("icon_folder")].isNull() && m_icon_folder_isValid;

    m_sof_dna_isValid = ::OpenAPI::fromJsonValue(m_sof_dna, json[QString("sof_dna")]);
    m_sof_dna_isSet = !json[QString("sof_dna")].isNull() && m_sof_dna_isValid;

    m_sof_fation_name_isValid = ::OpenAPI::fromJsonValue(m_sof_fation_name, json[QString("sof_fation_name")]);
    m_sof_fation_name_isSet = !json[QString("sof_fation_name")].isNull() && m_sof_fation_name_isValid;

    m_sof_hull_name_isValid = ::OpenAPI::fromJsonValue(m_sof_hull_name, json[QString("sof_hull_name")]);
    m_sof_hull_name_isSet = !json[QString("sof_hull_name")].isNull() && m_sof_hull_name_isValid;

    m_sof_race_name_isValid = ::OpenAPI::fromJsonValue(m_sof_race_name, json[QString("sof_race_name")]);
    m_sof_race_name_isSet = !json[QString("sof_race_name")].isNull() && m_sof_race_name_isValid;
}

QString OAIGet_universe_graphics_graphic_id_ok::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIGet_universe_graphics_graphic_id_ok::asJsonObject() const {
    QJsonObject obj;
    if (m_collision_file_isSet) {
        obj.insert(QString("collision_file"), ::OpenAPI::toJsonValue(m_collision_file));
    }
    if (m_graphic_file_isSet) {
        obj.insert(QString("graphic_file"), ::OpenAPI::toJsonValue(m_graphic_file));
    }
    if (m_graphic_id_isSet) {
        obj.insert(QString("graphic_id"), ::OpenAPI::toJsonValue(m_graphic_id));
    }
    if (m_icon_folder_isSet) {
        obj.insert(QString("icon_folder"), ::OpenAPI::toJsonValue(m_icon_folder));
    }
    if (m_sof_dna_isSet) {
        obj.insert(QString("sof_dna"), ::OpenAPI::toJsonValue(m_sof_dna));
    }
    if (m_sof_fation_name_isSet) {
        obj.insert(QString("sof_fation_name"), ::OpenAPI::toJsonValue(m_sof_fation_name));
    }
    if (m_sof_hull_name_isSet) {
        obj.insert(QString("sof_hull_name"), ::OpenAPI::toJsonValue(m_sof_hull_name));
    }
    if (m_sof_race_name_isSet) {
        obj.insert(QString("sof_race_name"), ::OpenAPI::toJsonValue(m_sof_race_name));
    }
    return obj;
}

QString OAIGet_universe_graphics_graphic_id_ok::getCollisionFile() const {
    return m_collision_file;
}
void OAIGet_universe_graphics_graphic_id_ok::setCollisionFile(const QString &collision_file) {
    m_collision_file = collision_file;
    m_collision_file_isSet = true;
}

bool OAIGet_universe_graphics_graphic_id_ok::is_collision_file_Set() const{
    return m_collision_file_isSet;
}

bool OAIGet_universe_graphics_graphic_id_ok::is_collision_file_Valid() const{
    return m_collision_file_isValid;
}

QString OAIGet_universe_graphics_graphic_id_ok::getGraphicFile() const {
    return m_graphic_file;
}
void OAIGet_universe_graphics_graphic_id_ok::setGraphicFile(const QString &graphic_file) {
    m_graphic_file = graphic_file;
    m_graphic_file_isSet = true;
}

bool OAIGet_universe_graphics_graphic_id_ok::is_graphic_file_Set() const{
    return m_graphic_file_isSet;
}

bool OAIGet_universe_graphics_graphic_id_ok::is_graphic_file_Valid() const{
    return m_graphic_file_isValid;
}

qint32 OAIGet_universe_graphics_graphic_id_ok::getGraphicId() const {
    return m_graphic_id;
}
void OAIGet_universe_graphics_graphic_id_ok::setGraphicId(const qint32 &graphic_id) {
    m_graphic_id = graphic_id;
    m_graphic_id_isSet = true;
}

bool OAIGet_universe_graphics_graphic_id_ok::is_graphic_id_Set() const{
    return m_graphic_id_isSet;
}

bool OAIGet_universe_graphics_graphic_id_ok::is_graphic_id_Valid() const{
    return m_graphic_id_isValid;
}

QString OAIGet_universe_graphics_graphic_id_ok::getIconFolder() const {
    return m_icon_folder;
}
void OAIGet_universe_graphics_graphic_id_ok::setIconFolder(const QString &icon_folder) {
    m_icon_folder = icon_folder;
    m_icon_folder_isSet = true;
}

bool OAIGet_universe_graphics_graphic_id_ok::is_icon_folder_Set() const{
    return m_icon_folder_isSet;
}

bool OAIGet_universe_graphics_graphic_id_ok::is_icon_folder_Valid() const{
    return m_icon_folder_isValid;
}

QString OAIGet_universe_graphics_graphic_id_ok::getSofDna() const {
    return m_sof_dna;
}
void OAIGet_universe_graphics_graphic_id_ok::setSofDna(const QString &sof_dna) {
    m_sof_dna = sof_dna;
    m_sof_dna_isSet = true;
}

bool OAIGet_universe_graphics_graphic_id_ok::is_sof_dna_Set() const{
    return m_sof_dna_isSet;
}

bool OAIGet_universe_graphics_graphic_id_ok::is_sof_dna_Valid() const{
    return m_sof_dna_isValid;
}

QString OAIGet_universe_graphics_graphic_id_ok::getSofFationName() const {
    return m_sof_fation_name;
}
void OAIGet_universe_graphics_graphic_id_ok::setSofFationName(const QString &sof_fation_name) {
    m_sof_fation_name = sof_fation_name;
    m_sof_fation_name_isSet = true;
}

bool OAIGet_universe_graphics_graphic_id_ok::is_sof_fation_name_Set() const{
    return m_sof_fation_name_isSet;
}

bool OAIGet_universe_graphics_graphic_id_ok::is_sof_fation_name_Valid() const{
    return m_sof_fation_name_isValid;
}

QString OAIGet_universe_graphics_graphic_id_ok::getSofHullName() const {
    return m_sof_hull_name;
}
void OAIGet_universe_graphics_graphic_id_ok::setSofHullName(const QString &sof_hull_name) {
    m_sof_hull_name = sof_hull_name;
    m_sof_hull_name_isSet = true;
}

bool OAIGet_universe_graphics_graphic_id_ok::is_sof_hull_name_Set() const{
    return m_sof_hull_name_isSet;
}

bool OAIGet_universe_graphics_graphic_id_ok::is_sof_hull_name_Valid() const{
    return m_sof_hull_name_isValid;
}

QString OAIGet_universe_graphics_graphic_id_ok::getSofRaceName() const {
    return m_sof_race_name;
}
void OAIGet_universe_graphics_graphic_id_ok::setSofRaceName(const QString &sof_race_name) {
    m_sof_race_name = sof_race_name;
    m_sof_race_name_isSet = true;
}

bool OAIGet_universe_graphics_graphic_id_ok::is_sof_race_name_Set() const{
    return m_sof_race_name_isSet;
}

bool OAIGet_universe_graphics_graphic_id_ok::is_sof_race_name_Valid() const{
    return m_sof_race_name_isValid;
}

bool OAIGet_universe_graphics_graphic_id_ok::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_collision_file_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_graphic_file_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_graphic_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_icon_folder_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_sof_dna_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_sof_fation_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_sof_hull_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_sof_race_name_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIGet_universe_graphics_graphic_id_ok::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_graphic_id_isValid && true;
}

} // namespace OpenAPI
