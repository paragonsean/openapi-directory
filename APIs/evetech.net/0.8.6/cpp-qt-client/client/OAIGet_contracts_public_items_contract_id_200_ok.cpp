/**
 * EVE Swagger Interface
 * An OpenAPI for EVE Online
 *
 * The version of the OpenAPI document: 0.8.6
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIGet_contracts_public_items_contract_id_200_ok.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIGet_contracts_public_items_contract_id_200_ok::OAIGet_contracts_public_items_contract_id_200_ok(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIGet_contracts_public_items_contract_id_200_ok::OAIGet_contracts_public_items_contract_id_200_ok() {
    this->initializeModel();
}

OAIGet_contracts_public_items_contract_id_200_ok::~OAIGet_contracts_public_items_contract_id_200_ok() {}

void OAIGet_contracts_public_items_contract_id_200_ok::initializeModel() {

    m_is_blueprint_copy_isSet = false;
    m_is_blueprint_copy_isValid = false;

    m_is_included_isSet = false;
    m_is_included_isValid = false;

    m_item_id_isSet = false;
    m_item_id_isValid = false;

    m_material_efficiency_isSet = false;
    m_material_efficiency_isValid = false;

    m_quantity_isSet = false;
    m_quantity_isValid = false;

    m_record_id_isSet = false;
    m_record_id_isValid = false;

    m_runs_isSet = false;
    m_runs_isValid = false;

    m_time_efficiency_isSet = false;
    m_time_efficiency_isValid = false;

    m_type_id_isSet = false;
    m_type_id_isValid = false;
}

void OAIGet_contracts_public_items_contract_id_200_ok::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIGet_contracts_public_items_contract_id_200_ok::fromJsonObject(QJsonObject json) {

    m_is_blueprint_copy_isValid = ::OpenAPI::fromJsonValue(m_is_blueprint_copy, json[QString("is_blueprint_copy")]);
    m_is_blueprint_copy_isSet = !json[QString("is_blueprint_copy")].isNull() && m_is_blueprint_copy_isValid;

    m_is_included_isValid = ::OpenAPI::fromJsonValue(m_is_included, json[QString("is_included")]);
    m_is_included_isSet = !json[QString("is_included")].isNull() && m_is_included_isValid;

    m_item_id_isValid = ::OpenAPI::fromJsonValue(m_item_id, json[QString("item_id")]);
    m_item_id_isSet = !json[QString("item_id")].isNull() && m_item_id_isValid;

    m_material_efficiency_isValid = ::OpenAPI::fromJsonValue(m_material_efficiency, json[QString("material_efficiency")]);
    m_material_efficiency_isSet = !json[QString("material_efficiency")].isNull() && m_material_efficiency_isValid;

    m_quantity_isValid = ::OpenAPI::fromJsonValue(m_quantity, json[QString("quantity")]);
    m_quantity_isSet = !json[QString("quantity")].isNull() && m_quantity_isValid;

    m_record_id_isValid = ::OpenAPI::fromJsonValue(m_record_id, json[QString("record_id")]);
    m_record_id_isSet = !json[QString("record_id")].isNull() && m_record_id_isValid;

    m_runs_isValid = ::OpenAPI::fromJsonValue(m_runs, json[QString("runs")]);
    m_runs_isSet = !json[QString("runs")].isNull() && m_runs_isValid;

    m_time_efficiency_isValid = ::OpenAPI::fromJsonValue(m_time_efficiency, json[QString("time_efficiency")]);
    m_time_efficiency_isSet = !json[QString("time_efficiency")].isNull() && m_time_efficiency_isValid;

    m_type_id_isValid = ::OpenAPI::fromJsonValue(m_type_id, json[QString("type_id")]);
    m_type_id_isSet = !json[QString("type_id")].isNull() && m_type_id_isValid;
}

QString OAIGet_contracts_public_items_contract_id_200_ok::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIGet_contracts_public_items_contract_id_200_ok::asJsonObject() const {
    QJsonObject obj;
    if (m_is_blueprint_copy_isSet) {
        obj.insert(QString("is_blueprint_copy"), ::OpenAPI::toJsonValue(m_is_blueprint_copy));
    }
    if (m_is_included_isSet) {
        obj.insert(QString("is_included"), ::OpenAPI::toJsonValue(m_is_included));
    }
    if (m_item_id_isSet) {
        obj.insert(QString("item_id"), ::OpenAPI::toJsonValue(m_item_id));
    }
    if (m_material_efficiency_isSet) {
        obj.insert(QString("material_efficiency"), ::OpenAPI::toJsonValue(m_material_efficiency));
    }
    if (m_quantity_isSet) {
        obj.insert(QString("quantity"), ::OpenAPI::toJsonValue(m_quantity));
    }
    if (m_record_id_isSet) {
        obj.insert(QString("record_id"), ::OpenAPI::toJsonValue(m_record_id));
    }
    if (m_runs_isSet) {
        obj.insert(QString("runs"), ::OpenAPI::toJsonValue(m_runs));
    }
    if (m_time_efficiency_isSet) {
        obj.insert(QString("time_efficiency"), ::OpenAPI::toJsonValue(m_time_efficiency));
    }
    if (m_type_id_isSet) {
        obj.insert(QString("type_id"), ::OpenAPI::toJsonValue(m_type_id));
    }
    return obj;
}

bool OAIGet_contracts_public_items_contract_id_200_ok::isIsBlueprintCopy() const {
    return m_is_blueprint_copy;
}
void OAIGet_contracts_public_items_contract_id_200_ok::setIsBlueprintCopy(const bool &is_blueprint_copy) {
    m_is_blueprint_copy = is_blueprint_copy;
    m_is_blueprint_copy_isSet = true;
}

bool OAIGet_contracts_public_items_contract_id_200_ok::is_is_blueprint_copy_Set() const{
    return m_is_blueprint_copy_isSet;
}

bool OAIGet_contracts_public_items_contract_id_200_ok::is_is_blueprint_copy_Valid() const{
    return m_is_blueprint_copy_isValid;
}

bool OAIGet_contracts_public_items_contract_id_200_ok::isIsIncluded() const {
    return m_is_included;
}
void OAIGet_contracts_public_items_contract_id_200_ok::setIsIncluded(const bool &is_included) {
    m_is_included = is_included;
    m_is_included_isSet = true;
}

bool OAIGet_contracts_public_items_contract_id_200_ok::is_is_included_Set() const{
    return m_is_included_isSet;
}

bool OAIGet_contracts_public_items_contract_id_200_ok::is_is_included_Valid() const{
    return m_is_included_isValid;
}

qint64 OAIGet_contracts_public_items_contract_id_200_ok::getItemId() const {
    return m_item_id;
}
void OAIGet_contracts_public_items_contract_id_200_ok::setItemId(const qint64 &item_id) {
    m_item_id = item_id;
    m_item_id_isSet = true;
}

bool OAIGet_contracts_public_items_contract_id_200_ok::is_item_id_Set() const{
    return m_item_id_isSet;
}

bool OAIGet_contracts_public_items_contract_id_200_ok::is_item_id_Valid() const{
    return m_item_id_isValid;
}

qint32 OAIGet_contracts_public_items_contract_id_200_ok::getMaterialEfficiency() const {
    return m_material_efficiency;
}
void OAIGet_contracts_public_items_contract_id_200_ok::setMaterialEfficiency(const qint32 &material_efficiency) {
    m_material_efficiency = material_efficiency;
    m_material_efficiency_isSet = true;
}

bool OAIGet_contracts_public_items_contract_id_200_ok::is_material_efficiency_Set() const{
    return m_material_efficiency_isSet;
}

bool OAIGet_contracts_public_items_contract_id_200_ok::is_material_efficiency_Valid() const{
    return m_material_efficiency_isValid;
}

qint32 OAIGet_contracts_public_items_contract_id_200_ok::getQuantity() const {
    return m_quantity;
}
void OAIGet_contracts_public_items_contract_id_200_ok::setQuantity(const qint32 &quantity) {
    m_quantity = quantity;
    m_quantity_isSet = true;
}

bool OAIGet_contracts_public_items_contract_id_200_ok::is_quantity_Set() const{
    return m_quantity_isSet;
}

bool OAIGet_contracts_public_items_contract_id_200_ok::is_quantity_Valid() const{
    return m_quantity_isValid;
}

qint64 OAIGet_contracts_public_items_contract_id_200_ok::getRecordId() const {
    return m_record_id;
}
void OAIGet_contracts_public_items_contract_id_200_ok::setRecordId(const qint64 &record_id) {
    m_record_id = record_id;
    m_record_id_isSet = true;
}

bool OAIGet_contracts_public_items_contract_id_200_ok::is_record_id_Set() const{
    return m_record_id_isSet;
}

bool OAIGet_contracts_public_items_contract_id_200_ok::is_record_id_Valid() const{
    return m_record_id_isValid;
}

qint32 OAIGet_contracts_public_items_contract_id_200_ok::getRuns() const {
    return m_runs;
}
void OAIGet_contracts_public_items_contract_id_200_ok::setRuns(const qint32 &runs) {
    m_runs = runs;
    m_runs_isSet = true;
}

bool OAIGet_contracts_public_items_contract_id_200_ok::is_runs_Set() const{
    return m_runs_isSet;
}

bool OAIGet_contracts_public_items_contract_id_200_ok::is_runs_Valid() const{
    return m_runs_isValid;
}

qint32 OAIGet_contracts_public_items_contract_id_200_ok::getTimeEfficiency() const {
    return m_time_efficiency;
}
void OAIGet_contracts_public_items_contract_id_200_ok::setTimeEfficiency(const qint32 &time_efficiency) {
    m_time_efficiency = time_efficiency;
    m_time_efficiency_isSet = true;
}

bool OAIGet_contracts_public_items_contract_id_200_ok::is_time_efficiency_Set() const{
    return m_time_efficiency_isSet;
}

bool OAIGet_contracts_public_items_contract_id_200_ok::is_time_efficiency_Valid() const{
    return m_time_efficiency_isValid;
}

qint32 OAIGet_contracts_public_items_contract_id_200_ok::getTypeId() const {
    return m_type_id;
}
void OAIGet_contracts_public_items_contract_id_200_ok::setTypeId(const qint32 &type_id) {
    m_type_id = type_id;
    m_type_id_isSet = true;
}

bool OAIGet_contracts_public_items_contract_id_200_ok::is_type_id_Set() const{
    return m_type_id_isSet;
}

bool OAIGet_contracts_public_items_contract_id_200_ok::is_type_id_Valid() const{
    return m_type_id_isValid;
}

bool OAIGet_contracts_public_items_contract_id_200_ok::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_is_blueprint_copy_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_is_included_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_item_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_material_efficiency_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_quantity_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_record_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_runs_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_time_efficiency_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_type_id_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIGet_contracts_public_items_contract_id_200_ok::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_is_included_isValid && m_quantity_isValid && m_record_id_isValid && m_type_id_isValid && true;
}

} // namespace OpenAPI
