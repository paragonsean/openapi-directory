/**
 * EVE Swagger Interface
 * An OpenAPI for EVE Online
 *
 * The version of the OpenAPI document: 0.8.6
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAIGet_characters_character_id_industry_jobs_200_ok.h
 *
 * 200 ok object
 */

#ifndef OAIGet_characters_character_id_industry_jobs_200_ok_H
#define OAIGet_characters_character_id_industry_jobs_200_ok_H

#include <QJsonObject>

#include <QDateTime>
#include <QString>

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {

class OAIGet_characters_character_id_industry_jobs_200_ok : public OAIObject {
public:
    OAIGet_characters_character_id_industry_jobs_200_ok();
    OAIGet_characters_character_id_industry_jobs_200_ok(QString json);
    ~OAIGet_characters_character_id_industry_jobs_200_ok() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    qint32 getActivityId() const;
    void setActivityId(const qint32 &activity_id);
    bool is_activity_id_Set() const;
    bool is_activity_id_Valid() const;

    qint64 getBlueprintId() const;
    void setBlueprintId(const qint64 &blueprint_id);
    bool is_blueprint_id_Set() const;
    bool is_blueprint_id_Valid() const;

    qint64 getBlueprintLocationId() const;
    void setBlueprintLocationId(const qint64 &blueprint_location_id);
    bool is_blueprint_location_id_Set() const;
    bool is_blueprint_location_id_Valid() const;

    qint32 getBlueprintTypeId() const;
    void setBlueprintTypeId(const qint32 &blueprint_type_id);
    bool is_blueprint_type_id_Set() const;
    bool is_blueprint_type_id_Valid() const;

    qint32 getCompletedCharacterId() const;
    void setCompletedCharacterId(const qint32 &completed_character_id);
    bool is_completed_character_id_Set() const;
    bool is_completed_character_id_Valid() const;

    QDateTime getCompletedDate() const;
    void setCompletedDate(const QDateTime &completed_date);
    bool is_completed_date_Set() const;
    bool is_completed_date_Valid() const;

    double getCost() const;
    void setCost(const double &cost);
    bool is_cost_Set() const;
    bool is_cost_Valid() const;

    qint32 getDuration() const;
    void setDuration(const qint32 &duration);
    bool is_duration_Set() const;
    bool is_duration_Valid() const;

    QDateTime getEndDate() const;
    void setEndDate(const QDateTime &end_date);
    bool is_end_date_Set() const;
    bool is_end_date_Valid() const;

    qint64 getFacilityId() const;
    void setFacilityId(const qint64 &facility_id);
    bool is_facility_id_Set() const;
    bool is_facility_id_Valid() const;

    qint32 getInstallerId() const;
    void setInstallerId(const qint32 &installer_id);
    bool is_installer_id_Set() const;
    bool is_installer_id_Valid() const;

    qint32 getJobId() const;
    void setJobId(const qint32 &job_id);
    bool is_job_id_Set() const;
    bool is_job_id_Valid() const;

    qint32 getLicensedRuns() const;
    void setLicensedRuns(const qint32 &licensed_runs);
    bool is_licensed_runs_Set() const;
    bool is_licensed_runs_Valid() const;

    qint64 getOutputLocationId() const;
    void setOutputLocationId(const qint64 &output_location_id);
    bool is_output_location_id_Set() const;
    bool is_output_location_id_Valid() const;

    QDateTime getPauseDate() const;
    void setPauseDate(const QDateTime &pause_date);
    bool is_pause_date_Set() const;
    bool is_pause_date_Valid() const;

    float getProbability() const;
    void setProbability(const float &probability);
    bool is_probability_Set() const;
    bool is_probability_Valid() const;

    qint32 getProductTypeId() const;
    void setProductTypeId(const qint32 &product_type_id);
    bool is_product_type_id_Set() const;
    bool is_product_type_id_Valid() const;

    qint32 getRuns() const;
    void setRuns(const qint32 &runs);
    bool is_runs_Set() const;
    bool is_runs_Valid() const;

    QDateTime getStartDate() const;
    void setStartDate(const QDateTime &start_date);
    bool is_start_date_Set() const;
    bool is_start_date_Valid() const;

    qint64 getStationId() const;
    void setStationId(const qint64 &station_id);
    bool is_station_id_Set() const;
    bool is_station_id_Valid() const;

    QString getStatus() const;
    void setStatus(const QString &status);
    bool is_status_Set() const;
    bool is_status_Valid() const;

    qint32 getSuccessfulRuns() const;
    void setSuccessfulRuns(const qint32 &successful_runs);
    bool is_successful_runs_Set() const;
    bool is_successful_runs_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    qint32 m_activity_id;
    bool m_activity_id_isSet;
    bool m_activity_id_isValid;

    qint64 m_blueprint_id;
    bool m_blueprint_id_isSet;
    bool m_blueprint_id_isValid;

    qint64 m_blueprint_location_id;
    bool m_blueprint_location_id_isSet;
    bool m_blueprint_location_id_isValid;

    qint32 m_blueprint_type_id;
    bool m_blueprint_type_id_isSet;
    bool m_blueprint_type_id_isValid;

    qint32 m_completed_character_id;
    bool m_completed_character_id_isSet;
    bool m_completed_character_id_isValid;

    QDateTime m_completed_date;
    bool m_completed_date_isSet;
    bool m_completed_date_isValid;

    double m_cost;
    bool m_cost_isSet;
    bool m_cost_isValid;

    qint32 m_duration;
    bool m_duration_isSet;
    bool m_duration_isValid;

    QDateTime m_end_date;
    bool m_end_date_isSet;
    bool m_end_date_isValid;

    qint64 m_facility_id;
    bool m_facility_id_isSet;
    bool m_facility_id_isValid;

    qint32 m_installer_id;
    bool m_installer_id_isSet;
    bool m_installer_id_isValid;

    qint32 m_job_id;
    bool m_job_id_isSet;
    bool m_job_id_isValid;

    qint32 m_licensed_runs;
    bool m_licensed_runs_isSet;
    bool m_licensed_runs_isValid;

    qint64 m_output_location_id;
    bool m_output_location_id_isSet;
    bool m_output_location_id_isValid;

    QDateTime m_pause_date;
    bool m_pause_date_isSet;
    bool m_pause_date_isValid;

    float m_probability;
    bool m_probability_isSet;
    bool m_probability_isValid;

    qint32 m_product_type_id;
    bool m_product_type_id_isSet;
    bool m_product_type_id_isValid;

    qint32 m_runs;
    bool m_runs_isSet;
    bool m_runs_isValid;

    QDateTime m_start_date;
    bool m_start_date_isSet;
    bool m_start_date_isValid;

    qint64 m_station_id;
    bool m_station_id_isSet;
    bool m_station_id_isValid;

    QString m_status;
    bool m_status_isSet;
    bool m_status_isValid;

    qint32 m_successful_runs;
    bool m_successful_runs_isSet;
    bool m_successful_runs_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAIGet_characters_character_id_industry_jobs_200_ok)

#endif // OAIGet_characters_character_id_industry_jobs_200_ok_H
