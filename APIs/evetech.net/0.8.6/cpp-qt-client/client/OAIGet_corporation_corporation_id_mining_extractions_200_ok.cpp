/**
 * EVE Swagger Interface
 * An OpenAPI for EVE Online
 *
 * The version of the OpenAPI document: 0.8.6
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIGet_corporation_corporation_id_mining_extractions_200_ok.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIGet_corporation_corporation_id_mining_extractions_200_ok::OAIGet_corporation_corporation_id_mining_extractions_200_ok(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIGet_corporation_corporation_id_mining_extractions_200_ok::OAIGet_corporation_corporation_id_mining_extractions_200_ok() {
    this->initializeModel();
}

OAIGet_corporation_corporation_id_mining_extractions_200_ok::~OAIGet_corporation_corporation_id_mining_extractions_200_ok() {}

void OAIGet_corporation_corporation_id_mining_extractions_200_ok::initializeModel() {

    m_chunk_arrival_time_isSet = false;
    m_chunk_arrival_time_isValid = false;

    m_extraction_start_time_isSet = false;
    m_extraction_start_time_isValid = false;

    m_moon_id_isSet = false;
    m_moon_id_isValid = false;

    m_natural_decay_time_isSet = false;
    m_natural_decay_time_isValid = false;

    m_structure_id_isSet = false;
    m_structure_id_isValid = false;
}

void OAIGet_corporation_corporation_id_mining_extractions_200_ok::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIGet_corporation_corporation_id_mining_extractions_200_ok::fromJsonObject(QJsonObject json) {

    m_chunk_arrival_time_isValid = ::OpenAPI::fromJsonValue(m_chunk_arrival_time, json[QString("chunk_arrival_time")]);
    m_chunk_arrival_time_isSet = !json[QString("chunk_arrival_time")].isNull() && m_chunk_arrival_time_isValid;

    m_extraction_start_time_isValid = ::OpenAPI::fromJsonValue(m_extraction_start_time, json[QString("extraction_start_time")]);
    m_extraction_start_time_isSet = !json[QString("extraction_start_time")].isNull() && m_extraction_start_time_isValid;

    m_moon_id_isValid = ::OpenAPI::fromJsonValue(m_moon_id, json[QString("moon_id")]);
    m_moon_id_isSet = !json[QString("moon_id")].isNull() && m_moon_id_isValid;

    m_natural_decay_time_isValid = ::OpenAPI::fromJsonValue(m_natural_decay_time, json[QString("natural_decay_time")]);
    m_natural_decay_time_isSet = !json[QString("natural_decay_time")].isNull() && m_natural_decay_time_isValid;

    m_structure_id_isValid = ::OpenAPI::fromJsonValue(m_structure_id, json[QString("structure_id")]);
    m_structure_id_isSet = !json[QString("structure_id")].isNull() && m_structure_id_isValid;
}

QString OAIGet_corporation_corporation_id_mining_extractions_200_ok::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIGet_corporation_corporation_id_mining_extractions_200_ok::asJsonObject() const {
    QJsonObject obj;
    if (m_chunk_arrival_time_isSet) {
        obj.insert(QString("chunk_arrival_time"), ::OpenAPI::toJsonValue(m_chunk_arrival_time));
    }
    if (m_extraction_start_time_isSet) {
        obj.insert(QString("extraction_start_time"), ::OpenAPI::toJsonValue(m_extraction_start_time));
    }
    if (m_moon_id_isSet) {
        obj.insert(QString("moon_id"), ::OpenAPI::toJsonValue(m_moon_id));
    }
    if (m_natural_decay_time_isSet) {
        obj.insert(QString("natural_decay_time"), ::OpenAPI::toJsonValue(m_natural_decay_time));
    }
    if (m_structure_id_isSet) {
        obj.insert(QString("structure_id"), ::OpenAPI::toJsonValue(m_structure_id));
    }
    return obj;
}

QDateTime OAIGet_corporation_corporation_id_mining_extractions_200_ok::getChunkArrivalTime() const {
    return m_chunk_arrival_time;
}
void OAIGet_corporation_corporation_id_mining_extractions_200_ok::setChunkArrivalTime(const QDateTime &chunk_arrival_time) {
    m_chunk_arrival_time = chunk_arrival_time;
    m_chunk_arrival_time_isSet = true;
}

bool OAIGet_corporation_corporation_id_mining_extractions_200_ok::is_chunk_arrival_time_Set() const{
    return m_chunk_arrival_time_isSet;
}

bool OAIGet_corporation_corporation_id_mining_extractions_200_ok::is_chunk_arrival_time_Valid() const{
    return m_chunk_arrival_time_isValid;
}

QDateTime OAIGet_corporation_corporation_id_mining_extractions_200_ok::getExtractionStartTime() const {
    return m_extraction_start_time;
}
void OAIGet_corporation_corporation_id_mining_extractions_200_ok::setExtractionStartTime(const QDateTime &extraction_start_time) {
    m_extraction_start_time = extraction_start_time;
    m_extraction_start_time_isSet = true;
}

bool OAIGet_corporation_corporation_id_mining_extractions_200_ok::is_extraction_start_time_Set() const{
    return m_extraction_start_time_isSet;
}

bool OAIGet_corporation_corporation_id_mining_extractions_200_ok::is_extraction_start_time_Valid() const{
    return m_extraction_start_time_isValid;
}

qint32 OAIGet_corporation_corporation_id_mining_extractions_200_ok::getMoonId() const {
    return m_moon_id;
}
void OAIGet_corporation_corporation_id_mining_extractions_200_ok::setMoonId(const qint32 &moon_id) {
    m_moon_id = moon_id;
    m_moon_id_isSet = true;
}

bool OAIGet_corporation_corporation_id_mining_extractions_200_ok::is_moon_id_Set() const{
    return m_moon_id_isSet;
}

bool OAIGet_corporation_corporation_id_mining_extractions_200_ok::is_moon_id_Valid() const{
    return m_moon_id_isValid;
}

QDateTime OAIGet_corporation_corporation_id_mining_extractions_200_ok::getNaturalDecayTime() const {
    return m_natural_decay_time;
}
void OAIGet_corporation_corporation_id_mining_extractions_200_ok::setNaturalDecayTime(const QDateTime &natural_decay_time) {
    m_natural_decay_time = natural_decay_time;
    m_natural_decay_time_isSet = true;
}

bool OAIGet_corporation_corporation_id_mining_extractions_200_ok::is_natural_decay_time_Set() const{
    return m_natural_decay_time_isSet;
}

bool OAIGet_corporation_corporation_id_mining_extractions_200_ok::is_natural_decay_time_Valid() const{
    return m_natural_decay_time_isValid;
}

qint64 OAIGet_corporation_corporation_id_mining_extractions_200_ok::getStructureId() const {
    return m_structure_id;
}
void OAIGet_corporation_corporation_id_mining_extractions_200_ok::setStructureId(const qint64 &structure_id) {
    m_structure_id = structure_id;
    m_structure_id_isSet = true;
}

bool OAIGet_corporation_corporation_id_mining_extractions_200_ok::is_structure_id_Set() const{
    return m_structure_id_isSet;
}

bool OAIGet_corporation_corporation_id_mining_extractions_200_ok::is_structure_id_Valid() const{
    return m_structure_id_isValid;
}

bool OAIGet_corporation_corporation_id_mining_extractions_200_ok::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_chunk_arrival_time_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_extraction_start_time_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_moon_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_natural_decay_time_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_structure_id_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIGet_corporation_corporation_id_mining_extractions_200_ok::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_chunk_arrival_time_isValid && m_extraction_start_time_isValid && m_moon_id_isValid && m_natural_decay_time_isValid && m_structure_id_isValid && true;
}

} // namespace OpenAPI
