/*
 * EVE Swagger Interface
 * An OpenAPI for EVE Online
 *
 * The version of the OpenAPI document: 0.8.6
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * 200 ok object
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:27:54.306821-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class GetUniverseGraphicsGraphicIdOk {
  public static final String SERIALIZED_NAME_COLLISION_FILE = "collision_file";
  @SerializedName(SERIALIZED_NAME_COLLISION_FILE)
  private String collisionFile;

  public static final String SERIALIZED_NAME_GRAPHIC_FILE = "graphic_file";
  @SerializedName(SERIALIZED_NAME_GRAPHIC_FILE)
  private String graphicFile;

  public static final String SERIALIZED_NAME_GRAPHIC_ID = "graphic_id";
  @SerializedName(SERIALIZED_NAME_GRAPHIC_ID)
  private Integer graphicId;

  public static final String SERIALIZED_NAME_ICON_FOLDER = "icon_folder";
  @SerializedName(SERIALIZED_NAME_ICON_FOLDER)
  private String iconFolder;

  public static final String SERIALIZED_NAME_SOF_DNA = "sof_dna";
  @SerializedName(SERIALIZED_NAME_SOF_DNA)
  private String sofDna;

  public static final String SERIALIZED_NAME_SOF_FATION_NAME = "sof_fation_name";
  @SerializedName(SERIALIZED_NAME_SOF_FATION_NAME)
  private String sofFationName;

  public static final String SERIALIZED_NAME_SOF_HULL_NAME = "sof_hull_name";
  @SerializedName(SERIALIZED_NAME_SOF_HULL_NAME)
  private String sofHullName;

  public static final String SERIALIZED_NAME_SOF_RACE_NAME = "sof_race_name";
  @SerializedName(SERIALIZED_NAME_SOF_RACE_NAME)
  private String sofRaceName;

  public GetUniverseGraphicsGraphicIdOk() {
  }

  public GetUniverseGraphicsGraphicIdOk collisionFile(String collisionFile) {
    this.collisionFile = collisionFile;
    return this;
  }

  /**
   * collision_file string
   * @return collisionFile
   */
  @javax.annotation.Nullable
  public String getCollisionFile() {
    return collisionFile;
  }

  public void setCollisionFile(String collisionFile) {
    this.collisionFile = collisionFile;
  }


  public GetUniverseGraphicsGraphicIdOk graphicFile(String graphicFile) {
    this.graphicFile = graphicFile;
    return this;
  }

  /**
   * graphic_file string
   * @return graphicFile
   */
  @javax.annotation.Nullable
  public String getGraphicFile() {
    return graphicFile;
  }

  public void setGraphicFile(String graphicFile) {
    this.graphicFile = graphicFile;
  }


  public GetUniverseGraphicsGraphicIdOk graphicId(Integer graphicId) {
    this.graphicId = graphicId;
    return this;
  }

  /**
   * graphic_id integer
   * @return graphicId
   */
  @javax.annotation.Nonnull
  public Integer getGraphicId() {
    return graphicId;
  }

  public void setGraphicId(Integer graphicId) {
    this.graphicId = graphicId;
  }


  public GetUniverseGraphicsGraphicIdOk iconFolder(String iconFolder) {
    this.iconFolder = iconFolder;
    return this;
  }

  /**
   * icon_folder string
   * @return iconFolder
   */
  @javax.annotation.Nullable
  public String getIconFolder() {
    return iconFolder;
  }

  public void setIconFolder(String iconFolder) {
    this.iconFolder = iconFolder;
  }


  public GetUniverseGraphicsGraphicIdOk sofDna(String sofDna) {
    this.sofDna = sofDna;
    return this;
  }

  /**
   * sof_dna string
   * @return sofDna
   */
  @javax.annotation.Nullable
  public String getSofDna() {
    return sofDna;
  }

  public void setSofDna(String sofDna) {
    this.sofDna = sofDna;
  }


  public GetUniverseGraphicsGraphicIdOk sofFationName(String sofFationName) {
    this.sofFationName = sofFationName;
    return this;
  }

  /**
   * sof_fation_name string
   * @return sofFationName
   */
  @javax.annotation.Nullable
  public String getSofFationName() {
    return sofFationName;
  }

  public void setSofFationName(String sofFationName) {
    this.sofFationName = sofFationName;
  }


  public GetUniverseGraphicsGraphicIdOk sofHullName(String sofHullName) {
    this.sofHullName = sofHullName;
    return this;
  }

  /**
   * sof_hull_name string
   * @return sofHullName
   */
  @javax.annotation.Nullable
  public String getSofHullName() {
    return sofHullName;
  }

  public void setSofHullName(String sofHullName) {
    this.sofHullName = sofHullName;
  }


  public GetUniverseGraphicsGraphicIdOk sofRaceName(String sofRaceName) {
    this.sofRaceName = sofRaceName;
    return this;
  }

  /**
   * sof_race_name string
   * @return sofRaceName
   */
  @javax.annotation.Nullable
  public String getSofRaceName() {
    return sofRaceName;
  }

  public void setSofRaceName(String sofRaceName) {
    this.sofRaceName = sofRaceName;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    GetUniverseGraphicsGraphicIdOk getUniverseGraphicsGraphicIdOk = (GetUniverseGraphicsGraphicIdOk) o;
    return Objects.equals(this.collisionFile, getUniverseGraphicsGraphicIdOk.collisionFile) &&
        Objects.equals(this.graphicFile, getUniverseGraphicsGraphicIdOk.graphicFile) &&
        Objects.equals(this.graphicId, getUniverseGraphicsGraphicIdOk.graphicId) &&
        Objects.equals(this.iconFolder, getUniverseGraphicsGraphicIdOk.iconFolder) &&
        Objects.equals(this.sofDna, getUniverseGraphicsGraphicIdOk.sofDna) &&
        Objects.equals(this.sofFationName, getUniverseGraphicsGraphicIdOk.sofFationName) &&
        Objects.equals(this.sofHullName, getUniverseGraphicsGraphicIdOk.sofHullName) &&
        Objects.equals(this.sofRaceName, getUniverseGraphicsGraphicIdOk.sofRaceName);
  }

  @Override
  public int hashCode() {
    return Objects.hash(collisionFile, graphicFile, graphicId, iconFolder, sofDna, sofFationName, sofHullName, sofRaceName);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class GetUniverseGraphicsGraphicIdOk {\n");
    sb.append("    collisionFile: ").append(toIndentedString(collisionFile)).append("\n");
    sb.append("    graphicFile: ").append(toIndentedString(graphicFile)).append("\n");
    sb.append("    graphicId: ").append(toIndentedString(graphicId)).append("\n");
    sb.append("    iconFolder: ").append(toIndentedString(iconFolder)).append("\n");
    sb.append("    sofDna: ").append(toIndentedString(sofDna)).append("\n");
    sb.append("    sofFationName: ").append(toIndentedString(sofFationName)).append("\n");
    sb.append("    sofHullName: ").append(toIndentedString(sofHullName)).append("\n");
    sb.append("    sofRaceName: ").append(toIndentedString(sofRaceName)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("collision_file");
    openapiFields.add("graphic_file");
    openapiFields.add("graphic_id");
    openapiFields.add("icon_folder");
    openapiFields.add("sof_dna");
    openapiFields.add("sof_fation_name");
    openapiFields.add("sof_hull_name");
    openapiFields.add("sof_race_name");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("graphic_id");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to GetUniverseGraphicsGraphicIdOk
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!GetUniverseGraphicsGraphicIdOk.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in GetUniverseGraphicsGraphicIdOk is not found in the empty JSON string", GetUniverseGraphicsGraphicIdOk.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!GetUniverseGraphicsGraphicIdOk.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `GetUniverseGraphicsGraphicIdOk` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : GetUniverseGraphicsGraphicIdOk.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("collision_file") != null && !jsonObj.get("collision_file").isJsonNull()) && !jsonObj.get("collision_file").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `collision_file` to be a primitive type in the JSON string but got `%s`", jsonObj.get("collision_file").toString()));
      }
      if ((jsonObj.get("graphic_file") != null && !jsonObj.get("graphic_file").isJsonNull()) && !jsonObj.get("graphic_file").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `graphic_file` to be a primitive type in the JSON string but got `%s`", jsonObj.get("graphic_file").toString()));
      }
      if ((jsonObj.get("icon_folder") != null && !jsonObj.get("icon_folder").isJsonNull()) && !jsonObj.get("icon_folder").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `icon_folder` to be a primitive type in the JSON string but got `%s`", jsonObj.get("icon_folder").toString()));
      }
      if ((jsonObj.get("sof_dna") != null && !jsonObj.get("sof_dna").isJsonNull()) && !jsonObj.get("sof_dna").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `sof_dna` to be a primitive type in the JSON string but got `%s`", jsonObj.get("sof_dna").toString()));
      }
      if ((jsonObj.get("sof_fation_name") != null && !jsonObj.get("sof_fation_name").isJsonNull()) && !jsonObj.get("sof_fation_name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `sof_fation_name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("sof_fation_name").toString()));
      }
      if ((jsonObj.get("sof_hull_name") != null && !jsonObj.get("sof_hull_name").isJsonNull()) && !jsonObj.get("sof_hull_name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `sof_hull_name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("sof_hull_name").toString()));
      }
      if ((jsonObj.get("sof_race_name") != null && !jsonObj.get("sof_race_name").isJsonNull()) && !jsonObj.get("sof_race_name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `sof_race_name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("sof_race_name").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!GetUniverseGraphicsGraphicIdOk.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'GetUniverseGraphicsGraphicIdOk' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<GetUniverseGraphicsGraphicIdOk> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(GetUniverseGraphicsGraphicIdOk.class));

       return (TypeAdapter<T>) new TypeAdapter<GetUniverseGraphicsGraphicIdOk>() {
           @Override
           public void write(JsonWriter out, GetUniverseGraphicsGraphicIdOk value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public GetUniverseGraphicsGraphicIdOk read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of GetUniverseGraphicsGraphicIdOk given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of GetUniverseGraphicsGraphicIdOk
   * @throws IOException if the JSON string is invalid with respect to GetUniverseGraphicsGraphicIdOk
   */
  public static GetUniverseGraphicsGraphicIdOk fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, GetUniverseGraphicsGraphicIdOk.class);
  }

  /**
   * Convert an instance of GetUniverseGraphicsGraphicIdOk to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

