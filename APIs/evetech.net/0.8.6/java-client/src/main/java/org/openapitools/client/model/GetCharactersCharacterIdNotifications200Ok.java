/*
 * EVE Swagger Interface
 * An OpenAPI for EVE Online
 *
 * The version of the OpenAPI document: 0.8.6
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.time.OffsetDateTime;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * 200 ok object
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:27:54.306821-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class GetCharactersCharacterIdNotifications200Ok {
  public static final String SERIALIZED_NAME_IS_READ = "is_read";
  @SerializedName(SERIALIZED_NAME_IS_READ)
  private Boolean isRead;

  public static final String SERIALIZED_NAME_NOTIFICATION_ID = "notification_id";
  @SerializedName(SERIALIZED_NAME_NOTIFICATION_ID)
  private Long notificationId;

  public static final String SERIALIZED_NAME_SENDER_ID = "sender_id";
  @SerializedName(SERIALIZED_NAME_SENDER_ID)
  private Integer senderId;

  /**
   * sender_type string
   */
  @JsonAdapter(SenderTypeEnum.Adapter.class)
  public enum SenderTypeEnum {
    CHARACTER("character"),
    
    CORPORATION("corporation"),
    
    ALLIANCE("alliance"),
    
    FACTION("faction"),
    
    OTHER("other");

    private String value;

    SenderTypeEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static SenderTypeEnum fromValue(String value) {
      for (SenderTypeEnum b : SenderTypeEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<SenderTypeEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final SenderTypeEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public SenderTypeEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return SenderTypeEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      SenderTypeEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_SENDER_TYPE = "sender_type";
  @SerializedName(SERIALIZED_NAME_SENDER_TYPE)
  private SenderTypeEnum senderType;

  public static final String SERIALIZED_NAME_TEXT = "text";
  @SerializedName(SERIALIZED_NAME_TEXT)
  private String text;

  public static final String SERIALIZED_NAME_TIMESTAMP = "timestamp";
  @SerializedName(SERIALIZED_NAME_TIMESTAMP)
  private OffsetDateTime timestamp;

  /**
   * type string
   */
  @JsonAdapter(TypeEnum.Adapter.class)
  public enum TypeEnum {
    ACCEPTED_ALLY("AcceptedAlly"),
    
    ACCEPTED_SURRENDER("AcceptedSurrender"),
    
    ALL_ANCHORING_MSG("AllAnchoringMsg"),
    
    ALL_MAINTENANCE_BILL_MSG("AllMaintenanceBillMsg"),
    
    ALL_STRUC_INVULNERABLE_MSG("AllStrucInvulnerableMsg"),
    
    ALL_STRUCT_VULNERABLE_MSG("AllStructVulnerableMsg"),
    
    ALL_WAR_CORP_JOINED_ALLIANCE_MSG("AllWarCorpJoinedAllianceMsg"),
    
    ALL_WAR_DECLARED_MSG("AllWarDeclaredMsg"),
    
    ALL_WAR_INVALIDATED_MSG("AllWarInvalidatedMsg"),
    
    ALL_WAR_RETRACTED_MSG("AllWarRetractedMsg"),
    
    ALL_WAR_SURRENDER_MSG("AllWarSurrenderMsg"),
    
    ALLIANCE_CAPITAL_CHANGED("AllianceCapitalChanged"),
    
    ALLY_CONTRACT_CANCELLED("AllyContractCancelled"),
    
    ALLY_JOINED_WAR_AGGRESSOR_MSG("AllyJoinedWarAggressorMsg"),
    
    ALLY_JOINED_WAR_ALLY_MSG("AllyJoinedWarAllyMsg"),
    
    ALLY_JOINED_WAR_DEFENDER_MSG("AllyJoinedWarDefenderMsg"),
    
    BATTLE_PUNISH_FRIENDLY_FIRE("BattlePunishFriendlyFire"),
    
    BILL_OUT_OF_MONEY_MSG("BillOutOfMoneyMsg"),
    
    BILL_PAID_CORP_ALL_MSG("BillPaidCorpAllMsg"),
    
    BOUNTY_CLAIM_MSG("BountyClaimMsg"),
    
    BOUNTY_ESS_SHARED("BountyESSShared"),
    
    BOUNTY_ESS_TAKEN("BountyESSTaken"),
    
    BOUNTY_PLACED_ALLIANCE("BountyPlacedAlliance"),
    
    BOUNTY_PLACED_CHAR("BountyPlacedChar"),
    
    BOUNTY_PLACED_CORP("BountyPlacedCorp"),
    
    BOUNTY_YOUR_BOUNTY_CLAIMED("BountyYourBountyClaimed"),
    
    BUDDY_CONNECT_CONTACT_ADD("BuddyConnectContactAdd"),
    
    CHAR_APP_ACCEPT_MSG("CharAppAcceptMsg"),
    
    CHAR_APP_REJECT_MSG("CharAppRejectMsg"),
    
    CHAR_APP_WITHDRAW_MSG("CharAppWithdrawMsg"),
    
    CHAR_LEFT_CORP_MSG("CharLeftCorpMsg"),
    
    CHAR_MEDAL_MSG("CharMedalMsg"),
    
    CHAR_TERMINATION_MSG("CharTerminationMsg"),
    
    CLONE_ACTIVATION_MSG("CloneActivationMsg"),
    
    CLONE_ACTIVATION_MSG2("CloneActivationMsg2"),
    
    CLONE_MOVED_MSG("CloneMovedMsg"),
    
    CLONE_REVOKED_MSG1("CloneRevokedMsg1"),
    
    CLONE_REVOKED_MSG2("CloneRevokedMsg2"),
    
    COMBAT_OPERATION_FINISHED("CombatOperationFinished"),
    
    CONTACT_ADD("ContactAdd"),
    
    CONTACT_EDIT("ContactEdit"),
    
    CONTAINER_PASSWORD_MSG("ContainerPasswordMsg"),
    
    CORP_ALL_BILL_MSG("CorpAllBillMsg"),
    
    CORP_APP_ACCEPT_MSG("CorpAppAcceptMsg"),
    
    CORP_APP_INVITED_MSG("CorpAppInvitedMsg"),
    
    CORP_APP_NEW_MSG("CorpAppNewMsg"),
    
    CORP_APP_REJECT_CUSTOM_MSG("CorpAppRejectCustomMsg"),
    
    CORP_APP_REJECT_MSG("CorpAppRejectMsg"),
    
    CORP_DIVIDEND_MSG("CorpDividendMsg"),
    
    CORP_FRIENDLY_FIRE_DISABLE_TIMER_COMPLETED("CorpFriendlyFireDisableTimerCompleted"),
    
    CORP_FRIENDLY_FIRE_DISABLE_TIMER_STARTED("CorpFriendlyFireDisableTimerStarted"),
    
    CORP_FRIENDLY_FIRE_ENABLE_TIMER_COMPLETED("CorpFriendlyFireEnableTimerCompleted"),
    
    CORP_FRIENDLY_FIRE_ENABLE_TIMER_STARTED("CorpFriendlyFireEnableTimerStarted"),
    
    CORP_KICKED("CorpKicked"),
    
    CORP_LIQUIDATION_MSG("CorpLiquidationMsg"),
    
    CORP_NEW_CEO_MSG("CorpNewCEOMsg"),
    
    CORP_NEWS_MSG("CorpNewsMsg"),
    
    CORP_OFFICE_EXPIRATION_MSG("CorpOfficeExpirationMsg"),
    
    CORP_STRUCT_LOST_MSG("CorpStructLostMsg"),
    
    CORP_TAX_CHANGE_MSG("CorpTaxChangeMsg"),
    
    CORP_VOTE_CEO_REVOKED_MSG("CorpVoteCEORevokedMsg"),
    
    CORP_VOTE_MSG("CorpVoteMsg"),
    
    CORP_WAR_DECLARED_MSG("CorpWarDeclaredMsg"),
    
    CORP_WAR_FIGHTING_LEGAL_MSG("CorpWarFightingLegalMsg"),
    
    CORP_WAR_INVALIDATED_MSG("CorpWarInvalidatedMsg"),
    
    CORP_WAR_RETRACTED_MSG("CorpWarRetractedMsg"),
    
    CORP_WAR_SURRENDER_MSG("CorpWarSurrenderMsg"),
    
    CUSTOMS_MSG("CustomsMsg"),
    
    DECLARE_WAR("DeclareWar"),
    
    DISTRICT_ATTACKED("DistrictAttacked"),
    
    DUST_APP_ACCEPTED_MSG("DustAppAcceptedMsg"),
    
    ENTOSIS_CAPTURE_STARTED("EntosisCaptureStarted"),
    
    FW_ALLIANCE_KICK_MSG("FWAllianceKickMsg"),
    
    FW_ALLIANCE_WARNING_MSG("FWAllianceWarningMsg"),
    
    FW_CHAR_KICK_MSG("FWCharKickMsg"),
    
    FW_CHAR_RANK_GAIN_MSG("FWCharRankGainMsg"),
    
    FW_CHAR_RANK_LOSS_MSG("FWCharRankLossMsg"),
    
    FW_CHAR_WARNING_MSG("FWCharWarningMsg"),
    
    FW_CORP_JOIN_MSG("FWCorpJoinMsg"),
    
    FW_CORP_KICK_MSG("FWCorpKickMsg"),
    
    FW_CORP_LEAVE_MSG("FWCorpLeaveMsg"),
    
    FW_CORP_WARNING_MSG("FWCorpWarningMsg"),
    
    FAC_WAR_CORP_JOIN_REQUEST_MSG("FacWarCorpJoinRequestMsg"),
    
    FAC_WAR_CORP_JOIN_WITHDRAW_MSG("FacWarCorpJoinWithdrawMsg"),
    
    FAC_WAR_CORP_LEAVE_REQUEST_MSG("FacWarCorpLeaveRequestMsg"),
    
    FAC_WAR_CORP_LEAVE_WITHDRAW_MSG("FacWarCorpLeaveWithdrawMsg"),
    
    FAC_WAR_LP_DISQUALIFIED_EVENT("FacWarLPDisqualifiedEvent"),
    
    FAC_WAR_LP_DISQUALIFIED_KILL("FacWarLPDisqualifiedKill"),
    
    FAC_WAR_LP_PAYOUT_EVENT("FacWarLPPayoutEvent"),
    
    FAC_WAR_LP_PAYOUT_KILL("FacWarLPPayoutKill"),
    
    GAME_TIME_ADDED("GameTimeAdded"),
    
    GAME_TIME_RECEIVED("GameTimeReceived"),
    
    GAME_TIME_SENT("GameTimeSent"),
    
    GIFT_RECEIVED("GiftReceived"),
    
    I_HUB_DESTROYED_BY_BILL_FAILURE("IHubDestroyedByBillFailure"),
    
    INCURSION_COMPLETED_MSG("IncursionCompletedMsg"),
    
    INDUSTRY_OPERATION_FINISHED("IndustryOperationFinished"),
    
    INDUSTRY_TEAM_AUCTION_LOST("IndustryTeamAuctionLost"),
    
    INDUSTRY_TEAM_AUCTION_WON("IndustryTeamAuctionWon"),
    
    INFRASTRUCTURE_HUB_BILL_ABOUT_TO_EXPIRE("InfrastructureHubBillAboutToExpire"),
    
    INSURANCE_EXPIRATION_MSG("InsuranceExpirationMsg"),
    
    INSURANCE_FIRST_SHIP_MSG("InsuranceFirstShipMsg"),
    
    INSURANCE_INVALIDATED_MSG("InsuranceInvalidatedMsg"),
    
    INSURANCE_ISSUED_MSG("InsuranceIssuedMsg"),
    
    INSURANCE_PAYOUT_MSG("InsurancePayoutMsg"),
    
    JUMP_CLONE_DELETED_MSG1("JumpCloneDeletedMsg1"),
    
    JUMP_CLONE_DELETED_MSG2("JumpCloneDeletedMsg2"),
    
    KILL_REPORT_FINAL_BLOW("KillReportFinalBlow"),
    
    KILL_REPORT_VICTIM("KillReportVictim"),
    
    KILL_RIGHT_AVAILABLE("KillRightAvailable"),
    
    KILL_RIGHT_AVAILABLE_OPEN("KillRightAvailableOpen"),
    
    KILL_RIGHT_EARNED("KillRightEarned"),
    
    KILL_RIGHT_UNAVAILABLE("KillRightUnavailable"),
    
    KILL_RIGHT_UNAVAILABLE_OPEN("KillRightUnavailableOpen"),
    
    KILL_RIGHT_USED("KillRightUsed"),
    
    LOCATE_CHAR_MSG("LocateCharMsg"),
    
    MADE_WAR_MUTUAL("MadeWarMutual"),
    
    MERC_OFFERED_NEGOTIATION_MSG("MercOfferedNegotiationMsg"),
    
    MISSION_OFFER_EXPIRATION_MSG("MissionOfferExpirationMsg"),
    
    MISSION_TIMEOUT_MSG("MissionTimeoutMsg"),
    
    MOONMINING_AUTOMATIC_FRACTURE("MoonminingAutomaticFracture"),
    
    MOONMINING_EXTRACTION_CANCELLED("MoonminingExtractionCancelled"),
    
    MOONMINING_EXTRACTION_FINISHED("MoonminingExtractionFinished"),
    
    MOONMINING_EXTRACTION_STARTED("MoonminingExtractionStarted"),
    
    MOONMINING_LASER_FIRED("MoonminingLaserFired"),
    
    NPC_STANDINGS_GAINED("NPCStandingsGained"),
    
    NPC_STANDINGS_LOST("NPCStandingsLost"),
    
    OFFERED_SURRENDER("OfferedSurrender"),
    
    OFFERED_TO_ALLY("OfferedToAlly"),
    
    OLD_LSC_MESSAGES("OldLscMessages"),
    
    OPERATION_FINISHED("OperationFinished"),
    
    ORBITAL_ATTACKED("OrbitalAttacked"),
    
    ORBITAL_REINFORCED("OrbitalReinforced"),
    
    OWNERSHIP_TRANSFERRED("OwnershipTransferred"),
    
    REIMBURSEMENT_MSG("ReimbursementMsg"),
    
    RESEARCH_MISSION_AVAILABLE_MSG("ResearchMissionAvailableMsg"),
    
    RETRACTS_WAR("RetractsWar"),
    
    SEASONAL_CHALLENGE_COMPLETED("SeasonalChallengeCompleted"),
    
    SOV_ALL_CLAIM_AQUIRED_MSG("SovAllClaimAquiredMsg"),
    
    SOV_ALL_CLAIM_LOST_MSG("SovAllClaimLostMsg"),
    
    SOV_COMMAND_NODE_EVENT_STARTED("SovCommandNodeEventStarted"),
    
    SOV_CORP_BILL_LATE_MSG("SovCorpBillLateMsg"),
    
    SOV_CORP_CLAIM_FAIL_MSG("SovCorpClaimFailMsg"),
    
    SOV_DISRUPTOR_MSG("SovDisruptorMsg"),
    
    SOV_STATION_ENTERED_FREEPORT("SovStationEnteredFreeport"),
    
    SOV_STRUCTURE_DESTROYED("SovStructureDestroyed"),
    
    SOV_STRUCTURE_REINFORCED("SovStructureReinforced"),
    
    SOV_STRUCTURE_SELF_DESTRUCT_CANCEL("SovStructureSelfDestructCancel"),
    
    SOV_STRUCTURE_SELF_DESTRUCT_FINISHED("SovStructureSelfDestructFinished"),
    
    SOV_STRUCTURE_SELF_DESTRUCT_REQUESTED("SovStructureSelfDestructRequested"),
    
    SOVEREIGNTY_IH_DAMAGE_MSG("SovereigntyIHDamageMsg"),
    
    SOVEREIGNTY_SBU_DAMAGE_MSG("SovereigntySBUDamageMsg"),
    
    SOVEREIGNTY_TCU_DAMAGE_MSG("SovereigntyTCUDamageMsg"),
    
    STATION_AGGRESSION_MSG1("StationAggressionMsg1"),
    
    STATION_AGGRESSION_MSG2("StationAggressionMsg2"),
    
    STATION_CONQUER_MSG("StationConquerMsg"),
    
    STATION_SERVICE_DISABLED("StationServiceDisabled"),
    
    STATION_SERVICE_ENABLED("StationServiceEnabled"),
    
    STATION_STATE_CHANGE_MSG("StationStateChangeMsg"),
    
    STORY_LINE_MISSION_AVAILABLE_MSG("StoryLineMissionAvailableMsg"),
    
    STRUCTURE_ANCHORING("StructureAnchoring"),
    
    STRUCTURE_COURIER_CONTRACT_CHANGED("StructureCourierContractChanged"),
    
    STRUCTURE_DESTROYED("StructureDestroyed"),
    
    STRUCTURE_FUEL_ALERT("StructureFuelAlert"),
    
    STRUCTURE_ITEMS_DELIVERED("StructureItemsDelivered"),
    
    STRUCTURE_ITEMS_MOVED_TO_SAFETY("StructureItemsMovedToSafety"),
    
    STRUCTURE_LOST_ARMOR("StructureLostArmor"),
    
    STRUCTURE_LOST_SHIELDS("StructureLostShields"),
    
    STRUCTURE_ONLINE("StructureOnline"),
    
    STRUCTURE_SERVICES_OFFLINE("StructureServicesOffline"),
    
    STRUCTURE_UNANCHORING("StructureUnanchoring"),
    
    STRUCTURE_UNDER_ATTACK("StructureUnderAttack"),
    
    STRUCTURE_WENT_HIGH_POWER("StructureWentHighPower"),
    
    STRUCTURE_WENT_LOW_POWER("StructureWentLowPower"),
    
    STRUCTURES_JOBS_CANCELLED("StructuresJobsCancelled"),
    
    STRUCTURES_JOBS_PAUSED("StructuresJobsPaused"),
    
    STRUCTURES_REINFORCEMENT_CHANGED("StructuresReinforcementChanged"),
    
    TOWER_ALERT_MSG("TowerAlertMsg"),
    
    TOWER_RESOURCE_ALERT_MSG("TowerResourceAlertMsg"),
    
    TRANSACTION_REVERSAL_MSG("TransactionReversalMsg"),
    
    TUTORIAL_MSG("TutorialMsg"),
    
    WAR_ALLY_OFFER_DECLINED_MSG("WarAllyOfferDeclinedMsg"),
    
    WAR_SURRENDER_DECLINED_MSG("WarSurrenderDeclinedMsg"),
    
    WAR_SURRENDER_OFFER_MSG("WarSurrenderOfferMsg");

    private String value;

    TypeEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static TypeEnum fromValue(String value) {
      for (TypeEnum b : TypeEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<TypeEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final TypeEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public TypeEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return TypeEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      TypeEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_TYPE = "type";
  @SerializedName(SERIALIZED_NAME_TYPE)
  private TypeEnum type;

  public GetCharactersCharacterIdNotifications200Ok() {
  }

  public GetCharactersCharacterIdNotifications200Ok isRead(Boolean isRead) {
    this.isRead = isRead;
    return this;
  }

  /**
   * is_read boolean
   * @return isRead
   */
  @javax.annotation.Nullable
  public Boolean getIsRead() {
    return isRead;
  }

  public void setIsRead(Boolean isRead) {
    this.isRead = isRead;
  }


  public GetCharactersCharacterIdNotifications200Ok notificationId(Long notificationId) {
    this.notificationId = notificationId;
    return this;
  }

  /**
   * notification_id integer
   * @return notificationId
   */
  @javax.annotation.Nonnull
  public Long getNotificationId() {
    return notificationId;
  }

  public void setNotificationId(Long notificationId) {
    this.notificationId = notificationId;
  }


  public GetCharactersCharacterIdNotifications200Ok senderId(Integer senderId) {
    this.senderId = senderId;
    return this;
  }

  /**
   * sender_id integer
   * @return senderId
   */
  @javax.annotation.Nonnull
  public Integer getSenderId() {
    return senderId;
  }

  public void setSenderId(Integer senderId) {
    this.senderId = senderId;
  }


  public GetCharactersCharacterIdNotifications200Ok senderType(SenderTypeEnum senderType) {
    this.senderType = senderType;
    return this;
  }

  /**
   * sender_type string
   * @return senderType
   */
  @javax.annotation.Nonnull
  public SenderTypeEnum getSenderType() {
    return senderType;
  }

  public void setSenderType(SenderTypeEnum senderType) {
    this.senderType = senderType;
  }


  public GetCharactersCharacterIdNotifications200Ok text(String text) {
    this.text = text;
    return this;
  }

  /**
   * text string
   * @return text
   */
  @javax.annotation.Nullable
  public String getText() {
    return text;
  }

  public void setText(String text) {
    this.text = text;
  }


  public GetCharactersCharacterIdNotifications200Ok timestamp(OffsetDateTime timestamp) {
    this.timestamp = timestamp;
    return this;
  }

  /**
   * timestamp string
   * @return timestamp
   */
  @javax.annotation.Nonnull
  public OffsetDateTime getTimestamp() {
    return timestamp;
  }

  public void setTimestamp(OffsetDateTime timestamp) {
    this.timestamp = timestamp;
  }


  public GetCharactersCharacterIdNotifications200Ok type(TypeEnum type) {
    this.type = type;
    return this;
  }

  /**
   * type string
   * @return type
   */
  @javax.annotation.Nonnull
  public TypeEnum getType() {
    return type;
  }

  public void setType(TypeEnum type) {
    this.type = type;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    GetCharactersCharacterIdNotifications200Ok getCharactersCharacterIdNotifications200Ok = (GetCharactersCharacterIdNotifications200Ok) o;
    return Objects.equals(this.isRead, getCharactersCharacterIdNotifications200Ok.isRead) &&
        Objects.equals(this.notificationId, getCharactersCharacterIdNotifications200Ok.notificationId) &&
        Objects.equals(this.senderId, getCharactersCharacterIdNotifications200Ok.senderId) &&
        Objects.equals(this.senderType, getCharactersCharacterIdNotifications200Ok.senderType) &&
        Objects.equals(this.text, getCharactersCharacterIdNotifications200Ok.text) &&
        Objects.equals(this.timestamp, getCharactersCharacterIdNotifications200Ok.timestamp) &&
        Objects.equals(this.type, getCharactersCharacterIdNotifications200Ok.type);
  }

  @Override
  public int hashCode() {
    return Objects.hash(isRead, notificationId, senderId, senderType, text, timestamp, type);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class GetCharactersCharacterIdNotifications200Ok {\n");
    sb.append("    isRead: ").append(toIndentedString(isRead)).append("\n");
    sb.append("    notificationId: ").append(toIndentedString(notificationId)).append("\n");
    sb.append("    senderId: ").append(toIndentedString(senderId)).append("\n");
    sb.append("    senderType: ").append(toIndentedString(senderType)).append("\n");
    sb.append("    text: ").append(toIndentedString(text)).append("\n");
    sb.append("    timestamp: ").append(toIndentedString(timestamp)).append("\n");
    sb.append("    type: ").append(toIndentedString(type)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("is_read");
    openapiFields.add("notification_id");
    openapiFields.add("sender_id");
    openapiFields.add("sender_type");
    openapiFields.add("text");
    openapiFields.add("timestamp");
    openapiFields.add("type");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("notification_id");
    openapiRequiredFields.add("sender_id");
    openapiRequiredFields.add("sender_type");
    openapiRequiredFields.add("timestamp");
    openapiRequiredFields.add("type");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to GetCharactersCharacterIdNotifications200Ok
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!GetCharactersCharacterIdNotifications200Ok.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in GetCharactersCharacterIdNotifications200Ok is not found in the empty JSON string", GetCharactersCharacterIdNotifications200Ok.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!GetCharactersCharacterIdNotifications200Ok.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `GetCharactersCharacterIdNotifications200Ok` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : GetCharactersCharacterIdNotifications200Ok.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if (!jsonObj.get("sender_type").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `sender_type` to be a primitive type in the JSON string but got `%s`", jsonObj.get("sender_type").toString()));
      }
      // validate the required field `sender_type`
      SenderTypeEnum.validateJsonElement(jsonObj.get("sender_type"));
      if ((jsonObj.get("text") != null && !jsonObj.get("text").isJsonNull()) && !jsonObj.get("text").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `text` to be a primitive type in the JSON string but got `%s`", jsonObj.get("text").toString()));
      }
      if (!jsonObj.get("type").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `type` to be a primitive type in the JSON string but got `%s`", jsonObj.get("type").toString()));
      }
      // validate the required field `type`
      TypeEnum.validateJsonElement(jsonObj.get("type"));
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!GetCharactersCharacterIdNotifications200Ok.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'GetCharactersCharacterIdNotifications200Ok' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<GetCharactersCharacterIdNotifications200Ok> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(GetCharactersCharacterIdNotifications200Ok.class));

       return (TypeAdapter<T>) new TypeAdapter<GetCharactersCharacterIdNotifications200Ok>() {
           @Override
           public void write(JsonWriter out, GetCharactersCharacterIdNotifications200Ok value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public GetCharactersCharacterIdNotifications200Ok read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of GetCharactersCharacterIdNotifications200Ok given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of GetCharactersCharacterIdNotifications200Ok
   * @throws IOException if the JSON string is invalid with respect to GetCharactersCharacterIdNotifications200Ok
   */
  public static GetCharactersCharacterIdNotifications200Ok fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, GetCharactersCharacterIdNotifications200Ok.class);
  }

  /**
   * Convert an instance of GetCharactersCharacterIdNotifications200Ok to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

