/*
 * EVE Swagger Interface
 * An OpenAPI for EVE Online
 *
 * The version of the OpenAPI document: 0.8.6
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.time.OffsetDateTime;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * 200 ok object
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:27:54.306821-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class GetCharactersCharacterIdAttributesOk {
  public static final String SERIALIZED_NAME_ACCRUED_REMAP_COOLDOWN_DATE = "accrued_remap_cooldown_date";
  @SerializedName(SERIALIZED_NAME_ACCRUED_REMAP_COOLDOWN_DATE)
  private OffsetDateTime accruedRemapCooldownDate;

  public static final String SERIALIZED_NAME_BONUS_REMAPS = "bonus_remaps";
  @SerializedName(SERIALIZED_NAME_BONUS_REMAPS)
  private Integer bonusRemaps;

  public static final String SERIALIZED_NAME_CHARISMA = "charisma";
  @SerializedName(SERIALIZED_NAME_CHARISMA)
  private Integer charisma;

  public static final String SERIALIZED_NAME_INTELLIGENCE = "intelligence";
  @SerializedName(SERIALIZED_NAME_INTELLIGENCE)
  private Integer intelligence;

  public static final String SERIALIZED_NAME_LAST_REMAP_DATE = "last_remap_date";
  @SerializedName(SERIALIZED_NAME_LAST_REMAP_DATE)
  private OffsetDateTime lastRemapDate;

  public static final String SERIALIZED_NAME_MEMORY = "memory";
  @SerializedName(SERIALIZED_NAME_MEMORY)
  private Integer memory;

  public static final String SERIALIZED_NAME_PERCEPTION = "perception";
  @SerializedName(SERIALIZED_NAME_PERCEPTION)
  private Integer perception;

  public static final String SERIALIZED_NAME_WILLPOWER = "willpower";
  @SerializedName(SERIALIZED_NAME_WILLPOWER)
  private Integer willpower;

  public GetCharactersCharacterIdAttributesOk() {
  }

  public GetCharactersCharacterIdAttributesOk accruedRemapCooldownDate(OffsetDateTime accruedRemapCooldownDate) {
    this.accruedRemapCooldownDate = accruedRemapCooldownDate;
    return this;
  }

  /**
   * Neural remapping cooldown after a character uses remap accrued over time
   * @return accruedRemapCooldownDate
   */
  @javax.annotation.Nullable
  public OffsetDateTime getAccruedRemapCooldownDate() {
    return accruedRemapCooldownDate;
  }

  public void setAccruedRemapCooldownDate(OffsetDateTime accruedRemapCooldownDate) {
    this.accruedRemapCooldownDate = accruedRemapCooldownDate;
  }


  public GetCharactersCharacterIdAttributesOk bonusRemaps(Integer bonusRemaps) {
    this.bonusRemaps = bonusRemaps;
    return this;
  }

  /**
   * Number of available bonus character neural remaps
   * @return bonusRemaps
   */
  @javax.annotation.Nullable
  public Integer getBonusRemaps() {
    return bonusRemaps;
  }

  public void setBonusRemaps(Integer bonusRemaps) {
    this.bonusRemaps = bonusRemaps;
  }


  public GetCharactersCharacterIdAttributesOk charisma(Integer charisma) {
    this.charisma = charisma;
    return this;
  }

  /**
   * charisma integer
   * @return charisma
   */
  @javax.annotation.Nonnull
  public Integer getCharisma() {
    return charisma;
  }

  public void setCharisma(Integer charisma) {
    this.charisma = charisma;
  }


  public GetCharactersCharacterIdAttributesOk intelligence(Integer intelligence) {
    this.intelligence = intelligence;
    return this;
  }

  /**
   * intelligence integer
   * @return intelligence
   */
  @javax.annotation.Nonnull
  public Integer getIntelligence() {
    return intelligence;
  }

  public void setIntelligence(Integer intelligence) {
    this.intelligence = intelligence;
  }


  public GetCharactersCharacterIdAttributesOk lastRemapDate(OffsetDateTime lastRemapDate) {
    this.lastRemapDate = lastRemapDate;
    return this;
  }

  /**
   * Datetime of last neural remap, including usage of bonus remaps
   * @return lastRemapDate
   */
  @javax.annotation.Nullable
  public OffsetDateTime getLastRemapDate() {
    return lastRemapDate;
  }

  public void setLastRemapDate(OffsetDateTime lastRemapDate) {
    this.lastRemapDate = lastRemapDate;
  }


  public GetCharactersCharacterIdAttributesOk memory(Integer memory) {
    this.memory = memory;
    return this;
  }

  /**
   * memory integer
   * @return memory
   */
  @javax.annotation.Nonnull
  public Integer getMemory() {
    return memory;
  }

  public void setMemory(Integer memory) {
    this.memory = memory;
  }


  public GetCharactersCharacterIdAttributesOk perception(Integer perception) {
    this.perception = perception;
    return this;
  }

  /**
   * perception integer
   * @return perception
   */
  @javax.annotation.Nonnull
  public Integer getPerception() {
    return perception;
  }

  public void setPerception(Integer perception) {
    this.perception = perception;
  }


  public GetCharactersCharacterIdAttributesOk willpower(Integer willpower) {
    this.willpower = willpower;
    return this;
  }

  /**
   * willpower integer
   * @return willpower
   */
  @javax.annotation.Nonnull
  public Integer getWillpower() {
    return willpower;
  }

  public void setWillpower(Integer willpower) {
    this.willpower = willpower;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    GetCharactersCharacterIdAttributesOk getCharactersCharacterIdAttributesOk = (GetCharactersCharacterIdAttributesOk) o;
    return Objects.equals(this.accruedRemapCooldownDate, getCharactersCharacterIdAttributesOk.accruedRemapCooldownDate) &&
        Objects.equals(this.bonusRemaps, getCharactersCharacterIdAttributesOk.bonusRemaps) &&
        Objects.equals(this.charisma, getCharactersCharacterIdAttributesOk.charisma) &&
        Objects.equals(this.intelligence, getCharactersCharacterIdAttributesOk.intelligence) &&
        Objects.equals(this.lastRemapDate, getCharactersCharacterIdAttributesOk.lastRemapDate) &&
        Objects.equals(this.memory, getCharactersCharacterIdAttributesOk.memory) &&
        Objects.equals(this.perception, getCharactersCharacterIdAttributesOk.perception) &&
        Objects.equals(this.willpower, getCharactersCharacterIdAttributesOk.willpower);
  }

  @Override
  public int hashCode() {
    return Objects.hash(accruedRemapCooldownDate, bonusRemaps, charisma, intelligence, lastRemapDate, memory, perception, willpower);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class GetCharactersCharacterIdAttributesOk {\n");
    sb.append("    accruedRemapCooldownDate: ").append(toIndentedString(accruedRemapCooldownDate)).append("\n");
    sb.append("    bonusRemaps: ").append(toIndentedString(bonusRemaps)).append("\n");
    sb.append("    charisma: ").append(toIndentedString(charisma)).append("\n");
    sb.append("    intelligence: ").append(toIndentedString(intelligence)).append("\n");
    sb.append("    lastRemapDate: ").append(toIndentedString(lastRemapDate)).append("\n");
    sb.append("    memory: ").append(toIndentedString(memory)).append("\n");
    sb.append("    perception: ").append(toIndentedString(perception)).append("\n");
    sb.append("    willpower: ").append(toIndentedString(willpower)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("accrued_remap_cooldown_date");
    openapiFields.add("bonus_remaps");
    openapiFields.add("charisma");
    openapiFields.add("intelligence");
    openapiFields.add("last_remap_date");
    openapiFields.add("memory");
    openapiFields.add("perception");
    openapiFields.add("willpower");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("charisma");
    openapiRequiredFields.add("intelligence");
    openapiRequiredFields.add("memory");
    openapiRequiredFields.add("perception");
    openapiRequiredFields.add("willpower");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to GetCharactersCharacterIdAttributesOk
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!GetCharactersCharacterIdAttributesOk.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in GetCharactersCharacterIdAttributesOk is not found in the empty JSON string", GetCharactersCharacterIdAttributesOk.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!GetCharactersCharacterIdAttributesOk.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `GetCharactersCharacterIdAttributesOk` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : GetCharactersCharacterIdAttributesOk.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!GetCharactersCharacterIdAttributesOk.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'GetCharactersCharacterIdAttributesOk' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<GetCharactersCharacterIdAttributesOk> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(GetCharactersCharacterIdAttributesOk.class));

       return (TypeAdapter<T>) new TypeAdapter<GetCharactersCharacterIdAttributesOk>() {
           @Override
           public void write(JsonWriter out, GetCharactersCharacterIdAttributesOk value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public GetCharactersCharacterIdAttributesOk read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of GetCharactersCharacterIdAttributesOk given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of GetCharactersCharacterIdAttributesOk
   * @throws IOException if the JSON string is invalid with respect to GetCharactersCharacterIdAttributesOk
   */
  public static GetCharactersCharacterIdAttributesOk fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, GetCharactersCharacterIdAttributesOk.class);
  }

  /**
   * Convert an instance of GetCharactersCharacterIdAttributesOk to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

