/*
 * EVE Swagger Interface
 * An OpenAPI for EVE Online
 *
 * The version of the OpenAPI document: 0.8.6
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * skill object
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:27:54.306821-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class GetCharactersCharacterIdSkillsSkill {
  public static final String SERIALIZED_NAME_ACTIVE_SKILL_LEVEL = "active_skill_level";
  @SerializedName(SERIALIZED_NAME_ACTIVE_SKILL_LEVEL)
  private Integer activeSkillLevel;

  public static final String SERIALIZED_NAME_SKILL_ID = "skill_id";
  @SerializedName(SERIALIZED_NAME_SKILL_ID)
  private Integer skillId;

  public static final String SERIALIZED_NAME_SKILLPOINTS_IN_SKILL = "skillpoints_in_skill";
  @SerializedName(SERIALIZED_NAME_SKILLPOINTS_IN_SKILL)
  private Long skillpointsInSkill;

  public static final String SERIALIZED_NAME_TRAINED_SKILL_LEVEL = "trained_skill_level";
  @SerializedName(SERIALIZED_NAME_TRAINED_SKILL_LEVEL)
  private Integer trainedSkillLevel;

  public GetCharactersCharacterIdSkillsSkill() {
  }

  public GetCharactersCharacterIdSkillsSkill activeSkillLevel(Integer activeSkillLevel) {
    this.activeSkillLevel = activeSkillLevel;
    return this;
  }

  /**
   * active_skill_level integer
   * @return activeSkillLevel
   */
  @javax.annotation.Nonnull
  public Integer getActiveSkillLevel() {
    return activeSkillLevel;
  }

  public void setActiveSkillLevel(Integer activeSkillLevel) {
    this.activeSkillLevel = activeSkillLevel;
  }


  public GetCharactersCharacterIdSkillsSkill skillId(Integer skillId) {
    this.skillId = skillId;
    return this;
  }

  /**
   * skill_id integer
   * @return skillId
   */
  @javax.annotation.Nonnull
  public Integer getSkillId() {
    return skillId;
  }

  public void setSkillId(Integer skillId) {
    this.skillId = skillId;
  }


  public GetCharactersCharacterIdSkillsSkill skillpointsInSkill(Long skillpointsInSkill) {
    this.skillpointsInSkill = skillpointsInSkill;
    return this;
  }

  /**
   * skillpoints_in_skill integer
   * @return skillpointsInSkill
   */
  @javax.annotation.Nonnull
  public Long getSkillpointsInSkill() {
    return skillpointsInSkill;
  }

  public void setSkillpointsInSkill(Long skillpointsInSkill) {
    this.skillpointsInSkill = skillpointsInSkill;
  }


  public GetCharactersCharacterIdSkillsSkill trainedSkillLevel(Integer trainedSkillLevel) {
    this.trainedSkillLevel = trainedSkillLevel;
    return this;
  }

  /**
   * trained_skill_level integer
   * @return trainedSkillLevel
   */
  @javax.annotation.Nonnull
  public Integer getTrainedSkillLevel() {
    return trainedSkillLevel;
  }

  public void setTrainedSkillLevel(Integer trainedSkillLevel) {
    this.trainedSkillLevel = trainedSkillLevel;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    GetCharactersCharacterIdSkillsSkill getCharactersCharacterIdSkillsSkill = (GetCharactersCharacterIdSkillsSkill) o;
    return Objects.equals(this.activeSkillLevel, getCharactersCharacterIdSkillsSkill.activeSkillLevel) &&
        Objects.equals(this.skillId, getCharactersCharacterIdSkillsSkill.skillId) &&
        Objects.equals(this.skillpointsInSkill, getCharactersCharacterIdSkillsSkill.skillpointsInSkill) &&
        Objects.equals(this.trainedSkillLevel, getCharactersCharacterIdSkillsSkill.trainedSkillLevel);
  }

  @Override
  public int hashCode() {
    return Objects.hash(activeSkillLevel, skillId, skillpointsInSkill, trainedSkillLevel);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class GetCharactersCharacterIdSkillsSkill {\n");
    sb.append("    activeSkillLevel: ").append(toIndentedString(activeSkillLevel)).append("\n");
    sb.append("    skillId: ").append(toIndentedString(skillId)).append("\n");
    sb.append("    skillpointsInSkill: ").append(toIndentedString(skillpointsInSkill)).append("\n");
    sb.append("    trainedSkillLevel: ").append(toIndentedString(trainedSkillLevel)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("active_skill_level");
    openapiFields.add("skill_id");
    openapiFields.add("skillpoints_in_skill");
    openapiFields.add("trained_skill_level");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("active_skill_level");
    openapiRequiredFields.add("skill_id");
    openapiRequiredFields.add("skillpoints_in_skill");
    openapiRequiredFields.add("trained_skill_level");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to GetCharactersCharacterIdSkillsSkill
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!GetCharactersCharacterIdSkillsSkill.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in GetCharactersCharacterIdSkillsSkill is not found in the empty JSON string", GetCharactersCharacterIdSkillsSkill.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!GetCharactersCharacterIdSkillsSkill.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `GetCharactersCharacterIdSkillsSkill` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : GetCharactersCharacterIdSkillsSkill.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!GetCharactersCharacterIdSkillsSkill.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'GetCharactersCharacterIdSkillsSkill' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<GetCharactersCharacterIdSkillsSkill> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(GetCharactersCharacterIdSkillsSkill.class));

       return (TypeAdapter<T>) new TypeAdapter<GetCharactersCharacterIdSkillsSkill>() {
           @Override
           public void write(JsonWriter out, GetCharactersCharacterIdSkillsSkill value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public GetCharactersCharacterIdSkillsSkill read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of GetCharactersCharacterIdSkillsSkill given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of GetCharactersCharacterIdSkillsSkill
   * @throws IOException if the JSON string is invalid with respect to GetCharactersCharacterIdSkillsSkill
   */
  public static GetCharactersCharacterIdSkillsSkill fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, GetCharactersCharacterIdSkillsSkill.class);
  }

  /**
   * Convert an instance of GetCharactersCharacterIdSkillsSkill to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

