/*
 * EVE Swagger Interface
 * An OpenAPI for EVE Online
 *
 * The version of the OpenAPI document: 0.8.6
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * 200 ok object
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:27:54.306821-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class GetUniverseGroupsGroupIdOk {
  public static final String SERIALIZED_NAME_CATEGORY_ID = "category_id";
  @SerializedName(SERIALIZED_NAME_CATEGORY_ID)
  private Integer categoryId;

  public static final String SERIALIZED_NAME_GROUP_ID = "group_id";
  @SerializedName(SERIALIZED_NAME_GROUP_ID)
  private Integer groupId;

  public static final String SERIALIZED_NAME_NAME = "name";
  @SerializedName(SERIALIZED_NAME_NAME)
  private String name;

  public static final String SERIALIZED_NAME_PUBLISHED = "published";
  @SerializedName(SERIALIZED_NAME_PUBLISHED)
  private Boolean published;

  public static final String SERIALIZED_NAME_TYPES = "types";
  @SerializedName(SERIALIZED_NAME_TYPES)
  private List<Integer> types = new ArrayList<>();

  public GetUniverseGroupsGroupIdOk() {
  }

  public GetUniverseGroupsGroupIdOk categoryId(Integer categoryId) {
    this.categoryId = categoryId;
    return this;
  }

  /**
   * category_id integer
   * @return categoryId
   */
  @javax.annotation.Nonnull
  public Integer getCategoryId() {
    return categoryId;
  }

  public void setCategoryId(Integer categoryId) {
    this.categoryId = categoryId;
  }


  public GetUniverseGroupsGroupIdOk groupId(Integer groupId) {
    this.groupId = groupId;
    return this;
  }

  /**
   * group_id integer
   * @return groupId
   */
  @javax.annotation.Nonnull
  public Integer getGroupId() {
    return groupId;
  }

  public void setGroupId(Integer groupId) {
    this.groupId = groupId;
  }


  public GetUniverseGroupsGroupIdOk name(String name) {
    this.name = name;
    return this;
  }

  /**
   * name string
   * @return name
   */
  @javax.annotation.Nonnull
  public String getName() {
    return name;
  }

  public void setName(String name) {
    this.name = name;
  }


  public GetUniverseGroupsGroupIdOk published(Boolean published) {
    this.published = published;
    return this;
  }

  /**
   * published boolean
   * @return published
   */
  @javax.annotation.Nonnull
  public Boolean getPublished() {
    return published;
  }

  public void setPublished(Boolean published) {
    this.published = published;
  }


  public GetUniverseGroupsGroupIdOk types(List<Integer> types) {
    this.types = types;
    return this;
  }

  public GetUniverseGroupsGroupIdOk addTypesItem(Integer typesItem) {
    if (this.types == null) {
      this.types = new ArrayList<>();
    }
    this.types.add(typesItem);
    return this;
  }

  /**
   * types array
   * @return types
   */
  @javax.annotation.Nonnull
  public List<Integer> getTypes() {
    return types;
  }

  public void setTypes(List<Integer> types) {
    this.types = types;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    GetUniverseGroupsGroupIdOk getUniverseGroupsGroupIdOk = (GetUniverseGroupsGroupIdOk) o;
    return Objects.equals(this.categoryId, getUniverseGroupsGroupIdOk.categoryId) &&
        Objects.equals(this.groupId, getUniverseGroupsGroupIdOk.groupId) &&
        Objects.equals(this.name, getUniverseGroupsGroupIdOk.name) &&
        Objects.equals(this.published, getUniverseGroupsGroupIdOk.published) &&
        Objects.equals(this.types, getUniverseGroupsGroupIdOk.types);
  }

  @Override
  public int hashCode() {
    return Objects.hash(categoryId, groupId, name, published, types);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class GetUniverseGroupsGroupIdOk {\n");
    sb.append("    categoryId: ").append(toIndentedString(categoryId)).append("\n");
    sb.append("    groupId: ").append(toIndentedString(groupId)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    published: ").append(toIndentedString(published)).append("\n");
    sb.append("    types: ").append(toIndentedString(types)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("category_id");
    openapiFields.add("group_id");
    openapiFields.add("name");
    openapiFields.add("published");
    openapiFields.add("types");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("category_id");
    openapiRequiredFields.add("group_id");
    openapiRequiredFields.add("name");
    openapiRequiredFields.add("published");
    openapiRequiredFields.add("types");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to GetUniverseGroupsGroupIdOk
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!GetUniverseGroupsGroupIdOk.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in GetUniverseGroupsGroupIdOk is not found in the empty JSON string", GetUniverseGroupsGroupIdOk.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!GetUniverseGroupsGroupIdOk.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `GetUniverseGroupsGroupIdOk` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : GetUniverseGroupsGroupIdOk.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if (!jsonObj.get("name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("name").toString()));
      }
      // ensure the required json array is present
      if (jsonObj.get("types") == null) {
        throw new IllegalArgumentException("Expected the field `linkedContent` to be an array in the JSON string but got `null`");
      } else if (!jsonObj.get("types").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `types` to be an array in the JSON string but got `%s`", jsonObj.get("types").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!GetUniverseGroupsGroupIdOk.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'GetUniverseGroupsGroupIdOk' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<GetUniverseGroupsGroupIdOk> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(GetUniverseGroupsGroupIdOk.class));

       return (TypeAdapter<T>) new TypeAdapter<GetUniverseGroupsGroupIdOk>() {
           @Override
           public void write(JsonWriter out, GetUniverseGroupsGroupIdOk value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public GetUniverseGroupsGroupIdOk read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of GetUniverseGroupsGroupIdOk given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of GetUniverseGroupsGroupIdOk
   * @throws IOException if the JSON string is invalid with respect to GetUniverseGroupsGroupIdOk
   */
  public static GetUniverseGroupsGroupIdOk fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, GetUniverseGroupsGroupIdOk.class);
  }

  /**
   * Convert an instance of GetUniverseGroupsGroupIdOk to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

