/*
 * EVE Swagger Interface
 * An OpenAPI for EVE Online
 *
 * The version of the OpenAPI document: 0.8.6
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.time.OffsetDateTime;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.GetCharactersCharacterIdMedalsGraphic;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * 200 ok object
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:27:54.306821-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class GetCharactersCharacterIdMedals200Ok {
  public static final String SERIALIZED_NAME_CORPORATION_ID = "corporation_id";
  @SerializedName(SERIALIZED_NAME_CORPORATION_ID)
  private Integer corporationId;

  public static final String SERIALIZED_NAME_DATE = "date";
  @SerializedName(SERIALIZED_NAME_DATE)
  private OffsetDateTime date;

  public static final String SERIALIZED_NAME_DESCRIPTION = "description";
  @SerializedName(SERIALIZED_NAME_DESCRIPTION)
  private String description;

  public static final String SERIALIZED_NAME_GRAPHICS = "graphics";
  @SerializedName(SERIALIZED_NAME_GRAPHICS)
  private List<GetCharactersCharacterIdMedalsGraphic> graphics = new ArrayList<>();

  public static final String SERIALIZED_NAME_ISSUER_ID = "issuer_id";
  @SerializedName(SERIALIZED_NAME_ISSUER_ID)
  private Integer issuerId;

  public static final String SERIALIZED_NAME_MEDAL_ID = "medal_id";
  @SerializedName(SERIALIZED_NAME_MEDAL_ID)
  private Integer medalId;

  public static final String SERIALIZED_NAME_REASON = "reason";
  @SerializedName(SERIALIZED_NAME_REASON)
  private String reason;

  /**
   * status string
   */
  @JsonAdapter(StatusEnum.Adapter.class)
  public enum StatusEnum {
    PUBLIC("public"),
    
    PRIVATE("private");

    private String value;

    StatusEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static StatusEnum fromValue(String value) {
      for (StatusEnum b : StatusEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<StatusEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final StatusEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public StatusEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return StatusEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      StatusEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_STATUS = "status";
  @SerializedName(SERIALIZED_NAME_STATUS)
  private StatusEnum status;

  public static final String SERIALIZED_NAME_TITLE = "title";
  @SerializedName(SERIALIZED_NAME_TITLE)
  private String title;

  public GetCharactersCharacterIdMedals200Ok() {
  }

  public GetCharactersCharacterIdMedals200Ok corporationId(Integer corporationId) {
    this.corporationId = corporationId;
    return this;
  }

  /**
   * corporation_id integer
   * @return corporationId
   */
  @javax.annotation.Nonnull
  public Integer getCorporationId() {
    return corporationId;
  }

  public void setCorporationId(Integer corporationId) {
    this.corporationId = corporationId;
  }


  public GetCharactersCharacterIdMedals200Ok date(OffsetDateTime date) {
    this.date = date;
    return this;
  }

  /**
   * date string
   * @return date
   */
  @javax.annotation.Nonnull
  public OffsetDateTime getDate() {
    return date;
  }

  public void setDate(OffsetDateTime date) {
    this.date = date;
  }


  public GetCharactersCharacterIdMedals200Ok description(String description) {
    this.description = description;
    return this;
  }

  /**
   * description string
   * @return description
   */
  @javax.annotation.Nonnull
  public String getDescription() {
    return description;
  }

  public void setDescription(String description) {
    this.description = description;
  }


  public GetCharactersCharacterIdMedals200Ok graphics(List<GetCharactersCharacterIdMedalsGraphic> graphics) {
    this.graphics = graphics;
    return this;
  }

  public GetCharactersCharacterIdMedals200Ok addGraphicsItem(GetCharactersCharacterIdMedalsGraphic graphicsItem) {
    if (this.graphics == null) {
      this.graphics = new ArrayList<>();
    }
    this.graphics.add(graphicsItem);
    return this;
  }

  /**
   * graphics array
   * @return graphics
   */
  @javax.annotation.Nonnull
  public List<GetCharactersCharacterIdMedalsGraphic> getGraphics() {
    return graphics;
  }

  public void setGraphics(List<GetCharactersCharacterIdMedalsGraphic> graphics) {
    this.graphics = graphics;
  }


  public GetCharactersCharacterIdMedals200Ok issuerId(Integer issuerId) {
    this.issuerId = issuerId;
    return this;
  }

  /**
   * issuer_id integer
   * @return issuerId
   */
  @javax.annotation.Nonnull
  public Integer getIssuerId() {
    return issuerId;
  }

  public void setIssuerId(Integer issuerId) {
    this.issuerId = issuerId;
  }


  public GetCharactersCharacterIdMedals200Ok medalId(Integer medalId) {
    this.medalId = medalId;
    return this;
  }

  /**
   * medal_id integer
   * @return medalId
   */
  @javax.annotation.Nonnull
  public Integer getMedalId() {
    return medalId;
  }

  public void setMedalId(Integer medalId) {
    this.medalId = medalId;
  }


  public GetCharactersCharacterIdMedals200Ok reason(String reason) {
    this.reason = reason;
    return this;
  }

  /**
   * reason string
   * @return reason
   */
  @javax.annotation.Nonnull
  public String getReason() {
    return reason;
  }

  public void setReason(String reason) {
    this.reason = reason;
  }


  public GetCharactersCharacterIdMedals200Ok status(StatusEnum status) {
    this.status = status;
    return this;
  }

  /**
   * status string
   * @return status
   */
  @javax.annotation.Nonnull
  public StatusEnum getStatus() {
    return status;
  }

  public void setStatus(StatusEnum status) {
    this.status = status;
  }


  public GetCharactersCharacterIdMedals200Ok title(String title) {
    this.title = title;
    return this;
  }

  /**
   * title string
   * @return title
   */
  @javax.annotation.Nonnull
  public String getTitle() {
    return title;
  }

  public void setTitle(String title) {
    this.title = title;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    GetCharactersCharacterIdMedals200Ok getCharactersCharacterIdMedals200Ok = (GetCharactersCharacterIdMedals200Ok) o;
    return Objects.equals(this.corporationId, getCharactersCharacterIdMedals200Ok.corporationId) &&
        Objects.equals(this.date, getCharactersCharacterIdMedals200Ok.date) &&
        Objects.equals(this.description, getCharactersCharacterIdMedals200Ok.description) &&
        Objects.equals(this.graphics, getCharactersCharacterIdMedals200Ok.graphics) &&
        Objects.equals(this.issuerId, getCharactersCharacterIdMedals200Ok.issuerId) &&
        Objects.equals(this.medalId, getCharactersCharacterIdMedals200Ok.medalId) &&
        Objects.equals(this.reason, getCharactersCharacterIdMedals200Ok.reason) &&
        Objects.equals(this.status, getCharactersCharacterIdMedals200Ok.status) &&
        Objects.equals(this.title, getCharactersCharacterIdMedals200Ok.title);
  }

  @Override
  public int hashCode() {
    return Objects.hash(corporationId, date, description, graphics, issuerId, medalId, reason, status, title);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class GetCharactersCharacterIdMedals200Ok {\n");
    sb.append("    corporationId: ").append(toIndentedString(corporationId)).append("\n");
    sb.append("    date: ").append(toIndentedString(date)).append("\n");
    sb.append("    description: ").append(toIndentedString(description)).append("\n");
    sb.append("    graphics: ").append(toIndentedString(graphics)).append("\n");
    sb.append("    issuerId: ").append(toIndentedString(issuerId)).append("\n");
    sb.append("    medalId: ").append(toIndentedString(medalId)).append("\n");
    sb.append("    reason: ").append(toIndentedString(reason)).append("\n");
    sb.append("    status: ").append(toIndentedString(status)).append("\n");
    sb.append("    title: ").append(toIndentedString(title)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("corporation_id");
    openapiFields.add("date");
    openapiFields.add("description");
    openapiFields.add("graphics");
    openapiFields.add("issuer_id");
    openapiFields.add("medal_id");
    openapiFields.add("reason");
    openapiFields.add("status");
    openapiFields.add("title");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("corporation_id");
    openapiRequiredFields.add("date");
    openapiRequiredFields.add("description");
    openapiRequiredFields.add("graphics");
    openapiRequiredFields.add("issuer_id");
    openapiRequiredFields.add("medal_id");
    openapiRequiredFields.add("reason");
    openapiRequiredFields.add("status");
    openapiRequiredFields.add("title");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to GetCharactersCharacterIdMedals200Ok
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!GetCharactersCharacterIdMedals200Ok.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in GetCharactersCharacterIdMedals200Ok is not found in the empty JSON string", GetCharactersCharacterIdMedals200Ok.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!GetCharactersCharacterIdMedals200Ok.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `GetCharactersCharacterIdMedals200Ok` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : GetCharactersCharacterIdMedals200Ok.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if (!jsonObj.get("description").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `description` to be a primitive type in the JSON string but got `%s`", jsonObj.get("description").toString()));
      }
      // ensure the json data is an array
      if (!jsonObj.get("graphics").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `graphics` to be an array in the JSON string but got `%s`", jsonObj.get("graphics").toString()));
      }

      JsonArray jsonArraygraphics = jsonObj.getAsJsonArray("graphics");
      // validate the required field `graphics` (array)
      for (int i = 0; i < jsonArraygraphics.size(); i++) {
        GetCharactersCharacterIdMedalsGraphic.validateJsonElement(jsonArraygraphics.get(i));
      };
      if (!jsonObj.get("reason").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `reason` to be a primitive type in the JSON string but got `%s`", jsonObj.get("reason").toString()));
      }
      if (!jsonObj.get("status").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `status` to be a primitive type in the JSON string but got `%s`", jsonObj.get("status").toString()));
      }
      // validate the required field `status`
      StatusEnum.validateJsonElement(jsonObj.get("status"));
      if (!jsonObj.get("title").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `title` to be a primitive type in the JSON string but got `%s`", jsonObj.get("title").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!GetCharactersCharacterIdMedals200Ok.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'GetCharactersCharacterIdMedals200Ok' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<GetCharactersCharacterIdMedals200Ok> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(GetCharactersCharacterIdMedals200Ok.class));

       return (TypeAdapter<T>) new TypeAdapter<GetCharactersCharacterIdMedals200Ok>() {
           @Override
           public void write(JsonWriter out, GetCharactersCharacterIdMedals200Ok value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public GetCharactersCharacterIdMedals200Ok read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of GetCharactersCharacterIdMedals200Ok given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of GetCharactersCharacterIdMedals200Ok
   * @throws IOException if the JSON string is invalid with respect to GetCharactersCharacterIdMedals200Ok
   */
  public static GetCharactersCharacterIdMedals200Ok fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, GetCharactersCharacterIdMedals200Ok.class);
  }

  /**
   * Convert an instance of GetCharactersCharacterIdMedals200Ok to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

