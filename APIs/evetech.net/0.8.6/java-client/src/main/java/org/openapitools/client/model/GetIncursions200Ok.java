/*
 * EVE Swagger Interface
 * An OpenAPI for EVE Online
 *
 * The version of the OpenAPI document: 0.8.6
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * 200 ok object
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:27:54.306821-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class GetIncursions200Ok {
  public static final String SERIALIZED_NAME_CONSTELLATION_ID = "constellation_id";
  @SerializedName(SERIALIZED_NAME_CONSTELLATION_ID)
  private Integer constellationId;

  public static final String SERIALIZED_NAME_FACTION_ID = "faction_id";
  @SerializedName(SERIALIZED_NAME_FACTION_ID)
  private Integer factionId;

  public static final String SERIALIZED_NAME_HAS_BOSS = "has_boss";
  @SerializedName(SERIALIZED_NAME_HAS_BOSS)
  private Boolean hasBoss;

  public static final String SERIALIZED_NAME_INFESTED_SOLAR_SYSTEMS = "infested_solar_systems";
  @SerializedName(SERIALIZED_NAME_INFESTED_SOLAR_SYSTEMS)
  private List<Integer> infestedSolarSystems = new ArrayList<>();

  public static final String SERIALIZED_NAME_INFLUENCE = "influence";
  @SerializedName(SERIALIZED_NAME_INFLUENCE)
  private Float influence;

  public static final String SERIALIZED_NAME_STAGING_SOLAR_SYSTEM_ID = "staging_solar_system_id";
  @SerializedName(SERIALIZED_NAME_STAGING_SOLAR_SYSTEM_ID)
  private Integer stagingSolarSystemId;

  /**
   * The state of this incursion
   */
  @JsonAdapter(StateEnum.Adapter.class)
  public enum StateEnum {
    WITHDRAWING("withdrawing"),
    
    MOBILIZING("mobilizing"),
    
    ESTABLISHED("established");

    private String value;

    StateEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static StateEnum fromValue(String value) {
      for (StateEnum b : StateEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<StateEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final StateEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public StateEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return StateEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      StateEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_STATE = "state";
  @SerializedName(SERIALIZED_NAME_STATE)
  private StateEnum state;

  public static final String SERIALIZED_NAME_TYPE = "type";
  @SerializedName(SERIALIZED_NAME_TYPE)
  private String type;

  public GetIncursions200Ok() {
  }

  public GetIncursions200Ok constellationId(Integer constellationId) {
    this.constellationId = constellationId;
    return this;
  }

  /**
   * The constellation id in which this incursion takes place
   * @return constellationId
   */
  @javax.annotation.Nonnull
  public Integer getConstellationId() {
    return constellationId;
  }

  public void setConstellationId(Integer constellationId) {
    this.constellationId = constellationId;
  }


  public GetIncursions200Ok factionId(Integer factionId) {
    this.factionId = factionId;
    return this;
  }

  /**
   * The attacking faction&#39;s id
   * @return factionId
   */
  @javax.annotation.Nonnull
  public Integer getFactionId() {
    return factionId;
  }

  public void setFactionId(Integer factionId) {
    this.factionId = factionId;
  }


  public GetIncursions200Ok hasBoss(Boolean hasBoss) {
    this.hasBoss = hasBoss;
    return this;
  }

  /**
   * Whether the final encounter has boss or not
   * @return hasBoss
   */
  @javax.annotation.Nonnull
  public Boolean getHasBoss() {
    return hasBoss;
  }

  public void setHasBoss(Boolean hasBoss) {
    this.hasBoss = hasBoss;
  }


  public GetIncursions200Ok infestedSolarSystems(List<Integer> infestedSolarSystems) {
    this.infestedSolarSystems = infestedSolarSystems;
    return this;
  }

  public GetIncursions200Ok addInfestedSolarSystemsItem(Integer infestedSolarSystemsItem) {
    if (this.infestedSolarSystems == null) {
      this.infestedSolarSystems = new ArrayList<>();
    }
    this.infestedSolarSystems.add(infestedSolarSystemsItem);
    return this;
  }

  /**
   * A list of infested solar system ids that are a part of this incursion
   * @return infestedSolarSystems
   */
  @javax.annotation.Nonnull
  public List<Integer> getInfestedSolarSystems() {
    return infestedSolarSystems;
  }

  public void setInfestedSolarSystems(List<Integer> infestedSolarSystems) {
    this.infestedSolarSystems = infestedSolarSystems;
  }


  public GetIncursions200Ok influence(Float influence) {
    this.influence = influence;
    return this;
  }

  /**
   * Influence of this incursion as a float from 0 to 1
   * @return influence
   */
  @javax.annotation.Nonnull
  public Float getInfluence() {
    return influence;
  }

  public void setInfluence(Float influence) {
    this.influence = influence;
  }


  public GetIncursions200Ok stagingSolarSystemId(Integer stagingSolarSystemId) {
    this.stagingSolarSystemId = stagingSolarSystemId;
    return this;
  }

  /**
   * Staging solar system for this incursion
   * @return stagingSolarSystemId
   */
  @javax.annotation.Nonnull
  public Integer getStagingSolarSystemId() {
    return stagingSolarSystemId;
  }

  public void setStagingSolarSystemId(Integer stagingSolarSystemId) {
    this.stagingSolarSystemId = stagingSolarSystemId;
  }


  public GetIncursions200Ok state(StateEnum state) {
    this.state = state;
    return this;
  }

  /**
   * The state of this incursion
   * @return state
   */
  @javax.annotation.Nonnull
  public StateEnum getState() {
    return state;
  }

  public void setState(StateEnum state) {
    this.state = state;
  }


  public GetIncursions200Ok type(String type) {
    this.type = type;
    return this;
  }

  /**
   * The type of this incursion
   * @return type
   */
  @javax.annotation.Nonnull
  public String getType() {
    return type;
  }

  public void setType(String type) {
    this.type = type;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    GetIncursions200Ok getIncursions200Ok = (GetIncursions200Ok) o;
    return Objects.equals(this.constellationId, getIncursions200Ok.constellationId) &&
        Objects.equals(this.factionId, getIncursions200Ok.factionId) &&
        Objects.equals(this.hasBoss, getIncursions200Ok.hasBoss) &&
        Objects.equals(this.infestedSolarSystems, getIncursions200Ok.infestedSolarSystems) &&
        Objects.equals(this.influence, getIncursions200Ok.influence) &&
        Objects.equals(this.stagingSolarSystemId, getIncursions200Ok.stagingSolarSystemId) &&
        Objects.equals(this.state, getIncursions200Ok.state) &&
        Objects.equals(this.type, getIncursions200Ok.type);
  }

  @Override
  public int hashCode() {
    return Objects.hash(constellationId, factionId, hasBoss, infestedSolarSystems, influence, stagingSolarSystemId, state, type);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class GetIncursions200Ok {\n");
    sb.append("    constellationId: ").append(toIndentedString(constellationId)).append("\n");
    sb.append("    factionId: ").append(toIndentedString(factionId)).append("\n");
    sb.append("    hasBoss: ").append(toIndentedString(hasBoss)).append("\n");
    sb.append("    infestedSolarSystems: ").append(toIndentedString(infestedSolarSystems)).append("\n");
    sb.append("    influence: ").append(toIndentedString(influence)).append("\n");
    sb.append("    stagingSolarSystemId: ").append(toIndentedString(stagingSolarSystemId)).append("\n");
    sb.append("    state: ").append(toIndentedString(state)).append("\n");
    sb.append("    type: ").append(toIndentedString(type)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("constellation_id");
    openapiFields.add("faction_id");
    openapiFields.add("has_boss");
    openapiFields.add("infested_solar_systems");
    openapiFields.add("influence");
    openapiFields.add("staging_solar_system_id");
    openapiFields.add("state");
    openapiFields.add("type");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("constellation_id");
    openapiRequiredFields.add("faction_id");
    openapiRequiredFields.add("has_boss");
    openapiRequiredFields.add("infested_solar_systems");
    openapiRequiredFields.add("influence");
    openapiRequiredFields.add("staging_solar_system_id");
    openapiRequiredFields.add("state");
    openapiRequiredFields.add("type");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to GetIncursions200Ok
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!GetIncursions200Ok.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in GetIncursions200Ok is not found in the empty JSON string", GetIncursions200Ok.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!GetIncursions200Ok.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `GetIncursions200Ok` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : GetIncursions200Ok.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // ensure the required json array is present
      if (jsonObj.get("infested_solar_systems") == null) {
        throw new IllegalArgumentException("Expected the field `linkedContent` to be an array in the JSON string but got `null`");
      } else if (!jsonObj.get("infested_solar_systems").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `infested_solar_systems` to be an array in the JSON string but got `%s`", jsonObj.get("infested_solar_systems").toString()));
      }
      if (!jsonObj.get("state").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `state` to be a primitive type in the JSON string but got `%s`", jsonObj.get("state").toString()));
      }
      // validate the required field `state`
      StateEnum.validateJsonElement(jsonObj.get("state"));
      if (!jsonObj.get("type").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `type` to be a primitive type in the JSON string but got `%s`", jsonObj.get("type").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!GetIncursions200Ok.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'GetIncursions200Ok' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<GetIncursions200Ok> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(GetIncursions200Ok.class));

       return (TypeAdapter<T>) new TypeAdapter<GetIncursions200Ok>() {
           @Override
           public void write(JsonWriter out, GetIncursions200Ok value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public GetIncursions200Ok read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of GetIncursions200Ok given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of GetIncursions200Ok
   * @throws IOException if the JSON string is invalid with respect to GetIncursions200Ok
   */
  public static GetIncursions200Ok fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, GetIncursions200Ok.class);
  }

  /**
   * Convert an instance of GetIncursions200Ok to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

