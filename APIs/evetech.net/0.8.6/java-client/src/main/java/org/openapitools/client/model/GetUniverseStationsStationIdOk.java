/*
 * EVE Swagger Interface
 * An OpenAPI for EVE Online
 *
 * The version of the OpenAPI document: 0.8.6
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.GetUniverseStationsStationIdPosition;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * 200 ok object
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:27:54.306821-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class GetUniverseStationsStationIdOk {
  public static final String SERIALIZED_NAME_MAX_DOCKABLE_SHIP_VOLUME = "max_dockable_ship_volume";
  @SerializedName(SERIALIZED_NAME_MAX_DOCKABLE_SHIP_VOLUME)
  private Float maxDockableShipVolume;

  public static final String SERIALIZED_NAME_NAME = "name";
  @SerializedName(SERIALIZED_NAME_NAME)
  private String name;

  public static final String SERIALIZED_NAME_OFFICE_RENTAL_COST = "office_rental_cost";
  @SerializedName(SERIALIZED_NAME_OFFICE_RENTAL_COST)
  private Float officeRentalCost;

  public static final String SERIALIZED_NAME_OWNER = "owner";
  @SerializedName(SERIALIZED_NAME_OWNER)
  private Integer owner;

  public static final String SERIALIZED_NAME_POSITION = "position";
  @SerializedName(SERIALIZED_NAME_POSITION)
  private GetUniverseStationsStationIdPosition position;

  public static final String SERIALIZED_NAME_RACE_ID = "race_id";
  @SerializedName(SERIALIZED_NAME_RACE_ID)
  private Integer raceId;

  public static final String SERIALIZED_NAME_REPROCESSING_EFFICIENCY = "reprocessing_efficiency";
  @SerializedName(SERIALIZED_NAME_REPROCESSING_EFFICIENCY)
  private Float reprocessingEfficiency;

  public static final String SERIALIZED_NAME_REPROCESSING_STATIONS_TAKE = "reprocessing_stations_take";
  @SerializedName(SERIALIZED_NAME_REPROCESSING_STATIONS_TAKE)
  private Float reprocessingStationsTake;

  /**
   * service string
   */
  @JsonAdapter(ServicesEnum.Adapter.class)
  public enum ServicesEnum {
    BOUNTY_MISSIONS("bounty-missions"),
    
    ASSASINATION_MISSIONS("assasination-missions"),
    
    COURIER_MISSIONS("courier-missions"),
    
    INTERBUS("interbus"),
    
    REPROCESSING_PLANT("reprocessing-plant"),
    
    REFINERY("refinery"),
    
    MARKET("market"),
    
    BLACK_MARKET("black-market"),
    
    STOCK_EXCHANGE("stock-exchange"),
    
    CLONING("cloning"),
    
    SURGERY("surgery"),
    
    DNA_THERAPY("dna-therapy"),
    
    REPAIR_FACILITIES("repair-facilities"),
    
    FACTORY("factory"),
    
    LABRATORY("labratory"),
    
    GAMBLING("gambling"),
    
    FITTING("fitting"),
    
    PAINTSHOP("paintshop"),
    
    NEWS("news"),
    
    STORAGE("storage"),
    
    INSURANCE("insurance"),
    
    DOCKING("docking"),
    
    OFFICE_RENTAL("office-rental"),
    
    JUMP_CLONE_FACILITY("jump-clone-facility"),
    
    LOYALTY_POINT_STORE("loyalty-point-store"),
    
    NAVY_OFFICES("navy-offices"),
    
    SECURITY_OFFICES("security-offices");

    private String value;

    ServicesEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static ServicesEnum fromValue(String value) {
      for (ServicesEnum b : ServicesEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<ServicesEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final ServicesEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public ServicesEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return ServicesEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      ServicesEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_SERVICES = "services";
  @SerializedName(SERIALIZED_NAME_SERVICES)
  private List<ServicesEnum> services = new ArrayList<>();

  public static final String SERIALIZED_NAME_STATION_ID = "station_id";
  @SerializedName(SERIALIZED_NAME_STATION_ID)
  private Integer stationId;

  public static final String SERIALIZED_NAME_SYSTEM_ID = "system_id";
  @SerializedName(SERIALIZED_NAME_SYSTEM_ID)
  private Integer systemId;

  public static final String SERIALIZED_NAME_TYPE_ID = "type_id";
  @SerializedName(SERIALIZED_NAME_TYPE_ID)
  private Integer typeId;

  public GetUniverseStationsStationIdOk() {
  }

  public GetUniverseStationsStationIdOk maxDockableShipVolume(Float maxDockableShipVolume) {
    this.maxDockableShipVolume = maxDockableShipVolume;
    return this;
  }

  /**
   * max_dockable_ship_volume number
   * @return maxDockableShipVolume
   */
  @javax.annotation.Nonnull
  public Float getMaxDockableShipVolume() {
    return maxDockableShipVolume;
  }

  public void setMaxDockableShipVolume(Float maxDockableShipVolume) {
    this.maxDockableShipVolume = maxDockableShipVolume;
  }


  public GetUniverseStationsStationIdOk name(String name) {
    this.name = name;
    return this;
  }

  /**
   * name string
   * @return name
   */
  @javax.annotation.Nonnull
  public String getName() {
    return name;
  }

  public void setName(String name) {
    this.name = name;
  }


  public GetUniverseStationsStationIdOk officeRentalCost(Float officeRentalCost) {
    this.officeRentalCost = officeRentalCost;
    return this;
  }

  /**
   * office_rental_cost number
   * @return officeRentalCost
   */
  @javax.annotation.Nonnull
  public Float getOfficeRentalCost() {
    return officeRentalCost;
  }

  public void setOfficeRentalCost(Float officeRentalCost) {
    this.officeRentalCost = officeRentalCost;
  }


  public GetUniverseStationsStationIdOk owner(Integer owner) {
    this.owner = owner;
    return this;
  }

  /**
   * ID of the corporation that controls this station
   * @return owner
   */
  @javax.annotation.Nullable
  public Integer getOwner() {
    return owner;
  }

  public void setOwner(Integer owner) {
    this.owner = owner;
  }


  public GetUniverseStationsStationIdOk position(GetUniverseStationsStationIdPosition position) {
    this.position = position;
    return this;
  }

  /**
   * Get position
   * @return position
   */
  @javax.annotation.Nonnull
  public GetUniverseStationsStationIdPosition getPosition() {
    return position;
  }

  public void setPosition(GetUniverseStationsStationIdPosition position) {
    this.position = position;
  }


  public GetUniverseStationsStationIdOk raceId(Integer raceId) {
    this.raceId = raceId;
    return this;
  }

  /**
   * race_id integer
   * @return raceId
   */
  @javax.annotation.Nullable
  public Integer getRaceId() {
    return raceId;
  }

  public void setRaceId(Integer raceId) {
    this.raceId = raceId;
  }


  public GetUniverseStationsStationIdOk reprocessingEfficiency(Float reprocessingEfficiency) {
    this.reprocessingEfficiency = reprocessingEfficiency;
    return this;
  }

  /**
   * reprocessing_efficiency number
   * @return reprocessingEfficiency
   */
  @javax.annotation.Nonnull
  public Float getReprocessingEfficiency() {
    return reprocessingEfficiency;
  }

  public void setReprocessingEfficiency(Float reprocessingEfficiency) {
    this.reprocessingEfficiency = reprocessingEfficiency;
  }


  public GetUniverseStationsStationIdOk reprocessingStationsTake(Float reprocessingStationsTake) {
    this.reprocessingStationsTake = reprocessingStationsTake;
    return this;
  }

  /**
   * reprocessing_stations_take number
   * @return reprocessingStationsTake
   */
  @javax.annotation.Nonnull
  public Float getReprocessingStationsTake() {
    return reprocessingStationsTake;
  }

  public void setReprocessingStationsTake(Float reprocessingStationsTake) {
    this.reprocessingStationsTake = reprocessingStationsTake;
  }


  public GetUniverseStationsStationIdOk services(List<ServicesEnum> services) {
    this.services = services;
    return this;
  }

  public GetUniverseStationsStationIdOk addServicesItem(ServicesEnum servicesItem) {
    if (this.services == null) {
      this.services = new ArrayList<>();
    }
    this.services.add(servicesItem);
    return this;
  }

  /**
   * services array
   * @return services
   */
  @javax.annotation.Nonnull
  public List<ServicesEnum> getServices() {
    return services;
  }

  public void setServices(List<ServicesEnum> services) {
    this.services = services;
  }


  public GetUniverseStationsStationIdOk stationId(Integer stationId) {
    this.stationId = stationId;
    return this;
  }

  /**
   * station_id integer
   * @return stationId
   */
  @javax.annotation.Nonnull
  public Integer getStationId() {
    return stationId;
  }

  public void setStationId(Integer stationId) {
    this.stationId = stationId;
  }


  public GetUniverseStationsStationIdOk systemId(Integer systemId) {
    this.systemId = systemId;
    return this;
  }

  /**
   * The solar system this station is in
   * @return systemId
   */
  @javax.annotation.Nonnull
  public Integer getSystemId() {
    return systemId;
  }

  public void setSystemId(Integer systemId) {
    this.systemId = systemId;
  }


  public GetUniverseStationsStationIdOk typeId(Integer typeId) {
    this.typeId = typeId;
    return this;
  }

  /**
   * type_id integer
   * @return typeId
   */
  @javax.annotation.Nonnull
  public Integer getTypeId() {
    return typeId;
  }

  public void setTypeId(Integer typeId) {
    this.typeId = typeId;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    GetUniverseStationsStationIdOk getUniverseStationsStationIdOk = (GetUniverseStationsStationIdOk) o;
    return Objects.equals(this.maxDockableShipVolume, getUniverseStationsStationIdOk.maxDockableShipVolume) &&
        Objects.equals(this.name, getUniverseStationsStationIdOk.name) &&
        Objects.equals(this.officeRentalCost, getUniverseStationsStationIdOk.officeRentalCost) &&
        Objects.equals(this.owner, getUniverseStationsStationIdOk.owner) &&
        Objects.equals(this.position, getUniverseStationsStationIdOk.position) &&
        Objects.equals(this.raceId, getUniverseStationsStationIdOk.raceId) &&
        Objects.equals(this.reprocessingEfficiency, getUniverseStationsStationIdOk.reprocessingEfficiency) &&
        Objects.equals(this.reprocessingStationsTake, getUniverseStationsStationIdOk.reprocessingStationsTake) &&
        Objects.equals(this.services, getUniverseStationsStationIdOk.services) &&
        Objects.equals(this.stationId, getUniverseStationsStationIdOk.stationId) &&
        Objects.equals(this.systemId, getUniverseStationsStationIdOk.systemId) &&
        Objects.equals(this.typeId, getUniverseStationsStationIdOk.typeId);
  }

  @Override
  public int hashCode() {
    return Objects.hash(maxDockableShipVolume, name, officeRentalCost, owner, position, raceId, reprocessingEfficiency, reprocessingStationsTake, services, stationId, systemId, typeId);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class GetUniverseStationsStationIdOk {\n");
    sb.append("    maxDockableShipVolume: ").append(toIndentedString(maxDockableShipVolume)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    officeRentalCost: ").append(toIndentedString(officeRentalCost)).append("\n");
    sb.append("    owner: ").append(toIndentedString(owner)).append("\n");
    sb.append("    position: ").append(toIndentedString(position)).append("\n");
    sb.append("    raceId: ").append(toIndentedString(raceId)).append("\n");
    sb.append("    reprocessingEfficiency: ").append(toIndentedString(reprocessingEfficiency)).append("\n");
    sb.append("    reprocessingStationsTake: ").append(toIndentedString(reprocessingStationsTake)).append("\n");
    sb.append("    services: ").append(toIndentedString(services)).append("\n");
    sb.append("    stationId: ").append(toIndentedString(stationId)).append("\n");
    sb.append("    systemId: ").append(toIndentedString(systemId)).append("\n");
    sb.append("    typeId: ").append(toIndentedString(typeId)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("max_dockable_ship_volume");
    openapiFields.add("name");
    openapiFields.add("office_rental_cost");
    openapiFields.add("owner");
    openapiFields.add("position");
    openapiFields.add("race_id");
    openapiFields.add("reprocessing_efficiency");
    openapiFields.add("reprocessing_stations_take");
    openapiFields.add("services");
    openapiFields.add("station_id");
    openapiFields.add("system_id");
    openapiFields.add("type_id");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("max_dockable_ship_volume");
    openapiRequiredFields.add("name");
    openapiRequiredFields.add("office_rental_cost");
    openapiRequiredFields.add("position");
    openapiRequiredFields.add("reprocessing_efficiency");
    openapiRequiredFields.add("reprocessing_stations_take");
    openapiRequiredFields.add("services");
    openapiRequiredFields.add("station_id");
    openapiRequiredFields.add("system_id");
    openapiRequiredFields.add("type_id");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to GetUniverseStationsStationIdOk
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!GetUniverseStationsStationIdOk.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in GetUniverseStationsStationIdOk is not found in the empty JSON string", GetUniverseStationsStationIdOk.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!GetUniverseStationsStationIdOk.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `GetUniverseStationsStationIdOk` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : GetUniverseStationsStationIdOk.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if (!jsonObj.get("name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("name").toString()));
      }
      // validate the required field `position`
      GetUniverseStationsStationIdPosition.validateJsonElement(jsonObj.get("position"));
      // ensure the required json array is present
      if (jsonObj.get("services") == null) {
        throw new IllegalArgumentException("Expected the field `linkedContent` to be an array in the JSON string but got `null`");
      } else if (!jsonObj.get("services").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `services` to be an array in the JSON string but got `%s`", jsonObj.get("services").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!GetUniverseStationsStationIdOk.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'GetUniverseStationsStationIdOk' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<GetUniverseStationsStationIdOk> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(GetUniverseStationsStationIdOk.class));

       return (TypeAdapter<T>) new TypeAdapter<GetUniverseStationsStationIdOk>() {
           @Override
           public void write(JsonWriter out, GetUniverseStationsStationIdOk value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public GetUniverseStationsStationIdOk read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of GetUniverseStationsStationIdOk given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of GetUniverseStationsStationIdOk
   * @throws IOException if the JSON string is invalid with respect to GetUniverseStationsStationIdOk
   */
  public static GetUniverseStationsStationIdOk fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, GetUniverseStationsStationIdOk.class);
  }

  /**
   * Convert an instance of GetUniverseStationsStationIdOk to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

