/*
 * EVE Swagger Interface
 * An OpenAPI for EVE Online
 *
 * The version of the OpenAPI document: 0.8.6
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.time.OffsetDateTime;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * 200 ok object
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:27:54.306821-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class GetCorporationsCorporationIdContracts200Ok {
  public static final String SERIALIZED_NAME_ACCEPTOR_ID = "acceptor_id";
  @SerializedName(SERIALIZED_NAME_ACCEPTOR_ID)
  private Integer acceptorId;

  public static final String SERIALIZED_NAME_ASSIGNEE_ID = "assignee_id";
  @SerializedName(SERIALIZED_NAME_ASSIGNEE_ID)
  private Integer assigneeId;

  /**
   * To whom the contract is available
   */
  @JsonAdapter(AvailabilityEnum.Adapter.class)
  public enum AvailabilityEnum {
    PUBLIC("public"),
    
    PERSONAL("personal"),
    
    CORPORATION("corporation"),
    
    ALLIANCE("alliance");

    private String value;

    AvailabilityEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static AvailabilityEnum fromValue(String value) {
      for (AvailabilityEnum b : AvailabilityEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<AvailabilityEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final AvailabilityEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public AvailabilityEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return AvailabilityEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      AvailabilityEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_AVAILABILITY = "availability";
  @SerializedName(SERIALIZED_NAME_AVAILABILITY)
  private AvailabilityEnum availability;

  public static final String SERIALIZED_NAME_BUYOUT = "buyout";
  @SerializedName(SERIALIZED_NAME_BUYOUT)
  private Double buyout;

  public static final String SERIALIZED_NAME_COLLATERAL = "collateral";
  @SerializedName(SERIALIZED_NAME_COLLATERAL)
  private Double collateral;

  public static final String SERIALIZED_NAME_CONTRACT_ID = "contract_id";
  @SerializedName(SERIALIZED_NAME_CONTRACT_ID)
  private Integer contractId;

  public static final String SERIALIZED_NAME_DATE_ACCEPTED = "date_accepted";
  @SerializedName(SERIALIZED_NAME_DATE_ACCEPTED)
  private OffsetDateTime dateAccepted;

  public static final String SERIALIZED_NAME_DATE_COMPLETED = "date_completed";
  @SerializedName(SERIALIZED_NAME_DATE_COMPLETED)
  private OffsetDateTime dateCompleted;

  public static final String SERIALIZED_NAME_DATE_EXPIRED = "date_expired";
  @SerializedName(SERIALIZED_NAME_DATE_EXPIRED)
  private OffsetDateTime dateExpired;

  public static final String SERIALIZED_NAME_DATE_ISSUED = "date_issued";
  @SerializedName(SERIALIZED_NAME_DATE_ISSUED)
  private OffsetDateTime dateIssued;

  public static final String SERIALIZED_NAME_DAYS_TO_COMPLETE = "days_to_complete";
  @SerializedName(SERIALIZED_NAME_DAYS_TO_COMPLETE)
  private Integer daysToComplete;

  public static final String SERIALIZED_NAME_END_LOCATION_ID = "end_location_id";
  @SerializedName(SERIALIZED_NAME_END_LOCATION_ID)
  private Long endLocationId;

  public static final String SERIALIZED_NAME_FOR_CORPORATION = "for_corporation";
  @SerializedName(SERIALIZED_NAME_FOR_CORPORATION)
  private Boolean forCorporation;

  public static final String SERIALIZED_NAME_ISSUER_CORPORATION_ID = "issuer_corporation_id";
  @SerializedName(SERIALIZED_NAME_ISSUER_CORPORATION_ID)
  private Integer issuerCorporationId;

  public static final String SERIALIZED_NAME_ISSUER_ID = "issuer_id";
  @SerializedName(SERIALIZED_NAME_ISSUER_ID)
  private Integer issuerId;

  public static final String SERIALIZED_NAME_PRICE = "price";
  @SerializedName(SERIALIZED_NAME_PRICE)
  private Double price;

  public static final String SERIALIZED_NAME_REWARD = "reward";
  @SerializedName(SERIALIZED_NAME_REWARD)
  private Double reward;

  public static final String SERIALIZED_NAME_START_LOCATION_ID = "start_location_id";
  @SerializedName(SERIALIZED_NAME_START_LOCATION_ID)
  private Long startLocationId;

  /**
   * Status of the the contract
   */
  @JsonAdapter(StatusEnum.Adapter.class)
  public enum StatusEnum {
    OUTSTANDING("outstanding"),
    
    IN_PROGRESS("in_progress"),
    
    FINISHED_ISSUER("finished_issuer"),
    
    FINISHED_CONTRACTOR("finished_contractor"),
    
    FINISHED("finished"),
    
    CANCELLED("cancelled"),
    
    REJECTED("rejected"),
    
    FAILED("failed"),
    
    DELETED("deleted"),
    
    REVERSED("reversed");

    private String value;

    StatusEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static StatusEnum fromValue(String value) {
      for (StatusEnum b : StatusEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<StatusEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final StatusEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public StatusEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return StatusEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      StatusEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_STATUS = "status";
  @SerializedName(SERIALIZED_NAME_STATUS)
  private StatusEnum status;

  public static final String SERIALIZED_NAME_TITLE = "title";
  @SerializedName(SERIALIZED_NAME_TITLE)
  private String title;

  /**
   * Type of the contract
   */
  @JsonAdapter(TypeEnum.Adapter.class)
  public enum TypeEnum {
    UNKNOWN("unknown"),
    
    ITEM_EXCHANGE("item_exchange"),
    
    AUCTION("auction"),
    
    COURIER("courier"),
    
    LOAN("loan");

    private String value;

    TypeEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static TypeEnum fromValue(String value) {
      for (TypeEnum b : TypeEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<TypeEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final TypeEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public TypeEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return TypeEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      TypeEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_TYPE = "type";
  @SerializedName(SERIALIZED_NAME_TYPE)
  private TypeEnum type;

  public static final String SERIALIZED_NAME_VOLUME = "volume";
  @SerializedName(SERIALIZED_NAME_VOLUME)
  private Double volume;

  public GetCorporationsCorporationIdContracts200Ok() {
  }

  public GetCorporationsCorporationIdContracts200Ok acceptorId(Integer acceptorId) {
    this.acceptorId = acceptorId;
    return this;
  }

  /**
   * Who will accept the contract
   * @return acceptorId
   */
  @javax.annotation.Nonnull
  public Integer getAcceptorId() {
    return acceptorId;
  }

  public void setAcceptorId(Integer acceptorId) {
    this.acceptorId = acceptorId;
  }


  public GetCorporationsCorporationIdContracts200Ok assigneeId(Integer assigneeId) {
    this.assigneeId = assigneeId;
    return this;
  }

  /**
   * ID to whom the contract is assigned, can be corporation or character ID
   * @return assigneeId
   */
  @javax.annotation.Nonnull
  public Integer getAssigneeId() {
    return assigneeId;
  }

  public void setAssigneeId(Integer assigneeId) {
    this.assigneeId = assigneeId;
  }


  public GetCorporationsCorporationIdContracts200Ok availability(AvailabilityEnum availability) {
    this.availability = availability;
    return this;
  }

  /**
   * To whom the contract is available
   * @return availability
   */
  @javax.annotation.Nonnull
  public AvailabilityEnum getAvailability() {
    return availability;
  }

  public void setAvailability(AvailabilityEnum availability) {
    this.availability = availability;
  }


  public GetCorporationsCorporationIdContracts200Ok buyout(Double buyout) {
    this.buyout = buyout;
    return this;
  }

  /**
   * Buyout price (for Auctions only)
   * @return buyout
   */
  @javax.annotation.Nullable
  public Double getBuyout() {
    return buyout;
  }

  public void setBuyout(Double buyout) {
    this.buyout = buyout;
  }


  public GetCorporationsCorporationIdContracts200Ok collateral(Double collateral) {
    this.collateral = collateral;
    return this;
  }

  /**
   * Collateral price (for Couriers only)
   * @return collateral
   */
  @javax.annotation.Nullable
  public Double getCollateral() {
    return collateral;
  }

  public void setCollateral(Double collateral) {
    this.collateral = collateral;
  }


  public GetCorporationsCorporationIdContracts200Ok contractId(Integer contractId) {
    this.contractId = contractId;
    return this;
  }

  /**
   * contract_id integer
   * @return contractId
   */
  @javax.annotation.Nonnull
  public Integer getContractId() {
    return contractId;
  }

  public void setContractId(Integer contractId) {
    this.contractId = contractId;
  }


  public GetCorporationsCorporationIdContracts200Ok dateAccepted(OffsetDateTime dateAccepted) {
    this.dateAccepted = dateAccepted;
    return this;
  }

  /**
   * Date of confirmation of contract
   * @return dateAccepted
   */
  @javax.annotation.Nullable
  public OffsetDateTime getDateAccepted() {
    return dateAccepted;
  }

  public void setDateAccepted(OffsetDateTime dateAccepted) {
    this.dateAccepted = dateAccepted;
  }


  public GetCorporationsCorporationIdContracts200Ok dateCompleted(OffsetDateTime dateCompleted) {
    this.dateCompleted = dateCompleted;
    return this;
  }

  /**
   * Date of completed of contract
   * @return dateCompleted
   */
  @javax.annotation.Nullable
  public OffsetDateTime getDateCompleted() {
    return dateCompleted;
  }

  public void setDateCompleted(OffsetDateTime dateCompleted) {
    this.dateCompleted = dateCompleted;
  }


  public GetCorporationsCorporationIdContracts200Ok dateExpired(OffsetDateTime dateExpired) {
    this.dateExpired = dateExpired;
    return this;
  }

  /**
   * Expiration date of the contract
   * @return dateExpired
   */
  @javax.annotation.Nonnull
  public OffsetDateTime getDateExpired() {
    return dateExpired;
  }

  public void setDateExpired(OffsetDateTime dateExpired) {
    this.dateExpired = dateExpired;
  }


  public GetCorporationsCorporationIdContracts200Ok dateIssued(OffsetDateTime dateIssued) {
    this.dateIssued = dateIssued;
    return this;
  }

  /**
   * Сreation date of the contract
   * @return dateIssued
   */
  @javax.annotation.Nonnull
  public OffsetDateTime getDateIssued() {
    return dateIssued;
  }

  public void setDateIssued(OffsetDateTime dateIssued) {
    this.dateIssued = dateIssued;
  }


  public GetCorporationsCorporationIdContracts200Ok daysToComplete(Integer daysToComplete) {
    this.daysToComplete = daysToComplete;
    return this;
  }

  /**
   * Number of days to perform the contract
   * @return daysToComplete
   */
  @javax.annotation.Nullable
  public Integer getDaysToComplete() {
    return daysToComplete;
  }

  public void setDaysToComplete(Integer daysToComplete) {
    this.daysToComplete = daysToComplete;
  }


  public GetCorporationsCorporationIdContracts200Ok endLocationId(Long endLocationId) {
    this.endLocationId = endLocationId;
    return this;
  }

  /**
   * End location ID (for Couriers contract)
   * @return endLocationId
   */
  @javax.annotation.Nullable
  public Long getEndLocationId() {
    return endLocationId;
  }

  public void setEndLocationId(Long endLocationId) {
    this.endLocationId = endLocationId;
  }


  public GetCorporationsCorporationIdContracts200Ok forCorporation(Boolean forCorporation) {
    this.forCorporation = forCorporation;
    return this;
  }

  /**
   * true if the contract was issued on behalf of the issuer&#39;s corporation
   * @return forCorporation
   */
  @javax.annotation.Nonnull
  public Boolean getForCorporation() {
    return forCorporation;
  }

  public void setForCorporation(Boolean forCorporation) {
    this.forCorporation = forCorporation;
  }


  public GetCorporationsCorporationIdContracts200Ok issuerCorporationId(Integer issuerCorporationId) {
    this.issuerCorporationId = issuerCorporationId;
    return this;
  }

  /**
   * Character&#39;s corporation ID for the issuer
   * @return issuerCorporationId
   */
  @javax.annotation.Nonnull
  public Integer getIssuerCorporationId() {
    return issuerCorporationId;
  }

  public void setIssuerCorporationId(Integer issuerCorporationId) {
    this.issuerCorporationId = issuerCorporationId;
  }


  public GetCorporationsCorporationIdContracts200Ok issuerId(Integer issuerId) {
    this.issuerId = issuerId;
    return this;
  }

  /**
   * Character ID for the issuer
   * @return issuerId
   */
  @javax.annotation.Nonnull
  public Integer getIssuerId() {
    return issuerId;
  }

  public void setIssuerId(Integer issuerId) {
    this.issuerId = issuerId;
  }


  public GetCorporationsCorporationIdContracts200Ok price(Double price) {
    this.price = price;
    return this;
  }

  /**
   * Price of contract (for ItemsExchange and Auctions)
   * @return price
   */
  @javax.annotation.Nullable
  public Double getPrice() {
    return price;
  }

  public void setPrice(Double price) {
    this.price = price;
  }


  public GetCorporationsCorporationIdContracts200Ok reward(Double reward) {
    this.reward = reward;
    return this;
  }

  /**
   * Remuneration for contract (for Couriers only)
   * @return reward
   */
  @javax.annotation.Nullable
  public Double getReward() {
    return reward;
  }

  public void setReward(Double reward) {
    this.reward = reward;
  }


  public GetCorporationsCorporationIdContracts200Ok startLocationId(Long startLocationId) {
    this.startLocationId = startLocationId;
    return this;
  }

  /**
   * Start location ID (for Couriers contract)
   * @return startLocationId
   */
  @javax.annotation.Nullable
  public Long getStartLocationId() {
    return startLocationId;
  }

  public void setStartLocationId(Long startLocationId) {
    this.startLocationId = startLocationId;
  }


  public GetCorporationsCorporationIdContracts200Ok status(StatusEnum status) {
    this.status = status;
    return this;
  }

  /**
   * Status of the the contract
   * @return status
   */
  @javax.annotation.Nonnull
  public StatusEnum getStatus() {
    return status;
  }

  public void setStatus(StatusEnum status) {
    this.status = status;
  }


  public GetCorporationsCorporationIdContracts200Ok title(String title) {
    this.title = title;
    return this;
  }

  /**
   * Title of the contract
   * @return title
   */
  @javax.annotation.Nullable
  public String getTitle() {
    return title;
  }

  public void setTitle(String title) {
    this.title = title;
  }


  public GetCorporationsCorporationIdContracts200Ok type(TypeEnum type) {
    this.type = type;
    return this;
  }

  /**
   * Type of the contract
   * @return type
   */
  @javax.annotation.Nonnull
  public TypeEnum getType() {
    return type;
  }

  public void setType(TypeEnum type) {
    this.type = type;
  }


  public GetCorporationsCorporationIdContracts200Ok volume(Double volume) {
    this.volume = volume;
    return this;
  }

  /**
   * Volume of items in the contract
   * @return volume
   */
  @javax.annotation.Nullable
  public Double getVolume() {
    return volume;
  }

  public void setVolume(Double volume) {
    this.volume = volume;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    GetCorporationsCorporationIdContracts200Ok getCorporationsCorporationIdContracts200Ok = (GetCorporationsCorporationIdContracts200Ok) o;
    return Objects.equals(this.acceptorId, getCorporationsCorporationIdContracts200Ok.acceptorId) &&
        Objects.equals(this.assigneeId, getCorporationsCorporationIdContracts200Ok.assigneeId) &&
        Objects.equals(this.availability, getCorporationsCorporationIdContracts200Ok.availability) &&
        Objects.equals(this.buyout, getCorporationsCorporationIdContracts200Ok.buyout) &&
        Objects.equals(this.collateral, getCorporationsCorporationIdContracts200Ok.collateral) &&
        Objects.equals(this.contractId, getCorporationsCorporationIdContracts200Ok.contractId) &&
        Objects.equals(this.dateAccepted, getCorporationsCorporationIdContracts200Ok.dateAccepted) &&
        Objects.equals(this.dateCompleted, getCorporationsCorporationIdContracts200Ok.dateCompleted) &&
        Objects.equals(this.dateExpired, getCorporationsCorporationIdContracts200Ok.dateExpired) &&
        Objects.equals(this.dateIssued, getCorporationsCorporationIdContracts200Ok.dateIssued) &&
        Objects.equals(this.daysToComplete, getCorporationsCorporationIdContracts200Ok.daysToComplete) &&
        Objects.equals(this.endLocationId, getCorporationsCorporationIdContracts200Ok.endLocationId) &&
        Objects.equals(this.forCorporation, getCorporationsCorporationIdContracts200Ok.forCorporation) &&
        Objects.equals(this.issuerCorporationId, getCorporationsCorporationIdContracts200Ok.issuerCorporationId) &&
        Objects.equals(this.issuerId, getCorporationsCorporationIdContracts200Ok.issuerId) &&
        Objects.equals(this.price, getCorporationsCorporationIdContracts200Ok.price) &&
        Objects.equals(this.reward, getCorporationsCorporationIdContracts200Ok.reward) &&
        Objects.equals(this.startLocationId, getCorporationsCorporationIdContracts200Ok.startLocationId) &&
        Objects.equals(this.status, getCorporationsCorporationIdContracts200Ok.status) &&
        Objects.equals(this.title, getCorporationsCorporationIdContracts200Ok.title) &&
        Objects.equals(this.type, getCorporationsCorporationIdContracts200Ok.type) &&
        Objects.equals(this.volume, getCorporationsCorporationIdContracts200Ok.volume);
  }

  @Override
  public int hashCode() {
    return Objects.hash(acceptorId, assigneeId, availability, buyout, collateral, contractId, dateAccepted, dateCompleted, dateExpired, dateIssued, daysToComplete, endLocationId, forCorporation, issuerCorporationId, issuerId, price, reward, startLocationId, status, title, type, volume);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class GetCorporationsCorporationIdContracts200Ok {\n");
    sb.append("    acceptorId: ").append(toIndentedString(acceptorId)).append("\n");
    sb.append("    assigneeId: ").append(toIndentedString(assigneeId)).append("\n");
    sb.append("    availability: ").append(toIndentedString(availability)).append("\n");
    sb.append("    buyout: ").append(toIndentedString(buyout)).append("\n");
    sb.append("    collateral: ").append(toIndentedString(collateral)).append("\n");
    sb.append("    contractId: ").append(toIndentedString(contractId)).append("\n");
    sb.append("    dateAccepted: ").append(toIndentedString(dateAccepted)).append("\n");
    sb.append("    dateCompleted: ").append(toIndentedString(dateCompleted)).append("\n");
    sb.append("    dateExpired: ").append(toIndentedString(dateExpired)).append("\n");
    sb.append("    dateIssued: ").append(toIndentedString(dateIssued)).append("\n");
    sb.append("    daysToComplete: ").append(toIndentedString(daysToComplete)).append("\n");
    sb.append("    endLocationId: ").append(toIndentedString(endLocationId)).append("\n");
    sb.append("    forCorporation: ").append(toIndentedString(forCorporation)).append("\n");
    sb.append("    issuerCorporationId: ").append(toIndentedString(issuerCorporationId)).append("\n");
    sb.append("    issuerId: ").append(toIndentedString(issuerId)).append("\n");
    sb.append("    price: ").append(toIndentedString(price)).append("\n");
    sb.append("    reward: ").append(toIndentedString(reward)).append("\n");
    sb.append("    startLocationId: ").append(toIndentedString(startLocationId)).append("\n");
    sb.append("    status: ").append(toIndentedString(status)).append("\n");
    sb.append("    title: ").append(toIndentedString(title)).append("\n");
    sb.append("    type: ").append(toIndentedString(type)).append("\n");
    sb.append("    volume: ").append(toIndentedString(volume)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("acceptor_id");
    openapiFields.add("assignee_id");
    openapiFields.add("availability");
    openapiFields.add("buyout");
    openapiFields.add("collateral");
    openapiFields.add("contract_id");
    openapiFields.add("date_accepted");
    openapiFields.add("date_completed");
    openapiFields.add("date_expired");
    openapiFields.add("date_issued");
    openapiFields.add("days_to_complete");
    openapiFields.add("end_location_id");
    openapiFields.add("for_corporation");
    openapiFields.add("issuer_corporation_id");
    openapiFields.add("issuer_id");
    openapiFields.add("price");
    openapiFields.add("reward");
    openapiFields.add("start_location_id");
    openapiFields.add("status");
    openapiFields.add("title");
    openapiFields.add("type");
    openapiFields.add("volume");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("acceptor_id");
    openapiRequiredFields.add("assignee_id");
    openapiRequiredFields.add("availability");
    openapiRequiredFields.add("contract_id");
    openapiRequiredFields.add("date_expired");
    openapiRequiredFields.add("date_issued");
    openapiRequiredFields.add("for_corporation");
    openapiRequiredFields.add("issuer_corporation_id");
    openapiRequiredFields.add("issuer_id");
    openapiRequiredFields.add("status");
    openapiRequiredFields.add("type");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to GetCorporationsCorporationIdContracts200Ok
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!GetCorporationsCorporationIdContracts200Ok.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in GetCorporationsCorporationIdContracts200Ok is not found in the empty JSON string", GetCorporationsCorporationIdContracts200Ok.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!GetCorporationsCorporationIdContracts200Ok.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `GetCorporationsCorporationIdContracts200Ok` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : GetCorporationsCorporationIdContracts200Ok.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if (!jsonObj.get("availability").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `availability` to be a primitive type in the JSON string but got `%s`", jsonObj.get("availability").toString()));
      }
      // validate the required field `availability`
      AvailabilityEnum.validateJsonElement(jsonObj.get("availability"));
      if (!jsonObj.get("status").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `status` to be a primitive type in the JSON string but got `%s`", jsonObj.get("status").toString()));
      }
      // validate the required field `status`
      StatusEnum.validateJsonElement(jsonObj.get("status"));
      if ((jsonObj.get("title") != null && !jsonObj.get("title").isJsonNull()) && !jsonObj.get("title").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `title` to be a primitive type in the JSON string but got `%s`", jsonObj.get("title").toString()));
      }
      if (!jsonObj.get("type").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `type` to be a primitive type in the JSON string but got `%s`", jsonObj.get("type").toString()));
      }
      // validate the required field `type`
      TypeEnum.validateJsonElement(jsonObj.get("type"));
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!GetCorporationsCorporationIdContracts200Ok.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'GetCorporationsCorporationIdContracts200Ok' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<GetCorporationsCorporationIdContracts200Ok> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(GetCorporationsCorporationIdContracts200Ok.class));

       return (TypeAdapter<T>) new TypeAdapter<GetCorporationsCorporationIdContracts200Ok>() {
           @Override
           public void write(JsonWriter out, GetCorporationsCorporationIdContracts200Ok value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public GetCorporationsCorporationIdContracts200Ok read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of GetCorporationsCorporationIdContracts200Ok given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of GetCorporationsCorporationIdContracts200Ok
   * @throws IOException if the JSON string is invalid with respect to GetCorporationsCorporationIdContracts200Ok
   */
  public static GetCorporationsCorporationIdContracts200Ok fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, GetCorporationsCorporationIdContracts200Ok.class);
  }

  /**
   * Convert an instance of GetCorporationsCorporationIdContracts200Ok to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

