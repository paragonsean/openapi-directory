/*
 * EVE Swagger Interface
 * An OpenAPI for EVE Online
 *
 * The version of the OpenAPI document: 0.8.6
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * 200 ok object
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:27:54.306821-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class GetCharactersCharacterIdRolesOk {
  /**
   * role string
   */
  @JsonAdapter(RolesEnum.Adapter.class)
  public enum RolesEnum {
    ACCOUNT_TAKE_1("Account_Take_1"),
    
    ACCOUNT_TAKE_2("Account_Take_2"),
    
    ACCOUNT_TAKE_3("Account_Take_3"),
    
    ACCOUNT_TAKE_4("Account_Take_4"),
    
    ACCOUNT_TAKE_5("Account_Take_5"),
    
    ACCOUNT_TAKE_6("Account_Take_6"),
    
    ACCOUNT_TAKE_7("Account_Take_7"),
    
    ACCOUNTANT("Accountant"),
    
    AUDITOR("Auditor"),
    
    COMMUNICATIONS_OFFICER("Communications_Officer"),
    
    CONFIG_EQUIPMENT("Config_Equipment"),
    
    CONFIG_STARBASE_EQUIPMENT("Config_Starbase_Equipment"),
    
    CONTAINER_TAKE_1("Container_Take_1"),
    
    CONTAINER_TAKE_2("Container_Take_2"),
    
    CONTAINER_TAKE_3("Container_Take_3"),
    
    CONTAINER_TAKE_4("Container_Take_4"),
    
    CONTAINER_TAKE_5("Container_Take_5"),
    
    CONTAINER_TAKE_6("Container_Take_6"),
    
    CONTAINER_TAKE_7("Container_Take_7"),
    
    CONTRACT_MANAGER("Contract_Manager"),
    
    DIPLOMAT("Diplomat"),
    
    DIRECTOR("Director"),
    
    FACTORY_MANAGER("Factory_Manager"),
    
    FITTING_MANAGER("Fitting_Manager"),
    
    HANGAR_QUERY_1("Hangar_Query_1"),
    
    HANGAR_QUERY_2("Hangar_Query_2"),
    
    HANGAR_QUERY_3("Hangar_Query_3"),
    
    HANGAR_QUERY_4("Hangar_Query_4"),
    
    HANGAR_QUERY_5("Hangar_Query_5"),
    
    HANGAR_QUERY_6("Hangar_Query_6"),
    
    HANGAR_QUERY_7("Hangar_Query_7"),
    
    HANGAR_TAKE_1("Hangar_Take_1"),
    
    HANGAR_TAKE_2("Hangar_Take_2"),
    
    HANGAR_TAKE_3("Hangar_Take_3"),
    
    HANGAR_TAKE_4("Hangar_Take_4"),
    
    HANGAR_TAKE_5("Hangar_Take_5"),
    
    HANGAR_TAKE_6("Hangar_Take_6"),
    
    HANGAR_TAKE_7("Hangar_Take_7"),
    
    JUNIOR_ACCOUNTANT("Junior_Accountant"),
    
    PERSONNEL_MANAGER("Personnel_Manager"),
    
    RENT_FACTORY_FACILITY("Rent_Factory_Facility"),
    
    RENT_OFFICE("Rent_Office"),
    
    RENT_RESEARCH_FACILITY("Rent_Research_Facility"),
    
    SECURITY_OFFICER("Security_Officer"),
    
    STARBASE_DEFENSE_OPERATOR("Starbase_Defense_Operator"),
    
    STARBASE_FUEL_TECHNICIAN("Starbase_Fuel_Technician"),
    
    STATION_MANAGER("Station_Manager"),
    
    TERRESTRIAL_COMBAT_OFFICER("Terrestrial_Combat_Officer"),
    
    TERRESTRIAL_LOGISTICS_OFFICER("Terrestrial_Logistics_Officer"),
    
    TRADER("Trader");

    private String value;

    RolesEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static RolesEnum fromValue(String value) {
      for (RolesEnum b : RolesEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<RolesEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final RolesEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public RolesEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return RolesEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      RolesEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_ROLES = "roles";
  @SerializedName(SERIALIZED_NAME_ROLES)
  private List<RolesEnum> roles = new ArrayList<>();

  /**
   * roles_at_base string
   */
  @JsonAdapter(RolesAtBaseEnum.Adapter.class)
  public enum RolesAtBaseEnum {
    ACCOUNT_TAKE_1("Account_Take_1"),
    
    ACCOUNT_TAKE_2("Account_Take_2"),
    
    ACCOUNT_TAKE_3("Account_Take_3"),
    
    ACCOUNT_TAKE_4("Account_Take_4"),
    
    ACCOUNT_TAKE_5("Account_Take_5"),
    
    ACCOUNT_TAKE_6("Account_Take_6"),
    
    ACCOUNT_TAKE_7("Account_Take_7"),
    
    ACCOUNTANT("Accountant"),
    
    AUDITOR("Auditor"),
    
    COMMUNICATIONS_OFFICER("Communications_Officer"),
    
    CONFIG_EQUIPMENT("Config_Equipment"),
    
    CONFIG_STARBASE_EQUIPMENT("Config_Starbase_Equipment"),
    
    CONTAINER_TAKE_1("Container_Take_1"),
    
    CONTAINER_TAKE_2("Container_Take_2"),
    
    CONTAINER_TAKE_3("Container_Take_3"),
    
    CONTAINER_TAKE_4("Container_Take_4"),
    
    CONTAINER_TAKE_5("Container_Take_5"),
    
    CONTAINER_TAKE_6("Container_Take_6"),
    
    CONTAINER_TAKE_7("Container_Take_7"),
    
    CONTRACT_MANAGER("Contract_Manager"),
    
    DIPLOMAT("Diplomat"),
    
    DIRECTOR("Director"),
    
    FACTORY_MANAGER("Factory_Manager"),
    
    FITTING_MANAGER("Fitting_Manager"),
    
    HANGAR_QUERY_1("Hangar_Query_1"),
    
    HANGAR_QUERY_2("Hangar_Query_2"),
    
    HANGAR_QUERY_3("Hangar_Query_3"),
    
    HANGAR_QUERY_4("Hangar_Query_4"),
    
    HANGAR_QUERY_5("Hangar_Query_5"),
    
    HANGAR_QUERY_6("Hangar_Query_6"),
    
    HANGAR_QUERY_7("Hangar_Query_7"),
    
    HANGAR_TAKE_1("Hangar_Take_1"),
    
    HANGAR_TAKE_2("Hangar_Take_2"),
    
    HANGAR_TAKE_3("Hangar_Take_3"),
    
    HANGAR_TAKE_4("Hangar_Take_4"),
    
    HANGAR_TAKE_5("Hangar_Take_5"),
    
    HANGAR_TAKE_6("Hangar_Take_6"),
    
    HANGAR_TAKE_7("Hangar_Take_7"),
    
    JUNIOR_ACCOUNTANT("Junior_Accountant"),
    
    PERSONNEL_MANAGER("Personnel_Manager"),
    
    RENT_FACTORY_FACILITY("Rent_Factory_Facility"),
    
    RENT_OFFICE("Rent_Office"),
    
    RENT_RESEARCH_FACILITY("Rent_Research_Facility"),
    
    SECURITY_OFFICER("Security_Officer"),
    
    STARBASE_DEFENSE_OPERATOR("Starbase_Defense_Operator"),
    
    STARBASE_FUEL_TECHNICIAN("Starbase_Fuel_Technician"),
    
    STATION_MANAGER("Station_Manager"),
    
    TERRESTRIAL_COMBAT_OFFICER("Terrestrial_Combat_Officer"),
    
    TERRESTRIAL_LOGISTICS_OFFICER("Terrestrial_Logistics_Officer"),
    
    TRADER("Trader");

    private String value;

    RolesAtBaseEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static RolesAtBaseEnum fromValue(String value) {
      for (RolesAtBaseEnum b : RolesAtBaseEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<RolesAtBaseEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final RolesAtBaseEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public RolesAtBaseEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return RolesAtBaseEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      RolesAtBaseEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_ROLES_AT_BASE = "roles_at_base";
  @SerializedName(SERIALIZED_NAME_ROLES_AT_BASE)
  private List<RolesAtBaseEnum> rolesAtBase = new ArrayList<>();

  /**
   * roles_at_hq string
   */
  @JsonAdapter(RolesAtHqEnum.Adapter.class)
  public enum RolesAtHqEnum {
    ACCOUNT_TAKE_1("Account_Take_1"),
    
    ACCOUNT_TAKE_2("Account_Take_2"),
    
    ACCOUNT_TAKE_3("Account_Take_3"),
    
    ACCOUNT_TAKE_4("Account_Take_4"),
    
    ACCOUNT_TAKE_5("Account_Take_5"),
    
    ACCOUNT_TAKE_6("Account_Take_6"),
    
    ACCOUNT_TAKE_7("Account_Take_7"),
    
    ACCOUNTANT("Accountant"),
    
    AUDITOR("Auditor"),
    
    COMMUNICATIONS_OFFICER("Communications_Officer"),
    
    CONFIG_EQUIPMENT("Config_Equipment"),
    
    CONFIG_STARBASE_EQUIPMENT("Config_Starbase_Equipment"),
    
    CONTAINER_TAKE_1("Container_Take_1"),
    
    CONTAINER_TAKE_2("Container_Take_2"),
    
    CONTAINER_TAKE_3("Container_Take_3"),
    
    CONTAINER_TAKE_4("Container_Take_4"),
    
    CONTAINER_TAKE_5("Container_Take_5"),
    
    CONTAINER_TAKE_6("Container_Take_6"),
    
    CONTAINER_TAKE_7("Container_Take_7"),
    
    CONTRACT_MANAGER("Contract_Manager"),
    
    DIPLOMAT("Diplomat"),
    
    DIRECTOR("Director"),
    
    FACTORY_MANAGER("Factory_Manager"),
    
    FITTING_MANAGER("Fitting_Manager"),
    
    HANGAR_QUERY_1("Hangar_Query_1"),
    
    HANGAR_QUERY_2("Hangar_Query_2"),
    
    HANGAR_QUERY_3("Hangar_Query_3"),
    
    HANGAR_QUERY_4("Hangar_Query_4"),
    
    HANGAR_QUERY_5("Hangar_Query_5"),
    
    HANGAR_QUERY_6("Hangar_Query_6"),
    
    HANGAR_QUERY_7("Hangar_Query_7"),
    
    HANGAR_TAKE_1("Hangar_Take_1"),
    
    HANGAR_TAKE_2("Hangar_Take_2"),
    
    HANGAR_TAKE_3("Hangar_Take_3"),
    
    HANGAR_TAKE_4("Hangar_Take_4"),
    
    HANGAR_TAKE_5("Hangar_Take_5"),
    
    HANGAR_TAKE_6("Hangar_Take_6"),
    
    HANGAR_TAKE_7("Hangar_Take_7"),
    
    JUNIOR_ACCOUNTANT("Junior_Accountant"),
    
    PERSONNEL_MANAGER("Personnel_Manager"),
    
    RENT_FACTORY_FACILITY("Rent_Factory_Facility"),
    
    RENT_OFFICE("Rent_Office"),
    
    RENT_RESEARCH_FACILITY("Rent_Research_Facility"),
    
    SECURITY_OFFICER("Security_Officer"),
    
    STARBASE_DEFENSE_OPERATOR("Starbase_Defense_Operator"),
    
    STARBASE_FUEL_TECHNICIAN("Starbase_Fuel_Technician"),
    
    STATION_MANAGER("Station_Manager"),
    
    TERRESTRIAL_COMBAT_OFFICER("Terrestrial_Combat_Officer"),
    
    TERRESTRIAL_LOGISTICS_OFFICER("Terrestrial_Logistics_Officer"),
    
    TRADER("Trader");

    private String value;

    RolesAtHqEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static RolesAtHqEnum fromValue(String value) {
      for (RolesAtHqEnum b : RolesAtHqEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<RolesAtHqEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final RolesAtHqEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public RolesAtHqEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return RolesAtHqEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      RolesAtHqEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_ROLES_AT_HQ = "roles_at_hq";
  @SerializedName(SERIALIZED_NAME_ROLES_AT_HQ)
  private List<RolesAtHqEnum> rolesAtHq = new ArrayList<>();

  /**
   * roles_at_other string
   */
  @JsonAdapter(RolesAtOtherEnum.Adapter.class)
  public enum RolesAtOtherEnum {
    ACCOUNT_TAKE_1("Account_Take_1"),
    
    ACCOUNT_TAKE_2("Account_Take_2"),
    
    ACCOUNT_TAKE_3("Account_Take_3"),
    
    ACCOUNT_TAKE_4("Account_Take_4"),
    
    ACCOUNT_TAKE_5("Account_Take_5"),
    
    ACCOUNT_TAKE_6("Account_Take_6"),
    
    ACCOUNT_TAKE_7("Account_Take_7"),
    
    ACCOUNTANT("Accountant"),
    
    AUDITOR("Auditor"),
    
    COMMUNICATIONS_OFFICER("Communications_Officer"),
    
    CONFIG_EQUIPMENT("Config_Equipment"),
    
    CONFIG_STARBASE_EQUIPMENT("Config_Starbase_Equipment"),
    
    CONTAINER_TAKE_1("Container_Take_1"),
    
    CONTAINER_TAKE_2("Container_Take_2"),
    
    CONTAINER_TAKE_3("Container_Take_3"),
    
    CONTAINER_TAKE_4("Container_Take_4"),
    
    CONTAINER_TAKE_5("Container_Take_5"),
    
    CONTAINER_TAKE_6("Container_Take_6"),
    
    CONTAINER_TAKE_7("Container_Take_7"),
    
    CONTRACT_MANAGER("Contract_Manager"),
    
    DIPLOMAT("Diplomat"),
    
    DIRECTOR("Director"),
    
    FACTORY_MANAGER("Factory_Manager"),
    
    FITTING_MANAGER("Fitting_Manager"),
    
    HANGAR_QUERY_1("Hangar_Query_1"),
    
    HANGAR_QUERY_2("Hangar_Query_2"),
    
    HANGAR_QUERY_3("Hangar_Query_3"),
    
    HANGAR_QUERY_4("Hangar_Query_4"),
    
    HANGAR_QUERY_5("Hangar_Query_5"),
    
    HANGAR_QUERY_6("Hangar_Query_6"),
    
    HANGAR_QUERY_7("Hangar_Query_7"),
    
    HANGAR_TAKE_1("Hangar_Take_1"),
    
    HANGAR_TAKE_2("Hangar_Take_2"),
    
    HANGAR_TAKE_3("Hangar_Take_3"),
    
    HANGAR_TAKE_4("Hangar_Take_4"),
    
    HANGAR_TAKE_5("Hangar_Take_5"),
    
    HANGAR_TAKE_6("Hangar_Take_6"),
    
    HANGAR_TAKE_7("Hangar_Take_7"),
    
    JUNIOR_ACCOUNTANT("Junior_Accountant"),
    
    PERSONNEL_MANAGER("Personnel_Manager"),
    
    RENT_FACTORY_FACILITY("Rent_Factory_Facility"),
    
    RENT_OFFICE("Rent_Office"),
    
    RENT_RESEARCH_FACILITY("Rent_Research_Facility"),
    
    SECURITY_OFFICER("Security_Officer"),
    
    STARBASE_DEFENSE_OPERATOR("Starbase_Defense_Operator"),
    
    STARBASE_FUEL_TECHNICIAN("Starbase_Fuel_Technician"),
    
    STATION_MANAGER("Station_Manager"),
    
    TERRESTRIAL_COMBAT_OFFICER("Terrestrial_Combat_Officer"),
    
    TERRESTRIAL_LOGISTICS_OFFICER("Terrestrial_Logistics_Officer"),
    
    TRADER("Trader");

    private String value;

    RolesAtOtherEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static RolesAtOtherEnum fromValue(String value) {
      for (RolesAtOtherEnum b : RolesAtOtherEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<RolesAtOtherEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final RolesAtOtherEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public RolesAtOtherEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return RolesAtOtherEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      RolesAtOtherEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_ROLES_AT_OTHER = "roles_at_other";
  @SerializedName(SERIALIZED_NAME_ROLES_AT_OTHER)
  private List<RolesAtOtherEnum> rolesAtOther = new ArrayList<>();

  public GetCharactersCharacterIdRolesOk() {
  }

  public GetCharactersCharacterIdRolesOk roles(List<RolesEnum> roles) {
    this.roles = roles;
    return this;
  }

  public GetCharactersCharacterIdRolesOk addRolesItem(RolesEnum rolesItem) {
    if (this.roles == null) {
      this.roles = new ArrayList<>();
    }
    this.roles.add(rolesItem);
    return this;
  }

  /**
   * roles array
   * @return roles
   */
  @javax.annotation.Nullable
  public List<RolesEnum> getRoles() {
    return roles;
  }

  public void setRoles(List<RolesEnum> roles) {
    this.roles = roles;
  }


  public GetCharactersCharacterIdRolesOk rolesAtBase(List<RolesAtBaseEnum> rolesAtBase) {
    this.rolesAtBase = rolesAtBase;
    return this;
  }

  public GetCharactersCharacterIdRolesOk addRolesAtBaseItem(RolesAtBaseEnum rolesAtBaseItem) {
    if (this.rolesAtBase == null) {
      this.rolesAtBase = new ArrayList<>();
    }
    this.rolesAtBase.add(rolesAtBaseItem);
    return this;
  }

  /**
   * roles_at_base array
   * @return rolesAtBase
   */
  @javax.annotation.Nullable
  public List<RolesAtBaseEnum> getRolesAtBase() {
    return rolesAtBase;
  }

  public void setRolesAtBase(List<RolesAtBaseEnum> rolesAtBase) {
    this.rolesAtBase = rolesAtBase;
  }


  public GetCharactersCharacterIdRolesOk rolesAtHq(List<RolesAtHqEnum> rolesAtHq) {
    this.rolesAtHq = rolesAtHq;
    return this;
  }

  public GetCharactersCharacterIdRolesOk addRolesAtHqItem(RolesAtHqEnum rolesAtHqItem) {
    if (this.rolesAtHq == null) {
      this.rolesAtHq = new ArrayList<>();
    }
    this.rolesAtHq.add(rolesAtHqItem);
    return this;
  }

  /**
   * roles_at_hq array
   * @return rolesAtHq
   */
  @javax.annotation.Nullable
  public List<RolesAtHqEnum> getRolesAtHq() {
    return rolesAtHq;
  }

  public void setRolesAtHq(List<RolesAtHqEnum> rolesAtHq) {
    this.rolesAtHq = rolesAtHq;
  }


  public GetCharactersCharacterIdRolesOk rolesAtOther(List<RolesAtOtherEnum> rolesAtOther) {
    this.rolesAtOther = rolesAtOther;
    return this;
  }

  public GetCharactersCharacterIdRolesOk addRolesAtOtherItem(RolesAtOtherEnum rolesAtOtherItem) {
    if (this.rolesAtOther == null) {
      this.rolesAtOther = new ArrayList<>();
    }
    this.rolesAtOther.add(rolesAtOtherItem);
    return this;
  }

  /**
   * roles_at_other array
   * @return rolesAtOther
   */
  @javax.annotation.Nullable
  public List<RolesAtOtherEnum> getRolesAtOther() {
    return rolesAtOther;
  }

  public void setRolesAtOther(List<RolesAtOtherEnum> rolesAtOther) {
    this.rolesAtOther = rolesAtOther;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    GetCharactersCharacterIdRolesOk getCharactersCharacterIdRolesOk = (GetCharactersCharacterIdRolesOk) o;
    return Objects.equals(this.roles, getCharactersCharacterIdRolesOk.roles) &&
        Objects.equals(this.rolesAtBase, getCharactersCharacterIdRolesOk.rolesAtBase) &&
        Objects.equals(this.rolesAtHq, getCharactersCharacterIdRolesOk.rolesAtHq) &&
        Objects.equals(this.rolesAtOther, getCharactersCharacterIdRolesOk.rolesAtOther);
  }

  @Override
  public int hashCode() {
    return Objects.hash(roles, rolesAtBase, rolesAtHq, rolesAtOther);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class GetCharactersCharacterIdRolesOk {\n");
    sb.append("    roles: ").append(toIndentedString(roles)).append("\n");
    sb.append("    rolesAtBase: ").append(toIndentedString(rolesAtBase)).append("\n");
    sb.append("    rolesAtHq: ").append(toIndentedString(rolesAtHq)).append("\n");
    sb.append("    rolesAtOther: ").append(toIndentedString(rolesAtOther)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("roles");
    openapiFields.add("roles_at_base");
    openapiFields.add("roles_at_hq");
    openapiFields.add("roles_at_other");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to GetCharactersCharacterIdRolesOk
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!GetCharactersCharacterIdRolesOk.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in GetCharactersCharacterIdRolesOk is not found in the empty JSON string", GetCharactersCharacterIdRolesOk.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!GetCharactersCharacterIdRolesOk.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `GetCharactersCharacterIdRolesOk` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // ensure the optional json data is an array if present
      if (jsonObj.get("roles") != null && !jsonObj.get("roles").isJsonNull() && !jsonObj.get("roles").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `roles` to be an array in the JSON string but got `%s`", jsonObj.get("roles").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("roles_at_base") != null && !jsonObj.get("roles_at_base").isJsonNull() && !jsonObj.get("roles_at_base").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `roles_at_base` to be an array in the JSON string but got `%s`", jsonObj.get("roles_at_base").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("roles_at_hq") != null && !jsonObj.get("roles_at_hq").isJsonNull() && !jsonObj.get("roles_at_hq").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `roles_at_hq` to be an array in the JSON string but got `%s`", jsonObj.get("roles_at_hq").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("roles_at_other") != null && !jsonObj.get("roles_at_other").isJsonNull() && !jsonObj.get("roles_at_other").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `roles_at_other` to be an array in the JSON string but got `%s`", jsonObj.get("roles_at_other").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!GetCharactersCharacterIdRolesOk.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'GetCharactersCharacterIdRolesOk' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<GetCharactersCharacterIdRolesOk> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(GetCharactersCharacterIdRolesOk.class));

       return (TypeAdapter<T>) new TypeAdapter<GetCharactersCharacterIdRolesOk>() {
           @Override
           public void write(JsonWriter out, GetCharactersCharacterIdRolesOk value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public GetCharactersCharacterIdRolesOk read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of GetCharactersCharacterIdRolesOk given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of GetCharactersCharacterIdRolesOk
   * @throws IOException if the JSON string is invalid with respect to GetCharactersCharacterIdRolesOk
   */
  public static GetCharactersCharacterIdRolesOk fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, GetCharactersCharacterIdRolesOk.class);
  }

  /**
   * Convert an instance of GetCharactersCharacterIdRolesOk to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

