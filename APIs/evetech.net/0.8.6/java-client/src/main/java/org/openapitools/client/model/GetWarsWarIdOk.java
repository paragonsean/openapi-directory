/*
 * EVE Swagger Interface
 * An OpenAPI for EVE Online
 *
 * The version of the OpenAPI document: 0.8.6
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.time.OffsetDateTime;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.GetWarsWarIdAggressor;
import org.openapitools.client.model.GetWarsWarIdAlly;
import org.openapitools.client.model.GetWarsWarIdDefender;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * 200 ok object
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:27:54.306821-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class GetWarsWarIdOk {
  public static final String SERIALIZED_NAME_AGGRESSOR = "aggressor";
  @SerializedName(SERIALIZED_NAME_AGGRESSOR)
  private GetWarsWarIdAggressor aggressor;

  public static final String SERIALIZED_NAME_ALLIES = "allies";
  @SerializedName(SERIALIZED_NAME_ALLIES)
  private List<GetWarsWarIdAlly> allies = new ArrayList<>();

  public static final String SERIALIZED_NAME_DECLARED = "declared";
  @SerializedName(SERIALIZED_NAME_DECLARED)
  private OffsetDateTime declared;

  public static final String SERIALIZED_NAME_DEFENDER = "defender";
  @SerializedName(SERIALIZED_NAME_DEFENDER)
  private GetWarsWarIdDefender defender;

  public static final String SERIALIZED_NAME_FINISHED = "finished";
  @SerializedName(SERIALIZED_NAME_FINISHED)
  private OffsetDateTime finished;

  public static final String SERIALIZED_NAME_ID = "id";
  @SerializedName(SERIALIZED_NAME_ID)
  private Integer id;

  public static final String SERIALIZED_NAME_MUTUAL = "mutual";
  @SerializedName(SERIALIZED_NAME_MUTUAL)
  private Boolean mutual;

  public static final String SERIALIZED_NAME_OPEN_FOR_ALLIES = "open_for_allies";
  @SerializedName(SERIALIZED_NAME_OPEN_FOR_ALLIES)
  private Boolean openForAllies;

  public static final String SERIALIZED_NAME_RETRACTED = "retracted";
  @SerializedName(SERIALIZED_NAME_RETRACTED)
  private OffsetDateTime retracted;

  public static final String SERIALIZED_NAME_STARTED = "started";
  @SerializedName(SERIALIZED_NAME_STARTED)
  private OffsetDateTime started;

  public GetWarsWarIdOk() {
  }

  public GetWarsWarIdOk aggressor(GetWarsWarIdAggressor aggressor) {
    this.aggressor = aggressor;
    return this;
  }

  /**
   * Get aggressor
   * @return aggressor
   */
  @javax.annotation.Nonnull
  public GetWarsWarIdAggressor getAggressor() {
    return aggressor;
  }

  public void setAggressor(GetWarsWarIdAggressor aggressor) {
    this.aggressor = aggressor;
  }


  public GetWarsWarIdOk allies(List<GetWarsWarIdAlly> allies) {
    this.allies = allies;
    return this;
  }

  public GetWarsWarIdOk addAlliesItem(GetWarsWarIdAlly alliesItem) {
    if (this.allies == null) {
      this.allies = new ArrayList<>();
    }
    this.allies.add(alliesItem);
    return this;
  }

  /**
   * allied corporations or alliances, each object contains either corporation_id or alliance_id
   * @return allies
   */
  @javax.annotation.Nullable
  public List<GetWarsWarIdAlly> getAllies() {
    return allies;
  }

  public void setAllies(List<GetWarsWarIdAlly> allies) {
    this.allies = allies;
  }


  public GetWarsWarIdOk declared(OffsetDateTime declared) {
    this.declared = declared;
    return this;
  }

  /**
   * Time that the war was declared
   * @return declared
   */
  @javax.annotation.Nonnull
  public OffsetDateTime getDeclared() {
    return declared;
  }

  public void setDeclared(OffsetDateTime declared) {
    this.declared = declared;
  }


  public GetWarsWarIdOk defender(GetWarsWarIdDefender defender) {
    this.defender = defender;
    return this;
  }

  /**
   * Get defender
   * @return defender
   */
  @javax.annotation.Nonnull
  public GetWarsWarIdDefender getDefender() {
    return defender;
  }

  public void setDefender(GetWarsWarIdDefender defender) {
    this.defender = defender;
  }


  public GetWarsWarIdOk finished(OffsetDateTime finished) {
    this.finished = finished;
    return this;
  }

  /**
   * Time the war ended and shooting was no longer allowed
   * @return finished
   */
  @javax.annotation.Nullable
  public OffsetDateTime getFinished() {
    return finished;
  }

  public void setFinished(OffsetDateTime finished) {
    this.finished = finished;
  }


  public GetWarsWarIdOk id(Integer id) {
    this.id = id;
    return this;
  }

  /**
   * ID of the specified war
   * @return id
   */
  @javax.annotation.Nonnull
  public Integer getId() {
    return id;
  }

  public void setId(Integer id) {
    this.id = id;
  }


  public GetWarsWarIdOk mutual(Boolean mutual) {
    this.mutual = mutual;
    return this;
  }

  /**
   * Was the war declared mutual by both parties
   * @return mutual
   */
  @javax.annotation.Nonnull
  public Boolean getMutual() {
    return mutual;
  }

  public void setMutual(Boolean mutual) {
    this.mutual = mutual;
  }


  public GetWarsWarIdOk openForAllies(Boolean openForAllies) {
    this.openForAllies = openForAllies;
    return this;
  }

  /**
   * Is the war currently open for allies or not
   * @return openForAllies
   */
  @javax.annotation.Nonnull
  public Boolean getOpenForAllies() {
    return openForAllies;
  }

  public void setOpenForAllies(Boolean openForAllies) {
    this.openForAllies = openForAllies;
  }


  public GetWarsWarIdOk retracted(OffsetDateTime retracted) {
    this.retracted = retracted;
    return this;
  }

  /**
   * Time the war was retracted but both sides could still shoot each other
   * @return retracted
   */
  @javax.annotation.Nullable
  public OffsetDateTime getRetracted() {
    return retracted;
  }

  public void setRetracted(OffsetDateTime retracted) {
    this.retracted = retracted;
  }


  public GetWarsWarIdOk started(OffsetDateTime started) {
    this.started = started;
    return this;
  }

  /**
   * Time when the war started and both sides could shoot each other
   * @return started
   */
  @javax.annotation.Nullable
  public OffsetDateTime getStarted() {
    return started;
  }

  public void setStarted(OffsetDateTime started) {
    this.started = started;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    GetWarsWarIdOk getWarsWarIdOk = (GetWarsWarIdOk) o;
    return Objects.equals(this.aggressor, getWarsWarIdOk.aggressor) &&
        Objects.equals(this.allies, getWarsWarIdOk.allies) &&
        Objects.equals(this.declared, getWarsWarIdOk.declared) &&
        Objects.equals(this.defender, getWarsWarIdOk.defender) &&
        Objects.equals(this.finished, getWarsWarIdOk.finished) &&
        Objects.equals(this.id, getWarsWarIdOk.id) &&
        Objects.equals(this.mutual, getWarsWarIdOk.mutual) &&
        Objects.equals(this.openForAllies, getWarsWarIdOk.openForAllies) &&
        Objects.equals(this.retracted, getWarsWarIdOk.retracted) &&
        Objects.equals(this.started, getWarsWarIdOk.started);
  }

  @Override
  public int hashCode() {
    return Objects.hash(aggressor, allies, declared, defender, finished, id, mutual, openForAllies, retracted, started);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class GetWarsWarIdOk {\n");
    sb.append("    aggressor: ").append(toIndentedString(aggressor)).append("\n");
    sb.append("    allies: ").append(toIndentedString(allies)).append("\n");
    sb.append("    declared: ").append(toIndentedString(declared)).append("\n");
    sb.append("    defender: ").append(toIndentedString(defender)).append("\n");
    sb.append("    finished: ").append(toIndentedString(finished)).append("\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    mutual: ").append(toIndentedString(mutual)).append("\n");
    sb.append("    openForAllies: ").append(toIndentedString(openForAllies)).append("\n");
    sb.append("    retracted: ").append(toIndentedString(retracted)).append("\n");
    sb.append("    started: ").append(toIndentedString(started)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("aggressor");
    openapiFields.add("allies");
    openapiFields.add("declared");
    openapiFields.add("defender");
    openapiFields.add("finished");
    openapiFields.add("id");
    openapiFields.add("mutual");
    openapiFields.add("open_for_allies");
    openapiFields.add("retracted");
    openapiFields.add("started");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("aggressor");
    openapiRequiredFields.add("declared");
    openapiRequiredFields.add("defender");
    openapiRequiredFields.add("id");
    openapiRequiredFields.add("mutual");
    openapiRequiredFields.add("open_for_allies");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to GetWarsWarIdOk
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!GetWarsWarIdOk.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in GetWarsWarIdOk is not found in the empty JSON string", GetWarsWarIdOk.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!GetWarsWarIdOk.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `GetWarsWarIdOk` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : GetWarsWarIdOk.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the required field `aggressor`
      GetWarsWarIdAggressor.validateJsonElement(jsonObj.get("aggressor"));
      if (jsonObj.get("allies") != null && !jsonObj.get("allies").isJsonNull()) {
        JsonArray jsonArrayallies = jsonObj.getAsJsonArray("allies");
        if (jsonArrayallies != null) {
          // ensure the json data is an array
          if (!jsonObj.get("allies").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `allies` to be an array in the JSON string but got `%s`", jsonObj.get("allies").toString()));
          }

          // validate the optional field `allies` (array)
          for (int i = 0; i < jsonArrayallies.size(); i++) {
            GetWarsWarIdAlly.validateJsonElement(jsonArrayallies.get(i));
          };
        }
      }
      // validate the required field `defender`
      GetWarsWarIdDefender.validateJsonElement(jsonObj.get("defender"));
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!GetWarsWarIdOk.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'GetWarsWarIdOk' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<GetWarsWarIdOk> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(GetWarsWarIdOk.class));

       return (TypeAdapter<T>) new TypeAdapter<GetWarsWarIdOk>() {
           @Override
           public void write(JsonWriter out, GetWarsWarIdOk value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public GetWarsWarIdOk read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of GetWarsWarIdOk given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of GetWarsWarIdOk
   * @throws IOException if the JSON string is invalid with respect to GetWarsWarIdOk
   */
  public static GetWarsWarIdOk fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, GetWarsWarIdOk.class);
  }

  /**
   * Convert an instance of GetWarsWarIdOk to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

