/*
 * EVE Swagger Interface
 * An OpenAPI for EVE Online
 *
 * The version of the OpenAPI document: 0.8.6
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * link object
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:27:54.306821-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class GetCharactersCharacterIdPlanetsPlanetIdLink {
  public static final String SERIALIZED_NAME_DESTINATION_PIN_ID = "destination_pin_id";
  @SerializedName(SERIALIZED_NAME_DESTINATION_PIN_ID)
  private Long destinationPinId;

  public static final String SERIALIZED_NAME_LINK_LEVEL = "link_level";
  @SerializedName(SERIALIZED_NAME_LINK_LEVEL)
  private Integer linkLevel;

  public static final String SERIALIZED_NAME_SOURCE_PIN_ID = "source_pin_id";
  @SerializedName(SERIALIZED_NAME_SOURCE_PIN_ID)
  private Long sourcePinId;

  public GetCharactersCharacterIdPlanetsPlanetIdLink() {
  }

  public GetCharactersCharacterIdPlanetsPlanetIdLink destinationPinId(Long destinationPinId) {
    this.destinationPinId = destinationPinId;
    return this;
  }

  /**
   * destination_pin_id integer
   * @return destinationPinId
   */
  @javax.annotation.Nonnull
  public Long getDestinationPinId() {
    return destinationPinId;
  }

  public void setDestinationPinId(Long destinationPinId) {
    this.destinationPinId = destinationPinId;
  }


  public GetCharactersCharacterIdPlanetsPlanetIdLink linkLevel(Integer linkLevel) {
    this.linkLevel = linkLevel;
    return this;
  }

  /**
   * link_level integer
   * minimum: 0
   * maximum: 10
   * @return linkLevel
   */
  @javax.annotation.Nonnull
  public Integer getLinkLevel() {
    return linkLevel;
  }

  public void setLinkLevel(Integer linkLevel) {
    this.linkLevel = linkLevel;
  }


  public GetCharactersCharacterIdPlanetsPlanetIdLink sourcePinId(Long sourcePinId) {
    this.sourcePinId = sourcePinId;
    return this;
  }

  /**
   * source_pin_id integer
   * @return sourcePinId
   */
  @javax.annotation.Nonnull
  public Long getSourcePinId() {
    return sourcePinId;
  }

  public void setSourcePinId(Long sourcePinId) {
    this.sourcePinId = sourcePinId;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    GetCharactersCharacterIdPlanetsPlanetIdLink getCharactersCharacterIdPlanetsPlanetIdLink = (GetCharactersCharacterIdPlanetsPlanetIdLink) o;
    return Objects.equals(this.destinationPinId, getCharactersCharacterIdPlanetsPlanetIdLink.destinationPinId) &&
        Objects.equals(this.linkLevel, getCharactersCharacterIdPlanetsPlanetIdLink.linkLevel) &&
        Objects.equals(this.sourcePinId, getCharactersCharacterIdPlanetsPlanetIdLink.sourcePinId);
  }

  @Override
  public int hashCode() {
    return Objects.hash(destinationPinId, linkLevel, sourcePinId);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class GetCharactersCharacterIdPlanetsPlanetIdLink {\n");
    sb.append("    destinationPinId: ").append(toIndentedString(destinationPinId)).append("\n");
    sb.append("    linkLevel: ").append(toIndentedString(linkLevel)).append("\n");
    sb.append("    sourcePinId: ").append(toIndentedString(sourcePinId)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("destination_pin_id");
    openapiFields.add("link_level");
    openapiFields.add("source_pin_id");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("destination_pin_id");
    openapiRequiredFields.add("link_level");
    openapiRequiredFields.add("source_pin_id");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to GetCharactersCharacterIdPlanetsPlanetIdLink
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!GetCharactersCharacterIdPlanetsPlanetIdLink.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in GetCharactersCharacterIdPlanetsPlanetIdLink is not found in the empty JSON string", GetCharactersCharacterIdPlanetsPlanetIdLink.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!GetCharactersCharacterIdPlanetsPlanetIdLink.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `GetCharactersCharacterIdPlanetsPlanetIdLink` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : GetCharactersCharacterIdPlanetsPlanetIdLink.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!GetCharactersCharacterIdPlanetsPlanetIdLink.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'GetCharactersCharacterIdPlanetsPlanetIdLink' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<GetCharactersCharacterIdPlanetsPlanetIdLink> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(GetCharactersCharacterIdPlanetsPlanetIdLink.class));

       return (TypeAdapter<T>) new TypeAdapter<GetCharactersCharacterIdPlanetsPlanetIdLink>() {
           @Override
           public void write(JsonWriter out, GetCharactersCharacterIdPlanetsPlanetIdLink value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public GetCharactersCharacterIdPlanetsPlanetIdLink read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of GetCharactersCharacterIdPlanetsPlanetIdLink given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of GetCharactersCharacterIdPlanetsPlanetIdLink
   * @throws IOException if the JSON string is invalid with respect to GetCharactersCharacterIdPlanetsPlanetIdLink
   */
  public static GetCharactersCharacterIdPlanetsPlanetIdLink fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, GetCharactersCharacterIdPlanetsPlanetIdLink.class);
  }

  /**
   * Convert an instance of GetCharactersCharacterIdPlanetsPlanetIdLink to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

