/*
 * EVE Swagger Interface
 * An OpenAPI for EVE Online
 *
 * The version of the OpenAPI document: 0.8.6
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.time.OffsetDateTime;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * 200 ok object
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:27:54.306821-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class GetCharactersCharacterIdIndustryJobs200Ok {
  public static final String SERIALIZED_NAME_ACTIVITY_ID = "activity_id";
  @SerializedName(SERIALIZED_NAME_ACTIVITY_ID)
  private Integer activityId;

  public static final String SERIALIZED_NAME_BLUEPRINT_ID = "blueprint_id";
  @SerializedName(SERIALIZED_NAME_BLUEPRINT_ID)
  private Long blueprintId;

  public static final String SERIALIZED_NAME_BLUEPRINT_LOCATION_ID = "blueprint_location_id";
  @SerializedName(SERIALIZED_NAME_BLUEPRINT_LOCATION_ID)
  private Long blueprintLocationId;

  public static final String SERIALIZED_NAME_BLUEPRINT_TYPE_ID = "blueprint_type_id";
  @SerializedName(SERIALIZED_NAME_BLUEPRINT_TYPE_ID)
  private Integer blueprintTypeId;

  public static final String SERIALIZED_NAME_COMPLETED_CHARACTER_ID = "completed_character_id";
  @SerializedName(SERIALIZED_NAME_COMPLETED_CHARACTER_ID)
  private Integer completedCharacterId;

  public static final String SERIALIZED_NAME_COMPLETED_DATE = "completed_date";
  @SerializedName(SERIALIZED_NAME_COMPLETED_DATE)
  private OffsetDateTime completedDate;

  public static final String SERIALIZED_NAME_COST = "cost";
  @SerializedName(SERIALIZED_NAME_COST)
  private Double cost;

  public static final String SERIALIZED_NAME_DURATION = "duration";
  @SerializedName(SERIALIZED_NAME_DURATION)
  private Integer duration;

  public static final String SERIALIZED_NAME_END_DATE = "end_date";
  @SerializedName(SERIALIZED_NAME_END_DATE)
  private OffsetDateTime endDate;

  public static final String SERIALIZED_NAME_FACILITY_ID = "facility_id";
  @SerializedName(SERIALIZED_NAME_FACILITY_ID)
  private Long facilityId;

  public static final String SERIALIZED_NAME_INSTALLER_ID = "installer_id";
  @SerializedName(SERIALIZED_NAME_INSTALLER_ID)
  private Integer installerId;

  public static final String SERIALIZED_NAME_JOB_ID = "job_id";
  @SerializedName(SERIALIZED_NAME_JOB_ID)
  private Integer jobId;

  public static final String SERIALIZED_NAME_LICENSED_RUNS = "licensed_runs";
  @SerializedName(SERIALIZED_NAME_LICENSED_RUNS)
  private Integer licensedRuns;

  public static final String SERIALIZED_NAME_OUTPUT_LOCATION_ID = "output_location_id";
  @SerializedName(SERIALIZED_NAME_OUTPUT_LOCATION_ID)
  private Long outputLocationId;

  public static final String SERIALIZED_NAME_PAUSE_DATE = "pause_date";
  @SerializedName(SERIALIZED_NAME_PAUSE_DATE)
  private OffsetDateTime pauseDate;

  public static final String SERIALIZED_NAME_PROBABILITY = "probability";
  @SerializedName(SERIALIZED_NAME_PROBABILITY)
  private Float probability;

  public static final String SERIALIZED_NAME_PRODUCT_TYPE_ID = "product_type_id";
  @SerializedName(SERIALIZED_NAME_PRODUCT_TYPE_ID)
  private Integer productTypeId;

  public static final String SERIALIZED_NAME_RUNS = "runs";
  @SerializedName(SERIALIZED_NAME_RUNS)
  private Integer runs;

  public static final String SERIALIZED_NAME_START_DATE = "start_date";
  @SerializedName(SERIALIZED_NAME_START_DATE)
  private OffsetDateTime startDate;

  public static final String SERIALIZED_NAME_STATION_ID = "station_id";
  @SerializedName(SERIALIZED_NAME_STATION_ID)
  private Long stationId;

  /**
   * status string
   */
  @JsonAdapter(StatusEnum.Adapter.class)
  public enum StatusEnum {
    ACTIVE("active"),
    
    CANCELLED("cancelled"),
    
    DELIVERED("delivered"),
    
    PAUSED("paused"),
    
    READY("ready"),
    
    REVERTED("reverted");

    private String value;

    StatusEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static StatusEnum fromValue(String value) {
      for (StatusEnum b : StatusEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<StatusEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final StatusEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public StatusEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return StatusEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      StatusEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_STATUS = "status";
  @SerializedName(SERIALIZED_NAME_STATUS)
  private StatusEnum status;

  public static final String SERIALIZED_NAME_SUCCESSFUL_RUNS = "successful_runs";
  @SerializedName(SERIALIZED_NAME_SUCCESSFUL_RUNS)
  private Integer successfulRuns;

  public GetCharactersCharacterIdIndustryJobs200Ok() {
  }

  public GetCharactersCharacterIdIndustryJobs200Ok activityId(Integer activityId) {
    this.activityId = activityId;
    return this;
  }

  /**
   * Job activity ID
   * @return activityId
   */
  @javax.annotation.Nonnull
  public Integer getActivityId() {
    return activityId;
  }

  public void setActivityId(Integer activityId) {
    this.activityId = activityId;
  }


  public GetCharactersCharacterIdIndustryJobs200Ok blueprintId(Long blueprintId) {
    this.blueprintId = blueprintId;
    return this;
  }

  /**
   * blueprint_id integer
   * @return blueprintId
   */
  @javax.annotation.Nonnull
  public Long getBlueprintId() {
    return blueprintId;
  }

  public void setBlueprintId(Long blueprintId) {
    this.blueprintId = blueprintId;
  }


  public GetCharactersCharacterIdIndustryJobs200Ok blueprintLocationId(Long blueprintLocationId) {
    this.blueprintLocationId = blueprintLocationId;
    return this;
  }

  /**
   * Location ID of the location from which the blueprint was installed. Normally a station ID, but can also be an asset (e.g. container) or corporation facility
   * @return blueprintLocationId
   */
  @javax.annotation.Nonnull
  public Long getBlueprintLocationId() {
    return blueprintLocationId;
  }

  public void setBlueprintLocationId(Long blueprintLocationId) {
    this.blueprintLocationId = blueprintLocationId;
  }


  public GetCharactersCharacterIdIndustryJobs200Ok blueprintTypeId(Integer blueprintTypeId) {
    this.blueprintTypeId = blueprintTypeId;
    return this;
  }

  /**
   * blueprint_type_id integer
   * @return blueprintTypeId
   */
  @javax.annotation.Nonnull
  public Integer getBlueprintTypeId() {
    return blueprintTypeId;
  }

  public void setBlueprintTypeId(Integer blueprintTypeId) {
    this.blueprintTypeId = blueprintTypeId;
  }


  public GetCharactersCharacterIdIndustryJobs200Ok completedCharacterId(Integer completedCharacterId) {
    this.completedCharacterId = completedCharacterId;
    return this;
  }

  /**
   * ID of the character which completed this job
   * @return completedCharacterId
   */
  @javax.annotation.Nullable
  public Integer getCompletedCharacterId() {
    return completedCharacterId;
  }

  public void setCompletedCharacterId(Integer completedCharacterId) {
    this.completedCharacterId = completedCharacterId;
  }


  public GetCharactersCharacterIdIndustryJobs200Ok completedDate(OffsetDateTime completedDate) {
    this.completedDate = completedDate;
    return this;
  }

  /**
   * Date and time when this job was completed
   * @return completedDate
   */
  @javax.annotation.Nullable
  public OffsetDateTime getCompletedDate() {
    return completedDate;
  }

  public void setCompletedDate(OffsetDateTime completedDate) {
    this.completedDate = completedDate;
  }


  public GetCharactersCharacterIdIndustryJobs200Ok cost(Double cost) {
    this.cost = cost;
    return this;
  }

  /**
   * The sume of job installation fee and industry facility tax
   * @return cost
   */
  @javax.annotation.Nullable
  public Double getCost() {
    return cost;
  }

  public void setCost(Double cost) {
    this.cost = cost;
  }


  public GetCharactersCharacterIdIndustryJobs200Ok duration(Integer duration) {
    this.duration = duration;
    return this;
  }

  /**
   * Job duration in seconds
   * @return duration
   */
  @javax.annotation.Nonnull
  public Integer getDuration() {
    return duration;
  }

  public void setDuration(Integer duration) {
    this.duration = duration;
  }


  public GetCharactersCharacterIdIndustryJobs200Ok endDate(OffsetDateTime endDate) {
    this.endDate = endDate;
    return this;
  }

  /**
   * Date and time when this job finished
   * @return endDate
   */
  @javax.annotation.Nonnull
  public OffsetDateTime getEndDate() {
    return endDate;
  }

  public void setEndDate(OffsetDateTime endDate) {
    this.endDate = endDate;
  }


  public GetCharactersCharacterIdIndustryJobs200Ok facilityId(Long facilityId) {
    this.facilityId = facilityId;
    return this;
  }

  /**
   * ID of the facility where this job is running
   * @return facilityId
   */
  @javax.annotation.Nonnull
  public Long getFacilityId() {
    return facilityId;
  }

  public void setFacilityId(Long facilityId) {
    this.facilityId = facilityId;
  }


  public GetCharactersCharacterIdIndustryJobs200Ok installerId(Integer installerId) {
    this.installerId = installerId;
    return this;
  }

  /**
   * ID of the character which installed this job
   * @return installerId
   */
  @javax.annotation.Nonnull
  public Integer getInstallerId() {
    return installerId;
  }

  public void setInstallerId(Integer installerId) {
    this.installerId = installerId;
  }


  public GetCharactersCharacterIdIndustryJobs200Ok jobId(Integer jobId) {
    this.jobId = jobId;
    return this;
  }

  /**
   * Unique job ID
   * @return jobId
   */
  @javax.annotation.Nonnull
  public Integer getJobId() {
    return jobId;
  }

  public void setJobId(Integer jobId) {
    this.jobId = jobId;
  }


  public GetCharactersCharacterIdIndustryJobs200Ok licensedRuns(Integer licensedRuns) {
    this.licensedRuns = licensedRuns;
    return this;
  }

  /**
   * Number of runs blueprint is licensed for
   * @return licensedRuns
   */
  @javax.annotation.Nullable
  public Integer getLicensedRuns() {
    return licensedRuns;
  }

  public void setLicensedRuns(Integer licensedRuns) {
    this.licensedRuns = licensedRuns;
  }


  public GetCharactersCharacterIdIndustryJobs200Ok outputLocationId(Long outputLocationId) {
    this.outputLocationId = outputLocationId;
    return this;
  }

  /**
   * Location ID of the location to which the output of the job will be delivered. Normally a station ID, but can also be a corporation facility
   * @return outputLocationId
   */
  @javax.annotation.Nonnull
  public Long getOutputLocationId() {
    return outputLocationId;
  }

  public void setOutputLocationId(Long outputLocationId) {
    this.outputLocationId = outputLocationId;
  }


  public GetCharactersCharacterIdIndustryJobs200Ok pauseDate(OffsetDateTime pauseDate) {
    this.pauseDate = pauseDate;
    return this;
  }

  /**
   * Date and time when this job was paused (i.e. time when the facility where this job was installed went offline)
   * @return pauseDate
   */
  @javax.annotation.Nullable
  public OffsetDateTime getPauseDate() {
    return pauseDate;
  }

  public void setPauseDate(OffsetDateTime pauseDate) {
    this.pauseDate = pauseDate;
  }


  public GetCharactersCharacterIdIndustryJobs200Ok probability(Float probability) {
    this.probability = probability;
    return this;
  }

  /**
   * Chance of success for invention
   * @return probability
   */
  @javax.annotation.Nullable
  public Float getProbability() {
    return probability;
  }

  public void setProbability(Float probability) {
    this.probability = probability;
  }


  public GetCharactersCharacterIdIndustryJobs200Ok productTypeId(Integer productTypeId) {
    this.productTypeId = productTypeId;
    return this;
  }

  /**
   * Type ID of product (manufactured, copied or invented)
   * @return productTypeId
   */
  @javax.annotation.Nullable
  public Integer getProductTypeId() {
    return productTypeId;
  }

  public void setProductTypeId(Integer productTypeId) {
    this.productTypeId = productTypeId;
  }


  public GetCharactersCharacterIdIndustryJobs200Ok runs(Integer runs) {
    this.runs = runs;
    return this;
  }

  /**
   * Number of runs for a manufacturing job, or number of copies to make for a blueprint copy
   * @return runs
   */
  @javax.annotation.Nonnull
  public Integer getRuns() {
    return runs;
  }

  public void setRuns(Integer runs) {
    this.runs = runs;
  }


  public GetCharactersCharacterIdIndustryJobs200Ok startDate(OffsetDateTime startDate) {
    this.startDate = startDate;
    return this;
  }

  /**
   * Date and time when this job started
   * @return startDate
   */
  @javax.annotation.Nonnull
  public OffsetDateTime getStartDate() {
    return startDate;
  }

  public void setStartDate(OffsetDateTime startDate) {
    this.startDate = startDate;
  }


  public GetCharactersCharacterIdIndustryJobs200Ok stationId(Long stationId) {
    this.stationId = stationId;
    return this;
  }

  /**
   * ID of the station where industry facility is located
   * @return stationId
   */
  @javax.annotation.Nonnull
  public Long getStationId() {
    return stationId;
  }

  public void setStationId(Long stationId) {
    this.stationId = stationId;
  }


  public GetCharactersCharacterIdIndustryJobs200Ok status(StatusEnum status) {
    this.status = status;
    return this;
  }

  /**
   * status string
   * @return status
   */
  @javax.annotation.Nonnull
  public StatusEnum getStatus() {
    return status;
  }

  public void setStatus(StatusEnum status) {
    this.status = status;
  }


  public GetCharactersCharacterIdIndustryJobs200Ok successfulRuns(Integer successfulRuns) {
    this.successfulRuns = successfulRuns;
    return this;
  }

  /**
   * Number of successful runs for this job. Equal to runs unless this is an invention job
   * @return successfulRuns
   */
  @javax.annotation.Nullable
  public Integer getSuccessfulRuns() {
    return successfulRuns;
  }

  public void setSuccessfulRuns(Integer successfulRuns) {
    this.successfulRuns = successfulRuns;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    GetCharactersCharacterIdIndustryJobs200Ok getCharactersCharacterIdIndustryJobs200Ok = (GetCharactersCharacterIdIndustryJobs200Ok) o;
    return Objects.equals(this.activityId, getCharactersCharacterIdIndustryJobs200Ok.activityId) &&
        Objects.equals(this.blueprintId, getCharactersCharacterIdIndustryJobs200Ok.blueprintId) &&
        Objects.equals(this.blueprintLocationId, getCharactersCharacterIdIndustryJobs200Ok.blueprintLocationId) &&
        Objects.equals(this.blueprintTypeId, getCharactersCharacterIdIndustryJobs200Ok.blueprintTypeId) &&
        Objects.equals(this.completedCharacterId, getCharactersCharacterIdIndustryJobs200Ok.completedCharacterId) &&
        Objects.equals(this.completedDate, getCharactersCharacterIdIndustryJobs200Ok.completedDate) &&
        Objects.equals(this.cost, getCharactersCharacterIdIndustryJobs200Ok.cost) &&
        Objects.equals(this.duration, getCharactersCharacterIdIndustryJobs200Ok.duration) &&
        Objects.equals(this.endDate, getCharactersCharacterIdIndustryJobs200Ok.endDate) &&
        Objects.equals(this.facilityId, getCharactersCharacterIdIndustryJobs200Ok.facilityId) &&
        Objects.equals(this.installerId, getCharactersCharacterIdIndustryJobs200Ok.installerId) &&
        Objects.equals(this.jobId, getCharactersCharacterIdIndustryJobs200Ok.jobId) &&
        Objects.equals(this.licensedRuns, getCharactersCharacterIdIndustryJobs200Ok.licensedRuns) &&
        Objects.equals(this.outputLocationId, getCharactersCharacterIdIndustryJobs200Ok.outputLocationId) &&
        Objects.equals(this.pauseDate, getCharactersCharacterIdIndustryJobs200Ok.pauseDate) &&
        Objects.equals(this.probability, getCharactersCharacterIdIndustryJobs200Ok.probability) &&
        Objects.equals(this.productTypeId, getCharactersCharacterIdIndustryJobs200Ok.productTypeId) &&
        Objects.equals(this.runs, getCharactersCharacterIdIndustryJobs200Ok.runs) &&
        Objects.equals(this.startDate, getCharactersCharacterIdIndustryJobs200Ok.startDate) &&
        Objects.equals(this.stationId, getCharactersCharacterIdIndustryJobs200Ok.stationId) &&
        Objects.equals(this.status, getCharactersCharacterIdIndustryJobs200Ok.status) &&
        Objects.equals(this.successfulRuns, getCharactersCharacterIdIndustryJobs200Ok.successfulRuns);
  }

  @Override
  public int hashCode() {
    return Objects.hash(activityId, blueprintId, blueprintLocationId, blueprintTypeId, completedCharacterId, completedDate, cost, duration, endDate, facilityId, installerId, jobId, licensedRuns, outputLocationId, pauseDate, probability, productTypeId, runs, startDate, stationId, status, successfulRuns);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class GetCharactersCharacterIdIndustryJobs200Ok {\n");
    sb.append("    activityId: ").append(toIndentedString(activityId)).append("\n");
    sb.append("    blueprintId: ").append(toIndentedString(blueprintId)).append("\n");
    sb.append("    blueprintLocationId: ").append(toIndentedString(blueprintLocationId)).append("\n");
    sb.append("    blueprintTypeId: ").append(toIndentedString(blueprintTypeId)).append("\n");
    sb.append("    completedCharacterId: ").append(toIndentedString(completedCharacterId)).append("\n");
    sb.append("    completedDate: ").append(toIndentedString(completedDate)).append("\n");
    sb.append("    cost: ").append(toIndentedString(cost)).append("\n");
    sb.append("    duration: ").append(toIndentedString(duration)).append("\n");
    sb.append("    endDate: ").append(toIndentedString(endDate)).append("\n");
    sb.append("    facilityId: ").append(toIndentedString(facilityId)).append("\n");
    sb.append("    installerId: ").append(toIndentedString(installerId)).append("\n");
    sb.append("    jobId: ").append(toIndentedString(jobId)).append("\n");
    sb.append("    licensedRuns: ").append(toIndentedString(licensedRuns)).append("\n");
    sb.append("    outputLocationId: ").append(toIndentedString(outputLocationId)).append("\n");
    sb.append("    pauseDate: ").append(toIndentedString(pauseDate)).append("\n");
    sb.append("    probability: ").append(toIndentedString(probability)).append("\n");
    sb.append("    productTypeId: ").append(toIndentedString(productTypeId)).append("\n");
    sb.append("    runs: ").append(toIndentedString(runs)).append("\n");
    sb.append("    startDate: ").append(toIndentedString(startDate)).append("\n");
    sb.append("    stationId: ").append(toIndentedString(stationId)).append("\n");
    sb.append("    status: ").append(toIndentedString(status)).append("\n");
    sb.append("    successfulRuns: ").append(toIndentedString(successfulRuns)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("activity_id");
    openapiFields.add("blueprint_id");
    openapiFields.add("blueprint_location_id");
    openapiFields.add("blueprint_type_id");
    openapiFields.add("completed_character_id");
    openapiFields.add("completed_date");
    openapiFields.add("cost");
    openapiFields.add("duration");
    openapiFields.add("end_date");
    openapiFields.add("facility_id");
    openapiFields.add("installer_id");
    openapiFields.add("job_id");
    openapiFields.add("licensed_runs");
    openapiFields.add("output_location_id");
    openapiFields.add("pause_date");
    openapiFields.add("probability");
    openapiFields.add("product_type_id");
    openapiFields.add("runs");
    openapiFields.add("start_date");
    openapiFields.add("station_id");
    openapiFields.add("status");
    openapiFields.add("successful_runs");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("activity_id");
    openapiRequiredFields.add("blueprint_id");
    openapiRequiredFields.add("blueprint_location_id");
    openapiRequiredFields.add("blueprint_type_id");
    openapiRequiredFields.add("duration");
    openapiRequiredFields.add("end_date");
    openapiRequiredFields.add("facility_id");
    openapiRequiredFields.add("installer_id");
    openapiRequiredFields.add("job_id");
    openapiRequiredFields.add("output_location_id");
    openapiRequiredFields.add("runs");
    openapiRequiredFields.add("start_date");
    openapiRequiredFields.add("station_id");
    openapiRequiredFields.add("status");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to GetCharactersCharacterIdIndustryJobs200Ok
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!GetCharactersCharacterIdIndustryJobs200Ok.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in GetCharactersCharacterIdIndustryJobs200Ok is not found in the empty JSON string", GetCharactersCharacterIdIndustryJobs200Ok.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!GetCharactersCharacterIdIndustryJobs200Ok.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `GetCharactersCharacterIdIndustryJobs200Ok` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : GetCharactersCharacterIdIndustryJobs200Ok.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if (!jsonObj.get("status").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `status` to be a primitive type in the JSON string but got `%s`", jsonObj.get("status").toString()));
      }
      // validate the required field `status`
      StatusEnum.validateJsonElement(jsonObj.get("status"));
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!GetCharactersCharacterIdIndustryJobs200Ok.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'GetCharactersCharacterIdIndustryJobs200Ok' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<GetCharactersCharacterIdIndustryJobs200Ok> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(GetCharactersCharacterIdIndustryJobs200Ok.class));

       return (TypeAdapter<T>) new TypeAdapter<GetCharactersCharacterIdIndustryJobs200Ok>() {
           @Override
           public void write(JsonWriter out, GetCharactersCharacterIdIndustryJobs200Ok value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public GetCharactersCharacterIdIndustryJobs200Ok read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of GetCharactersCharacterIdIndustryJobs200Ok given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of GetCharactersCharacterIdIndustryJobs200Ok
   * @throws IOException if the JSON string is invalid with respect to GetCharactersCharacterIdIndustryJobs200Ok
   */
  public static GetCharactersCharacterIdIndustryJobs200Ok fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, GetCharactersCharacterIdIndustryJobs200Ok.class);
  }

  /**
   * Convert an instance of GetCharactersCharacterIdIndustryJobs200Ok to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

