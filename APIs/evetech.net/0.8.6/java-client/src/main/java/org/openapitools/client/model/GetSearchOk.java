/*
 * EVE Swagger Interface
 * An OpenAPI for EVE Online
 *
 * The version of the OpenAPI document: 0.8.6
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * 200 ok object
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:27:54.306821-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class GetSearchOk {
  public static final String SERIALIZED_NAME_AGENT = "agent";
  @SerializedName(SERIALIZED_NAME_AGENT)
  private List<Integer> agent = new ArrayList<>();

  public static final String SERIALIZED_NAME_ALLIANCE = "alliance";
  @SerializedName(SERIALIZED_NAME_ALLIANCE)
  private List<Integer> alliance = new ArrayList<>();

  public static final String SERIALIZED_NAME_CHARACTER = "character";
  @SerializedName(SERIALIZED_NAME_CHARACTER)
  private List<Integer> character = new ArrayList<>();

  public static final String SERIALIZED_NAME_CONSTELLATION = "constellation";
  @SerializedName(SERIALIZED_NAME_CONSTELLATION)
  private List<Integer> constellation = new ArrayList<>();

  public static final String SERIALIZED_NAME_CORPORATION = "corporation";
  @SerializedName(SERIALIZED_NAME_CORPORATION)
  private List<Integer> corporation = new ArrayList<>();

  public static final String SERIALIZED_NAME_FACTION = "faction";
  @SerializedName(SERIALIZED_NAME_FACTION)
  private List<Integer> faction = new ArrayList<>();

  public static final String SERIALIZED_NAME_INVENTORY_TYPE = "inventory_type";
  @SerializedName(SERIALIZED_NAME_INVENTORY_TYPE)
  private List<Integer> inventoryType = new ArrayList<>();

  public static final String SERIALIZED_NAME_REGION = "region";
  @SerializedName(SERIALIZED_NAME_REGION)
  private List<Integer> region = new ArrayList<>();

  public static final String SERIALIZED_NAME_SOLAR_SYSTEM = "solar_system";
  @SerializedName(SERIALIZED_NAME_SOLAR_SYSTEM)
  private List<Integer> solarSystem = new ArrayList<>();

  public static final String SERIALIZED_NAME_STATION = "station";
  @SerializedName(SERIALIZED_NAME_STATION)
  private List<Integer> station = new ArrayList<>();

  public GetSearchOk() {
  }

  public GetSearchOk agent(List<Integer> agent) {
    this.agent = agent;
    return this;
  }

  public GetSearchOk addAgentItem(Integer agentItem) {
    if (this.agent == null) {
      this.agent = new ArrayList<>();
    }
    this.agent.add(agentItem);
    return this;
  }

  /**
   * agent array
   * @return agent
   */
  @javax.annotation.Nullable
  public List<Integer> getAgent() {
    return agent;
  }

  public void setAgent(List<Integer> agent) {
    this.agent = agent;
  }


  public GetSearchOk alliance(List<Integer> alliance) {
    this.alliance = alliance;
    return this;
  }

  public GetSearchOk addAllianceItem(Integer allianceItem) {
    if (this.alliance == null) {
      this.alliance = new ArrayList<>();
    }
    this.alliance.add(allianceItem);
    return this;
  }

  /**
   * alliance array
   * @return alliance
   */
  @javax.annotation.Nullable
  public List<Integer> getAlliance() {
    return alliance;
  }

  public void setAlliance(List<Integer> alliance) {
    this.alliance = alliance;
  }


  public GetSearchOk character(List<Integer> character) {
    this.character = character;
    return this;
  }

  public GetSearchOk addCharacterItem(Integer characterItem) {
    if (this.character == null) {
      this.character = new ArrayList<>();
    }
    this.character.add(characterItem);
    return this;
  }

  /**
   * character array
   * @return character
   */
  @javax.annotation.Nullable
  public List<Integer> getCharacter() {
    return character;
  }

  public void setCharacter(List<Integer> character) {
    this.character = character;
  }


  public GetSearchOk constellation(List<Integer> constellation) {
    this.constellation = constellation;
    return this;
  }

  public GetSearchOk addConstellationItem(Integer constellationItem) {
    if (this.constellation == null) {
      this.constellation = new ArrayList<>();
    }
    this.constellation.add(constellationItem);
    return this;
  }

  /**
   * constellation array
   * @return constellation
   */
  @javax.annotation.Nullable
  public List<Integer> getConstellation() {
    return constellation;
  }

  public void setConstellation(List<Integer> constellation) {
    this.constellation = constellation;
  }


  public GetSearchOk corporation(List<Integer> corporation) {
    this.corporation = corporation;
    return this;
  }

  public GetSearchOk addCorporationItem(Integer corporationItem) {
    if (this.corporation == null) {
      this.corporation = new ArrayList<>();
    }
    this.corporation.add(corporationItem);
    return this;
  }

  /**
   * corporation array
   * @return corporation
   */
  @javax.annotation.Nullable
  public List<Integer> getCorporation() {
    return corporation;
  }

  public void setCorporation(List<Integer> corporation) {
    this.corporation = corporation;
  }


  public GetSearchOk faction(List<Integer> faction) {
    this.faction = faction;
    return this;
  }

  public GetSearchOk addFactionItem(Integer factionItem) {
    if (this.faction == null) {
      this.faction = new ArrayList<>();
    }
    this.faction.add(factionItem);
    return this;
  }

  /**
   * faction array
   * @return faction
   */
  @javax.annotation.Nullable
  public List<Integer> getFaction() {
    return faction;
  }

  public void setFaction(List<Integer> faction) {
    this.faction = faction;
  }


  public GetSearchOk inventoryType(List<Integer> inventoryType) {
    this.inventoryType = inventoryType;
    return this;
  }

  public GetSearchOk addInventoryTypeItem(Integer inventoryTypeItem) {
    if (this.inventoryType == null) {
      this.inventoryType = new ArrayList<>();
    }
    this.inventoryType.add(inventoryTypeItem);
    return this;
  }

  /**
   * inventory_type array
   * @return inventoryType
   */
  @javax.annotation.Nullable
  public List<Integer> getInventoryType() {
    return inventoryType;
  }

  public void setInventoryType(List<Integer> inventoryType) {
    this.inventoryType = inventoryType;
  }


  public GetSearchOk region(List<Integer> region) {
    this.region = region;
    return this;
  }

  public GetSearchOk addRegionItem(Integer regionItem) {
    if (this.region == null) {
      this.region = new ArrayList<>();
    }
    this.region.add(regionItem);
    return this;
  }

  /**
   * region array
   * @return region
   */
  @javax.annotation.Nullable
  public List<Integer> getRegion() {
    return region;
  }

  public void setRegion(List<Integer> region) {
    this.region = region;
  }


  public GetSearchOk solarSystem(List<Integer> solarSystem) {
    this.solarSystem = solarSystem;
    return this;
  }

  public GetSearchOk addSolarSystemItem(Integer solarSystemItem) {
    if (this.solarSystem == null) {
      this.solarSystem = new ArrayList<>();
    }
    this.solarSystem.add(solarSystemItem);
    return this;
  }

  /**
   * solar_system array
   * @return solarSystem
   */
  @javax.annotation.Nullable
  public List<Integer> getSolarSystem() {
    return solarSystem;
  }

  public void setSolarSystem(List<Integer> solarSystem) {
    this.solarSystem = solarSystem;
  }


  public GetSearchOk station(List<Integer> station) {
    this.station = station;
    return this;
  }

  public GetSearchOk addStationItem(Integer stationItem) {
    if (this.station == null) {
      this.station = new ArrayList<>();
    }
    this.station.add(stationItem);
    return this;
  }

  /**
   * station array
   * @return station
   */
  @javax.annotation.Nullable
  public List<Integer> getStation() {
    return station;
  }

  public void setStation(List<Integer> station) {
    this.station = station;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    GetSearchOk getSearchOk = (GetSearchOk) o;
    return Objects.equals(this.agent, getSearchOk.agent) &&
        Objects.equals(this.alliance, getSearchOk.alliance) &&
        Objects.equals(this.character, getSearchOk.character) &&
        Objects.equals(this.constellation, getSearchOk.constellation) &&
        Objects.equals(this.corporation, getSearchOk.corporation) &&
        Objects.equals(this.faction, getSearchOk.faction) &&
        Objects.equals(this.inventoryType, getSearchOk.inventoryType) &&
        Objects.equals(this.region, getSearchOk.region) &&
        Objects.equals(this.solarSystem, getSearchOk.solarSystem) &&
        Objects.equals(this.station, getSearchOk.station);
  }

  @Override
  public int hashCode() {
    return Objects.hash(agent, alliance, character, constellation, corporation, faction, inventoryType, region, solarSystem, station);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class GetSearchOk {\n");
    sb.append("    agent: ").append(toIndentedString(agent)).append("\n");
    sb.append("    alliance: ").append(toIndentedString(alliance)).append("\n");
    sb.append("    character: ").append(toIndentedString(character)).append("\n");
    sb.append("    constellation: ").append(toIndentedString(constellation)).append("\n");
    sb.append("    corporation: ").append(toIndentedString(corporation)).append("\n");
    sb.append("    faction: ").append(toIndentedString(faction)).append("\n");
    sb.append("    inventoryType: ").append(toIndentedString(inventoryType)).append("\n");
    sb.append("    region: ").append(toIndentedString(region)).append("\n");
    sb.append("    solarSystem: ").append(toIndentedString(solarSystem)).append("\n");
    sb.append("    station: ").append(toIndentedString(station)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("agent");
    openapiFields.add("alliance");
    openapiFields.add("character");
    openapiFields.add("constellation");
    openapiFields.add("corporation");
    openapiFields.add("faction");
    openapiFields.add("inventory_type");
    openapiFields.add("region");
    openapiFields.add("solar_system");
    openapiFields.add("station");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to GetSearchOk
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!GetSearchOk.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in GetSearchOk is not found in the empty JSON string", GetSearchOk.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!GetSearchOk.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `GetSearchOk` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // ensure the optional json data is an array if present
      if (jsonObj.get("agent") != null && !jsonObj.get("agent").isJsonNull() && !jsonObj.get("agent").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `agent` to be an array in the JSON string but got `%s`", jsonObj.get("agent").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("alliance") != null && !jsonObj.get("alliance").isJsonNull() && !jsonObj.get("alliance").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `alliance` to be an array in the JSON string but got `%s`", jsonObj.get("alliance").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("character") != null && !jsonObj.get("character").isJsonNull() && !jsonObj.get("character").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `character` to be an array in the JSON string but got `%s`", jsonObj.get("character").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("constellation") != null && !jsonObj.get("constellation").isJsonNull() && !jsonObj.get("constellation").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `constellation` to be an array in the JSON string but got `%s`", jsonObj.get("constellation").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("corporation") != null && !jsonObj.get("corporation").isJsonNull() && !jsonObj.get("corporation").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `corporation` to be an array in the JSON string but got `%s`", jsonObj.get("corporation").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("faction") != null && !jsonObj.get("faction").isJsonNull() && !jsonObj.get("faction").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `faction` to be an array in the JSON string but got `%s`", jsonObj.get("faction").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("inventory_type") != null && !jsonObj.get("inventory_type").isJsonNull() && !jsonObj.get("inventory_type").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `inventory_type` to be an array in the JSON string but got `%s`", jsonObj.get("inventory_type").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("region") != null && !jsonObj.get("region").isJsonNull() && !jsonObj.get("region").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `region` to be an array in the JSON string but got `%s`", jsonObj.get("region").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("solar_system") != null && !jsonObj.get("solar_system").isJsonNull() && !jsonObj.get("solar_system").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `solar_system` to be an array in the JSON string but got `%s`", jsonObj.get("solar_system").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("station") != null && !jsonObj.get("station").isJsonNull() && !jsonObj.get("station").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `station` to be an array in the JSON string but got `%s`", jsonObj.get("station").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!GetSearchOk.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'GetSearchOk' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<GetSearchOk> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(GetSearchOk.class));

       return (TypeAdapter<T>) new TypeAdapter<GetSearchOk>() {
           @Override
           public void write(JsonWriter out, GetSearchOk value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public GetSearchOk read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of GetSearchOk given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of GetSearchOk
   * @throws IOException if the JSON string is invalid with respect to GetSearchOk
   */
  public static GetSearchOk fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, GetSearchOk.class);
  }

  /**
   * Convert an instance of GetSearchOk to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

