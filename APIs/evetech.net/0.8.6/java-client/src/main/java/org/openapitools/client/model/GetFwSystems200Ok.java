/*
 * EVE Swagger Interface
 * An OpenAPI for EVE Online
 *
 * The version of the OpenAPI document: 0.8.6
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * 200 ok object
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:27:54.306821-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class GetFwSystems200Ok {
  /**
   * contested string
   */
  @JsonAdapter(ContestedEnum.Adapter.class)
  public enum ContestedEnum {
    CAPTURED("captured"),
    
    CONTESTED("contested"),
    
    UNCONTESTED("uncontested"),
    
    VULNERABLE("vulnerable");

    private String value;

    ContestedEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static ContestedEnum fromValue(String value) {
      for (ContestedEnum b : ContestedEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<ContestedEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final ContestedEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public ContestedEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return ContestedEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      ContestedEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_CONTESTED = "contested";
  @SerializedName(SERIALIZED_NAME_CONTESTED)
  private ContestedEnum contested;

  public static final String SERIALIZED_NAME_OCCUPIER_FACTION_ID = "occupier_faction_id";
  @SerializedName(SERIALIZED_NAME_OCCUPIER_FACTION_ID)
  private Integer occupierFactionId;

  public static final String SERIALIZED_NAME_OWNER_FACTION_ID = "owner_faction_id";
  @SerializedName(SERIALIZED_NAME_OWNER_FACTION_ID)
  private Integer ownerFactionId;

  public static final String SERIALIZED_NAME_SOLAR_SYSTEM_ID = "solar_system_id";
  @SerializedName(SERIALIZED_NAME_SOLAR_SYSTEM_ID)
  private Integer solarSystemId;

  public static final String SERIALIZED_NAME_VICTORY_POINTS = "victory_points";
  @SerializedName(SERIALIZED_NAME_VICTORY_POINTS)
  private Integer victoryPoints;

  public static final String SERIALIZED_NAME_VICTORY_POINTS_THRESHOLD = "victory_points_threshold";
  @SerializedName(SERIALIZED_NAME_VICTORY_POINTS_THRESHOLD)
  private Integer victoryPointsThreshold;

  public GetFwSystems200Ok() {
  }

  public GetFwSystems200Ok contested(ContestedEnum contested) {
    this.contested = contested;
    return this;
  }

  /**
   * contested string
   * @return contested
   */
  @javax.annotation.Nonnull
  public ContestedEnum getContested() {
    return contested;
  }

  public void setContested(ContestedEnum contested) {
    this.contested = contested;
  }


  public GetFwSystems200Ok occupierFactionId(Integer occupierFactionId) {
    this.occupierFactionId = occupierFactionId;
    return this;
  }

  /**
   * occupier_faction_id integer
   * @return occupierFactionId
   */
  @javax.annotation.Nonnull
  public Integer getOccupierFactionId() {
    return occupierFactionId;
  }

  public void setOccupierFactionId(Integer occupierFactionId) {
    this.occupierFactionId = occupierFactionId;
  }


  public GetFwSystems200Ok ownerFactionId(Integer ownerFactionId) {
    this.ownerFactionId = ownerFactionId;
    return this;
  }

  /**
   * owner_faction_id integer
   * @return ownerFactionId
   */
  @javax.annotation.Nonnull
  public Integer getOwnerFactionId() {
    return ownerFactionId;
  }

  public void setOwnerFactionId(Integer ownerFactionId) {
    this.ownerFactionId = ownerFactionId;
  }


  public GetFwSystems200Ok solarSystemId(Integer solarSystemId) {
    this.solarSystemId = solarSystemId;
    return this;
  }

  /**
   * solar_system_id integer
   * @return solarSystemId
   */
  @javax.annotation.Nonnull
  public Integer getSolarSystemId() {
    return solarSystemId;
  }

  public void setSolarSystemId(Integer solarSystemId) {
    this.solarSystemId = solarSystemId;
  }


  public GetFwSystems200Ok victoryPoints(Integer victoryPoints) {
    this.victoryPoints = victoryPoints;
    return this;
  }

  /**
   * victory_points integer
   * @return victoryPoints
   */
  @javax.annotation.Nonnull
  public Integer getVictoryPoints() {
    return victoryPoints;
  }

  public void setVictoryPoints(Integer victoryPoints) {
    this.victoryPoints = victoryPoints;
  }


  public GetFwSystems200Ok victoryPointsThreshold(Integer victoryPointsThreshold) {
    this.victoryPointsThreshold = victoryPointsThreshold;
    return this;
  }

  /**
   * victory_points_threshold integer
   * @return victoryPointsThreshold
   */
  @javax.annotation.Nonnull
  public Integer getVictoryPointsThreshold() {
    return victoryPointsThreshold;
  }

  public void setVictoryPointsThreshold(Integer victoryPointsThreshold) {
    this.victoryPointsThreshold = victoryPointsThreshold;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    GetFwSystems200Ok getFwSystems200Ok = (GetFwSystems200Ok) o;
    return Objects.equals(this.contested, getFwSystems200Ok.contested) &&
        Objects.equals(this.occupierFactionId, getFwSystems200Ok.occupierFactionId) &&
        Objects.equals(this.ownerFactionId, getFwSystems200Ok.ownerFactionId) &&
        Objects.equals(this.solarSystemId, getFwSystems200Ok.solarSystemId) &&
        Objects.equals(this.victoryPoints, getFwSystems200Ok.victoryPoints) &&
        Objects.equals(this.victoryPointsThreshold, getFwSystems200Ok.victoryPointsThreshold);
  }

  @Override
  public int hashCode() {
    return Objects.hash(contested, occupierFactionId, ownerFactionId, solarSystemId, victoryPoints, victoryPointsThreshold);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class GetFwSystems200Ok {\n");
    sb.append("    contested: ").append(toIndentedString(contested)).append("\n");
    sb.append("    occupierFactionId: ").append(toIndentedString(occupierFactionId)).append("\n");
    sb.append("    ownerFactionId: ").append(toIndentedString(ownerFactionId)).append("\n");
    sb.append("    solarSystemId: ").append(toIndentedString(solarSystemId)).append("\n");
    sb.append("    victoryPoints: ").append(toIndentedString(victoryPoints)).append("\n");
    sb.append("    victoryPointsThreshold: ").append(toIndentedString(victoryPointsThreshold)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("contested");
    openapiFields.add("occupier_faction_id");
    openapiFields.add("owner_faction_id");
    openapiFields.add("solar_system_id");
    openapiFields.add("victory_points");
    openapiFields.add("victory_points_threshold");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("contested");
    openapiRequiredFields.add("occupier_faction_id");
    openapiRequiredFields.add("owner_faction_id");
    openapiRequiredFields.add("solar_system_id");
    openapiRequiredFields.add("victory_points");
    openapiRequiredFields.add("victory_points_threshold");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to GetFwSystems200Ok
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!GetFwSystems200Ok.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in GetFwSystems200Ok is not found in the empty JSON string", GetFwSystems200Ok.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!GetFwSystems200Ok.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `GetFwSystems200Ok` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : GetFwSystems200Ok.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if (!jsonObj.get("contested").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `contested` to be a primitive type in the JSON string but got `%s`", jsonObj.get("contested").toString()));
      }
      // validate the required field `contested`
      ContestedEnum.validateJsonElement(jsonObj.get("contested"));
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!GetFwSystems200Ok.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'GetFwSystems200Ok' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<GetFwSystems200Ok> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(GetFwSystems200Ok.class));

       return (TypeAdapter<T>) new TypeAdapter<GetFwSystems200Ok>() {
           @Override
           public void write(JsonWriter out, GetFwSystems200Ok value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public GetFwSystems200Ok read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of GetFwSystems200Ok given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of GetFwSystems200Ok
   * @throws IOException if the JSON string is invalid with respect to GetFwSystems200Ok
   */
  public static GetFwSystems200Ok fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, GetFwSystems200Ok.class);
  }

  /**
   * Convert an instance of GetFwSystems200Ok to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

