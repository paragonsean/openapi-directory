/*
 * EVE Swagger Interface
 * An OpenAPI for EVE Online
 *
 * The version of the OpenAPI document: 0.8.6
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.time.OffsetDateTime;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * 200 ok object
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:27:54.306821-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class GetCharactersCharacterIdSkillqueue200Ok {
  public static final String SERIALIZED_NAME_FINISH_DATE = "finish_date";
  @SerializedName(SERIALIZED_NAME_FINISH_DATE)
  private OffsetDateTime finishDate;

  public static final String SERIALIZED_NAME_FINISHED_LEVEL = "finished_level";
  @SerializedName(SERIALIZED_NAME_FINISHED_LEVEL)
  private Integer finishedLevel;

  public static final String SERIALIZED_NAME_LEVEL_END_SP = "level_end_sp";
  @SerializedName(SERIALIZED_NAME_LEVEL_END_SP)
  private Integer levelEndSp;

  public static final String SERIALIZED_NAME_LEVEL_START_SP = "level_start_sp";
  @SerializedName(SERIALIZED_NAME_LEVEL_START_SP)
  private Integer levelStartSp;

  public static final String SERIALIZED_NAME_QUEUE_POSITION = "queue_position";
  @SerializedName(SERIALIZED_NAME_QUEUE_POSITION)
  private Integer queuePosition;

  public static final String SERIALIZED_NAME_SKILL_ID = "skill_id";
  @SerializedName(SERIALIZED_NAME_SKILL_ID)
  private Integer skillId;

  public static final String SERIALIZED_NAME_START_DATE = "start_date";
  @SerializedName(SERIALIZED_NAME_START_DATE)
  private OffsetDateTime startDate;

  public static final String SERIALIZED_NAME_TRAINING_START_SP = "training_start_sp";
  @SerializedName(SERIALIZED_NAME_TRAINING_START_SP)
  private Integer trainingStartSp;

  public GetCharactersCharacterIdSkillqueue200Ok() {
  }

  public GetCharactersCharacterIdSkillqueue200Ok finishDate(OffsetDateTime finishDate) {
    this.finishDate = finishDate;
    return this;
  }

  /**
   * finish_date string
   * @return finishDate
   */
  @javax.annotation.Nullable
  public OffsetDateTime getFinishDate() {
    return finishDate;
  }

  public void setFinishDate(OffsetDateTime finishDate) {
    this.finishDate = finishDate;
  }


  public GetCharactersCharacterIdSkillqueue200Ok finishedLevel(Integer finishedLevel) {
    this.finishedLevel = finishedLevel;
    return this;
  }

  /**
   * finished_level integer
   * minimum: 0
   * maximum: 5
   * @return finishedLevel
   */
  @javax.annotation.Nonnull
  public Integer getFinishedLevel() {
    return finishedLevel;
  }

  public void setFinishedLevel(Integer finishedLevel) {
    this.finishedLevel = finishedLevel;
  }


  public GetCharactersCharacterIdSkillqueue200Ok levelEndSp(Integer levelEndSp) {
    this.levelEndSp = levelEndSp;
    return this;
  }

  /**
   * level_end_sp integer
   * @return levelEndSp
   */
  @javax.annotation.Nullable
  public Integer getLevelEndSp() {
    return levelEndSp;
  }

  public void setLevelEndSp(Integer levelEndSp) {
    this.levelEndSp = levelEndSp;
  }


  public GetCharactersCharacterIdSkillqueue200Ok levelStartSp(Integer levelStartSp) {
    this.levelStartSp = levelStartSp;
    return this;
  }

  /**
   * Amount of SP that was in the skill when it started training it&#39;s current level. Used to calculate % of current level complete.
   * @return levelStartSp
   */
  @javax.annotation.Nullable
  public Integer getLevelStartSp() {
    return levelStartSp;
  }

  public void setLevelStartSp(Integer levelStartSp) {
    this.levelStartSp = levelStartSp;
  }


  public GetCharactersCharacterIdSkillqueue200Ok queuePosition(Integer queuePosition) {
    this.queuePosition = queuePosition;
    return this;
  }

  /**
   * queue_position integer
   * @return queuePosition
   */
  @javax.annotation.Nonnull
  public Integer getQueuePosition() {
    return queuePosition;
  }

  public void setQueuePosition(Integer queuePosition) {
    this.queuePosition = queuePosition;
  }


  public GetCharactersCharacterIdSkillqueue200Ok skillId(Integer skillId) {
    this.skillId = skillId;
    return this;
  }

  /**
   * skill_id integer
   * @return skillId
   */
  @javax.annotation.Nonnull
  public Integer getSkillId() {
    return skillId;
  }

  public void setSkillId(Integer skillId) {
    this.skillId = skillId;
  }


  public GetCharactersCharacterIdSkillqueue200Ok startDate(OffsetDateTime startDate) {
    this.startDate = startDate;
    return this;
  }

  /**
   * start_date string
   * @return startDate
   */
  @javax.annotation.Nullable
  public OffsetDateTime getStartDate() {
    return startDate;
  }

  public void setStartDate(OffsetDateTime startDate) {
    this.startDate = startDate;
  }


  public GetCharactersCharacterIdSkillqueue200Ok trainingStartSp(Integer trainingStartSp) {
    this.trainingStartSp = trainingStartSp;
    return this;
  }

  /**
   * training_start_sp integer
   * @return trainingStartSp
   */
  @javax.annotation.Nullable
  public Integer getTrainingStartSp() {
    return trainingStartSp;
  }

  public void setTrainingStartSp(Integer trainingStartSp) {
    this.trainingStartSp = trainingStartSp;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    GetCharactersCharacterIdSkillqueue200Ok getCharactersCharacterIdSkillqueue200Ok = (GetCharactersCharacterIdSkillqueue200Ok) o;
    return Objects.equals(this.finishDate, getCharactersCharacterIdSkillqueue200Ok.finishDate) &&
        Objects.equals(this.finishedLevel, getCharactersCharacterIdSkillqueue200Ok.finishedLevel) &&
        Objects.equals(this.levelEndSp, getCharactersCharacterIdSkillqueue200Ok.levelEndSp) &&
        Objects.equals(this.levelStartSp, getCharactersCharacterIdSkillqueue200Ok.levelStartSp) &&
        Objects.equals(this.queuePosition, getCharactersCharacterIdSkillqueue200Ok.queuePosition) &&
        Objects.equals(this.skillId, getCharactersCharacterIdSkillqueue200Ok.skillId) &&
        Objects.equals(this.startDate, getCharactersCharacterIdSkillqueue200Ok.startDate) &&
        Objects.equals(this.trainingStartSp, getCharactersCharacterIdSkillqueue200Ok.trainingStartSp);
  }

  @Override
  public int hashCode() {
    return Objects.hash(finishDate, finishedLevel, levelEndSp, levelStartSp, queuePosition, skillId, startDate, trainingStartSp);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class GetCharactersCharacterIdSkillqueue200Ok {\n");
    sb.append("    finishDate: ").append(toIndentedString(finishDate)).append("\n");
    sb.append("    finishedLevel: ").append(toIndentedString(finishedLevel)).append("\n");
    sb.append("    levelEndSp: ").append(toIndentedString(levelEndSp)).append("\n");
    sb.append("    levelStartSp: ").append(toIndentedString(levelStartSp)).append("\n");
    sb.append("    queuePosition: ").append(toIndentedString(queuePosition)).append("\n");
    sb.append("    skillId: ").append(toIndentedString(skillId)).append("\n");
    sb.append("    startDate: ").append(toIndentedString(startDate)).append("\n");
    sb.append("    trainingStartSp: ").append(toIndentedString(trainingStartSp)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("finish_date");
    openapiFields.add("finished_level");
    openapiFields.add("level_end_sp");
    openapiFields.add("level_start_sp");
    openapiFields.add("queue_position");
    openapiFields.add("skill_id");
    openapiFields.add("start_date");
    openapiFields.add("training_start_sp");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("finished_level");
    openapiRequiredFields.add("queue_position");
    openapiRequiredFields.add("skill_id");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to GetCharactersCharacterIdSkillqueue200Ok
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!GetCharactersCharacterIdSkillqueue200Ok.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in GetCharactersCharacterIdSkillqueue200Ok is not found in the empty JSON string", GetCharactersCharacterIdSkillqueue200Ok.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!GetCharactersCharacterIdSkillqueue200Ok.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `GetCharactersCharacterIdSkillqueue200Ok` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : GetCharactersCharacterIdSkillqueue200Ok.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!GetCharactersCharacterIdSkillqueue200Ok.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'GetCharactersCharacterIdSkillqueue200Ok' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<GetCharactersCharacterIdSkillqueue200Ok> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(GetCharactersCharacterIdSkillqueue200Ok.class));

       return (TypeAdapter<T>) new TypeAdapter<GetCharactersCharacterIdSkillqueue200Ok>() {
           @Override
           public void write(JsonWriter out, GetCharactersCharacterIdSkillqueue200Ok value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public GetCharactersCharacterIdSkillqueue200Ok read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of GetCharactersCharacterIdSkillqueue200Ok given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of GetCharactersCharacterIdSkillqueue200Ok
   * @throws IOException if the JSON string is invalid with respect to GetCharactersCharacterIdSkillqueue200Ok
   */
  public static GetCharactersCharacterIdSkillqueue200Ok fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, GetCharactersCharacterIdSkillqueue200Ok.class);
  }

  /**
   * Convert an instance of GetCharactersCharacterIdSkillqueue200Ok to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

