/*
 * EVE Swagger Interface
 * An OpenAPI for EVE Online
 *
 * The version of the OpenAPI document: 0.8.6
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.time.OffsetDateTime;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * 200 ok object
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:27:54.306821-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class GetCharactersCharacterIdOrders200Ok {
  public static final String SERIALIZED_NAME_DURATION = "duration";
  @SerializedName(SERIALIZED_NAME_DURATION)
  private Integer duration;

  public static final String SERIALIZED_NAME_ESCROW = "escrow";
  @SerializedName(SERIALIZED_NAME_ESCROW)
  private Double escrow;

  public static final String SERIALIZED_NAME_IS_BUY_ORDER = "is_buy_order";
  @SerializedName(SERIALIZED_NAME_IS_BUY_ORDER)
  private Boolean isBuyOrder;

  public static final String SERIALIZED_NAME_IS_CORPORATION = "is_corporation";
  @SerializedName(SERIALIZED_NAME_IS_CORPORATION)
  private Boolean isCorporation;

  public static final String SERIALIZED_NAME_ISSUED = "issued";
  @SerializedName(SERIALIZED_NAME_ISSUED)
  private OffsetDateTime issued;

  public static final String SERIALIZED_NAME_LOCATION_ID = "location_id";
  @SerializedName(SERIALIZED_NAME_LOCATION_ID)
  private Long locationId;

  public static final String SERIALIZED_NAME_MIN_VOLUME = "min_volume";
  @SerializedName(SERIALIZED_NAME_MIN_VOLUME)
  private Integer minVolume;

  public static final String SERIALIZED_NAME_ORDER_ID = "order_id";
  @SerializedName(SERIALIZED_NAME_ORDER_ID)
  private Long orderId;

  public static final String SERIALIZED_NAME_PRICE = "price";
  @SerializedName(SERIALIZED_NAME_PRICE)
  private Double price;

  /**
   * Valid order range, numbers are ranges in jumps
   */
  @JsonAdapter(RangeEnum.Adapter.class)
  public enum RangeEnum {
    _1("1"),
    
    _10("10"),
    
    _2("2"),
    
    _20("20"),
    
    _3("3"),
    
    _30("30"),
    
    _4("4"),
    
    _40("40"),
    
    _5("5"),
    
    REGION("region"),
    
    SOLARSYSTEM("solarsystem"),
    
    STATION("station");

    private String value;

    RangeEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static RangeEnum fromValue(String value) {
      for (RangeEnum b : RangeEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<RangeEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final RangeEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public RangeEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return RangeEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      RangeEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_RANGE = "range";
  @SerializedName(SERIALIZED_NAME_RANGE)
  private RangeEnum range;

  public static final String SERIALIZED_NAME_REGION_ID = "region_id";
  @SerializedName(SERIALIZED_NAME_REGION_ID)
  private Integer regionId;

  public static final String SERIALIZED_NAME_TYPE_ID = "type_id";
  @SerializedName(SERIALIZED_NAME_TYPE_ID)
  private Integer typeId;

  public static final String SERIALIZED_NAME_VOLUME_REMAIN = "volume_remain";
  @SerializedName(SERIALIZED_NAME_VOLUME_REMAIN)
  private Integer volumeRemain;

  public static final String SERIALIZED_NAME_VOLUME_TOTAL = "volume_total";
  @SerializedName(SERIALIZED_NAME_VOLUME_TOTAL)
  private Integer volumeTotal;

  public GetCharactersCharacterIdOrders200Ok() {
  }

  public GetCharactersCharacterIdOrders200Ok duration(Integer duration) {
    this.duration = duration;
    return this;
  }

  /**
   * Number of days for which order is valid (starting from the issued date). An order expires at time issued + duration
   * @return duration
   */
  @javax.annotation.Nonnull
  public Integer getDuration() {
    return duration;
  }

  public void setDuration(Integer duration) {
    this.duration = duration;
  }


  public GetCharactersCharacterIdOrders200Ok escrow(Double escrow) {
    this.escrow = escrow;
    return this;
  }

  /**
   * For buy orders, the amount of ISK in escrow
   * @return escrow
   */
  @javax.annotation.Nullable
  public Double getEscrow() {
    return escrow;
  }

  public void setEscrow(Double escrow) {
    this.escrow = escrow;
  }


  public GetCharactersCharacterIdOrders200Ok isBuyOrder(Boolean isBuyOrder) {
    this.isBuyOrder = isBuyOrder;
    return this;
  }

  /**
   * True if the order is a bid (buy) order
   * @return isBuyOrder
   */
  @javax.annotation.Nullable
  public Boolean getIsBuyOrder() {
    return isBuyOrder;
  }

  public void setIsBuyOrder(Boolean isBuyOrder) {
    this.isBuyOrder = isBuyOrder;
  }


  public GetCharactersCharacterIdOrders200Ok isCorporation(Boolean isCorporation) {
    this.isCorporation = isCorporation;
    return this;
  }

  /**
   * Signifies whether the buy/sell order was placed on behalf of a corporation.
   * @return isCorporation
   */
  @javax.annotation.Nonnull
  public Boolean getIsCorporation() {
    return isCorporation;
  }

  public void setIsCorporation(Boolean isCorporation) {
    this.isCorporation = isCorporation;
  }


  public GetCharactersCharacterIdOrders200Ok issued(OffsetDateTime issued) {
    this.issued = issued;
    return this;
  }

  /**
   * Date and time when this order was issued
   * @return issued
   */
  @javax.annotation.Nonnull
  public OffsetDateTime getIssued() {
    return issued;
  }

  public void setIssued(OffsetDateTime issued) {
    this.issued = issued;
  }


  public GetCharactersCharacterIdOrders200Ok locationId(Long locationId) {
    this.locationId = locationId;
    return this;
  }

  /**
   * ID of the location where order was placed
   * @return locationId
   */
  @javax.annotation.Nonnull
  public Long getLocationId() {
    return locationId;
  }

  public void setLocationId(Long locationId) {
    this.locationId = locationId;
  }


  public GetCharactersCharacterIdOrders200Ok minVolume(Integer minVolume) {
    this.minVolume = minVolume;
    return this;
  }

  /**
   * For buy orders, the minimum quantity that will be accepted in a matching sell order
   * @return minVolume
   */
  @javax.annotation.Nullable
  public Integer getMinVolume() {
    return minVolume;
  }

  public void setMinVolume(Integer minVolume) {
    this.minVolume = minVolume;
  }


  public GetCharactersCharacterIdOrders200Ok orderId(Long orderId) {
    this.orderId = orderId;
    return this;
  }

  /**
   * Unique order ID
   * @return orderId
   */
  @javax.annotation.Nonnull
  public Long getOrderId() {
    return orderId;
  }

  public void setOrderId(Long orderId) {
    this.orderId = orderId;
  }


  public GetCharactersCharacterIdOrders200Ok price(Double price) {
    this.price = price;
    return this;
  }

  /**
   * Cost per unit for this order
   * @return price
   */
  @javax.annotation.Nonnull
  public Double getPrice() {
    return price;
  }

  public void setPrice(Double price) {
    this.price = price;
  }


  public GetCharactersCharacterIdOrders200Ok range(RangeEnum range) {
    this.range = range;
    return this;
  }

  /**
   * Valid order range, numbers are ranges in jumps
   * @return range
   */
  @javax.annotation.Nonnull
  public RangeEnum getRange() {
    return range;
  }

  public void setRange(RangeEnum range) {
    this.range = range;
  }


  public GetCharactersCharacterIdOrders200Ok regionId(Integer regionId) {
    this.regionId = regionId;
    return this;
  }

  /**
   * ID of the region where order was placed
   * @return regionId
   */
  @javax.annotation.Nonnull
  public Integer getRegionId() {
    return regionId;
  }

  public void setRegionId(Integer regionId) {
    this.regionId = regionId;
  }


  public GetCharactersCharacterIdOrders200Ok typeId(Integer typeId) {
    this.typeId = typeId;
    return this;
  }

  /**
   * The type ID of the item transacted in this order
   * @return typeId
   */
  @javax.annotation.Nonnull
  public Integer getTypeId() {
    return typeId;
  }

  public void setTypeId(Integer typeId) {
    this.typeId = typeId;
  }


  public GetCharactersCharacterIdOrders200Ok volumeRemain(Integer volumeRemain) {
    this.volumeRemain = volumeRemain;
    return this;
  }

  /**
   * Quantity of items still required or offered
   * @return volumeRemain
   */
  @javax.annotation.Nonnull
  public Integer getVolumeRemain() {
    return volumeRemain;
  }

  public void setVolumeRemain(Integer volumeRemain) {
    this.volumeRemain = volumeRemain;
  }


  public GetCharactersCharacterIdOrders200Ok volumeTotal(Integer volumeTotal) {
    this.volumeTotal = volumeTotal;
    return this;
  }

  /**
   * Quantity of items required or offered at time order was placed
   * @return volumeTotal
   */
  @javax.annotation.Nonnull
  public Integer getVolumeTotal() {
    return volumeTotal;
  }

  public void setVolumeTotal(Integer volumeTotal) {
    this.volumeTotal = volumeTotal;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    GetCharactersCharacterIdOrders200Ok getCharactersCharacterIdOrders200Ok = (GetCharactersCharacterIdOrders200Ok) o;
    return Objects.equals(this.duration, getCharactersCharacterIdOrders200Ok.duration) &&
        Objects.equals(this.escrow, getCharactersCharacterIdOrders200Ok.escrow) &&
        Objects.equals(this.isBuyOrder, getCharactersCharacterIdOrders200Ok.isBuyOrder) &&
        Objects.equals(this.isCorporation, getCharactersCharacterIdOrders200Ok.isCorporation) &&
        Objects.equals(this.issued, getCharactersCharacterIdOrders200Ok.issued) &&
        Objects.equals(this.locationId, getCharactersCharacterIdOrders200Ok.locationId) &&
        Objects.equals(this.minVolume, getCharactersCharacterIdOrders200Ok.minVolume) &&
        Objects.equals(this.orderId, getCharactersCharacterIdOrders200Ok.orderId) &&
        Objects.equals(this.price, getCharactersCharacterIdOrders200Ok.price) &&
        Objects.equals(this.range, getCharactersCharacterIdOrders200Ok.range) &&
        Objects.equals(this.regionId, getCharactersCharacterIdOrders200Ok.regionId) &&
        Objects.equals(this.typeId, getCharactersCharacterIdOrders200Ok.typeId) &&
        Objects.equals(this.volumeRemain, getCharactersCharacterIdOrders200Ok.volumeRemain) &&
        Objects.equals(this.volumeTotal, getCharactersCharacterIdOrders200Ok.volumeTotal);
  }

  @Override
  public int hashCode() {
    return Objects.hash(duration, escrow, isBuyOrder, isCorporation, issued, locationId, minVolume, orderId, price, range, regionId, typeId, volumeRemain, volumeTotal);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class GetCharactersCharacterIdOrders200Ok {\n");
    sb.append("    duration: ").append(toIndentedString(duration)).append("\n");
    sb.append("    escrow: ").append(toIndentedString(escrow)).append("\n");
    sb.append("    isBuyOrder: ").append(toIndentedString(isBuyOrder)).append("\n");
    sb.append("    isCorporation: ").append(toIndentedString(isCorporation)).append("\n");
    sb.append("    issued: ").append(toIndentedString(issued)).append("\n");
    sb.append("    locationId: ").append(toIndentedString(locationId)).append("\n");
    sb.append("    minVolume: ").append(toIndentedString(minVolume)).append("\n");
    sb.append("    orderId: ").append(toIndentedString(orderId)).append("\n");
    sb.append("    price: ").append(toIndentedString(price)).append("\n");
    sb.append("    range: ").append(toIndentedString(range)).append("\n");
    sb.append("    regionId: ").append(toIndentedString(regionId)).append("\n");
    sb.append("    typeId: ").append(toIndentedString(typeId)).append("\n");
    sb.append("    volumeRemain: ").append(toIndentedString(volumeRemain)).append("\n");
    sb.append("    volumeTotal: ").append(toIndentedString(volumeTotal)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("duration");
    openapiFields.add("escrow");
    openapiFields.add("is_buy_order");
    openapiFields.add("is_corporation");
    openapiFields.add("issued");
    openapiFields.add("location_id");
    openapiFields.add("min_volume");
    openapiFields.add("order_id");
    openapiFields.add("price");
    openapiFields.add("range");
    openapiFields.add("region_id");
    openapiFields.add("type_id");
    openapiFields.add("volume_remain");
    openapiFields.add("volume_total");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("duration");
    openapiRequiredFields.add("is_corporation");
    openapiRequiredFields.add("issued");
    openapiRequiredFields.add("location_id");
    openapiRequiredFields.add("order_id");
    openapiRequiredFields.add("price");
    openapiRequiredFields.add("range");
    openapiRequiredFields.add("region_id");
    openapiRequiredFields.add("type_id");
    openapiRequiredFields.add("volume_remain");
    openapiRequiredFields.add("volume_total");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to GetCharactersCharacterIdOrders200Ok
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!GetCharactersCharacterIdOrders200Ok.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in GetCharactersCharacterIdOrders200Ok is not found in the empty JSON string", GetCharactersCharacterIdOrders200Ok.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!GetCharactersCharacterIdOrders200Ok.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `GetCharactersCharacterIdOrders200Ok` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : GetCharactersCharacterIdOrders200Ok.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if (!jsonObj.get("range").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `range` to be a primitive type in the JSON string but got `%s`", jsonObj.get("range").toString()));
      }
      // validate the required field `range`
      RangeEnum.validateJsonElement(jsonObj.get("range"));
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!GetCharactersCharacterIdOrders200Ok.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'GetCharactersCharacterIdOrders200Ok' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<GetCharactersCharacterIdOrders200Ok> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(GetCharactersCharacterIdOrders200Ok.class));

       return (TypeAdapter<T>) new TypeAdapter<GetCharactersCharacterIdOrders200Ok>() {
           @Override
           public void write(JsonWriter out, GetCharactersCharacterIdOrders200Ok value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public GetCharactersCharacterIdOrders200Ok read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of GetCharactersCharacterIdOrders200Ok given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of GetCharactersCharacterIdOrders200Ok
   * @throws IOException if the JSON string is invalid with respect to GetCharactersCharacterIdOrders200Ok
   */
  public static GetCharactersCharacterIdOrders200Ok fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, GetCharactersCharacterIdOrders200Ok.class);
  }

  /**
   * Convert an instance of GetCharactersCharacterIdOrders200Ok to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

