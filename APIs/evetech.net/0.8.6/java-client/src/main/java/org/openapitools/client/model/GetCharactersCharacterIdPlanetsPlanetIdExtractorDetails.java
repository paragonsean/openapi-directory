/*
 * EVE Swagger Interface
 * An OpenAPI for EVE Online
 *
 * The version of the OpenAPI document: 0.8.6
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.GetCharactersCharacterIdPlanetsPlanetIdHead;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * extractor_details object
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:27:54.306821-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class GetCharactersCharacterIdPlanetsPlanetIdExtractorDetails {
  public static final String SERIALIZED_NAME_CYCLE_TIME = "cycle_time";
  @SerializedName(SERIALIZED_NAME_CYCLE_TIME)
  private Integer cycleTime;

  public static final String SERIALIZED_NAME_HEAD_RADIUS = "head_radius";
  @SerializedName(SERIALIZED_NAME_HEAD_RADIUS)
  private Float headRadius;

  public static final String SERIALIZED_NAME_HEADS = "heads";
  @SerializedName(SERIALIZED_NAME_HEADS)
  private List<GetCharactersCharacterIdPlanetsPlanetIdHead> heads = new ArrayList<>();

  public static final String SERIALIZED_NAME_PRODUCT_TYPE_ID = "product_type_id";
  @SerializedName(SERIALIZED_NAME_PRODUCT_TYPE_ID)
  private Integer productTypeId;

  public static final String SERIALIZED_NAME_QTY_PER_CYCLE = "qty_per_cycle";
  @SerializedName(SERIALIZED_NAME_QTY_PER_CYCLE)
  private Integer qtyPerCycle;

  public GetCharactersCharacterIdPlanetsPlanetIdExtractorDetails() {
  }

  public GetCharactersCharacterIdPlanetsPlanetIdExtractorDetails cycleTime(Integer cycleTime) {
    this.cycleTime = cycleTime;
    return this;
  }

  /**
   * in seconds
   * @return cycleTime
   */
  @javax.annotation.Nullable
  public Integer getCycleTime() {
    return cycleTime;
  }

  public void setCycleTime(Integer cycleTime) {
    this.cycleTime = cycleTime;
  }


  public GetCharactersCharacterIdPlanetsPlanetIdExtractorDetails headRadius(Float headRadius) {
    this.headRadius = headRadius;
    return this;
  }

  /**
   * head_radius number
   * @return headRadius
   */
  @javax.annotation.Nullable
  public Float getHeadRadius() {
    return headRadius;
  }

  public void setHeadRadius(Float headRadius) {
    this.headRadius = headRadius;
  }


  public GetCharactersCharacterIdPlanetsPlanetIdExtractorDetails heads(List<GetCharactersCharacterIdPlanetsPlanetIdHead> heads) {
    this.heads = heads;
    return this;
  }

  public GetCharactersCharacterIdPlanetsPlanetIdExtractorDetails addHeadsItem(GetCharactersCharacterIdPlanetsPlanetIdHead headsItem) {
    if (this.heads == null) {
      this.heads = new ArrayList<>();
    }
    this.heads.add(headsItem);
    return this;
  }

  /**
   * heads array
   * @return heads
   */
  @javax.annotation.Nonnull
  public List<GetCharactersCharacterIdPlanetsPlanetIdHead> getHeads() {
    return heads;
  }

  public void setHeads(List<GetCharactersCharacterIdPlanetsPlanetIdHead> heads) {
    this.heads = heads;
  }


  public GetCharactersCharacterIdPlanetsPlanetIdExtractorDetails productTypeId(Integer productTypeId) {
    this.productTypeId = productTypeId;
    return this;
  }

  /**
   * product_type_id integer
   * @return productTypeId
   */
  @javax.annotation.Nullable
  public Integer getProductTypeId() {
    return productTypeId;
  }

  public void setProductTypeId(Integer productTypeId) {
    this.productTypeId = productTypeId;
  }


  public GetCharactersCharacterIdPlanetsPlanetIdExtractorDetails qtyPerCycle(Integer qtyPerCycle) {
    this.qtyPerCycle = qtyPerCycle;
    return this;
  }

  /**
   * qty_per_cycle integer
   * @return qtyPerCycle
   */
  @javax.annotation.Nullable
  public Integer getQtyPerCycle() {
    return qtyPerCycle;
  }

  public void setQtyPerCycle(Integer qtyPerCycle) {
    this.qtyPerCycle = qtyPerCycle;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    GetCharactersCharacterIdPlanetsPlanetIdExtractorDetails getCharactersCharacterIdPlanetsPlanetIdExtractorDetails = (GetCharactersCharacterIdPlanetsPlanetIdExtractorDetails) o;
    return Objects.equals(this.cycleTime, getCharactersCharacterIdPlanetsPlanetIdExtractorDetails.cycleTime) &&
        Objects.equals(this.headRadius, getCharactersCharacterIdPlanetsPlanetIdExtractorDetails.headRadius) &&
        Objects.equals(this.heads, getCharactersCharacterIdPlanetsPlanetIdExtractorDetails.heads) &&
        Objects.equals(this.productTypeId, getCharactersCharacterIdPlanetsPlanetIdExtractorDetails.productTypeId) &&
        Objects.equals(this.qtyPerCycle, getCharactersCharacterIdPlanetsPlanetIdExtractorDetails.qtyPerCycle);
  }

  @Override
  public int hashCode() {
    return Objects.hash(cycleTime, headRadius, heads, productTypeId, qtyPerCycle);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class GetCharactersCharacterIdPlanetsPlanetIdExtractorDetails {\n");
    sb.append("    cycleTime: ").append(toIndentedString(cycleTime)).append("\n");
    sb.append("    headRadius: ").append(toIndentedString(headRadius)).append("\n");
    sb.append("    heads: ").append(toIndentedString(heads)).append("\n");
    sb.append("    productTypeId: ").append(toIndentedString(productTypeId)).append("\n");
    sb.append("    qtyPerCycle: ").append(toIndentedString(qtyPerCycle)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("cycle_time");
    openapiFields.add("head_radius");
    openapiFields.add("heads");
    openapiFields.add("product_type_id");
    openapiFields.add("qty_per_cycle");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("heads");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to GetCharactersCharacterIdPlanetsPlanetIdExtractorDetails
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!GetCharactersCharacterIdPlanetsPlanetIdExtractorDetails.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in GetCharactersCharacterIdPlanetsPlanetIdExtractorDetails is not found in the empty JSON string", GetCharactersCharacterIdPlanetsPlanetIdExtractorDetails.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!GetCharactersCharacterIdPlanetsPlanetIdExtractorDetails.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `GetCharactersCharacterIdPlanetsPlanetIdExtractorDetails` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : GetCharactersCharacterIdPlanetsPlanetIdExtractorDetails.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // ensure the json data is an array
      if (!jsonObj.get("heads").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `heads` to be an array in the JSON string but got `%s`", jsonObj.get("heads").toString()));
      }

      JsonArray jsonArrayheads = jsonObj.getAsJsonArray("heads");
      // validate the required field `heads` (array)
      for (int i = 0; i < jsonArrayheads.size(); i++) {
        GetCharactersCharacterIdPlanetsPlanetIdHead.validateJsonElement(jsonArrayheads.get(i));
      };
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!GetCharactersCharacterIdPlanetsPlanetIdExtractorDetails.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'GetCharactersCharacterIdPlanetsPlanetIdExtractorDetails' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<GetCharactersCharacterIdPlanetsPlanetIdExtractorDetails> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(GetCharactersCharacterIdPlanetsPlanetIdExtractorDetails.class));

       return (TypeAdapter<T>) new TypeAdapter<GetCharactersCharacterIdPlanetsPlanetIdExtractorDetails>() {
           @Override
           public void write(JsonWriter out, GetCharactersCharacterIdPlanetsPlanetIdExtractorDetails value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public GetCharactersCharacterIdPlanetsPlanetIdExtractorDetails read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of GetCharactersCharacterIdPlanetsPlanetIdExtractorDetails given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of GetCharactersCharacterIdPlanetsPlanetIdExtractorDetails
   * @throws IOException if the JSON string is invalid with respect to GetCharactersCharacterIdPlanetsPlanetIdExtractorDetails
   */
  public static GetCharactersCharacterIdPlanetsPlanetIdExtractorDetails fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, GetCharactersCharacterIdPlanetsPlanetIdExtractorDetails.class);
  }

  /**
   * Convert an instance of GetCharactersCharacterIdPlanetsPlanetIdExtractorDetails to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

