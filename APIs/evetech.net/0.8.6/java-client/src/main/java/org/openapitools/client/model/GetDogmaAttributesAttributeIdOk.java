/*
 * EVE Swagger Interface
 * An OpenAPI for EVE Online
 *
 * The version of the OpenAPI document: 0.8.6
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * 200 ok object
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:27:54.306821-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class GetDogmaAttributesAttributeIdOk {
  public static final String SERIALIZED_NAME_ATTRIBUTE_ID = "attribute_id";
  @SerializedName(SERIALIZED_NAME_ATTRIBUTE_ID)
  private Integer attributeId;

  public static final String SERIALIZED_NAME_DEFAULT_VALUE = "default_value";
  @SerializedName(SERIALIZED_NAME_DEFAULT_VALUE)
  private Float defaultValue;

  public static final String SERIALIZED_NAME_DESCRIPTION = "description";
  @SerializedName(SERIALIZED_NAME_DESCRIPTION)
  private String description;

  public static final String SERIALIZED_NAME_DISPLAY_NAME = "display_name";
  @SerializedName(SERIALIZED_NAME_DISPLAY_NAME)
  private String displayName;

  public static final String SERIALIZED_NAME_HIGH_IS_GOOD = "high_is_good";
  @SerializedName(SERIALIZED_NAME_HIGH_IS_GOOD)
  private Boolean highIsGood;

  public static final String SERIALIZED_NAME_ICON_ID = "icon_id";
  @SerializedName(SERIALIZED_NAME_ICON_ID)
  private Integer iconId;

  public static final String SERIALIZED_NAME_NAME = "name";
  @SerializedName(SERIALIZED_NAME_NAME)
  private String name;

  public static final String SERIALIZED_NAME_PUBLISHED = "published";
  @SerializedName(SERIALIZED_NAME_PUBLISHED)
  private Boolean published;

  public static final String SERIALIZED_NAME_STACKABLE = "stackable";
  @SerializedName(SERIALIZED_NAME_STACKABLE)
  private Boolean stackable;

  public static final String SERIALIZED_NAME_UNIT_ID = "unit_id";
  @SerializedName(SERIALIZED_NAME_UNIT_ID)
  private Integer unitId;

  public GetDogmaAttributesAttributeIdOk() {
  }

  public GetDogmaAttributesAttributeIdOk attributeId(Integer attributeId) {
    this.attributeId = attributeId;
    return this;
  }

  /**
   * attribute_id integer
   * @return attributeId
   */
  @javax.annotation.Nonnull
  public Integer getAttributeId() {
    return attributeId;
  }

  public void setAttributeId(Integer attributeId) {
    this.attributeId = attributeId;
  }


  public GetDogmaAttributesAttributeIdOk defaultValue(Float defaultValue) {
    this.defaultValue = defaultValue;
    return this;
  }

  /**
   * default_value number
   * @return defaultValue
   */
  @javax.annotation.Nullable
  public Float getDefaultValue() {
    return defaultValue;
  }

  public void setDefaultValue(Float defaultValue) {
    this.defaultValue = defaultValue;
  }


  public GetDogmaAttributesAttributeIdOk description(String description) {
    this.description = description;
    return this;
  }

  /**
   * description string
   * @return description
   */
  @javax.annotation.Nullable
  public String getDescription() {
    return description;
  }

  public void setDescription(String description) {
    this.description = description;
  }


  public GetDogmaAttributesAttributeIdOk displayName(String displayName) {
    this.displayName = displayName;
    return this;
  }

  /**
   * display_name string
   * @return displayName
   */
  @javax.annotation.Nullable
  public String getDisplayName() {
    return displayName;
  }

  public void setDisplayName(String displayName) {
    this.displayName = displayName;
  }


  public GetDogmaAttributesAttributeIdOk highIsGood(Boolean highIsGood) {
    this.highIsGood = highIsGood;
    return this;
  }

  /**
   * high_is_good boolean
   * @return highIsGood
   */
  @javax.annotation.Nullable
  public Boolean getHighIsGood() {
    return highIsGood;
  }

  public void setHighIsGood(Boolean highIsGood) {
    this.highIsGood = highIsGood;
  }


  public GetDogmaAttributesAttributeIdOk iconId(Integer iconId) {
    this.iconId = iconId;
    return this;
  }

  /**
   * icon_id integer
   * @return iconId
   */
  @javax.annotation.Nullable
  public Integer getIconId() {
    return iconId;
  }

  public void setIconId(Integer iconId) {
    this.iconId = iconId;
  }


  public GetDogmaAttributesAttributeIdOk name(String name) {
    this.name = name;
    return this;
  }

  /**
   * name string
   * @return name
   */
  @javax.annotation.Nullable
  public String getName() {
    return name;
  }

  public void setName(String name) {
    this.name = name;
  }


  public GetDogmaAttributesAttributeIdOk published(Boolean published) {
    this.published = published;
    return this;
  }

  /**
   * published boolean
   * @return published
   */
  @javax.annotation.Nullable
  public Boolean getPublished() {
    return published;
  }

  public void setPublished(Boolean published) {
    this.published = published;
  }


  public GetDogmaAttributesAttributeIdOk stackable(Boolean stackable) {
    this.stackable = stackable;
    return this;
  }

  /**
   * stackable boolean
   * @return stackable
   */
  @javax.annotation.Nullable
  public Boolean getStackable() {
    return stackable;
  }

  public void setStackable(Boolean stackable) {
    this.stackable = stackable;
  }


  public GetDogmaAttributesAttributeIdOk unitId(Integer unitId) {
    this.unitId = unitId;
    return this;
  }

  /**
   * unit_id integer
   * @return unitId
   */
  @javax.annotation.Nullable
  public Integer getUnitId() {
    return unitId;
  }

  public void setUnitId(Integer unitId) {
    this.unitId = unitId;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    GetDogmaAttributesAttributeIdOk getDogmaAttributesAttributeIdOk = (GetDogmaAttributesAttributeIdOk) o;
    return Objects.equals(this.attributeId, getDogmaAttributesAttributeIdOk.attributeId) &&
        Objects.equals(this.defaultValue, getDogmaAttributesAttributeIdOk.defaultValue) &&
        Objects.equals(this.description, getDogmaAttributesAttributeIdOk.description) &&
        Objects.equals(this.displayName, getDogmaAttributesAttributeIdOk.displayName) &&
        Objects.equals(this.highIsGood, getDogmaAttributesAttributeIdOk.highIsGood) &&
        Objects.equals(this.iconId, getDogmaAttributesAttributeIdOk.iconId) &&
        Objects.equals(this.name, getDogmaAttributesAttributeIdOk.name) &&
        Objects.equals(this.published, getDogmaAttributesAttributeIdOk.published) &&
        Objects.equals(this.stackable, getDogmaAttributesAttributeIdOk.stackable) &&
        Objects.equals(this.unitId, getDogmaAttributesAttributeIdOk.unitId);
  }

  @Override
  public int hashCode() {
    return Objects.hash(attributeId, defaultValue, description, displayName, highIsGood, iconId, name, published, stackable, unitId);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class GetDogmaAttributesAttributeIdOk {\n");
    sb.append("    attributeId: ").append(toIndentedString(attributeId)).append("\n");
    sb.append("    defaultValue: ").append(toIndentedString(defaultValue)).append("\n");
    sb.append("    description: ").append(toIndentedString(description)).append("\n");
    sb.append("    displayName: ").append(toIndentedString(displayName)).append("\n");
    sb.append("    highIsGood: ").append(toIndentedString(highIsGood)).append("\n");
    sb.append("    iconId: ").append(toIndentedString(iconId)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    published: ").append(toIndentedString(published)).append("\n");
    sb.append("    stackable: ").append(toIndentedString(stackable)).append("\n");
    sb.append("    unitId: ").append(toIndentedString(unitId)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("attribute_id");
    openapiFields.add("default_value");
    openapiFields.add("description");
    openapiFields.add("display_name");
    openapiFields.add("high_is_good");
    openapiFields.add("icon_id");
    openapiFields.add("name");
    openapiFields.add("published");
    openapiFields.add("stackable");
    openapiFields.add("unit_id");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("attribute_id");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to GetDogmaAttributesAttributeIdOk
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!GetDogmaAttributesAttributeIdOk.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in GetDogmaAttributesAttributeIdOk is not found in the empty JSON string", GetDogmaAttributesAttributeIdOk.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!GetDogmaAttributesAttributeIdOk.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `GetDogmaAttributesAttributeIdOk` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : GetDogmaAttributesAttributeIdOk.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("description") != null && !jsonObj.get("description").isJsonNull()) && !jsonObj.get("description").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `description` to be a primitive type in the JSON string but got `%s`", jsonObj.get("description").toString()));
      }
      if ((jsonObj.get("display_name") != null && !jsonObj.get("display_name").isJsonNull()) && !jsonObj.get("display_name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `display_name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("display_name").toString()));
      }
      if ((jsonObj.get("name") != null && !jsonObj.get("name").isJsonNull()) && !jsonObj.get("name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("name").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!GetDogmaAttributesAttributeIdOk.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'GetDogmaAttributesAttributeIdOk' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<GetDogmaAttributesAttributeIdOk> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(GetDogmaAttributesAttributeIdOk.class));

       return (TypeAdapter<T>) new TypeAdapter<GetDogmaAttributesAttributeIdOk>() {
           @Override
           public void write(JsonWriter out, GetDogmaAttributesAttributeIdOk value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public GetDogmaAttributesAttributeIdOk read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of GetDogmaAttributesAttributeIdOk given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of GetDogmaAttributesAttributeIdOk
   * @throws IOException if the JSON string is invalid with respect to GetDogmaAttributesAttributeIdOk
   */
  public static GetDogmaAttributesAttributeIdOk fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, GetDogmaAttributesAttributeIdOk.class);
  }

  /**
   * Convert an instance of GetDogmaAttributesAttributeIdOk to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

