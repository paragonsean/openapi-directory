/*
 * EVE Swagger Interface
 * An OpenAPI for EVE Online
 *
 * The version of the OpenAPI document: 0.8.6
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.time.OffsetDateTime;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * 200 ok object
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:27:54.306821-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class GetCorporationsCorporationIdRolesHistory200Ok {
  public static final String SERIALIZED_NAME_CHANGED_AT = "changed_at";
  @SerializedName(SERIALIZED_NAME_CHANGED_AT)
  private OffsetDateTime changedAt;

  public static final String SERIALIZED_NAME_CHARACTER_ID = "character_id";
  @SerializedName(SERIALIZED_NAME_CHARACTER_ID)
  private Integer characterId;

  public static final String SERIALIZED_NAME_ISSUER_ID = "issuer_id";
  @SerializedName(SERIALIZED_NAME_ISSUER_ID)
  private Integer issuerId;

  /**
   * new_role string
   */
  @JsonAdapter(NewRolesEnum.Adapter.class)
  public enum NewRolesEnum {
    ACCOUNT_TAKE_1("Account_Take_1"),
    
    ACCOUNT_TAKE_2("Account_Take_2"),
    
    ACCOUNT_TAKE_3("Account_Take_3"),
    
    ACCOUNT_TAKE_4("Account_Take_4"),
    
    ACCOUNT_TAKE_5("Account_Take_5"),
    
    ACCOUNT_TAKE_6("Account_Take_6"),
    
    ACCOUNT_TAKE_7("Account_Take_7"),
    
    ACCOUNTANT("Accountant"),
    
    AUDITOR("Auditor"),
    
    COMMUNICATIONS_OFFICER("Communications_Officer"),
    
    CONFIG_EQUIPMENT("Config_Equipment"),
    
    CONFIG_STARBASE_EQUIPMENT("Config_Starbase_Equipment"),
    
    CONTAINER_TAKE_1("Container_Take_1"),
    
    CONTAINER_TAKE_2("Container_Take_2"),
    
    CONTAINER_TAKE_3("Container_Take_3"),
    
    CONTAINER_TAKE_4("Container_Take_4"),
    
    CONTAINER_TAKE_5("Container_Take_5"),
    
    CONTAINER_TAKE_6("Container_Take_6"),
    
    CONTAINER_TAKE_7("Container_Take_7"),
    
    CONTRACT_MANAGER("Contract_Manager"),
    
    DIPLOMAT("Diplomat"),
    
    DIRECTOR("Director"),
    
    FACTORY_MANAGER("Factory_Manager"),
    
    FITTING_MANAGER("Fitting_Manager"),
    
    HANGAR_QUERY_1("Hangar_Query_1"),
    
    HANGAR_QUERY_2("Hangar_Query_2"),
    
    HANGAR_QUERY_3("Hangar_Query_3"),
    
    HANGAR_QUERY_4("Hangar_Query_4"),
    
    HANGAR_QUERY_5("Hangar_Query_5"),
    
    HANGAR_QUERY_6("Hangar_Query_6"),
    
    HANGAR_QUERY_7("Hangar_Query_7"),
    
    HANGAR_TAKE_1("Hangar_Take_1"),
    
    HANGAR_TAKE_2("Hangar_Take_2"),
    
    HANGAR_TAKE_3("Hangar_Take_3"),
    
    HANGAR_TAKE_4("Hangar_Take_4"),
    
    HANGAR_TAKE_5("Hangar_Take_5"),
    
    HANGAR_TAKE_6("Hangar_Take_6"),
    
    HANGAR_TAKE_7("Hangar_Take_7"),
    
    JUNIOR_ACCOUNTANT("Junior_Accountant"),
    
    PERSONNEL_MANAGER("Personnel_Manager"),
    
    RENT_FACTORY_FACILITY("Rent_Factory_Facility"),
    
    RENT_OFFICE("Rent_Office"),
    
    RENT_RESEARCH_FACILITY("Rent_Research_Facility"),
    
    SECURITY_OFFICER("Security_Officer"),
    
    STARBASE_DEFENSE_OPERATOR("Starbase_Defense_Operator"),
    
    STARBASE_FUEL_TECHNICIAN("Starbase_Fuel_Technician"),
    
    STATION_MANAGER("Station_Manager"),
    
    TERRESTRIAL_COMBAT_OFFICER("Terrestrial_Combat_Officer"),
    
    TERRESTRIAL_LOGISTICS_OFFICER("Terrestrial_Logistics_Officer"),
    
    TRADER("Trader");

    private String value;

    NewRolesEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static NewRolesEnum fromValue(String value) {
      for (NewRolesEnum b : NewRolesEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<NewRolesEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final NewRolesEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public NewRolesEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return NewRolesEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      NewRolesEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_NEW_ROLES = "new_roles";
  @SerializedName(SERIALIZED_NAME_NEW_ROLES)
  private List<NewRolesEnum> newRoles = new ArrayList<>();

  /**
   * old_role string
   */
  @JsonAdapter(OldRolesEnum.Adapter.class)
  public enum OldRolesEnum {
    ACCOUNT_TAKE_1("Account_Take_1"),
    
    ACCOUNT_TAKE_2("Account_Take_2"),
    
    ACCOUNT_TAKE_3("Account_Take_3"),
    
    ACCOUNT_TAKE_4("Account_Take_4"),
    
    ACCOUNT_TAKE_5("Account_Take_5"),
    
    ACCOUNT_TAKE_6("Account_Take_6"),
    
    ACCOUNT_TAKE_7("Account_Take_7"),
    
    ACCOUNTANT("Accountant"),
    
    AUDITOR("Auditor"),
    
    COMMUNICATIONS_OFFICER("Communications_Officer"),
    
    CONFIG_EQUIPMENT("Config_Equipment"),
    
    CONFIG_STARBASE_EQUIPMENT("Config_Starbase_Equipment"),
    
    CONTAINER_TAKE_1("Container_Take_1"),
    
    CONTAINER_TAKE_2("Container_Take_2"),
    
    CONTAINER_TAKE_3("Container_Take_3"),
    
    CONTAINER_TAKE_4("Container_Take_4"),
    
    CONTAINER_TAKE_5("Container_Take_5"),
    
    CONTAINER_TAKE_6("Container_Take_6"),
    
    CONTAINER_TAKE_7("Container_Take_7"),
    
    CONTRACT_MANAGER("Contract_Manager"),
    
    DIPLOMAT("Diplomat"),
    
    DIRECTOR("Director"),
    
    FACTORY_MANAGER("Factory_Manager"),
    
    FITTING_MANAGER("Fitting_Manager"),
    
    HANGAR_QUERY_1("Hangar_Query_1"),
    
    HANGAR_QUERY_2("Hangar_Query_2"),
    
    HANGAR_QUERY_3("Hangar_Query_3"),
    
    HANGAR_QUERY_4("Hangar_Query_4"),
    
    HANGAR_QUERY_5("Hangar_Query_5"),
    
    HANGAR_QUERY_6("Hangar_Query_6"),
    
    HANGAR_QUERY_7("Hangar_Query_7"),
    
    HANGAR_TAKE_1("Hangar_Take_1"),
    
    HANGAR_TAKE_2("Hangar_Take_2"),
    
    HANGAR_TAKE_3("Hangar_Take_3"),
    
    HANGAR_TAKE_4("Hangar_Take_4"),
    
    HANGAR_TAKE_5("Hangar_Take_5"),
    
    HANGAR_TAKE_6("Hangar_Take_6"),
    
    HANGAR_TAKE_7("Hangar_Take_7"),
    
    JUNIOR_ACCOUNTANT("Junior_Accountant"),
    
    PERSONNEL_MANAGER("Personnel_Manager"),
    
    RENT_FACTORY_FACILITY("Rent_Factory_Facility"),
    
    RENT_OFFICE("Rent_Office"),
    
    RENT_RESEARCH_FACILITY("Rent_Research_Facility"),
    
    SECURITY_OFFICER("Security_Officer"),
    
    STARBASE_DEFENSE_OPERATOR("Starbase_Defense_Operator"),
    
    STARBASE_FUEL_TECHNICIAN("Starbase_Fuel_Technician"),
    
    STATION_MANAGER("Station_Manager"),
    
    TERRESTRIAL_COMBAT_OFFICER("Terrestrial_Combat_Officer"),
    
    TERRESTRIAL_LOGISTICS_OFFICER("Terrestrial_Logistics_Officer"),
    
    TRADER("Trader");

    private String value;

    OldRolesEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static OldRolesEnum fromValue(String value) {
      for (OldRolesEnum b : OldRolesEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<OldRolesEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final OldRolesEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public OldRolesEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return OldRolesEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      OldRolesEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_OLD_ROLES = "old_roles";
  @SerializedName(SERIALIZED_NAME_OLD_ROLES)
  private List<OldRolesEnum> oldRoles = new ArrayList<>();

  /**
   * role_type string
   */
  @JsonAdapter(RoleTypeEnum.Adapter.class)
  public enum RoleTypeEnum {
    GRANTABLE_ROLES("grantable_roles"),
    
    GRANTABLE_ROLES_AT_BASE("grantable_roles_at_base"),
    
    GRANTABLE_ROLES_AT_HQ("grantable_roles_at_hq"),
    
    GRANTABLE_ROLES_AT_OTHER("grantable_roles_at_other"),
    
    ROLES("roles"),
    
    ROLES_AT_BASE("roles_at_base"),
    
    ROLES_AT_HQ("roles_at_hq"),
    
    ROLES_AT_OTHER("roles_at_other");

    private String value;

    RoleTypeEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static RoleTypeEnum fromValue(String value) {
      for (RoleTypeEnum b : RoleTypeEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<RoleTypeEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final RoleTypeEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public RoleTypeEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return RoleTypeEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      RoleTypeEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_ROLE_TYPE = "role_type";
  @SerializedName(SERIALIZED_NAME_ROLE_TYPE)
  private RoleTypeEnum roleType;

  public GetCorporationsCorporationIdRolesHistory200Ok() {
  }

  public GetCorporationsCorporationIdRolesHistory200Ok changedAt(OffsetDateTime changedAt) {
    this.changedAt = changedAt;
    return this;
  }

  /**
   * changed_at string
   * @return changedAt
   */
  @javax.annotation.Nonnull
  public OffsetDateTime getChangedAt() {
    return changedAt;
  }

  public void setChangedAt(OffsetDateTime changedAt) {
    this.changedAt = changedAt;
  }


  public GetCorporationsCorporationIdRolesHistory200Ok characterId(Integer characterId) {
    this.characterId = characterId;
    return this;
  }

  /**
   * The character whose roles are changed
   * @return characterId
   */
  @javax.annotation.Nonnull
  public Integer getCharacterId() {
    return characterId;
  }

  public void setCharacterId(Integer characterId) {
    this.characterId = characterId;
  }


  public GetCorporationsCorporationIdRolesHistory200Ok issuerId(Integer issuerId) {
    this.issuerId = issuerId;
    return this;
  }

  /**
   * ID of the character who issued this change
   * @return issuerId
   */
  @javax.annotation.Nonnull
  public Integer getIssuerId() {
    return issuerId;
  }

  public void setIssuerId(Integer issuerId) {
    this.issuerId = issuerId;
  }


  public GetCorporationsCorporationIdRolesHistory200Ok newRoles(List<NewRolesEnum> newRoles) {
    this.newRoles = newRoles;
    return this;
  }

  public GetCorporationsCorporationIdRolesHistory200Ok addNewRolesItem(NewRolesEnum newRolesItem) {
    if (this.newRoles == null) {
      this.newRoles = new ArrayList<>();
    }
    this.newRoles.add(newRolesItem);
    return this;
  }

  /**
   * new_roles array
   * @return newRoles
   */
  @javax.annotation.Nonnull
  public List<NewRolesEnum> getNewRoles() {
    return newRoles;
  }

  public void setNewRoles(List<NewRolesEnum> newRoles) {
    this.newRoles = newRoles;
  }


  public GetCorporationsCorporationIdRolesHistory200Ok oldRoles(List<OldRolesEnum> oldRoles) {
    this.oldRoles = oldRoles;
    return this;
  }

  public GetCorporationsCorporationIdRolesHistory200Ok addOldRolesItem(OldRolesEnum oldRolesItem) {
    if (this.oldRoles == null) {
      this.oldRoles = new ArrayList<>();
    }
    this.oldRoles.add(oldRolesItem);
    return this;
  }

  /**
   * old_roles array
   * @return oldRoles
   */
  @javax.annotation.Nonnull
  public List<OldRolesEnum> getOldRoles() {
    return oldRoles;
  }

  public void setOldRoles(List<OldRolesEnum> oldRoles) {
    this.oldRoles = oldRoles;
  }


  public GetCorporationsCorporationIdRolesHistory200Ok roleType(RoleTypeEnum roleType) {
    this.roleType = roleType;
    return this;
  }

  /**
   * role_type string
   * @return roleType
   */
  @javax.annotation.Nonnull
  public RoleTypeEnum getRoleType() {
    return roleType;
  }

  public void setRoleType(RoleTypeEnum roleType) {
    this.roleType = roleType;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    GetCorporationsCorporationIdRolesHistory200Ok getCorporationsCorporationIdRolesHistory200Ok = (GetCorporationsCorporationIdRolesHistory200Ok) o;
    return Objects.equals(this.changedAt, getCorporationsCorporationIdRolesHistory200Ok.changedAt) &&
        Objects.equals(this.characterId, getCorporationsCorporationIdRolesHistory200Ok.characterId) &&
        Objects.equals(this.issuerId, getCorporationsCorporationIdRolesHistory200Ok.issuerId) &&
        Objects.equals(this.newRoles, getCorporationsCorporationIdRolesHistory200Ok.newRoles) &&
        Objects.equals(this.oldRoles, getCorporationsCorporationIdRolesHistory200Ok.oldRoles) &&
        Objects.equals(this.roleType, getCorporationsCorporationIdRolesHistory200Ok.roleType);
  }

  @Override
  public int hashCode() {
    return Objects.hash(changedAt, characterId, issuerId, newRoles, oldRoles, roleType);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class GetCorporationsCorporationIdRolesHistory200Ok {\n");
    sb.append("    changedAt: ").append(toIndentedString(changedAt)).append("\n");
    sb.append("    characterId: ").append(toIndentedString(characterId)).append("\n");
    sb.append("    issuerId: ").append(toIndentedString(issuerId)).append("\n");
    sb.append("    newRoles: ").append(toIndentedString(newRoles)).append("\n");
    sb.append("    oldRoles: ").append(toIndentedString(oldRoles)).append("\n");
    sb.append("    roleType: ").append(toIndentedString(roleType)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("changed_at");
    openapiFields.add("character_id");
    openapiFields.add("issuer_id");
    openapiFields.add("new_roles");
    openapiFields.add("old_roles");
    openapiFields.add("role_type");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("changed_at");
    openapiRequiredFields.add("character_id");
    openapiRequiredFields.add("issuer_id");
    openapiRequiredFields.add("new_roles");
    openapiRequiredFields.add("old_roles");
    openapiRequiredFields.add("role_type");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to GetCorporationsCorporationIdRolesHistory200Ok
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!GetCorporationsCorporationIdRolesHistory200Ok.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in GetCorporationsCorporationIdRolesHistory200Ok is not found in the empty JSON string", GetCorporationsCorporationIdRolesHistory200Ok.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!GetCorporationsCorporationIdRolesHistory200Ok.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `GetCorporationsCorporationIdRolesHistory200Ok` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : GetCorporationsCorporationIdRolesHistory200Ok.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // ensure the required json array is present
      if (jsonObj.get("new_roles") == null) {
        throw new IllegalArgumentException("Expected the field `linkedContent` to be an array in the JSON string but got `null`");
      } else if (!jsonObj.get("new_roles").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `new_roles` to be an array in the JSON string but got `%s`", jsonObj.get("new_roles").toString()));
      }
      // ensure the required json array is present
      if (jsonObj.get("old_roles") == null) {
        throw new IllegalArgumentException("Expected the field `linkedContent` to be an array in the JSON string but got `null`");
      } else if (!jsonObj.get("old_roles").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `old_roles` to be an array in the JSON string but got `%s`", jsonObj.get("old_roles").toString()));
      }
      if (!jsonObj.get("role_type").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `role_type` to be a primitive type in the JSON string but got `%s`", jsonObj.get("role_type").toString()));
      }
      // validate the required field `role_type`
      RoleTypeEnum.validateJsonElement(jsonObj.get("role_type"));
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!GetCorporationsCorporationIdRolesHistory200Ok.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'GetCorporationsCorporationIdRolesHistory200Ok' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<GetCorporationsCorporationIdRolesHistory200Ok> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(GetCorporationsCorporationIdRolesHistory200Ok.class));

       return (TypeAdapter<T>) new TypeAdapter<GetCorporationsCorporationIdRolesHistory200Ok>() {
           @Override
           public void write(JsonWriter out, GetCorporationsCorporationIdRolesHistory200Ok value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public GetCorporationsCorporationIdRolesHistory200Ok read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of GetCorporationsCorporationIdRolesHistory200Ok given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of GetCorporationsCorporationIdRolesHistory200Ok
   * @throws IOException if the JSON string is invalid with respect to GetCorporationsCorporationIdRolesHistory200Ok
   */
  public static GetCorporationsCorporationIdRolesHistory200Ok fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, GetCorporationsCorporationIdRolesHistory200Ok.class);
  }

  /**
   * Convert an instance of GetCorporationsCorporationIdRolesHistory200Ok to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

