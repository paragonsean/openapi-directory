/*
 * EVE Swagger Interface
 * An OpenAPI for EVE Online
 *
 * The version of the OpenAPI document: 0.8.6
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.time.LocalDate;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * 200 ok object
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:27:54.306821-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class GetCorporationCorporationIdMiningObservers200Ok {
  public static final String SERIALIZED_NAME_LAST_UPDATED = "last_updated";
  @SerializedName(SERIALIZED_NAME_LAST_UPDATED)
  private LocalDate lastUpdated;

  public static final String SERIALIZED_NAME_OBSERVER_ID = "observer_id";
  @SerializedName(SERIALIZED_NAME_OBSERVER_ID)
  private Long observerId;

  /**
   * The category of the observing entity
   */
  @JsonAdapter(ObserverTypeEnum.Adapter.class)
  public enum ObserverTypeEnum {
    STRUCTURE("structure");

    private String value;

    ObserverTypeEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static ObserverTypeEnum fromValue(String value) {
      for (ObserverTypeEnum b : ObserverTypeEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<ObserverTypeEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final ObserverTypeEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public ObserverTypeEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return ObserverTypeEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      ObserverTypeEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_OBSERVER_TYPE = "observer_type";
  @SerializedName(SERIALIZED_NAME_OBSERVER_TYPE)
  private ObserverTypeEnum observerType;

  public GetCorporationCorporationIdMiningObservers200Ok() {
  }

  public GetCorporationCorporationIdMiningObservers200Ok lastUpdated(LocalDate lastUpdated) {
    this.lastUpdated = lastUpdated;
    return this;
  }

  /**
   * last_updated string
   * @return lastUpdated
   */
  @javax.annotation.Nonnull
  public LocalDate getLastUpdated() {
    return lastUpdated;
  }

  public void setLastUpdated(LocalDate lastUpdated) {
    this.lastUpdated = lastUpdated;
  }


  public GetCorporationCorporationIdMiningObservers200Ok observerId(Long observerId) {
    this.observerId = observerId;
    return this;
  }

  /**
   * The entity that was observing the asteroid field when it was mined. 
   * @return observerId
   */
  @javax.annotation.Nonnull
  public Long getObserverId() {
    return observerId;
  }

  public void setObserverId(Long observerId) {
    this.observerId = observerId;
  }


  public GetCorporationCorporationIdMiningObservers200Ok observerType(ObserverTypeEnum observerType) {
    this.observerType = observerType;
    return this;
  }

  /**
   * The category of the observing entity
   * @return observerType
   */
  @javax.annotation.Nonnull
  public ObserverTypeEnum getObserverType() {
    return observerType;
  }

  public void setObserverType(ObserverTypeEnum observerType) {
    this.observerType = observerType;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    GetCorporationCorporationIdMiningObservers200Ok getCorporationCorporationIdMiningObservers200Ok = (GetCorporationCorporationIdMiningObservers200Ok) o;
    return Objects.equals(this.lastUpdated, getCorporationCorporationIdMiningObservers200Ok.lastUpdated) &&
        Objects.equals(this.observerId, getCorporationCorporationIdMiningObservers200Ok.observerId) &&
        Objects.equals(this.observerType, getCorporationCorporationIdMiningObservers200Ok.observerType);
  }

  @Override
  public int hashCode() {
    return Objects.hash(lastUpdated, observerId, observerType);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class GetCorporationCorporationIdMiningObservers200Ok {\n");
    sb.append("    lastUpdated: ").append(toIndentedString(lastUpdated)).append("\n");
    sb.append("    observerId: ").append(toIndentedString(observerId)).append("\n");
    sb.append("    observerType: ").append(toIndentedString(observerType)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("last_updated");
    openapiFields.add("observer_id");
    openapiFields.add("observer_type");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("last_updated");
    openapiRequiredFields.add("observer_id");
    openapiRequiredFields.add("observer_type");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to GetCorporationCorporationIdMiningObservers200Ok
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!GetCorporationCorporationIdMiningObservers200Ok.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in GetCorporationCorporationIdMiningObservers200Ok is not found in the empty JSON string", GetCorporationCorporationIdMiningObservers200Ok.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!GetCorporationCorporationIdMiningObservers200Ok.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `GetCorporationCorporationIdMiningObservers200Ok` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : GetCorporationCorporationIdMiningObservers200Ok.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if (!jsonObj.get("observer_type").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `observer_type` to be a primitive type in the JSON string but got `%s`", jsonObj.get("observer_type").toString()));
      }
      // validate the required field `observer_type`
      ObserverTypeEnum.validateJsonElement(jsonObj.get("observer_type"));
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!GetCorporationCorporationIdMiningObservers200Ok.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'GetCorporationCorporationIdMiningObservers200Ok' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<GetCorporationCorporationIdMiningObservers200Ok> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(GetCorporationCorporationIdMiningObservers200Ok.class));

       return (TypeAdapter<T>) new TypeAdapter<GetCorporationCorporationIdMiningObservers200Ok>() {
           @Override
           public void write(JsonWriter out, GetCorporationCorporationIdMiningObservers200Ok value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public GetCorporationCorporationIdMiningObservers200Ok read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of GetCorporationCorporationIdMiningObservers200Ok given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of GetCorporationCorporationIdMiningObservers200Ok
   * @throws IOException if the JSON string is invalid with respect to GetCorporationCorporationIdMiningObservers200Ok
   */
  public static GetCorporationCorporationIdMiningObservers200Ok fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, GetCorporationCorporationIdMiningObservers200Ok.class);
  }

  /**
   * Convert an instance of GetCorporationCorporationIdMiningObservers200Ok to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

