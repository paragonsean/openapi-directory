/*
 * EVE Swagger Interface
 * An OpenAPI for EVE Online
 *
 * The version of the OpenAPI document: 0.8.6
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * 200 ok object
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:27:54.306821-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class GetCharactersCharacterIdAssets200Ok {
  public static final String SERIALIZED_NAME_IS_BLUEPRINT_COPY = "is_blueprint_copy";
  @SerializedName(SERIALIZED_NAME_IS_BLUEPRINT_COPY)
  private Boolean isBlueprintCopy;

  public static final String SERIALIZED_NAME_IS_SINGLETON = "is_singleton";
  @SerializedName(SERIALIZED_NAME_IS_SINGLETON)
  private Boolean isSingleton;

  public static final String SERIALIZED_NAME_ITEM_ID = "item_id";
  @SerializedName(SERIALIZED_NAME_ITEM_ID)
  private Long itemId;

  /**
   * location_flag string
   */
  @JsonAdapter(LocationFlagEnum.Adapter.class)
  public enum LocationFlagEnum {
    ASSET_SAFETY("AssetSafety"),
    
    AUTO_FIT("AutoFit"),
    
    BOOSTER_BAY("BoosterBay"),
    
    CARGO("Cargo"),
    
    CORPSE_BAY("CorpseBay"),
    
    DELIVERIES("Deliveries"),
    
    DRONE_BAY("DroneBay"),
    
    FIGHTER_BAY("FighterBay"),
    
    FIGHTER_TUBE0("FighterTube0"),
    
    FIGHTER_TUBE1("FighterTube1"),
    
    FIGHTER_TUBE2("FighterTube2"),
    
    FIGHTER_TUBE3("FighterTube3"),
    
    FIGHTER_TUBE4("FighterTube4"),
    
    FLEET_HANGAR("FleetHangar"),
    
    HANGAR("Hangar"),
    
    HANGAR_ALL("HangarAll"),
    
    HI_SLOT0("HiSlot0"),
    
    HI_SLOT1("HiSlot1"),
    
    HI_SLOT2("HiSlot2"),
    
    HI_SLOT3("HiSlot3"),
    
    HI_SLOT4("HiSlot4"),
    
    HI_SLOT5("HiSlot5"),
    
    HI_SLOT6("HiSlot6"),
    
    HI_SLOT7("HiSlot7"),
    
    HIDDEN_MODIFIERS("HiddenModifiers"),
    
    IMPLANT("Implant"),
    
    LO_SLOT0("LoSlot0"),
    
    LO_SLOT1("LoSlot1"),
    
    LO_SLOT2("LoSlot2"),
    
    LO_SLOT3("LoSlot3"),
    
    LO_SLOT4("LoSlot4"),
    
    LO_SLOT5("LoSlot5"),
    
    LO_SLOT6("LoSlot6"),
    
    LO_SLOT7("LoSlot7"),
    
    LOCKED("Locked"),
    
    MED_SLOT0("MedSlot0"),
    
    MED_SLOT1("MedSlot1"),
    
    MED_SLOT2("MedSlot2"),
    
    MED_SLOT3("MedSlot3"),
    
    MED_SLOT4("MedSlot4"),
    
    MED_SLOT5("MedSlot5"),
    
    MED_SLOT6("MedSlot6"),
    
    MED_SLOT7("MedSlot7"),
    
    QUAFE_BAY("QuafeBay"),
    
    RIG_SLOT0("RigSlot0"),
    
    RIG_SLOT1("RigSlot1"),
    
    RIG_SLOT2("RigSlot2"),
    
    RIG_SLOT3("RigSlot3"),
    
    RIG_SLOT4("RigSlot4"),
    
    RIG_SLOT5("RigSlot5"),
    
    RIG_SLOT6("RigSlot6"),
    
    RIG_SLOT7("RigSlot7"),
    
    SHIP_HANGAR("ShipHangar"),
    
    SKILL("Skill"),
    
    SPECIALIZED_AMMO_HOLD("SpecializedAmmoHold"),
    
    SPECIALIZED_COMMAND_CENTER_HOLD("SpecializedCommandCenterHold"),
    
    SPECIALIZED_FUEL_BAY("SpecializedFuelBay"),
    
    SPECIALIZED_GAS_HOLD("SpecializedGasHold"),
    
    SPECIALIZED_INDUSTRIAL_SHIP_HOLD("SpecializedIndustrialShipHold"),
    
    SPECIALIZED_LARGE_SHIP_HOLD("SpecializedLargeShipHold"),
    
    SPECIALIZED_MATERIAL_BAY("SpecializedMaterialBay"),
    
    SPECIALIZED_MEDIUM_SHIP_HOLD("SpecializedMediumShipHold"),
    
    SPECIALIZED_MINERAL_HOLD("SpecializedMineralHold"),
    
    SPECIALIZED_ORE_HOLD("SpecializedOreHold"),
    
    SPECIALIZED_PLANETARY_COMMODITIES_HOLD("SpecializedPlanetaryCommoditiesHold"),
    
    SPECIALIZED_SALVAGE_HOLD("SpecializedSalvageHold"),
    
    SPECIALIZED_SHIP_HOLD("SpecializedShipHold"),
    
    SPECIALIZED_SMALL_SHIP_HOLD("SpecializedSmallShipHold"),
    
    SUB_SYSTEM_BAY("SubSystemBay"),
    
    SUB_SYSTEM_SLOT0("SubSystemSlot0"),
    
    SUB_SYSTEM_SLOT1("SubSystemSlot1"),
    
    SUB_SYSTEM_SLOT2("SubSystemSlot2"),
    
    SUB_SYSTEM_SLOT3("SubSystemSlot3"),
    
    SUB_SYSTEM_SLOT4("SubSystemSlot4"),
    
    SUB_SYSTEM_SLOT5("SubSystemSlot5"),
    
    SUB_SYSTEM_SLOT6("SubSystemSlot6"),
    
    SUB_SYSTEM_SLOT7("SubSystemSlot7"),
    
    UNLOCKED("Unlocked"),
    
    WARDROBE("Wardrobe");

    private String value;

    LocationFlagEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static LocationFlagEnum fromValue(String value) {
      for (LocationFlagEnum b : LocationFlagEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<LocationFlagEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final LocationFlagEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public LocationFlagEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return LocationFlagEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      LocationFlagEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_LOCATION_FLAG = "location_flag";
  @SerializedName(SERIALIZED_NAME_LOCATION_FLAG)
  private LocationFlagEnum locationFlag;

  public static final String SERIALIZED_NAME_LOCATION_ID = "location_id";
  @SerializedName(SERIALIZED_NAME_LOCATION_ID)
  private Long locationId;

  /**
   * location_type string
   */
  @JsonAdapter(LocationTypeEnum.Adapter.class)
  public enum LocationTypeEnum {
    STATION("station"),
    
    SOLAR_SYSTEM("solar_system"),
    
    OTHER("other");

    private String value;

    LocationTypeEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static LocationTypeEnum fromValue(String value) {
      for (LocationTypeEnum b : LocationTypeEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<LocationTypeEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final LocationTypeEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public LocationTypeEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return LocationTypeEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      LocationTypeEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_LOCATION_TYPE = "location_type";
  @SerializedName(SERIALIZED_NAME_LOCATION_TYPE)
  private LocationTypeEnum locationType;

  public static final String SERIALIZED_NAME_QUANTITY = "quantity";
  @SerializedName(SERIALIZED_NAME_QUANTITY)
  private Integer quantity;

  public static final String SERIALIZED_NAME_TYPE_ID = "type_id";
  @SerializedName(SERIALIZED_NAME_TYPE_ID)
  private Integer typeId;

  public GetCharactersCharacterIdAssets200Ok() {
  }

  public GetCharactersCharacterIdAssets200Ok isBlueprintCopy(Boolean isBlueprintCopy) {
    this.isBlueprintCopy = isBlueprintCopy;
    return this;
  }

  /**
   * is_blueprint_copy boolean
   * @return isBlueprintCopy
   */
  @javax.annotation.Nullable
  public Boolean getIsBlueprintCopy() {
    return isBlueprintCopy;
  }

  public void setIsBlueprintCopy(Boolean isBlueprintCopy) {
    this.isBlueprintCopy = isBlueprintCopy;
  }


  public GetCharactersCharacterIdAssets200Ok isSingleton(Boolean isSingleton) {
    this.isSingleton = isSingleton;
    return this;
  }

  /**
   * is_singleton boolean
   * @return isSingleton
   */
  @javax.annotation.Nonnull
  public Boolean getIsSingleton() {
    return isSingleton;
  }

  public void setIsSingleton(Boolean isSingleton) {
    this.isSingleton = isSingleton;
  }


  public GetCharactersCharacterIdAssets200Ok itemId(Long itemId) {
    this.itemId = itemId;
    return this;
  }

  /**
   * item_id integer
   * @return itemId
   */
  @javax.annotation.Nonnull
  public Long getItemId() {
    return itemId;
  }

  public void setItemId(Long itemId) {
    this.itemId = itemId;
  }


  public GetCharactersCharacterIdAssets200Ok locationFlag(LocationFlagEnum locationFlag) {
    this.locationFlag = locationFlag;
    return this;
  }

  /**
   * location_flag string
   * @return locationFlag
   */
  @javax.annotation.Nonnull
  public LocationFlagEnum getLocationFlag() {
    return locationFlag;
  }

  public void setLocationFlag(LocationFlagEnum locationFlag) {
    this.locationFlag = locationFlag;
  }


  public GetCharactersCharacterIdAssets200Ok locationId(Long locationId) {
    this.locationId = locationId;
    return this;
  }

  /**
   * location_id integer
   * @return locationId
   */
  @javax.annotation.Nonnull
  public Long getLocationId() {
    return locationId;
  }

  public void setLocationId(Long locationId) {
    this.locationId = locationId;
  }


  public GetCharactersCharacterIdAssets200Ok locationType(LocationTypeEnum locationType) {
    this.locationType = locationType;
    return this;
  }

  /**
   * location_type string
   * @return locationType
   */
  @javax.annotation.Nonnull
  public LocationTypeEnum getLocationType() {
    return locationType;
  }

  public void setLocationType(LocationTypeEnum locationType) {
    this.locationType = locationType;
  }


  public GetCharactersCharacterIdAssets200Ok quantity(Integer quantity) {
    this.quantity = quantity;
    return this;
  }

  /**
   * quantity integer
   * @return quantity
   */
  @javax.annotation.Nonnull
  public Integer getQuantity() {
    return quantity;
  }

  public void setQuantity(Integer quantity) {
    this.quantity = quantity;
  }


  public GetCharactersCharacterIdAssets200Ok typeId(Integer typeId) {
    this.typeId = typeId;
    return this;
  }

  /**
   * type_id integer
   * @return typeId
   */
  @javax.annotation.Nonnull
  public Integer getTypeId() {
    return typeId;
  }

  public void setTypeId(Integer typeId) {
    this.typeId = typeId;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    GetCharactersCharacterIdAssets200Ok getCharactersCharacterIdAssets200Ok = (GetCharactersCharacterIdAssets200Ok) o;
    return Objects.equals(this.isBlueprintCopy, getCharactersCharacterIdAssets200Ok.isBlueprintCopy) &&
        Objects.equals(this.isSingleton, getCharactersCharacterIdAssets200Ok.isSingleton) &&
        Objects.equals(this.itemId, getCharactersCharacterIdAssets200Ok.itemId) &&
        Objects.equals(this.locationFlag, getCharactersCharacterIdAssets200Ok.locationFlag) &&
        Objects.equals(this.locationId, getCharactersCharacterIdAssets200Ok.locationId) &&
        Objects.equals(this.locationType, getCharactersCharacterIdAssets200Ok.locationType) &&
        Objects.equals(this.quantity, getCharactersCharacterIdAssets200Ok.quantity) &&
        Objects.equals(this.typeId, getCharactersCharacterIdAssets200Ok.typeId);
  }

  @Override
  public int hashCode() {
    return Objects.hash(isBlueprintCopy, isSingleton, itemId, locationFlag, locationId, locationType, quantity, typeId);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class GetCharactersCharacterIdAssets200Ok {\n");
    sb.append("    isBlueprintCopy: ").append(toIndentedString(isBlueprintCopy)).append("\n");
    sb.append("    isSingleton: ").append(toIndentedString(isSingleton)).append("\n");
    sb.append("    itemId: ").append(toIndentedString(itemId)).append("\n");
    sb.append("    locationFlag: ").append(toIndentedString(locationFlag)).append("\n");
    sb.append("    locationId: ").append(toIndentedString(locationId)).append("\n");
    sb.append("    locationType: ").append(toIndentedString(locationType)).append("\n");
    sb.append("    quantity: ").append(toIndentedString(quantity)).append("\n");
    sb.append("    typeId: ").append(toIndentedString(typeId)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("is_blueprint_copy");
    openapiFields.add("is_singleton");
    openapiFields.add("item_id");
    openapiFields.add("location_flag");
    openapiFields.add("location_id");
    openapiFields.add("location_type");
    openapiFields.add("quantity");
    openapiFields.add("type_id");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("is_singleton");
    openapiRequiredFields.add("item_id");
    openapiRequiredFields.add("location_flag");
    openapiRequiredFields.add("location_id");
    openapiRequiredFields.add("location_type");
    openapiRequiredFields.add("quantity");
    openapiRequiredFields.add("type_id");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to GetCharactersCharacterIdAssets200Ok
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!GetCharactersCharacterIdAssets200Ok.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in GetCharactersCharacterIdAssets200Ok is not found in the empty JSON string", GetCharactersCharacterIdAssets200Ok.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!GetCharactersCharacterIdAssets200Ok.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `GetCharactersCharacterIdAssets200Ok` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : GetCharactersCharacterIdAssets200Ok.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if (!jsonObj.get("location_flag").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `location_flag` to be a primitive type in the JSON string but got `%s`", jsonObj.get("location_flag").toString()));
      }
      // validate the required field `location_flag`
      LocationFlagEnum.validateJsonElement(jsonObj.get("location_flag"));
      if (!jsonObj.get("location_type").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `location_type` to be a primitive type in the JSON string but got `%s`", jsonObj.get("location_type").toString()));
      }
      // validate the required field `location_type`
      LocationTypeEnum.validateJsonElement(jsonObj.get("location_type"));
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!GetCharactersCharacterIdAssets200Ok.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'GetCharactersCharacterIdAssets200Ok' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<GetCharactersCharacterIdAssets200Ok> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(GetCharactersCharacterIdAssets200Ok.class));

       return (TypeAdapter<T>) new TypeAdapter<GetCharactersCharacterIdAssets200Ok>() {
           @Override
           public void write(JsonWriter out, GetCharactersCharacterIdAssets200Ok value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public GetCharactersCharacterIdAssets200Ok read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of GetCharactersCharacterIdAssets200Ok given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of GetCharactersCharacterIdAssets200Ok
   * @throws IOException if the JSON string is invalid with respect to GetCharactersCharacterIdAssets200Ok
   */
  public static GetCharactersCharacterIdAssets200Ok fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, GetCharactersCharacterIdAssets200Ok.class);
  }

  /**
   * Convert an instance of GetCharactersCharacterIdAssets200Ok to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

