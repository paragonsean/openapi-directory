/*
 * EVE Swagger Interface
 * An OpenAPI for EVE Online
 *
 * The version of the OpenAPI document: 0.8.6
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.time.OffsetDateTime;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * 200 ok object
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:27:54.306821-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class GetCorporationsCorporationIdContainersLogs200Ok {
  /**
   * action string
   */
  @JsonAdapter(ActionEnum.Adapter.class)
  public enum ActionEnum {
    ADD("add"),
    
    ASSEMBLE("assemble"),
    
    CONFIGURE("configure"),
    
    ENTER_PASSWORD("enter_password"),
    
    LOCK("lock"),
    
    MOVE("move"),
    
    REPACKAGE("repackage"),
    
    SET_NAME("set_name"),
    
    SET_PASSWORD("set_password"),
    
    UNLOCK("unlock");

    private String value;

    ActionEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static ActionEnum fromValue(String value) {
      for (ActionEnum b : ActionEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<ActionEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final ActionEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public ActionEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return ActionEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      ActionEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_ACTION = "action";
  @SerializedName(SERIALIZED_NAME_ACTION)
  private ActionEnum action;

  public static final String SERIALIZED_NAME_CHARACTER_ID = "character_id";
  @SerializedName(SERIALIZED_NAME_CHARACTER_ID)
  private Integer characterId;

  public static final String SERIALIZED_NAME_CONTAINER_ID = "container_id";
  @SerializedName(SERIALIZED_NAME_CONTAINER_ID)
  private Long containerId;

  public static final String SERIALIZED_NAME_CONTAINER_TYPE_ID = "container_type_id";
  @SerializedName(SERIALIZED_NAME_CONTAINER_TYPE_ID)
  private Integer containerTypeId;

  /**
   * location_flag string
   */
  @JsonAdapter(LocationFlagEnum.Adapter.class)
  public enum LocationFlagEnum {
    ASSET_SAFETY("AssetSafety"),
    
    AUTO_FIT("AutoFit"),
    
    BONUS("Bonus"),
    
    BOOSTER("Booster"),
    
    BOOSTER_BAY("BoosterBay"),
    
    CAPSULE("Capsule"),
    
    CARGO("Cargo"),
    
    CORP_DELIVERIES("CorpDeliveries"),
    
    CORP_SAG1("CorpSAG1"),
    
    CORP_SAG2("CorpSAG2"),
    
    CORP_SAG3("CorpSAG3"),
    
    CORP_SAG4("CorpSAG4"),
    
    CORP_SAG5("CorpSAG5"),
    
    CORP_SAG6("CorpSAG6"),
    
    CORP_SAG7("CorpSAG7"),
    
    CRATE_LOOT("CrateLoot"),
    
    DELIVERIES("Deliveries"),
    
    DRONE_BAY("DroneBay"),
    
    DUST_BATTLE("DustBattle"),
    
    DUST_DATABANK("DustDatabank"),
    
    FIGHTER_BAY("FighterBay"),
    
    FIGHTER_TUBE0("FighterTube0"),
    
    FIGHTER_TUBE1("FighterTube1"),
    
    FIGHTER_TUBE2("FighterTube2"),
    
    FIGHTER_TUBE3("FighterTube3"),
    
    FIGHTER_TUBE4("FighterTube4"),
    
    FLEET_HANGAR("FleetHangar"),
    
    HANGAR("Hangar"),
    
    HANGAR_ALL("HangarAll"),
    
    HI_SLOT0("HiSlot0"),
    
    HI_SLOT1("HiSlot1"),
    
    HI_SLOT2("HiSlot2"),
    
    HI_SLOT3("HiSlot3"),
    
    HI_SLOT4("HiSlot4"),
    
    HI_SLOT5("HiSlot5"),
    
    HI_SLOT6("HiSlot6"),
    
    HI_SLOT7("HiSlot7"),
    
    HIDDEN_MODIFIERS("HiddenModifiers"),
    
    IMPLANT("Implant"),
    
    IMPOUNDED("Impounded"),
    
    JUNKYARD_REPROCESSED("JunkyardReprocessed"),
    
    JUNKYARD_TRASHED("JunkyardTrashed"),
    
    LO_SLOT0("LoSlot0"),
    
    LO_SLOT1("LoSlot1"),
    
    LO_SLOT2("LoSlot2"),
    
    LO_SLOT3("LoSlot3"),
    
    LO_SLOT4("LoSlot4"),
    
    LO_SLOT5("LoSlot5"),
    
    LO_SLOT6("LoSlot6"),
    
    LO_SLOT7("LoSlot7"),
    
    LOCKED("Locked"),
    
    MED_SLOT0("MedSlot0"),
    
    MED_SLOT1("MedSlot1"),
    
    MED_SLOT2("MedSlot2"),
    
    MED_SLOT3("MedSlot3"),
    
    MED_SLOT4("MedSlot4"),
    
    MED_SLOT5("MedSlot5"),
    
    MED_SLOT6("MedSlot6"),
    
    MED_SLOT7("MedSlot7"),
    
    OFFICE_FOLDER("OfficeFolder"),
    
    PILOT("Pilot"),
    
    PLANET_SURFACE("PlanetSurface"),
    
    QUAFE_BAY("QuafeBay"),
    
    REWARD("Reward"),
    
    RIG_SLOT0("RigSlot0"),
    
    RIG_SLOT1("RigSlot1"),
    
    RIG_SLOT2("RigSlot2"),
    
    RIG_SLOT3("RigSlot3"),
    
    RIG_SLOT4("RigSlot4"),
    
    RIG_SLOT5("RigSlot5"),
    
    RIG_SLOT6("RigSlot6"),
    
    RIG_SLOT7("RigSlot7"),
    
    SECONDARY_STORAGE("SecondaryStorage"),
    
    SERVICE_SLOT0("ServiceSlot0"),
    
    SERVICE_SLOT1("ServiceSlot1"),
    
    SERVICE_SLOT2("ServiceSlot2"),
    
    SERVICE_SLOT3("ServiceSlot3"),
    
    SERVICE_SLOT4("ServiceSlot4"),
    
    SERVICE_SLOT5("ServiceSlot5"),
    
    SERVICE_SLOT6("ServiceSlot6"),
    
    SERVICE_SLOT7("ServiceSlot7"),
    
    SHIP_HANGAR("ShipHangar"),
    
    SHIP_OFFLINE("ShipOffline"),
    
    SKILL("Skill"),
    
    SKILL_IN_TRAINING("SkillInTraining"),
    
    SPECIALIZED_AMMO_HOLD("SpecializedAmmoHold"),
    
    SPECIALIZED_COMMAND_CENTER_HOLD("SpecializedCommandCenterHold"),
    
    SPECIALIZED_FUEL_BAY("SpecializedFuelBay"),
    
    SPECIALIZED_GAS_HOLD("SpecializedGasHold"),
    
    SPECIALIZED_INDUSTRIAL_SHIP_HOLD("SpecializedIndustrialShipHold"),
    
    SPECIALIZED_LARGE_SHIP_HOLD("SpecializedLargeShipHold"),
    
    SPECIALIZED_MATERIAL_BAY("SpecializedMaterialBay"),
    
    SPECIALIZED_MEDIUM_SHIP_HOLD("SpecializedMediumShipHold"),
    
    SPECIALIZED_MINERAL_HOLD("SpecializedMineralHold"),
    
    SPECIALIZED_ORE_HOLD("SpecializedOreHold"),
    
    SPECIALIZED_PLANETARY_COMMODITIES_HOLD("SpecializedPlanetaryCommoditiesHold"),
    
    SPECIALIZED_SALVAGE_HOLD("SpecializedSalvageHold"),
    
    SPECIALIZED_SHIP_HOLD("SpecializedShipHold"),
    
    SPECIALIZED_SMALL_SHIP_HOLD("SpecializedSmallShipHold"),
    
    STRUCTURE_ACTIVE("StructureActive"),
    
    STRUCTURE_FUEL("StructureFuel"),
    
    STRUCTURE_INACTIVE("StructureInactive"),
    
    STRUCTURE_OFFLINE("StructureOffline"),
    
    SUB_SYSTEM_BAY("SubSystemBay"),
    
    SUB_SYSTEM_SLOT0("SubSystemSlot0"),
    
    SUB_SYSTEM_SLOT1("SubSystemSlot1"),
    
    SUB_SYSTEM_SLOT2("SubSystemSlot2"),
    
    SUB_SYSTEM_SLOT3("SubSystemSlot3"),
    
    SUB_SYSTEM_SLOT4("SubSystemSlot4"),
    
    SUB_SYSTEM_SLOT5("SubSystemSlot5"),
    
    SUB_SYSTEM_SLOT6("SubSystemSlot6"),
    
    SUB_SYSTEM_SLOT7("SubSystemSlot7"),
    
    UNLOCKED("Unlocked"),
    
    WALLET("Wallet"),
    
    WARDROBE("Wardrobe");

    private String value;

    LocationFlagEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static LocationFlagEnum fromValue(String value) {
      for (LocationFlagEnum b : LocationFlagEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<LocationFlagEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final LocationFlagEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public LocationFlagEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return LocationFlagEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      LocationFlagEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_LOCATION_FLAG = "location_flag";
  @SerializedName(SERIALIZED_NAME_LOCATION_FLAG)
  private LocationFlagEnum locationFlag;

  public static final String SERIALIZED_NAME_LOCATION_ID = "location_id";
  @SerializedName(SERIALIZED_NAME_LOCATION_ID)
  private Long locationId;

  public static final String SERIALIZED_NAME_LOGGED_AT = "logged_at";
  @SerializedName(SERIALIZED_NAME_LOGGED_AT)
  private OffsetDateTime loggedAt;

  public static final String SERIALIZED_NAME_NEW_CONFIG_BITMASK = "new_config_bitmask";
  @SerializedName(SERIALIZED_NAME_NEW_CONFIG_BITMASK)
  private Integer newConfigBitmask;

  public static final String SERIALIZED_NAME_OLD_CONFIG_BITMASK = "old_config_bitmask";
  @SerializedName(SERIALIZED_NAME_OLD_CONFIG_BITMASK)
  private Integer oldConfigBitmask;

  /**
   * Type of password set if action is of type SetPassword or EnterPassword
   */
  @JsonAdapter(PasswordTypeEnum.Adapter.class)
  public enum PasswordTypeEnum {
    CONFIG("config"),
    
    GENERAL("general");

    private String value;

    PasswordTypeEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static PasswordTypeEnum fromValue(String value) {
      for (PasswordTypeEnum b : PasswordTypeEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<PasswordTypeEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final PasswordTypeEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public PasswordTypeEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return PasswordTypeEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      PasswordTypeEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_PASSWORD_TYPE = "password_type";
  @SerializedName(SERIALIZED_NAME_PASSWORD_TYPE)
  private PasswordTypeEnum passwordType;

  public static final String SERIALIZED_NAME_QUANTITY = "quantity";
  @SerializedName(SERIALIZED_NAME_QUANTITY)
  private Integer quantity;

  public static final String SERIALIZED_NAME_TYPE_ID = "type_id";
  @SerializedName(SERIALIZED_NAME_TYPE_ID)
  private Integer typeId;

  public GetCorporationsCorporationIdContainersLogs200Ok() {
  }

  public GetCorporationsCorporationIdContainersLogs200Ok action(ActionEnum action) {
    this.action = action;
    return this;
  }

  /**
   * action string
   * @return action
   */
  @javax.annotation.Nonnull
  public ActionEnum getAction() {
    return action;
  }

  public void setAction(ActionEnum action) {
    this.action = action;
  }


  public GetCorporationsCorporationIdContainersLogs200Ok characterId(Integer characterId) {
    this.characterId = characterId;
    return this;
  }

  /**
   * ID of the character who performed the action.
   * @return characterId
   */
  @javax.annotation.Nonnull
  public Integer getCharacterId() {
    return characterId;
  }

  public void setCharacterId(Integer characterId) {
    this.characterId = characterId;
  }


  public GetCorporationsCorporationIdContainersLogs200Ok containerId(Long containerId) {
    this.containerId = containerId;
    return this;
  }

  /**
   * ID of the container
   * @return containerId
   */
  @javax.annotation.Nonnull
  public Long getContainerId() {
    return containerId;
  }

  public void setContainerId(Long containerId) {
    this.containerId = containerId;
  }


  public GetCorporationsCorporationIdContainersLogs200Ok containerTypeId(Integer containerTypeId) {
    this.containerTypeId = containerTypeId;
    return this;
  }

  /**
   * Type ID of the container
   * @return containerTypeId
   */
  @javax.annotation.Nonnull
  public Integer getContainerTypeId() {
    return containerTypeId;
  }

  public void setContainerTypeId(Integer containerTypeId) {
    this.containerTypeId = containerTypeId;
  }


  public GetCorporationsCorporationIdContainersLogs200Ok locationFlag(LocationFlagEnum locationFlag) {
    this.locationFlag = locationFlag;
    return this;
  }

  /**
   * location_flag string
   * @return locationFlag
   */
  @javax.annotation.Nonnull
  public LocationFlagEnum getLocationFlag() {
    return locationFlag;
  }

  public void setLocationFlag(LocationFlagEnum locationFlag) {
    this.locationFlag = locationFlag;
  }


  public GetCorporationsCorporationIdContainersLogs200Ok locationId(Long locationId) {
    this.locationId = locationId;
    return this;
  }

  /**
   * location_id integer
   * @return locationId
   */
  @javax.annotation.Nonnull
  public Long getLocationId() {
    return locationId;
  }

  public void setLocationId(Long locationId) {
    this.locationId = locationId;
  }


  public GetCorporationsCorporationIdContainersLogs200Ok loggedAt(OffsetDateTime loggedAt) {
    this.loggedAt = loggedAt;
    return this;
  }

  /**
   * Timestamp when this log was created
   * @return loggedAt
   */
  @javax.annotation.Nonnull
  public OffsetDateTime getLoggedAt() {
    return loggedAt;
  }

  public void setLoggedAt(OffsetDateTime loggedAt) {
    this.loggedAt = loggedAt;
  }


  public GetCorporationsCorporationIdContainersLogs200Ok newConfigBitmask(Integer newConfigBitmask) {
    this.newConfigBitmask = newConfigBitmask;
    return this;
  }

  /**
   * new_config_bitmask integer
   * @return newConfigBitmask
   */
  @javax.annotation.Nullable
  public Integer getNewConfigBitmask() {
    return newConfigBitmask;
  }

  public void setNewConfigBitmask(Integer newConfigBitmask) {
    this.newConfigBitmask = newConfigBitmask;
  }


  public GetCorporationsCorporationIdContainersLogs200Ok oldConfigBitmask(Integer oldConfigBitmask) {
    this.oldConfigBitmask = oldConfigBitmask;
    return this;
  }

  /**
   * old_config_bitmask integer
   * @return oldConfigBitmask
   */
  @javax.annotation.Nullable
  public Integer getOldConfigBitmask() {
    return oldConfigBitmask;
  }

  public void setOldConfigBitmask(Integer oldConfigBitmask) {
    this.oldConfigBitmask = oldConfigBitmask;
  }


  public GetCorporationsCorporationIdContainersLogs200Ok passwordType(PasswordTypeEnum passwordType) {
    this.passwordType = passwordType;
    return this;
  }

  /**
   * Type of password set if action is of type SetPassword or EnterPassword
   * @return passwordType
   */
  @javax.annotation.Nullable
  public PasswordTypeEnum getPasswordType() {
    return passwordType;
  }

  public void setPasswordType(PasswordTypeEnum passwordType) {
    this.passwordType = passwordType;
  }


  public GetCorporationsCorporationIdContainersLogs200Ok quantity(Integer quantity) {
    this.quantity = quantity;
    return this;
  }

  /**
   * Quantity of the item being acted upon
   * @return quantity
   */
  @javax.annotation.Nullable
  public Integer getQuantity() {
    return quantity;
  }

  public void setQuantity(Integer quantity) {
    this.quantity = quantity;
  }


  public GetCorporationsCorporationIdContainersLogs200Ok typeId(Integer typeId) {
    this.typeId = typeId;
    return this;
  }

  /**
   * Type ID of the item being acted upon
   * @return typeId
   */
  @javax.annotation.Nullable
  public Integer getTypeId() {
    return typeId;
  }

  public void setTypeId(Integer typeId) {
    this.typeId = typeId;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    GetCorporationsCorporationIdContainersLogs200Ok getCorporationsCorporationIdContainersLogs200Ok = (GetCorporationsCorporationIdContainersLogs200Ok) o;
    return Objects.equals(this.action, getCorporationsCorporationIdContainersLogs200Ok.action) &&
        Objects.equals(this.characterId, getCorporationsCorporationIdContainersLogs200Ok.characterId) &&
        Objects.equals(this.containerId, getCorporationsCorporationIdContainersLogs200Ok.containerId) &&
        Objects.equals(this.containerTypeId, getCorporationsCorporationIdContainersLogs200Ok.containerTypeId) &&
        Objects.equals(this.locationFlag, getCorporationsCorporationIdContainersLogs200Ok.locationFlag) &&
        Objects.equals(this.locationId, getCorporationsCorporationIdContainersLogs200Ok.locationId) &&
        Objects.equals(this.loggedAt, getCorporationsCorporationIdContainersLogs200Ok.loggedAt) &&
        Objects.equals(this.newConfigBitmask, getCorporationsCorporationIdContainersLogs200Ok.newConfigBitmask) &&
        Objects.equals(this.oldConfigBitmask, getCorporationsCorporationIdContainersLogs200Ok.oldConfigBitmask) &&
        Objects.equals(this.passwordType, getCorporationsCorporationIdContainersLogs200Ok.passwordType) &&
        Objects.equals(this.quantity, getCorporationsCorporationIdContainersLogs200Ok.quantity) &&
        Objects.equals(this.typeId, getCorporationsCorporationIdContainersLogs200Ok.typeId);
  }

  @Override
  public int hashCode() {
    return Objects.hash(action, characterId, containerId, containerTypeId, locationFlag, locationId, loggedAt, newConfigBitmask, oldConfigBitmask, passwordType, quantity, typeId);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class GetCorporationsCorporationIdContainersLogs200Ok {\n");
    sb.append("    action: ").append(toIndentedString(action)).append("\n");
    sb.append("    characterId: ").append(toIndentedString(characterId)).append("\n");
    sb.append("    containerId: ").append(toIndentedString(containerId)).append("\n");
    sb.append("    containerTypeId: ").append(toIndentedString(containerTypeId)).append("\n");
    sb.append("    locationFlag: ").append(toIndentedString(locationFlag)).append("\n");
    sb.append("    locationId: ").append(toIndentedString(locationId)).append("\n");
    sb.append("    loggedAt: ").append(toIndentedString(loggedAt)).append("\n");
    sb.append("    newConfigBitmask: ").append(toIndentedString(newConfigBitmask)).append("\n");
    sb.append("    oldConfigBitmask: ").append(toIndentedString(oldConfigBitmask)).append("\n");
    sb.append("    passwordType: ").append(toIndentedString(passwordType)).append("\n");
    sb.append("    quantity: ").append(toIndentedString(quantity)).append("\n");
    sb.append("    typeId: ").append(toIndentedString(typeId)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("action");
    openapiFields.add("character_id");
    openapiFields.add("container_id");
    openapiFields.add("container_type_id");
    openapiFields.add("location_flag");
    openapiFields.add("location_id");
    openapiFields.add("logged_at");
    openapiFields.add("new_config_bitmask");
    openapiFields.add("old_config_bitmask");
    openapiFields.add("password_type");
    openapiFields.add("quantity");
    openapiFields.add("type_id");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("action");
    openapiRequiredFields.add("character_id");
    openapiRequiredFields.add("container_id");
    openapiRequiredFields.add("container_type_id");
    openapiRequiredFields.add("location_flag");
    openapiRequiredFields.add("location_id");
    openapiRequiredFields.add("logged_at");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to GetCorporationsCorporationIdContainersLogs200Ok
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!GetCorporationsCorporationIdContainersLogs200Ok.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in GetCorporationsCorporationIdContainersLogs200Ok is not found in the empty JSON string", GetCorporationsCorporationIdContainersLogs200Ok.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!GetCorporationsCorporationIdContainersLogs200Ok.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `GetCorporationsCorporationIdContainersLogs200Ok` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : GetCorporationsCorporationIdContainersLogs200Ok.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if (!jsonObj.get("action").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `action` to be a primitive type in the JSON string but got `%s`", jsonObj.get("action").toString()));
      }
      // validate the required field `action`
      ActionEnum.validateJsonElement(jsonObj.get("action"));
      if (!jsonObj.get("location_flag").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `location_flag` to be a primitive type in the JSON string but got `%s`", jsonObj.get("location_flag").toString()));
      }
      // validate the required field `location_flag`
      LocationFlagEnum.validateJsonElement(jsonObj.get("location_flag"));
      if ((jsonObj.get("password_type") != null && !jsonObj.get("password_type").isJsonNull()) && !jsonObj.get("password_type").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `password_type` to be a primitive type in the JSON string but got `%s`", jsonObj.get("password_type").toString()));
      }
      // validate the optional field `password_type`
      if (jsonObj.get("password_type") != null && !jsonObj.get("password_type").isJsonNull()) {
        PasswordTypeEnum.validateJsonElement(jsonObj.get("password_type"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!GetCorporationsCorporationIdContainersLogs200Ok.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'GetCorporationsCorporationIdContainersLogs200Ok' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<GetCorporationsCorporationIdContainersLogs200Ok> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(GetCorporationsCorporationIdContainersLogs200Ok.class));

       return (TypeAdapter<T>) new TypeAdapter<GetCorporationsCorporationIdContainersLogs200Ok>() {
           @Override
           public void write(JsonWriter out, GetCorporationsCorporationIdContainersLogs200Ok value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public GetCorporationsCorporationIdContainersLogs200Ok read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of GetCorporationsCorporationIdContainersLogs200Ok given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of GetCorporationsCorporationIdContainersLogs200Ok
   * @throws IOException if the JSON string is invalid with respect to GetCorporationsCorporationIdContainersLogs200Ok
   */
  public static GetCorporationsCorporationIdContainersLogs200Ok fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, GetCorporationsCorporationIdContainersLogs200Ok.class);
  }

  /**
   * Convert an instance of GetCorporationsCorporationIdContainersLogs200Ok to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

