/*
 * EVE Swagger Interface
 * An OpenAPI for EVE Online
 *
 * The version of the OpenAPI document: 0.8.6
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.time.OffsetDateTime;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * 200 ok object
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:27:54.306821-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class GetCharactersCharacterIdNotificationsContacts200Ok {
  public static final String SERIALIZED_NAME_MESSAGE = "message";
  @SerializedName(SERIALIZED_NAME_MESSAGE)
  private String message;

  public static final String SERIALIZED_NAME_NOTIFICATION_ID = "notification_id";
  @SerializedName(SERIALIZED_NAME_NOTIFICATION_ID)
  private Integer notificationId;

  public static final String SERIALIZED_NAME_SEND_DATE = "send_date";
  @SerializedName(SERIALIZED_NAME_SEND_DATE)
  private OffsetDateTime sendDate;

  public static final String SERIALIZED_NAME_SENDER_CHARACTER_ID = "sender_character_id";
  @SerializedName(SERIALIZED_NAME_SENDER_CHARACTER_ID)
  private Integer senderCharacterId;

  public static final String SERIALIZED_NAME_STANDING_LEVEL = "standing_level";
  @SerializedName(SERIALIZED_NAME_STANDING_LEVEL)
  private Float standingLevel;

  public GetCharactersCharacterIdNotificationsContacts200Ok() {
  }

  public GetCharactersCharacterIdNotificationsContacts200Ok message(String message) {
    this.message = message;
    return this;
  }

  /**
   * message string
   * @return message
   */
  @javax.annotation.Nonnull
  public String getMessage() {
    return message;
  }

  public void setMessage(String message) {
    this.message = message;
  }


  public GetCharactersCharacterIdNotificationsContacts200Ok notificationId(Integer notificationId) {
    this.notificationId = notificationId;
    return this;
  }

  /**
   * notification_id integer
   * @return notificationId
   */
  @javax.annotation.Nonnull
  public Integer getNotificationId() {
    return notificationId;
  }

  public void setNotificationId(Integer notificationId) {
    this.notificationId = notificationId;
  }


  public GetCharactersCharacterIdNotificationsContacts200Ok sendDate(OffsetDateTime sendDate) {
    this.sendDate = sendDate;
    return this;
  }

  /**
   * send_date string
   * @return sendDate
   */
  @javax.annotation.Nonnull
  public OffsetDateTime getSendDate() {
    return sendDate;
  }

  public void setSendDate(OffsetDateTime sendDate) {
    this.sendDate = sendDate;
  }


  public GetCharactersCharacterIdNotificationsContacts200Ok senderCharacterId(Integer senderCharacterId) {
    this.senderCharacterId = senderCharacterId;
    return this;
  }

  /**
   * sender_character_id integer
   * @return senderCharacterId
   */
  @javax.annotation.Nonnull
  public Integer getSenderCharacterId() {
    return senderCharacterId;
  }

  public void setSenderCharacterId(Integer senderCharacterId) {
    this.senderCharacterId = senderCharacterId;
  }


  public GetCharactersCharacterIdNotificationsContacts200Ok standingLevel(Float standingLevel) {
    this.standingLevel = standingLevel;
    return this;
  }

  /**
   * A number representing the standing level the receiver has been added at by the sender. The standing levels are as follows: -10 -&gt; Terrible | -5 -&gt; Bad |  0 -&gt; Neutral |  5 -&gt; Good |  10 -&gt; Excellent
   * @return standingLevel
   */
  @javax.annotation.Nonnull
  public Float getStandingLevel() {
    return standingLevel;
  }

  public void setStandingLevel(Float standingLevel) {
    this.standingLevel = standingLevel;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    GetCharactersCharacterIdNotificationsContacts200Ok getCharactersCharacterIdNotificationsContacts200Ok = (GetCharactersCharacterIdNotificationsContacts200Ok) o;
    return Objects.equals(this.message, getCharactersCharacterIdNotificationsContacts200Ok.message) &&
        Objects.equals(this.notificationId, getCharactersCharacterIdNotificationsContacts200Ok.notificationId) &&
        Objects.equals(this.sendDate, getCharactersCharacterIdNotificationsContacts200Ok.sendDate) &&
        Objects.equals(this.senderCharacterId, getCharactersCharacterIdNotificationsContacts200Ok.senderCharacterId) &&
        Objects.equals(this.standingLevel, getCharactersCharacterIdNotificationsContacts200Ok.standingLevel);
  }

  @Override
  public int hashCode() {
    return Objects.hash(message, notificationId, sendDate, senderCharacterId, standingLevel);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class GetCharactersCharacterIdNotificationsContacts200Ok {\n");
    sb.append("    message: ").append(toIndentedString(message)).append("\n");
    sb.append("    notificationId: ").append(toIndentedString(notificationId)).append("\n");
    sb.append("    sendDate: ").append(toIndentedString(sendDate)).append("\n");
    sb.append("    senderCharacterId: ").append(toIndentedString(senderCharacterId)).append("\n");
    sb.append("    standingLevel: ").append(toIndentedString(standingLevel)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("message");
    openapiFields.add("notification_id");
    openapiFields.add("send_date");
    openapiFields.add("sender_character_id");
    openapiFields.add("standing_level");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("message");
    openapiRequiredFields.add("notification_id");
    openapiRequiredFields.add("send_date");
    openapiRequiredFields.add("sender_character_id");
    openapiRequiredFields.add("standing_level");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to GetCharactersCharacterIdNotificationsContacts200Ok
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!GetCharactersCharacterIdNotificationsContacts200Ok.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in GetCharactersCharacterIdNotificationsContacts200Ok is not found in the empty JSON string", GetCharactersCharacterIdNotificationsContacts200Ok.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!GetCharactersCharacterIdNotificationsContacts200Ok.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `GetCharactersCharacterIdNotificationsContacts200Ok` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : GetCharactersCharacterIdNotificationsContacts200Ok.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if (!jsonObj.get("message").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `message` to be a primitive type in the JSON string but got `%s`", jsonObj.get("message").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!GetCharactersCharacterIdNotificationsContacts200Ok.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'GetCharactersCharacterIdNotificationsContacts200Ok' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<GetCharactersCharacterIdNotificationsContacts200Ok> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(GetCharactersCharacterIdNotificationsContacts200Ok.class));

       return (TypeAdapter<T>) new TypeAdapter<GetCharactersCharacterIdNotificationsContacts200Ok>() {
           @Override
           public void write(JsonWriter out, GetCharactersCharacterIdNotificationsContacts200Ok value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public GetCharactersCharacterIdNotificationsContacts200Ok read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of GetCharactersCharacterIdNotificationsContacts200Ok given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of GetCharactersCharacterIdNotificationsContacts200Ok
   * @throws IOException if the JSON string is invalid with respect to GetCharactersCharacterIdNotificationsContacts200Ok
   */
  public static GetCharactersCharacterIdNotificationsContacts200Ok fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, GetCharactersCharacterIdNotificationsContacts200Ok.class);
  }

  /**
   * Convert an instance of GetCharactersCharacterIdNotificationsContacts200Ok to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

