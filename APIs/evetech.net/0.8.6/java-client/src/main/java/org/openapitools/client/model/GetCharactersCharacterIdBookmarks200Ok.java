/*
 * EVE Swagger Interface
 * An OpenAPI for EVE Online
 *
 * The version of the OpenAPI document: 0.8.6
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.time.OffsetDateTime;
import java.util.Arrays;
import org.openapitools.client.model.GetCharactersCharacterIdBookmarksCoordinates;
import org.openapitools.client.model.GetCharactersCharacterIdBookmarksItem;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * 200 ok object
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:27:54.306821-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class GetCharactersCharacterIdBookmarks200Ok {
  public static final String SERIALIZED_NAME_BOOKMARK_ID = "bookmark_id";
  @SerializedName(SERIALIZED_NAME_BOOKMARK_ID)
  private Integer bookmarkId;

  public static final String SERIALIZED_NAME_COORDINATES = "coordinates";
  @SerializedName(SERIALIZED_NAME_COORDINATES)
  private GetCharactersCharacterIdBookmarksCoordinates coordinates;

  public static final String SERIALIZED_NAME_CREATED = "created";
  @SerializedName(SERIALIZED_NAME_CREATED)
  private OffsetDateTime created;

  public static final String SERIALIZED_NAME_CREATOR_ID = "creator_id";
  @SerializedName(SERIALIZED_NAME_CREATOR_ID)
  private Integer creatorId;

  public static final String SERIALIZED_NAME_FOLDER_ID = "folder_id";
  @SerializedName(SERIALIZED_NAME_FOLDER_ID)
  private Integer folderId;

  public static final String SERIALIZED_NAME_ITEM = "item";
  @SerializedName(SERIALIZED_NAME_ITEM)
  private GetCharactersCharacterIdBookmarksItem item;

  public static final String SERIALIZED_NAME_LABEL = "label";
  @SerializedName(SERIALIZED_NAME_LABEL)
  private String label;

  public static final String SERIALIZED_NAME_LOCATION_ID = "location_id";
  @SerializedName(SERIALIZED_NAME_LOCATION_ID)
  private Integer locationId;

  public static final String SERIALIZED_NAME_NOTES = "notes";
  @SerializedName(SERIALIZED_NAME_NOTES)
  private String notes;

  public GetCharactersCharacterIdBookmarks200Ok() {
  }

  public GetCharactersCharacterIdBookmarks200Ok bookmarkId(Integer bookmarkId) {
    this.bookmarkId = bookmarkId;
    return this;
  }

  /**
   * bookmark_id integer
   * @return bookmarkId
   */
  @javax.annotation.Nonnull
  public Integer getBookmarkId() {
    return bookmarkId;
  }

  public void setBookmarkId(Integer bookmarkId) {
    this.bookmarkId = bookmarkId;
  }


  public GetCharactersCharacterIdBookmarks200Ok coordinates(GetCharactersCharacterIdBookmarksCoordinates coordinates) {
    this.coordinates = coordinates;
    return this;
  }

  /**
   * Get coordinates
   * @return coordinates
   */
  @javax.annotation.Nullable
  public GetCharactersCharacterIdBookmarksCoordinates getCoordinates() {
    return coordinates;
  }

  public void setCoordinates(GetCharactersCharacterIdBookmarksCoordinates coordinates) {
    this.coordinates = coordinates;
  }


  public GetCharactersCharacterIdBookmarks200Ok created(OffsetDateTime created) {
    this.created = created;
    return this;
  }

  /**
   * created string
   * @return created
   */
  @javax.annotation.Nonnull
  public OffsetDateTime getCreated() {
    return created;
  }

  public void setCreated(OffsetDateTime created) {
    this.created = created;
  }


  public GetCharactersCharacterIdBookmarks200Ok creatorId(Integer creatorId) {
    this.creatorId = creatorId;
    return this;
  }

  /**
   * creator_id integer
   * @return creatorId
   */
  @javax.annotation.Nonnull
  public Integer getCreatorId() {
    return creatorId;
  }

  public void setCreatorId(Integer creatorId) {
    this.creatorId = creatorId;
  }


  public GetCharactersCharacterIdBookmarks200Ok folderId(Integer folderId) {
    this.folderId = folderId;
    return this;
  }

  /**
   * folder_id integer
   * @return folderId
   */
  @javax.annotation.Nullable
  public Integer getFolderId() {
    return folderId;
  }

  public void setFolderId(Integer folderId) {
    this.folderId = folderId;
  }


  public GetCharactersCharacterIdBookmarks200Ok item(GetCharactersCharacterIdBookmarksItem item) {
    this.item = item;
    return this;
  }

  /**
   * Get item
   * @return item
   */
  @javax.annotation.Nullable
  public GetCharactersCharacterIdBookmarksItem getItem() {
    return item;
  }

  public void setItem(GetCharactersCharacterIdBookmarksItem item) {
    this.item = item;
  }


  public GetCharactersCharacterIdBookmarks200Ok label(String label) {
    this.label = label;
    return this;
  }

  /**
   * label string
   * @return label
   */
  @javax.annotation.Nonnull
  public String getLabel() {
    return label;
  }

  public void setLabel(String label) {
    this.label = label;
  }


  public GetCharactersCharacterIdBookmarks200Ok locationId(Integer locationId) {
    this.locationId = locationId;
    return this;
  }

  /**
   * location_id integer
   * @return locationId
   */
  @javax.annotation.Nonnull
  public Integer getLocationId() {
    return locationId;
  }

  public void setLocationId(Integer locationId) {
    this.locationId = locationId;
  }


  public GetCharactersCharacterIdBookmarks200Ok notes(String notes) {
    this.notes = notes;
    return this;
  }

  /**
   * notes string
   * @return notes
   */
  @javax.annotation.Nonnull
  public String getNotes() {
    return notes;
  }

  public void setNotes(String notes) {
    this.notes = notes;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    GetCharactersCharacterIdBookmarks200Ok getCharactersCharacterIdBookmarks200Ok = (GetCharactersCharacterIdBookmarks200Ok) o;
    return Objects.equals(this.bookmarkId, getCharactersCharacterIdBookmarks200Ok.bookmarkId) &&
        Objects.equals(this.coordinates, getCharactersCharacterIdBookmarks200Ok.coordinates) &&
        Objects.equals(this.created, getCharactersCharacterIdBookmarks200Ok.created) &&
        Objects.equals(this.creatorId, getCharactersCharacterIdBookmarks200Ok.creatorId) &&
        Objects.equals(this.folderId, getCharactersCharacterIdBookmarks200Ok.folderId) &&
        Objects.equals(this.item, getCharactersCharacterIdBookmarks200Ok.item) &&
        Objects.equals(this.label, getCharactersCharacterIdBookmarks200Ok.label) &&
        Objects.equals(this.locationId, getCharactersCharacterIdBookmarks200Ok.locationId) &&
        Objects.equals(this.notes, getCharactersCharacterIdBookmarks200Ok.notes);
  }

  @Override
  public int hashCode() {
    return Objects.hash(bookmarkId, coordinates, created, creatorId, folderId, item, label, locationId, notes);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class GetCharactersCharacterIdBookmarks200Ok {\n");
    sb.append("    bookmarkId: ").append(toIndentedString(bookmarkId)).append("\n");
    sb.append("    coordinates: ").append(toIndentedString(coordinates)).append("\n");
    sb.append("    created: ").append(toIndentedString(created)).append("\n");
    sb.append("    creatorId: ").append(toIndentedString(creatorId)).append("\n");
    sb.append("    folderId: ").append(toIndentedString(folderId)).append("\n");
    sb.append("    item: ").append(toIndentedString(item)).append("\n");
    sb.append("    label: ").append(toIndentedString(label)).append("\n");
    sb.append("    locationId: ").append(toIndentedString(locationId)).append("\n");
    sb.append("    notes: ").append(toIndentedString(notes)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("bookmark_id");
    openapiFields.add("coordinates");
    openapiFields.add("created");
    openapiFields.add("creator_id");
    openapiFields.add("folder_id");
    openapiFields.add("item");
    openapiFields.add("label");
    openapiFields.add("location_id");
    openapiFields.add("notes");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("bookmark_id");
    openapiRequiredFields.add("created");
    openapiRequiredFields.add("creator_id");
    openapiRequiredFields.add("label");
    openapiRequiredFields.add("location_id");
    openapiRequiredFields.add("notes");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to GetCharactersCharacterIdBookmarks200Ok
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!GetCharactersCharacterIdBookmarks200Ok.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in GetCharactersCharacterIdBookmarks200Ok is not found in the empty JSON string", GetCharactersCharacterIdBookmarks200Ok.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!GetCharactersCharacterIdBookmarks200Ok.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `GetCharactersCharacterIdBookmarks200Ok` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : GetCharactersCharacterIdBookmarks200Ok.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `coordinates`
      if (jsonObj.get("coordinates") != null && !jsonObj.get("coordinates").isJsonNull()) {
        GetCharactersCharacterIdBookmarksCoordinates.validateJsonElement(jsonObj.get("coordinates"));
      }
      // validate the optional field `item`
      if (jsonObj.get("item") != null && !jsonObj.get("item").isJsonNull()) {
        GetCharactersCharacterIdBookmarksItem.validateJsonElement(jsonObj.get("item"));
      }
      if (!jsonObj.get("label").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `label` to be a primitive type in the JSON string but got `%s`", jsonObj.get("label").toString()));
      }
      if (!jsonObj.get("notes").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `notes` to be a primitive type in the JSON string but got `%s`", jsonObj.get("notes").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!GetCharactersCharacterIdBookmarks200Ok.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'GetCharactersCharacterIdBookmarks200Ok' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<GetCharactersCharacterIdBookmarks200Ok> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(GetCharactersCharacterIdBookmarks200Ok.class));

       return (TypeAdapter<T>) new TypeAdapter<GetCharactersCharacterIdBookmarks200Ok>() {
           @Override
           public void write(JsonWriter out, GetCharactersCharacterIdBookmarks200Ok value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public GetCharactersCharacterIdBookmarks200Ok read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of GetCharactersCharacterIdBookmarks200Ok given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of GetCharactersCharacterIdBookmarks200Ok
   * @throws IOException if the JSON string is invalid with respect to GetCharactersCharacterIdBookmarks200Ok
   */
  public static GetCharactersCharacterIdBookmarks200Ok fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, GetCharactersCharacterIdBookmarks200Ok.class);
  }

  /**
   * Convert an instance of GetCharactersCharacterIdBookmarks200Ok to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

