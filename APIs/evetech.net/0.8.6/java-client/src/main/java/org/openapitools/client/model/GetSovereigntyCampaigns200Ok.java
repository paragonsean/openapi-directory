/*
 * EVE Swagger Interface
 * An OpenAPI for EVE Online
 *
 * The version of the OpenAPI document: 0.8.6
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.time.OffsetDateTime;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.GetSovereigntyCampaignsParticipant;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * 200 ok object
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:27:54.306821-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class GetSovereigntyCampaigns200Ok {
  public static final String SERIALIZED_NAME_ATTACKERS_SCORE = "attackers_score";
  @SerializedName(SERIALIZED_NAME_ATTACKERS_SCORE)
  private Float attackersScore;

  public static final String SERIALIZED_NAME_CAMPAIGN_ID = "campaign_id";
  @SerializedName(SERIALIZED_NAME_CAMPAIGN_ID)
  private Integer campaignId;

  public static final String SERIALIZED_NAME_CONSTELLATION_ID = "constellation_id";
  @SerializedName(SERIALIZED_NAME_CONSTELLATION_ID)
  private Integer constellationId;

  public static final String SERIALIZED_NAME_DEFENDER_ID = "defender_id";
  @SerializedName(SERIALIZED_NAME_DEFENDER_ID)
  private Integer defenderId;

  public static final String SERIALIZED_NAME_DEFENDER_SCORE = "defender_score";
  @SerializedName(SERIALIZED_NAME_DEFENDER_SCORE)
  private Float defenderScore;

  /**
   * Type of event this campaign is for. tcu_defense, ihub_defense and station_defense are referred to as \&quot;Defense Events\&quot;, station_freeport as \&quot;Freeport Events\&quot;. 
   */
  @JsonAdapter(EventTypeEnum.Adapter.class)
  public enum EventTypeEnum {
    TCU_DEFENSE("tcu_defense"),
    
    IHUB_DEFENSE("ihub_defense"),
    
    STATION_DEFENSE("station_defense"),
    
    STATION_FREEPORT("station_freeport");

    private String value;

    EventTypeEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static EventTypeEnum fromValue(String value) {
      for (EventTypeEnum b : EventTypeEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<EventTypeEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final EventTypeEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public EventTypeEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return EventTypeEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      EventTypeEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_EVENT_TYPE = "event_type";
  @SerializedName(SERIALIZED_NAME_EVENT_TYPE)
  private EventTypeEnum eventType;

  public static final String SERIALIZED_NAME_PARTICIPANTS = "participants";
  @SerializedName(SERIALIZED_NAME_PARTICIPANTS)
  private List<GetSovereigntyCampaignsParticipant> participants = new ArrayList<>();

  public static final String SERIALIZED_NAME_SOLAR_SYSTEM_ID = "solar_system_id";
  @SerializedName(SERIALIZED_NAME_SOLAR_SYSTEM_ID)
  private Integer solarSystemId;

  public static final String SERIALIZED_NAME_START_TIME = "start_time";
  @SerializedName(SERIALIZED_NAME_START_TIME)
  private OffsetDateTime startTime;

  public static final String SERIALIZED_NAME_STRUCTURE_ID = "structure_id";
  @SerializedName(SERIALIZED_NAME_STRUCTURE_ID)
  private Long structureId;

  public GetSovereigntyCampaigns200Ok() {
  }

  public GetSovereigntyCampaigns200Ok attackersScore(Float attackersScore) {
    this.attackersScore = attackersScore;
    return this;
  }

  /**
   * Score for all attacking parties, only present in Defense Events. 
   * @return attackersScore
   */
  @javax.annotation.Nullable
  public Float getAttackersScore() {
    return attackersScore;
  }

  public void setAttackersScore(Float attackersScore) {
    this.attackersScore = attackersScore;
  }


  public GetSovereigntyCampaigns200Ok campaignId(Integer campaignId) {
    this.campaignId = campaignId;
    return this;
  }

  /**
   * Unique ID for this campaign.
   * @return campaignId
   */
  @javax.annotation.Nonnull
  public Integer getCampaignId() {
    return campaignId;
  }

  public void setCampaignId(Integer campaignId) {
    this.campaignId = campaignId;
  }


  public GetSovereigntyCampaigns200Ok constellationId(Integer constellationId) {
    this.constellationId = constellationId;
    return this;
  }

  /**
   * The constellation in which the campaign will take place. 
   * @return constellationId
   */
  @javax.annotation.Nonnull
  public Integer getConstellationId() {
    return constellationId;
  }

  public void setConstellationId(Integer constellationId) {
    this.constellationId = constellationId;
  }


  public GetSovereigntyCampaigns200Ok defenderId(Integer defenderId) {
    this.defenderId = defenderId;
    return this;
  }

  /**
   * Defending alliance, only present in Defense Events 
   * @return defenderId
   */
  @javax.annotation.Nullable
  public Integer getDefenderId() {
    return defenderId;
  }

  public void setDefenderId(Integer defenderId) {
    this.defenderId = defenderId;
  }


  public GetSovereigntyCampaigns200Ok defenderScore(Float defenderScore) {
    this.defenderScore = defenderScore;
    return this;
  }

  /**
   * Score for the defending alliance, only present in Defense Events. 
   * @return defenderScore
   */
  @javax.annotation.Nullable
  public Float getDefenderScore() {
    return defenderScore;
  }

  public void setDefenderScore(Float defenderScore) {
    this.defenderScore = defenderScore;
  }


  public GetSovereigntyCampaigns200Ok eventType(EventTypeEnum eventType) {
    this.eventType = eventType;
    return this;
  }

  /**
   * Type of event this campaign is for. tcu_defense, ihub_defense and station_defense are referred to as \&quot;Defense Events\&quot;, station_freeport as \&quot;Freeport Events\&quot;. 
   * @return eventType
   */
  @javax.annotation.Nonnull
  public EventTypeEnum getEventType() {
    return eventType;
  }

  public void setEventType(EventTypeEnum eventType) {
    this.eventType = eventType;
  }


  public GetSovereigntyCampaigns200Ok participants(List<GetSovereigntyCampaignsParticipant> participants) {
    this.participants = participants;
    return this;
  }

  public GetSovereigntyCampaigns200Ok addParticipantsItem(GetSovereigntyCampaignsParticipant participantsItem) {
    if (this.participants == null) {
      this.participants = new ArrayList<>();
    }
    this.participants.add(participantsItem);
    return this;
  }

  /**
   * Alliance participating and their respective scores, only present in Freeport Events. 
   * @return participants
   */
  @javax.annotation.Nullable
  public List<GetSovereigntyCampaignsParticipant> getParticipants() {
    return participants;
  }

  public void setParticipants(List<GetSovereigntyCampaignsParticipant> participants) {
    this.participants = participants;
  }


  public GetSovereigntyCampaigns200Ok solarSystemId(Integer solarSystemId) {
    this.solarSystemId = solarSystemId;
    return this;
  }

  /**
   * The solar system the structure is located in. 
   * @return solarSystemId
   */
  @javax.annotation.Nonnull
  public Integer getSolarSystemId() {
    return solarSystemId;
  }

  public void setSolarSystemId(Integer solarSystemId) {
    this.solarSystemId = solarSystemId;
  }


  public GetSovereigntyCampaigns200Ok startTime(OffsetDateTime startTime) {
    this.startTime = startTime;
    return this;
  }

  /**
   * Time the event is scheduled to start. 
   * @return startTime
   */
  @javax.annotation.Nonnull
  public OffsetDateTime getStartTime() {
    return startTime;
  }

  public void setStartTime(OffsetDateTime startTime) {
    this.startTime = startTime;
  }


  public GetSovereigntyCampaigns200Ok structureId(Long structureId) {
    this.structureId = structureId;
    return this;
  }

  /**
   * The structure item ID that is related to this campaign. 
   * @return structureId
   */
  @javax.annotation.Nonnull
  public Long getStructureId() {
    return structureId;
  }

  public void setStructureId(Long structureId) {
    this.structureId = structureId;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    GetSovereigntyCampaigns200Ok getSovereigntyCampaigns200Ok = (GetSovereigntyCampaigns200Ok) o;
    return Objects.equals(this.attackersScore, getSovereigntyCampaigns200Ok.attackersScore) &&
        Objects.equals(this.campaignId, getSovereigntyCampaigns200Ok.campaignId) &&
        Objects.equals(this.constellationId, getSovereigntyCampaigns200Ok.constellationId) &&
        Objects.equals(this.defenderId, getSovereigntyCampaigns200Ok.defenderId) &&
        Objects.equals(this.defenderScore, getSovereigntyCampaigns200Ok.defenderScore) &&
        Objects.equals(this.eventType, getSovereigntyCampaigns200Ok.eventType) &&
        Objects.equals(this.participants, getSovereigntyCampaigns200Ok.participants) &&
        Objects.equals(this.solarSystemId, getSovereigntyCampaigns200Ok.solarSystemId) &&
        Objects.equals(this.startTime, getSovereigntyCampaigns200Ok.startTime) &&
        Objects.equals(this.structureId, getSovereigntyCampaigns200Ok.structureId);
  }

  @Override
  public int hashCode() {
    return Objects.hash(attackersScore, campaignId, constellationId, defenderId, defenderScore, eventType, participants, solarSystemId, startTime, structureId);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class GetSovereigntyCampaigns200Ok {\n");
    sb.append("    attackersScore: ").append(toIndentedString(attackersScore)).append("\n");
    sb.append("    campaignId: ").append(toIndentedString(campaignId)).append("\n");
    sb.append("    constellationId: ").append(toIndentedString(constellationId)).append("\n");
    sb.append("    defenderId: ").append(toIndentedString(defenderId)).append("\n");
    sb.append("    defenderScore: ").append(toIndentedString(defenderScore)).append("\n");
    sb.append("    eventType: ").append(toIndentedString(eventType)).append("\n");
    sb.append("    participants: ").append(toIndentedString(participants)).append("\n");
    sb.append("    solarSystemId: ").append(toIndentedString(solarSystemId)).append("\n");
    sb.append("    startTime: ").append(toIndentedString(startTime)).append("\n");
    sb.append("    structureId: ").append(toIndentedString(structureId)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("attackers_score");
    openapiFields.add("campaign_id");
    openapiFields.add("constellation_id");
    openapiFields.add("defender_id");
    openapiFields.add("defender_score");
    openapiFields.add("event_type");
    openapiFields.add("participants");
    openapiFields.add("solar_system_id");
    openapiFields.add("start_time");
    openapiFields.add("structure_id");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("campaign_id");
    openapiRequiredFields.add("constellation_id");
    openapiRequiredFields.add("event_type");
    openapiRequiredFields.add("solar_system_id");
    openapiRequiredFields.add("start_time");
    openapiRequiredFields.add("structure_id");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to GetSovereigntyCampaigns200Ok
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!GetSovereigntyCampaigns200Ok.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in GetSovereigntyCampaigns200Ok is not found in the empty JSON string", GetSovereigntyCampaigns200Ok.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!GetSovereigntyCampaigns200Ok.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `GetSovereigntyCampaigns200Ok` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : GetSovereigntyCampaigns200Ok.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if (!jsonObj.get("event_type").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `event_type` to be a primitive type in the JSON string but got `%s`", jsonObj.get("event_type").toString()));
      }
      // validate the required field `event_type`
      EventTypeEnum.validateJsonElement(jsonObj.get("event_type"));
      if (jsonObj.get("participants") != null && !jsonObj.get("participants").isJsonNull()) {
        JsonArray jsonArrayparticipants = jsonObj.getAsJsonArray("participants");
        if (jsonArrayparticipants != null) {
          // ensure the json data is an array
          if (!jsonObj.get("participants").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `participants` to be an array in the JSON string but got `%s`", jsonObj.get("participants").toString()));
          }

          // validate the optional field `participants` (array)
          for (int i = 0; i < jsonArrayparticipants.size(); i++) {
            GetSovereigntyCampaignsParticipant.validateJsonElement(jsonArrayparticipants.get(i));
          };
        }
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!GetSovereigntyCampaigns200Ok.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'GetSovereigntyCampaigns200Ok' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<GetSovereigntyCampaigns200Ok> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(GetSovereigntyCampaigns200Ok.class));

       return (TypeAdapter<T>) new TypeAdapter<GetSovereigntyCampaigns200Ok>() {
           @Override
           public void write(JsonWriter out, GetSovereigntyCampaigns200Ok value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public GetSovereigntyCampaigns200Ok read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of GetSovereigntyCampaigns200Ok given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of GetSovereigntyCampaigns200Ok
   * @throws IOException if the JSON string is invalid with respect to GetSovereigntyCampaigns200Ok
   */
  public static GetSovereigntyCampaigns200Ok fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, GetSovereigntyCampaigns200Ok.class);
  }

  /**
   * Convert an instance of GetSovereigntyCampaigns200Ok to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

