/*
 * EVE Swagger Interface
 * An OpenAPI for EVE Online
 *
 * The version of the OpenAPI document: 0.8.6
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.time.OffsetDateTime;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * 200 ok object
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:27:54.306821-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class GetCorporationsCorporationIdStarbases200Ok {
  public static final String SERIALIZED_NAME_MOON_ID = "moon_id";
  @SerializedName(SERIALIZED_NAME_MOON_ID)
  private Integer moonId;

  public static final String SERIALIZED_NAME_ONLINED_SINCE = "onlined_since";
  @SerializedName(SERIALIZED_NAME_ONLINED_SINCE)
  private OffsetDateTime onlinedSince;

  public static final String SERIALIZED_NAME_REINFORCED_UNTIL = "reinforced_until";
  @SerializedName(SERIALIZED_NAME_REINFORCED_UNTIL)
  private OffsetDateTime reinforcedUntil;

  public static final String SERIALIZED_NAME_STARBASE_ID = "starbase_id";
  @SerializedName(SERIALIZED_NAME_STARBASE_ID)
  private Long starbaseId;

  /**
   * state string
   */
  @JsonAdapter(StateEnum.Adapter.class)
  public enum StateEnum {
    OFFLINE("offline"),
    
    ONLINE("online"),
    
    ONLINING("onlining"),
    
    REINFORCED("reinforced"),
    
    UNANCHORING("unanchoring");

    private String value;

    StateEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static StateEnum fromValue(String value) {
      for (StateEnum b : StateEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<StateEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final StateEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public StateEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return StateEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      StateEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_STATE = "state";
  @SerializedName(SERIALIZED_NAME_STATE)
  private StateEnum state;

  public static final String SERIALIZED_NAME_SYSTEM_ID = "system_id";
  @SerializedName(SERIALIZED_NAME_SYSTEM_ID)
  private Integer systemId;

  public static final String SERIALIZED_NAME_TYPE_ID = "type_id";
  @SerializedName(SERIALIZED_NAME_TYPE_ID)
  private Integer typeId;

  public static final String SERIALIZED_NAME_UNANCHOR_AT = "unanchor_at";
  @SerializedName(SERIALIZED_NAME_UNANCHOR_AT)
  private OffsetDateTime unanchorAt;

  public GetCorporationsCorporationIdStarbases200Ok() {
  }

  public GetCorporationsCorporationIdStarbases200Ok moonId(Integer moonId) {
    this.moonId = moonId;
    return this;
  }

  /**
   * The moon this starbase (POS) is anchored on, unanchored POSes do not have this information
   * @return moonId
   */
  @javax.annotation.Nullable
  public Integer getMoonId() {
    return moonId;
  }

  public void setMoonId(Integer moonId) {
    this.moonId = moonId;
  }


  public GetCorporationsCorporationIdStarbases200Ok onlinedSince(OffsetDateTime onlinedSince) {
    this.onlinedSince = onlinedSince;
    return this;
  }

  /**
   * When the POS onlined, for starbases (POSes) in online state
   * @return onlinedSince
   */
  @javax.annotation.Nullable
  public OffsetDateTime getOnlinedSince() {
    return onlinedSince;
  }

  public void setOnlinedSince(OffsetDateTime onlinedSince) {
    this.onlinedSince = onlinedSince;
  }


  public GetCorporationsCorporationIdStarbases200Ok reinforcedUntil(OffsetDateTime reinforcedUntil) {
    this.reinforcedUntil = reinforcedUntil;
    return this;
  }

  /**
   * When the POS will be out of reinforcement, for starbases (POSes) in reinforced state
   * @return reinforcedUntil
   */
  @javax.annotation.Nullable
  public OffsetDateTime getReinforcedUntil() {
    return reinforcedUntil;
  }

  public void setReinforcedUntil(OffsetDateTime reinforcedUntil) {
    this.reinforcedUntil = reinforcedUntil;
  }


  public GetCorporationsCorporationIdStarbases200Ok starbaseId(Long starbaseId) {
    this.starbaseId = starbaseId;
    return this;
  }

  /**
   * Unique ID for this starbase (POS)
   * @return starbaseId
   */
  @javax.annotation.Nonnull
  public Long getStarbaseId() {
    return starbaseId;
  }

  public void setStarbaseId(Long starbaseId) {
    this.starbaseId = starbaseId;
  }


  public GetCorporationsCorporationIdStarbases200Ok state(StateEnum state) {
    this.state = state;
    return this;
  }

  /**
   * state string
   * @return state
   */
  @javax.annotation.Nullable
  public StateEnum getState() {
    return state;
  }

  public void setState(StateEnum state) {
    this.state = state;
  }


  public GetCorporationsCorporationIdStarbases200Ok systemId(Integer systemId) {
    this.systemId = systemId;
    return this;
  }

  /**
   * The solar system this starbase (POS) is in, unanchored POSes have this information
   * @return systemId
   */
  @javax.annotation.Nonnull
  public Integer getSystemId() {
    return systemId;
  }

  public void setSystemId(Integer systemId) {
    this.systemId = systemId;
  }


  public GetCorporationsCorporationIdStarbases200Ok typeId(Integer typeId) {
    this.typeId = typeId;
    return this;
  }

  /**
   * Starbase (POS) type
   * @return typeId
   */
  @javax.annotation.Nonnull
  public Integer getTypeId() {
    return typeId;
  }

  public void setTypeId(Integer typeId) {
    this.typeId = typeId;
  }


  public GetCorporationsCorporationIdStarbases200Ok unanchorAt(OffsetDateTime unanchorAt) {
    this.unanchorAt = unanchorAt;
    return this;
  }

  /**
   * When the POS started unanchoring, for starbases (POSes) in unanchoring state
   * @return unanchorAt
   */
  @javax.annotation.Nullable
  public OffsetDateTime getUnanchorAt() {
    return unanchorAt;
  }

  public void setUnanchorAt(OffsetDateTime unanchorAt) {
    this.unanchorAt = unanchorAt;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    GetCorporationsCorporationIdStarbases200Ok getCorporationsCorporationIdStarbases200Ok = (GetCorporationsCorporationIdStarbases200Ok) o;
    return Objects.equals(this.moonId, getCorporationsCorporationIdStarbases200Ok.moonId) &&
        Objects.equals(this.onlinedSince, getCorporationsCorporationIdStarbases200Ok.onlinedSince) &&
        Objects.equals(this.reinforcedUntil, getCorporationsCorporationIdStarbases200Ok.reinforcedUntil) &&
        Objects.equals(this.starbaseId, getCorporationsCorporationIdStarbases200Ok.starbaseId) &&
        Objects.equals(this.state, getCorporationsCorporationIdStarbases200Ok.state) &&
        Objects.equals(this.systemId, getCorporationsCorporationIdStarbases200Ok.systemId) &&
        Objects.equals(this.typeId, getCorporationsCorporationIdStarbases200Ok.typeId) &&
        Objects.equals(this.unanchorAt, getCorporationsCorporationIdStarbases200Ok.unanchorAt);
  }

  @Override
  public int hashCode() {
    return Objects.hash(moonId, onlinedSince, reinforcedUntil, starbaseId, state, systemId, typeId, unanchorAt);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class GetCorporationsCorporationIdStarbases200Ok {\n");
    sb.append("    moonId: ").append(toIndentedString(moonId)).append("\n");
    sb.append("    onlinedSince: ").append(toIndentedString(onlinedSince)).append("\n");
    sb.append("    reinforcedUntil: ").append(toIndentedString(reinforcedUntil)).append("\n");
    sb.append("    starbaseId: ").append(toIndentedString(starbaseId)).append("\n");
    sb.append("    state: ").append(toIndentedString(state)).append("\n");
    sb.append("    systemId: ").append(toIndentedString(systemId)).append("\n");
    sb.append("    typeId: ").append(toIndentedString(typeId)).append("\n");
    sb.append("    unanchorAt: ").append(toIndentedString(unanchorAt)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("moon_id");
    openapiFields.add("onlined_since");
    openapiFields.add("reinforced_until");
    openapiFields.add("starbase_id");
    openapiFields.add("state");
    openapiFields.add("system_id");
    openapiFields.add("type_id");
    openapiFields.add("unanchor_at");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("starbase_id");
    openapiRequiredFields.add("system_id");
    openapiRequiredFields.add("type_id");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to GetCorporationsCorporationIdStarbases200Ok
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!GetCorporationsCorporationIdStarbases200Ok.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in GetCorporationsCorporationIdStarbases200Ok is not found in the empty JSON string", GetCorporationsCorporationIdStarbases200Ok.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!GetCorporationsCorporationIdStarbases200Ok.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `GetCorporationsCorporationIdStarbases200Ok` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : GetCorporationsCorporationIdStarbases200Ok.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("state") != null && !jsonObj.get("state").isJsonNull()) && !jsonObj.get("state").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `state` to be a primitive type in the JSON string but got `%s`", jsonObj.get("state").toString()));
      }
      // validate the optional field `state`
      if (jsonObj.get("state") != null && !jsonObj.get("state").isJsonNull()) {
        StateEnum.validateJsonElement(jsonObj.get("state"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!GetCorporationsCorporationIdStarbases200Ok.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'GetCorporationsCorporationIdStarbases200Ok' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<GetCorporationsCorporationIdStarbases200Ok> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(GetCorporationsCorporationIdStarbases200Ok.class));

       return (TypeAdapter<T>) new TypeAdapter<GetCorporationsCorporationIdStarbases200Ok>() {
           @Override
           public void write(JsonWriter out, GetCorporationsCorporationIdStarbases200Ok value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public GetCorporationsCorporationIdStarbases200Ok read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of GetCorporationsCorporationIdStarbases200Ok given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of GetCorporationsCorporationIdStarbases200Ok
   * @throws IOException if the JSON string is invalid with respect to GetCorporationsCorporationIdStarbases200Ok
   */
  public static GetCorporationsCorporationIdStarbases200Ok fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, GetCorporationsCorporationIdStarbases200Ok.class);
  }

  /**
   * Convert an instance of GetCorporationsCorporationIdStarbases200Ok to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

