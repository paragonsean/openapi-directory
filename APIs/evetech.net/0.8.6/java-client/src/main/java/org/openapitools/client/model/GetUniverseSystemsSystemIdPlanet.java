/*
 * EVE Swagger Interface
 * An OpenAPI for EVE Online
 *
 * The version of the OpenAPI document: 0.8.6
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * planet object
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:27:54.306821-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class GetUniverseSystemsSystemIdPlanet {
  public static final String SERIALIZED_NAME_ASTEROID_BELTS = "asteroid_belts";
  @SerializedName(SERIALIZED_NAME_ASTEROID_BELTS)
  private List<Integer> asteroidBelts = new ArrayList<>();

  public static final String SERIALIZED_NAME_MOONS = "moons";
  @SerializedName(SERIALIZED_NAME_MOONS)
  private List<Integer> moons = new ArrayList<>();

  public static final String SERIALIZED_NAME_PLANET_ID = "planet_id";
  @SerializedName(SERIALIZED_NAME_PLANET_ID)
  private Integer planetId;

  public GetUniverseSystemsSystemIdPlanet() {
  }

  public GetUniverseSystemsSystemIdPlanet asteroidBelts(List<Integer> asteroidBelts) {
    this.asteroidBelts = asteroidBelts;
    return this;
  }

  public GetUniverseSystemsSystemIdPlanet addAsteroidBeltsItem(Integer asteroidBeltsItem) {
    if (this.asteroidBelts == null) {
      this.asteroidBelts = new ArrayList<>();
    }
    this.asteroidBelts.add(asteroidBeltsItem);
    return this;
  }

  /**
   * asteroid_belts array
   * @return asteroidBelts
   */
  @javax.annotation.Nullable
  public List<Integer> getAsteroidBelts() {
    return asteroidBelts;
  }

  public void setAsteroidBelts(List<Integer> asteroidBelts) {
    this.asteroidBelts = asteroidBelts;
  }


  public GetUniverseSystemsSystemIdPlanet moons(List<Integer> moons) {
    this.moons = moons;
    return this;
  }

  public GetUniverseSystemsSystemIdPlanet addMoonsItem(Integer moonsItem) {
    if (this.moons == null) {
      this.moons = new ArrayList<>();
    }
    this.moons.add(moonsItem);
    return this;
  }

  /**
   * moons array
   * @return moons
   */
  @javax.annotation.Nullable
  public List<Integer> getMoons() {
    return moons;
  }

  public void setMoons(List<Integer> moons) {
    this.moons = moons;
  }


  public GetUniverseSystemsSystemIdPlanet planetId(Integer planetId) {
    this.planetId = planetId;
    return this;
  }

  /**
   * planet_id integer
   * @return planetId
   */
  @javax.annotation.Nonnull
  public Integer getPlanetId() {
    return planetId;
  }

  public void setPlanetId(Integer planetId) {
    this.planetId = planetId;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    GetUniverseSystemsSystemIdPlanet getUniverseSystemsSystemIdPlanet = (GetUniverseSystemsSystemIdPlanet) o;
    return Objects.equals(this.asteroidBelts, getUniverseSystemsSystemIdPlanet.asteroidBelts) &&
        Objects.equals(this.moons, getUniverseSystemsSystemIdPlanet.moons) &&
        Objects.equals(this.planetId, getUniverseSystemsSystemIdPlanet.planetId);
  }

  @Override
  public int hashCode() {
    return Objects.hash(asteroidBelts, moons, planetId);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class GetUniverseSystemsSystemIdPlanet {\n");
    sb.append("    asteroidBelts: ").append(toIndentedString(asteroidBelts)).append("\n");
    sb.append("    moons: ").append(toIndentedString(moons)).append("\n");
    sb.append("    planetId: ").append(toIndentedString(planetId)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("asteroid_belts");
    openapiFields.add("moons");
    openapiFields.add("planet_id");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("planet_id");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to GetUniverseSystemsSystemIdPlanet
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!GetUniverseSystemsSystemIdPlanet.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in GetUniverseSystemsSystemIdPlanet is not found in the empty JSON string", GetUniverseSystemsSystemIdPlanet.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!GetUniverseSystemsSystemIdPlanet.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `GetUniverseSystemsSystemIdPlanet` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : GetUniverseSystemsSystemIdPlanet.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // ensure the optional json data is an array if present
      if (jsonObj.get("asteroid_belts") != null && !jsonObj.get("asteroid_belts").isJsonNull() && !jsonObj.get("asteroid_belts").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `asteroid_belts` to be an array in the JSON string but got `%s`", jsonObj.get("asteroid_belts").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("moons") != null && !jsonObj.get("moons").isJsonNull() && !jsonObj.get("moons").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `moons` to be an array in the JSON string but got `%s`", jsonObj.get("moons").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!GetUniverseSystemsSystemIdPlanet.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'GetUniverseSystemsSystemIdPlanet' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<GetUniverseSystemsSystemIdPlanet> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(GetUniverseSystemsSystemIdPlanet.class));

       return (TypeAdapter<T>) new TypeAdapter<GetUniverseSystemsSystemIdPlanet>() {
           @Override
           public void write(JsonWriter out, GetUniverseSystemsSystemIdPlanet value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public GetUniverseSystemsSystemIdPlanet read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of GetUniverseSystemsSystemIdPlanet given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of GetUniverseSystemsSystemIdPlanet
   * @throws IOException if the JSON string is invalid with respect to GetUniverseSystemsSystemIdPlanet
   */
  public static GetUniverseSystemsSystemIdPlanet fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, GetUniverseSystemsSystemIdPlanet.class);
  }

  /**
   * Convert an instance of GetUniverseSystemsSystemIdPlanet to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

