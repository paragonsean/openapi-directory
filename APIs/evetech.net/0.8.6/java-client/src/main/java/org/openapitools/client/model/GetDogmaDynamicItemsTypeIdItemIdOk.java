/*
 * EVE Swagger Interface
 * An OpenAPI for EVE Online
 *
 * The version of the OpenAPI document: 0.8.6
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.GetDogmaDynamicItemsTypeIdItemIdDogmaAttribute;
import org.openapitools.client.model.GetDogmaDynamicItemsTypeIdItemIdDogmaEffect;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * 200 ok object
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:27:54.306821-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class GetDogmaDynamicItemsTypeIdItemIdOk {
  public static final String SERIALIZED_NAME_CREATED_BY = "created_by";
  @SerializedName(SERIALIZED_NAME_CREATED_BY)
  private Integer createdBy;

  public static final String SERIALIZED_NAME_DOGMA_ATTRIBUTES = "dogma_attributes";
  @SerializedName(SERIALIZED_NAME_DOGMA_ATTRIBUTES)
  private List<GetDogmaDynamicItemsTypeIdItemIdDogmaAttribute> dogmaAttributes = new ArrayList<>();

  public static final String SERIALIZED_NAME_DOGMA_EFFECTS = "dogma_effects";
  @SerializedName(SERIALIZED_NAME_DOGMA_EFFECTS)
  private List<GetDogmaDynamicItemsTypeIdItemIdDogmaEffect> dogmaEffects = new ArrayList<>();

  public static final String SERIALIZED_NAME_MUTATOR_TYPE_ID = "mutator_type_id";
  @SerializedName(SERIALIZED_NAME_MUTATOR_TYPE_ID)
  private Integer mutatorTypeId;

  public static final String SERIALIZED_NAME_SOURCE_TYPE_ID = "source_type_id";
  @SerializedName(SERIALIZED_NAME_SOURCE_TYPE_ID)
  private Integer sourceTypeId;

  public GetDogmaDynamicItemsTypeIdItemIdOk() {
  }

  public GetDogmaDynamicItemsTypeIdItemIdOk createdBy(Integer createdBy) {
    this.createdBy = createdBy;
    return this;
  }

  /**
   * The ID of the character who created the item
   * @return createdBy
   */
  @javax.annotation.Nonnull
  public Integer getCreatedBy() {
    return createdBy;
  }

  public void setCreatedBy(Integer createdBy) {
    this.createdBy = createdBy;
  }


  public GetDogmaDynamicItemsTypeIdItemIdOk dogmaAttributes(List<GetDogmaDynamicItemsTypeIdItemIdDogmaAttribute> dogmaAttributes) {
    this.dogmaAttributes = dogmaAttributes;
    return this;
  }

  public GetDogmaDynamicItemsTypeIdItemIdOk addDogmaAttributesItem(GetDogmaDynamicItemsTypeIdItemIdDogmaAttribute dogmaAttributesItem) {
    if (this.dogmaAttributes == null) {
      this.dogmaAttributes = new ArrayList<>();
    }
    this.dogmaAttributes.add(dogmaAttributesItem);
    return this;
  }

  /**
   * dogma_attributes array
   * @return dogmaAttributes
   */
  @javax.annotation.Nonnull
  public List<GetDogmaDynamicItemsTypeIdItemIdDogmaAttribute> getDogmaAttributes() {
    return dogmaAttributes;
  }

  public void setDogmaAttributes(List<GetDogmaDynamicItemsTypeIdItemIdDogmaAttribute> dogmaAttributes) {
    this.dogmaAttributes = dogmaAttributes;
  }


  public GetDogmaDynamicItemsTypeIdItemIdOk dogmaEffects(List<GetDogmaDynamicItemsTypeIdItemIdDogmaEffect> dogmaEffects) {
    this.dogmaEffects = dogmaEffects;
    return this;
  }

  public GetDogmaDynamicItemsTypeIdItemIdOk addDogmaEffectsItem(GetDogmaDynamicItemsTypeIdItemIdDogmaEffect dogmaEffectsItem) {
    if (this.dogmaEffects == null) {
      this.dogmaEffects = new ArrayList<>();
    }
    this.dogmaEffects.add(dogmaEffectsItem);
    return this;
  }

  /**
   * dogma_effects array
   * @return dogmaEffects
   */
  @javax.annotation.Nonnull
  public List<GetDogmaDynamicItemsTypeIdItemIdDogmaEffect> getDogmaEffects() {
    return dogmaEffects;
  }

  public void setDogmaEffects(List<GetDogmaDynamicItemsTypeIdItemIdDogmaEffect> dogmaEffects) {
    this.dogmaEffects = dogmaEffects;
  }


  public GetDogmaDynamicItemsTypeIdItemIdOk mutatorTypeId(Integer mutatorTypeId) {
    this.mutatorTypeId = mutatorTypeId;
    return this;
  }

  /**
   * The type ID of the mutator used to generate the dynamic item.
   * @return mutatorTypeId
   */
  @javax.annotation.Nonnull
  public Integer getMutatorTypeId() {
    return mutatorTypeId;
  }

  public void setMutatorTypeId(Integer mutatorTypeId) {
    this.mutatorTypeId = mutatorTypeId;
  }


  public GetDogmaDynamicItemsTypeIdItemIdOk sourceTypeId(Integer sourceTypeId) {
    this.sourceTypeId = sourceTypeId;
    return this;
  }

  /**
   * The type ID of the source item the mutator was applied to create the dynamic item.
   * @return sourceTypeId
   */
  @javax.annotation.Nonnull
  public Integer getSourceTypeId() {
    return sourceTypeId;
  }

  public void setSourceTypeId(Integer sourceTypeId) {
    this.sourceTypeId = sourceTypeId;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    GetDogmaDynamicItemsTypeIdItemIdOk getDogmaDynamicItemsTypeIdItemIdOk = (GetDogmaDynamicItemsTypeIdItemIdOk) o;
    return Objects.equals(this.createdBy, getDogmaDynamicItemsTypeIdItemIdOk.createdBy) &&
        Objects.equals(this.dogmaAttributes, getDogmaDynamicItemsTypeIdItemIdOk.dogmaAttributes) &&
        Objects.equals(this.dogmaEffects, getDogmaDynamicItemsTypeIdItemIdOk.dogmaEffects) &&
        Objects.equals(this.mutatorTypeId, getDogmaDynamicItemsTypeIdItemIdOk.mutatorTypeId) &&
        Objects.equals(this.sourceTypeId, getDogmaDynamicItemsTypeIdItemIdOk.sourceTypeId);
  }

  @Override
  public int hashCode() {
    return Objects.hash(createdBy, dogmaAttributes, dogmaEffects, mutatorTypeId, sourceTypeId);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class GetDogmaDynamicItemsTypeIdItemIdOk {\n");
    sb.append("    createdBy: ").append(toIndentedString(createdBy)).append("\n");
    sb.append("    dogmaAttributes: ").append(toIndentedString(dogmaAttributes)).append("\n");
    sb.append("    dogmaEffects: ").append(toIndentedString(dogmaEffects)).append("\n");
    sb.append("    mutatorTypeId: ").append(toIndentedString(mutatorTypeId)).append("\n");
    sb.append("    sourceTypeId: ").append(toIndentedString(sourceTypeId)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("created_by");
    openapiFields.add("dogma_attributes");
    openapiFields.add("dogma_effects");
    openapiFields.add("mutator_type_id");
    openapiFields.add("source_type_id");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("created_by");
    openapiRequiredFields.add("dogma_attributes");
    openapiRequiredFields.add("dogma_effects");
    openapiRequiredFields.add("mutator_type_id");
    openapiRequiredFields.add("source_type_id");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to GetDogmaDynamicItemsTypeIdItemIdOk
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!GetDogmaDynamicItemsTypeIdItemIdOk.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in GetDogmaDynamicItemsTypeIdItemIdOk is not found in the empty JSON string", GetDogmaDynamicItemsTypeIdItemIdOk.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!GetDogmaDynamicItemsTypeIdItemIdOk.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `GetDogmaDynamicItemsTypeIdItemIdOk` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : GetDogmaDynamicItemsTypeIdItemIdOk.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // ensure the json data is an array
      if (!jsonObj.get("dogma_attributes").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `dogma_attributes` to be an array in the JSON string but got `%s`", jsonObj.get("dogma_attributes").toString()));
      }

      JsonArray jsonArraydogmaAttributes = jsonObj.getAsJsonArray("dogma_attributes");
      // validate the required field `dogma_attributes` (array)
      for (int i = 0; i < jsonArraydogmaAttributes.size(); i++) {
        GetDogmaDynamicItemsTypeIdItemIdDogmaAttribute.validateJsonElement(jsonArraydogmaAttributes.get(i));
      };
      // ensure the json data is an array
      if (!jsonObj.get("dogma_effects").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `dogma_effects` to be an array in the JSON string but got `%s`", jsonObj.get("dogma_effects").toString()));
      }

      JsonArray jsonArraydogmaEffects = jsonObj.getAsJsonArray("dogma_effects");
      // validate the required field `dogma_effects` (array)
      for (int i = 0; i < jsonArraydogmaEffects.size(); i++) {
        GetDogmaDynamicItemsTypeIdItemIdDogmaEffect.validateJsonElement(jsonArraydogmaEffects.get(i));
      };
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!GetDogmaDynamicItemsTypeIdItemIdOk.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'GetDogmaDynamicItemsTypeIdItemIdOk' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<GetDogmaDynamicItemsTypeIdItemIdOk> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(GetDogmaDynamicItemsTypeIdItemIdOk.class));

       return (TypeAdapter<T>) new TypeAdapter<GetDogmaDynamicItemsTypeIdItemIdOk>() {
           @Override
           public void write(JsonWriter out, GetDogmaDynamicItemsTypeIdItemIdOk value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public GetDogmaDynamicItemsTypeIdItemIdOk read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of GetDogmaDynamicItemsTypeIdItemIdOk given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of GetDogmaDynamicItemsTypeIdItemIdOk
   * @throws IOException if the JSON string is invalid with respect to GetDogmaDynamicItemsTypeIdItemIdOk
   */
  public static GetDogmaDynamicItemsTypeIdItemIdOk fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, GetDogmaDynamicItemsTypeIdItemIdOk.class);
  }

  /**
   * Convert an instance of GetDogmaDynamicItemsTypeIdItemIdOk to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

