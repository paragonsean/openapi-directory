/*
 * EVE Swagger Interface
 * An OpenAPI for EVE Online
 *
 * The version of the OpenAPI document: 0.8.6
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * character_id and response of an attendee
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:27:54.306821-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class GetCharactersCharacterIdCalendarEventIdAttendees200Ok {
  public static final String SERIALIZED_NAME_CHARACTER_ID = "character_id";
  @SerializedName(SERIALIZED_NAME_CHARACTER_ID)
  private Integer characterId;

  /**
   * event_response string
   */
  @JsonAdapter(EventResponseEnum.Adapter.class)
  public enum EventResponseEnum {
    DECLINED("declined"),
    
    NOT_RESPONDED("not_responded"),
    
    ACCEPTED("accepted"),
    
    TENTATIVE("tentative");

    private String value;

    EventResponseEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static EventResponseEnum fromValue(String value) {
      for (EventResponseEnum b : EventResponseEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<EventResponseEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final EventResponseEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public EventResponseEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return EventResponseEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      EventResponseEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_EVENT_RESPONSE = "event_response";
  @SerializedName(SERIALIZED_NAME_EVENT_RESPONSE)
  private EventResponseEnum eventResponse;

  public GetCharactersCharacterIdCalendarEventIdAttendees200Ok() {
  }

  public GetCharactersCharacterIdCalendarEventIdAttendees200Ok characterId(Integer characterId) {
    this.characterId = characterId;
    return this;
  }

  /**
   * character_id integer
   * @return characterId
   */
  @javax.annotation.Nullable
  public Integer getCharacterId() {
    return characterId;
  }

  public void setCharacterId(Integer characterId) {
    this.characterId = characterId;
  }


  public GetCharactersCharacterIdCalendarEventIdAttendees200Ok eventResponse(EventResponseEnum eventResponse) {
    this.eventResponse = eventResponse;
    return this;
  }

  /**
   * event_response string
   * @return eventResponse
   */
  @javax.annotation.Nullable
  public EventResponseEnum getEventResponse() {
    return eventResponse;
  }

  public void setEventResponse(EventResponseEnum eventResponse) {
    this.eventResponse = eventResponse;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    GetCharactersCharacterIdCalendarEventIdAttendees200Ok getCharactersCharacterIdCalendarEventIdAttendees200Ok = (GetCharactersCharacterIdCalendarEventIdAttendees200Ok) o;
    return Objects.equals(this.characterId, getCharactersCharacterIdCalendarEventIdAttendees200Ok.characterId) &&
        Objects.equals(this.eventResponse, getCharactersCharacterIdCalendarEventIdAttendees200Ok.eventResponse);
  }

  @Override
  public int hashCode() {
    return Objects.hash(characterId, eventResponse);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class GetCharactersCharacterIdCalendarEventIdAttendees200Ok {\n");
    sb.append("    characterId: ").append(toIndentedString(characterId)).append("\n");
    sb.append("    eventResponse: ").append(toIndentedString(eventResponse)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("character_id");
    openapiFields.add("event_response");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to GetCharactersCharacterIdCalendarEventIdAttendees200Ok
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!GetCharactersCharacterIdCalendarEventIdAttendees200Ok.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in GetCharactersCharacterIdCalendarEventIdAttendees200Ok is not found in the empty JSON string", GetCharactersCharacterIdCalendarEventIdAttendees200Ok.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!GetCharactersCharacterIdCalendarEventIdAttendees200Ok.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `GetCharactersCharacterIdCalendarEventIdAttendees200Ok` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("event_response") != null && !jsonObj.get("event_response").isJsonNull()) && !jsonObj.get("event_response").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `event_response` to be a primitive type in the JSON string but got `%s`", jsonObj.get("event_response").toString()));
      }
      // validate the optional field `event_response`
      if (jsonObj.get("event_response") != null && !jsonObj.get("event_response").isJsonNull()) {
        EventResponseEnum.validateJsonElement(jsonObj.get("event_response"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!GetCharactersCharacterIdCalendarEventIdAttendees200Ok.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'GetCharactersCharacterIdCalendarEventIdAttendees200Ok' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<GetCharactersCharacterIdCalendarEventIdAttendees200Ok> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(GetCharactersCharacterIdCalendarEventIdAttendees200Ok.class));

       return (TypeAdapter<T>) new TypeAdapter<GetCharactersCharacterIdCalendarEventIdAttendees200Ok>() {
           @Override
           public void write(JsonWriter out, GetCharactersCharacterIdCalendarEventIdAttendees200Ok value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public GetCharactersCharacterIdCalendarEventIdAttendees200Ok read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of GetCharactersCharacterIdCalendarEventIdAttendees200Ok given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of GetCharactersCharacterIdCalendarEventIdAttendees200Ok
   * @throws IOException if the JSON string is invalid with respect to GetCharactersCharacterIdCalendarEventIdAttendees200Ok
   */
  public static GetCharactersCharacterIdCalendarEventIdAttendees200Ok fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, GetCharactersCharacterIdCalendarEventIdAttendees200Ok.class);
  }

  /**
   * Convert an instance of GetCharactersCharacterIdCalendarEventIdAttendees200Ok to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

