/*
 * Browshot API
 * Take screenshots of any website in real time
 *
 * The version of the OpenAPI document: 1.17.0
 * Contact: support@browshot.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiCallback;
import org.openapitools.client.ApiClient;
import org.openapitools.client.ApiException;
import org.openapitools.client.ApiResponse;
import org.openapitools.client.Configuration;
import org.openapitools.client.Pair;
import org.openapitools.client.ProgressRequestBody;
import org.openapitools.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import org.openapitools.client.model.Batch;
import org.openapitools.client.model.BatchError;
import java.io.File;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class BatchApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public BatchApi() {
        this(Configuration.getDefaultApiClient());
    }

    public BatchApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for createBatch
     * @param instanceId instance ID to use (required)
     * @param hosting hosting option - s3 or browshot (optional)
     * @param hostingHeight maximum height of the thumbnail to host (optional)
     * @param hostingWidth maximum height of the thumbnail to host (optional)
     * @param hostingScale scale of the thumbnail to host (optional, default to 1.0)
     * @param hostingBucket S3 bucket to upload the screenshot or thumbnail (required for S3) (optional)
     * @param hostingFile file name to use (for S3 only) (optional)
     * @param hostingHeaders list of headers to add to the S3 object (for S3 only) (optional)
     * @param _file text file to use (optional)
     * @param size screenshots size - \\\&quot;screen\\\&quot; (default) or \\\&quot;page\\\&quot; (optional, default to screen)
     * @param name name of the batch (optional)
     * @param width thumbnail width. (optional, default to 1024)
     * @param height thumbnail height (optional)
     * @param delay number of seconds to wait after the page has loaded. This is used to let JavaScript run longer before taking the screenshot. Use delay&#x3D;0 to take screenshots faster. (optional, default to 5)
     * @param flashDelay number of seconds to wait after the page has loaded if Flash elements are present. Use flash_delay&#x3D;0 to take screenshots faster. (optional, default to 10)
     * @param screenWidth width of the browser window. For desktop browsers only. (optional, default to 1024)
     * @param screenHeight height of the browser window. For desktop browsers only. (Note: full-page screenshots can have a height of up to 15,000px) (optional, default to 768)
     * @param priority assign priority to the screenshot (for private instances only) (optional)
     * @param referer use a custom referrer header - paid screenshots only (optional)
     * @param postData send a POST requests with post_data, useful for filling out forms - paid screenshots only (optional)
     * @param cookie set a cookie for the URL requested (see Custom POST Data, Referer and Cookie) Cookies should be separated by a ; - paid screenshots only (optional)
     * @param script URL of javascript file to execute after the page load event (optional)
     * @param details level of information available with screenshot/info (optional, default to 2)
     * @param html saves the HTML of the rendered page which can be retrieved by the API call screenshot/html. This feature costs *1 credit* per screenshot. (optional, default to 0)
     * @param maxWait maximum number of seconds to wait before triggering the PageLoad event. Note that delay will still be used. (default: 0 &#x3D; disabled) (optional, default to 0)
     * @param headers any custom HTTP headers. (Not supported with Internet Explorer) (optional)
     * @param format image as PNG or JPEG (optional, default to png)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> batch information </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Batch not created </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call createBatchCall(Integer instanceId, String hosting, Integer hostingHeight, Integer hostingWidth, Float hostingScale, String hostingBucket, String hostingFile, String hostingHeaders, File _file, String size, String name, Integer width, Integer height, Integer delay, Integer flashDelay, Integer screenWidth, Integer screenHeight, Integer priority, String referer, String postData, String cookie, String script, Integer details, Integer html, Integer maxWait, String headers, String format, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/batch/ceate";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (instanceId != null) {
            localVarFormParams.put("instance_id", instanceId);
        }

        if (_file != null) {
            localVarFormParams.put("file", _file);
        }

        if (size != null) {
            localVarFormParams.put("size", size);
        }

        if (name != null) {
            localVarFormParams.put("name", name);
        }

        if (width != null) {
            localVarFormParams.put("width", width);
        }

        if (height != null) {
            localVarFormParams.put("height", height);
        }

        if (delay != null) {
            localVarFormParams.put("delay", delay);
        }

        if (flashDelay != null) {
            localVarFormParams.put("flash_delay", flashDelay);
        }

        if (screenWidth != null) {
            localVarFormParams.put("screen_width", screenWidth);
        }

        if (screenHeight != null) {
            localVarFormParams.put("screen_height", screenHeight);
        }

        if (priority != null) {
            localVarFormParams.put("priority", priority);
        }

        if (referer != null) {
            localVarFormParams.put("referer", referer);
        }

        if (postData != null) {
            localVarFormParams.put("post_data", postData);
        }

        if (cookie != null) {
            localVarFormParams.put("cookie", cookie);
        }

        if (script != null) {
            localVarFormParams.put("script", script);
        }

        if (details != null) {
            localVarFormParams.put("details", details);
        }

        if (html != null) {
            localVarFormParams.put("html", html);
        }

        if (maxWait != null) {
            localVarFormParams.put("max_wait", maxWait);
        }

        if (headers != null) {
            localVarFormParams.put("headers", headers);
        }

        if (format != null) {
            localVarFormParams.put("format", format);
        }

        if (hosting != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("hosting", hosting));
        }

        if (hostingHeight != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("hosting_height", hostingHeight));
        }

        if (hostingWidth != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("hosting_width", hostingWidth));
        }

        if (hostingScale != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("hosting_scale", hostingScale));
        }

        if (hostingBucket != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("hosting_bucket", hostingBucket));
        }

        if (hostingFile != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("hosting_file", hostingFile));
        }

        if (hostingHeaders != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("hosting_headers", hostingHeaders));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "multipart/form-data"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "apiKeyQuery" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call createBatchValidateBeforeCall(Integer instanceId, String hosting, Integer hostingHeight, Integer hostingWidth, Float hostingScale, String hostingBucket, String hostingFile, String hostingHeaders, File _file, String size, String name, Integer width, Integer height, Integer delay, Integer flashDelay, Integer screenWidth, Integer screenHeight, Integer priority, String referer, String postData, String cookie, String script, Integer details, Integer html, Integer maxWait, String headers, String format, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'instanceId' is set
        if (instanceId == null) {
            throw new ApiException("Missing the required parameter 'instanceId' when calling createBatch(Async)");
        }

        return createBatchCall(instanceId, hosting, hostingHeight, hostingWidth, hostingScale, hostingBucket, hostingFile, hostingHeaders, _file, size, name, width, height, delay, flashDelay, screenWidth, screenHeight, priority, referer, postData, cookie, script, details, html, maxWait, headers, format, _callback);

    }

    /**
     * Requests thousands of screenshtos at once
     * Get hundreds or thousands of screenshots from a text file. You can use this API call or the dashboard. Unlike the other API calls, you must issue a POST request with the Content-Type \&quot;multipart/form-data\&quot; in order to upload the text file. The text file must contain the list of URLs to request, 1 URL per line. Failed screenshots will be tried up to 3 times before giving up. 
     * @param instanceId instance ID to use (required)
     * @param hosting hosting option - s3 or browshot (optional)
     * @param hostingHeight maximum height of the thumbnail to host (optional)
     * @param hostingWidth maximum height of the thumbnail to host (optional)
     * @param hostingScale scale of the thumbnail to host (optional, default to 1.0)
     * @param hostingBucket S3 bucket to upload the screenshot or thumbnail (required for S3) (optional)
     * @param hostingFile file name to use (for S3 only) (optional)
     * @param hostingHeaders list of headers to add to the S3 object (for S3 only) (optional)
     * @param _file text file to use (optional)
     * @param size screenshots size - \\\&quot;screen\\\&quot; (default) or \\\&quot;page\\\&quot; (optional, default to screen)
     * @param name name of the batch (optional)
     * @param width thumbnail width. (optional, default to 1024)
     * @param height thumbnail height (optional)
     * @param delay number of seconds to wait after the page has loaded. This is used to let JavaScript run longer before taking the screenshot. Use delay&#x3D;0 to take screenshots faster. (optional, default to 5)
     * @param flashDelay number of seconds to wait after the page has loaded if Flash elements are present. Use flash_delay&#x3D;0 to take screenshots faster. (optional, default to 10)
     * @param screenWidth width of the browser window. For desktop browsers only. (optional, default to 1024)
     * @param screenHeight height of the browser window. For desktop browsers only. (Note: full-page screenshots can have a height of up to 15,000px) (optional, default to 768)
     * @param priority assign priority to the screenshot (for private instances only) (optional)
     * @param referer use a custom referrer header - paid screenshots only (optional)
     * @param postData send a POST requests with post_data, useful for filling out forms - paid screenshots only (optional)
     * @param cookie set a cookie for the URL requested (see Custom POST Data, Referer and Cookie) Cookies should be separated by a ; - paid screenshots only (optional)
     * @param script URL of javascript file to execute after the page load event (optional)
     * @param details level of information available with screenshot/info (optional, default to 2)
     * @param html saves the HTML of the rendered page which can be retrieved by the API call screenshot/html. This feature costs *1 credit* per screenshot. (optional, default to 0)
     * @param maxWait maximum number of seconds to wait before triggering the PageLoad event. Note that delay will still be used. (default: 0 &#x3D; disabled) (optional, default to 0)
     * @param headers any custom HTTP headers. (Not supported with Internet Explorer) (optional)
     * @param format image as PNG or JPEG (optional, default to png)
     * @return List&lt;Batch&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> batch information </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Batch not created </td><td>  -  </td></tr>
     </table>
     */
    public List<Batch> createBatch(Integer instanceId, String hosting, Integer hostingHeight, Integer hostingWidth, Float hostingScale, String hostingBucket, String hostingFile, String hostingHeaders, File _file, String size, String name, Integer width, Integer height, Integer delay, Integer flashDelay, Integer screenWidth, Integer screenHeight, Integer priority, String referer, String postData, String cookie, String script, Integer details, Integer html, Integer maxWait, String headers, String format) throws ApiException {
        ApiResponse<List<Batch>> localVarResp = createBatchWithHttpInfo(instanceId, hosting, hostingHeight, hostingWidth, hostingScale, hostingBucket, hostingFile, hostingHeaders, _file, size, name, width, height, delay, flashDelay, screenWidth, screenHeight, priority, referer, postData, cookie, script, details, html, maxWait, headers, format);
        return localVarResp.getData();
    }

    /**
     * Requests thousands of screenshtos at once
     * Get hundreds or thousands of screenshots from a text file. You can use this API call or the dashboard. Unlike the other API calls, you must issue a POST request with the Content-Type \&quot;multipart/form-data\&quot; in order to upload the text file. The text file must contain the list of URLs to request, 1 URL per line. Failed screenshots will be tried up to 3 times before giving up. 
     * @param instanceId instance ID to use (required)
     * @param hosting hosting option - s3 or browshot (optional)
     * @param hostingHeight maximum height of the thumbnail to host (optional)
     * @param hostingWidth maximum height of the thumbnail to host (optional)
     * @param hostingScale scale of the thumbnail to host (optional, default to 1.0)
     * @param hostingBucket S3 bucket to upload the screenshot or thumbnail (required for S3) (optional)
     * @param hostingFile file name to use (for S3 only) (optional)
     * @param hostingHeaders list of headers to add to the S3 object (for S3 only) (optional)
     * @param _file text file to use (optional)
     * @param size screenshots size - \\\&quot;screen\\\&quot; (default) or \\\&quot;page\\\&quot; (optional, default to screen)
     * @param name name of the batch (optional)
     * @param width thumbnail width. (optional, default to 1024)
     * @param height thumbnail height (optional)
     * @param delay number of seconds to wait after the page has loaded. This is used to let JavaScript run longer before taking the screenshot. Use delay&#x3D;0 to take screenshots faster. (optional, default to 5)
     * @param flashDelay number of seconds to wait after the page has loaded if Flash elements are present. Use flash_delay&#x3D;0 to take screenshots faster. (optional, default to 10)
     * @param screenWidth width of the browser window. For desktop browsers only. (optional, default to 1024)
     * @param screenHeight height of the browser window. For desktop browsers only. (Note: full-page screenshots can have a height of up to 15,000px) (optional, default to 768)
     * @param priority assign priority to the screenshot (for private instances only) (optional)
     * @param referer use a custom referrer header - paid screenshots only (optional)
     * @param postData send a POST requests with post_data, useful for filling out forms - paid screenshots only (optional)
     * @param cookie set a cookie for the URL requested (see Custom POST Data, Referer and Cookie) Cookies should be separated by a ; - paid screenshots only (optional)
     * @param script URL of javascript file to execute after the page load event (optional)
     * @param details level of information available with screenshot/info (optional, default to 2)
     * @param html saves the HTML of the rendered page which can be retrieved by the API call screenshot/html. This feature costs *1 credit* per screenshot. (optional, default to 0)
     * @param maxWait maximum number of seconds to wait before triggering the PageLoad event. Note that delay will still be used. (default: 0 &#x3D; disabled) (optional, default to 0)
     * @param headers any custom HTTP headers. (Not supported with Internet Explorer) (optional)
     * @param format image as PNG or JPEG (optional, default to png)
     * @return ApiResponse&lt;List&lt;Batch&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> batch information </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Batch not created </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<Batch>> createBatchWithHttpInfo(Integer instanceId, String hosting, Integer hostingHeight, Integer hostingWidth, Float hostingScale, String hostingBucket, String hostingFile, String hostingHeaders, File _file, String size, String name, Integer width, Integer height, Integer delay, Integer flashDelay, Integer screenWidth, Integer screenHeight, Integer priority, String referer, String postData, String cookie, String script, Integer details, Integer html, Integer maxWait, String headers, String format) throws ApiException {
        okhttp3.Call localVarCall = createBatchValidateBeforeCall(instanceId, hosting, hostingHeight, hostingWidth, hostingScale, hostingBucket, hostingFile, hostingHeaders, _file, size, name, width, height, delay, flashDelay, screenWidth, screenHeight, priority, referer, postData, cookie, script, details, html, maxWait, headers, format, null);
        Type localVarReturnType = new TypeToken<List<Batch>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Requests thousands of screenshtos at once (asynchronously)
     * Get hundreds or thousands of screenshots from a text file. You can use this API call or the dashboard. Unlike the other API calls, you must issue a POST request with the Content-Type \&quot;multipart/form-data\&quot; in order to upload the text file. The text file must contain the list of URLs to request, 1 URL per line. Failed screenshots will be tried up to 3 times before giving up. 
     * @param instanceId instance ID to use (required)
     * @param hosting hosting option - s3 or browshot (optional)
     * @param hostingHeight maximum height of the thumbnail to host (optional)
     * @param hostingWidth maximum height of the thumbnail to host (optional)
     * @param hostingScale scale of the thumbnail to host (optional, default to 1.0)
     * @param hostingBucket S3 bucket to upload the screenshot or thumbnail (required for S3) (optional)
     * @param hostingFile file name to use (for S3 only) (optional)
     * @param hostingHeaders list of headers to add to the S3 object (for S3 only) (optional)
     * @param _file text file to use (optional)
     * @param size screenshots size - \\\&quot;screen\\\&quot; (default) or \\\&quot;page\\\&quot; (optional, default to screen)
     * @param name name of the batch (optional)
     * @param width thumbnail width. (optional, default to 1024)
     * @param height thumbnail height (optional)
     * @param delay number of seconds to wait after the page has loaded. This is used to let JavaScript run longer before taking the screenshot. Use delay&#x3D;0 to take screenshots faster. (optional, default to 5)
     * @param flashDelay number of seconds to wait after the page has loaded if Flash elements are present. Use flash_delay&#x3D;0 to take screenshots faster. (optional, default to 10)
     * @param screenWidth width of the browser window. For desktop browsers only. (optional, default to 1024)
     * @param screenHeight height of the browser window. For desktop browsers only. (Note: full-page screenshots can have a height of up to 15,000px) (optional, default to 768)
     * @param priority assign priority to the screenshot (for private instances only) (optional)
     * @param referer use a custom referrer header - paid screenshots only (optional)
     * @param postData send a POST requests with post_data, useful for filling out forms - paid screenshots only (optional)
     * @param cookie set a cookie for the URL requested (see Custom POST Data, Referer and Cookie) Cookies should be separated by a ; - paid screenshots only (optional)
     * @param script URL of javascript file to execute after the page load event (optional)
     * @param details level of information available with screenshot/info (optional, default to 2)
     * @param html saves the HTML of the rendered page which can be retrieved by the API call screenshot/html. This feature costs *1 credit* per screenshot. (optional, default to 0)
     * @param maxWait maximum number of seconds to wait before triggering the PageLoad event. Note that delay will still be used. (default: 0 &#x3D; disabled) (optional, default to 0)
     * @param headers any custom HTTP headers. (Not supported with Internet Explorer) (optional)
     * @param format image as PNG or JPEG (optional, default to png)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> batch information </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Batch not created </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call createBatchAsync(Integer instanceId, String hosting, Integer hostingHeight, Integer hostingWidth, Float hostingScale, String hostingBucket, String hostingFile, String hostingHeaders, File _file, String size, String name, Integer width, Integer height, Integer delay, Integer flashDelay, Integer screenWidth, Integer screenHeight, Integer priority, String referer, String postData, String cookie, String script, Integer details, Integer html, Integer maxWait, String headers, String format, final ApiCallback<List<Batch>> _callback) throws ApiException {

        okhttp3.Call localVarCall = createBatchValidateBeforeCall(instanceId, hosting, hostingHeight, hostingWidth, hostingScale, hostingBucket, hostingFile, hostingHeaders, _file, size, name, width, height, delay, flashDelay, screenWidth, screenHeight, priority, referer, postData, cookie, script, details, html, maxWait, headers, format, _callback);
        Type localVarReturnType = new TypeToken<List<Batch>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getBatchInfo
     * @param id batch ID (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> batch information </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Batch not found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getBatchInfoCall(Integer id, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/batch/info";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (id != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("id", id));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "apiKeyQuery" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getBatchInfoValidateBeforeCall(Integer id, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling getBatchInfo(Async)");
        }

        return getBatchInfoCall(id, _callback);

    }

    /**
     * Get the batch status
     * Get the status of a batch requested through the API or through the dashboard. 
     * @param id batch ID (required)
     * @return Batch
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> batch information </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Batch not found </td><td>  -  </td></tr>
     </table>
     */
    public Batch getBatchInfo(Integer id) throws ApiException {
        ApiResponse<Batch> localVarResp = getBatchInfoWithHttpInfo(id);
        return localVarResp.getData();
    }

    /**
     * Get the batch status
     * Get the status of a batch requested through the API or through the dashboard. 
     * @param id batch ID (required)
     * @return ApiResponse&lt;Batch&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> batch information </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Batch not found </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Batch> getBatchInfoWithHttpInfo(Integer id) throws ApiException {
        okhttp3.Call localVarCall = getBatchInfoValidateBeforeCall(id, null);
        Type localVarReturnType = new TypeToken<Batch>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get the batch status (asynchronously)
     * Get the status of a batch requested through the API or through the dashboard. 
     * @param id batch ID (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> batch information </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Batch not found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getBatchInfoAsync(Integer id, final ApiCallback<Batch> _callback) throws ApiException {

        okhttp3.Call localVarCall = getBatchInfoValidateBeforeCall(id, _callback);
        Type localVarReturnType = new TypeToken<Batch>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
