/*
 * Browshot API
 * Take screenshots of any website in real time
 *
 * The version of the OpenAPI document: 1.17.0
 * Contact: support@browshot.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.Instance;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * InstanceList
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:00:44.909980-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class InstanceList {
  public static final String SERIALIZED_NAME_FREE = "free";
  @SerializedName(SERIALIZED_NAME_FREE)
  private List<Instance> free = new ArrayList<>();

  public static final String SERIALIZED_NAME_PRIVATE = "private";
  @SerializedName(SERIALIZED_NAME_PRIVATE)
  private List<Instance> _private = new ArrayList<>();

  public static final String SERIALIZED_NAME_SHARED = "shared";
  @SerializedName(SERIALIZED_NAME_SHARED)
  private List<Instance> shared = new ArrayList<>();

  public InstanceList() {
  }

  public InstanceList free(List<Instance> free) {
    this.free = free;
    return this;
  }

  public InstanceList addFreeItem(Instance freeItem) {
    if (this.free == null) {
      this.free = new ArrayList<>();
    }
    this.free.add(freeItem);
    return this;
  }

  /**
   * Get free
   * @return free
   */
  @javax.annotation.Nullable
  public List<Instance> getFree() {
    return free;
  }

  public void setFree(List<Instance> free) {
    this.free = free;
  }


  public InstanceList _private(List<Instance> _private) {
    this._private = _private;
    return this;
  }

  public InstanceList addPrivateItem(Instance _privateItem) {
    if (this._private == null) {
      this._private = new ArrayList<>();
    }
    this._private.add(_privateItem);
    return this;
  }

  /**
   * Get _private
   * @return _private
   */
  @javax.annotation.Nullable
  public List<Instance> getPrivate() {
    return _private;
  }

  public void setPrivate(List<Instance> _private) {
    this._private = _private;
  }


  public InstanceList shared(List<Instance> shared) {
    this.shared = shared;
    return this;
  }

  public InstanceList addSharedItem(Instance sharedItem) {
    if (this.shared == null) {
      this.shared = new ArrayList<>();
    }
    this.shared.add(sharedItem);
    return this;
  }

  /**
   * Get shared
   * @return shared
   */
  @javax.annotation.Nullable
  public List<Instance> getShared() {
    return shared;
  }

  public void setShared(List<Instance> shared) {
    this.shared = shared;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    InstanceList instanceList = (InstanceList) o;
    return Objects.equals(this.free, instanceList.free) &&
        Objects.equals(this._private, instanceList._private) &&
        Objects.equals(this.shared, instanceList.shared);
  }

  @Override
  public int hashCode() {
    return Objects.hash(free, _private, shared);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class InstanceList {\n");
    sb.append("    free: ").append(toIndentedString(free)).append("\n");
    sb.append("    _private: ").append(toIndentedString(_private)).append("\n");
    sb.append("    shared: ").append(toIndentedString(shared)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("free");
    openapiFields.add("private");
    openapiFields.add("shared");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to InstanceList
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!InstanceList.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in InstanceList is not found in the empty JSON string", InstanceList.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!InstanceList.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `InstanceList` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if (jsonObj.get("free") != null && !jsonObj.get("free").isJsonNull()) {
        JsonArray jsonArrayfree = jsonObj.getAsJsonArray("free");
        if (jsonArrayfree != null) {
          // ensure the json data is an array
          if (!jsonObj.get("free").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `free` to be an array in the JSON string but got `%s`", jsonObj.get("free").toString()));
          }

          // validate the optional field `free` (array)
          for (int i = 0; i < jsonArrayfree.size(); i++) {
            Instance.validateJsonElement(jsonArrayfree.get(i));
          };
        }
      }
      if (jsonObj.get("private") != null && !jsonObj.get("private").isJsonNull()) {
        JsonArray jsonArray_private = jsonObj.getAsJsonArray("private");
        if (jsonArray_private != null) {
          // ensure the json data is an array
          if (!jsonObj.get("private").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `private` to be an array in the JSON string but got `%s`", jsonObj.get("private").toString()));
          }

          // validate the optional field `private` (array)
          for (int i = 0; i < jsonArray_private.size(); i++) {
            Instance.validateJsonElement(jsonArray_private.get(i));
          };
        }
      }
      if (jsonObj.get("shared") != null && !jsonObj.get("shared").isJsonNull()) {
        JsonArray jsonArrayshared = jsonObj.getAsJsonArray("shared");
        if (jsonArrayshared != null) {
          // ensure the json data is an array
          if (!jsonObj.get("shared").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `shared` to be an array in the JSON string but got `%s`", jsonObj.get("shared").toString()));
          }

          // validate the optional field `shared` (array)
          for (int i = 0; i < jsonArrayshared.size(); i++) {
            Instance.validateJsonElement(jsonArrayshared.get(i));
          };
        }
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!InstanceList.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'InstanceList' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<InstanceList> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(InstanceList.class));

       return (TypeAdapter<T>) new TypeAdapter<InstanceList>() {
           @Override
           public void write(JsonWriter out, InstanceList value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public InstanceList read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of InstanceList given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of InstanceList
   * @throws IOException if the JSON string is invalid with respect to InstanceList
   */
  public static InstanceList fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, InstanceList.class);
  }

  /**
   * Convert an instance of InstanceList to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

