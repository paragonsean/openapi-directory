/*
 * Browshot API
 * Take screenshots of any website in real time
 *
 * The version of the OpenAPI document: 1.17.0
 * Contact: support@browshot.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Screenshot
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:00:44.909980-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class Screenshot {
  public static final String SERIALIZED_NAME_COOKIE = "cookie";
  @SerializedName(SERIALIZED_NAME_COOKIE)
  private String cookie;

  public static final String SERIALIZED_NAME_COST = "cost";
  @SerializedName(SERIALIZED_NAME_COST)
  private Integer cost;

  public static final String SERIALIZED_NAME_DELAY = "delay";
  @SerializedName(SERIALIZED_NAME_DELAY)
  private Integer delay;

  public static final String SERIALIZED_NAME_DETAILS = "details";
  @SerializedName(SERIALIZED_NAME_DETAILS)
  private Integer details;

  public static final String SERIALIZED_NAME_ERROR = "error";
  @SerializedName(SERIALIZED_NAME_ERROR)
  private String error;

  public static final String SERIALIZED_NAME_FINAL_URL = "final_url";
  @SerializedName(SERIALIZED_NAME_FINAL_URL)
  private String finalUrl;

  public static final String SERIALIZED_NAME_FLASH_DELAY = "flash_delay";
  @SerializedName(SERIALIZED_NAME_FLASH_DELAY)
  private Integer flashDelay;

  public static final String SERIALIZED_NAME_HEIGHT = "height";
  @SerializedName(SERIALIZED_NAME_HEIGHT)
  private Integer height;

  public static final String SERIALIZED_NAME_ID = "id";
  @SerializedName(SERIALIZED_NAME_ID)
  private Integer id;

  public static final String SERIALIZED_NAME_INSTANCE_ID = "instance_id";
  @SerializedName(SERIALIZED_NAME_INSTANCE_ID)
  private Integer instanceId;

  public static final String SERIALIZED_NAME_POST_DATA = "post_data";
  @SerializedName(SERIALIZED_NAME_POST_DATA)
  private String postData;

  public static final String SERIALIZED_NAME_PRIORITY = "priority";
  @SerializedName(SERIALIZED_NAME_PRIORITY)
  private Integer priority;

  public static final String SERIALIZED_NAME_REFERER = "referer";
  @SerializedName(SERIALIZED_NAME_REFERER)
  private String referer;

  public static final String SERIALIZED_NAME_SCALE = "scale";
  @SerializedName(SERIALIZED_NAME_SCALE)
  private Double scale;

  public static final String SERIALIZED_NAME_SCREENSHOT_URL = "screenshot_url";
  @SerializedName(SERIALIZED_NAME_SCREENSHOT_URL)
  private Object screenshotUrl;

  public static final String SERIALIZED_NAME_SCRIPT = "script";
  @SerializedName(SERIALIZED_NAME_SCRIPT)
  private String script;

  public static final String SERIALIZED_NAME_SHARED_URL = "shared_url";
  @SerializedName(SERIALIZED_NAME_SHARED_URL)
  private String sharedUrl;

  /**
   * screenshot size requested
   */
  @JsonAdapter(SizeEnum.Adapter.class)
  public enum SizeEnum {
    SCREEN("screen"),
    
    PAGE("page");

    private String value;

    SizeEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static SizeEnum fromValue(String value) {
      for (SizeEnum b : SizeEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<SizeEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final SizeEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public SizeEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return SizeEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      SizeEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_SIZE = "size";
  @SerializedName(SERIALIZED_NAME_SIZE)
  private SizeEnum size;

  /**
   * status of the request: \&quot;in_queue\&quot;, \&quot;processing\&quot;, \&quot;finished\&quot;, \&quot;error\&quot; 
   */
  @JsonAdapter(StatusEnum.Adapter.class)
  public enum StatusEnum {
    IN_QUEUE("in_queue"),
    
    PROCESSING("processing"),
    
    FINISHED("finished"),
    
    ERROR("error");

    private String value;

    StatusEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static StatusEnum fromValue(String value) {
      for (StatusEnum b : StatusEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<StatusEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final StatusEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public StatusEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return StatusEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      StatusEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_STATUS = "status";
  @SerializedName(SERIALIZED_NAME_STATUS)
  private StatusEnum status;

  public static final String SERIALIZED_NAME_URL = "url";
  @SerializedName(SERIALIZED_NAME_URL)
  private String url;

  public static final String SERIALIZED_NAME_WIDTH = "width";
  @SerializedName(SERIALIZED_NAME_WIDTH)
  private Integer width;

  public Screenshot() {
  }

  public Screenshot cookie(String cookie) {
    this.cookie = cookie;
    return this;
  }

  /**
   * custom cookie used (see Custom POST Data, Referer and Cookie)
   * @return cookie
   */
  @javax.annotation.Nullable
  public String getCookie() {
    return cookie;
  }

  public void setCookie(String cookie) {
    this.cookie = cookie;
  }


  public Screenshot cost(Integer cost) {
    this.cost = cost;
    return this;
  }

  /**
   * number of credits spent for the screenshot
   * @return cost
   */
  @javax.annotation.Nullable
  public Integer getCost() {
    return cost;
  }

  public void setCost(Integer cost) {
    this.cost = cost;
  }


  public Screenshot delay(Integer delay) {
    this.delay = delay;
    return this;
  }

  /**
   * number of seconds to wait after page load
   * @return delay
   */
  @javax.annotation.Nullable
  public Integer getDelay() {
    return delay;
  }

  public void setDelay(Integer delay) {
    this.delay = delay;
  }


  public Screenshot details(Integer details) {
    this.details = details;
    return this;
  }

  /**
   * level of details about the screenshot and the page
   * minimum: 0
   * maximum: 3
   * @return details
   */
  @javax.annotation.Nullable
  public Integer getDetails() {
    return details;
  }

  public void setDetails(Integer details) {
    this.details = details;
  }


  public Screenshot error(String error) {
    this.error = error;
    return this;
  }

  /**
   * description of the problem that occurred
   * @return error
   */
  @javax.annotation.Nullable
  public String getError() {
    return error;
  }

  public void setError(String error) {
    this.error = error;
  }


  public Screenshot finalUrl(String finalUrl) {
    this.finalUrl = finalUrl;
    return this;
  }

  /**
   * URL of the screenshot (redirections can occur)
   * @return finalUrl
   */
  @javax.annotation.Nullable
  public String getFinalUrl() {
    return finalUrl;
  }

  public void setFinalUrl(String finalUrl) {
    this.finalUrl = finalUrl;
  }


  public Screenshot flashDelay(Integer flashDelay) {
    this.flashDelay = flashDelay;
    return this;
  }

  /**
   * number of seconds to wait after page load if Flash elements are present
   * @return flashDelay
   */
  @javax.annotation.Nullable
  public Integer getFlashDelay() {
    return flashDelay;
  }

  public void setFlashDelay(Integer flashDelay) {
    this.flashDelay = flashDelay;
  }


  public Screenshot height(Integer height) {
    this.height = height;
    return this;
  }

  /**
   * screenshot height
   * @return height
   */
  @javax.annotation.Nullable
  public Integer getHeight() {
    return height;
  }

  public void setHeight(Integer height) {
    this.height = height;
  }


  public Screenshot id(Integer id) {
    this.id = id;
    return this;
  }

  /**
   * screenshot ID
   * @return id
   */
  @javax.annotation.Nonnull
  public Integer getId() {
    return id;
  }

  public void setId(Integer id) {
    this.id = id;
  }


  public Screenshot instanceId(Integer instanceId) {
    this.instanceId = instanceId;
    return this;
  }

  /**
   * instance ID used for the screenshot
   * @return instanceId
   */
  @javax.annotation.Nonnull
  public Integer getInstanceId() {
    return instanceId;
  }

  public void setInstanceId(Integer instanceId) {
    this.instanceId = instanceId;
  }


  public Screenshot postData(String postData) {
    this.postData = postData;
    return this;
  }

  /**
   * POST data sent (see Custom POST Data, Referer and Cookie)
   * @return postData
   */
  @javax.annotation.Nullable
  public String getPostData() {
    return postData;
  }

  public void setPostData(String postData) {
    this.postData = postData;
  }


  public Screenshot priority(Integer priority) {
    this.priority = priority;
    return this;
  }

  /**
   * priority given to the screenshot: high (1) to low (3)
   * minimum: 1
   * maximum: 3
   * @return priority
   */
  @javax.annotation.Nullable
  public Integer getPriority() {
    return priority;
  }

  public void setPriority(Integer priority) {
    this.priority = priority;
  }


  public Screenshot referer(String referer) {
    this.referer = referer;
    return this;
  }

  /**
   * custom referrer used (see Custom POST Data, Referer and Cookie)
   * @return referer
   */
  @javax.annotation.Nullable
  public String getReferer() {
    return referer;
  }

  public void setReferer(String referer) {
    this.referer = referer;
  }


  public Screenshot scale(Double scale) {
    this.scale = scale;
    return this;
  }

  /**
   * image scale. Always 1 for desktop browsers; mobiles may change the scale (zoom in or zoom out) to fit the page on the screen
   * @return scale
   */
  @javax.annotation.Nullable
  public Double getScale() {
    return scale;
  }

  public void setScale(Double scale) {
    this.scale = scale;
  }


  public Screenshot screenshotUrl(Object screenshotUrl) {
    this.screenshotUrl = screenshotUrl;
    return this;
  }

  /**
   * URL to download the screenshot
   * @return screenshotUrl
   */
  @javax.annotation.Nullable
  public Object getScreenshotUrl() {
    return screenshotUrl;
  }

  public void setScreenshotUrl(Object screenshotUrl) {
    this.screenshotUrl = screenshotUrl;
  }


  public Screenshot script(String script) {
    this.script = script;
    return this;
  }

  /**
   * URL of optional javascript file executed after the page load event
   * @return script
   */
  @javax.annotation.Nullable
  public String getScript() {
    return script;
  }

  public void setScript(String script) {
    this.script = script;
  }


  public Screenshot sharedUrl(String sharedUrl) {
    this.sharedUrl = sharedUrl;
    return this;
  }

  /**
   * if the screenshot was shared, show the public URL
   * @return sharedUrl
   */
  @javax.annotation.Nullable
  public String getSharedUrl() {
    return sharedUrl;
  }

  public void setSharedUrl(String sharedUrl) {
    this.sharedUrl = sharedUrl;
  }


  public Screenshot size(SizeEnum size) {
    this.size = size;
    return this;
  }

  /**
   * screenshot size requested
   * @return size
   */
  @javax.annotation.Nullable
  public SizeEnum getSize() {
    return size;
  }

  public void setSize(SizeEnum size) {
    this.size = size;
  }


  public Screenshot status(StatusEnum status) {
    this.status = status;
    return this;
  }

  /**
   * status of the request: \&quot;in_queue\&quot;, \&quot;processing\&quot;, \&quot;finished\&quot;, \&quot;error\&quot; 
   * @return status
   */
  @javax.annotation.Nonnull
  public StatusEnum getStatus() {
    return status;
  }

  public void setStatus(StatusEnum status) {
    this.status = status;
  }


  public Screenshot url(String url) {
    this.url = url;
    return this;
  }

  /**
   * original URL requested
   * @return url
   */
  @javax.annotation.Nonnull
  public String getUrl() {
    return url;
  }

  public void setUrl(String url) {
    this.url = url;
  }


  public Screenshot width(Integer width) {
    this.width = width;
    return this;
  }

  /**
   * screenshot width
   * @return width
   */
  @javax.annotation.Nullable
  public Integer getWidth() {
    return width;
  }

  public void setWidth(Integer width) {
    this.width = width;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    Screenshot screenshot = (Screenshot) o;
    return Objects.equals(this.cookie, screenshot.cookie) &&
        Objects.equals(this.cost, screenshot.cost) &&
        Objects.equals(this.delay, screenshot.delay) &&
        Objects.equals(this.details, screenshot.details) &&
        Objects.equals(this.error, screenshot.error) &&
        Objects.equals(this.finalUrl, screenshot.finalUrl) &&
        Objects.equals(this.flashDelay, screenshot.flashDelay) &&
        Objects.equals(this.height, screenshot.height) &&
        Objects.equals(this.id, screenshot.id) &&
        Objects.equals(this.instanceId, screenshot.instanceId) &&
        Objects.equals(this.postData, screenshot.postData) &&
        Objects.equals(this.priority, screenshot.priority) &&
        Objects.equals(this.referer, screenshot.referer) &&
        Objects.equals(this.scale, screenshot.scale) &&
        Objects.equals(this.screenshotUrl, screenshot.screenshotUrl) &&
        Objects.equals(this.script, screenshot.script) &&
        Objects.equals(this.sharedUrl, screenshot.sharedUrl) &&
        Objects.equals(this.size, screenshot.size) &&
        Objects.equals(this.status, screenshot.status) &&
        Objects.equals(this.url, screenshot.url) &&
        Objects.equals(this.width, screenshot.width);
  }

  @Override
  public int hashCode() {
    return Objects.hash(cookie, cost, delay, details, error, finalUrl, flashDelay, height, id, instanceId, postData, priority, referer, scale, screenshotUrl, script, sharedUrl, size, status, url, width);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class Screenshot {\n");
    sb.append("    cookie: ").append(toIndentedString(cookie)).append("\n");
    sb.append("    cost: ").append(toIndentedString(cost)).append("\n");
    sb.append("    delay: ").append(toIndentedString(delay)).append("\n");
    sb.append("    details: ").append(toIndentedString(details)).append("\n");
    sb.append("    error: ").append(toIndentedString(error)).append("\n");
    sb.append("    finalUrl: ").append(toIndentedString(finalUrl)).append("\n");
    sb.append("    flashDelay: ").append(toIndentedString(flashDelay)).append("\n");
    sb.append("    height: ").append(toIndentedString(height)).append("\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    instanceId: ").append(toIndentedString(instanceId)).append("\n");
    sb.append("    postData: ").append(toIndentedString(postData)).append("\n");
    sb.append("    priority: ").append(toIndentedString(priority)).append("\n");
    sb.append("    referer: ").append(toIndentedString(referer)).append("\n");
    sb.append("    scale: ").append(toIndentedString(scale)).append("\n");
    sb.append("    screenshotUrl: ").append(toIndentedString(screenshotUrl)).append("\n");
    sb.append("    script: ").append(toIndentedString(script)).append("\n");
    sb.append("    sharedUrl: ").append(toIndentedString(sharedUrl)).append("\n");
    sb.append("    size: ").append(toIndentedString(size)).append("\n");
    sb.append("    status: ").append(toIndentedString(status)).append("\n");
    sb.append("    url: ").append(toIndentedString(url)).append("\n");
    sb.append("    width: ").append(toIndentedString(width)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("cookie");
    openapiFields.add("cost");
    openapiFields.add("delay");
    openapiFields.add("details");
    openapiFields.add("error");
    openapiFields.add("final_url");
    openapiFields.add("flash_delay");
    openapiFields.add("height");
    openapiFields.add("id");
    openapiFields.add("instance_id");
    openapiFields.add("post_data");
    openapiFields.add("priority");
    openapiFields.add("referer");
    openapiFields.add("scale");
    openapiFields.add("screenshot_url");
    openapiFields.add("script");
    openapiFields.add("shared_url");
    openapiFields.add("size");
    openapiFields.add("status");
    openapiFields.add("url");
    openapiFields.add("width");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("id");
    openapiRequiredFields.add("instance_id");
    openapiRequiredFields.add("status");
    openapiRequiredFields.add("url");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to Screenshot
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!Screenshot.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in Screenshot is not found in the empty JSON string", Screenshot.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!Screenshot.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `Screenshot` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : Screenshot.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("cookie") != null && !jsonObj.get("cookie").isJsonNull()) && !jsonObj.get("cookie").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `cookie` to be a primitive type in the JSON string but got `%s`", jsonObj.get("cookie").toString()));
      }
      if ((jsonObj.get("error") != null && !jsonObj.get("error").isJsonNull()) && !jsonObj.get("error").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `error` to be a primitive type in the JSON string but got `%s`", jsonObj.get("error").toString()));
      }
      if ((jsonObj.get("final_url") != null && !jsonObj.get("final_url").isJsonNull()) && !jsonObj.get("final_url").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `final_url` to be a primitive type in the JSON string but got `%s`", jsonObj.get("final_url").toString()));
      }
      if ((jsonObj.get("post_data") != null && !jsonObj.get("post_data").isJsonNull()) && !jsonObj.get("post_data").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `post_data` to be a primitive type in the JSON string but got `%s`", jsonObj.get("post_data").toString()));
      }
      if ((jsonObj.get("referer") != null && !jsonObj.get("referer").isJsonNull()) && !jsonObj.get("referer").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `referer` to be a primitive type in the JSON string but got `%s`", jsonObj.get("referer").toString()));
      }
      if ((jsonObj.get("script") != null && !jsonObj.get("script").isJsonNull()) && !jsonObj.get("script").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `script` to be a primitive type in the JSON string but got `%s`", jsonObj.get("script").toString()));
      }
      if ((jsonObj.get("shared_url") != null && !jsonObj.get("shared_url").isJsonNull()) && !jsonObj.get("shared_url").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `shared_url` to be a primitive type in the JSON string but got `%s`", jsonObj.get("shared_url").toString()));
      }
      if ((jsonObj.get("size") != null && !jsonObj.get("size").isJsonNull()) && !jsonObj.get("size").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `size` to be a primitive type in the JSON string but got `%s`", jsonObj.get("size").toString()));
      }
      // validate the optional field `size`
      if (jsonObj.get("size") != null && !jsonObj.get("size").isJsonNull()) {
        SizeEnum.validateJsonElement(jsonObj.get("size"));
      }
      if (!jsonObj.get("status").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `status` to be a primitive type in the JSON string but got `%s`", jsonObj.get("status").toString()));
      }
      // validate the required field `status`
      StatusEnum.validateJsonElement(jsonObj.get("status"));
      if (!jsonObj.get("url").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `url` to be a primitive type in the JSON string but got `%s`", jsonObj.get("url").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!Screenshot.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'Screenshot' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<Screenshot> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(Screenshot.class));

       return (TypeAdapter<T>) new TypeAdapter<Screenshot>() {
           @Override
           public void write(JsonWriter out, Screenshot value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public Screenshot read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of Screenshot given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of Screenshot
   * @throws IOException if the JSON string is invalid with respect to Screenshot
   */
  public static Screenshot fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, Screenshot.class);
  }

  /**
   * Convert an instance of Screenshot to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

