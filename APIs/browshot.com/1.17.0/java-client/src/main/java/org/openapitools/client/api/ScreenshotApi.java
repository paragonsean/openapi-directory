/*
 * Browshot API
 * Take screenshots of any website in real time
 *
 * The version of the OpenAPI document: 1.17.0
 * Contact: support@browshot.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiCallback;
import org.openapitools.client.ApiClient;
import org.openapitools.client.ApiException;
import org.openapitools.client.ApiResponse;
import org.openapitools.client.Configuration;
import org.openapitools.client.Pair;
import org.openapitools.client.ProgressRequestBody;
import org.openapitools.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import org.openapitools.client.model.Screenshot;
import org.openapitools.client.model.ScreenshotError;
import org.openapitools.client.model.ScreenshotHost;
import org.openapitools.client.model.ScreenshotInfoError;
import org.openapitools.client.model.ScreenshotList;
import org.openapitools.client.model.ScreenshotShort;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class ScreenshotApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public ScreenshotApi() {
        this(Configuration.getDefaultApiClient());
    }

    public ScreenshotApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for createMultipleScreenshots
     * @param url URL of the page to get a screenshot for. You can specify multiple url parameters (up to 10). (required)
     * @param instanceId instance ID to use. You can specify multiple instance_id parameters (up to 10). (required)
     * @param size screenshot size - \&quot;screen\&quot; (default) or \&quot;page\&quot; (optional, default to screen)
     * @param cache use a previous screenshot (same URL, same instance) if it was done within &lt;cache_value&gt; seconds. The default value is 24hours. Specify cache&#x3D;0 if you want a new screenshot. (optional, default to 86400)
     * @param delay number of seconds to wait after the page has loaded. This is used to let JavaScript run longer before taking the screenshot. Use delay&#x3D;0 to take screenshots faster. (optional, default to 5)
     * @param flashDelay number of seconds to wait after the page has loaded if Flash elements are present. Use flash_delay&#x3D;0 to take screenshots faster. (optional, default to 10)
     * @param screenWidth width of the browser window. For desktop browsers only. (optional, default to 1024)
     * @param screenHeight height of the browser window. For desktop browsers only. (Note: full-page screenshots can have a height of up to 15,000px) (optional, default to 768)
     * @param priority assign priority to the screenshot (for private instances only) (optional)
     * @param referer use a custom referrer header - paid screenshots only (optional)
     * @param postData send a POST requests with post_data, useful for filling out forms - paid screenshots only (optional)
     * @param cookie set a cookie for the URL requested (see Custom POST Data, Referer and Cookie) Cookies should be separated by a ; - paid screenshots only (optional)
     * @param script URL of javascript file to execute after the page load event (optional)
     * @param details level of information available with screenshot/info (optional, default to 2)
     * @param html saves the HTML of the rendered page which can be retrieved by the API call screenshot/html. This feature costs *1 credit* per screenshot. (optional, default to 0)
     * @param maxWait maximum number of seconds to wait before triggering the PageLoad event. Note that delay will still be used. (default: 0 &#x3D; disabled) (optional, default to 0)
     * @param headers any custom HTTP headers. (Not supported with Internet Explorer) (optional)
     * @param hosting hosting option - s3 or browshot (optional)
     * @param hostingHeight maximum height of the thumbnail to host (optional)
     * @param hostingWidth maximum height of the thumbnail to host (optional)
     * @param hostingScale scale of the thumbnail to host (optional, default to 1.0)
     * @param hostingBucket S3 bucket to upload the screenshot or thumbnail (required for S3) (optional)
     * @param hostingFile file name to use (for S3 only) (optional)
     * @param hostingHeaders list of headers to add to the S3 object (for S3 only) (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Request accepted </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call createMultipleScreenshotsCall(String url, Integer instanceId, String size, Integer cache, Integer delay, Integer flashDelay, Integer screenWidth, Integer screenHeight, Integer priority, String referer, String postData, String cookie, String script, Integer details, Integer html, Integer maxWait, String headers, String hosting, Integer hostingHeight, Integer hostingWidth, Float hostingScale, String hostingBucket, String hostingFile, String hostingHeaders, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/screenshot/multiple";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (url != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("url", url));
        }

        if (instanceId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("instance_id", instanceId));
        }

        if (size != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("size", size));
        }

        if (cache != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("cache", cache));
        }

        if (delay != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("delay", delay));
        }

        if (flashDelay != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("flash_delay", flashDelay));
        }

        if (screenWidth != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("screen_width", screenWidth));
        }

        if (screenHeight != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("screen_height", screenHeight));
        }

        if (priority != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("priority", priority));
        }

        if (referer != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("referer", referer));
        }

        if (postData != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("post_data", postData));
        }

        if (cookie != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("cookie", cookie));
        }

        if (script != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("script", script));
        }

        if (details != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("details", details));
        }

        if (html != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("html", html));
        }

        if (maxWait != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("max_wait", maxWait));
        }

        if (headers != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("headers", headers));
        }

        if (hosting != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("hosting", hosting));
        }

        if (hostingHeight != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("hosting_height", hostingHeight));
        }

        if (hostingWidth != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("hosting_width", hostingWidth));
        }

        if (hostingScale != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("hosting_scale", hostingScale));
        }

        if (hostingBucket != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("hosting_bucket", hostingBucket));
        }

        if (hostingFile != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("hosting_file", hostingFile));
        }

        if (hostingHeaders != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("hosting_headers", hostingHeaders));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "apiKeyQuery" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call createMultipleScreenshotsValidateBeforeCall(String url, Integer instanceId, String size, Integer cache, Integer delay, Integer flashDelay, Integer screenWidth, Integer screenHeight, Integer priority, String referer, String postData, String cookie, String script, Integer details, Integer html, Integer maxWait, String headers, String hosting, Integer hostingHeight, Integer hostingWidth, Float hostingScale, String hostingBucket, String hostingFile, String hostingHeaders, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'url' is set
        if (url == null) {
            throw new ApiException("Missing the required parameter 'url' when calling createMultipleScreenshots(Async)");
        }

        // verify the required parameter 'instanceId' is set
        if (instanceId == null) {
            throw new ApiException("Missing the required parameter 'instanceId' when calling createMultipleScreenshots(Async)");
        }

        return createMultipleScreenshotsCall(url, instanceId, size, cache, delay, flashDelay, screenWidth, screenHeight, priority, referer, postData, cookie, script, details, html, maxWait, headers, hosting, hostingHeight, hostingWidth, hostingScale, hostingBucket, hostingFile, hostingHeaders, _callback);

    }

    /**
     * Request multiple screenshots
     * Request multiple screenshots in one API call. The API call accepts all the parameters supported by screenshot/create. You can specify up to 10 URLs and 10 instances for a total of 100 screenshots in one API call. 
     * @param url URL of the page to get a screenshot for. You can specify multiple url parameters (up to 10). (required)
     * @param instanceId instance ID to use. You can specify multiple instance_id parameters (up to 10). (required)
     * @param size screenshot size - \&quot;screen\&quot; (default) or \&quot;page\&quot; (optional, default to screen)
     * @param cache use a previous screenshot (same URL, same instance) if it was done within &lt;cache_value&gt; seconds. The default value is 24hours. Specify cache&#x3D;0 if you want a new screenshot. (optional, default to 86400)
     * @param delay number of seconds to wait after the page has loaded. This is used to let JavaScript run longer before taking the screenshot. Use delay&#x3D;0 to take screenshots faster. (optional, default to 5)
     * @param flashDelay number of seconds to wait after the page has loaded if Flash elements are present. Use flash_delay&#x3D;0 to take screenshots faster. (optional, default to 10)
     * @param screenWidth width of the browser window. For desktop browsers only. (optional, default to 1024)
     * @param screenHeight height of the browser window. For desktop browsers only. (Note: full-page screenshots can have a height of up to 15,000px) (optional, default to 768)
     * @param priority assign priority to the screenshot (for private instances only) (optional)
     * @param referer use a custom referrer header - paid screenshots only (optional)
     * @param postData send a POST requests with post_data, useful for filling out forms - paid screenshots only (optional)
     * @param cookie set a cookie for the URL requested (see Custom POST Data, Referer and Cookie) Cookies should be separated by a ; - paid screenshots only (optional)
     * @param script URL of javascript file to execute after the page load event (optional)
     * @param details level of information available with screenshot/info (optional, default to 2)
     * @param html saves the HTML of the rendered page which can be retrieved by the API call screenshot/html. This feature costs *1 credit* per screenshot. (optional, default to 0)
     * @param maxWait maximum number of seconds to wait before triggering the PageLoad event. Note that delay will still be used. (default: 0 &#x3D; disabled) (optional, default to 0)
     * @param headers any custom HTTP headers. (Not supported with Internet Explorer) (optional)
     * @param hosting hosting option - s3 or browshot (optional)
     * @param hostingHeight maximum height of the thumbnail to host (optional)
     * @param hostingWidth maximum height of the thumbnail to host (optional)
     * @param hostingScale scale of the thumbnail to host (optional, default to 1.0)
     * @param hostingBucket S3 bucket to upload the screenshot or thumbnail (required for S3) (optional)
     * @param hostingFile file name to use (for S3 only) (optional)
     * @param hostingHeaders list of headers to add to the S3 object (for S3 only) (optional)
     * @return ScreenshotList
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Request accepted </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Error </td><td>  -  </td></tr>
     </table>
     */
    public ScreenshotList createMultipleScreenshots(String url, Integer instanceId, String size, Integer cache, Integer delay, Integer flashDelay, Integer screenWidth, Integer screenHeight, Integer priority, String referer, String postData, String cookie, String script, Integer details, Integer html, Integer maxWait, String headers, String hosting, Integer hostingHeight, Integer hostingWidth, Float hostingScale, String hostingBucket, String hostingFile, String hostingHeaders) throws ApiException {
        ApiResponse<ScreenshotList> localVarResp = createMultipleScreenshotsWithHttpInfo(url, instanceId, size, cache, delay, flashDelay, screenWidth, screenHeight, priority, referer, postData, cookie, script, details, html, maxWait, headers, hosting, hostingHeight, hostingWidth, hostingScale, hostingBucket, hostingFile, hostingHeaders);
        return localVarResp.getData();
    }

    /**
     * Request multiple screenshots
     * Request multiple screenshots in one API call. The API call accepts all the parameters supported by screenshot/create. You can specify up to 10 URLs and 10 instances for a total of 100 screenshots in one API call. 
     * @param url URL of the page to get a screenshot for. You can specify multiple url parameters (up to 10). (required)
     * @param instanceId instance ID to use. You can specify multiple instance_id parameters (up to 10). (required)
     * @param size screenshot size - \&quot;screen\&quot; (default) or \&quot;page\&quot; (optional, default to screen)
     * @param cache use a previous screenshot (same URL, same instance) if it was done within &lt;cache_value&gt; seconds. The default value is 24hours. Specify cache&#x3D;0 if you want a new screenshot. (optional, default to 86400)
     * @param delay number of seconds to wait after the page has loaded. This is used to let JavaScript run longer before taking the screenshot. Use delay&#x3D;0 to take screenshots faster. (optional, default to 5)
     * @param flashDelay number of seconds to wait after the page has loaded if Flash elements are present. Use flash_delay&#x3D;0 to take screenshots faster. (optional, default to 10)
     * @param screenWidth width of the browser window. For desktop browsers only. (optional, default to 1024)
     * @param screenHeight height of the browser window. For desktop browsers only. (Note: full-page screenshots can have a height of up to 15,000px) (optional, default to 768)
     * @param priority assign priority to the screenshot (for private instances only) (optional)
     * @param referer use a custom referrer header - paid screenshots only (optional)
     * @param postData send a POST requests with post_data, useful for filling out forms - paid screenshots only (optional)
     * @param cookie set a cookie for the URL requested (see Custom POST Data, Referer and Cookie) Cookies should be separated by a ; - paid screenshots only (optional)
     * @param script URL of javascript file to execute after the page load event (optional)
     * @param details level of information available with screenshot/info (optional, default to 2)
     * @param html saves the HTML of the rendered page which can be retrieved by the API call screenshot/html. This feature costs *1 credit* per screenshot. (optional, default to 0)
     * @param maxWait maximum number of seconds to wait before triggering the PageLoad event. Note that delay will still be used. (default: 0 &#x3D; disabled) (optional, default to 0)
     * @param headers any custom HTTP headers. (Not supported with Internet Explorer) (optional)
     * @param hosting hosting option - s3 or browshot (optional)
     * @param hostingHeight maximum height of the thumbnail to host (optional)
     * @param hostingWidth maximum height of the thumbnail to host (optional)
     * @param hostingScale scale of the thumbnail to host (optional, default to 1.0)
     * @param hostingBucket S3 bucket to upload the screenshot or thumbnail (required for S3) (optional)
     * @param hostingFile file name to use (for S3 only) (optional)
     * @param hostingHeaders list of headers to add to the S3 object (for S3 only) (optional)
     * @return ApiResponse&lt;ScreenshotList&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Request accepted </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ScreenshotList> createMultipleScreenshotsWithHttpInfo(String url, Integer instanceId, String size, Integer cache, Integer delay, Integer flashDelay, Integer screenWidth, Integer screenHeight, Integer priority, String referer, String postData, String cookie, String script, Integer details, Integer html, Integer maxWait, String headers, String hosting, Integer hostingHeight, Integer hostingWidth, Float hostingScale, String hostingBucket, String hostingFile, String hostingHeaders) throws ApiException {
        okhttp3.Call localVarCall = createMultipleScreenshotsValidateBeforeCall(url, instanceId, size, cache, delay, flashDelay, screenWidth, screenHeight, priority, referer, postData, cookie, script, details, html, maxWait, headers, hosting, hostingHeight, hostingWidth, hostingScale, hostingBucket, hostingFile, hostingHeaders, null);
        Type localVarReturnType = new TypeToken<ScreenshotList>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Request multiple screenshots (asynchronously)
     * Request multiple screenshots in one API call. The API call accepts all the parameters supported by screenshot/create. You can specify up to 10 URLs and 10 instances for a total of 100 screenshots in one API call. 
     * @param url URL of the page to get a screenshot for. You can specify multiple url parameters (up to 10). (required)
     * @param instanceId instance ID to use. You can specify multiple instance_id parameters (up to 10). (required)
     * @param size screenshot size - \&quot;screen\&quot; (default) or \&quot;page\&quot; (optional, default to screen)
     * @param cache use a previous screenshot (same URL, same instance) if it was done within &lt;cache_value&gt; seconds. The default value is 24hours. Specify cache&#x3D;0 if you want a new screenshot. (optional, default to 86400)
     * @param delay number of seconds to wait after the page has loaded. This is used to let JavaScript run longer before taking the screenshot. Use delay&#x3D;0 to take screenshots faster. (optional, default to 5)
     * @param flashDelay number of seconds to wait after the page has loaded if Flash elements are present. Use flash_delay&#x3D;0 to take screenshots faster. (optional, default to 10)
     * @param screenWidth width of the browser window. For desktop browsers only. (optional, default to 1024)
     * @param screenHeight height of the browser window. For desktop browsers only. (Note: full-page screenshots can have a height of up to 15,000px) (optional, default to 768)
     * @param priority assign priority to the screenshot (for private instances only) (optional)
     * @param referer use a custom referrer header - paid screenshots only (optional)
     * @param postData send a POST requests with post_data, useful for filling out forms - paid screenshots only (optional)
     * @param cookie set a cookie for the URL requested (see Custom POST Data, Referer and Cookie) Cookies should be separated by a ; - paid screenshots only (optional)
     * @param script URL of javascript file to execute after the page load event (optional)
     * @param details level of information available with screenshot/info (optional, default to 2)
     * @param html saves the HTML of the rendered page which can be retrieved by the API call screenshot/html. This feature costs *1 credit* per screenshot. (optional, default to 0)
     * @param maxWait maximum number of seconds to wait before triggering the PageLoad event. Note that delay will still be used. (default: 0 &#x3D; disabled) (optional, default to 0)
     * @param headers any custom HTTP headers. (Not supported with Internet Explorer) (optional)
     * @param hosting hosting option - s3 or browshot (optional)
     * @param hostingHeight maximum height of the thumbnail to host (optional)
     * @param hostingWidth maximum height of the thumbnail to host (optional)
     * @param hostingScale scale of the thumbnail to host (optional, default to 1.0)
     * @param hostingBucket S3 bucket to upload the screenshot or thumbnail (required for S3) (optional)
     * @param hostingFile file name to use (for S3 only) (optional)
     * @param hostingHeaders list of headers to add to the S3 object (for S3 only) (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Request accepted </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call createMultipleScreenshotsAsync(String url, Integer instanceId, String size, Integer cache, Integer delay, Integer flashDelay, Integer screenWidth, Integer screenHeight, Integer priority, String referer, String postData, String cookie, String script, Integer details, Integer html, Integer maxWait, String headers, String hosting, Integer hostingHeight, Integer hostingWidth, Float hostingScale, String hostingBucket, String hostingFile, String hostingHeaders, final ApiCallback<ScreenshotList> _callback) throws ApiException {

        okhttp3.Call localVarCall = createMultipleScreenshotsValidateBeforeCall(url, instanceId, size, cache, delay, flashDelay, screenWidth, screenHeight, priority, referer, postData, cookie, script, details, html, maxWait, headers, hosting, hostingHeight, hostingWidth, hostingScale, hostingBucket, hostingFile, hostingHeaders, _callback);
        Type localVarReturnType = new TypeToken<ScreenshotList>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for createScreenshot
     * @param url URL of the page to get a screenshot for (required)
     * @param instanceId instance ID to use (required)
     * @param size screenshot size - \&quot;screen\&quot; (default) or \&quot;page\&quot; (optional, default to screen)
     * @param cache use a previous screenshot (same URL, same instance) if it was done within &lt;cache_value&gt; seconds. The default value is 24hours. Specify cache&#x3D;0 if you want a new screenshot. (optional, default to 86400)
     * @param delay number of seconds to wait after the page has loaded. This is used to let JavaScript run longer before taking the screenshot. Use delay&#x3D;0 to take screenshots faster. (optional, default to 5)
     * @param flashDelay number of seconds to wait after the page has loaded if Flash elements are present. Use flash_delay&#x3D;0 to take screenshots faster. (optional, default to 10)
     * @param screenWidth width of the browser window. For desktop browsers only. (optional, default to 1024)
     * @param screenHeight height of the browser window. For desktop browsers only. (Note: full-page screenshots can have a height of up to 15,000px) (optional, default to 768)
     * @param priority assign priority to the screenshot (for private instances only) (optional)
     * @param referer use a custom referrer header - paid screenshots only (optional)
     * @param postData send a POST requests with post_data, useful for filling out forms - paid screenshots only (optional)
     * @param cookie set a cookie for the URL requested (see Custom POST Data, Referer and Cookie) Cookies should be separated by a ; - paid screenshots only (optional)
     * @param script URL of javascript file to execute after the page load event (optional)
     * @param details level of information available with screenshot/info (optional, default to 2)
     * @param html saves the HTML of the rendered page which can be retrieved by the API call screenshot/html. This feature costs *1 credit* per screenshot. (optional, default to 0)
     * @param maxWait maximum number of seconds to wait before triggering the PageLoad event. Note that delay will still be used. (default: 0 &#x3D; disabled) (optional, default to 0)
     * @param headers any custom HTTP headers. (Not supported with Internet Explorer) (optional)
     * @param shots take multiple screenshots of the same page. This costs 1 additional credit for every 2 additional screenshots. (optional, default to 1)
     * @param shotInterval number of seconds between 2 screenshots (optional, default to 5)
     * @param hosting hosting option - s3 or browshot (optional)
     * @param hostingHeight maximum height of the thumbnail to host (optional)
     * @param hostingWidth maximum height of the thumbnail to host (optional)
     * @param hostingScale scale of the thumbnail to host (optional, default to 1.0)
     * @param hostingBucket S3 bucket to upload the screenshot or thumbnail (required for S3) (optional)
     * @param hostingFile file name to use (for S3 only) (optional)
     * @param hostingHeaders list of headers to add to the S3 object (for S3 only) (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Request accepted </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call createScreenshotCall(String url, Integer instanceId, String size, Integer cache, Integer delay, Integer flashDelay, Integer screenWidth, Integer screenHeight, Integer priority, String referer, String postData, String cookie, String script, Integer details, Integer html, Integer maxWait, String headers, Integer shots, Integer shotInterval, String hosting, Integer hostingHeight, Integer hostingWidth, Float hostingScale, String hostingBucket, String hostingFile, String hostingHeaders, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/screenshot/create";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (url != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("url", url));
        }

        if (instanceId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("instance_id", instanceId));
        }

        if (size != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("size", size));
        }

        if (cache != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("cache", cache));
        }

        if (delay != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("delay", delay));
        }

        if (flashDelay != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("flash_delay", flashDelay));
        }

        if (screenWidth != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("screen_width", screenWidth));
        }

        if (screenHeight != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("screen_height", screenHeight));
        }

        if (priority != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("priority", priority));
        }

        if (referer != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("referer", referer));
        }

        if (postData != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("post_data", postData));
        }

        if (cookie != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("cookie", cookie));
        }

        if (script != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("script", script));
        }

        if (details != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("details", details));
        }

        if (html != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("html", html));
        }

        if (maxWait != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("max_wait", maxWait));
        }

        if (headers != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("headers", headers));
        }

        if (shots != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("shots", shots));
        }

        if (shotInterval != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("shot_interval", shotInterval));
        }

        if (hosting != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("hosting", hosting));
        }

        if (hostingHeight != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("hosting_height", hostingHeight));
        }

        if (hostingWidth != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("hosting_width", hostingWidth));
        }

        if (hostingScale != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("hosting_scale", hostingScale));
        }

        if (hostingBucket != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("hosting_bucket", hostingBucket));
        }

        if (hostingFile != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("hosting_file", hostingFile));
        }

        if (hostingHeaders != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("hosting_headers", hostingHeaders));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "apiKeyQuery" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call createScreenshotValidateBeforeCall(String url, Integer instanceId, String size, Integer cache, Integer delay, Integer flashDelay, Integer screenWidth, Integer screenHeight, Integer priority, String referer, String postData, String cookie, String script, Integer details, Integer html, Integer maxWait, String headers, Integer shots, Integer shotInterval, String hosting, Integer hostingHeight, Integer hostingWidth, Float hostingScale, String hostingBucket, String hostingFile, String hostingHeaders, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'url' is set
        if (url == null) {
            throw new ApiException("Missing the required parameter 'url' when calling createScreenshot(Async)");
        }

        // verify the required parameter 'instanceId' is set
        if (instanceId == null) {
            throw new ApiException("Missing the required parameter 'instanceId' when calling createScreenshot(Async)");
        }

        return createScreenshotCall(url, instanceId, size, cache, delay, flashDelay, screenWidth, screenHeight, priority, referer, postData, cookie, script, details, html, maxWait, headers, shots, shotInterval, hosting, hostingHeight, hostingWidth, hostingScale, hostingBucket, hostingFile, hostingHeaders, _callback);

    }

    /**
     * Request a screenshot
     * Screenshots requests to private and shared instances require a positive balance.  *IMPORTANT*: Remember that you can only do 100 free screenshots per month. To used a premium instance, use instance_id&#x3D;65 for example. 
     * @param url URL of the page to get a screenshot for (required)
     * @param instanceId instance ID to use (required)
     * @param size screenshot size - \&quot;screen\&quot; (default) or \&quot;page\&quot; (optional, default to screen)
     * @param cache use a previous screenshot (same URL, same instance) if it was done within &lt;cache_value&gt; seconds. The default value is 24hours. Specify cache&#x3D;0 if you want a new screenshot. (optional, default to 86400)
     * @param delay number of seconds to wait after the page has loaded. This is used to let JavaScript run longer before taking the screenshot. Use delay&#x3D;0 to take screenshots faster. (optional, default to 5)
     * @param flashDelay number of seconds to wait after the page has loaded if Flash elements are present. Use flash_delay&#x3D;0 to take screenshots faster. (optional, default to 10)
     * @param screenWidth width of the browser window. For desktop browsers only. (optional, default to 1024)
     * @param screenHeight height of the browser window. For desktop browsers only. (Note: full-page screenshots can have a height of up to 15,000px) (optional, default to 768)
     * @param priority assign priority to the screenshot (for private instances only) (optional)
     * @param referer use a custom referrer header - paid screenshots only (optional)
     * @param postData send a POST requests with post_data, useful for filling out forms - paid screenshots only (optional)
     * @param cookie set a cookie for the URL requested (see Custom POST Data, Referer and Cookie) Cookies should be separated by a ; - paid screenshots only (optional)
     * @param script URL of javascript file to execute after the page load event (optional)
     * @param details level of information available with screenshot/info (optional, default to 2)
     * @param html saves the HTML of the rendered page which can be retrieved by the API call screenshot/html. This feature costs *1 credit* per screenshot. (optional, default to 0)
     * @param maxWait maximum number of seconds to wait before triggering the PageLoad event. Note that delay will still be used. (default: 0 &#x3D; disabled) (optional, default to 0)
     * @param headers any custom HTTP headers. (Not supported with Internet Explorer) (optional)
     * @param shots take multiple screenshots of the same page. This costs 1 additional credit for every 2 additional screenshots. (optional, default to 1)
     * @param shotInterval number of seconds between 2 screenshots (optional, default to 5)
     * @param hosting hosting option - s3 or browshot (optional)
     * @param hostingHeight maximum height of the thumbnail to host (optional)
     * @param hostingWidth maximum height of the thumbnail to host (optional)
     * @param hostingScale scale of the thumbnail to host (optional, default to 1.0)
     * @param hostingBucket S3 bucket to upload the screenshot or thumbnail (required for S3) (optional)
     * @param hostingFile file name to use (for S3 only) (optional)
     * @param hostingHeaders list of headers to add to the S3 object (for S3 only) (optional)
     * @return Screenshot
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Request accepted </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Error </td><td>  -  </td></tr>
     </table>
     */
    public Screenshot createScreenshot(String url, Integer instanceId, String size, Integer cache, Integer delay, Integer flashDelay, Integer screenWidth, Integer screenHeight, Integer priority, String referer, String postData, String cookie, String script, Integer details, Integer html, Integer maxWait, String headers, Integer shots, Integer shotInterval, String hosting, Integer hostingHeight, Integer hostingWidth, Float hostingScale, String hostingBucket, String hostingFile, String hostingHeaders) throws ApiException {
        ApiResponse<Screenshot> localVarResp = createScreenshotWithHttpInfo(url, instanceId, size, cache, delay, flashDelay, screenWidth, screenHeight, priority, referer, postData, cookie, script, details, html, maxWait, headers, shots, shotInterval, hosting, hostingHeight, hostingWidth, hostingScale, hostingBucket, hostingFile, hostingHeaders);
        return localVarResp.getData();
    }

    /**
     * Request a screenshot
     * Screenshots requests to private and shared instances require a positive balance.  *IMPORTANT*: Remember that you can only do 100 free screenshots per month. To used a premium instance, use instance_id&#x3D;65 for example. 
     * @param url URL of the page to get a screenshot for (required)
     * @param instanceId instance ID to use (required)
     * @param size screenshot size - \&quot;screen\&quot; (default) or \&quot;page\&quot; (optional, default to screen)
     * @param cache use a previous screenshot (same URL, same instance) if it was done within &lt;cache_value&gt; seconds. The default value is 24hours. Specify cache&#x3D;0 if you want a new screenshot. (optional, default to 86400)
     * @param delay number of seconds to wait after the page has loaded. This is used to let JavaScript run longer before taking the screenshot. Use delay&#x3D;0 to take screenshots faster. (optional, default to 5)
     * @param flashDelay number of seconds to wait after the page has loaded if Flash elements are present. Use flash_delay&#x3D;0 to take screenshots faster. (optional, default to 10)
     * @param screenWidth width of the browser window. For desktop browsers only. (optional, default to 1024)
     * @param screenHeight height of the browser window. For desktop browsers only. (Note: full-page screenshots can have a height of up to 15,000px) (optional, default to 768)
     * @param priority assign priority to the screenshot (for private instances only) (optional)
     * @param referer use a custom referrer header - paid screenshots only (optional)
     * @param postData send a POST requests with post_data, useful for filling out forms - paid screenshots only (optional)
     * @param cookie set a cookie for the URL requested (see Custom POST Data, Referer and Cookie) Cookies should be separated by a ; - paid screenshots only (optional)
     * @param script URL of javascript file to execute after the page load event (optional)
     * @param details level of information available with screenshot/info (optional, default to 2)
     * @param html saves the HTML of the rendered page which can be retrieved by the API call screenshot/html. This feature costs *1 credit* per screenshot. (optional, default to 0)
     * @param maxWait maximum number of seconds to wait before triggering the PageLoad event. Note that delay will still be used. (default: 0 &#x3D; disabled) (optional, default to 0)
     * @param headers any custom HTTP headers. (Not supported with Internet Explorer) (optional)
     * @param shots take multiple screenshots of the same page. This costs 1 additional credit for every 2 additional screenshots. (optional, default to 1)
     * @param shotInterval number of seconds between 2 screenshots (optional, default to 5)
     * @param hosting hosting option - s3 or browshot (optional)
     * @param hostingHeight maximum height of the thumbnail to host (optional)
     * @param hostingWidth maximum height of the thumbnail to host (optional)
     * @param hostingScale scale of the thumbnail to host (optional, default to 1.0)
     * @param hostingBucket S3 bucket to upload the screenshot or thumbnail (required for S3) (optional)
     * @param hostingFile file name to use (for S3 only) (optional)
     * @param hostingHeaders list of headers to add to the S3 object (for S3 only) (optional)
     * @return ApiResponse&lt;Screenshot&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Request accepted </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Screenshot> createScreenshotWithHttpInfo(String url, Integer instanceId, String size, Integer cache, Integer delay, Integer flashDelay, Integer screenWidth, Integer screenHeight, Integer priority, String referer, String postData, String cookie, String script, Integer details, Integer html, Integer maxWait, String headers, Integer shots, Integer shotInterval, String hosting, Integer hostingHeight, Integer hostingWidth, Float hostingScale, String hostingBucket, String hostingFile, String hostingHeaders) throws ApiException {
        okhttp3.Call localVarCall = createScreenshotValidateBeforeCall(url, instanceId, size, cache, delay, flashDelay, screenWidth, screenHeight, priority, referer, postData, cookie, script, details, html, maxWait, headers, shots, shotInterval, hosting, hostingHeight, hostingWidth, hostingScale, hostingBucket, hostingFile, hostingHeaders, null);
        Type localVarReturnType = new TypeToken<Screenshot>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Request a screenshot (asynchronously)
     * Screenshots requests to private and shared instances require a positive balance.  *IMPORTANT*: Remember that you can only do 100 free screenshots per month. To used a premium instance, use instance_id&#x3D;65 for example. 
     * @param url URL of the page to get a screenshot for (required)
     * @param instanceId instance ID to use (required)
     * @param size screenshot size - \&quot;screen\&quot; (default) or \&quot;page\&quot; (optional, default to screen)
     * @param cache use a previous screenshot (same URL, same instance) if it was done within &lt;cache_value&gt; seconds. The default value is 24hours. Specify cache&#x3D;0 if you want a new screenshot. (optional, default to 86400)
     * @param delay number of seconds to wait after the page has loaded. This is used to let JavaScript run longer before taking the screenshot. Use delay&#x3D;0 to take screenshots faster. (optional, default to 5)
     * @param flashDelay number of seconds to wait after the page has loaded if Flash elements are present. Use flash_delay&#x3D;0 to take screenshots faster. (optional, default to 10)
     * @param screenWidth width of the browser window. For desktop browsers only. (optional, default to 1024)
     * @param screenHeight height of the browser window. For desktop browsers only. (Note: full-page screenshots can have a height of up to 15,000px) (optional, default to 768)
     * @param priority assign priority to the screenshot (for private instances only) (optional)
     * @param referer use a custom referrer header - paid screenshots only (optional)
     * @param postData send a POST requests with post_data, useful for filling out forms - paid screenshots only (optional)
     * @param cookie set a cookie for the URL requested (see Custom POST Data, Referer and Cookie) Cookies should be separated by a ; - paid screenshots only (optional)
     * @param script URL of javascript file to execute after the page load event (optional)
     * @param details level of information available with screenshot/info (optional, default to 2)
     * @param html saves the HTML of the rendered page which can be retrieved by the API call screenshot/html. This feature costs *1 credit* per screenshot. (optional, default to 0)
     * @param maxWait maximum number of seconds to wait before triggering the PageLoad event. Note that delay will still be used. (default: 0 &#x3D; disabled) (optional, default to 0)
     * @param headers any custom HTTP headers. (Not supported with Internet Explorer) (optional)
     * @param shots take multiple screenshots of the same page. This costs 1 additional credit for every 2 additional screenshots. (optional, default to 1)
     * @param shotInterval number of seconds between 2 screenshots (optional, default to 5)
     * @param hosting hosting option - s3 or browshot (optional)
     * @param hostingHeight maximum height of the thumbnail to host (optional)
     * @param hostingWidth maximum height of the thumbnail to host (optional)
     * @param hostingScale scale of the thumbnail to host (optional, default to 1.0)
     * @param hostingBucket S3 bucket to upload the screenshot or thumbnail (required for S3) (optional)
     * @param hostingFile file name to use (for S3 only) (optional)
     * @param hostingHeaders list of headers to add to the S3 object (for S3 only) (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Request accepted </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call createScreenshotAsync(String url, Integer instanceId, String size, Integer cache, Integer delay, Integer flashDelay, Integer screenWidth, Integer screenHeight, Integer priority, String referer, String postData, String cookie, String script, Integer details, Integer html, Integer maxWait, String headers, Integer shots, Integer shotInterval, String hosting, Integer hostingHeight, Integer hostingWidth, Float hostingScale, String hostingBucket, String hostingFile, String hostingHeaders, final ApiCallback<Screenshot> _callback) throws ApiException {

        okhttp3.Call localVarCall = createScreenshotValidateBeforeCall(url, instanceId, size, cache, delay, flashDelay, screenWidth, screenHeight, priority, referer, postData, cookie, script, details, html, maxWait, headers, shots, shotInterval, hosting, hostingHeight, hostingWidth, hostingScale, hostingBucket, hostingFile, hostingHeaders, _callback);
        Type localVarReturnType = new TypeToken<Screenshot>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for deleteScreenshot
     * @param id screenshot ID (required)
     * @param data data to remove. You can specify multiple of them (separated by a ,): *image* (image files), *url* (url requested), *metadata* (time added, time finished, post data, cookie and referer used for the screenshot), *all* (all data and files)  (optional, default to image)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> list of screenshot information </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Screenshot not found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteScreenshotCall(Integer id, String data, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/screenshot/delete";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (id != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("id", id));
        }

        if (data != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("data", data));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "apiKeyQuery" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call deleteScreenshotValidateBeforeCall(Integer id, String data, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling deleteScreenshot(Async)");
        }

        return deleteScreenshotCall(id, data, _callback);

    }

    /**
     * Delete screenshot data
     * You can delete details of your screenshots to remove any confidential information. 
     * @param id screenshot ID (required)
     * @param data data to remove. You can specify multiple of them (separated by a ,): *image* (image files), *url* (url requested), *metadata* (time added, time finished, post data, cookie and referer used for the screenshot), *all* (all data and files)  (optional, default to image)
     * @return List&lt;ScreenshotShort&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> list of screenshot information </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Screenshot not found </td><td>  -  </td></tr>
     </table>
     */
    public List<ScreenshotShort> deleteScreenshot(Integer id, String data) throws ApiException {
        ApiResponse<List<ScreenshotShort>> localVarResp = deleteScreenshotWithHttpInfo(id, data);
        return localVarResp.getData();
    }

    /**
     * Delete screenshot data
     * You can delete details of your screenshots to remove any confidential information. 
     * @param id screenshot ID (required)
     * @param data data to remove. You can specify multiple of them (separated by a ,): *image* (image files), *url* (url requested), *metadata* (time added, time finished, post data, cookie and referer used for the screenshot), *all* (all data and files)  (optional, default to image)
     * @return ApiResponse&lt;List&lt;ScreenshotShort&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> list of screenshot information </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Screenshot not found </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<ScreenshotShort>> deleteScreenshotWithHttpInfo(Integer id, String data) throws ApiException {
        okhttp3.Call localVarCall = deleteScreenshotValidateBeforeCall(id, data, null);
        Type localVarReturnType = new TypeToken<List<ScreenshotShort>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Delete screenshot data (asynchronously)
     * You can delete details of your screenshots to remove any confidential information. 
     * @param id screenshot ID (required)
     * @param data data to remove. You can specify multiple of them (separated by a ,): *image* (image files), *url* (url requested), *metadata* (time added, time finished, post data, cookie and referer used for the screenshot), *all* (all data and files)  (optional, default to image)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> list of screenshot information </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Screenshot not found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteScreenshotAsync(Integer id, String data, final ApiCallback<List<ScreenshotShort>> _callback) throws ApiException {

        okhttp3.Call localVarCall = deleteScreenshotValidateBeforeCall(id, data, _callback);
        Type localVarReturnType = new TypeToken<List<ScreenshotShort>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getHTML
     * @param id screenshot ID (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 0 </td><td> HTML code </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getHTMLCall(Integer id, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/screenshot/html";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (id != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("id", id));
        }

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "apiKeyQuery" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getHTMLValidateBeforeCall(Integer id, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling getHTML(Async)");
        }

        return getHTMLCall(id, _callback);

    }

    /**
     * Get the HTML code
     * Retrieve the HTML code of the rendered page. This API call should be used when html&#x3D;1 was specified in the screenshot request. 
     * @param id screenshot ID (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 0 </td><td> HTML code </td><td>  -  </td></tr>
     </table>
     */
    public void getHTML(Integer id) throws ApiException {
        getHTMLWithHttpInfo(id);
    }

    /**
     * Get the HTML code
     * Retrieve the HTML code of the rendered page. This API call should be used when html&#x3D;1 was specified in the screenshot request. 
     * @param id screenshot ID (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 0 </td><td> HTML code </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> getHTMLWithHttpInfo(Integer id) throws ApiException {
        okhttp3.Call localVarCall = getHTMLValidateBeforeCall(id, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Get the HTML code (asynchronously)
     * Retrieve the HTML code of the rendered page. This API call should be used when html&#x3D;1 was specified in the screenshot request. 
     * @param id screenshot ID (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 0 </td><td> HTML code </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getHTMLAsync(Integer id, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = getHTMLValidateBeforeCall(id, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for getMultipleScreenshotsInfo
     * @param limit maximum number of screenshots&#39; information to return (optional, default to 100)
     * @param status get list of screenshot in a given status (error, finished, in_process) (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> list of screenshot information </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Screenshot not found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getMultipleScreenshotsInfoCall(Integer limit, String status, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/screenshot/list";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (limit != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("limit", limit));
        }

        if (status != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("status", status));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "apiKeyQuery" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getMultipleScreenshotsInfoValidateBeforeCall(Integer limit, String status, final ApiCallback _callback) throws ApiException {
        return getMultipleScreenshotsInfoCall(limit, status, _callback);

    }

    /**
     * Get information about screenshots
     * Get information about the last 100 screenshots requested.
     * @param limit maximum number of screenshots&#39; information to return (optional, default to 100)
     * @param status get list of screenshot in a given status (error, finished, in_process) (optional)
     * @return List&lt;ScreenshotList&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> list of screenshot information </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Screenshot not found </td><td>  -  </td></tr>
     </table>
     */
    public List<ScreenshotList> getMultipleScreenshotsInfo(Integer limit, String status) throws ApiException {
        ApiResponse<List<ScreenshotList>> localVarResp = getMultipleScreenshotsInfoWithHttpInfo(limit, status);
        return localVarResp.getData();
    }

    /**
     * Get information about screenshots
     * Get information about the last 100 screenshots requested.
     * @param limit maximum number of screenshots&#39; information to return (optional, default to 100)
     * @param status get list of screenshot in a given status (error, finished, in_process) (optional)
     * @return ApiResponse&lt;List&lt;ScreenshotList&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> list of screenshot information </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Screenshot not found </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<ScreenshotList>> getMultipleScreenshotsInfoWithHttpInfo(Integer limit, String status) throws ApiException {
        okhttp3.Call localVarCall = getMultipleScreenshotsInfoValidateBeforeCall(limit, status, null);
        Type localVarReturnType = new TypeToken<List<ScreenshotList>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get information about screenshots (asynchronously)
     * Get information about the last 100 screenshots requested.
     * @param limit maximum number of screenshots&#39; information to return (optional, default to 100)
     * @param status get list of screenshot in a given status (error, finished, in_process) (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> list of screenshot information </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Screenshot not found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getMultipleScreenshotsInfoAsync(Integer limit, String status, final ApiCallback<List<ScreenshotList>> _callback) throws ApiException {

        okhttp3.Call localVarCall = getMultipleScreenshotsInfoValidateBeforeCall(limit, status, _callback);
        Type localVarReturnType = new TypeToken<List<ScreenshotList>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getScreenshotInfo
     * @param id screenshot ID received from /api/v1/screenshot/create (required)
     * @param details level of details about the screenshot and the page (optional, default to 2)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Screenshot found </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Screenshot not found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getScreenshotInfoCall(Integer id, Integer details, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/screenshot/info";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (id != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("id", id));
        }

        if (details != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("details", details));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "apiKeyQuery" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getScreenshotInfoValidateBeforeCall(Integer id, Integer details, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling getScreenshotInfo(Async)");
        }

        return getScreenshotInfoCall(id, details, _callback);

    }

    /**
     * Query screenshot status
     * Once a screenshot has been requested, its status must be checked until it is either \&quot;error\&quot; or \&quot;finished\&quot;.
     * @param id screenshot ID received from /api/v1/screenshot/create (required)
     * @param details level of details about the screenshot and the page (optional, default to 2)
     * @return List&lt;Screenshot&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Screenshot found </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Screenshot not found </td><td>  -  </td></tr>
     </table>
     */
    public List<Screenshot> getScreenshotInfo(Integer id, Integer details) throws ApiException {
        ApiResponse<List<Screenshot>> localVarResp = getScreenshotInfoWithHttpInfo(id, details);
        return localVarResp.getData();
    }

    /**
     * Query screenshot status
     * Once a screenshot has been requested, its status must be checked until it is either \&quot;error\&quot; or \&quot;finished\&quot;.
     * @param id screenshot ID received from /api/v1/screenshot/create (required)
     * @param details level of details about the screenshot and the page (optional, default to 2)
     * @return ApiResponse&lt;List&lt;Screenshot&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Screenshot found </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Screenshot not found </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<Screenshot>> getScreenshotInfoWithHttpInfo(Integer id, Integer details) throws ApiException {
        okhttp3.Call localVarCall = getScreenshotInfoValidateBeforeCall(id, details, null);
        Type localVarReturnType = new TypeToken<List<Screenshot>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Query screenshot status (asynchronously)
     * Once a screenshot has been requested, its status must be checked until it is either \&quot;error\&quot; or \&quot;finished\&quot;.
     * @param id screenshot ID received from /api/v1/screenshot/create (required)
     * @param details level of details about the screenshot and the page (optional, default to 2)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Screenshot found </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Screenshot not found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getScreenshotInfoAsync(Integer id, Integer details, final ApiCallback<List<Screenshot>> _callback) throws ApiException {

        okhttp3.Call localVarCall = getScreenshotInfoValidateBeforeCall(id, details, _callback);
        Type localVarReturnType = new TypeToken<List<Screenshot>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getThumbnail
     * @param id screenshot ID (required)
     * @param width width of the thumbnail (optional)
     * @param height height of the thumbnail (optional)
     * @param scale scale of the thumbnail (optional, default to 1.0)
     * @param zoom zoom 1 to 100 percent (optional, default to 100)
     * @param ratio Use fit to keep the original page ration, and fill to get a thumbnail for the exact width and height.  specified. If you provide both width and height, you need to specify the ratio: fit to keep the original width/height ratio (the thumbnail might be smaller than the specified width and height), or fill to crop the image if necessary. (optional, default to fit)
     * @param left left edge of the area to be cropped (optional, default to 0)
     * @param right right edge of the area to be cropped (optional, default to 0)
     * @param top top edge of the area to be cropped (optional, default to 0)
     * @param bottom bottom edge of the area to be cropped (optional)
     * @param format image as PNG or JPEG (optional, default to png)
     * @param shot get the second or third screenshot if multiple screenshots were requested (optional, default to 1)
     * @param quality JPEG quality factor (for JPEG thumbnails only) (optional, default to 100)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> thumbnail </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Screenshot not found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getThumbnailCall(Integer id, Integer width, Integer height, Double scale, Integer zoom, String ratio, Integer left, Integer right, Integer top, Integer bottom, String format, Integer shot, Integer quality, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/screenshot/thumbnail";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (id != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("id", id));
        }

        if (width != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("width", width));
        }

        if (height != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("height", height));
        }

        if (scale != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("scale", scale));
        }

        if (zoom != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("zoom", zoom));
        }

        if (ratio != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("ratio", ratio));
        }

        if (left != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("left", left));
        }

        if (right != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("right", right));
        }

        if (top != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("top", top));
        }

        if (bottom != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("bottom", bottom));
        }

        if (format != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("format", format));
        }

        if (shot != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("shot", shot));
        }

        if (quality != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("quality", quality));
        }

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "apiKeyQuery" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getThumbnailValidateBeforeCall(Integer id, Integer width, Integer height, Double scale, Integer zoom, String ratio, Integer left, Integer right, Integer top, Integer bottom, String format, Integer shot, Integer quality, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling getThumbnail(Async)");
        }

        return getThumbnailCall(id, width, height, scale, zoom, ratio, left, right, top, bottom, format, shot, quality, _callback);

    }

    /**
     * Retrieve a thumbnail image
     * Unlike the other API calls, this API sends back the thumbnail as a PNG file, not JSON. The HTTP response code indicates whether the screenshot was successful (200), or incomplete (404) or failed (404). If the screenshot failed or is not finished, a default image \&quot;Not found\&quot; is sent.  You can crop your screenshots. The crop is done first, then the thumbnail. You can take a 1024x768 screenshot, crop it to 768x768, and get it scaled down to 300x300. 
     * @param id screenshot ID (required)
     * @param width width of the thumbnail (optional)
     * @param height height of the thumbnail (optional)
     * @param scale scale of the thumbnail (optional, default to 1.0)
     * @param zoom zoom 1 to 100 percent (optional, default to 100)
     * @param ratio Use fit to keep the original page ration, and fill to get a thumbnail for the exact width and height.  specified. If you provide both width and height, you need to specify the ratio: fit to keep the original width/height ratio (the thumbnail might be smaller than the specified width and height), or fill to crop the image if necessary. (optional, default to fit)
     * @param left left edge of the area to be cropped (optional, default to 0)
     * @param right right edge of the area to be cropped (optional, default to 0)
     * @param top top edge of the area to be cropped (optional, default to 0)
     * @param bottom bottom edge of the area to be cropped (optional)
     * @param format image as PNG or JPEG (optional, default to png)
     * @param shot get the second or third screenshot if multiple screenshots were requested (optional, default to 1)
     * @param quality JPEG quality factor (for JPEG thumbnails only) (optional, default to 100)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> thumbnail </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Screenshot not found </td><td>  -  </td></tr>
     </table>
     */
    public void getThumbnail(Integer id, Integer width, Integer height, Double scale, Integer zoom, String ratio, Integer left, Integer right, Integer top, Integer bottom, String format, Integer shot, Integer quality) throws ApiException {
        getThumbnailWithHttpInfo(id, width, height, scale, zoom, ratio, left, right, top, bottom, format, shot, quality);
    }

    /**
     * Retrieve a thumbnail image
     * Unlike the other API calls, this API sends back the thumbnail as a PNG file, not JSON. The HTTP response code indicates whether the screenshot was successful (200), or incomplete (404) or failed (404). If the screenshot failed or is not finished, a default image \&quot;Not found\&quot; is sent.  You can crop your screenshots. The crop is done first, then the thumbnail. You can take a 1024x768 screenshot, crop it to 768x768, and get it scaled down to 300x300. 
     * @param id screenshot ID (required)
     * @param width width of the thumbnail (optional)
     * @param height height of the thumbnail (optional)
     * @param scale scale of the thumbnail (optional, default to 1.0)
     * @param zoom zoom 1 to 100 percent (optional, default to 100)
     * @param ratio Use fit to keep the original page ration, and fill to get a thumbnail for the exact width and height.  specified. If you provide both width and height, you need to specify the ratio: fit to keep the original width/height ratio (the thumbnail might be smaller than the specified width and height), or fill to crop the image if necessary. (optional, default to fit)
     * @param left left edge of the area to be cropped (optional, default to 0)
     * @param right right edge of the area to be cropped (optional, default to 0)
     * @param top top edge of the area to be cropped (optional, default to 0)
     * @param bottom bottom edge of the area to be cropped (optional)
     * @param format image as PNG or JPEG (optional, default to png)
     * @param shot get the second or third screenshot if multiple screenshots were requested (optional, default to 1)
     * @param quality JPEG quality factor (for JPEG thumbnails only) (optional, default to 100)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> thumbnail </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Screenshot not found </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> getThumbnailWithHttpInfo(Integer id, Integer width, Integer height, Double scale, Integer zoom, String ratio, Integer left, Integer right, Integer top, Integer bottom, String format, Integer shot, Integer quality) throws ApiException {
        okhttp3.Call localVarCall = getThumbnailValidateBeforeCall(id, width, height, scale, zoom, ratio, left, right, top, bottom, format, shot, quality, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Retrieve a thumbnail image (asynchronously)
     * Unlike the other API calls, this API sends back the thumbnail as a PNG file, not JSON. The HTTP response code indicates whether the screenshot was successful (200), or incomplete (404) or failed (404). If the screenshot failed or is not finished, a default image \&quot;Not found\&quot; is sent.  You can crop your screenshots. The crop is done first, then the thumbnail. You can take a 1024x768 screenshot, crop it to 768x768, and get it scaled down to 300x300. 
     * @param id screenshot ID (required)
     * @param width width of the thumbnail (optional)
     * @param height height of the thumbnail (optional)
     * @param scale scale of the thumbnail (optional, default to 1.0)
     * @param zoom zoom 1 to 100 percent (optional, default to 100)
     * @param ratio Use fit to keep the original page ration, and fill to get a thumbnail for the exact width and height.  specified. If you provide both width and height, you need to specify the ratio: fit to keep the original width/height ratio (the thumbnail might be smaller than the specified width and height), or fill to crop the image if necessary. (optional, default to fit)
     * @param left left edge of the area to be cropped (optional, default to 0)
     * @param right right edge of the area to be cropped (optional, default to 0)
     * @param top top edge of the area to be cropped (optional, default to 0)
     * @param bottom bottom edge of the area to be cropped (optional)
     * @param format image as PNG or JPEG (optional, default to png)
     * @param shot get the second or third screenshot if multiple screenshots were requested (optional, default to 1)
     * @param quality JPEG quality factor (for JPEG thumbnails only) (optional, default to 100)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> thumbnail </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Screenshot not found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getThumbnailAsync(Integer id, Integer width, Integer height, Double scale, Integer zoom, String ratio, Integer left, Integer right, Integer top, Integer bottom, String format, Integer shot, Integer quality, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = getThumbnailValidateBeforeCall(id, width, height, scale, zoom, ratio, left, right, top, bottom, format, shot, quality, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for hostScreenshot
     * @param id screenshot ID (required)
     * @param hosting hosting option: s3 or browshot (required)
     * @param width width of the thumbnail (optional)
     * @param height height of the thumbnail (optional)
     * @param scale scale of the thumbnail (optional, default to 1.0)
     * @param bucket S3 bucket to upload the screenshot or thumbnail - required with hosting&#x3D;s3 (optional)
     * @param _file file name to use - optional, used with hosting&#x3D;s3 (optional)
     * @param headers HTTP headers to add to your S3 object - optional, used with hosting&#x3D;s3 (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> list of screenshot information </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Screenshot not found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call hostScreenshotCall(Integer id, String hosting, Integer width, Integer height, Double scale, String bucket, String _file, String headers, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/screenshot/host";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (id != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("id", id));
        }

        if (hosting != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("hosting", hosting));
        }

        if (width != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("width", width));
        }

        if (height != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("height", height));
        }

        if (scale != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("scale", scale));
        }

        if (bucket != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("bucket", bucket));
        }

        if (_file != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("file", _file));
        }

        if (headers != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("headers", headers));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "apiKeyQuery" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call hostScreenshotValidateBeforeCall(Integer id, String hosting, Integer width, Integer height, Double scale, String bucket, String _file, String headers, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling hostScreenshot(Async)");
        }

        // verify the required parameter 'hosting' is set
        if (hosting == null) {
            throw new ApiException("Missing the required parameter 'hosting' when calling hostScreenshot(Async)");
        }

        return hostScreenshotCall(id, hosting, width, height, scale, bucket, _file, headers, _callback);

    }

    /**
     * Host thumbnails on your own S3 account or on Browshot.
     * You can host screenshots and thumbnails on your own S3 account or on Browshot.
     * @param id screenshot ID (required)
     * @param hosting hosting option: s3 or browshot (required)
     * @param width width of the thumbnail (optional)
     * @param height height of the thumbnail (optional)
     * @param scale scale of the thumbnail (optional, default to 1.0)
     * @param bucket S3 bucket to upload the screenshot or thumbnail - required with hosting&#x3D;s3 (optional)
     * @param _file file name to use - optional, used with hosting&#x3D;s3 (optional)
     * @param headers HTTP headers to add to your S3 object - optional, used with hosting&#x3D;s3 (optional)
     * @return List&lt;ScreenshotHost&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> list of screenshot information </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Screenshot not found </td><td>  -  </td></tr>
     </table>
     */
    public List<ScreenshotHost> hostScreenshot(Integer id, String hosting, Integer width, Integer height, Double scale, String bucket, String _file, String headers) throws ApiException {
        ApiResponse<List<ScreenshotHost>> localVarResp = hostScreenshotWithHttpInfo(id, hosting, width, height, scale, bucket, _file, headers);
        return localVarResp.getData();
    }

    /**
     * Host thumbnails on your own S3 account or on Browshot.
     * You can host screenshots and thumbnails on your own S3 account or on Browshot.
     * @param id screenshot ID (required)
     * @param hosting hosting option: s3 or browshot (required)
     * @param width width of the thumbnail (optional)
     * @param height height of the thumbnail (optional)
     * @param scale scale of the thumbnail (optional, default to 1.0)
     * @param bucket S3 bucket to upload the screenshot or thumbnail - required with hosting&#x3D;s3 (optional)
     * @param _file file name to use - optional, used with hosting&#x3D;s3 (optional)
     * @param headers HTTP headers to add to your S3 object - optional, used with hosting&#x3D;s3 (optional)
     * @return ApiResponse&lt;List&lt;ScreenshotHost&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> list of screenshot information </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Screenshot not found </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<ScreenshotHost>> hostScreenshotWithHttpInfo(Integer id, String hosting, Integer width, Integer height, Double scale, String bucket, String _file, String headers) throws ApiException {
        okhttp3.Call localVarCall = hostScreenshotValidateBeforeCall(id, hosting, width, height, scale, bucket, _file, headers, null);
        Type localVarReturnType = new TypeToken<List<ScreenshotHost>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Host thumbnails on your own S3 account or on Browshot. (asynchronously)
     * You can host screenshots and thumbnails on your own S3 account or on Browshot.
     * @param id screenshot ID (required)
     * @param hosting hosting option: s3 or browshot (required)
     * @param width width of the thumbnail (optional)
     * @param height height of the thumbnail (optional)
     * @param scale scale of the thumbnail (optional, default to 1.0)
     * @param bucket S3 bucket to upload the screenshot or thumbnail - required with hosting&#x3D;s3 (optional)
     * @param _file file name to use - optional, used with hosting&#x3D;s3 (optional)
     * @param headers HTTP headers to add to your S3 object - optional, used with hosting&#x3D;s3 (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> list of screenshot information </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Screenshot not found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call hostScreenshotAsync(Integer id, String hosting, Integer width, Integer height, Double scale, String bucket, String _file, String headers, final ApiCallback<List<ScreenshotHost>> _callback) throws ApiException {

        okhttp3.Call localVarCall = hostScreenshotValidateBeforeCall(id, hosting, width, height, scale, bucket, _file, headers, _callback);
        Type localVarReturnType = new TypeToken<List<ScreenshotHost>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for searchScreenshot
     * @param url look for a string matching the URL requested (required)
     * @param limit maximum number of screenshots&#39; information to return (optional, default to 50)
     * @param status get list of screenshot in a given status (error, finished, in_process) (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> list of screenshot information </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Screenshot not found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call searchScreenshotCall(String url, Integer limit, String status, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/screenshot/search";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (url != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("url", url));
        }

        if (limit != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("limit", limit));
        }

        if (status != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("status", status));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "apiKeyQuery" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call searchScreenshotValidateBeforeCall(String url, Integer limit, String status, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'url' is set
        if (url == null) {
            throw new ApiException("Missing the required parameter 'url' when calling searchScreenshot(Async)");
        }

        return searchScreenshotCall(url, limit, status, _callback);

    }

    /**
     * Search for screenshots
     * Search for screenshots of a specific URL.
     * @param url look for a string matching the URL requested (required)
     * @param limit maximum number of screenshots&#39; information to return (optional, default to 50)
     * @param status get list of screenshot in a given status (error, finished, in_process) (optional)
     * @return List&lt;ScreenshotList&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> list of screenshot information </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Screenshot not found </td><td>  -  </td></tr>
     </table>
     */
    public List<ScreenshotList> searchScreenshot(String url, Integer limit, String status) throws ApiException {
        ApiResponse<List<ScreenshotList>> localVarResp = searchScreenshotWithHttpInfo(url, limit, status);
        return localVarResp.getData();
    }

    /**
     * Search for screenshots
     * Search for screenshots of a specific URL.
     * @param url look for a string matching the URL requested (required)
     * @param limit maximum number of screenshots&#39; information to return (optional, default to 50)
     * @param status get list of screenshot in a given status (error, finished, in_process) (optional)
     * @return ApiResponse&lt;List&lt;ScreenshotList&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> list of screenshot information </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Screenshot not found </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<ScreenshotList>> searchScreenshotWithHttpInfo(String url, Integer limit, String status) throws ApiException {
        okhttp3.Call localVarCall = searchScreenshotValidateBeforeCall(url, limit, status, null);
        Type localVarReturnType = new TypeToken<List<ScreenshotList>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Search for screenshots (asynchronously)
     * Search for screenshots of a specific URL.
     * @param url look for a string matching the URL requested (required)
     * @param limit maximum number of screenshots&#39; information to return (optional, default to 50)
     * @param status get list of screenshot in a given status (error, finished, in_process) (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> list of screenshot information </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Screenshot not found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call searchScreenshotAsync(String url, Integer limit, String status, final ApiCallback<List<ScreenshotList>> _callback) throws ApiException {

        okhttp3.Call localVarCall = searchScreenshotValidateBeforeCall(url, limit, status, _callback);
        Type localVarReturnType = new TypeToken<List<ScreenshotList>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for shareScreenshot
     * @param id screenshot ID (required)
     * @param note note to add on the sharing page (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> list of screenshot information </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Screenshot not found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call shareScreenshotCall(Integer id, String note, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/screenshot/share";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (id != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("id", id));
        }

        if (note != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("note", note));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "apiKeyQuery" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call shareScreenshotValidateBeforeCall(Integer id, String note, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling shareScreenshot(Async)");
        }

        return shareScreenshotCall(id, note, _callback);

    }

    /**
     * Share a screenshot
     * You can make your screenshots public, add notes, and share it with your friends and colleagues. Only screenshots which are successfully completed can be shared.n the thumbnail. You can take a 1024x768 screenshot, crop it to 768x768, and get it scaled down to 300x300. 
     * @param id screenshot ID (required)
     * @param note note to add on the sharing page (optional)
     * @return List&lt;ScreenshotHost&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> list of screenshot information </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Screenshot not found </td><td>  -  </td></tr>
     </table>
     */
    public List<ScreenshotHost> shareScreenshot(Integer id, String note) throws ApiException {
        ApiResponse<List<ScreenshotHost>> localVarResp = shareScreenshotWithHttpInfo(id, note);
        return localVarResp.getData();
    }

    /**
     * Share a screenshot
     * You can make your screenshots public, add notes, and share it with your friends and colleagues. Only screenshots which are successfully completed can be shared.n the thumbnail. You can take a 1024x768 screenshot, crop it to 768x768, and get it scaled down to 300x300. 
     * @param id screenshot ID (required)
     * @param note note to add on the sharing page (optional)
     * @return ApiResponse&lt;List&lt;ScreenshotHost&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> list of screenshot information </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Screenshot not found </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<ScreenshotHost>> shareScreenshotWithHttpInfo(Integer id, String note) throws ApiException {
        okhttp3.Call localVarCall = shareScreenshotValidateBeforeCall(id, note, null);
        Type localVarReturnType = new TypeToken<List<ScreenshotHost>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Share a screenshot (asynchronously)
     * You can make your screenshots public, add notes, and share it with your friends and colleagues. Only screenshots which are successfully completed can be shared.n the thumbnail. You can take a 1024x768 screenshot, crop it to 768x768, and get it scaled down to 300x300. 
     * @param id screenshot ID (required)
     * @param note note to add on the sharing page (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> list of screenshot information </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Screenshot not found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call shareScreenshotAsync(Integer id, String note, final ApiCallback<List<ScreenshotHost>> _callback) throws ApiException {

        okhttp3.Call localVarCall = shareScreenshotValidateBeforeCall(id, note, _callback);
        Type localVarReturnType = new TypeToken<List<ScreenshotHost>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
