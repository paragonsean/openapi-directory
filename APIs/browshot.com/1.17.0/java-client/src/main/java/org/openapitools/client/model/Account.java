/*
 * Browshot API
 * Take screenshots of any website in real time
 *
 * The version of the OpenAPI document: 1.17.0
 * Contact: support@browshot.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.Browser;
import org.openapitools.client.model.Instance;
import org.openapitools.client.model.Screenshot;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Account
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:00:44.909980-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class Account {
  public static final String SERIALIZED_NAME_BALANCE = "balance";
  @SerializedName(SERIALIZED_NAME_BALANCE)
  private Integer balance;

  public static final String SERIALIZED_NAME_BROWSERS = "browsers";
  @SerializedName(SERIALIZED_NAME_BROWSERS)
  private List<Browser> browsers = new ArrayList<>();

  public static final String SERIALIZED_NAME_FREE_SCREENSHOTS_LEFT = "free_screenshots_left";
  @SerializedName(SERIALIZED_NAME_FREE_SCREENSHOTS_LEFT)
  private Integer freeScreenshotsLeft;

  public static final String SERIALIZED_NAME_HOSTING_BROWSHOT = "hosting_browshot";
  @SerializedName(SERIALIZED_NAME_HOSTING_BROWSHOT)
  private Integer hostingBrowshot;

  public static final String SERIALIZED_NAME_INSTANCES = "instances";
  @SerializedName(SERIALIZED_NAME_INSTANCES)
  private List<Instance> instances = new ArrayList<>();

  public static final String SERIALIZED_NAME_PRIVATE_INSTANCES = "private_instances";
  @SerializedName(SERIALIZED_NAME_PRIVATE_INSTANCES)
  private Integer privateInstances;

  public static final String SERIALIZED_NAME_SCREENSHOTS = "screenshots";
  @SerializedName(SERIALIZED_NAME_SCREENSHOTS)
  private List<Screenshot> screenshots = new ArrayList<>();

  public Account() {
  }

  public Account balance(Integer balance) {
    this.balance = balance;
    return this;
  }

  /**
   * number of credits left on your account
   * @return balance
   */
  @javax.annotation.Nonnull
  public Integer getBalance() {
    return balance;
  }

  public void setBalance(Integer balance) {
    this.balance = balance;
  }


  public Account browsers(List<Browser> browsers) {
    this.browsers = browsers;
    return this;
  }

  public Account addBrowsersItem(Browser browsersItem) {
    if (this.browsers == null) {
      this.browsers = new ArrayList<>();
    }
    this.browsers.add(browsersItem);
    return this;
  }

  /**
   * list of custom browsers as returned by /api/v1/browser/list
   * @return browsers
   */
  @javax.annotation.Nullable
  public List<Browser> getBrowsers() {
    return browsers;
  }

  public void setBrowsers(List<Browser> browsers) {
    this.browsers = browsers;
  }


  public Account freeScreenshotsLeft(Integer freeScreenshotsLeft) {
    this.freeScreenshotsLeft = freeScreenshotsLeft;
    return this;
  }

  /**
   * number of free screenshots available for the current month
   * @return freeScreenshotsLeft
   */
  @javax.annotation.Nonnull
  public Integer getFreeScreenshotsLeft() {
    return freeScreenshotsLeft;
  }

  public void setFreeScreenshotsLeft(Integer freeScreenshotsLeft) {
    this.freeScreenshotsLeft = freeScreenshotsLeft;
  }


  public Account hostingBrowshot(Integer hostingBrowshot) {
    this.hostingBrowshot = hostingBrowshot;
    return this;
  }

  /**
   * 1 is your account is authorized to request hosting on Browshot, 0 otherwise (default)
   * minimum: 0
   * maximum: 1
   * @return hostingBrowshot
   */
  @javax.annotation.Nonnull
  public Integer getHostingBrowshot() {
    return hostingBrowshot;
  }

  public void setHostingBrowshot(Integer hostingBrowshot) {
    this.hostingBrowshot = hostingBrowshot;
  }


  public Account instances(List<Instance> instances) {
    this.instances = instances;
    return this;
  }

  public Account addInstancesItem(Instance instancesItem) {
    if (this.instances == null) {
      this.instances = new ArrayList<>();
    }
    this.instances.add(instancesItem);
    return this;
  }

  /**
   * list of private instances as returned by /api/v1/instance/list
   * @return instances
   */
  @javax.annotation.Nullable
  public List<Instance> getInstances() {
    return instances;
  }

  public void setInstances(List<Instance> instances) {
    this.instances = instances;
  }


  public Account privateInstances(Integer privateInstances) {
    this.privateInstances = privateInstances;
    return this;
  }

  /**
   * 1 is your account is authorized to create and use private instances, 0 otherwise (default)
   * minimum: 0
   * maximum: 1
   * @return privateInstances
   */
  @javax.annotation.Nonnull
  public Integer getPrivateInstances() {
    return privateInstances;
  }

  public void setPrivateInstances(Integer privateInstances) {
    this.privateInstances = privateInstances;
  }


  public Account screenshots(List<Screenshot> screenshots) {
    this.screenshots = screenshots;
    return this;
  }

  public Account addScreenshotsItem(Screenshot screenshotsItem) {
    if (this.screenshots == null) {
      this.screenshots = new ArrayList<>();
    }
    this.screenshots.add(screenshotsItem);
    return this;
  }

  /**
   * list of 10 latest screenshots requests as returned by /api/v1/screenshot/list
   * @return screenshots
   */
  @javax.annotation.Nullable
  public List<Screenshot> getScreenshots() {
    return screenshots;
  }

  public void setScreenshots(List<Screenshot> screenshots) {
    this.screenshots = screenshots;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    Account account = (Account) o;
    return Objects.equals(this.balance, account.balance) &&
        Objects.equals(this.browsers, account.browsers) &&
        Objects.equals(this.freeScreenshotsLeft, account.freeScreenshotsLeft) &&
        Objects.equals(this.hostingBrowshot, account.hostingBrowshot) &&
        Objects.equals(this.instances, account.instances) &&
        Objects.equals(this.privateInstances, account.privateInstances) &&
        Objects.equals(this.screenshots, account.screenshots);
  }

  @Override
  public int hashCode() {
    return Objects.hash(balance, browsers, freeScreenshotsLeft, hostingBrowshot, instances, privateInstances, screenshots);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class Account {\n");
    sb.append("    balance: ").append(toIndentedString(balance)).append("\n");
    sb.append("    browsers: ").append(toIndentedString(browsers)).append("\n");
    sb.append("    freeScreenshotsLeft: ").append(toIndentedString(freeScreenshotsLeft)).append("\n");
    sb.append("    hostingBrowshot: ").append(toIndentedString(hostingBrowshot)).append("\n");
    sb.append("    instances: ").append(toIndentedString(instances)).append("\n");
    sb.append("    privateInstances: ").append(toIndentedString(privateInstances)).append("\n");
    sb.append("    screenshots: ").append(toIndentedString(screenshots)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("balance");
    openapiFields.add("browsers");
    openapiFields.add("free_screenshots_left");
    openapiFields.add("hosting_browshot");
    openapiFields.add("instances");
    openapiFields.add("private_instances");
    openapiFields.add("screenshots");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("balance");
    openapiRequiredFields.add("free_screenshots_left");
    openapiRequiredFields.add("hosting_browshot");
    openapiRequiredFields.add("private_instances");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to Account
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!Account.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in Account is not found in the empty JSON string", Account.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!Account.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `Account` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : Account.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if (jsonObj.get("browsers") != null && !jsonObj.get("browsers").isJsonNull()) {
        JsonArray jsonArraybrowsers = jsonObj.getAsJsonArray("browsers");
        if (jsonArraybrowsers != null) {
          // ensure the json data is an array
          if (!jsonObj.get("browsers").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `browsers` to be an array in the JSON string but got `%s`", jsonObj.get("browsers").toString()));
          }

          // validate the optional field `browsers` (array)
          for (int i = 0; i < jsonArraybrowsers.size(); i++) {
            Browser.validateJsonElement(jsonArraybrowsers.get(i));
          };
        }
      }
      if (jsonObj.get("instances") != null && !jsonObj.get("instances").isJsonNull()) {
        JsonArray jsonArrayinstances = jsonObj.getAsJsonArray("instances");
        if (jsonArrayinstances != null) {
          // ensure the json data is an array
          if (!jsonObj.get("instances").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `instances` to be an array in the JSON string but got `%s`", jsonObj.get("instances").toString()));
          }

          // validate the optional field `instances` (array)
          for (int i = 0; i < jsonArrayinstances.size(); i++) {
            Instance.validateJsonElement(jsonArrayinstances.get(i));
          };
        }
      }
      if (jsonObj.get("screenshots") != null && !jsonObj.get("screenshots").isJsonNull()) {
        JsonArray jsonArrayscreenshots = jsonObj.getAsJsonArray("screenshots");
        if (jsonArrayscreenshots != null) {
          // ensure the json data is an array
          if (!jsonObj.get("screenshots").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `screenshots` to be an array in the JSON string but got `%s`", jsonObj.get("screenshots").toString()));
          }

          // validate the optional field `screenshots` (array)
          for (int i = 0; i < jsonArrayscreenshots.size(); i++) {
            Screenshot.validateJsonElement(jsonArrayscreenshots.get(i));
          };
        }
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!Account.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'Account' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<Account> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(Account.class));

       return (TypeAdapter<T>) new TypeAdapter<Account>() {
           @Override
           public void write(JsonWriter out, Account value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public Account read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of Account given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of Account
   * @throws IOException if the JSON string is invalid with respect to Account
   */
  public static Account fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, Account.class);
  }

  /**
   * Convert an instance of Account to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

