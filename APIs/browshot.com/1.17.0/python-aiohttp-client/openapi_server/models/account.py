# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.browser import Browser
from openapi_server.models.instance import Instance
from openapi_server.models.screenshot import Screenshot
from openapi_server import util


class Account(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, balance: int=None, browsers: List[Browser]=None, free_screenshots_left: int=None, hosting_browshot: int=None, instances: List[Instance]=None, private_instances: int=None, screenshots: List[Screenshot]=None):
        """Account - a model defined in OpenAPI

        :param balance: The balance of this Account.
        :param browsers: The browsers of this Account.
        :param free_screenshots_left: The free_screenshots_left of this Account.
        :param hosting_browshot: The hosting_browshot of this Account.
        :param instances: The instances of this Account.
        :param private_instances: The private_instances of this Account.
        :param screenshots: The screenshots of this Account.
        """
        self.openapi_types = {
            'balance': int,
            'browsers': List[Browser],
            'free_screenshots_left': int,
            'hosting_browshot': int,
            'instances': List[Instance],
            'private_instances': int,
            'screenshots': List[Screenshot]
        }

        self.attribute_map = {
            'balance': 'balance',
            'browsers': 'browsers',
            'free_screenshots_left': 'free_screenshots_left',
            'hosting_browshot': 'hosting_browshot',
            'instances': 'instances',
            'private_instances': 'private_instances',
            'screenshots': 'screenshots'
        }

        self._balance = balance
        self._browsers = browsers
        self._free_screenshots_left = free_screenshots_left
        self._hosting_browshot = hosting_browshot
        self._instances = instances
        self._private_instances = private_instances
        self._screenshots = screenshots

    @classmethod
    def from_dict(cls, dikt: dict) -> 'Account':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Account of this Account.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def balance(self):
        """Gets the balance of this Account.

        number of credits left on your account

        :return: The balance of this Account.
        :rtype: int
        """
        return self._balance

    @balance.setter
    def balance(self, balance):
        """Sets the balance of this Account.

        number of credits left on your account

        :param balance: The balance of this Account.
        :type balance: int
        """
        if balance is None:
            raise ValueError("Invalid value for `balance`, must not be `None`")

        self._balance = balance

    @property
    def browsers(self):
        """Gets the browsers of this Account.

        list of custom browsers as returned by /api/v1/browser/list

        :return: The browsers of this Account.
        :rtype: List[Browser]
        """
        return self._browsers

    @browsers.setter
    def browsers(self, browsers):
        """Sets the browsers of this Account.

        list of custom browsers as returned by /api/v1/browser/list

        :param browsers: The browsers of this Account.
        :type browsers: List[Browser]
        """

        self._browsers = browsers

    @property
    def free_screenshots_left(self):
        """Gets the free_screenshots_left of this Account.

        number of free screenshots available for the current month

        :return: The free_screenshots_left of this Account.
        :rtype: int
        """
        return self._free_screenshots_left

    @free_screenshots_left.setter
    def free_screenshots_left(self, free_screenshots_left):
        """Sets the free_screenshots_left of this Account.

        number of free screenshots available for the current month

        :param free_screenshots_left: The free_screenshots_left of this Account.
        :type free_screenshots_left: int
        """
        if free_screenshots_left is None:
            raise ValueError("Invalid value for `free_screenshots_left`, must not be `None`")

        self._free_screenshots_left = free_screenshots_left

    @property
    def hosting_browshot(self):
        """Gets the hosting_browshot of this Account.

        1 is your account is authorized to request hosting on Browshot, 0 otherwise (default)

        :return: The hosting_browshot of this Account.
        :rtype: int
        """
        return self._hosting_browshot

    @hosting_browshot.setter
    def hosting_browshot(self, hosting_browshot):
        """Sets the hosting_browshot of this Account.

        1 is your account is authorized to request hosting on Browshot, 0 otherwise (default)

        :param hosting_browshot: The hosting_browshot of this Account.
        :type hosting_browshot: int
        """
        if hosting_browshot is None:
            raise ValueError("Invalid value for `hosting_browshot`, must not be `None`")
        if hosting_browshot is not None and hosting_browshot > 1:
            raise ValueError("Invalid value for `hosting_browshot`, must be a value less than or equal to `1`")
        if hosting_browshot is not None and hosting_browshot < 0:
            raise ValueError("Invalid value for `hosting_browshot`, must be a value greater than or equal to `0`")

        self._hosting_browshot = hosting_browshot

    @property
    def instances(self):
        """Gets the instances of this Account.

        list of private instances as returned by /api/v1/instance/list

        :return: The instances of this Account.
        :rtype: List[Instance]
        """
        return self._instances

    @instances.setter
    def instances(self, instances):
        """Sets the instances of this Account.

        list of private instances as returned by /api/v1/instance/list

        :param instances: The instances of this Account.
        :type instances: List[Instance]
        """

        self._instances = instances

    @property
    def private_instances(self):
        """Gets the private_instances of this Account.

        1 is your account is authorized to create and use private instances, 0 otherwise (default)

        :return: The private_instances of this Account.
        :rtype: int
        """
        return self._private_instances

    @private_instances.setter
    def private_instances(self, private_instances):
        """Sets the private_instances of this Account.

        1 is your account is authorized to create and use private instances, 0 otherwise (default)

        :param private_instances: The private_instances of this Account.
        :type private_instances: int
        """
        if private_instances is None:
            raise ValueError("Invalid value for `private_instances`, must not be `None`")
        if private_instances is not None and private_instances > 1:
            raise ValueError("Invalid value for `private_instances`, must be a value less than or equal to `1`")
        if private_instances is not None and private_instances < 0:
            raise ValueError("Invalid value for `private_instances`, must be a value greater than or equal to `0`")

        self._private_instances = private_instances

    @property
    def screenshots(self):
        """Gets the screenshots of this Account.

        list of 10 latest screenshots requests as returned by /api/v1/screenshot/list

        :return: The screenshots of this Account.
        :rtype: List[Screenshot]
        """
        return self._screenshots

    @screenshots.setter
    def screenshots(self, screenshots):
        """Sets the screenshots of this Account.

        list of 10 latest screenshots requests as returned by /api/v1/screenshot/list

        :param screenshots: The screenshots of this Account.
        :type screenshots: List[Screenshot]
        """

        self._screenshots = screenshots
