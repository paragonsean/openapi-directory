# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class Batch(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, count: int=None, failed: int=None, finished: int=None, id: int=None, processed: int=None, started: int=None, status: str=None, urls: List[str]=None):
        """Batch - a model defined in OpenAPI

        :param count: The count of this Batch.
        :param failed: The failed of this Batch.
        :param finished: The finished of this Batch.
        :param id: The id of this Batch.
        :param processed: The processed of this Batch.
        :param started: The started of this Batch.
        :param status: The status of this Batch.
        :param urls: The urls of this Batch.
        """
        self.openapi_types = {
            'count': int,
            'failed': int,
            'finished': int,
            'id': int,
            'processed': int,
            'started': int,
            'status': str,
            'urls': List[str]
        }

        self.attribute_map = {
            'count': 'count',
            'failed': 'failed',
            'finished': 'finished',
            'id': 'id',
            'processed': 'processed',
            'started': 'started',
            'status': 'status',
            'urls': 'urls'
        }

        self._count = count
        self._failed = failed
        self._finished = finished
        self._id = id
        self._processed = processed
        self._started = started
        self._status = status
        self._urls = urls

    @classmethod
    def from_dict(cls, dikt: dict) -> 'Batch':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Batch of this Batch.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def count(self):
        """Gets the count of this Batch.

        number of unique URLs in the batch

        :return: The count of this Batch.
        :rtype: int
        """
        return self._count

    @count.setter
    def count(self, count):
        """Sets the count of this Batch.

        number of unique URLs in the batch

        :param count: The count of this Batch.
        :type count: int
        """

        self._count = count

    @property
    def failed(self):
        """Gets the failed of this Batch.

        number of screenshots failed

        :return: The failed of this Batch.
        :rtype: int
        """
        return self._failed

    @failed.setter
    def failed(self, failed):
        """Sets the failed of this Batch.

        number of screenshots failed

        :param failed: The failed of this Batch.
        :type failed: int
        """

        self._failed = failed

    @property
    def finished(self):
        """Gets the finished of this Batch.

        time of batch completed (UNIX timestamp)

        :return: The finished of this Batch.
        :rtype: int
        """
        return self._finished

    @finished.setter
    def finished(self, finished):
        """Sets the finished of this Batch.

        time of batch completed (UNIX timestamp)

        :param finished: The finished of this Batch.
        :type finished: int
        """

        self._finished = finished

    @property
    def id(self):
        """Gets the id of this Batch.

        batch ID

        :return: The id of this Batch.
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this Batch.

        batch ID

        :param id: The id of this Batch.
        :type id: int
        """

        self._id = id

    @property
    def processed(self):
        """Gets the processed of this Batch.

        number of screenshots finishe

        :return: The processed of this Batch.
        :rtype: int
        """
        return self._processed

    @processed.setter
    def processed(self, processed):
        """Sets the processed of this Batch.

        number of screenshots finishe

        :param processed: The processed of this Batch.
        :type processed: int
        """

        self._processed = processed

    @property
    def started(self):
        """Gets the started of this Batch.

        time of processing (UNIX timestamp)

        :return: The started of this Batch.
        :rtype: int
        """
        return self._started

    @started.setter
    def started(self, started):
        """Sets the started of this Batch.

        time of processing (UNIX timestamp)

        :param started: The started of this Batch.
        :type started: int
        """

        self._started = started

    @property
    def status(self):
        """Gets the status of this Batch.

        status of the request - \"in_queue\", \"processing\", \"finished\", \"error\"

        :return: The status of this Batch.
        :rtype: str
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this Batch.

        status of the request - \"in_queue\", \"processing\", \"finished\", \"error\"

        :param status: The status of this Batch.
        :type status: str
        """
        allowed_values = ["in_queue", "processing", "finished", "error"]  # noqa: E501
        if status not in allowed_values:
            raise ValueError(
                "Invalid value for `status` ({0}), must be one of {1}"
                .format(status, allowed_values)
            )

        self._status = status

    @property
    def urls(self):
        """Gets the urls of this Batch.

        URLs to download the batch

        :return: The urls of this Batch.
        :rtype: List[str]
        """
        return self._urls

    @urls.setter
    def urls(self, urls):
        """Sets the urls of this Batch.

        URLs to download the batch

        :param urls: The urls of this Batch.
        :type urls: List[str]
        """

        self._urls = urls
