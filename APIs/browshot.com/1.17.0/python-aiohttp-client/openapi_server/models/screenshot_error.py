# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class ScreenshotError(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, cost: float=None, error: str=None, priority: float=None, status: str=None):
        """ScreenshotError - a model defined in OpenAPI

        :param cost: The cost of this ScreenshotError.
        :param error: The error of this ScreenshotError.
        :param priority: The priority of this ScreenshotError.
        :param status: The status of this ScreenshotError.
        """
        self.openapi_types = {
            'cost': float,
            'error': str,
            'priority': float,
            'status': str
        }

        self.attribute_map = {
            'cost': 'cost',
            'error': 'error',
            'priority': 'priority',
            'status': 'status'
        }

        self._cost = cost
        self._error = error
        self._priority = priority
        self._status = status

    @classmethod
    def from_dict(cls, dikt: dict) -> 'ScreenshotError':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The ScreenshotError of this ScreenshotError.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def cost(self):
        """Gets the cost of this ScreenshotError.

        number of credits taken

        :return: The cost of this ScreenshotError.
        :rtype: float
        """
        return self._cost

    @cost.setter
    def cost(self, cost):
        """Sets the cost of this ScreenshotError.

        number of credits taken

        :param cost: The cost of this ScreenshotError.
        :type cost: float
        """

        self._cost = cost

    @property
    def error(self):
        """Gets the error of this ScreenshotError.

        description of the problem that occurred

        :return: The error of this ScreenshotError.
        :rtype: str
        """
        return self._error

    @error.setter
    def error(self, error):
        """Sets the error of this ScreenshotError.

        description of the problem that occurred

        :param error: The error of this ScreenshotError.
        :type error: str
        """

        self._error = error

    @property
    def priority(self):
        """Gets the priority of this ScreenshotError.

        priority given to the screenshot - high (1) to low (3)

        :return: The priority of this ScreenshotError.
        :rtype: float
        """
        return self._priority

    @priority.setter
    def priority(self, priority):
        """Sets the priority of this ScreenshotError.

        priority given to the screenshot - high (1) to low (3)

        :param priority: The priority of this ScreenshotError.
        :type priority: float
        """

        self._priority = priority

    @property
    def status(self):
        """Gets the status of this ScreenshotError.

        status of the request - \"in_queue\", \"processing\", \"finished\", \"error\"

        :return: The status of this ScreenshotError.
        :rtype: str
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this ScreenshotError.

        status of the request - \"in_queue\", \"processing\", \"finished\", \"error\"

        :param status: The status of this ScreenshotError.
        :type status: str
        """

        self._status = status
