# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class Browser(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, flash: int=None, id: int=None, javascript: int=None, mobile: int=None, name: str=None):
        """Browser - a model defined in OpenAPI

        :param flash: The flash of this Browser.
        :param id: The id of this Browser.
        :param javascript: The javascript of this Browser.
        :param mobile: The mobile of this Browser.
        :param name: The name of this Browser.
        """
        self.openapi_types = {
            'flash': int,
            'id': int,
            'javascript': int,
            'mobile': int,
            'name': str
        }

        self.attribute_map = {
            'flash': 'flash',
            'id': 'id',
            'javascript': 'javascript',
            'mobile': 'mobile',
            'name': 'name'
        }

        self._flash = flash
        self._id = id
        self._javascript = javascript
        self._mobile = mobile
        self._name = name

    @classmethod
    def from_dict(cls, dikt: dict) -> 'Browser':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Browser of this Browser.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def flash(self):
        """Gets the flash of this Browser.

        Flash support: 1 if enabled, 0 if disabled

        :return: The flash of this Browser.
        :rtype: int
        """
        return self._flash

    @flash.setter
    def flash(self, flash):
        """Sets the flash of this Browser.

        Flash support: 1 if enabled, 0 if disabled

        :param flash: The flash of this Browser.
        :type flash: int
        """
        if flash is not None and flash > 1:
            raise ValueError("Invalid value for `flash`, must be a value less than or equal to `1`")
        if flash is not None and flash < 0:
            raise ValueError("Invalid value for `flash`, must be a value greater than or equal to `0`")

        self._flash = flash

    @property
    def id(self):
        """Gets the id of this Browser.

        browser ID

        :return: The id of this Browser.
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this Browser.

        browser ID

        :param id: The id of this Browser.
        :type id: int
        """

        self._id = id

    @property
    def javascript(self):
        """Gets the javascript of this Browser.

        JavaScript support: 1 if enabled, 0 if disabled

        :return: The javascript of this Browser.
        :rtype: int
        """
        return self._javascript

    @javascript.setter
    def javascript(self, javascript):
        """Sets the javascript of this Browser.

        JavaScript support: 1 if enabled, 0 if disabled

        :param javascript: The javascript of this Browser.
        :type javascript: int
        """
        if javascript is not None and javascript > 1:
            raise ValueError("Invalid value for `javascript`, must be a value less than or equal to `1`")
        if javascript is not None and javascript < 0:
            raise ValueError("Invalid value for `javascript`, must be a value greater than or equal to `0`")

        self._javascript = javascript

    @property
    def mobile(self):
        """Gets the mobile of this Browser.

        Mobile browser: 1 if true, 0 if false

        :return: The mobile of this Browser.
        :rtype: int
        """
        return self._mobile

    @mobile.setter
    def mobile(self, mobile):
        """Sets the mobile of this Browser.

        Mobile browser: 1 if true, 0 if false

        :param mobile: The mobile of this Browser.
        :type mobile: int
        """
        if mobile is not None and mobile > 1:
            raise ValueError("Invalid value for `mobile`, must be a value less than or equal to `1`")
        if mobile is not None and mobile < 0:
            raise ValueError("Invalid value for `mobile`, must be a value greater than or equal to `0`")

        self._mobile = mobile

    @property
    def name(self):
        """Gets the name of this Browser.

        browser name and version: Firefox 45, etc.

        :return: The name of this Browser.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this Browser.

        browser name and version: Firefox 45, etc.

        :param name: The name of this Browser.
        :type name: str
        """

        self._name = name
