# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class Screenshot(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, cookie: str=None, cost: int=None, delay: int=None, details: int=None, error: str=None, final_url: str=None, flash_delay: int=None, height: int=None, id: int=None, instance_id: int=None, post_data: str=None, priority: int=None, referer: str=None, scale: float=None, screenshot_url: object=None, script: str=None, shared_url: str=None, size: str=None, status: str=None, url: str=None, width: int=None):
        """Screenshot - a model defined in OpenAPI

        :param cookie: The cookie of this Screenshot.
        :param cost: The cost of this Screenshot.
        :param delay: The delay of this Screenshot.
        :param details: The details of this Screenshot.
        :param error: The error of this Screenshot.
        :param final_url: The final_url of this Screenshot.
        :param flash_delay: The flash_delay of this Screenshot.
        :param height: The height of this Screenshot.
        :param id: The id of this Screenshot.
        :param instance_id: The instance_id of this Screenshot.
        :param post_data: The post_data of this Screenshot.
        :param priority: The priority of this Screenshot.
        :param referer: The referer of this Screenshot.
        :param scale: The scale of this Screenshot.
        :param screenshot_url: The screenshot_url of this Screenshot.
        :param script: The script of this Screenshot.
        :param shared_url: The shared_url of this Screenshot.
        :param size: The size of this Screenshot.
        :param status: The status of this Screenshot.
        :param url: The url of this Screenshot.
        :param width: The width of this Screenshot.
        """
        self.openapi_types = {
            'cookie': str,
            'cost': int,
            'delay': int,
            'details': int,
            'error': str,
            'final_url': str,
            'flash_delay': int,
            'height': int,
            'id': int,
            'instance_id': int,
            'post_data': str,
            'priority': int,
            'referer': str,
            'scale': float,
            'screenshot_url': object,
            'script': str,
            'shared_url': str,
            'size': str,
            'status': str,
            'url': str,
            'width': int
        }

        self.attribute_map = {
            'cookie': 'cookie',
            'cost': 'cost',
            'delay': 'delay',
            'details': 'details',
            'error': 'error',
            'final_url': 'final_url',
            'flash_delay': 'flash_delay',
            'height': 'height',
            'id': 'id',
            'instance_id': 'instance_id',
            'post_data': 'post_data',
            'priority': 'priority',
            'referer': 'referer',
            'scale': 'scale',
            'screenshot_url': 'screenshot_url',
            'script': 'script',
            'shared_url': 'shared_url',
            'size': 'size',
            'status': 'status',
            'url': 'url',
            'width': 'width'
        }

        self._cookie = cookie
        self._cost = cost
        self._delay = delay
        self._details = details
        self._error = error
        self._final_url = final_url
        self._flash_delay = flash_delay
        self._height = height
        self._id = id
        self._instance_id = instance_id
        self._post_data = post_data
        self._priority = priority
        self._referer = referer
        self._scale = scale
        self._screenshot_url = screenshot_url
        self._script = script
        self._shared_url = shared_url
        self._size = size
        self._status = status
        self._url = url
        self._width = width

    @classmethod
    def from_dict(cls, dikt: dict) -> 'Screenshot':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Screenshot of this Screenshot.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def cookie(self):
        """Gets the cookie of this Screenshot.

        custom cookie used (see Custom POST Data, Referer and Cookie)

        :return: The cookie of this Screenshot.
        :rtype: str
        """
        return self._cookie

    @cookie.setter
    def cookie(self, cookie):
        """Sets the cookie of this Screenshot.

        custom cookie used (see Custom POST Data, Referer and Cookie)

        :param cookie: The cookie of this Screenshot.
        :type cookie: str
        """

        self._cookie = cookie

    @property
    def cost(self):
        """Gets the cost of this Screenshot.

        number of credits spent for the screenshot

        :return: The cost of this Screenshot.
        :rtype: int
        """
        return self._cost

    @cost.setter
    def cost(self, cost):
        """Sets the cost of this Screenshot.

        number of credits spent for the screenshot

        :param cost: The cost of this Screenshot.
        :type cost: int
        """

        self._cost = cost

    @property
    def delay(self):
        """Gets the delay of this Screenshot.

        number of seconds to wait after page load

        :return: The delay of this Screenshot.
        :rtype: int
        """
        return self._delay

    @delay.setter
    def delay(self, delay):
        """Sets the delay of this Screenshot.

        number of seconds to wait after page load

        :param delay: The delay of this Screenshot.
        :type delay: int
        """

        self._delay = delay

    @property
    def details(self):
        """Gets the details of this Screenshot.

        level of details about the screenshot and the page

        :return: The details of this Screenshot.
        :rtype: int
        """
        return self._details

    @details.setter
    def details(self, details):
        """Sets the details of this Screenshot.

        level of details about the screenshot and the page

        :param details: The details of this Screenshot.
        :type details: int
        """
        if details is not None and details > 3:
            raise ValueError("Invalid value for `details`, must be a value less than or equal to `3`")
        if details is not None and details < 0:
            raise ValueError("Invalid value for `details`, must be a value greater than or equal to `0`")

        self._details = details

    @property
    def error(self):
        """Gets the error of this Screenshot.

        description of the problem that occurred

        :return: The error of this Screenshot.
        :rtype: str
        """
        return self._error

    @error.setter
    def error(self, error):
        """Sets the error of this Screenshot.

        description of the problem that occurred

        :param error: The error of this Screenshot.
        :type error: str
        """

        self._error = error

    @property
    def final_url(self):
        """Gets the final_url of this Screenshot.

        URL of the screenshot (redirections can occur)

        :return: The final_url of this Screenshot.
        :rtype: str
        """
        return self._final_url

    @final_url.setter
    def final_url(self, final_url):
        """Sets the final_url of this Screenshot.

        URL of the screenshot (redirections can occur)

        :param final_url: The final_url of this Screenshot.
        :type final_url: str
        """

        self._final_url = final_url

    @property
    def flash_delay(self):
        """Gets the flash_delay of this Screenshot.

        number of seconds to wait after page load if Flash elements are present

        :return: The flash_delay of this Screenshot.
        :rtype: int
        """
        return self._flash_delay

    @flash_delay.setter
    def flash_delay(self, flash_delay):
        """Sets the flash_delay of this Screenshot.

        number of seconds to wait after page load if Flash elements are present

        :param flash_delay: The flash_delay of this Screenshot.
        :type flash_delay: int
        """

        self._flash_delay = flash_delay

    @property
    def height(self):
        """Gets the height of this Screenshot.

        screenshot height

        :return: The height of this Screenshot.
        :rtype: int
        """
        return self._height

    @height.setter
    def height(self, height):
        """Sets the height of this Screenshot.

        screenshot height

        :param height: The height of this Screenshot.
        :type height: int
        """

        self._height = height

    @property
    def id(self):
        """Gets the id of this Screenshot.

        screenshot ID

        :return: The id of this Screenshot.
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this Screenshot.

        screenshot ID

        :param id: The id of this Screenshot.
        :type id: int
        """
        if id is None:
            raise ValueError("Invalid value for `id`, must not be `None`")

        self._id = id

    @property
    def instance_id(self):
        """Gets the instance_id of this Screenshot.

        instance ID used for the screenshot

        :return: The instance_id of this Screenshot.
        :rtype: int
        """
        return self._instance_id

    @instance_id.setter
    def instance_id(self, instance_id):
        """Sets the instance_id of this Screenshot.

        instance ID used for the screenshot

        :param instance_id: The instance_id of this Screenshot.
        :type instance_id: int
        """
        if instance_id is None:
            raise ValueError("Invalid value for `instance_id`, must not be `None`")

        self._instance_id = instance_id

    @property
    def post_data(self):
        """Gets the post_data of this Screenshot.

        POST data sent (see Custom POST Data, Referer and Cookie)

        :return: The post_data of this Screenshot.
        :rtype: str
        """
        return self._post_data

    @post_data.setter
    def post_data(self, post_data):
        """Sets the post_data of this Screenshot.

        POST data sent (see Custom POST Data, Referer and Cookie)

        :param post_data: The post_data of this Screenshot.
        :type post_data: str
        """

        self._post_data = post_data

    @property
    def priority(self):
        """Gets the priority of this Screenshot.

        priority given to the screenshot: high (1) to low (3)

        :return: The priority of this Screenshot.
        :rtype: int
        """
        return self._priority

    @priority.setter
    def priority(self, priority):
        """Sets the priority of this Screenshot.

        priority given to the screenshot: high (1) to low (3)

        :param priority: The priority of this Screenshot.
        :type priority: int
        """
        if priority is not None and priority > 3:
            raise ValueError("Invalid value for `priority`, must be a value less than or equal to `3`")
        if priority is not None and priority < 1:
            raise ValueError("Invalid value for `priority`, must be a value greater than or equal to `1`")

        self._priority = priority

    @property
    def referer(self):
        """Gets the referer of this Screenshot.

        custom referrer used (see Custom POST Data, Referer and Cookie)

        :return: The referer of this Screenshot.
        :rtype: str
        """
        return self._referer

    @referer.setter
    def referer(self, referer):
        """Sets the referer of this Screenshot.

        custom referrer used (see Custom POST Data, Referer and Cookie)

        :param referer: The referer of this Screenshot.
        :type referer: str
        """

        self._referer = referer

    @property
    def scale(self):
        """Gets the scale of this Screenshot.

        image scale. Always 1 for desktop browsers; mobiles may change the scale (zoom in or zoom out) to fit the page on the screen

        :return: The scale of this Screenshot.
        :rtype: float
        """
        return self._scale

    @scale.setter
    def scale(self, scale):
        """Sets the scale of this Screenshot.

        image scale. Always 1 for desktop browsers; mobiles may change the scale (zoom in or zoom out) to fit the page on the screen

        :param scale: The scale of this Screenshot.
        :type scale: float
        """

        self._scale = scale

    @property
    def screenshot_url(self):
        """Gets the screenshot_url of this Screenshot.

        URL to download the screenshot

        :return: The screenshot_url of this Screenshot.
        :rtype: object
        """
        return self._screenshot_url

    @screenshot_url.setter
    def screenshot_url(self, screenshot_url):
        """Sets the screenshot_url of this Screenshot.

        URL to download the screenshot

        :param screenshot_url: The screenshot_url of this Screenshot.
        :type screenshot_url: object
        """

        self._screenshot_url = screenshot_url

    @property
    def script(self):
        """Gets the script of this Screenshot.

        URL of optional javascript file executed after the page load event

        :return: The script of this Screenshot.
        :rtype: str
        """
        return self._script

    @script.setter
    def script(self, script):
        """Sets the script of this Screenshot.

        URL of optional javascript file executed after the page load event

        :param script: The script of this Screenshot.
        :type script: str
        """

        self._script = script

    @property
    def shared_url(self):
        """Gets the shared_url of this Screenshot.

        if the screenshot was shared, show the public URL

        :return: The shared_url of this Screenshot.
        :rtype: str
        """
        return self._shared_url

    @shared_url.setter
    def shared_url(self, shared_url):
        """Sets the shared_url of this Screenshot.

        if the screenshot was shared, show the public URL

        :param shared_url: The shared_url of this Screenshot.
        :type shared_url: str
        """

        self._shared_url = shared_url

    @property
    def size(self):
        """Gets the size of this Screenshot.

        screenshot size requested

        :return: The size of this Screenshot.
        :rtype: str
        """
        return self._size

    @size.setter
    def size(self, size):
        """Sets the size of this Screenshot.

        screenshot size requested

        :param size: The size of this Screenshot.
        :type size: str
        """
        allowed_values = ["screen", "page"]  # noqa: E501
        if size not in allowed_values:
            raise ValueError(
                "Invalid value for `size` ({0}), must be one of {1}"
                .format(size, allowed_values)
            )

        self._size = size

    @property
    def status(self):
        """Gets the status of this Screenshot.

        status of the request: \"in_queue\", \"processing\", \"finished\", \"error\" 

        :return: The status of this Screenshot.
        :rtype: str
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this Screenshot.

        status of the request: \"in_queue\", \"processing\", \"finished\", \"error\" 

        :param status: The status of this Screenshot.
        :type status: str
        """
        allowed_values = ["in_queue", "processing", "finished", "error"]  # noqa: E501
        if status not in allowed_values:
            raise ValueError(
                "Invalid value for `status` ({0}), must be one of {1}"
                .format(status, allowed_values)
            )

        self._status = status

    @property
    def url(self):
        """Gets the url of this Screenshot.

        original URL requested

        :return: The url of this Screenshot.
        :rtype: str
        """
        return self._url

    @url.setter
    def url(self, url):
        """Sets the url of this Screenshot.

        original URL requested

        :param url: The url of this Screenshot.
        :type url: str
        """
        if url is None:
            raise ValueError("Invalid value for `url`, must not be `None`")

        self._url = url

    @property
    def width(self):
        """Gets the width of this Screenshot.

        screenshot width

        :return: The width of this Screenshot.
        :rtype: int
        """
        return self._width

    @width.setter
    def width(self, width):
        """Sets the width of this Screenshot.

        screenshot width

        :param width: The width of this Screenshot.
        :type width: int
        """

        self._width = width
