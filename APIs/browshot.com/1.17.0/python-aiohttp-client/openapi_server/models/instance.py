# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.browser import Browser
from openapi_server import util


class Instance(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, browser: Browser=None, country: str=None, height: int=None, id: int=None, load: float=None, screenshot_cost: int=None, type: str=None, width: int=None):
        """Instance - a model defined in OpenAPI

        :param browser: The browser of this Instance.
        :param country: The country of this Instance.
        :param height: The height of this Instance.
        :param id: The id of this Instance.
        :param load: The load of this Instance.
        :param screenshot_cost: The screenshot_cost of this Instance.
        :param type: The type of this Instance.
        :param width: The width of this Instance.
        """
        self.openapi_types = {
            'browser': Browser,
            'country': str,
            'height': int,
            'id': int,
            'load': float,
            'screenshot_cost': int,
            'type': str,
            'width': int
        }

        self.attribute_map = {
            'browser': 'browser',
            'country': 'country',
            'height': 'height',
            'id': 'id',
            'load': 'load',
            'screenshot_cost': 'screenshot_cost',
            'type': 'type',
            'width': 'width'
        }

        self._browser = browser
        self._country = country
        self._height = height
        self._id = id
        self._load = load
        self._screenshot_cost = screenshot_cost
        self._type = type
        self._width = width

    @classmethod
    def from_dict(cls, dikt: dict) -> 'Instance':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Instance of this Instance.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def browser(self):
        """Gets the browser of this Instance.


        :return: The browser of this Instance.
        :rtype: Browser
        """
        return self._browser

    @browser.setter
    def browser(self, browser):
        """Sets the browser of this Instance.


        :param browser: The browser of this Instance.
        :type browser: Browser
        """

        self._browser = browser

    @property
    def country(self):
        """Gets the country of this Instance.

        instance's country of origin

        :return: The country of this Instance.
        :rtype: str
        """
        return self._country

    @country.setter
    def country(self, country):
        """Sets the country of this Instance.

        instance's country of origin

        :param country: The country of this Instance.
        :type country: str
        """

        self._country = country

    @property
    def height(self):
        """Gets the height of this Instance.

        screen height in pixels

        :return: The height of this Instance.
        :rtype: int
        """
        return self._height

    @height.setter
    def height(self, height):
        """Sets the height of this Instance.

        screen height in pixels

        :param height: The height of this Instance.
        :type height: int
        """

        self._height = height

    @property
    def id(self):
        """Gets the id of this Instance.

        instance ID (required to requests screenshots)

        :return: The id of this Instance.
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this Instance.

        instance ID (required to requests screenshots)

        :param id: The id of this Instance.
        :type id: int
        """

        self._id = id

    @property
    def load(self):
        """Gets the load of this Instance.

        instance load:  < 1: new screenshot requests will be processed immediately,  1-2: new screenshot requests will be processed in about two minutes,  2-3: new screenshot requests will be processed in about four minutes,  3-4: new screenshot requests will be processed in about six minutes,  etc. 

        :return: The load of this Instance.
        :rtype: float
        """
        return self._load

    @load.setter
    def load(self, load):
        """Sets the load of this Instance.

        instance load:  < 1: new screenshot requests will be processed immediately,  1-2: new screenshot requests will be processed in about two minutes,  2-3: new screenshot requests will be processed in about four minutes,  3-4: new screenshot requests will be processed in about six minutes,  etc. 

        :param load: The load of this Instance.
        :type load: float
        """

        self._load = load

    @property
    def screenshot_cost(self):
        """Gets the screenshot_cost of this Instance.

        number of credits for each screenshot

        :return: The screenshot_cost of this Instance.
        :rtype: int
        """
        return self._screenshot_cost

    @screenshot_cost.setter
    def screenshot_cost(self, screenshot_cost):
        """Sets the screenshot_cost of this Instance.

        number of credits for each screenshot

        :param screenshot_cost: The screenshot_cost of this Instance.
        :type screenshot_cost: int
        """

        self._screenshot_cost = screenshot_cost

    @property
    def type(self):
        """Gets the type of this Instance.

        public, shared or private

        :return: The type of this Instance.
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this Instance.

        public, shared or private

        :param type: The type of this Instance.
        :type type: str
        """
        allowed_values = ["public", "shared", "private"]  # noqa: E501
        if type not in allowed_values:
            raise ValueError(
                "Invalid value for `type` ({0}), must be one of {1}"
                .format(type, allowed_values)
            )

        self._type = type

    @property
    def width(self):
        """Gets the width of this Instance.

        screen width in pixels

        :return: The width of this Instance.
        :rtype: int
        """
        return self._width

    @width.setter
    def width(self, width):
        """Sets the width of this Instance.

        screen width in pixels

        :param width: The width of this Instance.
        :type width: int
        """

        self._width = width
