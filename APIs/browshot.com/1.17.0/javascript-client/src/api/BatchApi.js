/**
 * Browshot API
 * Take screenshots of any website in real time
 *
 * The version of the OpenAPI document: 1.17.0
 * Contact: support@browshot.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import Batch from '../model/Batch';
import BatchError from '../model/BatchError';

/**
* Batch service.
* @module api/BatchApi
* @version 1.17.0
*/
export default class BatchApi {

    /**
    * Constructs a new BatchApi. 
    * @alias module:api/BatchApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the createBatch operation.
     * @callback module:api/BatchApi~createBatchCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/Batch>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Requests thousands of screenshtos at once
     * Get hundreds or thousands of screenshots from a text file. You can use this API call or the dashboard. Unlike the other API calls, you must issue a POST request with the Content-Type \"multipart/form-data\" in order to upload the text file. The text file must contain the list of URLs to request, 1 URL per line. Failed screenshots will be tried up to 3 times before giving up. 
     * @param {Number} instanceId instance ID to use
     * @param {Object} opts Optional parameters
     * @param {module:model/String} [hosting] hosting option - s3 or browshot
     * @param {Number} [hostingHeight] maximum height of the thumbnail to host
     * @param {Number} [hostingWidth] maximum height of the thumbnail to host
     * @param {Number} [hostingScale = 1.0)] scale of the thumbnail to host
     * @param {String} [hostingBucket] S3 bucket to upload the screenshot or thumbnail (required for S3)
     * @param {String} [hostingFile] file name to use (for S3 only)
     * @param {String} [hostingHeaders] list of headers to add to the S3 object (for S3 only)
     * @param {File} [file] text file to use
     * @param {module:model/String} [size = 'screen')] screenshots size - \\\"screen\\\" (default) or \\\"page\\\"
     * @param {String} [name] name of the batch
     * @param {Number} [width = 1024)] thumbnail width.
     * @param {Number} [height] thumbnail height
     * @param {Number} [delay = 5)] number of seconds to wait after the page has loaded. This is used to let JavaScript run longer before taking the screenshot. Use delay=0 to take screenshots faster.
     * @param {Number} [flashDelay = 10)] number of seconds to wait after the page has loaded if Flash elements are present. Use flash_delay=0 to take screenshots faster.
     * @param {Number} [screenWidth = 1024)] width of the browser window. For desktop browsers only.
     * @param {Number} [screenHeight = 768)] height of the browser window. For desktop browsers only. (Note: full-page screenshots can have a height of up to 15,000px)
     * @param {Number} [priority] assign priority to the screenshot (for private instances only)
     * @param {String} [referer] use a custom referrer header - paid screenshots only
     * @param {String} [postData] send a POST requests with post_data, useful for filling out forms - paid screenshots only
     * @param {String} [cookie] set a cookie for the URL requested (see Custom POST Data, Referer and Cookie) Cookies should be separated by a ; - paid screenshots only
     * @param {String} [script] URL of javascript file to execute after the page load event
     * @param {Number} [details = 2)] level of information available with screenshot/info
     * @param {Number} [html = 0)] saves the HTML of the rendered page which can be retrieved by the API call screenshot/html. This feature costs *1 credit* per screenshot.
     * @param {Number} [maxWait = 0)] maximum number of seconds to wait before triggering the PageLoad event. Note that delay will still be used. (default: 0 = disabled)
     * @param {String} [headers] any custom HTTP headers. (Not supported with Internet Explorer)
     * @param {module:model/String} [format = 'png')] image as PNG or JPEG
     * @param {module:api/BatchApi~createBatchCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/Batch>}
     */
    createBatch(instanceId, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'instanceId' is set
      if (instanceId === undefined || instanceId === null) {
        throw new Error("Missing the required parameter 'instanceId' when calling createBatch");
      }

      let pathParams = {
      };
      let queryParams = {
        'hosting': opts['hosting'],
        'hosting_height': opts['hostingHeight'],
        'hosting_width': opts['hostingWidth'],
        'hosting_scale': opts['hostingScale'],
        'hosting_bucket': opts['hostingBucket'],
        'hosting_file': opts['hostingFile'],
        'hosting_headers': opts['hostingHeaders']
      };
      let headerParams = {
      };
      let formParams = {
        'instance_id': instanceId,
        'file': opts['file'],
        'size': opts['size'],
        'name': opts['name'],
        'width': opts['width'],
        'height': opts['height'],
        'delay': opts['delay'],
        'flash_delay': opts['flashDelay'],
        'screen_width': opts['screenWidth'],
        'screen_height': opts['screenHeight'],
        'priority': opts['priority'],
        'referer': opts['referer'],
        'post_data': opts['postData'],
        'cookie': opts['cookie'],
        'script': opts['script'],
        'details': opts['details'],
        'html': opts['html'],
        'max_wait': opts['maxWait'],
        'headers': opts['headers'],
        'format': opts['format']
      };

      let authNames = ['apiKeyQuery'];
      let contentTypes = ['multipart/form-data'];
      let accepts = ['application/json'];
      let returnType = [Batch];
      return this.apiClient.callApi(
        '/batch/ceate', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getBatchInfo operation.
     * @callback module:api/BatchApi~getBatchInfoCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Batch} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get the batch status
     * Get the status of a batch requested through the API or through the dashboard. 
     * @param {Number} id batch ID
     * @param {module:api/BatchApi~getBatchInfoCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Batch}
     */
    getBatchInfo(id, callback) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling getBatchInfo");
      }

      let pathParams = {
      };
      let queryParams = {
        'id': id
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['apiKeyQuery'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Batch;
      return this.apiClient.callApi(
        '/batch/info', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
