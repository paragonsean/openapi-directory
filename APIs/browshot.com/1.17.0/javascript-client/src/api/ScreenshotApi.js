/**
 * Browshot API
 * Take screenshots of any website in real time
 *
 * The version of the OpenAPI document: 1.17.0
 * Contact: support@browshot.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import Screenshot from '../model/Screenshot';
import ScreenshotError from '../model/ScreenshotError';
import ScreenshotHost from '../model/ScreenshotHost';
import ScreenshotInfoError from '../model/ScreenshotInfoError';
import ScreenshotList from '../model/ScreenshotList';
import ScreenshotShort from '../model/ScreenshotShort';

/**
* Screenshot service.
* @module api/ScreenshotApi
* @version 1.17.0
*/
export default class ScreenshotApi {

    /**
    * Constructs a new ScreenshotApi. 
    * @alias module:api/ScreenshotApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the createMultipleScreenshots operation.
     * @callback module:api/ScreenshotApi~createMultipleScreenshotsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ScreenshotList} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Request multiple screenshots
     * Request multiple screenshots in one API call. The API call accepts all the parameters supported by screenshot/create. You can specify up to 10 URLs and 10 instances for a total of 100 screenshots in one API call. 
     * @param {String} url URL of the page to get a screenshot for. You can specify multiple url parameters (up to 10).
     * @param {Number} instanceId instance ID to use. You can specify multiple instance_id parameters (up to 10).
     * @param {Object} opts Optional parameters
     * @param {module:model/String} [size = 'screen')] screenshot size - \"screen\" (default) or \"page\"
     * @param {Number} [cache = 86400)] use a previous screenshot (same URL, same instance) if it was done within <cache_value> seconds. The default value is 24hours. Specify cache=0 if you want a new screenshot.
     * @param {Number} [delay = 5)] number of seconds to wait after the page has loaded. This is used to let JavaScript run longer before taking the screenshot. Use delay=0 to take screenshots faster.
     * @param {Number} [flashDelay = 10)] number of seconds to wait after the page has loaded if Flash elements are present. Use flash_delay=0 to take screenshots faster.
     * @param {Number} [screenWidth = 1024)] width of the browser window. For desktop browsers only.
     * @param {Number} [screenHeight = 768)] height of the browser window. For desktop browsers only. (Note: full-page screenshots can have a height of up to 15,000px)
     * @param {Number} [priority] assign priority to the screenshot (for private instances only)
     * @param {String} [referer] use a custom referrer header - paid screenshots only
     * @param {String} [postData] send a POST requests with post_data, useful for filling out forms - paid screenshots only
     * @param {String} [cookie] set a cookie for the URL requested (see Custom POST Data, Referer and Cookie) Cookies should be separated by a ; - paid screenshots only
     * @param {String} [script] URL of javascript file to execute after the page load event
     * @param {Number} [details = 2)] level of information available with screenshot/info
     * @param {Number} [html = 0)] saves the HTML of the rendered page which can be retrieved by the API call screenshot/html. This feature costs *1 credit* per screenshot.
     * @param {Number} [maxWait = 0)] maximum number of seconds to wait before triggering the PageLoad event. Note that delay will still be used. (default: 0 = disabled)
     * @param {String} [headers] any custom HTTP headers. (Not supported with Internet Explorer)
     * @param {module:model/String} [hosting] hosting option - s3 or browshot
     * @param {Number} [hostingHeight] maximum height of the thumbnail to host
     * @param {Number} [hostingWidth] maximum height of the thumbnail to host
     * @param {Number} [hostingScale = 1.0)] scale of the thumbnail to host
     * @param {String} [hostingBucket] S3 bucket to upload the screenshot or thumbnail (required for S3)
     * @param {String} [hostingFile] file name to use (for S3 only)
     * @param {String} [hostingHeaders] list of headers to add to the S3 object (for S3 only)
     * @param {module:api/ScreenshotApi~createMultipleScreenshotsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ScreenshotList}
     */
    createMultipleScreenshots(url, instanceId, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'url' is set
      if (url === undefined || url === null) {
        throw new Error("Missing the required parameter 'url' when calling createMultipleScreenshots");
      }
      // verify the required parameter 'instanceId' is set
      if (instanceId === undefined || instanceId === null) {
        throw new Error("Missing the required parameter 'instanceId' when calling createMultipleScreenshots");
      }

      let pathParams = {
      };
      let queryParams = {
        'url': url,
        'instance_id': instanceId,
        'size': opts['size'],
        'cache': opts['cache'],
        'delay': opts['delay'],
        'flash_delay': opts['flashDelay'],
        'screen_width': opts['screenWidth'],
        'screen_height': opts['screenHeight'],
        'priority': opts['priority'],
        'referer': opts['referer'],
        'post_data': opts['postData'],
        'cookie': opts['cookie'],
        'script': opts['script'],
        'details': opts['details'],
        'html': opts['html'],
        'max_wait': opts['maxWait'],
        'headers': opts['headers'],
        'hosting': opts['hosting'],
        'hosting_height': opts['hostingHeight'],
        'hosting_width': opts['hostingWidth'],
        'hosting_scale': opts['hostingScale'],
        'hosting_bucket': opts['hostingBucket'],
        'hosting_file': opts['hostingFile'],
        'hosting_headers': opts['hostingHeaders']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['apiKeyQuery'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ScreenshotList;
      return this.apiClient.callApi(
        '/screenshot/multiple', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the createScreenshot operation.
     * @callback module:api/ScreenshotApi~createScreenshotCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Screenshot} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Request a screenshot
     * Screenshots requests to private and shared instances require a positive balance.  *IMPORTANT*: Remember that you can only do 100 free screenshots per month. To used a premium instance, use instance_id=65 for example. 
     * @param {String} url URL of the page to get a screenshot for
     * @param {Number} instanceId instance ID to use
     * @param {Object} opts Optional parameters
     * @param {module:model/String} [size = 'screen')] screenshot size - \"screen\" (default) or \"page\"
     * @param {Number} [cache = 86400)] use a previous screenshot (same URL, same instance) if it was done within <cache_value> seconds. The default value is 24hours. Specify cache=0 if you want a new screenshot.
     * @param {Number} [delay = 5)] number of seconds to wait after the page has loaded. This is used to let JavaScript run longer before taking the screenshot. Use delay=0 to take screenshots faster.
     * @param {Number} [flashDelay = 10)] number of seconds to wait after the page has loaded if Flash elements are present. Use flash_delay=0 to take screenshots faster.
     * @param {Number} [screenWidth = 1024)] width of the browser window. For desktop browsers only.
     * @param {Number} [screenHeight = 768)] height of the browser window. For desktop browsers only. (Note: full-page screenshots can have a height of up to 15,000px)
     * @param {Number} [priority] assign priority to the screenshot (for private instances only)
     * @param {String} [referer] use a custom referrer header - paid screenshots only
     * @param {String} [postData] send a POST requests with post_data, useful for filling out forms - paid screenshots only
     * @param {String} [cookie] set a cookie for the URL requested (see Custom POST Data, Referer and Cookie) Cookies should be separated by a ; - paid screenshots only
     * @param {String} [script] URL of javascript file to execute after the page load event
     * @param {Number} [details = 2)] level of information available with screenshot/info
     * @param {Number} [html = 0)] saves the HTML of the rendered page which can be retrieved by the API call screenshot/html. This feature costs *1 credit* per screenshot.
     * @param {Number} [maxWait = 0)] maximum number of seconds to wait before triggering the PageLoad event. Note that delay will still be used. (default: 0 = disabled)
     * @param {String} [headers] any custom HTTP headers. (Not supported with Internet Explorer)
     * @param {Number} [shots = 1)] take multiple screenshots of the same page. This costs 1 additional credit for every 2 additional screenshots.
     * @param {Number} [shotInterval = 5)] number of seconds between 2 screenshots
     * @param {module:model/String} [hosting] hosting option - s3 or browshot
     * @param {Number} [hostingHeight] maximum height of the thumbnail to host
     * @param {Number} [hostingWidth] maximum height of the thumbnail to host
     * @param {Number} [hostingScale = 1.0)] scale of the thumbnail to host
     * @param {String} [hostingBucket] S3 bucket to upload the screenshot or thumbnail (required for S3)
     * @param {String} [hostingFile] file name to use (for S3 only)
     * @param {String} [hostingHeaders] list of headers to add to the S3 object (for S3 only)
     * @param {module:api/ScreenshotApi~createScreenshotCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Screenshot}
     */
    createScreenshot(url, instanceId, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'url' is set
      if (url === undefined || url === null) {
        throw new Error("Missing the required parameter 'url' when calling createScreenshot");
      }
      // verify the required parameter 'instanceId' is set
      if (instanceId === undefined || instanceId === null) {
        throw new Error("Missing the required parameter 'instanceId' when calling createScreenshot");
      }

      let pathParams = {
      };
      let queryParams = {
        'url': url,
        'instance_id': instanceId,
        'size': opts['size'],
        'cache': opts['cache'],
        'delay': opts['delay'],
        'flash_delay': opts['flashDelay'],
        'screen_width': opts['screenWidth'],
        'screen_height': opts['screenHeight'],
        'priority': opts['priority'],
        'referer': opts['referer'],
        'post_data': opts['postData'],
        'cookie': opts['cookie'],
        'script': opts['script'],
        'details': opts['details'],
        'html': opts['html'],
        'max_wait': opts['maxWait'],
        'headers': opts['headers'],
        'shots': opts['shots'],
        'shot_interval': opts['shotInterval'],
        'hosting': opts['hosting'],
        'hosting_height': opts['hostingHeight'],
        'hosting_width': opts['hostingWidth'],
        'hosting_scale': opts['hostingScale'],
        'hosting_bucket': opts['hostingBucket'],
        'hosting_file': opts['hostingFile'],
        'hosting_headers': opts['hostingHeaders']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['apiKeyQuery'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Screenshot;
      return this.apiClient.callApi(
        '/screenshot/create', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteScreenshot operation.
     * @callback module:api/ScreenshotApi~deleteScreenshotCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/ScreenshotShort>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete screenshot data
     * You can delete details of your screenshots to remove any confidential information. 
     * @param {Number} id screenshot ID
     * @param {Object} opts Optional parameters
     * @param {String} [data = 'image')] data to remove. You can specify multiple of them (separated by a ,): *image* (image files), *url* (url requested), *metadata* (time added, time finished, post data, cookie and referer used for the screenshot), *all* (all data and files) 
     * @param {module:api/ScreenshotApi~deleteScreenshotCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/ScreenshotShort>}
     */
    deleteScreenshot(id, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling deleteScreenshot");
      }

      let pathParams = {
      };
      let queryParams = {
        'id': id,
        'data': opts['data']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['apiKeyQuery'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [ScreenshotShort];
      return this.apiClient.callApi(
        '/screenshot/delete', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getHTML operation.
     * @callback module:api/ScreenshotApi~getHTMLCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get the HTML code
     * Retrieve the HTML code of the rendered page. This API call should be used when html=1 was specified in the screenshot request. 
     * @param {Number} id screenshot ID
     * @param {module:api/ScreenshotApi~getHTMLCallback} callback The callback function, accepting three arguments: error, data, response
     */
    getHTML(id, callback) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling getHTML");
      }

      let pathParams = {
      };
      let queryParams = {
        'id': id
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['apiKeyQuery'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/screenshot/html', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getMultipleScreenshotsInfo operation.
     * @callback module:api/ScreenshotApi~getMultipleScreenshotsInfoCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/ScreenshotList>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get information about screenshots
     * Get information about the last 100 screenshots requested.
     * @param {Object} opts Optional parameters
     * @param {Number} [limit = 100)] maximum number of screenshots' information to return
     * @param {module:model/String} [status] get list of screenshot in a given status (error, finished, in_process)
     * @param {module:api/ScreenshotApi~getMultipleScreenshotsInfoCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/ScreenshotList>}
     */
    getMultipleScreenshotsInfo(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'limit': opts['limit'],
        'status': opts['status']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['apiKeyQuery'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [ScreenshotList];
      return this.apiClient.callApi(
        '/screenshot/list', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getScreenshotInfo operation.
     * @callback module:api/ScreenshotApi~getScreenshotInfoCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/Screenshot>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Query screenshot status
     * Once a screenshot has been requested, its status must be checked until it is either \"error\" or \"finished\".
     * @param {Number} id screenshot ID received from /api/v1/screenshot/create
     * @param {Object} opts Optional parameters
     * @param {Number} [details = 2)] level of details about the screenshot and the page
     * @param {module:api/ScreenshotApi~getScreenshotInfoCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/Screenshot>}
     */
    getScreenshotInfo(id, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling getScreenshotInfo");
      }

      let pathParams = {
      };
      let queryParams = {
        'id': id,
        'details': opts['details']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['apiKeyQuery'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [Screenshot];
      return this.apiClient.callApi(
        '/screenshot/info', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getThumbnail operation.
     * @callback module:api/ScreenshotApi~getThumbnailCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Retrieve a thumbnail image
     * Unlike the other API calls, this API sends back the thumbnail as a PNG file, not JSON. The HTTP response code indicates whether the screenshot was successful (200), or incomplete (404) or failed (404). If the screenshot failed or is not finished, a default image \"Not found\" is sent.  You can crop your screenshots. The crop is done first, then the thumbnail. You can take a 1024x768 screenshot, crop it to 768x768, and get it scaled down to 300x300. 
     * @param {Number} id screenshot ID
     * @param {Object} opts Optional parameters
     * @param {Number} [width] width of the thumbnail
     * @param {Number} [height] height of the thumbnail
     * @param {Number} [scale = 1.0)] scale of the thumbnail
     * @param {Number} [zoom = 100)] zoom 1 to 100 percent
     * @param {module:model/String} [ratio = 'fit')] Use fit to keep the original page ration, and fill to get a thumbnail for the exact width and height.  specified. If you provide both width and height, you need to specify the ratio: fit to keep the original width/height ratio (the thumbnail might be smaller than the specified width and height), or fill to crop the image if necessary.
     * @param {Number} [left = 0)] left edge of the area to be cropped
     * @param {Number} [right = 0)] right edge of the area to be cropped
     * @param {Number} [top = 0)] top edge of the area to be cropped
     * @param {Number} [bottom] bottom edge of the area to be cropped
     * @param {module:model/String} [format = 'png')] image as PNG or JPEG
     * @param {Number} [shot = 1)] get the second or third screenshot if multiple screenshots were requested
     * @param {Number} [quality = 100)] JPEG quality factor (for JPEG thumbnails only)
     * @param {module:api/ScreenshotApi~getThumbnailCallback} callback The callback function, accepting three arguments: error, data, response
     */
    getThumbnail(id, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling getThumbnail");
      }

      let pathParams = {
      };
      let queryParams = {
        'id': id,
        'width': opts['width'],
        'height': opts['height'],
        'scale': opts['scale'],
        'zoom': opts['zoom'],
        'ratio': opts['ratio'],
        'left': opts['left'],
        'right': opts['right'],
        'top': opts['top'],
        'bottom': opts['bottom'],
        'format': opts['format'],
        'shot': opts['shot'],
        'quality': opts['quality']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['apiKeyQuery'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/screenshot/thumbnail', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the hostScreenshot operation.
     * @callback module:api/ScreenshotApi~hostScreenshotCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/ScreenshotHost>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Host thumbnails on your own S3 account or on Browshot.
     * You can host screenshots and thumbnails on your own S3 account or on Browshot.
     * @param {Number} id screenshot ID
     * @param {module:model/String} hosting hosting option: s3 or browshot
     * @param {Object} opts Optional parameters
     * @param {Number} [width] width of the thumbnail
     * @param {Number} [height] height of the thumbnail
     * @param {Number} [scale = 1.0)] scale of the thumbnail
     * @param {String} [bucket] S3 bucket to upload the screenshot or thumbnail - required with hosting=s3
     * @param {String} [file] file name to use - optional, used with hosting=s3
     * @param {String} [headers] HTTP headers to add to your S3 object - optional, used with hosting=s3
     * @param {module:api/ScreenshotApi~hostScreenshotCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/ScreenshotHost>}
     */
    hostScreenshot(id, hosting, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling hostScreenshot");
      }
      // verify the required parameter 'hosting' is set
      if (hosting === undefined || hosting === null) {
        throw new Error("Missing the required parameter 'hosting' when calling hostScreenshot");
      }

      let pathParams = {
      };
      let queryParams = {
        'id': id,
        'hosting': hosting,
        'width': opts['width'],
        'height': opts['height'],
        'scale': opts['scale'],
        'bucket': opts['bucket'],
        'file': opts['file'],
        'headers': opts['headers']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['apiKeyQuery'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [ScreenshotHost];
      return this.apiClient.callApi(
        '/screenshot/host', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the searchScreenshot operation.
     * @callback module:api/ScreenshotApi~searchScreenshotCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/ScreenshotList>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Search for screenshots
     * Search for screenshots of a specific URL.
     * @param {String} url look for a string matching the URL requested
     * @param {Object} opts Optional parameters
     * @param {Number} [limit = 50)] maximum number of screenshots' information to return
     * @param {module:model/String} [status] get list of screenshot in a given status (error, finished, in_process)
     * @param {module:api/ScreenshotApi~searchScreenshotCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/ScreenshotList>}
     */
    searchScreenshot(url, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'url' is set
      if (url === undefined || url === null) {
        throw new Error("Missing the required parameter 'url' when calling searchScreenshot");
      }

      let pathParams = {
      };
      let queryParams = {
        'url': url,
        'limit': opts['limit'],
        'status': opts['status']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['apiKeyQuery'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [ScreenshotList];
      return this.apiClient.callApi(
        '/screenshot/search', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the shareScreenshot operation.
     * @callback module:api/ScreenshotApi~shareScreenshotCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/ScreenshotHost>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Share a screenshot
     * You can make your screenshots public, add notes, and share it with your friends and colleagues. Only screenshots which are successfully completed can be shared.n the thumbnail. You can take a 1024x768 screenshot, crop it to 768x768, and get it scaled down to 300x300. 
     * @param {Number} id screenshot ID
     * @param {Object} opts Optional parameters
     * @param {String} [note] note to add on the sharing page
     * @param {module:api/ScreenshotApi~shareScreenshotCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/ScreenshotHost>}
     */
    shareScreenshot(id, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling shareScreenshot");
      }

      let pathParams = {
      };
      let queryParams = {
        'id': id,
        'note': opts['note']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['apiKeyQuery'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [ScreenshotHost];
      return this.apiClient.callApi(
        '/screenshot/share', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
