/**
 * Browshot API
 * Take screenshots of any website in real time
 *
 * The version of the OpenAPI document: 1.17.0
 * Contact: support@browshot.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import Browser from './Browser';

/**
 * The Instance model module.
 * @module model/Instance
 * @version 1.17.0
 */
class Instance {
    /**
     * Constructs a new <code>Instance</code>.
     * @alias module:model/Instance
     */
    constructor() { 
        
        Instance.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>Instance</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/Instance} obj Optional instance to populate.
     * @return {module:model/Instance} The populated <code>Instance</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new Instance();

            if (data.hasOwnProperty('browser')) {
                obj['browser'] = Browser.constructFromObject(data['browser']);
            }
            if (data.hasOwnProperty('country')) {
                obj['country'] = ApiClient.convertToType(data['country'], 'String');
            }
            if (data.hasOwnProperty('height')) {
                obj['height'] = ApiClient.convertToType(data['height'], 'Number');
            }
            if (data.hasOwnProperty('id')) {
                obj['id'] = ApiClient.convertToType(data['id'], 'Number');
            }
            if (data.hasOwnProperty('load')) {
                obj['load'] = ApiClient.convertToType(data['load'], 'Number');
            }
            if (data.hasOwnProperty('screenshot_cost')) {
                obj['screenshot_cost'] = ApiClient.convertToType(data['screenshot_cost'], 'Number');
            }
            if (data.hasOwnProperty('type')) {
                obj['type'] = ApiClient.convertToType(data['type'], 'String');
            }
            if (data.hasOwnProperty('width')) {
                obj['width'] = ApiClient.convertToType(data['width'], 'Number');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>Instance</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>Instance</code>.
     */
    static validateJSON(data) {
        // validate the optional field `browser`
        if (data['browser']) { // data not null
          Browser.validateJSON(data['browser']);
        }
        // ensure the json data is a string
        if (data['country'] && !(typeof data['country'] === 'string' || data['country'] instanceof String)) {
            throw new Error("Expected the field `country` to be a primitive type in the JSON string but got " + data['country']);
        }
        // ensure the json data is a string
        if (data['type'] && !(typeof data['type'] === 'string' || data['type'] instanceof String)) {
            throw new Error("Expected the field `type` to be a primitive type in the JSON string but got " + data['type']);
        }

        return true;
    }


}



/**
 * @member {module:model/Browser} browser
 */
Instance.prototype['browser'] = undefined;

/**
 * instance's country of origin
 * @member {String} country
 */
Instance.prototype['country'] = undefined;

/**
 * screen height in pixels
 * @member {Number} height
 */
Instance.prototype['height'] = undefined;

/**
 * instance ID (required to requests screenshots)
 * @member {Number} id
 */
Instance.prototype['id'] = undefined;

/**
 * instance load:  < 1: new screenshot requests will be processed immediately,  1-2: new screenshot requests will be processed in about two minutes,  2-3: new screenshot requests will be processed in about four minutes,  3-4: new screenshot requests will be processed in about six minutes,  etc. 
 * @member {Number} load
 */
Instance.prototype['load'] = undefined;

/**
 * number of credits for each screenshot
 * @member {Number} screenshot_cost
 */
Instance.prototype['screenshot_cost'] = undefined;

/**
 * public, shared or private
 * @member {module:model/Instance.TypeEnum} type
 */
Instance.prototype['type'] = undefined;

/**
 * screen width in pixels
 * @member {Number} width
 */
Instance.prototype['width'] = undefined;





/**
 * Allowed values for the <code>type</code> property.
 * @enum {String}
 * @readonly
 */
Instance['TypeEnum'] = {

    /**
     * value: "public"
     * @const
     */
    "public": "public",

    /**
     * value: "shared"
     * @const
     */
    "shared": "shared",

    /**
     * value: "private"
     * @const
     */
    "private": "private"
};



export default Instance;

