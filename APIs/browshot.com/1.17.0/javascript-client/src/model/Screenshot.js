/**
 * Browshot API
 * Take screenshots of any website in real time
 *
 * The version of the OpenAPI document: 1.17.0
 * Contact: support@browshot.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The Screenshot model module.
 * @module model/Screenshot
 * @version 1.17.0
 */
class Screenshot {
    /**
     * Constructs a new <code>Screenshot</code>.
     * @alias module:model/Screenshot
     * @param id {Number} screenshot ID
     * @param instanceId {Number} instance ID used for the screenshot
     * @param status {module:model/Screenshot.StatusEnum} status of the request: \"in_queue\", \"processing\", \"finished\", \"error\" 
     * @param url {String} original URL requested
     */
    constructor(id, instanceId, status, url) { 
        
        Screenshot.initialize(this, id, instanceId, status, url);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, id, instanceId, status, url) { 
        obj['id'] = id;
        obj['instance_id'] = instanceId;
        obj['status'] = status;
        obj['url'] = url;
    }

    /**
     * Constructs a <code>Screenshot</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/Screenshot} obj Optional instance to populate.
     * @return {module:model/Screenshot} The populated <code>Screenshot</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new Screenshot();

            if (data.hasOwnProperty('cookie')) {
                obj['cookie'] = ApiClient.convertToType(data['cookie'], 'String');
            }
            if (data.hasOwnProperty('cost')) {
                obj['cost'] = ApiClient.convertToType(data['cost'], 'Number');
            }
            if (data.hasOwnProperty('delay')) {
                obj['delay'] = ApiClient.convertToType(data['delay'], 'Number');
            }
            if (data.hasOwnProperty('details')) {
                obj['details'] = ApiClient.convertToType(data['details'], 'Number');
            }
            if (data.hasOwnProperty('error')) {
                obj['error'] = ApiClient.convertToType(data['error'], 'String');
            }
            if (data.hasOwnProperty('final_url')) {
                obj['final_url'] = ApiClient.convertToType(data['final_url'], 'String');
            }
            if (data.hasOwnProperty('flash_delay')) {
                obj['flash_delay'] = ApiClient.convertToType(data['flash_delay'], 'Number');
            }
            if (data.hasOwnProperty('height')) {
                obj['height'] = ApiClient.convertToType(data['height'], 'Number');
            }
            if (data.hasOwnProperty('id')) {
                obj['id'] = ApiClient.convertToType(data['id'], 'Number');
            }
            if (data.hasOwnProperty('instance_id')) {
                obj['instance_id'] = ApiClient.convertToType(data['instance_id'], 'Number');
            }
            if (data.hasOwnProperty('post_data')) {
                obj['post_data'] = ApiClient.convertToType(data['post_data'], 'String');
            }
            if (data.hasOwnProperty('priority')) {
                obj['priority'] = ApiClient.convertToType(data['priority'], 'Number');
            }
            if (data.hasOwnProperty('referer')) {
                obj['referer'] = ApiClient.convertToType(data['referer'], 'String');
            }
            if (data.hasOwnProperty('scale')) {
                obj['scale'] = ApiClient.convertToType(data['scale'], 'Number');
            }
            if (data.hasOwnProperty('screenshot_url')) {
                obj['screenshot_url'] = ApiClient.convertToType(data['screenshot_url'], Object);
            }
            if (data.hasOwnProperty('script')) {
                obj['script'] = ApiClient.convertToType(data['script'], 'String');
            }
            if (data.hasOwnProperty('shared_url')) {
                obj['shared_url'] = ApiClient.convertToType(data['shared_url'], 'String');
            }
            if (data.hasOwnProperty('size')) {
                obj['size'] = ApiClient.convertToType(data['size'], 'String');
            }
            if (data.hasOwnProperty('status')) {
                obj['status'] = ApiClient.convertToType(data['status'], 'String');
            }
            if (data.hasOwnProperty('url')) {
                obj['url'] = ApiClient.convertToType(data['url'], 'String');
            }
            if (data.hasOwnProperty('width')) {
                obj['width'] = ApiClient.convertToType(data['width'], 'Number');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>Screenshot</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>Screenshot</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of Screenshot.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // ensure the json data is a string
        if (data['cookie'] && !(typeof data['cookie'] === 'string' || data['cookie'] instanceof String)) {
            throw new Error("Expected the field `cookie` to be a primitive type in the JSON string but got " + data['cookie']);
        }
        // ensure the json data is a string
        if (data['error'] && !(typeof data['error'] === 'string' || data['error'] instanceof String)) {
            throw new Error("Expected the field `error` to be a primitive type in the JSON string but got " + data['error']);
        }
        // ensure the json data is a string
        if (data['final_url'] && !(typeof data['final_url'] === 'string' || data['final_url'] instanceof String)) {
            throw new Error("Expected the field `final_url` to be a primitive type in the JSON string but got " + data['final_url']);
        }
        // ensure the json data is a string
        if (data['post_data'] && !(typeof data['post_data'] === 'string' || data['post_data'] instanceof String)) {
            throw new Error("Expected the field `post_data` to be a primitive type in the JSON string but got " + data['post_data']);
        }
        // ensure the json data is a string
        if (data['referer'] && !(typeof data['referer'] === 'string' || data['referer'] instanceof String)) {
            throw new Error("Expected the field `referer` to be a primitive type in the JSON string but got " + data['referer']);
        }
        // ensure the json data is a string
        if (data['script'] && !(typeof data['script'] === 'string' || data['script'] instanceof String)) {
            throw new Error("Expected the field `script` to be a primitive type in the JSON string but got " + data['script']);
        }
        // ensure the json data is a string
        if (data['shared_url'] && !(typeof data['shared_url'] === 'string' || data['shared_url'] instanceof String)) {
            throw new Error("Expected the field `shared_url` to be a primitive type in the JSON string but got " + data['shared_url']);
        }
        // ensure the json data is a string
        if (data['size'] && !(typeof data['size'] === 'string' || data['size'] instanceof String)) {
            throw new Error("Expected the field `size` to be a primitive type in the JSON string but got " + data['size']);
        }
        // ensure the json data is a string
        if (data['status'] && !(typeof data['status'] === 'string' || data['status'] instanceof String)) {
            throw new Error("Expected the field `status` to be a primitive type in the JSON string but got " + data['status']);
        }
        // ensure the json data is a string
        if (data['url'] && !(typeof data['url'] === 'string' || data['url'] instanceof String)) {
            throw new Error("Expected the field `url` to be a primitive type in the JSON string but got " + data['url']);
        }

        return true;
    }


}

Screenshot.RequiredProperties = ["id", "instance_id", "status", "url"];

/**
 * custom cookie used (see Custom POST Data, Referer and Cookie)
 * @member {String} cookie
 */
Screenshot.prototype['cookie'] = undefined;

/**
 * number of credits spent for the screenshot
 * @member {Number} cost
 */
Screenshot.prototype['cost'] = undefined;

/**
 * number of seconds to wait after page load
 * @member {Number} delay
 */
Screenshot.prototype['delay'] = undefined;

/**
 * level of details about the screenshot and the page
 * @member {Number} details
 */
Screenshot.prototype['details'] = undefined;

/**
 * description of the problem that occurred
 * @member {String} error
 */
Screenshot.prototype['error'] = undefined;

/**
 * URL of the screenshot (redirections can occur)
 * @member {String} final_url
 */
Screenshot.prototype['final_url'] = undefined;

/**
 * number of seconds to wait after page load if Flash elements are present
 * @member {Number} flash_delay
 */
Screenshot.prototype['flash_delay'] = undefined;

/**
 * screenshot height
 * @member {Number} height
 */
Screenshot.prototype['height'] = undefined;

/**
 * screenshot ID
 * @member {Number} id
 */
Screenshot.prototype['id'] = undefined;

/**
 * instance ID used for the screenshot
 * @member {Number} instance_id
 */
Screenshot.prototype['instance_id'] = undefined;

/**
 * POST data sent (see Custom POST Data, Referer and Cookie)
 * @member {String} post_data
 */
Screenshot.prototype['post_data'] = undefined;

/**
 * priority given to the screenshot: high (1) to low (3)
 * @member {Number} priority
 */
Screenshot.prototype['priority'] = undefined;

/**
 * custom referrer used (see Custom POST Data, Referer and Cookie)
 * @member {String} referer
 */
Screenshot.prototype['referer'] = undefined;

/**
 * image scale. Always 1 for desktop browsers; mobiles may change the scale (zoom in or zoom out) to fit the page on the screen
 * @member {Number} scale
 */
Screenshot.prototype['scale'] = undefined;

/**
 * URL to download the screenshot
 * @member {Object} screenshot_url
 */
Screenshot.prototype['screenshot_url'] = undefined;

/**
 * URL of optional javascript file executed after the page load event
 * @member {String} script
 */
Screenshot.prototype['script'] = undefined;

/**
 * if the screenshot was shared, show the public URL
 * @member {String} shared_url
 */
Screenshot.prototype['shared_url'] = undefined;

/**
 * screenshot size requested
 * @member {module:model/Screenshot.SizeEnum} size
 */
Screenshot.prototype['size'] = undefined;

/**
 * status of the request: \"in_queue\", \"processing\", \"finished\", \"error\" 
 * @member {module:model/Screenshot.StatusEnum} status
 */
Screenshot.prototype['status'] = undefined;

/**
 * original URL requested
 * @member {String} url
 */
Screenshot.prototype['url'] = undefined;

/**
 * screenshot width
 * @member {Number} width
 */
Screenshot.prototype['width'] = undefined;





/**
 * Allowed values for the <code>size</code> property.
 * @enum {String}
 * @readonly
 */
Screenshot['SizeEnum'] = {

    /**
     * value: "screen"
     * @const
     */
    "screen": "screen",

    /**
     * value: "page"
     * @const
     */
    "page": "page"
};


/**
 * Allowed values for the <code>status</code> property.
 * @enum {String}
 * @readonly
 */
Screenshot['StatusEnum'] = {

    /**
     * value: "in_queue"
     * @const
     */
    "in_queue": "in_queue",

    /**
     * value: "processing"
     * @const
     */
    "processing": "processing",

    /**
     * value: "finished"
     * @const
     */
    "finished": "finished",

    /**
     * value: "error"
     * @const
     */
    "error": "error"
};



export default Screenshot;

