/**
 * Browshot API
 * Take screenshots of any website in real time
 *
 * The version of the OpenAPI document: 1.17.0
 * Contact: support@browshot.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import Browser from './Browser';
import Instance from './Instance';
import Screenshot from './Screenshot';

/**
 * The Account model module.
 * @module model/Account
 * @version 1.17.0
 */
class Account {
    /**
     * Constructs a new <code>Account</code>.
     * @alias module:model/Account
     * @param balance {Number} number of credits left on your account
     * @param freeScreenshotsLeft {Number} number of free screenshots available for the current month
     * @param hostingBrowshot {Number} 1 is your account is authorized to request hosting on Browshot, 0 otherwise (default)
     * @param privateInstances {Number} 1 is your account is authorized to create and use private instances, 0 otherwise (default)
     */
    constructor(balance, freeScreenshotsLeft, hostingBrowshot, privateInstances) { 
        
        Account.initialize(this, balance, freeScreenshotsLeft, hostingBrowshot, privateInstances);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, balance, freeScreenshotsLeft, hostingBrowshot, privateInstances) { 
        obj['balance'] = balance;
        obj['free_screenshots_left'] = freeScreenshotsLeft;
        obj['hosting_browshot'] = hostingBrowshot;
        obj['private_instances'] = privateInstances;
    }

    /**
     * Constructs a <code>Account</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/Account} obj Optional instance to populate.
     * @return {module:model/Account} The populated <code>Account</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new Account();

            if (data.hasOwnProperty('balance')) {
                obj['balance'] = ApiClient.convertToType(data['balance'], 'Number');
            }
            if (data.hasOwnProperty('browsers')) {
                obj['browsers'] = ApiClient.convertToType(data['browsers'], [Browser]);
            }
            if (data.hasOwnProperty('free_screenshots_left')) {
                obj['free_screenshots_left'] = ApiClient.convertToType(data['free_screenshots_left'], 'Number');
            }
            if (data.hasOwnProperty('hosting_browshot')) {
                obj['hosting_browshot'] = ApiClient.convertToType(data['hosting_browshot'], 'Number');
            }
            if (data.hasOwnProperty('instances')) {
                obj['instances'] = ApiClient.convertToType(data['instances'], [Instance]);
            }
            if (data.hasOwnProperty('private_instances')) {
                obj['private_instances'] = ApiClient.convertToType(data['private_instances'], 'Number');
            }
            if (data.hasOwnProperty('screenshots')) {
                obj['screenshots'] = ApiClient.convertToType(data['screenshots'], [Screenshot]);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>Account</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>Account</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of Account.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        if (data['browsers']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['browsers'])) {
                throw new Error("Expected the field `browsers` to be an array in the JSON data but got " + data['browsers']);
            }
            // validate the optional field `browsers` (array)
            for (const item of data['browsers']) {
                Browser.validateJSON(item);
            };
        }
        if (data['instances']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['instances'])) {
                throw new Error("Expected the field `instances` to be an array in the JSON data but got " + data['instances']);
            }
            // validate the optional field `instances` (array)
            for (const item of data['instances']) {
                Instance.validateJSON(item);
            };
        }
        if (data['screenshots']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['screenshots'])) {
                throw new Error("Expected the field `screenshots` to be an array in the JSON data but got " + data['screenshots']);
            }
            // validate the optional field `screenshots` (array)
            for (const item of data['screenshots']) {
                Screenshot.validateJSON(item);
            };
        }

        return true;
    }


}

Account.RequiredProperties = ["balance", "free_screenshots_left", "hosting_browshot", "private_instances"];

/**
 * number of credits left on your account
 * @member {Number} balance
 */
Account.prototype['balance'] = undefined;

/**
 * list of custom browsers as returned by /api/v1/browser/list
 * @member {Array.<module:model/Browser>} browsers
 */
Account.prototype['browsers'] = undefined;

/**
 * number of free screenshots available for the current month
 * @member {Number} free_screenshots_left
 */
Account.prototype['free_screenshots_left'] = undefined;

/**
 * 1 is your account is authorized to request hosting on Browshot, 0 otherwise (default)
 * @member {Number} hosting_browshot
 */
Account.prototype['hosting_browshot'] = undefined;

/**
 * list of private instances as returned by /api/v1/instance/list
 * @member {Array.<module:model/Instance>} instances
 */
Account.prototype['instances'] = undefined;

/**
 * 1 is your account is authorized to create and use private instances, 0 otherwise (default)
 * @member {Number} private_instances
 */
Account.prototype['private_instances'] = undefined;

/**
 * list of 10 latest screenshots requests as returned by /api/v1/screenshot/list
 * @member {Array.<module:model/Screenshot>} screenshots
 */
Account.prototype['screenshots'] = undefined;






export default Account;

