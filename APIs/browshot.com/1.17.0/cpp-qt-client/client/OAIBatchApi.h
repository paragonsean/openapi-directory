/**
 * Browshot API
 * Take screenshots of any website in real time
 *
 * The version of the OpenAPI document: 1.17.0
 * Contact: support@browshot.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#ifndef OAI_OAIBatchApi_H
#define OAI_OAIBatchApi_H

#include "OAIHelpers.h"
#include "OAIHttpRequest.h"
#include "OAIServerConfiguration.h"
#include "OAIOauth.h"

#include "OAIBatch.h"
#include "OAIBatchError.h"
#include "OAIHttpFileElement.h"
#include <QString>

#include <QObject>
#include <QByteArray>
#include <QStringList>
#include <QList>
#include <QNetworkAccessManager>

namespace OpenAPI {

class OAIBatchApi : public QObject {
    Q_OBJECT

public:
    OAIBatchApi(const int timeOut = 0);
    ~OAIBatchApi();

    void initializeServerConfigs();
    int setDefaultServerValue(int serverIndex,const QString &operation, const QString &variable,const QString &val);
    void setServerIndex(const QString &operation, int serverIndex);
    void setApiKey(const QString &apiKeyName, const QString &apiKey);
    void setBearerToken(const QString &token);
    void setUsername(const QString &username);
    void setPassword(const QString &password);
    void setTimeOut(const int timeOut);
    void setWorkingDirectory(const QString &path);
    void setNetworkAccessManager(QNetworkAccessManager* manager);
    int addServerConfiguration(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables = QMap<QString, OAIServerVariable>());
    void setNewServerForAllOperations(const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void setNewServer(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void addHeaders(const QString &key, const QString &value);
    void enableRequestCompression();
    void enableResponseCompression();
    void abortRequests();
    QString getParamStylePrefix(const QString &style);
    QString getParamStyleSuffix(const QString &style);
    QString getParamStyleDelimiter(const QString &style, const QString &name, bool isExplode);

    /**
    * @param[in]  instance_id qint32 [required]
    * @param[in]  hosting QString [optional]
    * @param[in]  hosting_height qint32 [optional]
    * @param[in]  hosting_width qint32 [optional]
    * @param[in]  hosting_scale float [optional]
    * @param[in]  hosting_bucket QString [optional]
    * @param[in]  hosting_file QString [optional]
    * @param[in]  hosting_headers QString [optional]
    * @param[in]  file OAIHttpFileElement [optional]
    * @param[in]  size QString [optional]
    * @param[in]  name QString [optional]
    * @param[in]  width qint32 [optional]
    * @param[in]  height qint32 [optional]
    * @param[in]  delay qint32 [optional]
    * @param[in]  flash_delay qint32 [optional]
    * @param[in]  screen_width qint32 [optional]
    * @param[in]  screen_height qint32 [optional]
    * @param[in]  priority qint32 [optional]
    * @param[in]  referer QString [optional]
    * @param[in]  post_data QString [optional]
    * @param[in]  cookie QString [optional]
    * @param[in]  script QString [optional]
    * @param[in]  details qint32 [optional]
    * @param[in]  html qint32 [optional]
    * @param[in]  max_wait qint32 [optional]
    * @param[in]  headers QString [optional]
    * @param[in]  format QString [optional]
    */
    virtual void createBatch(const qint32 &instance_id, const ::OpenAPI::OptionalParam<QString> &hosting = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<qint32> &hosting_height = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint32> &hosting_width = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<float> &hosting_scale = ::OpenAPI::OptionalParam<float>(), const ::OpenAPI::OptionalParam<QString> &hosting_bucket = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &hosting_file = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &hosting_headers = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<OAIHttpFileElement> &file = ::OpenAPI::OptionalParam<OAIHttpFileElement>(), const ::OpenAPI::OptionalParam<QString> &size = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &name = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<qint32> &width = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint32> &height = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint32> &delay = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint32> &flash_delay = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint32> &screen_width = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint32> &screen_height = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint32> &priority = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<QString> &referer = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &post_data = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &cookie = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &script = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<qint32> &details = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint32> &html = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint32> &max_wait = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<QString> &headers = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &format = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  id qint32 [required]
    */
    virtual void getBatchInfo(const qint32 &id);


private:
    QMap<QString,int> _serverIndices;
    QMap<QString,QList<OAIServerConfiguration>> _serverConfigs;
    QMap<QString, QString> _apiKeys;
    QString _bearerToken;
    QString _username;
    QString _password;
    int _timeOut;
    QString _workingDirectory;
    QNetworkAccessManager* _manager;
    QMap<QString, QString> _defaultHeaders;
    bool _isResponseCompressionEnabled;
    bool _isRequestCompressionEnabled;
    OAIHttpRequestInput _latestInput;
    OAIHttpRequestWorker *_latestWorker;
    QStringList _latestScope;
    OauthCode _authFlow;
    OauthImplicit _implicitFlow;
    OauthCredentials _credentialFlow;
    OauthPassword _passwordFlow;
    int _OauthMethod = 0;

    void createBatchCallback(OAIHttpRequestWorker *worker);
    void getBatchInfoCallback(OAIHttpRequestWorker *worker);

Q_SIGNALS:

    void createBatchSignal(QList<OAIBatch> summary);
    void getBatchInfoSignal(OAIBatch summary);


    void createBatchSignalFull(OAIHttpRequestWorker *worker, QList<OAIBatch> summary);
    void getBatchInfoSignalFull(OAIHttpRequestWorker *worker, OAIBatch summary);

    Q_DECL_DEPRECATED_X("Use createBatchSignalError() instead")
    void createBatchSignalE(QList<OAIBatch> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void createBatchSignalError(QList<OAIBatch> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getBatchInfoSignalError() instead")
    void getBatchInfoSignalE(OAIBatch summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getBatchInfoSignalError(OAIBatch summary, QNetworkReply::NetworkError error_type, const QString &error_str);

    Q_DECL_DEPRECATED_X("Use createBatchSignalErrorFull() instead")
    void createBatchSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void createBatchSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getBatchInfoSignalErrorFull() instead")
    void getBatchInfoSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getBatchInfoSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);

    void abortRequestsSignal();
    void allPendingRequestsCompleted();

public Q_SLOTS:
    void tokenAvailable();
};

} // namespace OpenAPI
#endif
