/**
 * Browshot API
 * Take screenshots of any website in real time
 *
 * The version of the OpenAPI document: 1.17.0
 * Contact: support@browshot.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIInstance.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIInstance::OAIInstance(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIInstance::OAIInstance() {
    this->initializeModel();
}

OAIInstance::~OAIInstance() {}

void OAIInstance::initializeModel() {

    m_browser_isSet = false;
    m_browser_isValid = false;

    m_country_isSet = false;
    m_country_isValid = false;

    m_height_isSet = false;
    m_height_isValid = false;

    m_id_isSet = false;
    m_id_isValid = false;

    m_load_isSet = false;
    m_load_isValid = false;

    m_screenshot_cost_isSet = false;
    m_screenshot_cost_isValid = false;

    m_type_isSet = false;
    m_type_isValid = false;

    m_width_isSet = false;
    m_width_isValid = false;
}

void OAIInstance::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIInstance::fromJsonObject(QJsonObject json) {

    m_browser_isValid = ::OpenAPI::fromJsonValue(m_browser, json[QString("browser")]);
    m_browser_isSet = !json[QString("browser")].isNull() && m_browser_isValid;

    m_country_isValid = ::OpenAPI::fromJsonValue(m_country, json[QString("country")]);
    m_country_isSet = !json[QString("country")].isNull() && m_country_isValid;

    m_height_isValid = ::OpenAPI::fromJsonValue(m_height, json[QString("height")]);
    m_height_isSet = !json[QString("height")].isNull() && m_height_isValid;

    m_id_isValid = ::OpenAPI::fromJsonValue(m_id, json[QString("id")]);
    m_id_isSet = !json[QString("id")].isNull() && m_id_isValid;

    m_load_isValid = ::OpenAPI::fromJsonValue(m_load, json[QString("load")]);
    m_load_isSet = !json[QString("load")].isNull() && m_load_isValid;

    m_screenshot_cost_isValid = ::OpenAPI::fromJsonValue(m_screenshot_cost, json[QString("screenshot_cost")]);
    m_screenshot_cost_isSet = !json[QString("screenshot_cost")].isNull() && m_screenshot_cost_isValid;

    m_type_isValid = ::OpenAPI::fromJsonValue(m_type, json[QString("type")]);
    m_type_isSet = !json[QString("type")].isNull() && m_type_isValid;

    m_width_isValid = ::OpenAPI::fromJsonValue(m_width, json[QString("width")]);
    m_width_isSet = !json[QString("width")].isNull() && m_width_isValid;
}

QString OAIInstance::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIInstance::asJsonObject() const {
    QJsonObject obj;
    if (m_browser.isSet()) {
        obj.insert(QString("browser"), ::OpenAPI::toJsonValue(m_browser));
    }
    if (m_country_isSet) {
        obj.insert(QString("country"), ::OpenAPI::toJsonValue(m_country));
    }
    if (m_height_isSet) {
        obj.insert(QString("height"), ::OpenAPI::toJsonValue(m_height));
    }
    if (m_id_isSet) {
        obj.insert(QString("id"), ::OpenAPI::toJsonValue(m_id));
    }
    if (m_load_isSet) {
        obj.insert(QString("load"), ::OpenAPI::toJsonValue(m_load));
    }
    if (m_screenshot_cost_isSet) {
        obj.insert(QString("screenshot_cost"), ::OpenAPI::toJsonValue(m_screenshot_cost));
    }
    if (m_type_isSet) {
        obj.insert(QString("type"), ::OpenAPI::toJsonValue(m_type));
    }
    if (m_width_isSet) {
        obj.insert(QString("width"), ::OpenAPI::toJsonValue(m_width));
    }
    return obj;
}

OAIBrowser OAIInstance::getBrowser() const {
    return m_browser;
}
void OAIInstance::setBrowser(const OAIBrowser &browser) {
    m_browser = browser;
    m_browser_isSet = true;
}

bool OAIInstance::is_browser_Set() const{
    return m_browser_isSet;
}

bool OAIInstance::is_browser_Valid() const{
    return m_browser_isValid;
}

QString OAIInstance::getCountry() const {
    return m_country;
}
void OAIInstance::setCountry(const QString &country) {
    m_country = country;
    m_country_isSet = true;
}

bool OAIInstance::is_country_Set() const{
    return m_country_isSet;
}

bool OAIInstance::is_country_Valid() const{
    return m_country_isValid;
}

qint32 OAIInstance::getHeight() const {
    return m_height;
}
void OAIInstance::setHeight(const qint32 &height) {
    m_height = height;
    m_height_isSet = true;
}

bool OAIInstance::is_height_Set() const{
    return m_height_isSet;
}

bool OAIInstance::is_height_Valid() const{
    return m_height_isValid;
}

qint32 OAIInstance::getId() const {
    return m_id;
}
void OAIInstance::setId(const qint32 &id) {
    m_id = id;
    m_id_isSet = true;
}

bool OAIInstance::is_id_Set() const{
    return m_id_isSet;
}

bool OAIInstance::is_id_Valid() const{
    return m_id_isValid;
}

float OAIInstance::getLoad() const {
    return m_load;
}
void OAIInstance::setLoad(const float &load) {
    m_load = load;
    m_load_isSet = true;
}

bool OAIInstance::is_load_Set() const{
    return m_load_isSet;
}

bool OAIInstance::is_load_Valid() const{
    return m_load_isValid;
}

qint32 OAIInstance::getScreenshotCost() const {
    return m_screenshot_cost;
}
void OAIInstance::setScreenshotCost(const qint32 &screenshot_cost) {
    m_screenshot_cost = screenshot_cost;
    m_screenshot_cost_isSet = true;
}

bool OAIInstance::is_screenshot_cost_Set() const{
    return m_screenshot_cost_isSet;
}

bool OAIInstance::is_screenshot_cost_Valid() const{
    return m_screenshot_cost_isValid;
}

QString OAIInstance::getType() const {
    return m_type;
}
void OAIInstance::setType(const QString &type) {
    m_type = type;
    m_type_isSet = true;
}

bool OAIInstance::is_type_Set() const{
    return m_type_isSet;
}

bool OAIInstance::is_type_Valid() const{
    return m_type_isValid;
}

qint32 OAIInstance::getWidth() const {
    return m_width;
}
void OAIInstance::setWidth(const qint32 &width) {
    m_width = width;
    m_width_isSet = true;
}

bool OAIInstance::is_width_Set() const{
    return m_width_isSet;
}

bool OAIInstance::is_width_Valid() const{
    return m_width_isValid;
}

bool OAIInstance::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_browser.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_country_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_height_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_load_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_screenshot_cost_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_width_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIInstance::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
