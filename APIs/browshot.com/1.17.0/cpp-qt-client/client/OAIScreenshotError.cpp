/**
 * Browshot API
 * Take screenshots of any website in real time
 *
 * The version of the OpenAPI document: 1.17.0
 * Contact: support@browshot.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIScreenshotError.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIScreenshotError::OAIScreenshotError(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIScreenshotError::OAIScreenshotError() {
    this->initializeModel();
}

OAIScreenshotError::~OAIScreenshotError() {}

void OAIScreenshotError::initializeModel() {

    m_cost_isSet = false;
    m_cost_isValid = false;

    m_error_isSet = false;
    m_error_isValid = false;

    m_priority_isSet = false;
    m_priority_isValid = false;

    m_status_isSet = false;
    m_status_isValid = false;
}

void OAIScreenshotError::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIScreenshotError::fromJsonObject(QJsonObject json) {

    m_cost_isValid = ::OpenAPI::fromJsonValue(m_cost, json[QString("cost")]);
    m_cost_isSet = !json[QString("cost")].isNull() && m_cost_isValid;

    m_error_isValid = ::OpenAPI::fromJsonValue(m_error, json[QString("error")]);
    m_error_isSet = !json[QString("error")].isNull() && m_error_isValid;

    m_priority_isValid = ::OpenAPI::fromJsonValue(m_priority, json[QString("priority")]);
    m_priority_isSet = !json[QString("priority")].isNull() && m_priority_isValid;

    m_status_isValid = ::OpenAPI::fromJsonValue(m_status, json[QString("status")]);
    m_status_isSet = !json[QString("status")].isNull() && m_status_isValid;
}

QString OAIScreenshotError::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIScreenshotError::asJsonObject() const {
    QJsonObject obj;
    if (m_cost_isSet) {
        obj.insert(QString("cost"), ::OpenAPI::toJsonValue(m_cost));
    }
    if (m_error_isSet) {
        obj.insert(QString("error"), ::OpenAPI::toJsonValue(m_error));
    }
    if (m_priority_isSet) {
        obj.insert(QString("priority"), ::OpenAPI::toJsonValue(m_priority));
    }
    if (m_status_isSet) {
        obj.insert(QString("status"), ::OpenAPI::toJsonValue(m_status));
    }
    return obj;
}

double OAIScreenshotError::getCost() const {
    return m_cost;
}
void OAIScreenshotError::setCost(const double &cost) {
    m_cost = cost;
    m_cost_isSet = true;
}

bool OAIScreenshotError::is_cost_Set() const{
    return m_cost_isSet;
}

bool OAIScreenshotError::is_cost_Valid() const{
    return m_cost_isValid;
}

QString OAIScreenshotError::getError() const {
    return m_error;
}
void OAIScreenshotError::setError(const QString &error) {
    m_error = error;
    m_error_isSet = true;
}

bool OAIScreenshotError::is_error_Set() const{
    return m_error_isSet;
}

bool OAIScreenshotError::is_error_Valid() const{
    return m_error_isValid;
}

double OAIScreenshotError::getPriority() const {
    return m_priority;
}
void OAIScreenshotError::setPriority(const double &priority) {
    m_priority = priority;
    m_priority_isSet = true;
}

bool OAIScreenshotError::is_priority_Set() const{
    return m_priority_isSet;
}

bool OAIScreenshotError::is_priority_Valid() const{
    return m_priority_isValid;
}

QString OAIScreenshotError::getStatus() const {
    return m_status;
}
void OAIScreenshotError::setStatus(const QString &status) {
    m_status = status;
    m_status_isSet = true;
}

bool OAIScreenshotError::is_status_Set() const{
    return m_status_isSet;
}

bool OAIScreenshotError::is_status_Valid() const{
    return m_status_isValid;
}

bool OAIScreenshotError::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_cost_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_error_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_priority_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_status_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIScreenshotError::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
