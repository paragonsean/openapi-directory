/**
 * Browshot API
 * Take screenshots of any website in real time
 *
 * The version of the OpenAPI document: 1.17.0
 * Contact: support@browshot.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIInstanceList.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIInstanceList::OAIInstanceList(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIInstanceList::OAIInstanceList() {
    this->initializeModel();
}

OAIInstanceList::~OAIInstanceList() {}

void OAIInstanceList::initializeModel() {

    m_free_isSet = false;
    m_free_isValid = false;

    m_r_private_isSet = false;
    m_r_private_isValid = false;

    m_shared_isSet = false;
    m_shared_isValid = false;
}

void OAIInstanceList::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIInstanceList::fromJsonObject(QJsonObject json) {

    m_free_isValid = ::OpenAPI::fromJsonValue(m_free, json[QString("free")]);
    m_free_isSet = !json[QString("free")].isNull() && m_free_isValid;

    m_r_private_isValid = ::OpenAPI::fromJsonValue(m_r_private, json[QString("private")]);
    m_r_private_isSet = !json[QString("private")].isNull() && m_r_private_isValid;

    m_shared_isValid = ::OpenAPI::fromJsonValue(m_shared, json[QString("shared")]);
    m_shared_isSet = !json[QString("shared")].isNull() && m_shared_isValid;
}

QString OAIInstanceList::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIInstanceList::asJsonObject() const {
    QJsonObject obj;
    if (m_free.size() > 0) {
        obj.insert(QString("free"), ::OpenAPI::toJsonValue(m_free));
    }
    if (m_r_private.size() > 0) {
        obj.insert(QString("private"), ::OpenAPI::toJsonValue(m_r_private));
    }
    if (m_shared.size() > 0) {
        obj.insert(QString("shared"), ::OpenAPI::toJsonValue(m_shared));
    }
    return obj;
}

QList<OAIInstance> OAIInstanceList::getFree() const {
    return m_free;
}
void OAIInstanceList::setFree(const QList<OAIInstance> &free) {
    m_free = free;
    m_free_isSet = true;
}

bool OAIInstanceList::is_free_Set() const{
    return m_free_isSet;
}

bool OAIInstanceList::is_free_Valid() const{
    return m_free_isValid;
}

QList<OAIInstance> OAIInstanceList::getRPrivate() const {
    return m_r_private;
}
void OAIInstanceList::setRPrivate(const QList<OAIInstance> &r_private) {
    m_r_private = r_private;
    m_r_private_isSet = true;
}

bool OAIInstanceList::is_r_private_Set() const{
    return m_r_private_isSet;
}

bool OAIInstanceList::is_r_private_Valid() const{
    return m_r_private_isValid;
}

QList<OAIInstance> OAIInstanceList::getShared() const {
    return m_shared;
}
void OAIInstanceList::setShared(const QList<OAIInstance> &shared) {
    m_shared = shared;
    m_shared_isSet = true;
}

bool OAIInstanceList::is_shared_Set() const{
    return m_shared_isSet;
}

bool OAIInstanceList::is_shared_Valid() const{
    return m_shared_isValid;
}

bool OAIInstanceList::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_free.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_r_private.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_shared.size() > 0) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIInstanceList::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
