/**
 * Browshot API
 * Take screenshots of any website in real time
 *
 * The version of the OpenAPI document: 1.17.0
 * Contact: support@browshot.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIAccount.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIAccount::OAIAccount(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIAccount::OAIAccount() {
    this->initializeModel();
}

OAIAccount::~OAIAccount() {}

void OAIAccount::initializeModel() {

    m_balance_isSet = false;
    m_balance_isValid = false;

    m_browsers_isSet = false;
    m_browsers_isValid = false;

    m_free_screenshots_left_isSet = false;
    m_free_screenshots_left_isValid = false;

    m_hosting_browshot_isSet = false;
    m_hosting_browshot_isValid = false;

    m_instances_isSet = false;
    m_instances_isValid = false;

    m_private_instances_isSet = false;
    m_private_instances_isValid = false;

    m_screenshots_isSet = false;
    m_screenshots_isValid = false;
}

void OAIAccount::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIAccount::fromJsonObject(QJsonObject json) {

    m_balance_isValid = ::OpenAPI::fromJsonValue(m_balance, json[QString("balance")]);
    m_balance_isSet = !json[QString("balance")].isNull() && m_balance_isValid;

    m_browsers_isValid = ::OpenAPI::fromJsonValue(m_browsers, json[QString("browsers")]);
    m_browsers_isSet = !json[QString("browsers")].isNull() && m_browsers_isValid;

    m_free_screenshots_left_isValid = ::OpenAPI::fromJsonValue(m_free_screenshots_left, json[QString("free_screenshots_left")]);
    m_free_screenshots_left_isSet = !json[QString("free_screenshots_left")].isNull() && m_free_screenshots_left_isValid;

    m_hosting_browshot_isValid = ::OpenAPI::fromJsonValue(m_hosting_browshot, json[QString("hosting_browshot")]);
    m_hosting_browshot_isSet = !json[QString("hosting_browshot")].isNull() && m_hosting_browshot_isValid;

    m_instances_isValid = ::OpenAPI::fromJsonValue(m_instances, json[QString("instances")]);
    m_instances_isSet = !json[QString("instances")].isNull() && m_instances_isValid;

    m_private_instances_isValid = ::OpenAPI::fromJsonValue(m_private_instances, json[QString("private_instances")]);
    m_private_instances_isSet = !json[QString("private_instances")].isNull() && m_private_instances_isValid;

    m_screenshots_isValid = ::OpenAPI::fromJsonValue(m_screenshots, json[QString("screenshots")]);
    m_screenshots_isSet = !json[QString("screenshots")].isNull() && m_screenshots_isValid;
}

QString OAIAccount::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIAccount::asJsonObject() const {
    QJsonObject obj;
    if (m_balance_isSet) {
        obj.insert(QString("balance"), ::OpenAPI::toJsonValue(m_balance));
    }
    if (m_browsers.size() > 0) {
        obj.insert(QString("browsers"), ::OpenAPI::toJsonValue(m_browsers));
    }
    if (m_free_screenshots_left_isSet) {
        obj.insert(QString("free_screenshots_left"), ::OpenAPI::toJsonValue(m_free_screenshots_left));
    }
    if (m_hosting_browshot_isSet) {
        obj.insert(QString("hosting_browshot"), ::OpenAPI::toJsonValue(m_hosting_browshot));
    }
    if (m_instances.size() > 0) {
        obj.insert(QString("instances"), ::OpenAPI::toJsonValue(m_instances));
    }
    if (m_private_instances_isSet) {
        obj.insert(QString("private_instances"), ::OpenAPI::toJsonValue(m_private_instances));
    }
    if (m_screenshots.size() > 0) {
        obj.insert(QString("screenshots"), ::OpenAPI::toJsonValue(m_screenshots));
    }
    return obj;
}

qint32 OAIAccount::getBalance() const {
    return m_balance;
}
void OAIAccount::setBalance(const qint32 &balance) {
    m_balance = balance;
    m_balance_isSet = true;
}

bool OAIAccount::is_balance_Set() const{
    return m_balance_isSet;
}

bool OAIAccount::is_balance_Valid() const{
    return m_balance_isValid;
}

QList<OAIBrowser> OAIAccount::getBrowsers() const {
    return m_browsers;
}
void OAIAccount::setBrowsers(const QList<OAIBrowser> &browsers) {
    m_browsers = browsers;
    m_browsers_isSet = true;
}

bool OAIAccount::is_browsers_Set() const{
    return m_browsers_isSet;
}

bool OAIAccount::is_browsers_Valid() const{
    return m_browsers_isValid;
}

qint32 OAIAccount::getFreeScreenshotsLeft() const {
    return m_free_screenshots_left;
}
void OAIAccount::setFreeScreenshotsLeft(const qint32 &free_screenshots_left) {
    m_free_screenshots_left = free_screenshots_left;
    m_free_screenshots_left_isSet = true;
}

bool OAIAccount::is_free_screenshots_left_Set() const{
    return m_free_screenshots_left_isSet;
}

bool OAIAccount::is_free_screenshots_left_Valid() const{
    return m_free_screenshots_left_isValid;
}

qint32 OAIAccount::getHostingBrowshot() const {
    return m_hosting_browshot;
}
void OAIAccount::setHostingBrowshot(const qint32 &hosting_browshot) {
    m_hosting_browshot = hosting_browshot;
    m_hosting_browshot_isSet = true;
}

bool OAIAccount::is_hosting_browshot_Set() const{
    return m_hosting_browshot_isSet;
}

bool OAIAccount::is_hosting_browshot_Valid() const{
    return m_hosting_browshot_isValid;
}

QList<OAIInstance> OAIAccount::getInstances() const {
    return m_instances;
}
void OAIAccount::setInstances(const QList<OAIInstance> &instances) {
    m_instances = instances;
    m_instances_isSet = true;
}

bool OAIAccount::is_instances_Set() const{
    return m_instances_isSet;
}

bool OAIAccount::is_instances_Valid() const{
    return m_instances_isValid;
}

qint32 OAIAccount::getPrivateInstances() const {
    return m_private_instances;
}
void OAIAccount::setPrivateInstances(const qint32 &private_instances) {
    m_private_instances = private_instances;
    m_private_instances_isSet = true;
}

bool OAIAccount::is_private_instances_Set() const{
    return m_private_instances_isSet;
}

bool OAIAccount::is_private_instances_Valid() const{
    return m_private_instances_isValid;
}

QList<OAIScreenshot> OAIAccount::getScreenshots() const {
    return m_screenshots;
}
void OAIAccount::setScreenshots(const QList<OAIScreenshot> &screenshots) {
    m_screenshots = screenshots;
    m_screenshots_isSet = true;
}

bool OAIAccount::is_screenshots_Set() const{
    return m_screenshots_isSet;
}

bool OAIAccount::is_screenshots_Valid() const{
    return m_screenshots_isValid;
}

bool OAIAccount::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_balance_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_browsers.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_free_screenshots_left_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_hosting_browshot_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_instances.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_private_instances_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_screenshots.size() > 0) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIAccount::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_balance_isValid && m_free_screenshots_left_isValid && m_hosting_browshot_isValid && m_private_instances_isValid && true;
}

} // namespace OpenAPI
