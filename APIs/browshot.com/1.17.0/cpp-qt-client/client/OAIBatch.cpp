/**
 * Browshot API
 * Take screenshots of any website in real time
 *
 * The version of the OpenAPI document: 1.17.0
 * Contact: support@browshot.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIBatch.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIBatch::OAIBatch(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIBatch::OAIBatch() {
    this->initializeModel();
}

OAIBatch::~OAIBatch() {}

void OAIBatch::initializeModel() {

    m_count_isSet = false;
    m_count_isValid = false;

    m_failed_isSet = false;
    m_failed_isValid = false;

    m_finished_isSet = false;
    m_finished_isValid = false;

    m_id_isSet = false;
    m_id_isValid = false;

    m_processed_isSet = false;
    m_processed_isValid = false;

    m_started_isSet = false;
    m_started_isValid = false;

    m_status_isSet = false;
    m_status_isValid = false;

    m_urls_isSet = false;
    m_urls_isValid = false;
}

void OAIBatch::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIBatch::fromJsonObject(QJsonObject json) {

    m_count_isValid = ::OpenAPI::fromJsonValue(m_count, json[QString("count")]);
    m_count_isSet = !json[QString("count")].isNull() && m_count_isValid;

    m_failed_isValid = ::OpenAPI::fromJsonValue(m_failed, json[QString("failed")]);
    m_failed_isSet = !json[QString("failed")].isNull() && m_failed_isValid;

    m_finished_isValid = ::OpenAPI::fromJsonValue(m_finished, json[QString("finished")]);
    m_finished_isSet = !json[QString("finished")].isNull() && m_finished_isValid;

    m_id_isValid = ::OpenAPI::fromJsonValue(m_id, json[QString("id")]);
    m_id_isSet = !json[QString("id")].isNull() && m_id_isValid;

    m_processed_isValid = ::OpenAPI::fromJsonValue(m_processed, json[QString("processed")]);
    m_processed_isSet = !json[QString("processed")].isNull() && m_processed_isValid;

    m_started_isValid = ::OpenAPI::fromJsonValue(m_started, json[QString("started")]);
    m_started_isSet = !json[QString("started")].isNull() && m_started_isValid;

    m_status_isValid = ::OpenAPI::fromJsonValue(m_status, json[QString("status")]);
    m_status_isSet = !json[QString("status")].isNull() && m_status_isValid;

    m_urls_isValid = ::OpenAPI::fromJsonValue(m_urls, json[QString("urls")]);
    m_urls_isSet = !json[QString("urls")].isNull() && m_urls_isValid;
}

QString OAIBatch::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIBatch::asJsonObject() const {
    QJsonObject obj;
    if (m_count_isSet) {
        obj.insert(QString("count"), ::OpenAPI::toJsonValue(m_count));
    }
    if (m_failed_isSet) {
        obj.insert(QString("failed"), ::OpenAPI::toJsonValue(m_failed));
    }
    if (m_finished_isSet) {
        obj.insert(QString("finished"), ::OpenAPI::toJsonValue(m_finished));
    }
    if (m_id_isSet) {
        obj.insert(QString("id"), ::OpenAPI::toJsonValue(m_id));
    }
    if (m_processed_isSet) {
        obj.insert(QString("processed"), ::OpenAPI::toJsonValue(m_processed));
    }
    if (m_started_isSet) {
        obj.insert(QString("started"), ::OpenAPI::toJsonValue(m_started));
    }
    if (m_status_isSet) {
        obj.insert(QString("status"), ::OpenAPI::toJsonValue(m_status));
    }
    if (m_urls.size() > 0) {
        obj.insert(QString("urls"), ::OpenAPI::toJsonValue(m_urls));
    }
    return obj;
}

qint32 OAIBatch::getCount() const {
    return m_count;
}
void OAIBatch::setCount(const qint32 &count) {
    m_count = count;
    m_count_isSet = true;
}

bool OAIBatch::is_count_Set() const{
    return m_count_isSet;
}

bool OAIBatch::is_count_Valid() const{
    return m_count_isValid;
}

qint32 OAIBatch::getFailed() const {
    return m_failed;
}
void OAIBatch::setFailed(const qint32 &failed) {
    m_failed = failed;
    m_failed_isSet = true;
}

bool OAIBatch::is_failed_Set() const{
    return m_failed_isSet;
}

bool OAIBatch::is_failed_Valid() const{
    return m_failed_isValid;
}

qint32 OAIBatch::getFinished() const {
    return m_finished;
}
void OAIBatch::setFinished(const qint32 &finished) {
    m_finished = finished;
    m_finished_isSet = true;
}

bool OAIBatch::is_finished_Set() const{
    return m_finished_isSet;
}

bool OAIBatch::is_finished_Valid() const{
    return m_finished_isValid;
}

qint32 OAIBatch::getId() const {
    return m_id;
}
void OAIBatch::setId(const qint32 &id) {
    m_id = id;
    m_id_isSet = true;
}

bool OAIBatch::is_id_Set() const{
    return m_id_isSet;
}

bool OAIBatch::is_id_Valid() const{
    return m_id_isValid;
}

qint32 OAIBatch::getProcessed() const {
    return m_processed;
}
void OAIBatch::setProcessed(const qint32 &processed) {
    m_processed = processed;
    m_processed_isSet = true;
}

bool OAIBatch::is_processed_Set() const{
    return m_processed_isSet;
}

bool OAIBatch::is_processed_Valid() const{
    return m_processed_isValid;
}

qint32 OAIBatch::getStarted() const {
    return m_started;
}
void OAIBatch::setStarted(const qint32 &started) {
    m_started = started;
    m_started_isSet = true;
}

bool OAIBatch::is_started_Set() const{
    return m_started_isSet;
}

bool OAIBatch::is_started_Valid() const{
    return m_started_isValid;
}

QString OAIBatch::getStatus() const {
    return m_status;
}
void OAIBatch::setStatus(const QString &status) {
    m_status = status;
    m_status_isSet = true;
}

bool OAIBatch::is_status_Set() const{
    return m_status_isSet;
}

bool OAIBatch::is_status_Valid() const{
    return m_status_isValid;
}

QList<QString> OAIBatch::getUrls() const {
    return m_urls;
}
void OAIBatch::setUrls(const QList<QString> &urls) {
    m_urls = urls;
    m_urls_isSet = true;
}

bool OAIBatch::is_urls_Set() const{
    return m_urls_isSet;
}

bool OAIBatch::is_urls_Valid() const{
    return m_urls_isValid;
}

bool OAIBatch::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_count_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_failed_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_finished_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_processed_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_started_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_status_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_urls.size() > 0) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIBatch::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
