/**
 * Browshot API
 * Take screenshots of any website in real time
 *
 * The version of the OpenAPI document: 1.17.0
 * Contact: support@browshot.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#ifndef OAI_OAIScreenshotApi_H
#define OAI_OAIScreenshotApi_H

#include "OAIHelpers.h"
#include "OAIHttpRequest.h"
#include "OAIServerConfiguration.h"
#include "OAIOauth.h"

#include "OAIScreenshot.h"
#include "OAIScreenshotError.h"
#include "OAIScreenshotHost.h"
#include "OAIScreenshotInfoError.h"
#include "OAIScreenshotList.h"
#include "OAIScreenshotShort.h"
#include <QString>

#include <QObject>
#include <QByteArray>
#include <QStringList>
#include <QList>
#include <QNetworkAccessManager>

namespace OpenAPI {

class OAIScreenshotApi : public QObject {
    Q_OBJECT

public:
    OAIScreenshotApi(const int timeOut = 0);
    ~OAIScreenshotApi();

    void initializeServerConfigs();
    int setDefaultServerValue(int serverIndex,const QString &operation, const QString &variable,const QString &val);
    void setServerIndex(const QString &operation, int serverIndex);
    void setApiKey(const QString &apiKeyName, const QString &apiKey);
    void setBearerToken(const QString &token);
    void setUsername(const QString &username);
    void setPassword(const QString &password);
    void setTimeOut(const int timeOut);
    void setWorkingDirectory(const QString &path);
    void setNetworkAccessManager(QNetworkAccessManager* manager);
    int addServerConfiguration(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables = QMap<QString, OAIServerVariable>());
    void setNewServerForAllOperations(const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void setNewServer(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void addHeaders(const QString &key, const QString &value);
    void enableRequestCompression();
    void enableResponseCompression();
    void abortRequests();
    QString getParamStylePrefix(const QString &style);
    QString getParamStyleSuffix(const QString &style);
    QString getParamStyleDelimiter(const QString &style, const QString &name, bool isExplode);

    /**
    * @param[in]  url QString [required]
    * @param[in]  instance_id qint32 [required]
    * @param[in]  size QString [optional]
    * @param[in]  cache qint32 [optional]
    * @param[in]  delay qint32 [optional]
    * @param[in]  flash_delay qint32 [optional]
    * @param[in]  screen_width qint32 [optional]
    * @param[in]  screen_height qint32 [optional]
    * @param[in]  priority qint32 [optional]
    * @param[in]  referer QString [optional]
    * @param[in]  post_data QString [optional]
    * @param[in]  cookie QString [optional]
    * @param[in]  script QString [optional]
    * @param[in]  details qint32 [optional]
    * @param[in]  html qint32 [optional]
    * @param[in]  max_wait qint32 [optional]
    * @param[in]  headers QString [optional]
    * @param[in]  hosting QString [optional]
    * @param[in]  hosting_height qint32 [optional]
    * @param[in]  hosting_width qint32 [optional]
    * @param[in]  hosting_scale float [optional]
    * @param[in]  hosting_bucket QString [optional]
    * @param[in]  hosting_file QString [optional]
    * @param[in]  hosting_headers QString [optional]
    */
    virtual void createMultipleScreenshots(const QString &url, const qint32 &instance_id, const ::OpenAPI::OptionalParam<QString> &size = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<qint32> &cache = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint32> &delay = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint32> &flash_delay = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint32> &screen_width = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint32> &screen_height = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint32> &priority = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<QString> &referer = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &post_data = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &cookie = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &script = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<qint32> &details = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint32> &html = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint32> &max_wait = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<QString> &headers = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &hosting = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<qint32> &hosting_height = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint32> &hosting_width = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<float> &hosting_scale = ::OpenAPI::OptionalParam<float>(), const ::OpenAPI::OptionalParam<QString> &hosting_bucket = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &hosting_file = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &hosting_headers = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  url QString [required]
    * @param[in]  instance_id qint32 [required]
    * @param[in]  size QString [optional]
    * @param[in]  cache qint32 [optional]
    * @param[in]  delay qint32 [optional]
    * @param[in]  flash_delay qint32 [optional]
    * @param[in]  screen_width qint32 [optional]
    * @param[in]  screen_height qint32 [optional]
    * @param[in]  priority qint32 [optional]
    * @param[in]  referer QString [optional]
    * @param[in]  post_data QString [optional]
    * @param[in]  cookie QString [optional]
    * @param[in]  script QString [optional]
    * @param[in]  details qint32 [optional]
    * @param[in]  html qint32 [optional]
    * @param[in]  max_wait qint32 [optional]
    * @param[in]  headers QString [optional]
    * @param[in]  shots qint32 [optional]
    * @param[in]  shot_interval qint32 [optional]
    * @param[in]  hosting QString [optional]
    * @param[in]  hosting_height qint32 [optional]
    * @param[in]  hosting_width qint32 [optional]
    * @param[in]  hosting_scale float [optional]
    * @param[in]  hosting_bucket QString [optional]
    * @param[in]  hosting_file QString [optional]
    * @param[in]  hosting_headers QString [optional]
    */
    virtual void createScreenshot(const QString &url, const qint32 &instance_id, const ::OpenAPI::OptionalParam<QString> &size = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<qint32> &cache = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint32> &delay = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint32> &flash_delay = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint32> &screen_width = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint32> &screen_height = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint32> &priority = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<QString> &referer = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &post_data = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &cookie = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &script = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<qint32> &details = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint32> &html = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint32> &max_wait = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<QString> &headers = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<qint32> &shots = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint32> &shot_interval = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<QString> &hosting = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<qint32> &hosting_height = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint32> &hosting_width = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<float> &hosting_scale = ::OpenAPI::OptionalParam<float>(), const ::OpenAPI::OptionalParam<QString> &hosting_bucket = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &hosting_file = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &hosting_headers = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  id qint32 [required]
    * @param[in]  data QString [optional]
    */
    virtual void deleteScreenshot(const qint32 &id, const ::OpenAPI::OptionalParam<QString> &data = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  id qint32 [required]
    */
    virtual void getHTML(const qint32 &id);

    /**
    * @param[in]  limit qint32 [optional]
    * @param[in]  status QString [optional]
    */
    virtual void getMultipleScreenshotsInfo(const ::OpenAPI::OptionalParam<qint32> &limit = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<QString> &status = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  id qint32 [required]
    * @param[in]  details qint32 [optional]
    */
    virtual void getScreenshotInfo(const qint32 &id, const ::OpenAPI::OptionalParam<qint32> &details = ::OpenAPI::OptionalParam<qint32>());

    /**
    * @param[in]  id qint32 [required]
    * @param[in]  width qint32 [optional]
    * @param[in]  height qint32 [optional]
    * @param[in]  scale double [optional]
    * @param[in]  zoom qint32 [optional]
    * @param[in]  ratio QString [optional]
    * @param[in]  left qint32 [optional]
    * @param[in]  right qint32 [optional]
    * @param[in]  top qint32 [optional]
    * @param[in]  bottom qint32 [optional]
    * @param[in]  format QString [optional]
    * @param[in]  shot qint32 [optional]
    * @param[in]  quality qint32 [optional]
    */
    virtual void getThumbnail(const qint32 &id, const ::OpenAPI::OptionalParam<qint32> &width = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint32> &height = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<double> &scale = ::OpenAPI::OptionalParam<double>(), const ::OpenAPI::OptionalParam<qint32> &zoom = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<QString> &ratio = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<qint32> &left = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint32> &right = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint32> &top = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint32> &bottom = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<QString> &format = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<qint32> &shot = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint32> &quality = ::OpenAPI::OptionalParam<qint32>());

    /**
    * @param[in]  id qint32 [required]
    * @param[in]  hosting QString [required]
    * @param[in]  width qint32 [optional]
    * @param[in]  height qint32 [optional]
    * @param[in]  scale double [optional]
    * @param[in]  bucket QString [optional]
    * @param[in]  file QString [optional]
    * @param[in]  headers QString [optional]
    */
    virtual void hostScreenshot(const qint32 &id, const QString &hosting, const ::OpenAPI::OptionalParam<qint32> &width = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint32> &height = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<double> &scale = ::OpenAPI::OptionalParam<double>(), const ::OpenAPI::OptionalParam<QString> &bucket = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &file = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &headers = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  url QString [required]
    * @param[in]  limit qint32 [optional]
    * @param[in]  status QString [optional]
    */
    virtual void searchScreenshot(const QString &url, const ::OpenAPI::OptionalParam<qint32> &limit = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<QString> &status = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  id qint32 [required]
    * @param[in]  note QString [optional]
    */
    virtual void shareScreenshot(const qint32 &id, const ::OpenAPI::OptionalParam<QString> &note = ::OpenAPI::OptionalParam<QString>());


private:
    QMap<QString,int> _serverIndices;
    QMap<QString,QList<OAIServerConfiguration>> _serverConfigs;
    QMap<QString, QString> _apiKeys;
    QString _bearerToken;
    QString _username;
    QString _password;
    int _timeOut;
    QString _workingDirectory;
    QNetworkAccessManager* _manager;
    QMap<QString, QString> _defaultHeaders;
    bool _isResponseCompressionEnabled;
    bool _isRequestCompressionEnabled;
    OAIHttpRequestInput _latestInput;
    OAIHttpRequestWorker *_latestWorker;
    QStringList _latestScope;
    OauthCode _authFlow;
    OauthImplicit _implicitFlow;
    OauthCredentials _credentialFlow;
    OauthPassword _passwordFlow;
    int _OauthMethod = 0;

    void createMultipleScreenshotsCallback(OAIHttpRequestWorker *worker);
    void createScreenshotCallback(OAIHttpRequestWorker *worker);
    void deleteScreenshotCallback(OAIHttpRequestWorker *worker);
    void getHTMLCallback(OAIHttpRequestWorker *worker);
    void getMultipleScreenshotsInfoCallback(OAIHttpRequestWorker *worker);
    void getScreenshotInfoCallback(OAIHttpRequestWorker *worker);
    void getThumbnailCallback(OAIHttpRequestWorker *worker);
    void hostScreenshotCallback(OAIHttpRequestWorker *worker);
    void searchScreenshotCallback(OAIHttpRequestWorker *worker);
    void shareScreenshotCallback(OAIHttpRequestWorker *worker);

Q_SIGNALS:

    void createMultipleScreenshotsSignal(OAIScreenshotList summary);
    void createScreenshotSignal(OAIScreenshot summary);
    void deleteScreenshotSignal(QList<OAIScreenshotShort> summary);
    void getHTMLSignal();
    void getMultipleScreenshotsInfoSignal(QList<OAIScreenshotList> summary);
    void getScreenshotInfoSignal(QList<OAIScreenshot> summary);
    void getThumbnailSignal();
    void hostScreenshotSignal(QList<OAIScreenshotHost> summary);
    void searchScreenshotSignal(QList<OAIScreenshotList> summary);
    void shareScreenshotSignal(QList<OAIScreenshotHost> summary);


    void createMultipleScreenshotsSignalFull(OAIHttpRequestWorker *worker, OAIScreenshotList summary);
    void createScreenshotSignalFull(OAIHttpRequestWorker *worker, OAIScreenshot summary);
    void deleteScreenshotSignalFull(OAIHttpRequestWorker *worker, QList<OAIScreenshotShort> summary);
    void getHTMLSignalFull(OAIHttpRequestWorker *worker);
    void getMultipleScreenshotsInfoSignalFull(OAIHttpRequestWorker *worker, QList<OAIScreenshotList> summary);
    void getScreenshotInfoSignalFull(OAIHttpRequestWorker *worker, QList<OAIScreenshot> summary);
    void getThumbnailSignalFull(OAIHttpRequestWorker *worker);
    void hostScreenshotSignalFull(OAIHttpRequestWorker *worker, QList<OAIScreenshotHost> summary);
    void searchScreenshotSignalFull(OAIHttpRequestWorker *worker, QList<OAIScreenshotList> summary);
    void shareScreenshotSignalFull(OAIHttpRequestWorker *worker, QList<OAIScreenshotHost> summary);

    Q_DECL_DEPRECATED_X("Use createMultipleScreenshotsSignalError() instead")
    void createMultipleScreenshotsSignalE(OAIScreenshotList summary, QNetworkReply::NetworkError error_type, QString error_str);
    void createMultipleScreenshotsSignalError(OAIScreenshotList summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use createScreenshotSignalError() instead")
    void createScreenshotSignalE(OAIScreenshot summary, QNetworkReply::NetworkError error_type, QString error_str);
    void createScreenshotSignalError(OAIScreenshot summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use deleteScreenshotSignalError() instead")
    void deleteScreenshotSignalE(QList<OAIScreenshotShort> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void deleteScreenshotSignalError(QList<OAIScreenshotShort> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getHTMLSignalError() instead")
    void getHTMLSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void getHTMLSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getMultipleScreenshotsInfoSignalError() instead")
    void getMultipleScreenshotsInfoSignalE(QList<OAIScreenshotList> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getMultipleScreenshotsInfoSignalError(QList<OAIScreenshotList> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getScreenshotInfoSignalError() instead")
    void getScreenshotInfoSignalE(QList<OAIScreenshot> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getScreenshotInfoSignalError(QList<OAIScreenshot> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getThumbnailSignalError() instead")
    void getThumbnailSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void getThumbnailSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use hostScreenshotSignalError() instead")
    void hostScreenshotSignalE(QList<OAIScreenshotHost> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void hostScreenshotSignalError(QList<OAIScreenshotHost> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use searchScreenshotSignalError() instead")
    void searchScreenshotSignalE(QList<OAIScreenshotList> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void searchScreenshotSignalError(QList<OAIScreenshotList> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use shareScreenshotSignalError() instead")
    void shareScreenshotSignalE(QList<OAIScreenshotHost> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void shareScreenshotSignalError(QList<OAIScreenshotHost> summary, QNetworkReply::NetworkError error_type, const QString &error_str);

    Q_DECL_DEPRECATED_X("Use createMultipleScreenshotsSignalErrorFull() instead")
    void createMultipleScreenshotsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void createMultipleScreenshotsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use createScreenshotSignalErrorFull() instead")
    void createScreenshotSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void createScreenshotSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use deleteScreenshotSignalErrorFull() instead")
    void deleteScreenshotSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void deleteScreenshotSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getHTMLSignalErrorFull() instead")
    void getHTMLSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getHTMLSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getMultipleScreenshotsInfoSignalErrorFull() instead")
    void getMultipleScreenshotsInfoSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getMultipleScreenshotsInfoSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getScreenshotInfoSignalErrorFull() instead")
    void getScreenshotInfoSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getScreenshotInfoSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getThumbnailSignalErrorFull() instead")
    void getThumbnailSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getThumbnailSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use hostScreenshotSignalErrorFull() instead")
    void hostScreenshotSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void hostScreenshotSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use searchScreenshotSignalErrorFull() instead")
    void searchScreenshotSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void searchScreenshotSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use shareScreenshotSignalErrorFull() instead")
    void shareScreenshotSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void shareScreenshotSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);

    void abortRequestsSignal();
    void allPendingRequestsCompleted();

public Q_SLOTS:
    void tokenAvailable();
};

} // namespace OpenAPI
#endif
