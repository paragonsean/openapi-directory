/**
 * Browshot API
 * Take screenshots of any website in real time
 *
 * The version of the OpenAPI document: 1.17.0
 * Contact: support@browshot.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAIAccount.h
 *
 * 
 */

#ifndef OAIAccount_H
#define OAIAccount_H

#include <QJsonObject>

#include "OAIBrowser.h"
#include "OAIInstance.h"
#include "OAIScreenshot.h"
#include <QList>

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {
class OAIBrowser;
class OAIInstance;
class OAIScreenshot;

class OAIAccount : public OAIObject {
public:
    OAIAccount();
    OAIAccount(QString json);
    ~OAIAccount() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    qint32 getBalance() const;
    void setBalance(const qint32 &balance);
    bool is_balance_Set() const;
    bool is_balance_Valid() const;

    QList<OAIBrowser> getBrowsers() const;
    void setBrowsers(const QList<OAIBrowser> &browsers);
    bool is_browsers_Set() const;
    bool is_browsers_Valid() const;

    qint32 getFreeScreenshotsLeft() const;
    void setFreeScreenshotsLeft(const qint32 &free_screenshots_left);
    bool is_free_screenshots_left_Set() const;
    bool is_free_screenshots_left_Valid() const;

    qint32 getHostingBrowshot() const;
    void setHostingBrowshot(const qint32 &hosting_browshot);
    bool is_hosting_browshot_Set() const;
    bool is_hosting_browshot_Valid() const;

    QList<OAIInstance> getInstances() const;
    void setInstances(const QList<OAIInstance> &instances);
    bool is_instances_Set() const;
    bool is_instances_Valid() const;

    qint32 getPrivateInstances() const;
    void setPrivateInstances(const qint32 &private_instances);
    bool is_private_instances_Set() const;
    bool is_private_instances_Valid() const;

    QList<OAIScreenshot> getScreenshots() const;
    void setScreenshots(const QList<OAIScreenshot> &screenshots);
    bool is_screenshots_Set() const;
    bool is_screenshots_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    qint32 m_balance;
    bool m_balance_isSet;
    bool m_balance_isValid;

    QList<OAIBrowser> m_browsers;
    bool m_browsers_isSet;
    bool m_browsers_isValid;

    qint32 m_free_screenshots_left;
    bool m_free_screenshots_left_isSet;
    bool m_free_screenshots_left_isValid;

    qint32 m_hosting_browshot;
    bool m_hosting_browshot_isSet;
    bool m_hosting_browshot_isValid;

    QList<OAIInstance> m_instances;
    bool m_instances_isSet;
    bool m_instances_isValid;

    qint32 m_private_instances;
    bool m_private_instances_isSet;
    bool m_private_instances_isValid;

    QList<OAIScreenshot> m_screenshots;
    bool m_screenshots_isSet;
    bool m_screenshots_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAIAccount)

#endif // OAIAccount_H
