/**
 * Browshot API
 * Take screenshots of any website in real time
 *
 * The version of the OpenAPI document: 1.17.0
 * Contact: support@browshot.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIScreenshot.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIScreenshot::OAIScreenshot(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIScreenshot::OAIScreenshot() {
    this->initializeModel();
}

OAIScreenshot::~OAIScreenshot() {}

void OAIScreenshot::initializeModel() {

    m_cookie_isSet = false;
    m_cookie_isValid = false;

    m_cost_isSet = false;
    m_cost_isValid = false;

    m_delay_isSet = false;
    m_delay_isValid = false;

    m_details_isSet = false;
    m_details_isValid = false;

    m_error_isSet = false;
    m_error_isValid = false;

    m_final_url_isSet = false;
    m_final_url_isValid = false;

    m_flash_delay_isSet = false;
    m_flash_delay_isValid = false;

    m_height_isSet = false;
    m_height_isValid = false;

    m_id_isSet = false;
    m_id_isValid = false;

    m_instance_id_isSet = false;
    m_instance_id_isValid = false;

    m_post_data_isSet = false;
    m_post_data_isValid = false;

    m_priority_isSet = false;
    m_priority_isValid = false;

    m_referer_isSet = false;
    m_referer_isValid = false;

    m_scale_isSet = false;
    m_scale_isValid = false;

    m_screenshot_url_isSet = false;
    m_screenshot_url_isValid = false;

    m_script_isSet = false;
    m_script_isValid = false;

    m_shared_url_isSet = false;
    m_shared_url_isValid = false;

    m_size_isSet = false;
    m_size_isValid = false;

    m_status_isSet = false;
    m_status_isValid = false;

    m_url_isSet = false;
    m_url_isValid = false;

    m_width_isSet = false;
    m_width_isValid = false;
}

void OAIScreenshot::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIScreenshot::fromJsonObject(QJsonObject json) {

    m_cookie_isValid = ::OpenAPI::fromJsonValue(m_cookie, json[QString("cookie")]);
    m_cookie_isSet = !json[QString("cookie")].isNull() && m_cookie_isValid;

    m_cost_isValid = ::OpenAPI::fromJsonValue(m_cost, json[QString("cost")]);
    m_cost_isSet = !json[QString("cost")].isNull() && m_cost_isValid;

    m_delay_isValid = ::OpenAPI::fromJsonValue(m_delay, json[QString("delay")]);
    m_delay_isSet = !json[QString("delay")].isNull() && m_delay_isValid;

    m_details_isValid = ::OpenAPI::fromJsonValue(m_details, json[QString("details")]);
    m_details_isSet = !json[QString("details")].isNull() && m_details_isValid;

    m_error_isValid = ::OpenAPI::fromJsonValue(m_error, json[QString("error")]);
    m_error_isSet = !json[QString("error")].isNull() && m_error_isValid;

    m_final_url_isValid = ::OpenAPI::fromJsonValue(m_final_url, json[QString("final_url")]);
    m_final_url_isSet = !json[QString("final_url")].isNull() && m_final_url_isValid;

    m_flash_delay_isValid = ::OpenAPI::fromJsonValue(m_flash_delay, json[QString("flash_delay")]);
    m_flash_delay_isSet = !json[QString("flash_delay")].isNull() && m_flash_delay_isValid;

    m_height_isValid = ::OpenAPI::fromJsonValue(m_height, json[QString("height")]);
    m_height_isSet = !json[QString("height")].isNull() && m_height_isValid;

    m_id_isValid = ::OpenAPI::fromJsonValue(m_id, json[QString("id")]);
    m_id_isSet = !json[QString("id")].isNull() && m_id_isValid;

    m_instance_id_isValid = ::OpenAPI::fromJsonValue(m_instance_id, json[QString("instance_id")]);
    m_instance_id_isSet = !json[QString("instance_id")].isNull() && m_instance_id_isValid;

    m_post_data_isValid = ::OpenAPI::fromJsonValue(m_post_data, json[QString("post_data")]);
    m_post_data_isSet = !json[QString("post_data")].isNull() && m_post_data_isValid;

    m_priority_isValid = ::OpenAPI::fromJsonValue(m_priority, json[QString("priority")]);
    m_priority_isSet = !json[QString("priority")].isNull() && m_priority_isValid;

    m_referer_isValid = ::OpenAPI::fromJsonValue(m_referer, json[QString("referer")]);
    m_referer_isSet = !json[QString("referer")].isNull() && m_referer_isValid;

    m_scale_isValid = ::OpenAPI::fromJsonValue(m_scale, json[QString("scale")]);
    m_scale_isSet = !json[QString("scale")].isNull() && m_scale_isValid;

    m_screenshot_url_isValid = ::OpenAPI::fromJsonValue(m_screenshot_url, json[QString("screenshot_url")]);
    m_screenshot_url_isSet = !json[QString("screenshot_url")].isNull() && m_screenshot_url_isValid;

    m_script_isValid = ::OpenAPI::fromJsonValue(m_script, json[QString("script")]);
    m_script_isSet = !json[QString("script")].isNull() && m_script_isValid;

    m_shared_url_isValid = ::OpenAPI::fromJsonValue(m_shared_url, json[QString("shared_url")]);
    m_shared_url_isSet = !json[QString("shared_url")].isNull() && m_shared_url_isValid;

    m_size_isValid = ::OpenAPI::fromJsonValue(m_size, json[QString("size")]);
    m_size_isSet = !json[QString("size")].isNull() && m_size_isValid;

    m_status_isValid = ::OpenAPI::fromJsonValue(m_status, json[QString("status")]);
    m_status_isSet = !json[QString("status")].isNull() && m_status_isValid;

    m_url_isValid = ::OpenAPI::fromJsonValue(m_url, json[QString("url")]);
    m_url_isSet = !json[QString("url")].isNull() && m_url_isValid;

    m_width_isValid = ::OpenAPI::fromJsonValue(m_width, json[QString("width")]);
    m_width_isSet = !json[QString("width")].isNull() && m_width_isValid;
}

QString OAIScreenshot::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIScreenshot::asJsonObject() const {
    QJsonObject obj;
    if (m_cookie_isSet) {
        obj.insert(QString("cookie"), ::OpenAPI::toJsonValue(m_cookie));
    }
    if (m_cost_isSet) {
        obj.insert(QString("cost"), ::OpenAPI::toJsonValue(m_cost));
    }
    if (m_delay_isSet) {
        obj.insert(QString("delay"), ::OpenAPI::toJsonValue(m_delay));
    }
    if (m_details_isSet) {
        obj.insert(QString("details"), ::OpenAPI::toJsonValue(m_details));
    }
    if (m_error_isSet) {
        obj.insert(QString("error"), ::OpenAPI::toJsonValue(m_error));
    }
    if (m_final_url_isSet) {
        obj.insert(QString("final_url"), ::OpenAPI::toJsonValue(m_final_url));
    }
    if (m_flash_delay_isSet) {
        obj.insert(QString("flash_delay"), ::OpenAPI::toJsonValue(m_flash_delay));
    }
    if (m_height_isSet) {
        obj.insert(QString("height"), ::OpenAPI::toJsonValue(m_height));
    }
    if (m_id_isSet) {
        obj.insert(QString("id"), ::OpenAPI::toJsonValue(m_id));
    }
    if (m_instance_id_isSet) {
        obj.insert(QString("instance_id"), ::OpenAPI::toJsonValue(m_instance_id));
    }
    if (m_post_data_isSet) {
        obj.insert(QString("post_data"), ::OpenAPI::toJsonValue(m_post_data));
    }
    if (m_priority_isSet) {
        obj.insert(QString("priority"), ::OpenAPI::toJsonValue(m_priority));
    }
    if (m_referer_isSet) {
        obj.insert(QString("referer"), ::OpenAPI::toJsonValue(m_referer));
    }
    if (m_scale_isSet) {
        obj.insert(QString("scale"), ::OpenAPI::toJsonValue(m_scale));
    }
    if (m_screenshot_url_isSet) {
        obj.insert(QString("screenshot_url"), ::OpenAPI::toJsonValue(m_screenshot_url));
    }
    if (m_script_isSet) {
        obj.insert(QString("script"), ::OpenAPI::toJsonValue(m_script));
    }
    if (m_shared_url_isSet) {
        obj.insert(QString("shared_url"), ::OpenAPI::toJsonValue(m_shared_url));
    }
    if (m_size_isSet) {
        obj.insert(QString("size"), ::OpenAPI::toJsonValue(m_size));
    }
    if (m_status_isSet) {
        obj.insert(QString("status"), ::OpenAPI::toJsonValue(m_status));
    }
    if (m_url_isSet) {
        obj.insert(QString("url"), ::OpenAPI::toJsonValue(m_url));
    }
    if (m_width_isSet) {
        obj.insert(QString("width"), ::OpenAPI::toJsonValue(m_width));
    }
    return obj;
}

QString OAIScreenshot::getCookie() const {
    return m_cookie;
}
void OAIScreenshot::setCookie(const QString &cookie) {
    m_cookie = cookie;
    m_cookie_isSet = true;
}

bool OAIScreenshot::is_cookie_Set() const{
    return m_cookie_isSet;
}

bool OAIScreenshot::is_cookie_Valid() const{
    return m_cookie_isValid;
}

qint32 OAIScreenshot::getCost() const {
    return m_cost;
}
void OAIScreenshot::setCost(const qint32 &cost) {
    m_cost = cost;
    m_cost_isSet = true;
}

bool OAIScreenshot::is_cost_Set() const{
    return m_cost_isSet;
}

bool OAIScreenshot::is_cost_Valid() const{
    return m_cost_isValid;
}

qint32 OAIScreenshot::getDelay() const {
    return m_delay;
}
void OAIScreenshot::setDelay(const qint32 &delay) {
    m_delay = delay;
    m_delay_isSet = true;
}

bool OAIScreenshot::is_delay_Set() const{
    return m_delay_isSet;
}

bool OAIScreenshot::is_delay_Valid() const{
    return m_delay_isValid;
}

qint32 OAIScreenshot::getDetails() const {
    return m_details;
}
void OAIScreenshot::setDetails(const qint32 &details) {
    m_details = details;
    m_details_isSet = true;
}

bool OAIScreenshot::is_details_Set() const{
    return m_details_isSet;
}

bool OAIScreenshot::is_details_Valid() const{
    return m_details_isValid;
}

QString OAIScreenshot::getError() const {
    return m_error;
}
void OAIScreenshot::setError(const QString &error) {
    m_error = error;
    m_error_isSet = true;
}

bool OAIScreenshot::is_error_Set() const{
    return m_error_isSet;
}

bool OAIScreenshot::is_error_Valid() const{
    return m_error_isValid;
}

QString OAIScreenshot::getFinalUrl() const {
    return m_final_url;
}
void OAIScreenshot::setFinalUrl(const QString &final_url) {
    m_final_url = final_url;
    m_final_url_isSet = true;
}

bool OAIScreenshot::is_final_url_Set() const{
    return m_final_url_isSet;
}

bool OAIScreenshot::is_final_url_Valid() const{
    return m_final_url_isValid;
}

qint32 OAIScreenshot::getFlashDelay() const {
    return m_flash_delay;
}
void OAIScreenshot::setFlashDelay(const qint32 &flash_delay) {
    m_flash_delay = flash_delay;
    m_flash_delay_isSet = true;
}

bool OAIScreenshot::is_flash_delay_Set() const{
    return m_flash_delay_isSet;
}

bool OAIScreenshot::is_flash_delay_Valid() const{
    return m_flash_delay_isValid;
}

qint32 OAIScreenshot::getHeight() const {
    return m_height;
}
void OAIScreenshot::setHeight(const qint32 &height) {
    m_height = height;
    m_height_isSet = true;
}

bool OAIScreenshot::is_height_Set() const{
    return m_height_isSet;
}

bool OAIScreenshot::is_height_Valid() const{
    return m_height_isValid;
}

qint32 OAIScreenshot::getId() const {
    return m_id;
}
void OAIScreenshot::setId(const qint32 &id) {
    m_id = id;
    m_id_isSet = true;
}

bool OAIScreenshot::is_id_Set() const{
    return m_id_isSet;
}

bool OAIScreenshot::is_id_Valid() const{
    return m_id_isValid;
}

qint32 OAIScreenshot::getInstanceId() const {
    return m_instance_id;
}
void OAIScreenshot::setInstanceId(const qint32 &instance_id) {
    m_instance_id = instance_id;
    m_instance_id_isSet = true;
}

bool OAIScreenshot::is_instance_id_Set() const{
    return m_instance_id_isSet;
}

bool OAIScreenshot::is_instance_id_Valid() const{
    return m_instance_id_isValid;
}

QString OAIScreenshot::getPostData() const {
    return m_post_data;
}
void OAIScreenshot::setPostData(const QString &post_data) {
    m_post_data = post_data;
    m_post_data_isSet = true;
}

bool OAIScreenshot::is_post_data_Set() const{
    return m_post_data_isSet;
}

bool OAIScreenshot::is_post_data_Valid() const{
    return m_post_data_isValid;
}

qint32 OAIScreenshot::getPriority() const {
    return m_priority;
}
void OAIScreenshot::setPriority(const qint32 &priority) {
    m_priority = priority;
    m_priority_isSet = true;
}

bool OAIScreenshot::is_priority_Set() const{
    return m_priority_isSet;
}

bool OAIScreenshot::is_priority_Valid() const{
    return m_priority_isValid;
}

QString OAIScreenshot::getReferer() const {
    return m_referer;
}
void OAIScreenshot::setReferer(const QString &referer) {
    m_referer = referer;
    m_referer_isSet = true;
}

bool OAIScreenshot::is_referer_Set() const{
    return m_referer_isSet;
}

bool OAIScreenshot::is_referer_Valid() const{
    return m_referer_isValid;
}

double OAIScreenshot::getScale() const {
    return m_scale;
}
void OAIScreenshot::setScale(const double &scale) {
    m_scale = scale;
    m_scale_isSet = true;
}

bool OAIScreenshot::is_scale_Set() const{
    return m_scale_isSet;
}

bool OAIScreenshot::is_scale_Valid() const{
    return m_scale_isValid;
}

OAIObject OAIScreenshot::getScreenshotUrl() const {
    return m_screenshot_url;
}
void OAIScreenshot::setScreenshotUrl(const OAIObject &screenshot_url) {
    m_screenshot_url = screenshot_url;
    m_screenshot_url_isSet = true;
}

bool OAIScreenshot::is_screenshot_url_Set() const{
    return m_screenshot_url_isSet;
}

bool OAIScreenshot::is_screenshot_url_Valid() const{
    return m_screenshot_url_isValid;
}

QString OAIScreenshot::getScript() const {
    return m_script;
}
void OAIScreenshot::setScript(const QString &script) {
    m_script = script;
    m_script_isSet = true;
}

bool OAIScreenshot::is_script_Set() const{
    return m_script_isSet;
}

bool OAIScreenshot::is_script_Valid() const{
    return m_script_isValid;
}

QString OAIScreenshot::getSharedUrl() const {
    return m_shared_url;
}
void OAIScreenshot::setSharedUrl(const QString &shared_url) {
    m_shared_url = shared_url;
    m_shared_url_isSet = true;
}

bool OAIScreenshot::is_shared_url_Set() const{
    return m_shared_url_isSet;
}

bool OAIScreenshot::is_shared_url_Valid() const{
    return m_shared_url_isValid;
}

QString OAIScreenshot::getSize() const {
    return m_size;
}
void OAIScreenshot::setSize(const QString &size) {
    m_size = size;
    m_size_isSet = true;
}

bool OAIScreenshot::is_size_Set() const{
    return m_size_isSet;
}

bool OAIScreenshot::is_size_Valid() const{
    return m_size_isValid;
}

QString OAIScreenshot::getStatus() const {
    return m_status;
}
void OAIScreenshot::setStatus(const QString &status) {
    m_status = status;
    m_status_isSet = true;
}

bool OAIScreenshot::is_status_Set() const{
    return m_status_isSet;
}

bool OAIScreenshot::is_status_Valid() const{
    return m_status_isValid;
}

QString OAIScreenshot::getUrl() const {
    return m_url;
}
void OAIScreenshot::setUrl(const QString &url) {
    m_url = url;
    m_url_isSet = true;
}

bool OAIScreenshot::is_url_Set() const{
    return m_url_isSet;
}

bool OAIScreenshot::is_url_Valid() const{
    return m_url_isValid;
}

qint32 OAIScreenshot::getWidth() const {
    return m_width;
}
void OAIScreenshot::setWidth(const qint32 &width) {
    m_width = width;
    m_width_isSet = true;
}

bool OAIScreenshot::is_width_Set() const{
    return m_width_isSet;
}

bool OAIScreenshot::is_width_Valid() const{
    return m_width_isValid;
}

bool OAIScreenshot::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_cookie_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_cost_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_delay_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_details_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_error_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_final_url_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_flash_delay_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_height_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_instance_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_post_data_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_priority_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_referer_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_scale_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_screenshot_url_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_script_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_shared_url_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_size_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_status_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_url_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_width_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIScreenshot::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_id_isValid && m_instance_id_isValid && m_status_isValid && m_url_isValid && true;
}

} // namespace OpenAPI
