/**
 * Browshot API
 * Take screenshots of any website in real time
 *
 * The version of the OpenAPI document: 1.17.0
 * Contact: support@browshot.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIBrowser.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIBrowser::OAIBrowser(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIBrowser::OAIBrowser() {
    this->initializeModel();
}

OAIBrowser::~OAIBrowser() {}

void OAIBrowser::initializeModel() {

    m_flash_isSet = false;
    m_flash_isValid = false;

    m_id_isSet = false;
    m_id_isValid = false;

    m_javascript_isSet = false;
    m_javascript_isValid = false;

    m_mobile_isSet = false;
    m_mobile_isValid = false;

    m_name_isSet = false;
    m_name_isValid = false;
}

void OAIBrowser::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIBrowser::fromJsonObject(QJsonObject json) {

    m_flash_isValid = ::OpenAPI::fromJsonValue(m_flash, json[QString("flash")]);
    m_flash_isSet = !json[QString("flash")].isNull() && m_flash_isValid;

    m_id_isValid = ::OpenAPI::fromJsonValue(m_id, json[QString("id")]);
    m_id_isSet = !json[QString("id")].isNull() && m_id_isValid;

    m_javascript_isValid = ::OpenAPI::fromJsonValue(m_javascript, json[QString("javascript")]);
    m_javascript_isSet = !json[QString("javascript")].isNull() && m_javascript_isValid;

    m_mobile_isValid = ::OpenAPI::fromJsonValue(m_mobile, json[QString("mobile")]);
    m_mobile_isSet = !json[QString("mobile")].isNull() && m_mobile_isValid;

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("name")]);
    m_name_isSet = !json[QString("name")].isNull() && m_name_isValid;
}

QString OAIBrowser::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIBrowser::asJsonObject() const {
    QJsonObject obj;
    if (m_flash_isSet) {
        obj.insert(QString("flash"), ::OpenAPI::toJsonValue(m_flash));
    }
    if (m_id_isSet) {
        obj.insert(QString("id"), ::OpenAPI::toJsonValue(m_id));
    }
    if (m_javascript_isSet) {
        obj.insert(QString("javascript"), ::OpenAPI::toJsonValue(m_javascript));
    }
    if (m_mobile_isSet) {
        obj.insert(QString("mobile"), ::OpenAPI::toJsonValue(m_mobile));
    }
    if (m_name_isSet) {
        obj.insert(QString("name"), ::OpenAPI::toJsonValue(m_name));
    }
    return obj;
}

qint32 OAIBrowser::getFlash() const {
    return m_flash;
}
void OAIBrowser::setFlash(const qint32 &flash) {
    m_flash = flash;
    m_flash_isSet = true;
}

bool OAIBrowser::is_flash_Set() const{
    return m_flash_isSet;
}

bool OAIBrowser::is_flash_Valid() const{
    return m_flash_isValid;
}

qint32 OAIBrowser::getId() const {
    return m_id;
}
void OAIBrowser::setId(const qint32 &id) {
    m_id = id;
    m_id_isSet = true;
}

bool OAIBrowser::is_id_Set() const{
    return m_id_isSet;
}

bool OAIBrowser::is_id_Valid() const{
    return m_id_isValid;
}

qint32 OAIBrowser::getJavascript() const {
    return m_javascript;
}
void OAIBrowser::setJavascript(const qint32 &javascript) {
    m_javascript = javascript;
    m_javascript_isSet = true;
}

bool OAIBrowser::is_javascript_Set() const{
    return m_javascript_isSet;
}

bool OAIBrowser::is_javascript_Valid() const{
    return m_javascript_isValid;
}

qint32 OAIBrowser::getMobile() const {
    return m_mobile;
}
void OAIBrowser::setMobile(const qint32 &mobile) {
    m_mobile = mobile;
    m_mobile_isSet = true;
}

bool OAIBrowser::is_mobile_Set() const{
    return m_mobile_isSet;
}

bool OAIBrowser::is_mobile_Valid() const{
    return m_mobile_isValid;
}

QString OAIBrowser::getName() const {
    return m_name;
}
void OAIBrowser::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAIBrowser::is_name_Set() const{
    return m_name_isSet;
}

bool OAIBrowser::is_name_Valid() const{
    return m_name_isValid;
}

bool OAIBrowser::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_flash_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_javascript_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_mobile_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIBrowser::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
