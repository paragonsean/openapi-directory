/**
 * Stoplight
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: api-v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The PUTVersionsVersionIdImport200ResponseData model module.
 * @module model/PUTVersionsVersionIdImport200ResponseData
 * @version api-v1
 */
class PUTVersionsVersionIdImport200ResponseData {
    /**
     * Constructs a new <code>PUTVersionsVersionIdImport200ResponseData</code>.
     * @alias module:model/PUTVersionsVersionIdImport200ResponseData
     * @param endpointCount {Number} 
     * @param format {module:model/PUTVersionsVersionIdImport200ResponseData.FormatEnum} 
     * @param projectId {String} 
     * @param schemaCount {Number} 
     * @param testCount {Number} 
     * @param textSectionCount {Number} 
     * @param traitCount {Number} 
     * @param versionId {String} 
     * @param workspaceId {String} 
     */
    constructor(endpointCount, format, projectId, schemaCount, testCount, textSectionCount, traitCount, versionId, workspaceId) { 
        
        PUTVersionsVersionIdImport200ResponseData.initialize(this, endpointCount, format, projectId, schemaCount, testCount, textSectionCount, traitCount, versionId, workspaceId);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, endpointCount, format, projectId, schemaCount, testCount, textSectionCount, traitCount, versionId, workspaceId) { 
        obj['endpointCount'] = endpointCount;
        obj['format'] = format;
        obj['projectId'] = projectId;
        obj['schemaCount'] = schemaCount;
        obj['testCount'] = testCount;
        obj['textSectionCount'] = textSectionCount;
        obj['traitCount'] = traitCount;
        obj['versionId'] = versionId;
        obj['workspaceId'] = workspaceId;
    }

    /**
     * Constructs a <code>PUTVersionsVersionIdImport200ResponseData</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/PUTVersionsVersionIdImport200ResponseData} obj Optional instance to populate.
     * @return {module:model/PUTVersionsVersionIdImport200ResponseData} The populated <code>PUTVersionsVersionIdImport200ResponseData</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new PUTVersionsVersionIdImport200ResponseData();

            if (data.hasOwnProperty('endpointCount')) {
                obj['endpointCount'] = ApiClient.convertToType(data['endpointCount'], 'Number');
            }
            if (data.hasOwnProperty('format')) {
                obj['format'] = ApiClient.convertToType(data['format'], 'String');
            }
            if (data.hasOwnProperty('projectId')) {
                obj['projectId'] = ApiClient.convertToType(data['projectId'], 'String');
            }
            if (data.hasOwnProperty('schemaCount')) {
                obj['schemaCount'] = ApiClient.convertToType(data['schemaCount'], 'Number');
            }
            if (data.hasOwnProperty('testCount')) {
                obj['testCount'] = ApiClient.convertToType(data['testCount'], 'Number');
            }
            if (data.hasOwnProperty('textSectionCount')) {
                obj['textSectionCount'] = ApiClient.convertToType(data['textSectionCount'], 'Number');
            }
            if (data.hasOwnProperty('traitCount')) {
                obj['traitCount'] = ApiClient.convertToType(data['traitCount'], 'Number');
            }
            if (data.hasOwnProperty('versionId')) {
                obj['versionId'] = ApiClient.convertToType(data['versionId'], 'String');
            }
            if (data.hasOwnProperty('workspaceId')) {
                obj['workspaceId'] = ApiClient.convertToType(data['workspaceId'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>PUTVersionsVersionIdImport200ResponseData</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>PUTVersionsVersionIdImport200ResponseData</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of PUTVersionsVersionIdImport200ResponseData.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // ensure the json data is a string
        if (data['format'] && !(typeof data['format'] === 'string' || data['format'] instanceof String)) {
            throw new Error("Expected the field `format` to be a primitive type in the JSON string but got " + data['format']);
        }
        // ensure the json data is a string
        if (data['projectId'] && !(typeof data['projectId'] === 'string' || data['projectId'] instanceof String)) {
            throw new Error("Expected the field `projectId` to be a primitive type in the JSON string but got " + data['projectId']);
        }
        // ensure the json data is a string
        if (data['versionId'] && !(typeof data['versionId'] === 'string' || data['versionId'] instanceof String)) {
            throw new Error("Expected the field `versionId` to be a primitive type in the JSON string but got " + data['versionId']);
        }
        // ensure the json data is a string
        if (data['workspaceId'] && !(typeof data['workspaceId'] === 'string' || data['workspaceId'] instanceof String)) {
            throw new Error("Expected the field `workspaceId` to be a primitive type in the JSON string but got " + data['workspaceId']);
        }

        return true;
    }


}

PUTVersionsVersionIdImport200ResponseData.RequiredProperties = ["endpointCount", "format", "projectId", "schemaCount", "testCount", "textSectionCount", "traitCount", "versionId", "workspaceId"];

/**
 * @member {Number} endpointCount
 */
PUTVersionsVersionIdImport200ResponseData.prototype['endpointCount'] = undefined;

/**
 * @member {module:model/PUTVersionsVersionIdImport200ResponseData.FormatEnum} format
 */
PUTVersionsVersionIdImport200ResponseData.prototype['format'] = undefined;

/**
 * @member {String} projectId
 */
PUTVersionsVersionIdImport200ResponseData.prototype['projectId'] = undefined;

/**
 * @member {Number} schemaCount
 */
PUTVersionsVersionIdImport200ResponseData.prototype['schemaCount'] = undefined;

/**
 * @member {Number} testCount
 */
PUTVersionsVersionIdImport200ResponseData.prototype['testCount'] = undefined;

/**
 * @member {Number} textSectionCount
 */
PUTVersionsVersionIdImport200ResponseData.prototype['textSectionCount'] = undefined;

/**
 * @member {Number} traitCount
 */
PUTVersionsVersionIdImport200ResponseData.prototype['traitCount'] = undefined;

/**
 * @member {String} versionId
 */
PUTVersionsVersionIdImport200ResponseData.prototype['versionId'] = undefined;

/**
 * @member {String} workspaceId
 */
PUTVersionsVersionIdImport200ResponseData.prototype['workspaceId'] = undefined;





/**
 * Allowed values for the <code>format</code> property.
 * @enum {String}
 * @readonly
 */
PUTVersionsVersionIdImport200ResponseData['FormatEnum'] = {

    /**
     * value: "RAML08"
     * @const
     */
    "RAML08": "RAML08",

    /**
     * value: "RAML10"
     * @const
     */
    "RAML10": "RAML10",

    /**
     * value: "SWAGGER"
     * @const
     */
    "SWAGGER": "SWAGGER",

    /**
     * value: "STOPLIGHTX"
     * @const
     */
    "STOPLIGHTX": "STOPLIGHTX"
};



export default PUTVersionsVersionIdImport200ResponseData;

