/**
 * Stoplight
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: api-v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import GETVersionsVersionIdExportFormat200Response from '../model/GETVersionsVersionIdExportFormat200Response';
import POSTVersionsVersionIdPublish200Response from '../model/POSTVersionsVersionIdPublish200Response';
import PUTVersionsVersionIdImport200Response from '../model/PUTVersionsVersionIdImport200Response';
import PUTVersionsVersionIdImportRequest from '../model/PUTVersionsVersionIdImportRequest';
import PUTVersionsVersionIdUnpublish200Response from '../model/PUTVersionsVersionIdUnpublish200Response';

/**
* Versions service.
* @module api/VersionsApi
* @version api-v1
*/
export default class VersionsApi {

    /**
    * Constructs a new VersionsApi. 
    * @alias module:api/VersionsApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the gETVersionsVersionIdExportFormat operation.
     * @callback module:api/VersionsApi~gETVersionsVersionIdExportFormatCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Export
     * Export a version to your choice of API specification.  ### Allowed Formats:  - oas.json - oas.yaml - raml08.yaml - raml10.yaml - stoplight.json - stoplight.yaml  The stoplight format actually returns OAS (Swagger 2) with x-stoplight annotations. If you are exporting with the intent on importing back into Stoplight, this export format preserves the most information.  ### Example URL:  `https://api.stoplight.io/v1/versions/123/export/oas.json`
     * @param {String} versionId This is the unique identifier for the version.
     * @param {module:model/String} format The specification / format that you want to export.
     * @param {module:api/VersionsApi~gETVersionsVersionIdExportFormatCallback} callback The callback function, accepting three arguments: error, data, response
     */
    gETVersionsVersionIdExportFormat(versionId, format, callback) {
      let postBody = null;
      // verify the required parameter 'versionId' is set
      if (versionId === undefined || versionId === null) {
        throw new Error("Missing the required parameter 'versionId' when calling gETVersionsVersionIdExportFormat");
      }
      // verify the required parameter 'format' is set
      if (format === undefined || format === null) {
        throw new Error("Missing the required parameter 'format' when calling gETVersionsVersionIdExportFormat");
      }

      let pathParams = {
        'versionId': versionId,
        'format': format
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json', 'text/yaml'];
      let returnType = null;
      return this.apiClient.callApi(
        '/versions/{versionId}/export/{format}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the pOSTVersionsVersionIdPublish operation.
     * @callback module:api/VersionsApi~pOSTVersionsVersionIdPublishCallback
     * @param {String} error Error message, if any.
     * @param {module:model/POSTVersionsVersionIdPublish200Response} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Publish
     * Re-publish an API version in Stoplight. This will re-publish the given API version, with whatever publish settings have already been setup in the app.  This will only work with APIs that have previously been published at least once.  This works well with the #endpoint:957qEfc97BB5XGAeZ endpoint to augment your continuous integration processes, and automatically re-publish your documentation when certain events happen. Once such scenario is:  1. Swagger is generated from your codebase, and pushed up to Github. 2. A simple script that you write sends a request to the Stoplight API to import the new specification, passing in the URL to the swagger file on Github. 3. After the import succeeds, and your API in Stoplight is up to date, the script sends a request to the Stoplight API (this endpoint) to re-publish your documentation.
     * @param {String} versionId This is the unique identifier for the version.
     * @param {module:api/VersionsApi~pOSTVersionsVersionIdPublishCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/POSTVersionsVersionIdPublish200Response}
     */
    pOSTVersionsVersionIdPublish(versionId, callback) {
      let postBody = null;
      // verify the required parameter 'versionId' is set
      if (versionId === undefined || versionId === null) {
        throw new Error("Missing the required parameter 'versionId' when calling pOSTVersionsVersionIdPublish");
      }

      let pathParams = {
        'versionId': versionId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Authorization'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = POSTVersionsVersionIdPublish200Response;
      return this.apiClient.callApi(
        '/versions/{versionId}/publish', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the pUTVersionsVersionIdImport operation.
     * @callback module:api/VersionsApi~pUTVersionsVersionIdImportCallback
     * @param {String} error Error message, if any.
     * @param {module:model/PUTVersionsVersionIdImport200Response} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Import
     * Import the given specification into an existing version.   **Warning, this is a destructive action! Any resources present in both the existing version, and the specification being imported, will be overwritten.**  This endpoint is particularly useful when you manage a specification file (Swagger or RAML) outside of Stoplight, and want to keep your Stoplight API version up to date as that specification changes.  By default, a \"merge\" is performed when importing. If a resource exists in the specification that you are importing, and in the Stoplight API, the resource will be overwritten. If a resource exists in the Stoplight API, but not in the spefication that you are importing, the resource will be left alone (and not deleted).  You can include an optional `options` property in the request body, to indicate if you would like to perform more of a replacement (instead of a merge). The options are documented in full in the response definition below these notes.  Take this request + request body for example:  `PUT https://api.stoplight.io/v1/versions/123/import` ```json {   \"url\": \"http://petstore.swagger.io/v2/swagger.json\",   \"options\": {     \"removeExtraEndpoints\": true,     \"removeExtraSchemas\": true   } } ```  This request will grab the swagger specification described at `http://petstore.swagger.io/v2/swagger.json`, and import it into the Stoplight API version with id `123`. Additionally, it will delete any existing endpoints or models that are not described in the petstore swagger being imported.  Instead of a URL, you can provide the actual specification to be imported, either as a string (in the case of YAML) or an object (in the case of JSON). That request would look something like this:  `PUT https://api.stoplight.io/v1/versions/123/import` ```json {   \"specData\": {     \"swagger\": \"2.0\",     \"info\": {}     ... rest of spec   } } ```
     * @param {String} versionId This is the unique identifier for the version.
     * @param {Object} opts Optional parameters
     * @param {module:model/PUTVersionsVersionIdImportRequest} [pUTVersionsVersionIdImportRequest] 
     * @param {module:api/VersionsApi~pUTVersionsVersionIdImportCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/PUTVersionsVersionIdImport200Response}
     */
    pUTVersionsVersionIdImport(versionId, opts, callback) {
      opts = opts || {};
      let postBody = opts['pUTVersionsVersionIdImportRequest'];
      // verify the required parameter 'versionId' is set
      if (versionId === undefined || versionId === null) {
        throw new Error("Missing the required parameter 'versionId' when calling pUTVersionsVersionIdImport");
      }

      let pathParams = {
        'versionId': versionId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Authorization'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = PUTVersionsVersionIdImport200Response;
      return this.apiClient.callApi(
        '/versions/{versionId}/import', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the pUTVersionsVersionIdUnpublish operation.
     * @callback module:api/VersionsApi~pUTVersionsVersionIdUnpublishCallback
     * @param {String} error Error message, if any.
     * @param {module:model/PUTVersionsVersionIdUnpublish200Response} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Unpublish
     * Unpublish the documentation associated with the given API version.
     * @param {String} versionId This is the unique identifier for the version.
     * @param {module:api/VersionsApi~pUTVersionsVersionIdUnpublishCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/PUTVersionsVersionIdUnpublish200Response}
     */
    pUTVersionsVersionIdUnpublish(versionId, callback) {
      let postBody = null;
      // verify the required parameter 'versionId' is set
      if (versionId === undefined || versionId === null) {
        throw new Error("Missing the required parameter 'versionId' when calling pUTVersionsVersionIdUnpublish");
      }

      let pathParams = {
        'versionId': versionId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Authorization'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = PUTVersionsVersionIdUnpublish200Response;
      return this.apiClient.callApi(
        '/versions/{versionId}/unpublish', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
