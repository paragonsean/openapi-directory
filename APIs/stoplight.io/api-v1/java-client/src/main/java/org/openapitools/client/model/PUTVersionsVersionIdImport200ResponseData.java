/*
 * Stoplight
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: api-v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.math.BigDecimal;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * PUTVersionsVersionIdImport200ResponseData
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:56:59.745148-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class PUTVersionsVersionIdImport200ResponseData {
  public static final String SERIALIZED_NAME_ENDPOINT_COUNT = "endpointCount";
  @SerializedName(SERIALIZED_NAME_ENDPOINT_COUNT)
  private BigDecimal endpointCount;

  /**
   * Gets or Sets format
   */
  @JsonAdapter(FormatEnum.Adapter.class)
  public enum FormatEnum {
    RAML08("RAML08"),
    
    RAML10("RAML10"),
    
    SWAGGER("SWAGGER"),
    
    STOPLIGHTX("STOPLIGHTX");

    private String value;

    FormatEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static FormatEnum fromValue(String value) {
      for (FormatEnum b : FormatEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<FormatEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final FormatEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public FormatEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return FormatEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      FormatEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_FORMAT = "format";
  @SerializedName(SERIALIZED_NAME_FORMAT)
  private FormatEnum format;

  public static final String SERIALIZED_NAME_PROJECT_ID = "projectId";
  @SerializedName(SERIALIZED_NAME_PROJECT_ID)
  private String projectId;

  public static final String SERIALIZED_NAME_SCHEMA_COUNT = "schemaCount";
  @SerializedName(SERIALIZED_NAME_SCHEMA_COUNT)
  private BigDecimal schemaCount;

  public static final String SERIALIZED_NAME_TEST_COUNT = "testCount";
  @SerializedName(SERIALIZED_NAME_TEST_COUNT)
  private BigDecimal testCount;

  public static final String SERIALIZED_NAME_TEXT_SECTION_COUNT = "textSectionCount";
  @SerializedName(SERIALIZED_NAME_TEXT_SECTION_COUNT)
  private BigDecimal textSectionCount;

  public static final String SERIALIZED_NAME_TRAIT_COUNT = "traitCount";
  @SerializedName(SERIALIZED_NAME_TRAIT_COUNT)
  private BigDecimal traitCount;

  public static final String SERIALIZED_NAME_VERSION_ID = "versionId";
  @SerializedName(SERIALIZED_NAME_VERSION_ID)
  private String versionId;

  public static final String SERIALIZED_NAME_WORKSPACE_ID = "workspaceId";
  @SerializedName(SERIALIZED_NAME_WORKSPACE_ID)
  private String workspaceId;

  public PUTVersionsVersionIdImport200ResponseData() {
  }

  public PUTVersionsVersionIdImport200ResponseData endpointCount(BigDecimal endpointCount) {
    this.endpointCount = endpointCount;
    return this;
  }

  /**
   * Get endpointCount
   * @return endpointCount
   */
  @javax.annotation.Nonnull
  public BigDecimal getEndpointCount() {
    return endpointCount;
  }

  public void setEndpointCount(BigDecimal endpointCount) {
    this.endpointCount = endpointCount;
  }


  public PUTVersionsVersionIdImport200ResponseData format(FormatEnum format) {
    this.format = format;
    return this;
  }

  /**
   * Get format
   * @return format
   */
  @javax.annotation.Nonnull
  public FormatEnum getFormat() {
    return format;
  }

  public void setFormat(FormatEnum format) {
    this.format = format;
  }


  public PUTVersionsVersionIdImport200ResponseData projectId(String projectId) {
    this.projectId = projectId;
    return this;
  }

  /**
   * Get projectId
   * @return projectId
   */
  @javax.annotation.Nonnull
  public String getProjectId() {
    return projectId;
  }

  public void setProjectId(String projectId) {
    this.projectId = projectId;
  }


  public PUTVersionsVersionIdImport200ResponseData schemaCount(BigDecimal schemaCount) {
    this.schemaCount = schemaCount;
    return this;
  }

  /**
   * Get schemaCount
   * @return schemaCount
   */
  @javax.annotation.Nonnull
  public BigDecimal getSchemaCount() {
    return schemaCount;
  }

  public void setSchemaCount(BigDecimal schemaCount) {
    this.schemaCount = schemaCount;
  }


  public PUTVersionsVersionIdImport200ResponseData testCount(BigDecimal testCount) {
    this.testCount = testCount;
    return this;
  }

  /**
   * Get testCount
   * @return testCount
   */
  @javax.annotation.Nonnull
  public BigDecimal getTestCount() {
    return testCount;
  }

  public void setTestCount(BigDecimal testCount) {
    this.testCount = testCount;
  }


  public PUTVersionsVersionIdImport200ResponseData textSectionCount(BigDecimal textSectionCount) {
    this.textSectionCount = textSectionCount;
    return this;
  }

  /**
   * Get textSectionCount
   * @return textSectionCount
   */
  @javax.annotation.Nonnull
  public BigDecimal getTextSectionCount() {
    return textSectionCount;
  }

  public void setTextSectionCount(BigDecimal textSectionCount) {
    this.textSectionCount = textSectionCount;
  }


  public PUTVersionsVersionIdImport200ResponseData traitCount(BigDecimal traitCount) {
    this.traitCount = traitCount;
    return this;
  }

  /**
   * Get traitCount
   * @return traitCount
   */
  @javax.annotation.Nonnull
  public BigDecimal getTraitCount() {
    return traitCount;
  }

  public void setTraitCount(BigDecimal traitCount) {
    this.traitCount = traitCount;
  }


  public PUTVersionsVersionIdImport200ResponseData versionId(String versionId) {
    this.versionId = versionId;
    return this;
  }

  /**
   * Get versionId
   * @return versionId
   */
  @javax.annotation.Nonnull
  public String getVersionId() {
    return versionId;
  }

  public void setVersionId(String versionId) {
    this.versionId = versionId;
  }


  public PUTVersionsVersionIdImport200ResponseData workspaceId(String workspaceId) {
    this.workspaceId = workspaceId;
    return this;
  }

  /**
   * Get workspaceId
   * @return workspaceId
   */
  @javax.annotation.Nonnull
  public String getWorkspaceId() {
    return workspaceId;
  }

  public void setWorkspaceId(String workspaceId) {
    this.workspaceId = workspaceId;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    PUTVersionsVersionIdImport200ResponseData puTVersionsVersionIdImport200ResponseData = (PUTVersionsVersionIdImport200ResponseData) o;
    return Objects.equals(this.endpointCount, puTVersionsVersionIdImport200ResponseData.endpointCount) &&
        Objects.equals(this.format, puTVersionsVersionIdImport200ResponseData.format) &&
        Objects.equals(this.projectId, puTVersionsVersionIdImport200ResponseData.projectId) &&
        Objects.equals(this.schemaCount, puTVersionsVersionIdImport200ResponseData.schemaCount) &&
        Objects.equals(this.testCount, puTVersionsVersionIdImport200ResponseData.testCount) &&
        Objects.equals(this.textSectionCount, puTVersionsVersionIdImport200ResponseData.textSectionCount) &&
        Objects.equals(this.traitCount, puTVersionsVersionIdImport200ResponseData.traitCount) &&
        Objects.equals(this.versionId, puTVersionsVersionIdImport200ResponseData.versionId) &&
        Objects.equals(this.workspaceId, puTVersionsVersionIdImport200ResponseData.workspaceId);
  }

  @Override
  public int hashCode() {
    return Objects.hash(endpointCount, format, projectId, schemaCount, testCount, textSectionCount, traitCount, versionId, workspaceId);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class PUTVersionsVersionIdImport200ResponseData {\n");
    sb.append("    endpointCount: ").append(toIndentedString(endpointCount)).append("\n");
    sb.append("    format: ").append(toIndentedString(format)).append("\n");
    sb.append("    projectId: ").append(toIndentedString(projectId)).append("\n");
    sb.append("    schemaCount: ").append(toIndentedString(schemaCount)).append("\n");
    sb.append("    testCount: ").append(toIndentedString(testCount)).append("\n");
    sb.append("    textSectionCount: ").append(toIndentedString(textSectionCount)).append("\n");
    sb.append("    traitCount: ").append(toIndentedString(traitCount)).append("\n");
    sb.append("    versionId: ").append(toIndentedString(versionId)).append("\n");
    sb.append("    workspaceId: ").append(toIndentedString(workspaceId)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("endpointCount");
    openapiFields.add("format");
    openapiFields.add("projectId");
    openapiFields.add("schemaCount");
    openapiFields.add("testCount");
    openapiFields.add("textSectionCount");
    openapiFields.add("traitCount");
    openapiFields.add("versionId");
    openapiFields.add("workspaceId");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("endpointCount");
    openapiRequiredFields.add("format");
    openapiRequiredFields.add("projectId");
    openapiRequiredFields.add("schemaCount");
    openapiRequiredFields.add("testCount");
    openapiRequiredFields.add("textSectionCount");
    openapiRequiredFields.add("traitCount");
    openapiRequiredFields.add("versionId");
    openapiRequiredFields.add("workspaceId");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to PUTVersionsVersionIdImport200ResponseData
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!PUTVersionsVersionIdImport200ResponseData.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in PUTVersionsVersionIdImport200ResponseData is not found in the empty JSON string", PUTVersionsVersionIdImport200ResponseData.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!PUTVersionsVersionIdImport200ResponseData.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `PUTVersionsVersionIdImport200ResponseData` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : PUTVersionsVersionIdImport200ResponseData.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if (!jsonObj.get("format").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `format` to be a primitive type in the JSON string but got `%s`", jsonObj.get("format").toString()));
      }
      // validate the required field `format`
      FormatEnum.validateJsonElement(jsonObj.get("format"));
      if (!jsonObj.get("projectId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `projectId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("projectId").toString()));
      }
      if (!jsonObj.get("versionId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `versionId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("versionId").toString()));
      }
      if (!jsonObj.get("workspaceId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `workspaceId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("workspaceId").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!PUTVersionsVersionIdImport200ResponseData.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'PUTVersionsVersionIdImport200ResponseData' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<PUTVersionsVersionIdImport200ResponseData> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(PUTVersionsVersionIdImport200ResponseData.class));

       return (TypeAdapter<T>) new TypeAdapter<PUTVersionsVersionIdImport200ResponseData>() {
           @Override
           public void write(JsonWriter out, PUTVersionsVersionIdImport200ResponseData value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public PUTVersionsVersionIdImport200ResponseData read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of PUTVersionsVersionIdImport200ResponseData given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of PUTVersionsVersionIdImport200ResponseData
   * @throws IOException if the JSON string is invalid with respect to PUTVersionsVersionIdImport200ResponseData
   */
  public static PUTVersionsVersionIdImport200ResponseData fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, PUTVersionsVersionIdImport200ResponseData.class);
  }

  /**
   * Convert an instance of PUTVersionsVersionIdImport200ResponseData to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

