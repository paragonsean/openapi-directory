# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class PUTVersionsVersionIdImport200ResponseData(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, endpoint_count: float=None, format: str=None, project_id: str=None, schema_count: float=None, test_count: float=None, text_section_count: float=None, trait_count: float=None, version_id: str=None, workspace_id: str=None):
        """PUTVersionsVersionIdImport200ResponseData - a model defined in OpenAPI

        :param endpoint_count: The endpoint_count of this PUTVersionsVersionIdImport200ResponseData.
        :param format: The format of this PUTVersionsVersionIdImport200ResponseData.
        :param project_id: The project_id of this PUTVersionsVersionIdImport200ResponseData.
        :param schema_count: The schema_count of this PUTVersionsVersionIdImport200ResponseData.
        :param test_count: The test_count of this PUTVersionsVersionIdImport200ResponseData.
        :param text_section_count: The text_section_count of this PUTVersionsVersionIdImport200ResponseData.
        :param trait_count: The trait_count of this PUTVersionsVersionIdImport200ResponseData.
        :param version_id: The version_id of this PUTVersionsVersionIdImport200ResponseData.
        :param workspace_id: The workspace_id of this PUTVersionsVersionIdImport200ResponseData.
        """
        self.openapi_types = {
            'endpoint_count': float,
            'format': str,
            'project_id': str,
            'schema_count': float,
            'test_count': float,
            'text_section_count': float,
            'trait_count': float,
            'version_id': str,
            'workspace_id': str
        }

        self.attribute_map = {
            'endpoint_count': 'endpointCount',
            'format': 'format',
            'project_id': 'projectId',
            'schema_count': 'schemaCount',
            'test_count': 'testCount',
            'text_section_count': 'textSectionCount',
            'trait_count': 'traitCount',
            'version_id': 'versionId',
            'workspace_id': 'workspaceId'
        }

        self._endpoint_count = endpoint_count
        self._format = format
        self._project_id = project_id
        self._schema_count = schema_count
        self._test_count = test_count
        self._text_section_count = text_section_count
        self._trait_count = trait_count
        self._version_id = version_id
        self._workspace_id = workspace_id

    @classmethod
    def from_dict(cls, dikt: dict) -> 'PUTVersionsVersionIdImport200ResponseData':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The PUT_versions_versionId_import_200_response_data of this PUTVersionsVersionIdImport200ResponseData.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def endpoint_count(self):
        """Gets the endpoint_count of this PUTVersionsVersionIdImport200ResponseData.


        :return: The endpoint_count of this PUTVersionsVersionIdImport200ResponseData.
        :rtype: float
        """
        return self._endpoint_count

    @endpoint_count.setter
    def endpoint_count(self, endpoint_count):
        """Sets the endpoint_count of this PUTVersionsVersionIdImport200ResponseData.


        :param endpoint_count: The endpoint_count of this PUTVersionsVersionIdImport200ResponseData.
        :type endpoint_count: float
        """
        if endpoint_count is None:
            raise ValueError("Invalid value for `endpoint_count`, must not be `None`")

        self._endpoint_count = endpoint_count

    @property
    def format(self):
        """Gets the format of this PUTVersionsVersionIdImport200ResponseData.


        :return: The format of this PUTVersionsVersionIdImport200ResponseData.
        :rtype: str
        """
        return self._format

    @format.setter
    def format(self, format):
        """Sets the format of this PUTVersionsVersionIdImport200ResponseData.


        :param format: The format of this PUTVersionsVersionIdImport200ResponseData.
        :type format: str
        """
        allowed_values = ["RAML08", "RAML10", "SWAGGER", "STOPLIGHTX"]  # noqa: E501
        if format not in allowed_values:
            raise ValueError(
                "Invalid value for `format` ({0}), must be one of {1}"
                .format(format, allowed_values)
            )

        self._format = format

    @property
    def project_id(self):
        """Gets the project_id of this PUTVersionsVersionIdImport200ResponseData.


        :return: The project_id of this PUTVersionsVersionIdImport200ResponseData.
        :rtype: str
        """
        return self._project_id

    @project_id.setter
    def project_id(self, project_id):
        """Sets the project_id of this PUTVersionsVersionIdImport200ResponseData.


        :param project_id: The project_id of this PUTVersionsVersionIdImport200ResponseData.
        :type project_id: str
        """
        if project_id is None:
            raise ValueError("Invalid value for `project_id`, must not be `None`")

        self._project_id = project_id

    @property
    def schema_count(self):
        """Gets the schema_count of this PUTVersionsVersionIdImport200ResponseData.


        :return: The schema_count of this PUTVersionsVersionIdImport200ResponseData.
        :rtype: float
        """
        return self._schema_count

    @schema_count.setter
    def schema_count(self, schema_count):
        """Sets the schema_count of this PUTVersionsVersionIdImport200ResponseData.


        :param schema_count: The schema_count of this PUTVersionsVersionIdImport200ResponseData.
        :type schema_count: float
        """
        if schema_count is None:
            raise ValueError("Invalid value for `schema_count`, must not be `None`")

        self._schema_count = schema_count

    @property
    def test_count(self):
        """Gets the test_count of this PUTVersionsVersionIdImport200ResponseData.


        :return: The test_count of this PUTVersionsVersionIdImport200ResponseData.
        :rtype: float
        """
        return self._test_count

    @test_count.setter
    def test_count(self, test_count):
        """Sets the test_count of this PUTVersionsVersionIdImport200ResponseData.


        :param test_count: The test_count of this PUTVersionsVersionIdImport200ResponseData.
        :type test_count: float
        """
        if test_count is None:
            raise ValueError("Invalid value for `test_count`, must not be `None`")

        self._test_count = test_count

    @property
    def text_section_count(self):
        """Gets the text_section_count of this PUTVersionsVersionIdImport200ResponseData.


        :return: The text_section_count of this PUTVersionsVersionIdImport200ResponseData.
        :rtype: float
        """
        return self._text_section_count

    @text_section_count.setter
    def text_section_count(self, text_section_count):
        """Sets the text_section_count of this PUTVersionsVersionIdImport200ResponseData.


        :param text_section_count: The text_section_count of this PUTVersionsVersionIdImport200ResponseData.
        :type text_section_count: float
        """
        if text_section_count is None:
            raise ValueError("Invalid value for `text_section_count`, must not be `None`")

        self._text_section_count = text_section_count

    @property
    def trait_count(self):
        """Gets the trait_count of this PUTVersionsVersionIdImport200ResponseData.


        :return: The trait_count of this PUTVersionsVersionIdImport200ResponseData.
        :rtype: float
        """
        return self._trait_count

    @trait_count.setter
    def trait_count(self, trait_count):
        """Sets the trait_count of this PUTVersionsVersionIdImport200ResponseData.


        :param trait_count: The trait_count of this PUTVersionsVersionIdImport200ResponseData.
        :type trait_count: float
        """
        if trait_count is None:
            raise ValueError("Invalid value for `trait_count`, must not be `None`")

        self._trait_count = trait_count

    @property
    def version_id(self):
        """Gets the version_id of this PUTVersionsVersionIdImport200ResponseData.


        :return: The version_id of this PUTVersionsVersionIdImport200ResponseData.
        :rtype: str
        """
        return self._version_id

    @version_id.setter
    def version_id(self, version_id):
        """Sets the version_id of this PUTVersionsVersionIdImport200ResponseData.


        :param version_id: The version_id of this PUTVersionsVersionIdImport200ResponseData.
        :type version_id: str
        """
        if version_id is None:
            raise ValueError("Invalid value for `version_id`, must not be `None`")

        self._version_id = version_id

    @property
    def workspace_id(self):
        """Gets the workspace_id of this PUTVersionsVersionIdImport200ResponseData.


        :return: The workspace_id of this PUTVersionsVersionIdImport200ResponseData.
        :rtype: str
        """
        return self._workspace_id

    @workspace_id.setter
    def workspace_id(self, workspace_id):
        """Sets the workspace_id of this PUTVersionsVersionIdImport200ResponseData.


        :param workspace_id: The workspace_id of this PUTVersionsVersionIdImport200ResponseData.
        :type workspace_id: str
        """
        if workspace_id is None:
            raise ValueError("Invalid value for `workspace_id`, must not be `None`")

        self._workspace_id = workspace_id
