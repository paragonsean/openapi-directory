/**
 * Stoplight
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: api-v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#ifndef OAI_OAIVersionsApi_H
#define OAI_OAIVersionsApi_H

#include "OAIHelpers.h"
#include "OAIHttpRequest.h"
#include "OAIServerConfiguration.h"
#include "OAIOauth.h"

#include "OAIGET_versions_versionId_export_format_200_response.h"
#include "OAIPOST_versions_versionId_publish_200_response.h"
#include "OAIPUT_versions_versionId_import_200_response.h"
#include "OAIPUT_versions_versionId_import_request.h"
#include "OAIPUT_versions_versionId_unpublish_200_response.h"
#include <QJsonValue>
#include <QString>

#include <QObject>
#include <QByteArray>
#include <QStringList>
#include <QList>
#include <QNetworkAccessManager>

namespace OpenAPI {

class OAIVersionsApi : public QObject {
    Q_OBJECT

public:
    OAIVersionsApi(const int timeOut = 0);
    ~OAIVersionsApi();

    void initializeServerConfigs();
    int setDefaultServerValue(int serverIndex,const QString &operation, const QString &variable,const QString &val);
    void setServerIndex(const QString &operation, int serverIndex);
    void setApiKey(const QString &apiKeyName, const QString &apiKey);
    void setBearerToken(const QString &token);
    void setUsername(const QString &username);
    void setPassword(const QString &password);
    void setTimeOut(const int timeOut);
    void setWorkingDirectory(const QString &path);
    void setNetworkAccessManager(QNetworkAccessManager* manager);
    int addServerConfiguration(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables = QMap<QString, OAIServerVariable>());
    void setNewServerForAllOperations(const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void setNewServer(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void addHeaders(const QString &key, const QString &value);
    void enableRequestCompression();
    void enableResponseCompression();
    void abortRequests();
    QString getParamStylePrefix(const QString &style);
    QString getParamStyleSuffix(const QString &style);
    QString getParamStyleDelimiter(const QString &style, const QString &name, bool isExplode);

    /**
    * @param[in]  version_id QString [required]
    * @param[in]  format QString [required]
    */
    virtual void gETVersionsVersionIdExportFormat(const QString &version_id, const QString &format);

    /**
    * @param[in]  version_id QString [required]
    */
    virtual void pOSTVersionsVersionIdPublish(const QString &version_id);

    /**
    * @param[in]  version_id QString [required]
    * @param[in]  oaiput_versions_version_id_import_request OAIPUT_versions_versionId_import_request [optional]
    */
    virtual void pUTVersionsVersionIdImport(const QString &version_id, const ::OpenAPI::OptionalParam<OAIPUT_versions_versionId_import_request> &oaiput_versions_version_id_import_request = ::OpenAPI::OptionalParam<OAIPUT_versions_versionId_import_request>());

    /**
    * @param[in]  version_id QString [required]
    */
    virtual void pUTVersionsVersionIdUnpublish(const QString &version_id);


private:
    QMap<QString,int> _serverIndices;
    QMap<QString,QList<OAIServerConfiguration>> _serverConfigs;
    QMap<QString, QString> _apiKeys;
    QString _bearerToken;
    QString _username;
    QString _password;
    int _timeOut;
    QString _workingDirectory;
    QNetworkAccessManager* _manager;
    QMap<QString, QString> _defaultHeaders;
    bool _isResponseCompressionEnabled;
    bool _isRequestCompressionEnabled;
    OAIHttpRequestInput _latestInput;
    OAIHttpRequestWorker *_latestWorker;
    QStringList _latestScope;
    OauthCode _authFlow;
    OauthImplicit _implicitFlow;
    OauthCredentials _credentialFlow;
    OauthPassword _passwordFlow;
    int _OauthMethod = 0;

    void gETVersionsVersionIdExportFormatCallback(OAIHttpRequestWorker *worker);
    void pOSTVersionsVersionIdPublishCallback(OAIHttpRequestWorker *worker);
    void pUTVersionsVersionIdImportCallback(OAIHttpRequestWorker *worker);
    void pUTVersionsVersionIdUnpublishCallback(OAIHttpRequestWorker *worker);

Q_SIGNALS:

    void gETVersionsVersionIdExportFormatSignal();
    void pOSTVersionsVersionIdPublishSignal(OAIPOST_versions_versionId_publish_200_response summary);
    void pUTVersionsVersionIdImportSignal(OAIPUT_versions_versionId_import_200_response summary);
    void pUTVersionsVersionIdUnpublishSignal(OAIPUT_versions_versionId_unpublish_200_response summary);


    void gETVersionsVersionIdExportFormatSignalFull(OAIHttpRequestWorker *worker);
    void pOSTVersionsVersionIdPublishSignalFull(OAIHttpRequestWorker *worker, OAIPOST_versions_versionId_publish_200_response summary);
    void pUTVersionsVersionIdImportSignalFull(OAIHttpRequestWorker *worker, OAIPUT_versions_versionId_import_200_response summary);
    void pUTVersionsVersionIdUnpublishSignalFull(OAIHttpRequestWorker *worker, OAIPUT_versions_versionId_unpublish_200_response summary);

    Q_DECL_DEPRECATED_X("Use gETVersionsVersionIdExportFormatSignalError() instead")
    void gETVersionsVersionIdExportFormatSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void gETVersionsVersionIdExportFormatSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use pOSTVersionsVersionIdPublishSignalError() instead")
    void pOSTVersionsVersionIdPublishSignalE(OAIPOST_versions_versionId_publish_200_response summary, QNetworkReply::NetworkError error_type, QString error_str);
    void pOSTVersionsVersionIdPublishSignalError(OAIPOST_versions_versionId_publish_200_response summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use pUTVersionsVersionIdImportSignalError() instead")
    void pUTVersionsVersionIdImportSignalE(OAIPUT_versions_versionId_import_200_response summary, QNetworkReply::NetworkError error_type, QString error_str);
    void pUTVersionsVersionIdImportSignalError(OAIPUT_versions_versionId_import_200_response summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use pUTVersionsVersionIdUnpublishSignalError() instead")
    void pUTVersionsVersionIdUnpublishSignalE(OAIPUT_versions_versionId_unpublish_200_response summary, QNetworkReply::NetworkError error_type, QString error_str);
    void pUTVersionsVersionIdUnpublishSignalError(OAIPUT_versions_versionId_unpublish_200_response summary, QNetworkReply::NetworkError error_type, const QString &error_str);

    Q_DECL_DEPRECATED_X("Use gETVersionsVersionIdExportFormatSignalErrorFull() instead")
    void gETVersionsVersionIdExportFormatSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void gETVersionsVersionIdExportFormatSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use pOSTVersionsVersionIdPublishSignalErrorFull() instead")
    void pOSTVersionsVersionIdPublishSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void pOSTVersionsVersionIdPublishSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use pUTVersionsVersionIdImportSignalErrorFull() instead")
    void pUTVersionsVersionIdImportSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void pUTVersionsVersionIdImportSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use pUTVersionsVersionIdUnpublishSignalErrorFull() instead")
    void pUTVersionsVersionIdUnpublishSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void pUTVersionsVersionIdUnpublishSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);

    void abortRequestsSignal();
    void allPendingRequestsCompleted();

public Q_SLOTS:
    void tokenAvailable();
};

} // namespace OpenAPI
#endif
