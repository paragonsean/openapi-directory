/**
 * Stoplight
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: api-v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIPUT_versions_versionId_import_request.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIPUT_versions_versionId_import_request::OAIPUT_versions_versionId_import_request(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIPUT_versions_versionId_import_request::OAIPUT_versions_versionId_import_request() {
    this->initializeModel();
}

OAIPUT_versions_versionId_import_request::~OAIPUT_versions_versionId_import_request() {}

void OAIPUT_versions_versionId_import_request::initializeModel() {

    m_options_isSet = false;
    m_options_isValid = false;

    m_spec_data_isSet = false;
    m_spec_data_isValid = false;

    m_url_isSet = false;
    m_url_isValid = false;
}

void OAIPUT_versions_versionId_import_request::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIPUT_versions_versionId_import_request::fromJsonObject(QJsonObject json) {

    m_options_isValid = ::OpenAPI::fromJsonValue(m_options, json[QString("options")]);
    m_options_isSet = !json[QString("options")].isNull() && m_options_isValid;

    m_spec_data_isValid = ::OpenAPI::fromJsonValue(m_spec_data, json[QString("specData")]);
    m_spec_data_isSet = !json[QString("specData")].isNull() && m_spec_data_isValid;

    m_url_isValid = ::OpenAPI::fromJsonValue(m_url, json[QString("url")]);
    m_url_isSet = !json[QString("url")].isNull() && m_url_isValid;
}

QString OAIPUT_versions_versionId_import_request::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIPUT_versions_versionId_import_request::asJsonObject() const {
    QJsonObject obj;
    if (m_options.isSet()) {
        obj.insert(QString("options"), ::OpenAPI::toJsonValue(m_options));
    }
    if (m_spec_data.isSet()) {
        obj.insert(QString("specData"), ::OpenAPI::toJsonValue(m_spec_data));
    }
    if (m_url_isSet) {
        obj.insert(QString("url"), ::OpenAPI::toJsonValue(m_url));
    }
    return obj;
}

OAIPUT_versions_versionId_import_request_options OAIPUT_versions_versionId_import_request::getOptions() const {
    return m_options;
}
void OAIPUT_versions_versionId_import_request::setOptions(const OAIPUT_versions_versionId_import_request_options &options) {
    m_options = options;
    m_options_isSet = true;
}

bool OAIPUT_versions_versionId_import_request::is_options_Set() const{
    return m_options_isSet;
}

bool OAIPUT_versions_versionId_import_request::is_options_Valid() const{
    return m_options_isValid;
}

OAIPOST_versions_publish_anon_request_specData OAIPUT_versions_versionId_import_request::getSpecData() const {
    return m_spec_data;
}
void OAIPUT_versions_versionId_import_request::setSpecData(const OAIPOST_versions_publish_anon_request_specData &spec_data) {
    m_spec_data = spec_data;
    m_spec_data_isSet = true;
}

bool OAIPUT_versions_versionId_import_request::is_spec_data_Set() const{
    return m_spec_data_isSet;
}

bool OAIPUT_versions_versionId_import_request::is_spec_data_Valid() const{
    return m_spec_data_isValid;
}

QString OAIPUT_versions_versionId_import_request::getUrl() const {
    return m_url;
}
void OAIPUT_versions_versionId_import_request::setUrl(const QString &url) {
    m_url = url;
    m_url_isSet = true;
}

bool OAIPUT_versions_versionId_import_request::is_url_Set() const{
    return m_url_isSet;
}

bool OAIPUT_versions_versionId_import_request::is_url_Valid() const{
    return m_url_isValid;
}

bool OAIPUT_versions_versionId_import_request::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_options.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_spec_data.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_url_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIPUT_versions_versionId_import_request::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
