/**
 * Stoplight
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: api-v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIPUT_versions_versionId_import_200_response_data.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIPUT_versions_versionId_import_200_response_data::OAIPUT_versions_versionId_import_200_response_data(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIPUT_versions_versionId_import_200_response_data::OAIPUT_versions_versionId_import_200_response_data() {
    this->initializeModel();
}

OAIPUT_versions_versionId_import_200_response_data::~OAIPUT_versions_versionId_import_200_response_data() {}

void OAIPUT_versions_versionId_import_200_response_data::initializeModel() {

    m_endpoint_count_isSet = false;
    m_endpoint_count_isValid = false;

    m_format_isSet = false;
    m_format_isValid = false;

    m_project_id_isSet = false;
    m_project_id_isValid = false;

    m_schema_count_isSet = false;
    m_schema_count_isValid = false;

    m_test_count_isSet = false;
    m_test_count_isValid = false;

    m_text_section_count_isSet = false;
    m_text_section_count_isValid = false;

    m_trait_count_isSet = false;
    m_trait_count_isValid = false;

    m_version_id_isSet = false;
    m_version_id_isValid = false;

    m_workspace_id_isSet = false;
    m_workspace_id_isValid = false;
}

void OAIPUT_versions_versionId_import_200_response_data::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIPUT_versions_versionId_import_200_response_data::fromJsonObject(QJsonObject json) {

    m_endpoint_count_isValid = ::OpenAPI::fromJsonValue(m_endpoint_count, json[QString("endpointCount")]);
    m_endpoint_count_isSet = !json[QString("endpointCount")].isNull() && m_endpoint_count_isValid;

    m_format_isValid = ::OpenAPI::fromJsonValue(m_format, json[QString("format")]);
    m_format_isSet = !json[QString("format")].isNull() && m_format_isValid;

    m_project_id_isValid = ::OpenAPI::fromJsonValue(m_project_id, json[QString("projectId")]);
    m_project_id_isSet = !json[QString("projectId")].isNull() && m_project_id_isValid;

    m_schema_count_isValid = ::OpenAPI::fromJsonValue(m_schema_count, json[QString("schemaCount")]);
    m_schema_count_isSet = !json[QString("schemaCount")].isNull() && m_schema_count_isValid;

    m_test_count_isValid = ::OpenAPI::fromJsonValue(m_test_count, json[QString("testCount")]);
    m_test_count_isSet = !json[QString("testCount")].isNull() && m_test_count_isValid;

    m_text_section_count_isValid = ::OpenAPI::fromJsonValue(m_text_section_count, json[QString("textSectionCount")]);
    m_text_section_count_isSet = !json[QString("textSectionCount")].isNull() && m_text_section_count_isValid;

    m_trait_count_isValid = ::OpenAPI::fromJsonValue(m_trait_count, json[QString("traitCount")]);
    m_trait_count_isSet = !json[QString("traitCount")].isNull() && m_trait_count_isValid;

    m_version_id_isValid = ::OpenAPI::fromJsonValue(m_version_id, json[QString("versionId")]);
    m_version_id_isSet = !json[QString("versionId")].isNull() && m_version_id_isValid;

    m_workspace_id_isValid = ::OpenAPI::fromJsonValue(m_workspace_id, json[QString("workspaceId")]);
    m_workspace_id_isSet = !json[QString("workspaceId")].isNull() && m_workspace_id_isValid;
}

QString OAIPUT_versions_versionId_import_200_response_data::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIPUT_versions_versionId_import_200_response_data::asJsonObject() const {
    QJsonObject obj;
    if (m_endpoint_count_isSet) {
        obj.insert(QString("endpointCount"), ::OpenAPI::toJsonValue(m_endpoint_count));
    }
    if (m_format_isSet) {
        obj.insert(QString("format"), ::OpenAPI::toJsonValue(m_format));
    }
    if (m_project_id_isSet) {
        obj.insert(QString("projectId"), ::OpenAPI::toJsonValue(m_project_id));
    }
    if (m_schema_count_isSet) {
        obj.insert(QString("schemaCount"), ::OpenAPI::toJsonValue(m_schema_count));
    }
    if (m_test_count_isSet) {
        obj.insert(QString("testCount"), ::OpenAPI::toJsonValue(m_test_count));
    }
    if (m_text_section_count_isSet) {
        obj.insert(QString("textSectionCount"), ::OpenAPI::toJsonValue(m_text_section_count));
    }
    if (m_trait_count_isSet) {
        obj.insert(QString("traitCount"), ::OpenAPI::toJsonValue(m_trait_count));
    }
    if (m_version_id_isSet) {
        obj.insert(QString("versionId"), ::OpenAPI::toJsonValue(m_version_id));
    }
    if (m_workspace_id_isSet) {
        obj.insert(QString("workspaceId"), ::OpenAPI::toJsonValue(m_workspace_id));
    }
    return obj;
}

double OAIPUT_versions_versionId_import_200_response_data::getEndpointCount() const {
    return m_endpoint_count;
}
void OAIPUT_versions_versionId_import_200_response_data::setEndpointCount(const double &endpoint_count) {
    m_endpoint_count = endpoint_count;
    m_endpoint_count_isSet = true;
}

bool OAIPUT_versions_versionId_import_200_response_data::is_endpoint_count_Set() const{
    return m_endpoint_count_isSet;
}

bool OAIPUT_versions_versionId_import_200_response_data::is_endpoint_count_Valid() const{
    return m_endpoint_count_isValid;
}

QString OAIPUT_versions_versionId_import_200_response_data::getFormat() const {
    return m_format;
}
void OAIPUT_versions_versionId_import_200_response_data::setFormat(const QString &format) {
    m_format = format;
    m_format_isSet = true;
}

bool OAIPUT_versions_versionId_import_200_response_data::is_format_Set() const{
    return m_format_isSet;
}

bool OAIPUT_versions_versionId_import_200_response_data::is_format_Valid() const{
    return m_format_isValid;
}

QString OAIPUT_versions_versionId_import_200_response_data::getProjectId() const {
    return m_project_id;
}
void OAIPUT_versions_versionId_import_200_response_data::setProjectId(const QString &project_id) {
    m_project_id = project_id;
    m_project_id_isSet = true;
}

bool OAIPUT_versions_versionId_import_200_response_data::is_project_id_Set() const{
    return m_project_id_isSet;
}

bool OAIPUT_versions_versionId_import_200_response_data::is_project_id_Valid() const{
    return m_project_id_isValid;
}

double OAIPUT_versions_versionId_import_200_response_data::getSchemaCount() const {
    return m_schema_count;
}
void OAIPUT_versions_versionId_import_200_response_data::setSchemaCount(const double &schema_count) {
    m_schema_count = schema_count;
    m_schema_count_isSet = true;
}

bool OAIPUT_versions_versionId_import_200_response_data::is_schema_count_Set() const{
    return m_schema_count_isSet;
}

bool OAIPUT_versions_versionId_import_200_response_data::is_schema_count_Valid() const{
    return m_schema_count_isValid;
}

double OAIPUT_versions_versionId_import_200_response_data::getTestCount() const {
    return m_test_count;
}
void OAIPUT_versions_versionId_import_200_response_data::setTestCount(const double &test_count) {
    m_test_count = test_count;
    m_test_count_isSet = true;
}

bool OAIPUT_versions_versionId_import_200_response_data::is_test_count_Set() const{
    return m_test_count_isSet;
}

bool OAIPUT_versions_versionId_import_200_response_data::is_test_count_Valid() const{
    return m_test_count_isValid;
}

double OAIPUT_versions_versionId_import_200_response_data::getTextSectionCount() const {
    return m_text_section_count;
}
void OAIPUT_versions_versionId_import_200_response_data::setTextSectionCount(const double &text_section_count) {
    m_text_section_count = text_section_count;
    m_text_section_count_isSet = true;
}

bool OAIPUT_versions_versionId_import_200_response_data::is_text_section_count_Set() const{
    return m_text_section_count_isSet;
}

bool OAIPUT_versions_versionId_import_200_response_data::is_text_section_count_Valid() const{
    return m_text_section_count_isValid;
}

double OAIPUT_versions_versionId_import_200_response_data::getTraitCount() const {
    return m_trait_count;
}
void OAIPUT_versions_versionId_import_200_response_data::setTraitCount(const double &trait_count) {
    m_trait_count = trait_count;
    m_trait_count_isSet = true;
}

bool OAIPUT_versions_versionId_import_200_response_data::is_trait_count_Set() const{
    return m_trait_count_isSet;
}

bool OAIPUT_versions_versionId_import_200_response_data::is_trait_count_Valid() const{
    return m_trait_count_isValid;
}

QString OAIPUT_versions_versionId_import_200_response_data::getVersionId() const {
    return m_version_id;
}
void OAIPUT_versions_versionId_import_200_response_data::setVersionId(const QString &version_id) {
    m_version_id = version_id;
    m_version_id_isSet = true;
}

bool OAIPUT_versions_versionId_import_200_response_data::is_version_id_Set() const{
    return m_version_id_isSet;
}

bool OAIPUT_versions_versionId_import_200_response_data::is_version_id_Valid() const{
    return m_version_id_isValid;
}

QString OAIPUT_versions_versionId_import_200_response_data::getWorkspaceId() const {
    return m_workspace_id;
}
void OAIPUT_versions_versionId_import_200_response_data::setWorkspaceId(const QString &workspace_id) {
    m_workspace_id = workspace_id;
    m_workspace_id_isSet = true;
}

bool OAIPUT_versions_versionId_import_200_response_data::is_workspace_id_Set() const{
    return m_workspace_id_isSet;
}

bool OAIPUT_versions_versionId_import_200_response_data::is_workspace_id_Valid() const{
    return m_workspace_id_isValid;
}

bool OAIPUT_versions_versionId_import_200_response_data::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_endpoint_count_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_format_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_project_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_schema_count_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_test_count_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_text_section_count_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_trait_count_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_version_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_workspace_id_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIPUT_versions_versionId_import_200_response_data::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_endpoint_count_isValid && m_format_isValid && m_project_id_isValid && m_schema_count_isValid && m_test_count_isValid && m_text_section_count_isValid && m_trait_count_isValid && m_version_id_isValid && m_workspace_id_isValid && true;
}

} // namespace OpenAPI
