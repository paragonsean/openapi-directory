/*
 * TCGdex API
 * A Multilanguage Pok√©mon TCG Database with Cards Pictures and most of the informations contained on the cards. You can find out more about TCGdex at [https://www.tcgdex.net](https://www.tcgdex.net) or on [Discord](https://discord.gg/NehYTAhsZE).
 *
 * The version of the OpenAPI document: 2.0.0
 * Contact: contact@tcgdex.net
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiCallback;
import org.openapitools.client.ApiClient;
import org.openapitools.client.ApiException;
import org.openapitools.client.ApiResponse;
import org.openapitools.client.Configuration;
import org.openapitools.client.Pair;
import org.openapitools.client.ProgressRequestBody;
import org.openapitools.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import org.openapitools.client.model.CardResume;
import org.openapitools.client.model.Serie;
import org.openapitools.client.model.SerieResume;
import java.util.Set;
import org.openapitools.client.model.SetResume;
import org.openapitools.client.model.StringEndpoint;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class FiltersApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public FiltersApi() {
        this(Configuration.getDefaultApiClient());
    }

    public FiltersApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for categoriesCategoryGet
     * @param category  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> List cards with the category </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The Category doesn&#39;t exist </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call categoriesCategoryGetCall(String category, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/categories/{category}"
            .replace("{" + "category" + "}", localVarApiClient.escapeString(category.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call categoriesCategoryGetValidateBeforeCall(String category, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'category' is set
        if (category == null) {
            throw new ApiException("Missing the required parameter 'category' when calling categoriesCategoryGet(Async)");
        }

        return categoriesCategoryGetCall(category, _callback);

    }

    /**
     * 
     * 
     * @param category  (required)
     * @return StringEndpoint
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> List cards with the category </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The Category doesn&#39;t exist </td><td>  -  </td></tr>
     </table>
     */
    public StringEndpoint categoriesCategoryGet(String category) throws ApiException {
        ApiResponse<StringEndpoint> localVarResp = categoriesCategoryGetWithHttpInfo(category);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param category  (required)
     * @return ApiResponse&lt;StringEndpoint&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> List cards with the category </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The Category doesn&#39;t exist </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<StringEndpoint> categoriesCategoryGetWithHttpInfo(String category) throws ApiException {
        okhttp3.Call localVarCall = categoriesCategoryGetValidateBeforeCall(category, null);
        Type localVarReturnType = new TypeToken<StringEndpoint>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param category  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> List cards with the category </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The Category doesn&#39;t exist </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call categoriesCategoryGetAsync(String category, final ApiCallback<StringEndpoint> _callback) throws ApiException {

        okhttp3.Call localVarCall = categoriesCategoryGetValidateBeforeCall(category, _callback);
        Type localVarReturnType = new TypeToken<StringEndpoint>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for categoriesGet
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> List cards categories </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call categoriesGetCall(final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/categories";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call categoriesGetValidateBeforeCall(final ApiCallback _callback) throws ApiException {
        return categoriesGetCall(_callback);

    }

    /**
     * 
     * 
     * @return List&lt;String&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> List cards categories </td><td>  -  </td></tr>
     </table>
     */
    public List<String> categoriesGet() throws ApiException {
        ApiResponse<List<String>> localVarResp = categoriesGetWithHttpInfo();
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @return ApiResponse&lt;List&lt;String&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> List cards categories </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<String>> categoriesGetWithHttpInfo() throws ApiException {
        okhttp3.Call localVarCall = categoriesGetValidateBeforeCall(null);
        Type localVarReturnType = new TypeToken<List<String>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> List cards categories </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call categoriesGetAsync(final ApiCallback<List<String>> _callback) throws ApiException {

        okhttp3.Call localVarCall = categoriesGetValidateBeforeCall(_callback);
        Type localVarReturnType = new TypeToken<List<String>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for dexIdsDexIdGet
     * @param dexId  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Get the cards containing the specified dexId </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> no cards contain the specified dexID </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call dexIdsDexIdGetCall(String dexId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/dex-ids/{dexId}"
            .replace("{" + "dexId" + "}", localVarApiClient.escapeString(dexId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call dexIdsDexIdGetValidateBeforeCall(String dexId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'dexId' is set
        if (dexId == null) {
            throw new ApiException("Missing the required parameter 'dexId' when calling dexIdsDexIdGet(Async)");
        }

        return dexIdsDexIdGetCall(dexId, _callback);

    }

    /**
     * 
     * 
     * @param dexId  (required)
     * @return List&lt;CardResume&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Get the cards containing the specified dexId </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> no cards contain the specified dexID </td><td>  -  </td></tr>
     </table>
     */
    public List<CardResume> dexIdsDexIdGet(String dexId) throws ApiException {
        ApiResponse<List<CardResume>> localVarResp = dexIdsDexIdGetWithHttpInfo(dexId);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param dexId  (required)
     * @return ApiResponse&lt;List&lt;CardResume&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Get the cards containing the specified dexId </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> no cards contain the specified dexID </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<CardResume>> dexIdsDexIdGetWithHttpInfo(String dexId) throws ApiException {
        okhttp3.Call localVarCall = dexIdsDexIdGetValidateBeforeCall(dexId, null);
        Type localVarReturnType = new TypeToken<List<CardResume>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param dexId  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Get the cards containing the specified dexId </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> no cards contain the specified dexID </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call dexIdsDexIdGetAsync(String dexId, final ApiCallback<List<CardResume>> _callback) throws ApiException {

        okhttp3.Call localVarCall = dexIdsDexIdGetValidateBeforeCall(dexId, _callback);
        Type localVarReturnType = new TypeToken<List<CardResume>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for dexIdsGet
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> List all possible Pokemon(s) Pok√©dex Ids that appeared in the TCG </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call dexIdsGetCall(final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/dex-ids";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call dexIdsGetValidateBeforeCall(final ApiCallback _callback) throws ApiException {
        return dexIdsGetCall(_callback);

    }

    /**
     * 
     * 
     * @return List&lt;String&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> List all possible Pokemon(s) Pok√©dex Ids that appeared in the TCG </td><td>  -  </td></tr>
     </table>
     */
    public List<String> dexIdsGet() throws ApiException {
        ApiResponse<List<String>> localVarResp = dexIdsGetWithHttpInfo();
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @return ApiResponse&lt;List&lt;String&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> List all possible Pokemon(s) Pok√©dex Ids that appeared in the TCG </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<String>> dexIdsGetWithHttpInfo() throws ApiException {
        okhttp3.Call localVarCall = dexIdsGetValidateBeforeCall(null);
        Type localVarReturnType = new TypeToken<List<String>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> List all possible Pokemon(s) Pok√©dex Ids that appeared in the TCG </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call dexIdsGetAsync(final ApiCallback<List<String>> _callback) throws ApiException {

        okhttp3.Call localVarCall = dexIdsGetValidateBeforeCall(_callback);
        Type localVarReturnType = new TypeToken<List<String>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for energyTypesEnergyTypeGet
     * @param energyType  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Get the Energy cards containing the specified energy-type </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The specified energy-type doesn&#39;t exist </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call energyTypesEnergyTypeGetCall(String energyType, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/energy-types/{energy-type}"
            .replace("{" + "energy-type" + "}", localVarApiClient.escapeString(energyType.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call energyTypesEnergyTypeGetValidateBeforeCall(String energyType, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'energyType' is set
        if (energyType == null) {
            throw new ApiException("Missing the required parameter 'energyType' when calling energyTypesEnergyTypeGet(Async)");
        }

        return energyTypesEnergyTypeGetCall(energyType, _callback);

    }

    /**
     * 
     * 
     * @param energyType  (required)
     * @return List&lt;CardResume&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Get the Energy cards containing the specified energy-type </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The specified energy-type doesn&#39;t exist </td><td>  -  </td></tr>
     </table>
     */
    public List<CardResume> energyTypesEnergyTypeGet(String energyType) throws ApiException {
        ApiResponse<List<CardResume>> localVarResp = energyTypesEnergyTypeGetWithHttpInfo(energyType);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param energyType  (required)
     * @return ApiResponse&lt;List&lt;CardResume&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Get the Energy cards containing the specified energy-type </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The specified energy-type doesn&#39;t exist </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<CardResume>> energyTypesEnergyTypeGetWithHttpInfo(String energyType) throws ApiException {
        okhttp3.Call localVarCall = energyTypesEnergyTypeGetValidateBeforeCall(energyType, null);
        Type localVarReturnType = new TypeToken<List<CardResume>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param energyType  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Get the Energy cards containing the specified energy-type </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The specified energy-type doesn&#39;t exist </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call energyTypesEnergyTypeGetAsync(String energyType, final ApiCallback<List<CardResume>> _callback) throws ApiException {

        okhttp3.Call localVarCall = energyTypesEnergyTypeGetValidateBeforeCall(energyType, _callback);
        Type localVarReturnType = new TypeToken<List<CardResume>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for energyTypesGet
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> list the different Energy types an Energy card can have </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call energyTypesGetCall(final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/energy-types";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call energyTypesGetValidateBeforeCall(final ApiCallback _callback) throws ApiException {
        return energyTypesGetCall(_callback);

    }

    /**
     * 
     * 
     * @return List&lt;String&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> list the different Energy types an Energy card can have </td><td>  -  </td></tr>
     </table>
     */
    public List<String> energyTypesGet() throws ApiException {
        ApiResponse<List<String>> localVarResp = energyTypesGetWithHttpInfo();
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @return ApiResponse&lt;List&lt;String&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> list the different Energy types an Energy card can have </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<String>> energyTypesGetWithHttpInfo() throws ApiException {
        okhttp3.Call localVarCall = energyTypesGetValidateBeforeCall(null);
        Type localVarReturnType = new TypeToken<List<String>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> list the different Energy types an Energy card can have </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call energyTypesGetAsync(final ApiCallback<List<String>> _callback) throws ApiException {

        okhttp3.Call localVarCall = energyTypesGetValidateBeforeCall(_callback);
        Type localVarReturnType = new TypeToken<List<String>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for hpGet
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> List all different possibilities number of HP a card can have </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call hpGetCall(final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/hp";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call hpGetValidateBeforeCall(final ApiCallback _callback) throws ApiException {
        return hpGetCall(_callback);

    }

    /**
     * 
     * 
     * @return List&lt;String&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> List all different possibilities number of HP a card can have </td><td>  -  </td></tr>
     </table>
     */
    public List<String> hpGet() throws ApiException {
        ApiResponse<List<String>> localVarResp = hpGetWithHttpInfo();
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @return ApiResponse&lt;List&lt;String&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> List all different possibilities number of HP a card can have </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<String>> hpGetWithHttpInfo() throws ApiException {
        okhttp3.Call localVarCall = hpGetValidateBeforeCall(null);
        Type localVarReturnType = new TypeToken<List<String>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> List all different possibilities number of HP a card can have </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call hpGetAsync(final ApiCallback<List<String>> _callback) throws ApiException {

        okhttp3.Call localVarCall = hpGetValidateBeforeCall(_callback);
        Type localVarReturnType = new TypeToken<List<String>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for hpHpGet
     * @param hp  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Get the Pok√©mon cards containing specified number of HP </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The HP count doesn&#39;t exist </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call hpHpGetCall(String hp, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/hp/{hp}"
            .replace("{" + "hp" + "}", localVarApiClient.escapeString(hp.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call hpHpGetValidateBeforeCall(String hp, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'hp' is set
        if (hp == null) {
            throw new ApiException("Missing the required parameter 'hp' when calling hpHpGet(Async)");
        }

        return hpHpGetCall(hp, _callback);

    }

    /**
     * 
     * 
     * @param hp  (required)
     * @return StringEndpoint
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Get the Pok√©mon cards containing specified number of HP </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The HP count doesn&#39;t exist </td><td>  -  </td></tr>
     </table>
     */
    public StringEndpoint hpHpGet(String hp) throws ApiException {
        ApiResponse<StringEndpoint> localVarResp = hpHpGetWithHttpInfo(hp);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param hp  (required)
     * @return ApiResponse&lt;StringEndpoint&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Get the Pok√©mon cards containing specified number of HP </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The HP count doesn&#39;t exist </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<StringEndpoint> hpHpGetWithHttpInfo(String hp) throws ApiException {
        okhttp3.Call localVarCall = hpHpGetValidateBeforeCall(hp, null);
        Type localVarReturnType = new TypeToken<StringEndpoint>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param hp  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Get the Pok√©mon cards containing specified number of HP </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The HP count doesn&#39;t exist </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call hpHpGetAsync(String hp, final ApiCallback<StringEndpoint> _callback) throws ApiException {

        okhttp3.Call localVarCall = hpHpGetValidateBeforeCall(hp, _callback);
        Type localVarReturnType = new TypeToken<StringEndpoint>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for illustratorsGet
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Get all the Pok√©mon cards illustrators </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call illustratorsGetCall(final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/illustrators";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call illustratorsGetValidateBeforeCall(final ApiCallback _callback) throws ApiException {
        return illustratorsGetCall(_callback);

    }

    /**
     * 
     * 
     * @return List&lt;String&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Get all the Pok√©mon cards illustrators </td><td>  -  </td></tr>
     </table>
     */
    public List<String> illustratorsGet() throws ApiException {
        ApiResponse<List<String>> localVarResp = illustratorsGetWithHttpInfo();
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @return ApiResponse&lt;List&lt;String&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Get all the Pok√©mon cards illustrators </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<String>> illustratorsGetWithHttpInfo() throws ApiException {
        okhttp3.Call localVarCall = illustratorsGetValidateBeforeCall(null);
        Type localVarReturnType = new TypeToken<List<String>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Get all the Pok√©mon cards illustrators </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call illustratorsGetAsync(final ApiCallback<List<String>> _callback) throws ApiException {

        okhttp3.Call localVarCall = illustratorsGetValidateBeforeCall(_callback);
        Type localVarReturnType = new TypeToken<List<String>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for illustratorsIllustratorGet
     * @param illustrator  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Get the cards containing the specified illustrator </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The Illustrator doesn&#39;t exist </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call illustratorsIllustratorGetCall(String illustrator, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/illustrators/{illustrator}"
            .replace("{" + "illustrator" + "}", localVarApiClient.escapeString(illustrator.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call illustratorsIllustratorGetValidateBeforeCall(String illustrator, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'illustrator' is set
        if (illustrator == null) {
            throw new ApiException("Missing the required parameter 'illustrator' when calling illustratorsIllustratorGet(Async)");
        }

        return illustratorsIllustratorGetCall(illustrator, _callback);

    }

    /**
     * 
     * 
     * @param illustrator  (required)
     * @return StringEndpoint
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Get the cards containing the specified illustrator </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The Illustrator doesn&#39;t exist </td><td>  -  </td></tr>
     </table>
     */
    public StringEndpoint illustratorsIllustratorGet(String illustrator) throws ApiException {
        ApiResponse<StringEndpoint> localVarResp = illustratorsIllustratorGetWithHttpInfo(illustrator);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param illustrator  (required)
     * @return ApiResponse&lt;StringEndpoint&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Get the cards containing the specified illustrator </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The Illustrator doesn&#39;t exist </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<StringEndpoint> illustratorsIllustratorGetWithHttpInfo(String illustrator) throws ApiException {
        okhttp3.Call localVarCall = illustratorsIllustratorGetValidateBeforeCall(illustrator, null);
        Type localVarReturnType = new TypeToken<StringEndpoint>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param illustrator  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Get the cards containing the specified illustrator </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The Illustrator doesn&#39;t exist </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call illustratorsIllustratorGetAsync(String illustrator, final ApiCallback<StringEndpoint> _callback) throws ApiException {

        okhttp3.Call localVarCall = illustratorsIllustratorGetValidateBeforeCall(illustrator, _callback);
        Type localVarReturnType = new TypeToken<StringEndpoint>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for raritiesGet
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> List cards rarities </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call raritiesGetCall(final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/rarities";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call raritiesGetValidateBeforeCall(final ApiCallback _callback) throws ApiException {
        return raritiesGetCall(_callback);

    }

    /**
     * 
     * 
     * @return List&lt;String&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> List cards rarities </td><td>  -  </td></tr>
     </table>
     */
    public List<String> raritiesGet() throws ApiException {
        ApiResponse<List<String>> localVarResp = raritiesGetWithHttpInfo();
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @return ApiResponse&lt;List&lt;String&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> List cards rarities </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<String>> raritiesGetWithHttpInfo() throws ApiException {
        okhttp3.Call localVarCall = raritiesGetValidateBeforeCall(null);
        Type localVarReturnType = new TypeToken<List<String>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> List cards rarities </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call raritiesGetAsync(final ApiCallback<List<String>> _callback) throws ApiException {

        okhttp3.Call localVarCall = raritiesGetValidateBeforeCall(_callback);
        Type localVarReturnType = new TypeToken<List<String>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for raritiesRarityGet
     * @param rarity  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Get the cards containing the specified rarity </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The Rarity doesn&#39;t exist </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call raritiesRarityGetCall(String rarity, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/rarities/{rarity}"
            .replace("{" + "rarity" + "}", localVarApiClient.escapeString(rarity.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call raritiesRarityGetValidateBeforeCall(String rarity, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'rarity' is set
        if (rarity == null) {
            throw new ApiException("Missing the required parameter 'rarity' when calling raritiesRarityGet(Async)");
        }

        return raritiesRarityGetCall(rarity, _callback);

    }

    /**
     * 
     * 
     * @param rarity  (required)
     * @return StringEndpoint
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Get the cards containing the specified rarity </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The Rarity doesn&#39;t exist </td><td>  -  </td></tr>
     </table>
     */
    public StringEndpoint raritiesRarityGet(String rarity) throws ApiException {
        ApiResponse<StringEndpoint> localVarResp = raritiesRarityGetWithHttpInfo(rarity);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param rarity  (required)
     * @return ApiResponse&lt;StringEndpoint&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Get the cards containing the specified rarity </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The Rarity doesn&#39;t exist </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<StringEndpoint> raritiesRarityGetWithHttpInfo(String rarity) throws ApiException {
        okhttp3.Call localVarCall = raritiesRarityGetValidateBeforeCall(rarity, null);
        Type localVarReturnType = new TypeToken<StringEndpoint>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param rarity  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Get the cards containing the specified rarity </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The Rarity doesn&#39;t exist </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call raritiesRarityGetAsync(String rarity, final ApiCallback<StringEndpoint> _callback) throws ApiException {

        okhttp3.Call localVarCall = raritiesRarityGetValidateBeforeCall(rarity, _callback);
        Type localVarReturnType = new TypeToken<StringEndpoint>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for regulationMarksGet
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> List the current regulation marks </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call regulationMarksGetCall(final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/regulation-marks";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call regulationMarksGetValidateBeforeCall(final ApiCallback _callback) throws ApiException {
        return regulationMarksGetCall(_callback);

    }

    /**
     * 
     * 
     * @return List&lt;String&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> List the current regulation marks </td><td>  -  </td></tr>
     </table>
     */
    public List<String> regulationMarksGet() throws ApiException {
        ApiResponse<List<String>> localVarResp = regulationMarksGetWithHttpInfo();
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @return ApiResponse&lt;List&lt;String&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> List the current regulation marks </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<String>> regulationMarksGetWithHttpInfo() throws ApiException {
        okhttp3.Call localVarCall = regulationMarksGetValidateBeforeCall(null);
        Type localVarReturnType = new TypeToken<List<String>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> List the current regulation marks </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call regulationMarksGetAsync(final ApiCallback<List<String>> _callback) throws ApiException {

        okhttp3.Call localVarCall = regulationMarksGetValidateBeforeCall(_callback);
        Type localVarReturnType = new TypeToken<List<String>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for regulationMarksRegulationMarkGet
     * @param regulationMark  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Get every cards respecting the specified regulation-mark </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The regulation-mark doesn&#39;t exist </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call regulationMarksRegulationMarkGetCall(String regulationMark, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/regulation-marks/{regulation-mark}"
            .replace("{" + "regulation-mark" + "}", localVarApiClient.escapeString(regulationMark.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call regulationMarksRegulationMarkGetValidateBeforeCall(String regulationMark, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'regulationMark' is set
        if (regulationMark == null) {
            throw new ApiException("Missing the required parameter 'regulationMark' when calling regulationMarksRegulationMarkGet(Async)");
        }

        return regulationMarksRegulationMarkGetCall(regulationMark, _callback);

    }

    /**
     * 
     * 
     * @param regulationMark  (required)
     * @return List&lt;CardResume&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Get every cards respecting the specified regulation-mark </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The regulation-mark doesn&#39;t exist </td><td>  -  </td></tr>
     </table>
     */
    public List<CardResume> regulationMarksRegulationMarkGet(String regulationMark) throws ApiException {
        ApiResponse<List<CardResume>> localVarResp = regulationMarksRegulationMarkGetWithHttpInfo(regulationMark);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param regulationMark  (required)
     * @return ApiResponse&lt;List&lt;CardResume&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Get every cards respecting the specified regulation-mark </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The regulation-mark doesn&#39;t exist </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<CardResume>> regulationMarksRegulationMarkGetWithHttpInfo(String regulationMark) throws ApiException {
        okhttp3.Call localVarCall = regulationMarksRegulationMarkGetValidateBeforeCall(regulationMark, null);
        Type localVarReturnType = new TypeToken<List<CardResume>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param regulationMark  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Get every cards respecting the specified regulation-mark </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The regulation-mark doesn&#39;t exist </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call regulationMarksRegulationMarkGetAsync(String regulationMark, final ApiCallback<List<CardResume>> _callback) throws ApiException {

        okhttp3.Call localVarCall = regulationMarksRegulationMarkGetValidateBeforeCall(regulationMark, _callback);
        Type localVarReturnType = new TypeToken<List<CardResume>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for retreatsGet
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> return the different number of retreats count </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call retreatsGetCall(final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/retreats";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call retreatsGetValidateBeforeCall(final ApiCallback _callback) throws ApiException {
        return retreatsGetCall(_callback);

    }

    /**
     * 
     * 
     * @return List&lt;String&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> return the different number of retreats count </td><td>  -  </td></tr>
     </table>
     */
    public List<String> retreatsGet() throws ApiException {
        ApiResponse<List<String>> localVarResp = retreatsGetWithHttpInfo();
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @return ApiResponse&lt;List&lt;String&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> return the different number of retreats count </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<String>> retreatsGetWithHttpInfo() throws ApiException {
        okhttp3.Call localVarCall = retreatsGetValidateBeforeCall(null);
        Type localVarReturnType = new TypeToken<List<String>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> return the different number of retreats count </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call retreatsGetAsync(final ApiCallback<List<String>> _callback) throws ApiException {

        okhttp3.Call localVarCall = retreatsGetValidateBeforeCall(_callback);
        Type localVarReturnType = new TypeToken<List<String>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for retreatsRetreatGet
     * @param retreat  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Get the cards containing the specified retreat count </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The Retreat count doesn&#39;t exist </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call retreatsRetreatGetCall(String retreat, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/retreats/{retreat}"
            .replace("{" + "retreat" + "}", localVarApiClient.escapeString(retreat.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call retreatsRetreatGetValidateBeforeCall(String retreat, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'retreat' is set
        if (retreat == null) {
            throw new ApiException("Missing the required parameter 'retreat' when calling retreatsRetreatGet(Async)");
        }

        return retreatsRetreatGetCall(retreat, _callback);

    }

    /**
     * 
     * 
     * @param retreat  (required)
     * @return StringEndpoint
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Get the cards containing the specified retreat count </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The Retreat count doesn&#39;t exist </td><td>  -  </td></tr>
     </table>
     */
    public StringEndpoint retreatsRetreatGet(String retreat) throws ApiException {
        ApiResponse<StringEndpoint> localVarResp = retreatsRetreatGetWithHttpInfo(retreat);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param retreat  (required)
     * @return ApiResponse&lt;StringEndpoint&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Get the cards containing the specified retreat count </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The Retreat count doesn&#39;t exist </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<StringEndpoint> retreatsRetreatGetWithHttpInfo(String retreat) throws ApiException {
        okhttp3.Call localVarCall = retreatsRetreatGetValidateBeforeCall(retreat, null);
        Type localVarReturnType = new TypeToken<StringEndpoint>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param retreat  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Get the cards containing the specified retreat count </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The Retreat count doesn&#39;t exist </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call retreatsRetreatGetAsync(String retreat, final ApiCallback<StringEndpoint> _callback) throws ApiException {

        okhttp3.Call localVarCall = retreatsRetreatGetValidateBeforeCall(retreat, _callback);
        Type localVarReturnType = new TypeToken<StringEndpoint>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for seriesGet
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful request </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call seriesGetCall(final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/series";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call seriesGetValidateBeforeCall(final ApiCallback _callback) throws ApiException {
        return seriesGetCall(_callback);

    }

    /**
     * 
     * 
     * @return List&lt;SerieResume&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful request </td><td>  -  </td></tr>
     </table>
     */
    public List<SerieResume> seriesGet() throws ApiException {
        ApiResponse<List<SerieResume>> localVarResp = seriesGetWithHttpInfo();
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @return ApiResponse&lt;List&lt;SerieResume&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful request </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<SerieResume>> seriesGetWithHttpInfo() throws ApiException {
        okhttp3.Call localVarCall = seriesGetValidateBeforeCall(null);
        Type localVarReturnType = new TypeToken<List<SerieResume>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful request </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call seriesGetAsync(final ApiCallback<List<SerieResume>> _callback) throws ApiException {

        okhttp3.Call localVarCall = seriesGetValidateBeforeCall(_callback);
        Type localVarReturnType = new TypeToken<List<SerieResume>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for seriesSerieGet
     * @param serie the serie ID or name (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The Serie doesn&#39;t exist </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call seriesSerieGetCall(String serie, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/series/{serie}"
            .replace("{" + "serie" + "}", localVarApiClient.escapeString(serie.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call seriesSerieGetValidateBeforeCall(String serie, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'serie' is set
        if (serie == null) {
            throw new ApiException("Missing the required parameter 'serie' when calling seriesSerieGet(Async)");
        }

        return seriesSerieGetCall(serie, _callback);

    }

    /**
     * 
     * 
     * @param serie the serie ID or name (required)
     * @return Serie
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The Serie doesn&#39;t exist </td><td>  -  </td></tr>
     </table>
     */
    public Serie seriesSerieGet(String serie) throws ApiException {
        ApiResponse<Serie> localVarResp = seriesSerieGetWithHttpInfo(serie);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param serie the serie ID or name (required)
     * @return ApiResponse&lt;Serie&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The Serie doesn&#39;t exist </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Serie> seriesSerieGetWithHttpInfo(String serie) throws ApiException {
        okhttp3.Call localVarCall = seriesSerieGetValidateBeforeCall(serie, null);
        Type localVarReturnType = new TypeToken<Serie>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param serie the serie ID or name (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The Serie doesn&#39;t exist </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call seriesSerieGetAsync(String serie, final ApiCallback<Serie> _callback) throws ApiException {

        okhttp3.Call localVarCall = seriesSerieGetValidateBeforeCall(serie, _callback);
        Type localVarReturnType = new TypeToken<Serie>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for setsGet
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful request </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call setsGetCall(final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/sets";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call setsGetValidateBeforeCall(final ApiCallback _callback) throws ApiException {
        return setsGetCall(_callback);

    }

    /**
     * 
     * 
     * @return List&lt;SetResume&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful request </td><td>  -  </td></tr>
     </table>
     */
    public List<SetResume> setsGet() throws ApiException {
        ApiResponse<List<SetResume>> localVarResp = setsGetWithHttpInfo();
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @return ApiResponse&lt;List&lt;SetResume&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful request </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<SetResume>> setsGetWithHttpInfo() throws ApiException {
        okhttp3.Call localVarCall = setsGetValidateBeforeCall(null);
        Type localVarReturnType = new TypeToken<List<SetResume>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful request </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call setsGetAsync(final ApiCallback<List<SetResume>> _callback) throws ApiException {

        okhttp3.Call localVarCall = setsGetValidateBeforeCall(_callback);
        Type localVarReturnType = new TypeToken<List<SetResume>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for setsSetGet
     * @param set the set ID or the set name (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The Set doesn&#39;t exist </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call setsSetGetCall(String set, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/sets/{set}"
            .replace("{" + "set" + "}", localVarApiClient.escapeString(set.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call setsSetGetValidateBeforeCall(String set, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'set' is set
        if (set == null) {
            throw new ApiException("Missing the required parameter 'set' when calling setsSetGet(Async)");
        }

        return setsSetGetCall(set, _callback);

    }

    /**
     * 
     * 
     * @param set the set ID or the set name (required)
     * @return Set
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The Set doesn&#39;t exist </td><td>  -  </td></tr>
     </table>
     */
    public Set setsSetGet(String set) throws ApiException {
        ApiResponse<Set> localVarResp = setsSetGetWithHttpInfo(set);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param set the set ID or the set name (required)
     * @return ApiResponse&lt;Set&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The Set doesn&#39;t exist </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Set> setsSetGetWithHttpInfo(String set) throws ApiException {
        okhttp3.Call localVarCall = setsSetGetValidateBeforeCall(set, null);
        Type localVarReturnType = new TypeToken<Set>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param set the set ID or the set name (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The Set doesn&#39;t exist </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call setsSetGetAsync(String set, final ApiCallback<Set> _callback) throws ApiException {

        okhttp3.Call localVarCall = setsSetGetValidateBeforeCall(set, _callback);
        Type localVarReturnType = new TypeToken<Set>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for stagesGet
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Get all the possible stages a Pok√©mon card can have </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call stagesGetCall(final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/stages";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call stagesGetValidateBeforeCall(final ApiCallback _callback) throws ApiException {
        return stagesGetCall(_callback);

    }

    /**
     * 
     * 
     * @return List&lt;String&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Get all the possible stages a Pok√©mon card can have </td><td>  -  </td></tr>
     </table>
     */
    public List<String> stagesGet() throws ApiException {
        ApiResponse<List<String>> localVarResp = stagesGetWithHttpInfo();
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @return ApiResponse&lt;List&lt;String&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Get all the possible stages a Pok√©mon card can have </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<String>> stagesGetWithHttpInfo() throws ApiException {
        okhttp3.Call localVarCall = stagesGetValidateBeforeCall(null);
        Type localVarReturnType = new TypeToken<List<String>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Get all the possible stages a Pok√©mon card can have </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call stagesGetAsync(final ApiCallback<List<String>> _callback) throws ApiException {

        okhttp3.Call localVarCall = stagesGetValidateBeforeCall(_callback);
        Type localVarReturnType = new TypeToken<List<String>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for stagesStageGet
     * @param stage  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Get all the cards having the specified stage </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The stage doesn&#39;t exist </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call stagesStageGetCall(String stage, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/stages/{stage}"
            .replace("{" + "stage" + "}", localVarApiClient.escapeString(stage.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call stagesStageGetValidateBeforeCall(String stage, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'stage' is set
        if (stage == null) {
            throw new ApiException("Missing the required parameter 'stage' when calling stagesStageGet(Async)");
        }

        return stagesStageGetCall(stage, _callback);

    }

    /**
     * 
     * 
     * @param stage  (required)
     * @return List&lt;CardResume&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Get all the cards having the specified stage </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The stage doesn&#39;t exist </td><td>  -  </td></tr>
     </table>
     */
    public List<CardResume> stagesStageGet(String stage) throws ApiException {
        ApiResponse<List<CardResume>> localVarResp = stagesStageGetWithHttpInfo(stage);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param stage  (required)
     * @return ApiResponse&lt;List&lt;CardResume&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Get all the cards having the specified stage </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The stage doesn&#39;t exist </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<CardResume>> stagesStageGetWithHttpInfo(String stage) throws ApiException {
        okhttp3.Call localVarCall = stagesStageGetValidateBeforeCall(stage, null);
        Type localVarReturnType = new TypeToken<List<CardResume>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param stage  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Get all the cards having the specified stage </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The stage doesn&#39;t exist </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call stagesStageGetAsync(String stage, final ApiCallback<List<CardResume>> _callback) throws ApiException {

        okhttp3.Call localVarCall = stagesStageGetValidateBeforeCall(stage, _callback);
        Type localVarReturnType = new TypeToken<List<CardResume>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for suffixesGet
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Get all the cards having the specified suffix </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call suffixesGetCall(final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/suffixes";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call suffixesGetValidateBeforeCall(final ApiCallback _callback) throws ApiException {
        return suffixesGetCall(_callback);

    }

    /**
     * 
     * 
     * @return List&lt;String&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Get all the cards having the specified suffix </td><td>  -  </td></tr>
     </table>
     */
    public List<String> suffixesGet() throws ApiException {
        ApiResponse<List<String>> localVarResp = suffixesGetWithHttpInfo();
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @return ApiResponse&lt;List&lt;String&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Get all the cards having the specified suffix </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<String>> suffixesGetWithHttpInfo() throws ApiException {
        okhttp3.Call localVarCall = suffixesGetValidateBeforeCall(null);
        Type localVarReturnType = new TypeToken<List<String>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Get all the cards having the specified suffix </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call suffixesGetAsync(final ApiCallback<List<String>> _callback) throws ApiException {

        okhttp3.Call localVarCall = suffixesGetValidateBeforeCall(_callback);
        Type localVarReturnType = new TypeToken<List<String>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for suffixesSuffixGet
     * @param suffix  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Get all the cards having the specified stage suffix </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The suffix doesn&#39;t exist </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call suffixesSuffixGetCall(String suffix, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/suffixes/{suffix}"
            .replace("{" + "suffix" + "}", localVarApiClient.escapeString(suffix.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call suffixesSuffixGetValidateBeforeCall(String suffix, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'suffix' is set
        if (suffix == null) {
            throw new ApiException("Missing the required parameter 'suffix' when calling suffixesSuffixGet(Async)");
        }

        return suffixesSuffixGetCall(suffix, _callback);

    }

    /**
     * 
     * 
     * @param suffix  (required)
     * @return List&lt;CardResume&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Get all the cards having the specified stage suffix </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The suffix doesn&#39;t exist </td><td>  -  </td></tr>
     </table>
     */
    public List<CardResume> suffixesSuffixGet(String suffix) throws ApiException {
        ApiResponse<List<CardResume>> localVarResp = suffixesSuffixGetWithHttpInfo(suffix);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param suffix  (required)
     * @return ApiResponse&lt;List&lt;CardResume&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Get all the cards having the specified stage suffix </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The suffix doesn&#39;t exist </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<CardResume>> suffixesSuffixGetWithHttpInfo(String suffix) throws ApiException {
        okhttp3.Call localVarCall = suffixesSuffixGetValidateBeforeCall(suffix, null);
        Type localVarReturnType = new TypeToken<List<CardResume>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param suffix  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Get all the cards having the specified stage suffix </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The suffix doesn&#39;t exist </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call suffixesSuffixGetAsync(String suffix, final ApiCallback<List<CardResume>> _callback) throws ApiException {

        okhttp3.Call localVarCall = suffixesSuffixGetValidateBeforeCall(suffix, _callback);
        Type localVarReturnType = new TypeToken<List<CardResume>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for trainerTypesGet
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Get the different trainer-types </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call trainerTypesGetCall(final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/trainer-types";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call trainerTypesGetValidateBeforeCall(final ApiCallback _callback) throws ApiException {
        return trainerTypesGetCall(_callback);

    }

    /**
     * 
     * 
     * @return List&lt;String&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Get the different trainer-types </td><td>  -  </td></tr>
     </table>
     */
    public List<String> trainerTypesGet() throws ApiException {
        ApiResponse<List<String>> localVarResp = trainerTypesGetWithHttpInfo();
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @return ApiResponse&lt;List&lt;String&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Get the different trainer-types </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<String>> trainerTypesGetWithHttpInfo() throws ApiException {
        okhttp3.Call localVarCall = trainerTypesGetValidateBeforeCall(null);
        Type localVarReturnType = new TypeToken<List<String>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Get the different trainer-types </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call trainerTypesGetAsync(final ApiCallback<List<String>> _callback) throws ApiException {

        okhttp3.Call localVarCall = trainerTypesGetValidateBeforeCall(_callback);
        Type localVarReturnType = new TypeToken<List<String>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for trainerTypesTrainerTypeGet
     * @param trainerType  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Get the cards containing with the specified trainer-type </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The trainer-type doesn&#39;t exist </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call trainerTypesTrainerTypeGetCall(String trainerType, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/trainer-types/{trainer-type}"
            .replace("{" + "trainer-type" + "}", localVarApiClient.escapeString(trainerType.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call trainerTypesTrainerTypeGetValidateBeforeCall(String trainerType, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'trainerType' is set
        if (trainerType == null) {
            throw new ApiException("Missing the required parameter 'trainerType' when calling trainerTypesTrainerTypeGet(Async)");
        }

        return trainerTypesTrainerTypeGetCall(trainerType, _callback);

    }

    /**
     * 
     * 
     * @param trainerType  (required)
     * @return List&lt;CardResume&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Get the cards containing with the specified trainer-type </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The trainer-type doesn&#39;t exist </td><td>  -  </td></tr>
     </table>
     */
    public List<CardResume> trainerTypesTrainerTypeGet(String trainerType) throws ApiException {
        ApiResponse<List<CardResume>> localVarResp = trainerTypesTrainerTypeGetWithHttpInfo(trainerType);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param trainerType  (required)
     * @return ApiResponse&lt;List&lt;CardResume&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Get the cards containing with the specified trainer-type </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The trainer-type doesn&#39;t exist </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<CardResume>> trainerTypesTrainerTypeGetWithHttpInfo(String trainerType) throws ApiException {
        okhttp3.Call localVarCall = trainerTypesTrainerTypeGetValidateBeforeCall(trainerType, null);
        Type localVarReturnType = new TypeToken<List<CardResume>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param trainerType  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Get the cards containing with the specified trainer-type </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The trainer-type doesn&#39;t exist </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call trainerTypesTrainerTypeGetAsync(String trainerType, final ApiCallback<List<CardResume>> _callback) throws ApiException {

        okhttp3.Call localVarCall = trainerTypesTrainerTypeGetValidateBeforeCall(trainerType, _callback);
        Type localVarReturnType = new TypeToken<List<CardResume>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for typesGet
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> List all possible cards types </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call typesGetCall(final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/types";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call typesGetValidateBeforeCall(final ApiCallback _callback) throws ApiException {
        return typesGetCall(_callback);

    }

    /**
     * 
     * 
     * @return List&lt;String&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> List all possible cards types </td><td>  -  </td></tr>
     </table>
     */
    public List<String> typesGet() throws ApiException {
        ApiResponse<List<String>> localVarResp = typesGetWithHttpInfo();
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @return ApiResponse&lt;List&lt;String&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> List all possible cards types </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<String>> typesGetWithHttpInfo() throws ApiException {
        okhttp3.Call localVarCall = typesGetValidateBeforeCall(null);
        Type localVarReturnType = new TypeToken<List<String>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> List all possible cards types </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call typesGetAsync(final ApiCallback<List<String>> _callback) throws ApiException {

        okhttp3.Call localVarCall = typesGetValidateBeforeCall(_callback);
        Type localVarReturnType = new TypeToken<List<String>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for typesTypeGet
     * @param type  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Get the cards containing the specified type </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The Type doesn&#39;t exist </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call typesTypeGetCall(String type, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/types/{type}"
            .replace("{" + "type" + "}", localVarApiClient.escapeString(type.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call typesTypeGetValidateBeforeCall(String type, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'type' is set
        if (type == null) {
            throw new ApiException("Missing the required parameter 'type' when calling typesTypeGet(Async)");
        }

        return typesTypeGetCall(type, _callback);

    }

    /**
     * 
     * 
     * @param type  (required)
     * @return List&lt;CardResume&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Get the cards containing the specified type </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The Type doesn&#39;t exist </td><td>  -  </td></tr>
     </table>
     */
    public List<CardResume> typesTypeGet(String type) throws ApiException {
        ApiResponse<List<CardResume>> localVarResp = typesTypeGetWithHttpInfo(type);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param type  (required)
     * @return ApiResponse&lt;List&lt;CardResume&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Get the cards containing the specified type </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The Type doesn&#39;t exist </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<CardResume>> typesTypeGetWithHttpInfo(String type) throws ApiException {
        okhttp3.Call localVarCall = typesTypeGetValidateBeforeCall(type, null);
        Type localVarReturnType = new TypeToken<List<CardResume>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param type  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Get the cards containing the specified type </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The Type doesn&#39;t exist </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call typesTypeGetAsync(String type, final ApiCallback<List<CardResume>> _callback) throws ApiException {

        okhttp3.Call localVarCall = typesTypeGetValidateBeforeCall(type, _callback);
        Type localVarReturnType = new TypeToken<List<CardResume>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for variantsGet
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Get the different variants available </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call variantsGetCall(final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/variants";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call variantsGetValidateBeforeCall(final ApiCallback _callback) throws ApiException {
        return variantsGetCall(_callback);

    }

    /**
     * 
     * 
     * @return List&lt;String&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Get the different variants available </td><td>  -  </td></tr>
     </table>
     */
    public List<String> variantsGet() throws ApiException {
        ApiResponse<List<String>> localVarResp = variantsGetWithHttpInfo();
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @return ApiResponse&lt;List&lt;String&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Get the different variants available </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<String>> variantsGetWithHttpInfo() throws ApiException {
        okhttp3.Call localVarCall = variantsGetValidateBeforeCall(null);
        Type localVarReturnType = new TypeToken<List<String>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Get the different variants available </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call variantsGetAsync(final ApiCallback<List<String>> _callback) throws ApiException {

        okhttp3.Call localVarCall = variantsGetValidateBeforeCall(_callback);
        Type localVarReturnType = new TypeToken<List<String>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for variantsVariantGet
     * @param variant  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Get the cards available in the specified variant </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The variant doesn&#39;t exist </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call variantsVariantGetCall(String variant, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/variants/{variant}"
            .replace("{" + "variant" + "}", localVarApiClient.escapeString(variant.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call variantsVariantGetValidateBeforeCall(String variant, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'variant' is set
        if (variant == null) {
            throw new ApiException("Missing the required parameter 'variant' when calling variantsVariantGet(Async)");
        }

        return variantsVariantGetCall(variant, _callback);

    }

    /**
     * 
     * 
     * @param variant  (required)
     * @return List&lt;CardResume&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Get the cards available in the specified variant </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The variant doesn&#39;t exist </td><td>  -  </td></tr>
     </table>
     */
    public List<CardResume> variantsVariantGet(String variant) throws ApiException {
        ApiResponse<List<CardResume>> localVarResp = variantsVariantGetWithHttpInfo(variant);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param variant  (required)
     * @return ApiResponse&lt;List&lt;CardResume&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Get the cards available in the specified variant </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The variant doesn&#39;t exist </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<CardResume>> variantsVariantGetWithHttpInfo(String variant) throws ApiException {
        okhttp3.Call localVarCall = variantsVariantGetValidateBeforeCall(variant, null);
        Type localVarReturnType = new TypeToken<List<CardResume>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param variant  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Get the cards available in the specified variant </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The variant doesn&#39;t exist </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call variantsVariantGetAsync(String variant, final ApiCallback<List<CardResume>> _callback) throws ApiException {

        okhttp3.Call localVarCall = variantsVariantGetValidateBeforeCall(variant, _callback);
        Type localVarReturnType = new TypeToken<List<CardResume>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
