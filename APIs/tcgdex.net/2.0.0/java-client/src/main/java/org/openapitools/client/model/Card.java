/*
 * TCGdex API
 * A Multilanguage Pok√©mon TCG Database with Cards Pictures and most of the informations contained on the cards. You can find out more about TCGdex at [https://www.tcgdex.net](https://www.tcgdex.net) or on [Discord](https://discord.gg/NehYTAhsZE).
 *
 * The version of the OpenAPI document: 2.0.0
 * Contact: contact@tcgdex.net
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.math.BigDecimal;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.CardAbilitiesInner;
import org.openapitools.client.model.CardAttacksInner;
import org.openapitools.client.model.CardItem;
import org.openapitools.client.model.CardLegal;
import org.openapitools.client.model.CardVariants;
import org.openapitools.client.model.SetResume;
import org.openapitools.client.model.WeakResInner;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Card
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T10:06:35.609810-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class Card {
  public static final String SERIALIZED_NAME_ABILITIES = "abilities";
  @SerializedName(SERIALIZED_NAME_ABILITIES)
  private List<CardAbilitiesInner> abilities = new ArrayList<>();

  public static final String SERIALIZED_NAME_ATTACKS = "attacks";
  @SerializedName(SERIALIZED_NAME_ATTACKS)
  private List<CardAttacksInner> attacks = new ArrayList<>();

  public static final String SERIALIZED_NAME_CATEGORY = "category";
  @SerializedName(SERIALIZED_NAME_CATEGORY)
  private String category;

  public static final String SERIALIZED_NAME_DESCRIPTION = "description";
  @SerializedName(SERIALIZED_NAME_DESCRIPTION)
  private String description;

  public static final String SERIALIZED_NAME_DEX_ID = "dexId";
  @SerializedName(SERIALIZED_NAME_DEX_ID)
  private List<BigDecimal> dexId = new ArrayList<>();

  public static final String SERIALIZED_NAME_ENERGY_TYPE = "energyType";
  @SerializedName(SERIALIZED_NAME_ENERGY_TYPE)
  private String energyType;

  public static final String SERIALIZED_NAME_EVOLVE_FROM = "evolveFrom";
  @SerializedName(SERIALIZED_NAME_EVOLVE_FROM)
  private String evolveFrom;

  public static final String SERIALIZED_NAME_HP = "hp";
  @SerializedName(SERIALIZED_NAME_HP)
  private BigDecimal hp;

  public static final String SERIALIZED_NAME_ID = "id";
  @SerializedName(SERIALIZED_NAME_ID)
  private String id;

  public static final String SERIALIZED_NAME_ILLUSTRATOR = "illustrator";
  @SerializedName(SERIALIZED_NAME_ILLUSTRATOR)
  private String illustrator;

  public static final String SERIALIZED_NAME_IMAGE = "image";
  @SerializedName(SERIALIZED_NAME_IMAGE)
  private String image;

  public static final String SERIALIZED_NAME_ITEM = "item";
  @SerializedName(SERIALIZED_NAME_ITEM)
  private CardItem item;

  public static final String SERIALIZED_NAME_LEGAL = "legal";
  @SerializedName(SERIALIZED_NAME_LEGAL)
  private CardLegal legal;

  public static final String SERIALIZED_NAME_LEVEL = "level";
  @SerializedName(SERIALIZED_NAME_LEVEL)
  private BigDecimal level;

  public static final String SERIALIZED_NAME_LOCAL_ID = "localId";
  @SerializedName(SERIALIZED_NAME_LOCAL_ID)
  private String localId;

  public static final String SERIALIZED_NAME_NAME = "name";
  @SerializedName(SERIALIZED_NAME_NAME)
  private String name;

  public static final String SERIALIZED_NAME_RARITY = "rarity";
  @SerializedName(SERIALIZED_NAME_RARITY)
  private String rarity;

  public static final String SERIALIZED_NAME_REGULATION_MARK = "regulationMark";
  @SerializedName(SERIALIZED_NAME_REGULATION_MARK)
  private String regulationMark;

  public static final String SERIALIZED_NAME_RESISTANCES = "resistances";
  @SerializedName(SERIALIZED_NAME_RESISTANCES)
  private List<List<WeakResInner>> resistances = new ArrayList<>();

  public static final String SERIALIZED_NAME_RETREAT = "retreat";
  @SerializedName(SERIALIZED_NAME_RETREAT)
  private BigDecimal retreat;

  public static final String SERIALIZED_NAME_SET = "set";
  @SerializedName(SERIALIZED_NAME_SET)
  private SetResume set;

  public static final String SERIALIZED_NAME_STAGE = "stage";
  @SerializedName(SERIALIZED_NAME_STAGE)
  private String stage;

  public static final String SERIALIZED_NAME_SUFFIX = "suffix";
  @SerializedName(SERIALIZED_NAME_SUFFIX)
  private String suffix;

  public static final String SERIALIZED_NAME_TRAINER_TYPE = "trainerType";
  @SerializedName(SERIALIZED_NAME_TRAINER_TYPE)
  private String trainerType;

  public static final String SERIALIZED_NAME_TYPES = "types";
  @SerializedName(SERIALIZED_NAME_TYPES)
  private List<String> types = new ArrayList<>();

  public static final String SERIALIZED_NAME_VARIANTS = "variants";
  @SerializedName(SERIALIZED_NAME_VARIANTS)
  private CardVariants variants;

  public static final String SERIALIZED_NAME_WEAKNESSES = "weaknesses";
  @SerializedName(SERIALIZED_NAME_WEAKNESSES)
  private List<List<WeakResInner>> weaknesses = new ArrayList<>();

  public Card() {
  }

  public Card abilities(List<CardAbilitiesInner> abilities) {
    this.abilities = abilities;
    return this;
  }

  public Card addAbilitiesItem(CardAbilitiesInner abilitiesItem) {
    if (this.abilities == null) {
      this.abilities = new ArrayList<>();
    }
    this.abilities.add(abilitiesItem);
    return this;
  }

  /**
   * Get abilities
   * @return abilities
   */
  @javax.annotation.Nullable
  public List<CardAbilitiesInner> getAbilities() {
    return abilities;
  }

  public void setAbilities(List<CardAbilitiesInner> abilities) {
    this.abilities = abilities;
  }


  public Card attacks(List<CardAttacksInner> attacks) {
    this.attacks = attacks;
    return this;
  }

  public Card addAttacksItem(CardAttacksInner attacksItem) {
    if (this.attacks == null) {
      this.attacks = new ArrayList<>();
    }
    this.attacks.add(attacksItem);
    return this;
  }

  /**
   * Get attacks
   * @return attacks
   */
  @javax.annotation.Nullable
  public List<CardAttacksInner> getAttacks() {
    return attacks;
  }

  public void setAttacks(List<CardAttacksInner> attacks) {
    this.attacks = attacks;
  }


  public Card category(String category) {
    this.category = category;
    return this;
  }

  /**
   * Get category
   * @return category
   */
  @javax.annotation.Nonnull
  public String getCategory() {
    return category;
  }

  public void setCategory(String category) {
    this.category = category;
  }


  public Card description(String description) {
    this.description = description;
    return this;
  }

  /**
   * Get description
   * @return description
   */
  @javax.annotation.Nullable
  public String getDescription() {
    return description;
  }

  public void setDescription(String description) {
    this.description = description;
  }


  public Card dexId(List<BigDecimal> dexId) {
    this.dexId = dexId;
    return this;
  }

  public Card addDexIdItem(BigDecimal dexIdItem) {
    if (this.dexId == null) {
      this.dexId = new ArrayList<>();
    }
    this.dexId.add(dexIdItem);
    return this;
  }

  /**
   * Get dexId
   * @return dexId
   */
  @javax.annotation.Nullable
  public List<BigDecimal> getDexId() {
    return dexId;
  }

  public void setDexId(List<BigDecimal> dexId) {
    this.dexId = dexId;
  }


  public Card energyType(String energyType) {
    this.energyType = energyType;
    return this;
  }

  /**
   * Get energyType
   * @return energyType
   */
  @javax.annotation.Nullable
  public String getEnergyType() {
    return energyType;
  }

  public void setEnergyType(String energyType) {
    this.energyType = energyType;
  }


  public Card evolveFrom(String evolveFrom) {
    this.evolveFrom = evolveFrom;
    return this;
  }

  /**
   * Get evolveFrom
   * @return evolveFrom
   */
  @javax.annotation.Nullable
  public String getEvolveFrom() {
    return evolveFrom;
  }

  public void setEvolveFrom(String evolveFrom) {
    this.evolveFrom = evolveFrom;
  }


  public Card hp(BigDecimal hp) {
    this.hp = hp;
    return this;
  }

  /**
   * Get hp
   * @return hp
   */
  @javax.annotation.Nullable
  public BigDecimal getHp() {
    return hp;
  }

  public void setHp(BigDecimal hp) {
    this.hp = hp;
  }


  public Card id(String id) {
    this.id = id;
    return this;
  }

  /**
   * Get id
   * @return id
   */
  @javax.annotation.Nonnull
  public String getId() {
    return id;
  }

  public void setId(String id) {
    this.id = id;
  }


  public Card illustrator(String illustrator) {
    this.illustrator = illustrator;
    return this;
  }

  /**
   * Get illustrator
   * @return illustrator
   */
  @javax.annotation.Nullable
  public String getIllustrator() {
    return illustrator;
  }

  public void setIllustrator(String illustrator) {
    this.illustrator = illustrator;
  }


  public Card image(String image) {
    this.image = image;
    return this;
  }

  /**
   * Get image
   * @return image
   */
  @javax.annotation.Nullable
  public String getImage() {
    return image;
  }

  public void setImage(String image) {
    this.image = image;
  }


  public Card item(CardItem item) {
    this.item = item;
    return this;
  }

  /**
   * Get item
   * @return item
   */
  @javax.annotation.Nullable
  public CardItem getItem() {
    return item;
  }

  public void setItem(CardItem item) {
    this.item = item;
  }


  public Card legal(CardLegal legal) {
    this.legal = legal;
    return this;
  }

  /**
   * Get legal
   * @return legal
   */
  @javax.annotation.Nonnull
  public CardLegal getLegal() {
    return legal;
  }

  public void setLegal(CardLegal legal) {
    this.legal = legal;
  }


  public Card level(BigDecimal level) {
    this.level = level;
    return this;
  }

  /**
   * Get level
   * @return level
   */
  @javax.annotation.Nullable
  public BigDecimal getLevel() {
    return level;
  }

  public void setLevel(BigDecimal level) {
    this.level = level;
  }


  public Card localId(String localId) {
    this.localId = localId;
    return this;
  }

  /**
   * Get localId
   * @return localId
   */
  @javax.annotation.Nonnull
  public String getLocalId() {
    return localId;
  }

  public void setLocalId(String localId) {
    this.localId = localId;
  }


  public Card name(String name) {
    this.name = name;
    return this;
  }

  /**
   * Get name
   * @return name
   */
  @javax.annotation.Nonnull
  public String getName() {
    return name;
  }

  public void setName(String name) {
    this.name = name;
  }


  public Card rarity(String rarity) {
    this.rarity = rarity;
    return this;
  }

  /**
   * Get rarity
   * @return rarity
   */
  @javax.annotation.Nonnull
  public String getRarity() {
    return rarity;
  }

  public void setRarity(String rarity) {
    this.rarity = rarity;
  }


  public Card regulationMark(String regulationMark) {
    this.regulationMark = regulationMark;
    return this;
  }

  /**
   * Get regulationMark
   * @return regulationMark
   */
  @javax.annotation.Nullable
  public String getRegulationMark() {
    return regulationMark;
  }

  public void setRegulationMark(String regulationMark) {
    this.regulationMark = regulationMark;
  }


  public Card resistances(List<List<WeakResInner>> resistances) {
    this.resistances = resistances;
    return this;
  }

  public Card addResistancesItem(List<WeakResInner> resistancesItem) {
    if (this.resistances == null) {
      this.resistances = new ArrayList<>();
    }
    this.resistances.add(resistancesItem);
    return this;
  }

  /**
   * Get resistances
   * @return resistances
   */
  @javax.annotation.Nullable
  public List<List<WeakResInner>> getResistances() {
    return resistances;
  }

  public void setResistances(List<List<WeakResInner>> resistances) {
    this.resistances = resistances;
  }


  public Card retreat(BigDecimal retreat) {
    this.retreat = retreat;
    return this;
  }

  /**
   * Get retreat
   * @return retreat
   */
  @javax.annotation.Nullable
  public BigDecimal getRetreat() {
    return retreat;
  }

  public void setRetreat(BigDecimal retreat) {
    this.retreat = retreat;
  }


  public Card set(SetResume set) {
    this.set = set;
    return this;
  }

  /**
   * Get set
   * @return set
   */
  @javax.annotation.Nonnull
  public SetResume getSet() {
    return set;
  }

  public void setSet(SetResume set) {
    this.set = set;
  }


  public Card stage(String stage) {
    this.stage = stage;
    return this;
  }

  /**
   * Get stage
   * @return stage
   */
  @javax.annotation.Nullable
  public String getStage() {
    return stage;
  }

  public void setStage(String stage) {
    this.stage = stage;
  }


  public Card suffix(String suffix) {
    this.suffix = suffix;
    return this;
  }

  /**
   * Get suffix
   * @return suffix
   */
  @javax.annotation.Nullable
  public String getSuffix() {
    return suffix;
  }

  public void setSuffix(String suffix) {
    this.suffix = suffix;
  }


  public Card trainerType(String trainerType) {
    this.trainerType = trainerType;
    return this;
  }

  /**
   * Get trainerType
   * @return trainerType
   */
  @javax.annotation.Nullable
  public String getTrainerType() {
    return trainerType;
  }

  public void setTrainerType(String trainerType) {
    this.trainerType = trainerType;
  }


  public Card types(List<String> types) {
    this.types = types;
    return this;
  }

  public Card addTypesItem(String typesItem) {
    if (this.types == null) {
      this.types = new ArrayList<>();
    }
    this.types.add(typesItem);
    return this;
  }

  /**
   * Get types
   * @return types
   */
  @javax.annotation.Nullable
  public List<String> getTypes() {
    return types;
  }

  public void setTypes(List<String> types) {
    this.types = types;
  }


  public Card variants(CardVariants variants) {
    this.variants = variants;
    return this;
  }

  /**
   * Get variants
   * @return variants
   */
  @javax.annotation.Nullable
  public CardVariants getVariants() {
    return variants;
  }

  public void setVariants(CardVariants variants) {
    this.variants = variants;
  }


  public Card weaknesses(List<List<WeakResInner>> weaknesses) {
    this.weaknesses = weaknesses;
    return this;
  }

  public Card addWeaknessesItem(List<WeakResInner> weaknessesItem) {
    if (this.weaknesses == null) {
      this.weaknesses = new ArrayList<>();
    }
    this.weaknesses.add(weaknessesItem);
    return this;
  }

  /**
   * Get weaknesses
   * @return weaknesses
   */
  @javax.annotation.Nullable
  public List<List<WeakResInner>> getWeaknesses() {
    return weaknesses;
  }

  public void setWeaknesses(List<List<WeakResInner>> weaknesses) {
    this.weaknesses = weaknesses;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    Card card = (Card) o;
    return Objects.equals(this.abilities, card.abilities) &&
        Objects.equals(this.attacks, card.attacks) &&
        Objects.equals(this.category, card.category) &&
        Objects.equals(this.description, card.description) &&
        Objects.equals(this.dexId, card.dexId) &&
        Objects.equals(this.energyType, card.energyType) &&
        Objects.equals(this.evolveFrom, card.evolveFrom) &&
        Objects.equals(this.hp, card.hp) &&
        Objects.equals(this.id, card.id) &&
        Objects.equals(this.illustrator, card.illustrator) &&
        Objects.equals(this.image, card.image) &&
        Objects.equals(this.item, card.item) &&
        Objects.equals(this.legal, card.legal) &&
        Objects.equals(this.level, card.level) &&
        Objects.equals(this.localId, card.localId) &&
        Objects.equals(this.name, card.name) &&
        Objects.equals(this.rarity, card.rarity) &&
        Objects.equals(this.regulationMark, card.regulationMark) &&
        Objects.equals(this.resistances, card.resistances) &&
        Objects.equals(this.retreat, card.retreat) &&
        Objects.equals(this.set, card.set) &&
        Objects.equals(this.stage, card.stage) &&
        Objects.equals(this.suffix, card.suffix) &&
        Objects.equals(this.trainerType, card.trainerType) &&
        Objects.equals(this.types, card.types) &&
        Objects.equals(this.variants, card.variants) &&
        Objects.equals(this.weaknesses, card.weaknesses);
  }

  @Override
  public int hashCode() {
    return Objects.hash(abilities, attacks, category, description, dexId, energyType, evolveFrom, hp, id, illustrator, image, item, legal, level, localId, name, rarity, regulationMark, resistances, retreat, set, stage, suffix, trainerType, types, variants, weaknesses);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class Card {\n");
    sb.append("    abilities: ").append(toIndentedString(abilities)).append("\n");
    sb.append("    attacks: ").append(toIndentedString(attacks)).append("\n");
    sb.append("    category: ").append(toIndentedString(category)).append("\n");
    sb.append("    description: ").append(toIndentedString(description)).append("\n");
    sb.append("    dexId: ").append(toIndentedString(dexId)).append("\n");
    sb.append("    energyType: ").append(toIndentedString(energyType)).append("\n");
    sb.append("    evolveFrom: ").append(toIndentedString(evolveFrom)).append("\n");
    sb.append("    hp: ").append(toIndentedString(hp)).append("\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    illustrator: ").append(toIndentedString(illustrator)).append("\n");
    sb.append("    image: ").append(toIndentedString(image)).append("\n");
    sb.append("    item: ").append(toIndentedString(item)).append("\n");
    sb.append("    legal: ").append(toIndentedString(legal)).append("\n");
    sb.append("    level: ").append(toIndentedString(level)).append("\n");
    sb.append("    localId: ").append(toIndentedString(localId)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    rarity: ").append(toIndentedString(rarity)).append("\n");
    sb.append("    regulationMark: ").append(toIndentedString(regulationMark)).append("\n");
    sb.append("    resistances: ").append(toIndentedString(resistances)).append("\n");
    sb.append("    retreat: ").append(toIndentedString(retreat)).append("\n");
    sb.append("    set: ").append(toIndentedString(set)).append("\n");
    sb.append("    stage: ").append(toIndentedString(stage)).append("\n");
    sb.append("    suffix: ").append(toIndentedString(suffix)).append("\n");
    sb.append("    trainerType: ").append(toIndentedString(trainerType)).append("\n");
    sb.append("    types: ").append(toIndentedString(types)).append("\n");
    sb.append("    variants: ").append(toIndentedString(variants)).append("\n");
    sb.append("    weaknesses: ").append(toIndentedString(weaknesses)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("abilities");
    openapiFields.add("attacks");
    openapiFields.add("category");
    openapiFields.add("description");
    openapiFields.add("dexId");
    openapiFields.add("energyType");
    openapiFields.add("evolveFrom");
    openapiFields.add("hp");
    openapiFields.add("id");
    openapiFields.add("illustrator");
    openapiFields.add("image");
    openapiFields.add("item");
    openapiFields.add("legal");
    openapiFields.add("level");
    openapiFields.add("localId");
    openapiFields.add("name");
    openapiFields.add("rarity");
    openapiFields.add("regulationMark");
    openapiFields.add("resistances");
    openapiFields.add("retreat");
    openapiFields.add("set");
    openapiFields.add("stage");
    openapiFields.add("suffix");
    openapiFields.add("trainerType");
    openapiFields.add("types");
    openapiFields.add("variants");
    openapiFields.add("weaknesses");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("category");
    openapiRequiredFields.add("id");
    openapiRequiredFields.add("legal");
    openapiRequiredFields.add("localId");
    openapiRequiredFields.add("name");
    openapiRequiredFields.add("rarity");
    openapiRequiredFields.add("set");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to Card
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!Card.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in Card is not found in the empty JSON string", Card.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!Card.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `Card` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : Card.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if (jsonObj.get("abilities") != null && !jsonObj.get("abilities").isJsonNull()) {
        JsonArray jsonArrayabilities = jsonObj.getAsJsonArray("abilities");
        if (jsonArrayabilities != null) {
          // ensure the json data is an array
          if (!jsonObj.get("abilities").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `abilities` to be an array in the JSON string but got `%s`", jsonObj.get("abilities").toString()));
          }

          // validate the optional field `abilities` (array)
          for (int i = 0; i < jsonArrayabilities.size(); i++) {
            CardAbilitiesInner.validateJsonElement(jsonArrayabilities.get(i));
          };
        }
      }
      if (jsonObj.get("attacks") != null && !jsonObj.get("attacks").isJsonNull()) {
        JsonArray jsonArrayattacks = jsonObj.getAsJsonArray("attacks");
        if (jsonArrayattacks != null) {
          // ensure the json data is an array
          if (!jsonObj.get("attacks").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `attacks` to be an array in the JSON string but got `%s`", jsonObj.get("attacks").toString()));
          }

          // validate the optional field `attacks` (array)
          for (int i = 0; i < jsonArrayattacks.size(); i++) {
            CardAttacksInner.validateJsonElement(jsonArrayattacks.get(i));
          };
        }
      }
      if (!jsonObj.get("category").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `category` to be a primitive type in the JSON string but got `%s`", jsonObj.get("category").toString()));
      }
      if ((jsonObj.get("description") != null && !jsonObj.get("description").isJsonNull()) && !jsonObj.get("description").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `description` to be a primitive type in the JSON string but got `%s`", jsonObj.get("description").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("dexId") != null && !jsonObj.get("dexId").isJsonNull() && !jsonObj.get("dexId").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `dexId` to be an array in the JSON string but got `%s`", jsonObj.get("dexId").toString()));
      }
      if ((jsonObj.get("energyType") != null && !jsonObj.get("energyType").isJsonNull()) && !jsonObj.get("energyType").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `energyType` to be a primitive type in the JSON string but got `%s`", jsonObj.get("energyType").toString()));
      }
      if ((jsonObj.get("evolveFrom") != null && !jsonObj.get("evolveFrom").isJsonNull()) && !jsonObj.get("evolveFrom").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `evolveFrom` to be a primitive type in the JSON string but got `%s`", jsonObj.get("evolveFrom").toString()));
      }
      if (!jsonObj.get("id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("id").toString()));
      }
      if ((jsonObj.get("illustrator") != null && !jsonObj.get("illustrator").isJsonNull()) && !jsonObj.get("illustrator").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `illustrator` to be a primitive type in the JSON string but got `%s`", jsonObj.get("illustrator").toString()));
      }
      if ((jsonObj.get("image") != null && !jsonObj.get("image").isJsonNull()) && !jsonObj.get("image").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `image` to be a primitive type in the JSON string but got `%s`", jsonObj.get("image").toString()));
      }
      // validate the optional field `item`
      if (jsonObj.get("item") != null && !jsonObj.get("item").isJsonNull()) {
        CardItem.validateJsonElement(jsonObj.get("item"));
      }
      // validate the required field `legal`
      CardLegal.validateJsonElement(jsonObj.get("legal"));
      if (!jsonObj.get("localId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `localId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("localId").toString()));
      }
      if (!jsonObj.get("name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("name").toString()));
      }
      if (!jsonObj.get("rarity").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `rarity` to be a primitive type in the JSON string but got `%s`", jsonObj.get("rarity").toString()));
      }
      if ((jsonObj.get("regulationMark") != null && !jsonObj.get("regulationMark").isJsonNull()) && !jsonObj.get("regulationMark").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `regulationMark` to be a primitive type in the JSON string but got `%s`", jsonObj.get("regulationMark").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("resistances") != null && !jsonObj.get("resistances").isJsonNull() && !jsonObj.get("resistances").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `resistances` to be an array in the JSON string but got `%s`", jsonObj.get("resistances").toString()));
      }
      // validate the required field `set`
      SetResume.validateJsonElement(jsonObj.get("set"));
      if ((jsonObj.get("stage") != null && !jsonObj.get("stage").isJsonNull()) && !jsonObj.get("stage").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `stage` to be a primitive type in the JSON string but got `%s`", jsonObj.get("stage").toString()));
      }
      if ((jsonObj.get("suffix") != null && !jsonObj.get("suffix").isJsonNull()) && !jsonObj.get("suffix").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `suffix` to be a primitive type in the JSON string but got `%s`", jsonObj.get("suffix").toString()));
      }
      if ((jsonObj.get("trainerType") != null && !jsonObj.get("trainerType").isJsonNull()) && !jsonObj.get("trainerType").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `trainerType` to be a primitive type in the JSON string but got `%s`", jsonObj.get("trainerType").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("types") != null && !jsonObj.get("types").isJsonNull() && !jsonObj.get("types").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `types` to be an array in the JSON string but got `%s`", jsonObj.get("types").toString()));
      }
      // validate the optional field `variants`
      if (jsonObj.get("variants") != null && !jsonObj.get("variants").isJsonNull()) {
        CardVariants.validateJsonElement(jsonObj.get("variants"));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("weaknesses") != null && !jsonObj.get("weaknesses").isJsonNull() && !jsonObj.get("weaknesses").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `weaknesses` to be an array in the JSON string but got `%s`", jsonObj.get("weaknesses").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!Card.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'Card' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<Card> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(Card.class));

       return (TypeAdapter<T>) new TypeAdapter<Card>() {
           @Override
           public void write(JsonWriter out, Card value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public Card read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of Card given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of Card
   * @throws IOException if the JSON string is invalid with respect to Card
   */
  public static Card fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, Card.class);
  }

  /**
   * Convert an instance of Card to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

