/*
 * TCGdex API
 * A Multilanguage Pok√©mon TCG Database with Cards Pictures and most of the informations contained on the cards. You can find out more about TCGdex at [https://www.tcgdex.net](https://www.tcgdex.net) or on [Discord](https://discord.gg/NehYTAhsZE).
 *
 * The version of the OpenAPI document: 2.0.0
 * Contact: contact@tcgdex.net
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.math.BigDecimal;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * SetCardCount
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T10:06:35.609810-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class SetCardCount {
  public static final String SERIALIZED_NAME_FIRST_ED = "firstEd";
  @SerializedName(SERIALIZED_NAME_FIRST_ED)
  private BigDecimal firstEd;

  public static final String SERIALIZED_NAME_HOLO = "holo";
  @SerializedName(SERIALIZED_NAME_HOLO)
  private BigDecimal holo;

  public static final String SERIALIZED_NAME_NORMAL = "normal";
  @SerializedName(SERIALIZED_NAME_NORMAL)
  private BigDecimal normal;

  public static final String SERIALIZED_NAME_OFFICIAL = "official";
  @SerializedName(SERIALIZED_NAME_OFFICIAL)
  private BigDecimal official;

  public static final String SERIALIZED_NAME_REVERSE = "reverse";
  @SerializedName(SERIALIZED_NAME_REVERSE)
  private BigDecimal reverse;

  public static final String SERIALIZED_NAME_TOTAL = "total";
  @SerializedName(SERIALIZED_NAME_TOTAL)
  private BigDecimal total;

  public SetCardCount() {
  }

  public SetCardCount firstEd(BigDecimal firstEd) {
    this.firstEd = firstEd;
    return this;
  }

  /**
   * Get firstEd
   * @return firstEd
   */
  @javax.annotation.Nullable
  public BigDecimal getFirstEd() {
    return firstEd;
  }

  public void setFirstEd(BigDecimal firstEd) {
    this.firstEd = firstEd;
  }


  public SetCardCount holo(BigDecimal holo) {
    this.holo = holo;
    return this;
  }

  /**
   * Get holo
   * @return holo
   */
  @javax.annotation.Nullable
  public BigDecimal getHolo() {
    return holo;
  }

  public void setHolo(BigDecimal holo) {
    this.holo = holo;
  }


  public SetCardCount normal(BigDecimal normal) {
    this.normal = normal;
    return this;
  }

  /**
   * Get normal
   * @return normal
   */
  @javax.annotation.Nullable
  public BigDecimal getNormal() {
    return normal;
  }

  public void setNormal(BigDecimal normal) {
    this.normal = normal;
  }


  public SetCardCount official(BigDecimal official) {
    this.official = official;
    return this;
  }

  /**
   * Get official
   * @return official
   */
  @javax.annotation.Nonnull
  public BigDecimal getOfficial() {
    return official;
  }

  public void setOfficial(BigDecimal official) {
    this.official = official;
  }


  public SetCardCount reverse(BigDecimal reverse) {
    this.reverse = reverse;
    return this;
  }

  /**
   * Get reverse
   * @return reverse
   */
  @javax.annotation.Nullable
  public BigDecimal getReverse() {
    return reverse;
  }

  public void setReverse(BigDecimal reverse) {
    this.reverse = reverse;
  }


  public SetCardCount total(BigDecimal total) {
    this.total = total;
    return this;
  }

  /**
   * Get total
   * @return total
   */
  @javax.annotation.Nonnull
  public BigDecimal getTotal() {
    return total;
  }

  public void setTotal(BigDecimal total) {
    this.total = total;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    SetCardCount setCardCount = (SetCardCount) o;
    return Objects.equals(this.firstEd, setCardCount.firstEd) &&
        Objects.equals(this.holo, setCardCount.holo) &&
        Objects.equals(this.normal, setCardCount.normal) &&
        Objects.equals(this.official, setCardCount.official) &&
        Objects.equals(this.reverse, setCardCount.reverse) &&
        Objects.equals(this.total, setCardCount.total);
  }

  @Override
  public int hashCode() {
    return Objects.hash(firstEd, holo, normal, official, reverse, total);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class SetCardCount {\n");
    sb.append("    firstEd: ").append(toIndentedString(firstEd)).append("\n");
    sb.append("    holo: ").append(toIndentedString(holo)).append("\n");
    sb.append("    normal: ").append(toIndentedString(normal)).append("\n");
    sb.append("    official: ").append(toIndentedString(official)).append("\n");
    sb.append("    reverse: ").append(toIndentedString(reverse)).append("\n");
    sb.append("    total: ").append(toIndentedString(total)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("firstEd");
    openapiFields.add("holo");
    openapiFields.add("normal");
    openapiFields.add("official");
    openapiFields.add("reverse");
    openapiFields.add("total");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("official");
    openapiRequiredFields.add("total");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to SetCardCount
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!SetCardCount.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in SetCardCount is not found in the empty JSON string", SetCardCount.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!SetCardCount.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `SetCardCount` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : SetCardCount.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!SetCardCount.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'SetCardCount' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<SetCardCount> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(SetCardCount.class));

       return (TypeAdapter<T>) new TypeAdapter<SetCardCount>() {
           @Override
           public void write(JsonWriter out, SetCardCount value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public SetCardCount read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of SetCardCount given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of SetCardCount
   * @throws IOException if the JSON string is invalid with respect to SetCardCount
   */
  public static SetCardCount fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, SetCardCount.class);
  }

  /**
   * Convert an instance of SetCardCount to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

