/*
 * TCGdex API
 * A Multilanguage Pok√©mon TCG Database with Cards Pictures and most of the informations contained on the cards. You can find out more about TCGdex at [https://www.tcgdex.net](https://www.tcgdex.net) or on [Discord](https://discord.gg/NehYTAhsZE).
 *
 * The version of the OpenAPI document: 2.0.0
 * Contact: contact@tcgdex.net
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * CardVariants
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T10:06:35.609810-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class CardVariants {
  public static final String SERIALIZED_NAME_FIRST_EDITION = "firstEdition";
  @SerializedName(SERIALIZED_NAME_FIRST_EDITION)
  private Boolean firstEdition;

  public static final String SERIALIZED_NAME_HOLO = "holo";
  @SerializedName(SERIALIZED_NAME_HOLO)
  private Boolean holo;

  public static final String SERIALIZED_NAME_NORMAL = "normal";
  @SerializedName(SERIALIZED_NAME_NORMAL)
  private Boolean normal;

  public static final String SERIALIZED_NAME_REVERSE = "reverse";
  @SerializedName(SERIALIZED_NAME_REVERSE)
  private Boolean reverse;

  public static final String SERIALIZED_NAME_W_PROMO = "wPromo";
  @SerializedName(SERIALIZED_NAME_W_PROMO)
  private Boolean wPromo;

  public CardVariants() {
  }

  public CardVariants firstEdition(Boolean firstEdition) {
    this.firstEdition = firstEdition;
    return this;
  }

  /**
   * Get firstEdition
   * @return firstEdition
   */
  @javax.annotation.Nonnull
  public Boolean getFirstEdition() {
    return firstEdition;
  }

  public void setFirstEdition(Boolean firstEdition) {
    this.firstEdition = firstEdition;
  }


  public CardVariants holo(Boolean holo) {
    this.holo = holo;
    return this;
  }

  /**
   * Get holo
   * @return holo
   */
  @javax.annotation.Nonnull
  public Boolean getHolo() {
    return holo;
  }

  public void setHolo(Boolean holo) {
    this.holo = holo;
  }


  public CardVariants normal(Boolean normal) {
    this.normal = normal;
    return this;
  }

  /**
   * Get normal
   * @return normal
   */
  @javax.annotation.Nonnull
  public Boolean getNormal() {
    return normal;
  }

  public void setNormal(Boolean normal) {
    this.normal = normal;
  }


  public CardVariants reverse(Boolean reverse) {
    this.reverse = reverse;
    return this;
  }

  /**
   * Get reverse
   * @return reverse
   */
  @javax.annotation.Nonnull
  public Boolean getReverse() {
    return reverse;
  }

  public void setReverse(Boolean reverse) {
    this.reverse = reverse;
  }


  public CardVariants wPromo(Boolean wPromo) {
    this.wPromo = wPromo;
    return this;
  }

  /**
   * Get wPromo
   * @return wPromo
   */
  @javax.annotation.Nonnull
  public Boolean getwPromo() {
    return wPromo;
  }

  public void setwPromo(Boolean wPromo) {
    this.wPromo = wPromo;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    CardVariants cardVariants = (CardVariants) o;
    return Objects.equals(this.firstEdition, cardVariants.firstEdition) &&
        Objects.equals(this.holo, cardVariants.holo) &&
        Objects.equals(this.normal, cardVariants.normal) &&
        Objects.equals(this.reverse, cardVariants.reverse) &&
        Objects.equals(this.wPromo, cardVariants.wPromo);
  }

  @Override
  public int hashCode() {
    return Objects.hash(firstEdition, holo, normal, reverse, wPromo);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class CardVariants {\n");
    sb.append("    firstEdition: ").append(toIndentedString(firstEdition)).append("\n");
    sb.append("    holo: ").append(toIndentedString(holo)).append("\n");
    sb.append("    normal: ").append(toIndentedString(normal)).append("\n");
    sb.append("    reverse: ").append(toIndentedString(reverse)).append("\n");
    sb.append("    wPromo: ").append(toIndentedString(wPromo)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("firstEdition");
    openapiFields.add("holo");
    openapiFields.add("normal");
    openapiFields.add("reverse");
    openapiFields.add("wPromo");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("firstEdition");
    openapiRequiredFields.add("holo");
    openapiRequiredFields.add("normal");
    openapiRequiredFields.add("reverse");
    openapiRequiredFields.add("wPromo");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to CardVariants
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!CardVariants.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in CardVariants is not found in the empty JSON string", CardVariants.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!CardVariants.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `CardVariants` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : CardVariants.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!CardVariants.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'CardVariants' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<CardVariants> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(CardVariants.class));

       return (TypeAdapter<T>) new TypeAdapter<CardVariants>() {
           @Override
           public void write(JsonWriter out, CardVariants value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public CardVariants read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of CardVariants given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of CardVariants
   * @throws IOException if the JSON string is invalid with respect to CardVariants
   */
  public static CardVariants fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, CardVariants.class);
  }

  /**
   * Convert an instance of CardVariants to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

