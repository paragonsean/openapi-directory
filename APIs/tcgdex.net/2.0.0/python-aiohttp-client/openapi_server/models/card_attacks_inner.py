# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class CardAttacksInner(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, cost: List[str]=None, damage: float=None, effect: str=None, name: str=None):
        """CardAttacksInner - a model defined in OpenAPI

        :param cost: The cost of this CardAttacksInner.
        :param damage: The damage of this CardAttacksInner.
        :param effect: The effect of this CardAttacksInner.
        :param name: The name of this CardAttacksInner.
        """
        self.openapi_types = {
            'cost': List[str],
            'damage': float,
            'effect': str,
            'name': str
        }

        self.attribute_map = {
            'cost': 'cost',
            'damage': 'damage',
            'effect': 'effect',
            'name': 'name'
        }

        self._cost = cost
        self._damage = damage
        self._effect = effect
        self._name = name

    @classmethod
    def from_dict(cls, dikt: dict) -> 'CardAttacksInner':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Card_attacks_inner of this CardAttacksInner.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def cost(self):
        """Gets the cost of this CardAttacksInner.


        :return: The cost of this CardAttacksInner.
        :rtype: List[str]
        """
        return self._cost

    @cost.setter
    def cost(self, cost):
        """Sets the cost of this CardAttacksInner.


        :param cost: The cost of this CardAttacksInner.
        :type cost: List[str]
        """

        self._cost = cost

    @property
    def damage(self):
        """Gets the damage of this CardAttacksInner.


        :return: The damage of this CardAttacksInner.
        :rtype: float
        """
        return self._damage

    @damage.setter
    def damage(self, damage):
        """Sets the damage of this CardAttacksInner.


        :param damage: The damage of this CardAttacksInner.
        :type damage: float
        """

        self._damage = damage

    @property
    def effect(self):
        """Gets the effect of this CardAttacksInner.


        :return: The effect of this CardAttacksInner.
        :rtype: str
        """
        return self._effect

    @effect.setter
    def effect(self, effect):
        """Sets the effect of this CardAttacksInner.


        :param effect: The effect of this CardAttacksInner.
        :type effect: str
        """

        self._effect = effect

    @property
    def name(self):
        """Gets the name of this CardAttacksInner.


        :return: The name of this CardAttacksInner.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this CardAttacksInner.


        :param name: The name of this CardAttacksInner.
        :type name: str
        """
        if name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")

        self._name = name
