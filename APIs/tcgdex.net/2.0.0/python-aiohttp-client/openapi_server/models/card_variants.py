# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class CardVariants(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, first_edition: bool=None, holo: bool=None, normal: bool=None, reverse: bool=None, w_promo: bool=None):
        """CardVariants - a model defined in OpenAPI

        :param first_edition: The first_edition of this CardVariants.
        :param holo: The holo of this CardVariants.
        :param normal: The normal of this CardVariants.
        :param reverse: The reverse of this CardVariants.
        :param w_promo: The w_promo of this CardVariants.
        """
        self.openapi_types = {
            'first_edition': bool,
            'holo': bool,
            'normal': bool,
            'reverse': bool,
            'w_promo': bool
        }

        self.attribute_map = {
            'first_edition': 'firstEdition',
            'holo': 'holo',
            'normal': 'normal',
            'reverse': 'reverse',
            'w_promo': 'wPromo'
        }

        self._first_edition = first_edition
        self._holo = holo
        self._normal = normal
        self._reverse = reverse
        self._w_promo = w_promo

    @classmethod
    def from_dict(cls, dikt: dict) -> 'CardVariants':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Card_variants of this CardVariants.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def first_edition(self):
        """Gets the first_edition of this CardVariants.


        :return: The first_edition of this CardVariants.
        :rtype: bool
        """
        return self._first_edition

    @first_edition.setter
    def first_edition(self, first_edition):
        """Sets the first_edition of this CardVariants.


        :param first_edition: The first_edition of this CardVariants.
        :type first_edition: bool
        """
        if first_edition is None:
            raise ValueError("Invalid value for `first_edition`, must not be `None`")

        self._first_edition = first_edition

    @property
    def holo(self):
        """Gets the holo of this CardVariants.


        :return: The holo of this CardVariants.
        :rtype: bool
        """
        return self._holo

    @holo.setter
    def holo(self, holo):
        """Sets the holo of this CardVariants.


        :param holo: The holo of this CardVariants.
        :type holo: bool
        """
        if holo is None:
            raise ValueError("Invalid value for `holo`, must not be `None`")

        self._holo = holo

    @property
    def normal(self):
        """Gets the normal of this CardVariants.


        :return: The normal of this CardVariants.
        :rtype: bool
        """
        return self._normal

    @normal.setter
    def normal(self, normal):
        """Sets the normal of this CardVariants.


        :param normal: The normal of this CardVariants.
        :type normal: bool
        """
        if normal is None:
            raise ValueError("Invalid value for `normal`, must not be `None`")

        self._normal = normal

    @property
    def reverse(self):
        """Gets the reverse of this CardVariants.


        :return: The reverse of this CardVariants.
        :rtype: bool
        """
        return self._reverse

    @reverse.setter
    def reverse(self, reverse):
        """Sets the reverse of this CardVariants.


        :param reverse: The reverse of this CardVariants.
        :type reverse: bool
        """
        if reverse is None:
            raise ValueError("Invalid value for `reverse`, must not be `None`")

        self._reverse = reverse

    @property
    def w_promo(self):
        """Gets the w_promo of this CardVariants.


        :return: The w_promo of this CardVariants.
        :rtype: bool
        """
        return self._w_promo

    @w_promo.setter
    def w_promo(self, w_promo):
        """Sets the w_promo of this CardVariants.


        :param w_promo: The w_promo of this CardVariants.
        :type w_promo: bool
        """
        if w_promo is None:
            raise ValueError("Invalid value for `w_promo`, must not be `None`")

        self._w_promo = w_promo
