# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.card_resume import CardResume
from openapi_server.models.set_card_count import SetCardCount
from openapi_server import util


class Set(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, card_count: SetCardCount=None, cards: List[CardResume]=None, id: str=None, logo: str=None, name: str=None, symbol: str=None):
        """Set - a model defined in OpenAPI

        :param card_count: The card_count of this Set.
        :param cards: The cards of this Set.
        :param id: The id of this Set.
        :param logo: The logo of this Set.
        :param name: The name of this Set.
        :param symbol: The symbol of this Set.
        """
        self.openapi_types = {
            'card_count': SetCardCount,
            'cards': List[CardResume],
            'id': str,
            'logo': str,
            'name': str,
            'symbol': str
        }

        self.attribute_map = {
            'card_count': 'cardCount',
            'cards': 'cards',
            'id': 'id',
            'logo': 'logo',
            'name': 'name',
            'symbol': 'symbol'
        }

        self._card_count = card_count
        self._cards = cards
        self._id = id
        self._logo = logo
        self._name = name
        self._symbol = symbol

    @classmethod
    def from_dict(cls, dikt: dict) -> 'Set':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Set of this Set.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def card_count(self):
        """Gets the card_count of this Set.


        :return: The card_count of this Set.
        :rtype: SetCardCount
        """
        return self._card_count

    @card_count.setter
    def card_count(self, card_count):
        """Sets the card_count of this Set.


        :param card_count: The card_count of this Set.
        :type card_count: SetCardCount
        """
        if card_count is None:
            raise ValueError("Invalid value for `card_count`, must not be `None`")

        self._card_count = card_count

    @property
    def cards(self):
        """Gets the cards of this Set.


        :return: The cards of this Set.
        :rtype: List[CardResume]
        """
        return self._cards

    @cards.setter
    def cards(self, cards):
        """Sets the cards of this Set.


        :param cards: The cards of this Set.
        :type cards: List[CardResume]
        """
        if cards is None:
            raise ValueError("Invalid value for `cards`, must not be `None`")

        self._cards = cards

    @property
    def id(self):
        """Gets the id of this Set.


        :return: The id of this Set.
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this Set.


        :param id: The id of this Set.
        :type id: str
        """
        if id is None:
            raise ValueError("Invalid value for `id`, must not be `None`")

        self._id = id

    @property
    def logo(self):
        """Gets the logo of this Set.


        :return: The logo of this Set.
        :rtype: str
        """
        return self._logo

    @logo.setter
    def logo(self, logo):
        """Sets the logo of this Set.


        :param logo: The logo of this Set.
        :type logo: str
        """

        self._logo = logo

    @property
    def name(self):
        """Gets the name of this Set.


        :return: The name of this Set.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this Set.


        :param name: The name of this Set.
        :type name: str
        """
        if name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")

        self._name = name

    @property
    def symbol(self):
        """Gets the symbol of this Set.


        :return: The symbol of this Set.
        :rtype: str
        """
        return self._symbol

    @symbol.setter
    def symbol(self, symbol):
        """Sets the symbol of this Set.


        :param symbol: The symbol of this Set.
        :type symbol: str
        """

        self._symbol = symbol
