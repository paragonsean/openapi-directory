# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class SetCardCount(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, first_ed: float=None, holo: float=None, normal: float=None, official: float=None, reverse: float=None, total: float=None):
        """SetCardCount - a model defined in OpenAPI

        :param first_ed: The first_ed of this SetCardCount.
        :param holo: The holo of this SetCardCount.
        :param normal: The normal of this SetCardCount.
        :param official: The official of this SetCardCount.
        :param reverse: The reverse of this SetCardCount.
        :param total: The total of this SetCardCount.
        """
        self.openapi_types = {
            'first_ed': float,
            'holo': float,
            'normal': float,
            'official': float,
            'reverse': float,
            'total': float
        }

        self.attribute_map = {
            'first_ed': 'firstEd',
            'holo': 'holo',
            'normal': 'normal',
            'official': 'official',
            'reverse': 'reverse',
            'total': 'total'
        }

        self._first_ed = first_ed
        self._holo = holo
        self._normal = normal
        self._official = official
        self._reverse = reverse
        self._total = total

    @classmethod
    def from_dict(cls, dikt: dict) -> 'SetCardCount':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Set_cardCount of this SetCardCount.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def first_ed(self):
        """Gets the first_ed of this SetCardCount.


        :return: The first_ed of this SetCardCount.
        :rtype: float
        """
        return self._first_ed

    @first_ed.setter
    def first_ed(self, first_ed):
        """Sets the first_ed of this SetCardCount.


        :param first_ed: The first_ed of this SetCardCount.
        :type first_ed: float
        """

        self._first_ed = first_ed

    @property
    def holo(self):
        """Gets the holo of this SetCardCount.


        :return: The holo of this SetCardCount.
        :rtype: float
        """
        return self._holo

    @holo.setter
    def holo(self, holo):
        """Sets the holo of this SetCardCount.


        :param holo: The holo of this SetCardCount.
        :type holo: float
        """

        self._holo = holo

    @property
    def normal(self):
        """Gets the normal of this SetCardCount.


        :return: The normal of this SetCardCount.
        :rtype: float
        """
        return self._normal

    @normal.setter
    def normal(self, normal):
        """Sets the normal of this SetCardCount.


        :param normal: The normal of this SetCardCount.
        :type normal: float
        """

        self._normal = normal

    @property
    def official(self):
        """Gets the official of this SetCardCount.


        :return: The official of this SetCardCount.
        :rtype: float
        """
        return self._official

    @official.setter
    def official(self, official):
        """Sets the official of this SetCardCount.


        :param official: The official of this SetCardCount.
        :type official: float
        """
        if official is None:
            raise ValueError("Invalid value for `official`, must not be `None`")

        self._official = official

    @property
    def reverse(self):
        """Gets the reverse of this SetCardCount.


        :return: The reverse of this SetCardCount.
        :rtype: float
        """
        return self._reverse

    @reverse.setter
    def reverse(self, reverse):
        """Sets the reverse of this SetCardCount.


        :param reverse: The reverse of this SetCardCount.
        :type reverse: float
        """

        self._reverse = reverse

    @property
    def total(self):
        """Gets the total of this SetCardCount.


        :return: The total of this SetCardCount.
        :rtype: float
        """
        return self._total

    @total.setter
    def total(self, total):
        """Sets the total of this SetCardCount.


        :param total: The total of this SetCardCount.
        :type total: float
        """
        if total is None:
            raise ValueError("Invalid value for `total`, must not be `None`")

        self._total = total
