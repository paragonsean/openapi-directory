# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class SetResumeCardCount(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, official: float=None, total: float=None):
        """SetResumeCardCount - a model defined in OpenAPI

        :param official: The official of this SetResumeCardCount.
        :param total: The total of this SetResumeCardCount.
        """
        self.openapi_types = {
            'official': float,
            'total': float
        }

        self.attribute_map = {
            'official': 'official',
            'total': 'total'
        }

        self._official = official
        self._total = total

    @classmethod
    def from_dict(cls, dikt: dict) -> 'SetResumeCardCount':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The SetResume_cardCount of this SetResumeCardCount.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def official(self):
        """Gets the official of this SetResumeCardCount.


        :return: The official of this SetResumeCardCount.
        :rtype: float
        """
        return self._official

    @official.setter
    def official(self, official):
        """Sets the official of this SetResumeCardCount.


        :param official: The official of this SetResumeCardCount.
        :type official: float
        """
        if official is None:
            raise ValueError("Invalid value for `official`, must not be `None`")

        self._official = official

    @property
    def total(self):
        """Gets the total of this SetResumeCardCount.


        :return: The total of this SetResumeCardCount.
        :rtype: float
        """
        return self._total

    @total.setter
    def total(self, total):
        """Sets the total of this SetResumeCardCount.


        :param total: The total of this SetResumeCardCount.
        :type total: float
        """
        if total is None:
            raise ValueError("Invalid value for `total`, must not be `None`")

        self._total = total
