# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.card_abilities_inner import CardAbilitiesInner
from openapi_server.models.card_attacks_inner import CardAttacksInner
from openapi_server.models.card_item import CardItem
from openapi_server.models.card_legal import CardLegal
from openapi_server.models.card_variants import CardVariants
from openapi_server.models.set_resume import SetResume
from openapi_server.models.weak_res_inner import WeakResInner
from openapi_server import util


class Card(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, abilities: List[CardAbilitiesInner]=None, attacks: List[CardAttacksInner]=None, category: str=None, description: str=None, dex_id: List[float]=None, energy_type: str=None, evolve_from: str=None, hp: float=None, id: str=None, illustrator: str=None, image: str=None, item: CardItem=None, legal: CardLegal=None, level: float=None, local_id: str=None, name: str=None, rarity: str=None, regulation_mark: str=None, resistances: List[List[WeakResInner]]=None, retreat: float=None, set: SetResume=None, stage: str=None, suffix: str=None, trainer_type: str=None, types: List[str]=None, variants: CardVariants=None, weaknesses: List[List[WeakResInner]]=None):
        """Card - a model defined in OpenAPI

        :param abilities: The abilities of this Card.
        :param attacks: The attacks of this Card.
        :param category: The category of this Card.
        :param description: The description of this Card.
        :param dex_id: The dex_id of this Card.
        :param energy_type: The energy_type of this Card.
        :param evolve_from: The evolve_from of this Card.
        :param hp: The hp of this Card.
        :param id: The id of this Card.
        :param illustrator: The illustrator of this Card.
        :param image: The image of this Card.
        :param item: The item of this Card.
        :param legal: The legal of this Card.
        :param level: The level of this Card.
        :param local_id: The local_id of this Card.
        :param name: The name of this Card.
        :param rarity: The rarity of this Card.
        :param regulation_mark: The regulation_mark of this Card.
        :param resistances: The resistances of this Card.
        :param retreat: The retreat of this Card.
        :param set: The set of this Card.
        :param stage: The stage of this Card.
        :param suffix: The suffix of this Card.
        :param trainer_type: The trainer_type of this Card.
        :param types: The types of this Card.
        :param variants: The variants of this Card.
        :param weaknesses: The weaknesses of this Card.
        """
        self.openapi_types = {
            'abilities': List[CardAbilitiesInner],
            'attacks': List[CardAttacksInner],
            'category': str,
            'description': str,
            'dex_id': List[float],
            'energy_type': str,
            'evolve_from': str,
            'hp': float,
            'id': str,
            'illustrator': str,
            'image': str,
            'item': CardItem,
            'legal': CardLegal,
            'level': float,
            'local_id': str,
            'name': str,
            'rarity': str,
            'regulation_mark': str,
            'resistances': List[List[WeakResInner]],
            'retreat': float,
            'set': SetResume,
            'stage': str,
            'suffix': str,
            'trainer_type': str,
            'types': List[str],
            'variants': CardVariants,
            'weaknesses': List[List[WeakResInner]]
        }

        self.attribute_map = {
            'abilities': 'abilities',
            'attacks': 'attacks',
            'category': 'category',
            'description': 'description',
            'dex_id': 'dexId',
            'energy_type': 'energyType',
            'evolve_from': 'evolveFrom',
            'hp': 'hp',
            'id': 'id',
            'illustrator': 'illustrator',
            'image': 'image',
            'item': 'item',
            'legal': 'legal',
            'level': 'level',
            'local_id': 'localId',
            'name': 'name',
            'rarity': 'rarity',
            'regulation_mark': 'regulationMark',
            'resistances': 'resistances',
            'retreat': 'retreat',
            'set': 'set',
            'stage': 'stage',
            'suffix': 'suffix',
            'trainer_type': 'trainerType',
            'types': 'types',
            'variants': 'variants',
            'weaknesses': 'weaknesses'
        }

        self._abilities = abilities
        self._attacks = attacks
        self._category = category
        self._description = description
        self._dex_id = dex_id
        self._energy_type = energy_type
        self._evolve_from = evolve_from
        self._hp = hp
        self._id = id
        self._illustrator = illustrator
        self._image = image
        self._item = item
        self._legal = legal
        self._level = level
        self._local_id = local_id
        self._name = name
        self._rarity = rarity
        self._regulation_mark = regulation_mark
        self._resistances = resistances
        self._retreat = retreat
        self._set = set
        self._stage = stage
        self._suffix = suffix
        self._trainer_type = trainer_type
        self._types = types
        self._variants = variants
        self._weaknesses = weaknesses

    @classmethod
    def from_dict(cls, dikt: dict) -> 'Card':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Card of this Card.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def abilities(self):
        """Gets the abilities of this Card.


        :return: The abilities of this Card.
        :rtype: List[CardAbilitiesInner]
        """
        return self._abilities

    @abilities.setter
    def abilities(self, abilities):
        """Sets the abilities of this Card.


        :param abilities: The abilities of this Card.
        :type abilities: List[CardAbilitiesInner]
        """

        self._abilities = abilities

    @property
    def attacks(self):
        """Gets the attacks of this Card.


        :return: The attacks of this Card.
        :rtype: List[CardAttacksInner]
        """
        return self._attacks

    @attacks.setter
    def attacks(self, attacks):
        """Sets the attacks of this Card.


        :param attacks: The attacks of this Card.
        :type attacks: List[CardAttacksInner]
        """

        self._attacks = attacks

    @property
    def category(self):
        """Gets the category of this Card.


        :return: The category of this Card.
        :rtype: str
        """
        return self._category

    @category.setter
    def category(self, category):
        """Sets the category of this Card.


        :param category: The category of this Card.
        :type category: str
        """
        if category is None:
            raise ValueError("Invalid value for `category`, must not be `None`")

        self._category = category

    @property
    def description(self):
        """Gets the description of this Card.


        :return: The description of this Card.
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this Card.


        :param description: The description of this Card.
        :type description: str
        """

        self._description = description

    @property
    def dex_id(self):
        """Gets the dex_id of this Card.


        :return: The dex_id of this Card.
        :rtype: List[float]
        """
        return self._dex_id

    @dex_id.setter
    def dex_id(self, dex_id):
        """Sets the dex_id of this Card.


        :param dex_id: The dex_id of this Card.
        :type dex_id: List[float]
        """

        self._dex_id = dex_id

    @property
    def energy_type(self):
        """Gets the energy_type of this Card.


        :return: The energy_type of this Card.
        :rtype: str
        """
        return self._energy_type

    @energy_type.setter
    def energy_type(self, energy_type):
        """Sets the energy_type of this Card.


        :param energy_type: The energy_type of this Card.
        :type energy_type: str
        """

        self._energy_type = energy_type

    @property
    def evolve_from(self):
        """Gets the evolve_from of this Card.


        :return: The evolve_from of this Card.
        :rtype: str
        """
        return self._evolve_from

    @evolve_from.setter
    def evolve_from(self, evolve_from):
        """Sets the evolve_from of this Card.


        :param evolve_from: The evolve_from of this Card.
        :type evolve_from: str
        """

        self._evolve_from = evolve_from

    @property
    def hp(self):
        """Gets the hp of this Card.


        :return: The hp of this Card.
        :rtype: float
        """
        return self._hp

    @hp.setter
    def hp(self, hp):
        """Sets the hp of this Card.


        :param hp: The hp of this Card.
        :type hp: float
        """

        self._hp = hp

    @property
    def id(self):
        """Gets the id of this Card.


        :return: The id of this Card.
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this Card.


        :param id: The id of this Card.
        :type id: str
        """
        if id is None:
            raise ValueError("Invalid value for `id`, must not be `None`")

        self._id = id

    @property
    def illustrator(self):
        """Gets the illustrator of this Card.


        :return: The illustrator of this Card.
        :rtype: str
        """
        return self._illustrator

    @illustrator.setter
    def illustrator(self, illustrator):
        """Sets the illustrator of this Card.


        :param illustrator: The illustrator of this Card.
        :type illustrator: str
        """

        self._illustrator = illustrator

    @property
    def image(self):
        """Gets the image of this Card.


        :return: The image of this Card.
        :rtype: str
        """
        return self._image

    @image.setter
    def image(self, image):
        """Sets the image of this Card.


        :param image: The image of this Card.
        :type image: str
        """

        self._image = image

    @property
    def item(self):
        """Gets the item of this Card.


        :return: The item of this Card.
        :rtype: CardItem
        """
        return self._item

    @item.setter
    def item(self, item):
        """Sets the item of this Card.


        :param item: The item of this Card.
        :type item: CardItem
        """

        self._item = item

    @property
    def legal(self):
        """Gets the legal of this Card.


        :return: The legal of this Card.
        :rtype: CardLegal
        """
        return self._legal

    @legal.setter
    def legal(self, legal):
        """Sets the legal of this Card.


        :param legal: The legal of this Card.
        :type legal: CardLegal
        """
        if legal is None:
            raise ValueError("Invalid value for `legal`, must not be `None`")

        self._legal = legal

    @property
    def level(self):
        """Gets the level of this Card.


        :return: The level of this Card.
        :rtype: float
        """
        return self._level

    @level.setter
    def level(self, level):
        """Sets the level of this Card.


        :param level: The level of this Card.
        :type level: float
        """

        self._level = level

    @property
    def local_id(self):
        """Gets the local_id of this Card.


        :return: The local_id of this Card.
        :rtype: str
        """
        return self._local_id

    @local_id.setter
    def local_id(self, local_id):
        """Sets the local_id of this Card.


        :param local_id: The local_id of this Card.
        :type local_id: str
        """
        if local_id is None:
            raise ValueError("Invalid value for `local_id`, must not be `None`")

        self._local_id = local_id

    @property
    def name(self):
        """Gets the name of this Card.


        :return: The name of this Card.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this Card.


        :param name: The name of this Card.
        :type name: str
        """
        if name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")

        self._name = name

    @property
    def rarity(self):
        """Gets the rarity of this Card.


        :return: The rarity of this Card.
        :rtype: str
        """
        return self._rarity

    @rarity.setter
    def rarity(self, rarity):
        """Sets the rarity of this Card.


        :param rarity: The rarity of this Card.
        :type rarity: str
        """
        if rarity is None:
            raise ValueError("Invalid value for `rarity`, must not be `None`")

        self._rarity = rarity

    @property
    def regulation_mark(self):
        """Gets the regulation_mark of this Card.


        :return: The regulation_mark of this Card.
        :rtype: str
        """
        return self._regulation_mark

    @regulation_mark.setter
    def regulation_mark(self, regulation_mark):
        """Sets the regulation_mark of this Card.


        :param regulation_mark: The regulation_mark of this Card.
        :type regulation_mark: str
        """

        self._regulation_mark = regulation_mark

    @property
    def resistances(self):
        """Gets the resistances of this Card.


        :return: The resistances of this Card.
        :rtype: List[List[WeakResInner]]
        """
        return self._resistances

    @resistances.setter
    def resistances(self, resistances):
        """Sets the resistances of this Card.


        :param resistances: The resistances of this Card.
        :type resistances: List[List[WeakResInner]]
        """

        self._resistances = resistances

    @property
    def retreat(self):
        """Gets the retreat of this Card.


        :return: The retreat of this Card.
        :rtype: float
        """
        return self._retreat

    @retreat.setter
    def retreat(self, retreat):
        """Sets the retreat of this Card.


        :param retreat: The retreat of this Card.
        :type retreat: float
        """

        self._retreat = retreat

    @property
    def set(self):
        """Gets the set of this Card.


        :return: The set of this Card.
        :rtype: SetResume
        """
        return self._set

    @set.setter
    def set(self, set):
        """Sets the set of this Card.


        :param set: The set of this Card.
        :type set: SetResume
        """
        if set is None:
            raise ValueError("Invalid value for `set`, must not be `None`")

        self._set = set

    @property
    def stage(self):
        """Gets the stage of this Card.


        :return: The stage of this Card.
        :rtype: str
        """
        return self._stage

    @stage.setter
    def stage(self, stage):
        """Sets the stage of this Card.


        :param stage: The stage of this Card.
        :type stage: str
        """

        self._stage = stage

    @property
    def suffix(self):
        """Gets the suffix of this Card.


        :return: The suffix of this Card.
        :rtype: str
        """
        return self._suffix

    @suffix.setter
    def suffix(self, suffix):
        """Sets the suffix of this Card.


        :param suffix: The suffix of this Card.
        :type suffix: str
        """

        self._suffix = suffix

    @property
    def trainer_type(self):
        """Gets the trainer_type of this Card.


        :return: The trainer_type of this Card.
        :rtype: str
        """
        return self._trainer_type

    @trainer_type.setter
    def trainer_type(self, trainer_type):
        """Sets the trainer_type of this Card.


        :param trainer_type: The trainer_type of this Card.
        :type trainer_type: str
        """

        self._trainer_type = trainer_type

    @property
    def types(self):
        """Gets the types of this Card.


        :return: The types of this Card.
        :rtype: List[str]
        """
        return self._types

    @types.setter
    def types(self, types):
        """Sets the types of this Card.


        :param types: The types of this Card.
        :type types: List[str]
        """

        self._types = types

    @property
    def variants(self):
        """Gets the variants of this Card.


        :return: The variants of this Card.
        :rtype: CardVariants
        """
        return self._variants

    @variants.setter
    def variants(self, variants):
        """Sets the variants of this Card.


        :param variants: The variants of this Card.
        :type variants: CardVariants
        """

        self._variants = variants

    @property
    def weaknesses(self):
        """Gets the weaknesses of this Card.


        :return: The weaknesses of this Card.
        :rtype: List[List[WeakResInner]]
        """
        return self._weaknesses

    @weaknesses.setter
    def weaknesses(self, weaknesses):
        """Sets the weaknesses of this Card.


        :param weaknesses: The weaknesses of this Card.
        :type weaknesses: List[List[WeakResInner]]
        """

        self._weaknesses = weaknesses
