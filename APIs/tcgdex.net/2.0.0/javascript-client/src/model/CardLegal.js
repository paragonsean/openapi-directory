/**
 * TCGdex API
 * A Multilanguage Pok√©mon TCG Database with Cards Pictures and most of the informations contained on the cards. You can find out more about TCGdex at [https://www.tcgdex.net](https://www.tcgdex.net) or on [Discord](https://discord.gg/NehYTAhsZE).
 *
 * The version of the OpenAPI document: 2.0.0
 * Contact: contact@tcgdex.net
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The CardLegal model module.
 * @module model/CardLegal
 * @version 2.0.0
 */
class CardLegal {
    /**
     * Constructs a new <code>CardLegal</code>.
     * @alias module:model/CardLegal
     */
    constructor() { 
        
        CardLegal.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>CardLegal</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/CardLegal} obj Optional instance to populate.
     * @return {module:model/CardLegal} The populated <code>CardLegal</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new CardLegal();

            if (data.hasOwnProperty('expanded')) {
                obj['expanded'] = ApiClient.convertToType(data['expanded'], 'Boolean');
            }
            if (data.hasOwnProperty('standard')) {
                obj['standard'] = ApiClient.convertToType(data['standard'], 'Boolean');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>CardLegal</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>CardLegal</code>.
     */
    static validateJSON(data) {

        return true;
    }


}



/**
 * @member {Boolean} expanded
 */
CardLegal.prototype['expanded'] = undefined;

/**
 * @member {Boolean} standard
 */
CardLegal.prototype['standard'] = undefined;






export default CardLegal;

