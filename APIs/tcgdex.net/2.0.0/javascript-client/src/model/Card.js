/**
 * TCGdex API
 * A Multilanguage Pok√©mon TCG Database with Cards Pictures and most of the informations contained on the cards. You can find out more about TCGdex at [https://www.tcgdex.net](https://www.tcgdex.net) or on [Discord](https://discord.gg/NehYTAhsZE).
 *
 * The version of the OpenAPI document: 2.0.0
 * Contact: contact@tcgdex.net
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import CardAbilitiesInner from './CardAbilitiesInner';
import CardAttacksInner from './CardAttacksInner';
import CardItem from './CardItem';
import CardLegal from './CardLegal';
import CardVariants from './CardVariants';
import SetResume from './SetResume';
import WeakResInner from './WeakResInner';

/**
 * The Card model module.
 * @module model/Card
 * @version 2.0.0
 */
class Card {
    /**
     * Constructs a new <code>Card</code>.
     * @alias module:model/Card
     * @param category {String} 
     * @param id {String} 
     * @param legal {module:model/CardLegal} 
     * @param localId {String} 
     * @param name {String} 
     * @param rarity {String} 
     * @param set {module:model/SetResume} 
     */
    constructor(category, id, legal, localId, name, rarity, set) { 
        
        Card.initialize(this, category, id, legal, localId, name, rarity, set);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, category, id, legal, localId, name, rarity, set) { 
        obj['category'] = category;
        obj['id'] = id;
        obj['legal'] = legal;
        obj['localId'] = localId;
        obj['name'] = name;
        obj['rarity'] = rarity;
        obj['set'] = set;
    }

    /**
     * Constructs a <code>Card</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/Card} obj Optional instance to populate.
     * @return {module:model/Card} The populated <code>Card</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new Card();

            if (data.hasOwnProperty('abilities')) {
                obj['abilities'] = ApiClient.convertToType(data['abilities'], [CardAbilitiesInner]);
            }
            if (data.hasOwnProperty('attacks')) {
                obj['attacks'] = ApiClient.convertToType(data['attacks'], [CardAttacksInner]);
            }
            if (data.hasOwnProperty('category')) {
                obj['category'] = ApiClient.convertToType(data['category'], 'String');
            }
            if (data.hasOwnProperty('description')) {
                obj['description'] = ApiClient.convertToType(data['description'], 'String');
            }
            if (data.hasOwnProperty('dexId')) {
                obj['dexId'] = ApiClient.convertToType(data['dexId'], ['Number']);
            }
            if (data.hasOwnProperty('energyType')) {
                obj['energyType'] = ApiClient.convertToType(data['energyType'], 'String');
            }
            if (data.hasOwnProperty('evolveFrom')) {
                obj['evolveFrom'] = ApiClient.convertToType(data['evolveFrom'], 'String');
            }
            if (data.hasOwnProperty('hp')) {
                obj['hp'] = ApiClient.convertToType(data['hp'], 'Number');
            }
            if (data.hasOwnProperty('id')) {
                obj['id'] = ApiClient.convertToType(data['id'], 'String');
            }
            if (data.hasOwnProperty('illustrator')) {
                obj['illustrator'] = ApiClient.convertToType(data['illustrator'], 'String');
            }
            if (data.hasOwnProperty('image')) {
                obj['image'] = ApiClient.convertToType(data['image'], 'String');
            }
            if (data.hasOwnProperty('item')) {
                obj['item'] = CardItem.constructFromObject(data['item']);
            }
            if (data.hasOwnProperty('legal')) {
                obj['legal'] = CardLegal.constructFromObject(data['legal']);
            }
            if (data.hasOwnProperty('level')) {
                obj['level'] = ApiClient.convertToType(data['level'], 'Number');
            }
            if (data.hasOwnProperty('localId')) {
                obj['localId'] = ApiClient.convertToType(data['localId'], 'String');
            }
            if (data.hasOwnProperty('name')) {
                obj['name'] = ApiClient.convertToType(data['name'], 'String');
            }
            if (data.hasOwnProperty('rarity')) {
                obj['rarity'] = ApiClient.convertToType(data['rarity'], 'String');
            }
            if (data.hasOwnProperty('regulationMark')) {
                obj['regulationMark'] = ApiClient.convertToType(data['regulationMark'], 'String');
            }
            if (data.hasOwnProperty('resistances')) {
                obj['resistances'] = ApiClient.convertToType(data['resistances'], [Array]);
            }
            if (data.hasOwnProperty('retreat')) {
                obj['retreat'] = ApiClient.convertToType(data['retreat'], 'Number');
            }
            if (data.hasOwnProperty('set')) {
                obj['set'] = SetResume.constructFromObject(data['set']);
            }
            if (data.hasOwnProperty('stage')) {
                obj['stage'] = ApiClient.convertToType(data['stage'], 'String');
            }
            if (data.hasOwnProperty('suffix')) {
                obj['suffix'] = ApiClient.convertToType(data['suffix'], 'String');
            }
            if (data.hasOwnProperty('trainerType')) {
                obj['trainerType'] = ApiClient.convertToType(data['trainerType'], 'String');
            }
            if (data.hasOwnProperty('types')) {
                obj['types'] = ApiClient.convertToType(data['types'], ['String']);
            }
            if (data.hasOwnProperty('variants')) {
                obj['variants'] = CardVariants.constructFromObject(data['variants']);
            }
            if (data.hasOwnProperty('weaknesses')) {
                obj['weaknesses'] = ApiClient.convertToType(data['weaknesses'], [Array]);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>Card</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>Card</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of Card.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        if (data['abilities']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['abilities'])) {
                throw new Error("Expected the field `abilities` to be an array in the JSON data but got " + data['abilities']);
            }
            // validate the optional field `abilities` (array)
            for (const item of data['abilities']) {
                CardAbilitiesInner.validateJSON(item);
            };
        }
        if (data['attacks']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['attacks'])) {
                throw new Error("Expected the field `attacks` to be an array in the JSON data but got " + data['attacks']);
            }
            // validate the optional field `attacks` (array)
            for (const item of data['attacks']) {
                CardAttacksInner.validateJSON(item);
            };
        }
        // ensure the json data is a string
        if (data['category'] && !(typeof data['category'] === 'string' || data['category'] instanceof String)) {
            throw new Error("Expected the field `category` to be a primitive type in the JSON string but got " + data['category']);
        }
        // ensure the json data is a string
        if (data['description'] && !(typeof data['description'] === 'string' || data['description'] instanceof String)) {
            throw new Error("Expected the field `description` to be a primitive type in the JSON string but got " + data['description']);
        }
        // ensure the json data is an array
        if (!Array.isArray(data['dexId'])) {
            throw new Error("Expected the field `dexId` to be an array in the JSON data but got " + data['dexId']);
        }
        // ensure the json data is a string
        if (data['energyType'] && !(typeof data['energyType'] === 'string' || data['energyType'] instanceof String)) {
            throw new Error("Expected the field `energyType` to be a primitive type in the JSON string but got " + data['energyType']);
        }
        // ensure the json data is a string
        if (data['evolveFrom'] && !(typeof data['evolveFrom'] === 'string' || data['evolveFrom'] instanceof String)) {
            throw new Error("Expected the field `evolveFrom` to be a primitive type in the JSON string but got " + data['evolveFrom']);
        }
        // ensure the json data is a string
        if (data['id'] && !(typeof data['id'] === 'string' || data['id'] instanceof String)) {
            throw new Error("Expected the field `id` to be a primitive type in the JSON string but got " + data['id']);
        }
        // ensure the json data is a string
        if (data['illustrator'] && !(typeof data['illustrator'] === 'string' || data['illustrator'] instanceof String)) {
            throw new Error("Expected the field `illustrator` to be a primitive type in the JSON string but got " + data['illustrator']);
        }
        // ensure the json data is a string
        if (data['image'] && !(typeof data['image'] === 'string' || data['image'] instanceof String)) {
            throw new Error("Expected the field `image` to be a primitive type in the JSON string but got " + data['image']);
        }
        // validate the optional field `item`
        if (data['item']) { // data not null
          CardItem.validateJSON(data['item']);
        }
        // validate the optional field `legal`
        if (data['legal']) { // data not null
          CardLegal.validateJSON(data['legal']);
        }
        // ensure the json data is a string
        if (data['localId'] && !(typeof data['localId'] === 'string' || data['localId'] instanceof String)) {
            throw new Error("Expected the field `localId` to be a primitive type in the JSON string but got " + data['localId']);
        }
        // ensure the json data is a string
        if (data['name'] && !(typeof data['name'] === 'string' || data['name'] instanceof String)) {
            throw new Error("Expected the field `name` to be a primitive type in the JSON string but got " + data['name']);
        }
        // ensure the json data is a string
        if (data['rarity'] && !(typeof data['rarity'] === 'string' || data['rarity'] instanceof String)) {
            throw new Error("Expected the field `rarity` to be a primitive type in the JSON string but got " + data['rarity']);
        }
        // ensure the json data is a string
        if (data['regulationMark'] && !(typeof data['regulationMark'] === 'string' || data['regulationMark'] instanceof String)) {
            throw new Error("Expected the field `regulationMark` to be a primitive type in the JSON string but got " + data['regulationMark']);
        }
        // ensure the json data is an array
        if (!Array.isArray(data['resistances'])) {
            throw new Error("Expected the field `resistances` to be an array in the JSON data but got " + data['resistances']);
        }
        // validate the optional field `set`
        if (data['set']) { // data not null
          SetResume.validateJSON(data['set']);
        }
        // ensure the json data is a string
        if (data['stage'] && !(typeof data['stage'] === 'string' || data['stage'] instanceof String)) {
            throw new Error("Expected the field `stage` to be a primitive type in the JSON string but got " + data['stage']);
        }
        // ensure the json data is a string
        if (data['suffix'] && !(typeof data['suffix'] === 'string' || data['suffix'] instanceof String)) {
            throw new Error("Expected the field `suffix` to be a primitive type in the JSON string but got " + data['suffix']);
        }
        // ensure the json data is a string
        if (data['trainerType'] && !(typeof data['trainerType'] === 'string' || data['trainerType'] instanceof String)) {
            throw new Error("Expected the field `trainerType` to be a primitive type in the JSON string but got " + data['trainerType']);
        }
        // ensure the json data is an array
        if (!Array.isArray(data['types'])) {
            throw new Error("Expected the field `types` to be an array in the JSON data but got " + data['types']);
        }
        // validate the optional field `variants`
        if (data['variants']) { // data not null
          CardVariants.validateJSON(data['variants']);
        }
        // ensure the json data is an array
        if (!Array.isArray(data['weaknesses'])) {
            throw new Error("Expected the field `weaknesses` to be an array in the JSON data but got " + data['weaknesses']);
        }

        return true;
    }


}

Card.RequiredProperties = ["category", "id", "legal", "localId", "name", "rarity", "set"];

/**
 * @member {Array.<module:model/CardAbilitiesInner>} abilities
 */
Card.prototype['abilities'] = undefined;

/**
 * @member {Array.<module:model/CardAttacksInner>} attacks
 */
Card.prototype['attacks'] = undefined;

/**
 * @member {String} category
 */
Card.prototype['category'] = undefined;

/**
 * @member {String} description
 */
Card.prototype['description'] = undefined;

/**
 * @member {Array.<Number>} dexId
 */
Card.prototype['dexId'] = undefined;

/**
 * @member {String} energyType
 */
Card.prototype['energyType'] = undefined;

/**
 * @member {String} evolveFrom
 */
Card.prototype['evolveFrom'] = undefined;

/**
 * @member {Number} hp
 */
Card.prototype['hp'] = undefined;

/**
 * @member {String} id
 */
Card.prototype['id'] = undefined;

/**
 * @member {String} illustrator
 */
Card.prototype['illustrator'] = undefined;

/**
 * @member {String} image
 */
Card.prototype['image'] = undefined;

/**
 * @member {module:model/CardItem} item
 */
Card.prototype['item'] = undefined;

/**
 * @member {module:model/CardLegal} legal
 */
Card.prototype['legal'] = undefined;

/**
 * @member {Number} level
 */
Card.prototype['level'] = undefined;

/**
 * @member {String} localId
 */
Card.prototype['localId'] = undefined;

/**
 * @member {String} name
 */
Card.prototype['name'] = undefined;

/**
 * @member {String} rarity
 */
Card.prototype['rarity'] = undefined;

/**
 * @member {String} regulationMark
 */
Card.prototype['regulationMark'] = undefined;

/**
 * @member {Array.<Array.<module:model/WeakResInner>>} resistances
 */
Card.prototype['resistances'] = undefined;

/**
 * @member {Number} retreat
 */
Card.prototype['retreat'] = undefined;

/**
 * @member {module:model/SetResume} set
 */
Card.prototype['set'] = undefined;

/**
 * @member {String} stage
 */
Card.prototype['stage'] = undefined;

/**
 * @member {String} suffix
 */
Card.prototype['suffix'] = undefined;

/**
 * @member {String} trainerType
 */
Card.prototype['trainerType'] = undefined;

/**
 * @member {Array.<String>} types
 */
Card.prototype['types'] = undefined;

/**
 * @member {module:model/CardVariants} variants
 */
Card.prototype['variants'] = undefined;

/**
 * @member {Array.<Array.<module:model/WeakResInner>>} weaknesses
 */
Card.prototype['weaknesses'] = undefined;






export default Card;

