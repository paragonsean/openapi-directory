/**
 * TCGdex API
 * A Multilanguage Pok√©mon TCG Database with Cards Pictures and most of the informations contained on the cards. You can find out more about TCGdex at [https://www.tcgdex.net](https://www.tcgdex.net) or on [Discord](https://discord.gg/NehYTAhsZE).
 *
 * The version of the OpenAPI document: 2.0.0
 * Contact: contact@tcgdex.net
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The CardItem model module.
 * @module model/CardItem
 * @version 2.0.0
 */
class CardItem {
    /**
     * Constructs a new <code>CardItem</code>.
     * @alias module:model/CardItem
     * @param effect {String} 
     * @param name {String} 
     */
    constructor(effect, name) { 
        
        CardItem.initialize(this, effect, name);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, effect, name) { 
        obj['effect'] = effect;
        obj['name'] = name;
    }

    /**
     * Constructs a <code>CardItem</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/CardItem} obj Optional instance to populate.
     * @return {module:model/CardItem} The populated <code>CardItem</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new CardItem();

            if (data.hasOwnProperty('effect')) {
                obj['effect'] = ApiClient.convertToType(data['effect'], 'String');
            }
            if (data.hasOwnProperty('name')) {
                obj['name'] = ApiClient.convertToType(data['name'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>CardItem</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>CardItem</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of CardItem.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // ensure the json data is a string
        if (data['effect'] && !(typeof data['effect'] === 'string' || data['effect'] instanceof String)) {
            throw new Error("Expected the field `effect` to be a primitive type in the JSON string but got " + data['effect']);
        }
        // ensure the json data is a string
        if (data['name'] && !(typeof data['name'] === 'string' || data['name'] instanceof String)) {
            throw new Error("Expected the field `name` to be a primitive type in the JSON string but got " + data['name']);
        }

        return true;
    }


}

CardItem.RequiredProperties = ["effect", "name"];

/**
 * @member {String} effect
 */
CardItem.prototype['effect'] = undefined;

/**
 * @member {String} name
 */
CardItem.prototype['name'] = undefined;






export default CardItem;

