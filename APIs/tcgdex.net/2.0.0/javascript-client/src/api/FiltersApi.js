/**
 * TCGdex API
 * A Multilanguage Pok√©mon TCG Database with Cards Pictures and most of the informations contained on the cards. You can find out more about TCGdex at [https://www.tcgdex.net](https://www.tcgdex.net) or on [Discord](https://discord.gg/NehYTAhsZE).
 *
 * The version of the OpenAPI document: 2.0.0
 * Contact: contact@tcgdex.net
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import CardResume from '../model/CardResume';
import Serie from '../model/Serie';
import SerieResume from '../model/SerieResume';
import Set from '../model/Set';
import SetResume from '../model/SetResume';
import StringEndpoint from '../model/StringEndpoint';

/**
* Filters service.
* @module api/FiltersApi
* @version 2.0.0
*/
export default class FiltersApi {

    /**
    * Constructs a new FiltersApi. 
    * @alias module:api/FiltersApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the categoriesCategoryGet operation.
     * @callback module:api/FiltersApi~categoriesCategoryGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/StringEndpoint} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} category 
     * @param {module:api/FiltersApi~categoriesCategoryGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/StringEndpoint}
     */
    categoriesCategoryGet(category, callback) {
      let postBody = null;
      // verify the required parameter 'category' is set
      if (category === undefined || category === null) {
        throw new Error("Missing the required parameter 'category' when calling categoriesCategoryGet");
      }

      let pathParams = {
        'category': category
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = StringEndpoint;
      return this.apiClient.callApi(
        '/categories/{category}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the categoriesGet operation.
     * @callback module:api/FiltersApi~categoriesGetCallback
     * @param {String} error Error message, if any.
     * @param {Array.<String>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {module:api/FiltersApi~categoriesGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<String>}
     */
    categoriesGet(callback) {
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ['String'];
      return this.apiClient.callApi(
        '/categories', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the dexIdsDexIdGet operation.
     * @callback module:api/FiltersApi~dexIdsDexIdGetCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/CardResume>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} dexId 
     * @param {module:api/FiltersApi~dexIdsDexIdGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/CardResume>}
     */
    dexIdsDexIdGet(dexId, callback) {
      let postBody = null;
      // verify the required parameter 'dexId' is set
      if (dexId === undefined || dexId === null) {
        throw new Error("Missing the required parameter 'dexId' when calling dexIdsDexIdGet");
      }

      let pathParams = {
        'dexId': dexId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [CardResume];
      return this.apiClient.callApi(
        '/dex-ids/{dexId}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the dexIdsGet operation.
     * @callback module:api/FiltersApi~dexIdsGetCallback
     * @param {String} error Error message, if any.
     * @param {Array.<String>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {module:api/FiltersApi~dexIdsGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<String>}
     */
    dexIdsGet(callback) {
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ['String'];
      return this.apiClient.callApi(
        '/dex-ids', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the energyTypesEnergyTypeGet operation.
     * @callback module:api/FiltersApi~energyTypesEnergyTypeGetCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/CardResume>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} energyType 
     * @param {module:api/FiltersApi~energyTypesEnergyTypeGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/CardResume>}
     */
    energyTypesEnergyTypeGet(energyType, callback) {
      let postBody = null;
      // verify the required parameter 'energyType' is set
      if (energyType === undefined || energyType === null) {
        throw new Error("Missing the required parameter 'energyType' when calling energyTypesEnergyTypeGet");
      }

      let pathParams = {
        'energy-type': energyType
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [CardResume];
      return this.apiClient.callApi(
        '/energy-types/{energy-type}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the energyTypesGet operation.
     * @callback module:api/FiltersApi~energyTypesGetCallback
     * @param {String} error Error message, if any.
     * @param {Array.<String>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {module:api/FiltersApi~energyTypesGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<String>}
     */
    energyTypesGet(callback) {
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ['String'];
      return this.apiClient.callApi(
        '/energy-types', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the hpGet operation.
     * @callback module:api/FiltersApi~hpGetCallback
     * @param {String} error Error message, if any.
     * @param {Array.<String>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {module:api/FiltersApi~hpGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<String>}
     */
    hpGet(callback) {
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ['String'];
      return this.apiClient.callApi(
        '/hp', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the hpHpGet operation.
     * @callback module:api/FiltersApi~hpHpGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/StringEndpoint} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} hp 
     * @param {module:api/FiltersApi~hpHpGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/StringEndpoint}
     */
    hpHpGet(hp, callback) {
      let postBody = null;
      // verify the required parameter 'hp' is set
      if (hp === undefined || hp === null) {
        throw new Error("Missing the required parameter 'hp' when calling hpHpGet");
      }

      let pathParams = {
        'hp': hp
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = StringEndpoint;
      return this.apiClient.callApi(
        '/hp/{hp}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the illustratorsGet operation.
     * @callback module:api/FiltersApi~illustratorsGetCallback
     * @param {String} error Error message, if any.
     * @param {Array.<String>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {module:api/FiltersApi~illustratorsGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<String>}
     */
    illustratorsGet(callback) {
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ['String'];
      return this.apiClient.callApi(
        '/illustrators', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the illustratorsIllustratorGet operation.
     * @callback module:api/FiltersApi~illustratorsIllustratorGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/StringEndpoint} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} illustrator 
     * @param {module:api/FiltersApi~illustratorsIllustratorGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/StringEndpoint}
     */
    illustratorsIllustratorGet(illustrator, callback) {
      let postBody = null;
      // verify the required parameter 'illustrator' is set
      if (illustrator === undefined || illustrator === null) {
        throw new Error("Missing the required parameter 'illustrator' when calling illustratorsIllustratorGet");
      }

      let pathParams = {
        'illustrator': illustrator
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = StringEndpoint;
      return this.apiClient.callApi(
        '/illustrators/{illustrator}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the raritiesGet operation.
     * @callback module:api/FiltersApi~raritiesGetCallback
     * @param {String} error Error message, if any.
     * @param {Array.<String>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {module:api/FiltersApi~raritiesGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<String>}
     */
    raritiesGet(callback) {
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ['String'];
      return this.apiClient.callApi(
        '/rarities', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the raritiesRarityGet operation.
     * @callback module:api/FiltersApi~raritiesRarityGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/StringEndpoint} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} rarity 
     * @param {module:api/FiltersApi~raritiesRarityGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/StringEndpoint}
     */
    raritiesRarityGet(rarity, callback) {
      let postBody = null;
      // verify the required parameter 'rarity' is set
      if (rarity === undefined || rarity === null) {
        throw new Error("Missing the required parameter 'rarity' when calling raritiesRarityGet");
      }

      let pathParams = {
        'rarity': rarity
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = StringEndpoint;
      return this.apiClient.callApi(
        '/rarities/{rarity}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the regulationMarksGet operation.
     * @callback module:api/FiltersApi~regulationMarksGetCallback
     * @param {String} error Error message, if any.
     * @param {Array.<String>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {module:api/FiltersApi~regulationMarksGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<String>}
     */
    regulationMarksGet(callback) {
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ['String'];
      return this.apiClient.callApi(
        '/regulation-marks', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the regulationMarksRegulationMarkGet operation.
     * @callback module:api/FiltersApi~regulationMarksRegulationMarkGetCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/CardResume>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} regulationMark 
     * @param {module:api/FiltersApi~regulationMarksRegulationMarkGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/CardResume>}
     */
    regulationMarksRegulationMarkGet(regulationMark, callback) {
      let postBody = null;
      // verify the required parameter 'regulationMark' is set
      if (regulationMark === undefined || regulationMark === null) {
        throw new Error("Missing the required parameter 'regulationMark' when calling regulationMarksRegulationMarkGet");
      }

      let pathParams = {
        'regulation-mark': regulationMark
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [CardResume];
      return this.apiClient.callApi(
        '/regulation-marks/{regulation-mark}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the retreatsGet operation.
     * @callback module:api/FiltersApi~retreatsGetCallback
     * @param {String} error Error message, if any.
     * @param {Array.<String>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {module:api/FiltersApi~retreatsGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<String>}
     */
    retreatsGet(callback) {
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ['String'];
      return this.apiClient.callApi(
        '/retreats', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the retreatsRetreatGet operation.
     * @callback module:api/FiltersApi~retreatsRetreatGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/StringEndpoint} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} retreat 
     * @param {module:api/FiltersApi~retreatsRetreatGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/StringEndpoint}
     */
    retreatsRetreatGet(retreat, callback) {
      let postBody = null;
      // verify the required parameter 'retreat' is set
      if (retreat === undefined || retreat === null) {
        throw new Error("Missing the required parameter 'retreat' when calling retreatsRetreatGet");
      }

      let pathParams = {
        'retreat': retreat
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = StringEndpoint;
      return this.apiClient.callApi(
        '/retreats/{retreat}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the seriesGet operation.
     * @callback module:api/FiltersApi~seriesGetCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/SerieResume>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {module:api/FiltersApi~seriesGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/SerieResume>}
     */
    seriesGet(callback) {
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [SerieResume];
      return this.apiClient.callApi(
        '/series', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the seriesSerieGet operation.
     * @callback module:api/FiltersApi~seriesSerieGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Serie} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} serie the serie ID or name
     * @param {module:api/FiltersApi~seriesSerieGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Serie}
     */
    seriesSerieGet(serie, callback) {
      let postBody = null;
      // verify the required parameter 'serie' is set
      if (serie === undefined || serie === null) {
        throw new Error("Missing the required parameter 'serie' when calling seriesSerieGet");
      }

      let pathParams = {
        'serie': serie
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Serie;
      return this.apiClient.callApi(
        '/series/{serie}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the setsGet operation.
     * @callback module:api/FiltersApi~setsGetCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/SetResume>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {module:api/FiltersApi~setsGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/SetResume>}
     */
    setsGet(callback) {
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [SetResume];
      return this.apiClient.callApi(
        '/sets', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the setsSetGet operation.
     * @callback module:api/FiltersApi~setsSetGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Set} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} set the set ID or the set name
     * @param {module:api/FiltersApi~setsSetGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Set}
     */
    setsSetGet(set, callback) {
      let postBody = null;
      // verify the required parameter 'set' is set
      if (set === undefined || set === null) {
        throw new Error("Missing the required parameter 'set' when calling setsSetGet");
      }

      let pathParams = {
        'set': set
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Set;
      return this.apiClient.callApi(
        '/sets/{set}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the stagesGet operation.
     * @callback module:api/FiltersApi~stagesGetCallback
     * @param {String} error Error message, if any.
     * @param {Array.<String>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {module:api/FiltersApi~stagesGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<String>}
     */
    stagesGet(callback) {
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ['String'];
      return this.apiClient.callApi(
        '/stages', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the stagesStageGet operation.
     * @callback module:api/FiltersApi~stagesStageGetCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/CardResume>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} stage 
     * @param {module:api/FiltersApi~stagesStageGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/CardResume>}
     */
    stagesStageGet(stage, callback) {
      let postBody = null;
      // verify the required parameter 'stage' is set
      if (stage === undefined || stage === null) {
        throw new Error("Missing the required parameter 'stage' when calling stagesStageGet");
      }

      let pathParams = {
        'stage': stage
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [CardResume];
      return this.apiClient.callApi(
        '/stages/{stage}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the suffixesGet operation.
     * @callback module:api/FiltersApi~suffixesGetCallback
     * @param {String} error Error message, if any.
     * @param {Array.<String>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {module:api/FiltersApi~suffixesGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<String>}
     */
    suffixesGet(callback) {
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ['String'];
      return this.apiClient.callApi(
        '/suffixes', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the suffixesSuffixGet operation.
     * @callback module:api/FiltersApi~suffixesSuffixGetCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/CardResume>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} suffix 
     * @param {module:api/FiltersApi~suffixesSuffixGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/CardResume>}
     */
    suffixesSuffixGet(suffix, callback) {
      let postBody = null;
      // verify the required parameter 'suffix' is set
      if (suffix === undefined || suffix === null) {
        throw new Error("Missing the required parameter 'suffix' when calling suffixesSuffixGet");
      }

      let pathParams = {
        'suffix': suffix
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [CardResume];
      return this.apiClient.callApi(
        '/suffixes/{suffix}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the trainerTypesGet operation.
     * @callback module:api/FiltersApi~trainerTypesGetCallback
     * @param {String} error Error message, if any.
     * @param {Array.<String>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {module:api/FiltersApi~trainerTypesGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<String>}
     */
    trainerTypesGet(callback) {
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ['String'];
      return this.apiClient.callApi(
        '/trainer-types', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the trainerTypesTrainerTypeGet operation.
     * @callback module:api/FiltersApi~trainerTypesTrainerTypeGetCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/CardResume>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} trainerType 
     * @param {module:api/FiltersApi~trainerTypesTrainerTypeGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/CardResume>}
     */
    trainerTypesTrainerTypeGet(trainerType, callback) {
      let postBody = null;
      // verify the required parameter 'trainerType' is set
      if (trainerType === undefined || trainerType === null) {
        throw new Error("Missing the required parameter 'trainerType' when calling trainerTypesTrainerTypeGet");
      }

      let pathParams = {
        'trainer-type': trainerType
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [CardResume];
      return this.apiClient.callApi(
        '/trainer-types/{trainer-type}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the typesGet operation.
     * @callback module:api/FiltersApi~typesGetCallback
     * @param {String} error Error message, if any.
     * @param {Array.<String>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {module:api/FiltersApi~typesGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<String>}
     */
    typesGet(callback) {
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ['String'];
      return this.apiClient.callApi(
        '/types', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the typesTypeGet operation.
     * @callback module:api/FiltersApi~typesTypeGetCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/CardResume>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} type 
     * @param {module:api/FiltersApi~typesTypeGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/CardResume>}
     */
    typesTypeGet(type, callback) {
      let postBody = null;
      // verify the required parameter 'type' is set
      if (type === undefined || type === null) {
        throw new Error("Missing the required parameter 'type' when calling typesTypeGet");
      }

      let pathParams = {
        'type': type
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [CardResume];
      return this.apiClient.callApi(
        '/types/{type}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the variantsGet operation.
     * @callback module:api/FiltersApi~variantsGetCallback
     * @param {String} error Error message, if any.
     * @param {Array.<String>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {module:api/FiltersApi~variantsGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<String>}
     */
    variantsGet(callback) {
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ['String'];
      return this.apiClient.callApi(
        '/variants', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the variantsVariantGet operation.
     * @callback module:api/FiltersApi~variantsVariantGetCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/CardResume>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} variant 
     * @param {module:api/FiltersApi~variantsVariantGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/CardResume>}
     */
    variantsVariantGet(variant, callback) {
      let postBody = null;
      // verify the required parameter 'variant' is set
      if (variant === undefined || variant === null) {
        throw new Error("Missing the required parameter 'variant' when calling variantsVariantGet");
      }

      let pathParams = {
        'variant': variant
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [CardResume];
      return this.apiClient.callApi(
        '/variants/{variant}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
