/**
 * TCGdex API
 * A Multilanguage Pok√©mon TCG Database with Cards Pictures and most of the informations contained on the cards. You can find out more about TCGdex at [https://www.tcgdex.net](https://www.tcgdex.net) or on [Discord](https://discord.gg/NehYTAhsZE).
 *
 * The version of the OpenAPI document: 2.0.0
 * Contact: contact@tcgdex.net
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import Card from '../model/Card';
import CardResume from '../model/CardResume';

/**
* Cards service.
* @module api/CardsApi
* @version 2.0.0
*/
export default class CardsApi {

    /**
    * Constructs a new CardsApi. 
    * @alias module:api/CardsApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the cards operation.
     * @callback module:api/CardsApi~cardsCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/CardResume>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * fetch the list of cards
     * desc
     * @param {module:api/CardsApi~cardsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/CardResume>}
     */
    cards(callback) {
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [CardResume];
      return this.apiClient.callApi(
        '/cards', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the findPetsByTags operation.
     * @callback module:api/CardsApi~findPetsByTagsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Card} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Finds Card by Global ID
     * Find a defined card thatusing its global id
     * @param {String} cardId Tags to filter by
     * @param {module:api/CardsApi~findPetsByTagsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Card}
     */
    findPetsByTags(cardId, callback) {
      let postBody = null;
      // verify the required parameter 'cardId' is set
      if (cardId === undefined || cardId === null) {
        throw new Error("Missing the required parameter 'cardId' when calling findPetsByTags");
      }

      let pathParams = {
        'cardId': cardId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Card;
      return this.apiClient.callApi(
        '/cards/{cardId}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the setsSetCardLocalIdGet operation.
     * @callback module:api/CardsApi~setsSetCardLocalIdGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Card} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} set 
     * @param {String} cardLocalId 
     * @param {module:api/CardsApi~setsSetCardLocalIdGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Card}
     */
    setsSetCardLocalIdGet(set, cardLocalId, callback) {
      let postBody = null;
      // verify the required parameter 'set' is set
      if (set === undefined || set === null) {
        throw new Error("Missing the required parameter 'set' when calling setsSetCardLocalIdGet");
      }
      // verify the required parameter 'cardLocalId' is set
      if (cardLocalId === undefined || cardLocalId === null) {
        throw new Error("Missing the required parameter 'cardLocalId' when calling setsSetCardLocalIdGet");
      }

      let pathParams = {
        'set': set,
        'cardLocalId': cardLocalId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Card;
      return this.apiClient.callApi(
        '/sets/{set}/{cardLocalId}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
