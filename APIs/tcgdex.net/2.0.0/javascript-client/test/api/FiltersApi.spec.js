/**
 * TCGdex API
 * A Multilanguage Pok√©mon TCG Database with Cards Pictures and most of the informations contained on the cards. You can find out more about TCGdex at [https://www.tcgdex.net](https://www.tcgdex.net) or on [Discord](https://discord.gg/NehYTAhsZE).
 *
 * The version of the OpenAPI document: 2.0.0
 * Contact: contact@tcgdex.net
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', process.cwd()+'/src/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require(process.cwd()+'/src/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.TcGdexApi);
  }
}(this, function(expect, TcGdexApi) {
  'use strict';

  var instance;

  beforeEach(function() {
    instance = new TcGdexApi.FiltersApi();
  });

  var getProperty = function(object, getter, property) {
    // Use getter method if present; otherwise, get the property directly.
    if (typeof object[getter] === 'function')
      return object[getter]();
    else
      return object[property];
  }

  var setProperty = function(object, setter, property, value) {
    // Use setter method if present; otherwise, set the property directly.
    if (typeof object[setter] === 'function')
      object[setter](value);
    else
      object[property] = value;
  }

  describe('FiltersApi', function() {
    describe('categoriesCategoryGet', function() {
      it('should call categoriesCategoryGet successfully', function(done) {
        //uncomment below and update the code to test categoriesCategoryGet
        //instance.categoriesCategoryGet(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('categoriesGet', function() {
      it('should call categoriesGet successfully', function(done) {
        //uncomment below and update the code to test categoriesGet
        //instance.categoriesGet(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('dexIdsDexIdGet', function() {
      it('should call dexIdsDexIdGet successfully', function(done) {
        //uncomment below and update the code to test dexIdsDexIdGet
        //instance.dexIdsDexIdGet(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('dexIdsGet', function() {
      it('should call dexIdsGet successfully', function(done) {
        //uncomment below and update the code to test dexIdsGet
        //instance.dexIdsGet(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('energyTypesEnergyTypeGet', function() {
      it('should call energyTypesEnergyTypeGet successfully', function(done) {
        //uncomment below and update the code to test energyTypesEnergyTypeGet
        //instance.energyTypesEnergyTypeGet(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('energyTypesGet', function() {
      it('should call energyTypesGet successfully', function(done) {
        //uncomment below and update the code to test energyTypesGet
        //instance.energyTypesGet(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('hpGet', function() {
      it('should call hpGet successfully', function(done) {
        //uncomment below and update the code to test hpGet
        //instance.hpGet(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('hpHpGet', function() {
      it('should call hpHpGet successfully', function(done) {
        //uncomment below and update the code to test hpHpGet
        //instance.hpHpGet(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('illustratorsGet', function() {
      it('should call illustratorsGet successfully', function(done) {
        //uncomment below and update the code to test illustratorsGet
        //instance.illustratorsGet(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('illustratorsIllustratorGet', function() {
      it('should call illustratorsIllustratorGet successfully', function(done) {
        //uncomment below and update the code to test illustratorsIllustratorGet
        //instance.illustratorsIllustratorGet(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('raritiesGet', function() {
      it('should call raritiesGet successfully', function(done) {
        //uncomment below and update the code to test raritiesGet
        //instance.raritiesGet(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('raritiesRarityGet', function() {
      it('should call raritiesRarityGet successfully', function(done) {
        //uncomment below and update the code to test raritiesRarityGet
        //instance.raritiesRarityGet(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('regulationMarksGet', function() {
      it('should call regulationMarksGet successfully', function(done) {
        //uncomment below and update the code to test regulationMarksGet
        //instance.regulationMarksGet(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('regulationMarksRegulationMarkGet', function() {
      it('should call regulationMarksRegulationMarkGet successfully', function(done) {
        //uncomment below and update the code to test regulationMarksRegulationMarkGet
        //instance.regulationMarksRegulationMarkGet(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('retreatsGet', function() {
      it('should call retreatsGet successfully', function(done) {
        //uncomment below and update the code to test retreatsGet
        //instance.retreatsGet(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('retreatsRetreatGet', function() {
      it('should call retreatsRetreatGet successfully', function(done) {
        //uncomment below and update the code to test retreatsRetreatGet
        //instance.retreatsRetreatGet(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('seriesGet', function() {
      it('should call seriesGet successfully', function(done) {
        //uncomment below and update the code to test seriesGet
        //instance.seriesGet(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('seriesSerieGet', function() {
      it('should call seriesSerieGet successfully', function(done) {
        //uncomment below and update the code to test seriesSerieGet
        //instance.seriesSerieGet(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('setsGet', function() {
      it('should call setsGet successfully', function(done) {
        //uncomment below and update the code to test setsGet
        //instance.setsGet(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('setsSetGet', function() {
      it('should call setsSetGet successfully', function(done) {
        //uncomment below and update the code to test setsSetGet
        //instance.setsSetGet(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('stagesGet', function() {
      it('should call stagesGet successfully', function(done) {
        //uncomment below and update the code to test stagesGet
        //instance.stagesGet(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('stagesStageGet', function() {
      it('should call stagesStageGet successfully', function(done) {
        //uncomment below and update the code to test stagesStageGet
        //instance.stagesStageGet(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('suffixesGet', function() {
      it('should call suffixesGet successfully', function(done) {
        //uncomment below and update the code to test suffixesGet
        //instance.suffixesGet(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('suffixesSuffixGet', function() {
      it('should call suffixesSuffixGet successfully', function(done) {
        //uncomment below and update the code to test suffixesSuffixGet
        //instance.suffixesSuffixGet(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('trainerTypesGet', function() {
      it('should call trainerTypesGet successfully', function(done) {
        //uncomment below and update the code to test trainerTypesGet
        //instance.trainerTypesGet(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('trainerTypesTrainerTypeGet', function() {
      it('should call trainerTypesTrainerTypeGet successfully', function(done) {
        //uncomment below and update the code to test trainerTypesTrainerTypeGet
        //instance.trainerTypesTrainerTypeGet(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('typesGet', function() {
      it('should call typesGet successfully', function(done) {
        //uncomment below and update the code to test typesGet
        //instance.typesGet(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('typesTypeGet', function() {
      it('should call typesTypeGet successfully', function(done) {
        //uncomment below and update the code to test typesTypeGet
        //instance.typesTypeGet(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('variantsGet', function() {
      it('should call variantsGet successfully', function(done) {
        //uncomment below and update the code to test variantsGet
        //instance.variantsGet(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('variantsVariantGet', function() {
      it('should call variantsVariantGet successfully', function(done) {
        //uncomment below and update the code to test variantsVariantGet
        //instance.variantsVariantGet(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
  });

}));
